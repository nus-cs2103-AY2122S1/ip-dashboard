[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"ryanpeh"},"content":"    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.9\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"ryanpeh"},"content":"javafx {","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"ryanpeh"},"content":"    version \u003d \"15.0.1\"","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"ryanpeh"},"content":"    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"ryanpeh"},"content":"}","lastModifiedDate":"2021-09-02"},{"lineNumber":13,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"ryanpeh"},"content":"    mainClassName \u003d \"duke.Duke\"","lastModifiedDate":"2021-08-30"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"run {","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"ryanpeh"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2021-09-06"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":56,"author":{"gitId":"ryanpeh"},"content":"repositories {","lastModifiedDate":"2021-09-02"},{"lineNumber":57,"author":{"gitId":"ryanpeh"},"content":"    mavenCentral()","lastModifiedDate":"2021-09-02"},{"lineNumber":58,"author":{"gitId":"ryanpeh"},"content":"}","lastModifiedDate":"2021-09-02"},{"lineNumber":59,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":60,"author":{"gitId":"ryanpeh"},"content":"dependencies {","lastModifiedDate":"2021-09-02"},{"lineNumber":61,"author":{"gitId":"ryanpeh"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":62,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":63,"author":{"gitId":"ryanpeh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":64,"author":{"gitId":"ryanpeh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":65,"author":{"gitId":"ryanpeh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":66,"author":{"gitId":"ryanpeh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":67,"author":{"gitId":"ryanpeh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":68,"author":{"gitId":"ryanpeh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":69,"author":{"gitId":"ryanpeh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":70,"author":{"gitId":"ryanpeh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":71,"author":{"gitId":"ryanpeh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":72,"author":{"gitId":"ryanpeh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":73,"author":{"gitId":"ryanpeh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":74,"author":{"gitId":"ryanpeh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":75,"author":{"gitId":"ryanpeh"},"content":"}","lastModifiedDate":"2021-09-02"},{"lineNumber":76,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"ryanpeh":31,"-":45}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ryanpeh"},"content":"package duke;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"ryanpeh"},"content":"import duke.commands.Command;","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"ryanpeh"},"content":"import duke.gui.Main;","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"ryanpeh"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"ryanpeh"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"ryanpeh"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"ryanpeh"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"ryanpeh"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"ryanpeh"},"content":" * The main class which runs the Duke chatbot.","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"ryanpeh"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"ryanpeh"},"content":"public class Duke extends Application {","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"ryanpeh"},"content":"    private Storage storage;","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"ryanpeh"},"content":"    private TaskList taskList;","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"ryanpeh"},"content":"    private Ui ui;","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"ryanpeh"},"content":"    private Parser parser;","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"ryanpeh"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"ryanpeh"},"content":"     * Constructs a Duke object.","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"ryanpeh"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"ryanpeh"},"content":"    public Duke() {","lastModifiedDate":"2021-09-02"},{"lineNumber":24,"author":{"gitId":"ryanpeh"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"ryanpeh"},"content":"        parser \u003d new Parser();","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"ryanpeh"},"content":"        storage \u003d new Storage(\"data/tasks.txt\");","lastModifiedDate":"2021-09-02"},{"lineNumber":27,"author":{"gitId":"ryanpeh"},"content":"        try {","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"ryanpeh"},"content":"            taskList \u003d storage.load();","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"ryanpeh"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"ryanpeh"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2021-09-02"},{"lineNumber":31,"author":{"gitId":"ryanpeh"},"content":"            ui.showLoadingError();","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"ryanpeh"},"content":"            storage.createNewFile();","lastModifiedDate":"2021-08-29"},{"lineNumber":33,"author":{"gitId":"ryanpeh"},"content":"            taskList \u003d new TaskList();","lastModifiedDate":"2021-08-29"},{"lineNumber":34,"author":{"gitId":"ryanpeh"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":35,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":36,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":37,"author":{"gitId":"ryanpeh"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":38,"author":{"gitId":"ryanpeh"},"content":"     * Gets the response from Duke based on the input from the user.","lastModifiedDate":"2021-09-06"},{"lineNumber":39,"author":{"gitId":"ryanpeh"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":40,"author":{"gitId":"ryanpeh"},"content":"     * @param input The input String entered by the user.","lastModifiedDate":"2021-09-06"},{"lineNumber":41,"author":{"gitId":"ryanpeh"},"content":"     * @return The response from Duke.","lastModifiedDate":"2021-09-06"},{"lineNumber":42,"author":{"gitId":"ryanpeh"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":43,"author":{"gitId":"ryanpeh"},"content":"    public String getResponse(String input) {","lastModifiedDate":"2021-09-02"},{"lineNumber":44,"author":{"gitId":"ryanpeh"},"content":"        try {","lastModifiedDate":"2021-08-29"},{"lineNumber":45,"author":{"gitId":"ryanpeh"},"content":"            Command c \u003d parser.parse(input);","lastModifiedDate":"2021-09-02"},{"lineNumber":46,"author":{"gitId":"ryanpeh"},"content":"            String response \u003d c.execute(taskList, ui, storage);","lastModifiedDate":"2021-09-02"},{"lineNumber":47,"author":{"gitId":"ryanpeh"},"content":"            if (c.isExit()) {","lastModifiedDate":"2021-09-02"},{"lineNumber":48,"author":{"gitId":"ryanpeh"},"content":"                System.exit(0);","lastModifiedDate":"2021-09-02"},{"lineNumber":49,"author":{"gitId":"ryanpeh"},"content":"            }","lastModifiedDate":"2021-09-02"},{"lineNumber":50,"author":{"gitId":"ryanpeh"},"content":"            assert !response.isEmpty() : \"Response should not be empty\";","lastModifiedDate":"2021-09-06"},{"lineNumber":51,"author":{"gitId":"ryanpeh"},"content":"            return response;","lastModifiedDate":"2021-09-02"},{"lineNumber":52,"author":{"gitId":"ryanpeh"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-29"},{"lineNumber":53,"author":{"gitId":"ryanpeh"},"content":"            return ui.showError(e.getMessage());","lastModifiedDate":"2021-09-06"},{"lineNumber":54,"author":{"gitId":"ryanpeh"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":55,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":56,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":57,"author":{"gitId":"ryanpeh"},"content":"    /**","lastModifiedDate":"2021-09-10"},{"lineNumber":58,"author":{"gitId":"ryanpeh"},"content":"     * Returns the TaskList.","lastModifiedDate":"2021-09-10"},{"lineNumber":59,"author":{"gitId":"ryanpeh"},"content":"     *","lastModifiedDate":"2021-09-10"},{"lineNumber":60,"author":{"gitId":"ryanpeh"},"content":"     * @return The TaskList","lastModifiedDate":"2021-09-10"},{"lineNumber":61,"author":{"gitId":"ryanpeh"},"content":"     */","lastModifiedDate":"2021-09-10"},{"lineNumber":62,"author":{"gitId":"ryanpeh"},"content":"    public TaskList getTaskList() {","lastModifiedDate":"2021-09-10"},{"lineNumber":63,"author":{"gitId":"ryanpeh"},"content":"        return taskList;","lastModifiedDate":"2021-09-10"},{"lineNumber":64,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-09-10"},{"lineNumber":65,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":66,"author":{"gitId":"ryanpeh"},"content":"    /**","lastModifiedDate":"2021-09-10"},{"lineNumber":67,"author":{"gitId":"ryanpeh"},"content":"     * Returns the Ui.","lastModifiedDate":"2021-09-10"},{"lineNumber":68,"author":{"gitId":"ryanpeh"},"content":"     * @return The Ui.","lastModifiedDate":"2021-09-10"},{"lineNumber":69,"author":{"gitId":"ryanpeh"},"content":"     */","lastModifiedDate":"2021-09-10"},{"lineNumber":70,"author":{"gitId":"ryanpeh"},"content":"    public Ui getUi() {","lastModifiedDate":"2021-09-10"},{"lineNumber":71,"author":{"gitId":"ryanpeh"},"content":"        return ui;","lastModifiedDate":"2021-09-10"},{"lineNumber":72,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-09-10"},{"lineNumber":73,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":74,"author":{"gitId":"ryanpeh"},"content":"    @Override","lastModifiedDate":"2021-09-02"},{"lineNumber":75,"author":{"gitId":"ryanpeh"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2021-09-02"},{"lineNumber":76,"author":{"gitId":"ryanpeh"},"content":"        Label helloWorld \u003d new Label(\"Hello World!\"); // Creating a new Label control","lastModifiedDate":"2021-09-02"},{"lineNumber":77,"author":{"gitId":"ryanpeh"},"content":"        Scene scene \u003d new Scene(helloWorld); // Setting the scene to be our Label","lastModifiedDate":"2021-09-02"},{"lineNumber":78,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":79,"author":{"gitId":"ryanpeh"},"content":"        stage.setScene(scene); // Setting the stage to show our screen","lastModifiedDate":"2021-09-02"},{"lineNumber":80,"author":{"gitId":"ryanpeh"},"content":"        stage.show(); // Render the stage.","lastModifiedDate":"2021-09-02"},{"lineNumber":81,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":82,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":83,"author":{"gitId":"ryanpeh"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-29"},{"lineNumber":84,"author":{"gitId":"ryanpeh"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2021-09-02"},{"lineNumber":85,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":86,"author":{"gitId":"ryanpeh"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"ryanpeh":86}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ryanpeh"},"content":"package duke;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"ryanpeh"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"ryanpeh"},"content":" * Encapsulates the checked exceptions for Duke.","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"ryanpeh"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"ryanpeh"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"ryanpeh"},"content":"    public DukeException(String message) {","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"ryanpeh"},"content":"        super(message);","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"ryanpeh"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"ryanpeh":10}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ryanpeh"},"content":"package duke;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"ryanpeh"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"ryanpeh"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"ryanpeh"},"content":"import duke.commands.Command;","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"ryanpeh"},"content":"import duke.commands.DeadlineCommand;","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"ryanpeh"},"content":"import duke.commands.DeleteCommand;","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"ryanpeh"},"content":"import duke.commands.DoneCommand;","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"ryanpeh"},"content":"import duke.commands.EventCommand;","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"ryanpeh"},"content":"import duke.commands.ExitCommand;","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"ryanpeh"},"content":"import duke.commands.FindCommand;","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"ryanpeh"},"content":"import duke.commands.ListCommand;","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"ryanpeh"},"content":"import duke.commands.ReminderCommand;","lastModifiedDate":"2021-09-10"},{"lineNumber":15,"author":{"gitId":"ryanpeh"},"content":"import duke.commands.TodoCommand;","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"ryanpeh"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"ryanpeh"},"content":" * Represents a parser which parses input from the user.","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"ryanpeh"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"ryanpeh"},"content":"public class Parser {","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":22,"author":{"gitId":"ryanpeh"},"content":"    public static final Pattern COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommand\u003e\\\\S+)(?\u003carguments\u003e.*)\");","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"ryanpeh"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"ryanpeh"},"content":"     * Parses the command from the user and returns the appropriate","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"ryanpeh"},"content":"     * Command based on the command, throws a DukeException if an","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"ryanpeh"},"content":"     * invalid command was entered.","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"ryanpeh"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"ryanpeh"},"content":"     * @param fullCommand The command entered by the user.","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"ryanpeh"},"content":"     * @return The corresponding Command.","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"ryanpeh"},"content":"     * @throws DukeException If invalid command entered by the user.","lastModifiedDate":"2021-08-30"},{"lineNumber":32,"author":{"gitId":"ryanpeh"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"ryanpeh"},"content":"    public Command parse(String fullCommand) throws DukeException {","lastModifiedDate":"2021-08-29"},{"lineNumber":34,"author":{"gitId":"ryanpeh"},"content":"        Matcher matcher \u003d COMMAND_FORMAT.matcher(fullCommand.trim());","lastModifiedDate":"2021-08-29"},{"lineNumber":35,"author":{"gitId":"ryanpeh"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2021-08-29"},{"lineNumber":36,"author":{"gitId":"ryanpeh"},"content":"            throw new DukeException(\"Invalid Command Entered\");","lastModifiedDate":"2021-08-29"},{"lineNumber":37,"author":{"gitId":"ryanpeh"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":38,"author":{"gitId":"ryanpeh"},"content":"        String command \u003d matcher.group(\"command\");","lastModifiedDate":"2021-08-29"},{"lineNumber":39,"author":{"gitId":"ryanpeh"},"content":"        String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2021-08-29"},{"lineNumber":40,"author":{"gitId":"ryanpeh"},"content":"        switch (command) {","lastModifiedDate":"2021-08-29"},{"lineNumber":41,"author":{"gitId":"ryanpeh"},"content":"        case \"bye\":","lastModifiedDate":"2021-08-29"},{"lineNumber":42,"author":{"gitId":"ryanpeh"},"content":"            return new ExitCommand();","lastModifiedDate":"2021-08-29"},{"lineNumber":43,"author":{"gitId":"ryanpeh"},"content":"        case \"list\":","lastModifiedDate":"2021-08-29"},{"lineNumber":44,"author":{"gitId":"ryanpeh"},"content":"            return new ListCommand();","lastModifiedDate":"2021-08-29"},{"lineNumber":45,"author":{"gitId":"ryanpeh"},"content":"        case \"done\":","lastModifiedDate":"2021-08-29"},{"lineNumber":46,"author":{"gitId":"ryanpeh"},"content":"            return new DoneCommand(arguments);","lastModifiedDate":"2021-08-29"},{"lineNumber":47,"author":{"gitId":"ryanpeh"},"content":"        case \"delete\":","lastModifiedDate":"2021-08-29"},{"lineNumber":48,"author":{"gitId":"ryanpeh"},"content":"            return new DeleteCommand(arguments);","lastModifiedDate":"2021-08-29"},{"lineNumber":49,"author":{"gitId":"ryanpeh"},"content":"        case \"todo\":","lastModifiedDate":"2021-08-29"},{"lineNumber":50,"author":{"gitId":"ryanpeh"},"content":"            return new TodoCommand(arguments);","lastModifiedDate":"2021-08-29"},{"lineNumber":51,"author":{"gitId":"ryanpeh"},"content":"        case \"event\":","lastModifiedDate":"2021-08-29"},{"lineNumber":52,"author":{"gitId":"ryanpeh"},"content":"            return new EventCommand(arguments);","lastModifiedDate":"2021-08-29"},{"lineNumber":53,"author":{"gitId":"ryanpeh"},"content":"        case \"deadline\":","lastModifiedDate":"2021-08-29"},{"lineNumber":54,"author":{"gitId":"ryanpeh"},"content":"            return new DeadlineCommand(arguments);","lastModifiedDate":"2021-08-29"},{"lineNumber":55,"author":{"gitId":"ryanpeh"},"content":"        case \"find\":","lastModifiedDate":"2021-08-30"},{"lineNumber":56,"author":{"gitId":"ryanpeh"},"content":"            return new FindCommand(arguments);","lastModifiedDate":"2021-08-30"},{"lineNumber":57,"author":{"gitId":"ryanpeh"},"content":"        case \"remind\":","lastModifiedDate":"2021-09-10"},{"lineNumber":58,"author":{"gitId":"ryanpeh"},"content":"            return new ReminderCommand();","lastModifiedDate":"2021-09-10"},{"lineNumber":59,"author":{"gitId":"ryanpeh"},"content":"        default:","lastModifiedDate":"2021-08-29"},{"lineNumber":60,"author":{"gitId":"ryanpeh"},"content":"            throw new DukeException(\"Invalid Command Entered\");","lastModifiedDate":"2021-08-29"},{"lineNumber":61,"author":{"gitId":"ryanpeh"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":62,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":63,"author":{"gitId":"ryanpeh"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"ryanpeh":63}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ryanpeh"},"content":"package duke;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"ryanpeh"},"content":"import java.io.File;","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"ryanpeh"},"content":"import java.io.FileReader;","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"ryanpeh"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"ryanpeh"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"ryanpeh"},"content":"import java.nio.file.Files;","lastModifiedDate":"2021-09-06"},{"lineNumber":8,"author":{"gitId":"ryanpeh"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2021-09-06"},{"lineNumber":9,"author":{"gitId":"ryanpeh"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"ryanpeh"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"ryanpeh"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"ryanpeh"},"content":"import duke.tasks.Deadline;","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"ryanpeh"},"content":"import duke.tasks.Event;","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"ryanpeh"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"ryanpeh"},"content":"import duke.tasks.Todo;","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"ryanpeh"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"ryanpeh"},"content":" * Represents a storage which allows for reading and writing of tasks to a file.","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"ryanpeh"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"ryanpeh"},"content":"public class Storage {","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"ryanpeh"},"content":"    private static final Pattern STORE_FORMAT \u003d Pattern.compile(\"\\\\[(?\u003ctype\u003e\\\\S)] \\\\[(?\u003cdone\u003e[ X])] (?\u003carguments\u003e.*)\");","lastModifiedDate":"2021-09-06"},{"lineNumber":23,"author":{"gitId":"ryanpeh"},"content":"    private final String fileName;","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"ryanpeh"},"content":"    public Storage(String fileName) {","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"ryanpeh"},"content":"        this.fileName \u003d fileName;","lastModifiedDate":"2021-08-29"},{"lineNumber":27,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"ryanpeh"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"ryanpeh"},"content":"     * Loads stored tasks from a file into a TaskList.","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"ryanpeh"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":32,"author":{"gitId":"ryanpeh"},"content":"     * @return A TaskList with the stored tasks.","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"ryanpeh"},"content":"     * @throws IOException If file is not found.","lastModifiedDate":"2021-08-30"},{"lineNumber":34,"author":{"gitId":"ryanpeh"},"content":"     * @throws DukeException If the format of the file is incorrect.","lastModifiedDate":"2021-08-30"},{"lineNumber":35,"author":{"gitId":"ryanpeh"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":36,"author":{"gitId":"ryanpeh"},"content":"    public TaskList load() throws IOException, DukeException {","lastModifiedDate":"2021-08-30"},{"lineNumber":37,"author":{"gitId":"ryanpeh"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2021-08-29"},{"lineNumber":38,"author":{"gitId":"ryanpeh"},"content":"        Scanner sc \u003d new Scanner(new FileReader(fileName));","lastModifiedDate":"2021-08-29"},{"lineNumber":39,"author":{"gitId":"ryanpeh"},"content":"        while (sc.hasNextLine()) {","lastModifiedDate":"2021-08-29"},{"lineNumber":40,"author":{"gitId":"ryanpeh"},"content":"            String input \u003d sc.nextLine();","lastModifiedDate":"2021-08-29"},{"lineNumber":41,"author":{"gitId":"ryanpeh"},"content":"            Matcher matcher \u003d STORE_FORMAT.matcher(input);","lastModifiedDate":"2021-08-29"},{"lineNumber":42,"author":{"gitId":"ryanpeh"},"content":"            if (!matcher.matches()) {","lastModifiedDate":"2021-08-29"},{"lineNumber":43,"author":{"gitId":"ryanpeh"},"content":"                throw new DukeException(\"Task list corrupted, list will be deleted.\");","lastModifiedDate":"2021-08-30"},{"lineNumber":44,"author":{"gitId":"ryanpeh"},"content":"            }","lastModifiedDate":"2021-08-29"},{"lineNumber":45,"author":{"gitId":"ryanpeh"},"content":"            String type \u003d matcher.group(\"type\");","lastModifiedDate":"2021-08-29"},{"lineNumber":46,"author":{"gitId":"ryanpeh"},"content":"            String done \u003d matcher.group(\"done\");","lastModifiedDate":"2021-08-29"},{"lineNumber":47,"author":{"gitId":"ryanpeh"},"content":"            String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2021-08-29"},{"lineNumber":48,"author":{"gitId":"ryanpeh"},"content":"            String[] parts;","lastModifiedDate":"2021-08-29"},{"lineNumber":49,"author":{"gitId":"ryanpeh"},"content":"            Task task;","lastModifiedDate":"2021-08-29"},{"lineNumber":50,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":51,"author":{"gitId":"ryanpeh"},"content":"            switch (type) {","lastModifiedDate":"2021-08-29"},{"lineNumber":52,"author":{"gitId":"ryanpeh"},"content":"            case \"T\":","lastModifiedDate":"2021-08-29"},{"lineNumber":53,"author":{"gitId":"ryanpeh"},"content":"                task \u003d new Todo(arguments);","lastModifiedDate":"2021-08-29"},{"lineNumber":54,"author":{"gitId":"ryanpeh"},"content":"                if (done.equals(\"X\")) {","lastModifiedDate":"2021-08-29"},{"lineNumber":55,"author":{"gitId":"ryanpeh"},"content":"                    task.markAsDone();","lastModifiedDate":"2021-08-29"},{"lineNumber":56,"author":{"gitId":"ryanpeh"},"content":"                }","lastModifiedDate":"2021-08-29"},{"lineNumber":57,"author":{"gitId":"ryanpeh"},"content":"                taskList.addTask(task);","lastModifiedDate":"2021-08-29"},{"lineNumber":58,"author":{"gitId":"ryanpeh"},"content":"                break;","lastModifiedDate":"2021-08-29"},{"lineNumber":59,"author":{"gitId":"ryanpeh"},"content":"            case \"D\":","lastModifiedDate":"2021-08-29"},{"lineNumber":60,"author":{"gitId":"ryanpeh"},"content":"                parts \u003d arguments.split(\" \\\\(by: |\\\\)\");","lastModifiedDate":"2021-08-29"},{"lineNumber":61,"author":{"gitId":"ryanpeh"},"content":"                task \u003d new Deadline(parts[0], parts[1]);","lastModifiedDate":"2021-08-29"},{"lineNumber":62,"author":{"gitId":"ryanpeh"},"content":"                if (done.equals(\"X\")) {","lastModifiedDate":"2021-08-29"},{"lineNumber":63,"author":{"gitId":"ryanpeh"},"content":"                    task.markAsDone();","lastModifiedDate":"2021-08-29"},{"lineNumber":64,"author":{"gitId":"ryanpeh"},"content":"                }","lastModifiedDate":"2021-08-29"},{"lineNumber":65,"author":{"gitId":"ryanpeh"},"content":"                taskList.addTask(task);","lastModifiedDate":"2021-08-29"},{"lineNumber":66,"author":{"gitId":"ryanpeh"},"content":"                break;","lastModifiedDate":"2021-08-29"},{"lineNumber":67,"author":{"gitId":"ryanpeh"},"content":"            case \"E\":","lastModifiedDate":"2021-08-29"},{"lineNumber":68,"author":{"gitId":"ryanpeh"},"content":"                parts \u003d arguments.split(\" \\\\(at: |\\\\)\");","lastModifiedDate":"2021-08-29"},{"lineNumber":69,"author":{"gitId":"ryanpeh"},"content":"                task \u003d new Event(parts[0], parts[1]);","lastModifiedDate":"2021-08-29"},{"lineNumber":70,"author":{"gitId":"ryanpeh"},"content":"                if (done.equals(\"X\")) {","lastModifiedDate":"2021-08-29"},{"lineNumber":71,"author":{"gitId":"ryanpeh"},"content":"                    task.markAsDone();","lastModifiedDate":"2021-08-29"},{"lineNumber":72,"author":{"gitId":"ryanpeh"},"content":"                }","lastModifiedDate":"2021-08-29"},{"lineNumber":73,"author":{"gitId":"ryanpeh"},"content":"                taskList.addTask(task);","lastModifiedDate":"2021-08-29"},{"lineNumber":74,"author":{"gitId":"ryanpeh"},"content":"                break;","lastModifiedDate":"2021-08-29"},{"lineNumber":75,"author":{"gitId":"ryanpeh"},"content":"            default:","lastModifiedDate":"2021-08-30"},{"lineNumber":76,"author":{"gitId":"ryanpeh"},"content":"                throw new DukeException(\"Task list corrupted, list will be deleted.\");","lastModifiedDate":"2021-09-06"},{"lineNumber":77,"author":{"gitId":"ryanpeh"},"content":"            }","lastModifiedDate":"2021-08-29"},{"lineNumber":78,"author":{"gitId":"ryanpeh"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":79,"author":{"gitId":"ryanpeh"},"content":"        return taskList;","lastModifiedDate":"2021-08-29"},{"lineNumber":80,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":81,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":82,"author":{"gitId":"ryanpeh"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":83,"author":{"gitId":"ryanpeh"},"content":"     * Writes tasks in tasklist into a file.","lastModifiedDate":"2021-08-30"},{"lineNumber":84,"author":{"gitId":"ryanpeh"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":85,"author":{"gitId":"ryanpeh"},"content":"     * @param taskList List of tasks to be written into the file.","lastModifiedDate":"2021-08-30"},{"lineNumber":86,"author":{"gitId":"ryanpeh"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":87,"author":{"gitId":"ryanpeh"},"content":"    public void write(TaskList taskList) {","lastModifiedDate":"2021-08-29"},{"lineNumber":88,"author":{"gitId":"ryanpeh"},"content":"        try {","lastModifiedDate":"2021-08-29"},{"lineNumber":89,"author":{"gitId":"ryanpeh"},"content":"            assert Files.exists(Paths.get(fileName)) : \"File should exist.\";","lastModifiedDate":"2021-09-06"},{"lineNumber":90,"author":{"gitId":"ryanpeh"},"content":"            FileWriter fw \u003d new FileWriter(fileName);","lastModifiedDate":"2021-08-29"},{"lineNumber":91,"author":{"gitId":"ryanpeh"},"content":"            for (int i \u003d 0; i \u003c taskList.size(); i++) {","lastModifiedDate":"2021-08-29"},{"lineNumber":92,"author":{"gitId":"ryanpeh"},"content":"                fw.write(taskList.getTask(i) + \"\\n\");","lastModifiedDate":"2021-08-29"},{"lineNumber":93,"author":{"gitId":"ryanpeh"},"content":"            }","lastModifiedDate":"2021-08-29"},{"lineNumber":94,"author":{"gitId":"ryanpeh"},"content":"            fw.close();","lastModifiedDate":"2021-08-29"},{"lineNumber":95,"author":{"gitId":"ryanpeh"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-29"},{"lineNumber":96,"author":{"gitId":"ryanpeh"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2021-09-06"},{"lineNumber":97,"author":{"gitId":"ryanpeh"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":98,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":99,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":100,"author":{"gitId":"ryanpeh"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":101,"author":{"gitId":"ryanpeh"},"content":"     * Creates a new file.","lastModifiedDate":"2021-08-30"},{"lineNumber":102,"author":{"gitId":"ryanpeh"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":103,"author":{"gitId":"ryanpeh"},"content":"    public void createNewFile() {","lastModifiedDate":"2021-08-29"},{"lineNumber":104,"author":{"gitId":"ryanpeh"},"content":"        File file \u003d new File(fileName);","lastModifiedDate":"2021-08-29"},{"lineNumber":105,"author":{"gitId":"ryanpeh"},"content":"        try {","lastModifiedDate":"2021-08-29"},{"lineNumber":106,"author":{"gitId":"ryanpeh"},"content":"            boolean fileCreated \u003d file.createNewFile();","lastModifiedDate":"2021-09-06"},{"lineNumber":107,"author":{"gitId":"ryanpeh"},"content":"            if (!fileCreated) {","lastModifiedDate":"2021-09-06"},{"lineNumber":108,"author":{"gitId":"ryanpeh"},"content":"                System.out.println(\"Error: File already exists\");","lastModifiedDate":"2021-09-06"},{"lineNumber":109,"author":{"gitId":"ryanpeh"},"content":"            }","lastModifiedDate":"2021-09-06"},{"lineNumber":110,"author":{"gitId":"ryanpeh"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-29"},{"lineNumber":111,"author":{"gitId":"ryanpeh"},"content":"            System.out.println(\"Error: \" + e);","lastModifiedDate":"2021-08-29"},{"lineNumber":112,"author":{"gitId":"ryanpeh"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":113,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":114,"author":{"gitId":"ryanpeh"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"ryanpeh":114}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ryanpeh"},"content":"package duke;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"ryanpeh"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-10"},{"lineNumber":4,"author":{"gitId":"ryanpeh"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-10"},{"lineNumber":5,"author":{"gitId":"ryanpeh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"ryanpeh"},"content":"import duke.tasks.Deadline;","lastModifiedDate":"2021-09-10"},{"lineNumber":8,"author":{"gitId":"ryanpeh"},"content":"import duke.tasks.Event;","lastModifiedDate":"2021-09-10"},{"lineNumber":9,"author":{"gitId":"ryanpeh"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"ryanpeh"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"ryanpeh"},"content":" * Encapsulates a List of Tasks and supports various functions related to managing the List of Tasks.","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"ryanpeh"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"ryanpeh"},"content":"public class TaskList {","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"ryanpeh"},"content":"    protected final ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"ryanpeh"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"ryanpeh"},"content":"     * Adds task to the List.","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"ryanpeh"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"ryanpeh"},"content":"     * @param task The task to be added to the List.","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"ryanpeh"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"ryanpeh"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"ryanpeh"},"content":"        taskList.add(task);","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"ryanpeh"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"ryanpeh"},"content":"     * Gets the task at given index.","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"ryanpeh"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"ryanpeh"},"content":"     * @param idx Index of task to get.","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"ryanpeh"},"content":"     * @return Task at the given index.","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"ryanpeh"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":32,"author":{"gitId":"ryanpeh"},"content":"    public Task getTask(int idx) {","lastModifiedDate":"2021-08-29"},{"lineNumber":33,"author":{"gitId":"ryanpeh"},"content":"        return taskList.get(idx);","lastModifiedDate":"2021-08-29"},{"lineNumber":34,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":35,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":36,"author":{"gitId":"ryanpeh"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":37,"author":{"gitId":"ryanpeh"},"content":"     * Deletes task at given index.","lastModifiedDate":"2021-08-30"},{"lineNumber":38,"author":{"gitId":"ryanpeh"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":39,"author":{"gitId":"ryanpeh"},"content":"     * @param idx Index of task to be deleted.","lastModifiedDate":"2021-08-30"},{"lineNumber":40,"author":{"gitId":"ryanpeh"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":41,"author":{"gitId":"ryanpeh"},"content":"    public void removeTask(int idx) {","lastModifiedDate":"2021-08-29"},{"lineNumber":42,"author":{"gitId":"ryanpeh"},"content":"        taskList.remove(idx);","lastModifiedDate":"2021-08-29"},{"lineNumber":43,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":44,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":45,"author":{"gitId":"ryanpeh"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":46,"author":{"gitId":"ryanpeh"},"content":"     * Returns all Tasks in the TaskList that match a given keyword.","lastModifiedDate":"2021-08-30"},{"lineNumber":47,"author":{"gitId":"ryanpeh"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":48,"author":{"gitId":"ryanpeh"},"content":"     * @param keyword The given keyword.","lastModifiedDate":"2021-08-30"},{"lineNumber":49,"author":{"gitId":"ryanpeh"},"content":"     * @return A TaskList of all Tasks that match the given keyword.","lastModifiedDate":"2021-08-30"},{"lineNumber":50,"author":{"gitId":"ryanpeh"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":51,"author":{"gitId":"ryanpeh"},"content":"    public TaskList findMatchingTasks(String keyword) {","lastModifiedDate":"2021-08-30"},{"lineNumber":52,"author":{"gitId":"ryanpeh"},"content":"        TaskList matchingTasks \u003d new TaskList();","lastModifiedDate":"2021-08-30"},{"lineNumber":53,"author":{"gitId":"ryanpeh"},"content":"        for (Task task : taskList) {","lastModifiedDate":"2021-08-30"},{"lineNumber":54,"author":{"gitId":"ryanpeh"},"content":"            if (task.toString().contains(keyword)) {","lastModifiedDate":"2021-08-30"},{"lineNumber":55,"author":{"gitId":"ryanpeh"},"content":"                matchingTasks.addTask(task);","lastModifiedDate":"2021-08-30"},{"lineNumber":56,"author":{"gitId":"ryanpeh"},"content":"            }","lastModifiedDate":"2021-08-30"},{"lineNumber":57,"author":{"gitId":"ryanpeh"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":58,"author":{"gitId":"ryanpeh"},"content":"        return matchingTasks;","lastModifiedDate":"2021-08-30"},{"lineNumber":59,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":60,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":61,"author":{"gitId":"ryanpeh"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":62,"author":{"gitId":"ryanpeh"},"content":"     * Returns size of the task list.","lastModifiedDate":"2021-08-30"},{"lineNumber":63,"author":{"gitId":"ryanpeh"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":64,"author":{"gitId":"ryanpeh"},"content":"     * @return Size of the task list.","lastModifiedDate":"2021-08-30"},{"lineNumber":65,"author":{"gitId":"ryanpeh"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":66,"author":{"gitId":"ryanpeh"},"content":"    public int size() {","lastModifiedDate":"2021-08-29"},{"lineNumber":67,"author":{"gitId":"ryanpeh"},"content":"        return taskList.size();","lastModifiedDate":"2021-08-29"},{"lineNumber":68,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":69,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":70,"author":{"gitId":"ryanpeh"},"content":"    /**","lastModifiedDate":"2021-09-10"},{"lineNumber":71,"author":{"gitId":"ryanpeh"},"content":"     * Returns if the task list is empty.","lastModifiedDate":"2021-09-10"},{"lineNumber":72,"author":{"gitId":"ryanpeh"},"content":"     *","lastModifiedDate":"2021-09-10"},{"lineNumber":73,"author":{"gitId":"ryanpeh"},"content":"     * @return If the task list is empty.","lastModifiedDate":"2021-09-10"},{"lineNumber":74,"author":{"gitId":"ryanpeh"},"content":"     */","lastModifiedDate":"2021-09-10"},{"lineNumber":75,"author":{"gitId":"ryanpeh"},"content":"    public boolean isEmpty() {","lastModifiedDate":"2021-09-10"},{"lineNumber":76,"author":{"gitId":"ryanpeh"},"content":"        return taskList.isEmpty();","lastModifiedDate":"2021-09-10"},{"lineNumber":77,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-09-10"},{"lineNumber":78,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":79,"author":{"gitId":"ryanpeh"},"content":"    private boolean isTaskBefore(Task task, LocalDate date) {","lastModifiedDate":"2021-09-10"},{"lineNumber":80,"author":{"gitId":"ryanpeh"},"content":"        if (task instanceof Deadline) {","lastModifiedDate":"2021-09-10"},{"lineNumber":81,"author":{"gitId":"ryanpeh"},"content":"            LocalDate deadlineDateBy \u003d ((Deadline) task).getDateBy();","lastModifiedDate":"2021-09-10"},{"lineNumber":82,"author":{"gitId":"ryanpeh"},"content":"            return deadlineDateBy.isBefore(date) \u0026\u0026 !deadlineDateBy.isBefore(LocalDate.now());","lastModifiedDate":"2021-09-10"},{"lineNumber":83,"author":{"gitId":"ryanpeh"},"content":"        }","lastModifiedDate":"2021-09-10"},{"lineNumber":84,"author":{"gitId":"ryanpeh"},"content":"        if (task instanceof Event) {","lastModifiedDate":"2021-09-10"},{"lineNumber":85,"author":{"gitId":"ryanpeh"},"content":"            LocalDateTime eventTimeAt \u003d ((Event) task).getTimeAt();","lastModifiedDate":"2021-09-10"},{"lineNumber":86,"author":{"gitId":"ryanpeh"},"content":"            return eventTimeAt.toLocalDate().isBefore(date) \u0026\u0026 !eventTimeAt.toLocalDate().isBefore(LocalDate.now());","lastModifiedDate":"2021-09-10"},{"lineNumber":87,"author":{"gitId":"ryanpeh"},"content":"        }","lastModifiedDate":"2021-09-10"},{"lineNumber":88,"author":{"gitId":"ryanpeh"},"content":"        return false;","lastModifiedDate":"2021-09-10"},{"lineNumber":89,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-09-10"},{"lineNumber":90,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":91,"author":{"gitId":"ryanpeh"},"content":"    /**","lastModifiedDate":"2021-09-10"},{"lineNumber":92,"author":{"gitId":"ryanpeh"},"content":"     * Returns a TaskList containing all tasks that are due/occur before the given date.","lastModifiedDate":"2021-09-10"},{"lineNumber":93,"author":{"gitId":"ryanpeh"},"content":"     *","lastModifiedDate":"2021-09-10"},{"lineNumber":94,"author":{"gitId":"ryanpeh"},"content":"     * @param date The date the task has to be due before.","lastModifiedDate":"2021-09-10"},{"lineNumber":95,"author":{"gitId":"ryanpeh"},"content":"     * @return A TaskList containing all tasks that are due/occur before the given date","lastModifiedDate":"2021-09-10"},{"lineNumber":96,"author":{"gitId":"ryanpeh"},"content":"     */","lastModifiedDate":"2021-09-10"},{"lineNumber":97,"author":{"gitId":"ryanpeh"},"content":"    public TaskList getTasksBefore(LocalDate date) {","lastModifiedDate":"2021-09-10"},{"lineNumber":98,"author":{"gitId":"ryanpeh"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2021-09-10"},{"lineNumber":99,"author":{"gitId":"ryanpeh"},"content":"        for (Task task : taskList) {","lastModifiedDate":"2021-09-10"},{"lineNumber":100,"author":{"gitId":"ryanpeh"},"content":"            if (isTaskBefore(task, date)) {","lastModifiedDate":"2021-09-10"},{"lineNumber":101,"author":{"gitId":"ryanpeh"},"content":"                tasks.addTask(task);","lastModifiedDate":"2021-09-10"},{"lineNumber":102,"author":{"gitId":"ryanpeh"},"content":"            }","lastModifiedDate":"2021-09-10"},{"lineNumber":103,"author":{"gitId":"ryanpeh"},"content":"        }","lastModifiedDate":"2021-09-10"},{"lineNumber":104,"author":{"gitId":"ryanpeh"},"content":"        return tasks;","lastModifiedDate":"2021-09-10"},{"lineNumber":105,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-09-10"},{"lineNumber":106,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":107,"author":{"gitId":"ryanpeh"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":108,"author":{"gitId":"ryanpeh"},"content":"    public String toString() {","lastModifiedDate":"2021-08-29"},{"lineNumber":109,"author":{"gitId":"ryanpeh"},"content":"        String lst \u003d \"\";","lastModifiedDate":"2021-08-29"},{"lineNumber":110,"author":{"gitId":"ryanpeh"},"content":"        for (int i \u003d 1; i \u003c\u003d taskList.size(); i++) {","lastModifiedDate":"2021-08-29"},{"lineNumber":111,"author":{"gitId":"ryanpeh"},"content":"            Task task \u003d taskList.get(i - 1);","lastModifiedDate":"2021-08-29"},{"lineNumber":112,"author":{"gitId":"ryanpeh"},"content":"            lst +\u003d \"\\n\" + i + \". \" + task;","lastModifiedDate":"2021-08-29"},{"lineNumber":113,"author":{"gitId":"ryanpeh"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":114,"author":{"gitId":"ryanpeh"},"content":"        return lst;","lastModifiedDate":"2021-08-29"},{"lineNumber":115,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":116,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":117,"author":{"gitId":"ryanpeh"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"ryanpeh":117}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ryanpeh"},"content":"package duke;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"ryanpeh"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"ryanpeh"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"ryanpeh"},"content":" * Handles all functionality related to displaying of the user interface.","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"ryanpeh"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"ryanpeh"},"content":"public class Ui {","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"ryanpeh"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"ryanpeh"},"content":"     * Displays the goodbye message.","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"ryanpeh"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":13,"author":{"gitId":"ryanpeh"},"content":"     * @return The goodbye string.","lastModifiedDate":"2021-09-06"},{"lineNumber":14,"author":{"gitId":"ryanpeh"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"ryanpeh"},"content":"    public String showGoodbye() {","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"ryanpeh"},"content":"        return \"Exiting the program, goodbye!\";","lastModifiedDate":"2021-09-02"},{"lineNumber":17,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"ryanpeh"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"ryanpeh"},"content":"     * Displays the loading error message.","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"ryanpeh"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"ryanpeh"},"content":"    public void showLoadingError() {","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"ryanpeh"},"content":"        System.out.println(\"No task file found, creating a new task file...\\n\");","lastModifiedDate":"2021-09-02"},{"lineNumber":24,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"ryanpeh"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"ryanpeh"},"content":"     * Displays the message when a Task is added to a TaskList.","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"ryanpeh"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":29,"author":{"gitId":"ryanpeh"},"content":"     * @param task The task added to the TaskList.","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"ryanpeh"},"content":"     * @param taskList The TaskList with the Task added.","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"ryanpeh"},"content":"     * @return A String listing all the tasks in the TaskList.","lastModifiedDate":"2021-09-06"},{"lineNumber":32,"author":{"gitId":"ryanpeh"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"ryanpeh"},"content":"    public String showTaskAdded(Task task, TaskList taskList) {","lastModifiedDate":"2021-09-02"},{"lineNumber":34,"author":{"gitId":"ryanpeh"},"content":"        assert taskList.size() \u003e 0 : \"Size of TaskList should be more than 0\";","lastModifiedDate":"2021-09-06"},{"lineNumber":35,"author":{"gitId":"ryanpeh"},"content":"        return \"Got it. I have added this task:\\n  \" + task + \"\\n Now you have \"","lastModifiedDate":"2021-09-02"},{"lineNumber":36,"author":{"gitId":"ryanpeh"},"content":"                + taskList.size() + \" tasks in the list.\\n\";","lastModifiedDate":"2021-09-02"},{"lineNumber":37,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":38,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":39,"author":{"gitId":"ryanpeh"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":40,"author":{"gitId":"ryanpeh"},"content":"     * Displays the message when a Task is deleted from a TaskList.","lastModifiedDate":"2021-08-30"},{"lineNumber":41,"author":{"gitId":"ryanpeh"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":42,"author":{"gitId":"ryanpeh"},"content":"     * @param task The task deleted from the TaskList.","lastModifiedDate":"2021-08-30"},{"lineNumber":43,"author":{"gitId":"ryanpeh"},"content":"     * @param taskList The TaskList the Task is deleted from.","lastModifiedDate":"2021-08-30"},{"lineNumber":44,"author":{"gitId":"ryanpeh"},"content":"     * @return A String indicating which task was removed.","lastModifiedDate":"2021-09-06"},{"lineNumber":45,"author":{"gitId":"ryanpeh"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":46,"author":{"gitId":"ryanpeh"},"content":"    public String showTaskDeleted(Task task, TaskList taskList) {","lastModifiedDate":"2021-09-02"},{"lineNumber":47,"author":{"gitId":"ryanpeh"},"content":"        return \"Noted. I have removed this task:\\n  \" + task + \"\\n Now you have \"","lastModifiedDate":"2021-09-02"},{"lineNumber":48,"author":{"gitId":"ryanpeh"},"content":"                + taskList.size() + \" tasks in the list.\\n\";","lastModifiedDate":"2021-09-02"},{"lineNumber":49,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":50,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":51,"author":{"gitId":"ryanpeh"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":52,"author":{"gitId":"ryanpeh"},"content":"     * Displays the message shown when a Task is marked as done","lastModifiedDate":"2021-08-30"},{"lineNumber":53,"author":{"gitId":"ryanpeh"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":54,"author":{"gitId":"ryanpeh"},"content":"     * @param task The Task which is marked as done.","lastModifiedDate":"2021-08-30"},{"lineNumber":55,"author":{"gitId":"ryanpeh"},"content":"     * @return A String which indicates which task was marked as done.","lastModifiedDate":"2021-09-06"},{"lineNumber":56,"author":{"gitId":"ryanpeh"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":57,"author":{"gitId":"ryanpeh"},"content":"    public String showTaskDone(Task task) {","lastModifiedDate":"2021-09-02"},{"lineNumber":58,"author":{"gitId":"ryanpeh"},"content":"        return \"Great! I\u0027ve marked this task as done:\\n\" + task + \"\\n\";","lastModifiedDate":"2021-09-02"},{"lineNumber":59,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":60,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":61,"author":{"gitId":"ryanpeh"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":62,"author":{"gitId":"ryanpeh"},"content":"     * Displays an error message with the given error.","lastModifiedDate":"2021-08-30"},{"lineNumber":63,"author":{"gitId":"ryanpeh"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":64,"author":{"gitId":"ryanpeh"},"content":"     * @param error The error message to be displayed.","lastModifiedDate":"2021-08-30"},{"lineNumber":65,"author":{"gitId":"ryanpeh"},"content":"     * @return The String containing the error message.","lastModifiedDate":"2021-09-06"},{"lineNumber":66,"author":{"gitId":"ryanpeh"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":67,"author":{"gitId":"ryanpeh"},"content":"    public String showError(String error) {","lastModifiedDate":"2021-09-06"},{"lineNumber":68,"author":{"gitId":"ryanpeh"},"content":"        return \"ERROR: \" + error;","lastModifiedDate":"2021-09-06"},{"lineNumber":69,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":70,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":71,"author":{"gitId":"ryanpeh"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":72,"author":{"gitId":"ryanpeh"},"content":"     * Displays the contents of the TaskList","lastModifiedDate":"2021-08-30"},{"lineNumber":73,"author":{"gitId":"ryanpeh"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":74,"author":{"gitId":"ryanpeh"},"content":"     * @param taskList The TaskList whose contents are to be displayed.","lastModifiedDate":"2021-08-30"},{"lineNumber":75,"author":{"gitId":"ryanpeh"},"content":"     * @return A String with all the tasks in the list.","lastModifiedDate":"2021-09-06"},{"lineNumber":76,"author":{"gitId":"ryanpeh"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":77,"author":{"gitId":"ryanpeh"},"content":"    public String showList(TaskList taskList) {","lastModifiedDate":"2021-09-02"},{"lineNumber":78,"author":{"gitId":"ryanpeh"},"content":"        return \"Here are the tasks in your list: \" + taskList;","lastModifiedDate":"2021-09-02"},{"lineNumber":79,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":80,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":81,"author":{"gitId":"ryanpeh"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":82,"author":{"gitId":"ryanpeh"},"content":"     * Displays the matching tasks in the list.","lastModifiedDate":"2021-08-30"},{"lineNumber":83,"author":{"gitId":"ryanpeh"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":84,"author":{"gitId":"ryanpeh"},"content":"     * @param taskList List of matching tasks.","lastModifiedDate":"2021-08-30"},{"lineNumber":85,"author":{"gitId":"ryanpeh"},"content":"     * @return A string with all matching tasks.","lastModifiedDate":"2021-09-06"},{"lineNumber":86,"author":{"gitId":"ryanpeh"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":87,"author":{"gitId":"ryanpeh"},"content":"    public String showMatchingTasks(TaskList taskList) {","lastModifiedDate":"2021-09-02"},{"lineNumber":88,"author":{"gitId":"ryanpeh"},"content":"        return \"Here are the matching tasks in your list: \" + taskList;","lastModifiedDate":"2021-09-02"},{"lineNumber":89,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":90,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":91,"author":{"gitId":"ryanpeh"},"content":"    /**","lastModifiedDate":"2021-09-10"},{"lineNumber":92,"author":{"gitId":"ryanpeh"},"content":"     * Displays the tasks due in the next 7 days.","lastModifiedDate":"2021-09-10"},{"lineNumber":93,"author":{"gitId":"ryanpeh"},"content":"     *","lastModifiedDate":"2021-09-10"},{"lineNumber":94,"author":{"gitId":"ryanpeh"},"content":"     * @param taskList List of matching tasks.","lastModifiedDate":"2021-09-10"},{"lineNumber":95,"author":{"gitId":"ryanpeh"},"content":"     * @return A string with all matching tasks.","lastModifiedDate":"2021-09-10"},{"lineNumber":96,"author":{"gitId":"ryanpeh"},"content":"     */","lastModifiedDate":"2021-09-10"},{"lineNumber":97,"author":{"gitId":"ryanpeh"},"content":"    public String showReminderTasks(TaskList taskList) {","lastModifiedDate":"2021-09-10"},{"lineNumber":98,"author":{"gitId":"ryanpeh"},"content":"        return \"Reminder: These are the tasks due in the next 7 days.\" + taskList;","lastModifiedDate":"2021-09-10"},{"lineNumber":99,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-09-10"},{"lineNumber":100,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":101,"author":{"gitId":"ryanpeh"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"ryanpeh":101}},{"path":"src/main/java/duke/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ryanpeh"},"content":"package duke.commands;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"ryanpeh"},"content":"import duke.DukeException;","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"ryanpeh"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"ryanpeh"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"ryanpeh"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"ryanpeh"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"ryanpeh"},"content":" * The Command class represents actions entered by the user.","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"ryanpeh"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"ryanpeh"},"content":"public abstract class Command {","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"ryanpeh"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"ryanpeh"},"content":"     * Executes the given command.","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"ryanpeh"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"ryanpeh"},"content":"     * @param taskList The current TaskList being used.","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"ryanpeh"},"content":"     * @param ui The current Ui being used.","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"ryanpeh"},"content":"     * @param storage The current Storage being used.","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"ryanpeh"},"content":"     * @throws DukeException If there is invalid command entered.","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"ryanpeh"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"ryanpeh"},"content":"    public abstract String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException;","lastModifiedDate":"2021-09-02"},{"lineNumber":21,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"ryanpeh"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"ryanpeh"},"content":"        return false;","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"ryanpeh"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"ryanpeh":26}},{"path":"src/main/java/duke/commands/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ryanpeh"},"content":"package duke.commands;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"ryanpeh"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"ryanpeh"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"ryanpeh"},"content":"import duke.DukeException;","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"ryanpeh"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"ryanpeh"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"ryanpeh"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"ryanpeh"},"content":"import duke.tasks.Deadline;","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"ryanpeh"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"ryanpeh"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"ryanpeh"},"content":" * The DeadlineCommand handles when a deadline command is entered.","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"ryanpeh"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"ryanpeh"},"content":"public class DeadlineCommand extends Command {","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"ryanpeh"},"content":"    private static final Pattern EVENT_FORMAT \u003d Pattern.compile(\"(?\u003cdescription\u003e\\\\S+) /by (?\u003cby\u003e.*)\");","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"ryanpeh"},"content":"    private final String description;","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"ryanpeh"},"content":"    private final String by;","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"ryanpeh"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"ryanpeh"},"content":"     * Constructs a DeadlineCommand object.","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"ryanpeh"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"ryanpeh"},"content":"     * @param args Arguments entered for the deadline.","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"ryanpeh"},"content":"     * @throws DukeException Invalid arguments entered.","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"ryanpeh"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"ryanpeh"},"content":"    public DeadlineCommand(String args) throws DukeException {","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"ryanpeh"},"content":"        Matcher matcher \u003d EVENT_FORMAT.matcher(args.trim());","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"ryanpeh"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"ryanpeh"},"content":"            throw new DukeException(\"Events must be in the format \u0027deadline \u003cdescription\u003e /by \u003cdd MMM yyyy\u003e\");","lastModifiedDate":"2021-08-29"},{"lineNumber":33,"author":{"gitId":"ryanpeh"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":34,"author":{"gitId":"ryanpeh"},"content":"        description \u003d matcher.group(\"description\").trim();","lastModifiedDate":"2021-08-29"},{"lineNumber":35,"author":{"gitId":"ryanpeh"},"content":"        by \u003d matcher.group(\"by\").trim();","lastModifiedDate":"2021-08-29"},{"lineNumber":36,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":37,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":38,"author":{"gitId":"ryanpeh"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":39,"author":{"gitId":"ryanpeh"},"content":"     * Executes the addition of a Deadline being added to the TaskList.","lastModifiedDate":"2021-08-30"},{"lineNumber":40,"author":{"gitId":"ryanpeh"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":41,"author":{"gitId":"ryanpeh"},"content":"     * @param taskList The current TaskList being used.","lastModifiedDate":"2021-08-30"},{"lineNumber":42,"author":{"gitId":"ryanpeh"},"content":"     * @param ui The current Ui being used.","lastModifiedDate":"2021-08-30"},{"lineNumber":43,"author":{"gitId":"ryanpeh"},"content":"     * @param storage The current Storage being used.","lastModifiedDate":"2021-08-30"},{"lineNumber":44,"author":{"gitId":"ryanpeh"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":45,"author":{"gitId":"ryanpeh"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-02"},{"lineNumber":46,"author":{"gitId":"ryanpeh"},"content":"        Task deadline \u003d new Deadline(description, by);","lastModifiedDate":"2021-08-29"},{"lineNumber":47,"author":{"gitId":"ryanpeh"},"content":"        taskList.addTask(deadline);","lastModifiedDate":"2021-08-29"},{"lineNumber":48,"author":{"gitId":"ryanpeh"},"content":"        storage.write(taskList);","lastModifiedDate":"2021-08-29"},{"lineNumber":49,"author":{"gitId":"ryanpeh"},"content":"        return ui.showTaskAdded(deadline, taskList);","lastModifiedDate":"2021-09-02"},{"lineNumber":50,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":51,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":52,"author":{"gitId":"ryanpeh"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"ryanpeh":52}},{"path":"src/main/java/duke/commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ryanpeh"},"content":"package duke.commands;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"ryanpeh"},"content":"import duke.DukeException;","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"ryanpeh"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"ryanpeh"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"ryanpeh"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"ryanpeh"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"ryanpeh"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"ryanpeh"},"content":" * The DeleteCommand handles when a task is to be deleted.","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"ryanpeh"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"ryanpeh"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"ryanpeh"},"content":"    private final int taskIdx;","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"ryanpeh"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"ryanpeh"},"content":"     * Constructs a DeleteCommand Object.","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"ryanpeh"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"ryanpeh"},"content":"     * @param idx Index of task to be deleted.","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"ryanpeh"},"content":"     * @throws DukeException If there is no task at given index.","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"ryanpeh"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"ryanpeh"},"content":"    public DeleteCommand(String idx) throws DukeException {","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"ryanpeh"},"content":"        try {","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"ryanpeh"},"content":"            taskIdx \u003d Integer.parseInt(idx.trim()) - 1;","lastModifiedDate":"2021-09-02"},{"lineNumber":25,"author":{"gitId":"ryanpeh"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"ryanpeh"},"content":"            throw new DukeException(\"Invalid Command. \u0027delete\u0027 must be followed by a task number\");","lastModifiedDate":"2021-08-29"},{"lineNumber":27,"author":{"gitId":"ryanpeh"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"ryanpeh"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"ryanpeh"},"content":"     * Executes the deletion of the Task in the TaskList at the given index.","lastModifiedDate":"2021-08-30"},{"lineNumber":32,"author":{"gitId":"ryanpeh"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"ryanpeh"},"content":"     * @param taskList The current TaskList being used.","lastModifiedDate":"2021-08-30"},{"lineNumber":34,"author":{"gitId":"ryanpeh"},"content":"     * @param ui The current Ui being used.","lastModifiedDate":"2021-08-30"},{"lineNumber":35,"author":{"gitId":"ryanpeh"},"content":"     * @param storage The current Storage being used.","lastModifiedDate":"2021-08-30"},{"lineNumber":36,"author":{"gitId":"ryanpeh"},"content":"     * @throws DukeException if invalid task number entered.","lastModifiedDate":"2021-09-02"},{"lineNumber":37,"author":{"gitId":"ryanpeh"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":38,"author":{"gitId":"ryanpeh"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2021-09-02"},{"lineNumber":39,"author":{"gitId":"ryanpeh"},"content":"        if (taskIdx \u003e\u003d taskList.size()) {","lastModifiedDate":"2021-08-29"},{"lineNumber":40,"author":{"gitId":"ryanpeh"},"content":"            throw new DukeException(\"Invalid task number entered.\");","lastModifiedDate":"2021-08-29"},{"lineNumber":41,"author":{"gitId":"ryanpeh"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":42,"author":{"gitId":"ryanpeh"},"content":"        Task task \u003d taskList.getTask(taskIdx);","lastModifiedDate":"2021-08-29"},{"lineNumber":43,"author":{"gitId":"ryanpeh"},"content":"        taskList.removeTask(taskIdx);","lastModifiedDate":"2021-08-29"},{"lineNumber":44,"author":{"gitId":"ryanpeh"},"content":"        storage.write(taskList);","lastModifiedDate":"2021-08-29"},{"lineNumber":45,"author":{"gitId":"ryanpeh"},"content":"        return ui.showTaskDeleted(task, taskList);","lastModifiedDate":"2021-09-02"},{"lineNumber":46,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":47,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":48,"author":{"gitId":"ryanpeh"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"ryanpeh":48}},{"path":"src/main/java/duke/commands/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ryanpeh"},"content":"package duke.commands;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"ryanpeh"},"content":"import duke.DukeException;","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"ryanpeh"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"ryanpeh"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"ryanpeh"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"ryanpeh"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"ryanpeh"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"ryanpeh"},"content":" * The DoneCommand handles when a task is to be marked as done.","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"ryanpeh"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"ryanpeh"},"content":"public class DoneCommand extends Command {","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"ryanpeh"},"content":"    private final int taskIdx;","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"ryanpeh"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"ryanpeh"},"content":"     * Constructs a DoneCommand Object with the given index.","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"ryanpeh"},"content":"     * @param idx Index of task to be marked as done.","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"ryanpeh"},"content":"     * @throws DukeException if invalid command entered.","lastModifiedDate":"2021-09-02"},{"lineNumber":20,"author":{"gitId":"ryanpeh"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"ryanpeh"},"content":"    public DoneCommand(String idx) throws DukeException {","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"ryanpeh"},"content":"        try {","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"ryanpeh"},"content":"            taskIdx \u003d Integer.parseInt(idx.trim()) - 1;","lastModifiedDate":"2021-09-02"},{"lineNumber":24,"author":{"gitId":"ryanpeh"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"ryanpeh"},"content":"            throw new DukeException(\"Invalid Command. \u0027done\u0027 must be followed by a task number\");","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"ryanpeh"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":27,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"ryanpeh"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"ryanpeh"},"content":"     * Executes the marking of the Task in the TaskList at the given index as done.","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"ryanpeh"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":32,"author":{"gitId":"ryanpeh"},"content":"     * @param taskList The current TaskList being used.","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"ryanpeh"},"content":"     * @param ui The current Ui being used.","lastModifiedDate":"2021-08-30"},{"lineNumber":34,"author":{"gitId":"ryanpeh"},"content":"     * @param storage The current Storage being used.","lastModifiedDate":"2021-08-30"},{"lineNumber":35,"author":{"gitId":"ryanpeh"},"content":"     * @throws DukeException if invalid task number entered.","lastModifiedDate":"2021-09-02"},{"lineNumber":36,"author":{"gitId":"ryanpeh"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":37,"author":{"gitId":"ryanpeh"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2021-09-02"},{"lineNumber":38,"author":{"gitId":"ryanpeh"},"content":"        if (taskIdx \u003e\u003d taskList.size()) {","lastModifiedDate":"2021-08-29"},{"lineNumber":39,"author":{"gitId":"ryanpeh"},"content":"            throw new DukeException(\"Invalid task number entered.\");","lastModifiedDate":"2021-08-29"},{"lineNumber":40,"author":{"gitId":"ryanpeh"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":41,"author":{"gitId":"ryanpeh"},"content":"        Task task \u003d taskList.getTask(taskIdx);","lastModifiedDate":"2021-08-29"},{"lineNumber":42,"author":{"gitId":"ryanpeh"},"content":"        task.markAsDone();","lastModifiedDate":"2021-08-29"},{"lineNumber":43,"author":{"gitId":"ryanpeh"},"content":"        storage.write(taskList);","lastModifiedDate":"2021-08-29"},{"lineNumber":44,"author":{"gitId":"ryanpeh"},"content":"        return ui.showTaskDone(task);","lastModifiedDate":"2021-09-02"},{"lineNumber":45,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":46,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":47,"author":{"gitId":"ryanpeh"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"ryanpeh":47}},{"path":"src/main/java/duke/commands/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ryanpeh"},"content":"package duke.commands;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"ryanpeh"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"ryanpeh"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"ryanpeh"},"content":"import duke.DukeException;","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"ryanpeh"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"ryanpeh"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"ryanpeh"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"ryanpeh"},"content":"import duke.tasks.Event;","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"ryanpeh"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"ryanpeh"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"ryanpeh"},"content":" * The EventCommand handles when an event command is entered.","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"ryanpeh"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"ryanpeh"},"content":"public class EventCommand extends Command {","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"ryanpeh"},"content":"    private static final Pattern EVENT_FORMAT \u003d Pattern.compile(\"(?\u003cdescription\u003e\\\\S+) /at (?\u003cat\u003e.*)\");","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"ryanpeh"},"content":"    private final String description;","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"ryanpeh"},"content":"    private final String at;","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"ryanpeh"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"ryanpeh"},"content":"     * Constructs an EventCommand object with given arguments.","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"ryanpeh"},"content":"     * @param args Arguments entered for the event.","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"ryanpeh"},"content":"     * @throws DukeException Invalid arguments entered.","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"ryanpeh"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"ryanpeh"},"content":"    public EventCommand(String args) throws DukeException {","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"ryanpeh"},"content":"        Matcher matcher \u003d EVENT_FORMAT.matcher(args.trim());","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"ryanpeh"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"ryanpeh"},"content":"            throw new DukeException(\"Events must be in the format \u0027event \u003cdescription\u003e /at \u003cdd MMM yyyy HH:mm\u003e\");","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"ryanpeh"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":33,"author":{"gitId":"ryanpeh"},"content":"        description \u003d matcher.group(\"description\").trim();","lastModifiedDate":"2021-08-29"},{"lineNumber":34,"author":{"gitId":"ryanpeh"},"content":"        at \u003d matcher.group(\"at\").trim();","lastModifiedDate":"2021-08-29"},{"lineNumber":35,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":36,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":37,"author":{"gitId":"ryanpeh"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":38,"author":{"gitId":"ryanpeh"},"content":"     * Executes the addition of an Event being added to the TaskList.","lastModifiedDate":"2021-08-30"},{"lineNumber":39,"author":{"gitId":"ryanpeh"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":40,"author":{"gitId":"ryanpeh"},"content":"     * @param taskList The current TaskList being used.","lastModifiedDate":"2021-08-30"},{"lineNumber":41,"author":{"gitId":"ryanpeh"},"content":"     * @param ui The current Ui being used.","lastModifiedDate":"2021-08-30"},{"lineNumber":42,"author":{"gitId":"ryanpeh"},"content":"     * @param storage The current Storage being used.","lastModifiedDate":"2021-08-30"},{"lineNumber":43,"author":{"gitId":"ryanpeh"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":44,"author":{"gitId":"ryanpeh"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-02"},{"lineNumber":45,"author":{"gitId":"ryanpeh"},"content":"        Task event \u003d new Event(description, at);","lastModifiedDate":"2021-08-29"},{"lineNumber":46,"author":{"gitId":"ryanpeh"},"content":"        taskList.addTask(event);","lastModifiedDate":"2021-08-29"},{"lineNumber":47,"author":{"gitId":"ryanpeh"},"content":"        storage.write(taskList);","lastModifiedDate":"2021-08-29"},{"lineNumber":48,"author":{"gitId":"ryanpeh"},"content":"        return ui.showTaskAdded(event, taskList);","lastModifiedDate":"2021-09-02"},{"lineNumber":49,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":50,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":51,"author":{"gitId":"ryanpeh"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"ryanpeh":51}},{"path":"src/main/java/duke/commands/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ryanpeh"},"content":"package duke.commands;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"ryanpeh"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"ryanpeh"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"ryanpeh"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"ryanpeh"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"ryanpeh"},"content":" * The ExitCommand handles the command to exit the program.","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"ryanpeh"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"ryanpeh"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"ryanpeh"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"ryanpeh"},"content":"     * Handles the display of the goodbye message.","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"ryanpeh"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"ryanpeh"},"content":"     * @param taskList The current TaskList being used.","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"ryanpeh"},"content":"     * @param ui The current Ui being used.","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"ryanpeh"},"content":"     * @param storage The current Storage being used.","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"ryanpeh"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"ryanpeh"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-02"},{"lineNumber":20,"author":{"gitId":"ryanpeh"},"content":"        return ui.showGoodbye();","lastModifiedDate":"2021-09-02"},{"lineNumber":21,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"ryanpeh"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"ryanpeh"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"ryanpeh"},"content":"        return true;","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":27,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"ryanpeh"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"ryanpeh":28}},{"path":"src/main/java/duke/commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ryanpeh"},"content":"package duke.commands;","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":3,"author":{"gitId":"ryanpeh"},"content":"import duke.DukeException;","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"ryanpeh"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"ryanpeh"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"ryanpeh"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"ryanpeh"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"ryanpeh"},"content":" * The FindCommand handles the command to find tasks associated with the given keyword.","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"ryanpeh"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"ryanpeh"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"ryanpeh"},"content":"    private final String keyword;","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"ryanpeh"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"ryanpeh"},"content":"     * Constructs a FindCommand object with a given keyword.","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"ryanpeh"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"ryanpeh"},"content":"     * @param keyword The keyword to find tasks with.","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"ryanpeh"},"content":"     * @throws DukeException If no keyword entered.","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"ryanpeh"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"ryanpeh"},"content":"    public FindCommand(String keyword) throws DukeException {","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"ryanpeh"},"content":"        if (keyword.isBlank()) {","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"ryanpeh"},"content":"            throw new DukeException(\"Keyword can\u0027t be empty.\");","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"ryanpeh"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"ryanpeh"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"ryanpeh"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"ryanpeh"},"content":"     * Executes the finding of all tasks associated with the given keyword.","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"ryanpeh"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"ryanpeh"},"content":"     * @param taskList The current TaskList being used.","lastModifiedDate":"2021-08-30"},{"lineNumber":32,"author":{"gitId":"ryanpeh"},"content":"     * @param ui The current Ui being used.","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"ryanpeh"},"content":"     * @param storage The current Storage being used.","lastModifiedDate":"2021-08-30"},{"lineNumber":34,"author":{"gitId":"ryanpeh"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":35,"author":{"gitId":"ryanpeh"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2021-09-02"},{"lineNumber":36,"author":{"gitId":"ryanpeh"},"content":"        return ui.showMatchingTasks(taskList.findMatchingTasks(keyword));","lastModifiedDate":"2021-09-02"},{"lineNumber":37,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":38,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":39,"author":{"gitId":"ryanpeh"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"ryanpeh":39}},{"path":"src/main/java/duke/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ryanpeh"},"content":"package duke.commands;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"ryanpeh"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"ryanpeh"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"ryanpeh"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"ryanpeh"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"ryanpeh"},"content":" * The ListCommand handles the command to display the tasklist.","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"ryanpeh"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"ryanpeh"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"ryanpeh"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"ryanpeh"},"content":"     * Displays the current TaskList being used.","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"ryanpeh"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"ryanpeh"},"content":"     * @param taskList The current TaskList being used.","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"ryanpeh"},"content":"     * @param ui The current Ui being used.","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"ryanpeh"},"content":"     * @param storage The current Storage being used.","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"ryanpeh"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"ryanpeh"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-02"},{"lineNumber":20,"author":{"gitId":"ryanpeh"},"content":"        return ui.showList(taskList);","lastModifiedDate":"2021-09-02"},{"lineNumber":21,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"ryanpeh"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"ryanpeh":23}},{"path":"src/main/java/duke/commands/ReminderCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ryanpeh"},"content":"package duke.commands;","lastModifiedDate":"2021-09-10"},{"lineNumber":2,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":3,"author":{"gitId":"ryanpeh"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-10"},{"lineNumber":4,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":5,"author":{"gitId":"ryanpeh"},"content":"import duke.Storage;","lastModifiedDate":"2021-09-10"},{"lineNumber":6,"author":{"gitId":"ryanpeh"},"content":"import duke.TaskList;","lastModifiedDate":"2021-09-10"},{"lineNumber":7,"author":{"gitId":"ryanpeh"},"content":"import duke.Ui;","lastModifiedDate":"2021-09-10"},{"lineNumber":8,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":9,"author":{"gitId":"ryanpeh"},"content":"public class ReminderCommand extends Command {","lastModifiedDate":"2021-09-10"},{"lineNumber":10,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":11,"author":{"gitId":"ryanpeh"},"content":"    /**","lastModifiedDate":"2021-09-10"},{"lineNumber":12,"author":{"gitId":"ryanpeh"},"content":"     * Displays the current TaskList being used.","lastModifiedDate":"2021-09-10"},{"lineNumber":13,"author":{"gitId":"ryanpeh"},"content":"     *","lastModifiedDate":"2021-09-10"},{"lineNumber":14,"author":{"gitId":"ryanpeh"},"content":"     * @param taskList The current TaskList being used.","lastModifiedDate":"2021-09-10"},{"lineNumber":15,"author":{"gitId":"ryanpeh"},"content":"     * @param ui The current Ui being used.","lastModifiedDate":"2021-09-10"},{"lineNumber":16,"author":{"gitId":"ryanpeh"},"content":"     * @param storage The current Storage being used.","lastModifiedDate":"2021-09-10"},{"lineNumber":17,"author":{"gitId":"ryanpeh"},"content":"     */","lastModifiedDate":"2021-09-10"},{"lineNumber":18,"author":{"gitId":"ryanpeh"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-10"},{"lineNumber":19,"author":{"gitId":"ryanpeh"},"content":"        LocalDate reminderDate \u003d LocalDate.now().plusDays(7);","lastModifiedDate":"2021-09-10"},{"lineNumber":20,"author":{"gitId":"ryanpeh"},"content":"        TaskList remindTasks \u003d taskList.getTasksBefore(reminderDate);","lastModifiedDate":"2021-09-10"},{"lineNumber":21,"author":{"gitId":"ryanpeh"},"content":"        return ui.showReminderTasks(remindTasks);","lastModifiedDate":"2021-09-10"},{"lineNumber":22,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-09-10"},{"lineNumber":23,"author":{"gitId":"ryanpeh"},"content":"}","lastModifiedDate":"2021-09-10"}],"authorContributionMap":{"ryanpeh":23}},{"path":"src/main/java/duke/commands/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ryanpeh"},"content":"package duke.commands;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"ryanpeh"},"content":"import duke.DukeException;","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"ryanpeh"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"ryanpeh"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"ryanpeh"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"ryanpeh"},"content":"import duke.tasks.Todo;","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"ryanpeh"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"ryanpeh"},"content":" * The TodoCommand class handles when a todo is entered by a user.","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"ryanpeh"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"ryanpeh"},"content":"public class TodoCommand extends Command {","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"ryanpeh"},"content":"    private final Todo todo;","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"ryanpeh"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"ryanpeh"},"content":"     * Construct a TodoCommand object with the given description.","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"ryanpeh"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"ryanpeh"},"content":"     * @param description The description of the TodoCommand object.","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"ryanpeh"},"content":"     * @throws DukeException If the description is empty.","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"ryanpeh"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"ryanpeh"},"content":"    public TodoCommand(String description) throws DukeException {","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"ryanpeh"},"content":"        if (description.trim().equals(\"\")) {","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"ryanpeh"},"content":"            throw new DukeException(\"Todos can\u0027t be empty!\");","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"ryanpeh"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"ryanpeh"},"content":"        this.todo \u003d new Todo(description.trim());","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":27,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"ryanpeh"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"ryanpeh"},"content":"     * Executes the addition of a Todo to the TaskList.","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"ryanpeh"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"ryanpeh"},"content":"     * @param taskList The current TaskList being used.","lastModifiedDate":"2021-08-30"},{"lineNumber":32,"author":{"gitId":"ryanpeh"},"content":"     * @param ui The current Ui being used.","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"ryanpeh"},"content":"     * @param storage The current Storage being used.","lastModifiedDate":"2021-08-30"},{"lineNumber":34,"author":{"gitId":"ryanpeh"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":35,"author":{"gitId":"ryanpeh"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-02"},{"lineNumber":36,"author":{"gitId":"ryanpeh"},"content":"        taskList.addTask(todo);","lastModifiedDate":"2021-08-29"},{"lineNumber":37,"author":{"gitId":"ryanpeh"},"content":"        storage.write(taskList);","lastModifiedDate":"2021-08-29"},{"lineNumber":38,"author":{"gitId":"ryanpeh"},"content":"        return ui.showTaskAdded(todo, taskList);","lastModifiedDate":"2021-09-02"},{"lineNumber":39,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":40,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":41,"author":{"gitId":"ryanpeh"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"ryanpeh":41}},{"path":"src/main/java/duke/gui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ryanpeh"},"content":"package duke.gui;","lastModifiedDate":"2021-09-02"},{"lineNumber":2,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"ryanpeh"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"ryanpeh"},"content":"import java.util.Collections;","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"ryanpeh"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"ryanpeh"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"ryanpeh"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"ryanpeh"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"ryanpeh"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"ryanpeh"},"content":"import javafx.scene.Node;","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"ryanpeh"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-09-02"},{"lineNumber":13,"author":{"gitId":"ryanpeh"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"ryanpeh"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"ryanpeh"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":17,"author":{"gitId":"ryanpeh"},"content":"/**","lastModifiedDate":"2021-09-02"},{"lineNumber":18,"author":{"gitId":"ryanpeh"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2021-09-02"},{"lineNumber":19,"author":{"gitId":"ryanpeh"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2021-09-02"},{"lineNumber":20,"author":{"gitId":"ryanpeh"},"content":" * containing text from the speaker.","lastModifiedDate":"2021-09-02"},{"lineNumber":21,"author":{"gitId":"ryanpeh"},"content":" */","lastModifiedDate":"2021-09-02"},{"lineNumber":22,"author":{"gitId":"ryanpeh"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2021-09-02"},{"lineNumber":23,"author":{"gitId":"ryanpeh"},"content":"    @FXML","lastModifiedDate":"2021-09-02"},{"lineNumber":24,"author":{"gitId":"ryanpeh"},"content":"    private Label dialog;","lastModifiedDate":"2021-09-02"},{"lineNumber":25,"author":{"gitId":"ryanpeh"},"content":"    @FXML","lastModifiedDate":"2021-09-02"},{"lineNumber":26,"author":{"gitId":"ryanpeh"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2021-09-02"},{"lineNumber":27,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":28,"author":{"gitId":"ryanpeh"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2021-09-02"},{"lineNumber":29,"author":{"gitId":"ryanpeh"},"content":"        try {","lastModifiedDate":"2021-09-02"},{"lineNumber":30,"author":{"gitId":"ryanpeh"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2021-09-02"},{"lineNumber":31,"author":{"gitId":"ryanpeh"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2021-09-02"},{"lineNumber":32,"author":{"gitId":"ryanpeh"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2021-09-02"},{"lineNumber":33,"author":{"gitId":"ryanpeh"},"content":"            fxmlLoader.load();","lastModifiedDate":"2021-09-02"},{"lineNumber":34,"author":{"gitId":"ryanpeh"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-02"},{"lineNumber":35,"author":{"gitId":"ryanpeh"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-09-02"},{"lineNumber":36,"author":{"gitId":"ryanpeh"},"content":"        }","lastModifiedDate":"2021-09-02"},{"lineNumber":37,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":38,"author":{"gitId":"ryanpeh"},"content":"        dialog.setText(text);","lastModifiedDate":"2021-09-02"},{"lineNumber":39,"author":{"gitId":"ryanpeh"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2021-09-02"},{"lineNumber":40,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":41,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":42,"author":{"gitId":"ryanpeh"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":43,"author":{"gitId":"ryanpeh"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2021-09-02"},{"lineNumber":44,"author":{"gitId":"ryanpeh"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":45,"author":{"gitId":"ryanpeh"},"content":"    private void flip() {","lastModifiedDate":"2021-09-02"},{"lineNumber":46,"author":{"gitId":"ryanpeh"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2021-09-02"},{"lineNumber":47,"author":{"gitId":"ryanpeh"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2021-09-02"},{"lineNumber":48,"author":{"gitId":"ryanpeh"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2021-09-02"},{"lineNumber":49,"author":{"gitId":"ryanpeh"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2021-09-02"},{"lineNumber":50,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":51,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":52,"author":{"gitId":"ryanpeh"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2021-09-02"},{"lineNumber":53,"author":{"gitId":"ryanpeh"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2021-09-02"},{"lineNumber":54,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":55,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":56,"author":{"gitId":"ryanpeh"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2021-09-02"},{"lineNumber":57,"author":{"gitId":"ryanpeh"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2021-09-02"},{"lineNumber":58,"author":{"gitId":"ryanpeh"},"content":"        db.flip();","lastModifiedDate":"2021-09-02"},{"lineNumber":59,"author":{"gitId":"ryanpeh"},"content":"        return db;","lastModifiedDate":"2021-09-02"},{"lineNumber":60,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":61,"author":{"gitId":"ryanpeh"},"content":"}","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"ryanpeh":61}},{"path":"src/main/java/duke/gui/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ryanpeh"},"content":"package duke.gui;","lastModifiedDate":"2021-09-02"},{"lineNumber":2,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"ryanpeh"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"ryanpeh"},"content":"import duke.Duke;","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"ryanpeh"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"ryanpeh"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"ryanpeh"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"ryanpeh"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"ryanpeh"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"ryanpeh"},"content":"/**","lastModifiedDate":"2021-09-02"},{"lineNumber":13,"author":{"gitId":"ryanpeh"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"ryanpeh"},"content":" */","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"ryanpeh"},"content":"public class Main extends Application {","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":17,"author":{"gitId":"ryanpeh"},"content":"    private Duke duke \u003d new Duke();","lastModifiedDate":"2021-09-02"},{"lineNumber":18,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":19,"author":{"gitId":"ryanpeh"},"content":"    @Override","lastModifiedDate":"2021-09-02"},{"lineNumber":20,"author":{"gitId":"ryanpeh"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2021-09-02"},{"lineNumber":21,"author":{"gitId":"ryanpeh"},"content":"        try {","lastModifiedDate":"2021-09-02"},{"lineNumber":22,"author":{"gitId":"ryanpeh"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2021-09-02"},{"lineNumber":23,"author":{"gitId":"ryanpeh"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2021-09-02"},{"lineNumber":24,"author":{"gitId":"ryanpeh"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2021-09-02"},{"lineNumber":25,"author":{"gitId":"ryanpeh"},"content":"            stage.setScene(scene);","lastModifiedDate":"2021-09-02"},{"lineNumber":26,"author":{"gitId":"ryanpeh"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2021-09-02"},{"lineNumber":27,"author":{"gitId":"ryanpeh"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().showStartText();","lastModifiedDate":"2021-09-10"},{"lineNumber":28,"author":{"gitId":"ryanpeh"},"content":"            stage.show();","lastModifiedDate":"2021-09-02"},{"lineNumber":29,"author":{"gitId":"ryanpeh"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-02"},{"lineNumber":30,"author":{"gitId":"ryanpeh"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-09-02"},{"lineNumber":31,"author":{"gitId":"ryanpeh"},"content":"        }","lastModifiedDate":"2021-09-02"},{"lineNumber":32,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":33,"author":{"gitId":"ryanpeh"},"content":"}","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"ryanpeh":33}},{"path":"src/main/java/duke/gui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ryanpeh"},"content":"package duke.gui;","lastModifiedDate":"2021-09-02"},{"lineNumber":2,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"ryanpeh"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-10"},{"lineNumber":4,"author":{"gitId":"ryanpeh"},"content":"import java.util.Objects;","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"ryanpeh"},"content":"import duke.Duke;","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"ryanpeh"},"content":"import duke.TaskList;","lastModifiedDate":"2021-09-10"},{"lineNumber":8,"author":{"gitId":"ryanpeh"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"ryanpeh"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"ryanpeh"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"ryanpeh"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"ryanpeh"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-09-02"},{"lineNumber":13,"author":{"gitId":"ryanpeh"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"ryanpeh"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"ryanpeh"},"content":"/**","lastModifiedDate":"2021-09-02"},{"lineNumber":17,"author":{"gitId":"ryanpeh"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2021-09-02"},{"lineNumber":18,"author":{"gitId":"ryanpeh"},"content":" */","lastModifiedDate":"2021-09-02"},{"lineNumber":19,"author":{"gitId":"ryanpeh"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2021-09-02"},{"lineNumber":20,"author":{"gitId":"ryanpeh"},"content":"    @FXML","lastModifiedDate":"2021-09-02"},{"lineNumber":21,"author":{"gitId":"ryanpeh"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2021-09-02"},{"lineNumber":22,"author":{"gitId":"ryanpeh"},"content":"    @FXML","lastModifiedDate":"2021-09-02"},{"lineNumber":23,"author":{"gitId":"ryanpeh"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2021-09-02"},{"lineNumber":24,"author":{"gitId":"ryanpeh"},"content":"    @FXML","lastModifiedDate":"2021-09-02"},{"lineNumber":25,"author":{"gitId":"ryanpeh"},"content":"    private TextField userInput;","lastModifiedDate":"2021-09-02"},{"lineNumber":26,"author":{"gitId":"ryanpeh"},"content":"    @FXML","lastModifiedDate":"2021-09-02"},{"lineNumber":27,"author":{"gitId":"ryanpeh"},"content":"    private Button sendButton;","lastModifiedDate":"2021-09-02"},{"lineNumber":28,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":29,"author":{"gitId":"ryanpeh"},"content":"    private Duke duke;","lastModifiedDate":"2021-09-02"},{"lineNumber":30,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":31,"author":{"gitId":"ryanpeh"},"content":"    private Image userImage \u003d new Image(Objects.requireNonNull(this.getClass()","lastModifiedDate":"2021-09-02"},{"lineNumber":32,"author":{"gitId":"ryanpeh"},"content":"            .getResourceAsStream(\"/images/user.png\")));","lastModifiedDate":"2021-09-02"},{"lineNumber":33,"author":{"gitId":"ryanpeh"},"content":"    private Image dukeImage \u003d new Image(Objects.requireNonNull(this.getClass()","lastModifiedDate":"2021-09-02"},{"lineNumber":34,"author":{"gitId":"ryanpeh"},"content":"            .getResourceAsStream(\"/images/duke.png\")));","lastModifiedDate":"2021-09-02"},{"lineNumber":35,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":36,"author":{"gitId":"ryanpeh"},"content":"    @FXML","lastModifiedDate":"2021-09-02"},{"lineNumber":37,"author":{"gitId":"ryanpeh"},"content":"    public void initialize() {","lastModifiedDate":"2021-09-02"},{"lineNumber":38,"author":{"gitId":"ryanpeh"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2021-09-02"},{"lineNumber":39,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":40,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":41,"author":{"gitId":"ryanpeh"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2021-09-02"},{"lineNumber":42,"author":{"gitId":"ryanpeh"},"content":"        duke \u003d d;","lastModifiedDate":"2021-09-02"},{"lineNumber":43,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":44,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":45,"author":{"gitId":"ryanpeh"},"content":"    private void showWelcome() {","lastModifiedDate":"2021-09-10"},{"lineNumber":46,"author":{"gitId":"ryanpeh"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2021-09-10"},{"lineNumber":47,"author":{"gitId":"ryanpeh"},"content":"                DialogBox.getDukeDialog(\"Welcome to Duke!\\n\"","lastModifiedDate":"2021-09-10"},{"lineNumber":48,"author":{"gitId":"ryanpeh"},"content":"                        + \"Please enter the tasks (todo/event/deadline) to be added to the list.\\n\"","lastModifiedDate":"2021-09-10"},{"lineNumber":49,"author":{"gitId":"ryanpeh"},"content":"                        + \"(Enter \u0027list\u0027 to view the list, or \u0027bye\u0027 to exit.)\", dukeImage)","lastModifiedDate":"2021-09-10"},{"lineNumber":50,"author":{"gitId":"ryanpeh"},"content":"        );","lastModifiedDate":"2021-09-10"},{"lineNumber":51,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-09-10"},{"lineNumber":52,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":53,"author":{"gitId":"ryanpeh"},"content":"    private void showReminder() {","lastModifiedDate":"2021-09-10"},{"lineNumber":54,"author":{"gitId":"ryanpeh"},"content":"        TaskList reminderList \u003d duke.getTaskList().getTasksBefore(LocalDate.now().plusDays(7));","lastModifiedDate":"2021-09-10"},{"lineNumber":55,"author":{"gitId":"ryanpeh"},"content":"        if (!reminderList.isEmpty()) {","lastModifiedDate":"2021-09-10"},{"lineNumber":56,"author":{"gitId":"ryanpeh"},"content":"            dialogContainer.getChildren().addAll(","lastModifiedDate":"2021-09-10"},{"lineNumber":57,"author":{"gitId":"ryanpeh"},"content":"                    DialogBox.getDukeDialog(duke.getUi().showReminderTasks(reminderList), dukeImage)","lastModifiedDate":"2021-09-10"},{"lineNumber":58,"author":{"gitId":"ryanpeh"},"content":"            );","lastModifiedDate":"2021-09-10"},{"lineNumber":59,"author":{"gitId":"ryanpeh"},"content":"        }","lastModifiedDate":"2021-09-10"},{"lineNumber":60,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-09-10"},{"lineNumber":61,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":62,"author":{"gitId":"ryanpeh"},"content":"    /**","lastModifiedDate":"2021-09-10"},{"lineNumber":63,"author":{"gitId":"ryanpeh"},"content":"     * Displays the start messages after launching Duke.","lastModifiedDate":"2021-09-10"},{"lineNumber":64,"author":{"gitId":"ryanpeh"},"content":"     */","lastModifiedDate":"2021-09-10"},{"lineNumber":65,"author":{"gitId":"ryanpeh"},"content":"    public void showStartText() {","lastModifiedDate":"2021-09-10"},{"lineNumber":66,"author":{"gitId":"ryanpeh"},"content":"        showWelcome();","lastModifiedDate":"2021-09-10"},{"lineNumber":67,"author":{"gitId":"ryanpeh"},"content":"        showReminder();","lastModifiedDate":"2021-09-10"},{"lineNumber":68,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-09-10"},{"lineNumber":69,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":70,"author":{"gitId":"ryanpeh"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":71,"author":{"gitId":"ryanpeh"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2021-09-02"},{"lineNumber":72,"author":{"gitId":"ryanpeh"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2021-09-02"},{"lineNumber":73,"author":{"gitId":"ryanpeh"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":74,"author":{"gitId":"ryanpeh"},"content":"    @FXML","lastModifiedDate":"2021-09-02"},{"lineNumber":75,"author":{"gitId":"ryanpeh"},"content":"    private void handleUserInput() {","lastModifiedDate":"2021-09-02"},{"lineNumber":76,"author":{"gitId":"ryanpeh"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2021-09-02"},{"lineNumber":77,"author":{"gitId":"ryanpeh"},"content":"        String response \u003d duke.getResponse(input);","lastModifiedDate":"2021-09-02"},{"lineNumber":78,"author":{"gitId":"ryanpeh"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2021-09-02"},{"lineNumber":79,"author":{"gitId":"ryanpeh"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2021-09-02"},{"lineNumber":80,"author":{"gitId":"ryanpeh"},"content":"                DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2021-09-02"},{"lineNumber":81,"author":{"gitId":"ryanpeh"},"content":"        );","lastModifiedDate":"2021-09-02"},{"lineNumber":82,"author":{"gitId":"ryanpeh"},"content":"        userInput.clear();","lastModifiedDate":"2021-09-02"},{"lineNumber":83,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":84,"author":{"gitId":"ryanpeh"},"content":"}","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"ryanpeh":84}},{"path":"src/main/java/duke/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ryanpeh"},"content":"package duke.tasks;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"ryanpeh"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"ryanpeh"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"ryanpeh"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"ryanpeh"},"content":" * Represents a deadline entered by the user.","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"ryanpeh"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"ryanpeh"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"ryanpeh"},"content":"    private static final DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy\");","lastModifiedDate":"2021-09-06"},{"lineNumber":11,"author":{"gitId":"ryanpeh"},"content":"    protected final LocalDate by;","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"ryanpeh"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"ryanpeh"},"content":"     * Constructor for the Deadline.","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"ryanpeh"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"ryanpeh"},"content":"     * @param description Description of the deadline.","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"ryanpeh"},"content":"     * @param by The date the deadline is due.","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"ryanpeh"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"ryanpeh"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"ryanpeh"},"content":"        super(description);","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"ryanpeh"},"content":"        this.by \u003d LocalDate.parse(by, formatter);","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":24,"author":{"gitId":"ryanpeh"},"content":"    public LocalDate getDateBy() {","lastModifiedDate":"2021-09-10"},{"lineNumber":25,"author":{"gitId":"ryanpeh"},"content":"        return by;","lastModifiedDate":"2021-09-10"},{"lineNumber":26,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-09-10"},{"lineNumber":27,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":28,"author":{"gitId":"ryanpeh"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":29,"author":{"gitId":"ryanpeh"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":30,"author":{"gitId":"ryanpeh"},"content":"        return \"[D] \" + super.toString() + \" (by: \" + by.format(formatter) + \")\";","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":32,"author":{"gitId":"ryanpeh"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"ryanpeh":32}},{"path":"src/main/java/duke/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ryanpeh"},"content":"package duke.tasks;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"ryanpeh"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"ryanpeh"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"ryanpeh"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"ryanpeh"},"content":"    private static final DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy HH:mm\");","lastModifiedDate":"2021-09-06"},{"lineNumber":8,"author":{"gitId":"ryanpeh"},"content":"    protected final LocalDateTime at;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"ryanpeh"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"ryanpeh"},"content":"     * The constructor for the Event.","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"ryanpeh"},"content":"     * @param description Description of the event.","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"ryanpeh"},"content":"     * @param at The date and time of the event.","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"ryanpeh"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"ryanpeh"},"content":"    public Event(String description, String at) {","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"ryanpeh"},"content":"        super(description);","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"ryanpeh"},"content":"        this.at \u003d LocalDateTime.parse(at, formatter);","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"ryanpeh"},"content":"    public LocalDateTime getTimeAt() {","lastModifiedDate":"2021-09-10"},{"lineNumber":21,"author":{"gitId":"ryanpeh"},"content":"        return at;","lastModifiedDate":"2021-09-10"},{"lineNumber":22,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-09-10"},{"lineNumber":23,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":24,"author":{"gitId":"ryanpeh"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":25,"author":{"gitId":"ryanpeh"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":26,"author":{"gitId":"ryanpeh"},"content":"        return \"[E] \" + super.toString() + \" (at: \" + at.format(formatter) + \")\";","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":28,"author":{"gitId":"ryanpeh"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"ryanpeh":28}},{"path":"src/main/java/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ryanpeh"},"content":"package duke.tasks;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"ryanpeh"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"ryanpeh"},"content":" * Represents the tasks entered by the user.","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"ryanpeh"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"ryanpeh"},"content":"public class Task {","lastModifiedDate":"2021-08-17"},{"lineNumber":7,"author":{"gitId":"ryanpeh"},"content":"    protected String description;","lastModifiedDate":"2021-08-17"},{"lineNumber":8,"author":{"gitId":"ryanpeh"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-17"},{"lineNumber":9,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":10,"author":{"gitId":"ryanpeh"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"ryanpeh"},"content":"     * Constructor for the Task.","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"ryanpeh"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"ryanpeh"},"content":"     * @param description The description of the task.","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"ryanpeh"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"ryanpeh"},"content":"    public Task(String description) {","lastModifiedDate":"2021-08-17"},{"lineNumber":16,"author":{"gitId":"ryanpeh"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-17"},{"lineNumber":17,"author":{"gitId":"ryanpeh"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-17"},{"lineNumber":18,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":19,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":20,"author":{"gitId":"ryanpeh"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"ryanpeh"},"content":"     * Returns the status of the task.","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"ryanpeh"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"ryanpeh"},"content":"     * @return The status of the task.","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"ryanpeh"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"ryanpeh"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-17"},{"lineNumber":26,"author":{"gitId":"ryanpeh"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2021-08-17"},{"lineNumber":27,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":28,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":29,"author":{"gitId":"ryanpeh"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"ryanpeh"},"content":"     * Marks the task as done.","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"ryanpeh"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":32,"author":{"gitId":"ryanpeh"},"content":"    public void markAsDone() {","lastModifiedDate":"2021-08-17"},{"lineNumber":33,"author":{"gitId":"ryanpeh"},"content":"        isDone \u003d true;","lastModifiedDate":"2021-08-17"},{"lineNumber":34,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":35,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":36,"author":{"gitId":"ryanpeh"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":37,"author":{"gitId":"ryanpeh"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":38,"author":{"gitId":"ryanpeh"},"content":"        return \"[\" + getStatusIcon() + \"] \" + description;","lastModifiedDate":"2021-08-18"},{"lineNumber":39,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":40,"author":{"gitId":"ryanpeh"},"content":"}","lastModifiedDate":"2021-08-17"}],"authorContributionMap":{"ryanpeh":40}},{"path":"src/main/java/duke/tasks/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ryanpeh"},"content":"package duke.tasks;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"ryanpeh"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"ryanpeh"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"ryanpeh"},"content":"     * Constructor for the Todo.","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"ryanpeh"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"ryanpeh"},"content":"     * @param description Description of the todo.","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"ryanpeh"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"ryanpeh"},"content":"    public Todo(String description) {","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"ryanpeh"},"content":"        super(description);","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"ryanpeh"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"ryanpeh"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"ryanpeh"},"content":"        return \"[T] \" + super.toString();","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"ryanpeh"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"ryanpeh":18}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"ryanpeh"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":2,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"ryanpeh"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"ryanpeh"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"ryanpeh"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"ryanpeh"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"ryanpeh"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"ryanpeh"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"ryanpeh"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"ryanpeh"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"ryanpeh"},"content":"    \u003c/children\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":13,"author":{"gitId":"ryanpeh"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"ryanpeh"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"ryanpeh"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"ryanpeh"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"ryanpeh":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"ryanpeh"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":2,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"ryanpeh"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"ryanpeh"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"ryanpeh"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"ryanpeh"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"ryanpeh"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"ryanpeh"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/16\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.gui.MainWindow\"\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"ryanpeh"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"ryanpeh"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"ryanpeh"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":13,"author":{"gitId":"ryanpeh"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"ryanpeh"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"ryanpeh"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\"/\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"ryanpeh"},"content":"            \u003c/content\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":17,"author":{"gitId":"ryanpeh"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":18,"author":{"gitId":"ryanpeh"},"content":"    \u003c/children\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":19,"author":{"gitId":"ryanpeh"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"ryanpeh":19}},{"path":"src/test/java/duke/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ryanpeh"},"content":"package duke;","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":3,"author":{"gitId":"ryanpeh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"ryanpeh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"ryanpeh"},"content":"import duke.tasks.Event;","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"ryanpeh"},"content":"public class EventTest {","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"ryanpeh"},"content":"    @Test","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"ryanpeh"},"content":"    public void testEvent() {","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"ryanpeh"},"content":"        Event event \u003d new Event(\"Exam\", \"30 Aug 2021 09:00\");","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"ryanpeh"},"content":"        assertEquals(event.toString(), \"[E] [ ] Exam (at: 30 Aug 2021 09:00)\");","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"ryanpeh"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"ryanpeh":16}},{"path":"src/test/java/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ryanpeh"},"content":"package duke;","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"ryanpeh"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-08-30"},{"lineNumber":3,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"ryanpeh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"ryanpeh"},"content":"import duke.commands.Command;","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"ryanpeh"},"content":"public class ParserTest {","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"ryanpeh"},"content":"    @Test","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"ryanpeh"},"content":"    public void testParseExit() throws DukeException {","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"ryanpeh"},"content":"        Command c \u003d new Parser().parse(\"bye\");","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"ryanpeh"},"content":"        assertTrue(c.isExit());","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"ryanpeh"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"ryanpeh":16}},{"path":"src/test/java/duke/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ryanpeh"},"content":"package duke;","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"ryanpeh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-30"},{"lineNumber":3,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"ryanpeh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"ryanpeh"},"content":"import duke.tasks.Todo;","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"ryanpeh"},"content":"public class TodoTest {","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"ryanpeh"},"content":"    @Test","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"ryanpeh"},"content":"    public void testTodo() {","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"ryanpeh"},"content":"        Todo todo \u003d new Todo(\"Hello\");","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"ryanpeh"},"content":"        assertEquals(todo.toString(), \"[T] [ ] Hello\");","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"ryanpeh"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"ryanpeh"},"content":"    @Test","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"ryanpeh"},"content":"    public void testMarkTodoDone() {","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"ryanpeh"},"content":"        Todo todo \u003d new Todo(\"Hi!\");","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"ryanpeh"},"content":"        todo.markAsDone();","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"ryanpeh"},"content":"        assertEquals(todo.toString(), \"[T] [X] Hi!\");","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"ryanpeh"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"ryanpeh"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"ryanpeh":23}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"ryanpeh"},"content":"todo Study","lastModifiedDate":"2021-08-18"},{"lineNumber":2,"author":{"gitId":"ryanpeh"},"content":"deadline Finish CS2103T iP /by 19 Aug","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"ryanpeh"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"ryanpeh"},"content":"done 2","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"ryanpeh"},"content":"event Attend webinar /at 20 Aug 1pm","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"ryanpeh"},"content":"todo Cry","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"ryanpeh"},"content":"todo Sleep","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"ryanpeh"},"content":"done 4","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"ryanpeh"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"ryanpeh"},"content":"todo Cry again","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"ryanpeh"},"content":"done 6","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"ryanpeh"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"ryanpeh"},"content":"todo","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"ryanpeh"},"content":"deadline CS2103T Project","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"ryanpeh"},"content":"deadline","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"ryanpeh"},"content":"event CS2103T Lecture","lastModifiedDate":"2021-08-19"},{"lineNumber":17,"author":{"gitId":"ryanpeh"},"content":"bye","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"ryanpeh":17}}]

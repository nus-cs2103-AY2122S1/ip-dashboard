[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2021-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"Imranr2"},"content":"    implementation \u0027com.google.code.gson:gson:2.8.7\u0027","lastModifiedDate":"2021-08-14"},{"lineNumber":16,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":17,"author":{"gitId":"Imranr2"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2021-08-27"},{"lineNumber":18,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":19,"author":{"gitId":"Imranr2"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-08-27"},{"lineNumber":20,"author":{"gitId":"Imranr2"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-08-27"},{"lineNumber":21,"author":{"gitId":"Imranr2"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-08-27"},{"lineNumber":22,"author":{"gitId":"Imranr2"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-08-27"},{"lineNumber":23,"author":{"gitId":"Imranr2"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-08-27"},{"lineNumber":24,"author":{"gitId":"Imranr2"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-08-27"},{"lineNumber":25,"author":{"gitId":"Imranr2"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-08-27"},{"lineNumber":26,"author":{"gitId":"Imranr2"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-08-27"},{"lineNumber":27,"author":{"gitId":"Imranr2"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-08-27"},{"lineNumber":28,"author":{"gitId":"Imranr2"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-08-27"},{"lineNumber":29,"author":{"gitId":"Imranr2"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-08-27"},{"lineNumber":30,"author":{"gitId":"Imranr2"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-08-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"Imranr2"},"content":"    // Change to your main class","lastModifiedDate":"2021-08-13"},{"lineNumber":49,"author":{"gitId":"Imranr2"},"content":"    mainClassName \u003d \"lifeline.Launcher\"","lastModifiedDate":"2021-08-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2021-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2021-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"run {","lastModifiedDate":"2020-05-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Imranr2":18,"-":45}},{"path":"src/main/java/lifeline/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Imranr2"},"content":"package lifeline;","lastModifiedDate":"2021-08-27"},{"lineNumber":2,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":3,"author":{"gitId":"Imranr2"},"content":"import java.io.File;","lastModifiedDate":"2021-08-27"},{"lineNumber":4,"author":{"gitId":"Imranr2"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-08-27"},{"lineNumber":5,"author":{"gitId":"Imranr2"},"content":"import java.util.List;","lastModifiedDate":"2021-08-27"},{"lineNumber":6,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":7,"author":{"gitId":"Imranr2"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-08-27"},{"lineNumber":8,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":9,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":10,"author":{"gitId":"Imranr2"},"content":"/**","lastModifiedDate":"2021-08-27"},{"lineNumber":11,"author":{"gitId":"Imranr2"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2021-08-27"},{"lineNumber":12,"author":{"gitId":"Imranr2"},"content":" */","lastModifiedDate":"2021-08-27"},{"lineNumber":13,"author":{"gitId":"Imranr2"},"content":"public class Launcher {","lastModifiedDate":"2021-08-27"},{"lineNumber":14,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":15,"author":{"gitId":"Imranr2"},"content":"    /**","lastModifiedDate":"2021-08-27"},{"lineNumber":16,"author":{"gitId":"Imranr2"},"content":"     * Starts the GUI or the console version of the program depending on the mode specified by the user.","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"Imranr2"},"content":"     * If the user does not specify a mode, GUI version is run by default.","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"Imranr2"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":19,"author":{"gitId":"Imranr2"},"content":"     * @param args Arguments specified by the user.","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"Imranr2"},"content":"     */","lastModifiedDate":"2021-08-27"},{"lineNumber":21,"author":{"gitId":"Imranr2"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-27"},{"lineNumber":22,"author":{"gitId":"Imranr2"},"content":"        try {","lastModifiedDate":"2021-08-27"},{"lineNumber":23,"author":{"gitId":"Imranr2"},"content":"            String mode \u003d getMode(args);","lastModifiedDate":"2021-08-27"},{"lineNumber":24,"author":{"gitId":"Imranr2"},"content":"            if (mode.equals(\"console\")) {","lastModifiedDate":"2021-08-27"},{"lineNumber":25,"author":{"gitId":"Imranr2"},"content":"                startConsole();","lastModifiedDate":"2021-08-27"},{"lineNumber":26,"author":{"gitId":"Imranr2"},"content":"            } else {","lastModifiedDate":"2021-08-27"},{"lineNumber":27,"author":{"gitId":"Imranr2"},"content":"                Application.launch(Main.class, args);","lastModifiedDate":"2021-08-27"},{"lineNumber":28,"author":{"gitId":"Imranr2"},"content":"            }","lastModifiedDate":"2021-08-27"},{"lineNumber":29,"author":{"gitId":"Imranr2"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-27"},{"lineNumber":30,"author":{"gitId":"Imranr2"},"content":"            System.out.println(\"You did not specify a mode. Please specify \u0027gui\u0027 or \u0027console\u0027\");","lastModifiedDate":"2021-08-27"},{"lineNumber":31,"author":{"gitId":"Imranr2"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":32,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":33,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":34,"author":{"gitId":"Imranr2"},"content":"    private static String getMode(String[] args) {","lastModifiedDate":"2021-08-27"},{"lineNumber":35,"author":{"gitId":"Imranr2"},"content":"        List\u003cString\u003e arguments \u003d Arrays.asList(args);","lastModifiedDate":"2021-08-27"},{"lineNumber":36,"author":{"gitId":"Imranr2"},"content":"        int modeIndex \u003d arguments.indexOf(\"--mode\");","lastModifiedDate":"2021-08-27"},{"lineNumber":37,"author":{"gitId":"Imranr2"},"content":"        String mode \u003d modeIndex \u003d\u003d -1 ? \"gui\" : arguments.get(modeIndex + 1);","lastModifiedDate":"2021-08-27"},{"lineNumber":38,"author":{"gitId":"Imranr2"},"content":"        return mode.toLowerCase();","lastModifiedDate":"2021-08-27"},{"lineNumber":39,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":40,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":41,"author":{"gitId":"Imranr2"},"content":"    /**","lastModifiedDate":"2021-08-27"},{"lineNumber":42,"author":{"gitId":"Imranr2"},"content":"     * Starts the console program.","lastModifiedDate":"2021-08-31"},{"lineNumber":43,"author":{"gitId":"Imranr2"},"content":"     */","lastModifiedDate":"2021-08-27"},{"lineNumber":44,"author":{"gitId":"Imranr2"},"content":"    public static void startConsole() {","lastModifiedDate":"2021-08-27"},{"lineNumber":45,"author":{"gitId":"Imranr2"},"content":"        Lifeline lifeline \u003d new Lifeline(\"save\" + File.separator + \"tasks.json\");","lastModifiedDate":"2021-08-27"},{"lineNumber":46,"author":{"gitId":"Imranr2"},"content":"        lifeline.start();","lastModifiedDate":"2021-08-27"},{"lineNumber":47,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":48,"author":{"gitId":"Imranr2"},"content":"}","lastModifiedDate":"2021-08-27"}],"authorContributionMap":{"Imranr2":48}},{"path":"src/main/java/lifeline/Lifeline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Imranr2"},"content":"package lifeline;","lastModifiedDate":"2021-08-18"},{"lineNumber":2,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"Imranr2"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-15"},{"lineNumber":4,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":5,"author":{"gitId":"Imranr2"},"content":"import lifeline.command.Command;","lastModifiedDate":"2021-08-15"},{"lineNumber":6,"author":{"gitId":"Imranr2"},"content":"import lifeline.exception.LifelineException;","lastModifiedDate":"2021-08-15"},{"lineNumber":7,"author":{"gitId":"Imranr2"},"content":"import lifeline.parser.Parser;","lastModifiedDate":"2021-08-15"},{"lineNumber":8,"author":{"gitId":"Imranr2"},"content":"import lifeline.storage.Storage;","lastModifiedDate":"2021-08-15"},{"lineNumber":9,"author":{"gitId":"Imranr2"},"content":"import lifeline.task.TaskList;","lastModifiedDate":"2021-08-15"},{"lineNumber":10,"author":{"gitId":"Imranr2"},"content":"import lifeline.ui.Ui;","lastModifiedDate":"2021-08-15"},{"lineNumber":11,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":12,"author":{"gitId":"Imranr2"},"content":"/**","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"Imranr2"},"content":" * The class Lifeline is the entry point to the Lifeline program.","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"Imranr2"},"content":" * Calling start on this class will start the program.","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"Imranr2"},"content":" */","lastModifiedDate":"2021-08-21"},{"lineNumber":16,"author":{"gitId":"Imranr2"},"content":"public class Lifeline {","lastModifiedDate":"2021-08-13"},{"lineNumber":17,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":18,"author":{"gitId":"Imranr2"},"content":"    /** List of tasks created by the user */","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"Imranr2"},"content":"    private TaskList taskList;","lastModifiedDate":"2021-08-14"},{"lineNumber":20,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":21,"author":{"gitId":"Imranr2"},"content":"    /** Used to save new tasks or load saved tasks */","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"Imranr2"},"content":"    private Storage storage;","lastModifiedDate":"2021-08-14"},{"lineNumber":23,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":24,"author":{"gitId":"Imranr2"},"content":"    /** Used to display information to the user */","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"Imranr2"},"content":"    private Ui ui;","lastModifiedDate":"2021-08-14"},{"lineNumber":26,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-13"},{"lineNumber":27,"author":{"gitId":"Imranr2"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":28,"author":{"gitId":"Imranr2"},"content":"     * Default constructor for a Lifeline.","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"Imranr2"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":30,"author":{"gitId":"Imranr2"},"content":"     * @param filepath Path to load or save tasks.","lastModifiedDate":"2021-08-31"},{"lineNumber":31,"author":{"gitId":"Imranr2"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":32,"author":{"gitId":"Imranr2"},"content":"    public Lifeline(String filepath) {","lastModifiedDate":"2021-08-27"},{"lineNumber":33,"author":{"gitId":"Imranr2"},"content":"        this.storage \u003d new Storage(filepath);","lastModifiedDate":"2021-08-14"},{"lineNumber":34,"author":{"gitId":"Imranr2"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2021-08-14"},{"lineNumber":35,"author":{"gitId":"Imranr2"},"content":"        try {","lastModifiedDate":"2021-08-14"},{"lineNumber":36,"author":{"gitId":"Imranr2"},"content":"            this.taskList \u003d storage.load();","lastModifiedDate":"2021-08-14"},{"lineNumber":37,"author":{"gitId":"Imranr2"},"content":"        } catch (LifelineException e) {","lastModifiedDate":"2021-08-14"},{"lineNumber":38,"author":{"gitId":"Imranr2"},"content":"            this.taskList \u003d new TaskList(new ArrayList\u003c\u003e());","lastModifiedDate":"2021-08-14"},{"lineNumber":39,"author":{"gitId":"Imranr2"},"content":"        }","lastModifiedDate":"2021-08-14"},{"lineNumber":40,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-13"},{"lineNumber":41,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-13"},{"lineNumber":42,"author":{"gitId":"Imranr2"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":43,"author":{"gitId":"Imranr2"},"content":"     * Gets the appropriate response from Lifeline if user inputs a valid command.","lastModifiedDate":"2021-08-31"},{"lineNumber":44,"author":{"gitId":"Imranr2"},"content":"     * Method is used only for GUI.","lastModifiedDate":"2021-08-31"},{"lineNumber":45,"author":{"gitId":"Imranr2"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":46,"author":{"gitId":"Imranr2"},"content":"     * @param command User input.","lastModifiedDate":"2021-08-31"},{"lineNumber":47,"author":{"gitId":"Imranr2"},"content":"     * @return Response from Lifeline if user inputs a valid command. If user inputs invalid command, error","lastModifiedDate":"2021-08-27"},{"lineNumber":48,"author":{"gitId":"Imranr2"},"content":"     * message is returned instead.","lastModifiedDate":"2021-08-27"},{"lineNumber":49,"author":{"gitId":"Imranr2"},"content":"     */","lastModifiedDate":"2021-08-27"},{"lineNumber":50,"author":{"gitId":"Imranr2"},"content":"    public String getResponse(String command) {","lastModifiedDate":"2021-08-27"},{"lineNumber":51,"author":{"gitId":"Imranr2"},"content":"        try {","lastModifiedDate":"2021-08-27"},{"lineNumber":52,"author":{"gitId":"Imranr2"},"content":"            Command c \u003d Parser.parse(command);","lastModifiedDate":"2021-08-27"},{"lineNumber":53,"author":{"gitId":"Imranr2"},"content":"            return c.getExecute().apply(command.trim(), storage, taskList, ui);","lastModifiedDate":"2021-09-04"},{"lineNumber":54,"author":{"gitId":"Imranr2"},"content":"        } catch (LifelineException e) {","lastModifiedDate":"2021-08-27"},{"lineNumber":55,"author":{"gitId":"Imranr2"},"content":"            return ui.showError(e.getMessage());","lastModifiedDate":"2021-08-27"},{"lineNumber":56,"author":{"gitId":"Imranr2"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":57,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":58,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":59,"author":{"gitId":"Imranr2"},"content":"    /**","lastModifiedDate":"2021-08-27"},{"lineNumber":60,"author":{"gitId":"Imranr2"},"content":"     * Starts the console program.","lastModifiedDate":"2021-08-31"},{"lineNumber":61,"author":{"gitId":"Imranr2"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":62,"author":{"gitId":"Imranr2"},"content":"    public void start() {","lastModifiedDate":"2021-08-13"},{"lineNumber":63,"author":{"gitId":"Imranr2"},"content":"        ui.printToConsole(ui.consoleGreet());","lastModifiedDate":"2021-08-28"},{"lineNumber":64,"author":{"gitId":"Imranr2"},"content":"        this.getInput();","lastModifiedDate":"2021-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":66,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":67,"author":{"gitId":"Imranr2"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":68,"author":{"gitId":"Imranr2"},"content":"     * Greets user when user starts GUI.","lastModifiedDate":"2021-08-31"},{"lineNumber":69,"author":{"gitId":"Imranr2"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":70,"author":{"gitId":"Imranr2"},"content":"     * @return Greeting message when user starts GUI.","lastModifiedDate":"2021-08-31"},{"lineNumber":71,"author":{"gitId":"Imranr2"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":72,"author":{"gitId":"Imranr2"},"content":"    public String getGreetingMessage() {","lastModifiedDate":"2021-08-28"},{"lineNumber":73,"author":{"gitId":"Imranr2"},"content":"        return ui.guiGreet();","lastModifiedDate":"2021-08-28"},{"lineNumber":74,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":75,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":76,"author":{"gitId":"Imranr2"},"content":"    private void getInput() {","lastModifiedDate":"2021-08-27"},{"lineNumber":77,"author":{"gitId":"Imranr2"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2021-08-31"},{"lineNumber":78,"author":{"gitId":"Imranr2"},"content":"        while (!isExit) {","lastModifiedDate":"2021-08-31"},{"lineNumber":79,"author":{"gitId":"Imranr2"},"content":"            try {","lastModifiedDate":"2021-08-27"},{"lineNumber":80,"author":{"gitId":"Imranr2"},"content":"                String fullCommand \u003d ui.readCommand();","lastModifiedDate":"2021-08-27"},{"lineNumber":81,"author":{"gitId":"Imranr2"},"content":"                if (fullCommand.equals(\"\")) {","lastModifiedDate":"2021-08-27"},{"lineNumber":82,"author":{"gitId":"Imranr2"},"content":"                    continue;","lastModifiedDate":"2021-08-27"},{"lineNumber":83,"author":{"gitId":"Imranr2"},"content":"                }","lastModifiedDate":"2021-08-27"},{"lineNumber":84,"author":{"gitId":"Imranr2"},"content":"                System.out.println();","lastModifiedDate":"2021-08-27"},{"lineNumber":85,"author":{"gitId":"Imranr2"},"content":"                Command c \u003d Parser.parse(fullCommand);","lastModifiedDate":"2021-08-27"},{"lineNumber":86,"author":{"gitId":"Imranr2"},"content":"                String response \u003d c.getExecute().apply(fullCommand.trim(), storage, taskList, ui);","lastModifiedDate":"2021-09-04"},{"lineNumber":87,"author":{"gitId":"Imranr2"},"content":"                ui.printToConsole(response);","lastModifiedDate":"2021-08-27"},{"lineNumber":88,"author":{"gitId":"Imranr2"},"content":"                if (c \u003d\u003d Command.BYE) {","lastModifiedDate":"2021-08-27"},{"lineNumber":89,"author":{"gitId":"Imranr2"},"content":"                    isExit \u003d true;","lastModifiedDate":"2021-08-31"},{"lineNumber":90,"author":{"gitId":"Imranr2"},"content":"                }","lastModifiedDate":"2021-08-27"},{"lineNumber":91,"author":{"gitId":"Imranr2"},"content":"            } catch (LifelineException e) {","lastModifiedDate":"2021-08-27"},{"lineNumber":92,"author":{"gitId":"Imranr2"},"content":"                ui.printToConsole(ui.showError(e.getMessage()));","lastModifiedDate":"2021-08-27"},{"lineNumber":93,"author":{"gitId":"Imranr2"},"content":"            }","lastModifiedDate":"2021-08-27"},{"lineNumber":94,"author":{"gitId":"Imranr2"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":95,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"Imranr2":94,"-":2}},{"path":"src/main/java/lifeline/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Imranr2"},"content":"package lifeline;","lastModifiedDate":"2021-08-18"},{"lineNumber":2,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"Imranr2"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-27"},{"lineNumber":4,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":5,"author":{"gitId":"Imranr2"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-08-27"},{"lineNumber":6,"author":{"gitId":"Imranr2"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-08-27"},{"lineNumber":7,"author":{"gitId":"Imranr2"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2021-08-27"},{"lineNumber":8,"author":{"gitId":"Imranr2"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-08-27"},{"lineNumber":9,"author":{"gitId":"Imranr2"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-08-27"},{"lineNumber":10,"author":{"gitId":"Imranr2"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2021-08-27"},{"lineNumber":11,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"Imranr2"},"content":"/**","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"Imranr2"},"content":" * The Main class starts the program.","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"Imranr2"},"content":" */","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"Imranr2"},"content":"public class Main extends Application {","lastModifiedDate":"2021-08-27"},{"lineNumber":16,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":17,"author":{"gitId":"Imranr2"},"content":"    /**","lastModifiedDate":"2021-08-27"},{"lineNumber":18,"author":{"gitId":"Imranr2"},"content":"     * Starts the GUI program.","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"Imranr2"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":20,"author":{"gitId":"Imranr2"},"content":"     * @param stage Main stage which represents primary window of JavaFX application.","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"Imranr2"},"content":"     */","lastModifiedDate":"2021-08-27"},{"lineNumber":22,"author":{"gitId":"Imranr2"},"content":"    @Override","lastModifiedDate":"2021-08-27"},{"lineNumber":23,"author":{"gitId":"Imranr2"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2021-08-27"},{"lineNumber":24,"author":{"gitId":"Imranr2"},"content":"        try {","lastModifiedDate":"2021-08-27"},{"lineNumber":25,"author":{"gitId":"Imranr2"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2021-08-27"},{"lineNumber":26,"author":{"gitId":"Imranr2"},"content":"            AnchorPane anchorPane \u003d fxmlLoader.load();","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"Imranr2"},"content":"            Scene scene \u003d new Scene(anchorPane);","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"Imranr2"},"content":"            scene.getStylesheets().add(\"styles/lifeline.css\");","lastModifiedDate":"2021-08-27"},{"lineNumber":29,"author":{"gitId":"Imranr2"},"content":"            Image icon \u003d new Image(this.getClass().getResourceAsStream(\"/images/Apex.png\"));","lastModifiedDate":"2021-08-27"},{"lineNumber":30,"author":{"gitId":"Imranr2"},"content":"            stage.getIcons().add(icon);","lastModifiedDate":"2021-08-27"},{"lineNumber":31,"author":{"gitId":"Imranr2"},"content":"            stage.setScene(scene);","lastModifiedDate":"2021-08-27"},{"lineNumber":32,"author":{"gitId":"Imranr2"},"content":"            stage.setResizable(false);","lastModifiedDate":"2021-08-28"},{"lineNumber":33,"author":{"gitId":"Imranr2"},"content":"            stage.setTitle(\"Lifeline\");","lastModifiedDate":"2021-08-27"},{"lineNumber":34,"author":{"gitId":"Imranr2"},"content":"            stage.show();","lastModifiedDate":"2021-08-27"},{"lineNumber":35,"author":{"gitId":"Imranr2"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-27"},{"lineNumber":36,"author":{"gitId":"Imranr2"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-27"},{"lineNumber":37,"author":{"gitId":"Imranr2"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":38,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":39,"author":{"gitId":"Imranr2"},"content":"}","lastModifiedDate":"2021-08-13"}],"authorContributionMap":{"Imranr2":39}},{"path":"src/main/java/lifeline/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Imranr2"},"content":"package lifeline.command;","lastModifiedDate":"2021-08-15"},{"lineNumber":2,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":3,"author":{"gitId":"Imranr2"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"Imranr2"},"content":"import java.util.List;","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"Imranr2"},"content":"import lifeline.storage.Storage;","lastModifiedDate":"2021-08-15"},{"lineNumber":7,"author":{"gitId":"Imranr2"},"content":"import lifeline.task.TaskList;","lastModifiedDate":"2021-08-15"},{"lineNumber":8,"author":{"gitId":"Imranr2"},"content":"import lifeline.ui.Ui;","lastModifiedDate":"2021-08-15"},{"lineNumber":9,"author":{"gitId":"Imranr2"},"content":"import lifeline.util.QuadFunction;","lastModifiedDate":"2021-08-15"},{"lineNumber":10,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":11,"author":{"gitId":"Imranr2"},"content":"public enum Command {","lastModifiedDate":"2021-08-14"},{"lineNumber":12,"author":{"gitId":"Imranr2"},"content":"    // inspiration from https://alexpower.me/advanced-java-enum-features-you-need-to-know/","lastModifiedDate":"2021-08-15"},{"lineNumber":13,"author":{"gitId":"Imranr2"},"content":"    ALIAS(CommandHandler::handleAlias, \"alias\", \"a\", \"al\"),","lastModifiedDate":"2021-09-04"},{"lineNumber":14,"author":{"gitId":"Imranr2"},"content":"    BYE(CommandHandler::handleBye, \"bye\", \"bb\", \"goodbye\", \"b\"),","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"Imranr2"},"content":"    DEADLINE(CommandHandler::handleDeadline, \"deadline\", \"d\", \"dl\"),","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"Imranr2"},"content":"    DELETE(CommandHandler::handleDelete, \"delete\", \"del\"),","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"Imranr2"},"content":"    DONE(CommandHandler::handleDone, \"done\", \"complete\"),","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"Imranr2"},"content":"    EVENT(CommandHandler::handleEvent, \"event\", \"e\"),","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"Imranr2"},"content":"    FIND(CommandHandler:: handleFind, \"find\", \"f\"),","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"Imranr2"},"content":"    HELP(CommandHandler:: handleHelp, \"help\", \"h\"),","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"Imranr2"},"content":"    LIST(CommandHandler::handleList, \"list\", \"ls\", \"l\"),","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"Imranr2"},"content":"    TODO(CommandHandler::handleToDo, \"todo\", \"t\", \"td\");","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":24,"author":{"gitId":"Imranr2"},"content":"    private QuadFunction\u003cString, Storage, TaskList, Ui\u003e execute;","lastModifiedDate":"2021-08-15"},{"lineNumber":25,"author":{"gitId":"Imranr2"},"content":"    private List\u003cString\u003e aliases;","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":27,"author":{"gitId":"Imranr2"},"content":"    Command(QuadFunction\u003cString, Storage, TaskList, Ui\u003e execute, String... aliases) {","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"Imranr2"},"content":"        this.execute \u003d execute;","lastModifiedDate":"2021-08-15"},{"lineNumber":29,"author":{"gitId":"Imranr2"},"content":"        this.aliases \u003d Arrays.asList(aliases);","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":31,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":32,"author":{"gitId":"Imranr2"},"content":"    public QuadFunction\u003cString, Storage, TaskList, Ui\u003e getExecute() {","lastModifiedDate":"2021-08-15"},{"lineNumber":33,"author":{"gitId":"Imranr2"},"content":"        return execute;","lastModifiedDate":"2021-08-15"},{"lineNumber":34,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":35,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":36,"author":{"gitId":"Imranr2"},"content":"    public boolean hasCommand(String command) {","lastModifiedDate":"2021-08-30"},{"lineNumber":37,"author":{"gitId":"Imranr2"},"content":"        return this.aliases.contains(command);","lastModifiedDate":"2021-08-30"},{"lineNumber":38,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":39,"author":{"gitId":"Imranr2"},"content":"}","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"Imranr2":39}},{"path":"src/main/java/lifeline/command/CommandHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Imranr2"},"content":"package lifeline.command;","lastModifiedDate":"2021-08-15"},{"lineNumber":2,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":3,"author":{"gitId":"Imranr2"},"content":"import static lifeline.util.ErrorString.ERROR_DEADLINE_INCORRECT_FORMAT;","lastModifiedDate":"2021-09-03"},{"lineNumber":4,"author":{"gitId":"Imranr2"},"content":"import static lifeline.util.ErrorString.ERROR_DEADLINE_MISSING_DETAILS;","lastModifiedDate":"2021-09-03"},{"lineNumber":5,"author":{"gitId":"Imranr2"},"content":"import static lifeline.util.ErrorString.ERROR_DELETE_MISSING_INDEX;","lastModifiedDate":"2021-09-03"},{"lineNumber":6,"author":{"gitId":"Imranr2"},"content":"import static lifeline.util.ErrorString.ERROR_DONE_MISSING_INDEX;","lastModifiedDate":"2021-09-03"},{"lineNumber":7,"author":{"gitId":"Imranr2"},"content":"import static lifeline.util.ErrorString.ERROR_EVENT_INCORRECT_FORMAT;","lastModifiedDate":"2021-09-03"},{"lineNumber":8,"author":{"gitId":"Imranr2"},"content":"import static lifeline.util.ErrorString.ERROR_EVENT_MISSING_DETAILS;","lastModifiedDate":"2021-09-03"},{"lineNumber":9,"author":{"gitId":"Imranr2"},"content":"import static lifeline.util.ErrorString.ERROR_FIND_MISSING_KEYWORD;","lastModifiedDate":"2021-09-03"},{"lineNumber":10,"author":{"gitId":"Imranr2"},"content":"import static lifeline.util.ErrorString.ERROR_INDEX_OUT_OF_BOUNDS;","lastModifiedDate":"2021-09-03"},{"lineNumber":11,"author":{"gitId":"Imranr2"},"content":"import static lifeline.util.ErrorString.ERROR_INVALID_COMMAND;","lastModifiedDate":"2021-09-03"},{"lineNumber":12,"author":{"gitId":"Imranr2"},"content":"import static lifeline.util.ErrorString.ERROR_NON_INTEGER_INDEX;","lastModifiedDate":"2021-09-03"},{"lineNumber":13,"author":{"gitId":"Imranr2"},"content":"import static lifeline.util.ErrorString.ERROR_TODO_MISSING_DETAILS;","lastModifiedDate":"2021-09-03"},{"lineNumber":14,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":15,"author":{"gitId":"Imranr2"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-15"},{"lineNumber":16,"author":{"gitId":"Imranr2"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-08-15"},{"lineNumber":17,"author":{"gitId":"Imranr2"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-08-15"},{"lineNumber":18,"author":{"gitId":"Imranr2"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-04"},{"lineNumber":19,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":20,"author":{"gitId":"Imranr2"},"content":"import lifeline.exception.LifelineException;","lastModifiedDate":"2021-08-15"},{"lineNumber":21,"author":{"gitId":"Imranr2"},"content":"import lifeline.parser.DateTimeParser;","lastModifiedDate":"2021-09-04"},{"lineNumber":22,"author":{"gitId":"Imranr2"},"content":"import lifeline.storage.Storage;","lastModifiedDate":"2021-08-15"},{"lineNumber":23,"author":{"gitId":"Imranr2"},"content":"import lifeline.task.Deadline;","lastModifiedDate":"2021-08-15"},{"lineNumber":24,"author":{"gitId":"Imranr2"},"content":"import lifeline.task.Event;","lastModifiedDate":"2021-08-15"},{"lineNumber":25,"author":{"gitId":"Imranr2"},"content":"import lifeline.task.Task;","lastModifiedDate":"2021-08-15"},{"lineNumber":26,"author":{"gitId":"Imranr2"},"content":"import lifeline.task.TaskList;","lastModifiedDate":"2021-08-15"},{"lineNumber":27,"author":{"gitId":"Imranr2"},"content":"import lifeline.task.ToDo;","lastModifiedDate":"2021-08-15"},{"lineNumber":28,"author":{"gitId":"Imranr2"},"content":"import lifeline.ui.Ui;","lastModifiedDate":"2021-08-15"},{"lineNumber":29,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":30,"author":{"gitId":"Imranr2"},"content":"/**","lastModifiedDate":"2021-08-21"},{"lineNumber":31,"author":{"gitId":"Imranr2"},"content":" * The class CommandHandler handles all commands supplied by the user.","lastModifiedDate":"2021-08-31"},{"lineNumber":32,"author":{"gitId":"Imranr2"},"content":" */","lastModifiedDate":"2021-08-21"},{"lineNumber":33,"author":{"gitId":"Imranr2"},"content":"public class CommandHandler {","lastModifiedDate":"2021-08-15"},{"lineNumber":34,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":35,"author":{"gitId":"Imranr2"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":36,"author":{"gitId":"Imranr2"},"content":"     * Prints out given TaskList using the given Ui.","lastModifiedDate":"2021-08-31"},{"lineNumber":37,"author":{"gitId":"Imranr2"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":38,"author":{"gitId":"Imranr2"},"content":"     * @param command User input.","lastModifiedDate":"2021-08-31"},{"lineNumber":39,"author":{"gitId":"Imranr2"},"content":"     * @param storage Storage to save or load tasks.","lastModifiedDate":"2021-08-31"},{"lineNumber":40,"author":{"gitId":"Imranr2"},"content":"     * @param taskList List of tasks.","lastModifiedDate":"2021-08-31"},{"lineNumber":41,"author":{"gitId":"Imranr2"},"content":"     * @param ui Ui to display information to user.","lastModifiedDate":"2021-08-31"},{"lineNumber":42,"author":{"gitId":"Imranr2"},"content":"     * @return String to represent all tasks.","lastModifiedDate":"2021-08-31"},{"lineNumber":43,"author":{"gitId":"Imranr2"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":44,"author":{"gitId":"Imranr2"},"content":"    public static String handleList(String command, Storage storage, TaskList taskList, Ui ui) {","lastModifiedDate":"2021-08-20"},{"lineNumber":45,"author":{"gitId":"Imranr2"},"content":"        assert Command.LIST.hasCommand(command);","lastModifiedDate":"2021-09-03"},{"lineNumber":46,"author":{"gitId":"Imranr2"},"content":"        return ui.showTaskList(taskList);","lastModifiedDate":"2021-08-20"},{"lineNumber":47,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":48,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":49,"author":{"gitId":"Imranr2"},"content":"    /**","lastModifiedDate":"2021-09-04"},{"lineNumber":50,"author":{"gitId":"Imranr2"},"content":"     * Displays available alias to user.","lastModifiedDate":"2021-09-04"},{"lineNumber":51,"author":{"gitId":"Imranr2"},"content":"     *","lastModifiedDate":"2021-09-04"},{"lineNumber":52,"author":{"gitId":"Imranr2"},"content":"     * @param command User input.","lastModifiedDate":"2021-09-04"},{"lineNumber":53,"author":{"gitId":"Imranr2"},"content":"     * @param storage Storage to save or load tasks.","lastModifiedDate":"2021-09-04"},{"lineNumber":54,"author":{"gitId":"Imranr2"},"content":"     * @param taskList List of tasks.","lastModifiedDate":"2021-09-04"},{"lineNumber":55,"author":{"gitId":"Imranr2"},"content":"     * @param ui Ui to display information to user.","lastModifiedDate":"2021-09-04"},{"lineNumber":56,"author":{"gitId":"Imranr2"},"content":"     * @return Available alias to user.","lastModifiedDate":"2021-09-04"},{"lineNumber":57,"author":{"gitId":"Imranr2"},"content":"     */","lastModifiedDate":"2021-09-04"},{"lineNumber":58,"author":{"gitId":"Imranr2"},"content":"    public static String handleAlias(String command, Storage storage, TaskList taskList, Ui ui) {","lastModifiedDate":"2021-09-04"},{"lineNumber":59,"author":{"gitId":"Imranr2"},"content":"        assert Command.ALIAS.hasCommand(command);","lastModifiedDate":"2021-09-04"},{"lineNumber":60,"author":{"gitId":"Imranr2"},"content":"        return ui.showAlias();","lastModifiedDate":"2021-09-04"},{"lineNumber":61,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":62,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":63,"author":{"gitId":"Imranr2"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":64,"author":{"gitId":"Imranr2"},"content":"     * Displays goodbye message to the user when user exits the program.","lastModifiedDate":"2021-08-31"},{"lineNumber":65,"author":{"gitId":"Imranr2"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":66,"author":{"gitId":"Imranr2"},"content":"     * @param command User input.","lastModifiedDate":"2021-08-31"},{"lineNumber":67,"author":{"gitId":"Imranr2"},"content":"     * @param storage Storage to save or load tasks.","lastModifiedDate":"2021-08-31"},{"lineNumber":68,"author":{"gitId":"Imranr2"},"content":"     * @param taskList List of tasks.","lastModifiedDate":"2021-08-31"},{"lineNumber":69,"author":{"gitId":"Imranr2"},"content":"     * @param ui Ui to display information to user.","lastModifiedDate":"2021-08-31"},{"lineNumber":70,"author":{"gitId":"Imranr2"},"content":"     * @return Goodbye message.","lastModifiedDate":"2021-08-31"},{"lineNumber":71,"author":{"gitId":"Imranr2"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":72,"author":{"gitId":"Imranr2"},"content":"    public static String handleBye(String command, Storage storage, TaskList taskList, Ui ui) {","lastModifiedDate":"2021-08-20"},{"lineNumber":73,"author":{"gitId":"Imranr2"},"content":"        assert Command.BYE.hasCommand(command);","lastModifiedDate":"2021-09-03"},{"lineNumber":74,"author":{"gitId":"Imranr2"},"content":"        return ui.exit();","lastModifiedDate":"2021-08-20"},{"lineNumber":75,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":76,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":77,"author":{"gitId":"Imranr2"},"content":"    /**","lastModifiedDate":"2021-09-03"},{"lineNumber":78,"author":{"gitId":"Imranr2"},"content":"     * Displays help message to inform users on available commands and its usage.","lastModifiedDate":"2021-09-03"},{"lineNumber":79,"author":{"gitId":"Imranr2"},"content":"     * @param command User input.","lastModifiedDate":"2021-09-03"},{"lineNumber":80,"author":{"gitId":"Imranr2"},"content":"     * @param storage Storage to save or load tasks.","lastModifiedDate":"2021-09-03"},{"lineNumber":81,"author":{"gitId":"Imranr2"},"content":"     * @param taskList List of tasks.","lastModifiedDate":"2021-09-03"},{"lineNumber":82,"author":{"gitId":"Imranr2"},"content":"     * @param ui Ui to display information to user.","lastModifiedDate":"2021-09-03"},{"lineNumber":83,"author":{"gitId":"Imranr2"},"content":"     * @return Help message to inform users on available commands and its usage.","lastModifiedDate":"2021-09-03"},{"lineNumber":84,"author":{"gitId":"Imranr2"},"content":"     */","lastModifiedDate":"2021-09-03"},{"lineNumber":85,"author":{"gitId":"Imranr2"},"content":"    public static String handleHelp(String command, Storage storage, TaskList taskList, Ui ui) {","lastModifiedDate":"2021-08-30"},{"lineNumber":86,"author":{"gitId":"Imranr2"},"content":"        assert Command.HELP.hasCommand(command);","lastModifiedDate":"2021-09-04"},{"lineNumber":87,"author":{"gitId":"Imranr2"},"content":"        return ui.showHelpMessage();","lastModifiedDate":"2021-08-30"},{"lineNumber":88,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":89,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":90,"author":{"gitId":"Imranr2"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":91,"author":{"gitId":"Imranr2"},"content":"     * Creates and saves an instance of a Deadline. Instance is added to TaskList.","lastModifiedDate":"2021-08-31"},{"lineNumber":92,"author":{"gitId":"Imranr2"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":93,"author":{"gitId":"Imranr2"},"content":"     * @param command User input.","lastModifiedDate":"2021-08-31"},{"lineNumber":94,"author":{"gitId":"Imranr2"},"content":"     * @param storage Storage to save or load tasks.","lastModifiedDate":"2021-08-31"},{"lineNumber":95,"author":{"gitId":"Imranr2"},"content":"     * @param taskList List of tasks.","lastModifiedDate":"2021-08-31"},{"lineNumber":96,"author":{"gitId":"Imranr2"},"content":"     * @param ui Ui to display information to user.","lastModifiedDate":"2021-08-31"},{"lineNumber":97,"author":{"gitId":"Imranr2"},"content":"     * @return Message to notify user that the deadline has been created.","lastModifiedDate":"2021-08-31"},{"lineNumber":98,"author":{"gitId":"Imranr2"},"content":"     * @throws LifelineException if command is incomplete or not of the correct format or tasklist is not able to be.","lastModifiedDate":"2021-08-31"},{"lineNumber":99,"author":{"gitId":"Imranr2"},"content":"     *                           saved","lastModifiedDate":"2021-08-21"},{"lineNumber":100,"author":{"gitId":"Imranr2"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":101,"author":{"gitId":"Imranr2"},"content":"    public static String handleDeadline(String command, Storage storage, TaskList taskList, Ui ui)","lastModifiedDate":"2021-08-20"},{"lineNumber":102,"author":{"gitId":"Imranr2"},"content":"            throws LifelineException {","lastModifiedDate":"2021-08-15"},{"lineNumber":103,"author":{"gitId":"Imranr2"},"content":"        assert Command.DEADLINE.hasCommand(splitCommands(command)[0]);","lastModifiedDate":"2021-09-04"},{"lineNumber":104,"author":{"gitId":"Imranr2"},"content":"        Task newTask \u003d createDeadline(command);","lastModifiedDate":"2021-09-04"},{"lineNumber":105,"author":{"gitId":"Imranr2"},"content":"        taskList.add(newTask);","lastModifiedDate":"2021-08-15"},{"lineNumber":106,"author":{"gitId":"Imranr2"},"content":"        storage.save(taskList);","lastModifiedDate":"2021-08-15"},{"lineNumber":107,"author":{"gitId":"Imranr2"},"content":"        return ui.showAddedTask(newTask);","lastModifiedDate":"2021-08-20"},{"lineNumber":108,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":109,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":110,"author":{"gitId":"Imranr2"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":111,"author":{"gitId":"Imranr2"},"content":"     * Creates and saves an instance of an Event. Instance is added to TaskList.","lastModifiedDate":"2021-08-31"},{"lineNumber":112,"author":{"gitId":"Imranr2"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":113,"author":{"gitId":"Imranr2"},"content":"     * @param command User input.","lastModifiedDate":"2021-08-31"},{"lineNumber":114,"author":{"gitId":"Imranr2"},"content":"     * @param storage Storage to save or load tasks.","lastModifiedDate":"2021-08-31"},{"lineNumber":115,"author":{"gitId":"Imranr2"},"content":"     * @param taskList List of tasks.","lastModifiedDate":"2021-08-31"},{"lineNumber":116,"author":{"gitId":"Imranr2"},"content":"     * @param ui Ui to display information to user.","lastModifiedDate":"2021-08-31"},{"lineNumber":117,"author":{"gitId":"Imranr2"},"content":"     * @return Message to notify user that the event has been created.","lastModifiedDate":"2021-08-31"},{"lineNumber":118,"author":{"gitId":"Imranr2"},"content":"     * @throws LifelineException if command is incomplete or not of the correct format or tasklist is not able to be","lastModifiedDate":"2021-08-21"},{"lineNumber":119,"author":{"gitId":"Imranr2"},"content":"     *                           saved.","lastModifiedDate":"2021-08-31"},{"lineNumber":120,"author":{"gitId":"Imranr2"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":121,"author":{"gitId":"Imranr2"},"content":"    public static String handleEvent(String command, Storage storage, TaskList taskList, Ui ui)","lastModifiedDate":"2021-08-20"},{"lineNumber":122,"author":{"gitId":"Imranr2"},"content":"            throws LifelineException {","lastModifiedDate":"2021-08-20"},{"lineNumber":123,"author":{"gitId":"Imranr2"},"content":"        assert Command.EVENT.hasCommand(splitCommands(command)[0]);","lastModifiedDate":"2021-09-04"},{"lineNumber":124,"author":{"gitId":"Imranr2"},"content":"        Task newTask \u003d createEvent(command);","lastModifiedDate":"2021-09-04"},{"lineNumber":125,"author":{"gitId":"Imranr2"},"content":"        taskList.add(newTask);","lastModifiedDate":"2021-08-15"},{"lineNumber":126,"author":{"gitId":"Imranr2"},"content":"        storage.save(taskList);","lastModifiedDate":"2021-08-15"},{"lineNumber":127,"author":{"gitId":"Imranr2"},"content":"        return ui.showAddedTask(newTask);","lastModifiedDate":"2021-08-20"},{"lineNumber":128,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":129,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":130,"author":{"gitId":"Imranr2"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":131,"author":{"gitId":"Imranr2"},"content":"     * Finds tasks in taskList with given keyword.","lastModifiedDate":"2021-08-31"},{"lineNumber":132,"author":{"gitId":"Imranr2"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":133,"author":{"gitId":"Imranr2"},"content":"     * @param command User input.","lastModifiedDate":"2021-08-31"},{"lineNumber":134,"author":{"gitId":"Imranr2"},"content":"     * @param storage Storage to save or load tasks.","lastModifiedDate":"2021-08-31"},{"lineNumber":135,"author":{"gitId":"Imranr2"},"content":"     * @param taskList List of tasks.","lastModifiedDate":"2021-08-31"},{"lineNumber":136,"author":{"gitId":"Imranr2"},"content":"     * @param ui Ui to display information to user.","lastModifiedDate":"2021-08-31"},{"lineNumber":137,"author":{"gitId":"Imranr2"},"content":"     * @return All tasks whose name contains the keyword.","lastModifiedDate":"2021-08-31"},{"lineNumber":138,"author":{"gitId":"Imranr2"},"content":"     * @throws LifelineException if user does not specify a keyword or no tasks are found.","lastModifiedDate":"2021-08-31"},{"lineNumber":139,"author":{"gitId":"Imranr2"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":140,"author":{"gitId":"Imranr2"},"content":"    public static String handleFind(String command, Storage storage, TaskList taskList, Ui ui)","lastModifiedDate":"2021-08-21"},{"lineNumber":141,"author":{"gitId":"Imranr2"},"content":"            throws LifelineException {","lastModifiedDate":"2021-08-21"},{"lineNumber":142,"author":{"gitId":"Imranr2"},"content":"        String[] commands \u003d splitCommands(command);","lastModifiedDate":"2021-09-04"},{"lineNumber":143,"author":{"gitId":"Imranr2"},"content":"        assert Command.FIND.hasCommand(commands[0]);","lastModifiedDate":"2021-09-03"},{"lineNumber":144,"author":{"gitId":"Imranr2"},"content":"        String keyword \u003d commands[1];","lastModifiedDate":"2021-09-04"},{"lineNumber":145,"author":{"gitId":"Imranr2"},"content":"        TaskList foundTasks \u003d taskList.findTasks(keyword.toLowerCase());","lastModifiedDate":"2021-09-04"},{"lineNumber":146,"author":{"gitId":"Imranr2"},"content":"        return ui.showFoundTasks(foundTasks, keyword);","lastModifiedDate":"2021-09-04"},{"lineNumber":147,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":148,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":149,"author":{"gitId":"Imranr2"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":150,"author":{"gitId":"Imranr2"},"content":"     * Creates and saves an instance of ToDo. Instance is added to TaskList.","lastModifiedDate":"2021-08-31"},{"lineNumber":151,"author":{"gitId":"Imranr2"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":152,"author":{"gitId":"Imranr2"},"content":"     * @param command User input.","lastModifiedDate":"2021-08-31"},{"lineNumber":153,"author":{"gitId":"Imranr2"},"content":"     * @param storage Storage to save or load tasks.","lastModifiedDate":"2021-08-31"},{"lineNumber":154,"author":{"gitId":"Imranr2"},"content":"     * @param taskList List of tasks.","lastModifiedDate":"2021-08-31"},{"lineNumber":155,"author":{"gitId":"Imranr2"},"content":"     * @param ui Ui to display information to user.","lastModifiedDate":"2021-08-31"},{"lineNumber":156,"author":{"gitId":"Imranr2"},"content":"     * @return Message to notify user that the todo has been created.","lastModifiedDate":"2021-08-31"},{"lineNumber":157,"author":{"gitId":"Imranr2"},"content":"     * @throws LifelineException if command is incomplete or not of the correct format or tasklist is not able to be","lastModifiedDate":"2021-08-21"},{"lineNumber":158,"author":{"gitId":"Imranr2"},"content":"     *                           saved.","lastModifiedDate":"2021-08-31"},{"lineNumber":159,"author":{"gitId":"Imranr2"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":160,"author":{"gitId":"Imranr2"},"content":"    public static String handleToDo(String command, Storage storage, TaskList taskList, Ui ui)","lastModifiedDate":"2021-08-20"},{"lineNumber":161,"author":{"gitId":"Imranr2"},"content":"            throws LifelineException {","lastModifiedDate":"2021-08-20"},{"lineNumber":162,"author":{"gitId":"Imranr2"},"content":"        assert Command.TODO.hasCommand(splitCommands(command)[0]);","lastModifiedDate":"2021-09-04"},{"lineNumber":163,"author":{"gitId":"Imranr2"},"content":"        Task newTask \u003d createToDo(command);","lastModifiedDate":"2021-09-04"},{"lineNumber":164,"author":{"gitId":"Imranr2"},"content":"        taskList.add(newTask);","lastModifiedDate":"2021-08-15"},{"lineNumber":165,"author":{"gitId":"Imranr2"},"content":"        storage.save(taskList);","lastModifiedDate":"2021-08-15"},{"lineNumber":166,"author":{"gitId":"Imranr2"},"content":"        return ui.showAddedTask(newTask);","lastModifiedDate":"2021-08-20"},{"lineNumber":167,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":168,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":169,"author":{"gitId":"Imranr2"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":170,"author":{"gitId":"Imranr2"},"content":"     * Marks a tasks at indices as completed.","lastModifiedDate":"2021-09-04"},{"lineNumber":171,"author":{"gitId":"Imranr2"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":172,"author":{"gitId":"Imranr2"},"content":"     * @param command User input.","lastModifiedDate":"2021-08-31"},{"lineNumber":173,"author":{"gitId":"Imranr2"},"content":"     * @param storage Storage to save or load tasks.","lastModifiedDate":"2021-08-31"},{"lineNumber":174,"author":{"gitId":"Imranr2"},"content":"     * @param taskList List of tasks.","lastModifiedDate":"2021-08-31"},{"lineNumber":175,"author":{"gitId":"Imranr2"},"content":"     * @param ui Ui to display information to user.","lastModifiedDate":"2021-08-31"},{"lineNumber":176,"author":{"gitId":"Imranr2"},"content":"     * @return Message to notify user that the task has been marked as completed.","lastModifiedDate":"2021-08-31"},{"lineNumber":177,"author":{"gitId":"Imranr2"},"content":"     * @throws LifelineException if command is incomplete or the index given is out of bounds or not an integer or","lastModifiedDate":"2021-08-21"},{"lineNumber":178,"author":{"gitId":"Imranr2"},"content":"     *                           taskList is not able to be saved.","lastModifiedDate":"2021-08-31"},{"lineNumber":179,"author":{"gitId":"Imranr2"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":180,"author":{"gitId":"Imranr2"},"content":"    public static String handleDone(String command, Storage storage, TaskList taskList, Ui ui)","lastModifiedDate":"2021-08-20"},{"lineNumber":181,"author":{"gitId":"Imranr2"},"content":"            throws LifelineException {","lastModifiedDate":"2021-08-20"},{"lineNumber":182,"author":{"gitId":"Imranr2"},"content":"        assert Command.DONE.hasCommand(splitCommands(command)[0]);","lastModifiedDate":"2021-09-04"},{"lineNumber":183,"author":{"gitId":"Imranr2"},"content":"        ArrayList\u003cInteger\u003e indicesToDelete \u003d getIndicesFromCommand(command);","lastModifiedDate":"2021-09-04"},{"lineNumber":184,"author":{"gitId":"Imranr2"},"content":"        checkIndexBounds(indicesToDelete, taskList);","lastModifiedDate":"2021-09-04"},{"lineNumber":185,"author":{"gitId":"Imranr2"},"content":"        taskList.completeMultipleTasks(indicesToDelete);","lastModifiedDate":"2021-09-04"},{"lineNumber":186,"author":{"gitId":"Imranr2"},"content":"        storage.save(taskList);","lastModifiedDate":"2021-08-15"},{"lineNumber":187,"author":{"gitId":"Imranr2"},"content":"        return ui.showCompletedTaskMessage(taskList);","lastModifiedDate":"2021-09-04"},{"lineNumber":188,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":189,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":190,"author":{"gitId":"Imranr2"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":191,"author":{"gitId":"Imranr2"},"content":"     * Deletes tasks at specified indices.","lastModifiedDate":"2021-09-04"},{"lineNumber":192,"author":{"gitId":"Imranr2"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":193,"author":{"gitId":"Imranr2"},"content":"     * @param command User input.","lastModifiedDate":"2021-08-31"},{"lineNumber":194,"author":{"gitId":"Imranr2"},"content":"     * @param storage Storage to save or load tasks.","lastModifiedDate":"2021-08-31"},{"lineNumber":195,"author":{"gitId":"Imranr2"},"content":"     * @param taskList List of tasks.","lastModifiedDate":"2021-08-31"},{"lineNumber":196,"author":{"gitId":"Imranr2"},"content":"     * @param ui Ui to display information to user.","lastModifiedDate":"2021-08-31"},{"lineNumber":197,"author":{"gitId":"Imranr2"},"content":"     * @return Message to the user that the task has been deleted.","lastModifiedDate":"2021-08-31"},{"lineNumber":198,"author":{"gitId":"Imranr2"},"content":"     * @throws LifelineException if command is incomplete or the index given is out of bounds or not an integer or","lastModifiedDate":"2021-08-21"},{"lineNumber":199,"author":{"gitId":"Imranr2"},"content":"     *                           taskList is not able to be saved.","lastModifiedDate":"2021-08-31"},{"lineNumber":200,"author":{"gitId":"Imranr2"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":201,"author":{"gitId":"Imranr2"},"content":"    public static String handleDelete(String command, Storage storage, TaskList taskList, Ui ui)","lastModifiedDate":"2021-08-20"},{"lineNumber":202,"author":{"gitId":"Imranr2"},"content":"            throws LifelineException {","lastModifiedDate":"2021-08-15"},{"lineNumber":203,"author":{"gitId":"Imranr2"},"content":"        assert Command.DELETE.hasCommand(splitCommands(command)[0]);","lastModifiedDate":"2021-09-04"},{"lineNumber":204,"author":{"gitId":"Imranr2"},"content":"        ArrayList\u003cInteger\u003e indicesToDelete \u003d getIndicesFromCommand(command);","lastModifiedDate":"2021-09-04"},{"lineNumber":205,"author":{"gitId":"Imranr2"},"content":"        checkIndexBounds(indicesToDelete, taskList);","lastModifiedDate":"2021-09-04"},{"lineNumber":206,"author":{"gitId":"Imranr2"},"content":"        taskList.deleteMultipleTasks(indicesToDelete);","lastModifiedDate":"2021-09-04"},{"lineNumber":207,"author":{"gitId":"Imranr2"},"content":"        storage.save(taskList);","lastModifiedDate":"2021-08-20"},{"lineNumber":208,"author":{"gitId":"Imranr2"},"content":"        return ui.showDeletedTaskMessage(taskList);","lastModifiedDate":"2021-09-04"},{"lineNumber":209,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":210,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":211,"author":{"gitId":"Imranr2"},"content":"    private static ArrayList\u003cInteger\u003e getIndicesFromCommand(String command) throws LifelineException {","lastModifiedDate":"2021-09-04"},{"lineNumber":212,"author":{"gitId":"Imranr2"},"content":"        String[] commands \u003d splitCommands(command);","lastModifiedDate":"2021-09-04"},{"lineNumber":213,"author":{"gitId":"Imranr2"},"content":"        String indices \u003d commands[1];","lastModifiedDate":"2021-09-04"},{"lineNumber":214,"author":{"gitId":"Imranr2"},"content":"        String[] splitIndices \u003d indices.split(\"\\\\s*,\\\\s*\");","lastModifiedDate":"2021-09-04"},{"lineNumber":215,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":216,"author":{"gitId":"Imranr2"},"content":"        ArrayList\u003cInteger\u003e indicesAsInteger \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-04"},{"lineNumber":217,"author":{"gitId":"Imranr2"},"content":"        for (int i \u003d 0; i \u003c splitIndices.length; i++) {","lastModifiedDate":"2021-09-04"},{"lineNumber":218,"author":{"gitId":"Imranr2"},"content":"            try {","lastModifiedDate":"2021-09-04"},{"lineNumber":219,"author":{"gitId":"Imranr2"},"content":"                int taskIndex \u003d Integer.parseInt(splitIndices[i]) - 1;","lastModifiedDate":"2021-09-04"},{"lineNumber":220,"author":{"gitId":"Imranr2"},"content":"                indicesAsInteger.add(taskIndex);","lastModifiedDate":"2021-09-04"},{"lineNumber":221,"author":{"gitId":"Imranr2"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2021-09-04"},{"lineNumber":222,"author":{"gitId":"Imranr2"},"content":"                throw new LifelineException(ERROR_NON_INTEGER_INDEX);","lastModifiedDate":"2021-09-04"},{"lineNumber":223,"author":{"gitId":"Imranr2"},"content":"            }","lastModifiedDate":"2021-09-04"},{"lineNumber":224,"author":{"gitId":"Imranr2"},"content":"        }","lastModifiedDate":"2021-09-04"},{"lineNumber":225,"author":{"gitId":"Imranr2"},"content":"        return indicesAsInteger;","lastModifiedDate":"2021-09-04"},{"lineNumber":226,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":227,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":228,"author":{"gitId":"Imranr2"},"content":"    private static void checkIndexBounds(ArrayList\u003cInteger\u003e indices, TaskList taskList) throws LifelineException {","lastModifiedDate":"2021-09-04"},{"lineNumber":229,"author":{"gitId":"Imranr2"},"content":"        for (int i \u003d 0; i \u003c indices.size(); i++) {","lastModifiedDate":"2021-09-04"},{"lineNumber":230,"author":{"gitId":"Imranr2"},"content":"            int currIndex \u003d indices.get(i);","lastModifiedDate":"2021-09-04"},{"lineNumber":231,"author":{"gitId":"Imranr2"},"content":"            if (currIndex \u003e\u003d taskList.getSize() || currIndex \u003c 0) {","lastModifiedDate":"2021-09-04"},{"lineNumber":232,"author":{"gitId":"Imranr2"},"content":"                throw new LifelineException(ERROR_INDEX_OUT_OF_BOUNDS);","lastModifiedDate":"2021-09-04"},{"lineNumber":233,"author":{"gitId":"Imranr2"},"content":"            }","lastModifiedDate":"2021-09-04"},{"lineNumber":234,"author":{"gitId":"Imranr2"},"content":"        }","lastModifiedDate":"2021-09-04"},{"lineNumber":235,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":236,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":237,"author":{"gitId":"Imranr2"},"content":"    private static String[] splitCommands(String command) throws LifelineException {","lastModifiedDate":"2021-09-04"},{"lineNumber":238,"author":{"gitId":"Imranr2"},"content":"        String[] commands \u003d command.split(\"\\\\s\", 2);","lastModifiedDate":"2021-08-15"},{"lineNumber":239,"author":{"gitId":"Imranr2"},"content":"        if (commands.length \u003c 2) {","lastModifiedDate":"2021-08-20"},{"lineNumber":240,"author":{"gitId":"Imranr2"},"content":"            handleIncompleteCommand(commands[0]);","lastModifiedDate":"2021-08-22"},{"lineNumber":241,"author":{"gitId":"Imranr2"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":242,"author":{"gitId":"Imranr2"},"content":"        return commands;","lastModifiedDate":"2021-08-20"},{"lineNumber":243,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":244,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":245,"author":{"gitId":"Imranr2"},"content":"    private static void handleIncompleteCommand(String command) throws LifelineException {","lastModifiedDate":"2021-08-22"},{"lineNumber":246,"author":{"gitId":"Imranr2"},"content":"        switch (command) {","lastModifiedDate":"2021-08-20"},{"lineNumber":247,"author":{"gitId":"Imranr2"},"content":"        case \"done\":","lastModifiedDate":"2021-08-20"},{"lineNumber":248,"author":{"gitId":"Imranr2"},"content":"            // Fallthrough","lastModifiedDate":"2021-09-04"},{"lineNumber":249,"author":{"gitId":"Imranr2"},"content":"        case \"complete\":","lastModifiedDate":"2021-09-04"},{"lineNumber":250,"author":{"gitId":"Imranr2"},"content":"            throw new LifelineException(ERROR_DONE_MISSING_INDEX);","lastModifiedDate":"2021-09-03"},{"lineNumber":251,"author":{"gitId":"Imranr2"},"content":"        case \"del\":","lastModifiedDate":"2021-09-04"},{"lineNumber":252,"author":{"gitId":"Imranr2"},"content":"            // Fallthrough","lastModifiedDate":"2021-09-04"},{"lineNumber":253,"author":{"gitId":"Imranr2"},"content":"        case \"delete\":","lastModifiedDate":"2021-08-20"},{"lineNumber":254,"author":{"gitId":"Imranr2"},"content":"            throw new LifelineException(ERROR_DELETE_MISSING_INDEX);","lastModifiedDate":"2021-09-03"},{"lineNumber":255,"author":{"gitId":"Imranr2"},"content":"        case \"t\":","lastModifiedDate":"2021-09-04"},{"lineNumber":256,"author":{"gitId":"Imranr2"},"content":"            // Fallthrough","lastModifiedDate":"2021-09-04"},{"lineNumber":257,"author":{"gitId":"Imranr2"},"content":"        case \"td\":","lastModifiedDate":"2021-09-04"},{"lineNumber":258,"author":{"gitId":"Imranr2"},"content":"            // Fallthrough","lastModifiedDate":"2021-09-04"},{"lineNumber":259,"author":{"gitId":"Imranr2"},"content":"        case \"todo\":","lastModifiedDate":"2021-08-20"},{"lineNumber":260,"author":{"gitId":"Imranr2"},"content":"            throw new LifelineException(ERROR_TODO_MISSING_DETAILS);","lastModifiedDate":"2021-09-03"},{"lineNumber":261,"author":{"gitId":"Imranr2"},"content":"        case \"d\":","lastModifiedDate":"2021-09-04"},{"lineNumber":262,"author":{"gitId":"Imranr2"},"content":"            // Fallthrough","lastModifiedDate":"2021-09-04"},{"lineNumber":263,"author":{"gitId":"Imranr2"},"content":"        case \"dl\":","lastModifiedDate":"2021-09-04"},{"lineNumber":264,"author":{"gitId":"Imranr2"},"content":"            // Fallthrough","lastModifiedDate":"2021-09-04"},{"lineNumber":265,"author":{"gitId":"Imranr2"},"content":"        case \"deadline\":","lastModifiedDate":"2021-08-20"},{"lineNumber":266,"author":{"gitId":"Imranr2"},"content":"            throw new LifelineException(ERROR_DEADLINE_MISSING_DETAILS);","lastModifiedDate":"2021-09-03"},{"lineNumber":267,"author":{"gitId":"Imranr2"},"content":"        case \"e\":","lastModifiedDate":"2021-09-04"},{"lineNumber":268,"author":{"gitId":"Imranr2"},"content":"            // Fallthrough","lastModifiedDate":"2021-09-04"},{"lineNumber":269,"author":{"gitId":"Imranr2"},"content":"        case \"event\":","lastModifiedDate":"2021-08-20"},{"lineNumber":270,"author":{"gitId":"Imranr2"},"content":"            throw new LifelineException(ERROR_EVENT_MISSING_DETAILS);","lastModifiedDate":"2021-09-03"},{"lineNumber":271,"author":{"gitId":"Imranr2"},"content":"        case \"f\":","lastModifiedDate":"2021-09-04"},{"lineNumber":272,"author":{"gitId":"Imranr2"},"content":"            // Fallthrough","lastModifiedDate":"2021-09-04"},{"lineNumber":273,"author":{"gitId":"Imranr2"},"content":"        case \"find\":","lastModifiedDate":"2021-08-21"},{"lineNumber":274,"author":{"gitId":"Imranr2"},"content":"            throw new LifelineException(ERROR_FIND_MISSING_KEYWORD);","lastModifiedDate":"2021-09-03"},{"lineNumber":275,"author":{"gitId":"Imranr2"},"content":"        default:","lastModifiedDate":"2021-08-20"},{"lineNumber":276,"author":{"gitId":"Imranr2"},"content":"            throw new LifelineException(ERROR_INVALID_COMMAND);","lastModifiedDate":"2021-09-03"},{"lineNumber":277,"author":{"gitId":"Imranr2"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":278,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":279,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":280,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":281,"author":{"gitId":"Imranr2"},"content":"    private static Task createToDo(String command) throws LifelineException {","lastModifiedDate":"2021-09-04"},{"lineNumber":282,"author":{"gitId":"Imranr2"},"content":"        String[] commands \u003d splitCommands(command);","lastModifiedDate":"2021-09-04"},{"lineNumber":283,"author":{"gitId":"Imranr2"},"content":"        Task newTask \u003d new ToDo(commands[1]);","lastModifiedDate":"2021-09-04"},{"lineNumber":284,"author":{"gitId":"Imranr2"},"content":"        return newTask;","lastModifiedDate":"2021-09-04"},{"lineNumber":285,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":286,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":287,"author":{"gitId":"Imranr2"},"content":"    private static Deadline createDeadline(String command) throws LifelineException {","lastModifiedDate":"2021-09-04"},{"lineNumber":288,"author":{"gitId":"Imranr2"},"content":"        String[] details \u003d splitCommands(command);","lastModifiedDate":"2021-09-04"},{"lineNumber":289,"author":{"gitId":"Imranr2"},"content":"        String[] descriptions \u003d details[1].trim().split(\"/by\", 2);","lastModifiedDate":"2021-09-04"},{"lineNumber":290,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":291,"author":{"gitId":"Imranr2"},"content":"        if (descriptions.length \u003c 2) {","lastModifiedDate":"2021-09-04"},{"lineNumber":292,"author":{"gitId":"Imranr2"},"content":"            throw new LifelineException(ERROR_DEADLINE_INCORRECT_FORMAT);","lastModifiedDate":"2021-09-04"},{"lineNumber":293,"author":{"gitId":"Imranr2"},"content":"        }","lastModifiedDate":"2021-09-04"},{"lineNumber":294,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":295,"author":{"gitId":"Imranr2"},"content":"        String[] dateAndTime \u003d descriptions[1].trim().split(\"\\\\s\", 2);","lastModifiedDate":"2021-09-04"},{"lineNumber":296,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":297,"author":{"gitId":"Imranr2"},"content":"        if (dateAndTime.length \u003c 2) {","lastModifiedDate":"2021-09-04"},{"lineNumber":298,"author":{"gitId":"Imranr2"},"content":"            throw new LifelineException(ERROR_DEADLINE_INCORRECT_FORMAT);","lastModifiedDate":"2021-09-04"},{"lineNumber":299,"author":{"gitId":"Imranr2"},"content":"        }","lastModifiedDate":"2021-09-04"},{"lineNumber":300,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":301,"author":{"gitId":"Imranr2"},"content":"        try {","lastModifiedDate":"2021-09-04"},{"lineNumber":302,"author":{"gitId":"Imranr2"},"content":"            LocalDate date \u003d DateTimeParser.parseDate(dateAndTime[0].trim());","lastModifiedDate":"2021-09-04"},{"lineNumber":303,"author":{"gitId":"Imranr2"},"content":"            LocalTime time \u003d DateTimeParser.parseTime(dateAndTime[1].trim());","lastModifiedDate":"2021-09-04"},{"lineNumber":304,"author":{"gitId":"Imranr2"},"content":"            return new Deadline(descriptions[0].trim(), date, time);","lastModifiedDate":"2021-09-04"},{"lineNumber":305,"author":{"gitId":"Imranr2"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-09-04"},{"lineNumber":306,"author":{"gitId":"Imranr2"},"content":"            throw new LifelineException(ERROR_DEADLINE_INCORRECT_FORMAT);","lastModifiedDate":"2021-09-04"},{"lineNumber":307,"author":{"gitId":"Imranr2"},"content":"        }","lastModifiedDate":"2021-08-15"},{"lineNumber":308,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":309,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":310,"author":{"gitId":"Imranr2"},"content":"    private static Event createEvent(String command) throws LifelineException {","lastModifiedDate":"2021-09-04"},{"lineNumber":311,"author":{"gitId":"Imranr2"},"content":"        String[] details \u003d splitCommands(command);","lastModifiedDate":"2021-09-04"},{"lineNumber":312,"author":{"gitId":"Imranr2"},"content":"        String[] descriptions \u003d details[1].trim().split(\"/at\", 2);","lastModifiedDate":"2021-09-04"},{"lineNumber":313,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":314,"author":{"gitId":"Imranr2"},"content":"        if (descriptions.length \u003c 2) {","lastModifiedDate":"2021-09-04"},{"lineNumber":315,"author":{"gitId":"Imranr2"},"content":"            throw new LifelineException(ERROR_EVENT_INCORRECT_FORMAT);","lastModifiedDate":"2021-09-04"},{"lineNumber":316,"author":{"gitId":"Imranr2"},"content":"        }","lastModifiedDate":"2021-09-04"},{"lineNumber":317,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":318,"author":{"gitId":"Imranr2"},"content":"        String[] eventDateAndDuration \u003d descriptions[1].trim().split(\"\\\\s\", 3);","lastModifiedDate":"2021-09-04"},{"lineNumber":319,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":320,"author":{"gitId":"Imranr2"},"content":"        if (eventDateAndDuration.length \u003c 3) {","lastModifiedDate":"2021-09-04"},{"lineNumber":321,"author":{"gitId":"Imranr2"},"content":"            throw new LifelineException(ERROR_EVENT_INCORRECT_FORMAT);","lastModifiedDate":"2021-09-04"},{"lineNumber":322,"author":{"gitId":"Imranr2"},"content":"        }","lastModifiedDate":"2021-09-04"},{"lineNumber":323,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":324,"author":{"gitId":"Imranr2"},"content":"        String eventDate \u003d eventDateAndDuration[0];","lastModifiedDate":"2021-09-04"},{"lineNumber":325,"author":{"gitId":"Imranr2"},"content":"        String eventStartTime \u003d eventDateAndDuration[1];","lastModifiedDate":"2021-09-04"},{"lineNumber":326,"author":{"gitId":"Imranr2"},"content":"        String eventEndTime \u003d eventDateAndDuration[2];","lastModifiedDate":"2021-09-04"},{"lineNumber":327,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":328,"author":{"gitId":"Imranr2"},"content":"        try {","lastModifiedDate":"2021-09-04"},{"lineNumber":329,"author":{"gitId":"Imranr2"},"content":"            LocalDate date \u003d DateTimeParser.parseDate(eventDate.trim());","lastModifiedDate":"2021-09-04"},{"lineNumber":330,"author":{"gitId":"Imranr2"},"content":"            LocalTime startTime \u003d DateTimeParser.parseTime(eventStartTime.trim());","lastModifiedDate":"2021-09-04"},{"lineNumber":331,"author":{"gitId":"Imranr2"},"content":"            LocalTime endTime \u003d DateTimeParser.parseTime(eventEndTime.trim());","lastModifiedDate":"2021-09-04"},{"lineNumber":332,"author":{"gitId":"Imranr2"},"content":"            return new Event(descriptions[0].trim(), date, startTime, endTime);","lastModifiedDate":"2021-09-04"},{"lineNumber":333,"author":{"gitId":"Imranr2"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-09-04"},{"lineNumber":334,"author":{"gitId":"Imranr2"},"content":"            throw new LifelineException(ERROR_EVENT_INCORRECT_FORMAT);","lastModifiedDate":"2021-09-04"},{"lineNumber":335,"author":{"gitId":"Imranr2"},"content":"        }","lastModifiedDate":"2021-09-04"},{"lineNumber":336,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":337,"author":{"gitId":"Imranr2"},"content":"}","lastModifiedDate":"2021-08-15"}],"authorContributionMap":{"Imranr2":337}},{"path":"src/main/java/lifeline/controller/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Imranr2"},"content":"package lifeline.controller;","lastModifiedDate":"2021-08-27"},{"lineNumber":2,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":3,"author":{"gitId":"Imranr2"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-27"},{"lineNumber":4,"author":{"gitId":"Imranr2"},"content":"import java.util.Collections;","lastModifiedDate":"2021-08-27"},{"lineNumber":5,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":6,"author":{"gitId":"Imranr2"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-08-27"},{"lineNumber":7,"author":{"gitId":"Imranr2"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-08-27"},{"lineNumber":8,"author":{"gitId":"Imranr2"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-08-27"},{"lineNumber":9,"author":{"gitId":"Imranr2"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-08-27"},{"lineNumber":10,"author":{"gitId":"Imranr2"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2021-08-27"},{"lineNumber":11,"author":{"gitId":"Imranr2"},"content":"import javafx.scene.Node;","lastModifiedDate":"2021-08-27"},{"lineNumber":12,"author":{"gitId":"Imranr2"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-08-27"},{"lineNumber":13,"author":{"gitId":"Imranr2"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-08-27"},{"lineNumber":14,"author":{"gitId":"Imranr2"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2021-08-27"},{"lineNumber":15,"author":{"gitId":"Imranr2"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2021-08-27"},{"lineNumber":16,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":17,"author":{"gitId":"Imranr2"},"content":"/**","lastModifiedDate":"2021-08-27"},{"lineNumber":18,"author":{"gitId":"Imranr2"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2021-08-27"},{"lineNumber":19,"author":{"gitId":"Imranr2"},"content":" * containing text from the speaker.","lastModifiedDate":"2021-08-27"},{"lineNumber":20,"author":{"gitId":"Imranr2"},"content":" */","lastModifiedDate":"2021-08-27"},{"lineNumber":21,"author":{"gitId":"Imranr2"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2021-08-27"},{"lineNumber":22,"author":{"gitId":"Imranr2"},"content":"    @FXML","lastModifiedDate":"2021-08-27"},{"lineNumber":23,"author":{"gitId":"Imranr2"},"content":"    private HBox speechBubble;","lastModifiedDate":"2021-08-27"},{"lineNumber":24,"author":{"gitId":"Imranr2"},"content":"    @FXML","lastModifiedDate":"2021-08-27"},{"lineNumber":25,"author":{"gitId":"Imranr2"},"content":"    private Label dialog;","lastModifiedDate":"2021-08-27"},{"lineNumber":26,"author":{"gitId":"Imranr2"},"content":"    @FXML","lastModifiedDate":"2021-08-27"},{"lineNumber":27,"author":{"gitId":"Imranr2"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2021-08-27"},{"lineNumber":28,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":29,"author":{"gitId":"Imranr2"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2021-08-27"},{"lineNumber":30,"author":{"gitId":"Imranr2"},"content":"        try {","lastModifiedDate":"2021-08-27"},{"lineNumber":31,"author":{"gitId":"Imranr2"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2021-08-27"},{"lineNumber":32,"author":{"gitId":"Imranr2"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2021-08-27"},{"lineNumber":33,"author":{"gitId":"Imranr2"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2021-08-27"},{"lineNumber":34,"author":{"gitId":"Imranr2"},"content":"            fxmlLoader.load();","lastModifiedDate":"2021-08-27"},{"lineNumber":35,"author":{"gitId":"Imranr2"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-27"},{"lineNumber":36,"author":{"gitId":"Imranr2"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-27"},{"lineNumber":37,"author":{"gitId":"Imranr2"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":38,"author":{"gitId":"Imranr2"},"content":"        dialog.setMinHeight(Label.USE_PREF_SIZE);","lastModifiedDate":"2021-08-27"},{"lineNumber":39,"author":{"gitId":"Imranr2"},"content":"        dialog.setText(text);","lastModifiedDate":"2021-08-27"},{"lineNumber":40,"author":{"gitId":"Imranr2"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2021-08-27"},{"lineNumber":41,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":42,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":43,"author":{"gitId":"Imranr2"},"content":"    /**","lastModifiedDate":"2021-08-27"},{"lineNumber":44,"author":{"gitId":"Imranr2"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2021-08-27"},{"lineNumber":45,"author":{"gitId":"Imranr2"},"content":"     */","lastModifiedDate":"2021-08-27"},{"lineNumber":46,"author":{"gitId":"Imranr2"},"content":"    private void flip() {","lastModifiedDate":"2021-08-27"},{"lineNumber":47,"author":{"gitId":"Imranr2"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2021-08-27"},{"lineNumber":48,"author":{"gitId":"Imranr2"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2021-08-27"},{"lineNumber":49,"author":{"gitId":"Imranr2"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2021-08-27"},{"lineNumber":50,"author":{"gitId":"Imranr2"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2021-08-27"},{"lineNumber":51,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":52,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":53,"author":{"gitId":"Imranr2"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":54,"author":{"gitId":"Imranr2"},"content":"     * Displays DialogBox containing user message and user image.","lastModifiedDate":"2021-08-31"},{"lineNumber":55,"author":{"gitId":"Imranr2"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":56,"author":{"gitId":"Imranr2"},"content":"     * @param text Text entered by user.","lastModifiedDate":"2021-08-31"},{"lineNumber":57,"author":{"gitId":"Imranr2"},"content":"     * @param img User image.","lastModifiedDate":"2021-08-31"},{"lineNumber":58,"author":{"gitId":"Imranr2"},"content":"     * @return DialogBox containing user message and user image.","lastModifiedDate":"2021-08-31"},{"lineNumber":59,"author":{"gitId":"Imranr2"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":60,"author":{"gitId":"Imranr2"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2021-08-27"},{"lineNumber":61,"author":{"gitId":"Imranr2"},"content":"        DialogBox userDialog \u003d new DialogBox(text, img);","lastModifiedDate":"2021-08-27"},{"lineNumber":62,"author":{"gitId":"Imranr2"},"content":"        userDialog.speechBubble.getStyleClass().add(\"user-speech-bubble\");","lastModifiedDate":"2021-08-27"},{"lineNumber":63,"author":{"gitId":"Imranr2"},"content":"        return userDialog;","lastModifiedDate":"2021-08-27"},{"lineNumber":64,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":65,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":66,"author":{"gitId":"Imranr2"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":67,"author":{"gitId":"Imranr2"},"content":"     * Displays DialogBox containing lifeline response and lifeline image.","lastModifiedDate":"2021-08-31"},{"lineNumber":68,"author":{"gitId":"Imranr2"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":69,"author":{"gitId":"Imranr2"},"content":"     * @param text Response to user\u0027s input.","lastModifiedDate":"2021-08-31"},{"lineNumber":70,"author":{"gitId":"Imranr2"},"content":"     * @param img Lifeline image.","lastModifiedDate":"2021-08-31"},{"lineNumber":71,"author":{"gitId":"Imranr2"},"content":"     * @return DialogBox containing lifeline response and lifeline image.","lastModifiedDate":"2021-08-31"},{"lineNumber":72,"author":{"gitId":"Imranr2"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":73,"author":{"gitId":"Imranr2"},"content":"    public static DialogBox getLifelineDialog(String text, Image img) {","lastModifiedDate":"2021-08-28"},{"lineNumber":74,"author":{"gitId":"Imranr2"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2021-08-27"},{"lineNumber":75,"author":{"gitId":"Imranr2"},"content":"        db.flip();","lastModifiedDate":"2021-08-27"},{"lineNumber":76,"author":{"gitId":"Imranr2"},"content":"        return db;","lastModifiedDate":"2021-08-27"},{"lineNumber":77,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":78,"author":{"gitId":"Imranr2"},"content":"}","lastModifiedDate":"2021-08-27"}],"authorContributionMap":{"Imranr2":78}},{"path":"src/main/java/lifeline/controller/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Imranr2"},"content":"package lifeline.controller;","lastModifiedDate":"2021-08-27"},{"lineNumber":2,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":3,"author":{"gitId":"Imranr2"},"content":"import java.io.File;","lastModifiedDate":"2021-08-27"},{"lineNumber":4,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":5,"author":{"gitId":"Imranr2"},"content":"import javafx.animation.PauseTransition;","lastModifiedDate":"2021-08-27"},{"lineNumber":6,"author":{"gitId":"Imranr2"},"content":"import javafx.application.Platform;","lastModifiedDate":"2021-08-27"},{"lineNumber":7,"author":{"gitId":"Imranr2"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-08-27"},{"lineNumber":8,"author":{"gitId":"Imranr2"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2021-08-27"},{"lineNumber":9,"author":{"gitId":"Imranr2"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2021-08-27"},{"lineNumber":10,"author":{"gitId":"Imranr2"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2021-08-27"},{"lineNumber":11,"author":{"gitId":"Imranr2"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-08-27"},{"lineNumber":12,"author":{"gitId":"Imranr2"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-08-27"},{"lineNumber":13,"author":{"gitId":"Imranr2"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2021-08-27"},{"lineNumber":14,"author":{"gitId":"Imranr2"},"content":"import javafx.util.Duration;","lastModifiedDate":"2021-08-27"},{"lineNumber":15,"author":{"gitId":"Imranr2"},"content":"import lifeline.Lifeline;","lastModifiedDate":"2021-08-27"},{"lineNumber":16,"author":{"gitId":"Imranr2"},"content":"import lifeline.command.Command;","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":18,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":19,"author":{"gitId":"Imranr2"},"content":"/**","lastModifiedDate":"2021-08-27"},{"lineNumber":20,"author":{"gitId":"Imranr2"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"Imranr2"},"content":" */","lastModifiedDate":"2021-08-27"},{"lineNumber":22,"author":{"gitId":"Imranr2"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2021-08-27"},{"lineNumber":23,"author":{"gitId":"Imranr2"},"content":"    @FXML","lastModifiedDate":"2021-08-27"},{"lineNumber":24,"author":{"gitId":"Imranr2"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2021-08-27"},{"lineNumber":25,"author":{"gitId":"Imranr2"},"content":"    @FXML","lastModifiedDate":"2021-08-27"},{"lineNumber":26,"author":{"gitId":"Imranr2"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2021-08-27"},{"lineNumber":27,"author":{"gitId":"Imranr2"},"content":"    @FXML","lastModifiedDate":"2021-08-27"},{"lineNumber":28,"author":{"gitId":"Imranr2"},"content":"    private TextField userInput;","lastModifiedDate":"2021-08-27"},{"lineNumber":29,"author":{"gitId":"Imranr2"},"content":"    @FXML","lastModifiedDate":"2021-08-27"},{"lineNumber":30,"author":{"gitId":"Imranr2"},"content":"    private Button sendButton;","lastModifiedDate":"2021-08-27"},{"lineNumber":31,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":32,"author":{"gitId":"Imranr2"},"content":"    private Lifeline lifeline;","lastModifiedDate":"2021-08-27"},{"lineNumber":33,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":34,"author":{"gitId":"Imranr2"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));","lastModifiedDate":"2021-08-27"},{"lineNumber":35,"author":{"gitId":"Imranr2"},"content":"    private Image lifelineImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaLifeline.png\"));","lastModifiedDate":"2021-08-27"},{"lineNumber":36,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":37,"author":{"gitId":"Imranr2"},"content":"    /**","lastModifiedDate":"2021-08-27"},{"lineNumber":38,"author":{"gitId":"Imranr2"},"content":"     * Initializes an instance of Lifeline to respond to user input and forces ScrollPane to automatically scroll down.","lastModifiedDate":"2021-08-31"},{"lineNumber":39,"author":{"gitId":"Imranr2"},"content":"     * Display DialogBox containing lifeline greeting message and image.","lastModifiedDate":"2021-08-31"},{"lineNumber":40,"author":{"gitId":"Imranr2"},"content":"     */","lastModifiedDate":"2021-08-27"},{"lineNumber":41,"author":{"gitId":"Imranr2"},"content":"    @FXML","lastModifiedDate":"2021-08-27"},{"lineNumber":42,"author":{"gitId":"Imranr2"},"content":"    public void initialize() {","lastModifiedDate":"2021-08-27"},{"lineNumber":43,"author":{"gitId":"Imranr2"},"content":"        lifeline \u003d new Lifeline(\"save\" + File.separator + \"tasks.json\");","lastModifiedDate":"2021-08-27"},{"lineNumber":44,"author":{"gitId":"Imranr2"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2021-09-04"},{"lineNumber":45,"author":{"gitId":"Imranr2"},"content":"        String greetingMessage \u003d lifeline.getGreetingMessage();","lastModifiedDate":"2021-08-28"},{"lineNumber":46,"author":{"gitId":"Imranr2"},"content":"        dialogContainer.getChildren().add(DialogBox.getLifelineDialog(greetingMessage, lifelineImage));","lastModifiedDate":"2021-08-28"},{"lineNumber":47,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":48,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":49,"author":{"gitId":"Imranr2"},"content":"    /**","lastModifiedDate":"2021-08-27"},{"lineNumber":50,"author":{"gitId":"Imranr2"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2021-08-27"},{"lineNumber":51,"author":{"gitId":"Imranr2"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2021-08-27"},{"lineNumber":52,"author":{"gitId":"Imranr2"},"content":"     */","lastModifiedDate":"2021-08-27"},{"lineNumber":53,"author":{"gitId":"Imranr2"},"content":"    @FXML","lastModifiedDate":"2021-08-27"},{"lineNumber":54,"author":{"gitId":"Imranr2"},"content":"    private void handleUserInput() {","lastModifiedDate":"2021-08-27"},{"lineNumber":55,"author":{"gitId":"Imranr2"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2021-08-27"},{"lineNumber":56,"author":{"gitId":"Imranr2"},"content":"        String response \u003d lifeline.getResponse(input);","lastModifiedDate":"2021-08-27"},{"lineNumber":57,"author":{"gitId":"Imranr2"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2021-08-27"},{"lineNumber":58,"author":{"gitId":"Imranr2"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2021-08-27"},{"lineNumber":59,"author":{"gitId":"Imranr2"},"content":"                DialogBox.getLifelineDialog(response, lifelineImage)","lastModifiedDate":"2021-08-28"},{"lineNumber":60,"author":{"gitId":"Imranr2"},"content":"        );","lastModifiedDate":"2021-08-27"},{"lineNumber":61,"author":{"gitId":"Imranr2"},"content":"        userInput.clear();","lastModifiedDate":"2021-08-27"},{"lineNumber":62,"author":{"gitId":"Imranr2"},"content":"        if (Command.BYE.hasCommand(input.toLowerCase().trim())) {","lastModifiedDate":"2021-08-30"},{"lineNumber":63,"author":{"gitId":"Imranr2"},"content":"            PauseTransition delay \u003d new PauseTransition(Duration.millis(400));","lastModifiedDate":"2021-08-27"},{"lineNumber":64,"author":{"gitId":"Imranr2"},"content":"            delay.setOnFinished(event -\u003e Platform.exit());","lastModifiedDate":"2021-08-27"},{"lineNumber":65,"author":{"gitId":"Imranr2"},"content":"            delay.play();","lastModifiedDate":"2021-08-27"},{"lineNumber":66,"author":{"gitId":"Imranr2"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":67,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":68,"author":{"gitId":"Imranr2"},"content":"}","lastModifiedDate":"2021-08-27"}],"authorContributionMap":{"Imranr2":68}},{"path":"src/main/java/lifeline/exception/LifelineException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Imranr2"},"content":"package lifeline.exception;","lastModifiedDate":"2021-08-15"},{"lineNumber":2,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":3,"author":{"gitId":"Imranr2"},"content":"/**","lastModifiedDate":"2021-08-21"},{"lineNumber":4,"author":{"gitId":"Imranr2"},"content":" * The class LifelineException is a custom exception class that represents exceptions specific to Lifeline.","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"Imranr2"},"content":" */","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"Imranr2"},"content":"public class LifelineException extends Exception {","lastModifiedDate":"2021-08-13"},{"lineNumber":7,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"Imranr2"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":9,"author":{"gitId":"Imranr2"},"content":"     * Default constructor for a LifelineException.","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"Imranr2"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"Imranr2"},"content":"     * @param errorMessage Error message to be displayed to user.","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"Imranr2"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"Imranr2"},"content":"    public LifelineException(String errorMessage) {","lastModifiedDate":"2021-08-15"},{"lineNumber":14,"author":{"gitId":"Imranr2"},"content":"        super(errorMessage);","lastModifiedDate":"2021-08-13"},{"lineNumber":15,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-13"},{"lineNumber":16,"author":{"gitId":"Imranr2"},"content":"}","lastModifiedDate":"2021-08-13"}],"authorContributionMap":{"Imranr2":16}},{"path":"src/main/java/lifeline/parser/DateTimeParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Imranr2"},"content":"package lifeline.parser;","lastModifiedDate":"2021-09-04"},{"lineNumber":2,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":3,"author":{"gitId":"Imranr2"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-04"},{"lineNumber":4,"author":{"gitId":"Imranr2"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-09-04"},{"lineNumber":5,"author":{"gitId":"Imranr2"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-09-04"},{"lineNumber":6,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":7,"author":{"gitId":"Imranr2"},"content":"public class DateTimeParser {","lastModifiedDate":"2021-09-04"},{"lineNumber":8,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":9,"author":{"gitId":"Imranr2"},"content":"    /**","lastModifiedDate":"2021-09-04"},{"lineNumber":10,"author":{"gitId":"Imranr2"},"content":"     * Parses a given string to a LocalTime object using a specified format.","lastModifiedDate":"2021-09-04"},{"lineNumber":11,"author":{"gitId":"Imranr2"},"content":"     *","lastModifiedDate":"2021-09-04"},{"lineNumber":12,"author":{"gitId":"Imranr2"},"content":"     * @param time String to be parsed.","lastModifiedDate":"2021-09-04"},{"lineNumber":13,"author":{"gitId":"Imranr2"},"content":"     * @return LocalTime representing the time.","lastModifiedDate":"2021-09-04"},{"lineNumber":14,"author":{"gitId":"Imranr2"},"content":"     */","lastModifiedDate":"2021-09-04"},{"lineNumber":15,"author":{"gitId":"Imranr2"},"content":"    public static LocalTime parseTime(String time) {","lastModifiedDate":"2021-09-04"},{"lineNumber":16,"author":{"gitId":"Imranr2"},"content":"        DateTimeFormatter timeFormatter \u003d DateTimeFormatter.ofPattern(\"HHmm\");","lastModifiedDate":"2021-09-04"},{"lineNumber":17,"author":{"gitId":"Imranr2"},"content":"        LocalTime formattedTime \u003d LocalTime.parse(time, timeFormatter);","lastModifiedDate":"2021-09-04"},{"lineNumber":18,"author":{"gitId":"Imranr2"},"content":"        return formattedTime;","lastModifiedDate":"2021-09-04"},{"lineNumber":19,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":20,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":21,"author":{"gitId":"Imranr2"},"content":"    /**","lastModifiedDate":"2021-09-04"},{"lineNumber":22,"author":{"gitId":"Imranr2"},"content":"     * Parses a given string to a LocalDate object using a specified format.","lastModifiedDate":"2021-09-04"},{"lineNumber":23,"author":{"gitId":"Imranr2"},"content":"     *","lastModifiedDate":"2021-09-04"},{"lineNumber":24,"author":{"gitId":"Imranr2"},"content":"     * @param date String to be parsed.","lastModifiedDate":"2021-09-04"},{"lineNumber":25,"author":{"gitId":"Imranr2"},"content":"     * @return LocalDate representing the date.","lastModifiedDate":"2021-09-04"},{"lineNumber":26,"author":{"gitId":"Imranr2"},"content":"     */","lastModifiedDate":"2021-09-04"},{"lineNumber":27,"author":{"gitId":"Imranr2"},"content":"    public static LocalDate parseDate(String date) {","lastModifiedDate":"2021-09-04"},{"lineNumber":28,"author":{"gitId":"Imranr2"},"content":"        DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yy\");","lastModifiedDate":"2021-09-04"},{"lineNumber":29,"author":{"gitId":"Imranr2"},"content":"        LocalDate formattedDate \u003d LocalDate.parse(date, dateFormatter);","lastModifiedDate":"2021-09-04"},{"lineNumber":30,"author":{"gitId":"Imranr2"},"content":"        return formattedDate;","lastModifiedDate":"2021-09-04"},{"lineNumber":31,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":32,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":33,"author":{"gitId":"Imranr2"},"content":"}","lastModifiedDate":"2021-09-04"}],"authorContributionMap":{"Imranr2":33}},{"path":"src/main/java/lifeline/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Imranr2"},"content":"package lifeline.parser;","lastModifiedDate":"2021-08-15"},{"lineNumber":2,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":3,"author":{"gitId":"Imranr2"},"content":"import static lifeline.util.ErrorString.ERROR_INVALID_COMMAND;","lastModifiedDate":"2021-09-03"},{"lineNumber":4,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":5,"author":{"gitId":"Imranr2"},"content":"import lifeline.command.Command;","lastModifiedDate":"2021-08-15"},{"lineNumber":6,"author":{"gitId":"Imranr2"},"content":"import lifeline.exception.LifelineException;","lastModifiedDate":"2021-08-15"},{"lineNumber":7,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":8,"author":{"gitId":"Imranr2"},"content":"/**","lastModifiedDate":"2021-08-21"},{"lineNumber":9,"author":{"gitId":"Imranr2"},"content":" * The class Parser parses the input from the user.","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"Imranr2"},"content":" */","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"Imranr2"},"content":"public class Parser {","lastModifiedDate":"2021-08-14"},{"lineNumber":12,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"Imranr2"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"Imranr2"},"content":"     * Returns parsed command from user input.","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"Imranr2"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":16,"author":{"gitId":"Imranr2"},"content":"     * @param command Command read from user.","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"Imranr2"},"content":"     * @return Command to be executed based on user input.","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"Imranr2"},"content":"     * @throws LifelineException if command is invalid.","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"Imranr2"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":20,"author":{"gitId":"Imranr2"},"content":"    public static Command parse(String command) throws LifelineException {","lastModifiedDate":"2021-08-14"},{"lineNumber":21,"author":{"gitId":"Imranr2"},"content":"        String cleanAndLowerString \u003d command.trim().split(\"\\\\s\", 2)[0].toLowerCase();","lastModifiedDate":"2021-09-03"},{"lineNumber":22,"author":{"gitId":"Imranr2"},"content":"        for (Command c : Command.values()) {","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"Imranr2"},"content":"            if (c.hasCommand(cleanAndLowerString)) {","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"Imranr2"},"content":"                return c;","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"Imranr2"},"content":"            }","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"Imranr2"},"content":"        }","lastModifiedDate":"2021-08-14"},{"lineNumber":27,"author":{"gitId":"Imranr2"},"content":"        throw new LifelineException(ERROR_INVALID_COMMAND);","lastModifiedDate":"2021-09-03"},{"lineNumber":28,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":29,"author":{"gitId":"Imranr2"},"content":"}","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"Imranr2":29}},{"path":"src/main/java/lifeline/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Imranr2"},"content":"package lifeline.storage;","lastModifiedDate":"2021-08-15"},{"lineNumber":2,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":3,"author":{"gitId":"Imranr2"},"content":"import static lifeline.util.ErrorString.ERROR_UNABLE_TO_FIND_SAVED_TASKS;","lastModifiedDate":"2021-09-03"},{"lineNumber":4,"author":{"gitId":"Imranr2"},"content":"import static lifeline.util.ErrorString.ERROR_UNABLE_TO_SAVE_TASK;","lastModifiedDate":"2021-09-03"},{"lineNumber":5,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":6,"author":{"gitId":"Imranr2"},"content":"import java.io.File;","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"Imranr2"},"content":"import java.io.FileReader;","lastModifiedDate":"2021-08-14"},{"lineNumber":8,"author":{"gitId":"Imranr2"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-08-14"},{"lineNumber":9,"author":{"gitId":"Imranr2"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-14"},{"lineNumber":10,"author":{"gitId":"Imranr2"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-14"},{"lineNumber":11,"author":{"gitId":"Imranr2"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-08-14"},{"lineNumber":12,"author":{"gitId":"Imranr2"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-14"},{"lineNumber":13,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":14,"author":{"gitId":"Imranr2"},"content":"import com.google.gson.Gson;","lastModifiedDate":"2021-08-20"},{"lineNumber":15,"author":{"gitId":"Imranr2"},"content":"import com.google.gson.GsonBuilder;","lastModifiedDate":"2021-08-20"},{"lineNumber":16,"author":{"gitId":"Imranr2"},"content":"import com.google.gson.JsonArray;","lastModifiedDate":"2021-08-20"},{"lineNumber":17,"author":{"gitId":"Imranr2"},"content":"import com.google.gson.JsonObject;","lastModifiedDate":"2021-08-20"},{"lineNumber":18,"author":{"gitId":"Imranr2"},"content":"import com.google.gson.JsonParser;","lastModifiedDate":"2021-08-20"},{"lineNumber":19,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":20,"author":{"gitId":"Imranr2"},"content":"import lifeline.exception.LifelineException;","lastModifiedDate":"2021-08-15"},{"lineNumber":21,"author":{"gitId":"Imranr2"},"content":"import lifeline.task.Deadline;","lastModifiedDate":"2021-08-15"},{"lineNumber":22,"author":{"gitId":"Imranr2"},"content":"import lifeline.task.Event;","lastModifiedDate":"2021-08-15"},{"lineNumber":23,"author":{"gitId":"Imranr2"},"content":"import lifeline.task.Task;","lastModifiedDate":"2021-08-15"},{"lineNumber":24,"author":{"gitId":"Imranr2"},"content":"import lifeline.task.TaskList;","lastModifiedDate":"2021-08-15"},{"lineNumber":25,"author":{"gitId":"Imranr2"},"content":"import lifeline.task.ToDo;","lastModifiedDate":"2021-08-15"},{"lineNumber":26,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":27,"author":{"gitId":"Imranr2"},"content":"/**","lastModifiedDate":"2021-08-21"},{"lineNumber":28,"author":{"gitId":"Imranr2"},"content":" * The class Storage handles the saving of tasks to a JSON file and loading saved tasks from a JSON file.","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"Imranr2"},"content":" */","lastModifiedDate":"2021-08-21"},{"lineNumber":30,"author":{"gitId":"Imranr2"},"content":"public class Storage {","lastModifiedDate":"2021-08-14"},{"lineNumber":31,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":32,"author":{"gitId":"Imranr2"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":33,"author":{"gitId":"Imranr2"},"content":"     * File path to save the tasks.","lastModifiedDate":"2021-08-31"},{"lineNumber":34,"author":{"gitId":"Imranr2"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":35,"author":{"gitId":"Imranr2"},"content":"    private String filePath;","lastModifiedDate":"2021-08-30"},{"lineNumber":36,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":37,"author":{"gitId":"Imranr2"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":38,"author":{"gitId":"Imranr2"},"content":"     * Used to convert Java Objects into their JSON representation.","lastModifiedDate":"2021-08-31"},{"lineNumber":39,"author":{"gitId":"Imranr2"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":40,"author":{"gitId":"Imranr2"},"content":"    private Gson gson;","lastModifiedDate":"2021-08-14"},{"lineNumber":41,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":42,"author":{"gitId":"Imranr2"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":43,"author":{"gitId":"Imranr2"},"content":"     * Default constructor for a Storage.","lastModifiedDate":"2021-08-31"},{"lineNumber":44,"author":{"gitId":"Imranr2"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":45,"author":{"gitId":"Imranr2"},"content":"     * @param filePath Path to save and load tasks from.","lastModifiedDate":"2021-08-31"},{"lineNumber":46,"author":{"gitId":"Imranr2"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":47,"author":{"gitId":"Imranr2"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2021-08-30"},{"lineNumber":48,"author":{"gitId":"Imranr2"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2021-08-30"},{"lineNumber":49,"author":{"gitId":"Imranr2"},"content":"        this.gson \u003d new GsonBuilder().setPrettyPrinting().create();","lastModifiedDate":"2021-08-18"},{"lineNumber":50,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":51,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":52,"author":{"gitId":"Imranr2"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":53,"author":{"gitId":"Imranr2"},"content":"     * Saves tasks to JSON.","lastModifiedDate":"2021-08-31"},{"lineNumber":54,"author":{"gitId":"Imranr2"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":55,"author":{"gitId":"Imranr2"},"content":"     * @param tasks tasks to be saved as JSON.","lastModifiedDate":"2021-08-31"},{"lineNumber":56,"author":{"gitId":"Imranr2"},"content":"     * @throws LifelineException if unable to save to file.","lastModifiedDate":"2021-08-31"},{"lineNumber":57,"author":{"gitId":"Imranr2"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":58,"author":{"gitId":"Imranr2"},"content":"    public void save(TaskList tasks) throws LifelineException {","lastModifiedDate":"2021-08-14"},{"lineNumber":59,"author":{"gitId":"Imranr2"},"content":"        createDirectoryIfMissing();","lastModifiedDate":"2021-08-18"},{"lineNumber":60,"author":{"gitId":"Imranr2"},"content":"        writeToFile(tasks);","lastModifiedDate":"2021-09-04"},{"lineNumber":61,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":62,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":63,"author":{"gitId":"Imranr2"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":64,"author":{"gitId":"Imranr2"},"content":"     * Loads saved tasks from a JSON file.","lastModifiedDate":"2021-08-31"},{"lineNumber":65,"author":{"gitId":"Imranr2"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":66,"author":{"gitId":"Imranr2"},"content":"     * @return Saved tasks as TaskList.","lastModifiedDate":"2021-08-31"},{"lineNumber":67,"author":{"gitId":"Imranr2"},"content":"     * @throws LifelineException if unable to load file.","lastModifiedDate":"2021-08-31"},{"lineNumber":68,"author":{"gitId":"Imranr2"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":69,"author":{"gitId":"Imranr2"},"content":"    public TaskList load() throws LifelineException {","lastModifiedDate":"2021-08-14"},{"lineNumber":70,"author":{"gitId":"Imranr2"},"content":"        JsonArray tasksAsJson \u003d parseSavedTasksAsJsonArray();","lastModifiedDate":"2021-09-04"},{"lineNumber":71,"author":{"gitId":"Imranr2"},"content":"        TaskList savedTasks \u003d getTasksFromJsonArray(tasksAsJson);","lastModifiedDate":"2021-09-04"},{"lineNumber":72,"author":{"gitId":"Imranr2"},"content":"        return savedTasks;","lastModifiedDate":"2021-09-04"},{"lineNumber":73,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":74,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":75,"author":{"gitId":"Imranr2"},"content":"    private JsonArray parseSavedTasksAsJsonArray() throws LifelineException {","lastModifiedDate":"2021-09-04"},{"lineNumber":76,"author":{"gitId":"Imranr2"},"content":"        try {","lastModifiedDate":"2021-08-14"},{"lineNumber":77,"author":{"gitId":"Imranr2"},"content":"            FileReader fileReader \u003d new FileReader(filePath);","lastModifiedDate":"2021-08-30"},{"lineNumber":78,"author":{"gitId":"Imranr2"},"content":"            JsonArray tasksAsJson \u003d JsonParser.parseReader(fileReader).getAsJsonArray();","lastModifiedDate":"2021-09-04"},{"lineNumber":79,"author":{"gitId":"Imranr2"},"content":"            fileReader.close();","lastModifiedDate":"2021-09-04"},{"lineNumber":80,"author":{"gitId":"Imranr2"},"content":"            return tasksAsJson;","lastModifiedDate":"2021-09-04"},{"lineNumber":81,"author":{"gitId":"Imranr2"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-04"},{"lineNumber":82,"author":{"gitId":"Imranr2"},"content":"            throw new LifelineException(ERROR_UNABLE_TO_FIND_SAVED_TASKS);","lastModifiedDate":"2021-09-04"},{"lineNumber":83,"author":{"gitId":"Imranr2"},"content":"        }","lastModifiedDate":"2021-09-04"},{"lineNumber":84,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":85,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":86,"author":{"gitId":"Imranr2"},"content":"    private TaskList getTasksFromJsonArray(JsonArray tasksAsJson) {","lastModifiedDate":"2021-09-04"},{"lineNumber":87,"author":{"gitId":"Imranr2"},"content":"        TaskList savedTasks \u003d new TaskList(new ArrayList\u003cTask\u003e());","lastModifiedDate":"2021-08-14"},{"lineNumber":88,"author":{"gitId":"Imranr2"},"content":"        for (int i \u003d 0; i \u003c tasksAsJson.size(); i++) {","lastModifiedDate":"2021-09-04"},{"lineNumber":89,"author":{"gitId":"Imranr2"},"content":"            JsonObject currTask \u003d tasksAsJson.get(i).getAsJsonObject();","lastModifiedDate":"2021-09-04"},{"lineNumber":90,"author":{"gitId":"Imranr2"},"content":"            if (currTask.has(\"dueDate\")) {","lastModifiedDate":"2021-09-04"},{"lineNumber":91,"author":{"gitId":"Imranr2"},"content":"                addDeadlineTask(currTask, savedTasks);","lastModifiedDate":"2021-08-22"},{"lineNumber":92,"author":{"gitId":"Imranr2"},"content":"            } else if (currTask.has(\"startTime\")) {","lastModifiedDate":"2021-08-14"},{"lineNumber":93,"author":{"gitId":"Imranr2"},"content":"                addEventTask(currTask, savedTasks);","lastModifiedDate":"2021-08-22"},{"lineNumber":94,"author":{"gitId":"Imranr2"},"content":"            } else {","lastModifiedDate":"2021-08-14"},{"lineNumber":95,"author":{"gitId":"Imranr2"},"content":"                addToDoTask(currTask, savedTasks);","lastModifiedDate":"2021-08-22"},{"lineNumber":96,"author":{"gitId":"Imranr2"},"content":"            }","lastModifiedDate":"2021-08-14"},{"lineNumber":97,"author":{"gitId":"Imranr2"},"content":"        }","lastModifiedDate":"2021-08-14"},{"lineNumber":98,"author":{"gitId":"Imranr2"},"content":"        return savedTasks;","lastModifiedDate":"2021-08-14"},{"lineNumber":99,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":100,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":101,"author":{"gitId":"Imranr2"},"content":"    private void addDeadlineTask(JsonObject deadline, TaskList taskList) {","lastModifiedDate":"2021-08-22"},{"lineNumber":102,"author":{"gitId":"Imranr2"},"content":"        String name \u003d deadline.get(\"name\").getAsString();","lastModifiedDate":"2021-08-22"},{"lineNumber":103,"author":{"gitId":"Imranr2"},"content":"        LocalDate dueDate \u003d gson.fromJson(deadline.get(\"dueDate\"), LocalDate.class);","lastModifiedDate":"2021-09-04"},{"lineNumber":104,"author":{"gitId":"Imranr2"},"content":"        LocalTime dueTime \u003d gson.fromJson(deadline.get(\"dueTime\"), LocalTime.class);","lastModifiedDate":"2021-09-04"},{"lineNumber":105,"author":{"gitId":"Imranr2"},"content":"        boolean isDone \u003d deadline.get(\"isDone\").getAsBoolean();","lastModifiedDate":"2021-08-22"},{"lineNumber":106,"author":{"gitId":"Imranr2"},"content":"        Deadline savedDeadline \u003d new Deadline(name, dueDate, dueTime, isDone);","lastModifiedDate":"2021-09-04"},{"lineNumber":107,"author":{"gitId":"Imranr2"},"content":"        taskList.add(savedDeadline);","lastModifiedDate":"2021-08-22"},{"lineNumber":108,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":109,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":110,"author":{"gitId":"Imranr2"},"content":"    private void addEventTask(JsonObject event, TaskList taskList) {","lastModifiedDate":"2021-08-22"},{"lineNumber":111,"author":{"gitId":"Imranr2"},"content":"        String name \u003d event.get(\"name\").getAsString();","lastModifiedDate":"2021-08-22"},{"lineNumber":112,"author":{"gitId":"Imranr2"},"content":"        LocalDate date \u003d gson.fromJson(event.get(\"date\"), LocalDate.class);","lastModifiedDate":"2021-08-22"},{"lineNumber":113,"author":{"gitId":"Imranr2"},"content":"        LocalTime startTime \u003d gson.fromJson(event.get(\"startTime\"), LocalTime.class);","lastModifiedDate":"2021-08-22"},{"lineNumber":114,"author":{"gitId":"Imranr2"},"content":"        LocalTime endTime \u003d gson.fromJson(event.get(\"endTime\"), LocalTime.class);","lastModifiedDate":"2021-08-22"},{"lineNumber":115,"author":{"gitId":"Imranr2"},"content":"        boolean isDone \u003d event.get(\"isDone\").getAsBoolean();","lastModifiedDate":"2021-08-22"},{"lineNumber":116,"author":{"gitId":"Imranr2"},"content":"        Event savedEvent \u003d new Event(name, date, startTime, endTime, isDone);","lastModifiedDate":"2021-08-22"},{"lineNumber":117,"author":{"gitId":"Imranr2"},"content":"        taskList.add(savedEvent);","lastModifiedDate":"2021-08-22"},{"lineNumber":118,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":119,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":120,"author":{"gitId":"Imranr2"},"content":"    private void addToDoTask(JsonObject toDo, TaskList taskList) {","lastModifiedDate":"2021-08-22"},{"lineNumber":121,"author":{"gitId":"Imranr2"},"content":"        String name \u003d toDo.get(\"name\").getAsString();","lastModifiedDate":"2021-08-22"},{"lineNumber":122,"author":{"gitId":"Imranr2"},"content":"        boolean isDone \u003d toDo.get(\"isDone\").getAsBoolean();","lastModifiedDate":"2021-08-22"},{"lineNumber":123,"author":{"gitId":"Imranr2"},"content":"        ToDo savedToDo \u003d new ToDo(name, isDone);","lastModifiedDate":"2021-08-22"},{"lineNumber":124,"author":{"gitId":"Imranr2"},"content":"        taskList.add(savedToDo);","lastModifiedDate":"2021-08-22"},{"lineNumber":125,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":126,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":127,"author":{"gitId":"Imranr2"},"content":"    private void createDirectoryIfMissing() {","lastModifiedDate":"2021-08-18"},{"lineNumber":128,"author":{"gitId":"Imranr2"},"content":"        int indexOfLastFileSeparator \u003d filePath.indexOf(File.separator);","lastModifiedDate":"2021-08-30"},{"lineNumber":129,"author":{"gitId":"Imranr2"},"content":"        String directoryToSaveTo \u003d filePath.substring(0, indexOfLastFileSeparator \u003d\u003d -1 ? 0 : indexOfLastFileSeparator);","lastModifiedDate":"2021-08-30"},{"lineNumber":130,"author":{"gitId":"Imranr2"},"content":"        File directory \u003d new File(directoryToSaveTo);","lastModifiedDate":"2021-08-18"},{"lineNumber":131,"author":{"gitId":"Imranr2"},"content":"        directory.mkdirs();","lastModifiedDate":"2021-08-18"},{"lineNumber":132,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":133,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":134,"author":{"gitId":"Imranr2"},"content":"    private void writeToFile(TaskList tasks) throws LifelineException {","lastModifiedDate":"2021-09-04"},{"lineNumber":135,"author":{"gitId":"Imranr2"},"content":"        try {","lastModifiedDate":"2021-09-04"},{"lineNumber":136,"author":{"gitId":"Imranr2"},"content":"            FileWriter fileWriter \u003d new FileWriter(filePath);","lastModifiedDate":"2021-09-04"},{"lineNumber":137,"author":{"gitId":"Imranr2"},"content":"            fileWriter.write(gson.toJson(tasks.getTaskList(), ArrayList.class));","lastModifiedDate":"2021-09-04"},{"lineNumber":138,"author":{"gitId":"Imranr2"},"content":"            fileWriter.close();","lastModifiedDate":"2021-09-04"},{"lineNumber":139,"author":{"gitId":"Imranr2"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-04"},{"lineNumber":140,"author":{"gitId":"Imranr2"},"content":"            throw new LifelineException(ERROR_UNABLE_TO_SAVE_TASK);","lastModifiedDate":"2021-09-04"},{"lineNumber":141,"author":{"gitId":"Imranr2"},"content":"        }","lastModifiedDate":"2021-09-04"},{"lineNumber":142,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":143,"author":{"gitId":"Imranr2"},"content":"}","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"Imranr2":143}},{"path":"src/main/java/lifeline/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Imranr2"},"content":"package lifeline.task;","lastModifiedDate":"2021-08-15"},{"lineNumber":2,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":3,"author":{"gitId":"Imranr2"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-04"},{"lineNumber":4,"author":{"gitId":"Imranr2"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-14"},{"lineNumber":5,"author":{"gitId":"Imranr2"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-09-04"},{"lineNumber":6,"author":{"gitId":"Imranr2"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-14"},{"lineNumber":7,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":8,"author":{"gitId":"Imranr2"},"content":"/**","lastModifiedDate":"2021-08-21"},{"lineNumber":9,"author":{"gitId":"Imranr2"},"content":" * The Deadline class encapsulates a task with a deadline.","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"Imranr2"},"content":" */","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"Imranr2"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-13"},{"lineNumber":12,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"Imranr2"},"content":"    private LocalDateTime by;","lastModifiedDate":"2021-08-14"},{"lineNumber":14,"author":{"gitId":"Imranr2"},"content":"    private LocalDate dueDate;","lastModifiedDate":"2021-09-04"},{"lineNumber":15,"author":{"gitId":"Imranr2"},"content":"    private LocalTime dueTime;","lastModifiedDate":"2021-09-04"},{"lineNumber":16,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-13"},{"lineNumber":17,"author":{"gitId":"Imranr2"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":18,"author":{"gitId":"Imranr2"},"content":"     * Default constructor for a Deadline.","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"Imranr2"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":20,"author":{"gitId":"Imranr2"},"content":"     * @param name Name of the task with a deadline.","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"Imranr2"},"content":"     * @param dueDate Indicates the date that the task has to completed by.","lastModifiedDate":"2021-09-04"},{"lineNumber":22,"author":{"gitId":"Imranr2"},"content":"     * @param dueTime Indicates the time that the task has to completed by.","lastModifiedDate":"2021-09-04"},{"lineNumber":23,"author":{"gitId":"Imranr2"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":24,"author":{"gitId":"Imranr2"},"content":"    public Deadline(String name, LocalDate dueDate, LocalTime dueTime) {","lastModifiedDate":"2021-09-04"},{"lineNumber":25,"author":{"gitId":"Imranr2"},"content":"        super(name);","lastModifiedDate":"2021-08-13"},{"lineNumber":26,"author":{"gitId":"Imranr2"},"content":"        this.dueDate \u003d dueDate;","lastModifiedDate":"2021-09-04"},{"lineNumber":27,"author":{"gitId":"Imranr2"},"content":"        this.dueTime \u003d dueTime;","lastModifiedDate":"2021-09-04"},{"lineNumber":28,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-13"},{"lineNumber":29,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-13"},{"lineNumber":30,"author":{"gitId":"Imranr2"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":31,"author":{"gitId":"Imranr2"},"content":"     * Constructor to be used when loading saved deadline.","lastModifiedDate":"2021-08-31"},{"lineNumber":32,"author":{"gitId":"Imranr2"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":33,"author":{"gitId":"Imranr2"},"content":"     * @param name Name of the task with a deadline.","lastModifiedDate":"2021-08-31"},{"lineNumber":34,"author":{"gitId":"Imranr2"},"content":"     * @param dueDate Indicates the date that the task has to completed by.","lastModifiedDate":"2021-09-04"},{"lineNumber":35,"author":{"gitId":"Imranr2"},"content":"     * @param dueTime Indicates the time that the task has to completed by.","lastModifiedDate":"2021-09-04"},{"lineNumber":36,"author":{"gitId":"Imranr2"},"content":"     * @param isDone Indicates if the task is completed.","lastModifiedDate":"2021-08-31"},{"lineNumber":37,"author":{"gitId":"Imranr2"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":38,"author":{"gitId":"Imranr2"},"content":"    public Deadline(String name, LocalDate dueDate, LocalTime dueTime, boolean isDone) {","lastModifiedDate":"2021-09-04"},{"lineNumber":39,"author":{"gitId":"Imranr2"},"content":"        super(name, isDone);","lastModifiedDate":"2021-08-14"},{"lineNumber":40,"author":{"gitId":"Imranr2"},"content":"        this.dueDate \u003d dueDate;","lastModifiedDate":"2021-09-04"},{"lineNumber":41,"author":{"gitId":"Imranr2"},"content":"        this.dueTime \u003d dueTime;","lastModifiedDate":"2021-09-04"},{"lineNumber":42,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":43,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":44,"author":{"gitId":"Imranr2"},"content":"    @Override","lastModifiedDate":"2021-08-14"},{"lineNumber":45,"author":{"gitId":"Imranr2"},"content":"    public String toString() {","lastModifiedDate":"2021-08-13"},{"lineNumber":46,"author":{"gitId":"Imranr2"},"content":"        String dateAsString \u003d dueDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2021-09-04"},{"lineNumber":47,"author":{"gitId":"Imranr2"},"content":"        String timeAsString \u003d dueTime.format(DateTimeFormatter.ofPattern(\"h:mm a\"));","lastModifiedDate":"2021-09-04"},{"lineNumber":48,"author":{"gitId":"Imranr2"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + dateAsString + \" \" + timeAsString + \")\";","lastModifiedDate":"2021-09-04"},{"lineNumber":49,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-13"},{"lineNumber":50,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":51,"author":{"gitId":"Imranr2"},"content":"}","lastModifiedDate":"2021-08-13"}],"authorContributionMap":{"Imranr2":51}},{"path":"src/main/java/lifeline/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Imranr2"},"content":"package lifeline.task;","lastModifiedDate":"2021-08-15"},{"lineNumber":2,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":3,"author":{"gitId":"Imranr2"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-14"},{"lineNumber":4,"author":{"gitId":"Imranr2"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-08-14"},{"lineNumber":5,"author":{"gitId":"Imranr2"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-14"},{"lineNumber":6,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":7,"author":{"gitId":"Imranr2"},"content":"/**","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"Imranr2"},"content":" * The class Event encapsulates an event with a date, start time and end time.","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"Imranr2"},"content":" */","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"Imranr2"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-13"},{"lineNumber":11,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"Imranr2"},"content":"    private LocalTime startTime;","lastModifiedDate":"2021-08-14"},{"lineNumber":13,"author":{"gitId":"Imranr2"},"content":"    private LocalTime endTime;","lastModifiedDate":"2021-08-14"},{"lineNumber":14,"author":{"gitId":"Imranr2"},"content":"    private LocalDate date;","lastModifiedDate":"2021-08-14"},{"lineNumber":15,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-13"},{"lineNumber":16,"author":{"gitId":"Imranr2"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":17,"author":{"gitId":"Imranr2"},"content":"     * Default constructor for an Event.","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"Imranr2"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":19,"author":{"gitId":"Imranr2"},"content":"     * @param name Name of the event.","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"Imranr2"},"content":"     * @param date Date of the event.","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"Imranr2"},"content":"     * @param startTime Start time of the event.","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"Imranr2"},"content":"     * @param endTime End time of the event.","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"Imranr2"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":24,"author":{"gitId":"Imranr2"},"content":"    public Event(String name, LocalDate date, LocalTime startTime, LocalTime endTime) {","lastModifiedDate":"2021-08-15"},{"lineNumber":25,"author":{"gitId":"Imranr2"},"content":"        super(name);","lastModifiedDate":"2021-08-13"},{"lineNumber":26,"author":{"gitId":"Imranr2"},"content":"        this.date \u003d date;","lastModifiedDate":"2021-08-14"},{"lineNumber":27,"author":{"gitId":"Imranr2"},"content":"        this.startTime \u003d startTime;","lastModifiedDate":"2021-08-14"},{"lineNumber":28,"author":{"gitId":"Imranr2"},"content":"        this.endTime \u003d endTime;","lastModifiedDate":"2021-08-14"},{"lineNumber":29,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-13"},{"lineNumber":30,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-13"},{"lineNumber":31,"author":{"gitId":"Imranr2"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":32,"author":{"gitId":"Imranr2"},"content":"     * Constructor to be used when loading saved Event.","lastModifiedDate":"2021-08-31"},{"lineNumber":33,"author":{"gitId":"Imranr2"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":34,"author":{"gitId":"Imranr2"},"content":"     * @param name Name of the event.","lastModifiedDate":"2021-08-31"},{"lineNumber":35,"author":{"gitId":"Imranr2"},"content":"     * @param date Date of the event.","lastModifiedDate":"2021-08-31"},{"lineNumber":36,"author":{"gitId":"Imranr2"},"content":"     * @param startTime Start time of the event.","lastModifiedDate":"2021-08-31"},{"lineNumber":37,"author":{"gitId":"Imranr2"},"content":"     * @param endTime End time of the event.","lastModifiedDate":"2021-08-31"},{"lineNumber":38,"author":{"gitId":"Imranr2"},"content":"     * @param isDone Indicates whether the event is done.","lastModifiedDate":"2021-08-31"},{"lineNumber":39,"author":{"gitId":"Imranr2"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":40,"author":{"gitId":"Imranr2"},"content":"    public Event(String name, LocalDate date, LocalTime startTime, LocalTime endTime, boolean isDone) {","lastModifiedDate":"2021-08-15"},{"lineNumber":41,"author":{"gitId":"Imranr2"},"content":"        super(name, isDone);","lastModifiedDate":"2021-08-14"},{"lineNumber":42,"author":{"gitId":"Imranr2"},"content":"        this.date \u003d date;","lastModifiedDate":"2021-08-14"},{"lineNumber":43,"author":{"gitId":"Imranr2"},"content":"        this.startTime \u003d startTime;","lastModifiedDate":"2021-08-14"},{"lineNumber":44,"author":{"gitId":"Imranr2"},"content":"        this.endTime \u003d endTime;","lastModifiedDate":"2021-08-14"},{"lineNumber":45,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":46,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":47,"author":{"gitId":"Imranr2"},"content":"    @Override","lastModifiedDate":"2021-08-14"},{"lineNumber":48,"author":{"gitId":"Imranr2"},"content":"    public String toString() {","lastModifiedDate":"2021-08-13"},{"lineNumber":49,"author":{"gitId":"Imranr2"},"content":"        String dateString \u003d date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2021-08-14"},{"lineNumber":50,"author":{"gitId":"Imranr2"},"content":"        String startTimeString \u003d startTime.format(DateTimeFormatter.ofPattern(\"h:mm a\"));","lastModifiedDate":"2021-08-15"},{"lineNumber":51,"author":{"gitId":"Imranr2"},"content":"        String endTimeString \u003d endTime.format(DateTimeFormatter.ofPattern(\"h:mm a\"));","lastModifiedDate":"2021-08-15"},{"lineNumber":52,"author":{"gitId":"Imranr2"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + dateString + \" \" + startTimeString + \" - \" + endTimeString + \")\";","lastModifiedDate":"2021-08-14"},{"lineNumber":53,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":54,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-13"},{"lineNumber":55,"author":{"gitId":"Imranr2"},"content":"}","lastModifiedDate":"2021-08-13"}],"authorContributionMap":{"Imranr2":55}},{"path":"src/main/java/lifeline/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Imranr2"},"content":"package lifeline.task;","lastModifiedDate":"2021-08-15"},{"lineNumber":2,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":3,"author":{"gitId":"Imranr2"},"content":"/**","lastModifiedDate":"2021-08-21"},{"lineNumber":4,"author":{"gitId":"Imranr2"},"content":" * The Task class represents a task.","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"Imranr2"},"content":" */","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"Imranr2"},"content":"public class Task {","lastModifiedDate":"2021-08-13"},{"lineNumber":7,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"Imranr2"},"content":"    private String name;","lastModifiedDate":"2021-08-13"},{"lineNumber":9,"author":{"gitId":"Imranr2"},"content":"    private boolean isDone;","lastModifiedDate":"2021-08-13"},{"lineNumber":10,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-13"},{"lineNumber":11,"author":{"gitId":"Imranr2"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"Imranr2"},"content":"     * Default constructor for a Task. A new task is not done by default.","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"Imranr2"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"Imranr2"},"content":"     * @param name Name of task.","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"Imranr2"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":16,"author":{"gitId":"Imranr2"},"content":"    public Task(String name) {","lastModifiedDate":"2021-08-15"},{"lineNumber":17,"author":{"gitId":"Imranr2"},"content":"        this.name \u003d name;","lastModifiedDate":"2021-08-13"},{"lineNumber":18,"author":{"gitId":"Imranr2"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-13"},{"lineNumber":19,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-13"},{"lineNumber":20,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-13"},{"lineNumber":21,"author":{"gitId":"Imranr2"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":22,"author":{"gitId":"Imranr2"},"content":"     * Constructor to be used when loading saved tasks.","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"Imranr2"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":24,"author":{"gitId":"Imranr2"},"content":"     * @param name Name of task.","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"Imranr2"},"content":"     * @param isDone Indicates whether task is completed.","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"Imranr2"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":27,"author":{"gitId":"Imranr2"},"content":"    public Task(String name, boolean isDone) {","lastModifiedDate":"2021-08-15"},{"lineNumber":28,"author":{"gitId":"Imranr2"},"content":"        this.name \u003d name;","lastModifiedDate":"2021-08-14"},{"lineNumber":29,"author":{"gitId":"Imranr2"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2021-08-14"},{"lineNumber":30,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":31,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":32,"author":{"gitId":"Imranr2"},"content":"    public void setDone(boolean isDone) {","lastModifiedDate":"2021-08-31"},{"lineNumber":33,"author":{"gitId":"Imranr2"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2021-08-31"},{"lineNumber":34,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-13"},{"lineNumber":35,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-13"},{"lineNumber":36,"author":{"gitId":"Imranr2"},"content":"    public String getName() {","lastModifiedDate":"2021-08-13"},{"lineNumber":37,"author":{"gitId":"Imranr2"},"content":"        return name;","lastModifiedDate":"2021-08-13"},{"lineNumber":38,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-13"},{"lineNumber":39,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-13"},{"lineNumber":40,"author":{"gitId":"Imranr2"},"content":"    public boolean isDone() {","lastModifiedDate":"2021-08-13"},{"lineNumber":41,"author":{"gitId":"Imranr2"},"content":"        return isDone;","lastModifiedDate":"2021-08-13"},{"lineNumber":42,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-13"},{"lineNumber":43,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-13"},{"lineNumber":44,"author":{"gitId":"Imranr2"},"content":"    @Override","lastModifiedDate":"2021-08-21"},{"lineNumber":45,"author":{"gitId":"Imranr2"},"content":"    public String toString() {","lastModifiedDate":"2021-08-13"},{"lineNumber":46,"author":{"gitId":"Imranr2"},"content":"        if (isDone) {","lastModifiedDate":"2021-08-13"},{"lineNumber":47,"author":{"gitId":"Imranr2"},"content":"            return \"[X] \" + this.name;","lastModifiedDate":"2021-08-21"},{"lineNumber":48,"author":{"gitId":"Imranr2"},"content":"        } else {","lastModifiedDate":"2021-08-13"},{"lineNumber":49,"author":{"gitId":"Imranr2"},"content":"            return \"[ ] \" + this.name;","lastModifiedDate":"2021-08-21"},{"lineNumber":50,"author":{"gitId":"Imranr2"},"content":"        }","lastModifiedDate":"2021-08-13"},{"lineNumber":51,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-13"},{"lineNumber":52,"author":{"gitId":"Imranr2"},"content":"}","lastModifiedDate":"2021-08-13"}],"authorContributionMap":{"Imranr2":52}},{"path":"src/main/java/lifeline/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Imranr2"},"content":"package lifeline.task;","lastModifiedDate":"2021-08-15"},{"lineNumber":2,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":3,"author":{"gitId":"Imranr2"},"content":"import static lifeline.util.ErrorString.ERROR_NO_TASKS_FOUND;","lastModifiedDate":"2021-09-03"},{"lineNumber":4,"author":{"gitId":"Imranr2"},"content":"import static lifeline.util.ErrorString.ERROR_TASK_ALREADY_DONE;","lastModifiedDate":"2021-09-03"},{"lineNumber":5,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":6,"author":{"gitId":"Imranr2"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-14"},{"lineNumber":7,"author":{"gitId":"Imranr2"},"content":"import java.util.Collections;","lastModifiedDate":"2021-09-04"},{"lineNumber":8,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":9,"author":{"gitId":"Imranr2"},"content":"import lifeline.exception.LifelineException;","lastModifiedDate":"2021-08-15"},{"lineNumber":10,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":11,"author":{"gitId":"Imranr2"},"content":"/**","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"Imranr2"},"content":" * The class TaskList encapsulates a list of tasks using an ArrayList of tasks.","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"Imranr2"},"content":" */","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"Imranr2"},"content":"public class TaskList {","lastModifiedDate":"2021-08-14"},{"lineNumber":15,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":16,"author":{"gitId":"Imranr2"},"content":"    private ArrayList\u003cTask\u003e taskList;","lastModifiedDate":"2021-08-14"},{"lineNumber":17,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":18,"author":{"gitId":"Imranr2"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":19,"author":{"gitId":"Imranr2"},"content":"     * Default constructor for a TaskList.","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"Imranr2"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":21,"author":{"gitId":"Imranr2"},"content":"     * @param taskList List of tasks to be stored.","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"Imranr2"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":23,"author":{"gitId":"Imranr2"},"content":"    public TaskList(ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2021-08-15"},{"lineNumber":24,"author":{"gitId":"Imranr2"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2021-08-14"},{"lineNumber":25,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":26,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":27,"author":{"gitId":"Imranr2"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":28,"author":{"gitId":"Imranr2"},"content":"     * Adds a task to TaskList.","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"Imranr2"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":30,"author":{"gitId":"Imranr2"},"content":"     * @param task Task to be added.","lastModifiedDate":"2021-08-31"},{"lineNumber":31,"author":{"gitId":"Imranr2"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":32,"author":{"gitId":"Imranr2"},"content":"    public void add(Task task) {","lastModifiedDate":"2021-08-14"},{"lineNumber":33,"author":{"gitId":"Imranr2"},"content":"        taskList.add(task);","lastModifiedDate":"2021-08-14"},{"lineNumber":34,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":35,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":36,"author":{"gitId":"Imranr2"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":37,"author":{"gitId":"Imranr2"},"content":"     * Returns task based on given index.","lastModifiedDate":"2021-08-31"},{"lineNumber":38,"author":{"gitId":"Imranr2"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":39,"author":{"gitId":"Imranr2"},"content":"     * @param index Index of task to be returned.","lastModifiedDate":"2021-08-31"},{"lineNumber":40,"author":{"gitId":"Imranr2"},"content":"     * @return Task at specified index.","lastModifiedDate":"2021-08-31"},{"lineNumber":41,"author":{"gitId":"Imranr2"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":42,"author":{"gitId":"Imranr2"},"content":"    public Task getTask(int index) {","lastModifiedDate":"2021-08-31"},{"lineNumber":43,"author":{"gitId":"Imranr2"},"content":"        assert index \u003e\u003d 0 \u0026\u0026 index \u003c taskList.size();","lastModifiedDate":"2021-09-03"},{"lineNumber":44,"author":{"gitId":"Imranr2"},"content":"        return taskList.get(index);","lastModifiedDate":"2021-08-14"},{"lineNumber":45,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":46,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":47,"author":{"gitId":"Imranr2"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":48,"author":{"gitId":"Imranr2"},"content":"     * Returns number of tasks in TaskList.","lastModifiedDate":"2021-08-31"},{"lineNumber":49,"author":{"gitId":"Imranr2"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":50,"author":{"gitId":"Imranr2"},"content":"     * @return Number of tasks in TaskList.","lastModifiedDate":"2021-08-31"},{"lineNumber":51,"author":{"gitId":"Imranr2"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":52,"author":{"gitId":"Imranr2"},"content":"    public int getSize() {","lastModifiedDate":"2021-08-30"},{"lineNumber":53,"author":{"gitId":"Imranr2"},"content":"        return taskList.size();","lastModifiedDate":"2021-08-14"},{"lineNumber":54,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":55,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":56,"author":{"gitId":"Imranr2"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":57,"author":{"gitId":"Imranr2"},"content":"     * Deletes a task in TaskList at specified index.","lastModifiedDate":"2021-08-31"},{"lineNumber":58,"author":{"gitId":"Imranr2"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":59,"author":{"gitId":"Imranr2"},"content":"     * @param index Index of task to be deleted.","lastModifiedDate":"2021-08-31"},{"lineNumber":60,"author":{"gitId":"Imranr2"},"content":"     * @return Deleted task.","lastModifiedDate":"2021-08-31"},{"lineNumber":61,"author":{"gitId":"Imranr2"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":62,"author":{"gitId":"Imranr2"},"content":"    public Task deleteTask(int index) {","lastModifiedDate":"2021-08-14"},{"lineNumber":63,"author":{"gitId":"Imranr2"},"content":"        assert index \u003e\u003d 0 \u0026\u0026 index \u003c taskList.size();","lastModifiedDate":"2021-09-03"},{"lineNumber":64,"author":{"gitId":"Imranr2"},"content":"        Task taskToDelete \u003d taskList.get(index);","lastModifiedDate":"2021-08-14"},{"lineNumber":65,"author":{"gitId":"Imranr2"},"content":"        taskList.remove(index);","lastModifiedDate":"2021-08-14"},{"lineNumber":66,"author":{"gitId":"Imranr2"},"content":"        return taskToDelete;","lastModifiedDate":"2021-08-14"},{"lineNumber":67,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":68,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":69,"author":{"gitId":"Imranr2"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":70,"author":{"gitId":"Imranr2"},"content":"     * Completes task in the TaskList at the specified index.","lastModifiedDate":"2021-08-31"},{"lineNumber":71,"author":{"gitId":"Imranr2"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":72,"author":{"gitId":"Imranr2"},"content":"     * @param index Index of task to be completed.","lastModifiedDate":"2021-08-31"},{"lineNumber":73,"author":{"gitId":"Imranr2"},"content":"     * @return Completed task.","lastModifiedDate":"2021-08-31"},{"lineNumber":74,"author":{"gitId":"Imranr2"},"content":"     * @throws LifelineException If task is already completed.","lastModifiedDate":"2021-08-31"},{"lineNumber":75,"author":{"gitId":"Imranr2"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":76,"author":{"gitId":"Imranr2"},"content":"    public Task completeTask(int index) throws LifelineException {","lastModifiedDate":"2021-08-14"},{"lineNumber":77,"author":{"gitId":"Imranr2"},"content":"        assert index \u003e\u003d 0 \u0026\u0026 index \u003c taskList.size();","lastModifiedDate":"2021-09-03"},{"lineNumber":78,"author":{"gitId":"Imranr2"},"content":"        Task taskToMarkAsComplete \u003d taskList.get(index);","lastModifiedDate":"2021-08-14"},{"lineNumber":79,"author":{"gitId":"Imranr2"},"content":"        if (taskToMarkAsComplete.isDone()) {","lastModifiedDate":"2021-08-14"},{"lineNumber":80,"author":{"gitId":"Imranr2"},"content":"            throw new LifelineException(ERROR_TASK_ALREADY_DONE);","lastModifiedDate":"2021-09-03"},{"lineNumber":81,"author":{"gitId":"Imranr2"},"content":"        }","lastModifiedDate":"2021-08-14"},{"lineNumber":82,"author":{"gitId":"Imranr2"},"content":"        taskToMarkAsComplete.setDone(true);","lastModifiedDate":"2021-08-14"},{"lineNumber":83,"author":{"gitId":"Imranr2"},"content":"        return taskToMarkAsComplete;","lastModifiedDate":"2021-08-14"},{"lineNumber":84,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":85,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":86,"author":{"gitId":"Imranr2"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":87,"author":{"gitId":"Imranr2"},"content":"     * Returns list of tasks containing keyword.","lastModifiedDate":"2021-08-31"},{"lineNumber":88,"author":{"gitId":"Imranr2"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":89,"author":{"gitId":"Imranr2"},"content":"     * @param keyword Keyword used to search for tasks.","lastModifiedDate":"2021-08-31"},{"lineNumber":90,"author":{"gitId":"Imranr2"},"content":"     * @return List of tasks containing keyword.","lastModifiedDate":"2021-08-31"},{"lineNumber":91,"author":{"gitId":"Imranr2"},"content":"     * @throws LifelineException If no tasks with keyword is found.","lastModifiedDate":"2021-08-31"},{"lineNumber":92,"author":{"gitId":"Imranr2"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":93,"author":{"gitId":"Imranr2"},"content":"    public TaskList findTasks(String keyword) throws LifelineException {","lastModifiedDate":"2021-08-29"},{"lineNumber":94,"author":{"gitId":"Imranr2"},"content":"        TaskList foundTasks \u003d new TaskList(new ArrayList\u003c\u003e());","lastModifiedDate":"2021-08-29"},{"lineNumber":95,"author":{"gitId":"Imranr2"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {","lastModifiedDate":"2021-08-29"},{"lineNumber":96,"author":{"gitId":"Imranr2"},"content":"            Task currTask \u003d taskList.get(i);","lastModifiedDate":"2021-08-29"},{"lineNumber":97,"author":{"gitId":"Imranr2"},"content":"            if (currTask.getName().toLowerCase().contains(keyword)) {","lastModifiedDate":"2021-08-29"},{"lineNumber":98,"author":{"gitId":"Imranr2"},"content":"                foundTasks.add(currTask);","lastModifiedDate":"2021-08-29"},{"lineNumber":99,"author":{"gitId":"Imranr2"},"content":"            }","lastModifiedDate":"2021-08-29"},{"lineNumber":100,"author":{"gitId":"Imranr2"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":101,"author":{"gitId":"Imranr2"},"content":"        if (foundTasks.getSize() \u003d\u003d 0) {","lastModifiedDate":"2021-08-30"},{"lineNumber":102,"author":{"gitId":"Imranr2"},"content":"            throw new LifelineException(ERROR_NO_TASKS_FOUND);","lastModifiedDate":"2021-09-03"},{"lineNumber":103,"author":{"gitId":"Imranr2"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":104,"author":{"gitId":"Imranr2"},"content":"        return foundTasks;","lastModifiedDate":"2021-08-29"},{"lineNumber":105,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":106,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":107,"author":{"gitId":"Imranr2"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":108,"author":{"gitId":"Imranr2"},"content":"     * Returns list of tasks.","lastModifiedDate":"2021-08-31"},{"lineNumber":109,"author":{"gitId":"Imranr2"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":110,"author":{"gitId":"Imranr2"},"content":"     * @return ArrayList containing tasks.","lastModifiedDate":"2021-08-31"},{"lineNumber":111,"author":{"gitId":"Imranr2"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":112,"author":{"gitId":"Imranr2"},"content":"    public ArrayList\u003cTask\u003e getTaskList() {","lastModifiedDate":"2021-08-14"},{"lineNumber":113,"author":{"gitId":"Imranr2"},"content":"        return this.taskList;","lastModifiedDate":"2021-08-14"},{"lineNumber":114,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":115,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":116,"author":{"gitId":"Imranr2"},"content":"    /**","lastModifiedDate":"2021-09-04"},{"lineNumber":117,"author":{"gitId":"Imranr2"},"content":"     * Deletes multiple tasks in TaskList at specified indices.","lastModifiedDate":"2021-09-04"},{"lineNumber":118,"author":{"gitId":"Imranr2"},"content":"     *","lastModifiedDate":"2021-09-04"},{"lineNumber":119,"author":{"gitId":"Imranr2"},"content":"     * @param taskIndices Indices to delete.","lastModifiedDate":"2021-09-04"},{"lineNumber":120,"author":{"gitId":"Imranr2"},"content":"     */","lastModifiedDate":"2021-09-04"},{"lineNumber":121,"author":{"gitId":"Imranr2"},"content":"    public void deleteMultipleTasks(ArrayList\u003cInteger\u003e taskIndices) {","lastModifiedDate":"2021-09-04"},{"lineNumber":122,"author":{"gitId":"Imranr2"},"content":"        Collections.sort(taskIndices);","lastModifiedDate":"2021-09-04"},{"lineNumber":123,"author":{"gitId":"Imranr2"},"content":"        for (int i \u003d taskIndices.size() - 1; i \u003e\u003d 0; i--) {","lastModifiedDate":"2021-09-04"},{"lineNumber":124,"author":{"gitId":"Imranr2"},"content":"            this.deleteTask(taskIndices.get(i));","lastModifiedDate":"2021-09-04"},{"lineNumber":125,"author":{"gitId":"Imranr2"},"content":"        }","lastModifiedDate":"2021-09-04"},{"lineNumber":126,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":127,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":128,"author":{"gitId":"Imranr2"},"content":"    /**","lastModifiedDate":"2021-09-04"},{"lineNumber":129,"author":{"gitId":"Imranr2"},"content":"     * Completes multiple tasks in TaskList at specified indices.","lastModifiedDate":"2021-09-04"},{"lineNumber":130,"author":{"gitId":"Imranr2"},"content":"     *","lastModifiedDate":"2021-09-04"},{"lineNumber":131,"author":{"gitId":"Imranr2"},"content":"     * @param taskIndices Indices to complete.","lastModifiedDate":"2021-09-04"},{"lineNumber":132,"author":{"gitId":"Imranr2"},"content":"     * @throws LifelineException if task is already completed.","lastModifiedDate":"2021-09-04"},{"lineNumber":133,"author":{"gitId":"Imranr2"},"content":"     */","lastModifiedDate":"2021-09-04"},{"lineNumber":134,"author":{"gitId":"Imranr2"},"content":"    public void completeMultipleTasks(ArrayList\u003cInteger\u003e taskIndices) throws LifelineException {","lastModifiedDate":"2021-09-04"},{"lineNumber":135,"author":{"gitId":"Imranr2"},"content":"        for (int i \u003d taskIndices.size() - 1; i \u003e\u003d 0; i--) {","lastModifiedDate":"2021-09-04"},{"lineNumber":136,"author":{"gitId":"Imranr2"},"content":"            this.completeTask(taskIndices.get(i));","lastModifiedDate":"2021-09-04"},{"lineNumber":137,"author":{"gitId":"Imranr2"},"content":"        }","lastModifiedDate":"2021-09-04"},{"lineNumber":138,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":139,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":140,"author":{"gitId":"Imranr2"},"content":"    /**","lastModifiedDate":"2021-09-04"},{"lineNumber":141,"author":{"gitId":"Imranr2"},"content":"     * Returns number of uncompleted tasks.","lastModifiedDate":"2021-09-04"},{"lineNumber":142,"author":{"gitId":"Imranr2"},"content":"     *","lastModifiedDate":"2021-09-04"},{"lineNumber":143,"author":{"gitId":"Imranr2"},"content":"     * @return Number of uncompleted tasks.","lastModifiedDate":"2021-09-04"},{"lineNumber":144,"author":{"gitId":"Imranr2"},"content":"     */","lastModifiedDate":"2021-09-04"},{"lineNumber":145,"author":{"gitId":"Imranr2"},"content":"    public int getNumberOfUncompletedTasks() {","lastModifiedDate":"2021-09-04"},{"lineNumber":146,"author":{"gitId":"Imranr2"},"content":"        int uncompletedTasks \u003d 0;","lastModifiedDate":"2021-09-04"},{"lineNumber":147,"author":{"gitId":"Imranr2"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {","lastModifiedDate":"2021-09-04"},{"lineNumber":148,"author":{"gitId":"Imranr2"},"content":"            if (!taskList.get(i).isDone()) {","lastModifiedDate":"2021-09-04"},{"lineNumber":149,"author":{"gitId":"Imranr2"},"content":"                uncompletedTasks++;","lastModifiedDate":"2021-09-04"},{"lineNumber":150,"author":{"gitId":"Imranr2"},"content":"            }","lastModifiedDate":"2021-09-04"},{"lineNumber":151,"author":{"gitId":"Imranr2"},"content":"        }","lastModifiedDate":"2021-09-04"},{"lineNumber":152,"author":{"gitId":"Imranr2"},"content":"        return uncompletedTasks;","lastModifiedDate":"2021-09-04"},{"lineNumber":153,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":154,"author":{"gitId":"Imranr2"},"content":"}","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"Imranr2":154}},{"path":"src/main/java/lifeline/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Imranr2"},"content":"package lifeline.task;","lastModifiedDate":"2021-08-15"},{"lineNumber":2,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":3,"author":{"gitId":"Imranr2"},"content":"/**","lastModifiedDate":"2021-08-21"},{"lineNumber":4,"author":{"gitId":"Imranr2"},"content":" * The class ToDo represents a task with no deadline.","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"Imranr2"},"content":" * It is a subclass of Task.","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"Imranr2"},"content":" */","lastModifiedDate":"2021-08-21"},{"lineNumber":7,"author":{"gitId":"Imranr2"},"content":"public class ToDo extends Task {","lastModifiedDate":"2021-08-13"},{"lineNumber":8,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-13"},{"lineNumber":9,"author":{"gitId":"Imranr2"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"Imranr2"},"content":"     * Default constructor for a ToDo.","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"Imranr2"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"Imranr2"},"content":"     * @param name Name of ToDo.","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"Imranr2"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"Imranr2"},"content":"    public ToDo(String name) {","lastModifiedDate":"2021-08-15"},{"lineNumber":15,"author":{"gitId":"Imranr2"},"content":"        super(name);","lastModifiedDate":"2021-08-13"},{"lineNumber":16,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-13"},{"lineNumber":17,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-13"},{"lineNumber":18,"author":{"gitId":"Imranr2"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":19,"author":{"gitId":"Imranr2"},"content":"     * Constructor to be used when loading saved ToDo.","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"Imranr2"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":21,"author":{"gitId":"Imranr2"},"content":"     * @param name Name of ToDo.","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"Imranr2"},"content":"     * @param isDone Indicate whether the ToDo is completed.","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"Imranr2"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":24,"author":{"gitId":"Imranr2"},"content":"    public ToDo(String name, boolean isDone) {","lastModifiedDate":"2021-08-15"},{"lineNumber":25,"author":{"gitId":"Imranr2"},"content":"        super(name, isDone);","lastModifiedDate":"2021-08-14"},{"lineNumber":26,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":27,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":28,"author":{"gitId":"Imranr2"},"content":"    @Override","lastModifiedDate":"2021-08-14"},{"lineNumber":29,"author":{"gitId":"Imranr2"},"content":"    public String toString() {","lastModifiedDate":"2021-08-13"},{"lineNumber":30,"author":{"gitId":"Imranr2"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2021-08-13"},{"lineNumber":31,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-13"},{"lineNumber":32,"author":{"gitId":"Imranr2"},"content":"}","lastModifiedDate":"2021-08-13"}],"authorContributionMap":{"Imranr2":32}},{"path":"src/main/java/lifeline/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Imranr2"},"content":"package lifeline.ui;","lastModifiedDate":"2021-08-15"},{"lineNumber":2,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":3,"author":{"gitId":"Imranr2"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-15"},{"lineNumber":4,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":5,"author":{"gitId":"Imranr2"},"content":"import lifeline.task.Task;","lastModifiedDate":"2021-08-15"},{"lineNumber":6,"author":{"gitId":"Imranr2"},"content":"import lifeline.task.TaskList;","lastModifiedDate":"2021-08-15"},{"lineNumber":7,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":8,"author":{"gitId":"Imranr2"},"content":"/**","lastModifiedDate":"2021-08-21"},{"lineNumber":9,"author":{"gitId":"Imranr2"},"content":" * The class UI handles all information to be displayed to the user.","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"Imranr2"},"content":" */","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"Imranr2"},"content":"public class Ui {","lastModifiedDate":"2021-08-14"},{"lineNumber":12,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"Imranr2"},"content":"    private Scanner scanner;","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":15,"author":{"gitId":"Imranr2"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"Imranr2"},"content":"     * Initialises the scanner object to read input from user.","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"Imranr2"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"Imranr2"},"content":"    public Ui() {","lastModifiedDate":"2021-08-15"},{"lineNumber":19,"author":{"gitId":"Imranr2"},"content":"        this.scanner \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":21,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":22,"author":{"gitId":"Imranr2"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":23,"author":{"gitId":"Imranr2"},"content":"     * Returns the input from the user.","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"Imranr2"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":25,"author":{"gitId":"Imranr2"},"content":"     * @return Input from user.","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"Imranr2"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":27,"author":{"gitId":"Imranr2"},"content":"    public String readCommand() {","lastModifiedDate":"2021-08-14"},{"lineNumber":28,"author":{"gitId":"Imranr2"},"content":"        return scanner.nextLine().trim();","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":30,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":31,"author":{"gitId":"Imranr2"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":32,"author":{"gitId":"Imranr2"},"content":"     * Returns string representation of the list of tasks created by the user.","lastModifiedDate":"2021-08-31"},{"lineNumber":33,"author":{"gitId":"Imranr2"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":34,"author":{"gitId":"Imranr2"},"content":"     * @param taskList Lists of tasks created by user.","lastModifiedDate":"2021-08-31"},{"lineNumber":35,"author":{"gitId":"Imranr2"},"content":"     * @return String representing list of tasks.","lastModifiedDate":"2021-08-31"},{"lineNumber":36,"author":{"gitId":"Imranr2"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":37,"author":{"gitId":"Imranr2"},"content":"    public String showTaskList(TaskList taskList) {","lastModifiedDate":"2021-08-20"},{"lineNumber":38,"author":{"gitId":"Imranr2"},"content":"        StringBuilder stringBuilder \u003d new StringBuilder();","lastModifiedDate":"2021-08-20"},{"lineNumber":39,"author":{"gitId":"Imranr2"},"content":"        if (taskList.getSize() \u003d\u003d 0) {","lastModifiedDate":"2021-08-30"},{"lineNumber":40,"author":{"gitId":"Imranr2"},"content":"            stringBuilder.append(\"You have no remaining tasks.\\n\");","lastModifiedDate":"2021-08-20"},{"lineNumber":41,"author":{"gitId":"Imranr2"},"content":"        } else {","lastModifiedDate":"2021-08-14"},{"lineNumber":42,"author":{"gitId":"Imranr2"},"content":"            int uncompletedTask \u003d 0;","lastModifiedDate":"2021-08-14"},{"lineNumber":43,"author":{"gitId":"Imranr2"},"content":"            stringBuilder.append(\"Here \" + (taskList.getSize() \u003e 1 ? \"are\" : \"is\")","lastModifiedDate":"2021-08-30"},{"lineNumber":44,"author":{"gitId":"Imranr2"},"content":"                    + \" your \" + (taskList.getSize() \u003e 1 ? \"tasks:\" : \"task:\") + \"\\n\");","lastModifiedDate":"2021-08-30"},{"lineNumber":45,"author":{"gitId":"Imranr2"},"content":"            for (int i \u003d 0; i \u003c taskList.getSize(); i++) {","lastModifiedDate":"2021-08-30"},{"lineNumber":46,"author":{"gitId":"Imranr2"},"content":"                Task currTask \u003d taskList.getTask(i);","lastModifiedDate":"2021-08-31"},{"lineNumber":47,"author":{"gitId":"Imranr2"},"content":"                stringBuilder.append((i + 1) + \". \" + currTask + \"\\n\");","lastModifiedDate":"2021-08-20"},{"lineNumber":48,"author":{"gitId":"Imranr2"},"content":"                if (!currTask.isDone()) {","lastModifiedDate":"2021-08-14"},{"lineNumber":49,"author":{"gitId":"Imranr2"},"content":"                    uncompletedTask++;","lastModifiedDate":"2021-08-14"},{"lineNumber":50,"author":{"gitId":"Imranr2"},"content":"                }","lastModifiedDate":"2021-08-14"},{"lineNumber":51,"author":{"gitId":"Imranr2"},"content":"            }","lastModifiedDate":"2021-08-14"},{"lineNumber":52,"author":{"gitId":"Imranr2"},"content":"            stringBuilder.append(\"You have \" + uncompletedTask + \" uncompleted \"","lastModifiedDate":"2021-09-03"},{"lineNumber":53,"author":{"gitId":"Imranr2"},"content":"                    + (uncompletedTask \u003e 1 ? \"tasks\" : \"task\") + \".\\n\");","lastModifiedDate":"2021-09-03"},{"lineNumber":54,"author":{"gitId":"Imranr2"},"content":"        }","lastModifiedDate":"2021-08-14"},{"lineNumber":55,"author":{"gitId":"Imranr2"},"content":"        return stringBuilder.toString();","lastModifiedDate":"2021-08-20"},{"lineNumber":56,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":57,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":58,"author":{"gitId":"Imranr2"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":59,"author":{"gitId":"Imranr2"},"content":"     * Returns all tasks with specified keyword.","lastModifiedDate":"2021-08-31"},{"lineNumber":60,"author":{"gitId":"Imranr2"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":61,"author":{"gitId":"Imranr2"},"content":"     * @param foundTasks List of tasks containing keyword.","lastModifiedDate":"2021-08-31"},{"lineNumber":62,"author":{"gitId":"Imranr2"},"content":"     * @param keyword Keyword used to find tasks.","lastModifiedDate":"2021-08-31"},{"lineNumber":63,"author":{"gitId":"Imranr2"},"content":"     * @return Tasks with specified keyword.","lastModifiedDate":"2021-08-31"},{"lineNumber":64,"author":{"gitId":"Imranr2"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":65,"author":{"gitId":"Imranr2"},"content":"    public String showFoundTasks(TaskList foundTasks, String keyword) {","lastModifiedDate":"2021-08-21"},{"lineNumber":66,"author":{"gitId":"Imranr2"},"content":"        StringBuilder stringBuilder \u003d new StringBuilder();","lastModifiedDate":"2021-08-21"},{"lineNumber":67,"author":{"gitId":"Imranr2"},"content":"        stringBuilder.append((foundTasks.getSize() \u003d\u003d 1 ? \"Task\" : \"Tasks\") + \" with keyword \" + keyword + \":\\n\");","lastModifiedDate":"2021-08-30"},{"lineNumber":68,"author":{"gitId":"Imranr2"},"content":"        for (int i \u003d 0; i \u003c foundTasks.getSize(); i++) {","lastModifiedDate":"2021-08-30"},{"lineNumber":69,"author":{"gitId":"Imranr2"},"content":"            stringBuilder.append(foundTasks.getTask(i) + \"\\n\");","lastModifiedDate":"2021-08-31"},{"lineNumber":70,"author":{"gitId":"Imranr2"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":71,"author":{"gitId":"Imranr2"},"content":"        return stringBuilder.toString();","lastModifiedDate":"2021-08-21"},{"lineNumber":72,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":73,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":74,"author":{"gitId":"Imranr2"},"content":"    /**","lastModifiedDate":"2021-09-04"},{"lineNumber":75,"author":{"gitId":"Imranr2"},"content":"     * Informs user that tasks have been deleted and number of tasks left.","lastModifiedDate":"2021-09-04"},{"lineNumber":76,"author":{"gitId":"Imranr2"},"content":"     *","lastModifiedDate":"2021-09-04"},{"lineNumber":77,"author":{"gitId":"Imranr2"},"content":"     * @param taskList TaskList to inform user how many tasks are left.","lastModifiedDate":"2021-09-04"},{"lineNumber":78,"author":{"gitId":"Imranr2"},"content":"     * @return Information on deleted tasks and number of tasks left.","lastModifiedDate":"2021-09-04"},{"lineNumber":79,"author":{"gitId":"Imranr2"},"content":"     */","lastModifiedDate":"2021-09-04"},{"lineNumber":80,"author":{"gitId":"Imranr2"},"content":"    public String showDeletedTaskMessage(TaskList taskList) {","lastModifiedDate":"2021-09-04"},{"lineNumber":81,"author":{"gitId":"Imranr2"},"content":"        StringBuilder stringBuilder \u003d new StringBuilder();","lastModifiedDate":"2021-09-04"},{"lineNumber":82,"author":{"gitId":"Imranr2"},"content":"        stringBuilder.append(\"I have deleted the tasks. You have \" + taskList.getSize() + \" tasks left\");","lastModifiedDate":"2021-09-04"},{"lineNumber":83,"author":{"gitId":"Imranr2"},"content":"        return stringBuilder.toString();","lastModifiedDate":"2021-09-04"},{"lineNumber":84,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":85,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":86,"author":{"gitId":"Imranr2"},"content":"    /**","lastModifiedDate":"2021-09-04"},{"lineNumber":87,"author":{"gitId":"Imranr2"},"content":"     * Informs user that tasks have been completed and number of uncompleted tasks.","lastModifiedDate":"2021-09-04"},{"lineNumber":88,"author":{"gitId":"Imranr2"},"content":"     *","lastModifiedDate":"2021-09-04"},{"lineNumber":89,"author":{"gitId":"Imranr2"},"content":"     * @param taskList TaskList to inform user how many uncompleted tasks are left","lastModifiedDate":"2021-09-04"},{"lineNumber":90,"author":{"gitId":"Imranr2"},"content":"     * @return Information on completed tasks and number of uncompleted tasks left.","lastModifiedDate":"2021-09-04"},{"lineNumber":91,"author":{"gitId":"Imranr2"},"content":"     */","lastModifiedDate":"2021-09-04"},{"lineNumber":92,"author":{"gitId":"Imranr2"},"content":"    public String showCompletedTaskMessage(TaskList taskList) {","lastModifiedDate":"2021-09-04"},{"lineNumber":93,"author":{"gitId":"Imranr2"},"content":"        StringBuilder stringBuilder \u003d new StringBuilder();","lastModifiedDate":"2021-09-04"},{"lineNumber":94,"author":{"gitId":"Imranr2"},"content":"        stringBuilder.append(\"I have completed the tasks. You have \" + taskList.getNumberOfUncompletedTasks()","lastModifiedDate":"2021-09-04"},{"lineNumber":95,"author":{"gitId":"Imranr2"},"content":"                + \" uncompleted tasks\");","lastModifiedDate":"2021-09-04"},{"lineNumber":96,"author":{"gitId":"Imranr2"},"content":"        return stringBuilder.toString();","lastModifiedDate":"2021-09-04"},{"lineNumber":97,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":98,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":99,"author":{"gitId":"Imranr2"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":100,"author":{"gitId":"Imranr2"},"content":"     * Returns information on added task.","lastModifiedDate":"2021-08-31"},{"lineNumber":101,"author":{"gitId":"Imranr2"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":102,"author":{"gitId":"Imranr2"},"content":"     * @param task Addded task.","lastModifiedDate":"2021-08-31"},{"lineNumber":103,"author":{"gitId":"Imranr2"},"content":"     * @return Information on added task.","lastModifiedDate":"2021-08-31"},{"lineNumber":104,"author":{"gitId":"Imranr2"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":105,"author":{"gitId":"Imranr2"},"content":"    public String showAddedTask(Task task) {","lastModifiedDate":"2021-08-20"},{"lineNumber":106,"author":{"gitId":"Imranr2"},"content":"        StringBuilder stringBuilder \u003d new StringBuilder();","lastModifiedDate":"2021-08-20"},{"lineNumber":107,"author":{"gitId":"Imranr2"},"content":"        stringBuilder.append(\"I have added this task for you:\\n\" + task + \"\\n\");","lastModifiedDate":"2021-08-20"},{"lineNumber":108,"author":{"gitId":"Imranr2"},"content":"        return stringBuilder.toString();","lastModifiedDate":"2021-08-20"},{"lineNumber":109,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":110,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":111,"author":{"gitId":"Imranr2"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":112,"author":{"gitId":"Imranr2"},"content":"     * Tells user what commands are available and what the commmands do.","lastModifiedDate":"2021-08-31"},{"lineNumber":113,"author":{"gitId":"Imranr2"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":114,"author":{"gitId":"Imranr2"},"content":"     * @return Message to tell user what commands are available and what the commands do.","lastModifiedDate":"2021-08-31"},{"lineNumber":115,"author":{"gitId":"Imranr2"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":116,"author":{"gitId":"Imranr2"},"content":"    public String showHelpMessage() {","lastModifiedDate":"2021-08-30"},{"lineNumber":117,"author":{"gitId":"Imranr2"},"content":"        return \"Date should be specified as \u003cdd/MM/yy\u003e and time should be specified as \u003cHHmm\u003e\\n\"","lastModifiedDate":"2021-09-04"},{"lineNumber":118,"author":{"gitId":"Imranr2"},"content":"                + \"bye: Exits the program.\\n\"","lastModifiedDate":"2021-09-04"},{"lineNumber":119,"author":{"gitId":"Imranr2"},"content":"                + \"list: Lists your tasks.\\n\"","lastModifiedDate":"2021-08-30"},{"lineNumber":120,"author":{"gitId":"Imranr2"},"content":"                + \"done \u003cINDEX\u003e: Marks task at index as done. You can specify multiple indices separated by commas.\\n\"","lastModifiedDate":"2021-09-04"},{"lineNumber":121,"author":{"gitId":"Imranr2"},"content":"                + \"delete \u003cINDEX\u003e: Deletes task at index. You can specify multiple indices separated by commas.\\n\"","lastModifiedDate":"2021-09-04"},{"lineNumber":122,"author":{"gitId":"Imranr2"},"content":"                + \"find \u003cKEYWORD\u003e: Find all tasks containing keyword,\\n\"","lastModifiedDate":"2021-08-30"},{"lineNumber":123,"author":{"gitId":"Imranr2"},"content":"                + \"deadline \u003cDESC\u003e /by \u003cdate\u003e \u003ctime\u003e: Creates Deadline.\\n\"","lastModifiedDate":"2021-09-04"},{"lineNumber":124,"author":{"gitId":"Imranr2"},"content":"                + \"event \u003cDESC\u003e /at \u003cdate\u003e \u003cstartTime\u003e \u003cendTime\u003e: Creates Event.\\n\"","lastModifiedDate":"2021-09-04"},{"lineNumber":125,"author":{"gitId":"Imranr2"},"content":"                + \"todo \u003cDESC\u003e: Creates ToDo.\\n\"","lastModifiedDate":"2021-08-30"},{"lineNumber":126,"author":{"gitId":"Imranr2"},"content":"                + \"help: Shows this message.\\n\";","lastModifiedDate":"2021-08-30"},{"lineNumber":127,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":128,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":129,"author":{"gitId":"Imranr2"},"content":"    /**","lastModifiedDate":"2021-09-04"},{"lineNumber":130,"author":{"gitId":"Imranr2"},"content":"     * Displays available alias to user.","lastModifiedDate":"2021-09-04"},{"lineNumber":131,"author":{"gitId":"Imranr2"},"content":"     *","lastModifiedDate":"2021-09-04"},{"lineNumber":132,"author":{"gitId":"Imranr2"},"content":"     * @return Aliases to user","lastModifiedDate":"2021-09-04"},{"lineNumber":133,"author":{"gitId":"Imranr2"},"content":"     */","lastModifiedDate":"2021-09-04"},{"lineNumber":134,"author":{"gitId":"Imranr2"},"content":"    public String showAlias() {","lastModifiedDate":"2021-09-04"},{"lineNumber":135,"author":{"gitId":"Imranr2"},"content":"        return \"alias - a, al\\n\"","lastModifiedDate":"2021-09-04"},{"lineNumber":136,"author":{"gitId":"Imranr2"},"content":"                + \"bye - b, bb, goodbye\\n\"","lastModifiedDate":"2021-09-04"},{"lineNumber":137,"author":{"gitId":"Imranr2"},"content":"                + \"deadline - d, dl\\n\"","lastModifiedDate":"2021-09-04"},{"lineNumber":138,"author":{"gitId":"Imranr2"},"content":"                + \"delete - del\\n\"","lastModifiedDate":"2021-09-04"},{"lineNumber":139,"author":{"gitId":"Imranr2"},"content":"                + \"done - complete\\n\"","lastModifiedDate":"2021-09-04"},{"lineNumber":140,"author":{"gitId":"Imranr2"},"content":"                + \"event - e\\n\"","lastModifiedDate":"2021-09-04"},{"lineNumber":141,"author":{"gitId":"Imranr2"},"content":"                + \"find - f\\n\"","lastModifiedDate":"2021-09-04"},{"lineNumber":142,"author":{"gitId":"Imranr2"},"content":"                + \"help - h\\n\"","lastModifiedDate":"2021-09-04"},{"lineNumber":143,"author":{"gitId":"Imranr2"},"content":"                + \"list - l, ls\\n\"","lastModifiedDate":"2021-09-04"},{"lineNumber":144,"author":{"gitId":"Imranr2"},"content":"                + \"todo - t, td\\n\";","lastModifiedDate":"2021-09-04"},{"lineNumber":145,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":146,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":147,"author":{"gitId":"Imranr2"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":148,"author":{"gitId":"Imranr2"},"content":"     * Returns string representation of error message.","lastModifiedDate":"2021-08-31"},{"lineNumber":149,"author":{"gitId":"Imranr2"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":150,"author":{"gitId":"Imranr2"},"content":"     * @param errorMessage Error to be displayed to user.","lastModifiedDate":"2021-08-31"},{"lineNumber":151,"author":{"gitId":"Imranr2"},"content":"     * @return Error message.","lastModifiedDate":"2021-08-31"},{"lineNumber":152,"author":{"gitId":"Imranr2"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":153,"author":{"gitId":"Imranr2"},"content":"    public String showError(String errorMessage) {","lastModifiedDate":"2021-08-20"},{"lineNumber":154,"author":{"gitId":"Imranr2"},"content":"        StringBuilder stringBuilder \u003d new StringBuilder();","lastModifiedDate":"2021-08-20"},{"lineNumber":155,"author":{"gitId":"Imranr2"},"content":"        stringBuilder.append(errorMessage + \"\\n\");","lastModifiedDate":"2021-08-20"},{"lineNumber":156,"author":{"gitId":"Imranr2"},"content":"        return stringBuilder.toString();","lastModifiedDate":"2021-08-20"},{"lineNumber":157,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":158,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":159,"author":{"gitId":"Imranr2"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":160,"author":{"gitId":"Imranr2"},"content":"     * Returns welcome message when user starts the program.","lastModifiedDate":"2021-08-31"},{"lineNumber":161,"author":{"gitId":"Imranr2"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":162,"author":{"gitId":"Imranr2"},"content":"     * @return Welcome message.","lastModifiedDate":"2021-08-31"},{"lineNumber":163,"author":{"gitId":"Imranr2"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":164,"author":{"gitId":"Imranr2"},"content":"    public String consoleGreet() {","lastModifiedDate":"2021-08-28"},{"lineNumber":165,"author":{"gitId":"Imranr2"},"content":"        String lifeline \u003d \" _      _____ ______ ______ _      _____ _   _ ______\\n\"","lastModifiedDate":"2021-08-14"},{"lineNumber":166,"author":{"gitId":"Imranr2"},"content":"                + \"| |    |_   _|  ____|  ____| |    |_   _| \\\\ | |  ____|\\n\"","lastModifiedDate":"2021-08-14"},{"lineNumber":167,"author":{"gitId":"Imranr2"},"content":"                + \"| |      | | | |__  | |__  | |      | | |  \\\\| | |__\\n\"","lastModifiedDate":"2021-08-14"},{"lineNumber":168,"author":{"gitId":"Imranr2"},"content":"                + \"| |      | | |  __| |  __| | |      | | | . ` |  __|\\n\"","lastModifiedDate":"2021-08-14"},{"lineNumber":169,"author":{"gitId":"Imranr2"},"content":"                + \"| |____ _| |_| |    | |____| |____ _| |_| |\\\\  | |____\\n\"","lastModifiedDate":"2021-08-14"},{"lineNumber":170,"author":{"gitId":"Imranr2"},"content":"                + \"|______|_____|_|    |______|______|_____|_| \\\\_|______|\\n\";","lastModifiedDate":"2021-08-14"},{"lineNumber":171,"author":{"gitId":"Imranr2"},"content":"        StringBuilder stringBuilder \u003d new StringBuilder();","lastModifiedDate":"2021-08-20"},{"lineNumber":172,"author":{"gitId":"Imranr2"},"content":"        stringBuilder.append(\"Hello! I am\\n\" + lifeline);","lastModifiedDate":"2021-08-20"},{"lineNumber":173,"author":{"gitId":"Imranr2"},"content":"        stringBuilder.append(\"What can I help you with today?\\n\");","lastModifiedDate":"2021-08-20"},{"lineNumber":174,"author":{"gitId":"Imranr2"},"content":"        return stringBuilder.toString();","lastModifiedDate":"2021-08-20"},{"lineNumber":175,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":176,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":177,"author":{"gitId":"Imranr2"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":178,"author":{"gitId":"Imranr2"},"content":"     * Returns greeting message for GUI when user starts program.","lastModifiedDate":"2021-08-31"},{"lineNumber":179,"author":{"gitId":"Imranr2"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":180,"author":{"gitId":"Imranr2"},"content":"     * @return Greeting message.","lastModifiedDate":"2021-08-31"},{"lineNumber":181,"author":{"gitId":"Imranr2"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":182,"author":{"gitId":"Imranr2"},"content":"    public String guiGreet() {","lastModifiedDate":"2021-08-28"},{"lineNumber":183,"author":{"gitId":"Imranr2"},"content":"        return \"Hello I am Lifeline. What can I help you with today?\";","lastModifiedDate":"2021-08-28"},{"lineNumber":184,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":185,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":186,"author":{"gitId":"Imranr2"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":187,"author":{"gitId":"Imranr2"},"content":"     * Returns goodbye message when user exits the program.","lastModifiedDate":"2021-08-31"},{"lineNumber":188,"author":{"gitId":"Imranr2"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":189,"author":{"gitId":"Imranr2"},"content":"     * @return Goodbye message.","lastModifiedDate":"2021-08-31"},{"lineNumber":190,"author":{"gitId":"Imranr2"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":191,"author":{"gitId":"Imranr2"},"content":"    public String exit() {","lastModifiedDate":"2021-08-20"},{"lineNumber":192,"author":{"gitId":"Imranr2"},"content":"        StringBuilder stringBuilder \u003d new StringBuilder();","lastModifiedDate":"2021-08-20"},{"lineNumber":193,"author":{"gitId":"Imranr2"},"content":"        stringBuilder.append(\"Goodbye! Thanks for chatting with me!\\n\");","lastModifiedDate":"2021-08-20"},{"lineNumber":194,"author":{"gitId":"Imranr2"},"content":"        return stringBuilder.toString();","lastModifiedDate":"2021-08-20"},{"lineNumber":195,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":196,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":197,"author":{"gitId":"Imranr2"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":198,"author":{"gitId":"Imranr2"},"content":"     * Displays message to the user.","lastModifiedDate":"2021-08-31"},{"lineNumber":199,"author":{"gitId":"Imranr2"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":200,"author":{"gitId":"Imranr2"},"content":"     * @param response Message to be displayed to user.","lastModifiedDate":"2021-08-31"},{"lineNumber":201,"author":{"gitId":"Imranr2"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":202,"author":{"gitId":"Imranr2"},"content":"    public void printToConsole(String response) {","lastModifiedDate":"2021-08-20"},{"lineNumber":203,"author":{"gitId":"Imranr2"},"content":"        System.out.println(response);","lastModifiedDate":"2021-08-20"},{"lineNumber":204,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":205,"author":{"gitId":"Imranr2"},"content":"}","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"Imranr2":205}},{"path":"src/main/java/lifeline/util/ErrorString.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Imranr2"},"content":"package lifeline.util;","lastModifiedDate":"2021-09-03"},{"lineNumber":2,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":3,"author":{"gitId":"Imranr2"},"content":"public class ErrorString {","lastModifiedDate":"2021-09-03"},{"lineNumber":4,"author":{"gitId":"Imranr2"},"content":"    public static final String ERROR_DEADLINE_INCORRECT_FORMAT \u003d \"Deadline is not of the correct format! \"","lastModifiedDate":"2021-09-03"},{"lineNumber":5,"author":{"gitId":"Imranr2"},"content":"            + \"Please use deadline \u003cname\u003e /by \u003cdd/MM/yy HHmm\u003e\";","lastModifiedDate":"2021-09-03"},{"lineNumber":6,"author":{"gitId":"Imranr2"},"content":"    public static final String ERROR_EVENT_INCORRECT_FORMAT \u003d \"Event date/time not in proper format! Please use event\"","lastModifiedDate":"2021-09-03"},{"lineNumber":7,"author":{"gitId":"Imranr2"},"content":"            + \" \u003cname\u003e /at \u003cdd/MM/yy\u003e \u003cHHmm\u003e-\u003cHHmm\u003e\";","lastModifiedDate":"2021-09-03"},{"lineNumber":8,"author":{"gitId":"Imranr2"},"content":"    public static final String ERROR_DONE_MISSING_INDEX \u003d \"You did not specify an integer! Please use done \u003cnumber\u003e\";","lastModifiedDate":"2021-09-03"},{"lineNumber":9,"author":{"gitId":"Imranr2"},"content":"    public static final String ERROR_DELETE_MISSING_INDEX \u003d \"You did not specify an integer! Please use delete \"","lastModifiedDate":"2021-09-03"},{"lineNumber":10,"author":{"gitId":"Imranr2"},"content":"            + \"\u003cnumber\u003e\";","lastModifiedDate":"2021-09-03"},{"lineNumber":11,"author":{"gitId":"Imranr2"},"content":"    public static final String ERROR_TODO_MISSING_DETAILS \u003d \"Details of todo cannot be blank!\";","lastModifiedDate":"2021-09-03"},{"lineNumber":12,"author":{"gitId":"Imranr2"},"content":"    public static final String ERROR_DEADLINE_MISSING_DETAILS \u003d \"Details of deadline cannot be blank!\";","lastModifiedDate":"2021-09-03"},{"lineNumber":13,"author":{"gitId":"Imranr2"},"content":"    public static final String ERROR_EVENT_MISSING_DETAILS \u003d \"Details of event cannot be blank!\";","lastModifiedDate":"2021-09-03"},{"lineNumber":14,"author":{"gitId":"Imranr2"},"content":"    public static final String ERROR_FIND_MISSING_KEYWORD \u003d \"Keyword was not provided! Please use find \u003ckeyword\u003e\";","lastModifiedDate":"2021-09-03"},{"lineNumber":15,"author":{"gitId":"Imranr2"},"content":"    public static final String ERROR_INVALID_COMMAND \u003d \"I am sorry! I don\u0027t know what that means!\";","lastModifiedDate":"2021-09-03"},{"lineNumber":16,"author":{"gitId":"Imranr2"},"content":"    public static final String ERROR_INDEX_OUT_OF_BOUNDS \u003d \"Index is out of bounds!\";","lastModifiedDate":"2021-09-03"},{"lineNumber":17,"author":{"gitId":"Imranr2"},"content":"    public static final String ERROR_NON_INTEGER_INDEX \u003d \"Index is not an integer!\";","lastModifiedDate":"2021-09-03"},{"lineNumber":18,"author":{"gitId":"Imranr2"},"content":"    public static final String ERROR_NO_TASKS_FOUND \u003d \"No tasks found with the given keyword\";","lastModifiedDate":"2021-09-03"},{"lineNumber":19,"author":{"gitId":"Imranr2"},"content":"    public static final String ERROR_TASK_ALREADY_DONE \u003d \"Task is already done!\";","lastModifiedDate":"2021-09-03"},{"lineNumber":20,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":21,"author":{"gitId":"Imranr2"},"content":"    public static final String ERROR_UNABLE_TO_SAVE_TASK \u003d \"Unable to save tasks at the moment\";","lastModifiedDate":"2021-09-03"},{"lineNumber":22,"author":{"gitId":"Imranr2"},"content":"    public static final String ERROR_UNABLE_TO_FIND_SAVED_TASKS \u003d \"Unable to find your saved tasks!\";","lastModifiedDate":"2021-09-03"},{"lineNumber":23,"author":{"gitId":"Imranr2"},"content":"}","lastModifiedDate":"2021-09-03"}],"authorContributionMap":{"Imranr2":23}},{"path":"src/main/java/lifeline/util/QuadFunction.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Imranr2"},"content":"package lifeline.util;","lastModifiedDate":"2021-08-15"},{"lineNumber":2,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":3,"author":{"gitId":"Imranr2"},"content":"import lifeline.exception.LifelineException;","lastModifiedDate":"2021-08-15"},{"lineNumber":4,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":5,"author":{"gitId":"Imranr2"},"content":"@FunctionalInterface","lastModifiedDate":"2021-08-15"},{"lineNumber":6,"author":{"gitId":"Imranr2"},"content":"public interface QuadFunction\u003cP, Q, R, S\u003e {","lastModifiedDate":"2021-08-15"},{"lineNumber":7,"author":{"gitId":"Imranr2"},"content":"    public String apply (P p, Q q, R r, S s) throws LifelineException;","lastModifiedDate":"2021-08-20"},{"lineNumber":8,"author":{"gitId":"Imranr2"},"content":"}","lastModifiedDate":"2021-08-15"}],"authorContributionMap":{"Imranr2":8}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Imranr2"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-08-27"},{"lineNumber":2,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":3,"author":{"gitId":"Imranr2"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2021-08-27"},{"lineNumber":4,"author":{"gitId":"Imranr2"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-08-27"},{"lineNumber":5,"author":{"gitId":"Imranr2"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2021-08-27"},{"lineNumber":6,"author":{"gitId":"Imranr2"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-08-27"},{"lineNumber":7,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":8,"author":{"gitId":"Imranr2"},"content":"\u003cfx:root alignment\u003d\"CENTER_RIGHT\" maxHeight\u003d\"Infinity\" maxWidth\u003d\"Infinity\" minWidth\u003d\"-Infinity\" prefWidth\u003d\"400.0\"","lastModifiedDate":"2021-08-27"},{"lineNumber":9,"author":{"gitId":"Imranr2"},"content":"         type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-08-27"},{"lineNumber":10,"author":{"gitId":"Imranr2"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2021-08-27"},{"lineNumber":11,"author":{"gitId":"Imranr2"},"content":"        \u003cHBox fx:id\u003d\"speechBubble\" alignment\u003d\"CENTER_RIGHT\" fillHeight\u003d\"false\" styleClass\u003d\"speech-bubble\"\u003e","lastModifiedDate":"2021-08-27"},{"lineNumber":12,"author":{"gitId":"Imranr2"},"content":"            \u003cchildren\u003e","lastModifiedDate":"2021-08-27"},{"lineNumber":13,"author":{"gitId":"Imranr2"},"content":"                \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-08-27"},{"lineNumber":14,"author":{"gitId":"Imranr2"},"content":"                    \u003cpadding\u003e","lastModifiedDate":"2021-08-27"},{"lineNumber":15,"author":{"gitId":"Imranr2"},"content":"                        \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e","lastModifiedDate":"2021-08-27"},{"lineNumber":16,"author":{"gitId":"Imranr2"},"content":"                    \u003c/padding\u003e\u003c/Label\u003e","lastModifiedDate":"2021-08-27"},{"lineNumber":17,"author":{"gitId":"Imranr2"},"content":"            \u003c/children\u003e","lastModifiedDate":"2021-08-27"},{"lineNumber":18,"author":{"gitId":"Imranr2"},"content":"            \u003cpadding\u003e","lastModifiedDate":"2021-08-27"},{"lineNumber":19,"author":{"gitId":"Imranr2"},"content":"                \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e","lastModifiedDate":"2021-08-27"},{"lineNumber":20,"author":{"gitId":"Imranr2"},"content":"            \u003c/padding\u003e","lastModifiedDate":"2021-08-27"},{"lineNumber":21,"author":{"gitId":"Imranr2"},"content":"            \u003cHBox.margin\u003e","lastModifiedDate":"2021-08-27"},{"lineNumber":22,"author":{"gitId":"Imranr2"},"content":"                \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e","lastModifiedDate":"2021-08-27"},{"lineNumber":23,"author":{"gitId":"Imranr2"},"content":"            \u003c/HBox.margin\u003e","lastModifiedDate":"2021-08-27"},{"lineNumber":24,"author":{"gitId":"Imranr2"},"content":"        \u003c/HBox\u003e","lastModifiedDate":"2021-08-27"},{"lineNumber":25,"author":{"gitId":"Imranr2"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"50.0\" fitWidth\u003d\"50.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e","lastModifiedDate":"2021-08-27"},{"lineNumber":26,"author":{"gitId":"Imranr2"},"content":"            \u003cHBox.margin\u003e","lastModifiedDate":"2021-08-27"},{"lineNumber":27,"author":{"gitId":"Imranr2"},"content":"                \u003cInsets /\u003e","lastModifiedDate":"2021-08-27"},{"lineNumber":28,"author":{"gitId":"Imranr2"},"content":"            \u003c/HBox.margin\u003e\u003c/ImageView\u003e","lastModifiedDate":"2021-08-27"},{"lineNumber":29,"author":{"gitId":"Imranr2"},"content":"    \u003c/children\u003e","lastModifiedDate":"2021-08-27"},{"lineNumber":30,"author":{"gitId":"Imranr2"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2021-08-27"},{"lineNumber":31,"author":{"gitId":"Imranr2"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2021-08-27"},{"lineNumber":32,"author":{"gitId":"Imranr2"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2021-08-27"},{"lineNumber":33,"author":{"gitId":"Imranr2"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2021-08-27"}],"authorContributionMap":{"Imranr2":33}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Imranr2"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-08-27"},{"lineNumber":2,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":3,"author":{"gitId":"Imranr2"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2021-08-27"},{"lineNumber":4,"author":{"gitId":"Imranr2"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2021-08-27"},{"lineNumber":5,"author":{"gitId":"Imranr2"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2021-08-27"},{"lineNumber":6,"author":{"gitId":"Imranr2"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2021-08-27"},{"lineNumber":7,"author":{"gitId":"Imranr2"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-08-27"},{"lineNumber":8,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":9,"author":{"gitId":"Imranr2"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\"","lastModifiedDate":"2021-08-27"},{"lineNumber":10,"author":{"gitId":"Imranr2"},"content":"            prefWidth\u003d\"410.0\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"","lastModifiedDate":"2021-08-27"},{"lineNumber":11,"author":{"gitId":"Imranr2"},"content":"            fx:controller\u003d\"lifeline.controller.MainWindow\"\u003e","lastModifiedDate":"2021-08-27"},{"lineNumber":12,"author":{"gitId":"Imranr2"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2021-08-27"},{"lineNumber":13,"author":{"gitId":"Imranr2"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"333.0\"","lastModifiedDate":"2021-08-27"},{"lineNumber":14,"author":{"gitId":"Imranr2"},"content":"                   AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2021-08-27"},{"lineNumber":15,"author":{"gitId":"Imranr2"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"334.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\"","lastModifiedDate":"2021-08-27"},{"lineNumber":16,"author":{"gitId":"Imranr2"},"content":"                onAction\u003d\"#handleUserInput\"  prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2021-08-27"},{"lineNumber":17,"author":{"gitId":"Imranr2"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"410.0\"","lastModifiedDate":"2021-08-27"},{"lineNumber":18,"author":{"gitId":"Imranr2"},"content":"                    vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2021-08-27"},{"lineNumber":19,"author":{"gitId":"Imranr2"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2021-08-27"},{"lineNumber":20,"author":{"gitId":"Imranr2"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e","lastModifiedDate":"2021-08-27"},{"lineNumber":21,"author":{"gitId":"Imranr2"},"content":"            \u003c/content\u003e","lastModifiedDate":"2021-08-27"},{"lineNumber":22,"author":{"gitId":"Imranr2"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2021-08-27"},{"lineNumber":23,"author":{"gitId":"Imranr2"},"content":"    \u003c/children\u003e","lastModifiedDate":"2021-08-27"},{"lineNumber":24,"author":{"gitId":"Imranr2"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2021-08-27"}],"authorContributionMap":{"Imranr2":24}},{"path":"src/test/java/lifeline/command/CommandHandlerTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Imranr2"},"content":"package lifeline.command;","lastModifiedDate":"2021-08-20"},{"lineNumber":2,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":3,"author":{"gitId":"Imranr2"},"content":"import static lifeline.util.ErrorString.ERROR_DEADLINE_INCORRECT_FORMAT;","lastModifiedDate":"2021-09-03"},{"lineNumber":4,"author":{"gitId":"Imranr2"},"content":"import static lifeline.util.ErrorString.ERROR_DEADLINE_MISSING_DETAILS;","lastModifiedDate":"2021-09-03"},{"lineNumber":5,"author":{"gitId":"Imranr2"},"content":"import static lifeline.util.ErrorString.ERROR_DELETE_MISSING_INDEX;","lastModifiedDate":"2021-09-03"},{"lineNumber":6,"author":{"gitId":"Imranr2"},"content":"import static lifeline.util.ErrorString.ERROR_DONE_MISSING_INDEX;","lastModifiedDate":"2021-09-03"},{"lineNumber":7,"author":{"gitId":"Imranr2"},"content":"import static lifeline.util.ErrorString.ERROR_EVENT_INCORRECT_FORMAT;","lastModifiedDate":"2021-09-03"},{"lineNumber":8,"author":{"gitId":"Imranr2"},"content":"import static lifeline.util.ErrorString.ERROR_EVENT_MISSING_DETAILS;","lastModifiedDate":"2021-09-03"},{"lineNumber":9,"author":{"gitId":"Imranr2"},"content":"import static lifeline.util.ErrorString.ERROR_FIND_MISSING_KEYWORD;","lastModifiedDate":"2021-09-03"},{"lineNumber":10,"author":{"gitId":"Imranr2"},"content":"import static lifeline.util.ErrorString.ERROR_INDEX_OUT_OF_BOUNDS;","lastModifiedDate":"2021-09-03"},{"lineNumber":11,"author":{"gitId":"Imranr2"},"content":"import static lifeline.util.ErrorString.ERROR_NON_INTEGER_INDEX;","lastModifiedDate":"2021-09-03"},{"lineNumber":12,"author":{"gitId":"Imranr2"},"content":"import static lifeline.util.ErrorString.ERROR_NO_TASKS_FOUND;","lastModifiedDate":"2021-09-03"},{"lineNumber":13,"author":{"gitId":"Imranr2"},"content":"import static lifeline.util.ErrorString.ERROR_TODO_MISSING_DETAILS;","lastModifiedDate":"2021-09-03"},{"lineNumber":14,"author":{"gitId":"Imranr2"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-20"},{"lineNumber":15,"author":{"gitId":"Imranr2"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-08-20"},{"lineNumber":16,"author":{"gitId":"Imranr2"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2021-08-20"},{"lineNumber":17,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":18,"author":{"gitId":"Imranr2"},"content":"import java.io.File;","lastModifiedDate":"2021-08-20"},{"lineNumber":19,"author":{"gitId":"Imranr2"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-20"},{"lineNumber":20,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":21,"author":{"gitId":"Imranr2"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2021-08-20"},{"lineNumber":22,"author":{"gitId":"Imranr2"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-20"},{"lineNumber":23,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":24,"author":{"gitId":"Imranr2"},"content":"import lifeline.exception.LifelineException;","lastModifiedDate":"2021-08-20"},{"lineNumber":25,"author":{"gitId":"Imranr2"},"content":"import lifeline.storage.Storage;","lastModifiedDate":"2021-08-20"},{"lineNumber":26,"author":{"gitId":"Imranr2"},"content":"import lifeline.task.Task;","lastModifiedDate":"2021-08-20"},{"lineNumber":27,"author":{"gitId":"Imranr2"},"content":"import lifeline.task.TaskList;","lastModifiedDate":"2021-08-20"},{"lineNumber":28,"author":{"gitId":"Imranr2"},"content":"import lifeline.task.ToDo;","lastModifiedDate":"2021-08-20"},{"lineNumber":29,"author":{"gitId":"Imranr2"},"content":"import lifeline.ui.Ui;","lastModifiedDate":"2021-08-20"},{"lineNumber":30,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":31,"author":{"gitId":"Imranr2"},"content":"public class CommandHandlerTest {","lastModifiedDate":"2021-08-20"},{"lineNumber":32,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":33,"author":{"gitId":"Imranr2"},"content":"    @Test","lastModifiedDate":"2021-08-20"},{"lineNumber":34,"author":{"gitId":"Imranr2"},"content":"    public void handleToDoCommand_missingName_exceptionThrown() {","lastModifiedDate":"2021-08-20"},{"lineNumber":35,"author":{"gitId":"Imranr2"},"content":"        try {","lastModifiedDate":"2021-08-20"},{"lineNumber":36,"author":{"gitId":"Imranr2"},"content":"            Storage storage \u003d new Storage(\"test.json\");","lastModifiedDate":"2021-08-20"},{"lineNumber":37,"author":{"gitId":"Imranr2"},"content":"            TaskList taskList \u003d new TaskList(new ArrayList\u003cTask\u003e());","lastModifiedDate":"2021-08-20"},{"lineNumber":38,"author":{"gitId":"Imranr2"},"content":"            Ui ui \u003d new Ui();","lastModifiedDate":"2021-08-20"},{"lineNumber":39,"author":{"gitId":"Imranr2"},"content":"            Command.TODO.getExecute().apply(\"todo\", storage, taskList, ui);","lastModifiedDate":"2021-08-20"},{"lineNumber":40,"author":{"gitId":"Imranr2"},"content":"            fail();","lastModifiedDate":"2021-08-20"},{"lineNumber":41,"author":{"gitId":"Imranr2"},"content":"        } catch (LifelineException e) {","lastModifiedDate":"2021-08-20"},{"lineNumber":42,"author":{"gitId":"Imranr2"},"content":"            assertEquals(ERROR_TODO_MISSING_DETAILS, e.getMessage());","lastModifiedDate":"2021-09-03"},{"lineNumber":43,"author":{"gitId":"Imranr2"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":44,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":45,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":46,"author":{"gitId":"Imranr2"},"content":"    @Test","lastModifiedDate":"2021-08-20"},{"lineNumber":47,"author":{"gitId":"Imranr2"},"content":"    public void handleToDoCommand_completeCommand_success() throws LifelineException {","lastModifiedDate":"2021-08-20"},{"lineNumber":48,"author":{"gitId":"Imranr2"},"content":"        Storage storage \u003d new Storage(\"test.json\");","lastModifiedDate":"2021-08-20"},{"lineNumber":49,"author":{"gitId":"Imranr2"},"content":"        TaskList taskList \u003d new TaskList(new ArrayList\u003cTask\u003e());","lastModifiedDate":"2021-08-20"},{"lineNumber":50,"author":{"gitId":"Imranr2"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2021-08-20"},{"lineNumber":51,"author":{"gitId":"Imranr2"},"content":"        Command.TODO.getExecute().apply(\"todo read book\", storage, taskList, ui);","lastModifiedDate":"2021-08-20"},{"lineNumber":52,"author":{"gitId":"Imranr2"},"content":"        assertEquals(\"[T][ ] read book\", taskList.getTask(0).toString());","lastModifiedDate":"2021-08-31"},{"lineNumber":53,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":54,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":55,"author":{"gitId":"Imranr2"},"content":"    @Test","lastModifiedDate":"2021-08-20"},{"lineNumber":56,"author":{"gitId":"Imranr2"},"content":"    public void handleEventCommand_missingNameDateAndTime_exceptionThrown() {","lastModifiedDate":"2021-08-20"},{"lineNumber":57,"author":{"gitId":"Imranr2"},"content":"        try {","lastModifiedDate":"2021-08-20"},{"lineNumber":58,"author":{"gitId":"Imranr2"},"content":"            Storage storage \u003d new Storage(\"test.json\");","lastModifiedDate":"2021-08-20"},{"lineNumber":59,"author":{"gitId":"Imranr2"},"content":"            TaskList taskList \u003d new TaskList(new ArrayList\u003cTask\u003e());","lastModifiedDate":"2021-08-20"},{"lineNumber":60,"author":{"gitId":"Imranr2"},"content":"            Ui ui \u003d new Ui();","lastModifiedDate":"2021-08-20"},{"lineNumber":61,"author":{"gitId":"Imranr2"},"content":"            Command.EVENT.getExecute().apply(\"event\", storage, taskList, ui);","lastModifiedDate":"2021-08-20"},{"lineNumber":62,"author":{"gitId":"Imranr2"},"content":"            fail();","lastModifiedDate":"2021-08-20"},{"lineNumber":63,"author":{"gitId":"Imranr2"},"content":"        } catch (LifelineException e) {","lastModifiedDate":"2021-08-20"},{"lineNumber":64,"author":{"gitId":"Imranr2"},"content":"            assertEquals(ERROR_EVENT_MISSING_DETAILS, e.getMessage());","lastModifiedDate":"2021-09-03"},{"lineNumber":65,"author":{"gitId":"Imranr2"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":66,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":67,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":68,"author":{"gitId":"Imranr2"},"content":"    @Test","lastModifiedDate":"2021-08-20"},{"lineNumber":69,"author":{"gitId":"Imranr2"},"content":"    public void handleEventCommand_missingDateAndTime_exceptionThrown() {","lastModifiedDate":"2021-08-20"},{"lineNumber":70,"author":{"gitId":"Imranr2"},"content":"        try {","lastModifiedDate":"2021-08-20"},{"lineNumber":71,"author":{"gitId":"Imranr2"},"content":"            Storage storage \u003d new Storage(\"test.json\");","lastModifiedDate":"2021-08-20"},{"lineNumber":72,"author":{"gitId":"Imranr2"},"content":"            TaskList taskList \u003d new TaskList(new ArrayList\u003cTask\u003e());","lastModifiedDate":"2021-08-20"},{"lineNumber":73,"author":{"gitId":"Imranr2"},"content":"            Ui ui \u003d new Ui();","lastModifiedDate":"2021-08-20"},{"lineNumber":74,"author":{"gitId":"Imranr2"},"content":"            Command.EVENT.getExecute().apply(\"event wedding /at\", storage, taskList, ui);","lastModifiedDate":"2021-08-20"},{"lineNumber":75,"author":{"gitId":"Imranr2"},"content":"            fail();","lastModifiedDate":"2021-08-20"},{"lineNumber":76,"author":{"gitId":"Imranr2"},"content":"        } catch (LifelineException e) {","lastModifiedDate":"2021-08-20"},{"lineNumber":77,"author":{"gitId":"Imranr2"},"content":"            assertEquals(ERROR_EVENT_INCORRECT_FORMAT, e.getMessage());","lastModifiedDate":"2021-09-03"},{"lineNumber":78,"author":{"gitId":"Imranr2"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":79,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":80,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":81,"author":{"gitId":"Imranr2"},"content":"    @Test","lastModifiedDate":"2021-08-20"},{"lineNumber":82,"author":{"gitId":"Imranr2"},"content":"    public void handleEventCommand_missingTime_exceptionThrown() {","lastModifiedDate":"2021-08-20"},{"lineNumber":83,"author":{"gitId":"Imranr2"},"content":"        try {","lastModifiedDate":"2021-08-20"},{"lineNumber":84,"author":{"gitId":"Imranr2"},"content":"            Storage storage \u003d new Storage(\"test.json\");","lastModifiedDate":"2021-08-20"},{"lineNumber":85,"author":{"gitId":"Imranr2"},"content":"            TaskList taskList \u003d new TaskList(new ArrayList\u003cTask\u003e());","lastModifiedDate":"2021-08-20"},{"lineNumber":86,"author":{"gitId":"Imranr2"},"content":"            Ui ui \u003d new Ui();","lastModifiedDate":"2021-08-20"},{"lineNumber":87,"author":{"gitId":"Imranr2"},"content":"            Command.EVENT.getExecute().apply(\"event wedding /at 04/03/21\", storage, taskList, ui);","lastModifiedDate":"2021-08-20"},{"lineNumber":88,"author":{"gitId":"Imranr2"},"content":"            fail();","lastModifiedDate":"2021-08-20"},{"lineNumber":89,"author":{"gitId":"Imranr2"},"content":"        } catch (LifelineException e) {","lastModifiedDate":"2021-08-20"},{"lineNumber":90,"author":{"gitId":"Imranr2"},"content":"            assertEquals(ERROR_EVENT_INCORRECT_FORMAT, e.getMessage());","lastModifiedDate":"2021-09-03"},{"lineNumber":91,"author":{"gitId":"Imranr2"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":92,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":93,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":94,"author":{"gitId":"Imranr2"},"content":"    @Test","lastModifiedDate":"2021-08-20"},{"lineNumber":95,"author":{"gitId":"Imranr2"},"content":"    public void handleEventCommand_completeCommand_success() throws LifelineException {","lastModifiedDate":"2021-08-20"},{"lineNumber":96,"author":{"gitId":"Imranr2"},"content":"        Storage storage \u003d new Storage(\"test.json\");","lastModifiedDate":"2021-08-20"},{"lineNumber":97,"author":{"gitId":"Imranr2"},"content":"        TaskList taskList \u003d new TaskList(new ArrayList\u003cTask\u003e());","lastModifiedDate":"2021-08-20"},{"lineNumber":98,"author":{"gitId":"Imranr2"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2021-08-20"},{"lineNumber":99,"author":{"gitId":"Imranr2"},"content":"        Command.EVENT.getExecute().apply(\"event wedding /at 04/03/21 1400 1600\", storage, taskList, ui);","lastModifiedDate":"2021-09-04"},{"lineNumber":100,"author":{"gitId":"Imranr2"},"content":"        assertEquals(\"[E][ ] wedding (at: Mar 4 2021 2:00 PM - 4:00 PM)\", taskList.getTask(0).toString());","lastModifiedDate":"2021-08-31"},{"lineNumber":101,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":102,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":103,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":104,"author":{"gitId":"Imranr2"},"content":"    @Test","lastModifiedDate":"2021-08-20"},{"lineNumber":105,"author":{"gitId":"Imranr2"},"content":"    public void handleDeadlineCommand_missingNameDateAndTime_exceptionThrown() {","lastModifiedDate":"2021-08-20"},{"lineNumber":106,"author":{"gitId":"Imranr2"},"content":"        try {","lastModifiedDate":"2021-08-20"},{"lineNumber":107,"author":{"gitId":"Imranr2"},"content":"            Storage storage \u003d new Storage(\"test.json\");","lastModifiedDate":"2021-08-20"},{"lineNumber":108,"author":{"gitId":"Imranr2"},"content":"            TaskList taskList \u003d new TaskList(new ArrayList\u003cTask\u003e());","lastModifiedDate":"2021-08-20"},{"lineNumber":109,"author":{"gitId":"Imranr2"},"content":"            Ui ui \u003d new Ui();","lastModifiedDate":"2021-08-20"},{"lineNumber":110,"author":{"gitId":"Imranr2"},"content":"            Command.DEADLINE.getExecute().apply(\"deadline\", storage, taskList, ui);","lastModifiedDate":"2021-08-20"},{"lineNumber":111,"author":{"gitId":"Imranr2"},"content":"            fail();","lastModifiedDate":"2021-08-20"},{"lineNumber":112,"author":{"gitId":"Imranr2"},"content":"        } catch (LifelineException e) {","lastModifiedDate":"2021-08-20"},{"lineNumber":113,"author":{"gitId":"Imranr2"},"content":"            assertEquals(ERROR_DEADLINE_MISSING_DETAILS, e.getMessage());","lastModifiedDate":"2021-09-03"},{"lineNumber":114,"author":{"gitId":"Imranr2"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":115,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":116,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":117,"author":{"gitId":"Imranr2"},"content":"    @Test","lastModifiedDate":"2021-08-20"},{"lineNumber":118,"author":{"gitId":"Imranr2"},"content":"    public void handleDeadlineCommand_missingDateAndTime_exceptionThrown() {","lastModifiedDate":"2021-08-20"},{"lineNumber":119,"author":{"gitId":"Imranr2"},"content":"        try {","lastModifiedDate":"2021-08-20"},{"lineNumber":120,"author":{"gitId":"Imranr2"},"content":"            Storage storage \u003d new Storage(\"test.json\");","lastModifiedDate":"2021-08-20"},{"lineNumber":121,"author":{"gitId":"Imranr2"},"content":"            TaskList taskList \u003d new TaskList(new ArrayList\u003cTask\u003e());","lastModifiedDate":"2021-08-20"},{"lineNumber":122,"author":{"gitId":"Imranr2"},"content":"            Ui ui \u003d new Ui();","lastModifiedDate":"2021-08-20"},{"lineNumber":123,"author":{"gitId":"Imranr2"},"content":"            Command.DEADLINE.getExecute().apply(\"deadline project /by\", storage, taskList, ui);","lastModifiedDate":"2021-08-20"},{"lineNumber":124,"author":{"gitId":"Imranr2"},"content":"            fail();","lastModifiedDate":"2021-08-20"},{"lineNumber":125,"author":{"gitId":"Imranr2"},"content":"        } catch (LifelineException e) {","lastModifiedDate":"2021-08-20"},{"lineNumber":126,"author":{"gitId":"Imranr2"},"content":"            assertEquals(ERROR_DEADLINE_INCORRECT_FORMAT, e.getMessage());","lastModifiedDate":"2021-09-03"},{"lineNumber":127,"author":{"gitId":"Imranr2"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":128,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":129,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":130,"author":{"gitId":"Imranr2"},"content":"    @Test","lastModifiedDate":"2021-08-20"},{"lineNumber":131,"author":{"gitId":"Imranr2"},"content":"    public void handleDeadlineCommand_missingTime_exceptionThrown() {","lastModifiedDate":"2021-08-20"},{"lineNumber":132,"author":{"gitId":"Imranr2"},"content":"        try {","lastModifiedDate":"2021-08-20"},{"lineNumber":133,"author":{"gitId":"Imranr2"},"content":"            Storage storage \u003d new Storage(\"test.json\");","lastModifiedDate":"2021-08-20"},{"lineNumber":134,"author":{"gitId":"Imranr2"},"content":"            TaskList taskList \u003d new TaskList(new ArrayList\u003cTask\u003e());","lastModifiedDate":"2021-08-20"},{"lineNumber":135,"author":{"gitId":"Imranr2"},"content":"            Ui ui \u003d new Ui();","lastModifiedDate":"2021-08-20"},{"lineNumber":136,"author":{"gitId":"Imranr2"},"content":"            Command.DEADLINE.getExecute().apply(\"deadline project /by 04/03/21\", storage, taskList, ui);","lastModifiedDate":"2021-08-20"},{"lineNumber":137,"author":{"gitId":"Imranr2"},"content":"            fail();","lastModifiedDate":"2021-08-20"},{"lineNumber":138,"author":{"gitId":"Imranr2"},"content":"        } catch (LifelineException e) {","lastModifiedDate":"2021-08-20"},{"lineNumber":139,"author":{"gitId":"Imranr2"},"content":"            assertEquals(ERROR_DEADLINE_INCORRECT_FORMAT, e.getMessage());","lastModifiedDate":"2021-09-03"},{"lineNumber":140,"author":{"gitId":"Imranr2"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":141,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":142,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":143,"author":{"gitId":"Imranr2"},"content":"    @Test","lastModifiedDate":"2021-08-20"},{"lineNumber":144,"author":{"gitId":"Imranr2"},"content":"    public void handleDeadlineCommand_completeCommand_success() throws LifelineException {","lastModifiedDate":"2021-08-20"},{"lineNumber":145,"author":{"gitId":"Imranr2"},"content":"        Storage storage \u003d new Storage(\"test.json\");","lastModifiedDate":"2021-08-20"},{"lineNumber":146,"author":{"gitId":"Imranr2"},"content":"        TaskList taskList \u003d new TaskList(new ArrayList\u003cTask\u003e());","lastModifiedDate":"2021-08-20"},{"lineNumber":147,"author":{"gitId":"Imranr2"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2021-08-20"},{"lineNumber":148,"author":{"gitId":"Imranr2"},"content":"        Command.DEADLINE.getExecute().apply(\"deadline project /by 04/03/21 1830\", storage, taskList, ui);","lastModifiedDate":"2021-08-20"},{"lineNumber":149,"author":{"gitId":"Imranr2"},"content":"        assertEquals(\"[D][ ] project (by: Mar 4 2021 6:30 PM)\", taskList.getTask(0).toString());","lastModifiedDate":"2021-08-31"},{"lineNumber":150,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":151,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":152,"author":{"gitId":"Imranr2"},"content":"    @Test","lastModifiedDate":"2021-08-20"},{"lineNumber":153,"author":{"gitId":"Imranr2"},"content":"    public void handleDoneCommand_missingIndex_exceptionThrown() {","lastModifiedDate":"2021-08-20"},{"lineNumber":154,"author":{"gitId":"Imranr2"},"content":"        try {","lastModifiedDate":"2021-08-20"},{"lineNumber":155,"author":{"gitId":"Imranr2"},"content":"            Storage storage \u003d new Storage(\"test.json\");","lastModifiedDate":"2021-08-20"},{"lineNumber":156,"author":{"gitId":"Imranr2"},"content":"            TaskList taskList \u003d new TaskList(new ArrayList\u003cTask\u003e());","lastModifiedDate":"2021-08-20"},{"lineNumber":157,"author":{"gitId":"Imranr2"},"content":"            Ui ui \u003d new Ui();","lastModifiedDate":"2021-08-20"},{"lineNumber":158,"author":{"gitId":"Imranr2"},"content":"            Command.DONE.getExecute().apply(\"done\", storage, taskList, ui);","lastModifiedDate":"2021-08-20"},{"lineNumber":159,"author":{"gitId":"Imranr2"},"content":"            fail();","lastModifiedDate":"2021-08-20"},{"lineNumber":160,"author":{"gitId":"Imranr2"},"content":"        } catch (LifelineException e) {","lastModifiedDate":"2021-08-20"},{"lineNumber":161,"author":{"gitId":"Imranr2"},"content":"            assertEquals(ERROR_DONE_MISSING_INDEX, e.getMessage());","lastModifiedDate":"2021-09-03"},{"lineNumber":162,"author":{"gitId":"Imranr2"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":163,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":164,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":165,"author":{"gitId":"Imranr2"},"content":"    @Test","lastModifiedDate":"2021-08-24"},{"lineNumber":166,"author":{"gitId":"Imranr2"},"content":"    public void handleDoneCommand_indexOutOfBounds_exceptionThrown() {","lastModifiedDate":"2021-08-24"},{"lineNumber":167,"author":{"gitId":"Imranr2"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":168,"author":{"gitId":"Imranr2"},"content":"            Storage storage \u003d new Storage(\"test.json\");","lastModifiedDate":"2021-08-24"},{"lineNumber":169,"author":{"gitId":"Imranr2"},"content":"            TaskList taskList \u003d new TaskList(new ArrayList\u003cTask\u003e());","lastModifiedDate":"2021-08-24"},{"lineNumber":170,"author":{"gitId":"Imranr2"},"content":"            Ui ui \u003d new Ui();","lastModifiedDate":"2021-08-24"},{"lineNumber":171,"author":{"gitId":"Imranr2"},"content":"            Command.DONE.getExecute().apply(\"done 2\", storage, taskList, ui);","lastModifiedDate":"2021-08-24"},{"lineNumber":172,"author":{"gitId":"Imranr2"},"content":"            fail();","lastModifiedDate":"2021-08-24"},{"lineNumber":173,"author":{"gitId":"Imranr2"},"content":"        } catch (LifelineException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":174,"author":{"gitId":"Imranr2"},"content":"            assertEquals(ERROR_INDEX_OUT_OF_BOUNDS, e.getMessage());","lastModifiedDate":"2021-09-03"},{"lineNumber":175,"author":{"gitId":"Imranr2"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":176,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":177,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":178,"author":{"gitId":"Imranr2"},"content":"    @Test","lastModifiedDate":"2021-08-24"},{"lineNumber":179,"author":{"gitId":"Imranr2"},"content":"    public void handleDoneCommand_indexIsNotInteger_exceptionThrown() {","lastModifiedDate":"2021-08-24"},{"lineNumber":180,"author":{"gitId":"Imranr2"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":181,"author":{"gitId":"Imranr2"},"content":"            Storage storage \u003d new Storage(\"test.json\");","lastModifiedDate":"2021-08-24"},{"lineNumber":182,"author":{"gitId":"Imranr2"},"content":"            TaskList taskList \u003d new TaskList(new ArrayList\u003cTask\u003e());","lastModifiedDate":"2021-08-24"},{"lineNumber":183,"author":{"gitId":"Imranr2"},"content":"            Ui ui \u003d new Ui();","lastModifiedDate":"2021-08-24"},{"lineNumber":184,"author":{"gitId":"Imranr2"},"content":"            Command.DONE.getExecute().apply(\"done abc\", storage, taskList, ui);","lastModifiedDate":"2021-08-24"},{"lineNumber":185,"author":{"gitId":"Imranr2"},"content":"            fail();","lastModifiedDate":"2021-08-24"},{"lineNumber":186,"author":{"gitId":"Imranr2"},"content":"        } catch (LifelineException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":187,"author":{"gitId":"Imranr2"},"content":"            assertEquals(ERROR_NON_INTEGER_INDEX, e.getMessage());","lastModifiedDate":"2021-09-03"},{"lineNumber":188,"author":{"gitId":"Imranr2"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":189,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":190,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":191,"author":{"gitId":"Imranr2"},"content":"    @Test","lastModifiedDate":"2021-08-20"},{"lineNumber":192,"author":{"gitId":"Imranr2"},"content":"    public void handleDoneCommand_completeCommand_success() throws LifelineException {","lastModifiedDate":"2021-08-20"},{"lineNumber":193,"author":{"gitId":"Imranr2"},"content":"        Storage storage \u003d new Storage(\"test.json\");","lastModifiedDate":"2021-08-20"},{"lineNumber":194,"author":{"gitId":"Imranr2"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-20"},{"lineNumber":195,"author":{"gitId":"Imranr2"},"content":"        Task todo \u003d new ToDo(\"read book\");","lastModifiedDate":"2021-08-20"},{"lineNumber":196,"author":{"gitId":"Imranr2"},"content":"        tasks.add(todo);","lastModifiedDate":"2021-08-20"},{"lineNumber":197,"author":{"gitId":"Imranr2"},"content":"        TaskList taskList \u003d new TaskList(tasks);","lastModifiedDate":"2021-08-20"},{"lineNumber":198,"author":{"gitId":"Imranr2"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2021-08-20"},{"lineNumber":199,"author":{"gitId":"Imranr2"},"content":"        Command.DONE.getExecute().apply(\"done 1\", storage, taskList, ui);","lastModifiedDate":"2021-08-20"},{"lineNumber":200,"author":{"gitId":"Imranr2"},"content":"        assertEquals(\"[T][X] read book\", taskList.getTask(0).toString());","lastModifiedDate":"2021-08-31"},{"lineNumber":201,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":202,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":203,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":204,"author":{"gitId":"Imranr2"},"content":"    @Test","lastModifiedDate":"2021-08-20"},{"lineNumber":205,"author":{"gitId":"Imranr2"},"content":"    public void handleDeleteCommand_missingIndex_exceptionThrown() {","lastModifiedDate":"2021-08-20"},{"lineNumber":206,"author":{"gitId":"Imranr2"},"content":"        try {","lastModifiedDate":"2021-08-20"},{"lineNumber":207,"author":{"gitId":"Imranr2"},"content":"            Storage storage \u003d new Storage(\"test.json\");","lastModifiedDate":"2021-08-20"},{"lineNumber":208,"author":{"gitId":"Imranr2"},"content":"            TaskList taskList \u003d new TaskList(new ArrayList\u003cTask\u003e());","lastModifiedDate":"2021-08-20"},{"lineNumber":209,"author":{"gitId":"Imranr2"},"content":"            Ui ui \u003d new Ui();","lastModifiedDate":"2021-08-20"},{"lineNumber":210,"author":{"gitId":"Imranr2"},"content":"            Command.DELETE.getExecute().apply(\"delete\", storage, taskList, ui);","lastModifiedDate":"2021-08-20"},{"lineNumber":211,"author":{"gitId":"Imranr2"},"content":"            fail();","lastModifiedDate":"2021-08-20"},{"lineNumber":212,"author":{"gitId":"Imranr2"},"content":"        } catch (LifelineException e) {","lastModifiedDate":"2021-08-20"},{"lineNumber":213,"author":{"gitId":"Imranr2"},"content":"            assertEquals(ERROR_DELETE_MISSING_INDEX, e.getMessage());","lastModifiedDate":"2021-09-03"},{"lineNumber":214,"author":{"gitId":"Imranr2"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":215,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":216,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":217,"author":{"gitId":"Imranr2"},"content":"    @Test","lastModifiedDate":"2021-08-24"},{"lineNumber":218,"author":{"gitId":"Imranr2"},"content":"    public void handleDeleteCommand_indexOutOfBounds_exceptionThrown() {","lastModifiedDate":"2021-08-24"},{"lineNumber":219,"author":{"gitId":"Imranr2"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":220,"author":{"gitId":"Imranr2"},"content":"            Storage storage \u003d new Storage(\"test.json\");","lastModifiedDate":"2021-08-24"},{"lineNumber":221,"author":{"gitId":"Imranr2"},"content":"            TaskList taskList \u003d new TaskList(new ArrayList\u003cTask\u003e());","lastModifiedDate":"2021-08-24"},{"lineNumber":222,"author":{"gitId":"Imranr2"},"content":"            Ui ui \u003d new Ui();","lastModifiedDate":"2021-08-24"},{"lineNumber":223,"author":{"gitId":"Imranr2"},"content":"            Command.DELETE.getExecute().apply(\"delete 2\", storage, taskList, ui);","lastModifiedDate":"2021-08-24"},{"lineNumber":224,"author":{"gitId":"Imranr2"},"content":"            fail();","lastModifiedDate":"2021-08-24"},{"lineNumber":225,"author":{"gitId":"Imranr2"},"content":"        } catch (LifelineException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":226,"author":{"gitId":"Imranr2"},"content":"            assertEquals(ERROR_INDEX_OUT_OF_BOUNDS, e.getMessage());","lastModifiedDate":"2021-09-03"},{"lineNumber":227,"author":{"gitId":"Imranr2"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":228,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":229,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":230,"author":{"gitId":"Imranr2"},"content":"    @Test","lastModifiedDate":"2021-08-24"},{"lineNumber":231,"author":{"gitId":"Imranr2"},"content":"    public void handleDeleteCommand_indexIsNotInteger_exceptionThrown() {","lastModifiedDate":"2021-08-24"},{"lineNumber":232,"author":{"gitId":"Imranr2"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":233,"author":{"gitId":"Imranr2"},"content":"            Storage storage \u003d new Storage(\"test.json\");","lastModifiedDate":"2021-08-24"},{"lineNumber":234,"author":{"gitId":"Imranr2"},"content":"            TaskList taskList \u003d new TaskList(new ArrayList\u003cTask\u003e());","lastModifiedDate":"2021-08-24"},{"lineNumber":235,"author":{"gitId":"Imranr2"},"content":"            Ui ui \u003d new Ui();","lastModifiedDate":"2021-08-24"},{"lineNumber":236,"author":{"gitId":"Imranr2"},"content":"            Command.DELETE.getExecute().apply(\"delete abc\", storage, taskList, ui);","lastModifiedDate":"2021-09-03"},{"lineNumber":237,"author":{"gitId":"Imranr2"},"content":"            fail();","lastModifiedDate":"2021-08-24"},{"lineNumber":238,"author":{"gitId":"Imranr2"},"content":"        } catch (LifelineException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":239,"author":{"gitId":"Imranr2"},"content":"            assertEquals(ERROR_NON_INTEGER_INDEX, e.getMessage());","lastModifiedDate":"2021-09-03"},{"lineNumber":240,"author":{"gitId":"Imranr2"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":241,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":242,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":243,"author":{"gitId":"Imranr2"},"content":"    @Test","lastModifiedDate":"2021-08-20"},{"lineNumber":244,"author":{"gitId":"Imranr2"},"content":"    public void handleDeleteCommand_completeCommand_success() throws LifelineException {","lastModifiedDate":"2021-08-20"},{"lineNumber":245,"author":{"gitId":"Imranr2"},"content":"        Storage storage \u003d new Storage(\"test.json\");","lastModifiedDate":"2021-08-20"},{"lineNumber":246,"author":{"gitId":"Imranr2"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-20"},{"lineNumber":247,"author":{"gitId":"Imranr2"},"content":"        Task todo \u003d new ToDo(\"read book\");","lastModifiedDate":"2021-08-20"},{"lineNumber":248,"author":{"gitId":"Imranr2"},"content":"        tasks.add(todo);","lastModifiedDate":"2021-08-20"},{"lineNumber":249,"author":{"gitId":"Imranr2"},"content":"        TaskList taskList \u003d new TaskList(tasks);","lastModifiedDate":"2021-08-20"},{"lineNumber":250,"author":{"gitId":"Imranr2"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2021-08-20"},{"lineNumber":251,"author":{"gitId":"Imranr2"},"content":"        Command.DELETE.getExecute().apply(\"delete 1\", storage, taskList, ui);","lastModifiedDate":"2021-09-03"},{"lineNumber":252,"author":{"gitId":"Imranr2"},"content":"        assertTrue(taskList.getSize() \u003d\u003d 0);","lastModifiedDate":"2021-08-30"},{"lineNumber":253,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":254,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":255,"author":{"gitId":"Imranr2"},"content":"    @Test","lastModifiedDate":"2021-08-20"},{"lineNumber":256,"author":{"gitId":"Imranr2"},"content":"    public void testHandleListCommand() throws LifelineException {","lastModifiedDate":"2021-08-20"},{"lineNumber":257,"author":{"gitId":"Imranr2"},"content":"        Storage storage \u003d new Storage(\"test.json\");","lastModifiedDate":"2021-08-20"},{"lineNumber":258,"author":{"gitId":"Imranr2"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-20"},{"lineNumber":259,"author":{"gitId":"Imranr2"},"content":"        Task todo \u003d new ToDo(\"read book\");","lastModifiedDate":"2021-08-20"},{"lineNumber":260,"author":{"gitId":"Imranr2"},"content":"        tasks.add(todo);","lastModifiedDate":"2021-08-20"},{"lineNumber":261,"author":{"gitId":"Imranr2"},"content":"        TaskList taskList \u003d new TaskList(tasks);","lastModifiedDate":"2021-08-20"},{"lineNumber":262,"author":{"gitId":"Imranr2"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2021-08-20"},{"lineNumber":263,"author":{"gitId":"Imranr2"},"content":"        assertEquals(\"Here is your task:\\n\" + \"1. [T][ ] read book\\n\" + \"You have 1 uncompleted task.\\n\",","lastModifiedDate":"2021-08-21"},{"lineNumber":264,"author":{"gitId":"Imranr2"},"content":"                Command.LIST.getExecute().apply(\"list\", storage, taskList, ui));","lastModifiedDate":"2021-09-03"},{"lineNumber":265,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":266,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":267,"author":{"gitId":"Imranr2"},"content":"    @Test","lastModifiedDate":"2021-08-20"},{"lineNumber":268,"author":{"gitId":"Imranr2"},"content":"    public void testHandleByeCommand() throws LifelineException {","lastModifiedDate":"2021-08-20"},{"lineNumber":269,"author":{"gitId":"Imranr2"},"content":"        Storage storage \u003d new Storage(\"test.json\");","lastModifiedDate":"2021-08-20"},{"lineNumber":270,"author":{"gitId":"Imranr2"},"content":"        TaskList taskList \u003d new TaskList(new ArrayList\u003cTask\u003e());","lastModifiedDate":"2021-08-20"},{"lineNumber":271,"author":{"gitId":"Imranr2"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2021-08-20"},{"lineNumber":272,"author":{"gitId":"Imranr2"},"content":"        assertEquals(\"Goodbye! Thanks for chatting with me!\\n\", Command.BYE.getExecute().apply(\"bye\",","lastModifiedDate":"2021-08-20"},{"lineNumber":273,"author":{"gitId":"Imranr2"},"content":"                storage, taskList, ui));","lastModifiedDate":"2021-08-20"},{"lineNumber":274,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":275,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":276,"author":{"gitId":"Imranr2"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":277,"author":{"gitId":"Imranr2"},"content":"    public void handleFind_missingKeyword_exceptionThrown() {","lastModifiedDate":"2021-08-21"},{"lineNumber":278,"author":{"gitId":"Imranr2"},"content":"        try {","lastModifiedDate":"2021-08-21"},{"lineNumber":279,"author":{"gitId":"Imranr2"},"content":"            Storage storage \u003d new Storage(\"test.json\");","lastModifiedDate":"2021-08-21"},{"lineNumber":280,"author":{"gitId":"Imranr2"},"content":"            ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-21"},{"lineNumber":281,"author":{"gitId":"Imranr2"},"content":"            Task todo \u003d new ToDo(\"read book\");","lastModifiedDate":"2021-08-21"},{"lineNumber":282,"author":{"gitId":"Imranr2"},"content":"            tasks.add(todo);","lastModifiedDate":"2021-08-21"},{"lineNumber":283,"author":{"gitId":"Imranr2"},"content":"            TaskList taskList \u003d new TaskList(tasks);","lastModifiedDate":"2021-08-21"},{"lineNumber":284,"author":{"gitId":"Imranr2"},"content":"            Ui ui \u003d new Ui();","lastModifiedDate":"2021-08-21"},{"lineNumber":285,"author":{"gitId":"Imranr2"},"content":"            Command.FIND.getExecute().apply(\"find\", storage, taskList, ui);","lastModifiedDate":"2021-08-21"},{"lineNumber":286,"author":{"gitId":"Imranr2"},"content":"        } catch (LifelineException e) {","lastModifiedDate":"2021-08-21"},{"lineNumber":287,"author":{"gitId":"Imranr2"},"content":"            assertEquals(ERROR_FIND_MISSING_KEYWORD, e.getMessage());","lastModifiedDate":"2021-09-03"},{"lineNumber":288,"author":{"gitId":"Imranr2"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":289,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":290,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":291,"author":{"gitId":"Imranr2"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":292,"author":{"gitId":"Imranr2"},"content":"    public void handleFind_noTaskFound_exceptionThrown() {","lastModifiedDate":"2021-08-21"},{"lineNumber":293,"author":{"gitId":"Imranr2"},"content":"        try {","lastModifiedDate":"2021-08-21"},{"lineNumber":294,"author":{"gitId":"Imranr2"},"content":"            Storage storage \u003d new Storage(\"test.json\");","lastModifiedDate":"2021-08-21"},{"lineNumber":295,"author":{"gitId":"Imranr2"},"content":"            ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-21"},{"lineNumber":296,"author":{"gitId":"Imranr2"},"content":"            Task todo \u003d new ToDo(\"read book\");","lastModifiedDate":"2021-08-21"},{"lineNumber":297,"author":{"gitId":"Imranr2"},"content":"            tasks.add(todo);","lastModifiedDate":"2021-08-21"},{"lineNumber":298,"author":{"gitId":"Imranr2"},"content":"            TaskList taskList \u003d new TaskList(tasks);","lastModifiedDate":"2021-08-21"},{"lineNumber":299,"author":{"gitId":"Imranr2"},"content":"            Ui ui \u003d new Ui();","lastModifiedDate":"2021-08-21"},{"lineNumber":300,"author":{"gitId":"Imranr2"},"content":"            Command.FIND.getExecute().apply(\"find abc\", storage, taskList, ui);","lastModifiedDate":"2021-08-21"},{"lineNumber":301,"author":{"gitId":"Imranr2"},"content":"        } catch (LifelineException e) {","lastModifiedDate":"2021-08-21"},{"lineNumber":302,"author":{"gitId":"Imranr2"},"content":"            assertEquals(ERROR_NO_TASKS_FOUND, e.getMessage());","lastModifiedDate":"2021-09-03"},{"lineNumber":303,"author":{"gitId":"Imranr2"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":304,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":305,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":306,"author":{"gitId":"Imranr2"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":307,"author":{"gitId":"Imranr2"},"content":"    public void handleFind_completeCommandTaskFound_success() throws LifelineException {","lastModifiedDate":"2021-08-21"},{"lineNumber":308,"author":{"gitId":"Imranr2"},"content":"        Storage storage \u003d new Storage(\"test.json\");","lastModifiedDate":"2021-08-21"},{"lineNumber":309,"author":{"gitId":"Imranr2"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-21"},{"lineNumber":310,"author":{"gitId":"Imranr2"},"content":"        Task todo \u003d new ToDo(\"read book\");","lastModifiedDate":"2021-08-21"},{"lineNumber":311,"author":{"gitId":"Imranr2"},"content":"        tasks.add(todo);","lastModifiedDate":"2021-08-21"},{"lineNumber":312,"author":{"gitId":"Imranr2"},"content":"        TaskList taskList \u003d new TaskList(tasks);","lastModifiedDate":"2021-08-21"},{"lineNumber":313,"author":{"gitId":"Imranr2"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2021-08-21"},{"lineNumber":314,"author":{"gitId":"Imranr2"},"content":"        String output \u003d Command.FIND.getExecute().apply(\"find book\", storage, taskList, ui);","lastModifiedDate":"2021-08-21"},{"lineNumber":315,"author":{"gitId":"Imranr2"},"content":"        assertEquals(\"Task with keyword book:\\n\" + \"[T][ ] read book\\n\", output);","lastModifiedDate":"2021-08-21"},{"lineNumber":316,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":317,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":318,"author":{"gitId":"Imranr2"},"content":"    @AfterEach","lastModifiedDate":"2021-08-20"},{"lineNumber":319,"author":{"gitId":"Imranr2"},"content":"    public void deleteTestFiles() {","lastModifiedDate":"2021-08-20"},{"lineNumber":320,"author":{"gitId":"Imranr2"},"content":"        File testFile \u003d new File(\"test.json\");","lastModifiedDate":"2021-08-20"},{"lineNumber":321,"author":{"gitId":"Imranr2"},"content":"        testFile.delete();","lastModifiedDate":"2021-09-03"},{"lineNumber":322,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":323,"author":{"gitId":"Imranr2"},"content":"}","lastModifiedDate":"2021-08-20"}],"authorContributionMap":{"Imranr2":323}},{"path":"src/test/java/lifeline/exception/LifelineExceptionTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Imranr2"},"content":"package lifeline.exception;","lastModifiedDate":"2021-08-20"},{"lineNumber":2,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":3,"author":{"gitId":"Imranr2"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-20"},{"lineNumber":4,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":5,"author":{"gitId":"Imranr2"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-20"},{"lineNumber":6,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":7,"author":{"gitId":"Imranr2"},"content":"public class LifelineExceptionTest {","lastModifiedDate":"2021-08-20"},{"lineNumber":8,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":9,"author":{"gitId":"Imranr2"},"content":"    @Test","lastModifiedDate":"2021-08-20"},{"lineNumber":10,"author":{"gitId":"Imranr2"},"content":"    public void testConstructor() {","lastModifiedDate":"2021-08-20"},{"lineNumber":11,"author":{"gitId":"Imranr2"},"content":"        LifelineException lle \u003d new LifelineException(\"Testing Lifeline Exception\");","lastModifiedDate":"2021-08-20"},{"lineNumber":12,"author":{"gitId":"Imranr2"},"content":"        assertEquals(\"Testing Lifeline Exception\", lle.getMessage());","lastModifiedDate":"2021-08-20"},{"lineNumber":13,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":14,"author":{"gitId":"Imranr2"},"content":"}","lastModifiedDate":"2021-08-20"}],"authorContributionMap":{"Imranr2":14}},{"path":"src/test/java/lifeline/parser/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Imranr2"},"content":"package lifeline.parser;","lastModifiedDate":"2021-08-20"},{"lineNumber":2,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":3,"author":{"gitId":"Imranr2"},"content":"import static lifeline.util.ErrorString.ERROR_INVALID_COMMAND;","lastModifiedDate":"2021-09-03"},{"lineNumber":4,"author":{"gitId":"Imranr2"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-20"},{"lineNumber":5,"author":{"gitId":"Imranr2"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2021-08-20"},{"lineNumber":6,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":7,"author":{"gitId":"Imranr2"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-20"},{"lineNumber":8,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":9,"author":{"gitId":"Imranr2"},"content":"import lifeline.command.Command;","lastModifiedDate":"2021-08-20"},{"lineNumber":10,"author":{"gitId":"Imranr2"},"content":"import lifeline.exception.LifelineException;","lastModifiedDate":"2021-08-20"},{"lineNumber":11,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":12,"author":{"gitId":"Imranr2"},"content":"public class ParserTest {","lastModifiedDate":"2021-08-20"},{"lineNumber":13,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":14,"author":{"gitId":"Imranr2"},"content":"    @Test","lastModifiedDate":"2021-08-20"},{"lineNumber":15,"author":{"gitId":"Imranr2"},"content":"    public void parse_listAsCommand_success() throws LifelineException {","lastModifiedDate":"2021-08-20"},{"lineNumber":16,"author":{"gitId":"Imranr2"},"content":"        Command c \u003d Parser.parse(\"list\");","lastModifiedDate":"2021-08-20"},{"lineNumber":17,"author":{"gitId":"Imranr2"},"content":"        assertEquals(Command.valueOf(\"LIST\"), c);","lastModifiedDate":"2021-08-20"},{"lineNumber":18,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":19,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":20,"author":{"gitId":"Imranr2"},"content":"    @Test","lastModifiedDate":"2021-08-20"},{"lineNumber":21,"author":{"gitId":"Imranr2"},"content":"    public void parse_byeAsCommand_success() throws LifelineException {","lastModifiedDate":"2021-08-20"},{"lineNumber":22,"author":{"gitId":"Imranr2"},"content":"        Command c \u003d Parser.parse(\"bye\");","lastModifiedDate":"2021-08-20"},{"lineNumber":23,"author":{"gitId":"Imranr2"},"content":"        assertEquals(Command.valueOf(\"BYE\"), c);","lastModifiedDate":"2021-08-20"},{"lineNumber":24,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":25,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":26,"author":{"gitId":"Imranr2"},"content":"    @Test","lastModifiedDate":"2021-08-20"},{"lineNumber":27,"author":{"gitId":"Imranr2"},"content":"    public void parse_doneAsCommand_success() throws LifelineException {","lastModifiedDate":"2021-08-20"},{"lineNumber":28,"author":{"gitId":"Imranr2"},"content":"        Command c \u003d Parser.parse(\"done\");","lastModifiedDate":"2021-08-20"},{"lineNumber":29,"author":{"gitId":"Imranr2"},"content":"        assertEquals(Command.valueOf(\"DONE\"), c);","lastModifiedDate":"2021-08-20"},{"lineNumber":30,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":31,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":32,"author":{"gitId":"Imranr2"},"content":"    @Test","lastModifiedDate":"2021-08-20"},{"lineNumber":33,"author":{"gitId":"Imranr2"},"content":"    public void parse_deleteAsCommand_success() throws LifelineException {","lastModifiedDate":"2021-08-20"},{"lineNumber":34,"author":{"gitId":"Imranr2"},"content":"        Command c \u003d Parser.parse(\"delete\");","lastModifiedDate":"2021-08-20"},{"lineNumber":35,"author":{"gitId":"Imranr2"},"content":"        assertEquals(Command.valueOf(\"DELETE\"), c);","lastModifiedDate":"2021-08-20"},{"lineNumber":36,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":37,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":38,"author":{"gitId":"Imranr2"},"content":"    @Test","lastModifiedDate":"2021-08-20"},{"lineNumber":39,"author":{"gitId":"Imranr2"},"content":"    public void parse_deadlineAsCommand_success() throws LifelineException {","lastModifiedDate":"2021-08-20"},{"lineNumber":40,"author":{"gitId":"Imranr2"},"content":"        Command c \u003d Parser.parse(\"deadline\");","lastModifiedDate":"2021-08-20"},{"lineNumber":41,"author":{"gitId":"Imranr2"},"content":"        assertEquals(Command.valueOf(\"DEADLINE\"), c);","lastModifiedDate":"2021-08-20"},{"lineNumber":42,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":43,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":44,"author":{"gitId":"Imranr2"},"content":"    @Test","lastModifiedDate":"2021-08-20"},{"lineNumber":45,"author":{"gitId":"Imranr2"},"content":"    public void parse_eventAsCommand_success() throws LifelineException {","lastModifiedDate":"2021-08-20"},{"lineNumber":46,"author":{"gitId":"Imranr2"},"content":"        Command c \u003d Parser.parse(\"event\");","lastModifiedDate":"2021-08-20"},{"lineNumber":47,"author":{"gitId":"Imranr2"},"content":"        assertEquals(Command.valueOf(\"EVENT\"), c);","lastModifiedDate":"2021-08-20"},{"lineNumber":48,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":49,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":50,"author":{"gitId":"Imranr2"},"content":"    @Test","lastModifiedDate":"2021-08-20"},{"lineNumber":51,"author":{"gitId":"Imranr2"},"content":"    public void parse_todoAsCommand_success() throws LifelineException {","lastModifiedDate":"2021-08-20"},{"lineNumber":52,"author":{"gitId":"Imranr2"},"content":"        Command c \u003d Parser.parse(\"todo\");","lastModifiedDate":"2021-08-20"},{"lineNumber":53,"author":{"gitId":"Imranr2"},"content":"        assertEquals(Command.valueOf(\"TODO\"), c);","lastModifiedDate":"2021-08-20"},{"lineNumber":54,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":55,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":56,"author":{"gitId":"Imranr2"},"content":"    @Test","lastModifiedDate":"2021-08-20"},{"lineNumber":57,"author":{"gitId":"Imranr2"},"content":"    public void parse_invalidCommand_exceptionThrown() {","lastModifiedDate":"2021-08-20"},{"lineNumber":58,"author":{"gitId":"Imranr2"},"content":"        try {","lastModifiedDate":"2021-08-20"},{"lineNumber":59,"author":{"gitId":"Imranr2"},"content":"            Command c \u003d Parser.parse(\"blah\");","lastModifiedDate":"2021-08-20"},{"lineNumber":60,"author":{"gitId":"Imranr2"},"content":"            fail();","lastModifiedDate":"2021-08-20"},{"lineNumber":61,"author":{"gitId":"Imranr2"},"content":"        } catch (LifelineException e) {","lastModifiedDate":"2021-08-20"},{"lineNumber":62,"author":{"gitId":"Imranr2"},"content":"            assertEquals(ERROR_INVALID_COMMAND, e.getMessage());","lastModifiedDate":"2021-09-03"},{"lineNumber":63,"author":{"gitId":"Imranr2"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":64,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":65,"author":{"gitId":"Imranr2"},"content":"}","lastModifiedDate":"2021-08-20"}],"authorContributionMap":{"Imranr2":65}},{"path":"src/test/java/lifeline/storage/StorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Imranr2"},"content":"package lifeline.storage;","lastModifiedDate":"2021-08-20"},{"lineNumber":2,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":3,"author":{"gitId":"Imranr2"},"content":"import static lifeline.util.ErrorString.ERROR_UNABLE_TO_FIND_SAVED_TASKS;","lastModifiedDate":"2021-09-03"},{"lineNumber":4,"author":{"gitId":"Imranr2"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-20"},{"lineNumber":5,"author":{"gitId":"Imranr2"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2021-08-20"},{"lineNumber":6,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":7,"author":{"gitId":"Imranr2"},"content":"import java.io.File;","lastModifiedDate":"2021-08-20"},{"lineNumber":8,"author":{"gitId":"Imranr2"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-20"},{"lineNumber":9,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":10,"author":{"gitId":"Imranr2"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2021-08-20"},{"lineNumber":11,"author":{"gitId":"Imranr2"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-20"},{"lineNumber":12,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":13,"author":{"gitId":"Imranr2"},"content":"import lifeline.exception.LifelineException;","lastModifiedDate":"2021-08-20"},{"lineNumber":14,"author":{"gitId":"Imranr2"},"content":"import lifeline.task.Task;","lastModifiedDate":"2021-08-20"},{"lineNumber":15,"author":{"gitId":"Imranr2"},"content":"import lifeline.task.TaskList;","lastModifiedDate":"2021-08-20"},{"lineNumber":16,"author":{"gitId":"Imranr2"},"content":"import lifeline.task.ToDo;","lastModifiedDate":"2021-08-20"},{"lineNumber":17,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":18,"author":{"gitId":"Imranr2"},"content":"public class StorageTest {","lastModifiedDate":"2021-08-20"},{"lineNumber":19,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":20,"author":{"gitId":"Imranr2"},"content":"    @Test","lastModifiedDate":"2021-08-20"},{"lineNumber":21,"author":{"gitId":"Imranr2"},"content":"    public void load_missingSavedTasks_exceptionThrown() {","lastModifiedDate":"2021-08-20"},{"lineNumber":22,"author":{"gitId":"Imranr2"},"content":"        Storage storage \u003d new Storage(\"test.json\");","lastModifiedDate":"2021-08-20"},{"lineNumber":23,"author":{"gitId":"Imranr2"},"content":"        try {","lastModifiedDate":"2021-08-20"},{"lineNumber":24,"author":{"gitId":"Imranr2"},"content":"            storage.load();","lastModifiedDate":"2021-08-20"},{"lineNumber":25,"author":{"gitId":"Imranr2"},"content":"            fail();","lastModifiedDate":"2021-08-20"},{"lineNumber":26,"author":{"gitId":"Imranr2"},"content":"        } catch (LifelineException e) {","lastModifiedDate":"2021-08-20"},{"lineNumber":27,"author":{"gitId":"Imranr2"},"content":"            assertEquals(ERROR_UNABLE_TO_FIND_SAVED_TASKS, e.getMessage());","lastModifiedDate":"2021-09-03"},{"lineNumber":28,"author":{"gitId":"Imranr2"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":29,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":30,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":31,"author":{"gitId":"Imranr2"},"content":"    @Test","lastModifiedDate":"2021-08-20"},{"lineNumber":32,"author":{"gitId":"Imranr2"},"content":"    public void load_presentSavedTasks_success() throws LifelineException {","lastModifiedDate":"2021-08-20"},{"lineNumber":33,"author":{"gitId":"Imranr2"},"content":"        Storage storage \u003d new Storage(\"test.json\");","lastModifiedDate":"2021-08-20"},{"lineNumber":34,"author":{"gitId":"Imranr2"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-20"},{"lineNumber":35,"author":{"gitId":"Imranr2"},"content":"        ToDo todo \u003d new ToDo(\"read book\");","lastModifiedDate":"2021-08-20"},{"lineNumber":36,"author":{"gitId":"Imranr2"},"content":"        tasks.add(todo);","lastModifiedDate":"2021-08-20"},{"lineNumber":37,"author":{"gitId":"Imranr2"},"content":"        TaskList taskList \u003d new TaskList(tasks);","lastModifiedDate":"2021-08-20"},{"lineNumber":38,"author":{"gitId":"Imranr2"},"content":"        storage.save(taskList);","lastModifiedDate":"2021-08-20"},{"lineNumber":39,"author":{"gitId":"Imranr2"},"content":"        TaskList loadedTaskList \u003d storage.load();","lastModifiedDate":"2021-08-20"},{"lineNumber":40,"author":{"gitId":"Imranr2"},"content":"        assertEquals(taskList.getTask(0).toString(), loadedTaskList.getTask(0).toString());","lastModifiedDate":"2021-08-31"},{"lineNumber":41,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":42,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":43,"author":{"gitId":"Imranr2"},"content":"    @AfterEach","lastModifiedDate":"2021-08-20"},{"lineNumber":44,"author":{"gitId":"Imranr2"},"content":"    public void deleteTestFiles() {","lastModifiedDate":"2021-08-20"},{"lineNumber":45,"author":{"gitId":"Imranr2"},"content":"        File testFile \u003d new File(\"test.json\");","lastModifiedDate":"2021-08-20"},{"lineNumber":46,"author":{"gitId":"Imranr2"},"content":"        testFile.delete();","lastModifiedDate":"2021-09-03"},{"lineNumber":47,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":48,"author":{"gitId":"Imranr2"},"content":"}","lastModifiedDate":"2021-08-20"}],"authorContributionMap":{"Imranr2":48}},{"path":"src/test/java/lifeline/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Imranr2"},"content":"package lifeline.task;","lastModifiedDate":"2021-08-20"},{"lineNumber":2,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":3,"author":{"gitId":"Imranr2"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-20"},{"lineNumber":4,"author":{"gitId":"Imranr2"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-08-20"},{"lineNumber":5,"author":{"gitId":"Imranr2"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-08-20"},{"lineNumber":6,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":7,"author":{"gitId":"Imranr2"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-04"},{"lineNumber":8,"author":{"gitId":"Imranr2"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-09-04"},{"lineNumber":9,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":10,"author":{"gitId":"Imranr2"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-20"},{"lineNumber":11,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":12,"author":{"gitId":"Imranr2"},"content":"public class DeadlineTest {","lastModifiedDate":"2021-08-20"},{"lineNumber":13,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":14,"author":{"gitId":"Imranr2"},"content":"    @Test","lastModifiedDate":"2021-08-20"},{"lineNumber":15,"author":{"gitId":"Imranr2"},"content":"    public void testNewDeadlineIsDoneIsFalse() {","lastModifiedDate":"2021-08-20"},{"lineNumber":16,"author":{"gitId":"Imranr2"},"content":"        Deadline deadline \u003d new Deadline(\"project\", LocalDate.now(), LocalTime.now());","lastModifiedDate":"2021-09-04"},{"lineNumber":17,"author":{"gitId":"Imranr2"},"content":"        assertFalse(deadline.isDone());","lastModifiedDate":"2021-08-20"},{"lineNumber":18,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":19,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":20,"author":{"gitId":"Imranr2"},"content":"    @Test","lastModifiedDate":"2021-08-20"},{"lineNumber":21,"author":{"gitId":"Imranr2"},"content":"    public void testDeadlineGetName() {","lastModifiedDate":"2021-08-20"},{"lineNumber":22,"author":{"gitId":"Imranr2"},"content":"        Deadline deadline \u003d new Deadline(\"project\", LocalDate.now(), LocalTime.now());","lastModifiedDate":"2021-09-04"},{"lineNumber":23,"author":{"gitId":"Imranr2"},"content":"        assertEquals(\"project\", deadline.getName());","lastModifiedDate":"2021-08-20"},{"lineNumber":24,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":25,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":26,"author":{"gitId":"Imranr2"},"content":"    @Test","lastModifiedDate":"2021-08-20"},{"lineNumber":27,"author":{"gitId":"Imranr2"},"content":"    public void testDeadlineToString() {","lastModifiedDate":"2021-08-20"},{"lineNumber":28,"author":{"gitId":"Imranr2"},"content":"        Deadline deadline \u003d new Deadline(\"project\", LocalDate.of(2021, 3, 4),","lastModifiedDate":"2021-09-04"},{"lineNumber":29,"author":{"gitId":"Imranr2"},"content":"                LocalTime.of(18, 30));","lastModifiedDate":"2021-09-04"},{"lineNumber":30,"author":{"gitId":"Imranr2"},"content":"        assertEquals(\"[D][ ] project (by: Mar 4 2021 6:30 PM)\", deadline.toString());","lastModifiedDate":"2021-08-21"},{"lineNumber":31,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":32,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":33,"author":{"gitId":"Imranr2"},"content":"    @Test","lastModifiedDate":"2021-08-20"},{"lineNumber":34,"author":{"gitId":"Imranr2"},"content":"    public void testDeadlineToggleIsDone() {","lastModifiedDate":"2021-08-20"},{"lineNumber":35,"author":{"gitId":"Imranr2"},"content":"        Deadline deadline \u003d new Deadline(\"project\", LocalDate.now(), LocalTime.now());","lastModifiedDate":"2021-09-04"},{"lineNumber":36,"author":{"gitId":"Imranr2"},"content":"        assertFalse(deadline.isDone());","lastModifiedDate":"2021-08-20"},{"lineNumber":37,"author":{"gitId":"Imranr2"},"content":"        deadline.setDone(true);","lastModifiedDate":"2021-08-20"},{"lineNumber":38,"author":{"gitId":"Imranr2"},"content":"        assertTrue(deadline.isDone());","lastModifiedDate":"2021-08-20"},{"lineNumber":39,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":40,"author":{"gitId":"Imranr2"},"content":"}","lastModifiedDate":"2021-08-20"}],"authorContributionMap":{"Imranr2":40}},{"path":"src/test/java/lifeline/task/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Imranr2"},"content":"package lifeline.task;","lastModifiedDate":"2021-08-20"},{"lineNumber":2,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":3,"author":{"gitId":"Imranr2"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-20"},{"lineNumber":4,"author":{"gitId":"Imranr2"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-08-20"},{"lineNumber":5,"author":{"gitId":"Imranr2"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-08-20"},{"lineNumber":6,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":7,"author":{"gitId":"Imranr2"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-20"},{"lineNumber":8,"author":{"gitId":"Imranr2"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-08-20"},{"lineNumber":9,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":10,"author":{"gitId":"Imranr2"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-20"},{"lineNumber":11,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":12,"author":{"gitId":"Imranr2"},"content":"public class EventTest {","lastModifiedDate":"2021-08-20"},{"lineNumber":13,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":14,"author":{"gitId":"Imranr2"},"content":"    @Test","lastModifiedDate":"2021-08-20"},{"lineNumber":15,"author":{"gitId":"Imranr2"},"content":"    public void testNewEventIsDoneIsFalse() {","lastModifiedDate":"2021-08-20"},{"lineNumber":16,"author":{"gitId":"Imranr2"},"content":"        Event event \u003d new Event(\"wedding\", LocalDate.now(), LocalTime.of(10, 30),","lastModifiedDate":"2021-08-20"},{"lineNumber":17,"author":{"gitId":"Imranr2"},"content":"                LocalTime.of(12, 30));","lastModifiedDate":"2021-08-20"},{"lineNumber":18,"author":{"gitId":"Imranr2"},"content":"        assertFalse(event.isDone());","lastModifiedDate":"2021-08-20"},{"lineNumber":19,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":20,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":21,"author":{"gitId":"Imranr2"},"content":"    @Test","lastModifiedDate":"2021-08-20"},{"lineNumber":22,"author":{"gitId":"Imranr2"},"content":"    public void testEventGetName() {","lastModifiedDate":"2021-08-20"},{"lineNumber":23,"author":{"gitId":"Imranr2"},"content":"        Event event \u003d new Event(\"wedding\", LocalDate.now(), LocalTime.of(10, 30),","lastModifiedDate":"2021-08-20"},{"lineNumber":24,"author":{"gitId":"Imranr2"},"content":"                LocalTime.of(12, 30));","lastModifiedDate":"2021-08-20"},{"lineNumber":25,"author":{"gitId":"Imranr2"},"content":"        assertEquals(\"wedding\", event.getName());","lastModifiedDate":"2021-08-20"},{"lineNumber":26,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":27,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":28,"author":{"gitId":"Imranr2"},"content":"    @Test","lastModifiedDate":"2021-08-20"},{"lineNumber":29,"author":{"gitId":"Imranr2"},"content":"    public void testEventToString() {","lastModifiedDate":"2021-08-20"},{"lineNumber":30,"author":{"gitId":"Imranr2"},"content":"        Event event \u003d new Event(\"wedding\", LocalDate.of(2021, 3, 4), LocalTime.of(10, 30),","lastModifiedDate":"2021-08-20"},{"lineNumber":31,"author":{"gitId":"Imranr2"},"content":"                LocalTime.of(12, 30));","lastModifiedDate":"2021-08-20"},{"lineNumber":32,"author":{"gitId":"Imranr2"},"content":"        assertEquals(\"[E][ ] wedding (at: Mar 4 2021 10:30 AM - 12:30 PM)\", event.toString());","lastModifiedDate":"2021-08-21"},{"lineNumber":33,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":34,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":35,"author":{"gitId":"Imranr2"},"content":"    @Test","lastModifiedDate":"2021-08-20"},{"lineNumber":36,"author":{"gitId":"Imranr2"},"content":"    public void testEventToggleIsDone() {","lastModifiedDate":"2021-08-20"},{"lineNumber":37,"author":{"gitId":"Imranr2"},"content":"        Event event \u003d new Event(\"wedding\", LocalDate.now(), LocalTime.of(10, 30),","lastModifiedDate":"2021-08-20"},{"lineNumber":38,"author":{"gitId":"Imranr2"},"content":"                LocalTime.of(12, 30));","lastModifiedDate":"2021-08-20"},{"lineNumber":39,"author":{"gitId":"Imranr2"},"content":"        assertFalse(event.isDone());","lastModifiedDate":"2021-08-20"},{"lineNumber":40,"author":{"gitId":"Imranr2"},"content":"        event.setDone(true);","lastModifiedDate":"2021-08-20"},{"lineNumber":41,"author":{"gitId":"Imranr2"},"content":"        assertTrue(event.isDone());","lastModifiedDate":"2021-08-20"},{"lineNumber":42,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":43,"author":{"gitId":"Imranr2"},"content":"}","lastModifiedDate":"2021-08-20"}],"authorContributionMap":{"Imranr2":43}},{"path":"src/test/java/lifeline/task/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Imranr2"},"content":"package lifeline.task;","lastModifiedDate":"2021-08-20"},{"lineNumber":2,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":3,"author":{"gitId":"Imranr2"},"content":"import static lifeline.util.ErrorString.ERROR_TASK_ALREADY_DONE;","lastModifiedDate":"2021-09-03"},{"lineNumber":4,"author":{"gitId":"Imranr2"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-20"},{"lineNumber":5,"author":{"gitId":"Imranr2"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-08-20"},{"lineNumber":6,"author":{"gitId":"Imranr2"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-08-20"},{"lineNumber":7,"author":{"gitId":"Imranr2"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2021-08-20"},{"lineNumber":8,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":9,"author":{"gitId":"Imranr2"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-20"},{"lineNumber":10,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":11,"author":{"gitId":"Imranr2"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-20"},{"lineNumber":12,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":13,"author":{"gitId":"Imranr2"},"content":"import lifeline.exception.LifelineException;","lastModifiedDate":"2021-08-20"},{"lineNumber":14,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":15,"author":{"gitId":"Imranr2"},"content":"public class TaskListTest {","lastModifiedDate":"2021-08-20"},{"lineNumber":16,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":17,"author":{"gitId":"Imranr2"},"content":"    @Test","lastModifiedDate":"2021-08-20"},{"lineNumber":18,"author":{"gitId":"Imranr2"},"content":"    public void testAddTask() {","lastModifiedDate":"2021-08-20"},{"lineNumber":19,"author":{"gitId":"Imranr2"},"content":"        TaskList taskList \u003d new TaskList(new ArrayList\u003cTask\u003e());","lastModifiedDate":"2021-08-20"},{"lineNumber":20,"author":{"gitId":"Imranr2"},"content":"        ToDo todo \u003d new ToDo(\"read book\");","lastModifiedDate":"2021-08-20"},{"lineNumber":21,"author":{"gitId":"Imranr2"},"content":"        assertEquals(0, taskList.getSize());","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"Imranr2"},"content":"        taskList.add(todo);","lastModifiedDate":"2021-08-20"},{"lineNumber":23,"author":{"gitId":"Imranr2"},"content":"        assertEquals(1, taskList.getSize());","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":25,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":26,"author":{"gitId":"Imranr2"},"content":"    @Test","lastModifiedDate":"2021-08-20"},{"lineNumber":27,"author":{"gitId":"Imranr2"},"content":"    public void testDeleteTask() {","lastModifiedDate":"2021-08-20"},{"lineNumber":28,"author":{"gitId":"Imranr2"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-20"},{"lineNumber":29,"author":{"gitId":"Imranr2"},"content":"        ToDo todo \u003d new ToDo(\"read book\");","lastModifiedDate":"2021-08-20"},{"lineNumber":30,"author":{"gitId":"Imranr2"},"content":"        tasks.add(todo);","lastModifiedDate":"2021-08-20"},{"lineNumber":31,"author":{"gitId":"Imranr2"},"content":"        TaskList taskList \u003d new TaskList(tasks);","lastModifiedDate":"2021-08-20"},{"lineNumber":32,"author":{"gitId":"Imranr2"},"content":"        assertEquals(1, taskList.getSize());","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"Imranr2"},"content":"        taskList.deleteTask(0);","lastModifiedDate":"2021-08-20"},{"lineNumber":34,"author":{"gitId":"Imranr2"},"content":"        assertEquals(0, taskList.getSize());","lastModifiedDate":"2021-08-30"},{"lineNumber":35,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":36,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":37,"author":{"gitId":"Imranr2"},"content":"    @Test","lastModifiedDate":"2021-08-20"},{"lineNumber":38,"author":{"gitId":"Imranr2"},"content":"    public void completeTask_uncompletedTask_success() throws LifelineException {","lastModifiedDate":"2021-08-20"},{"lineNumber":39,"author":{"gitId":"Imranr2"},"content":"        TaskList taskList \u003d new TaskList(new ArrayList\u003cTask\u003e());","lastModifiedDate":"2021-08-20"},{"lineNumber":40,"author":{"gitId":"Imranr2"},"content":"        ToDo todo \u003d new ToDo(\"read book\");","lastModifiedDate":"2021-08-20"},{"lineNumber":41,"author":{"gitId":"Imranr2"},"content":"        taskList.add(todo);","lastModifiedDate":"2021-08-20"},{"lineNumber":42,"author":{"gitId":"Imranr2"},"content":"        assertFalse(taskList.getTask(0).isDone());","lastModifiedDate":"2021-08-31"},{"lineNumber":43,"author":{"gitId":"Imranr2"},"content":"        taskList.completeTask(0);","lastModifiedDate":"2021-08-20"},{"lineNumber":44,"author":{"gitId":"Imranr2"},"content":"        assertTrue(taskList.getTask(0).isDone());","lastModifiedDate":"2021-08-31"},{"lineNumber":45,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":46,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":47,"author":{"gitId":"Imranr2"},"content":"    @Test","lastModifiedDate":"2021-08-20"},{"lineNumber":48,"author":{"gitId":"Imranr2"},"content":"    public void completeTask_completedTask_exceptionThrown() {","lastModifiedDate":"2021-08-20"},{"lineNumber":49,"author":{"gitId":"Imranr2"},"content":"        try {","lastModifiedDate":"2021-08-20"},{"lineNumber":50,"author":{"gitId":"Imranr2"},"content":"            TaskList taskList \u003d new TaskList(new ArrayList\u003cTask\u003e());","lastModifiedDate":"2021-08-20"},{"lineNumber":51,"author":{"gitId":"Imranr2"},"content":"            ToDo todo \u003d new ToDo(\"read book\", true);","lastModifiedDate":"2021-08-20"},{"lineNumber":52,"author":{"gitId":"Imranr2"},"content":"            taskList.add(todo);","lastModifiedDate":"2021-08-20"},{"lineNumber":53,"author":{"gitId":"Imranr2"},"content":"            taskList.completeTask(0);","lastModifiedDate":"2021-08-20"},{"lineNumber":54,"author":{"gitId":"Imranr2"},"content":"            fail();","lastModifiedDate":"2021-08-20"},{"lineNumber":55,"author":{"gitId":"Imranr2"},"content":"        } catch (LifelineException e) {","lastModifiedDate":"2021-08-20"},{"lineNumber":56,"author":{"gitId":"Imranr2"},"content":"            assertEquals(ERROR_TASK_ALREADY_DONE, e.getMessage());","lastModifiedDate":"2021-09-03"},{"lineNumber":57,"author":{"gitId":"Imranr2"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":58,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":59,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":60,"author":{"gitId":"Imranr2"},"content":"    @Test","lastModifiedDate":"2021-08-20"},{"lineNumber":61,"author":{"gitId":"Imranr2"},"content":"    public void testGetTaskList() {","lastModifiedDate":"2021-08-20"},{"lineNumber":62,"author":{"gitId":"Imranr2"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-20"},{"lineNumber":63,"author":{"gitId":"Imranr2"},"content":"        TaskList taskList \u003d new TaskList(tasks);","lastModifiedDate":"2021-08-20"},{"lineNumber":64,"author":{"gitId":"Imranr2"},"content":"        assertEquals(tasks, taskList.getTaskList());","lastModifiedDate":"2021-08-20"},{"lineNumber":65,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":66,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":67,"author":{"gitId":"Imranr2"},"content":"    @Test","lastModifiedDate":"2021-08-20"},{"lineNumber":68,"author":{"gitId":"Imranr2"},"content":"    public void testGetTask() {","lastModifiedDate":"2021-08-20"},{"lineNumber":69,"author":{"gitId":"Imranr2"},"content":"        TaskList taskList \u003d new TaskList(new ArrayList\u003cTask\u003e());","lastModifiedDate":"2021-08-20"},{"lineNumber":70,"author":{"gitId":"Imranr2"},"content":"        ToDo todo \u003d new ToDo(\"read book\");","lastModifiedDate":"2021-08-20"},{"lineNumber":71,"author":{"gitId":"Imranr2"},"content":"        taskList.add(todo);","lastModifiedDate":"2021-08-20"},{"lineNumber":72,"author":{"gitId":"Imranr2"},"content":"        assertEquals(todo, taskList.getTask(0));","lastModifiedDate":"2021-08-31"},{"lineNumber":73,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":74,"author":{"gitId":"Imranr2"},"content":"}","lastModifiedDate":"2021-08-20"}],"authorContributionMap":{"Imranr2":74}},{"path":"src/test/java/lifeline/task/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Imranr2"},"content":"package lifeline.task;","lastModifiedDate":"2021-08-20"},{"lineNumber":2,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":3,"author":{"gitId":"Imranr2"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-20"},{"lineNumber":4,"author":{"gitId":"Imranr2"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-08-20"},{"lineNumber":5,"author":{"gitId":"Imranr2"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-08-20"},{"lineNumber":6,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":7,"author":{"gitId":"Imranr2"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-20"},{"lineNumber":8,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":9,"author":{"gitId":"Imranr2"},"content":"public class TaskTest {","lastModifiedDate":"2021-08-20"},{"lineNumber":10,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":11,"author":{"gitId":"Imranr2"},"content":"    @Test","lastModifiedDate":"2021-08-20"},{"lineNumber":12,"author":{"gitId":"Imranr2"},"content":"    public void testNewTaskIsDoneIsFalse() {","lastModifiedDate":"2021-08-20"},{"lineNumber":13,"author":{"gitId":"Imranr2"},"content":"        Task task \u003d new Task(\"read book\");","lastModifiedDate":"2021-08-20"},{"lineNumber":14,"author":{"gitId":"Imranr2"},"content":"        assertFalse(task.isDone());","lastModifiedDate":"2021-08-20"},{"lineNumber":15,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":16,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":17,"author":{"gitId":"Imranr2"},"content":"    @Test","lastModifiedDate":"2021-08-20"},{"lineNumber":18,"author":{"gitId":"Imranr2"},"content":"    public void testTaskGetName() {","lastModifiedDate":"2021-08-20"},{"lineNumber":19,"author":{"gitId":"Imranr2"},"content":"        Task task \u003d new Task(\"read book\");","lastModifiedDate":"2021-08-20"},{"lineNumber":20,"author":{"gitId":"Imranr2"},"content":"        assertEquals(\"read book\", task.getName());","lastModifiedDate":"2021-08-20"},{"lineNumber":21,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":22,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":23,"author":{"gitId":"Imranr2"},"content":"    @Test","lastModifiedDate":"2021-08-20"},{"lineNumber":24,"author":{"gitId":"Imranr2"},"content":"    public void testTaskToString() {","lastModifiedDate":"2021-08-20"},{"lineNumber":25,"author":{"gitId":"Imranr2"},"content":"        Task task \u003d new Task(\"read book\");","lastModifiedDate":"2021-08-20"},{"lineNumber":26,"author":{"gitId":"Imranr2"},"content":"        assertEquals(\"[ ] read book\", task.toString());","lastModifiedDate":"2021-08-21"},{"lineNumber":27,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":28,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":29,"author":{"gitId":"Imranr2"},"content":"    @Test","lastModifiedDate":"2021-08-20"},{"lineNumber":30,"author":{"gitId":"Imranr2"},"content":"    public void testTaskToggleIsDone() {","lastModifiedDate":"2021-08-20"},{"lineNumber":31,"author":{"gitId":"Imranr2"},"content":"        Task task \u003d new Task(\"read book\");","lastModifiedDate":"2021-08-20"},{"lineNumber":32,"author":{"gitId":"Imranr2"},"content":"        assertFalse(task.isDone());","lastModifiedDate":"2021-08-20"},{"lineNumber":33,"author":{"gitId":"Imranr2"},"content":"        task.setDone(true);","lastModifiedDate":"2021-08-20"},{"lineNumber":34,"author":{"gitId":"Imranr2"},"content":"        assertTrue(task.isDone());","lastModifiedDate":"2021-08-20"},{"lineNumber":35,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":36,"author":{"gitId":"Imranr2"},"content":"}","lastModifiedDate":"2021-08-20"}],"authorContributionMap":{"Imranr2":36}},{"path":"src/test/java/lifeline/task/ToDoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Imranr2"},"content":"package lifeline.task;","lastModifiedDate":"2021-08-20"},{"lineNumber":2,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":3,"author":{"gitId":"Imranr2"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-20"},{"lineNumber":4,"author":{"gitId":"Imranr2"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-08-20"},{"lineNumber":5,"author":{"gitId":"Imranr2"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-08-20"},{"lineNumber":6,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":7,"author":{"gitId":"Imranr2"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-20"},{"lineNumber":8,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":9,"author":{"gitId":"Imranr2"},"content":"public class ToDoTest {","lastModifiedDate":"2021-08-20"},{"lineNumber":10,"author":{"gitId":"Imranr2"},"content":"    @Test","lastModifiedDate":"2021-08-20"},{"lineNumber":11,"author":{"gitId":"Imranr2"},"content":"    public void testNewToDoIsDoneIsFalse() {","lastModifiedDate":"2021-08-20"},{"lineNumber":12,"author":{"gitId":"Imranr2"},"content":"        ToDo todo \u003d new ToDo(\"read book\");","lastModifiedDate":"2021-08-20"},{"lineNumber":13,"author":{"gitId":"Imranr2"},"content":"        assertFalse(todo.isDone());","lastModifiedDate":"2021-08-20"},{"lineNumber":14,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":15,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":16,"author":{"gitId":"Imranr2"},"content":"    @Test","lastModifiedDate":"2021-08-20"},{"lineNumber":17,"author":{"gitId":"Imranr2"},"content":"    public void testToDoGetName() {","lastModifiedDate":"2021-08-20"},{"lineNumber":18,"author":{"gitId":"Imranr2"},"content":"        ToDo todo \u003d new ToDo(\"read book\");","lastModifiedDate":"2021-08-20"},{"lineNumber":19,"author":{"gitId":"Imranr2"},"content":"        assertEquals(\"read book\", todo.getName());","lastModifiedDate":"2021-08-20"},{"lineNumber":20,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":21,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":22,"author":{"gitId":"Imranr2"},"content":"    @Test","lastModifiedDate":"2021-08-20"},{"lineNumber":23,"author":{"gitId":"Imranr2"},"content":"    public void testToDoToString() {","lastModifiedDate":"2021-08-20"},{"lineNumber":24,"author":{"gitId":"Imranr2"},"content":"        ToDo todo \u003d new ToDo(\"read book\");","lastModifiedDate":"2021-08-20"},{"lineNumber":25,"author":{"gitId":"Imranr2"},"content":"        assertEquals(\"[T][ ] read book\", todo.toString());","lastModifiedDate":"2021-08-21"},{"lineNumber":26,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":27,"author":{"gitId":"Imranr2"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":28,"author":{"gitId":"Imranr2"},"content":"    @Test","lastModifiedDate":"2021-08-20"},{"lineNumber":29,"author":{"gitId":"Imranr2"},"content":"    public void testToDoToggleIsDone() {","lastModifiedDate":"2021-08-20"},{"lineNumber":30,"author":{"gitId":"Imranr2"},"content":"        ToDo todo \u003d new ToDo(\"read book\");","lastModifiedDate":"2021-08-20"},{"lineNumber":31,"author":{"gitId":"Imranr2"},"content":"        assertFalse(todo.isDone());","lastModifiedDate":"2021-08-20"},{"lineNumber":32,"author":{"gitId":"Imranr2"},"content":"        todo.setDone(true);","lastModifiedDate":"2021-08-20"},{"lineNumber":33,"author":{"gitId":"Imranr2"},"content":"        assertTrue(todo.isDone());","lastModifiedDate":"2021-08-20"},{"lineNumber":34,"author":{"gitId":"Imranr2"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":35,"author":{"gitId":"Imranr2"},"content":"}","lastModifiedDate":"2021-08-20"}],"authorContributionMap":{"Imranr2":35}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Imranr2"},"content":"Hello","lastModifiedDate":"2021-08-13"},{"lineNumber":2,"author":{"gitId":"Imranr2"},"content":"todo","lastModifiedDate":"2021-08-14"},{"lineNumber":3,"author":{"gitId":"Imranr2"},"content":"deadline","lastModifiedDate":"2021-08-14"},{"lineNumber":4,"author":{"gitId":"Imranr2"},"content":"event","lastModifiedDate":"2021-08-14"},{"lineNumber":5,"author":{"gitId":"Imranr2"},"content":"todo read book","lastModifiedDate":"2021-08-13"},{"lineNumber":6,"author":{"gitId":"Imranr2"},"content":"list","lastModifiedDate":"2021-08-13"},{"lineNumber":7,"author":{"gitId":"Imranr2"},"content":"done 1","lastModifiedDate":"2021-08-13"},{"lineNumber":8,"author":{"gitId":"Imranr2"},"content":"list","lastModifiedDate":"2021-08-13"},{"lineNumber":9,"author":{"gitId":"Imranr2"},"content":"done 2","lastModifiedDate":"2021-08-14"},{"lineNumber":10,"author":{"gitId":"Imranr2"},"content":"done","lastModifiedDate":"2021-08-14"},{"lineNumber":11,"author":{"gitId":"Imranr2"},"content":"done abc","lastModifiedDate":"2021-08-14"},{"lineNumber":12,"author":{"gitId":"Imranr2"},"content":"event meeting /at Sun 1-3pm","lastModifiedDate":"2021-08-13"},{"lineNumber":13,"author":{"gitId":"Imranr2"},"content":"delete","lastModifiedDate":"2021-08-14"},{"lineNumber":14,"author":{"gitId":"Imranr2"},"content":"delete abc","lastModifiedDate":"2021-08-14"},{"lineNumber":15,"author":{"gitId":"Imranr2"},"content":"delete 3","lastModifiedDate":"2021-08-14"},{"lineNumber":16,"author":{"gitId":"Imranr2"},"content":"delete 1","lastModifiedDate":"2021-08-14"},{"lineNumber":17,"author":{"gitId":"Imranr2"},"content":"deadline return book /by Sunday","lastModifiedDate":"2021-08-13"},{"lineNumber":18,"author":{"gitId":"Imranr2"},"content":"list","lastModifiedDate":"2021-08-13"},{"lineNumber":19,"author":{"gitId":"Imranr2"},"content":"bye","lastModifiedDate":"2021-08-13"}],"authorContributionMap":{"Imranr2":19}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"Imranr2"},"content":"java -classpath ..\\bin Main \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Imranr2":1,"-":20}}]

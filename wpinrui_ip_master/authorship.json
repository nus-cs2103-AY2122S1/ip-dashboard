[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"wpinrui"},"content":"# duke.Duke project template","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"wpinrui"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"wpinrui":2,"-":22}},{"path":"src/main/java/duke/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wpinrui"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"wpinrui"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"wpinrui"},"content":" * Represents the action requested by the user that Duke understands.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"wpinrui"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"wpinrui"},"content":"public class Command {","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"wpinrui"},"content":"    private String operation;","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"wpinrui"},"content":"    private int index;","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"wpinrui"},"content":"    private String description;","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"wpinrui"},"content":"    private String time;","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"wpinrui"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"wpinrui"},"content":"     * Class constructor specifying an operation that requires no other input.","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"wpinrui"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"wpinrui"},"content":"     * @param operation the operation for Duke to execute","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"wpinrui"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"wpinrui"},"content":"    public Command(String operation) {","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"wpinrui"},"content":"        this.operation \u003d operation;","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"wpinrui"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"wpinrui"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"wpinrui"},"content":"     * Class constructor specifying an operation that takes a task index.","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"wpinrui"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"wpinrui"},"content":"     * @param operation The operation for Duke to execute","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"wpinrui"},"content":"     * @param index The index of the task in Duke\u0027s task list","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"wpinrui"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"wpinrui"},"content":"    public Command(String operation, int index) {","lastModifiedDate":"2021-08-18"},{"lineNumber":28,"author":{"gitId":"wpinrui"},"content":"        this.operation \u003d operation;","lastModifiedDate":"2021-08-18"},{"lineNumber":29,"author":{"gitId":"wpinrui"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-08-18"},{"lineNumber":30,"author":{"gitId":"wpinrui"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":31,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":32,"author":{"gitId":"wpinrui"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"wpinrui"},"content":"     * Class constructor specifying an operation that takes a description.","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"wpinrui"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"wpinrui"},"content":"     * @param operation The operation for Duke to execute","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"wpinrui"},"content":"     * @param description Description of the task","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"wpinrui"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"wpinrui"},"content":"    public Command(String operation, String description) {","lastModifiedDate":"2021-08-18"},{"lineNumber":39,"author":{"gitId":"wpinrui"},"content":"        this.operation \u003d operation;","lastModifiedDate":"2021-08-18"},{"lineNumber":40,"author":{"gitId":"wpinrui"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-18"},{"lineNumber":41,"author":{"gitId":"wpinrui"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":42,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":43,"author":{"gitId":"wpinrui"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"wpinrui"},"content":"     * Class constructor specifying an operation that takes a description and","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"wpinrui"},"content":"     * a time string. The time string will be converted to a LocalDate object","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"wpinrui"},"content":"     * if it is of the form YYYY-MM-DD.","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"wpinrui"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"wpinrui"},"content":"     * @param operation The operation for Duke to execute","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"wpinrui"},"content":"     * @param description Description of the task","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"wpinrui"},"content":"     * @param time Time that the task will occur / should be done by","lastModifiedDate":"2021-08-26"},{"lineNumber":51,"author":{"gitId":"wpinrui"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":52,"author":{"gitId":"wpinrui"},"content":"    public Command(String operation, String description, String time) {","lastModifiedDate":"2021-08-18"},{"lineNumber":53,"author":{"gitId":"wpinrui"},"content":"        this.operation \u003d operation;","lastModifiedDate":"2021-08-18"},{"lineNumber":54,"author":{"gitId":"wpinrui"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-18"},{"lineNumber":55,"author":{"gitId":"wpinrui"},"content":"        this.time \u003d time;","lastModifiedDate":"2021-08-18"},{"lineNumber":56,"author":{"gitId":"wpinrui"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":57,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":58,"author":{"gitId":"wpinrui"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"wpinrui"},"content":"     * Returns the specific operation as a String that Duke is able to understand.","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"wpinrui"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"wpinrui"},"content":"     * @return Duke operation","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"wpinrui"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":63,"author":{"gitId":"wpinrui"},"content":"    public String getOperation() {","lastModifiedDate":"2021-08-18"},{"lineNumber":64,"author":{"gitId":"wpinrui"},"content":"        return operation;","lastModifiedDate":"2021-08-26"},{"lineNumber":65,"author":{"gitId":"wpinrui"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":66,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":67,"author":{"gitId":"wpinrui"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":68,"author":{"gitId":"wpinrui"},"content":"     * Returns the index of the task in Duke\u0027s task list for commands that require","lastModifiedDate":"2021-08-26"},{"lineNumber":69,"author":{"gitId":"wpinrui"},"content":"     * the user to specify it.","lastModifiedDate":"2021-08-26"},{"lineNumber":70,"author":{"gitId":"wpinrui"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":71,"author":{"gitId":"wpinrui"},"content":"     * @return Index of task in task list","lastModifiedDate":"2021-08-26"},{"lineNumber":72,"author":{"gitId":"wpinrui"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":73,"author":{"gitId":"wpinrui"},"content":"    public int getIndex() {","lastModifiedDate":"2021-08-18"},{"lineNumber":74,"author":{"gitId":"wpinrui"},"content":"        return index;","lastModifiedDate":"2021-08-26"},{"lineNumber":75,"author":{"gitId":"wpinrui"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":76,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":77,"author":{"gitId":"wpinrui"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":78,"author":{"gitId":"wpinrui"},"content":"     * Returns the description of the task for commands that require the user to","lastModifiedDate":"2021-08-26"},{"lineNumber":79,"author":{"gitId":"wpinrui"},"content":"     * specify it.","lastModifiedDate":"2021-08-26"},{"lineNumber":80,"author":{"gitId":"wpinrui"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":81,"author":{"gitId":"wpinrui"},"content":"     * @return Description of task specified by user","lastModifiedDate":"2021-08-26"},{"lineNumber":82,"author":{"gitId":"wpinrui"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":83,"author":{"gitId":"wpinrui"},"content":"    public String getDescription() {","lastModifiedDate":"2021-08-18"},{"lineNumber":84,"author":{"gitId":"wpinrui"},"content":"        return description;","lastModifiedDate":"2021-08-26"},{"lineNumber":85,"author":{"gitId":"wpinrui"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":86,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":87,"author":{"gitId":"wpinrui"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":88,"author":{"gitId":"wpinrui"},"content":"     * Returns the string representation of the time of tasks for commands that","lastModifiedDate":"2021-08-26"},{"lineNumber":89,"author":{"gitId":"wpinrui"},"content":"     * require the user to specify it.","lastModifiedDate":"2021-08-26"},{"lineNumber":90,"author":{"gitId":"wpinrui"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":91,"author":{"gitId":"wpinrui"},"content":"     * @return String representation of task time","lastModifiedDate":"2021-08-26"},{"lineNumber":92,"author":{"gitId":"wpinrui"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":93,"author":{"gitId":"wpinrui"},"content":"    public String getTime() {","lastModifiedDate":"2021-08-18"},{"lineNumber":94,"author":{"gitId":"wpinrui"},"content":"        return time;","lastModifiedDate":"2021-08-26"},{"lineNumber":95,"author":{"gitId":"wpinrui"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":96,"author":{"gitId":"wpinrui"},"content":"}","lastModifiedDate":"2021-08-18"},{"lineNumber":97,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":98,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"wpinrui":98}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wpinrui"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"wpinrui"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"wpinrui"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"wpinrui"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"wpinrui"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"wpinrui"},"content":" * Represents a deadline task, which has a description and a date by which the","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"wpinrui"},"content":" * task should be completed.","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"wpinrui"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"wpinrui"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-13"},{"lineNumber":12,"author":{"gitId":"wpinrui"},"content":"    protected String by;","lastModifiedDate":"2021-08-13"},{"lineNumber":13,"author":{"gitId":"wpinrui"},"content":"    protected LocalDate byDate;","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-13"},{"lineNumber":15,"author":{"gitId":"wpinrui"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"wpinrui"},"content":"     * Class constructor that takes a description and a string which describes","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"wpinrui"},"content":"     * the deadline of the task. If the string is given in the form YYYY-MM-DD,","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"wpinrui"},"content":"     * a LocalDate object will be created to represent the date.","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"wpinrui"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"wpinrui"},"content":"     * @param description Description of the deadline task","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"wpinrui"},"content":"     * @param by          Deadline of the task","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"wpinrui"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"wpinrui"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2021-08-13"},{"lineNumber":24,"author":{"gitId":"wpinrui"},"content":"        super(description);","lastModifiedDate":"2021-08-13"},{"lineNumber":25,"author":{"gitId":"wpinrui"},"content":"        this.by \u003d by;","lastModifiedDate":"2021-08-13"},{"lineNumber":26,"author":{"gitId":"wpinrui"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"wpinrui"},"content":"            byDate \u003d LocalDate.parse(by);","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"wpinrui"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"wpinrui"},"content":"            byDate \u003d null;","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"wpinrui"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"wpinrui"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"wpinrui"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"wpinrui"},"content":"     * Returns the LocalDate object which represents the deadline of the task","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"wpinrui"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"wpinrui"},"content":"     * @return Deadline of the task","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"wpinrui"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"wpinrui"},"content":"    public LocalDate getByDate() {","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"wpinrui"},"content":"        return byDate;","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"wpinrui"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"wpinrui"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"wpinrui"},"content":"     * Returns a formatted String representing the deadline of the task in the form","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"wpinrui"},"content":"     * MMM d YYYY.","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"wpinrui"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"wpinrui"},"content":"     * @return Formatted date string","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"wpinrui"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"wpinrui"},"content":"    public String parseByDate() {","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"wpinrui"},"content":"        return getByDate().format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"wpinrui"},"content":"    }","lastModifiedDate":"2021-08-13"},{"lineNumber":51,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-13"},{"lineNumber":52,"author":{"gitId":"wpinrui"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":53,"author":{"gitId":"wpinrui"},"content":"     * Returns the string representation of the deadline, including whether it","lastModifiedDate":"2021-08-26"},{"lineNumber":54,"author":{"gitId":"wpinrui"},"content":"     * has been completed and when it is due.","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"wpinrui"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":56,"author":{"gitId":"wpinrui"},"content":"     * @return String representation of deadline task","lastModifiedDate":"2021-08-26"},{"lineNumber":57,"author":{"gitId":"wpinrui"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"wpinrui"},"content":"    @Override","lastModifiedDate":"2021-08-13"},{"lineNumber":59,"author":{"gitId":"wpinrui"},"content":"    public String toString() {","lastModifiedDate":"2021-08-13"},{"lineNumber":60,"author":{"gitId":"wpinrui"},"content":"        return \"[D]\" + super.toString()","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"wpinrui"},"content":"                + \" (by: \"","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"wpinrui"},"content":"                + ((byDate \u003d\u003d null) ? by : parseByDate())","lastModifiedDate":"2021-08-26"},{"lineNumber":63,"author":{"gitId":"wpinrui"},"content":"                + \")\";","lastModifiedDate":"2021-08-26"},{"lineNumber":64,"author":{"gitId":"wpinrui"},"content":"    }","lastModifiedDate":"2021-08-13"},{"lineNumber":65,"author":{"gitId":"wpinrui"},"content":"}","lastModifiedDate":"2021-08-13"}],"authorContributionMap":{"wpinrui":65}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wpinrui"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"wpinrui"},"content":"import java.io.EOFException;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"wpinrui"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"wpinrui"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-13"},{"lineNumber":6,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-13"},{"lineNumber":7,"author":{"gitId":"wpinrui"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"wpinrui"},"content":" * Main class of the Duke chat-bot. When the main class is run, it creates an","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"wpinrui"},"content":" * instance of Duke which allows text-based user interaction.","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"wpinrui"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":12,"author":{"gitId":"wpinrui"},"content":"    private final Ui ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"wpinrui"},"content":"    private final Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"wpinrui"},"content":"    private final Storage storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"wpinrui"},"content":"    private TaskList tasks \u003d new TaskList();","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-13"},{"lineNumber":17,"author":{"gitId":"wpinrui"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"wpinrui"},"content":"     * Class constructor which takes the relative filepath where Duke\u0027s save-file","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"wpinrui"},"content":"     * is stored.","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"wpinrui"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"wpinrui"},"content":"     * @param filePath Path of the save-file","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"wpinrui"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"wpinrui"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"wpinrui"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"wpinrui"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"wpinrui"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"wpinrui"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"wpinrui"},"content":"     * Point of entry through which Duke can be run.","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"wpinrui"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"wpinrui"},"content":"     * @param args The commandline arguments.","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"wpinrui"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"wpinrui"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"wpinrui"},"content":"        new Duke(\"duke.txt\").run();","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"wpinrui"},"content":"    }","lastModifiedDate":"2021-08-13"},{"lineNumber":36,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-13"},{"lineNumber":37,"author":{"gitId":"wpinrui"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"wpinrui"},"content":"     * Loads the save file and begins to accept user input.","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"wpinrui"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"wpinrui"},"content":"    public void run() {","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"wpinrui"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"wpinrui"},"content":"            tasks \u003d storage.readSave();","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"wpinrui"},"content":"        } catch (EOFException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"wpinrui"},"content":"            ui.showNewSave();","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"wpinrui"},"content":"        } catch (IOException | ClassNotFoundException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"wpinrui"},"content":"            ui.showReadSaveError();","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"wpinrui"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"wpinrui"},"content":"        ui.showIntro();","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"wpinrui"},"content":"        outer:","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"wpinrui"},"content":"        while (true) {","lastModifiedDate":"2021-08-13"},{"lineNumber":51,"author":{"gitId":"wpinrui"},"content":"            String userEntry \u003d sc.nextLine();","lastModifiedDate":"2021-08-13"},{"lineNumber":52,"author":{"gitId":"wpinrui"},"content":"            Command command;","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"wpinrui"},"content":"            try {","lastModifiedDate":"2021-08-18"},{"lineNumber":54,"author":{"gitId":"wpinrui"},"content":"                command \u003d Parser.parseUserInput(userEntry);","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"wpinrui"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2021-08-18"},{"lineNumber":56,"author":{"gitId":"wpinrui"},"content":"                ui.print(e.toString());","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"wpinrui"},"content":"                continue;","lastModifiedDate":"2021-08-18"},{"lineNumber":58,"author":{"gitId":"wpinrui"},"content":"            }","lastModifiedDate":"2021-08-18"},{"lineNumber":59,"author":{"gitId":"wpinrui"},"content":"            Task task;","lastModifiedDate":"2021-08-13"},{"lineNumber":60,"author":{"gitId":"wpinrui"},"content":"            switch (command.getOperation()) {","lastModifiedDate":"2021-08-18"},{"lineNumber":61,"author":{"gitId":"wpinrui"},"content":"            case \"bye\":","lastModifiedDate":"2021-08-13"},{"lineNumber":62,"author":{"gitId":"wpinrui"},"content":"                ui.showOutro();","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"wpinrui"},"content":"                try {","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"wpinrui"},"content":"                    storage.writeSave(tasks);","lastModifiedDate":"2021-08-26"},{"lineNumber":65,"author":{"gitId":"wpinrui"},"content":"                } catch (IOException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"wpinrui"},"content":"                    ui.showWriteSaveError();","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"wpinrui"},"content":"                }","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"wpinrui"},"content":"                break outer;","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"wpinrui"},"content":"            case \"list\":","lastModifiedDate":"2021-08-13"},{"lineNumber":70,"author":{"gitId":"wpinrui"},"content":"                ui.showTasks(tasks);","lastModifiedDate":"2021-08-26"},{"lineNumber":71,"author":{"gitId":"wpinrui"},"content":"                break;","lastModifiedDate":"2021-08-13"},{"lineNumber":72,"author":{"gitId":"wpinrui"},"content":"            case \"done\":","lastModifiedDate":"2021-08-13"},{"lineNumber":73,"author":{"gitId":"wpinrui"},"content":"                task \u003d tasks.get(command.getIndex() - 1);","lastModifiedDate":"2021-08-26"},{"lineNumber":74,"author":{"gitId":"wpinrui"},"content":"                task.setDone(true);","lastModifiedDate":"2021-08-13"},{"lineNumber":75,"author":{"gitId":"wpinrui"},"content":"                ui.showDone(task);","lastModifiedDate":"2021-08-25"},{"lineNumber":76,"author":{"gitId":"wpinrui"},"content":"                break;","lastModifiedDate":"2021-08-13"},{"lineNumber":77,"author":{"gitId":"wpinrui"},"content":"            case \"todo\":","lastModifiedDate":"2021-08-13"},{"lineNumber":78,"author":{"gitId":"wpinrui"},"content":"                task \u003d new ToDo(command.getDescription());","lastModifiedDate":"2021-08-18"},{"lineNumber":79,"author":{"gitId":"wpinrui"},"content":"                tasks.add(task);","lastModifiedDate":"2021-08-26"},{"lineNumber":80,"author":{"gitId":"wpinrui"},"content":"                ui.showAdded(task, tasks.size());","lastModifiedDate":"2021-08-26"},{"lineNumber":81,"author":{"gitId":"wpinrui"},"content":"                break;","lastModifiedDate":"2021-08-13"},{"lineNumber":82,"author":{"gitId":"wpinrui"},"content":"            case \"deadline\":","lastModifiedDate":"2021-08-13"},{"lineNumber":83,"author":{"gitId":"wpinrui"},"content":"                task \u003d new Deadline(command.getDescription(), command.getTime());","lastModifiedDate":"2021-08-18"},{"lineNumber":84,"author":{"gitId":"wpinrui"},"content":"                tasks.add(task);","lastModifiedDate":"2021-08-26"},{"lineNumber":85,"author":{"gitId":"wpinrui"},"content":"                ui.showAdded(task, tasks.size());","lastModifiedDate":"2021-08-26"},{"lineNumber":86,"author":{"gitId":"wpinrui"},"content":"                break;","lastModifiedDate":"2021-08-13"},{"lineNumber":87,"author":{"gitId":"wpinrui"},"content":"            case \"event\":","lastModifiedDate":"2021-08-13"},{"lineNumber":88,"author":{"gitId":"wpinrui"},"content":"                task \u003d new Event(command.getDescription(), command.getTime());","lastModifiedDate":"2021-08-18"},{"lineNumber":89,"author":{"gitId":"wpinrui"},"content":"                tasks.add(task);","lastModifiedDate":"2021-08-26"},{"lineNumber":90,"author":{"gitId":"wpinrui"},"content":"                ui.showAdded(task, tasks.size());","lastModifiedDate":"2021-08-26"},{"lineNumber":91,"author":{"gitId":"wpinrui"},"content":"                break;","lastModifiedDate":"2021-08-13"},{"lineNumber":92,"author":{"gitId":"wpinrui"},"content":"            case \"delete\":","lastModifiedDate":"2021-08-18"},{"lineNumber":93,"author":{"gitId":"wpinrui"},"content":"                task \u003d tasks.get(command.getIndex() - 1);","lastModifiedDate":"2021-08-26"},{"lineNumber":94,"author":{"gitId":"wpinrui"},"content":"                tasks.delete(command.getIndex() - 1);","lastModifiedDate":"2021-08-26"},{"lineNumber":95,"author":{"gitId":"wpinrui"},"content":"                ui.showDeleted(task, tasks.size());","lastModifiedDate":"2021-08-26"},{"lineNumber":96,"author":{"gitId":"wpinrui"},"content":"                break;","lastModifiedDate":"2021-08-18"},{"lineNumber":97,"author":{"gitId":"wpinrui"},"content":"            case \"find\":","lastModifiedDate":"2021-08-26"},{"lineNumber":98,"author":{"gitId":"wpinrui"},"content":"                TaskList filteredTasks \u003d tasks.find(command.getDescription());","lastModifiedDate":"2021-08-26"},{"lineNumber":99,"author":{"gitId":"wpinrui"},"content":"                ui.showMatches(filteredTasks);","lastModifiedDate":"2021-08-26"},{"lineNumber":100,"author":{"gitId":"wpinrui"},"content":"            }","lastModifiedDate":"2021-08-13"},{"lineNumber":101,"author":{"gitId":"wpinrui"},"content":"        }","lastModifiedDate":"2021-08-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":103,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"wpinrui":100,"-":3}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wpinrui"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"wpinrui"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"wpinrui"},"content":" * Represents the exception to be thrown when invalid user input into Duke is","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"wpinrui"},"content":" * detected.","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"wpinrui"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"wpinrui"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"wpinrui"},"content":"    private final String log;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"wpinrui"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"wpinrui"},"content":"     * Class constructor which takes in a log which documents the reason for the","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"wpinrui"},"content":"     * exception being thrown.","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"wpinrui"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"wpinrui"},"content":"     * @param log Cause of the exception","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"wpinrui"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"wpinrui"},"content":"    public DukeException(String log) {","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"wpinrui"},"content":"        this.log \u003d log;","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"wpinrui"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"wpinrui"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"wpinrui"},"content":"     * Returns the exception log.","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"wpinrui"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"wpinrui"},"content":"     * @return Exception log","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"wpinrui"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"wpinrui"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":26,"author":{"gitId":"wpinrui"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":27,"author":{"gitId":"wpinrui"},"content":"        return log;","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"wpinrui"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":29,"author":{"gitId":"wpinrui"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"wpinrui":29}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wpinrui"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"wpinrui"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"wpinrui"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"wpinrui"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"wpinrui"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"wpinrui"},"content":" * Represents an event task, which is a task that will happen at a given time.","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"wpinrui"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"wpinrui"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-13"},{"lineNumber":11,"author":{"gitId":"wpinrui"},"content":"    protected String at;","lastModifiedDate":"2021-08-13"},{"lineNumber":12,"author":{"gitId":"wpinrui"},"content":"    protected LocalDate atDate;","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-13"},{"lineNumber":14,"author":{"gitId":"wpinrui"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"wpinrui"},"content":"     * Class constructor which takes in the description of the event task and a","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"wpinrui"},"content":"     * string that represents the time at which the event will take place. If the","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"wpinrui"},"content":"     * time string is given in the form YYYY-MM-DD, a LocalDate object will be","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"wpinrui"},"content":"     * created to represent this information.","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"wpinrui"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"wpinrui"},"content":"     * @param description Description of the event task","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"wpinrui"},"content":"     * @param at          Time at which the event will take place","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"wpinrui"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"wpinrui"},"content":"    public Event(String description, String at) {","lastModifiedDate":"2021-08-13"},{"lineNumber":24,"author":{"gitId":"wpinrui"},"content":"        super(description);","lastModifiedDate":"2021-08-13"},{"lineNumber":25,"author":{"gitId":"wpinrui"},"content":"        this.at \u003d at;","lastModifiedDate":"2021-08-13"},{"lineNumber":26,"author":{"gitId":"wpinrui"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"wpinrui"},"content":"            atDate \u003d LocalDate.parse(at);","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"wpinrui"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"wpinrui"},"content":"            atDate \u003d null;","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"wpinrui"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"wpinrui"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"wpinrui"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"wpinrui"},"content":"     * Returns the LocalDate object which represents the date that the event will take place","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"wpinrui"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"wpinrui"},"content":"     * @return Date of the event","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"wpinrui"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"wpinrui"},"content":"    public LocalDate getAtDate() {","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"wpinrui"},"content":"        return atDate;","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"wpinrui"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"wpinrui"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"wpinrui"},"content":"     * Returns a formatted String representing the date of the event in the form","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"wpinrui"},"content":"     * MMM d YYYY.","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"wpinrui"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"wpinrui"},"content":"     * @return Formatted date string","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"wpinrui"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"wpinrui"},"content":"    public String parseAtDate() {","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"wpinrui"},"content":"        return getAtDate().format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"wpinrui"},"content":"    }","lastModifiedDate":"2021-08-13"},{"lineNumber":51,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-13"},{"lineNumber":52,"author":{"gitId":"wpinrui"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":53,"author":{"gitId":"wpinrui"},"content":"     * Returns the string representation of the event, including whether it","lastModifiedDate":"2021-08-26"},{"lineNumber":54,"author":{"gitId":"wpinrui"},"content":"     * has been completed and when it will take place.","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"wpinrui"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":56,"author":{"gitId":"wpinrui"},"content":"     * @return String representation of event task","lastModifiedDate":"2021-08-26"},{"lineNumber":57,"author":{"gitId":"wpinrui"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"wpinrui"},"content":"    @Override","lastModifiedDate":"2021-08-13"},{"lineNumber":59,"author":{"gitId":"wpinrui"},"content":"    public String toString() {","lastModifiedDate":"2021-08-13"},{"lineNumber":60,"author":{"gitId":"wpinrui"},"content":"        return \"[E]\" + super.toString()","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"wpinrui"},"content":"                + \" (at: \"","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"wpinrui"},"content":"                + ((atDate \u003d\u003d null) ? at : parseAtDate())","lastModifiedDate":"2021-08-26"},{"lineNumber":63,"author":{"gitId":"wpinrui"},"content":"                + \")\";","lastModifiedDate":"2021-08-26"},{"lineNumber":64,"author":{"gitId":"wpinrui"},"content":"    }","lastModifiedDate":"2021-08-13"},{"lineNumber":65,"author":{"gitId":"wpinrui"},"content":"}","lastModifiedDate":"2021-08-13"}],"authorContributionMap":{"wpinrui":65}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wpinrui"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"wpinrui"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"wpinrui"},"content":" * Encapsulates the methods needed to parse the input given to Duke and convert","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"wpinrui"},"content":" * it into a Command that Duke understands.","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"wpinrui"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"wpinrui"},"content":"public class Parser {","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"wpinrui"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"wpinrui"},"content":"     * Returns a Command that Duke understands from a string passed to Duke by","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"wpinrui"},"content":"     * the user.","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"wpinrui"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"wpinrui"},"content":"     * @param input String that user passed to Duke","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"wpinrui"},"content":"     * @return Command that Duke is able to execute","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"wpinrui"},"content":"     * @throws DukeException If invalid or insufficient arguments are provided","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"wpinrui"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"wpinrui"},"content":"    public static Command parseUserInput(String input) throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"wpinrui"},"content":"        String[] strings \u003d input.split(\" \");","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"wpinrui"},"content":"        String operation \u003d strings[0];","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"wpinrui"},"content":"        switch (operation) {","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"wpinrui"},"content":"        case \"bye\":","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"wpinrui"},"content":"            // Fallthrough","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"wpinrui"},"content":"        case \"list\":","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"wpinrui"},"content":"            return new Command(operation);","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"wpinrui"},"content":"        case \"done\":","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"wpinrui"},"content":"            if (strings.length \u003d\u003d 1) {","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"wpinrui"},"content":"                throw new DukeException(Ui.EXPECTED_DONE_INDEX_GOT_NONE);","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"wpinrui"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"wpinrui"},"content":"            try {","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"wpinrui"},"content":"                int doneTaskNum \u003d Integer.parseInt(strings[1]);","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"wpinrui"},"content":"                return new Command(strings[0], doneTaskNum);","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"wpinrui"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"wpinrui"},"content":"                throw new DukeException(Ui.EXPECTED_DONE_INDEX_GOT_OTHER);","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"wpinrui"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"wpinrui"},"content":"        case \"todo\":","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"wpinrui"},"content":"            if (strings.length \u003d\u003d 1) {","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"wpinrui"},"content":"                throw new DukeException(Ui.EXPECTED_TO_DO_DESCRIPTION);","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"wpinrui"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"wpinrui"},"content":"            return new Command(strings[0], input.substring(5));","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"wpinrui"},"content":"        case \"deadline\":","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"wpinrui"},"content":"            if (strings.length \u003d\u003d 1) {","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"wpinrui"},"content":"                throw new DukeException(Ui.EXPECTED_DEADLINE_DESCRIPTION);","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"wpinrui"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"wpinrui"},"content":"            String[] descriptionAndBy \u003d input.substring(9).split(\"/by \");","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"wpinrui"},"content":"            if (descriptionAndBy.length \u003d\u003d 1) {","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"wpinrui"},"content":"                throw new DukeException(Ui.EXPECTED_DEADLINE_BY);","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"wpinrui"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"wpinrui"},"content":"            return new Command(strings[0], descriptionAndBy[0], descriptionAndBy[1]);","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"wpinrui"},"content":"        case \"event\":","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"wpinrui"},"content":"            if (strings.length \u003d\u003d 1) {","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"wpinrui"},"content":"                throw new DukeException(Ui.EXPECTED_EVENT_DESCRIPTION);","lastModifiedDate":"2021-08-26"},{"lineNumber":52,"author":{"gitId":"wpinrui"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"wpinrui"},"content":"            String[] descriptionAndAt \u003d input.substring(6).split(\"/at \");","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"wpinrui"},"content":"            if (descriptionAndAt.length \u003d\u003d 1) {","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"wpinrui"},"content":"                throw new DukeException(Ui.EXPECTED_EVENT_AT);","lastModifiedDate":"2021-08-26"},{"lineNumber":56,"author":{"gitId":"wpinrui"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"wpinrui"},"content":"            return new Command(strings[0], descriptionAndAt[0], descriptionAndAt[1]);","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"wpinrui"},"content":"        case \"delete\":","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"wpinrui"},"content":"            if (strings.length \u003d\u003d 1) {","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"wpinrui"},"content":"                throw new DukeException(Ui.EXPECTED_DELETED_INDEX_GOT_NONE);","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"wpinrui"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"wpinrui"},"content":"            try {","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"wpinrui"},"content":"                int delTaskNum \u003d Integer.parseInt(strings[1]);","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"wpinrui"},"content":"                return new Command(strings[0], delTaskNum);","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"wpinrui"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"wpinrui"},"content":"                throw new DukeException(Ui.EXPECTED_DELETED_INDEX_GOT_OTHER);","lastModifiedDate":"2021-08-26"},{"lineNumber":67,"author":{"gitId":"wpinrui"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"wpinrui"},"content":"        case \"find\":","lastModifiedDate":"2021-08-26"},{"lineNumber":69,"author":{"gitId":"wpinrui"},"content":"            if (strings.length \u003d\u003d 1) {","lastModifiedDate":"2021-08-26"},{"lineNumber":70,"author":{"gitId":"wpinrui"},"content":"                throw new DukeException(Ui.EXPECTED_SEARCH_QUERY);","lastModifiedDate":"2021-08-26"},{"lineNumber":71,"author":{"gitId":"wpinrui"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":72,"author":{"gitId":"wpinrui"},"content":"            return new Command(strings[0], input.substring(5));","lastModifiedDate":"2021-08-26"},{"lineNumber":73,"author":{"gitId":"wpinrui"},"content":"        default:","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"wpinrui"},"content":"            throw new DukeException(Ui.UNRECOGNISED_OPERATION);","lastModifiedDate":"2021-08-26"},{"lineNumber":75,"author":{"gitId":"wpinrui"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":76,"author":{"gitId":"wpinrui"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":77,"author":{"gitId":"wpinrui"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"wpinrui":77}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wpinrui"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"wpinrui"},"content":"import java.io.File;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"wpinrui"},"content":"import java.io.FileInputStream;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"wpinrui"},"content":"import java.io.FileOutputStream;","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"wpinrui"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"wpinrui"},"content":"import java.io.ObjectInputStream;","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"wpinrui"},"content":"import java.io.ObjectOutputStream;","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"wpinrui"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"wpinrui"},"content":" * Encapsulates the methods needed to read and write to a save file.","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"wpinrui"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"wpinrui"},"content":"public class Storage {","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"wpinrui"},"content":"    private final String path;","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"wpinrui"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"wpinrui"},"content":"     * Class constructor which takes in the path of the save file.","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"wpinrui"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"wpinrui"},"content":"     * @param path Path of the save file","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"wpinrui"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"wpinrui"},"content":"    public Storage(String path) {","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"wpinrui"},"content":"        this.path \u003d path;","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"wpinrui"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"wpinrui"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"wpinrui"},"content":"     * Writes the contents of Duke\u0027s task list to the save file","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"wpinrui"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"wpinrui"},"content":"     * @param taskList The list of tasks to be saved","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"wpinrui"},"content":"     * @throws IOException If the file cannot be written to","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"wpinrui"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"wpinrui"},"content":"    public void writeSave(TaskList taskList) throws IOException {","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"wpinrui"},"content":"        FileOutputStream writeData \u003d new FileOutputStream(this.path);","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"wpinrui"},"content":"        ObjectOutputStream writeStream \u003d new ObjectOutputStream(writeData);","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"wpinrui"},"content":"        writeStream.writeObject(taskList);","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"wpinrui"},"content":"        writeStream.flush();","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"wpinrui"},"content":"        writeStream.close();","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"wpinrui"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"wpinrui"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"wpinrui"},"content":"     * Reads the contents of the save file and returns the TaskList containing","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"wpinrui"},"content":"     * the saved tasks","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"wpinrui"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"wpinrui"},"content":"     * @return TaskList object containing saved tasks","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"wpinrui"},"content":"     * @throws IOException            If the reading of the file fails","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"wpinrui"},"content":"     * @throws ClassNotFoundException If the save data is of a missing class","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"wpinrui"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"wpinrui"},"content":"    public TaskList readSave() throws IOException, ClassNotFoundException {","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"wpinrui"},"content":"        File f \u003d new File(this.path);","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"wpinrui"},"content":"        if (!f.createNewFile()) { // save file exists","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"wpinrui"},"content":"            FileInputStream readData \u003d new FileInputStream(this.path);","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"wpinrui"},"content":"            ObjectInputStream readStream \u003d new ObjectInputStream(readData);","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"wpinrui"},"content":"            TaskList readList \u003d (TaskList) readStream.readObject();","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"wpinrui"},"content":"            readStream.close();","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"wpinrui"},"content":"            return readList;","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"wpinrui"},"content":"        } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"wpinrui"},"content":"            return new TaskList();","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"wpinrui"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"wpinrui"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"wpinrui"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"wpinrui":59}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wpinrui"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"wpinrui"},"content":"import java.io.Serializable;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"wpinrui"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"wpinrui"},"content":" * Represents a task, which has a description and may be done or not done.","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"wpinrui"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"wpinrui"},"content":"public class Task implements Serializable {","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"wpinrui"},"content":"    protected String description;","lastModifiedDate":"2021-08-13"},{"lineNumber":10,"author":{"gitId":"wpinrui"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-13"},{"lineNumber":11,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-13"},{"lineNumber":12,"author":{"gitId":"wpinrui"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"wpinrui"},"content":"     * Class constructor which takes in the description of the task. The task","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"wpinrui"},"content":"     * is assumed to not be done at the time of creation.","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"wpinrui"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"wpinrui"},"content":"     * @param description Description of task","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"wpinrui"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"wpinrui"},"content":"    public Task(String description) {","lastModifiedDate":"2021-08-13"},{"lineNumber":19,"author":{"gitId":"wpinrui"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-13"},{"lineNumber":20,"author":{"gitId":"wpinrui"},"content":"        isDone \u003d false;","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"wpinrui"},"content":"    }","lastModifiedDate":"2021-08-13"},{"lineNumber":22,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-13"},{"lineNumber":23,"author":{"gitId":"wpinrui"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"wpinrui"},"content":"     * Returns an \"X\" if the task is done, and a whitespace otherwise.","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"wpinrui"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"wpinrui"},"content":"     * @return \"X\" or whitespace depending on whether task is done","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"wpinrui"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"wpinrui"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-13"},{"lineNumber":29,"author":{"gitId":"wpinrui"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2021-08-13"},{"lineNumber":30,"author":{"gitId":"wpinrui"},"content":"    }","lastModifiedDate":"2021-08-13"},{"lineNumber":31,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-13"},{"lineNumber":32,"author":{"gitId":"wpinrui"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"wpinrui"},"content":"     * Sets the task to be done or not done.","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"wpinrui"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"wpinrui"},"content":"     * @param bool Whether the task should be marked as done","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"wpinrui"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"wpinrui"},"content":"    public void setDone(boolean bool) {","lastModifiedDate":"2021-08-13"},{"lineNumber":38,"author":{"gitId":"wpinrui"},"content":"        isDone \u003d bool;","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"wpinrui"},"content":"    }","lastModifiedDate":"2021-08-13"},{"lineNumber":40,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-13"},{"lineNumber":41,"author":{"gitId":"wpinrui"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"wpinrui"},"content":"     * Returns the string representation of the task, including whether it","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"wpinrui"},"content":"     * has been completed.","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"wpinrui"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"wpinrui"},"content":"     * @return String representation of task","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"wpinrui"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"wpinrui"},"content":"    @Override","lastModifiedDate":"2021-08-13"},{"lineNumber":48,"author":{"gitId":"wpinrui"},"content":"    public String toString() {","lastModifiedDate":"2021-08-13"},{"lineNumber":49,"author":{"gitId":"wpinrui"},"content":"        return String.format(\"[%s] %s\", getStatusIcon(), description);","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"wpinrui"},"content":"    }","lastModifiedDate":"2021-08-13"},{"lineNumber":51,"author":{"gitId":"wpinrui"},"content":"}","lastModifiedDate":"2021-08-13"}],"authorContributionMap":{"wpinrui":51}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wpinrui"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"wpinrui"},"content":"import java.io.Serializable;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"wpinrui"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"wpinrui"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"wpinrui"},"content":" * Represents the list of tasks tracked by Duke.","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"wpinrui"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"wpinrui"},"content":"public class TaskList implements Serializable {","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"wpinrui"},"content":"    private final ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"wpinrui"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"wpinrui"},"content":"     * Class constructor which initialises a blank TaskList.","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"wpinrui"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"wpinrui"},"content":"    public TaskList() {","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"wpinrui"},"content":"        tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"wpinrui"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"wpinrui"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"wpinrui"},"content":"     * Adds a task to the list.","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"wpinrui"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"wpinrui"},"content":"     * @param task Task to be added","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"wpinrui"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"wpinrui"},"content":"    public void add(Task task) {","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"wpinrui"},"content":"        tasks.add(task);","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"wpinrui"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"wpinrui"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"wpinrui"},"content":"     * Deletes the task at the specified index from the list, and returns the deleted task.","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"wpinrui"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"wpinrui"},"content":"     * @param index Index of the task in the list of tasks","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"wpinrui"},"content":"     * @return The task that has been deleted","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"wpinrui"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"wpinrui"},"content":"    public Task delete(int index) {","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"wpinrui"},"content":"        return tasks.remove(index);","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"wpinrui"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"wpinrui"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"wpinrui"},"content":"     * Returns the number of tasks in the task list.","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"wpinrui"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"wpinrui"},"content":"     * @return Number of tasks in list","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"wpinrui"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"wpinrui"},"content":"    public int size() {","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"wpinrui"},"content":"        return tasks.size();","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"wpinrui"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"wpinrui"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"wpinrui"},"content":"     * Returns the task stored at a particular index in the list.","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"wpinrui"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"wpinrui"},"content":"     * @param index Index of the task in the list of tasks","lastModifiedDate":"2021-08-26"},{"lineNumber":51,"author":{"gitId":"wpinrui"},"content":"     * @return Task found at that index in the list","lastModifiedDate":"2021-08-26"},{"lineNumber":52,"author":{"gitId":"wpinrui"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":53,"author":{"gitId":"wpinrui"},"content":"    public Task get(int index) {","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"wpinrui"},"content":"        return tasks.get(index);","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"wpinrui"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":57,"author":{"gitId":"wpinrui"},"content":"    public TaskList find(String query) {","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"wpinrui"},"content":"        TaskList output \u003d new TaskList();","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"wpinrui"},"content":"        for (int i \u003d 0; i \u003c this.size(); i++) {","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"wpinrui"},"content":"            if (this.get(i).toString().contains(query)) {","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"wpinrui"},"content":"                output.add(this.get(i));","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"wpinrui"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":63,"author":{"gitId":"wpinrui"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":64,"author":{"gitId":"wpinrui"},"content":"        return output;","lastModifiedDate":"2021-08-26"},{"lineNumber":65,"author":{"gitId":"wpinrui"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":66,"author":{"gitId":"wpinrui"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"wpinrui":66}},{"path":"src/main/java/duke/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wpinrui"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"wpinrui"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"wpinrui"},"content":" * Represents a to-do task, which is a task that has a description.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"wpinrui"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"wpinrui"},"content":"public class ToDo extends Task {","lastModifiedDate":"2021-08-13"},{"lineNumber":7,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"wpinrui"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"wpinrui"},"content":"     * Class constructor which takes in the description of the to-do.","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"wpinrui"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"wpinrui"},"content":"     * @param description Description of the to-do task","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"wpinrui"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"wpinrui"},"content":"    public ToDo(String description) {","lastModifiedDate":"2021-08-13"},{"lineNumber":14,"author":{"gitId":"wpinrui"},"content":"        super(description);","lastModifiedDate":"2021-08-13"},{"lineNumber":15,"author":{"gitId":"wpinrui"},"content":"    }","lastModifiedDate":"2021-08-13"},{"lineNumber":16,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"wpinrui"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"wpinrui"},"content":"     * Returns the string representation of the to-do, including whether it","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"wpinrui"},"content":"     * has been completed.","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"wpinrui"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"wpinrui"},"content":"     * @return String representation of to-do task","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"wpinrui"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"wpinrui"},"content":"    @Override","lastModifiedDate":"2021-08-13"},{"lineNumber":24,"author":{"gitId":"wpinrui"},"content":"    public String toString() {","lastModifiedDate":"2021-08-13"},{"lineNumber":25,"author":{"gitId":"wpinrui"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2021-08-13"},{"lineNumber":26,"author":{"gitId":"wpinrui"},"content":"    }","lastModifiedDate":"2021-08-13"},{"lineNumber":27,"author":{"gitId":"wpinrui"},"content":"}","lastModifiedDate":"2021-08-13"}],"authorContributionMap":{"wpinrui":27}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wpinrui"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"wpinrui"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"wpinrui"},"content":" * Encapsulates methods needed for Duke to interact with the user through printing","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"wpinrui"},"content":" * messages to the console.","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"wpinrui"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"wpinrui"},"content":"public class Ui {","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"wpinrui"},"content":"    static final String EXPECTED_SEARCH_QUERY \u003d \"The search query of a find operation cannot be empty.\";","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"wpinrui"},"content":"    static final String INTRO_STRING \u003d \"Hey there! I\u0027m Good Duke. How many I help you today?\";","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"wpinrui"},"content":"    static final String OUTRO_STRING \u003d \"That was an excellent chat - I look forward to seeing you again soon!\";","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"wpinrui"},"content":"    static final String READ_SAVE_STRING \u003d \"Sorry, there was a problem reading the save file :(\";","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"wpinrui"},"content":"    static final String WRITE_SAVE_STRING \u003d \"Sorry, there was a problem saving your tasks :(\";","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"wpinrui"},"content":"    static final String NEW_SAVE_STRING \u003d \"Empty save file detected - loading a blank list.\";","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"wpinrui"},"content":"    static final String EXPECTED_DONE_INDEX_GOT_NONE \u003d \"You need to indicate which task number should be marked as done.\";","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"wpinrui"},"content":"    static final String EXPECTED_DONE_INDEX_GOT_OTHER \u003d \"The task to be marked as done should be indicated its list index.\";","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"wpinrui"},"content":"    static final String EXPECTED_TO_DO_DESCRIPTION \u003d \"The description of a todo cannot be empty.\";","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"wpinrui"},"content":"    static final String EXPECTED_DEADLINE_DESCRIPTION \u003d \"The description of a deadline cannot be empty.\";","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"wpinrui"},"content":"    static final String EXPECTED_DEADLINE_BY \u003d \"The done-by date of a deadline cannot be empty.\";","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"wpinrui"},"content":"    static final String EXPECTED_EVENT_DESCRIPTION \u003d \"The description of an event cannot be empty.\";","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"wpinrui"},"content":"    static final String EXPECTED_EVENT_AT \u003d \"The timing of an event cannot be empty.\";","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"wpinrui"},"content":"    static final String EXPECTED_DELETED_INDEX_GOT_NONE \u003d \"You need to indicate which task number should be deleted.\";","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"wpinrui"},"content":"    static final String EXPECTED_DELETED_INDEX_GOT_OTHER \u003d \"The task to be deleted should be indicated its list index.\";","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"wpinrui"},"content":"    static final String UNRECOGNISED_OPERATION \u003d \"Sorry, I do not understand this command.\";","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"wpinrui"},"content":"    static final String SHOW_MATCHES_STRING \u003d \"Here are the matching tasks in your list:\";","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"wpinrui"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"wpinrui"},"content":"     * Returns a string representation of the tasks in the list.","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"wpinrui"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"wpinrui"},"content":"     * @param taskList Duke\u0027s list of tasks","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"wpinrui"},"content":"     * @return String representation of list","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"wpinrui"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"wpinrui"},"content":"    public static String taskListString(TaskList taskList) {","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"wpinrui"},"content":"        String output \u003d \"\";","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"wpinrui"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"wpinrui"},"content":"            output +\u003d String.format(\"%d. %s\\n\", i + 1, taskList.get(i));","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"wpinrui"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"wpinrui"},"content":"        return output;","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"wpinrui"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"wpinrui"},"content":"    private String addedString(Task task, int size) {","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"wpinrui"},"content":"        return String.format(\"Alright, I\u0027ve added this task: \\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"wpinrui"},"content":"                        \"\\t%s\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"wpinrui"},"content":"                        \"Now, you have %d tasks in the list.\\n\",","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"wpinrui"},"content":"                task, size);","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"wpinrui"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"wpinrui"},"content":"    private String doneString(Task task) {","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"wpinrui"},"content":"        return String.format(\"Certainly, I\u0027ve marked this task as done: \\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":51,"author":{"gitId":"wpinrui"},"content":"                        \"\\t%s\\n\",","lastModifiedDate":"2021-08-26"},{"lineNumber":52,"author":{"gitId":"wpinrui"},"content":"                task);","lastModifiedDate":"2021-08-26"},{"lineNumber":53,"author":{"gitId":"wpinrui"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":54,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"wpinrui"},"content":"    private String deletedString(Task task, int size) {","lastModifiedDate":"2021-08-26"},{"lineNumber":56,"author":{"gitId":"wpinrui"},"content":"        return String.format(\"Certainly, I\u0027ve deleted this task: \\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":57,"author":{"gitId":"wpinrui"},"content":"                        \"\\t%s\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"wpinrui"},"content":"                        \"\\nNow, you have %d tasks in the list.\\n\",","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"wpinrui"},"content":"                task, size);","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"wpinrui"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"wpinrui"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":63,"author":{"gitId":"wpinrui"},"content":"     * Prints a message to the console, bounded by dashed horizontal lines","lastModifiedDate":"2021-08-26"},{"lineNumber":64,"author":{"gitId":"wpinrui"},"content":"     * before and after the message.","lastModifiedDate":"2021-08-26"},{"lineNumber":65,"author":{"gitId":"wpinrui"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":66,"author":{"gitId":"wpinrui"},"content":"     * @param str Message to be displayed","lastModifiedDate":"2021-08-26"},{"lineNumber":67,"author":{"gitId":"wpinrui"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":68,"author":{"gitId":"wpinrui"},"content":"    public void print(String str) {","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"wpinrui"},"content":"        String horizontalLine \u003d \"________________________________________________________________________________\";","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"wpinrui"},"content":"        System.out.println(horizontalLine);","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"wpinrui"},"content":"        System.out.println(str);","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"wpinrui"},"content":"        System.out.println(horizontalLine);","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"wpinrui"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"wpinrui"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":76,"author":{"gitId":"wpinrui"},"content":"     * Prints the intro message.","lastModifiedDate":"2021-08-26"},{"lineNumber":77,"author":{"gitId":"wpinrui"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":78,"author":{"gitId":"wpinrui"},"content":"    public void showIntro() {","lastModifiedDate":"2021-08-25"},{"lineNumber":79,"author":{"gitId":"wpinrui"},"content":"        print(INTRO_STRING);","lastModifiedDate":"2021-08-26"},{"lineNumber":80,"author":{"gitId":"wpinrui"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":81,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":82,"author":{"gitId":"wpinrui"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":83,"author":{"gitId":"wpinrui"},"content":"     * Prints the outro message.","lastModifiedDate":"2021-08-26"},{"lineNumber":84,"author":{"gitId":"wpinrui"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":85,"author":{"gitId":"wpinrui"},"content":"    public void showOutro() {","lastModifiedDate":"2021-08-25"},{"lineNumber":86,"author":{"gitId":"wpinrui"},"content":"        print(OUTRO_STRING);","lastModifiedDate":"2021-08-26"},{"lineNumber":87,"author":{"gitId":"wpinrui"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":88,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":89,"author":{"gitId":"wpinrui"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":90,"author":{"gitId":"wpinrui"},"content":"     * Prints a confirmation of the task that has been added and the number of","lastModifiedDate":"2021-08-26"},{"lineNumber":91,"author":{"gitId":"wpinrui"},"content":"     * tasks being tracked so far.","lastModifiedDate":"2021-08-26"},{"lineNumber":92,"author":{"gitId":"wpinrui"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":93,"author":{"gitId":"wpinrui"},"content":"     * @param task Task that has been added to list","lastModifiedDate":"2021-08-26"},{"lineNumber":94,"author":{"gitId":"wpinrui"},"content":"     * @param size Number of tasks in list","lastModifiedDate":"2021-08-26"},{"lineNumber":95,"author":{"gitId":"wpinrui"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":96,"author":{"gitId":"wpinrui"},"content":"    public void showAdded(Task task, int size) {","lastModifiedDate":"2021-08-25"},{"lineNumber":97,"author":{"gitId":"wpinrui"},"content":"        print(addedString(task, size));","lastModifiedDate":"2021-08-25"},{"lineNumber":98,"author":{"gitId":"wpinrui"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":99,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":100,"author":{"gitId":"wpinrui"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":101,"author":{"gitId":"wpinrui"},"content":"     * Prints a message to inform the user that a task has been marked as having","lastModifiedDate":"2021-08-26"},{"lineNumber":102,"author":{"gitId":"wpinrui"},"content":"     * been completed.","lastModifiedDate":"2021-08-26"},{"lineNumber":103,"author":{"gitId":"wpinrui"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":104,"author":{"gitId":"wpinrui"},"content":"     * @param task Task that has been marked as done","lastModifiedDate":"2021-08-26"},{"lineNumber":105,"author":{"gitId":"wpinrui"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":106,"author":{"gitId":"wpinrui"},"content":"    public void showDone(Task task) {","lastModifiedDate":"2021-08-25"},{"lineNumber":107,"author":{"gitId":"wpinrui"},"content":"        print(doneString(task));","lastModifiedDate":"2021-08-25"},{"lineNumber":108,"author":{"gitId":"wpinrui"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":109,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":110,"author":{"gitId":"wpinrui"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":111,"author":{"gitId":"wpinrui"},"content":"     * Prints a message to inform the user that a task has been deleted from the","lastModifiedDate":"2021-08-26"},{"lineNumber":112,"author":{"gitId":"wpinrui"},"content":"     * list, along with the number of tasks remaining.","lastModifiedDate":"2021-08-26"},{"lineNumber":113,"author":{"gitId":"wpinrui"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":114,"author":{"gitId":"wpinrui"},"content":"     * @param task Task that has been deleted from list","lastModifiedDate":"2021-08-26"},{"lineNumber":115,"author":{"gitId":"wpinrui"},"content":"     * @param size Number of remaining tasks","lastModifiedDate":"2021-08-26"},{"lineNumber":116,"author":{"gitId":"wpinrui"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":117,"author":{"gitId":"wpinrui"},"content":"    public void showDeleted(Task task, int size) {","lastModifiedDate":"2021-08-25"},{"lineNumber":118,"author":{"gitId":"wpinrui"},"content":"        print(deletedString(task, size));","lastModifiedDate":"2021-08-25"},{"lineNumber":119,"author":{"gitId":"wpinrui"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":120,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":121,"author":{"gitId":"wpinrui"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":122,"author":{"gitId":"wpinrui"},"content":"     * Prints the list of tasks to the console.","lastModifiedDate":"2021-08-26"},{"lineNumber":123,"author":{"gitId":"wpinrui"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":124,"author":{"gitId":"wpinrui"},"content":"     * @param tasks List of all the tasks","lastModifiedDate":"2021-08-26"},{"lineNumber":125,"author":{"gitId":"wpinrui"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":126,"author":{"gitId":"wpinrui"},"content":"    public void showTasks(TaskList tasks) {","lastModifiedDate":"2021-08-25"},{"lineNumber":127,"author":{"gitId":"wpinrui"},"content":"        print(taskListString(tasks));","lastModifiedDate":"2021-08-25"},{"lineNumber":128,"author":{"gitId":"wpinrui"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":129,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":130,"author":{"gitId":"wpinrui"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":131,"author":{"gitId":"wpinrui"},"content":"     * Prints a message to inform the user about an error in reading the save.","lastModifiedDate":"2021-08-26"},{"lineNumber":132,"author":{"gitId":"wpinrui"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":133,"author":{"gitId":"wpinrui"},"content":"    public void showReadSaveError() {","lastModifiedDate":"2021-08-25"},{"lineNumber":134,"author":{"gitId":"wpinrui"},"content":"        print(READ_SAVE_STRING);","lastModifiedDate":"2021-08-26"},{"lineNumber":135,"author":{"gitId":"wpinrui"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":136,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":137,"author":{"gitId":"wpinrui"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":138,"author":{"gitId":"wpinrui"},"content":"     * Prints a message to inform the user about an error in writing the save.","lastModifiedDate":"2021-08-26"},{"lineNumber":139,"author":{"gitId":"wpinrui"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":140,"author":{"gitId":"wpinrui"},"content":"    public void showWriteSaveError() {","lastModifiedDate":"2021-08-25"},{"lineNumber":141,"author":{"gitId":"wpinrui"},"content":"        print(WRITE_SAVE_STRING);","lastModifiedDate":"2021-08-26"},{"lineNumber":142,"author":{"gitId":"wpinrui"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":143,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":144,"author":{"gitId":"wpinrui"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":145,"author":{"gitId":"wpinrui"},"content":"     * Prints a message to inform the user that a new save is necessary.","lastModifiedDate":"2021-08-26"},{"lineNumber":146,"author":{"gitId":"wpinrui"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":147,"author":{"gitId":"wpinrui"},"content":"    public void showNewSave() {","lastModifiedDate":"2021-08-25"},{"lineNumber":148,"author":{"gitId":"wpinrui"},"content":"        print(NEW_SAVE_STRING);","lastModifiedDate":"2021-08-26"},{"lineNumber":149,"author":{"gitId":"wpinrui"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":150,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":151,"author":{"gitId":"wpinrui"},"content":"    public void showMatches(TaskList tasks) {","lastModifiedDate":"2021-08-26"},{"lineNumber":152,"author":{"gitId":"wpinrui"},"content":"        print(SHOW_MATCHES_STRING + \"\\n\" + taskListString(tasks));","lastModifiedDate":"2021-08-26"},{"lineNumber":153,"author":{"gitId":"wpinrui"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":154,"author":{"gitId":"wpinrui"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"wpinrui":154}},{"path":"src/test/java/dukeTest/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wpinrui"},"content":"package dukeTest;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"wpinrui"},"content":"import duke.Deadline;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"wpinrui"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"wpinrui"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"wpinrui"},"content":"public class DeadlineTest {","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"wpinrui"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"wpinrui"},"content":"    public void parseByDateTest_validDateString() {","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"wpinrui"},"content":"        assertEquals(new Deadline(\"\", \"2020-12-31\").parseByDate(), \"Dec 31 2020\");","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"wpinrui"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"wpinrui"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"wpinrui"},"content":"    public void toStringTest_validDateString() {","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"wpinrui"},"content":"        assertEquals(new Deadline(\"Task\", \"2019-11-30\").toString(), \"[D][ ] Task (by: Nov 30 2019)\");","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"wpinrui"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"wpinrui"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"wpinrui"},"content":"    public void toStringTest_otherString() {","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"wpinrui"},"content":"        assertEquals(new Deadline(\"Task\", \"20191130\").toString(), \"[D][ ] Task (by: 20191130)\");","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"wpinrui"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"wpinrui"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"wpinrui":23}},{"path":"src/test/java/dukeTest/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wpinrui"},"content":"package dukeTest;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"wpinrui"},"content":"import duke.Task;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"wpinrui"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"wpinrui"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"wpinrui"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"wpinrui"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"wpinrui"},"content":"public class TaskListTest {","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"wpinrui"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"wpinrui"},"content":"    public void testAddTask() {","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"wpinrui"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"wpinrui"},"content":"        tasks.add(new Task(\"Description\"));","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"wpinrui"},"content":"        assertEquals(tasks.get(0).toString(), new Task(\"Description\").toString());","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"wpinrui"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"wpinrui"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"wpinrui"},"content":"    public void testRemoveTask_valid() {","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"wpinrui"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"wpinrui"},"content":"        tasks.add(new Task(\"Task\"));","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"wpinrui"},"content":"        assertEquals(tasks.size(), 1);","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"wpinrui"},"content":"        assertEquals(tasks.get(0).toString(), new Task(\"Task\").toString());","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"wpinrui"},"content":"        assertEquals(tasks.delete(0).toString(), new Task(\"Task\").toString());","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"wpinrui"},"content":"        assertEquals(tasks.size(), 0);","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"wpinrui"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"wpinrui"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"wpinrui"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"wpinrui"},"content":"    public void testRemoveTask_invalid() {","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"wpinrui"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"wpinrui"},"content":"        try {","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"wpinrui"},"content":"            assertEquals(tasks.delete(0).toString(), new Task(\"Task\").toString());","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"wpinrui"},"content":"            fail();","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"wpinrui"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"wpinrui"},"content":"            assertEquals(e.getMessage(), \"Index 0 out of bounds for length 0\");","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"wpinrui"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"wpinrui"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"wpinrui"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"wpinrui":39}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"wpinrui"},"content":"todo read book","lastModifiedDate":"2021-08-13"},{"lineNumber":2,"author":{"gitId":"wpinrui"},"content":"deadline return book /by June 6th","lastModifiedDate":"2021-08-13"},{"lineNumber":3,"author":{"gitId":"wpinrui"},"content":"event project meeting /at Aug 6th 2-4pm","lastModifiedDate":"2021-08-13"},{"lineNumber":4,"author":{"gitId":"wpinrui"},"content":"todo join sports club","lastModifiedDate":"2021-08-13"},{"lineNumber":5,"author":{"gitId":"wpinrui"},"content":"todo borrow book","lastModifiedDate":"2021-08-13"},{"lineNumber":6,"author":{"gitId":"wpinrui"},"content":"deadline return book /by Sunday","lastModifiedDate":"2021-08-13"},{"lineNumber":7,"author":{"gitId":"wpinrui"},"content":"event project meeting /at Mon 2-4pm","lastModifiedDate":"2021-08-13"},{"lineNumber":8,"author":{"gitId":"wpinrui"},"content":"done 1","lastModifiedDate":"2021-08-13"},{"lineNumber":9,"author":{"gitId":"wpinrui"},"content":"done 4","lastModifiedDate":"2021-08-13"},{"lineNumber":10,"author":{"gitId":"wpinrui"},"content":"list","lastModifiedDate":"2021-08-13"},{"lineNumber":11,"author":{"gitId":"wpinrui"},"content":"delete 2","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"wpinrui"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"wpinrui"},"content":"delete","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"wpinrui"},"content":"todo","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"wpinrui"},"content":"blah","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"wpinrui"},"content":"bye","lastModifiedDate":"2021-08-13"}],"authorContributionMap":{"wpinrui":16}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"wpinrui"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"wpinrui":1,"-":20}}]

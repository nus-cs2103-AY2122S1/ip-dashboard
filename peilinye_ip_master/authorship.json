[{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"peilinye"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"peilinye"},"content":"import duke.command.Command;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"peilinye"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"peilinye"},"content":"public class Duke {","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"peilinye"},"content":"    /** The storage utility */","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"peilinye"},"content":"    private Storage storage;","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"peilinye"},"content":"    /** The list of tasks */","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"peilinye"},"content":"    private TaskList tasks;","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"peilinye"},"content":"    /** The UI for the program */","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"peilinye"},"content":"    private Ui ui;","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"peilinye"},"content":"    /** The filepath for storage */","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"peilinye"},"content":"    private static final String FILE_PATH \u003d \"data/tasks.txt\";","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"peilinye"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"peilinye"},"content":"     * The constructor for Duke class","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"peilinye"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"peilinye"},"content":"     * @param filePath file path to be used for storage","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"peilinye"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"peilinye"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"peilinye"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"peilinye"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"peilinye"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"peilinye"},"content":"            tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"peilinye"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"peilinye"},"content":"            ui.showError(e.getMessage());","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"peilinye"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"peilinye"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"peilinye"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"peilinye"},"content":"     * The method to start the program","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"peilinye"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"peilinye"},"content":"    public void run() {","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"peilinye"},"content":"        ui.showWelcome();","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"peilinye"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"peilinye"},"content":"        while (!isExit) {","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"peilinye"},"content":"            try {","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"peilinye"},"content":"                String fullCommand \u003d ui.readCommand();","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"peilinye"},"content":"                ui.showLine();","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"peilinye"},"content":"                Command c \u003d Parser.parse(fullCommand);","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"peilinye"},"content":"                c.execute(tasks, ui, storage);","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"peilinye"},"content":"                isExit \u003d c.isExit();","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"peilinye"},"content":"            } catch (DukeException | IOException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"peilinye"},"content":"                ui.showError(e.getMessage());","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"peilinye"},"content":"            } finally {","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"peilinye"},"content":"                ui.showLine();","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"peilinye"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"peilinye"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":57,"author":{"gitId":"peilinye"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"peilinye"},"content":"        new Duke(FILE_PATH).run();","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":60,"author":{"gitId":"peilinye"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"peilinye":60}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"peilinye"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"peilinye"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"peilinye"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"peilinye"},"content":"     * Constructor for Duke exceptions","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"peilinye"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"peilinye"},"content":"     * @param msg message shown when exception is thrown","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"peilinye"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"peilinye"},"content":"    public DukeException(String msg) {","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"peilinye"},"content":"        super(msg);","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"peilinye"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"peilinye":13}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"peilinye"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"peilinye"},"content":"import duke.command.*;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"peilinye"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"peilinye"},"content":"import duke.task.Event;","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"peilinye"},"content":"import duke.task.ToDo;","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"peilinye"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"peilinye"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"peilinye"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"peilinye"},"content":"public class Parser {","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"peilinye"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"peilinye"},"content":"     * The method to parse an input line by the user","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"peilinye"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"peilinye"},"content":"     * @param input the String line to be parsed","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"peilinye"},"content":"     * @return the command to be executed","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"peilinye"},"content":"     * @throws DukeException","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"peilinye"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"peilinye"},"content":"    public static Command parse(String input) throws DukeException{","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"peilinye"},"content":"        String[] x \u003d input.split(\" \");","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"peilinye"},"content":"        String cmd \u003d x[0];","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"peilinye"},"content":"        if (x.length \u003d\u003d 1) {","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"peilinye"},"content":"            if (\"bye\".equals(cmd)) {","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"peilinye"},"content":"                return new ExitCommand();","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"peilinye"},"content":"            } else if (\"list\".equals(cmd)) {","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"peilinye"},"content":"                return new ListCommand();","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"peilinye"},"content":"            } else if (\"todo\".equals(cmd) || \"deadline\".equals(cmd) || \"event\".equals(cmd)) {","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"peilinye"},"content":"                missingTaskName(cmd);","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"peilinye"},"content":"            } else if (\"done\".equals(cmd) || \"delete\".equals(cmd)) {","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"peilinye"},"content":"                throw new DukeException(\"Indicate a task number beside the command ☻\");","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"peilinye"},"content":"            } else if (\"find\".equals(cmd)) {","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"peilinye"},"content":"                throw new DukeException(\"Enter a keyword beside the command ☻\");","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"peilinye"},"content":"            } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"peilinye"},"content":"                throw new DukeException(\"☹︎wut☁︎☻ unknown command\");","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"peilinye"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"peilinye"},"content":"        } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"peilinye"},"content":"            if (cmd.equals(\"done\")) {","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"peilinye"},"content":"                if (x.length \u003e 2) {","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"peilinye"},"content":"                    throw new DukeException(\"Too many arguments for this command.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"peilinye"},"content":"                } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"peilinye"},"content":"                    return new DoneCommand(getTaskNumber(x));","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"peilinye"},"content":"                }","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"peilinye"},"content":"            } else if (cmd.equals(\"delete\")) {","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"peilinye"},"content":"                if (x.length \u003e 2) {","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"peilinye"},"content":"                    throw new DukeException(\"Too many arguments for this command.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"peilinye"},"content":"                } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"peilinye"},"content":"                    return new DeleteCommand(getTaskNumber(x));","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"peilinye"},"content":"                }","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"peilinye"},"content":"            } else if (cmd.equals(\"find\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"peilinye"},"content":"                return new FindCommand(getKeyword(input));","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"peilinye"},"content":"            } else if (cmd.equals(\"todo\")) {","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"peilinye"},"content":"                return addToDo(input);","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"peilinye"},"content":"            } else if (cmd.equals(\"deadline\")) {","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"peilinye"},"content":"                try {","lastModifiedDate":"2021-08-24"},{"lineNumber":57,"author":{"gitId":"peilinye"},"content":"                    return addDeadline(input);","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"peilinye"},"content":"                } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"peilinye"},"content":"                    throw new DukeException(\"Invalid date and time input, indicate date in yyyy-MM-dd HH:mm format.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":60,"author":{"gitId":"peilinye"},"content":"                }","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"peilinye"},"content":"            } else if (cmd.equals(\"event\")) {","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"peilinye"},"content":"                try {","lastModifiedDate":"2021-08-24"},{"lineNumber":63,"author":{"gitId":"peilinye"},"content":"                    return addEvent(input);","lastModifiedDate":"2021-08-24"},{"lineNumber":64,"author":{"gitId":"peilinye"},"content":"                } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"peilinye"},"content":"                    throw new DukeException(\"Invalid date and time input, indicate date in yyyy-MM-dd HH:mm format.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":66,"author":{"gitId":"peilinye"},"content":"                }","lastModifiedDate":"2021-08-24"},{"lineNumber":67,"author":{"gitId":"peilinye"},"content":"            } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":68,"author":{"gitId":"peilinye"},"content":"                // unknown command received","lastModifiedDate":"2021-08-24"},{"lineNumber":69,"author":{"gitId":"peilinye"},"content":"                throw new DukeException(\"☹︎wut☁︎☻ unknown command\");","lastModifiedDate":"2021-08-24"},{"lineNumber":70,"author":{"gitId":"peilinye"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":71,"author":{"gitId":"peilinye"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":72,"author":{"gitId":"peilinye"},"content":"        throw new DukeException(\"\");","lastModifiedDate":"2021-08-24"},{"lineNumber":73,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":74,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":75,"author":{"gitId":"peilinye"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":76,"author":{"gitId":"peilinye"},"content":"     * The method to throw an exception user does not fill in task name","lastModifiedDate":"2021-08-25"},{"lineNumber":77,"author":{"gitId":"peilinye"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":78,"author":{"gitId":"peilinye"},"content":"     * @param cmd the type of command","lastModifiedDate":"2021-08-25"},{"lineNumber":79,"author":{"gitId":"peilinye"},"content":"     * @throws DukeException","lastModifiedDate":"2021-08-25"},{"lineNumber":80,"author":{"gitId":"peilinye"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":81,"author":{"gitId":"peilinye"},"content":"    public static void missingTaskName(String cmd) throws DukeException{","lastModifiedDate":"2021-08-24"},{"lineNumber":82,"author":{"gitId":"peilinye"},"content":"        String str \u003d String.format(\"☹ OOPS!!! The description of a %s cannot be empty.\", cmd);","lastModifiedDate":"2021-08-24"},{"lineNumber":83,"author":{"gitId":"peilinye"},"content":"        throw new DukeException(str);","lastModifiedDate":"2021-08-24"},{"lineNumber":84,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":85,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":86,"author":{"gitId":"peilinye"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":87,"author":{"gitId":"peilinye"},"content":"     * The method to return an AddCommand with a task","lastModifiedDate":"2021-08-25"},{"lineNumber":88,"author":{"gitId":"peilinye"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":89,"author":{"gitId":"peilinye"},"content":"     * @param input String to be parsed to get the Task","lastModifiedDate":"2021-08-25"},{"lineNumber":90,"author":{"gitId":"peilinye"},"content":"     * @return the AddCommand with the Task to be added","lastModifiedDate":"2021-08-25"},{"lineNumber":91,"author":{"gitId":"peilinye"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":92,"author":{"gitId":"peilinye"},"content":"    public static Command addToDo(String input) {","lastModifiedDate":"2021-08-24"},{"lineNumber":93,"author":{"gitId":"peilinye"},"content":"        String name \u003d input.substring(input.indexOf(\" \") + 1).strip();","lastModifiedDate":"2021-08-25"},{"lineNumber":94,"author":{"gitId":"peilinye"},"content":"        ToDo t \u003d new ToDo(name);","lastModifiedDate":"2021-08-24"},{"lineNumber":95,"author":{"gitId":"peilinye"},"content":"        return new AddCommand(t);","lastModifiedDate":"2021-08-24"},{"lineNumber":96,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":97,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":98,"author":{"gitId":"peilinye"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":99,"author":{"gitId":"peilinye"},"content":"     * The method to return an AddCommand with a task","lastModifiedDate":"2021-08-25"},{"lineNumber":100,"author":{"gitId":"peilinye"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":101,"author":{"gitId":"peilinye"},"content":"     * @param input String to be parsed to get the Task","lastModifiedDate":"2021-08-25"},{"lineNumber":102,"author":{"gitId":"peilinye"},"content":"     * @return the AddCommand with the Task to be added","lastModifiedDate":"2021-08-25"},{"lineNumber":103,"author":{"gitId":"peilinye"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":104,"author":{"gitId":"peilinye"},"content":"    public static Command addDeadline(String input) throws DateTimeParseException {","lastModifiedDate":"2021-08-24"},{"lineNumber":105,"author":{"gitId":"peilinye"},"content":"        String name \u003d input.substring(input.indexOf(\" \") + 1, input.lastIndexOf(\"/by\") - 1).strip();","lastModifiedDate":"2021-08-25"},{"lineNumber":106,"author":{"gitId":"peilinye"},"content":"        String by \u003d input.substring(input.lastIndexOf(\"/by\") + 4);","lastModifiedDate":"2021-08-24"},{"lineNumber":107,"author":{"gitId":"peilinye"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");","lastModifiedDate":"2021-08-24"},{"lineNumber":108,"author":{"gitId":"peilinye"},"content":"        Deadline d \u003d new Deadline(name, LocalDateTime.parse(by, formatter));","lastModifiedDate":"2021-08-24"},{"lineNumber":109,"author":{"gitId":"peilinye"},"content":"        return new AddCommand(d);","lastModifiedDate":"2021-08-24"},{"lineNumber":110,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":111,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":112,"author":{"gitId":"peilinye"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":113,"author":{"gitId":"peilinye"},"content":"     * The method to return an AddCommand with a task","lastModifiedDate":"2021-08-25"},{"lineNumber":114,"author":{"gitId":"peilinye"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":115,"author":{"gitId":"peilinye"},"content":"     * @param input String to be parsed to get the Task","lastModifiedDate":"2021-08-25"},{"lineNumber":116,"author":{"gitId":"peilinye"},"content":"     * @return the AddCommand with the Task to be added","lastModifiedDate":"2021-08-25"},{"lineNumber":117,"author":{"gitId":"peilinye"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":118,"author":{"gitId":"peilinye"},"content":"    public static Command addEvent(String input) throws DateTimeParseException {","lastModifiedDate":"2021-08-24"},{"lineNumber":119,"author":{"gitId":"peilinye"},"content":"        String name \u003d input.substring(input.indexOf(\" \") + 1, input.lastIndexOf(\"/at\") - 1).strip();","lastModifiedDate":"2021-08-25"},{"lineNumber":120,"author":{"gitId":"peilinye"},"content":"        String at \u003d input.substring(input.lastIndexOf(\"/at\") + 4);","lastModifiedDate":"2021-08-24"},{"lineNumber":121,"author":{"gitId":"peilinye"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");","lastModifiedDate":"2021-08-24"},{"lineNumber":122,"author":{"gitId":"peilinye"},"content":"        Event e \u003d new Event(name, LocalDateTime.parse(at, formatter));","lastModifiedDate":"2021-08-24"},{"lineNumber":123,"author":{"gitId":"peilinye"},"content":"        return new AddCommand(e);","lastModifiedDate":"2021-08-24"},{"lineNumber":124,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":125,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":126,"author":{"gitId":"peilinye"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":127,"author":{"gitId":"peilinye"},"content":"     * The method to get the index of the Task","lastModifiedDate":"2021-08-25"},{"lineNumber":128,"author":{"gitId":"peilinye"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":129,"author":{"gitId":"peilinye"},"content":"     * @param inputArr the array of Strings","lastModifiedDate":"2021-08-25"},{"lineNumber":130,"author":{"gitId":"peilinye"},"content":"     * @return the index of the Task to be modified","lastModifiedDate":"2021-08-25"},{"lineNumber":131,"author":{"gitId":"peilinye"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":132,"author":{"gitId":"peilinye"},"content":"    public static int getTaskNumber(String[] inputArr) {","lastModifiedDate":"2021-08-24"},{"lineNumber":133,"author":{"gitId":"peilinye"},"content":"        return Integer.parseInt(inputArr[1]) - 1;","lastModifiedDate":"2021-08-24"},{"lineNumber":134,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":135,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":136,"author":{"gitId":"peilinye"},"content":"    public static String getKeyword(String input) {","lastModifiedDate":"2021-08-25"},{"lineNumber":137,"author":{"gitId":"peilinye"},"content":"        return input.substring(input.indexOf(\" \")).strip();","lastModifiedDate":"2021-08-25"},{"lineNumber":138,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":139,"author":{"gitId":"peilinye"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"peilinye":139}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"peilinye"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"peilinye"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"peilinye"},"content":"import duke.task.Event;","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"peilinye"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"peilinye"},"content":"import duke.task.ToDo;","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"peilinye"},"content":"import java.io.File;","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"peilinye"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"peilinye"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"peilinye"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"peilinye"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"peilinye"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"peilinye"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"peilinye"},"content":"public class Storage {","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"peilinye"},"content":"    /** the path of the file used for storage */","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"peilinye"},"content":"    private String filePath;","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"peilinye"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"peilinye"},"content":"     * The constructor of the Storage class","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"peilinye"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"peilinye"},"content":"     * @param filePath the path of the file used for storage","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"peilinye"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"peilinye"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"peilinye"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"peilinye"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"peilinye"},"content":"     * The method to load the data from an already existing file into a new list of tasks","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"peilinye"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"peilinye"},"content":"     * @return the list of tasks","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"peilinye"},"content":"     * @throws DukeException","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"peilinye"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"peilinye"},"content":"    public ArrayList\u003cTask\u003e load() throws DukeException {","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"peilinye"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"peilinye"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"peilinye"},"content":"            File f \u003d new File(filePath);","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"peilinye"},"content":"            if (f.exists()) {","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"peilinye"},"content":"                System.out.println(\"Here are your existing tasks:\");","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"peilinye"},"content":"                Scanner sc \u003d new Scanner(f);","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"peilinye"},"content":"                while (sc.hasNext()) {","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"peilinye"},"content":"                    String next \u003d sc.nextLine();","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"peilinye"},"content":"                    Task t \u003d parseLine(next);","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"peilinye"},"content":"                    tasks.add(t);","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"peilinye"},"content":"                    System.out.println(t.toString());","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"peilinye"},"content":"                }","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"peilinye"},"content":"                sc.close();","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"peilinye"},"content":"                for (int i \u003d 0; i \u003c 60; i++) {","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"peilinye"},"content":"                    System.out.print(\"_\");","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"peilinye"},"content":"                }","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"peilinye"},"content":"                System.out.println();","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"peilinye"},"content":"            } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"peilinye"},"content":"                if (!f.getParentFile().exists()) {","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"peilinye"},"content":"                    f.getParentFile().mkdir();","lastModifiedDate":"2021-08-24"},{"lineNumber":57,"author":{"gitId":"peilinye"},"content":"                }","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"peilinye"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"peilinye"},"content":"            f.createNewFile();","lastModifiedDate":"2021-08-24"},{"lineNumber":60,"author":{"gitId":"peilinye"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"peilinye"},"content":"            throw new DukeException(\"Error retrieving/reading from data file.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"peilinye"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":63,"author":{"gitId":"peilinye"},"content":"        return tasks;","lastModifiedDate":"2021-08-24"},{"lineNumber":64,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":66,"author":{"gitId":"peilinye"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"peilinye"},"content":"     * The method to write the list of tasks to a storage file","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"peilinye"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"peilinye"},"content":"     * @param tasks the list of tasks to be written to the storage file","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"peilinye"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"peilinye"},"content":"    public void writeToFile(TaskList tasks) {","lastModifiedDate":"2021-08-24"},{"lineNumber":72,"author":{"gitId":"peilinye"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":73,"author":{"gitId":"peilinye"},"content":"            FileWriter fw \u003d new FileWriter(filePath);","lastModifiedDate":"2021-08-24"},{"lineNumber":74,"author":{"gitId":"peilinye"},"content":"            for (Task t : tasks.getListOfTasks()) {","lastModifiedDate":"2021-08-24"},{"lineNumber":75,"author":{"gitId":"peilinye"},"content":"                fw.write(t.getRecordString() + \"\\n\");","lastModifiedDate":"2021-08-24"},{"lineNumber":76,"author":{"gitId":"peilinye"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":77,"author":{"gitId":"peilinye"},"content":"            fw.close();","lastModifiedDate":"2021-08-24"},{"lineNumber":78,"author":{"gitId":"peilinye"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":79,"author":{"gitId":"peilinye"},"content":"            System.out.println(\"Error writing to data file.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":80,"author":{"gitId":"peilinye"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":81,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":82,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":83,"author":{"gitId":"peilinye"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":84,"author":{"gitId":"peilinye"},"content":"     * The method to parse a line from the storage file and get the Task object it represents","lastModifiedDate":"2021-08-25"},{"lineNumber":85,"author":{"gitId":"peilinye"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":86,"author":{"gitId":"peilinye"},"content":"     * @param line the line to be parsed","lastModifiedDate":"2021-08-25"},{"lineNumber":87,"author":{"gitId":"peilinye"},"content":"     * @return the Task to be added into the list of tasks","lastModifiedDate":"2021-08-25"},{"lineNumber":88,"author":{"gitId":"peilinye"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":89,"author":{"gitId":"peilinye"},"content":"    public Task parseLine(String line) {","lastModifiedDate":"2021-08-24"},{"lineNumber":90,"author":{"gitId":"peilinye"},"content":"        String[] x \u003d line.split(\"\\\\|\");","lastModifiedDate":"2021-08-24"},{"lineNumber":91,"author":{"gitId":"peilinye"},"content":"        String taskType \u003d x[0].strip();","lastModifiedDate":"2021-08-24"},{"lineNumber":92,"author":{"gitId":"peilinye"},"content":"        boolean isDone \u003d !x[1].strip().equals(\"0\");","lastModifiedDate":"2021-08-24"},{"lineNumber":93,"author":{"gitId":"peilinye"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d MMM yyyy HH:mm\");","lastModifiedDate":"2021-08-24"},{"lineNumber":94,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":95,"author":{"gitId":"peilinye"},"content":"        if (taskType.equals(\"T\")) {","lastModifiedDate":"2021-08-24"},{"lineNumber":96,"author":{"gitId":"peilinye"},"content":"            return new ToDo(x[2].strip(), isDone);","lastModifiedDate":"2021-08-24"},{"lineNumber":97,"author":{"gitId":"peilinye"},"content":"        } else if (taskType.equals(\"D\")) {","lastModifiedDate":"2021-08-24"},{"lineNumber":98,"author":{"gitId":"peilinye"},"content":"            String by \u003d x[x.length - 1].strip();","lastModifiedDate":"2021-08-24"},{"lineNumber":99,"author":{"gitId":"peilinye"},"content":"            LocalDateTime byy \u003d LocalDateTime.parse(by, formatter);","lastModifiedDate":"2021-08-24"},{"lineNumber":100,"author":{"gitId":"peilinye"},"content":"            return new Deadline(x[2].strip(), isDone, byy);","lastModifiedDate":"2021-08-24"},{"lineNumber":101,"author":{"gitId":"peilinye"},"content":"        } else { // Event","lastModifiedDate":"2021-08-24"},{"lineNumber":102,"author":{"gitId":"peilinye"},"content":"            String at \u003d x[x.length - 1].strip();","lastModifiedDate":"2021-08-24"},{"lineNumber":103,"author":{"gitId":"peilinye"},"content":"            LocalDateTime att \u003d LocalDateTime.parse(at, formatter);","lastModifiedDate":"2021-08-24"},{"lineNumber":104,"author":{"gitId":"peilinye"},"content":"            return new Event(x[2].strip(), isDone, att);","lastModifiedDate":"2021-08-24"},{"lineNumber":105,"author":{"gitId":"peilinye"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":106,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":107,"author":{"gitId":"peilinye"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"peilinye":107}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"peilinye"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"peilinye"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"peilinye"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"peilinye"},"content":"public class TaskList {","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"peilinye"},"content":"    /** the list of tasks */","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"peilinye"},"content":"    private ArrayList\u003cTask\u003e listOfTasks;","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"peilinye"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"peilinye"},"content":"     * The constructor of the TaskList class","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"peilinye"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"peilinye"},"content":"     * @param tasks the list of tasks","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"peilinye"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"peilinye"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"peilinye"},"content":"        this.listOfTasks \u003d tasks;","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"peilinye"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"peilinye"},"content":"     * The constructor of the TaskList class","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"peilinye"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"peilinye"},"content":"    public TaskList() {","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"peilinye"},"content":"        this.listOfTasks \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"peilinye"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"peilinye"},"content":"     * The method to return the list of tasks","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"peilinye"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"peilinye"},"content":"     * @return the list of tasks","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"peilinye"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"peilinye"},"content":"    public ArrayList\u003cTask\u003e getListOfTasks() {","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"peilinye"},"content":"        return this.listOfTasks;","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"peilinye"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"peilinye"},"content":"     * The method to print all tasks to console","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"peilinye"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"peilinye"},"content":"    public void listAllTasks() {","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"peilinye"},"content":"        if (listOfTasks.isEmpty()) {","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"peilinye"},"content":"            System.out.println(\"You currently have no tasks! Add one now ☻\");","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"peilinye"},"content":"        } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"peilinye"},"content":"            System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"peilinye"},"content":"            int size \u003d listOfTasks.size();","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"peilinye"},"content":"            for (int i \u003d 0; i \u003c size; i++) {","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"peilinye"},"content":"                Task t \u003d listOfTasks.get(i);","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"peilinye"},"content":"                System.out.println((i + 1) + \".\" + t.toString());","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"peilinye"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"peilinye"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"peilinye"},"content":"    public boolean isEmpty() {","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"peilinye"},"content":"        return this.listOfTasks.isEmpty();","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"peilinye"},"content":"    public int size() {","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"peilinye"},"content":"        return this.listOfTasks.size();","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"peilinye"},"content":"    public Task get(int i) {","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"peilinye"},"content":"        return this.listOfTasks.get(i);","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":63,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":64,"author":{"gitId":"peilinye"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"peilinye"},"content":"     * The method to add a Task to the list","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"peilinye"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"peilinye"},"content":"     * @param t the Task to be added","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"peilinye"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"peilinye"},"content":"    public void addTask(Task t) {","lastModifiedDate":"2021-08-24"},{"lineNumber":70,"author":{"gitId":"peilinye"},"content":"        listOfTasks.add(t);","lastModifiedDate":"2021-08-24"},{"lineNumber":71,"author":{"gitId":"peilinye"},"content":"        System.out.println(\"Okay! Task added:\\n  \" + t.toString());","lastModifiedDate":"2021-08-24"},{"lineNumber":72,"author":{"gitId":"peilinye"},"content":"        System.out.println(\"You now have \" + listOfTasks.size() + \" task(s) in the list.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":73,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":74,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":75,"author":{"gitId":"peilinye"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":76,"author":{"gitId":"peilinye"},"content":"     * The method to delete a Task from the list","lastModifiedDate":"2021-08-25"},{"lineNumber":77,"author":{"gitId":"peilinye"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":78,"author":{"gitId":"peilinye"},"content":"     * @param index the index of the Task to be deleted","lastModifiedDate":"2021-08-25"},{"lineNumber":79,"author":{"gitId":"peilinye"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":80,"author":{"gitId":"peilinye"},"content":"    public void deleteTask(int index) {","lastModifiedDate":"2021-08-24"},{"lineNumber":81,"author":{"gitId":"peilinye"},"content":"        int numOfTasks \u003d listOfTasks.size();","lastModifiedDate":"2021-08-24"},{"lineNumber":82,"author":{"gitId":"peilinye"},"content":"        if (index \u003e\u003d numOfTasks) {","lastModifiedDate":"2021-08-24"},{"lineNumber":83,"author":{"gitId":"peilinye"},"content":"            System.out.println(\"No task of this number. Add new task or input a different number.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":84,"author":{"gitId":"peilinye"},"content":"        } else if (index \u003c 0) {","lastModifiedDate":"2021-08-24"},{"lineNumber":85,"author":{"gitId":"peilinye"},"content":"            System.out.println(\"Input a task number from 1 - \" + numOfTasks);","lastModifiedDate":"2021-08-24"},{"lineNumber":86,"author":{"gitId":"peilinye"},"content":"        } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":87,"author":{"gitId":"peilinye"},"content":"            Task t \u003d listOfTasks.get(index);","lastModifiedDate":"2021-08-24"},{"lineNumber":88,"author":{"gitId":"peilinye"},"content":"            listOfTasks.remove(index);","lastModifiedDate":"2021-08-24"},{"lineNumber":89,"author":{"gitId":"peilinye"},"content":"            System.out.println(\"Ok! I\u0027ve deleted this task:\\n  \" + t.toString());","lastModifiedDate":"2021-08-24"},{"lineNumber":90,"author":{"gitId":"peilinye"},"content":"            System.out.println(\"You now have \" + (numOfTasks - 1) + \" task(s) in the list.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":91,"author":{"gitId":"peilinye"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":92,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":93,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":94,"author":{"gitId":"peilinye"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":95,"author":{"gitId":"peilinye"},"content":"     * The method to mark a Task from the list as done","lastModifiedDate":"2021-08-25"},{"lineNumber":96,"author":{"gitId":"peilinye"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":97,"author":{"gitId":"peilinye"},"content":"     * @param index the index of the Task to be marked as done","lastModifiedDate":"2021-08-25"},{"lineNumber":98,"author":{"gitId":"peilinye"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":99,"author":{"gitId":"peilinye"},"content":"    public void markTaskAsDone(int index) {","lastModifiedDate":"2021-08-25"},{"lineNumber":100,"author":{"gitId":"peilinye"},"content":"        int numOfTasks \u003d listOfTasks.size();","lastModifiedDate":"2021-08-24"},{"lineNumber":101,"author":{"gitId":"peilinye"},"content":"        if (index \u003e\u003d numOfTasks) {","lastModifiedDate":"2021-08-24"},{"lineNumber":102,"author":{"gitId":"peilinye"},"content":"            System.out.println(\"No task of this number. Add new task or input a different number.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":103,"author":{"gitId":"peilinye"},"content":"        } else if (index \u003c 0) {","lastModifiedDate":"2021-08-24"},{"lineNumber":104,"author":{"gitId":"peilinye"},"content":"            System.out.println(\"Input a task number from 1 - \" + numOfTasks);","lastModifiedDate":"2021-08-24"},{"lineNumber":105,"author":{"gitId":"peilinye"},"content":"        } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":106,"author":{"gitId":"peilinye"},"content":"            Task t \u003d listOfTasks.get(index);","lastModifiedDate":"2021-08-24"},{"lineNumber":107,"author":{"gitId":"peilinye"},"content":"            t.markAsDone();","lastModifiedDate":"2021-08-24"},{"lineNumber":108,"author":{"gitId":"peilinye"},"content":"            System.out.println(\"Nice! I\u0027ve marked this task as done:\\n  \" + t.toString());","lastModifiedDate":"2021-08-24"},{"lineNumber":109,"author":{"gitId":"peilinye"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":110,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":111,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":112,"author":{"gitId":"peilinye"},"content":"    public TaskList findMatchingTasks(String keyword) {","lastModifiedDate":"2021-08-25"},{"lineNumber":113,"author":{"gitId":"peilinye"},"content":"        ArrayList\u003cTask\u003e matchingTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-25"},{"lineNumber":114,"author":{"gitId":"peilinye"},"content":"        for (Task t : this.listOfTasks) {","lastModifiedDate":"2021-08-25"},{"lineNumber":115,"author":{"gitId":"peilinye"},"content":"            String name \u003d t.getName();","lastModifiedDate":"2021-08-25"},{"lineNumber":116,"author":{"gitId":"peilinye"},"content":"            if (name.equals(keyword) || name.contains(keyword)) {","lastModifiedDate":"2021-08-25"},{"lineNumber":117,"author":{"gitId":"peilinye"},"content":"                matchingTasks.add(t);","lastModifiedDate":"2021-08-25"},{"lineNumber":118,"author":{"gitId":"peilinye"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":119,"author":{"gitId":"peilinye"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":120,"author":{"gitId":"peilinye"},"content":"        return new TaskList(matchingTasks);","lastModifiedDate":"2021-08-25"},{"lineNumber":121,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":122,"author":{"gitId":"peilinye"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"peilinye":122}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"peilinye"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"peilinye"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"peilinye"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"peilinye"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"peilinye"},"content":"import java.io.InputStreamReader;","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"peilinye"},"content":"public class Ui {","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"peilinye"},"content":"    /** the reader to get the user input */","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"peilinye"},"content":"    private static BufferedReader reader \u003d new BufferedReader(new InputStreamReader(System.in));","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"peilinye"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"peilinye"},"content":"     * The method to show the welcome message","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"peilinye"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"peilinye"},"content":"    public void showWelcome() {","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"peilinye"},"content":"        String logo \u003d \" ____        _\\n\"","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"peilinye"},"content":"                + \"|  _ \\\\ _   _| | _____\\n\"","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"peilinye"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"peilinye"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"peilinye"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"peilinye"},"content":"        System.out.println(\"Hello from\\n\" + logo);","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"peilinye"},"content":"        System.out.println(\"Hello! I\u0027m Duke :)\\nWhat can I do for you?\");","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"peilinye"},"content":"        showLine();","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"peilinye"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"peilinye"},"content":"     * The method to show a horizontal divider line","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"peilinye"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"peilinye"},"content":"    public void showLine() {","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"peilinye"},"content":"        for (int i \u003d 0; i \u003c 60; i++) {","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"peilinye"},"content":"            System.out.print(\"_\");","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"peilinye"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"peilinye"},"content":"        System.out.println();","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"peilinye"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"peilinye"},"content":"     * The method to read the user input","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"peilinye"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"peilinye"},"content":"    public String readCommand() throws IOException {","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"peilinye"},"content":"        return reader.readLine();","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"peilinye"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"peilinye"},"content":"     * The method to show the error message","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"peilinye"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"peilinye"},"content":"    public void showError(String msg) {","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"peilinye"},"content":"        System.out.println(msg);","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"peilinye"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"peilinye"},"content":"     * The method to show the exit message","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"peilinye"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"peilinye"},"content":"    public void showExit() {","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"peilinye"},"content":"        System.out.println(\"Bye. See you again soon! :)\");","lastModifiedDate":"2021-08-24"},{"lineNumber":57,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"peilinye"},"content":"    public void showAllTasks(TaskList listOfTasks) {","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"peilinye"},"content":"        if (listOfTasks.isEmpty()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"peilinye"},"content":"            System.out.println(\"You currently have no tasks! Add one now ☻\");","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"peilinye"},"content":"        } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"peilinye"},"content":"            System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"peilinye"},"content":"            showTasks(listOfTasks);","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"peilinye"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"peilinye"},"content":"    public void showMatchingTasks(TaskList listOfTasks) {","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"peilinye"},"content":"        if (listOfTasks.isEmpty()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"peilinye"},"content":"            System.out.println(\"No matching tasks found! ☹\");","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"peilinye"},"content":"        } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"peilinye"},"content":"            System.out.println(\"Here are the tasks that match this keyword:\");","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"peilinye"},"content":"            showTasks(listOfTasks);","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"peilinye"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":76,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":77,"author":{"gitId":"peilinye"},"content":"    public void showTasks(TaskList listOfTasks) {","lastModifiedDate":"2021-08-25"},{"lineNumber":78,"author":{"gitId":"peilinye"},"content":"        int size \u003d listOfTasks.size();","lastModifiedDate":"2021-08-25"},{"lineNumber":79,"author":{"gitId":"peilinye"},"content":"        for (int i \u003d 0; i \u003c size; i++) {","lastModifiedDate":"2021-08-25"},{"lineNumber":80,"author":{"gitId":"peilinye"},"content":"            Task t \u003d listOfTasks.get(i);","lastModifiedDate":"2021-08-25"},{"lineNumber":81,"author":{"gitId":"peilinye"},"content":"            System.out.println((i + 1) + \".\" + t.toString());","lastModifiedDate":"2021-08-25"},{"lineNumber":82,"author":{"gitId":"peilinye"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":83,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":84,"author":{"gitId":"peilinye"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"peilinye":84}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"peilinye"},"content":"package duke.command;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"peilinye"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"peilinye"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"peilinye"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"peilinye"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"peilinye"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"peilinye"},"content":"    /** The task to be added */","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"peilinye"},"content":"    private Task task;","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"peilinye"},"content":"    /** Constructor of AddCommand class */","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"peilinye"},"content":"    public AddCommand(Task t) {","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"peilinye"},"content":"        this.task \u003d t;","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"peilinye"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"peilinye"},"content":"     * Method to determine if the command is an exit command","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"peilinye"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"peilinye"},"content":"     * @return whether it is an exit command","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"peilinye"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"peilinye"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"peilinye"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"peilinye"},"content":"        return false;","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"peilinye"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"peilinye"},"content":"     * Method to carry out the command","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"peilinye"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"peilinye"},"content":"     * @param tasks the list of tasks to be modified","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"peilinye"},"content":"     * @param ui the UI for the program","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"peilinye"},"content":"     * @param storage the storage utility for the program","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"peilinye"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"peilinye"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"peilinye"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"peilinye"},"content":"        tasks.addTask(this.task);","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"peilinye"},"content":"        storage.writeToFile(tasks);","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"peilinye"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"peilinye"},"content":"     * Method to determine if two instances of AddCommand are equal","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"peilinye"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"peilinye"},"content":"     * @param obj the object to be used for comparison","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"peilinye"},"content":"     * @return boolean indicating if the two AddCommand instances are equal","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"peilinye"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"peilinye"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"peilinye"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"peilinye"},"content":"        return (obj instanceof AddCommand) \u0026\u0026 this.task.equals((((AddCommand) obj).task));","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"peilinye"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"peilinye":51}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"peilinye"},"content":"package duke.command;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"peilinye"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"peilinye"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"peilinye"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"peilinye"},"content":"public abstract class Command {","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"peilinye"},"content":"    /** Constructor of Command class */","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"peilinye"},"content":"    public Command() { }","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"peilinye"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"peilinye"},"content":"     * Method to determine if the command is an exit command","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"peilinye"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"peilinye"},"content":"     * @return whether it is an exit command","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"peilinye"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"peilinye"},"content":"    public abstract boolean isExit();","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"peilinye"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"peilinye"},"content":"     * Method to carry out the command","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"peilinye"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"peilinye"},"content":"     * @param tasks the list of tasks to be modified","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"peilinye"},"content":"     * @param ui the UI for the program","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"peilinye"},"content":"     * @param storage the storage utility for the program","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"peilinye"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"peilinye"},"content":"    public abstract void execute(TaskList tasks, Ui ui, Storage storage);","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"peilinye"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"peilinye":27}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"peilinye"},"content":"package duke.command;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"peilinye"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"peilinye"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"peilinye"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"peilinye"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"peilinye"},"content":"    private int index;","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"peilinye"},"content":"    /** Constructor of DeleteCommand class */","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"peilinye"},"content":"    public DeleteCommand(int index) {","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"peilinye"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"peilinye"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"peilinye"},"content":"     * Method to determine if the command is an exit command","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"peilinye"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"peilinye"},"content":"     * @return whether it is an exit command","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"peilinye"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"peilinye"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"peilinye"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"peilinye"},"content":"        return false;","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"peilinye"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"peilinye"},"content":"     * Method to carry out the command","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"peilinye"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"peilinye"},"content":"     * @param tasks the list of tasks to be modified","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"peilinye"},"content":"     * @param ui the UI for the program","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"peilinye"},"content":"     * @param storage the storage utility for the program","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"peilinye"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"peilinye"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"peilinye"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"peilinye"},"content":"        tasks.deleteTask(this.index);","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"peilinye"},"content":"        storage.writeToFile(tasks);","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"peilinye"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"peilinye"},"content":"     * Method to determine if two instances of DeleteCommand are equal","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"peilinye"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"peilinye"},"content":"     * @param obj the object to be used for comparison","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"peilinye"},"content":"     * @return boolean indicating if the two DeleteCommand instances are equal","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"peilinye"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"peilinye"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"peilinye"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"peilinye"},"content":"        return (obj instanceof DeleteCommand) \u0026\u0026 (this.index \u003d\u003d ((DeleteCommand) obj).index);","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"peilinye"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"peilinye":48}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"peilinye"},"content":"package duke.command;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"peilinye"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"peilinye"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"peilinye"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"peilinye"},"content":"public class DoneCommand extends Command {","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"peilinye"},"content":"    private int index;","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"peilinye"},"content":"    /** Constructor of DoneCommand class */","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"peilinye"},"content":"    public DoneCommand(int index) {","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"peilinye"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"peilinye"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"peilinye"},"content":"     * Method to determine if the command is an exit command","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"peilinye"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"peilinye"},"content":"     * @return whether it is an exit command","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"peilinye"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"peilinye"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"peilinye"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"peilinye"},"content":"        return false;","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"peilinye"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"peilinye"},"content":"     * Method to carry out the command","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"peilinye"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"peilinye"},"content":"     * @param tasks the list of tasks to be modified","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"peilinye"},"content":"     * @param ui the UI for the program","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"peilinye"},"content":"     * @param storage the storage utility for the program","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"peilinye"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"peilinye"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"peilinye"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"peilinye"},"content":"        tasks.markTaskAsDone(this.index);","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"peilinye"},"content":"        storage.writeToFile(tasks);","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"peilinye"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"peilinye"},"content":"     * Method to determine if two instances of DoneCommand are equal","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"peilinye"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"peilinye"},"content":"     * @param obj the object to be used for comparison","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"peilinye"},"content":"     * @return boolean indicating if the two DoneCommand instances are equal","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"peilinye"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"peilinye"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"peilinye"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"peilinye"},"content":"        return (obj instanceof DoneCommand) \u0026\u0026 (this.index \u003d\u003d ((DoneCommand) obj).index);","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"peilinye"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"peilinye":49}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"peilinye"},"content":"package duke.command;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"peilinye"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"peilinye"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"peilinye"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"peilinye"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"peilinye"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"peilinye"},"content":"     * Method to determine if the command is an exit command","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"peilinye"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"peilinye"},"content":"     * @return whether it is an exit command","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"peilinye"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"peilinye"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"peilinye"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"peilinye"},"content":"        return true;","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"peilinye"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"peilinye"},"content":"     * Method to carry out the command","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"peilinye"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"peilinye"},"content":"     * @param tasks the list of tasks to be modified","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"peilinye"},"content":"     * @param ui the UI for the program","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"peilinye"},"content":"     * @param storage the storage utility for the program","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"peilinye"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"peilinye"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"peilinye"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"peilinye"},"content":"        ui.showExit();","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"peilinye"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"peilinye"},"content":"     * Method to determine if the object is an ExitCommand","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"peilinye"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"peilinye"},"content":"     * @param obj the object to be used for comparison","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"peilinye"},"content":"     * @return boolean indicating if the object is an ExitCommand","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"peilinye"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"peilinye"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"peilinye"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"peilinye"},"content":"        return obj instanceof ExitCommand;","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"peilinye"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"peilinye":41}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"peilinye"},"content":"package duke.command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"peilinye"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"peilinye"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"peilinye"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"peilinye"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"peilinye"},"content":"    private String keyword;","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"peilinye"},"content":"    public FindCommand(String keyword) {","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"peilinye"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"peilinye"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"peilinye"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"peilinye"},"content":"        return false;","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"peilinye"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"peilinye"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"peilinye"},"content":"        TaskList matchingTasks \u003d tasks.findMatchingTasks(this.keyword);","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"peilinye"},"content":"        ui.showMatchingTasks(matchingTasks);","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"peilinye"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"peilinye"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"peilinye"},"content":"        return obj instanceof FindCommand \u0026\u0026 ((FindCommand) obj).keyword.equals(this.keyword);","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"peilinye"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"peilinye":30}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"peilinye"},"content":"package duke.command;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"peilinye"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"peilinye"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"peilinye"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"peilinye"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"peilinye"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"peilinye"},"content":"     * Method to determine if the command is an exit command","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"peilinye"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"peilinye"},"content":"     * @return whether it is an exit command","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"peilinye"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"peilinye"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"peilinye"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"peilinye"},"content":"        return false;","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"peilinye"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"peilinye"},"content":"     * Method to carry out the command","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"peilinye"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"peilinye"},"content":"     * @param tasks the list of tasks to be modified","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"peilinye"},"content":"     * @param ui the UI for the program","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"peilinye"},"content":"     * @param storage the storage utility for the program","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"peilinye"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"peilinye"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"peilinye"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"peilinye"},"content":"        ui.showAllTasks(tasks);","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"peilinye"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"peilinye"},"content":"     * Method to determine if the object is a ListCommand","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"peilinye"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"peilinye"},"content":"     * @param obj the object to be used for comparison","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"peilinye"},"content":"     * @return boolean indicating if the object is a ListCommand","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"peilinye"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"peilinye"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"peilinye"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"peilinye"},"content":"        return obj instanceof ListCommand;","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"peilinye"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"peilinye":41}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"peilinye"},"content":"package duke.task;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"peilinye"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"peilinye"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"peilinye"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"peilinye"},"content":"    /** representation of the deadline date */","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"peilinye"},"content":"    protected LocalDateTime by;","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"peilinye"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"peilinye"},"content":"     * Constructor of Deadline class","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"peilinye"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"peilinye"},"content":"     * @param name name of task","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"peilinye"},"content":"     * @param by date of deadline of the task","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"peilinye"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"peilinye"},"content":"    public Deadline(String name, LocalDateTime by) {","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"peilinye"},"content":"        super(name);","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"peilinye"},"content":"        this.by \u003d by;","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"peilinye"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"peilinye"},"content":"     * Constructor of Deadline class","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"peilinye"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"peilinye"},"content":"     * @param name name of task","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"peilinye"},"content":"     * @param isDone whether the task has been completed","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"peilinye"},"content":"     * @param by date of deadline of the task","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"peilinye"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"peilinye"},"content":"    public Deadline(String name, boolean isDone, LocalDateTime by) {","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"peilinye"},"content":"        super(name, isDone);","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"peilinye"},"content":"        this.by \u003d by;","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"peilinye"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"peilinye"},"content":"     * Method to return the string representation of the Deadline instance","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"peilinye"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"peilinye"},"content":"     * @return the string representation of the Deadline instance","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"peilinye"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"peilinye"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"peilinye"},"content":"    public String toString() {","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"peilinye"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d MMM yyyy HH:mm\");","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"peilinye"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + this.by.format(formatter) + \")\";","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"peilinye"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"peilinye"},"content":"     * Method to return the string to be recorded of the Deadline instance","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"peilinye"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"peilinye"},"content":"     * @return the string to be recorded of the Deadline instance","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"peilinye"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"peilinye"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"peilinye"},"content":"    public String getRecordString() {","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"peilinye"},"content":"        int done \u003d this.isDone ? 1 : 0;","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"peilinye"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d MMM yyyy HH:mm\");","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"peilinye"},"content":"        String record \u003d String.format(\"D | %d | %s | %s\", done, this.name, this.by.format(formatter));","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"peilinye"},"content":"        return record;","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":57,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"peilinye"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"peilinye"},"content":"     * Method to determine if two instances of Deadline are equal","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"peilinye"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"peilinye"},"content":"     * @param obj the object to be used for comparison","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"peilinye"},"content":"     * @return boolean indicating if the two Deadline instances are equal","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"peilinye"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"peilinye"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"peilinye"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2021-08-24"},{"lineNumber":66,"author":{"gitId":"peilinye"},"content":"        if (obj instanceof Deadline) {","lastModifiedDate":"2021-08-24"},{"lineNumber":67,"author":{"gitId":"peilinye"},"content":"            Deadline dl \u003d (Deadline) obj;","lastModifiedDate":"2021-08-24"},{"lineNumber":68,"author":{"gitId":"peilinye"},"content":"            return this.name.equals(dl.name) \u0026\u0026 this.by.equals(dl.by) \u0026\u0026 this.isDone \u003d\u003d dl.isDone;","lastModifiedDate":"2021-08-24"},{"lineNumber":69,"author":{"gitId":"peilinye"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":70,"author":{"gitId":"peilinye"},"content":"        return false;","lastModifiedDate":"2021-08-24"},{"lineNumber":71,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":72,"author":{"gitId":"peilinye"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"peilinye":72}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"peilinye"},"content":"package duke.task;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"peilinye"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"peilinye"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"peilinye"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"peilinye"},"content":"    /** representation of the event date */","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"peilinye"},"content":"    protected LocalDateTime at;","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"peilinye"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"peilinye"},"content":"     * Constructor of Event class","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"peilinye"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"peilinye"},"content":"     * @param name name of task","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"peilinye"},"content":"     * @param at date of the event","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"peilinye"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"peilinye"},"content":"    public Event(String name, LocalDateTime at) {","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"peilinye"},"content":"        super(name);","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"peilinye"},"content":"        this.at \u003d at;","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"peilinye"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"peilinye"},"content":"     * Constructor of Event class","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"peilinye"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"peilinye"},"content":"     * @param name name of task","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"peilinye"},"content":"     * @param isDone whether the task has been completed","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"peilinye"},"content":"     * @param at date of the event","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"peilinye"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"peilinye"},"content":"    public Event(String name, boolean isDone, LocalDateTime at) {","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"peilinye"},"content":"        super(name, isDone);","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"peilinye"},"content":"        this.at \u003d at;","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"peilinye"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"peilinye"},"content":"     * Method to return the string representation of the Event instance","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"peilinye"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"peilinye"},"content":"     * @return the string representation of the Event instance","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"peilinye"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"peilinye"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"peilinye"},"content":"    public String toString() {","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"peilinye"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d MMM yyyy HH:mm\");","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"peilinye"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + this.at.format(formatter) + \")\";","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"peilinye"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"peilinye"},"content":"     * Method to return the string to be recorded of the Event instance","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"peilinye"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"peilinye"},"content":"     * @return the string to be recorded of the Event instance","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"peilinye"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"peilinye"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"peilinye"},"content":"    public String getRecordString() {","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"peilinye"},"content":"        int done \u003d this.isDone ? 1 : 0;","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"peilinye"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d MMM yyyy HH:mm\");","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"peilinye"},"content":"        String record \u003d String.format(\"E | %d | %s | %s\", done, this.name, this.at.format(formatter));","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"peilinye"},"content":"        return record;","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":57,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"peilinye"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"peilinye"},"content":"     * Method to determine if two instances of Event are equal","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"peilinye"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"peilinye"},"content":"     * @param obj the object to be used for comparison","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"peilinye"},"content":"     * @return boolean indicating if the two Event instances are equal","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"peilinye"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"peilinye"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"peilinye"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2021-08-24"},{"lineNumber":66,"author":{"gitId":"peilinye"},"content":"        if (obj instanceof Event) {","lastModifiedDate":"2021-08-24"},{"lineNumber":67,"author":{"gitId":"peilinye"},"content":"            Event ev \u003d (Event) obj;","lastModifiedDate":"2021-08-24"},{"lineNumber":68,"author":{"gitId":"peilinye"},"content":"            return this.name.equals(ev.name) \u0026\u0026 this.at.equals(ev.at) \u0026\u0026 this.isDone \u003d\u003d ev.isDone;","lastModifiedDate":"2021-08-24"},{"lineNumber":69,"author":{"gitId":"peilinye"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":70,"author":{"gitId":"peilinye"},"content":"        return false;","lastModifiedDate":"2021-08-24"},{"lineNumber":71,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":72,"author":{"gitId":"peilinye"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"peilinye":72}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"peilinye"},"content":"package duke.task;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"peilinye"},"content":"public abstract class Task {","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"peilinye"},"content":"    /** name of the task */","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"peilinye"},"content":"    protected String name;","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"peilinye"},"content":"    /** whether the task has been completed */","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"peilinye"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"peilinye"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"peilinye"},"content":"     * Constructor of Task class","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"peilinye"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"peilinye"},"content":"     * @param name name of task","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"peilinye"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"peilinye"},"content":"    public Task(String name) {","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"peilinye"},"content":"        this.name \u003d name;","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"peilinye"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"peilinye"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"peilinye"},"content":"     * Constructor of Task class","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"peilinye"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"peilinye"},"content":"     * @param name name of task","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"peilinye"},"content":"     * @param isDone whether the task has been completed","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"peilinye"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"peilinye"},"content":"    public Task(String name, boolean isDone) {","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"peilinye"},"content":"        this.name \u003d name;","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"peilinye"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"peilinye"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"peilinye"},"content":"     * Method to return the symbol indicating if the task has been completed","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"peilinye"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"peilinye"},"content":"     * @return symbol indicating if the task has been completed","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"peilinye"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"peilinye"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"peilinye"},"content":"        return (this.isDone ? \"X\" : \" \");","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"peilinye"},"content":"    public String getName() {","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"peilinye"},"content":"        return this.name;","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"peilinye"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"peilinye"},"content":"     * Method to mark the task as done","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"peilinye"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"peilinye"},"content":"    public void markAsDone() {","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"peilinye"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"peilinye"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"peilinye"},"content":"     * Method to return the string representation of the Task","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"peilinye"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"peilinye"},"content":"     * @return the string representation of the Task","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"peilinye"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"peilinye"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"peilinye"},"content":"    public String toString() {","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"peilinye"},"content":"        return \"[\" + getStatusIcon() + \"] \" + this.name;","lastModifiedDate":"2021-08-24"},{"lineNumber":60,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"peilinye"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"peilinye"},"content":"     * Method to return the string to be recorded of the Task instance","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"peilinye"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"peilinye"},"content":"     * @return the string to be recorded of the Task instance","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"peilinye"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"peilinye"},"content":"    public abstract String getRecordString();","lastModifiedDate":"2021-08-24"},{"lineNumber":68,"author":{"gitId":"peilinye"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"peilinye":68}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"peilinye"},"content":"package duke.task;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"peilinye"},"content":"public class ToDo extends Task{","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"peilinye"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"peilinye"},"content":"     * Constructor of ToDo class","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"peilinye"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"peilinye"},"content":"     * @param name name of task","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"peilinye"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"peilinye"},"content":"    public ToDo(String name) {","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"peilinye"},"content":"        super(name);","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"peilinye"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"peilinye"},"content":"     * Constructor of ToDo class","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"peilinye"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"peilinye"},"content":"     * @param name name of task","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"peilinye"},"content":"     * @param isDone whether the task has been completed","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"peilinye"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"peilinye"},"content":"    public ToDo(String name, boolean isDone) {","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"peilinye"},"content":"        super(name, isDone);","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"peilinye"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"peilinye"},"content":"     * Method to return the string representation of the ToDo instance","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"peilinye"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"peilinye"},"content":"     * @return the string representation of the ToDo instance","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"peilinye"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"peilinye"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"peilinye"},"content":"    public String toString() {","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"peilinye"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"peilinye"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"peilinye"},"content":"     * Method to return the string to be recorded of the ToDo instance","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"peilinye"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"peilinye"},"content":"     * @return the string to be recorded of the ToDo instance","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"peilinye"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"peilinye"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"peilinye"},"content":"    public String getRecordString() {","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"peilinye"},"content":"        int done \u003d this.isDone ? 1 : 0;","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"peilinye"},"content":"        String record \u003d String.format(\"T | %d | %s\", done, this.name);","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"peilinye"},"content":"        return record;","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"peilinye"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"peilinye"},"content":"     * Method to determine if two instances of ToDo are equal","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"peilinye"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"peilinye"},"content":"     * @param obj the object to be used for comparison","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"peilinye"},"content":"     * @return boolean indicating if the two ToDo instances are equal","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"peilinye"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"peilinye"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"peilinye"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"peilinye"},"content":"        if (obj instanceof ToDo) {","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"peilinye"},"content":"            ToDo td \u003d (ToDo) obj;","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"peilinye"},"content":"            return this.name.equals(td.name) \u0026\u0026 this.isDone \u003d\u003d td.isDone;","lastModifiedDate":"2021-08-24"},{"lineNumber":57,"author":{"gitId":"peilinye"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"peilinye"},"content":"        return false;","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":60,"author":{"gitId":"peilinye"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"peilinye":60}},{"path":"src/test/java/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"peilinye"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"peilinye"},"content":"import duke.command.AddCommand;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"peilinye"},"content":"import duke.command.DeleteCommand;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"peilinye"},"content":"import duke.command.DoneCommand;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"peilinye"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"peilinye"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"peilinye"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"peilinye"},"content":"import duke.task.Event;","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"peilinye"},"content":"import duke.task.ToDo;","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"peilinye"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"peilinye"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"peilinye"},"content":"public class ParserTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"peilinye"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"peilinye"},"content":"    public void testParseAddCommand() throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"peilinye"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"peilinye"},"content":"        assertEquals(Parser.parse(\"deadline return book /by 2021-08-25 23:59\"),","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"peilinye"},"content":"                new AddCommand(new Deadline(\"return book\", false,","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"peilinye"},"content":"                        LocalDateTime.parse(\"2021-08-25 23:59\", formatter))));","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"peilinye"},"content":"        assertEquals(Parser.parse(\"event group meeting /at 2021-09-01 15:00\"),","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"peilinye"},"content":"                new AddCommand(new Event(\"group meeting\", false,","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"peilinye"},"content":"                        LocalDateTime.parse(\"2021-09-01 15:00\", formatter))));","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"peilinye"},"content":"        assertEquals(Parser.parse(\"todo read book \"),","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"peilinye"},"content":"                new AddCommand(new ToDo(\"read book\", false)));","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"peilinye"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"peilinye"},"content":"    public void testParseDeleteCommand() throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"peilinye"},"content":"        assertEquals(Parser.parse(\"delete 2\"), new DeleteCommand(1));","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"peilinye"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"peilinye"},"content":"    public void testDoneCommand() throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"peilinye"},"content":"        assertEquals(Parser.parse(\"done 5\"), new DoneCommand(4));","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"peilinye"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"peilinye":40}},{"path":"src/test/java/duke/StorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"peilinye"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"peilinye"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"peilinye"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"peilinye"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"peilinye"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"peilinye"},"content":"import duke.task.ToDo;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"peilinye"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"peilinye"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"peilinye"},"content":"public class StorageTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"peilinye"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"peilinye"},"content":"    public void testParseLineToDo() {","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"peilinye"},"content":"        Storage s \u003d new Storage(\"data/tasks.txt\");","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"peilinye"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d MMM yyyy HH:mm\");","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"peilinye"},"content":"        assertEquals(s.parseLine(\"T | 1 | read book\"),","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"peilinye"},"content":"                new ToDo(\"read book\", true));","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"peilinye"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"peilinye"},"content":"    public void testParseLineDeadline() {","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"peilinye"},"content":"        Storage s \u003d new Storage(\"data/tasks.txt\");","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"peilinye"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d MMM yyyy HH:mm\");","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"peilinye"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"peilinye"},"content":"        assertEquals(s.parseLine(\"D | 0 | return book | 31 Aug 2021 09:00\"),","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"peilinye"},"content":"                new Deadline(\"return book\", false,","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"peilinye"},"content":"                        LocalDateTime.parse(\"31 Aug 2021 09:00\", formatter)));","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"peilinye"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"peilinye"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"peilinye":33}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"peilinye"},"content":"todo borrow book","lastModifiedDate":"2021-08-18"},{"lineNumber":2,"author":{"gitId":"peilinye"},"content":"todo read book","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"peilinye"},"content":"deadline return book /by Aug 12","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"peilinye"},"content":"done 1","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"peilinye"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"peilinye"},"content":"event project meeting /at Tue 2-4pm","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"peilinye"},"content":"done 4","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"peilinye"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"peilinye"},"content":"delete 4","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"peilinye"},"content":"bye","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"peilinye":10}}]

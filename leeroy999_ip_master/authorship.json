[{"path":"src/main/java/Ailurus.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"leeroy999"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-17"},{"lineNumber":2,"author":{"gitId":"leeroy999"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"leeroy999"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"leeroy999"},"content":"/**","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"leeroy999"},"content":" * The main task chatbot class for Ailurus Chatbot","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"leeroy999"},"content":" *","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"leeroy999"},"content":" * @author Leeroy Liu","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"leeroy999"},"content":" */","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"leeroy999"},"content":"public class Ailurus {","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"leeroy999"},"content":"    private static final String CHATBOT \u003d \"Ailurus\";","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"leeroy999"},"content":"    private static final String YOU \u003d \"You\";","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"leeroy999"},"content":"    private static ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"leeroy999"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"leeroy999"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"leeroy999"},"content":"     * Customized display for chatbot messages","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"leeroy999"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"leeroy999"},"content":"     * @param message display message to be printed","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"leeroy999"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"leeroy999"},"content":"    private static void say(String message) {","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"leeroy999"},"content":"        System.out.println(String.format(\"%s: %s\", Ailurus.CHATBOT, message));","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"leeroy999"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"leeroy999"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"leeroy999"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":24,"author":{"gitId":"leeroy999"},"content":"     * Printing out of the list of tasks","lastModifiedDate":"2021-08-18"},{"lineNumber":25,"author":{"gitId":"leeroy999"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":26,"author":{"gitId":"leeroy999"},"content":"    private static void sayList() {","lastModifiedDate":"2021-08-18"},{"lineNumber":27,"author":{"gitId":"leeroy999"},"content":"        if (list.size() \u003d\u003d 0) {","lastModifiedDate":"2021-08-18"},{"lineNumber":28,"author":{"gitId":"leeroy999"},"content":"            throw new AilurusException(AilurusException.Error.EMPTYLIST);","lastModifiedDate":"2021-08-18"},{"lineNumber":29,"author":{"gitId":"leeroy999"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":30,"author":{"gitId":"leeroy999"},"content":"        Ailurus.say(\"\");","lastModifiedDate":"2021-08-18"},{"lineNumber":31,"author":{"gitId":"leeroy999"},"content":"        for(int i \u003d 0; i \u003c list.size(); i++) {","lastModifiedDate":"2021-08-18"},{"lineNumber":32,"author":{"gitId":"leeroy999"},"content":"            System.out.println(String.format(\"%d.%s\", i + 1, list.get(i).toString()));","lastModifiedDate":"2021-08-18"},{"lineNumber":33,"author":{"gitId":"leeroy999"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":34,"author":{"gitId":"leeroy999"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":35,"author":{"gitId":"leeroy999"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":36,"author":{"gitId":"leeroy999"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":37,"author":{"gitId":"leeroy999"},"content":"     * Marking a specific task as done","lastModifiedDate":"2021-08-18"},{"lineNumber":38,"author":{"gitId":"leeroy999"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":39,"author":{"gitId":"leeroy999"},"content":"     * @param str String to be converted to integer, representing task number to be marked as done","lastModifiedDate":"2021-08-18"},{"lineNumber":40,"author":{"gitId":"leeroy999"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":41,"author":{"gitId":"leeroy999"},"content":"    private static void done(String str) {","lastModifiedDate":"2021-08-18"},{"lineNumber":42,"author":{"gitId":"leeroy999"},"content":"        try {","lastModifiedDate":"2021-08-18"},{"lineNumber":43,"author":{"gitId":"leeroy999"},"content":"            int taskNo \u003d Integer.parseInt(str);","lastModifiedDate":"2021-08-18"},{"lineNumber":44,"author":{"gitId":"leeroy999"},"content":"            if (taskNo \u003e list.size() || taskNo \u003c 1) {","lastModifiedDate":"2021-08-18"},{"lineNumber":45,"author":{"gitId":"leeroy999"},"content":"                throw new AilurusException(AilurusException.Error.NUMBER);","lastModifiedDate":"2021-08-18"},{"lineNumber":46,"author":{"gitId":"leeroy999"},"content":"            } else {","lastModifiedDate":"2021-08-18"},{"lineNumber":47,"author":{"gitId":"leeroy999"},"content":"                Task task \u003d list.get(taskNo - 1);","lastModifiedDate":"2021-08-18"},{"lineNumber":48,"author":{"gitId":"leeroy999"},"content":"                task.markAsDone();","lastModifiedDate":"2021-08-18"},{"lineNumber":49,"author":{"gitId":"leeroy999"},"content":"                Ailurus.say(String.format(\"Nice! I\u0027ve marked this task as done:\\n\\t%s\", task));","lastModifiedDate":"2021-08-18"},{"lineNumber":50,"author":{"gitId":"leeroy999"},"content":"            }","lastModifiedDate":"2021-08-18"},{"lineNumber":51,"author":{"gitId":"leeroy999"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-08-18"},{"lineNumber":52,"author":{"gitId":"leeroy999"},"content":"            throw new AilurusException(AilurusException.Error.NAN);","lastModifiedDate":"2021-08-18"},{"lineNumber":53,"author":{"gitId":"leeroy999"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":54,"author":{"gitId":"leeroy999"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":55,"author":{"gitId":"leeroy999"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":56,"author":{"gitId":"leeroy999"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":57,"author":{"gitId":"leeroy999"},"content":"     * Adding task to list of tasks","lastModifiedDate":"2021-08-18"},{"lineNumber":58,"author":{"gitId":"leeroy999"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":59,"author":{"gitId":"leeroy999"},"content":"     * @param task Task that has been added","lastModifiedDate":"2021-08-18"},{"lineNumber":60,"author":{"gitId":"leeroy999"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":61,"author":{"gitId":"leeroy999"},"content":"    private static void addTask(Task task) {","lastModifiedDate":"2021-08-18"},{"lineNumber":62,"author":{"gitId":"leeroy999"},"content":"        list.add(task);","lastModifiedDate":"2021-08-18"},{"lineNumber":63,"author":{"gitId":"leeroy999"},"content":"        Ailurus.say(String.format(\"Got it. I\u0027ve added this task:\\n\\t%s\\nNow you have %d tasks in the list.\",","lastModifiedDate":"2021-08-18"},{"lineNumber":64,"author":{"gitId":"leeroy999"},"content":"                task.toString(), list.size()));","lastModifiedDate":"2021-08-18"},{"lineNumber":65,"author":{"gitId":"leeroy999"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":66,"author":{"gitId":"leeroy999"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":67,"author":{"gitId":"leeroy999"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":68,"author":{"gitId":"leeroy999"},"content":"     * Deleting task from a list of tasks","lastModifiedDate":"2021-08-18"},{"lineNumber":69,"author":{"gitId":"leeroy999"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":70,"author":{"gitId":"leeroy999"},"content":"     * @param str String to be converted to integer, representing task number to be deleted","lastModifiedDate":"2021-08-18"},{"lineNumber":71,"author":{"gitId":"leeroy999"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":72,"author":{"gitId":"leeroy999"},"content":"    private static void delete(String str) {","lastModifiedDate":"2021-08-18"},{"lineNumber":73,"author":{"gitId":"leeroy999"},"content":"        try {","lastModifiedDate":"2021-08-18"},{"lineNumber":74,"author":{"gitId":"leeroy999"},"content":"            int taskNo \u003d Integer.parseInt(str);","lastModifiedDate":"2021-08-18"},{"lineNumber":75,"author":{"gitId":"leeroy999"},"content":"            if (taskNo \u003e list.size() || taskNo \u003c 1) {","lastModifiedDate":"2021-08-18"},{"lineNumber":76,"author":{"gitId":"leeroy999"},"content":"                throw new AilurusException(AilurusException.Error.NUMBER);","lastModifiedDate":"2021-08-18"},{"lineNumber":77,"author":{"gitId":"leeroy999"},"content":"            } else {","lastModifiedDate":"2021-08-18"},{"lineNumber":78,"author":{"gitId":"leeroy999"},"content":"                Task task \u003d list.get(taskNo - 1);","lastModifiedDate":"2021-08-18"},{"lineNumber":79,"author":{"gitId":"leeroy999"},"content":"                list.remove(taskNo - 1);","lastModifiedDate":"2021-08-18"},{"lineNumber":80,"author":{"gitId":"leeroy999"},"content":"                Ailurus.say(String.format(\"Noted. I\u0027ve removed this task:\\n\\t%s\\nNow you have %d tasks in the list.\",","lastModifiedDate":"2021-08-18"},{"lineNumber":81,"author":{"gitId":"leeroy999"},"content":"                        task, list.size()));","lastModifiedDate":"2021-08-18"},{"lineNumber":82,"author":{"gitId":"leeroy999"},"content":"            }","lastModifiedDate":"2021-08-18"},{"lineNumber":83,"author":{"gitId":"leeroy999"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-08-18"},{"lineNumber":84,"author":{"gitId":"leeroy999"},"content":"            throw new AilurusException(AilurusException.Error.NAN);","lastModifiedDate":"2021-08-18"},{"lineNumber":85,"author":{"gitId":"leeroy999"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":86,"author":{"gitId":"leeroy999"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":87,"author":{"gitId":"leeroy999"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":88,"author":{"gitId":"leeroy999"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":89,"author":{"gitId":"leeroy999"},"content":"     * Parse message and return string after command","lastModifiedDate":"2021-08-18"},{"lineNumber":90,"author":{"gitId":"leeroy999"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":91,"author":{"gitId":"leeroy999"},"content":"     * @param message message to be parsed","lastModifiedDate":"2021-08-18"},{"lineNumber":92,"author":{"gitId":"leeroy999"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":93,"author":{"gitId":"leeroy999"},"content":"    public static String parseMessage(String message) {","lastModifiedDate":"2021-08-18"},{"lineNumber":94,"author":{"gitId":"leeroy999"},"content":"        int index \u003d message.indexOf(\" \");","lastModifiedDate":"2021-08-18"},{"lineNumber":95,"author":{"gitId":"leeroy999"},"content":"        if (index \u003e 0) {","lastModifiedDate":"2021-08-18"},{"lineNumber":96,"author":{"gitId":"leeroy999"},"content":"            return message.substring(index + 1);","lastModifiedDate":"2021-08-18"},{"lineNumber":97,"author":{"gitId":"leeroy999"},"content":"        } else {","lastModifiedDate":"2021-08-18"},{"lineNumber":98,"author":{"gitId":"leeroy999"},"content":"            return \"\";","lastModifiedDate":"2021-08-18"},{"lineNumber":99,"author":{"gitId":"leeroy999"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":100,"author":{"gitId":"leeroy999"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":101,"author":{"gitId":"leeroy999"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":103,"author":{"gitId":"leeroy999"},"content":"        boolean endChat \u003d false;","lastModifiedDate":"2021-08-17"},{"lineNumber":104,"author":{"gitId":"leeroy999"},"content":"        Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-17"},{"lineNumber":105,"author":{"gitId":"leeroy999"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":106,"author":{"gitId":"leeroy999"},"content":"        Ailurus.say(String.format(\"Hello! I\u0027m %s. What can I do for you?\", Ailurus.CHATBOT));","lastModifiedDate":"2021-08-18"},{"lineNumber":107,"author":{"gitId":"leeroy999"},"content":"        while (!endChat) {","lastModifiedDate":"2021-08-17"},{"lineNumber":108,"author":{"gitId":"leeroy999"},"content":"            System.out.print(Ailurus.YOU + \": \");","lastModifiedDate":"2021-08-18"},{"lineNumber":109,"author":{"gitId":"leeroy999"},"content":"            String input \u003d scanner.nextLine();","lastModifiedDate":"2021-08-18"},{"lineNumber":110,"author":{"gitId":"leeroy999"},"content":"            String first \u003d input.split(\" \")[0];","lastModifiedDate":"2021-08-18"},{"lineNumber":111,"author":{"gitId":"leeroy999"},"content":"            switch (first) {","lastModifiedDate":"2021-08-18"},{"lineNumber":112,"author":{"gitId":"leeroy999"},"content":"                case \"bye\":","lastModifiedDate":"2021-08-17"},{"lineNumber":113,"author":{"gitId":"leeroy999"},"content":"                    endChat \u003d true;","lastModifiedDate":"2021-08-17"},{"lineNumber":114,"author":{"gitId":"leeroy999"},"content":"                    break;","lastModifiedDate":"2021-08-17"},{"lineNumber":115,"author":{"gitId":"leeroy999"},"content":"                case \"list\":","lastModifiedDate":"2021-08-17"},{"lineNumber":116,"author":{"gitId":"leeroy999"},"content":"                    try {","lastModifiedDate":"2021-08-18"},{"lineNumber":117,"author":{"gitId":"leeroy999"},"content":"                        Ailurus.sayList();","lastModifiedDate":"2021-08-18"},{"lineNumber":118,"author":{"gitId":"leeroy999"},"content":"                    } catch (AilurusException e) {","lastModifiedDate":"2021-08-18"},{"lineNumber":119,"author":{"gitId":"leeroy999"},"content":"                        Ailurus.say(e.toString());","lastModifiedDate":"2021-08-18"},{"lineNumber":120,"author":{"gitId":"leeroy999"},"content":"                    }","lastModifiedDate":"2021-08-17"},{"lineNumber":121,"author":{"gitId":"leeroy999"},"content":"                    break;","lastModifiedDate":"2021-08-17"},{"lineNumber":122,"author":{"gitId":"leeroy999"},"content":"                case \"done\":","lastModifiedDate":"2021-08-17"},{"lineNumber":123,"author":{"gitId":"leeroy999"},"content":"                    try {","lastModifiedDate":"2021-08-17"},{"lineNumber":124,"author":{"gitId":"leeroy999"},"content":"                        String str \u003d parseMessage(input);","lastModifiedDate":"2021-08-18"},{"lineNumber":125,"author":{"gitId":"leeroy999"},"content":"                        Ailurus.done(str);","lastModifiedDate":"2021-08-18"},{"lineNumber":126,"author":{"gitId":"leeroy999"},"content":"                    } catch (AilurusException e) {","lastModifiedDate":"2021-08-18"},{"lineNumber":127,"author":{"gitId":"leeroy999"},"content":"                        Ailurus.say(e.toString());","lastModifiedDate":"2021-08-18"},{"lineNumber":128,"author":{"gitId":"leeroy999"},"content":"                    }","lastModifiedDate":"2021-08-17"},{"lineNumber":129,"author":{"gitId":"leeroy999"},"content":"                    break;","lastModifiedDate":"2021-08-18"},{"lineNumber":130,"author":{"gitId":"leeroy999"},"content":"                case \"todo\":","lastModifiedDate":"2021-08-18"},{"lineNumber":131,"author":{"gitId":"leeroy999"},"content":"                    try {","lastModifiedDate":"2021-08-18"},{"lineNumber":132,"author":{"gitId":"leeroy999"},"content":"                        String todoMessage \u003d parseMessage(input);","lastModifiedDate":"2021-08-18"},{"lineNumber":133,"author":{"gitId":"leeroy999"},"content":"                        Ailurus.addTask(new Todo(todoMessage));","lastModifiedDate":"2021-08-18"},{"lineNumber":134,"author":{"gitId":"leeroy999"},"content":"                    } catch (AilurusException e) {","lastModifiedDate":"2021-08-18"},{"lineNumber":135,"author":{"gitId":"leeroy999"},"content":"                        Ailurus.say(e.toString());","lastModifiedDate":"2021-08-18"},{"lineNumber":136,"author":{"gitId":"leeroy999"},"content":"                    }","lastModifiedDate":"2021-08-18"},{"lineNumber":137,"author":{"gitId":"leeroy999"},"content":"                    break;","lastModifiedDate":"2021-08-18"},{"lineNumber":138,"author":{"gitId":"leeroy999"},"content":"                case \"deadline\":","lastModifiedDate":"2021-08-18"},{"lineNumber":139,"author":{"gitId":"leeroy999"},"content":"                    try {","lastModifiedDate":"2021-08-18"},{"lineNumber":140,"author":{"gitId":"leeroy999"},"content":"                        String deadlineMessage \u003d parseMessage(input);","lastModifiedDate":"2021-08-18"},{"lineNumber":141,"author":{"gitId":"leeroy999"},"content":"                        Ailurus.addTask(new Deadline(deadlineMessage));","lastModifiedDate":"2021-08-18"},{"lineNumber":142,"author":{"gitId":"leeroy999"},"content":"                    } catch (AilurusException e) {","lastModifiedDate":"2021-08-18"},{"lineNumber":143,"author":{"gitId":"leeroy999"},"content":"                        Ailurus.say(e.toString());","lastModifiedDate":"2021-08-18"},{"lineNumber":144,"author":{"gitId":"leeroy999"},"content":"                    }","lastModifiedDate":"2021-08-18"},{"lineNumber":145,"author":{"gitId":"leeroy999"},"content":"                    break;","lastModifiedDate":"2021-08-18"},{"lineNumber":146,"author":{"gitId":"leeroy999"},"content":"                case \"event\":","lastModifiedDate":"2021-08-18"},{"lineNumber":147,"author":{"gitId":"leeroy999"},"content":"                    try {","lastModifiedDate":"2021-08-18"},{"lineNumber":148,"author":{"gitId":"leeroy999"},"content":"                        String eventMessage \u003d parseMessage(input);","lastModifiedDate":"2021-08-18"},{"lineNumber":149,"author":{"gitId":"leeroy999"},"content":"                        Ailurus.addTask(new Event(eventMessage));","lastModifiedDate":"2021-08-18"},{"lineNumber":150,"author":{"gitId":"leeroy999"},"content":"                    } catch (AilurusException e) {","lastModifiedDate":"2021-08-18"},{"lineNumber":151,"author":{"gitId":"leeroy999"},"content":"                        Ailurus.say(e.toString());","lastModifiedDate":"2021-08-18"},{"lineNumber":152,"author":{"gitId":"leeroy999"},"content":"                    }","lastModifiedDate":"2021-08-18"},{"lineNumber":153,"author":{"gitId":"leeroy999"},"content":"                    break;","lastModifiedDate":"2021-08-18"},{"lineNumber":154,"author":{"gitId":"leeroy999"},"content":"                case \"delete\":","lastModifiedDate":"2021-08-18"},{"lineNumber":155,"author":{"gitId":"leeroy999"},"content":"                    try {","lastModifiedDate":"2021-08-18"},{"lineNumber":156,"author":{"gitId":"leeroy999"},"content":"                        String str \u003d parseMessage(input);","lastModifiedDate":"2021-08-18"},{"lineNumber":157,"author":{"gitId":"leeroy999"},"content":"                        Ailurus.delete(str);","lastModifiedDate":"2021-08-18"},{"lineNumber":158,"author":{"gitId":"leeroy999"},"content":"                    } catch (AilurusException e) {","lastModifiedDate":"2021-08-18"},{"lineNumber":159,"author":{"gitId":"leeroy999"},"content":"                        Ailurus.say(e.toString());","lastModifiedDate":"2021-08-18"},{"lineNumber":160,"author":{"gitId":"leeroy999"},"content":"                    }","lastModifiedDate":"2021-08-17"},{"lineNumber":161,"author":{"gitId":"leeroy999"},"content":"                    break;","lastModifiedDate":"2021-08-17"},{"lineNumber":162,"author":{"gitId":"leeroy999"},"content":"                default:","lastModifiedDate":"2021-08-17"},{"lineNumber":163,"author":{"gitId":"leeroy999"},"content":"                    Ailurus.say(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2021-08-18"},{"lineNumber":164,"author":{"gitId":"leeroy999"},"content":"            }","lastModifiedDate":"2021-08-17"},{"lineNumber":165,"author":{"gitId":"leeroy999"},"content":"        }","lastModifiedDate":"2021-08-17"},{"lineNumber":166,"author":{"gitId":"leeroy999"},"content":"        Ailurus.say(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2021-08-18"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":168,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"-":3,"leeroy999":165}},{"path":"src/main/java/AilurusException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"leeroy999"},"content":"public class AilurusException extends IllegalArgumentException {","lastModifiedDate":"2021-08-18"},{"lineNumber":2,"author":{"gitId":"leeroy999"},"content":"    private Error error;","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"leeroy999"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"leeroy999"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"leeroy999"},"content":"     * List of errors for Ailurus","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"leeroy999"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"leeroy999"},"content":"    public enum Error {","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"leeroy999"},"content":"        EMPTYLIST, EMPTYTODO, EMPTYEVENT, EMPTYDEADLINE, EMPTYBY, EMPTYAT, BY, AT, NUMBER, NAN","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"leeroy999"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"leeroy999"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"leeroy999"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"leeroy999"},"content":"     * Constructor for AilurusException","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"leeroy999"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"leeroy999"},"content":"     * @param e error to be thrown","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"leeroy999"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"leeroy999"},"content":"    public AilurusException(Error e) {","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"leeroy999"},"content":"        this.error \u003d e;","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"leeroy999"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"leeroy999"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"leeroy999"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"leeroy999"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"leeroy999"},"content":"        switch (this.error) {","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"leeroy999"},"content":"            case EMPTYLIST:","lastModifiedDate":"2021-08-18"},{"lineNumber":24,"author":{"gitId":"leeroy999"},"content":"                return \"☹ OOPS!!! No items in list!\";","lastModifiedDate":"2021-08-18"},{"lineNumber":25,"author":{"gitId":"leeroy999"},"content":"            case EMPTYTODO:","lastModifiedDate":"2021-08-18"},{"lineNumber":26,"author":{"gitId":"leeroy999"},"content":"                return \"☹ OOPS!!! The description of a todo cannot be empty.\";","lastModifiedDate":"2021-08-18"},{"lineNumber":27,"author":{"gitId":"leeroy999"},"content":"            case EMPTYDEADLINE:","lastModifiedDate":"2021-08-18"},{"lineNumber":28,"author":{"gitId":"leeroy999"},"content":"                return \"☹ OOPS!!! The description of a deadline cannot be empty.\";","lastModifiedDate":"2021-08-18"},{"lineNumber":29,"author":{"gitId":"leeroy999"},"content":"            case EMPTYEVENT:","lastModifiedDate":"2021-08-18"},{"lineNumber":30,"author":{"gitId":"leeroy999"},"content":"                return \"☹ OOPS!!! The description of an event cannot be empty.\";","lastModifiedDate":"2021-08-18"},{"lineNumber":31,"author":{"gitId":"leeroy999"},"content":"            case EMPTYBY:","lastModifiedDate":"2021-08-18"},{"lineNumber":32,"author":{"gitId":"leeroy999"},"content":"                return \"☹ OOPS!!! The description of /by cannot be empty.\";","lastModifiedDate":"2021-08-18"},{"lineNumber":33,"author":{"gitId":"leeroy999"},"content":"            case EMPTYAT:","lastModifiedDate":"2021-08-18"},{"lineNumber":34,"author":{"gitId":"leeroy999"},"content":"                return \"☹ OOPS!!! The description of /at cannot be empty.\";","lastModifiedDate":"2021-08-18"},{"lineNumber":35,"author":{"gitId":"leeroy999"},"content":"            case BY:","lastModifiedDate":"2021-08-18"},{"lineNumber":36,"author":{"gitId":"leeroy999"},"content":"                return \"☹ OOPS!!! A deadline must have a /by \u003cspecific date or time\u003e.\";","lastModifiedDate":"2021-08-18"},{"lineNumber":37,"author":{"gitId":"leeroy999"},"content":"            case AT:","lastModifiedDate":"2021-08-18"},{"lineNumber":38,"author":{"gitId":"leeroy999"},"content":"                return \"☹ OOPS!!! An event must have a /at \u003cspecific date or time period\u003e.\";","lastModifiedDate":"2021-08-18"},{"lineNumber":39,"author":{"gitId":"leeroy999"},"content":"            case NUMBER:","lastModifiedDate":"2021-08-18"},{"lineNumber":40,"author":{"gitId":"leeroy999"},"content":"                return \"☹ OOPS!!! Invalid number used.\";","lastModifiedDate":"2021-08-18"},{"lineNumber":41,"author":{"gitId":"leeroy999"},"content":"            case NAN:","lastModifiedDate":"2021-08-18"},{"lineNumber":42,"author":{"gitId":"leeroy999"},"content":"                return \"☹ OOPS!!! Not a number.\";","lastModifiedDate":"2021-08-18"},{"lineNumber":43,"author":{"gitId":"leeroy999"},"content":"            default:","lastModifiedDate":"2021-08-18"},{"lineNumber":44,"author":{"gitId":"leeroy999"},"content":"                return getMessage();","lastModifiedDate":"2021-08-18"},{"lineNumber":45,"author":{"gitId":"leeroy999"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":46,"author":{"gitId":"leeroy999"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":47,"author":{"gitId":"leeroy999"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"leeroy999":47}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"leeroy999"},"content":"public class Deadline extends Task{","lastModifiedDate":"2021-08-18"},{"lineNumber":2,"author":{"gitId":"leeroy999"},"content":"    private String by;","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"leeroy999"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"leeroy999"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"leeroy999"},"content":"     * Constructor for Deadline tasks","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"leeroy999"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"leeroy999"},"content":"     * @param description description of task /by specific date or time","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"leeroy999"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"leeroy999"},"content":"    public Deadline(String description) {","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"leeroy999"},"content":"        super(description.split(\"/by\", -1)[0]);","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"leeroy999"},"content":"        String[] arr \u003d description.split(\"/by\", -1);","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"leeroy999"},"content":"        if (arr[0].length() \u003d\u003d 0) {","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"leeroy999"},"content":"            throw new AilurusException(AilurusException.Error.EMPTYDEADLINE);","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"leeroy999"},"content":"        } else if (arr.length \u003c\u003d 1) {","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"leeroy999"},"content":"            throw new AilurusException(AilurusException.Error.BY);","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"leeroy999"},"content":"        } else if (arr[1].length() \u003d\u003d 0) {","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"leeroy999"},"content":"            throw new AilurusException(AilurusException.Error.EMPTYBY);","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"leeroy999"},"content":"        } else {","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"leeroy999"},"content":"            this.by \u003d arr[1];","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"leeroy999"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"leeroy999"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"leeroy999"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"leeroy999"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":24,"author":{"gitId":"leeroy999"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":25,"author":{"gitId":"leeroy999"},"content":"        return \"[D]\" + super.toString() + \"(by:\" + by + \")\";","lastModifiedDate":"2021-08-18"},{"lineNumber":26,"author":{"gitId":"leeroy999"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":27,"author":{"gitId":"leeroy999"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"leeroy999":27}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"leeroy999"},"content":"public class Event extends Task{","lastModifiedDate":"2021-08-18"},{"lineNumber":2,"author":{"gitId":"leeroy999"},"content":"    private String at;","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"leeroy999"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"leeroy999"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"leeroy999"},"content":"     * Constructor for Event tasks","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"leeroy999"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"leeroy999"},"content":"     * @param description description of task /at specific date or time","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"leeroy999"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"leeroy999"},"content":"    public Event(String description) {","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"leeroy999"},"content":"        super(description.split(\"/at\", -1)[0]);","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"leeroy999"},"content":"        String[] arr \u003d description.split(\"/at\", -1);","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"leeroy999"},"content":"        if (arr[0].length() \u003d\u003d 0) {","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"leeroy999"},"content":"            throw new AilurusException(AilurusException.Error.EMPTYEVENT);","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"leeroy999"},"content":"        } else if (arr.length \u003c\u003d 1) {","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"leeroy999"},"content":"            throw new AilurusException(AilurusException.Error.AT);","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"leeroy999"},"content":"        } else if (arr[1].length() \u003d\u003d 0) {","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"leeroy999"},"content":"            throw new AilurusException(AilurusException.Error.EMPTYAT);","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"leeroy999"},"content":"        } else {","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"leeroy999"},"content":"            this.at \u003d arr[1];","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"leeroy999"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"leeroy999"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"leeroy999"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"leeroy999"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":24,"author":{"gitId":"leeroy999"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":25,"author":{"gitId":"leeroy999"},"content":"        return \"[E]\" + super.toString() + \"(at:\" + at + \")\";","lastModifiedDate":"2021-08-18"},{"lineNumber":26,"author":{"gitId":"leeroy999"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":27,"author":{"gitId":"leeroy999"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"leeroy999":27}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"leeroy999"},"content":"public class Task {","lastModifiedDate":"2021-08-17"},{"lineNumber":2,"author":{"gitId":"leeroy999"},"content":"    protected String description;","lastModifiedDate":"2021-08-17"},{"lineNumber":3,"author":{"gitId":"leeroy999"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-17"},{"lineNumber":4,"author":{"gitId":"leeroy999"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":5,"author":{"gitId":"leeroy999"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"leeroy999"},"content":"     * Constructor for Tasks","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"leeroy999"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"leeroy999"},"content":"     * @param description description of task","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"leeroy999"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"leeroy999"},"content":"    public Task(String description) {","lastModifiedDate":"2021-08-17"},{"lineNumber":11,"author":{"gitId":"leeroy999"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-17"},{"lineNumber":12,"author":{"gitId":"leeroy999"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-17"},{"lineNumber":13,"author":{"gitId":"leeroy999"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":14,"author":{"gitId":"leeroy999"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":15,"author":{"gitId":"leeroy999"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"leeroy999"},"content":"     * Getting whether task is done or not","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"leeroy999"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"leeroy999"},"content":"     * @return \"X\" if it is done and \" \" if not done","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"leeroy999"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"leeroy999"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-17"},{"lineNumber":21,"author":{"gitId":"leeroy999"},"content":"        return (this.isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2021-08-17"},{"lineNumber":22,"author":{"gitId":"leeroy999"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":23,"author":{"gitId":"leeroy999"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":24,"author":{"gitId":"leeroy999"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":25,"author":{"gitId":"leeroy999"},"content":"     * Setting task as done","lastModifiedDate":"2021-08-18"},{"lineNumber":26,"author":{"gitId":"leeroy999"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":27,"author":{"gitId":"leeroy999"},"content":"    public void markAsDone() {","lastModifiedDate":"2021-08-17"},{"lineNumber":28,"author":{"gitId":"leeroy999"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-08-17"},{"lineNumber":29,"author":{"gitId":"leeroy999"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":30,"author":{"gitId":"leeroy999"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":31,"author":{"gitId":"leeroy999"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":32,"author":{"gitId":"leeroy999"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":33,"author":{"gitId":"leeroy999"},"content":"        return String.format(\"[%s]%s\", this.getStatusIcon(), this.description);","lastModifiedDate":"2021-08-18"},{"lineNumber":34,"author":{"gitId":"leeroy999"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":35,"author":{"gitId":"leeroy999"},"content":"}","lastModifiedDate":"2021-08-17"}],"authorContributionMap":{"leeroy999":35}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"leeroy999"},"content":"public class Todo extends Task{","lastModifiedDate":"2021-08-18"},{"lineNumber":2,"author":{"gitId":"leeroy999"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"leeroy999"},"content":"     * Constructor for Todo","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"leeroy999"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"leeroy999"},"content":"     * @param description description of task","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"leeroy999"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"leeroy999"},"content":"    public Todo(String description) {","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"leeroy999"},"content":"        super(description);","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"leeroy999"},"content":"        if (description.length() \u003d\u003d 0) {","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"leeroy999"},"content":"            throw new AilurusException(AilurusException.Error.EMPTYTODO);","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"leeroy999"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"leeroy999"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"leeroy999"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"leeroy999"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"leeroy999"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"leeroy999"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"leeroy999"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"leeroy999"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"leeroy999":18}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"leeroy999"},"content":"Go grocery shopping","lastModifiedDate":"2021-08-18"},{"lineNumber":2,"author":{"gitId":"leeroy999"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"leeroy999"},"content":"done","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"leeroy999"},"content":"done one","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"leeroy999"},"content":"done 1","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"leeroy999"},"content":"done 0","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"leeroy999"},"content":"done -99","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"leeroy999"},"content":"todo","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"leeroy999"},"content":"todo Go grocery shopping","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"leeroy999"},"content":"deadline","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"leeroy999"},"content":"deadline /by","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"leeroy999"},"content":"deadline CS2103T ip week 2 /by","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"leeroy999"},"content":"deadline /by 19/08/2021","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"leeroy999"},"content":"deadline CS2103T ip week 2 /by 19/08/2021","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"leeroy999"},"content":"event","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"leeroy999"},"content":"event /at","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"leeroy999"},"content":"event CS2103T lecture /at","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"leeroy999"},"content":"event /at Friday 4-6pm","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"leeroy999"},"content":"event CS2103T lecture /at Friday 4-6pm","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"leeroy999"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"leeroy999"},"content":"done","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"leeroy999"},"content":"done two","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"leeroy999"},"content":"done 2","lastModifiedDate":"2021-08-18"},{"lineNumber":24,"author":{"gitId":"leeroy999"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":25,"author":{"gitId":"leeroy999"},"content":"delete","lastModifiedDate":"2021-08-18"},{"lineNumber":26,"author":{"gitId":"leeroy999"},"content":"delete two","lastModifiedDate":"2021-08-18"},{"lineNumber":27,"author":{"gitId":"leeroy999"},"content":"delete 2","lastModifiedDate":"2021-08-18"},{"lineNumber":28,"author":{"gitId":"leeroy999"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":29,"author":{"gitId":"leeroy999"},"content":"bye","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"leeroy999":29}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"leeroy999"},"content":"java -classpath ..\\bin Ailurus \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":20,"leeroy999":1}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"leeroy999"},"content":"java -classpath ../bin Ailurus \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":37,"leeroy999":1}}]

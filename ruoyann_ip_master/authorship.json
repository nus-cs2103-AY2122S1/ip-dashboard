[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"ruoyann"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":17,"author":{"gitId":"ruoyann"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"ruoyann"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"ruoyann"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":20,"author":{"gitId":"ruoyann"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":21,"author":{"gitId":"ruoyann"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":22,"author":{"gitId":"ruoyann"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":23,"author":{"gitId":"ruoyann"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":24,"author":{"gitId":"ruoyann"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":25,"author":{"gitId":"ruoyann"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":26,"author":{"gitId":"ruoyann"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":27,"author":{"gitId":"ruoyann"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":28,"author":{"gitId":"ruoyann"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"ruoyann"},"content":"    mainClassName \u003d \"duke.Launcher\"","lastModifiedDate":"2021-09-02"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"ruoyann":15,"-":45}},{"path":"src/main/java/duke/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruoyann"},"content":"package duke;","lastModifiedDate":"2021-09-02"},{"lineNumber":2,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"ruoyann"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"ruoyann"},"content":"import java.util.Collections;","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"ruoyann"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"ruoyann"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"ruoyann"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"ruoyann"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"ruoyann"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"ruoyann"},"content":"import javafx.scene.Node;","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"ruoyann"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-09-02"},{"lineNumber":13,"author":{"gitId":"ruoyann"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"ruoyann"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"ruoyann"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":17,"author":{"gitId":"ruoyann"},"content":"/**","lastModifiedDate":"2021-09-02"},{"lineNumber":18,"author":{"gitId":"ruoyann"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2021-09-02"},{"lineNumber":19,"author":{"gitId":"ruoyann"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2021-09-02"},{"lineNumber":20,"author":{"gitId":"ruoyann"},"content":" * containing text from the speaker.","lastModifiedDate":"2021-09-02"},{"lineNumber":21,"author":{"gitId":"ruoyann"},"content":" */","lastModifiedDate":"2021-09-02"},{"lineNumber":22,"author":{"gitId":"ruoyann"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2021-09-02"},{"lineNumber":23,"author":{"gitId":"ruoyann"},"content":"    @FXML","lastModifiedDate":"2021-09-02"},{"lineNumber":24,"author":{"gitId":"ruoyann"},"content":"    private Label dialog;","lastModifiedDate":"2021-09-02"},{"lineNumber":25,"author":{"gitId":"ruoyann"},"content":"    @FXML","lastModifiedDate":"2021-09-02"},{"lineNumber":26,"author":{"gitId":"ruoyann"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2021-09-02"},{"lineNumber":27,"author":{"gitId":"ruoyann"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2021-09-02"},{"lineNumber":28,"author":{"gitId":"ruoyann"},"content":"        try {","lastModifiedDate":"2021-09-02"},{"lineNumber":29,"author":{"gitId":"ruoyann"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2021-09-02"},{"lineNumber":30,"author":{"gitId":"ruoyann"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2021-09-02"},{"lineNumber":31,"author":{"gitId":"ruoyann"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2021-09-02"},{"lineNumber":32,"author":{"gitId":"ruoyann"},"content":"            fxmlLoader.load();","lastModifiedDate":"2021-09-02"},{"lineNumber":33,"author":{"gitId":"ruoyann"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-02"},{"lineNumber":34,"author":{"gitId":"ruoyann"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-09-02"},{"lineNumber":35,"author":{"gitId":"ruoyann"},"content":"        }","lastModifiedDate":"2021-09-02"},{"lineNumber":36,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":37,"author":{"gitId":"ruoyann"},"content":"        dialog.setText(text);","lastModifiedDate":"2021-09-02"},{"lineNumber":38,"author":{"gitId":"ruoyann"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2021-09-02"},{"lineNumber":39,"author":{"gitId":"ruoyann"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":40,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":41,"author":{"gitId":"ruoyann"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":42,"author":{"gitId":"ruoyann"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2021-09-02"},{"lineNumber":43,"author":{"gitId":"ruoyann"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":44,"author":{"gitId":"ruoyann"},"content":"    private void flip() {","lastModifiedDate":"2021-09-02"},{"lineNumber":45,"author":{"gitId":"ruoyann"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2021-09-02"},{"lineNumber":46,"author":{"gitId":"ruoyann"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2021-09-02"},{"lineNumber":47,"author":{"gitId":"ruoyann"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2021-09-02"},{"lineNumber":48,"author":{"gitId":"ruoyann"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2021-09-02"},{"lineNumber":49,"author":{"gitId":"ruoyann"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":50,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":51,"author":{"gitId":"ruoyann"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2021-09-02"},{"lineNumber":52,"author":{"gitId":"ruoyann"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2021-09-02"},{"lineNumber":53,"author":{"gitId":"ruoyann"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":54,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":55,"author":{"gitId":"ruoyann"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2021-09-02"},{"lineNumber":56,"author":{"gitId":"ruoyann"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2021-09-02"},{"lineNumber":57,"author":{"gitId":"ruoyann"},"content":"        db.flip();","lastModifiedDate":"2021-09-02"},{"lineNumber":58,"author":{"gitId":"ruoyann"},"content":"        return db;","lastModifiedDate":"2021-09-02"},{"lineNumber":59,"author":{"gitId":"ruoyann"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":60,"author":{"gitId":"ruoyann"},"content":"}","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"ruoyann":60}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruoyann"},"content":"package duke;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"ruoyann"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"ruoyann"},"content":"import duke.command.Command;","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"ruoyann"},"content":"import duke.parser.Parser;","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"ruoyann"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"ruoyann"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"ruoyann"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"ruoyann"},"content":"import java.io.File;","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"ruoyann"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"ruoyann"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":14,"author":{"gitId":"ruoyann"},"content":"/**","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"ruoyann"},"content":" * Class that handles the behaviour of the bot in response to user inputs","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"ruoyann"},"content":" */","lastModifiedDate":"2021-08-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":18,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"ruoyann"},"content":"    private final Storage storage;","lastModifiedDate":"2021-09-06"},{"lineNumber":20,"author":{"gitId":"ruoyann"},"content":"    private TaskList tasks;","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"ruoyann"},"content":"    private final Ui ui;","lastModifiedDate":"2021-09-06"},{"lineNumber":22,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"ruoyann"},"content":"    private static final String FILE_PATH \u003d String.valueOf(Paths.get(System.getProperty(\"user.home\"), \"data\", \"dukeFile.txt\"));","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":25,"author":{"gitId":"ruoyann"},"content":"    public Duke() {","lastModifiedDate":"2021-09-02"},{"lineNumber":26,"author":{"gitId":"ruoyann"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"ruoyann"},"content":"        storage \u003d new Storage(FILE_PATH);","lastModifiedDate":"2021-09-02"},{"lineNumber":28,"author":{"gitId":"ruoyann"},"content":"        try {","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"ruoyann"},"content":"            tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2021-08-28"},{"lineNumber":30,"author":{"gitId":"ruoyann"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"ruoyann"},"content":"            File file \u003d new File(FILE_PATH);","lastModifiedDate":"2021-09-02"},{"lineNumber":32,"author":{"gitId":"ruoyann"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2021-08-28"},{"lineNumber":33,"author":{"gitId":"ruoyann"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"ruoyann"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"ruoyann"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":37,"author":{"gitId":"ruoyann"},"content":"     * You should have your own function to generate a response to user input.","lastModifiedDate":"2021-09-02"},{"lineNumber":38,"author":{"gitId":"ruoyann"},"content":"     * Replace this stub with your completed method.","lastModifiedDate":"2021-09-02"},{"lineNumber":39,"author":{"gitId":"ruoyann"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":40,"author":{"gitId":"ruoyann"},"content":"    String getResponse(String input) {","lastModifiedDate":"2021-09-02"},{"lineNumber":41,"author":{"gitId":"ruoyann"},"content":"        String res;","lastModifiedDate":"2021-09-06"},{"lineNumber":42,"author":{"gitId":"ruoyann"},"content":"        try {","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"ruoyann"},"content":"            Command c \u003d Parser.parse(input, tasks);","lastModifiedDate":"2021-09-02"},{"lineNumber":44,"author":{"gitId":"ruoyann"},"content":"            res \u003d c.execute(tasks, ui, storage);","lastModifiedDate":"2021-09-02"},{"lineNumber":45,"author":{"gitId":"ruoyann"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-28"},{"lineNumber":46,"author":{"gitId":"ruoyann"},"content":"            return \"Caught the exception\" + e;","lastModifiedDate":"2021-09-02"},{"lineNumber":47,"author":{"gitId":"ruoyann"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":48,"author":{"gitId":"ruoyann"},"content":"        return res;","lastModifiedDate":"2021-09-02"},{"lineNumber":49,"author":{"gitId":"ruoyann"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":50,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":51,"author":{"gitId":"ruoyann"},"content":"    public String getUiWelcome() {","lastModifiedDate":"2021-09-02"},{"lineNumber":52,"author":{"gitId":"ruoyann"},"content":"        return this.ui.showWelcome();","lastModifiedDate":"2021-09-02"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"ruoyann":51,"-":3}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruoyann"},"content":"package duke;","lastModifiedDate":"2021-09-02"},{"lineNumber":2,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"ruoyann"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"ruoyann"},"content":"/**","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"ruoyann"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"ruoyann"},"content":" */","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"ruoyann"},"content":"public class Launcher {","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"ruoyann"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"ruoyann"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"ruoyann"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"ruoyann"},"content":"}","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"ruoyann":12}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruoyann"},"content":"package duke;","lastModifiedDate":"2021-09-02"},{"lineNumber":2,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"ruoyann"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"ruoyann"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"ruoyann"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"ruoyann"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"ruoyann"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"ruoyann"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"ruoyann"},"content":"/**","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"ruoyann"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2021-09-02"},{"lineNumber":13,"author":{"gitId":"ruoyann"},"content":" */","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"ruoyann"},"content":"public class Main extends Application {","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"ruoyann"},"content":"    private final Duke duke \u003d new Duke();","lastModifiedDate":"2021-09-06"},{"lineNumber":17,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":18,"author":{"gitId":"ruoyann"},"content":"    @Override","lastModifiedDate":"2021-09-02"},{"lineNumber":19,"author":{"gitId":"ruoyann"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2021-09-02"},{"lineNumber":20,"author":{"gitId":"ruoyann"},"content":"        try {","lastModifiedDate":"2021-09-02"},{"lineNumber":21,"author":{"gitId":"ruoyann"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2021-09-02"},{"lineNumber":22,"author":{"gitId":"ruoyann"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2021-09-02"},{"lineNumber":23,"author":{"gitId":"ruoyann"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2021-09-02"},{"lineNumber":24,"author":{"gitId":"ruoyann"},"content":"            stage.setScene(scene);","lastModifiedDate":"2021-09-02"},{"lineNumber":25,"author":{"gitId":"ruoyann"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2021-09-02"},{"lineNumber":26,"author":{"gitId":"ruoyann"},"content":"            stage.show();","lastModifiedDate":"2021-09-02"},{"lineNumber":27,"author":{"gitId":"ruoyann"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-02"},{"lineNumber":28,"author":{"gitId":"ruoyann"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-09-02"},{"lineNumber":29,"author":{"gitId":"ruoyann"},"content":"        }","lastModifiedDate":"2021-09-02"},{"lineNumber":30,"author":{"gitId":"ruoyann"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":31,"author":{"gitId":"ruoyann"},"content":"}","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"ruoyann":31}},{"path":"src/main/java/duke/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruoyann"},"content":"package duke;","lastModifiedDate":"2021-09-02"},{"lineNumber":2,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"ruoyann"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"ruoyann"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"ruoyann"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"ruoyann"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"ruoyann"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"ruoyann"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"ruoyann"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"ruoyann"},"content":"/**","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"ruoyann"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"ruoyann"},"content":" */","lastModifiedDate":"2021-09-02"},{"lineNumber":13,"author":{"gitId":"ruoyann"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"ruoyann"},"content":"    @FXML","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"ruoyann"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"ruoyann"},"content":"    @FXML","lastModifiedDate":"2021-09-02"},{"lineNumber":17,"author":{"gitId":"ruoyann"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2021-09-02"},{"lineNumber":18,"author":{"gitId":"ruoyann"},"content":"    @FXML","lastModifiedDate":"2021-09-02"},{"lineNumber":19,"author":{"gitId":"ruoyann"},"content":"    private TextField userInput;","lastModifiedDate":"2021-09-02"},{"lineNumber":20,"author":{"gitId":"ruoyann"},"content":"    @FXML","lastModifiedDate":"2021-09-02"},{"lineNumber":21,"author":{"gitId":"ruoyann"},"content":"    private Button sendButton;","lastModifiedDate":"2021-09-02"},{"lineNumber":22,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":23,"author":{"gitId":"ruoyann"},"content":"    private Duke duke;","lastModifiedDate":"2021-09-02"},{"lineNumber":24,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":25,"author":{"gitId":"ruoyann"},"content":"    private final Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));","lastModifiedDate":"2021-09-06"},{"lineNumber":26,"author":{"gitId":"ruoyann"},"content":"    private final Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));","lastModifiedDate":"2021-09-06"},{"lineNumber":27,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":28,"author":{"gitId":"ruoyann"},"content":"    @FXML","lastModifiedDate":"2021-09-02"},{"lineNumber":29,"author":{"gitId":"ruoyann"},"content":"    public void initialize() {","lastModifiedDate":"2021-09-02"},{"lineNumber":30,"author":{"gitId":"ruoyann"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2021-09-02"},{"lineNumber":31,"author":{"gitId":"ruoyann"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":32,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":33,"author":{"gitId":"ruoyann"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2021-09-02"},{"lineNumber":34,"author":{"gitId":"ruoyann"},"content":"        duke \u003d d;","lastModifiedDate":"2021-09-02"},{"lineNumber":35,"author":{"gitId":"ruoyann"},"content":"        dialogContainer.getChildren().add(","lastModifiedDate":"2021-09-02"},{"lineNumber":36,"author":{"gitId":"ruoyann"},"content":"                DialogBox.getDukeDialog(d.getUiWelcome(), dukeImage)","lastModifiedDate":"2021-09-02"},{"lineNumber":37,"author":{"gitId":"ruoyann"},"content":"        );","lastModifiedDate":"2021-09-02"},{"lineNumber":38,"author":{"gitId":"ruoyann"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":39,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":40,"author":{"gitId":"ruoyann"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":41,"author":{"gitId":"ruoyann"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2021-09-02"},{"lineNumber":42,"author":{"gitId":"ruoyann"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2021-09-02"},{"lineNumber":43,"author":{"gitId":"ruoyann"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":44,"author":{"gitId":"ruoyann"},"content":"    @FXML","lastModifiedDate":"2021-09-02"},{"lineNumber":45,"author":{"gitId":"ruoyann"},"content":"    private void handleUserInput() {","lastModifiedDate":"2021-09-02"},{"lineNumber":46,"author":{"gitId":"ruoyann"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2021-09-02"},{"lineNumber":47,"author":{"gitId":"ruoyann"},"content":"        String response \u003d duke.getResponse(input);","lastModifiedDate":"2021-09-02"},{"lineNumber":48,"author":{"gitId":"ruoyann"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2021-09-02"},{"lineNumber":49,"author":{"gitId":"ruoyann"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2021-09-02"},{"lineNumber":50,"author":{"gitId":"ruoyann"},"content":"                DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2021-09-02"},{"lineNumber":51,"author":{"gitId":"ruoyann"},"content":"        );","lastModifiedDate":"2021-09-02"},{"lineNumber":52,"author":{"gitId":"ruoyann"},"content":"        userInput.clear();","lastModifiedDate":"2021-09-02"},{"lineNumber":53,"author":{"gitId":"ruoyann"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":54,"author":{"gitId":"ruoyann"},"content":"}","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"ruoyann":54}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruoyann"},"content":"package duke.command;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"ruoyann"},"content":"import duke.task.*;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"ruoyann"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"ruoyann"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"ruoyann"},"content":"/**","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"ruoyann"},"content":" * The class for a user command that adds a task to the list","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"ruoyann"},"content":" */","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"ruoyann"},"content":"public class AddCommand extends Command{","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"ruoyann"},"content":"    private final Task task;","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"ruoyann"},"content":"    public AddCommand(Task task) {","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"ruoyann"},"content":"        this.task \u003d task;","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"ruoyann"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"ruoyann"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"ruoyann"},"content":"     * Checks if the bot needs to exit","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"ruoyann"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":20,"author":{"gitId":"ruoyann"},"content":"     * @return whether the bot should exit","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"ruoyann"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"ruoyann"},"content":"    @Override","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"ruoyann"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"ruoyann"},"content":"        return false;","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"ruoyann"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"ruoyann"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"ruoyann"},"content":"     * Executes the parsing of user input and the message","lastModifiedDate":"2021-09-01"},{"lineNumber":29,"author":{"gitId":"ruoyann"},"content":"     * to print to the command line","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"ruoyann"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":31,"author":{"gitId":"ruoyann"},"content":"     * @param tasks the current list of tasks","lastModifiedDate":"2021-08-30"},{"lineNumber":32,"author":{"gitId":"ruoyann"},"content":"     * @param ui the ui that interacts with the user","lastModifiedDate":"2021-08-29"},{"lineNumber":33,"author":{"gitId":"ruoyann"},"content":"     * @param storage the place where the list of tasks will be stored","lastModifiedDate":"2021-08-29"},{"lineNumber":34,"author":{"gitId":"ruoyann"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":35,"author":{"gitId":"ruoyann"},"content":"    @Override","lastModifiedDate":"2021-08-28"},{"lineNumber":36,"author":{"gitId":"ruoyann"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-02"},{"lineNumber":37,"author":{"gitId":"ruoyann"},"content":"        tasks.addTask(task);","lastModifiedDate":"2021-08-30"},{"lineNumber":38,"author":{"gitId":"ruoyann"},"content":"        return ui.addTask(task, tasks);","lastModifiedDate":"2021-09-02"},{"lineNumber":39,"author":{"gitId":"ruoyann"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":40,"author":{"gitId":"ruoyann"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"ruoyann":40}},{"path":"src/main/java/duke/command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruoyann"},"content":"package duke.command;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"ruoyann"},"content":"import duke.task.*;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"ruoyann"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"ruoyann"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"ruoyann"},"content":"/**","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"ruoyann"},"content":" * The class for a user command that ends the bot","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"ruoyann"},"content":" */","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"ruoyann"},"content":"public class ByeCommand extends Command{","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"ruoyann"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"ruoyann"},"content":"     * Checks if the bot needs to exit","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"ruoyann"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"ruoyann"},"content":"     * @return whether the bot should exit","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"ruoyann"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"ruoyann"},"content":"    @Override","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"ruoyann"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"ruoyann"},"content":"        return true;","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"ruoyann"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"ruoyann"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"ruoyann"},"content":"     * Executes the parsing of user input and the message","lastModifiedDate":"2021-09-01"},{"lineNumber":24,"author":{"gitId":"ruoyann"},"content":"     * to print to the command line","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"ruoyann"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":26,"author":{"gitId":"ruoyann"},"content":"     * @param tasks the current list of tasks","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"ruoyann"},"content":"     * @param ui the ui that interacts with the user","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"ruoyann"},"content":"     * @param storage the place where the list of tasks will be stored","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"ruoyann"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"ruoyann"},"content":"    @Override","lastModifiedDate":"2021-08-28"},{"lineNumber":31,"author":{"gitId":"ruoyann"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-02"},{"lineNumber":32,"author":{"gitId":"ruoyann"},"content":"        storage.updateFile(tasks);","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"ruoyann"},"content":"        return ui.stopMethod();","lastModifiedDate":"2021-09-02"},{"lineNumber":34,"author":{"gitId":"ruoyann"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":35,"author":{"gitId":"ruoyann"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"ruoyann":35}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruoyann"},"content":"package duke.command;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"ruoyann"},"content":"import duke.task.*;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"ruoyann"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"ruoyann"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"ruoyann"},"content":"/**","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"ruoyann"},"content":" * The abstract class for all user commands","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"ruoyann"},"content":" */","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"ruoyann"},"content":"public abstract class Command {","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"ruoyann"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"ruoyann"},"content":"     * Checks if the bot needs to exit","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"ruoyann"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"ruoyann"},"content":"     * @return whether the bot should exit","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"ruoyann"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"ruoyann"},"content":"    public abstract boolean isExit();","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"ruoyann"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"ruoyann"},"content":"     * Executes the parsing of user input and the message","lastModifiedDate":"2021-09-01"},{"lineNumber":20,"author":{"gitId":"ruoyann"},"content":"     * to print to the command line","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"ruoyann"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":22,"author":{"gitId":"ruoyann"},"content":"     * @param tasks the current list of tasks","lastModifiedDate":"2021-09-01"},{"lineNumber":23,"author":{"gitId":"ruoyann"},"content":"     * @param ui the ui that interacts with the user","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"ruoyann"},"content":"     * @param storage the place where the list of tasks will be stored","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"ruoyann"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"ruoyann"},"content":"    public abstract String execute(TaskList tasks, Ui ui, Storage storage);","lastModifiedDate":"2021-09-02"},{"lineNumber":27,"author":{"gitId":"ruoyann"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"ruoyann":27}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruoyann"},"content":"package duke.command;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"ruoyann"},"content":"import duke.task.*;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"ruoyann"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"ruoyann"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"ruoyann"},"content":"/**","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"ruoyann"},"content":" * The class for a user command that deletes a task from the list","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"ruoyann"},"content":" */","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"ruoyann"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"ruoyann"},"content":"    private final int index;","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"ruoyann"},"content":"    public DeleteCommand(int index) {","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"ruoyann"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"ruoyann"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"ruoyann"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"ruoyann"},"content":"     * Checks if the bot needs to exit","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"ruoyann"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":20,"author":{"gitId":"ruoyann"},"content":"     * @return whether the bot should exit","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"ruoyann"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"ruoyann"},"content":"    @Override","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"ruoyann"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"ruoyann"},"content":"        return false;","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"ruoyann"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"ruoyann"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"ruoyann"},"content":"     * Executes the parsing of user input and the message","lastModifiedDate":"2021-09-01"},{"lineNumber":29,"author":{"gitId":"ruoyann"},"content":"     * to print to the command line","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"ruoyann"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":31,"author":{"gitId":"ruoyann"},"content":"     * @param tasks the current list of tasks","lastModifiedDate":"2021-08-30"},{"lineNumber":32,"author":{"gitId":"ruoyann"},"content":"     * @param ui the ui that interacts with the user","lastModifiedDate":"2021-08-29"},{"lineNumber":33,"author":{"gitId":"ruoyann"},"content":"     * @param storage the place where the list of tasks will be stored","lastModifiedDate":"2021-08-29"},{"lineNumber":34,"author":{"gitId":"ruoyann"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":35,"author":{"gitId":"ruoyann"},"content":"    @Override","lastModifiedDate":"2021-08-28"},{"lineNumber":36,"author":{"gitId":"ruoyann"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-02"},{"lineNumber":37,"author":{"gitId":"ruoyann"},"content":"        Task task \u003d tasks.get(this.index);","lastModifiedDate":"2021-08-30"},{"lineNumber":38,"author":{"gitId":"ruoyann"},"content":"        tasks.deleteTask(this.index);","lastModifiedDate":"2021-08-30"},{"lineNumber":39,"author":{"gitId":"ruoyann"},"content":"        return ui.deleteTask(task, tasks);","lastModifiedDate":"2021-09-02"},{"lineNumber":40,"author":{"gitId":"ruoyann"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":41,"author":{"gitId":"ruoyann"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"ruoyann":41}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruoyann"},"content":"package duke.command;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"ruoyann"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"ruoyann"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"ruoyann"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"ruoyann"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"ruoyann"},"content":"/**","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"ruoyann"},"content":" * The class for a user command that marks a task as done","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"ruoyann"},"content":" */","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"ruoyann"},"content":"public class DoneCommand extends Command{","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"ruoyann"},"content":"    private final int index;","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"ruoyann"},"content":"    public DoneCommand(int index) {","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"ruoyann"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"ruoyann"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"ruoyann"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"ruoyann"},"content":"     * Checks if the bot needs to exit","lastModifiedDate":"2021-09-01"},{"lineNumber":21,"author":{"gitId":"ruoyann"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":22,"author":{"gitId":"ruoyann"},"content":"     * @return whether the bot should exit","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"ruoyann"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"ruoyann"},"content":"    @Override","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"ruoyann"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"ruoyann"},"content":"        return false;","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"ruoyann"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":28,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":29,"author":{"gitId":"ruoyann"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"ruoyann"},"content":"     * Executes the parsing of user input and the message","lastModifiedDate":"2021-09-01"},{"lineNumber":31,"author":{"gitId":"ruoyann"},"content":"     * to print to the command line","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"ruoyann"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":33,"author":{"gitId":"ruoyann"},"content":"     * @param tasks the current list of tasks","lastModifiedDate":"2021-08-30"},{"lineNumber":34,"author":{"gitId":"ruoyann"},"content":"     * @param ui the ui that interacts with the user","lastModifiedDate":"2021-08-29"},{"lineNumber":35,"author":{"gitId":"ruoyann"},"content":"     * @param storage the place where the list of tasks will be stored","lastModifiedDate":"2021-08-29"},{"lineNumber":36,"author":{"gitId":"ruoyann"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":37,"author":{"gitId":"ruoyann"},"content":"    @Override","lastModifiedDate":"2021-08-28"},{"lineNumber":38,"author":{"gitId":"ruoyann"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-02"},{"lineNumber":39,"author":{"gitId":"ruoyann"},"content":"        Task currTask \u003d tasks.get(index);","lastModifiedDate":"2021-08-30"},{"lineNumber":40,"author":{"gitId":"ruoyann"},"content":"        currTask.markAsDone();","lastModifiedDate":"2021-08-28"},{"lineNumber":41,"author":{"gitId":"ruoyann"},"content":"        return ui.doneTask(currTask);","lastModifiedDate":"2021-09-02"},{"lineNumber":42,"author":{"gitId":"ruoyann"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":43,"author":{"gitId":"ruoyann"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"ruoyann":43}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruoyann"},"content":"package duke.command;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"ruoyann"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"ruoyann"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"ruoyann"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"ruoyann"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"ruoyann"},"content":"    private final String target;","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"ruoyann"},"content":"    public FindCommand(String target) {","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"ruoyann"},"content":"        this.target \u003d target;","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"ruoyann"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"ruoyann"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"ruoyann"},"content":"     * Checks if the bot needs to exit","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"ruoyann"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":17,"author":{"gitId":"ruoyann"},"content":"     * @return whether the bot should exit","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"ruoyann"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"ruoyann"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"ruoyann"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"ruoyann"},"content":"        return false;","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"ruoyann"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"ruoyann"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":25,"author":{"gitId":"ruoyann"},"content":"     * Executes the parsing of user input and the message","lastModifiedDate":"2021-09-01"},{"lineNumber":26,"author":{"gitId":"ruoyann"},"content":"     * to print to the command line","lastModifiedDate":"2021-09-01"},{"lineNumber":27,"author":{"gitId":"ruoyann"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":28,"author":{"gitId":"ruoyann"},"content":"     * @param tasks the current list of tasks","lastModifiedDate":"2021-09-01"},{"lineNumber":29,"author":{"gitId":"ruoyann"},"content":"     * @param ui the ui that interacts with the user","lastModifiedDate":"2021-09-01"},{"lineNumber":30,"author":{"gitId":"ruoyann"},"content":"     * @param storage the place where the list of tasks will be stored","lastModifiedDate":"2021-09-01"},{"lineNumber":31,"author":{"gitId":"ruoyann"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":32,"author":{"gitId":"ruoyann"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":33,"author":{"gitId":"ruoyann"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-02"},{"lineNumber":34,"author":{"gitId":"ruoyann"},"content":"        return ui.listFoundTasks(tasks.searchList(target));","lastModifiedDate":"2021-09-02"},{"lineNumber":35,"author":{"gitId":"ruoyann"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":36,"author":{"gitId":"ruoyann"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"ruoyann":36}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruoyann"},"content":"package duke.command;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"ruoyann"},"content":"import duke.task.*;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"ruoyann"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"ruoyann"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"ruoyann"},"content":"/**","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"ruoyann"},"content":" * The class for a user command that lists all the tasks","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"ruoyann"},"content":" */","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"ruoyann"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"ruoyann"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"ruoyann"},"content":"     * Checks if the bot needs to exit","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"ruoyann"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"ruoyann"},"content":"     * @return whether the bot should exit","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"ruoyann"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"ruoyann"},"content":"    @Override","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"ruoyann"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"ruoyann"},"content":"        return false;","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"ruoyann"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"ruoyann"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"ruoyann"},"content":"     * Executes the parsing of user input and the message","lastModifiedDate":"2021-09-01"},{"lineNumber":24,"author":{"gitId":"ruoyann"},"content":"     * to print to the command line","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"ruoyann"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":26,"author":{"gitId":"ruoyann"},"content":"     * @param tasks the current list of tasks","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"ruoyann"},"content":"     * @param ui the ui that interacts with the user","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"ruoyann"},"content":"     * @param storage the place where the list of tasks will be stored","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"ruoyann"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"ruoyann"},"content":"    @Override","lastModifiedDate":"2021-08-28"},{"lineNumber":31,"author":{"gitId":"ruoyann"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-02"},{"lineNumber":32,"author":{"gitId":"ruoyann"},"content":"        return ui.listTasks(tasks);","lastModifiedDate":"2021-09-02"},{"lineNumber":33,"author":{"gitId":"ruoyann"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":34,"author":{"gitId":"ruoyann"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"ruoyann":34}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruoyann"},"content":"package duke.exception;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"ruoyann"},"content":"/**","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"ruoyann"},"content":" * A class that will handle exceptions for the bot","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"ruoyann"},"content":" */","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"ruoyann"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-08-16"},{"lineNumber":7,"author":{"gitId":"ruoyann"},"content":"    public DukeException(String message) {","lastModifiedDate":"2021-08-16"},{"lineNumber":8,"author":{"gitId":"ruoyann"},"content":"        super(message);","lastModifiedDate":"2021-08-16"},{"lineNumber":9,"author":{"gitId":"ruoyann"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":10,"author":{"gitId":"ruoyann"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"ruoyann":10}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruoyann"},"content":"package duke.parser;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"ruoyann"},"content":"import duke.command.*;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"ruoyann"},"content":"import duke.exception.*;","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"ruoyann"},"content":"import duke.task.*;","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"ruoyann"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"ruoyann"},"content":"/**","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"ruoyann"},"content":" * A class that will make sense of the user\u0027s commands through string parsing","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"ruoyann"},"content":" */","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"ruoyann"},"content":"public class Parser {","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"ruoyann"},"content":"    private static final Pattern pattern \u003d Pattern.compile(\"-?\\\\d+(\\\\.\\\\d+)?\");","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"ruoyann"},"content":"    private static TaskList tasks;","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"ruoyann"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"ruoyann"},"content":"     * Decides which parsing is needed for the user input","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"ruoyann"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"ruoyann"},"content":"     * @param input the input keyed in by user","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"ruoyann"},"content":"     * @return the type of command the input is","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"ruoyann"},"content":"     * @throws DukeException if the users enter a wrong input","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"ruoyann"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"ruoyann"},"content":"    public static Command parse(String input, TaskList tl) throws DukeException{","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"ruoyann"},"content":"        tasks \u003d tl;","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"ruoyann"},"content":"        if (input.equals(\"list\")) {","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"ruoyann"},"content":"            return new ListCommand();","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"ruoyann"},"content":"        } else if (input.equals(\"bye\")) {","lastModifiedDate":"2021-08-28"},{"lineNumber":28,"author":{"gitId":"ruoyann"},"content":"            return new ByeCommand();","lastModifiedDate":"2021-08-28"},{"lineNumber":29,"author":{"gitId":"ruoyann"},"content":"        } else if (input.startsWith(\"done\")) {","lastModifiedDate":"2021-08-28"},{"lineNumber":30,"author":{"gitId":"ruoyann"},"content":"            int index \u003d parseDone(input);","lastModifiedDate":"2021-08-28"},{"lineNumber":31,"author":{"gitId":"ruoyann"},"content":"            return new DoneCommand(index);","lastModifiedDate":"2021-08-28"},{"lineNumber":32,"author":{"gitId":"ruoyann"},"content":"        } else if (input.startsWith(\"delete\")) {","lastModifiedDate":"2021-08-28"},{"lineNumber":33,"author":{"gitId":"ruoyann"},"content":"            int index \u003d parseDelete(input);","lastModifiedDate":"2021-08-28"},{"lineNumber":34,"author":{"gitId":"ruoyann"},"content":"            return new DeleteCommand(index);","lastModifiedDate":"2021-08-28"},{"lineNumber":35,"author":{"gitId":"ruoyann"},"content":"        } else if (input.startsWith(\"find\")) {","lastModifiedDate":"2021-08-29"},{"lineNumber":36,"author":{"gitId":"ruoyann"},"content":"            String target \u003d parseFind(input);","lastModifiedDate":"2021-08-29"},{"lineNumber":37,"author":{"gitId":"ruoyann"},"content":"            return new FindCommand(target);","lastModifiedDate":"2021-08-29"},{"lineNumber":38,"author":{"gitId":"ruoyann"},"content":"        } else {","lastModifiedDate":"2021-08-28"},{"lineNumber":39,"author":{"gitId":"ruoyann"},"content":"            if (!input.startsWith(\"todo\") \u0026\u0026 !input.startsWith(\"deadline\") \u0026\u0026 !input.startsWith(\"event\")) {","lastModifiedDate":"2021-08-28"},{"lineNumber":40,"author":{"gitId":"ruoyann"},"content":"                throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2021-08-28"},{"lineNumber":41,"author":{"gitId":"ruoyann"},"content":"            }","lastModifiedDate":"2021-08-28"},{"lineNumber":42,"author":{"gitId":"ruoyann"},"content":"            Task task;","lastModifiedDate":"2021-08-28"},{"lineNumber":43,"author":{"gitId":"ruoyann"},"content":"            if (input.startsWith(\"todo\")) {","lastModifiedDate":"2021-08-28"},{"lineNumber":44,"author":{"gitId":"ruoyann"},"content":"                task \u003d parseTodo(input);","lastModifiedDate":"2021-08-28"},{"lineNumber":45,"author":{"gitId":"ruoyann"},"content":"            }","lastModifiedDate":"2021-08-28"},{"lineNumber":46,"author":{"gitId":"ruoyann"},"content":"            else if (input.startsWith(\"deadline\")) {","lastModifiedDate":"2021-08-28"},{"lineNumber":47,"author":{"gitId":"ruoyann"},"content":"                task \u003d parseDeadline(input);","lastModifiedDate":"2021-08-28"},{"lineNumber":48,"author":{"gitId":"ruoyann"},"content":"            }","lastModifiedDate":"2021-08-28"},{"lineNumber":49,"author":{"gitId":"ruoyann"},"content":"            else {","lastModifiedDate":"2021-08-28"},{"lineNumber":50,"author":{"gitId":"ruoyann"},"content":"                task \u003d parseEvent(input);","lastModifiedDate":"2021-08-28"},{"lineNumber":51,"author":{"gitId":"ruoyann"},"content":"            }","lastModifiedDate":"2021-08-28"},{"lineNumber":52,"author":{"gitId":"ruoyann"},"content":"            return new AddCommand(task);","lastModifiedDate":"2021-08-28"},{"lineNumber":53,"author":{"gitId":"ruoyann"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":54,"author":{"gitId":"ruoyann"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":55,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":56,"author":{"gitId":"ruoyann"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":57,"author":{"gitId":"ruoyann"},"content":"     * Parses users inputs that wishes to mark a task as done","lastModifiedDate":"2021-09-01"},{"lineNumber":58,"author":{"gitId":"ruoyann"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":59,"author":{"gitId":"ruoyann"},"content":"     * @param input the user\u0027s input","lastModifiedDate":"2021-08-29"},{"lineNumber":60,"author":{"gitId":"ruoyann"},"content":"     * @return the index of the task user wishes to mark as done","lastModifiedDate":"2021-08-29"},{"lineNumber":61,"author":{"gitId":"ruoyann"},"content":"     * @throws DukeException if the user\u0027s input is in an wrong format","lastModifiedDate":"2021-08-29"},{"lineNumber":62,"author":{"gitId":"ruoyann"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":63,"author":{"gitId":"ruoyann"},"content":"    public static int parseDone(String input) throws DukeException {","lastModifiedDate":"2021-08-28"},{"lineNumber":64,"author":{"gitId":"ruoyann"},"content":"        String numberString \u003d String.valueOf(input.charAt(5));","lastModifiedDate":"2021-08-28"},{"lineNumber":65,"author":{"gitId":"ruoyann"},"content":"        if (!pattern.matcher(numberString).matches()) {","lastModifiedDate":"2021-08-28"},{"lineNumber":66,"author":{"gitId":"ruoyann"},"content":"            throw new DukeException(\"Please enter \u0027done [index of item]\u0027 to mark item as done.\");","lastModifiedDate":"2021-09-06"},{"lineNumber":67,"author":{"gitId":"ruoyann"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":68,"author":{"gitId":"ruoyann"},"content":"        int number \u003d Integer.parseInt(numberString);","lastModifiedDate":"2021-09-06"},{"lineNumber":69,"author":{"gitId":"ruoyann"},"content":"        if (number \u003e tasks.getSize() || number \u003c 0) {","lastModifiedDate":"2021-08-30"},{"lineNumber":70,"author":{"gitId":"ruoyann"},"content":"            throw new DukeException(\"Item does not exist, we cannot mark it as done.\");","lastModifiedDate":"2021-08-28"},{"lineNumber":71,"author":{"gitId":"ruoyann"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":72,"author":{"gitId":"ruoyann"},"content":"        Task currTask \u003d tasks.get(number - 1);","lastModifiedDate":"2021-08-30"},{"lineNumber":73,"author":{"gitId":"ruoyann"},"content":"        if (currTask.getStatusIcon().equals(String.valueOf(\u0027X\u0027))) {","lastModifiedDate":"2021-08-28"},{"lineNumber":74,"author":{"gitId":"ruoyann"},"content":"            throw new DukeException(\"Item is already marked as done, we cannot mark it as done again.\");","lastModifiedDate":"2021-08-28"},{"lineNumber":75,"author":{"gitId":"ruoyann"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":76,"author":{"gitId":"ruoyann"},"content":"        return number - 1;","lastModifiedDate":"2021-08-28"},{"lineNumber":77,"author":{"gitId":"ruoyann"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":78,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":79,"author":{"gitId":"ruoyann"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":80,"author":{"gitId":"ruoyann"},"content":"     * Parses users inputs that wishes to delete a task","lastModifiedDate":"2021-09-01"},{"lineNumber":81,"author":{"gitId":"ruoyann"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":82,"author":{"gitId":"ruoyann"},"content":"     * @param input the user\u0027s input","lastModifiedDate":"2021-08-29"},{"lineNumber":83,"author":{"gitId":"ruoyann"},"content":"     * @return the index of the task user wishes to delete","lastModifiedDate":"2021-08-29"},{"lineNumber":84,"author":{"gitId":"ruoyann"},"content":"     * @throws DukeException if the user\u0027s input is in an wrong format","lastModifiedDate":"2021-08-29"},{"lineNumber":85,"author":{"gitId":"ruoyann"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":86,"author":{"gitId":"ruoyann"},"content":"    public static int parseDelete(String input) throws DukeException {","lastModifiedDate":"2021-08-28"},{"lineNumber":87,"author":{"gitId":"ruoyann"},"content":"        String numberString \u003d String.valueOf(input.charAt(7));","lastModifiedDate":"2021-08-28"},{"lineNumber":88,"author":{"gitId":"ruoyann"},"content":"        if (!pattern.matcher(numberString).matches()) {","lastModifiedDate":"2021-08-28"},{"lineNumber":89,"author":{"gitId":"ruoyann"},"content":"            throw new DukeException(\"Please enter \u0027delete [index of item]\u0027 to mark item as done.\");","lastModifiedDate":"2021-09-06"},{"lineNumber":90,"author":{"gitId":"ruoyann"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":91,"author":{"gitId":"ruoyann"},"content":"        int number \u003d Integer.parseInt(numberString);","lastModifiedDate":"2021-09-06"},{"lineNumber":92,"author":{"gitId":"ruoyann"},"content":"        if (number \u003e tasks.getSize() || number \u003c 0) {","lastModifiedDate":"2021-08-30"},{"lineNumber":93,"author":{"gitId":"ruoyann"},"content":"            throw new DukeException(\"Item does not exist, we cannot delete it.\");","lastModifiedDate":"2021-08-28"},{"lineNumber":94,"author":{"gitId":"ruoyann"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":95,"author":{"gitId":"ruoyann"},"content":"        return number - 1;","lastModifiedDate":"2021-08-28"},{"lineNumber":96,"author":{"gitId":"ruoyann"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":97,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":98,"author":{"gitId":"ruoyann"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":99,"author":{"gitId":"ruoyann"},"content":"     * Parses users inputs that wishes to add a todo task","lastModifiedDate":"2021-09-01"},{"lineNumber":100,"author":{"gitId":"ruoyann"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":101,"author":{"gitId":"ruoyann"},"content":"     * @param input the user\u0027s input","lastModifiedDate":"2021-08-29"},{"lineNumber":102,"author":{"gitId":"ruoyann"},"content":"     * @return the task that the user added","lastModifiedDate":"2021-08-29"},{"lineNumber":103,"author":{"gitId":"ruoyann"},"content":"     * @throws DukeException if the user\u0027s input is in an wrong format","lastModifiedDate":"2021-08-29"},{"lineNumber":104,"author":{"gitId":"ruoyann"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":105,"author":{"gitId":"ruoyann"},"content":"    public static String parseFind(String input) throws DukeException {","lastModifiedDate":"2021-08-29"},{"lineNumber":106,"author":{"gitId":"ruoyann"},"content":"        if (input.length() \u003d\u003d 4) {","lastModifiedDate":"2021-08-29"},{"lineNumber":107,"author":{"gitId":"ruoyann"},"content":"            throw new DukeException(\"OOPS!!! The word to find cannot be empty.\");","lastModifiedDate":"2021-08-29"},{"lineNumber":108,"author":{"gitId":"ruoyann"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":109,"author":{"gitId":"ruoyann"},"content":"        return input.substring(5);","lastModifiedDate":"2021-08-29"},{"lineNumber":110,"author":{"gitId":"ruoyann"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":111,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":112,"author":{"gitId":"ruoyann"},"content":"    public static Task parseTodo(String input) throws DukeException {","lastModifiedDate":"2021-08-28"},{"lineNumber":113,"author":{"gitId":"ruoyann"},"content":"        if (input.length() \u003d\u003d 4) {","lastModifiedDate":"2021-08-28"},{"lineNumber":114,"author":{"gitId":"ruoyann"},"content":"            throw new DukeException(\"OOPS!!! The description of a todo cannot be empty.\\n\");","lastModifiedDate":"2021-08-29"},{"lineNumber":115,"author":{"gitId":"ruoyann"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":116,"author":{"gitId":"ruoyann"},"content":"        String taskDesc \u003d input.substring(5);","lastModifiedDate":"2021-08-28"},{"lineNumber":117,"author":{"gitId":"ruoyann"},"content":"        return new Todo(taskDesc);","lastModifiedDate":"2021-08-28"},{"lineNumber":118,"author":{"gitId":"ruoyann"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":119,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":120,"author":{"gitId":"ruoyann"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":121,"author":{"gitId":"ruoyann"},"content":"     * Parses users inputs that wishes to add a deadline task","lastModifiedDate":"2021-09-01"},{"lineNumber":122,"author":{"gitId":"ruoyann"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":123,"author":{"gitId":"ruoyann"},"content":"     * @param input the user\u0027s input","lastModifiedDate":"2021-08-29"},{"lineNumber":124,"author":{"gitId":"ruoyann"},"content":"     * @return the task that the user added","lastModifiedDate":"2021-08-29"},{"lineNumber":125,"author":{"gitId":"ruoyann"},"content":"     * @throws DukeException if the user\u0027s input is in an wrong format","lastModifiedDate":"2021-08-29"},{"lineNumber":126,"author":{"gitId":"ruoyann"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":127,"author":{"gitId":"ruoyann"},"content":"    public static Task parseDeadline(String input) throws DukeException {","lastModifiedDate":"2021-08-28"},{"lineNumber":128,"author":{"gitId":"ruoyann"},"content":"        if (input.length() \u003d\u003d 8) {","lastModifiedDate":"2021-08-28"},{"lineNumber":129,"author":{"gitId":"ruoyann"},"content":"            throw new DukeException(\"OOPS!!! The description of a deadline cannot be empty.\\n\");","lastModifiedDate":"2021-08-29"},{"lineNumber":130,"author":{"gitId":"ruoyann"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":131,"author":{"gitId":"ruoyann"},"content":"        assert input.length() !\u003d 0 : \"Input length shouldn\u0027t be 0\";","lastModifiedDate":"2021-09-06"},{"lineNumber":132,"author":{"gitId":"ruoyann"},"content":"        int byIndex \u003d input.indexOf(\"/\");","lastModifiedDate":"2021-08-28"},{"lineNumber":133,"author":{"gitId":"ruoyann"},"content":"        String by \u003d input.substring(byIndex+4);","lastModifiedDate":"2021-08-28"},{"lineNumber":134,"author":{"gitId":"ruoyann"},"content":"        String taskDesc \u003d input.substring(9, byIndex-1);","lastModifiedDate":"2021-08-28"},{"lineNumber":135,"author":{"gitId":"ruoyann"},"content":"        return new Deadline(taskDesc, by);","lastModifiedDate":"2021-08-28"},{"lineNumber":136,"author":{"gitId":"ruoyann"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":137,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":138,"author":{"gitId":"ruoyann"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":139,"author":{"gitId":"ruoyann"},"content":"     * Parses users inputs that wishes to add a event task","lastModifiedDate":"2021-09-01"},{"lineNumber":140,"author":{"gitId":"ruoyann"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":141,"author":{"gitId":"ruoyann"},"content":"     * @param input the user\u0027s input","lastModifiedDate":"2021-08-29"},{"lineNumber":142,"author":{"gitId":"ruoyann"},"content":"     * @return the task that the user added","lastModifiedDate":"2021-08-29"},{"lineNumber":143,"author":{"gitId":"ruoyann"},"content":"     * @throws DukeException if the user\u0027s input is in an wrong format","lastModifiedDate":"2021-08-29"},{"lineNumber":144,"author":{"gitId":"ruoyann"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":145,"author":{"gitId":"ruoyann"},"content":"    public static Task parseEvent(String input) throws DukeException {","lastModifiedDate":"2021-08-28"},{"lineNumber":146,"author":{"gitId":"ruoyann"},"content":"        if (input.length() \u003d\u003d 5) {","lastModifiedDate":"2021-08-28"},{"lineNumber":147,"author":{"gitId":"ruoyann"},"content":"            throw new DukeException(\"OOPS!!! The description of a event cannot be empty.\\n\");","lastModifiedDate":"2021-08-29"},{"lineNumber":148,"author":{"gitId":"ruoyann"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":149,"author":{"gitId":"ruoyann"},"content":"        int byIndex \u003d input.indexOf(\"/\");","lastModifiedDate":"2021-08-28"},{"lineNumber":150,"author":{"gitId":"ruoyann"},"content":"        String by \u003d input.substring(byIndex+4);","lastModifiedDate":"2021-08-28"},{"lineNumber":151,"author":{"gitId":"ruoyann"},"content":"        String taskDesc \u003d input.substring(6, byIndex-1);","lastModifiedDate":"2021-08-28"},{"lineNumber":152,"author":{"gitId":"ruoyann"},"content":"        return new Event(taskDesc,by);","lastModifiedDate":"2021-08-28"},{"lineNumber":153,"author":{"gitId":"ruoyann"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":154,"author":{"gitId":"ruoyann"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"ruoyann":154}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruoyann"},"content":"package duke.storage;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"ruoyann"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"ruoyann"},"content":"import duke.task.Todo;","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"ruoyann"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"ruoyann"},"content":"import duke.task.Event;","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"ruoyann"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"ruoyann"},"content":"import java.io.File;","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"ruoyann"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"ruoyann"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"ruoyann"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"ruoyann"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"ruoyann"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"ruoyann"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"ruoyann"},"content":"/**","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"ruoyann"},"content":" * A class that deals with the loading and updating of local storage","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"ruoyann"},"content":" * file that contains the list of tasks.","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"ruoyann"},"content":" */","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"ruoyann"},"content":"public class Storage {","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"ruoyann"},"content":"    private final File tasksFile;","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"ruoyann"},"content":"    public Storage (String filePath) {","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"ruoyann"},"content":"        this.tasksFile \u003d new File(filePath);","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"ruoyann"},"content":"        File dir \u003d new File(tasksFile.getParent());","lastModifiedDate":"2021-08-29"},{"lineNumber":27,"author":{"gitId":"ruoyann"},"content":"        if (!dir.exists()) {","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"ruoyann"},"content":"            dir.mkdirs();","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"ruoyann"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"ruoyann"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":31,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":32,"author":{"gitId":"ruoyann"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":33,"author":{"gitId":"ruoyann"},"content":"     * Loads the existing (if any) list of tasks from the user\u0027s","lastModifiedDate":"2021-09-01"},{"lineNumber":34,"author":{"gitId":"ruoyann"},"content":"     * hard disk. If the file does not exist, one will be made.","lastModifiedDate":"2021-09-01"},{"lineNumber":35,"author":{"gitId":"ruoyann"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":36,"author":{"gitId":"ruoyann"},"content":"     * @return the list of tasks from the file","lastModifiedDate":"2021-08-29"},{"lineNumber":37,"author":{"gitId":"ruoyann"},"content":"     * @throws FileNotFoundException if the file is not found","lastModifiedDate":"2021-08-29"},{"lineNumber":38,"author":{"gitId":"ruoyann"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":39,"author":{"gitId":"ruoyann"},"content":"    public ArrayList\u003cTask\u003e load() throws FileNotFoundException {","lastModifiedDate":"2021-08-28"},{"lineNumber":40,"author":{"gitId":"ruoyann"},"content":"        try {","lastModifiedDate":"2021-08-29"},{"lineNumber":41,"author":{"gitId":"ruoyann"},"content":"            if (tasksFile.createNewFile()) {","lastModifiedDate":"2021-08-29"},{"lineNumber":42,"author":{"gitId":"ruoyann"},"content":"                return new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-29"},{"lineNumber":43,"author":{"gitId":"ruoyann"},"content":"            } else {","lastModifiedDate":"2021-08-29"},{"lineNumber":44,"author":{"gitId":"ruoyann"},"content":"                ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-30"},{"lineNumber":45,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":46,"author":{"gitId":"ruoyann"},"content":"                Scanner sc \u003d new Scanner(tasksFile);","lastModifiedDate":"2021-08-29"},{"lineNumber":47,"author":{"gitId":"ruoyann"},"content":"                while (sc.hasNext()) {","lastModifiedDate":"2021-08-28"},{"lineNumber":48,"author":{"gitId":"ruoyann"},"content":"                    String currLine \u003d sc.nextLine();","lastModifiedDate":"2021-08-28"},{"lineNumber":49,"author":{"gitId":"ruoyann"},"content":"                    String[] parts \u003d currLine.trim().split(Pattern.quote(\" | \"));","lastModifiedDate":"2021-08-28"},{"lineNumber":50,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":51,"author":{"gitId":"ruoyann"},"content":"                    String taskType \u003d parts[0];","lastModifiedDate":"2021-08-28"},{"lineNumber":52,"author":{"gitId":"ruoyann"},"content":"                    String taskDone \u003d parts[1];","lastModifiedDate":"2021-08-28"},{"lineNumber":53,"author":{"gitId":"ruoyann"},"content":"                    String taskDesc \u003d parts[2];","lastModifiedDate":"2021-08-28"},{"lineNumber":54,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":55,"author":{"gitId":"ruoyann"},"content":"                    Task currTask;","lastModifiedDate":"2021-08-28"},{"lineNumber":56,"author":{"gitId":"ruoyann"},"content":"                    if (taskType.equals(\"D\")) {","lastModifiedDate":"2021-08-28"},{"lineNumber":57,"author":{"gitId":"ruoyann"},"content":"                        currTask \u003d new Deadline(taskDesc, parts[3]);","lastModifiedDate":"2021-08-28"},{"lineNumber":58,"author":{"gitId":"ruoyann"},"content":"                    } else if (taskType.equals(\"E\")) {","lastModifiedDate":"2021-08-28"},{"lineNumber":59,"author":{"gitId":"ruoyann"},"content":"                        currTask \u003d new Event(taskDesc, parts[3]);","lastModifiedDate":"2021-08-28"},{"lineNumber":60,"author":{"gitId":"ruoyann"},"content":"                    } else {","lastModifiedDate":"2021-08-28"},{"lineNumber":61,"author":{"gitId":"ruoyann"},"content":"                        currTask \u003d new Todo(taskDesc);","lastModifiedDate":"2021-08-28"},{"lineNumber":62,"author":{"gitId":"ruoyann"},"content":"                    }","lastModifiedDate":"2021-08-28"},{"lineNumber":63,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":64,"author":{"gitId":"ruoyann"},"content":"                    if (taskDone.equals(\"1\")) {","lastModifiedDate":"2021-08-28"},{"lineNumber":65,"author":{"gitId":"ruoyann"},"content":"                        currTask.markAsDone();","lastModifiedDate":"2021-08-28"},{"lineNumber":66,"author":{"gitId":"ruoyann"},"content":"                    }","lastModifiedDate":"2021-08-28"},{"lineNumber":67,"author":{"gitId":"ruoyann"},"content":"                    tasks.add(currTask);","lastModifiedDate":"2021-08-30"},{"lineNumber":68,"author":{"gitId":"ruoyann"},"content":"                }","lastModifiedDate":"2021-08-28"},{"lineNumber":69,"author":{"gitId":"ruoyann"},"content":"                return tasks;","lastModifiedDate":"2021-08-30"},{"lineNumber":70,"author":{"gitId":"ruoyann"},"content":"            }","lastModifiedDate":"2021-08-28"},{"lineNumber":71,"author":{"gitId":"ruoyann"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-29"},{"lineNumber":72,"author":{"gitId":"ruoyann"},"content":"            System.out.println(\"Unable to load file\");","lastModifiedDate":"2021-08-29"},{"lineNumber":73,"author":{"gitId":"ruoyann"},"content":"            System.out.print(\"Exception occurred: \" + e);","lastModifiedDate":"2021-08-29"},{"lineNumber":74,"author":{"gitId":"ruoyann"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":75,"author":{"gitId":"ruoyann"},"content":"        return new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-29"},{"lineNumber":76,"author":{"gitId":"ruoyann"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":77,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":78,"author":{"gitId":"ruoyann"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":79,"author":{"gitId":"ruoyann"},"content":"     * Updates the file stored on the user\u0027s hard disk once","lastModifiedDate":"2021-09-01"},{"lineNumber":80,"author":{"gitId":"ruoyann"},"content":"     * the user ends the usage of the bot.","lastModifiedDate":"2021-08-29"},{"lineNumber":81,"author":{"gitId":"ruoyann"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":82,"author":{"gitId":"ruoyann"},"content":"    public void updateFile(TaskList tasks) {","lastModifiedDate":"2021-08-30"},{"lineNumber":83,"author":{"gitId":"ruoyann"},"content":"        String allLines \u003d \"\";","lastModifiedDate":"2021-08-28"},{"lineNumber":84,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":85,"author":{"gitId":"ruoyann"},"content":"        for (Task t : tasks.getTaskList()) {","lastModifiedDate":"2021-08-30"},{"lineNumber":86,"author":{"gitId":"ruoyann"},"content":"            String currLine \u003d \"\";","lastModifiedDate":"2021-08-28"},{"lineNumber":87,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":88,"author":{"gitId":"ruoyann"},"content":"            // Checking for the type of task","lastModifiedDate":"2021-08-28"},{"lineNumber":89,"author":{"gitId":"ruoyann"},"content":"            if (t instanceof Todo) {","lastModifiedDate":"2021-08-28"},{"lineNumber":90,"author":{"gitId":"ruoyann"},"content":"                currLine +\u003d \"T | \";","lastModifiedDate":"2021-08-28"},{"lineNumber":91,"author":{"gitId":"ruoyann"},"content":"            } else if (t instanceof Event) {","lastModifiedDate":"2021-08-28"},{"lineNumber":92,"author":{"gitId":"ruoyann"},"content":"                currLine +\u003d \"E | \";","lastModifiedDate":"2021-08-28"},{"lineNumber":93,"author":{"gitId":"ruoyann"},"content":"            } else {","lastModifiedDate":"2021-08-28"},{"lineNumber":94,"author":{"gitId":"ruoyann"},"content":"                currLine +\u003d \"D | \";","lastModifiedDate":"2021-08-28"},{"lineNumber":95,"author":{"gitId":"ruoyann"},"content":"            }","lastModifiedDate":"2021-08-28"},{"lineNumber":96,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":97,"author":{"gitId":"ruoyann"},"content":"            // Checking if the task is done","lastModifiedDate":"2021-08-28"},{"lineNumber":98,"author":{"gitId":"ruoyann"},"content":"            if (t.getIsDone()) {","lastModifiedDate":"2021-08-28"},{"lineNumber":99,"author":{"gitId":"ruoyann"},"content":"                currLine +\u003d \"1 | \";","lastModifiedDate":"2021-08-28"},{"lineNumber":100,"author":{"gitId":"ruoyann"},"content":"            } else {","lastModifiedDate":"2021-08-28"},{"lineNumber":101,"author":{"gitId":"ruoyann"},"content":"                currLine +\u003d \"0 | \";","lastModifiedDate":"2021-08-28"},{"lineNumber":102,"author":{"gitId":"ruoyann"},"content":"            }","lastModifiedDate":"2021-08-28"},{"lineNumber":103,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":104,"author":{"gitId":"ruoyann"},"content":"            // Add in the task description","lastModifiedDate":"2021-08-28"},{"lineNumber":105,"author":{"gitId":"ruoyann"},"content":"            currLine +\u003d t.getDescription();","lastModifiedDate":"2021-08-28"},{"lineNumber":106,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":107,"author":{"gitId":"ruoyann"},"content":"            // Add in the task deadline / time","lastModifiedDate":"2021-08-28"},{"lineNumber":108,"author":{"gitId":"ruoyann"},"content":"            if (t instanceof Deadline) {","lastModifiedDate":"2021-08-28"},{"lineNumber":109,"author":{"gitId":"ruoyann"},"content":"                currLine +\u003d \" | \";","lastModifiedDate":"2021-08-28"},{"lineNumber":110,"author":{"gitId":"ruoyann"},"content":"                currLine +\u003d ((Deadline)t).getBy();","lastModifiedDate":"2021-08-28"},{"lineNumber":111,"author":{"gitId":"ruoyann"},"content":"            } else if (t instanceof Event) {","lastModifiedDate":"2021-08-28"},{"lineNumber":112,"author":{"gitId":"ruoyann"},"content":"                currLine +\u003d \" | \";","lastModifiedDate":"2021-08-28"},{"lineNumber":113,"author":{"gitId":"ruoyann"},"content":"                currLine +\u003d ((Event)t).getAt();","lastModifiedDate":"2021-08-28"},{"lineNumber":114,"author":{"gitId":"ruoyann"},"content":"            }","lastModifiedDate":"2021-08-28"},{"lineNumber":115,"author":{"gitId":"ruoyann"},"content":"            allLines +\u003d currLine;","lastModifiedDate":"2021-08-28"},{"lineNumber":116,"author":{"gitId":"ruoyann"},"content":"            allLines +\u003d System.lineSeparator();","lastModifiedDate":"2021-08-28"},{"lineNumber":117,"author":{"gitId":"ruoyann"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":118,"author":{"gitId":"ruoyann"},"content":"        try {","lastModifiedDate":"2021-08-28"},{"lineNumber":119,"author":{"gitId":"ruoyann"},"content":"            tasksFile.createNewFile();","lastModifiedDate":"2021-08-29"},{"lineNumber":120,"author":{"gitId":"ruoyann"},"content":"            FileWriter writer \u003d new FileWriter(tasksFile, false);","lastModifiedDate":"2021-08-29"},{"lineNumber":121,"author":{"gitId":"ruoyann"},"content":"            writer.write(allLines);","lastModifiedDate":"2021-08-28"},{"lineNumber":122,"author":{"gitId":"ruoyann"},"content":"            writer.close();","lastModifiedDate":"2021-08-28"},{"lineNumber":123,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":124,"author":{"gitId":"ruoyann"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-29"},{"lineNumber":125,"author":{"gitId":"ruoyann"},"content":"            System.out.println(\"Unable to update file\");","lastModifiedDate":"2021-08-29"},{"lineNumber":126,"author":{"gitId":"ruoyann"},"content":"            System.out.print(\"Exception occurred: \" + e);","lastModifiedDate":"2021-08-29"},{"lineNumber":127,"author":{"gitId":"ruoyann"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":128,"author":{"gitId":"ruoyann"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":129,"author":{"gitId":"ruoyann"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"ruoyann":129}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruoyann"},"content":"package duke.task;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"ruoyann"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"ruoyann"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"ruoyann"},"content":"/**","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"ruoyann"},"content":" * Class for tasks that are deadlines.","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"ruoyann"},"content":" */","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"ruoyann"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-16"},{"lineNumber":9,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":10,"author":{"gitId":"ruoyann"},"content":"    protected String by;","lastModifiedDate":"2021-08-16"},{"lineNumber":11,"author":{"gitId":"ruoyann"},"content":"    protected LocalDate byDate;","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"ruoyann"},"content":"    protected DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"ruoyann"},"content":"    protected String[] monthArray \u003d new  String[] {\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sept\", \"Oct\", \"Nov\", \"Dec\"};","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":15,"author":{"gitId":"ruoyann"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2021-08-16"},{"lineNumber":16,"author":{"gitId":"ruoyann"},"content":"        super(description);","lastModifiedDate":"2021-08-16"},{"lineNumber":17,"author":{"gitId":"ruoyann"},"content":"        this.by \u003d by;","lastModifiedDate":"2021-08-16"},{"lineNumber":18,"author":{"gitId":"ruoyann"},"content":"        this.byDate \u003d LocalDate.parse(by, formatter);","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"ruoyann"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":20,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":21,"author":{"gitId":"ruoyann"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"ruoyann"},"content":"     * Checks if the task is marked as done.","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"ruoyann"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":24,"author":{"gitId":"ruoyann"},"content":"     * @return if the task is marked as done.","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"ruoyann"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"ruoyann"},"content":"    public boolean getIsDone() { return this.isDone;}","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"ruoyann"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"ruoyann"},"content":"     * Retrieves the description of the task instance.","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"ruoyann"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":31,"author":{"gitId":"ruoyann"},"content":"     * @return the string description of the task","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"ruoyann"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":33,"author":{"gitId":"ruoyann"},"content":"    public String getDescription() { return this.description; }","lastModifiedDate":"2021-08-28"},{"lineNumber":34,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":35,"author":{"gitId":"ruoyann"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":36,"author":{"gitId":"ruoyann"},"content":"     * Returns the date that the deadline should be done by","lastModifiedDate":"2021-08-29"},{"lineNumber":37,"author":{"gitId":"ruoyann"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":38,"author":{"gitId":"ruoyann"},"content":"     * @return a string of the date","lastModifiedDate":"2021-08-29"},{"lineNumber":39,"author":{"gitId":"ruoyann"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":40,"author":{"gitId":"ruoyann"},"content":"    public String getBy() {return this.by;}","lastModifiedDate":"2021-08-28"},{"lineNumber":41,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":42,"author":{"gitId":"ruoyann"},"content":"    @Override","lastModifiedDate":"2021-08-16"},{"lineNumber":43,"author":{"gitId":"ruoyann"},"content":"    public String toString() {","lastModifiedDate":"2021-08-16"},{"lineNumber":44,"author":{"gitId":"ruoyann"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + monthArray[byDate.getMonthValue()] + \" \" + byDate.getDayOfMonth() + \" \" + byDate.getYear() + \")\";","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"ruoyann"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":46,"author":{"gitId":"ruoyann"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"ruoyann":46}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruoyann"},"content":"package duke.task;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"ruoyann"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"ruoyann"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"ruoyann"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-16"},{"lineNumber":7,"author":{"gitId":"ruoyann"},"content":"    protected String at;","lastModifiedDate":"2021-08-16"},{"lineNumber":8,"author":{"gitId":"ruoyann"},"content":"    protected LocalDate atDate;","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"ruoyann"},"content":"    protected DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"ruoyann"},"content":"    protected String[] monthArray \u003d new  String[] {\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sept\", \"Oct\", \"Nov\", \"Dec\"};","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":12,"author":{"gitId":"ruoyann"},"content":"    public Event(String description, String at) {","lastModifiedDate":"2021-08-16"},{"lineNumber":13,"author":{"gitId":"ruoyann"},"content":"        super(description);","lastModifiedDate":"2021-08-16"},{"lineNumber":14,"author":{"gitId":"ruoyann"},"content":"        this.at \u003d at;","lastModifiedDate":"2021-08-16"},{"lineNumber":15,"author":{"gitId":"ruoyann"},"content":"        this.atDate \u003d LocalDate.parse(at, formatter);","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"ruoyann"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":17,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":18,"author":{"gitId":"ruoyann"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"ruoyann"},"content":"     * Checks if the task is marked as done.","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"ruoyann"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":21,"author":{"gitId":"ruoyann"},"content":"     * @return if the task is marked as done.","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"ruoyann"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"ruoyann"},"content":"    public boolean getIsDone() { return this.isDone;}","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"ruoyann"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"ruoyann"},"content":"     * Retrieves the description of the task instance.","lastModifiedDate":"2021-08-29"},{"lineNumber":27,"author":{"gitId":"ruoyann"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":28,"author":{"gitId":"ruoyann"},"content":"     * @return the string description of the task","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"ruoyann"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"ruoyann"},"content":"    public String getDescription() { return this.description; }","lastModifiedDate":"2021-08-28"},{"lineNumber":31,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"ruoyann"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":33,"author":{"gitId":"ruoyann"},"content":"     * Returns the date that the event is at","lastModifiedDate":"2021-08-29"},{"lineNumber":34,"author":{"gitId":"ruoyann"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":35,"author":{"gitId":"ruoyann"},"content":"     * @return a string of the date","lastModifiedDate":"2021-08-29"},{"lineNumber":36,"author":{"gitId":"ruoyann"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":37,"author":{"gitId":"ruoyann"},"content":"    public String getAt() {return this.at;}","lastModifiedDate":"2021-08-28"},{"lineNumber":38,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":39,"author":{"gitId":"ruoyann"},"content":"    @Override","lastModifiedDate":"2021-08-16"},{"lineNumber":40,"author":{"gitId":"ruoyann"},"content":"    public String toString() {","lastModifiedDate":"2021-08-16"},{"lineNumber":41,"author":{"gitId":"ruoyann"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + monthArray[atDate.getMonthValue() - 1] + \" \" + atDate.getDayOfMonth() + \" \" + atDate.getYear() + \")\";","lastModifiedDate":"2021-08-28"},{"lineNumber":42,"author":{"gitId":"ruoyann"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":43,"author":{"gitId":"ruoyann"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"ruoyann":43}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruoyann"},"content":"package duke.task;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"ruoyann"},"content":"public class Task {","lastModifiedDate":"2021-08-16"},{"lineNumber":4,"author":{"gitId":"ruoyann"},"content":"    protected String description;","lastModifiedDate":"2021-08-16"},{"lineNumber":5,"author":{"gitId":"ruoyann"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-16"},{"lineNumber":6,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":7,"author":{"gitId":"ruoyann"},"content":"    public Task(String description) {","lastModifiedDate":"2021-08-16"},{"lineNumber":8,"author":{"gitId":"ruoyann"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-16"},{"lineNumber":9,"author":{"gitId":"ruoyann"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-16"},{"lineNumber":10,"author":{"gitId":"ruoyann"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":11,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":12,"author":{"gitId":"ruoyann"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-16"},{"lineNumber":13,"author":{"gitId":"ruoyann"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2021-08-16"},{"lineNumber":14,"author":{"gitId":"ruoyann"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":15,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":16,"author":{"gitId":"ruoyann"},"content":"    public void markAsDone() {","lastModifiedDate":"2021-08-16"},{"lineNumber":17,"author":{"gitId":"ruoyann"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-08-16"},{"lineNumber":18,"author":{"gitId":"ruoyann"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":19,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":20,"author":{"gitId":"ruoyann"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"ruoyann"},"content":"     * Checks if the task is marked as done.","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"ruoyann"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":23,"author":{"gitId":"ruoyann"},"content":"     * @return if the task is marked as done.","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"ruoyann"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"ruoyann"},"content":"    public boolean getIsDone() { return this.isDone;}","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"ruoyann"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"ruoyann"},"content":"     * Retrieves the description of the task instance.","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"ruoyann"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":30,"author":{"gitId":"ruoyann"},"content":"     * @return the string description of the task","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"ruoyann"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"ruoyann"},"content":"    public String getDescription() { return this.description; }","lastModifiedDate":"2021-08-28"},{"lineNumber":33,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":34,"author":{"gitId":"ruoyann"},"content":"    @Override","lastModifiedDate":"2021-08-16"},{"lineNumber":35,"author":{"gitId":"ruoyann"},"content":"    public String toString() {","lastModifiedDate":"2021-08-16"},{"lineNumber":36,"author":{"gitId":"ruoyann"},"content":"       return (\"[\" + this.getStatusIcon() + \"] \" + this.description);","lastModifiedDate":"2021-08-16"},{"lineNumber":37,"author":{"gitId":"ruoyann"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":38,"author":{"gitId":"ruoyann"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"ruoyann":38}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruoyann"},"content":"package duke.task;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"ruoyann"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"ruoyann"},"content":"public class TaskList {","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"ruoyann"},"content":"    public ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"ruoyann"},"content":"    public TaskList(ArrayList\u003cTask\u003e tl) {","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"ruoyann"},"content":"        tasks \u003d tl;","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"ruoyann"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"ruoyann"},"content":"    public TaskList() {","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"ruoyann"},"content":"        tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"ruoyann"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"ruoyann"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"ruoyann"},"content":"        tasks.add(task);","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"ruoyann"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"ruoyann"},"content":"    public void deleteTask(int index) {","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"ruoyann"},"content":"        tasks.remove(index);","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"ruoyann"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"ruoyann"},"content":"    public ArrayList\u003cTask\u003e getTaskList() {","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"ruoyann"},"content":"        return tasks;","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"ruoyann"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":28,"author":{"gitId":"ruoyann"},"content":"    public int getSize() {","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"ruoyann"},"content":"        return tasks.size();","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"ruoyann"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":31,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":32,"author":{"gitId":"ruoyann"},"content":"    public Task get(int index) {","lastModifiedDate":"2021-08-29"},{"lineNumber":33,"author":{"gitId":"ruoyann"},"content":"        return tasks.get(index);","lastModifiedDate":"2021-08-30"},{"lineNumber":34,"author":{"gitId":"ruoyann"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":35,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":36,"author":{"gitId":"ruoyann"},"content":"    public TaskList searchList(String target) {","lastModifiedDate":"2021-08-29"},{"lineNumber":37,"author":{"gitId":"ruoyann"},"content":"        ArrayList\u003cTask\u003e foundTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-29"},{"lineNumber":38,"author":{"gitId":"ruoyann"},"content":"        for (Task t : tasks) {","lastModifiedDate":"2021-08-30"},{"lineNumber":39,"author":{"gitId":"ruoyann"},"content":"            if (t.toString().contains(target)) {","lastModifiedDate":"2021-08-29"},{"lineNumber":40,"author":{"gitId":"ruoyann"},"content":"                foundTasks.add(t);","lastModifiedDate":"2021-08-29"},{"lineNumber":41,"author":{"gitId":"ruoyann"},"content":"            }","lastModifiedDate":"2021-08-29"},{"lineNumber":42,"author":{"gitId":"ruoyann"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":43,"author":{"gitId":"ruoyann"},"content":"        return new TaskList(foundTasks);","lastModifiedDate":"2021-08-29"},{"lineNumber":44,"author":{"gitId":"ruoyann"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":45,"author":{"gitId":"ruoyann"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"ruoyann":45}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruoyann"},"content":"package duke.task;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"ruoyann"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-08-16"},{"lineNumber":4,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":5,"author":{"gitId":"ruoyann"},"content":"    public Todo(String description) {","lastModifiedDate":"2021-08-16"},{"lineNumber":6,"author":{"gitId":"ruoyann"},"content":"        super(description);","lastModifiedDate":"2021-08-16"},{"lineNumber":7,"author":{"gitId":"ruoyann"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":8,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":9,"author":{"gitId":"ruoyann"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"ruoyann"},"content":"     * Checks if the task is marked as done.","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"ruoyann"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"ruoyann"},"content":"     * @return if the task is marked as done.","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"ruoyann"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"ruoyann"},"content":"    public boolean getIsDone() { return this.isDone;}","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"ruoyann"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"ruoyann"},"content":"     * Retrieves the description of the task instance.","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"ruoyann"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"ruoyann"},"content":"     * @return the string description of the task","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"ruoyann"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"ruoyann"},"content":"    public String getDescription() { return this.description; }","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"ruoyann"},"content":"    @Override","lastModifiedDate":"2021-08-16"},{"lineNumber":24,"author":{"gitId":"ruoyann"},"content":"    public String toString() {","lastModifiedDate":"2021-08-16"},{"lineNumber":25,"author":{"gitId":"ruoyann"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2021-08-16"},{"lineNumber":26,"author":{"gitId":"ruoyann"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":27,"author":{"gitId":"ruoyann"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"ruoyann":27}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruoyann"},"content":"package duke.ui;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"ruoyann"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"ruoyann"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"ruoyann"},"content":"/**","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"ruoyann"},"content":" * Class that deals with interactions with the user","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"ruoyann"},"content":" * such as reading user commands and displaying messages","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"ruoyann"},"content":" * to the user.","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"ruoyann"},"content":" */","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"ruoyann"},"content":"public class Ui {","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"ruoyann"},"content":"    public Ui() {","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"ruoyann"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"ruoyann"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"ruoyann"},"content":"     * Method that prints the welcome message","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"ruoyann"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"ruoyann"},"content":"    public String showWelcome() {","lastModifiedDate":"2021-09-02"},{"lineNumber":20,"author":{"gitId":"ruoyann"},"content":"        return \"Hello! I\u0027m Duke\\n What can I do for you?\";","lastModifiedDate":"2021-09-02"},{"lineNumber":21,"author":{"gitId":"ruoyann"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"ruoyann"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"ruoyann"},"content":"     * Method that prints out the list of tasks","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"ruoyann"},"content":"     * @param tasks the list of tasks","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"ruoyann"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"ruoyann"},"content":"    public String listTasks(TaskList tasks) {","lastModifiedDate":"2021-09-02"},{"lineNumber":28,"author":{"gitId":"ruoyann"},"content":"        StringBuilder res \u003d new StringBuilder(\"Here are the tasks in your list:\\n\");","lastModifiedDate":"2021-09-02"},{"lineNumber":29,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":30,"author":{"gitId":"ruoyann"},"content":"        for (int i \u003d 0; i \u003c tasks.getSize(); i++) {","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"ruoyann"},"content":"            Task currTask \u003d tasks.get(i);","lastModifiedDate":"2021-08-30"},{"lineNumber":32,"author":{"gitId":"ruoyann"},"content":"            res.append(i + 1).append(\".\").append(currTask).append(\"\\n\");","lastModifiedDate":"2021-09-02"},{"lineNumber":33,"author":{"gitId":"ruoyann"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":34,"author":{"gitId":"ruoyann"},"content":"        return res.toString();","lastModifiedDate":"2021-09-02"},{"lineNumber":35,"author":{"gitId":"ruoyann"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":36,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":37,"author":{"gitId":"ruoyann"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":38,"author":{"gitId":"ruoyann"},"content":"     * Method that lists the tasks that contains the word entered by user","lastModifiedDate":"2021-08-30"},{"lineNumber":39,"author":{"gitId":"ruoyann"},"content":"     * @param tasks the list of tasks that contains the word entered by user","lastModifiedDate":"2021-08-30"},{"lineNumber":40,"author":{"gitId":"ruoyann"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":41,"author":{"gitId":"ruoyann"},"content":"    public String listFoundTasks(TaskList tasks) {","lastModifiedDate":"2021-09-02"},{"lineNumber":42,"author":{"gitId":"ruoyann"},"content":"        StringBuilder res \u003d new StringBuilder(\"Here are the matching tasks in your list:\\n\");","lastModifiedDate":"2021-09-02"},{"lineNumber":43,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":44,"author":{"gitId":"ruoyann"},"content":"        for (int i \u003d 0; i \u003c tasks.getSize(); i++) {","lastModifiedDate":"2021-08-30"},{"lineNumber":45,"author":{"gitId":"ruoyann"},"content":"            Task currTask \u003d tasks.get(i);","lastModifiedDate":"2021-08-30"},{"lineNumber":46,"author":{"gitId":"ruoyann"},"content":"            res.append(i + 1).append(\".\").append(currTask).append(\"\\n\");","lastModifiedDate":"2021-09-02"},{"lineNumber":47,"author":{"gitId":"ruoyann"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":48,"author":{"gitId":"ruoyann"},"content":"        return res.toString();","lastModifiedDate":"2021-09-02"},{"lineNumber":49,"author":{"gitId":"ruoyann"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":50,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":51,"author":{"gitId":"ruoyann"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":52,"author":{"gitId":"ruoyann"},"content":"     * Method that prints out the goodbye message","lastModifiedDate":"2021-08-29"},{"lineNumber":53,"author":{"gitId":"ruoyann"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":54,"author":{"gitId":"ruoyann"},"content":"    public String stopMethod() {","lastModifiedDate":"2021-09-02"},{"lineNumber":55,"author":{"gitId":"ruoyann"},"content":"        return \"Bye! Hope to see you again soon\\n\";","lastModifiedDate":"2021-09-02"},{"lineNumber":56,"author":{"gitId":"ruoyann"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":57,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":58,"author":{"gitId":"ruoyann"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":59,"author":{"gitId":"ruoyann"},"content":"     * Method that prints out the task marked as done and","lastModifiedDate":"2021-08-29"},{"lineNumber":60,"author":{"gitId":"ruoyann"},"content":"     * total number of tasks when user marks it as done.","lastModifiedDate":"2021-08-29"},{"lineNumber":61,"author":{"gitId":"ruoyann"},"content":"     * @param task the task to be marked as done","lastModifiedDate":"2021-08-29"},{"lineNumber":62,"author":{"gitId":"ruoyann"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":63,"author":{"gitId":"ruoyann"},"content":"    public String doneTask(Task task) {","lastModifiedDate":"2021-09-02"},{"lineNumber":64,"author":{"gitId":"ruoyann"},"content":"        return \"Nice! I\u0027ve marked this task as done:\\n\" + task;","lastModifiedDate":"2021-09-06"},{"lineNumber":65,"author":{"gitId":"ruoyann"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":66,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":67,"author":{"gitId":"ruoyann"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":68,"author":{"gitId":"ruoyann"},"content":"     * Method that prints out the task that aas added","lastModifiedDate":"2021-08-29"},{"lineNumber":69,"author":{"gitId":"ruoyann"},"content":"     * @param task the task that is added","lastModifiedDate":"2021-08-29"},{"lineNumber":70,"author":{"gitId":"ruoyann"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":71,"author":{"gitId":"ruoyann"},"content":"    public String addTask(Task task, TaskList tasks) {","lastModifiedDate":"2021-09-02"},{"lineNumber":72,"author":{"gitId":"ruoyann"},"content":"        return \"Got it. I have added this task:\\n\"","lastModifiedDate":"2021-09-02"},{"lineNumber":73,"author":{"gitId":"ruoyann"},"content":"                + task + \"\\n\"","lastModifiedDate":"2021-09-02"},{"lineNumber":74,"author":{"gitId":"ruoyann"},"content":"                + \"Now you have \" + tasks.getSize() + \" tasks in the list.\";","lastModifiedDate":"2021-09-02"},{"lineNumber":75,"author":{"gitId":"ruoyann"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":76,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":77,"author":{"gitId":"ruoyann"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":78,"author":{"gitId":"ruoyann"},"content":"     * Method that prints out the task that the user deleted.","lastModifiedDate":"2021-08-29"},{"lineNumber":79,"author":{"gitId":"ruoyann"},"content":"     * @param task the task that is deleted","lastModifiedDate":"2021-08-29"},{"lineNumber":80,"author":{"gitId":"ruoyann"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":81,"author":{"gitId":"ruoyann"},"content":"    public String deleteTask(Task task, TaskList tasks) {","lastModifiedDate":"2021-09-02"},{"lineNumber":82,"author":{"gitId":"ruoyann"},"content":"        return \"Got it. I have removed this task:\\n\"","lastModifiedDate":"2021-09-02"},{"lineNumber":83,"author":{"gitId":"ruoyann"},"content":"                + task + \"\\n\"","lastModifiedDate":"2021-09-02"},{"lineNumber":84,"author":{"gitId":"ruoyann"},"content":"                + \"Now you have \" + tasks.getSize() + \" tasks in the list.\";","lastModifiedDate":"2021-09-02"},{"lineNumber":85,"author":{"gitId":"ruoyann"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":86,"author":{"gitId":"ruoyann"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"ruoyann":86}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"ruoyann"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":2,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"ruoyann"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"ruoyann"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"ruoyann"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"ruoyann"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"ruoyann"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"Infinity\" minHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-09-07"},{"lineNumber":9,"author":{"gitId":"ruoyann"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"ruoyann"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"ruoyann"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"ruoyann"},"content":"    \u003c/children\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":13,"author":{"gitId":"ruoyann"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"ruoyann"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"ruoyann"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"ruoyann"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"ruoyann":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"ruoyann"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":2,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"ruoyann"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"ruoyann"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"ruoyann"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"ruoyann"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"ruoyann"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"ruoyann"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\"  minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"ruoyann"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"ruoyann"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"ruoyann"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"ruoyann"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"ruoyann"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"ruoyann"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"ruoyann"},"content":"\u003c!--                \u003cVBox fx:id\u003d\"dialogContainer\" fitToWidth\u003d\"true\"  /\u003e--\u003e","lastModifiedDate":"2021-09-06"},{"lineNumber":17,"author":{"gitId":"ruoyann"},"content":"            \u003c/content\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"ruoyann"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"ruoyann"},"content":"    \u003c/children\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":20,"author":{"gitId":"ruoyann"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"ruoyann":20}},{"path":"src/test/java/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruoyann"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"ruoyann"},"content":"import duke.task.Event;","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"ruoyann"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"ruoyann"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"ruoyann"},"content":"public class EventTest {","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"ruoyann"},"content":"    @Test","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"ruoyann"},"content":"    public void addEventTest() {","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"ruoyann"},"content":"        assertEquals(\"[E][ ] eventOne (at: Jan 12 2020)\",","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"ruoyann"},"content":"                new Event(\"eventOne\", \"2020-01-12\").toString());","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"ruoyann"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"ruoyann"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"ruoyann":14}},{"path":"src/test/java/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruoyann"},"content":"import duke.Duke;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"ruoyann"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"ruoyann"},"content":"import duke.parser.Parser;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"ruoyann"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"ruoyann"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"ruoyann"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"ruoyann"},"content":"public class ParserTest {","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"ruoyann"},"content":"    @Test","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"ruoyann"},"content":"    public void rubbishTest(){","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"ruoyann"},"content":"        try {","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"ruoyann"},"content":"            Parser.parse(\"rubbish\", new TaskList());","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"ruoyann"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"ruoyann"},"content":"            assertEquals(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\", e.getMessage());","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"ruoyann"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"ruoyann"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"ruoyann"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"ruoyann":19}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"ruoyann"},"content":"todo one","lastModifiedDate":"2021-08-16"},{"lineNumber":2,"author":{"gitId":"ruoyann"},"content":"todo two","lastModifiedDate":"2021-08-16"},{"lineNumber":3,"author":{"gitId":"ruoyann"},"content":"event three /at Sunday 2pm - 4pm","lastModifiedDate":"2021-08-16"},{"lineNumber":4,"author":{"gitId":"ruoyann"},"content":"deadline four /by Monday 2pm","lastModifiedDate":"2021-08-16"},{"lineNumber":5,"author":{"gitId":"ruoyann"},"content":"done 1","lastModifiedDate":"2021-08-16"},{"lineNumber":6,"author":{"gitId":"ruoyann"},"content":"delete 2","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"ruoyann"},"content":"deadline five /by Tuesday","lastModifiedDate":"2021-08-16"},{"lineNumber":8,"author":{"gitId":"ruoyann"},"content":"done 3","lastModifiedDate":"2021-08-16"},{"lineNumber":9,"author":{"gitId":"ruoyann"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"ruoyann"},"content":"bye","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"ruoyann":10}}]

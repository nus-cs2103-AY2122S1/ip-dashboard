[{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"random689"},"content":"public class Deadline extends Task{","lastModifiedDate":"2021-08-18"},{"lineNumber":2,"author":{"gitId":"random689"},"content":"    protected String dueDate;","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"random689"},"content":"    public Deadline(String name, String dueDate) {","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"random689"},"content":"        super(name);","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"random689"},"content":"        this.dueDate \u003d dueDate;","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"random689"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"random689"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"random689"},"content":"         return \"[D]\" + super.toString() + \" (by: \" + this.dueDate + \")\";","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"random689"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"random689":13}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"random689"},"content":"import java.util.*;","lastModifiedDate":"2021-08-18"},{"lineNumber":2,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"        String logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"        System.out.println(\"Hello from\\n\" + logo);","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"random689"},"content":"        String welcomeLine \u003d \"Hello! I\u0027m Duke\\n\" + \"What can I do for you?\\n\";","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"random689"},"content":"        String goodbyeLine \u003d \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"random689"},"content":"        System.out.println(welcomeLine);","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"random689"},"content":"        boolean isRunning \u003d true;","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"random689"},"content":"        String input;","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"random689"},"content":"        ArrayList\u003cTask\u003e listArray \u003d new ArrayList\u003cTask\u003e(100);","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"random689"},"content":"        int count \u003d 0;","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"random689"},"content":"        int index;","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"random689"},"content":"        String[] split;","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"random689"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"random689"},"content":"        do {","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"random689"},"content":"            try {","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"random689"},"content":"                input \u003d sc.next(); //Reads the next input","lastModifiedDate":"2021-08-18"},{"lineNumber":24,"author":{"gitId":"random689"},"content":"                switch (input) {","lastModifiedDate":"2021-08-18"},{"lineNumber":25,"author":{"gitId":"random689"},"content":"                    case \"bye\":  //Shuts down the bot when it gets a \"bye\" prompt","lastModifiedDate":"2021-08-18"},{"lineNumber":26,"author":{"gitId":"random689"},"content":"                        isRunning \u003d false;","lastModifiedDate":"2021-08-18"},{"lineNumber":27,"author":{"gitId":"random689"},"content":"                        System.out.println(goodbyeLine);","lastModifiedDate":"2021-08-18"},{"lineNumber":28,"author":{"gitId":"random689"},"content":"                        break;","lastModifiedDate":"2021-08-18"},{"lineNumber":29,"author":{"gitId":"random689"},"content":"                    case \"list\":  //Returns the list when it gets a \"list\" prompt","lastModifiedDate":"2021-08-18"},{"lineNumber":30,"author":{"gitId":"random689"},"content":"                        if (count \u003d\u003d 0) {","lastModifiedDate":"2021-08-18"},{"lineNumber":31,"author":{"gitId":"random689"},"content":"                            System.out.println(\"The list is empty!\"); //When the list is empty","lastModifiedDate":"2021-08-18"},{"lineNumber":32,"author":{"gitId":"random689"},"content":"                        } else {","lastModifiedDate":"2021-08-18"},{"lineNumber":33,"author":{"gitId":"random689"},"content":"                            for (int i \u003d 0; i \u003c count; i++) {","lastModifiedDate":"2021-08-18"},{"lineNumber":34,"author":{"gitId":"random689"},"content":"                                System.out.println(i + 1 + \". \" + listArray.get(i));","lastModifiedDate":"2021-08-18"},{"lineNumber":35,"author":{"gitId":"random689"},"content":"                            }","lastModifiedDate":"2021-08-18"},{"lineNumber":36,"author":{"gitId":"random689"},"content":"                        }","lastModifiedDate":"2021-08-18"},{"lineNumber":37,"author":{"gitId":"random689"},"content":"                        break;","lastModifiedDate":"2021-08-18"},{"lineNumber":38,"author":{"gitId":"random689"},"content":"                    case \"done\":  //Marks the task as done when it gets the \"done x\" prompt and updates the task as well.","lastModifiedDate":"2021-08-18"},{"lineNumber":39,"author":{"gitId":"random689"},"content":"                        input \u003d sc.nextLine();","lastModifiedDate":"2021-08-18"},{"lineNumber":40,"author":{"gitId":"random689"},"content":"                        if (input.isEmpty()) { //Catch if there is no number after the command","lastModifiedDate":"2021-08-18"},{"lineNumber":41,"author":{"gitId":"random689"},"content":"                            throw new DukeException(\"☹ OOPS!!! done will require a task number to update.\");","lastModifiedDate":"2021-08-18"},{"lineNumber":42,"author":{"gitId":"random689"},"content":"                        }","lastModifiedDate":"2021-08-18"},{"lineNumber":43,"author":{"gitId":"random689"},"content":"                        index \u003d Integer.parseInt(input.trim());","lastModifiedDate":"2021-08-18"},{"lineNumber":44,"author":{"gitId":"random689"},"content":"                        if (index \u003e count || index \u003c\u003d 0) { //Catches if the number is \u003e than the number of task or if its negative","lastModifiedDate":"2021-08-18"},{"lineNumber":45,"author":{"gitId":"random689"},"content":"                            throw new DukeException(\"☹ OOPS!!! The number is not in within the number of tasks!\");","lastModifiedDate":"2021-08-18"},{"lineNumber":46,"author":{"gitId":"random689"},"content":"                        }","lastModifiedDate":"2021-08-18"},{"lineNumber":47,"author":{"gitId":"random689"},"content":"                        System.out.println(\"Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2021-08-18"},{"lineNumber":48,"author":{"gitId":"random689"},"content":"                        System.out.println(\"  \" + listArray.get(index - 1).done());","lastModifiedDate":"2021-08-18"},{"lineNumber":49,"author":{"gitId":"random689"},"content":"                        break;","lastModifiedDate":"2021-08-18"},{"lineNumber":50,"author":{"gitId":"random689"},"content":"                    case \"todo\":  //Inputs a todo task when given the \"todo\" prompt","lastModifiedDate":"2021-08-18"},{"lineNumber":51,"author":{"gitId":"random689"},"content":"                        input \u003d sc.nextLine();","lastModifiedDate":"2021-08-18"},{"lineNumber":52,"author":{"gitId":"random689"},"content":"                        if (input.isEmpty()) { //Catch if todo description is empty","lastModifiedDate":"2021-08-18"},{"lineNumber":53,"author":{"gitId":"random689"},"content":"                            throw new DukeException(\"☹ OOPS!!! The description of a todo cannot be empty.\");","lastModifiedDate":"2021-08-18"},{"lineNumber":54,"author":{"gitId":"random689"},"content":"                        }","lastModifiedDate":"2021-08-18"},{"lineNumber":55,"author":{"gitId":"random689"},"content":"                        listArray.add(count++, new Todo(input.trim()));","lastModifiedDate":"2021-08-18"},{"lineNumber":56,"author":{"gitId":"random689"},"content":"                        System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2021-08-18"},{"lineNumber":57,"author":{"gitId":"random689"},"content":"                        System.out.println(\"  \" + listArray.get(count - 1));","lastModifiedDate":"2021-08-18"},{"lineNumber":58,"author":{"gitId":"random689"},"content":"                        System.out.println(\"Now you have \" + count + \" in the list.\");","lastModifiedDate":"2021-08-18"},{"lineNumber":59,"author":{"gitId":"random689"},"content":"                        break;","lastModifiedDate":"2021-08-18"},{"lineNumber":60,"author":{"gitId":"random689"},"content":"                    case \"deadline\": //Inputs a Deadline task when given the \"deadline\" prompt","lastModifiedDate":"2021-08-18"},{"lineNumber":61,"author":{"gitId":"random689"},"content":"                        input \u003d sc.nextLine();","lastModifiedDate":"2021-08-18"},{"lineNumber":62,"author":{"gitId":"random689"},"content":"                        if (input.isEmpty()) { //Catch if deadline description is empty","lastModifiedDate":"2021-08-18"},{"lineNumber":63,"author":{"gitId":"random689"},"content":"                            throw new DukeException(\"☹ OOPS!!! The description of a deadline cannot be empty.\");","lastModifiedDate":"2021-08-18"},{"lineNumber":64,"author":{"gitId":"random689"},"content":"                        }","lastModifiedDate":"2021-08-18"},{"lineNumber":65,"author":{"gitId":"random689"},"content":"                        split \u003d input.split(\" /by \");","lastModifiedDate":"2021-08-18"},{"lineNumber":66,"author":{"gitId":"random689"},"content":"                        if (split.length \u003c\u003d 1) {","lastModifiedDate":"2021-08-18"},{"lineNumber":67,"author":{"gitId":"random689"},"content":"                            throw new DukeException(\"☹ OOPS!!! Your deadline input format is not valid!\");","lastModifiedDate":"2021-08-18"},{"lineNumber":68,"author":{"gitId":"random689"},"content":"                        }","lastModifiedDate":"2021-08-18"},{"lineNumber":69,"author":{"gitId":"random689"},"content":"                        listArray.add(count++, new Deadline(split[0].trim(), split[1]));","lastModifiedDate":"2021-08-18"},{"lineNumber":70,"author":{"gitId":"random689"},"content":"                        System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2021-08-18"},{"lineNumber":71,"author":{"gitId":"random689"},"content":"                        System.out.println(\"  \" + listArray.get(count - 1));","lastModifiedDate":"2021-08-18"},{"lineNumber":72,"author":{"gitId":"random689"},"content":"                        System.out.println(\"Now you have \" + count + \" in the list.\");","lastModifiedDate":"2021-08-18"},{"lineNumber":73,"author":{"gitId":"random689"},"content":"                        break;","lastModifiedDate":"2021-08-18"},{"lineNumber":74,"author":{"gitId":"random689"},"content":"                    case \"event\": //Inputs an Event task when given the \"event\" prompt","lastModifiedDate":"2021-08-18"},{"lineNumber":75,"author":{"gitId":"random689"},"content":"                        input \u003d sc.nextLine();","lastModifiedDate":"2021-08-18"},{"lineNumber":76,"author":{"gitId":"random689"},"content":"                        if (input.isEmpty()) { //Catch if event description is empty","lastModifiedDate":"2021-08-18"},{"lineNumber":77,"author":{"gitId":"random689"},"content":"                            throw new DukeException(\"☹ OOPS!!! The description of a event cannot be empty.\");","lastModifiedDate":"2021-08-18"},{"lineNumber":78,"author":{"gitId":"random689"},"content":"                        }","lastModifiedDate":"2021-08-18"},{"lineNumber":79,"author":{"gitId":"random689"},"content":"                        split \u003d input.split(\" /at \");","lastModifiedDate":"2021-08-18"},{"lineNumber":80,"author":{"gitId":"random689"},"content":"                        if (split.length \u003c\u003d 1) {","lastModifiedDate":"2021-08-18"},{"lineNumber":81,"author":{"gitId":"random689"},"content":"                            throw new DukeException(\"☹ OOPS!!! Your event input format is not valid!\");","lastModifiedDate":"2021-08-18"},{"lineNumber":82,"author":{"gitId":"random689"},"content":"                        }","lastModifiedDate":"2021-08-18"},{"lineNumber":83,"author":{"gitId":"random689"},"content":"                        listArray.add(count++, new Event(split[0].trim() , split[1]));","lastModifiedDate":"2021-08-18"},{"lineNumber":84,"author":{"gitId":"random689"},"content":"                        System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2021-08-18"},{"lineNumber":85,"author":{"gitId":"random689"},"content":"                        System.out.println(\"  \" + listArray.get(count - 1));","lastModifiedDate":"2021-08-18"},{"lineNumber":86,"author":{"gitId":"random689"},"content":"                        System.out.println(\"Now you have \" + count + \" in the list.\");","lastModifiedDate":"2021-08-18"},{"lineNumber":87,"author":{"gitId":"random689"},"content":"                        break;","lastModifiedDate":"2021-08-18"},{"lineNumber":88,"author":{"gitId":"random689"},"content":"                        case \"delete\":  //deletes the task when it gets the \"delete x\" prompt and updates the task as well.","lastModifiedDate":"2021-08-18"},{"lineNumber":89,"author":{"gitId":"random689"},"content":"                        input \u003d sc.nextLine();","lastModifiedDate":"2021-08-18"},{"lineNumber":90,"author":{"gitId":"random689"},"content":"                        if (input.isEmpty()) { //Catch if there is no number after the command","lastModifiedDate":"2021-08-18"},{"lineNumber":91,"author":{"gitId":"random689"},"content":"                            throw new DukeException(\"☹ OOPS!!! delete will require a task number to update.\");","lastModifiedDate":"2021-08-18"},{"lineNumber":92,"author":{"gitId":"random689"},"content":"                        }","lastModifiedDate":"2021-08-18"},{"lineNumber":93,"author":{"gitId":"random689"},"content":"                        index \u003d Integer.parseInt(input.trim());","lastModifiedDate":"2021-08-18"},{"lineNumber":94,"author":{"gitId":"random689"},"content":"                        if (index \u003e count || index \u003c\u003d 0) { //Catches if the number is \u003e than the number of task or if its negative","lastModifiedDate":"2021-08-18"},{"lineNumber":95,"author":{"gitId":"random689"},"content":"                            throw new DukeException(\"☹ OOPS!!! The number is not in within the number of tasks!\");","lastModifiedDate":"2021-08-18"},{"lineNumber":96,"author":{"gitId":"random689"},"content":"                        }","lastModifiedDate":"2021-08-18"},{"lineNumber":97,"author":{"gitId":"random689"},"content":"                        System.out.println(\"Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2021-08-18"},{"lineNumber":98,"author":{"gitId":"random689"},"content":"                        System.out.println(\"  \" + listArray.remove(index - 1));","lastModifiedDate":"2021-08-18"},{"lineNumber":99,"author":{"gitId":"random689"},"content":"                        System.out.println(\"Now you have \" + --count + \" in the list.\");","lastModifiedDate":"2021-08-18"},{"lineNumber":100,"author":{"gitId":"random689"},"content":"                        break;","lastModifiedDate":"2021-08-18"},{"lineNumber":101,"author":{"gitId":"random689"},"content":"                    default:","lastModifiedDate":"2021-08-18"},{"lineNumber":102,"author":{"gitId":"random689"},"content":"                        throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2021-08-18"},{"lineNumber":103,"author":{"gitId":"random689"},"content":"                }","lastModifiedDate":"2021-08-18"},{"lineNumber":104,"author":{"gitId":"random689"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2021-08-18"},{"lineNumber":105,"author":{"gitId":"random689"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2021-08-18"},{"lineNumber":106,"author":{"gitId":"random689"},"content":"            } catch (NumberFormatException e2) { //For catching any invalid number after the done command","lastModifiedDate":"2021-08-18"},{"lineNumber":107,"author":{"gitId":"random689"},"content":"                System.out.println(\"☹ OOPS!!! done will require a valid integer value input to update.\");","lastModifiedDate":"2021-08-18"},{"lineNumber":108,"author":{"gitId":"random689"},"content":"            }","lastModifiedDate":"2021-08-18"},{"lineNumber":109,"author":{"gitId":"random689"},"content":"        } while (isRunning);","lastModifiedDate":"2021-08-18"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":111,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"random689":101,"-":10}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"random689"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-08-18"},{"lineNumber":2,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"random689"},"content":"    public DukeException() {","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"random689"},"content":"    public DukeException(String message) {","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"random689"},"content":"        super(message);","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"random689"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"random689":9}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"random689"},"content":"public class Event extends Task{","lastModifiedDate":"2021-08-18"},{"lineNumber":2,"author":{"gitId":"random689"},"content":"    protected String eventTime;","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"random689"},"content":"    public Event(String name, String eventTime) {","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"random689"},"content":"        super(name);","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"random689"},"content":"        this.eventTime \u003d eventTime;","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"random689"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"random689"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"random689"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + this.eventTime + \")\";","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"random689"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"random689":13}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"random689"},"content":"public class Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":2,"author":{"gitId":"random689"},"content":"    private final String name;","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"random689"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"random689"},"content":"    public Task(String name) {","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"random689"},"content":"        this.name \u003d name;","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"random689"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"random689"},"content":"    public String done() {","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"random689"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"random689"},"content":"        return this.toString();","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"random689"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"random689"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"random689"},"content":"        if (this.isDone) {","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"random689"},"content":"            return \"[X] \" + this.name;","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"random689"},"content":"        } else {","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"random689"},"content":"            return \"[ ] \" + this.name;","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"random689"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"random689"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"random689":23}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"random689"},"content":"public class Todo extends Task{","lastModifiedDate":"2021-08-18"},{"lineNumber":2,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"random689"},"content":"    public Todo(String name) {","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"random689"},"content":"        super(name);","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"random689"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"random689"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"random689"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"random689"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"random689":11}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"random689"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":2,"author":{"gitId":"random689"},"content":"delete","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"random689"},"content":"done","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"random689"},"content":"done 1","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"random689"},"content":"delete 2","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"random689"},"content":"todo","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"random689"},"content":"event project meeting","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"random689"},"content":"deadline feed cats","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"random689"},"content":"todo borrow book","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"random689"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"random689"},"content":"deadline return book /by sunday","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"random689"},"content":"event project meeting /at Mon 2-4pm","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"random689"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"random689"},"content":"random","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"random689"},"content":"done 1","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"random689"},"content":"done 3","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"random689"},"content":"delete 1","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"random689"},"content":"todo find cats","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"random689"},"content":"delete 3","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"random689"},"content":"deadline feed cats /by the time you buy them","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"random689"},"content":"event cat party /at the day you get the cats","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"random689"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"random689"},"content":"bye","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"random689":23}}]

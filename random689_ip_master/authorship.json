[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"random689"},"content":"# duke.Duke project template","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"random689"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"random689":2,"-":22}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"random689"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":17,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"random689"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"random689"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":20,"author":{"gitId":"random689"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":21,"author":{"gitId":"random689"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":22,"author":{"gitId":"random689"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":23,"author":{"gitId":"random689"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":24,"author":{"gitId":"random689"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":25,"author":{"gitId":"random689"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":26,"author":{"gitId":"random689"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":27,"author":{"gitId":"random689"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":28,"author":{"gitId":"random689"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":29,"author":{"gitId":"random689"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    mainClassName \u003d \"seedu.duke.Duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"random689":15,"-":46}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"random689"},"content":"D | 0 | hi | Feb 2 2021","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"random689"},"content":"T | 1 | 123","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"random689":2}},{"path":"data/task.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"random689"},"content":"T | 1 | 123","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"random689"},"content":"T | 1 | 12345","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"random689"},"content":"D | 1 | slap ym | Dec 12 2020","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"random689"},"content":"T | 0 | hi hi","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"random689"},"content":"T | 1 | cry","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"random689"},"content":"T | 0 | test","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"random689"},"content":"T | 0 | 123","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"random689"},"content":"T | 0 | hi","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"random689":8}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"random689"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"random689"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"random689"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"random689"},"content":"import duke.command.Command;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"random689"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"random689"},"content":"import duke.ui.Parser;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"random689"},"content":"import duke.ui.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"random689"},"content":"import duke.ui.TaskList;","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"random689"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"random689"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"random689"},"content":" * Main Class to run the Duke ChatBot","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"random689"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":18,"author":{"gitId":"random689"},"content":"    private final Storage storage;","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"random689"},"content":"    private TaskList taskLists;","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"random689"},"content":"    private final Ui ui;","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"random689"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"random689"},"content":"     * Constructor for the duke class","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"random689"},"content":"     * @param filePath The path where the txt file is located/to be created","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"random689"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"random689"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"random689"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"random689"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"random689"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"random689"},"content":"            this.taskLists \u003d new TaskList(storage.load());","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"random689"},"content":"        } catch (DukeException | IOException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"random689"},"content":"            Ui.showLoadingError(); //Inform user that the existing file is of the wrong format","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"random689"},"content":"            this.taskLists \u003d new TaskList(); //Creates a new empty list","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"random689"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"random689"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"random689"},"content":"     * Starts the bot","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"random689"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"random689"},"content":"    public void run() {","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"random689"},"content":"        ui.showWelcome();","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"random689"},"content":"        boolean isRunning \u003d true; //Bot is running on start up","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"random689"},"content":"        do {","lastModifiedDate":"2021-08-18"},{"lineNumber":44,"author":{"gitId":"random689"},"content":"            try {","lastModifiedDate":"2021-08-18"},{"lineNumber":45,"author":{"gitId":"random689"},"content":"                String fullCommand \u003d ui.readCommand();","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"random689"},"content":"                ui.showLine(); // show the divider line after each line","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"random689"},"content":"                Command c \u003d Parser.parse(fullCommand); //Converts the input to the proper commands","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"random689"},"content":"                c.execute(taskLists, ui, storage); //Run the given command","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"random689"},"content":"                isRunning \u003d c.isRunning(); //Updates the status of the bot","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"random689"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2021-08-18"},{"lineNumber":51,"author":{"gitId":"random689"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2021-08-18"},{"lineNumber":52,"author":{"gitId":"random689"},"content":"            } catch (IOException e2) {","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"random689"},"content":"                System.out.println(\"☹ OOPS!!! It seems like your file is corrupted!\");","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"random689"},"content":"            } catch (DateTimeParseException e3) {","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"random689"},"content":"                System.out.println(\"☹ OOPS!!! It seems like your date/time input is wrong!\");","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"random689"},"content":"            } finally {","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"random689"},"content":"                ui.showLine(); //To show the divider line after the bot\u0027s output","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"random689"},"content":"            }","lastModifiedDate":"2021-08-18"},{"lineNumber":59,"author":{"gitId":"random689"},"content":"        } while (isRunning);","lastModifiedDate":"2021-08-18"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":61,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"random689"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"random689"},"content":"     * main function","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"random689"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"random689"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"random689"},"content":"        new Duke(\"data\").run(); //To run the bot","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"random689":65,"-":3}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"random689"},"content":"package duke.command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"random689"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"random689"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"random689"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"random689"},"content":"import duke.task.Event;","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"random689"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"random689"},"content":"import duke.task.Todo;","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"random689"},"content":"import duke.ui.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"random689"},"content":"import duke.ui.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"random689"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"random689"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"random689"},"content":" * AddCommand class to handle all the adding of events to the list.","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"random689"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"random689"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"random689"},"content":"    private final Task inputTask;","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"random689"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"random689"},"content":"     * Constructor for AddCommand","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"random689"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"random689"},"content":"     * @param taskType Task type","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"random689"},"content":"     * @param details The name/date/time of the task","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"random689"},"content":"     * @throws DukeException Throws this if there are anything wrong with the inputs","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"random689"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"random689"},"content":"    public AddCommand(String taskType, String details) throws DukeException {","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"random689"},"content":"        super(true);","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"random689"},"content":"        String[] split;","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"random689"},"content":"        switch (taskType) {","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"random689"},"content":"        case \"todo\":","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"random689"},"content":"            this.inputTask \u003d new Todo(details);","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"random689"},"content":"            break;","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"random689"},"content":"        case \"deadline\":","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"random689"},"content":"            if (details \u003d\u003d null) {","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"random689"},"content":"                throw new DukeException(\"☹ OOPS!!! The description of a deadline cannot be empty.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"random689"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"random689"},"content":"            split \u003d details.split(\" /by \");","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"random689"},"content":"            if (split.length \u003c\u003d 1) {","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"random689"},"content":"                throw new DukeException(\"☹ OOPS!!! Your deadline input format is not valid!\");","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"random689"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"random689"},"content":"            this.inputTask \u003d new Deadline(split[0].trim(), split[1]);","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"random689"},"content":"            break;","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"random689"},"content":"        case \"event\":","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"random689"},"content":"            if (details \u003d\u003d null) {","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"random689"},"content":"                throw new DukeException(\"☹ OOPS!!! The description of an event cannot be empty.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"random689"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"random689"},"content":"            split \u003d details.split(\" /at \");","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"random689"},"content":"            if (split.length \u003c\u003d 1) {","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"random689"},"content":"                throw new DukeException(\"☹ OOPS!!! Your event date input format is not valid!\");","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"random689"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"random689"},"content":"            this.inputTask \u003d new Event(split[0].trim(), split[1]);","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"random689"},"content":"            break;","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"random689"},"content":"        default:","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"random689"},"content":"            throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"random689"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"random689"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"random689"},"content":"     * Executes the AddCommand to update the list, update the txt, and print the returns to the user","lastModifiedDate":"2021-08-26"},{"lineNumber":64,"author":{"gitId":"random689"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"random689"},"content":"     * @param taskList The current list of tasks","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"random689"},"content":"     * @param ui       The current Ui","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"random689"},"content":"     * @param storage  The current storage class to handle the txt file","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"random689"},"content":"     * @throws IOException if the filepath has any issues","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"random689"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"random689"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"random689"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws IOException {","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"random689"},"content":"        taskList.add(this.inputTask);","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"random689"},"content":"        ui.showAddedMessage(taskList);","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"random689"},"content":"        Storage.updateText(taskList);","lastModifiedDate":"2021-08-25"},{"lineNumber":76,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":77,"author":{"gitId":"random689"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"random689":77}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"random689"},"content":"package duke.command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"random689"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"random689"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"random689"},"content":"import duke.ui.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"random689"},"content":"import duke.ui.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"random689"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"random689"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"random689"},"content":" * Base Command Class for the other Command classes","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"random689"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"random689"},"content":"public class Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"random689"},"content":"    private final boolean isRunning;","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"random689"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"random689"},"content":"     * Constructor for the command class","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"random689"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"random689"},"content":"     * @param isRunning boolean to indicate if the bot still runs after this function","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"random689"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"random689"},"content":"    public Command(boolean isRunning) {","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"random689"},"content":"        this.isRunning \u003d isRunning;","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"random689"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"random689"},"content":"     * Checks if the bot still runs after this command","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"random689"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"random689"},"content":"    public boolean isRunning() {","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"random689"},"content":"        return this.isRunning;","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"random689"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"random689"},"content":"     * Executes the command","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"random689"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"random689"},"content":"     * @param taskList The current list of tasks","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"random689"},"content":"     * @param ui       The current Ui","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"random689"},"content":"     * @param storage  The current storage class to handle the txt file","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"random689"},"content":"     * @throws IOException   if the filepath has any issues","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"random689"},"content":"     * @throws DukeException to handle any other input/format error","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"random689"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"random689"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws IOException, DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"random689"},"content":"}","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"random689":44}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"random689"},"content":"package duke.command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"random689"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"random689"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"random689"},"content":"import duke.ui.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"random689"},"content":"import duke.ui.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"random689"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"random689"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"random689"},"content":" * DeleteCommand class to handle the deletion of task from the list","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"random689"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"random689"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"random689"},"content":"    private final int index;","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"random689"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"random689"},"content":"     * Constructor for the DeleteCommand","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"random689"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"random689"},"content":"     * @param input The index of the task to be deleted","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"random689"},"content":"     * @throws DukeException catches if the input is invalid","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"random689"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"random689"},"content":"    public DeleteCommand(String input) throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"random689"},"content":"        super(true);","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"random689"},"content":"        if (input \u003d\u003d null) {","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"random689"},"content":"            //Catch if there is no number after the command","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"random689"},"content":"            throw new DukeException(\"☹ OOPS!!! delete will require a task number to update.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"random689"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"random689"},"content":"        this.index \u003d Integer.parseInt(input.trim());","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"random689"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"random689"},"content":"     * Executes the DeleteCommand to delete the task from the list,","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"random689"},"content":"     * update the respective list and txt file","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"random689"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"random689"},"content":"     * @param taskList The current list of tasks","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"random689"},"content":"     * @param ui       The current Ui","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"random689"},"content":"     * @param storage  The current storage class to handle the txt file","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"random689"},"content":"     * @throws IOException   if the filepath has any issues","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"random689"},"content":"     * @throws DukeException if there are any other format/input issues","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"random689"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"random689"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"random689"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws IOException, DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"random689"},"content":"        if (index \u003e taskList.getCount() || index \u003c\u003d 0) {","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"random689"},"content":"            //Catches if the number is \u003e than the number of task or if its negative","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"random689"},"content":"            throw new DukeException(\"☹ OOPS!!! The number is not in within the number of tasks!\");","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"random689"},"content":"        } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"random689"},"content":"            Ui.deleteMessage(taskList.delete(index - 1), taskList.getCount());","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"random689"},"content":"            Storage.updateText(taskList);","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"random689"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"random689"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"random689":52}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"random689"},"content":"package duke.command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"random689"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"random689"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"random689"},"content":"import duke.ui.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"random689"},"content":"import duke.ui.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"random689"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"random689"},"content":"/**","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"random689"},"content":" * DoneCommand Class to handle the done command","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"random689"},"content":" */","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"random689"},"content":"public class DoneCommand extends Command { //DoneCommand to handle the updating of list","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"random689"},"content":"    private final int index;","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"random689"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"random689"},"content":"     * Constructor for the DoneCommand Class","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"random689"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"random689"},"content":"     * @param input index for the task that is to be marked as done","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"random689"},"content":"     * @throws DukeException Catches if the input is invalid","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"random689"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"random689"},"content":"    public DoneCommand(String input) throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"random689"},"content":"        super(true);","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"random689"},"content":"        if (input \u003d\u003d null) {","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"random689"},"content":"            //Catch if there is no number after the command","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"random689"},"content":"            throw new DukeException(\"☹ OOPS!!! done will require a task number to update.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"random689"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"random689"},"content":"        this.index \u003d Integer.parseInt(input.trim());","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"random689"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"random689"},"content":"     * Executes the DoneCommand to update the task in the list as done.","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"random689"},"content":"     * Also updates the list and txt files accordingly.","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"random689"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"random689"},"content":"     * @param taskList The current list of tasks","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"random689"},"content":"     * @param ui       The current Ui","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"random689"},"content":"     * @param storage  The current storage class to handle the txt file","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"random689"},"content":"     * @throws IOException   If the filepath has issue","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"random689"},"content":"     * @throws DukeException catches if the input/format is wrong","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"random689"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"random689"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"random689"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws IOException, DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"random689"},"content":"        if (index \u003e taskList.getCount() || index \u003c\u003d 0) {","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"random689"},"content":"            //Catches if the number is \u003e than the number of task or if its negative","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"random689"},"content":"            throw new DukeException(\"☹ OOPS!!! The number is not in within the number of tasks!\");","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"random689"},"content":"        } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"random689"},"content":"            if (taskList.get(index - 1).isDone()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"random689"},"content":"                throw new DukeException(\"☹ OOPS!!! That task has already been completed!\");","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"random689"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"random689"},"content":"            Ui.doneMessage(taskList.get(index - 1).done());","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"random689"},"content":"            Storage.updateText(taskList);","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"random689"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"random689"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"random689":55}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"random689"},"content":"package duke.command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"random689"},"content":"import duke.ui.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"random689"},"content":"import duke.ui.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"random689"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"random689"},"content":"/**","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"random689"},"content":" * ExitCommand class to handle the closing of the bot","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"random689"},"content":" */","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"random689"},"content":"public class ExitCommand extends Command { //ExitCommand to handle the shutting down of bots","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"random689"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"random689"},"content":"     * Constructor for the ExitCommand Class","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"random689"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"random689"},"content":"    public ExitCommand() {","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"random689"},"content":"        super(false);","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"random689"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"random689"},"content":"     * Executes the exitCommand for the bot to say the goodbye Message","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"random689"},"content":"     * and to inform the Duke Class that isRunning is false","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"random689"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"random689"},"content":"     * @param taskList The current list of tasks","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"random689"},"content":"     * @param ui       The current Ui","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"random689"},"content":"     * @param storage  The current storage class to handle the txt file","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"random689"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"random689"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"random689"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"random689"},"content":"        ui.showGoodBye();","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"random689"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"random689":31}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"random689"},"content":"package duke.command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"random689"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"random689"},"content":"import duke.ui.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"random689"},"content":"import duke.ui.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"random689"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"random689"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"random689"},"content":" * FindCommand Class for the find commands","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"random689"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"random689"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"random689"},"content":"    private final String string;","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"random689"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"random689"},"content":"     * FindCommand Constructor","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"random689"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"random689"},"content":"     * @param string is the string to be searched","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"random689"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"random689"},"content":"    public FindCommand(String string) throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"random689"},"content":"        super(true);","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"random689"},"content":"        if (string \u003d\u003d null) {","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"random689"},"content":"            throw new DukeException(\"☹ OOPS!!! find will require a pattern to find.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"random689"},"content":"        } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"random689"},"content":"            this.string \u003d string;","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"random689"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"random689"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"random689"},"content":"     * Executes the Search Command to print the list of task with the given string to the user via the Ui","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"random689"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"random689"},"content":"     * @param taskList The current list of tasks","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"random689"},"content":"     * @param ui       The current Ui","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"random689"},"content":"     * @param storage  The current storage class to handle the txt file","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"random689"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"random689"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"random689"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"random689"},"content":"        Ui.searchList(taskList, this.string);","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"random689"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"random689":39}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"random689"},"content":"package duke.command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"random689"},"content":"import duke.ui.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"random689"},"content":"import duke.ui.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"random689"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"random689"},"content":"public class ListCommand extends Command { //ListCommand to handle the showing of list","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"random689"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"random689"},"content":"     * Constructor for the ListCommand Class","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"random689"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"random689"},"content":"    public ListCommand() {","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"random689"},"content":"        super(true);","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"random689"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"random689"},"content":"     * Executes the ListCommand to print the list to the user via the Ui","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"random689"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"random689"},"content":"     * @param taskList The current list of tasks","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"random689"},"content":"     * @param ui       The current Ui","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"random689"},"content":"     * @param storage  The current storage class to handle the txt file","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"random689"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"random689"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"random689"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"random689"},"content":"        Ui.printList(taskList);","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"random689"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"random689":27}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"random689"},"content":"package duke.exception;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"random689"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"random689"},"content":" * Used to handle any errors in Duke","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"random689"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"random689"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"random689"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"random689"},"content":"     * Constructor for the Error","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"random689"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"random689"},"content":"    protected DukeException() {","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"random689"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"random689"},"content":"     * Constructor for the Error with the return message","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"random689"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"random689"},"content":"     * @param message Message to be printed out to the users","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"random689"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"random689"},"content":"    public DukeException(String message) {","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"random689"},"content":"        super(message);","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"random689"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"random689":22}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"random689"},"content":"package duke.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"random689"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"random689"},"content":" * Deadline Class to handle Deadline Tasks","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"random689"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"random689"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"random689"},"content":"    protected String dueDate;","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"random689"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"random689"},"content":"     * Constructor for Deadline Class","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"random689"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"random689"},"content":"     * @param name    name of the task","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"random689"},"content":"     * @param dueDate Due date of the task. Can be Date or Date/Time","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"random689"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"random689"},"content":"    public Deadline(String name, String dueDate) {","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"random689"},"content":"        super(name);","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"random689"},"content":"        this.dueDate \u003d TaskTime.convertDateTimeFormat(dueDate);","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"random689"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"random689"},"content":"     * Returns the string to be written in the txt file","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"random689"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"random689"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"random689"},"content":"    public String write() {","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"random689"},"content":"        return \"D \" + super.write() + \" | \" + this.dueDate;","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"random689"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"random689"},"content":"     * Returns the task for the list format","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"random689"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"random689"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":32,"author":{"gitId":"random689"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":33,"author":{"gitId":"random689"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + this.dueDate + \")\";","lastModifiedDate":"2021-08-18"},{"lineNumber":34,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":35,"author":{"gitId":"random689"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"random689":35}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"random689"},"content":"package duke.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"random689"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"random689"},"content":" * Event Class to handle event tasks","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"random689"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"random689"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"random689"},"content":"    protected String eventTime;","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"random689"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"random689"},"content":"     * Constructor for the event class","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"random689"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"random689"},"content":"     * @param name      Name of the event Task","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"random689"},"content":"     * @param eventTime Date or Date and Time for the event Task","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"random689"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"random689"},"content":"    public Event(String name, String eventTime) { //Event class to handle Event task","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"random689"},"content":"        super(name);","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"random689"},"content":"        this.eventTime \u003d TaskTime.convertDateTimeFormat(eventTime);","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"random689"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"random689"},"content":"     * Returns the string to be written in the txt file","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"random689"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"random689"},"content":"     * @return txt format of the task","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"random689"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"random689"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"random689"},"content":"    public String write() {","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"random689"},"content":"        return \"E \" + super.write() + \" | \" + this.eventTime;","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"random689"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"random689"},"content":"     * Returns the list format of the task","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"random689"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"random689"},"content":"     * @return list format of the task","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"random689"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"random689"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":36,"author":{"gitId":"random689"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":37,"author":{"gitId":"random689"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + this.eventTime + \")\";","lastModifiedDate":"2021-08-18"},{"lineNumber":38,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":39,"author":{"gitId":"random689"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"random689":39}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"random689"},"content":"package duke.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"random689"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"random689"},"content":" * Base Task class","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"random689"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"random689"},"content":"public class Task { //Base Task Class","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"random689"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"random689"},"content":"    private final String name;","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"random689"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"random689"},"content":"     * Constructor of Task class","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"random689"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"random689"},"content":"     * @param name Name of Task","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"random689"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"random689"},"content":"    public Task(String name) {","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"random689"},"content":"        this.name \u003d name;","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"random689"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"random689"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"random689"},"content":"     * Marks the task as done when called and return it","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"random689"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"random689"},"content":"    public String done() {","lastModifiedDate":"2021-08-18"},{"lineNumber":24,"author":{"gitId":"random689"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-08-18"},{"lineNumber":25,"author":{"gitId":"random689"},"content":"        return this.toString();","lastModifiedDate":"2021-08-18"},{"lineNumber":26,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":27,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":28,"author":{"gitId":"random689"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"random689"},"content":"     * Checks if the task is already completed","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"random689"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"random689"},"content":"     * @return if the task has been completed","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"random689"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"random689"},"content":"    public boolean isDone() {","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"random689"},"content":"        return this.isDone;","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"random689"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"random689"},"content":"     * Returns the string to be written in the txt file","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"random689"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"random689"},"content":"     * @return txt format of the task","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"random689"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"random689"},"content":"    public String write() {","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"random689"},"content":"        if (this.isDone) {","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"random689"},"content":"            return \"| 1 | \" + this.name;","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"random689"},"content":"        } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"random689"},"content":"            return \"| 0 | \" + this.name;","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"random689"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"random689"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"random689"},"content":"     * Returns the name of the task","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"random689"},"content":"     * @return name of the task","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"random689"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"random689"},"content":"    public String getName() {","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"random689"},"content":"        return this.name;","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"random689"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"random689"},"content":"     * Returns the task as String","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"random689"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"random689"},"content":"     * @return list format of the task","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"random689"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"random689"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":64,"author":{"gitId":"random689"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":65,"author":{"gitId":"random689"},"content":"        if (this.isDone) {","lastModifiedDate":"2021-08-18"},{"lineNumber":66,"author":{"gitId":"random689"},"content":"            return \"[X] \" + this.name;","lastModifiedDate":"2021-08-18"},{"lineNumber":67,"author":{"gitId":"random689"},"content":"        } else {","lastModifiedDate":"2021-08-18"},{"lineNumber":68,"author":{"gitId":"random689"},"content":"            return \"[ ] \" + this.name;","lastModifiedDate":"2021-08-18"},{"lineNumber":69,"author":{"gitId":"random689"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":70,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":71,"author":{"gitId":"random689"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"random689":71}},{"path":"src/main/java/duke/task/TaskTime.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"random689"},"content":"package duke.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"random689"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"random689"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"random689"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"random689"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"random689"},"content":" * TaskTime Class to handle date time formatting","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"random689"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"random689"},"content":"public class TaskTime { //TaskTime used to handle the timings","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"random689"},"content":"    private static final DateTimeFormatter DATE_FORMAT \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy\");","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"random689"},"content":"    private static final DateTimeFormatter TIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"hhmma\");","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"random689"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"random689"},"content":"     * Converts a fixed input of YYYY-MM-DD and HH:MM to MMM dd yyyy and hhmma","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"random689"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"random689"},"content":"     * @param inputTime String of input date or date AND time in YYY-MM-DD and HH:MM","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"random689"},"content":"     * @return Time in the converted format","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"random689"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"random689"},"content":"    public static String convertDateTimeFormat(String inputTime) {","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"random689"},"content":"        String[] split \u003d inputTime.split(\" \");","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"random689"},"content":"        LocalDate date \u003d LocalDate.parse(split[0].trim());","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"random689"},"content":"        if (split.length \u003d\u003d 1) {","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"random689"},"content":"            return date.format(DATE_FORMAT);","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"random689"},"content":"        } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"random689"},"content":"            LocalTime time \u003d LocalTime.parse(split[1].trim());","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"random689"},"content":"            return date.format(DATE_FORMAT) + \" \" + time.format(TIME_FORMAT);","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"random689"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"random689"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"random689"},"content":"     * Converts a fixed input of MMM dd yyyy and hhmma to YYY-MM-DD and HH:MM","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"random689"},"content":"     * Used for reading an already made txt file","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"random689"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"random689"},"content":"     * @param inputTime String of input date or date AND time in MMM dd yyyy and hhmma","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"random689"},"content":"     * @return Time in the converted format","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"random689"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"random689"},"content":"    public static String unconvertDateTime(String inputTime) {","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"random689"},"content":"        String dateString \u003d inputTime.substring(0, 11);","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"random689"},"content":"        String timeString \u003d inputTime.substring(11);","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"random689"},"content":"        LocalDate date \u003d LocalDate.parse(dateString.trim(), DATE_FORMAT);","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"random689"},"content":"        if (timeString.equals(\"\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"random689"},"content":"            return date.toString();","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"random689"},"content":"        } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"random689"},"content":"            LocalTime time \u003d LocalTime.parse(timeString.trim(), TIME_FORMAT);","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"random689"},"content":"            return date.toString() + \" \" + time.toString();","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"random689"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"random689"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"random689":49}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"random689"},"content":"package duke.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"random689"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"random689"},"content":" * Todo Task to handle todo Tasks","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"random689"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"random689"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"random689"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"random689"},"content":"     * Constructor class for toDo Task","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"random689"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"random689"},"content":"     * @param name The name of the task","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"random689"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"random689"},"content":"    public Todo(String name) {","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"random689"},"content":"        super(name);","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"random689"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"random689"},"content":"     * Returns the string to be written in the txt file","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"random689"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"random689"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"random689"},"content":"    public String write() {","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"random689"},"content":"        return \"T \" + super.write();","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"random689"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"random689"},"content":"     * Returns the list format of the task","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"random689"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"random689"},"content":"     * @return list format of the task","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"random689"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"random689"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":31,"author":{"gitId":"random689"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":32,"author":{"gitId":"random689"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2021-08-18"},{"lineNumber":33,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":34,"author":{"gitId":"random689"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"random689":34}},{"path":"src/main/java/duke/ui/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"random689"},"content":"package duke.ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"random689"},"content":"import duke.command.AddCommand;","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"random689"},"content":"import duke.command.Command;","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"random689"},"content":"import duke.command.DeleteCommand;","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"random689"},"content":"import duke.command.DoneCommand;","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"random689"},"content":"import duke.command.ExitCommand;","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"random689"},"content":"import duke.command.FindCommand;","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"random689"},"content":"import duke.command.ListCommand;","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"random689"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"random689"},"content":"public class Parser { //The Parser to handle the inputs from the terminal","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"random689"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"random689"},"content":"     * The below function converts the input to the proper command and returns an error if the input is not valid","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"random689"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"random689"},"content":"     * @param input User input","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"random689"},"content":"     * @return the new Command","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"random689"},"content":"     * @throws DukeException If the input is not of the right format","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"random689"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"random689"},"content":"    public static Command parse(String input) throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"random689"},"content":"        int spaceIndex \u003d input.indexOf(\" \");","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"random689"},"content":"        String command;","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"random689"},"content":"        String details;","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"random689"},"content":"        if (spaceIndex \u003d\u003d -1) {","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"random689"},"content":"            command \u003d input;","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"random689"},"content":"            details \u003d null;","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"random689"},"content":"        } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"random689"},"content":"            command \u003d input.substring(0, spaceIndex).trim();","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"random689"},"content":"            details \u003d input.substring(spaceIndex).trim();","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"random689"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"random689"},"content":"        switch (command) {","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"random689"},"content":"        case \"bye\":","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"random689"},"content":"            return new ExitCommand();","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"random689"},"content":"        case \"todo\":","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"random689"},"content":"            return new AddCommand(command, details);","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"random689"},"content":"        case \"deadline\":","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"random689"},"content":"            return new AddCommand(command, details);","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"random689"},"content":"        case \"event\":","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"random689"},"content":"            return new AddCommand(command, details);","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"random689"},"content":"        case \"done\":","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"random689"},"content":"            return new DoneCommand(details);","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"random689"},"content":"        case \"list\":","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"random689"},"content":"            return new ListCommand();","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"random689"},"content":"        case \"delete\":","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"random689"},"content":"            return new DeleteCommand(details);","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"random689"},"content":"        case \"find\":","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"random689"},"content":"            return new FindCommand(details);","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"random689"},"content":"        default:","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"random689"},"content":"            throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"random689"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"random689"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"random689":61}},{"path":"src/main/java/duke/ui/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"random689"},"content":"package duke.ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"random689"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"random689"},"content":"import java.io.BufferedWriter;","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"random689"},"content":"import java.io.File;","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"random689"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"random689"},"content":"import java.io.FileReader;","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"random689"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"random689"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"random689"},"content":"import java.nio.file.Files;","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"random689"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"random689"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"random689"},"content":"public class Storage { //Storage class used to handle the writing of the file after each actions","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"random689"},"content":"    private static Path txtPath;","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"random689"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"random689"},"content":"     * Constructor for Storage Class","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"random689"},"content":"     * @param path the filepath where the txt file will be/is created","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"random689"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"random689"},"content":"    public Storage(String path) {","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"random689"},"content":"        Path filePath \u003d Paths.get(path);","lastModifiedDate":"2021-09-01"},{"lineNumber":23,"author":{"gitId":"random689"},"content":"        if (!Files.exists(filePath)) {","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"random689"},"content":"            new File(filePath.toString()).mkdirs();","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"random689"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"random689"},"content":"        txtPath \u003d Paths.get(path, \"task.txt\");","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"random689"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"random689"},"content":"     * Function to read the existing txt file if a previous one was already made","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"random689"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"random689"},"content":"     * @return the BufferedReader to read the file","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"random689"},"content":"     * @throws FileNotFoundException Handles if the files was not there previously, meaning need make new file","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"random689"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"random689"},"content":"    public BufferedReader load() throws FileNotFoundException {","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"random689"},"content":"        return new BufferedReader(new FileReader(txtPath.toString()));","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"random689"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"random689"},"content":"     * function to update the text each time after any new action is done","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"random689"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"random689"},"content":"     * @param listArray The list of tasks that the bot is using","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"random689"},"content":"     * @throws IOException handles if the filepath/file has issues","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"random689"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"random689"},"content":"    public static void updateText(TaskList listArray) throws IOException {","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"random689"},"content":"        BufferedWriter botList \u003d new BufferedWriter(","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"random689"},"content":"                new FileWriter(txtPath.toString()));","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"random689"},"content":"        for (int i \u003d 0; i \u003c listArray.getCount(); i++) {","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"random689"},"content":"            botList.write(listArray.get(i).write() + \"\\n\");","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"random689"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"random689"},"content":"        botList.close();","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"random689"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"random689":54}},{"path":"src/main/java/duke/ui/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"random689"},"content":"package duke.ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"random689"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"random689"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"random689"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"random689"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"random689"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"random689"},"content":"import duke.task.Event;","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"random689"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"random689"},"content":"import duke.task.TaskTime;","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"random689"},"content":"import duke.task.Todo;","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"random689"},"content":"public class TaskList { //TaskList class used to store the tasks and will be updated from the Command class","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"random689"},"content":"    protected int count;","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"random689"},"content":"    private final ArrayList\u003cTask\u003e listArray;","lastModifiedDate":"2021-09-01"},{"lineNumber":17,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"random689"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"random689"},"content":"     * Constructor for TaskList","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"random689"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"random689"},"content":"    public TaskList() {","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"random689"},"content":"        this.listArray \u003d new ArrayList\u003cTask\u003e(100);","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"random689"},"content":"        this.count \u003d 0;","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"random689"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"random689"},"content":"     * Constructor, Creates the tasklist from the existing file","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"random689"},"content":"     * @param file Input exisiting file","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"random689"},"content":"     * @throws IOException Catches if the filepath or file has issue","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"random689"},"content":"     * @throws DukeException Catches if the file content is incorrect to be parsed","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"random689"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"random689"},"content":"    public TaskList(BufferedReader file) throws IOException, DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"random689"},"content":"        String line \u003d file.readLine();","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"random689"},"content":"        this.listArray \u003d new ArrayList\u003cTask\u003e(100);","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"random689"},"content":"        this.count \u003d 0;","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"random689"},"content":"        while (line !\u003d null) {","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"random689"},"content":"            listArray.add(parseLine(line));","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"random689"},"content":"            count++;","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"random689"},"content":"            line \u003d file.readLine();","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"random689"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"random689"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"random689"},"content":"     * Parses each line of the file and creates the task accordingly","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"random689"},"content":"     * @param line input line of file","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"random689"},"content":"     * @return the tasks for the constructor","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"random689"},"content":"     * @throws DukeException if the file content is not of the right format to be parsed","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"random689"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"random689"},"content":"    public Task parseLine(String line) throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"random689"},"content":"        String[] splits;","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"random689"},"content":"        Task t;","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"random689"},"content":"        splits \u003d line.split(\" \\\\| \");","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"random689"},"content":"        switch (splits[0]) {","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"random689"},"content":"        case \"D\":","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"random689"},"content":"            t \u003d new Deadline(splits[2], TaskTime.unconvertDateTime(splits[3]));","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"random689"},"content":"            if (splits[1].equals(\"1\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"random689"},"content":"                t.done();","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"random689"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"random689"},"content":"            break;","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"random689"},"content":"        case \"E\":","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"random689"},"content":"            t \u003d new Event(splits[2], TaskTime.unconvertDateTime(splits[3]));","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"random689"},"content":"            if (splits[1].equals(\"1\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"random689"},"content":"                t.done();","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"random689"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"random689"},"content":"            break;","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"random689"},"content":"        case \"T\":","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"random689"},"content":"            t \u003d new Todo(splits[2]);","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"random689"},"content":"            if (splits[1].equals(\"1\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"random689"},"content":"                t.done();","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"random689"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"random689"},"content":"            break;","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"random689"},"content":"        default:","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"random689"},"content":"            throw new DukeException(\"Your file is invalid\");","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"random689"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":76,"author":{"gitId":"random689"},"content":"        return t;","lastModifiedDate":"2021-08-25"},{"lineNumber":77,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":78,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":79,"author":{"gitId":"random689"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":80,"author":{"gitId":"random689"},"content":"     * Add the tasks to the list","lastModifiedDate":"2021-08-25"},{"lineNumber":81,"author":{"gitId":"random689"},"content":"     * @param t task to be added","lastModifiedDate":"2021-08-25"},{"lineNumber":82,"author":{"gitId":"random689"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":83,"author":{"gitId":"random689"},"content":"    public void add(Task t) {","lastModifiedDate":"2021-08-25"},{"lineNumber":84,"author":{"gitId":"random689"},"content":"        this.listArray.add(count++, t);","lastModifiedDate":"2021-08-25"},{"lineNumber":85,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":86,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":87,"author":{"gitId":"random689"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":88,"author":{"gitId":"random689"},"content":"     * Gets the task at the given index","lastModifiedDate":"2021-08-25"},{"lineNumber":89,"author":{"gitId":"random689"},"content":"     * @param i the index to get the task from","lastModifiedDate":"2021-08-25"},{"lineNumber":90,"author":{"gitId":"random689"},"content":"     * @return the task","lastModifiedDate":"2021-08-25"},{"lineNumber":91,"author":{"gitId":"random689"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":92,"author":{"gitId":"random689"},"content":"    public Task get(int i) {","lastModifiedDate":"2021-08-25"},{"lineNumber":93,"author":{"gitId":"random689"},"content":"        return this.listArray.get(i);","lastModifiedDate":"2021-08-25"},{"lineNumber":94,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":95,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":96,"author":{"gitId":"random689"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":97,"author":{"gitId":"random689"},"content":"     * Gets the number of task in the list","lastModifiedDate":"2021-08-25"},{"lineNumber":98,"author":{"gitId":"random689"},"content":"     * @return the number of task in the list","lastModifiedDate":"2021-08-25"},{"lineNumber":99,"author":{"gitId":"random689"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":100,"author":{"gitId":"random689"},"content":"    public int getCount() {","lastModifiedDate":"2021-08-25"},{"lineNumber":101,"author":{"gitId":"random689"},"content":"        return count;","lastModifiedDate":"2021-08-25"},{"lineNumber":102,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":103,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":104,"author":{"gitId":"random689"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":105,"author":{"gitId":"random689"},"content":"     * Deletes the task at the given index","lastModifiedDate":"2021-08-25"},{"lineNumber":106,"author":{"gitId":"random689"},"content":"     * @param i the index that the task to be deleted is at","lastModifiedDate":"2021-08-25"},{"lineNumber":107,"author":{"gitId":"random689"},"content":"     * @return the deleted task","lastModifiedDate":"2021-08-25"},{"lineNumber":108,"author":{"gitId":"random689"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":109,"author":{"gitId":"random689"},"content":"    public Task delete(int i) {","lastModifiedDate":"2021-08-25"},{"lineNumber":110,"author":{"gitId":"random689"},"content":"        this.count--;","lastModifiedDate":"2021-08-25"},{"lineNumber":111,"author":{"gitId":"random689"},"content":"        return this.listArray.remove(i);","lastModifiedDate":"2021-08-25"},{"lineNumber":112,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":113,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":114,"author":{"gitId":"random689"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":115,"author":{"gitId":"random689"},"content":"     * Searches the list for any task with the given string","lastModifiedDate":"2021-08-25"},{"lineNumber":116,"author":{"gitId":"random689"},"content":"     * @param string Input string pattern to find","lastModifiedDate":"2021-08-25"},{"lineNumber":117,"author":{"gitId":"random689"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":118,"author":{"gitId":"random689"},"content":"    public void searchList(String string) {","lastModifiedDate":"2021-08-25"},{"lineNumber":119,"author":{"gitId":"random689"},"content":"        int newCount \u003d 0;","lastModifiedDate":"2021-08-25"},{"lineNumber":120,"author":{"gitId":"random689"},"content":"        for (int i \u003d 0; i \u003c count; i++) {","lastModifiedDate":"2021-08-25"},{"lineNumber":121,"author":{"gitId":"random689"},"content":"            if (listArray.get(i).getName().contains(string)) {","lastModifiedDate":"2021-08-25"},{"lineNumber":122,"author":{"gitId":"random689"},"content":"                System.out.println(++newCount + \". \" + listArray.get(i));","lastModifiedDate":"2021-08-25"},{"lineNumber":123,"author":{"gitId":"random689"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":124,"author":{"gitId":"random689"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":125,"author":{"gitId":"random689"},"content":"        if (newCount \u003d\u003d 0) {","lastModifiedDate":"2021-08-25"},{"lineNumber":126,"author":{"gitId":"random689"},"content":"            System.out.println(\"Oh no! Seems like there was no match for your search\");","lastModifiedDate":"2021-08-25"},{"lineNumber":127,"author":{"gitId":"random689"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":128,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":129,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":130,"author":{"gitId":"random689"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":131,"author":{"gitId":"random689"},"content":"     * Returns the list of task for the user","lastModifiedDate":"2021-08-25"},{"lineNumber":132,"author":{"gitId":"random689"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":133,"author":{"gitId":"random689"},"content":"    public void printList() {","lastModifiedDate":"2021-08-25"},{"lineNumber":134,"author":{"gitId":"random689"},"content":"        if (count \u003d\u003d 0) {","lastModifiedDate":"2021-08-25"},{"lineNumber":135,"author":{"gitId":"random689"},"content":"            //When the list is empty","lastModifiedDate":"2021-08-25"},{"lineNumber":136,"author":{"gitId":"random689"},"content":"            System.out.println(\"The list is empty!\");","lastModifiedDate":"2021-08-25"},{"lineNumber":137,"author":{"gitId":"random689"},"content":"        } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":138,"author":{"gitId":"random689"},"content":"            for (int i \u003d 0; i \u003c count; i++) {","lastModifiedDate":"2021-08-25"},{"lineNumber":139,"author":{"gitId":"random689"},"content":"                System.out.println(i + 1 + \". \" + listArray.get(i));","lastModifiedDate":"2021-08-25"},{"lineNumber":140,"author":{"gitId":"random689"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":141,"author":{"gitId":"random689"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":142,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":143,"author":{"gitId":"random689"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"random689":143}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"random689"},"content":"package duke.ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"random689"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"random689"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"random689"},"content":"public class Ui { //IU Class used to handle the interactions with the user.","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"random689"},"content":"    private final Scanner sc;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"random689"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"random689"},"content":"     * Constructor for the Ui class","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"random689"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"random689"},"content":"    public Ui() {","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"random689"},"content":"        this.sc \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"random689"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"random689"},"content":"     * Calls the welcome Message for Duke","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"random689"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"random689"},"content":"    public void showWelcome() {","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"random689"},"content":"        String logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"random689"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"random689"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"random689"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"random689"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"random689"},"content":"        System.out.println(\"Hello from\\n\" + logo);","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"random689"},"content":"        System.out.println(\"Hello! I\u0027m Duke\\n\" + \"What can I do for you?\\n\");","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"random689"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"random689"},"content":"     * Calls the goodbye message for Duke","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"random689"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"random689"},"content":"    public void showGoodBye() {","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"random689"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"random689"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"random689"},"content":"     * Calls the divider line","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"random689"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"random689"},"content":"    public void showLine() {","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"random689"},"content":"        System.out.println(\"_______________\");","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"random689"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"random689"},"content":"     * Calls the message to inform the user that the task has been added successfully","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"random689"},"content":"     * @param taskList List of tasks","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"random689"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"random689"},"content":"    public void showAddedMessage(TaskList taskList) {","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"random689"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"random689"},"content":"        System.out.println(\"  \" + (taskList.get(taskList.getCount() - 1)));","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"random689"},"content":"        System.out.println(\"Now you have \" + taskList.getCount() + \" in the list.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"random689"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"random689"},"content":"     * Reads the input by the user and returns it for the parser","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"random689"},"content":"     * @return the input by the user","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"random689"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"random689"},"content":"    public String readCommand() {","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"random689"},"content":"        return sc.nextLine();","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"random689"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"random689"},"content":"     * Prints the list of task for the users","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"random689"},"content":"     * @param taskList Takes in the current list of tasks","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"random689"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"random689"},"content":"    public static void printList(TaskList taskList) {","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"random689"},"content":"        taskList.printList();","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"random689"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"random689"},"content":"     * Prints the list of task for the users with the pattern in the task name","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"random689"},"content":"     * @param taskList List of tasks","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"random689"},"content":"     * @param pattern pattern to be searched","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"random689"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"random689"},"content":"    public static void searchList(TaskList taskList, String pattern) {","lastModifiedDate":"2021-08-25"},{"lineNumber":76,"author":{"gitId":"random689"},"content":"        taskList.searchList(pattern);","lastModifiedDate":"2021-08-25"},{"lineNumber":77,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":78,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":79,"author":{"gitId":"random689"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":80,"author":{"gitId":"random689"},"content":"     * Prints the done Message to inform the user that the task has been marked as done","lastModifiedDate":"2021-08-25"},{"lineNumber":81,"author":{"gitId":"random689"},"content":"     * @param msg  task\u0027s message when marked as done","lastModifiedDate":"2021-08-25"},{"lineNumber":82,"author":{"gitId":"random689"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":83,"author":{"gitId":"random689"},"content":"    public static void doneMessage(String msg) {","lastModifiedDate":"2021-08-25"},{"lineNumber":84,"author":{"gitId":"random689"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2021-08-25"},{"lineNumber":85,"author":{"gitId":"random689"},"content":"        System.out.println(\"  \" + msg);","lastModifiedDate":"2021-08-25"},{"lineNumber":86,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":87,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":88,"author":{"gitId":"random689"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":89,"author":{"gitId":"random689"},"content":"     * Prints the delete message to inform the user that the task has been deleted properly","lastModifiedDate":"2021-08-25"},{"lineNumber":90,"author":{"gitId":"random689"},"content":"     * @param task Task to be deleted","lastModifiedDate":"2021-08-25"},{"lineNumber":91,"author":{"gitId":"random689"},"content":"     * @param index The number of tasks that remains in the list","lastModifiedDate":"2021-08-25"},{"lineNumber":92,"author":{"gitId":"random689"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":93,"author":{"gitId":"random689"},"content":"    public static void deleteMessage(Task task, int index) {","lastModifiedDate":"2021-08-25"},{"lineNumber":94,"author":{"gitId":"random689"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2021-08-25"},{"lineNumber":95,"author":{"gitId":"random689"},"content":"        System.out.println(\"  \" + task);","lastModifiedDate":"2021-08-25"},{"lineNumber":96,"author":{"gitId":"random689"},"content":"        System.out.println(\"Now you have \" + index + \" in the list.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":97,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":98,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":99,"author":{"gitId":"random689"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":100,"author":{"gitId":"random689"},"content":"     * Prints the error to inform the user that their file format is incorrect","lastModifiedDate":"2021-08-25"},{"lineNumber":101,"author":{"gitId":"random689"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":102,"author":{"gitId":"random689"},"content":"    public static void showLoadingError() {","lastModifiedDate":"2021-08-25"},{"lineNumber":103,"author":{"gitId":"random689"},"content":"        System.out.println(\"☹ OOPS!!! It seems like your file format is incorrect!\");","lastModifiedDate":"2021-08-25"},{"lineNumber":104,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":105,"author":{"gitId":"random689"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"random689":105}},{"path":"src/test/java/duke/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"random689"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"random689"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"random689"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"random689"},"content":"public class DukeTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"random689"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"random689"},"content":"    public void dummyTest() {","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"random689"},"content":"        assertEquals(2, 2);","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"random689"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"random689":13}},{"path":"src/test/java/duke/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"random689"},"content":"package duke.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"random689"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"random689"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"random689"},"content":"public class DeadlineTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"random689"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"random689"},"content":"    public void test1() {","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"random689"},"content":"        assertEquals(\"[D][ ] Test Deadline (by: Oct 10 2020 0500PM)\" ,","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"random689"},"content":"                new Deadline(\"Test Deadline\", \"2020-10-10 17:00\").toString());","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"random689"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"random689"},"content":"    public void test2() {","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"random689"},"content":"        assertEquals(\"D | 0 | Test Deadline | Oct 10 2020\" ,","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"random689"},"content":"                new Deadline(\"Test Deadline\", \"2020-10-10\").write());","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"random689"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"random689"},"content":"    public void test3() {","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"random689"},"content":"        assertEquals(\"[D][X] Test Deadline (by: Nov 10 2021 0900PM)\" ,","lastModifiedDate":"2021-09-01"},{"lineNumber":24,"author":{"gitId":"random689"},"content":"                new Deadline(\"Test Deadline\", \"2021-11-10 21:00\").done());","lastModifiedDate":"2021-09-01"},{"lineNumber":25,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"random689"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"random689":26}},{"path":"src/test/java/duke/task/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"random689"},"content":"package duke.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"random689"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"random689"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"random689"},"content":"public class EventTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"random689"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"random689"},"content":"    public void test1() {","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"random689"},"content":"        assertEquals(\"[E][X] Celebrate End of uni (at: Oct 10 2020 0500PM)\" ,","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"random689"},"content":"                new Event(\"Celebrate End of uni\", \"2020-10-10 17:00\").done());","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"random689"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"random689"},"content":"    public void test2() {","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"random689"},"content":"        assertEquals(\"E | 0 | Adopt kat | Oct 10 2020\" ,","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"random689"},"content":"                new Event(\"Adopt kat\", \"2020-10-10\").write());","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"random689"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"random689"},"content":"    public void test3() {","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"random689"},"content":"        assertEquals(\"[E][ ] Slap brother (at: Jan 10 2021 0900PM)\" ,","lastModifiedDate":"2021-09-01"},{"lineNumber":24,"author":{"gitId":"random689"},"content":"                new Event(\"Slap brother\", \"2021-01-10 21:00\").toString());","lastModifiedDate":"2021-09-01"},{"lineNumber":25,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"random689"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"random689":26}},{"path":"src/test/java/duke/task/TaskTimeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"random689"},"content":"package duke.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"random689"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"random689"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"random689"},"content":"public class TaskTimeTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"random689"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"random689"},"content":"    public void testA1() {","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"random689"},"content":"        assertEquals(\"Oct 10 2020\", TaskTime.convertDateTimeFormat(\"2020-10-10\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"random689"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"random689"},"content":"    public void testA2() {","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"random689"},"content":"        assertEquals(\"Oct 10 2020 0600PM\", TaskTime.convertDateTimeFormat(\"2020-10-10 18:00\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"random689"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"random689"},"content":"    public void testB1() {","lastModifiedDate":"2021-09-01"},{"lineNumber":21,"author":{"gitId":"random689"},"content":"        assertEquals(\"2021-10-10\", TaskTime.unconvertDateTime(\"Oct 10 2021\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"random689"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"random689"},"content":"    public void testB2() {","lastModifiedDate":"2021-09-01"},{"lineNumber":26,"author":{"gitId":"random689"},"content":"        assertEquals(\"2020-10-10 17:00\", TaskTime.unconvertDateTime(\"Oct 10 2020 0500PM\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"random689"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"random689":28}},{"path":"src/test/java/duke/task/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"random689"},"content":"package duke.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"random689"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"random689"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"random689"},"content":"public class TodoTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"random689"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"random689"},"content":"    public void test1() {","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"random689"},"content":"        assertEquals(\"[T][ ] Test Deadline\", new Todo(\"Test Deadline\").toString());","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"random689"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"random689"},"content":"    public void test2() {","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"random689"},"content":"        assertEquals(\"T | 0 | Check Mate\", new Todo(\"Check Mate\").write());","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"random689"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"random689"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"random689"},"content":"    public void test3() {","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"random689"},"content":"        assertEquals(\"[T][X] Do 2103\", new Todo(\"Do 2103\").done());","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"random689"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"random689"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"random689":23}},{"path":"text-ui-test/data/task.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"random689"},"content":"D | 0 | return book | Aug 25 2021 0600PM","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"random689"},"content":"E | 1 | project meeting | Aug 27 2021 1000PM","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"random689"},"content":"E | 0 | project meeting | Aug 20 2021 0100AM","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"random689":3}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"random689"},"content":"event project meeting","lastModifiedDate":"2021-08-18"},{"lineNumber":2,"author":{"gitId":"random689"},"content":"deadline feed cats","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"random689"},"content":"todo borrow book","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"random689"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"random689"},"content":"deadline return book /by 2021-08-25 18:00","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"random689"},"content":"event project meeting /at 2021-08-27 22:00","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"random689"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"random689"},"content":"random","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"random689"},"content":"done 1","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"random689"},"content":"done 3","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"random689"},"content":"delete 1","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"random689"},"content":"todo find cats","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"random689"},"content":"delete 3","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"random689"},"content":"event project meeting /at 2021-08-20 01:00","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"random689"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"random689"},"content":"bye","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"random689":16}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"random689"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"random689":1,"-":20}}]

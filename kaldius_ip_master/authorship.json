[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"kaldius"},"content":"# duke.Duke project template","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"kaldius"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"kaldius":2,"-":22}},{"path":"src/main/java/Command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaldius"},"content":"package Command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"kaldius"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"kaldius"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"kaldius"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"kaldius"},"content":"import exceptions.DukeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"kaldius"},"content":"import exceptions.NoSuchCommandException;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"kaldius"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"kaldius"},"content":" * Abstract class for all Commands to extend from.","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"kaldius"},"content":" *","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"kaldius"},"content":" * @author Quan Teng Foong","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"kaldius"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"kaldius"},"content":"public abstract class Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"kaldius"},"content":"    private final String extraInput;","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"kaldius"},"content":"    public Command(String extraInput) {","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"kaldius"},"content":"        this.extraInput \u003d extraInput;","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"kaldius"},"content":"    public Command() {","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"kaldius"},"content":"        this.extraInput \u003d \"\";","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"kaldius"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"kaldius"},"content":"     * Factory method to return the appropriate command for the given strings.","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"kaldius"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"kaldius"},"content":"     * @param command command name","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"kaldius"},"content":"     * @param extraInput further details","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"kaldius"},"content":"     * @return a Command object that encapsulates the necessary actions.","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"kaldius"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"kaldius"},"content":"    public static Command of(String command, String extraInput) throws NoSuchCommandException {","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"kaldius"},"content":"        switch(command) {","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"kaldius"},"content":"        case \"bye\":","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"kaldius"},"content":"            return new SaveAndExitCommand();","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"kaldius"},"content":"        case \"list\":","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"kaldius"},"content":"            return new ShowListCommand();","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"kaldius"},"content":"        case \"done\":","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"kaldius"},"content":"            return new TaskCompletedCommand(extraInput);","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"kaldius"},"content":"        case \"delete\":","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"kaldius"},"content":"            return new DeleteTaskCommand(extraInput);","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"kaldius"},"content":"        case \"find\":","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"kaldius"},"content":"            return new SearchCommand(extraInput);","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"kaldius"},"content":"        case \"todo\":","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"kaldius"},"content":"            return new CreateNewToDoCommand(extraInput);","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"kaldius"},"content":"        case \"event\":","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"kaldius"},"content":"            return new CreateNewEventCommand(extraInput);","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"kaldius"},"content":"        case \"deadline\":","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"kaldius"},"content":"            return new CreateNewDeadlineCommand(extraInput);","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"kaldius"},"content":"        default:","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"kaldius"},"content":"            throw new NoSuchCommandException(\"No such command!\");","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"kaldius"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"kaldius"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"kaldius"},"content":"     * Returns the extra input field for further action by the command.","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"kaldius"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"kaldius"},"content":"     * @return extraInput String","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"kaldius"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"kaldius"},"content":"    public String getExtraInput() {","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"kaldius"},"content":"        return this.extraInput;","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"kaldius"},"content":"    public abstract void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"kaldius"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"kaldius"},"content":"        return false;","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"kaldius"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"kaldius":70}},{"path":"src/main/java/Command/CreateNewDeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaldius"},"content":"package Command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"kaldius"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"kaldius"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"kaldius"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"kaldius"},"content":"import tasks.Deadline;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"kaldius"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"kaldius"},"content":" * Command to create a new Deadline task.","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"kaldius"},"content":" *","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"kaldius"},"content":" * @author Quan Teng Foong","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"kaldius"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"kaldius"},"content":"public class CreateNewDeadlineCommand extends Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"kaldius"},"content":"    public CreateNewDeadlineCommand(String message) {","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"kaldius"},"content":"        super(message);","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"kaldius"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"kaldius"},"content":"     * Adds a new Deadline task to the task list.","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"kaldius"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"kaldius"},"content":"     * @param taskList the current list of tasks","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"kaldius"},"content":"     * @param ui the user interface object","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"kaldius"},"content":"     * @param storage the storage object","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"kaldius"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"kaldius"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"kaldius"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"kaldius"},"content":"        String[] message_and_endTime \u003d super.getExtraInput().split(\"/by \");","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"kaldius"},"content":"        taskList.add(new Deadline(message_and_endTime[0], message_and_endTime[1]));","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"kaldius"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"kaldius"},"content":"     * Overrides equals method. To be used for JUnit testing.","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"kaldius"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"kaldius"},"content":"     * @param o other object for checking","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"kaldius"},"content":"     * @return true if this instance and o are equal, false otherwise","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"kaldius"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"kaldius"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"kaldius"},"content":"    public boolean equals(Object o) {","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"kaldius"},"content":"        return o instanceof CreateNewDeadlineCommand \u0026\u0026","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"kaldius"},"content":"                super.getExtraInput().equals(((CreateNewDeadlineCommand) o).getExtraInput());","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"kaldius"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"kaldius":43}},{"path":"src/main/java/Command/CreateNewEventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaldius"},"content":"package Command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"kaldius"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"kaldius"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"kaldius"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"kaldius"},"content":"import tasks.Event;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"kaldius"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"kaldius"},"content":" * Command to create a new Event task.","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"kaldius"},"content":" *","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"kaldius"},"content":" * @author Quan Teng Foong","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"kaldius"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"kaldius"},"content":"public class CreateNewEventCommand extends Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"kaldius"},"content":"    public CreateNewEventCommand(String message) {","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"kaldius"},"content":"        super(message);","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"kaldius"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"kaldius"},"content":"     * Adds a new Event task to the task list.","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"kaldius"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"kaldius"},"content":"     * @param taskList the current list of tasks","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"kaldius"},"content":"     * @param ui the user interface object","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"kaldius"},"content":"     * @param storage the storage object","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"kaldius"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"kaldius"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"kaldius"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"kaldius"},"content":"        String[] message_and_eventDate \u003d super.getExtraInput().split(\"/at \");","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"kaldius"},"content":"        taskList.add(new Event(message_and_eventDate[0], message_and_eventDate[1]));","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"kaldius"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"kaldius"},"content":"     * Overrides equals method. To be used for JUnit testing.","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"kaldius"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"kaldius"},"content":"     * @param o other object for checking","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"kaldius"},"content":"     * @return true if this instance and o are equal, false otherwise","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"kaldius"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"kaldius"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"kaldius"},"content":"    public boolean equals(Object o) {","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"kaldius"},"content":"        return o instanceof CreateNewEventCommand \u0026\u0026","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"kaldius"},"content":"                super.getExtraInput().equals(((CreateNewEventCommand) o).getExtraInput());","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"kaldius"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"kaldius":43}},{"path":"src/main/java/Command/CreateNewToDoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaldius"},"content":"package Command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"kaldius"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"kaldius"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"kaldius"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"kaldius"},"content":"import tasks.ToDo;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"kaldius"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"kaldius"},"content":" * Command to create a new ToDo task.","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"kaldius"},"content":" *","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"kaldius"},"content":" * @author Quan Teng Foong","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"kaldius"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"kaldius"},"content":"public class CreateNewToDoCommand extends Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"kaldius"},"content":"    public CreateNewToDoCommand(String message) {","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"kaldius"},"content":"        super(message);","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"kaldius"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"kaldius"},"content":"     * Adds a new ToDo task to the task list.","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"kaldius"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"kaldius"},"content":"     * @param taskList the current list of tasks","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"kaldius"},"content":"     * @param ui the user interface object","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"kaldius"},"content":"     * @param storage the storage object","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"kaldius"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"kaldius"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"kaldius"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"kaldius"},"content":"        taskList.add(new ToDo(super.getExtraInput()));","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"kaldius"},"content":"        ui.showAddedTask(taskList);","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"kaldius"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"kaldius"},"content":"     * Overrides equals method. To be used for JUnit testing.","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"kaldius"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"kaldius"},"content":"     * @param o other object for checking","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"kaldius"},"content":"     * @return true if this instance and o are equal, false otherwise","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"kaldius"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"kaldius"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"kaldius"},"content":"    public boolean equals(Object o) {","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"kaldius"},"content":"        return o instanceof CreateNewToDoCommand \u0026\u0026","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"kaldius"},"content":"                super.getExtraInput().equals(((CreateNewToDoCommand) o).getExtraInput());","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"kaldius"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"kaldius":43}},{"path":"src/main/java/Command/DeleteTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaldius"},"content":"package Command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"kaldius"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"kaldius"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"kaldius"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"kaldius"},"content":"import exceptions.DukeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"kaldius"},"content":"public class DeleteTaskCommand extends Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"kaldius"},"content":"    public DeleteTaskCommand(String taskIndex) {","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"kaldius"},"content":"        super(taskIndex);","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"kaldius"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"kaldius"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"kaldius"},"content":"        taskList.delete(Integer.parseInt(super.getExtraInput()) - 1);","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"kaldius"},"content":"        ui.showDeleteTask(taskList);","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"kaldius"},"content":"        ui.showList(taskList);","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"kaldius"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"kaldius":20}},{"path":"src/main/java/Command/SaveAndExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaldius"},"content":"package Command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"kaldius"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"kaldius"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"kaldius"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"kaldius"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"kaldius"},"content":" * Command executed when user exits the bot.","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"kaldius"},"content":" *","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"kaldius"},"content":" * @author Quan Teng Foong","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"kaldius"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"kaldius"},"content":"public class SaveAndExitCommand extends Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"kaldius"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"kaldius"},"content":"     * Prints a goodbye message.","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"kaldius"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"kaldius"},"content":"     * @param taskList the current list of tasks","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"kaldius"},"content":"     * @param ui the user interface object","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"kaldius"},"content":"     * @param storage the storage object","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"kaldius"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"kaldius"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"kaldius"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"kaldius"},"content":"        ui.goodbye();","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"kaldius"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"kaldius"},"content":"     * Sends true to exit from the while loop in Duke.run()","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"kaldius"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"kaldius"},"content":"     * @return true","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"kaldius"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"kaldius"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"kaldius"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"kaldius"},"content":"        return true;","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"kaldius"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"kaldius":35}},{"path":"src/main/java/Command/SearchCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaldius"},"content":"package Command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"kaldius"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"kaldius"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"kaldius"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"kaldius"},"content":"import exceptions.DukeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"kaldius"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"kaldius"},"content":" * Command to search for a Task matching a search term.","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"kaldius"},"content":" *","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"kaldius"},"content":" * @author Quan Teng Foong","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"kaldius"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"kaldius"},"content":"public class SearchCommand extends Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"kaldius"},"content":"    public SearchCommand(String searchTerm) {","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"kaldius"},"content":"        super(searchTerm);","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"kaldius"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"kaldius"},"content":"     * Searches current TaskList for a search term.","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"kaldius"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"kaldius"},"content":"     * @param taskList the current list of tasks","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"kaldius"},"content":"     * @param ui the user interface object","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"kaldius"},"content":"     * @param storage the storage object","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"kaldius"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"kaldius"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"kaldius"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"kaldius"},"content":"        TaskList matchingTasks \u003d taskList.search(super.getExtraInput());","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"kaldius"},"content":"        ui.showSearchResults(matchingTasks);","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"kaldius"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"kaldius":31}},{"path":"src/main/java/Command/ShowListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaldius"},"content":"package Command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"kaldius"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"kaldius"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"kaldius"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"kaldius"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"kaldius"},"content":" * Command executed when user asks to see the list of tasks.","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"kaldius"},"content":" *","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"kaldius"},"content":" * @author Quan Teng Foong","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"kaldius"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"kaldius"},"content":"public class ShowListCommand extends Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"kaldius"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"kaldius"},"content":"     * Prints the TaskList.","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"kaldius"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"kaldius"},"content":"     * @param taskList the current list of tasks","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"kaldius"},"content":"     * @param ui the user interface object","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"kaldius"},"content":"     * @param storage the storage object","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"kaldius"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"kaldius"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"kaldius"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"kaldius"},"content":"        ui.showList(taskList);","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"kaldius"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"kaldius":25}},{"path":"src/main/java/Command/TaskCompletedCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaldius"},"content":"package Command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"kaldius"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"kaldius"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"kaldius"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"kaldius"},"content":"import exceptions.DukeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"kaldius"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"kaldius"},"content":" * Command to mark a task as complete.","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"kaldius"},"content":" *","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"kaldius"},"content":" * @author Quan Teng Foong","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"kaldius"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"kaldius"},"content":"public class TaskCompletedCommand extends Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"kaldius"},"content":"    public TaskCompletedCommand(String taskIndex) {","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"kaldius"},"content":"        super(taskIndex);","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"kaldius"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"kaldius"},"content":"     * Marks a task as complete.","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"kaldius"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"kaldius"},"content":"     * @param taskList the current list of tasks","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"kaldius"},"content":"     * @param ui the user interface object","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"kaldius"},"content":"     * @param storage the storage object","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"kaldius"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"kaldius"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"kaldius"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"kaldius"},"content":"        taskList.doTask(Integer.parseInt(super.getExtraInput()) - 1);","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"kaldius"},"content":"        ui.showList(taskList);","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"kaldius"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"kaldius":31}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaldius"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"kaldius"},"content":"import Command.Command;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"kaldius"},"content":"import exceptions.DukeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"kaldius"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"kaldius"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"kaldius"},"content":" * Duke is a bot capable of storing a todo list with an interactive interface.","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"kaldius"},"content":" *","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"kaldius"},"content":" * @author Quan Teng Foong","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"kaldius"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":14,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"kaldius"},"content":"    private Storage storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"kaldius"},"content":"    private Ui ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"kaldius"},"content":"    private static TaskList taskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"kaldius"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"kaldius"},"content":"     * Constructor for Duke.","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"kaldius"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"kaldius"},"content":"     * @param filePath the path to access saved tasks/ store tasks upon termination","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"kaldius"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"kaldius"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"kaldius"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"kaldius"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"kaldius"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"kaldius"},"content":"            taskList \u003d new TaskList(storage.retrieve());","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"kaldius"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"kaldius"},"content":"            ui.showError(e.getMessage());","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"kaldius"},"content":"            ui.showList(taskList);","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"kaldius"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"kaldius"},"content":"            ui.showError(e.getMessage());","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"kaldius"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":37,"author":{"gitId":"kaldius"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"kaldius"},"content":"     * Runs a Duke instance.","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"kaldius"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"kaldius"},"content":"    public void run() {","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"kaldius"},"content":"        ui.greet();","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"kaldius"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"kaldius"},"content":"        while (!isExit) {","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"kaldius"},"content":"            try {","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"kaldius"},"content":"                String fullCommand \u003d ui.readCommand();","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"kaldius"},"content":"                Command c \u003d Parser.parse(fullCommand);","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"kaldius"},"content":"                c.execute(taskList, ui, storage);","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"kaldius"},"content":"                isExit \u003d c.isExit();","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"kaldius"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"kaldius"},"content":"                ui.showError(e.getMessage());","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"kaldius"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"kaldius"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"kaldius"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"kaldius"},"content":"            storage.save(taskList);","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"kaldius"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"kaldius"},"content":"            ui.showError(\"ERROR: TaskList could not be saved!\");","lastModifiedDate":"2021-08-24"},{"lineNumber":57,"author":{"gitId":"kaldius"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":59,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"kaldius"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"kaldius"},"content":"        new Duke(\"/storage/save.txt\").run();","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"kaldius":61,"-":2}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaldius"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"kaldius"},"content":"import Command.Command;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"kaldius"},"content":"import exceptions.NoSuchCommandException;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"kaldius"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"kaldius"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"kaldius"},"content":" * The Parser class encapsulates the parsing of user input into commands for Duke.","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"kaldius"},"content":" *","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"kaldius"},"content":" * @author Quan Teng Foong","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"kaldius"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"kaldius"},"content":"public class Parser {","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"kaldius"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"kaldius"},"content":"     * Parses a string of user input into a command and an input string.","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"kaldius"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"kaldius"},"content":"     * @param userInput String input by the user","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"kaldius"},"content":"     * @return a String array holding the command and the input","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"kaldius"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"kaldius"},"content":"    public static Command parse(String userInput) throws NoSuchCommandException {","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"kaldius"},"content":"        Scanner sc \u003d new Scanner(userInput);","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"kaldius"},"content":"        String command \u003d sc.next();","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"kaldius"},"content":"        String input \u003d userInput.replace(command, \"\").strip();","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"kaldius"},"content":"        return Command.of(command, input);","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"kaldius"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"kaldius":26}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaldius"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"kaldius"},"content":"import java.io.File;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"kaldius"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"kaldius"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"kaldius"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"kaldius"},"content":" * The Storage class encapsulates the process of storing and loading files to and from the hard disk.","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"kaldius"},"content":" *","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"kaldius"},"content":" * @author Quan Teng Foong","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"kaldius"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"kaldius"},"content":"public class Storage {","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"kaldius"},"content":"    private final String filePath;","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"kaldius"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"kaldius"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"kaldius"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"kaldius"},"content":"     * Retrieves previously stored data at filePath. If filePath does not exist, an empty file is created.","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"kaldius"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"kaldius"},"content":"     * @return file at filePath","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"kaldius"},"content":"     * @throws IOException if unable to create new file","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"kaldius"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"kaldius"},"content":"    public File retrieve() throws IOException {","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"kaldius"},"content":"        File file \u003d new File(this.filePath);","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"kaldius"},"content":"        if (!file.exists()) {","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"kaldius"},"content":"            if (!file.getParentFile().exists()) {","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"kaldius"},"content":"                mkParentDir();","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"kaldius"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"kaldius"},"content":"            file.createNewFile();","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"kaldius"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"kaldius"},"content":"        return file;","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"kaldius"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"kaldius"},"content":"     * Makes a parent directory for the current filePath. If parent does not have a parent, this method","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"kaldius"},"content":"     * recursively calls itself.","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"kaldius"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"kaldius"},"content":"    private void mkParentDir() {","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"kaldius"},"content":"        File file \u003d new File(this.filePath);","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"kaldius"},"content":"        File parentFile \u003d file.getParentFile();","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"kaldius"},"content":"        if (!parentFile.exists()) {","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"kaldius"},"content":"            if (!parentFile.getParentFile().exists()) {","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"kaldius"},"content":"                new Storage(file.getParent()).mkParentDir();","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"kaldius"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"kaldius"},"content":"            parentFile.mkdir();","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"kaldius"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"kaldius"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"kaldius"},"content":"     * Stores the given TaskList into filePath.","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"kaldius"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"kaldius"},"content":"     * @param taskList the current TaskList","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"kaldius"},"content":"     * @throws IOException if there is an error writing to the fileIO","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"kaldius"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":57,"author":{"gitId":"kaldius"},"content":"    public void save(TaskList taskList) throws IOException {","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"kaldius"},"content":"        FileWriter fileWriter \u003d new FileWriter(this.filePath);","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"kaldius"},"content":"        fileWriter.write(taskList.toStorage());","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"kaldius"},"content":"        fileWriter.close();","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"kaldius"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"kaldius"},"content":"     * Deletes the storage file at filePath.","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"kaldius"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"kaldius"},"content":"    public void clear() {","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"kaldius"},"content":"        File file \u003d new File(this.filePath);","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"kaldius"},"content":"        file.delete();","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"kaldius"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"kaldius":70}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaldius"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"kaldius"},"content":"import exceptions.NoSearchResultException;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"kaldius"},"content":"import exceptions.NoSuchCommandException;","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"kaldius"},"content":"import exceptions.NoTaskNameException;","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"kaldius"},"content":"import exceptions.TaskDoesNotExistException;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"kaldius"},"content":"import tasks.Task;","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"kaldius"},"content":"import java.io.*;","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"kaldius"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"kaldius"},"content":"/**","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"kaldius"},"content":" * Encapsulates all information for a list of Tasks.","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"kaldius"},"content":" *","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"kaldius"},"content":" * @author Quan Teng Foong","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"kaldius"},"content":" */","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"kaldius"},"content":"public class TaskList {","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"kaldius"},"content":"    private final ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"kaldius"},"content":"    public TaskList() {}","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"kaldius"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"kaldius"},"content":"     * Constructor that takes in a File of previously stored tasks to initialize a","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"kaldius"},"content":"     * TaskList.","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"kaldius"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"kaldius"},"content":"     * @param storedTasks a File containing previously saved tasks","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"kaldius"},"content":"     * @throws IOException if there is an error opening the file or reading lines","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"kaldius"},"content":"     * from it","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"kaldius"},"content":"     * @throws NoTaskNameException if there is no task name","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"kaldius"},"content":"     * @throws NoSuchCommandException if the command does not match any of the known","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"kaldius"},"content":"     * commands","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"kaldius"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"kaldius"},"content":"    public TaskList(File storedTasks) throws IOException, NoTaskNameException, NoSuchCommandException{","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"kaldius"},"content":"        FileReader fileReader \u003d new FileReader(storedTasks);","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"kaldius"},"content":"        BufferedReader bufferedReader \u003d new BufferedReader(fileReader);","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"kaldius"},"content":"        String line \u003d bufferedReader.readLine();","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"kaldius"},"content":"        while (line !\u003d null) {","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"kaldius"},"content":"            this.taskList.add(Task.createTaskFromString(line));","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"kaldius"},"content":"            line \u003d bufferedReader.readLine();","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"kaldius"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"kaldius"},"content":"        fileReader.close();","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":43,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":44,"author":{"gitId":"kaldius"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":45,"author":{"gitId":"kaldius"},"content":"     * Overrides toString() method.","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"kaldius"},"content":"     * @return string representation of the TaskList object","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"kaldius"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":48,"author":{"gitId":"kaldius"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"kaldius"},"content":"    public String toString() {","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"kaldius"},"content":"        String allTasks \u003d \"\";","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"kaldius"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {","lastModifiedDate":"2021-08-18"},{"lineNumber":52,"author":{"gitId":"kaldius"},"content":"            allTasks +\u003d \"      \" + (i + 1) + \". \" + taskList.get(i).toString() + \"\\n\";","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"kaldius"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":54,"author":{"gitId":"kaldius"},"content":"        return allTasks;","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":56,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":57,"author":{"gitId":"kaldius"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":58,"author":{"gitId":"kaldius"},"content":"     * Marks the taskNum-th item in the tasks list as completed.","lastModifiedDate":"2021-08-18"},{"lineNumber":59,"author":{"gitId":"kaldius"},"content":"     * @param taskIndex integer index of the task to be marked","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"kaldius"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":61,"author":{"gitId":"kaldius"},"content":"    public void doTask(int taskIndex) throws TaskDoesNotExistException {","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"kaldius"},"content":"        if (taskIndex \u003e\u003d this.taskList.size()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"kaldius"},"content":"            throw new TaskDoesNotExistException(\"Task number out of bounds!\");","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"kaldius"},"content":"        } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"kaldius"},"content":"            this.taskList.get(taskIndex).doTask();","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"kaldius"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":68,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":69,"author":{"gitId":"kaldius"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":70,"author":{"gitId":"kaldius"},"content":"     * Adds a task to the TaskList and prints a success message.","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"kaldius"},"content":"     * @param task the task to be added","lastModifiedDate":"2021-08-24"},{"lineNumber":72,"author":{"gitId":"kaldius"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":73,"author":{"gitId":"kaldius"},"content":"    public void add(Task task) {","lastModifiedDate":"2021-08-18"},{"lineNumber":74,"author":{"gitId":"kaldius"},"content":"        this.taskList.add(task);","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":76,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":77,"author":{"gitId":"kaldius"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":78,"author":{"gitId":"kaldius"},"content":"     * Removes a task from the taskList.","lastModifiedDate":"2021-08-18"},{"lineNumber":79,"author":{"gitId":"kaldius"},"content":"     * @param taskIndex integer index of the task to be deleted","lastModifiedDate":"2021-08-24"},{"lineNumber":80,"author":{"gitId":"kaldius"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":81,"author":{"gitId":"kaldius"},"content":"    public void delete(int taskIndex) throws TaskDoesNotExistException {","lastModifiedDate":"2021-08-25"},{"lineNumber":82,"author":{"gitId":"kaldius"},"content":"        if (taskIndex \u003e\u003d this.taskList.size()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":83,"author":{"gitId":"kaldius"},"content":"            throw new TaskDoesNotExistException(\"Task number out of bounds!\");","lastModifiedDate":"2021-08-25"},{"lineNumber":84,"author":{"gitId":"kaldius"},"content":"        } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":85,"author":{"gitId":"kaldius"},"content":"            this.taskList.remove(taskIndex);","lastModifiedDate":"2021-08-25"},{"lineNumber":86,"author":{"gitId":"kaldius"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":87,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":88,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":89,"author":{"gitId":"kaldius"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":90,"author":{"gitId":"kaldius"},"content":"     * Converts the TaskList to a storable string.","lastModifiedDate":"2021-08-25"},{"lineNumber":91,"author":{"gitId":"kaldius"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":92,"author":{"gitId":"kaldius"},"content":"     * @return String to be stored","lastModifiedDate":"2021-08-25"},{"lineNumber":93,"author":{"gitId":"kaldius"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":94,"author":{"gitId":"kaldius"},"content":"    public String toStorage() {","lastModifiedDate":"2021-08-25"},{"lineNumber":95,"author":{"gitId":"kaldius"},"content":"        String storage \u003d \"\";","lastModifiedDate":"2021-08-25"},{"lineNumber":96,"author":{"gitId":"kaldius"},"content":"        for (Task task : taskList) {","lastModifiedDate":"2021-08-25"},{"lineNumber":97,"author":{"gitId":"kaldius"},"content":"            storage +\u003d task.toStorage() + \"\\n\";","lastModifiedDate":"2021-08-25"},{"lineNumber":98,"author":{"gitId":"kaldius"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":99,"author":{"gitId":"kaldius"},"content":"        return storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":100,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":101,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":102,"author":{"gitId":"kaldius"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":103,"author":{"gitId":"kaldius"},"content":"     * Returns the number of items in the TaskList.","lastModifiedDate":"2021-08-24"},{"lineNumber":104,"author":{"gitId":"kaldius"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":105,"author":{"gitId":"kaldius"},"content":"     * @return size of TaskList","lastModifiedDate":"2021-08-24"},{"lineNumber":106,"author":{"gitId":"kaldius"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":107,"author":{"gitId":"kaldius"},"content":"    public int size() {","lastModifiedDate":"2021-08-24"},{"lineNumber":108,"author":{"gitId":"kaldius"},"content":"        return this.taskList.size();","lastModifiedDate":"2021-08-24"},{"lineNumber":109,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":110,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":111,"author":{"gitId":"kaldius"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":112,"author":{"gitId":"kaldius"},"content":"     * Returns the Task object at the respective taskIndex.","lastModifiedDate":"2021-08-25"},{"lineNumber":113,"author":{"gitId":"kaldius"},"content":"     * @param taskIndex integer index of object to return","lastModifiedDate":"2021-08-25"},{"lineNumber":114,"author":{"gitId":"kaldius"},"content":"     * @return a Task","lastModifiedDate":"2021-08-25"},{"lineNumber":115,"author":{"gitId":"kaldius"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":116,"author":{"gitId":"kaldius"},"content":"    public Task get(int taskIndex) {","lastModifiedDate":"2021-08-25"},{"lineNumber":117,"author":{"gitId":"kaldius"},"content":"        return this.taskList.get(taskIndex);","lastModifiedDate":"2021-08-25"},{"lineNumber":118,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":119,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":120,"author":{"gitId":"kaldius"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":121,"author":{"gitId":"kaldius"},"content":"     * Searches all Tasks in the TaskList to find all Tasks that contain searchTerm.","lastModifiedDate":"2021-08-25"},{"lineNumber":122,"author":{"gitId":"kaldius"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":123,"author":{"gitId":"kaldius"},"content":"     * @param searchTerm search term to find","lastModifiedDate":"2021-08-25"},{"lineNumber":124,"author":{"gitId":"kaldius"},"content":"     * @return an ArrayList containing all Tasks with the search term in their message","lastModifiedDate":"2021-08-25"},{"lineNumber":125,"author":{"gitId":"kaldius"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":126,"author":{"gitId":"kaldius"},"content":"    public TaskList search(String searchTerm) throws NoSearchResultException {","lastModifiedDate":"2021-08-25"},{"lineNumber":127,"author":{"gitId":"kaldius"},"content":"        TaskList matchingTasks \u003d new TaskList();","lastModifiedDate":"2021-08-25"},{"lineNumber":128,"author":{"gitId":"kaldius"},"content":"        for (Task task: this.taskList) {","lastModifiedDate":"2021-08-25"},{"lineNumber":129,"author":{"gitId":"kaldius"},"content":"            if (task.getMessage().contains(searchTerm)) {","lastModifiedDate":"2021-08-25"},{"lineNumber":130,"author":{"gitId":"kaldius"},"content":"                matchingTasks.add(task);","lastModifiedDate":"2021-08-25"},{"lineNumber":131,"author":{"gitId":"kaldius"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":132,"author":{"gitId":"kaldius"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":133,"author":{"gitId":"kaldius"},"content":"        if (matchingTasks.isEmpty()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":134,"author":{"gitId":"kaldius"},"content":"            throw new NoSearchResultException(\"No results for search term \" + searchTerm);","lastModifiedDate":"2021-08-25"},{"lineNumber":135,"author":{"gitId":"kaldius"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":136,"author":{"gitId":"kaldius"},"content":"        return matchingTasks;","lastModifiedDate":"2021-08-25"},{"lineNumber":137,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":138,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":139,"author":{"gitId":"kaldius"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":140,"author":{"gitId":"kaldius"},"content":"     * Checks if the TaskList is empty.","lastModifiedDate":"2021-08-25"},{"lineNumber":141,"author":{"gitId":"kaldius"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":142,"author":{"gitId":"kaldius"},"content":"     * @return true if the TaskList is empty, false otherwise","lastModifiedDate":"2021-08-25"},{"lineNumber":143,"author":{"gitId":"kaldius"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":144,"author":{"gitId":"kaldius"},"content":"    public boolean isEmpty() {","lastModifiedDate":"2021-08-25"},{"lineNumber":145,"author":{"gitId":"kaldius"},"content":"        return this.taskList.isEmpty();","lastModifiedDate":"2021-08-25"},{"lineNumber":146,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":147,"author":{"gitId":"kaldius"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"kaldius":147}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaldius"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"kaldius"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"kaldius"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"kaldius"},"content":" * Encapsulates the user interface (reading user input and printing strings to the console).","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"kaldius"},"content":" *","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"kaldius"},"content":" * @author Quan Teng Foong","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"kaldius"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"kaldius"},"content":"public class Ui {","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"kaldius"},"content":"    Scanner sc;","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"kaldius"},"content":"    public Ui() {","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"kaldius"},"content":"        sc \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"kaldius"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"kaldius"},"content":"     * Prints out the error message.","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"kaldius"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"kaldius"},"content":"     * @param errorMessage the message to print","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"kaldius"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"kaldius"},"content":"    public void showError(String errorMessage) {","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"kaldius"},"content":"        reply(errorMessage + \"\\n\");","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"kaldius"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"kaldius"},"content":"     * Prints a basic greeting message.","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"kaldius"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"kaldius"},"content":"    public void greet() {","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"kaldius"},"content":"        System.out.println(\"Hello from Duke! What can I do for you?\\n\");","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"kaldius"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"kaldius"},"content":"     * Reads user input.","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"kaldius"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"kaldius"},"content":"     * @return the string input by the user","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"kaldius"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"kaldius"},"content":"    public String readCommand() {","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"kaldius"},"content":"        System.out.print(\"You: \");","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"kaldius"},"content":"        return sc.nextLine();","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"kaldius"},"content":"    private void reply(String reply) {","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"kaldius"},"content":"        System.out.println(\"Duke: \" + reply);","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"kaldius"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"kaldius"},"content":"     * Prints the goodbye message.","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"kaldius"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"kaldius"},"content":"    public void goodbye() {","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"kaldius"},"content":"        reply(\"Nice talking to you, goodbye!\");","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"kaldius"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"kaldius"},"content":"     * Prints the user\u0027s current todo list.","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"kaldius"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"kaldius"},"content":"     * @param taskList the current TaskList object","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"kaldius"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"kaldius"},"content":"    public void showList(TaskList taskList) {","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"kaldius"},"content":"        if (taskList.toString().equals(\"\")) {","lastModifiedDate":"2021-08-24"},{"lineNumber":63,"author":{"gitId":"kaldius"},"content":"            reply(\"Your todo list is empty!\\n\");","lastModifiedDate":"2021-08-24"},{"lineNumber":64,"author":{"gitId":"kaldius"},"content":"        } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"kaldius"},"content":"            reply(\"Checking your todo list...\");","lastModifiedDate":"2021-08-24"},{"lineNumber":66,"author":{"gitId":"kaldius"},"content":"            System.out.println(taskList);","lastModifiedDate":"2021-08-24"},{"lineNumber":67,"author":{"gitId":"kaldius"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":68,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":69,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":70,"author":{"gitId":"kaldius"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"kaldius"},"content":"     * Prints all Tasks that match the user\u0027s search term.","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"kaldius"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"kaldius"},"content":"     * @param taskList a TaskList of Tasks that match the user\u0027s search term","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"kaldius"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"kaldius"},"content":"    public void showSearchResults(TaskList taskList) {","lastModifiedDate":"2021-08-25"},{"lineNumber":76,"author":{"gitId":"kaldius"},"content":"        reply(\"Here are your search results:\");","lastModifiedDate":"2021-08-25"},{"lineNumber":77,"author":{"gitId":"kaldius"},"content":"        System.out.println(taskList);","lastModifiedDate":"2021-08-25"},{"lineNumber":78,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":79,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":80,"author":{"gitId":"kaldius"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":81,"author":{"gitId":"kaldius"},"content":"     * Shows success message for adding of a task.","lastModifiedDate":"2021-08-25"},{"lineNumber":82,"author":{"gitId":"kaldius"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":83,"author":{"gitId":"kaldius"},"content":"     * @param taskList the current TaskList object","lastModifiedDate":"2021-08-25"},{"lineNumber":84,"author":{"gitId":"kaldius"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":85,"author":{"gitId":"kaldius"},"content":"    public void showAddedTask(TaskList taskList) {","lastModifiedDate":"2021-08-25"},{"lineNumber":86,"author":{"gitId":"kaldius"},"content":"        reply(\"Alright, I\u0027ve added the following task:\");","lastModifiedDate":"2021-08-25"},{"lineNumber":87,"author":{"gitId":"kaldius"},"content":"        System.out.println(\"      \" + taskList.get(taskList.size() - 1) + \"\\n      Now you have \" + taskList.size() +","lastModifiedDate":"2021-08-25"},{"lineNumber":88,"author":{"gitId":"kaldius"},"content":"                \" tasks in the list.\\n\");","lastModifiedDate":"2021-08-25"},{"lineNumber":89,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":90,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":91,"author":{"gitId":"kaldius"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":92,"author":{"gitId":"kaldius"},"content":"     * Print a message to tell the user that the task has been deleted.","lastModifiedDate":"2021-08-25"},{"lineNumber":93,"author":{"gitId":"kaldius"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":94,"author":{"gitId":"kaldius"},"content":"     * @param taskList the current TaskList object","lastModifiedDate":"2021-08-25"},{"lineNumber":95,"author":{"gitId":"kaldius"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":96,"author":{"gitId":"kaldius"},"content":"    public void showDeleteTask(TaskList taskList) {","lastModifiedDate":"2021-08-24"},{"lineNumber":97,"author":{"gitId":"kaldius"},"content":"        reply(\"Task removed. You now have \" + taskList.size() + \" tasks remaining.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":98,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":99,"author":{"gitId":"kaldius"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"kaldius":99}},{"path":"src/main/java/exceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaldius"},"content":"package exceptions;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"kaldius"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"kaldius"},"content":" * Abstract class for all other Duke Exceptions to extend from.","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"kaldius"},"content":" *","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"kaldius"},"content":" * @author Quan Teng Foong","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"kaldius"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"kaldius"},"content":"public abstract class DukeException extends Exception {","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"kaldius"},"content":"    public DukeException(String message) {","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"kaldius"},"content":"        super(message);","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"kaldius"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"kaldius":12}},{"path":"src/main/java/exceptions/EmptyTaskListException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaldius"},"content":"package exceptions;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"kaldius"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"kaldius"},"content":" * Exception raised when the TaskList is to be printed but it is empty.","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"kaldius"},"content":" *","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"kaldius"},"content":" * @author Quan Teng Foong","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"kaldius"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"kaldius"},"content":"public class EmptyTaskListException extends DukeException {","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"kaldius"},"content":"    public EmptyTaskListException(String errorMessage) {","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"kaldius"},"content":"        super(errorMessage);","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"kaldius"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"kaldius":12}},{"path":"src/main/java/exceptions/NoSearchResultException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaldius"},"content":"package exceptions;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"kaldius"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"kaldius"},"content":" * Exception raised when the user attempts to search for a task but there are no Tasks that match the search term.","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"kaldius"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"kaldius"},"content":"public class NoSearchResultException extends DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"kaldius"},"content":"    public NoSearchResultException(String errorMessage) {","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"kaldius"},"content":"        super(errorMessage);","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"kaldius"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"kaldius":10}},{"path":"src/main/java/exceptions/NoSuchCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaldius"},"content":"package exceptions;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"kaldius"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"kaldius"},"content":" * Exception raised when the command input by the user is not recognised.","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"kaldius"},"content":" *","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"kaldius"},"content":" * @author Quan Teng Foong","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"kaldius"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"kaldius"},"content":"public class NoSuchCommandException extends DukeException {","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"kaldius"},"content":"    public NoSuchCommandException(String errorMessage) {","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"kaldius"},"content":"        super(errorMessage);","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"kaldius"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"kaldius":12}},{"path":"src/main/java/exceptions/NoTaskNameException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaldius"},"content":"package exceptions;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"kaldius"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"kaldius"},"content":" * Exception raised when there is no name for the task that was input by the user.","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"kaldius"},"content":" *","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"kaldius"},"content":" * @author Quan Teng Foong","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"kaldius"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"kaldius"},"content":"public class NoTaskNameException extends DukeException {","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"kaldius"},"content":"    public NoTaskNameException(String errorMessage) {","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"kaldius"},"content":"        super(errorMessage);","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"kaldius"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"kaldius":12}},{"path":"src/main/java/exceptions/TaskDoesNotExistException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaldius"},"content":"package exceptions;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"kaldius"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"kaldius"},"content":" * Exception raised when the user wants to access (mark complete/delete) a task who\u0027s index is out of bounds.","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"kaldius"},"content":" *","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"kaldius"},"content":" * @author Quan Teng Foong","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"kaldius"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"kaldius"},"content":"public class TaskDoesNotExistException extends DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"kaldius"},"content":"    public TaskDoesNotExistException(String errorMessage) {","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"kaldius"},"content":"        super(errorMessage);","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"kaldius"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"kaldius":12}},{"path":"src/main/java/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaldius"},"content":"package tasks;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"kaldius"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"kaldius"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"kaldius"},"content":"/**","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"kaldius"},"content":" * The Deadline class encapsulates all the details of each deadline.","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"kaldius"},"content":" *","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"kaldius"},"content":" * @author Quan Teng Foong","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"kaldius"},"content":" */","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"kaldius"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"kaldius"},"content":"    private final LocalDate endTime;","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"kaldius"},"content":"    public Deadline(String message, String endTime){","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"kaldius"},"content":"        super(message);","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"kaldius"},"content":"        this.endTime \u003d LocalDate.parse(endTime);","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"kaldius"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"kaldius"},"content":"     * Overrides toString() method.","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"kaldius"},"content":"     * @return String representation of the Deadline object.","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"kaldius"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"kaldius"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":24,"author":{"gitId":"kaldius"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":25,"author":{"gitId":"kaldius"},"content":"        return \"[D]\" + super.toString() + \"(by: \" +","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"kaldius"},"content":"                endTime.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"kaldius"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"kaldius"},"content":"     * Converts contents to a storable String.","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"kaldius"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"kaldius"},"content":"     * @return a String that represents this Deadline in storage","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"kaldius"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"kaldius"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"kaldius"},"content":"    public String toStorage() {","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"kaldius"},"content":"        return \"D|\" + super.toStorage() + \"/by \" + this.endTime;","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":37,"author":{"gitId":"kaldius"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"kaldius":37}},{"path":"src/main/java/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaldius"},"content":"package tasks;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"kaldius"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"kaldius"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"kaldius"},"content":"/**","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"kaldius"},"content":" * The Event class encapsulates all the details of each event.","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"kaldius"},"content":" *","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"kaldius"},"content":" * @author Quan Teng Foong","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"kaldius"},"content":" */","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"kaldius"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"kaldius"},"content":"    private final LocalDate eventDate;","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"kaldius"},"content":"    public Event(String message, String eventDate){","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"kaldius"},"content":"        super(message);","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"kaldius"},"content":"        this.eventDate \u003d LocalDate.parse(eventDate);","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"kaldius"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"kaldius"},"content":"     * Overrides toString() method.","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"kaldius"},"content":"     * @return String representation of the Event object.","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"kaldius"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"kaldius"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":24,"author":{"gitId":"kaldius"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":25,"author":{"gitId":"kaldius"},"content":"        return \"[E]\" + super.toString() + \"(at: \" +","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"kaldius"},"content":"                eventDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"))+ \")\";","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"kaldius"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"kaldius"},"content":"     * Converts contents to a storable String.","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"kaldius"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"kaldius"},"content":"     * @return a String that represents this Event in storage","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"kaldius"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"kaldius"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"kaldius"},"content":"    public String toStorage() {","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"kaldius"},"content":"        return \"E|\" + super.toStorage() + \"/at \" + this.eventDate;","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":38,"author":{"gitId":"kaldius"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"kaldius":38}},{"path":"src/main/java/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaldius"},"content":"package tasks;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"kaldius"},"content":"import exceptions.NoSuchCommandException;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"kaldius"},"content":"import exceptions.NoTaskNameException;","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"kaldius"},"content":"/**","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"kaldius"},"content":" * The Task class encapsulates all the details of each task.","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"kaldius"},"content":" *","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"kaldius"},"content":" * @author Quan Teng Foong","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"kaldius"},"content":" */","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"kaldius"},"content":"public abstract class Task {","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"kaldius"},"content":"    private final String message;","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"kaldius"},"content":"    private Boolean completed;","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"kaldius"},"content":"    public Task(String message){","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"kaldius"},"content":"        this.message \u003d message;","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"kaldius"},"content":"        this.completed \u003d false;","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"kaldius"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"kaldius"},"content":"     * Factory method for a Task","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"kaldius"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"kaldius"},"content":"     * @param command the type of Task to create","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"kaldius"},"content":"     * @param input the contents of the task","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"kaldius"},"content":"     * @return the corresponding Task","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"kaldius"},"content":"     * @throws NoSuchCommandException if the command does not match any of the known","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"kaldius"},"content":"     * commands","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"kaldius"},"content":"     * @throws NoTaskNameException if there is no task name","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"kaldius"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"kaldius"},"content":"    private static Task createTask(String command, String input) throws NoSuchCommandException, NoTaskNameException {","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"kaldius"},"content":"        if (input.isEmpty()) {","lastModifiedDate":"2021-08-18"},{"lineNumber":33,"author":{"gitId":"kaldius"},"content":"            throw new NoTaskNameException(\"No task name, please try again.\");","lastModifiedDate":"2021-08-18"},{"lineNumber":34,"author":{"gitId":"kaldius"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":35,"author":{"gitId":"kaldius"},"content":"        switch (command) {","lastModifiedDate":"2021-08-18"},{"lineNumber":36,"author":{"gitId":"kaldius"},"content":"        case \"todo\":","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"kaldius"},"content":"            return new ToDo(input);","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"kaldius"},"content":"        case \"event\":","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"kaldius"},"content":"            String[] message_and_eventDate \u003d input.split(\"/at \");","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"kaldius"},"content":"            return new Event(message_and_eventDate[0], message_and_eventDate[1]);","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"kaldius"},"content":"        case \"deadline\":","lastModifiedDate":"2021-08-18"},{"lineNumber":42,"author":{"gitId":"kaldius"},"content":"            String[] message_and_endTime \u003d input.split(\"/by \");","lastModifiedDate":"2021-08-18"},{"lineNumber":43,"author":{"gitId":"kaldius"},"content":"            return new Deadline(message_and_endTime[0], message_and_endTime[1]);","lastModifiedDate":"2021-08-18"},{"lineNumber":44,"author":{"gitId":"kaldius"},"content":"        default:","lastModifiedDate":"2021-08-18"},{"lineNumber":45,"author":{"gitId":"kaldius"},"content":"            throw new NoSuchCommandException(\"No such command!\");","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"kaldius"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":47,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":48,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":49,"author":{"gitId":"kaldius"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"kaldius"},"content":"     * Creates a Task from the String used in storage.","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"kaldius"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"kaldius"},"content":"     * @param line read from the storage file","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"kaldius"},"content":"     * @return the corresponding Task","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"kaldius"},"content":"     * @throws NoSuchCommandException if the command does not match any of the known","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"kaldius"},"content":"     * commands","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"kaldius"},"content":"     * @throws NoTaskNameException if there is no task name","lastModifiedDate":"2021-08-24"},{"lineNumber":57,"author":{"gitId":"kaldius"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"kaldius"},"content":"    public static Task createTaskFromString(String line) throws NoTaskNameException, NoSuchCommandException {","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"kaldius"},"content":"        String[] parameters \u003d line.split(\"\\\\|\");","lastModifiedDate":"2021-08-24"},{"lineNumber":60,"author":{"gitId":"kaldius"},"content":"        String command;","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"kaldius"},"content":"        switch (parameters[0]) {","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"kaldius"},"content":"        case \"T\":","lastModifiedDate":"2021-08-24"},{"lineNumber":63,"author":{"gitId":"kaldius"},"content":"            command \u003d \"todo\";","lastModifiedDate":"2021-08-24"},{"lineNumber":64,"author":{"gitId":"kaldius"},"content":"            break;","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"kaldius"},"content":"        case \"E\":","lastModifiedDate":"2021-08-24"},{"lineNumber":66,"author":{"gitId":"kaldius"},"content":"            command \u003d \"event\";","lastModifiedDate":"2021-08-24"},{"lineNumber":67,"author":{"gitId":"kaldius"},"content":"            break;","lastModifiedDate":"2021-08-24"},{"lineNumber":68,"author":{"gitId":"kaldius"},"content":"        default:","lastModifiedDate":"2021-08-24"},{"lineNumber":69,"author":{"gitId":"kaldius"},"content":"            command \u003d \"deadline\";","lastModifiedDate":"2021-08-24"},{"lineNumber":70,"author":{"gitId":"kaldius"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":71,"author":{"gitId":"kaldius"},"content":"        String input \u003d parameters[2];","lastModifiedDate":"2021-08-24"},{"lineNumber":72,"author":{"gitId":"kaldius"},"content":"        Task task \u003d Task.createTask(command, input);","lastModifiedDate":"2021-08-24"},{"lineNumber":73,"author":{"gitId":"kaldius"},"content":"        if (parameters[1].equals(\"1\")) {","lastModifiedDate":"2021-08-24"},{"lineNumber":74,"author":{"gitId":"kaldius"},"content":"            task.doTask();","lastModifiedDate":"2021-08-24"},{"lineNumber":75,"author":{"gitId":"kaldius"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":76,"author":{"gitId":"kaldius"},"content":"        return task;","lastModifiedDate":"2021-08-24"},{"lineNumber":77,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":78,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":79,"author":{"gitId":"kaldius"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":80,"author":{"gitId":"kaldius"},"content":"     * Overrides toString() method.","lastModifiedDate":"2021-08-18"},{"lineNumber":81,"author":{"gitId":"kaldius"},"content":"     * @return String representation of the Task object","lastModifiedDate":"2021-08-25"},{"lineNumber":82,"author":{"gitId":"kaldius"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":83,"author":{"gitId":"kaldius"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":84,"author":{"gitId":"kaldius"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":85,"author":{"gitId":"kaldius"},"content":"        return \"[\" + (this.completed ? \"X\" : \" \")  + \"] \" + this.message;","lastModifiedDate":"2021-08-24"},{"lineNumber":86,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":87,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":88,"author":{"gitId":"kaldius"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":89,"author":{"gitId":"kaldius"},"content":"     * Sets the Task to completed.","lastModifiedDate":"2021-08-25"},{"lineNumber":90,"author":{"gitId":"kaldius"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":91,"author":{"gitId":"kaldius"},"content":"    public void doTask() {","lastModifiedDate":"2021-08-18"},{"lineNumber":92,"author":{"gitId":"kaldius"},"content":"        this.completed \u003d true;","lastModifiedDate":"2021-08-18"},{"lineNumber":93,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":94,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":95,"author":{"gitId":"kaldius"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":96,"author":{"gitId":"kaldius"},"content":"     * Converts contents to a storable String.","lastModifiedDate":"2021-08-24"},{"lineNumber":97,"author":{"gitId":"kaldius"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":98,"author":{"gitId":"kaldius"},"content":"     * @return a String that represents this Task in storage","lastModifiedDate":"2021-08-25"},{"lineNumber":99,"author":{"gitId":"kaldius"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":100,"author":{"gitId":"kaldius"},"content":"    public String toStorage() {","lastModifiedDate":"2021-08-24"},{"lineNumber":101,"author":{"gitId":"kaldius"},"content":"        return (this.completed ? \"1|\" : \"0|\") + this.message;","lastModifiedDate":"2021-08-24"},{"lineNumber":102,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":103,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":104,"author":{"gitId":"kaldius"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":105,"author":{"gitId":"kaldius"},"content":"     * Returns the message field of the Task.","lastModifiedDate":"2021-08-25"},{"lineNumber":106,"author":{"gitId":"kaldius"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":107,"author":{"gitId":"kaldius"},"content":"     * @return the message field as a String","lastModifiedDate":"2021-08-25"},{"lineNumber":108,"author":{"gitId":"kaldius"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":109,"author":{"gitId":"kaldius"},"content":"    public String getMessage() {","lastModifiedDate":"2021-08-25"},{"lineNumber":110,"author":{"gitId":"kaldius"},"content":"        return this.message;","lastModifiedDate":"2021-08-25"},{"lineNumber":111,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":112,"author":{"gitId":"kaldius"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"kaldius":112}},{"path":"src/main/java/tasks/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaldius"},"content":"package tasks;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"kaldius"},"content":"/**","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"kaldius"},"content":" * The Todo class encapsulates all the details of each Todo.","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"kaldius"},"content":" *","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"kaldius"},"content":" * @author Quan Teng Foong","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"kaldius"},"content":" */","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"kaldius"},"content":"public class ToDo extends Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"kaldius"},"content":"    public ToDo(String message){","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"kaldius"},"content":"        super(message);","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"kaldius"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"kaldius"},"content":"     * Overrides toString() method.","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"kaldius"},"content":"     * @return String representation of the ToDo object.","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"kaldius"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"kaldius"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"kaldius"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"kaldius"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"kaldius"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"kaldius"},"content":"     * Converts contents to a storable String.","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"kaldius"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"kaldius"},"content":"     * @return a String that represents this ToDo in storage","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"kaldius"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"kaldius"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"kaldius"},"content":"    public String toStorage() {","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"kaldius"},"content":"        return \"T|\" + super.toStorage();","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"kaldius"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"kaldius":32}},{"path":"src/test/java/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaldius"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"kaldius"},"content":"import Command.Command;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"kaldius"},"content":"import exceptions.NoSuchCommandException;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"kaldius"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"kaldius"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"kaldius"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"kaldius"},"content":" * JUnit test class for Parser.","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"kaldius"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"kaldius"},"content":"public class ParserTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"kaldius"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"kaldius"},"content":"     * Tests if the Parser returns an equivalent ToDo object.","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"kaldius"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"kaldius"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"kaldius"},"content":"    public void parseToDo() {","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"kaldius"},"content":"        String userInput \u003d \"todo homework\";","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"kaldius"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"kaldius"},"content":"            assertEquals(Command.of(\"todo\", \"homework\"), Parser.parse(userInput));","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"kaldius"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"kaldius"},"content":"            fail(\"Exception thrown: \" + e.getMessage());","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"kaldius"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"kaldius"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"kaldius"},"content":"     * Tests if the Parser returns an equivalent Event object.","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"kaldius"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"kaldius"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"kaldius"},"content":"    public void parseEvent() {","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"kaldius"},"content":"        String userInput \u003d \"event lecture /at 2021-08-25\";","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"kaldius"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"kaldius"},"content":"            assertEquals(Command.of(\"event\", \"lecture /at 2021-08-25\"), Parser.parse(userInput));","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"kaldius"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"kaldius"},"content":"            fail(\"Exception thrown: \" + e.getMessage());","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"kaldius"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"kaldius"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"kaldius"},"content":"     * Tests if the Parser returns an equivalent Deadline object.","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"kaldius"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"kaldius"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"kaldius"},"content":"    public void parseDeadline() {","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"kaldius"},"content":"        String userInput \u003d \"deadline submit assignment /by 2021-08-25\";","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"kaldius"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"kaldius"},"content":"            assertEquals(Command.of(\"deadline\", \"submit assignment /by 2021-08-25\"), Parser.parse(userInput));","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"kaldius"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"kaldius"},"content":"            fail(\"Exception thrown: \" + e.getMessage());","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"kaldius"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"kaldius"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"kaldius"},"content":"     * Tests if the correct exception is thrown when an invalid command is parsed.","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"kaldius"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"kaldius"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"kaldius"},"content":"    public void noSuchCommandExceptionTest() {","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"kaldius"},"content":"        String userInput \u003d \"duke is stupid\";","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"kaldius"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"kaldius"},"content":"            assertThrows(NoSuchCommandException.class, () -\u003e Parser.parse(userInput));","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"kaldius"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"kaldius"},"content":"            fail(\"Unknown exception thrown: \" + e.getMessage());","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"kaldius"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"kaldius"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"kaldius":65}},{"path":"src/test/java/duke/StorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaldius"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"kaldius"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"kaldius"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"kaldius"},"content":"import tasks.Event;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"kaldius"},"content":"import tasks.ToDo;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"kaldius"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"kaldius"},"content":"import java.io.File;","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"kaldius"},"content":"import java.io.FileReader;","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"kaldius"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"kaldius"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"kaldius"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"kaldius"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"kaldius"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"kaldius"},"content":" * JUnit test class for Storage.","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"kaldius"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"kaldius"},"content":"public class StorageTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"kaldius"},"content":"    Storage storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"kaldius"},"content":"    String filePath;","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"kaldius"},"content":"    @BeforeEach","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"kaldius"},"content":"    public void setUp() {","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"kaldius"},"content":"        this.filePath \u003d \"../../storage/testSave.txt\";","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"kaldius"},"content":"        this.storage \u003d new Storage(this.filePath);","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"kaldius"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"kaldius"},"content":"     * Tests if an empty .txt file is created by the retrieve() method.","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"kaldius"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"kaldius"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"kaldius"},"content":"    public void creationTest() {","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"kaldius"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"kaldius"},"content":"            storage.retrieve();","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"kaldius"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"kaldius"},"content":"            System.out.println(\"Creation error: \" + e.getMessage());","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"kaldius"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"kaldius"},"content":"        assertTrue(new File(this.filePath).exists());","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"kaldius"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"kaldius"},"content":"     * Tests if the save() method correctly saves a TaskList.","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"kaldius"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"kaldius"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"kaldius"},"content":"    public void saveTest() {","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"kaldius"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"kaldius"},"content":"        taskList.add(new ToDo(\"take your medicine\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"kaldius"},"content":"        taskList.add(new Event(\"family dinner\", \"2021-08-25\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"kaldius"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"kaldius"},"content":"            storage.save(taskList);","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"kaldius"},"content":"            FileReader fr \u003d new FileReader(this.filePath);","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"kaldius"},"content":"            BufferedReader br \u003d new BufferedReader(fr);","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"kaldius"},"content":"            String line \u003d br.lines().collect(Collectors.joining(\"\\n\")) + \"\\n\";","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"kaldius"},"content":"            assertEquals(taskList.toStorage(), line);","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"kaldius"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"kaldius"},"content":"            System.out.println(\"Save error: \" + e.getMessage());","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"kaldius"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"kaldius"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"kaldius"},"content":"     * Tests if the retrieve() method is able to properly retrieve the contents of the .txt file.","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"kaldius"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"kaldius"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"kaldius"},"content":"    public void retrievalTest() {","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"kaldius"},"content":"        String actualString \u003d \"a\";","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"kaldius"},"content":"        String expectedString \u003d \"b\";","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"kaldius"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"kaldius"},"content":"            FileReader actualFile \u003d new FileReader(storage.retrieve());","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"kaldius"},"content":"            BufferedReader actualBr \u003d new BufferedReader(actualFile);","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"kaldius"},"content":"            actualString \u003d actualBr.lines().collect(Collectors.joining());","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"kaldius"},"content":"            FileReader expectedFile \u003d new FileReader(this.filePath);","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"kaldius"},"content":"            BufferedReader expectedBr \u003d new BufferedReader(expectedFile);","lastModifiedDate":"2021-08-25"},{"lineNumber":76,"author":{"gitId":"kaldius"},"content":"            expectedString \u003d expectedBr.lines().collect(Collectors.joining());","lastModifiedDate":"2021-08-25"},{"lineNumber":77,"author":{"gitId":"kaldius"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":78,"author":{"gitId":"kaldius"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2021-08-25"},{"lineNumber":79,"author":{"gitId":"kaldius"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":80,"author":{"gitId":"kaldius"},"content":"        assertEquals(expectedString, actualString);","lastModifiedDate":"2021-08-25"},{"lineNumber":81,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":82,"author":{"gitId":"kaldius"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"kaldius":82}},{"path":"src/test/java/duke/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaldius"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"kaldius"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"kaldius"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"kaldius"},"content":"import tasks.Deadline;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"kaldius"},"content":"import tasks.ToDo;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"kaldius"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"kaldius"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"kaldius"},"content":" * JUnit test class for TaskList.","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"kaldius"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"kaldius"},"content":"public class TaskListTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"kaldius"},"content":"    TaskList taskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"kaldius"},"content":"    @BeforeEach","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"kaldius"},"content":"    public void setUp() {","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"kaldius"},"content":"        this.taskList \u003d new TaskList();","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"kaldius"},"content":"        this.taskList.add(new ToDo(\"get bread\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"kaldius"},"content":"        this.taskList.add(new Deadline(\"submit assignment\", \"2021-08-25\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"kaldius"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"kaldius"},"content":"     * Tests if the TaskList toString() method works as expected.","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"kaldius"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"kaldius"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"kaldius"},"content":"    public void toStringTest() {","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"kaldius"},"content":"        String expected \u003d \"      1. [T][ ] get bread\\n      2. [D][ ] submit assignment(by: Aug 25 2021)\\n\";","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"kaldius"},"content":"        assertEquals(expected, this.taskList.toString());","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"kaldius"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"kaldius"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"kaldius"},"content":"     * Tests if the TaskList toStorage() method works as expected.","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"kaldius"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"kaldius"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"kaldius"},"content":"    public void toStorageTest() {","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"kaldius"},"content":"        String expected \u003d \"T|0|get bread\\nD|0|submit assignment/by 2021-08-25\\n\";","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"kaldius"},"content":"        assertEquals(expected, this.taskList.toStorage());","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"kaldius"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"kaldius"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"kaldius":40}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"kaldius"},"content":"todo borrow book","lastModifiedDate":"2021-08-18"},{"lineNumber":2,"author":{"gitId":"kaldius"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"kaldius"},"content":"deadline return book /by Sunday","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"kaldius"},"content":"event project meeting /at Mon 2-4pm","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"kaldius"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"kaldius"},"content":"done 2","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"kaldius"},"content":"deadline pi /by Thursday 2359h","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"kaldius"},"content":"done 3","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"kaldius"},"content":"bye","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"kaldius":9}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"kaldius"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"kaldius":1,"-":20}}]

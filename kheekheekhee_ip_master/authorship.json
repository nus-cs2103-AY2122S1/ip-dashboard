[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"kheekheekhee"},"content":"# duke.Duke project template","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"kheekheekhee"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"kheekheekhee":2,"-":22}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kheekheekhee"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"kheekheekhee"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"kheekheekhee"},"content":"import duke.parser.Parser;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"kheekheekhee"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"kheekheekhee"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"kheekheekhee"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"kheekheekhee"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"kheekheekhee"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-15"},{"lineNumber":12,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":13,"author":{"gitId":"kheekheekhee"},"content":"/**","lastModifiedDate":"2021-08-16"},{"lineNumber":14,"author":{"gitId":"kheekheekhee"},"content":" * duke.Duke class that initialises the duke.Duke chat bot.","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"kheekheekhee"},"content":" * The Duke class supports operators including","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"kheekheekhee"},"content":" * (i) run: runs the chat bot","lastModifiedDate":"2021-08-16"},{"lineNumber":17,"author":{"gitId":"kheekheekhee"},"content":" * (ii) greet: prints out a greeting when the chat bot runs","lastModifiedDate":"2021-08-16"},{"lineNumber":18,"author":{"gitId":"kheekheekhee"},"content":" * (iii) exit: ends the execution of the chat bot","lastModifiedDate":"2021-08-16"},{"lineNumber":19,"author":{"gitId":"kheekheekhee"},"content":" * (iv) addToList: adds a Task to the list of Tasks","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"kheekheekhee"},"content":" * (v) displayList: prints out the current list of Tasks","lastModifiedDate":"2021-08-16"},{"lineNumber":21,"author":{"gitId":"kheekheekhee"},"content":" * (vi) markDone: marks a Task as done","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"kheekheekhee"},"content":" * (vii) addDeadline: adds a Deadline to the list of Tasks","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"kheekheekhee"},"content":" * (viii) addTodo: adds a Todo to the list of Tasks","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"kheekheekhee"},"content":" * (ix) addEvent: adds an duke.tasks.Event to the list of Tasks","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"kheekheekhee"},"content":" * (x) handleCommands: main logic for processing and executing various commands","lastModifiedDate":"2021-08-16"},{"lineNumber":26,"author":{"gitId":"kheekheekhee"},"content":" * like \"list\", \"done\", \"deadline\", \"todo\", \"event\" and other invalid commands","lastModifiedDate":"2021-08-16"},{"lineNumber":27,"author":{"gitId":"kheekheekhee"},"content":" */","lastModifiedDate":"2021-08-16"},{"lineNumber":28,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":30,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":31,"author":{"gitId":"kheekheekhee"},"content":"    /** Handles loading and saving of Tasks. */","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"kheekheekhee"},"content":"    private final Storage storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"kheekheekhee"},"content":"    /** Stores all tasks */","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"kheekheekhee"},"content":"    private TaskList tasks;","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"kheekheekhee"},"content":"    /** Handles interactions with users. */","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"kheekheekhee"},"content":"    private final Ui ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":40,"author":{"gitId":"kheekheekhee"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"kheekheekhee"},"content":"     * Constructor for the DUke chatbot.","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"kheekheekhee"},"content":"     * Loads any pre-existing data from the provided filePath.","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"kheekheekhee"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"kheekheekhee"},"content":"     * @param filePath path to the data storage file","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"kheekheekhee"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"kheekheekhee"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"kheekheekhee"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"kheekheekhee"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":51,"author":{"gitId":"kheekheekhee"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"kheekheekhee"},"content":"            tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"kheekheekhee"},"content":"        } catch (IOException | DukeException e) {","lastModifiedDate":"2021-08-26"},{"lineNumber":54,"author":{"gitId":"kheekheekhee"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"kheekheekhee"},"content":"            Ui.printMessage(e.getMessage());","lastModifiedDate":"2021-08-26"},{"lineNumber":56,"author":{"gitId":"kheekheekhee"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"kheekheekhee"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":60,"author":{"gitId":"kheekheekhee"},"content":"     * Runs the duke.Duke chat bot.","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"kheekheekhee"},"content":"     * It takes in user inputs and responds accordingly.","lastModifiedDate":"2021-08-16"},{"lineNumber":62,"author":{"gitId":"kheekheekhee"},"content":"     * If a command is issued, the bot will execute the command if the appropriate message","lastModifiedDate":"2021-08-16"},{"lineNumber":63,"author":{"gitId":"kheekheekhee"},"content":"     * follows the command.","lastModifiedDate":"2021-08-16"},{"lineNumber":64,"author":{"gitId":"kheekheekhee"},"content":"     * Any invalid inputs are caught via custom Exceptions, thrown and printed for the user to see.","lastModifiedDate":"2021-08-16"},{"lineNumber":65,"author":{"gitId":"kheekheekhee"},"content":"     * Invalid inputs include empty inputs, incorrect formats, invalid index, empty messages and","lastModifiedDate":"2021-08-16"},{"lineNumber":66,"author":{"gitId":"kheekheekhee"},"content":"     * attempting to amend the list of Tasks when it is currently empty.","lastModifiedDate":"2021-08-16"},{"lineNumber":67,"author":{"gitId":"kheekheekhee"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":68,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":69,"author":{"gitId":"kheekheekhee"},"content":"    private void run() {","lastModifiedDate":"2021-08-19"},{"lineNumber":70,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":71,"author":{"gitId":"kheekheekhee"},"content":"        Parser parser \u003d new Parser(tasks);","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":73,"author":{"gitId":"kheekheekhee"},"content":"        ui.greet();","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":75,"author":{"gitId":"kheekheekhee"},"content":"        String input;","lastModifiedDate":"2021-08-15"},{"lineNumber":76,"author":{"gitId":"kheekheekhee"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-15"},{"lineNumber":77,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":78,"author":{"gitId":"kheekheekhee"},"content":"        /* user input trimmed to remove unwanted spaces at the front and back of user input","lastModifiedDate":"2021-08-26"},{"lineNumber":79,"author":{"gitId":"kheekheekhee"},"content":"        allows for greater margin of error when typing in commands */","lastModifiedDate":"2021-08-26"},{"lineNumber":80,"author":{"gitId":"kheekheekhee"},"content":"        while(!(input \u003d sc.nextLine().trim()).equals(\"bye\")) {","lastModifiedDate":"2021-08-16"},{"lineNumber":81,"author":{"gitId":"kheekheekhee"},"content":"            // continuously runs the bot as long as the \"bye\" command is not issued","lastModifiedDate":"2021-08-16"},{"lineNumber":82,"author":{"gitId":"kheekheekhee"},"content":"            parser.handleCommands(input);","lastModifiedDate":"2021-08-25"},{"lineNumber":83,"author":{"gitId":"kheekheekhee"},"content":"        }","lastModifiedDate":"2021-08-15"},{"lineNumber":84,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":85,"author":{"gitId":"kheekheekhee"},"content":"        sc.close();","lastModifiedDate":"2021-08-25"},{"lineNumber":86,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":87,"author":{"gitId":"kheekheekhee"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":88,"author":{"gitId":"kheekheekhee"},"content":"            storage.save(tasks.getTaskList());","lastModifiedDate":"2021-08-25"},{"lineNumber":89,"author":{"gitId":"kheekheekhee"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":90,"author":{"gitId":"kheekheekhee"},"content":"            Ui.printMessage(e.getMessage());","lastModifiedDate":"2021-08-26"},{"lineNumber":91,"author":{"gitId":"kheekheekhee"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":92,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":93,"author":{"gitId":"kheekheekhee"},"content":"        ui.exit();","lastModifiedDate":"2021-08-25"},{"lineNumber":94,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":95,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":96,"author":{"gitId":"kheekheekhee"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":97,"author":{"gitId":"kheekheekhee"},"content":"     * Runs the Duke chatbot.","lastModifiedDate":"2021-08-26"},{"lineNumber":98,"author":{"gitId":"kheekheekhee"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":99,"author":{"gitId":"kheekheekhee"},"content":"     * @param args command line arguments.","lastModifiedDate":"2021-08-26"},{"lineNumber":100,"author":{"gitId":"kheekheekhee"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":102,"author":{"gitId":"kheekheekhee"},"content":"        new Duke(\"data.txt\").run();","lastModifiedDate":"2021-08-25"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":104,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"kheekheekhee":100,"-":4}},{"path":"src/main/java/duke/exception/DataFileChangedException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kheekheekhee"},"content":"package duke.exception;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"kheekheekhee"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"kheekheekhee"},"content":" * Exception of Duke that occurs when the data file is tampered with.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"kheekheekhee"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"kheekheekhee"},"content":"public class DataFileChangedException extends DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"kheekheekhee"},"content":"    public DataFileChangedException() {","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"kheekheekhee"},"content":"        super(\"Contents of file have been changed! Resetting the list!\");","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"kheekheekhee"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"kheekheekhee":10}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kheekheekhee"},"content":"package duke.exception;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":3,"author":{"gitId":"kheekheekhee"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"kheekheekhee"},"content":" * Exception class of Duke.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"kheekheekhee"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"kheekheekhee"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-08-16"},{"lineNumber":7,"author":{"gitId":"kheekheekhee"},"content":"    public DukeException(String message) {","lastModifiedDate":"2021-08-16"},{"lineNumber":8,"author":{"gitId":"kheekheekhee"},"content":"        super(message);","lastModifiedDate":"2021-08-16"},{"lineNumber":9,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":10,"author":{"gitId":"kheekheekhee"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"kheekheekhee":10}},{"path":"src/main/java/duke/exception/EmptyCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kheekheekhee"},"content":"package duke.exception;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":3,"author":{"gitId":"kheekheekhee"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"kheekheekhee"},"content":" * Exception of Duke that occurs when no command is inputted by user.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"kheekheekhee"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"kheekheekhee"},"content":"public class EmptyCommandException extends DukeException {","lastModifiedDate":"2021-08-16"},{"lineNumber":7,"author":{"gitId":"kheekheekhee"},"content":"    public EmptyCommandException() {","lastModifiedDate":"2021-08-16"},{"lineNumber":8,"author":{"gitId":"kheekheekhee"},"content":"        super(\"You left the field blank!\");","lastModifiedDate":"2021-08-16"},{"lineNumber":9,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":10,"author":{"gitId":"kheekheekhee"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"kheekheekhee":10}},{"path":"src/main/java/duke/exception/EmptyListException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kheekheekhee"},"content":"package duke.exception;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":3,"author":{"gitId":"kheekheekhee"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"kheekheekhee"},"content":" * Exception of Duke that occurs when attempting to access an empty task list.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"kheekheekhee"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"kheekheekhee"},"content":"public class EmptyListException extends DukeException {","lastModifiedDate":"2021-08-16"},{"lineNumber":7,"author":{"gitId":"kheekheekhee"},"content":"    public EmptyListException() {","lastModifiedDate":"2021-08-16"},{"lineNumber":8,"author":{"gitId":"kheekheekhee"},"content":"        super(\"The list is currently empty!\");","lastModifiedDate":"2021-08-16"},{"lineNumber":9,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":10,"author":{"gitId":"kheekheekhee"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"kheekheekhee":10}},{"path":"src/main/java/duke/exception/IncorrectFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kheekheekhee"},"content":"package duke.exception;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":3,"author":{"gitId":"kheekheekhee"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"kheekheekhee"},"content":" * Exception of Duke that occurs when an incorrect format is used for event or deadline.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"kheekheekhee"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"kheekheekhee"},"content":"public class IncorrectFormatException extends DukeException {","lastModifiedDate":"2021-08-16"},{"lineNumber":7,"author":{"gitId":"kheekheekhee"},"content":"    public IncorrectFormatException(String command, String missingWord) {","lastModifiedDate":"2021-08-16"},{"lineNumber":8,"author":{"gitId":"kheekheekhee"},"content":"        super(\"Please use \" + missingWord + \" when you want to call the \"","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"kheekheekhee"},"content":"                + command","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"kheekheekhee"},"content":"                + \" command and include the date and time as YYYY/MM/DD and HHMM in 24 hour format.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":12,"author":{"gitId":"kheekheekhee"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"kheekheekhee":12}},{"path":"src/main/java/duke/exception/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kheekheekhee"},"content":"package duke.exception;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":3,"author":{"gitId":"kheekheekhee"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"kheekheekhee"},"content":" * Exception of Duke that occurs when an unknown command is given.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"kheekheekhee"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"kheekheekhee"},"content":"public class InvalidCommandException extends DukeException {","lastModifiedDate":"2021-08-16"},{"lineNumber":7,"author":{"gitId":"kheekheekhee"},"content":"    public InvalidCommandException() {","lastModifiedDate":"2021-08-16"},{"lineNumber":8,"author":{"gitId":"kheekheekhee"},"content":"        super(\"Sorry, I don\u0027t understand that command.\");","lastModifiedDate":"2021-08-16"},{"lineNumber":9,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":10,"author":{"gitId":"kheekheekhee"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"kheekheekhee":10}},{"path":"src/main/java/duke/exception/InvalidDateTimeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kheekheekhee"},"content":"package duke.exception;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"kheekheekhee"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"kheekheekhee"},"content":" * Exception of Duke that occurs when the date or time format given is invalid.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"kheekheekhee"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"kheekheekhee"},"content":"public class InvalidDateTimeException extends DukeException {","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"kheekheekhee"},"content":"    public InvalidDateTimeException() {","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"kheekheekhee"},"content":"        super(\"Your date or time format is wrong! \" +","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"kheekheekhee"},"content":"                \"Please use the format YYYY/MM/DD HHMM where the time is in 24 hours.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"kheekheekhee"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"kheekheekhee":11}},{"path":"src/main/java/duke/exception/InvalidDurationException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kheekheekhee"},"content":"package duke.exception;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"kheekheekhee"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"kheekheekhee"},"content":" * Exception of Duke that occurs when the date or time format in event given is invalid.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"kheekheekhee"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"kheekheekhee"},"content":"public class InvalidDurationException extends DukeException {","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"kheekheekhee"},"content":"    public InvalidDurationException() {","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"kheekheekhee"},"content":"        super(\"Please define the duration of your event in the following format: \" +","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"kheekheekhee"},"content":"                \"YYYY/MM/DD HHMM - HHMM in the 24 hours format.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"kheekheekhee"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"kheekheekhee":11}},{"path":"src/main/java/duke/exception/InvalidIndexException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kheekheekhee"},"content":"package duke.exception;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":3,"author":{"gitId":"kheekheekhee"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"kheekheekhee"},"content":" * Exception of Duke that occurs when attempting to access an index out of bounds of the task list.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"kheekheekhee"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"kheekheekhee"},"content":"public class InvalidIndexException extends DukeException {","lastModifiedDate":"2021-08-16"},{"lineNumber":7,"author":{"gitId":"kheekheekhee"},"content":"    public InvalidIndexException(int start, int end, int actual) {","lastModifiedDate":"2021-08-16"},{"lineNumber":8,"author":{"gitId":"kheekheekhee"},"content":"        super(\"You entered an invalid task number of \" + actual + \". Please enter a task number from \" + start + \" to \" + end + \".\");","lastModifiedDate":"2021-08-16"},{"lineNumber":9,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":10,"author":{"gitId":"kheekheekhee"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"kheekheekhee":10}},{"path":"src/main/java/duke/exception/MessageEmptyException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kheekheekhee"},"content":"package duke.exception;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":3,"author":{"gitId":"kheekheekhee"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"kheekheekhee"},"content":" * Exception of Duke that occurs when message of task is empty.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"kheekheekhee"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"kheekheekhee"},"content":"public class MessageEmptyException extends DukeException {","lastModifiedDate":"2021-08-16"},{"lineNumber":7,"author":{"gitId":"kheekheekhee"},"content":"    public MessageEmptyException() {","lastModifiedDate":"2021-08-16"},{"lineNumber":8,"author":{"gitId":"kheekheekhee"},"content":"        super(\"You forgot to enter a message after the command!\");","lastModifiedDate":"2021-08-16"},{"lineNumber":9,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":10,"author":{"gitId":"kheekheekhee"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"kheekheekhee":10}},{"path":"src/main/java/duke/exception/TaskNotFoundException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kheekheekhee"},"content":"package duke.exception;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"kheekheekhee"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"kheekheekhee"},"content":" * TaskNotFoundException of DukeException.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"kheekheekhee"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"kheekheekhee"},"content":"public class TaskNotFoundException extends DukeException {","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"kheekheekhee"},"content":"    public TaskNotFoundException() {","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"kheekheekhee"},"content":"        super(\"Sorry! I couldn\u0027t find what you were looking for!\");","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"kheekheekhee"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"kheekheekhee":10}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kheekheekhee"},"content":"package duke.parser;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"kheekheekhee"},"content":"import duke.exception.TaskNotFoundException;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"kheekheekhee"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"kheekheekhee"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"kheekheekhee"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"kheekheekhee"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"kheekheekhee"},"content":"import duke.exception.EmptyCommandException;","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"kheekheekhee"},"content":"import duke.exception.IncorrectFormatException;","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"kheekheekhee"},"content":"import duke.exception.InvalidCommandException;","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"kheekheekhee"},"content":"import duke.exception.InvalidDateTimeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"kheekheekhee"},"content":"import duke.exception.MessageEmptyException;","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"kheekheekhee"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"kheekheekhee"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"kheekheekhee"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"kheekheekhee"},"content":" * Handles and interprets user commands for Duke.","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"kheekheekhee"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"kheekheekhee"},"content":"public class Parser {","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"kheekheekhee"},"content":"    /** List of tasks */","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"kheekheekhee"},"content":"    private final TaskList taskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"kheekheekhee"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"kheekheekhee"},"content":"     * Constructor for Parser.","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"kheekheekhee"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"kheekheekhee"},"content":"     * @param taskList list of tasks.","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"kheekheekhee"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"kheekheekhee"},"content":"    public Parser(TaskList taskList) {","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"kheekheekhee"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"kheekheekhee"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"kheekheekhee"},"content":"     * Logic for handling different commands and executing the appropriate methods for the inputted command.","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"kheekheekhee"},"content":"     * Throws appropriate exceptions for its respective error.","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"kheekheekhee"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"kheekheekhee"},"content":"     * @param input The entire user input.","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"kheekheekhee"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"kheekheekhee"},"content":"    public void handleCommands(String input) {","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"kheekheekhee"},"content":"        // isolates the command word","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"kheekheekhee"},"content":"        String[] words \u003d input.split(\" \");","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"kheekheekhee"},"content":"        String command \u003d words[0];","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"kheekheekhee"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"kheekheekhee"},"content":"            switch (command) {","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"kheekheekhee"},"content":"            case \"list\":","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"kheekheekhee"},"content":"                taskList.displayList();","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"kheekheekhee"},"content":"                break;","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"kheekheekhee"},"content":"            case \"done\":","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"kheekheekhee"},"content":"                if (words.length \u003d\u003d 1) {","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"kheekheekhee"},"content":"                    // throws an error if there is no message input after the command word","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"kheekheekhee"},"content":"                    throw new MessageEmptyException();","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"kheekheekhee"},"content":"                }","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"kheekheekhee"},"content":"                // extracts index of task to mark as done","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"kheekheekhee"},"content":"                String doneTaskIndex \u003d words[words.length - 1];","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"kheekheekhee"},"content":"                taskList.markDone(doneTaskIndex);","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"kheekheekhee"},"content":"                break;","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"kheekheekhee"},"content":"            case \"deadline\":","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"kheekheekhee"},"content":"                if (words.length \u003d\u003d 1) {","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"kheekheekhee"},"content":"                    // throws an error if there is no message input after the command word","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"kheekheekhee"},"content":"                    throw new MessageEmptyException();","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"kheekheekhee"},"content":"                }","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"kheekheekhee"},"content":"                try {","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"kheekheekhee"},"content":"                    // excludes command \"deadline \" from the string","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"kheekheekhee"},"content":"                    taskList.addDeadline(input.substring(9));","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"kheekheekhee"},"content":"                } catch (InvalidDateTimeException | MessageEmptyException | IncorrectFormatException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"kheekheekhee"},"content":"                    System.out.println(e.getMessage());","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"kheekheekhee"},"content":"                }","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"kheekheekhee"},"content":"                break;","lastModifiedDate":"2021-08-25"},{"lineNumber":76,"author":{"gitId":"kheekheekhee"},"content":"            case \"todo\":","lastModifiedDate":"2021-08-25"},{"lineNumber":77,"author":{"gitId":"kheekheekhee"},"content":"                if (words.length \u003d\u003d 1) {","lastModifiedDate":"2021-08-25"},{"lineNumber":78,"author":{"gitId":"kheekheekhee"},"content":"                    // throws an error if there is no message input after the command word","lastModifiedDate":"2021-08-25"},{"lineNumber":79,"author":{"gitId":"kheekheekhee"},"content":"                    throw new MessageEmptyException();","lastModifiedDate":"2021-08-25"},{"lineNumber":80,"author":{"gitId":"kheekheekhee"},"content":"                }","lastModifiedDate":"2021-08-25"},{"lineNumber":81,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":82,"author":{"gitId":"kheekheekhee"},"content":"                // excludes command \"todo\" from the string","lastModifiedDate":"2021-08-25"},{"lineNumber":83,"author":{"gitId":"kheekheekhee"},"content":"                taskList.addTodo(input.substring(5));","lastModifiedDate":"2021-08-25"},{"lineNumber":84,"author":{"gitId":"kheekheekhee"},"content":"                break;","lastModifiedDate":"2021-08-25"},{"lineNumber":85,"author":{"gitId":"kheekheekhee"},"content":"            case \"event\":","lastModifiedDate":"2021-08-25"},{"lineNumber":86,"author":{"gitId":"kheekheekhee"},"content":"                if (words.length \u003d\u003d 1) {","lastModifiedDate":"2021-08-25"},{"lineNumber":87,"author":{"gitId":"kheekheekhee"},"content":"                    // throws an error if there is no message input after the command word","lastModifiedDate":"2021-08-25"},{"lineNumber":88,"author":{"gitId":"kheekheekhee"},"content":"                    throw new MessageEmptyException();","lastModifiedDate":"2021-08-25"},{"lineNumber":89,"author":{"gitId":"kheekheekhee"},"content":"                }","lastModifiedDate":"2021-08-25"},{"lineNumber":90,"author":{"gitId":"kheekheekhee"},"content":"                // excludes command \"event\" from the string","lastModifiedDate":"2021-08-25"},{"lineNumber":91,"author":{"gitId":"kheekheekhee"},"content":"                taskList.addEvent(input.substring(6));","lastModifiedDate":"2021-08-25"},{"lineNumber":92,"author":{"gitId":"kheekheekhee"},"content":"                break;","lastModifiedDate":"2021-08-25"},{"lineNumber":93,"author":{"gitId":"kheekheekhee"},"content":"            case \"delete\":","lastModifiedDate":"2021-08-25"},{"lineNumber":94,"author":{"gitId":"kheekheekhee"},"content":"                if (words.length \u003d\u003d 1) {","lastModifiedDate":"2021-08-25"},{"lineNumber":95,"author":{"gitId":"kheekheekhee"},"content":"                    // throws an error if there is no message input after the command word","lastModifiedDate":"2021-08-25"},{"lineNumber":96,"author":{"gitId":"kheekheekhee"},"content":"                    throw new MessageEmptyException();","lastModifiedDate":"2021-08-25"},{"lineNumber":97,"author":{"gitId":"kheekheekhee"},"content":"                }","lastModifiedDate":"2021-08-25"},{"lineNumber":98,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":99,"author":{"gitId":"kheekheekhee"},"content":"                // extracts index of task to delete","lastModifiedDate":"2021-08-26"},{"lineNumber":100,"author":{"gitId":"kheekheekhee"},"content":"                String deleteTaskIndex \u003d words[words.length - 1];","lastModifiedDate":"2021-08-25"},{"lineNumber":101,"author":{"gitId":"kheekheekhee"},"content":"                taskList.deleteTask(deleteTaskIndex);","lastModifiedDate":"2021-08-25"},{"lineNumber":102,"author":{"gitId":"kheekheekhee"},"content":"                break;","lastModifiedDate":"2021-08-25"},{"lineNumber":103,"author":{"gitId":"kheekheekhee"},"content":"            case \"find\":","lastModifiedDate":"2021-08-26"},{"lineNumber":104,"author":{"gitId":"kheekheekhee"},"content":"                if (words.length \u003d\u003d 1) {","lastModifiedDate":"2021-08-26"},{"lineNumber":105,"author":{"gitId":"kheekheekhee"},"content":"                    throw new MessageEmptyException();","lastModifiedDate":"2021-08-26"},{"lineNumber":106,"author":{"gitId":"kheekheekhee"},"content":"                }","lastModifiedDate":"2021-08-26"},{"lineNumber":107,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":108,"author":{"gitId":"kheekheekhee"},"content":"                ArrayList\u003cString\u003e isolateCommand \u003d new ArrayList\u003c\u003e(Arrays.asList(words));","lastModifiedDate":"2021-08-26"},{"lineNumber":109,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":110,"author":{"gitId":"kheekheekhee"},"content":"                // remove \"find\"","lastModifiedDate":"2021-08-26"},{"lineNumber":111,"author":{"gitId":"kheekheekhee"},"content":"                isolateCommand.remove(0);","lastModifiedDate":"2021-08-26"},{"lineNumber":112,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":113,"author":{"gitId":"kheekheekhee"},"content":"                String query \u003d String.join(\" \", isolateCommand);","lastModifiedDate":"2021-08-26"},{"lineNumber":114,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":115,"author":{"gitId":"kheekheekhee"},"content":"                ArrayList\u003cTask\u003e matchedTasks \u003d taskList.findTask(query);","lastModifiedDate":"2021-08-26"},{"lineNumber":116,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":117,"author":{"gitId":"kheekheekhee"},"content":"                if (matchedTasks.size() \u003d\u003d 0) {","lastModifiedDate":"2021-08-26"},{"lineNumber":118,"author":{"gitId":"kheekheekhee"},"content":"                    throw new TaskNotFoundException();","lastModifiedDate":"2021-08-26"},{"lineNumber":119,"author":{"gitId":"kheekheekhee"},"content":"                }","lastModifiedDate":"2021-08-26"},{"lineNumber":120,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":121,"author":{"gitId":"kheekheekhee"},"content":"                Ui.printList(matchedTasks);","lastModifiedDate":"2021-08-26"},{"lineNumber":122,"author":{"gitId":"kheekheekhee"},"content":"                break;","lastModifiedDate":"2021-08-26"},{"lineNumber":123,"author":{"gitId":"kheekheekhee"},"content":"            case \"\":                                // empty user input","lastModifiedDate":"2021-08-25"},{"lineNumber":124,"author":{"gitId":"kheekheekhee"},"content":"                throw new EmptyCommandException();","lastModifiedDate":"2021-08-25"},{"lineNumber":125,"author":{"gitId":"kheekheekhee"},"content":"            default:                                // all other inputs that are not supported","lastModifiedDate":"2021-08-25"},{"lineNumber":126,"author":{"gitId":"kheekheekhee"},"content":"                throw new InvalidCommandException();","lastModifiedDate":"2021-08-25"},{"lineNumber":127,"author":{"gitId":"kheekheekhee"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":128,"author":{"gitId":"kheekheekhee"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":129,"author":{"gitId":"kheekheekhee"},"content":"            Ui.printMessage(e.getMessage());        // prints only error message out for user","lastModifiedDate":"2021-08-26"},{"lineNumber":130,"author":{"gitId":"kheekheekhee"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":131,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":132,"author":{"gitId":"kheekheekhee"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"kheekheekhee":132}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kheekheekhee"},"content":"package duke.storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"kheekheekhee"},"content":"import duke.tasks.Deadline;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"kheekheekhee"},"content":"import duke.tasks.Event;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"kheekheekhee"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"kheekheekhee"},"content":"import duke.tasks.Todo;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"kheekheekhee"},"content":"import duke.exception.DataFileChangedException;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"kheekheekhee"},"content":"import java.io.File;","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"kheekheekhee"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"kheekheekhee"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"kheekheekhee"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"kheekheekhee"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"kheekheekhee"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"kheekheekhee"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"kheekheekhee"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"kheekheekhee"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"kheekheekhee"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"kheekheekhee"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"kheekheekhee"},"content":" * Handles loading and saving tasks from the data file.","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"kheekheekhee"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"kheekheekhee"},"content":"public class Storage {","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"kheekheekhee"},"content":"    /** Path to data file. */","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"kheekheekhee"},"content":"    private final String filePath;","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"kheekheekhee"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"kheekheekhee"},"content":"     * Constructor for Storage class.","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"kheekheekhee"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"kheekheekhee"},"content":"     * @param filePath path to data file.","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"kheekheekhee"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"kheekheekhee"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"kheekheekhee"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"kheekheekhee"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"kheekheekhee"},"content":"     * Saves and writes the current tasks to the data file.","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"kheekheekhee"},"content":"     * If the file does not exist, it will create a new file.","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"kheekheekhee"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"kheekheekhee"},"content":"     * @param taskList contains all current tasks.","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"kheekheekhee"},"content":"     * @throws IOException if the named file exists but is a directory","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"kheekheekhee"},"content":"     * rather than a regular file, does not exist but cannot be created,","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"kheekheekhee"},"content":"     * or cannot be opened for any other reason.","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"kheekheekhee"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"kheekheekhee"},"content":"    public void save(ArrayList\u003cTask\u003e taskList) throws IOException {","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"kheekheekhee"},"content":"        FileWriter fw \u003d new FileWriter(filePath);","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"kheekheekhee"},"content":"        for (Task task : taskList) {","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"kheekheekhee"},"content":"            fw.write(task.toString() + \"\\n\");","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"kheekheekhee"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"kheekheekhee"},"content":"        fw.flush();","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"kheekheekhee"},"content":"        fw.close();","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"kheekheekhee"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"kheekheekhee"},"content":"     * Loads data from data file.","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"kheekheekhee"},"content":"     * If the data file does not exist, a new data file will be created.","lastModifiedDate":"2021-08-26"},{"lineNumber":63,"author":{"gitId":"kheekheekhee"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":64,"author":{"gitId":"kheekheekhee"},"content":"     * @return an arraylist of tasks which contains any task read from the data file.","lastModifiedDate":"2021-08-26"},{"lineNumber":65,"author":{"gitId":"kheekheekhee"},"content":"     * @throws IOException  if the named file exists but is a directory rather than a regular file,","lastModifiedDate":"2021-08-26"},{"lineNumber":66,"author":{"gitId":"kheekheekhee"},"content":"     * does not exist but cannot be created, or cannot be opened for any other reason.","lastModifiedDate":"2021-08-26"},{"lineNumber":67,"author":{"gitId":"kheekheekhee"},"content":"     * @throws DataFileChangedException if the data file was changed and any entry contains a wrong format.","lastModifiedDate":"2021-08-26"},{"lineNumber":68,"author":{"gitId":"kheekheekhee"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":69,"author":{"gitId":"kheekheekhee"},"content":"    public ArrayList\u003cTask\u003e load() throws IOException, DataFileChangedException {","lastModifiedDate":"2021-08-26"},{"lineNumber":70,"author":{"gitId":"kheekheekhee"},"content":"        File file \u003d new File(filePath);","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"kheekheekhee"},"content":"        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"kheekheekhee"},"content":"        // if file not present it creates a file, else it does nothing","lastModifiedDate":"2021-08-26"},{"lineNumber":75,"author":{"gitId":"kheekheekhee"},"content":"        if (file.createNewFile()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":76,"author":{"gitId":"kheekheekhee"},"content":"            // exit method if a new file is created","lastModifiedDate":"2021-08-25"},{"lineNumber":77,"author":{"gitId":"kheekheekhee"},"content":"            return taskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":78,"author":{"gitId":"kheekheekhee"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":79,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":80,"author":{"gitId":"kheekheekhee"},"content":"        Scanner sc \u003d new Scanner(file);","lastModifiedDate":"2021-08-25"},{"lineNumber":81,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":82,"author":{"gitId":"kheekheekhee"},"content":"        while(sc.hasNext()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":83,"author":{"gitId":"kheekheekhee"},"content":"            String nextCommand \u003d sc.nextLine();","lastModifiedDate":"2021-08-25"},{"lineNumber":84,"author":{"gitId":"kheekheekhee"},"content":"            Task task;","lastModifiedDate":"2021-08-25"},{"lineNumber":85,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":86,"author":{"gitId":"kheekheekhee"},"content":"            switch (nextCommand.charAt(1)) {","lastModifiedDate":"2021-08-25"},{"lineNumber":87,"author":{"gitId":"kheekheekhee"},"content":"            case \u0027D\u0027:","lastModifiedDate":"2021-08-25"},{"lineNumber":88,"author":{"gitId":"kheekheekhee"},"content":"                try {","lastModifiedDate":"2021-08-25"},{"lineNumber":89,"author":{"gitId":"kheekheekhee"},"content":"                    task \u003d extractDeadline(nextCommand.substring(7));   // [D][X] something by time","lastModifiedDate":"2021-08-25"},{"lineNumber":90,"author":{"gitId":"kheekheekhee"},"content":"                    break;","lastModifiedDate":"2021-08-25"},{"lineNumber":91,"author":{"gitId":"kheekheekhee"},"content":"                } catch (DataFileChangedException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":92,"author":{"gitId":"kheekheekhee"},"content":"                    throw new DataFileChangedException();","lastModifiedDate":"2021-08-26"},{"lineNumber":93,"author":{"gitId":"kheekheekhee"},"content":"                }","lastModifiedDate":"2021-08-25"},{"lineNumber":94,"author":{"gitId":"kheekheekhee"},"content":"            case \u0027E\u0027:","lastModifiedDate":"2021-08-25"},{"lineNumber":95,"author":{"gitId":"kheekheekhee"},"content":"                try {","lastModifiedDate":"2021-08-25"},{"lineNumber":96,"author":{"gitId":"kheekheekhee"},"content":"                    task \u003d extractEvent(nextCommand.substring(7));      // [D][X] something at time","lastModifiedDate":"2021-08-25"},{"lineNumber":97,"author":{"gitId":"kheekheekhee"},"content":"                    break;","lastModifiedDate":"2021-08-25"},{"lineNumber":98,"author":{"gitId":"kheekheekhee"},"content":"                } catch (DataFileChangedException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":99,"author":{"gitId":"kheekheekhee"},"content":"                    throw new DataFileChangedException();","lastModifiedDate":"2021-08-26"},{"lineNumber":100,"author":{"gitId":"kheekheekhee"},"content":"                }","lastModifiedDate":"2021-08-25"},{"lineNumber":101,"author":{"gitId":"kheekheekhee"},"content":"            case \u0027T\u0027:                                                   // todos","lastModifiedDate":"2021-08-26"},{"lineNumber":102,"author":{"gitId":"kheekheekhee"},"content":"                task \u003d new Todo(nextCommand.substring(7));              // disregards [T][X]","lastModifiedDate":"2021-08-25"},{"lineNumber":103,"author":{"gitId":"kheekheekhee"},"content":"                break;","lastModifiedDate":"2021-08-26"},{"lineNumber":104,"author":{"gitId":"kheekheekhee"},"content":"            default:","lastModifiedDate":"2021-08-26"},{"lineNumber":105,"author":{"gitId":"kheekheekhee"},"content":"                throw new DataFileChangedException();","lastModifiedDate":"2021-08-26"},{"lineNumber":106,"author":{"gitId":"kheekheekhee"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":107,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":108,"author":{"gitId":"kheekheekhee"},"content":"            // check if marked as done","lastModifiedDate":"2021-08-26"},{"lineNumber":109,"author":{"gitId":"kheekheekhee"},"content":"            if (nextCommand.charAt(4) \u003d\u003d \u0027X\u0027) {","lastModifiedDate":"2021-08-25"},{"lineNumber":110,"author":{"gitId":"kheekheekhee"},"content":"                task.markAsDone();","lastModifiedDate":"2021-08-25"},{"lineNumber":111,"author":{"gitId":"kheekheekhee"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":112,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":113,"author":{"gitId":"kheekheekhee"},"content":"            taskList.add(task);","lastModifiedDate":"2021-08-25"},{"lineNumber":114,"author":{"gitId":"kheekheekhee"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":115,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":116,"author":{"gitId":"kheekheekhee"},"content":"        sc.close();","lastModifiedDate":"2021-08-25"},{"lineNumber":117,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":118,"author":{"gitId":"kheekheekhee"},"content":"        return taskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":119,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":120,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":121,"author":{"gitId":"kheekheekhee"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":122,"author":{"gitId":"kheekheekhee"},"content":"     * Extracts a deadline from the data file in the proper format for duke to read.","lastModifiedDate":"2021-08-26"},{"lineNumber":123,"author":{"gitId":"kheekheekhee"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":124,"author":{"gitId":"kheekheekhee"},"content":"     * @param text the deadline in the data file.","lastModifiedDate":"2021-08-26"},{"lineNumber":125,"author":{"gitId":"kheekheekhee"},"content":"     * @return a new deadline that represents the deadline from the data file.","lastModifiedDate":"2021-08-26"},{"lineNumber":126,"author":{"gitId":"kheekheekhee"},"content":"     * @throws DataFileChangedException if the data file was changed and any entry contains a wrong format.","lastModifiedDate":"2021-08-26"},{"lineNumber":127,"author":{"gitId":"kheekheekhee"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":128,"author":{"gitId":"kheekheekhee"},"content":"    private Deadline extractDeadline(String text) throws DataFileChangedException {","lastModifiedDate":"2021-08-25"},{"lineNumber":129,"author":{"gitId":"kheekheekhee"},"content":"        int lastOccurrenceOfBy \u003d text.lastIndexOf(\" (by: \"); // in case other bys appear","lastModifiedDate":"2021-08-25"},{"lineNumber":130,"author":{"gitId":"kheekheekhee"},"content":"        String description \u003d text.substring(0, lastOccurrenceOfBy);","lastModifiedDate":"2021-08-25"},{"lineNumber":131,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":132,"author":{"gitId":"kheekheekhee"},"content":"        // disregards \"( by: \" and trailing \")\"","lastModifiedDate":"2021-08-25"},{"lineNumber":133,"author":{"gitId":"kheekheekhee"},"content":"        String by \u003d text.substring(lastOccurrenceOfBy + 6, text.length() - 1);","lastModifiedDate":"2021-08-25"},{"lineNumber":134,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":135,"author":{"gitId":"kheekheekhee"},"content":"        LocalDateTime dateTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":136,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":137,"author":{"gitId":"kheekheekhee"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":138,"author":{"gitId":"kheekheekhee"},"content":"            dateTime \u003d LocalDateTime.parse(by, DateTimeFormatter.ofPattern(\"MMM d yyyy, h:mm a\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":139,"author":{"gitId":"kheekheekhee"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":140,"author":{"gitId":"kheekheekhee"},"content":"            throw new DataFileChangedException();","lastModifiedDate":"2021-08-25"},{"lineNumber":141,"author":{"gitId":"kheekheekhee"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":142,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":143,"author":{"gitId":"kheekheekhee"},"content":"        return new Deadline(description, dateTime);","lastModifiedDate":"2021-08-25"},{"lineNumber":144,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":145,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":146,"author":{"gitId":"kheekheekhee"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":147,"author":{"gitId":"kheekheekhee"},"content":"     * Extracts an event from the data file in the proper format for duke to read.","lastModifiedDate":"2021-08-26"},{"lineNumber":148,"author":{"gitId":"kheekheekhee"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":149,"author":{"gitId":"kheekheekhee"},"content":"     * @param text the event in the data file.","lastModifiedDate":"2021-08-26"},{"lineNumber":150,"author":{"gitId":"kheekheekhee"},"content":"     * @return a new deadline that represents the deadline from the data file.","lastModifiedDate":"2021-08-26"},{"lineNumber":151,"author":{"gitId":"kheekheekhee"},"content":"     * @throws DataFileChangedException if the data file was changed and any entry contains a wrong format.","lastModifiedDate":"2021-08-26"},{"lineNumber":152,"author":{"gitId":"kheekheekhee"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":153,"author":{"gitId":"kheekheekhee"},"content":"    private Event extractEvent(String text) throws DataFileChangedException {","lastModifiedDate":"2021-08-25"},{"lineNumber":154,"author":{"gitId":"kheekheekhee"},"content":"        int lastOccurrenceOfAt \u003d text.lastIndexOf(\" (at: \");","lastModifiedDate":"2021-08-25"},{"lineNumber":155,"author":{"gitId":"kheekheekhee"},"content":"        String description \u003d text.substring(0, lastOccurrenceOfAt);","lastModifiedDate":"2021-08-25"},{"lineNumber":156,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":157,"author":{"gitId":"kheekheekhee"},"content":"        // disregards \"( at: \" and trailing \")\"","lastModifiedDate":"2021-08-25"},{"lineNumber":158,"author":{"gitId":"kheekheekhee"},"content":"        String at \u003d text.substring(lastOccurrenceOfAt + 6, text.length() - 1);","lastModifiedDate":"2021-08-25"},{"lineNumber":159,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":160,"author":{"gitId":"kheekheekhee"},"content":"        // prepare variables","lastModifiedDate":"2021-08-26"},{"lineNumber":161,"author":{"gitId":"kheekheekhee"},"content":"        String atWithoutWhiteSpace \u003d at.replaceAll(\"\\\\s\", \"\");","lastModifiedDate":"2021-08-26"},{"lineNumber":162,"author":{"gitId":"kheekheekhee"},"content":"        int lengthOfAtNoSpace \u003d atWithoutWhiteSpace.length();","lastModifiedDate":"2021-08-26"},{"lineNumber":163,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":164,"author":{"gitId":"kheekheekhee"},"content":"        // throws error if it doesn\u0027t even contain sufficient number of characters for correct format","lastModifiedDate":"2021-08-25"},{"lineNumber":165,"author":{"gitId":"kheekheekhee"},"content":"        if (lengthOfAtNoSpace \u003c 22 || lengthOfAtNoSpace \u003e 25) { // MMM d yyyy, HH:mm - HH:mm","lastModifiedDate":"2021-08-26"},{"lineNumber":166,"author":{"gitId":"kheekheekhee"},"content":"            throw new DataFileChangedException();","lastModifiedDate":"2021-08-25"},{"lineNumber":167,"author":{"gitId":"kheekheekhee"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":168,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":169,"author":{"gitId":"kheekheekhee"},"content":"        // find start and end times","lastModifiedDate":"2021-08-26"},{"lineNumber":170,"author":{"gitId":"kheekheekhee"},"content":"        int indexOfComma \u003d at.indexOf(\u0027,\u0027);","lastModifiedDate":"2021-08-25"},{"lineNumber":171,"author":{"gitId":"kheekheekhee"},"content":"        String date \u003d at.substring(0, indexOfComma).trim(); // at this point, date contains 10 chars YYYY/MM/DD","lastModifiedDate":"2021-08-25"},{"lineNumber":172,"author":{"gitId":"kheekheekhee"},"content":"        String eventDuration \u003d at.substring(indexOfComma + 1).trim();","lastModifiedDate":"2021-08-25"},{"lineNumber":173,"author":{"gitId":"kheekheekhee"},"content":"        String[] eventTimes \u003d eventDuration.split(\"-\");","lastModifiedDate":"2021-08-25"},{"lineNumber":174,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":175,"author":{"gitId":"kheekheekhee"},"content":"        // if no \"-\" present","lastModifiedDate":"2021-08-25"},{"lineNumber":176,"author":{"gitId":"kheekheekhee"},"content":"        if (eventTimes.length !\u003d 2) {","lastModifiedDate":"2021-08-25"},{"lineNumber":177,"author":{"gitId":"kheekheekhee"},"content":"            throw new DataFileChangedException();","lastModifiedDate":"2021-08-25"},{"lineNumber":178,"author":{"gitId":"kheekheekhee"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":179,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":180,"author":{"gitId":"kheekheekhee"},"content":"        String startTime \u003d eventTimes[0].trim();","lastModifiedDate":"2021-08-25"},{"lineNumber":181,"author":{"gitId":"kheekheekhee"},"content":"        String endTime \u003d eventTimes[1].trim();","lastModifiedDate":"2021-08-25"},{"lineNumber":182,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":183,"author":{"gitId":"kheekheekhee"},"content":"        LocalDate finalDate;","lastModifiedDate":"2021-08-25"},{"lineNumber":184,"author":{"gitId":"kheekheekhee"},"content":"        LocalTime finalStartTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":185,"author":{"gitId":"kheekheekhee"},"content":"        LocalTime finalEndTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":186,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":187,"author":{"gitId":"kheekheekhee"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":188,"author":{"gitId":"kheekheekhee"},"content":"            // checks if the formats of the input date and time are correct","lastModifiedDate":"2021-08-25"},{"lineNumber":189,"author":{"gitId":"kheekheekhee"},"content":"            finalDate \u003d LocalDate.parse(date, DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":190,"author":{"gitId":"kheekheekhee"},"content":"            finalStartTime \u003d LocalTime.parse(startTime, DateTimeFormatter.ofPattern(\"h:mm a\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":191,"author":{"gitId":"kheekheekhee"},"content":"            finalEndTime \u003d LocalTime.parse(endTime, DateTimeFormatter.ofPattern(\"h:mm a\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":192,"author":{"gitId":"kheekheekhee"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":193,"author":{"gitId":"kheekheekhee"},"content":"            throw new DataFileChangedException();","lastModifiedDate":"2021-08-25"},{"lineNumber":194,"author":{"gitId":"kheekheekhee"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":195,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":196,"author":{"gitId":"kheekheekhee"},"content":"        return new Event(description, finalDate, finalStartTime, finalEndTime);","lastModifiedDate":"2021-08-25"},{"lineNumber":197,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":198,"author":{"gitId":"kheekheekhee"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"kheekheekhee":198}},{"path":"src/main/java/duke/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kheekheekhee"},"content":"package duke.tasks;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"kheekheekhee"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"kheekheekhee"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"kheekheekhee"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"kheekheekhee"},"content":" * Represents a task with a deadline.","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"kheekheekhee"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"kheekheekhee"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-15"},{"lineNumber":10,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":11,"author":{"gitId":"kheekheekhee"},"content":"    /** Date and time of deadline. */","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"kheekheekhee"},"content":"    private final LocalDateTime by;","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":14,"author":{"gitId":"kheekheekhee"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"kheekheekhee"},"content":"     * Constructor of Deadline.","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"kheekheekhee"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"kheekheekhee"},"content":"     * @param description description of task.","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"kheekheekhee"},"content":"     * @param by date and time of deadline.","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"kheekheekhee"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"kheekheekhee"},"content":"    public Deadline(String description, LocalDateTime by) {","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"kheekheekhee"},"content":"        super(description);","lastModifiedDate":"2021-08-15"},{"lineNumber":22,"author":{"gitId":"kheekheekhee"},"content":"        this.by \u003d by;","lastModifiedDate":"2021-08-15"},{"lineNumber":23,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":24,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":25,"author":{"gitId":"kheekheekhee"},"content":"    @Override","lastModifiedDate":"2021-08-15"},{"lineNumber":26,"author":{"gitId":"kheekheekhee"},"content":"    public String toString() {","lastModifiedDate":"2021-08-15"},{"lineNumber":27,"author":{"gitId":"kheekheekhee"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by.format(DateTimeFormatter.ofPattern(\"MMM d yyyy, h:mm a\")) + \")\";","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":29,"author":{"gitId":"kheekheekhee"},"content":"}","lastModifiedDate":"2021-08-15"}],"authorContributionMap":{"kheekheekhee":29}},{"path":"src/main/java/duke/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kheekheekhee"},"content":"package duke.tasks;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"kheekheekhee"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"kheekheekhee"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"kheekheekhee"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"kheekheekhee"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"kheekheekhee"},"content":" * Represents an event task.","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"kheekheekhee"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"kheekheekhee"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-15"},{"lineNumber":11,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":12,"author":{"gitId":"kheekheekhee"},"content":"    /** Date of event. */","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"kheekheekhee"},"content":"    private final LocalDate date;","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"kheekheekhee"},"content":"    /** Start time of event. */","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"kheekheekhee"},"content":"    private final LocalTime start;","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"kheekheekhee"},"content":"    /** End time of event. */","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"kheekheekhee"},"content":"    private final LocalTime end;","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":21,"author":{"gitId":"kheekheekhee"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"kheekheekhee"},"content":"     * Constructor of Event.","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"kheekheekhee"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"kheekheekhee"},"content":"     * @param description description of event.","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"kheekheekhee"},"content":"     * @param date date of event.","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"kheekheekhee"},"content":"     * @param start start time of event.","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"kheekheekhee"},"content":"     * @param end end time of event.","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"kheekheekhee"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"kheekheekhee"},"content":"    public Event(String description, LocalDate date, LocalTime start, LocalTime end) {","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"kheekheekhee"},"content":"        super(description);","lastModifiedDate":"2021-08-15"},{"lineNumber":31,"author":{"gitId":"kheekheekhee"},"content":"        this.date \u003d date;","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"kheekheekhee"},"content":"        this.start \u003d start;","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"kheekheekhee"},"content":"        this.end \u003d end;","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":35,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":36,"author":{"gitId":"kheekheekhee"},"content":"    @Override","lastModifiedDate":"2021-08-15"},{"lineNumber":37,"author":{"gitId":"kheekheekhee"},"content":"    public String toString() {","lastModifiedDate":"2021-08-15"},{"lineNumber":38,"author":{"gitId":"kheekheekhee"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"))","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"kheekheekhee"},"content":"                + \", \"","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"kheekheekhee"},"content":"                + start.format(DateTimeFormatter.ofPattern(\"h:mm a\"))","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"kheekheekhee"},"content":"                + \" - \"","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"kheekheekhee"},"content":"                + end.format(DateTimeFormatter.ofPattern(\"h:mm a\")) + \")\";","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":44,"author":{"gitId":"kheekheekhee"},"content":"}","lastModifiedDate":"2021-08-15"}],"authorContributionMap":{"kheekheekhee":44}},{"path":"src/main/java/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kheekheekhee"},"content":"package duke.tasks;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"kheekheekhee"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"kheekheekhee"},"content":" * Represents a task.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"kheekheekhee"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"kheekheekhee"},"content":"public class Task {","lastModifiedDate":"2021-08-15"},{"lineNumber":7,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"kheekheekhee"},"content":"    /** Description of task. */","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"kheekheekhee"},"content":"    private final String description;","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"kheekheekhee"},"content":"    /** Whether the task has been completed. */","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"kheekheekhee"},"content":"    private boolean isDone;","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":14,"author":{"gitId":"kheekheekhee"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"kheekheekhee"},"content":"     * Constructor for Task.","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"kheekheekhee"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"kheekheekhee"},"content":"     * @param description description of task.","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"kheekheekhee"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"kheekheekhee"},"content":"    public Task(String description) {","lastModifiedDate":"2021-08-15"},{"lineNumber":20,"author":{"gitId":"kheekheekhee"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-15"},{"lineNumber":21,"author":{"gitId":"kheekheekhee"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-15"},{"lineNumber":22,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":23,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":24,"author":{"gitId":"kheekheekhee"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-15"},{"lineNumber":25,"author":{"gitId":"kheekheekhee"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2021-08-15"},{"lineNumber":26,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":27,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":28,"author":{"gitId":"kheekheekhee"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"kheekheekhee"},"content":"     * Marks task as done.","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"kheekheekhee"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"kheekheekhee"},"content":"    public void markAsDone() {","lastModifiedDate":"2021-08-15"},{"lineNumber":32,"author":{"gitId":"kheekheekhee"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-08-15"},{"lineNumber":33,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":34,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":35,"author":{"gitId":"kheekheekhee"},"content":"    @Override","lastModifiedDate":"2021-08-15"},{"lineNumber":36,"author":{"gitId":"kheekheekhee"},"content":"    public String toString() {","lastModifiedDate":"2021-08-15"},{"lineNumber":37,"author":{"gitId":"kheekheekhee"},"content":"        return \"[\" + getStatusIcon() + \"] \" + this.description;","lastModifiedDate":"2021-08-15"},{"lineNumber":38,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":39,"author":{"gitId":"kheekheekhee"},"content":"}","lastModifiedDate":"2021-08-15"}],"authorContributionMap":{"kheekheekhee":39}},{"path":"src/main/java/duke/tasks/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kheekheekhee"},"content":"package duke.tasks;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"kheekheekhee"},"content":"import duke.exception.EmptyListException;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"kheekheekhee"},"content":"import duke.exception.IncorrectFormatException;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"kheekheekhee"},"content":"import duke.exception.InvalidDateTimeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"kheekheekhee"},"content":"import duke.exception.InvalidDurationException;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"kheekheekhee"},"content":"import duke.exception.InvalidIndexException;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"kheekheekhee"},"content":"import duke.exception.MessageEmptyException;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"kheekheekhee"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"kheekheekhee"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"kheekheekhee"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"kheekheekhee"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"kheekheekhee"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"kheekheekhee"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"kheekheekhee"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"kheekheekhee"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"kheekheekhee"},"content":" * Represents the list of tasks.","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"kheekheekhee"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"kheekheekhee"},"content":"public class TaskList {","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"kheekheekhee"},"content":"    /** The list of Task. */","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"kheekheekhee"},"content":"    private final ArrayList\u003cTask\u003e taskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"kheekheekhee"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"kheekheekhee"},"content":"     * Constructor for TaskList.","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"kheekheekhee"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"kheekheekhee"},"content":"    public TaskList() {","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"kheekheekhee"},"content":"        taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"kheekheekhee"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"kheekheekhee"},"content":"     * Overloaded constructor for TaskList that accepts a task list as an ArrayList.","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"kheekheekhee"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"kheekheekhee"},"content":"     * @param taskList list of tasks.","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"kheekheekhee"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"kheekheekhee"},"content":"    public TaskList(ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"kheekheekhee"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"kheekheekhee"},"content":"    public ArrayList\u003cTask\u003e getTaskList() {","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"kheekheekhee"},"content":"        return taskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"kheekheekhee"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"kheekheekhee"},"content":"     * Adds a task to the list of Tasks with a confirmation message printed out after.","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"kheekheekhee"},"content":"     * @param task The duke.tasks.Task to be added to the list of Tasks","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"kheekheekhee"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"kheekheekhee"},"content":"    public void addToList(Task task) {","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"kheekheekhee"},"content":"        taskList.add(task);","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"kheekheekhee"},"content":"        String message \u003d \"Got it. I\u0027ve added this task: Added: \" + task;","lastModifiedDate":"2021-08-26"},{"lineNumber":56,"author":{"gitId":"kheekheekhee"},"content":"        String taskGrammar \u003d (taskList.size() \u003d\u003d 1) ? \" task\" : \" tasks\";","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"kheekheekhee"},"content":"        Ui.printMessage(message + \"Now you have \" + taskList.size() + taskGrammar + \" in the list.\");","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"kheekheekhee"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"kheekheekhee"},"content":"     * Prints out the full contents of the list of Tasks.","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"kheekheekhee"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":63,"author":{"gitId":"kheekheekhee"},"content":"     * @throws EmptyListException if the list of Tasks is empty and there is nothing to be printed.","lastModifiedDate":"2021-08-26"},{"lineNumber":64,"author":{"gitId":"kheekheekhee"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"kheekheekhee"},"content":"    public void displayList() throws EmptyListException {","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"kheekheekhee"},"content":"        if (taskList.size() \u003d\u003d 0) {","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"kheekheekhee"},"content":"            throw new EmptyListException();","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"kheekheekhee"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"kheekheekhee"},"content":"        Ui.printList(taskList);","lastModifiedDate":"2021-08-26"},{"lineNumber":72,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"kheekheekhee"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"kheekheekhee"},"content":"     * Marks a current Task in the list of Tasks as Done.","lastModifiedDate":"2021-08-26"},{"lineNumber":76,"author":{"gitId":"kheekheekhee"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":77,"author":{"gitId":"kheekheekhee"},"content":"     * @param taskIndex The index of the duke.tasks.Task in the list of Tasks to be marked as Done.","lastModifiedDate":"2021-08-25"},{"lineNumber":78,"author":{"gitId":"kheekheekhee"},"content":"     * @throws EmptyListException If the list of Tasks is empty and there is nothing to be marked as Done.","lastModifiedDate":"2021-08-25"},{"lineNumber":79,"author":{"gitId":"kheekheekhee"},"content":"     * @throws InvalidIndexException If the index of the duke.tasks.Task provided is out of range of the current list of Tasks.","lastModifiedDate":"2021-08-25"},{"lineNumber":80,"author":{"gitId":"kheekheekhee"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":81,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":82,"author":{"gitId":"kheekheekhee"},"content":"    public void markDone(String taskIndex) throws EmptyListException, InvalidIndexException {","lastModifiedDate":"2021-08-25"},{"lineNumber":83,"author":{"gitId":"kheekheekhee"},"content":"        int intTaskIndex \u003d Integer.parseInt(taskIndex) - 1; // -1 because user inputs start from 1 not 0","lastModifiedDate":"2021-08-25"},{"lineNumber":84,"author":{"gitId":"kheekheekhee"},"content":"        int taskListSize \u003d taskList.size();","lastModifiedDate":"2021-08-25"},{"lineNumber":85,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":86,"author":{"gitId":"kheekheekhee"},"content":"        if (taskListSize \u003d\u003d 0) {","lastModifiedDate":"2021-08-25"},{"lineNumber":87,"author":{"gitId":"kheekheekhee"},"content":"            throw new EmptyListException();","lastModifiedDate":"2021-08-25"},{"lineNumber":88,"author":{"gitId":"kheekheekhee"},"content":"        } else if (intTaskIndex \u003c 0 || intTaskIndex \u003e\u003d taskListSize) {","lastModifiedDate":"2021-08-25"},{"lineNumber":89,"author":{"gitId":"kheekheekhee"},"content":"            throw new InvalidIndexException(1, taskListSize, intTaskIndex + 1);","lastModifiedDate":"2021-08-25"},{"lineNumber":90,"author":{"gitId":"kheekheekhee"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":91,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":92,"author":{"gitId":"kheekheekhee"},"content":"        Task task \u003d taskList.get(intTaskIndex);","lastModifiedDate":"2021-08-25"},{"lineNumber":93,"author":{"gitId":"kheekheekhee"},"content":"        task.markAsDone();","lastModifiedDate":"2021-08-25"},{"lineNumber":94,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":95,"author":{"gitId":"kheekheekhee"},"content":"        String message \u003d \"Nice! I\u0027ve marked this task as done:\\n\" + task;","lastModifiedDate":"2021-08-26"},{"lineNumber":96,"author":{"gitId":"kheekheekhee"},"content":"        Ui.printMessage(message);","lastModifiedDate":"2021-08-26"},{"lineNumber":97,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":98,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":99,"author":{"gitId":"kheekheekhee"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":100,"author":{"gitId":"kheekheekhee"},"content":"     * Adds a Deadline to the list of Tasks.","lastModifiedDate":"2021-08-26"},{"lineNumber":101,"author":{"gitId":"kheekheekhee"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":102,"author":{"gitId":"kheekheekhee"},"content":"     * @param deadline The Deadline to be added to the list of Tasks which is the whole input barring the command.","lastModifiedDate":"2021-08-26"},{"lineNumber":103,"author":{"gitId":"kheekheekhee"},"content":"     * @throws IncorrectFormatException If the deadline command is used but a \"/by\" is not present in the message.","lastModifiedDate":"2021-08-25"},{"lineNumber":104,"author":{"gitId":"kheekheekhee"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":105,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":106,"author":{"gitId":"kheekheekhee"},"content":"    public void addDeadline(String deadline) throws IncorrectFormatException, InvalidDateTimeException, MessageEmptyException {","lastModifiedDate":"2021-08-25"},{"lineNumber":107,"author":{"gitId":"kheekheekhee"},"content":"        String[] result \u003d deadline.split(\"/by\");","lastModifiedDate":"2021-08-25"},{"lineNumber":108,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":109,"author":{"gitId":"kheekheekhee"},"content":"        if (result.length \u003d\u003d 0) {","lastModifiedDate":"2021-08-25"},{"lineNumber":110,"author":{"gitId":"kheekheekhee"},"content":"            throw new MessageEmptyException();","lastModifiedDate":"2021-08-25"},{"lineNumber":111,"author":{"gitId":"kheekheekhee"},"content":"        } else if (result.length \u003d\u003d 1) {","lastModifiedDate":"2021-08-25"},{"lineNumber":112,"author":{"gitId":"kheekheekhee"},"content":"            // throws an error if \"/by\" is not present in the message","lastModifiedDate":"2021-08-25"},{"lineNumber":113,"author":{"gitId":"kheekheekhee"},"content":"            throw new IncorrectFormatException(\"deadline\", \"/by\");","lastModifiedDate":"2021-08-25"},{"lineNumber":114,"author":{"gitId":"kheekheekhee"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":115,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":116,"author":{"gitId":"kheekheekhee"},"content":"        String description \u003d result[0].trim(); // trims the additional spaces to the left and right of \"by\"","lastModifiedDate":"2021-08-25"},{"lineNumber":117,"author":{"gitId":"kheekheekhee"},"content":"        String by \u003d result[1].trim(); // trims the additional spaces to the left and right of \"by\"","lastModifiedDate":"2021-08-25"},{"lineNumber":118,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":119,"author":{"gitId":"kheekheekhee"},"content":"        LocalDateTime finalBy;","lastModifiedDate":"2021-08-25"},{"lineNumber":120,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":121,"author":{"gitId":"kheekheekhee"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":122,"author":{"gitId":"kheekheekhee"},"content":"            // checks if the formats of the input date and time are correct","lastModifiedDate":"2021-08-25"},{"lineNumber":123,"author":{"gitId":"kheekheekhee"},"content":"            finalBy \u003d LocalDateTime.parse(by, DateTimeFormatter.ofPattern(\"yyyy/MM/dd HHmm\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":124,"author":{"gitId":"kheekheekhee"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":125,"author":{"gitId":"kheekheekhee"},"content":"            throw new InvalidDateTimeException();","lastModifiedDate":"2021-08-25"},{"lineNumber":126,"author":{"gitId":"kheekheekhee"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":127,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":128,"author":{"gitId":"kheekheekhee"},"content":"        Deadline d \u003d new Deadline(description, finalBy);","lastModifiedDate":"2021-08-25"},{"lineNumber":129,"author":{"gitId":"kheekheekhee"},"content":"        addToList(d);","lastModifiedDate":"2021-08-25"},{"lineNumber":130,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":131,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":132,"author":{"gitId":"kheekheekhee"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":133,"author":{"gitId":"kheekheekhee"},"content":"     * Adds a Todo to the list of Tasks.","lastModifiedDate":"2021-08-26"},{"lineNumber":134,"author":{"gitId":"kheekheekhee"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":135,"author":{"gitId":"kheekheekhee"},"content":"     * @param todo Todo to be added to the list of Tasks.","lastModifiedDate":"2021-08-26"},{"lineNumber":136,"author":{"gitId":"kheekheekhee"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":137,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":138,"author":{"gitId":"kheekheekhee"},"content":"    public void addTodo(String todo) {","lastModifiedDate":"2021-08-25"},{"lineNumber":139,"author":{"gitId":"kheekheekhee"},"content":"        Todo tempTask \u003d new Todo(todo);","lastModifiedDate":"2021-08-25"},{"lineNumber":140,"author":{"gitId":"kheekheekhee"},"content":"        addToList(tempTask);","lastModifiedDate":"2021-08-25"},{"lineNumber":141,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":142,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":143,"author":{"gitId":"kheekheekhee"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":144,"author":{"gitId":"kheekheekhee"},"content":"     * Adds an Event to the list of Tasks.","lastModifiedDate":"2021-08-26"},{"lineNumber":145,"author":{"gitId":"kheekheekhee"},"content":"     * @param event The Event to be added to the list of Tasks, which is the entire user input barring the command.","lastModifiedDate":"2021-08-26"},{"lineNumber":146,"author":{"gitId":"kheekheekhee"},"content":"     * @throws IncorrectFormatException If the event command is used but a \"/at\" is not present in the message.","lastModifiedDate":"2021-08-25"},{"lineNumber":147,"author":{"gitId":"kheekheekhee"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":148,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":149,"author":{"gitId":"kheekheekhee"},"content":"    public void addEvent(String event) throws IncorrectFormatException, MessageEmptyException, InvalidDateTimeException, InvalidDurationException {","lastModifiedDate":"2021-08-25"},{"lineNumber":150,"author":{"gitId":"kheekheekhee"},"content":"        String[] result \u003d event.split(\"/at\");","lastModifiedDate":"2021-08-25"},{"lineNumber":151,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":152,"author":{"gitId":"kheekheekhee"},"content":"        if (result.length \u003d\u003d 0) {","lastModifiedDate":"2021-08-25"},{"lineNumber":153,"author":{"gitId":"kheekheekhee"},"content":"            throw new MessageEmptyException();","lastModifiedDate":"2021-08-25"},{"lineNumber":154,"author":{"gitId":"kheekheekhee"},"content":"        } else if (result.length \u003d\u003d 1) {","lastModifiedDate":"2021-08-25"},{"lineNumber":155,"author":{"gitId":"kheekheekhee"},"content":"            // throws an error if \"/at\" is not present in the message","lastModifiedDate":"2021-08-25"},{"lineNumber":156,"author":{"gitId":"kheekheekhee"},"content":"            throw new IncorrectFormatException(\"event\", \"/at\");","lastModifiedDate":"2021-08-25"},{"lineNumber":157,"author":{"gitId":"kheekheekhee"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":158,"author":{"gitId":"kheekheekhee"},"content":"        String description \u003d result[0].trim();    // trims the additional spaces to the left and right of \"at\"","lastModifiedDate":"2021-08-25"},{"lineNumber":159,"author":{"gitId":"kheekheekhee"},"content":"        String at \u003d result[1].trim();             // trims the additional spaces to the left and right of \"at\"","lastModifiedDate":"2021-08-25"},{"lineNumber":160,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":161,"author":{"gitId":"kheekheekhee"},"content":"        // throws error if it doesn\u0027t even contain sufficient number of characters for correct format","lastModifiedDate":"2021-08-25"},{"lineNumber":162,"author":{"gitId":"kheekheekhee"},"content":"        if (at.replaceAll(\"\\\\s\", \"\").length() \u003c 19) { // YYYY/MM/DD HHMM - HHMM","lastModifiedDate":"2021-08-25"},{"lineNumber":163,"author":{"gitId":"kheekheekhee"},"content":"            throw new InvalidDurationException();","lastModifiedDate":"2021-08-25"},{"lineNumber":164,"author":{"gitId":"kheekheekhee"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":165,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":166,"author":{"gitId":"kheekheekhee"},"content":"        String date \u003d at.substring(0, 10).trim(); // at this point, date contains 10 chars YYYY/MM/DD","lastModifiedDate":"2021-08-25"},{"lineNumber":167,"author":{"gitId":"kheekheekhee"},"content":"        String eventDuration \u003d at.substring(11).trim();","lastModifiedDate":"2021-08-25"},{"lineNumber":168,"author":{"gitId":"kheekheekhee"},"content":"        String[] eventTimes \u003d eventDuration.split(\"-\");","lastModifiedDate":"2021-08-25"},{"lineNumber":169,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":170,"author":{"gitId":"kheekheekhee"},"content":"        // if no \"-\" present","lastModifiedDate":"2021-08-25"},{"lineNumber":171,"author":{"gitId":"kheekheekhee"},"content":"        if (eventTimes.length !\u003d 2) {","lastModifiedDate":"2021-08-25"},{"lineNumber":172,"author":{"gitId":"kheekheekhee"},"content":"            throw new InvalidDurationException();","lastModifiedDate":"2021-08-25"},{"lineNumber":173,"author":{"gitId":"kheekheekhee"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":174,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":175,"author":{"gitId":"kheekheekhee"},"content":"        String startTime \u003d eventTimes[0].trim();","lastModifiedDate":"2021-08-25"},{"lineNumber":176,"author":{"gitId":"kheekheekhee"},"content":"        String endTime \u003d eventTimes[1].trim();","lastModifiedDate":"2021-08-25"},{"lineNumber":177,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":178,"author":{"gitId":"kheekheekhee"},"content":"        LocalDate finalDate;","lastModifiedDate":"2021-08-25"},{"lineNumber":179,"author":{"gitId":"kheekheekhee"},"content":"        LocalTime finalStartTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":180,"author":{"gitId":"kheekheekhee"},"content":"        LocalTime finalEndTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":181,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":182,"author":{"gitId":"kheekheekhee"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":183,"author":{"gitId":"kheekheekhee"},"content":"            // checks if the formats of the input date and time are correct","lastModifiedDate":"2021-08-25"},{"lineNumber":184,"author":{"gitId":"kheekheekhee"},"content":"            finalDate \u003d LocalDate.parse(date, DateTimeFormatter.ofPattern(\"yyyy/MM/dd\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":185,"author":{"gitId":"kheekheekhee"},"content":"            finalStartTime \u003d LocalTime.parse(startTime, DateTimeFormatter.ofPattern(\"HHmm\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":186,"author":{"gitId":"kheekheekhee"},"content":"            finalEndTime \u003d LocalTime.parse(endTime, DateTimeFormatter.ofPattern(\"HHmm\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":187,"author":{"gitId":"kheekheekhee"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":188,"author":{"gitId":"kheekheekhee"},"content":"            throw new InvalidDateTimeException();","lastModifiedDate":"2021-08-25"},{"lineNumber":189,"author":{"gitId":"kheekheekhee"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":190,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":191,"author":{"gitId":"kheekheekhee"},"content":"        Event e \u003d new Event(description, finalDate, finalStartTime, finalEndTime);","lastModifiedDate":"2021-08-25"},{"lineNumber":192,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":193,"author":{"gitId":"kheekheekhee"},"content":"        addToList(e);","lastModifiedDate":"2021-08-25"},{"lineNumber":194,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":195,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":196,"author":{"gitId":"kheekheekhee"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":197,"author":{"gitId":"kheekheekhee"},"content":"     * Deletes a Task from the list of Tasks.","lastModifiedDate":"2021-08-26"},{"lineNumber":198,"author":{"gitId":"kheekheekhee"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":199,"author":{"gitId":"kheekheekhee"},"content":"     * @param taskIndex Index of the Task to be deleted.","lastModifiedDate":"2021-08-26"},{"lineNumber":200,"author":{"gitId":"kheekheekhee"},"content":"     * @throws EmptyListException If the list of Tasks is empty and there is nothing to be deleted.","lastModifiedDate":"2021-08-25"},{"lineNumber":201,"author":{"gitId":"kheekheekhee"},"content":"     * @throws InvalidIndexException If the index of the duke.tasks.Task provided is out of range of the current list of Tasks.","lastModifiedDate":"2021-08-25"},{"lineNumber":202,"author":{"gitId":"kheekheekhee"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":203,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":204,"author":{"gitId":"kheekheekhee"},"content":"    public void deleteTask(String taskIndex) throws EmptyListException, InvalidIndexException {","lastModifiedDate":"2021-08-25"},{"lineNumber":205,"author":{"gitId":"kheekheekhee"},"content":"        int intTaskIndex \u003d Integer.parseInt(taskIndex) - 1; // -1 because user inputs start from 1 not 0","lastModifiedDate":"2021-08-25"},{"lineNumber":206,"author":{"gitId":"kheekheekhee"},"content":"        int taskListSize \u003d taskList.size();","lastModifiedDate":"2021-08-25"},{"lineNumber":207,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":208,"author":{"gitId":"kheekheekhee"},"content":"        if (taskListSize \u003d\u003d 0) {","lastModifiedDate":"2021-08-25"},{"lineNumber":209,"author":{"gitId":"kheekheekhee"},"content":"            throw new EmptyListException();","lastModifiedDate":"2021-08-25"},{"lineNumber":210,"author":{"gitId":"kheekheekhee"},"content":"        } else if (intTaskIndex \u003c 0 || intTaskIndex \u003e\u003d taskListSize) {","lastModifiedDate":"2021-08-25"},{"lineNumber":211,"author":{"gitId":"kheekheekhee"},"content":"            throw new InvalidIndexException(1, taskListSize, intTaskIndex + 1);","lastModifiedDate":"2021-08-25"},{"lineNumber":212,"author":{"gitId":"kheekheekhee"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":213,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":214,"author":{"gitId":"kheekheekhee"},"content":"        Task task \u003d taskList.remove(intTaskIndex);","lastModifiedDate":"2021-08-25"},{"lineNumber":215,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":216,"author":{"gitId":"kheekheekhee"},"content":"        String message \u003d \"Noted. I\u0027ve removed this task:\\n\" + task;","lastModifiedDate":"2021-08-26"},{"lineNumber":217,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":218,"author":{"gitId":"kheekheekhee"},"content":"        String taskGrammar \u003d (taskList.size() \u003d\u003d 1) ? \" task\" : \" tasks\";","lastModifiedDate":"2021-08-25"},{"lineNumber":219,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":220,"author":{"gitId":"kheekheekhee"},"content":"        Ui.printMessage(message + \"Now you have \" + taskList.size() + taskGrammar + \" in the list.\");","lastModifiedDate":"2021-08-26"},{"lineNumber":221,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":222,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":223,"author":{"gitId":"kheekheekhee"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":224,"author":{"gitId":"kheekheekhee"},"content":"     * Finds all Tasks that matches the query and is case insensitive.","lastModifiedDate":"2021-08-26"},{"lineNumber":225,"author":{"gitId":"kheekheekhee"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":226,"author":{"gitId":"kheekheekhee"},"content":"     * @param query case insensitive query to find from Task list.","lastModifiedDate":"2021-08-26"},{"lineNumber":227,"author":{"gitId":"kheekheekhee"},"content":"     * @return ArrayList of Tasks filled with Tasks that match the query.","lastModifiedDate":"2021-08-26"},{"lineNumber":228,"author":{"gitId":"kheekheekhee"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":229,"author":{"gitId":"kheekheekhee"},"content":"    public ArrayList\u003cTask\u003e findTask(String query) {","lastModifiedDate":"2021-08-26"},{"lineNumber":230,"author":{"gitId":"kheekheekhee"},"content":"        ArrayList\u003cTask\u003e matchingTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-26"},{"lineNumber":231,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":232,"author":{"gitId":"kheekheekhee"},"content":"        // regex that matches any string to the query and is case insensitive","lastModifiedDate":"2021-08-26"},{"lineNumber":233,"author":{"gitId":"kheekheekhee"},"content":"        String regex \u003d \"(?i)(.*)(\" + query + \")(.*)\";","lastModifiedDate":"2021-08-26"},{"lineNumber":234,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":235,"author":{"gitId":"kheekheekhee"},"content":"        for (Task task : taskList) {","lastModifiedDate":"2021-08-26"},{"lineNumber":236,"author":{"gitId":"kheekheekhee"},"content":"            String taskString \u003d task.toString();","lastModifiedDate":"2021-08-26"},{"lineNumber":237,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":238,"author":{"gitId":"kheekheekhee"},"content":"            if (taskString.matches(regex)) {","lastModifiedDate":"2021-08-26"},{"lineNumber":239,"author":{"gitId":"kheekheekhee"},"content":"                matchingTasks.add(task);","lastModifiedDate":"2021-08-26"},{"lineNumber":240,"author":{"gitId":"kheekheekhee"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":241,"author":{"gitId":"kheekheekhee"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":242,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":243,"author":{"gitId":"kheekheekhee"},"content":"        return matchingTasks;","lastModifiedDate":"2021-08-26"},{"lineNumber":244,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":245,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":246,"author":{"gitId":"kheekheekhee"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"kheekheekhee":246}},{"path":"src/main/java/duke/tasks/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kheekheekhee"},"content":"package duke.tasks;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"kheekheekhee"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"kheekheekhee"},"content":" * A todo task.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"kheekheekhee"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"kheekheekhee"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-08-15"},{"lineNumber":7,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":8,"author":{"gitId":"kheekheekhee"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"kheekheekhee"},"content":"     * Constructor of Todo.","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"kheekheekhee"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"kheekheekhee"},"content":"     * @param description description of the todo task.","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"kheekheekhee"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"kheekheekhee"},"content":"    public Todo(String description) {","lastModifiedDate":"2021-08-15"},{"lineNumber":14,"author":{"gitId":"kheekheekhee"},"content":"        super(description);","lastModifiedDate":"2021-08-15"},{"lineNumber":15,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":16,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":17,"author":{"gitId":"kheekheekhee"},"content":"    @Override","lastModifiedDate":"2021-08-15"},{"lineNumber":18,"author":{"gitId":"kheekheekhee"},"content":"    public String toString() {","lastModifiedDate":"2021-08-15"},{"lineNumber":19,"author":{"gitId":"kheekheekhee"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2021-08-15"},{"lineNumber":20,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":21,"author":{"gitId":"kheekheekhee"},"content":"}","lastModifiedDate":"2021-08-15"}],"authorContributionMap":{"kheekheekhee":21}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kheekheekhee"},"content":"package duke.ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"kheekheekhee"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"kheekheekhee"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"kheekheekhee"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"kheekheekhee"},"content":" * Handles interacting with the user.","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"kheekheekhee"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"kheekheekhee"},"content":"public class Ui {","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"kheekheekhee"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"kheekheekhee"},"content":"     * Prints out a greeting for the user when the bot is first ran.","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"kheekheekhee"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"kheekheekhee"},"content":"    public void greet() {","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"kheekheekhee"},"content":"        System.out.println(\"__________________________________\");","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"kheekheekhee"},"content":"        System.out.println(\"Hello! I\u0027m Duke.\");","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"kheekheekhee"},"content":"        System.out.println(\"What can I do for you?\");","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"kheekheekhee"},"content":"        System.out.println(\"__________________________________\");","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"kheekheekhee"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"kheekheekhee"},"content":"     * Prints out a goodbye message when the bot is exited.","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"kheekheekhee"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"kheekheekhee"},"content":"    public void exit() {","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"kheekheekhee"},"content":"        System.out.println(\"__________________________________\");","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"kheekheekhee"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"kheekheekhee"},"content":"        System.out.println(\"__________________________________\");","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"kheekheekhee"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"kheekheekhee"},"content":"     * Prints out a message with the appropriate lines.","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"kheekheekhee"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"kheekheekhee"},"content":"     * @param message message to be printed.","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"kheekheekhee"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"kheekheekhee"},"content":"    public static void printMessage(String message) {","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"kheekheekhee"},"content":"        System.out.println(\"__________________________________\");","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"kheekheekhee"},"content":"        System.out.println(message);","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"kheekheekhee"},"content":"        System.out.println(\"__________________________________\");","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"kheekheekhee"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"kheekheekhee"},"content":"     * Prints all elements in an ArrayList of Tasks.","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"kheekheekhee"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"kheekheekhee"},"content":"     * @param tasks various tasks in an ArrayList.","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"kheekheekhee"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"kheekheekhee"},"content":"    public static void printList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"kheekheekhee"},"content":"        System.out.println(\"__________________________________\");","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"kheekheekhee"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"kheekheekhee"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2021-08-26"},{"lineNumber":51,"author":{"gitId":"kheekheekhee"},"content":"            sb.append(i + 1);","lastModifiedDate":"2021-08-26"},{"lineNumber":52,"author":{"gitId":"kheekheekhee"},"content":"            sb.append(\". \");","lastModifiedDate":"2021-08-26"},{"lineNumber":53,"author":{"gitId":"kheekheekhee"},"content":"            sb.append(tasks.get(i).toString());","lastModifiedDate":"2021-08-26"},{"lineNumber":54,"author":{"gitId":"kheekheekhee"},"content":"            if (i !\u003d tasks.size() - 1) {","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"kheekheekhee"},"content":"                sb.append(\"\\n\");","lastModifiedDate":"2021-08-26"},{"lineNumber":56,"author":{"gitId":"kheekheekhee"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":57,"author":{"gitId":"kheekheekhee"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"kheekheekhee"},"content":"        System.out.println(sb);","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"kheekheekhee"},"content":"        System.out.println(\"__________________________________\");","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"kheekheekhee"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"kheekheekhee":62}},{"path":"src/test/java/exceptions/DataFileChangedExceptionTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kheekheekhee"},"content":"package exceptions;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"kheekheekhee"},"content":"import duke.exception.DataFileChangedException;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"kheekheekhee"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"kheekheekhee"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"kheekheekhee"},"content":"public class DataFileChangedExceptionTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"kheekheekhee"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"kheekheekhee"},"content":"    public void testExceptionMessage() {","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"kheekheekhee"},"content":"        assertEquals(\"Contents of file have been changed! Resetting the list!\", new DataFileChangedException().getMessage());","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"kheekheekhee"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"kheekheekhee":13}},{"path":"src/test/java/exceptions/DukeExceptionTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kheekheekhee"},"content":"package exceptions;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"kheekheekhee"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"kheekheekhee"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"kheekheekhee"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"kheekheekhee"},"content":"public class DukeExceptionTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"kheekheekhee"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"kheekheekhee"},"content":"    public void testExceptionMessage() {","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"kheekheekhee"},"content":"        assertEquals(\"Hello world!\", new DukeException(\"Hello world!\").getMessage());","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"kheekheekhee"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"kheekheekhee":13}},{"path":"src/test/java/exceptions/EmptyCommandExceptionTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kheekheekhee"},"content":"package exceptions;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"kheekheekhee"},"content":"import duke.exception.EmptyCommandException;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"kheekheekhee"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"kheekheekhee"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"kheekheekhee"},"content":"public class EmptyCommandExceptionTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"kheekheekhee"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"kheekheekhee"},"content":"    public void testExceptionMessage() {","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"kheekheekhee"},"content":"        assertEquals(\"You left the field blank!\", new EmptyCommandException().getMessage());","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"kheekheekhee"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"kheekheekhee":13}},{"path":"src/test/java/exceptions/EmptyListExceptionTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kheekheekhee"},"content":"package exceptions;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"kheekheekhee"},"content":"import duke.exception.EmptyListException;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"kheekheekhee"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"kheekheekhee"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"kheekheekhee"},"content":"public class EmptyListExceptionTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"kheekheekhee"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"kheekheekhee"},"content":"    public void testExceptionMessage() {","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"kheekheekhee"},"content":"        assertEquals(\"The list is currently empty!\", new EmptyListException().getMessage());","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"kheekheekhee"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"kheekheekhee":13}},{"path":"src/test/java/exceptions/IncorrectFormatExceptionTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kheekheekhee"},"content":"package exceptions;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"kheekheekhee"},"content":"import duke.exception.IncorrectFormatException;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"kheekheekhee"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"kheekheekhee"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"kheekheekhee"},"content":"public class IncorrectFormatExceptionTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"kheekheekhee"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"kheekheekhee"},"content":"    public void testExceptionMessage() {","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"kheekheekhee"},"content":"        assertEquals(\"Please use /at when you want to call the event command and\" +","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"kheekheekhee"},"content":"                        \" include the date and time as YYYY/MM/DD and HHMM in 24 hour format.\",","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"kheekheekhee"},"content":"                new IncorrectFormatException(\"event\", \"/at\").getMessage());","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"kheekheekhee"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"kheekheekhee":15}},{"path":"src/test/java/exceptions/InvalidCommandExceptionTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kheekheekhee"},"content":"package exceptions;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"kheekheekhee"},"content":"import duke.exception.InvalidCommandException;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"kheekheekhee"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"kheekheekhee"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"kheekheekhee"},"content":"public class InvalidCommandExceptionTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"kheekheekhee"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"kheekheekhee"},"content":"    public void testExceptionMessage() {","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"kheekheekhee"},"content":"        assertEquals(\"Sorry, I don\u0027t understand that command.\",","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"kheekheekhee"},"content":"                new InvalidCommandException().getMessage());","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"kheekheekhee"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"kheekheekhee":14}},{"path":"src/test/java/exceptions/InvalidDateTimeExceptionTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kheekheekhee"},"content":"package exceptions;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"kheekheekhee"},"content":"import duke.exception.InvalidDateTimeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"kheekheekhee"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"kheekheekhee"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"kheekheekhee"},"content":"public class InvalidDateTimeExceptionTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"kheekheekhee"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"kheekheekhee"},"content":"    public void testExceptionMessage() {","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"kheekheekhee"},"content":"        assertEquals(\"Your date or time format is wrong! \" +","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"kheekheekhee"},"content":"                \"Please use the format YYYY/MM/DD HHMM where the time is in 24 hours.\",","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"kheekheekhee"},"content":"                new InvalidDateTimeException().getMessage());","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"kheekheekhee"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"kheekheekhee":15}},{"path":"src/test/java/exceptions/InvalidDurationExceptionTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kheekheekhee"},"content":"package exceptions;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"kheekheekhee"},"content":"import duke.exception.InvalidDurationException;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"kheekheekhee"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"kheekheekhee"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"kheekheekhee"},"content":"public class InvalidDurationExceptionTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"kheekheekhee"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"kheekheekhee"},"content":"    public void testExceptionMessage() {","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"kheekheekhee"},"content":"        assertEquals(\"Please define the duration of your event in the following format: \" +","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"kheekheekhee"},"content":"                \"YYYY/MM/DD HHMM - HHMM in the 24 hours format.\",","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"kheekheekhee"},"content":"                new InvalidDurationException().getMessage());","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"kheekheekhee"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"kheekheekhee":15}},{"path":"src/test/java/exceptions/InvalidIndexExceptionTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kheekheekhee"},"content":"package exceptions;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"kheekheekhee"},"content":"import duke.exception.InvalidIndexException;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"kheekheekhee"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"kheekheekhee"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"kheekheekhee"},"content":"public class InvalidIndexExceptionTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"kheekheekhee"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"kheekheekhee"},"content":"    public void testExceptionMessage() {","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"kheekheekhee"},"content":"        assertEquals(\"You entered an invalid task number of 7. \"","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"kheekheekhee"},"content":"                        + \"Please enter a task number from 1 to 6.\",","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"kheekheekhee"},"content":"                new InvalidIndexException(1, 6, 7).getMessage());","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"kheekheekhee"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"kheekheekhee":15}},{"path":"src/test/java/exceptions/MessageEmptyExceptionTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kheekheekhee"},"content":"package exceptions;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"kheekheekhee"},"content":"import duke.exception.MessageEmptyException;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"kheekheekhee"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"kheekheekhee"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"kheekheekhee"},"content":"public class MessageEmptyExceptionTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"kheekheekhee"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"kheekheekhee"},"content":"    public void testExceptionMessage() {","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"kheekheekhee"},"content":"        assertEquals(\"You forgot to enter a message after the command!\",","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"kheekheekhee"},"content":"                new MessageEmptyException().getMessage());","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"kheekheekhee"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"kheekheekhee":14}},{"path":"src/test/java/tasks/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kheekheekhee"},"content":"package tasks;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"kheekheekhee"},"content":"import duke.tasks.Deadline;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"kheekheekhee"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"kheekheekhee"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"kheekheekhee"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"kheekheekhee"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"kheekheekhee"},"content":"public class DeadlineTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"kheekheekhee"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"kheekheekhee"},"content":"    public void toString_notDone_correctStringReturned() {","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"kheekheekhee"},"content":"        String description \u003d \"sleep\";","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"kheekheekhee"},"content":"        LocalDateTime dateTime \u003d LocalDateTime.parse(\"2020/02/02 2230\", DateTimeFormatter.ofPattern(\"yyyy/MM/dd HHmm\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"kheekheekhee"},"content":"        Deadline deadline \u003d new Deadline(description, dateTime);","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"kheekheekhee"},"content":"        assertEquals(\"[D][ ] sleep (by: Feb 2 2020, 10:30 PM)\", deadline.toString());","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"kheekheekhee"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"kheekheekhee"},"content":"    public void toString_done_correctStringReturned() {","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"kheekheekhee"},"content":"        String description \u003d \"wake up\";","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"kheekheekhee"},"content":"        LocalDateTime dateTime \u003d LocalDateTime.parse(\"2020/02/03 0600\", DateTimeFormatter.ofPattern(\"yyyy/MM/dd HHmm\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"kheekheekhee"},"content":"        Deadline deadline \u003d new Deadline(description, dateTime);","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"kheekheekhee"},"content":"        deadline.markAsDone();","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"kheekheekhee"},"content":"        assertEquals(\"[D][X] wake up (by: Feb 3 2020, 6:00 AM)\", deadline.toString());","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"kheekheekhee"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"kheekheekhee":28}},{"path":"src/test/java/tasks/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kheekheekhee"},"content":"package tasks;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"kheekheekhee"},"content":"import duke.tasks.Event;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"kheekheekhee"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"kheekheekhee"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"kheekheekhee"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"kheekheekhee"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"kheekheekhee"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"kheekheekhee"},"content":"public class EventTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"kheekheekhee"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"kheekheekhee"},"content":"    public void toString_notDone_correctStringReturned() {","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"kheekheekhee"},"content":"        String description \u003d \"sleep\";","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"kheekheekhee"},"content":"        LocalDate date \u003d LocalDate.parse(\"2020/02/02\", DateTimeFormatter.ofPattern(\"yyyy/MM/dd\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"kheekheekhee"},"content":"        LocalTime timeStart \u003d LocalTime.parse(\"2230\", DateTimeFormatter.ofPattern(\"HHmm\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"kheekheekhee"},"content":"        LocalTime timeEnd \u003d LocalTime.parse(\"0600\", DateTimeFormatter.ofPattern(\"HHmm\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"kheekheekhee"},"content":"        Event event \u003d new Event(description, date, timeStart, timeEnd);","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"kheekheekhee"},"content":"        assertEquals(\"[E][ ] sleep (at: Feb 2 2020, 10:30 PM - 6:00 AM)\", event.toString());","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"kheekheekhee"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"kheekheekhee"},"content":"    public void toString_done_correctStringReturned() {","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"kheekheekhee"},"content":"        String description \u003d \"wake up\";","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"kheekheekhee"},"content":"        LocalDate date \u003d LocalDate.parse(\"2020/02/03\", DateTimeFormatter.ofPattern(\"yyyy/MM/dd\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"kheekheekhee"},"content":"        LocalTime timeStart \u003d LocalTime.parse(\"0600\", DateTimeFormatter.ofPattern(\"HHmm\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"kheekheekhee"},"content":"        LocalTime timeEnd \u003d LocalTime.parse(\"2230\", DateTimeFormatter.ofPattern(\"HHmm\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"kheekheekhee"},"content":"        Event event \u003d new Event(description, date, timeStart, timeEnd);","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"kheekheekhee"},"content":"        event.markAsDone();","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"kheekheekhee"},"content":"        assertEquals(\"[E][X] wake up (at: Feb 3 2020, 6:00 AM - 10:30 PM)\", event.toString());","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"kheekheekhee"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"kheekheekhee":33}},{"path":"src/test/java/tasks/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kheekheekhee"},"content":"package tasks;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"kheekheekhee"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"kheekheekhee"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"kheekheekhee"},"content":"import duke.tasks.Todo;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"kheekheekhee"},"content":"import duke.tasks.Event;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"kheekheekhee"},"content":"import duke.tasks.Deadline;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"kheekheekhee"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"kheekheekhee"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"kheekheekhee"},"content":"import duke.tasks.Todo;","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"kheekheekhee"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"kheekheekhee"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"kheekheekhee"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"kheekheekhee"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"kheekheekhee"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"kheekheekhee"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"kheekheekhee"},"content":"public class TaskListTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"kheekheekhee"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"kheekheekhee"},"content":"    public void addTaskTest() {","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"kheekheekhee"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"kheekheekhee"},"content":"        Task task \u003d new Task(\"sleep\");","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"kheekheekhee"},"content":"        taskList.addToList(task);","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"kheekheekhee"},"content":"        String expected \u003d \"[ ] sleep\";","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"kheekheekhee"},"content":"        String actual \u003d taskList.getTaskList().get(0).toString();","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"kheekheekhee"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"kheekheekhee"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"kheekheekhee"},"content":"    public void deleteTaskTest() {","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"kheekheekhee"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"kheekheekhee"},"content":"        Task task1 \u003d new Task(\"sleep\");","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"kheekheekhee"},"content":"        Task task2 \u003d new Task(\"sleep again\");","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"kheekheekhee"},"content":"        taskList.addToList(task1);","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"kheekheekhee"},"content":"        taskList.addToList(task2);","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"kheekheekhee"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"kheekheekhee"},"content":"            taskList.deleteTask(\"1\");","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"kheekheekhee"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"kheekheekhee"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"kheekheekhee"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"kheekheekhee"},"content":"        String expected \u003d \"[ ] sleep again\";","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"kheekheekhee"},"content":"        String actual \u003d taskList.getTaskList().get(0).toString();","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"kheekheekhee"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"kheekheekhee"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"kheekheekhee"},"content":"    public void addTodoTest() {","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"kheekheekhee"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"kheekheekhee"},"content":"        Todo todo \u003d new Todo(\"sleep\");","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"kheekheekhee"},"content":"        taskList.addToList(todo);","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"kheekheekhee"},"content":"        String expected \u003d \"[T][ ] sleep\";","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"kheekheekhee"},"content":"        String actual \u003d taskList.getTaskList().get(0).toString();","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"kheekheekhee"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"kheekheekhee"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"kheekheekhee"},"content":"    public void deleteTodoTest() {","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"kheekheekhee"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"kheekheekhee"},"content":"        Todo todo1 \u003d new Todo(\"sleep\");","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"kheekheekhee"},"content":"        Todo todo2 \u003d new Todo(\"sleep again\");","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"kheekheekhee"},"content":"        taskList.addToList(todo1);","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"kheekheekhee"},"content":"        taskList.addToList(todo2);","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"kheekheekhee"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"kheekheekhee"},"content":"            taskList.deleteTask(\"1\");","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"kheekheekhee"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"kheekheekhee"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2021-08-25"},{"lineNumber":76,"author":{"gitId":"kheekheekhee"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":77,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":78,"author":{"gitId":"kheekheekhee"},"content":"        String expected \u003d \"[T][ ] sleep again\";","lastModifiedDate":"2021-08-25"},{"lineNumber":79,"author":{"gitId":"kheekheekhee"},"content":"        String actual \u003d taskList.getTaskList().get(0).toString();","lastModifiedDate":"2021-08-25"},{"lineNumber":80,"author":{"gitId":"kheekheekhee"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2021-08-25"},{"lineNumber":81,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":82,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":83,"author":{"gitId":"kheekheekhee"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":84,"author":{"gitId":"kheekheekhee"},"content":"    public void addEventTest() {","lastModifiedDate":"2021-08-25"},{"lineNumber":85,"author":{"gitId":"kheekheekhee"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2021-08-25"},{"lineNumber":86,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":87,"author":{"gitId":"kheekheekhee"},"content":"        LocalDate date \u003d LocalDate.parse(\"2020/02/02\", DateTimeFormatter.ofPattern(\"yyyy/MM/dd\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":88,"author":{"gitId":"kheekheekhee"},"content":"        LocalTime timeStart \u003d LocalTime.parse(\"2230\", DateTimeFormatter.ofPattern(\"HHmm\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":89,"author":{"gitId":"kheekheekhee"},"content":"        LocalTime timeEnd \u003d LocalTime.parse(\"0600\", DateTimeFormatter.ofPattern(\"HHmm\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":90,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":91,"author":{"gitId":"kheekheekhee"},"content":"        Event event \u003d new Event(\"sleep\", date, timeStart, timeEnd);","lastModifiedDate":"2021-08-25"},{"lineNumber":92,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":93,"author":{"gitId":"kheekheekhee"},"content":"        taskList.addToList(event);","lastModifiedDate":"2021-08-25"},{"lineNumber":94,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":95,"author":{"gitId":"kheekheekhee"},"content":"        String expected \u003d \"[E][ ] sleep (at: Feb 2 2020, 10:30 PM - 6:00 AM)\";","lastModifiedDate":"2021-08-25"},{"lineNumber":96,"author":{"gitId":"kheekheekhee"},"content":"        String actual \u003d taskList.getTaskList().get(0).toString();","lastModifiedDate":"2021-08-25"},{"lineNumber":97,"author":{"gitId":"kheekheekhee"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2021-08-25"},{"lineNumber":98,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":99,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":100,"author":{"gitId":"kheekheekhee"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":101,"author":{"gitId":"kheekheekhee"},"content":"    public void deleteEventTest() {","lastModifiedDate":"2021-08-25"},{"lineNumber":102,"author":{"gitId":"kheekheekhee"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2021-08-25"},{"lineNumber":103,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":104,"author":{"gitId":"kheekheekhee"},"content":"        LocalDate date \u003d LocalDate.parse(\"2020/02/02\", DateTimeFormatter.ofPattern(\"yyyy/MM/dd\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":105,"author":{"gitId":"kheekheekhee"},"content":"        LocalTime timeStart \u003d LocalTime.parse(\"2230\", DateTimeFormatter.ofPattern(\"HHmm\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":106,"author":{"gitId":"kheekheekhee"},"content":"        LocalTime timeEnd \u003d LocalTime.parse(\"0600\", DateTimeFormatter.ofPattern(\"HHmm\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":107,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":108,"author":{"gitId":"kheekheekhee"},"content":"        Event event1 \u003d new Event(\"sleep\", date, timeStart, timeEnd);","lastModifiedDate":"2021-08-25"},{"lineNumber":109,"author":{"gitId":"kheekheekhee"},"content":"        Event event2 \u003d new Event(\"sleep again\", date, timeStart, timeEnd);","lastModifiedDate":"2021-08-25"},{"lineNumber":110,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":111,"author":{"gitId":"kheekheekhee"},"content":"        taskList.addToList(event1);","lastModifiedDate":"2021-08-25"},{"lineNumber":112,"author":{"gitId":"kheekheekhee"},"content":"        taskList.addToList(event2);","lastModifiedDate":"2021-08-25"},{"lineNumber":113,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":114,"author":{"gitId":"kheekheekhee"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":115,"author":{"gitId":"kheekheekhee"},"content":"            taskList.deleteTask(\"1\");","lastModifiedDate":"2021-08-25"},{"lineNumber":116,"author":{"gitId":"kheekheekhee"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":117,"author":{"gitId":"kheekheekhee"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2021-08-25"},{"lineNumber":118,"author":{"gitId":"kheekheekhee"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":119,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":120,"author":{"gitId":"kheekheekhee"},"content":"        String expected \u003d \"[E][ ] sleep again (at: Feb 2 2020, 10:30 PM - 6:00 AM)\";","lastModifiedDate":"2021-08-25"},{"lineNumber":121,"author":{"gitId":"kheekheekhee"},"content":"        String actual \u003d taskList.getTaskList().get(0).toString();","lastModifiedDate":"2021-08-25"},{"lineNumber":122,"author":{"gitId":"kheekheekhee"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2021-08-25"},{"lineNumber":123,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":124,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":125,"author":{"gitId":"kheekheekhee"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":126,"author":{"gitId":"kheekheekhee"},"content":"    public void addDeadlineTest() {","lastModifiedDate":"2021-08-25"},{"lineNumber":127,"author":{"gitId":"kheekheekhee"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2021-08-25"},{"lineNumber":128,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":129,"author":{"gitId":"kheekheekhee"},"content":"        LocalDateTime dateTime \u003d LocalDateTime.parse(\"2020/02/02 2230\", DateTimeFormatter.ofPattern(\"yyyy/MM/dd HHmm\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":130,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":131,"author":{"gitId":"kheekheekhee"},"content":"        Deadline deadline \u003d new Deadline(\"sleep\", dateTime);","lastModifiedDate":"2021-08-25"},{"lineNumber":132,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":133,"author":{"gitId":"kheekheekhee"},"content":"        taskList.addToList(deadline);","lastModifiedDate":"2021-08-25"},{"lineNumber":134,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":135,"author":{"gitId":"kheekheekhee"},"content":"        String expected \u003d \"[D][ ] sleep (by: Feb 2 2020, 10:30 PM)\";","lastModifiedDate":"2021-08-25"},{"lineNumber":136,"author":{"gitId":"kheekheekhee"},"content":"        String actual \u003d taskList.getTaskList().get(0).toString();","lastModifiedDate":"2021-08-25"},{"lineNumber":137,"author":{"gitId":"kheekheekhee"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2021-08-25"},{"lineNumber":138,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":139,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":140,"author":{"gitId":"kheekheekhee"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":141,"author":{"gitId":"kheekheekhee"},"content":"    public void deleteDeadlineTest() {","lastModifiedDate":"2021-08-25"},{"lineNumber":142,"author":{"gitId":"kheekheekhee"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2021-08-25"},{"lineNumber":143,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":144,"author":{"gitId":"kheekheekhee"},"content":"        LocalDateTime dateTime \u003d LocalDateTime.parse(\"2020/02/02 2230\", DateTimeFormatter.ofPattern(\"yyyy/MM/dd HHmm\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":145,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":146,"author":{"gitId":"kheekheekhee"},"content":"        Deadline deadline1 \u003d new Deadline(\"sleep\", dateTime);","lastModifiedDate":"2021-08-25"},{"lineNumber":147,"author":{"gitId":"kheekheekhee"},"content":"        Deadline deadline2 \u003d new Deadline(\"sleep again\", dateTime);","lastModifiedDate":"2021-08-25"},{"lineNumber":148,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":149,"author":{"gitId":"kheekheekhee"},"content":"        taskList.addToList(deadline1);","lastModifiedDate":"2021-08-25"},{"lineNumber":150,"author":{"gitId":"kheekheekhee"},"content":"        taskList.addToList(deadline2);","lastModifiedDate":"2021-08-25"},{"lineNumber":151,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":152,"author":{"gitId":"kheekheekhee"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":153,"author":{"gitId":"kheekheekhee"},"content":"            taskList.deleteTask(\"1\");","lastModifiedDate":"2021-08-25"},{"lineNumber":154,"author":{"gitId":"kheekheekhee"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":155,"author":{"gitId":"kheekheekhee"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2021-08-25"},{"lineNumber":156,"author":{"gitId":"kheekheekhee"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":157,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":158,"author":{"gitId":"kheekheekhee"},"content":"        String expected \u003d \"[D][ ] sleep again (by: Feb 2 2020, 10:30 PM)\";","lastModifiedDate":"2021-08-25"},{"lineNumber":159,"author":{"gitId":"kheekheekhee"},"content":"        String actual \u003d taskList.getTaskList().get(0).toString();","lastModifiedDate":"2021-08-25"},{"lineNumber":160,"author":{"gitId":"kheekheekhee"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2021-08-25"},{"lineNumber":161,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":162,"author":{"gitId":"kheekheekhee"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"kheekheekhee":162}},{"path":"src/test/java/tasks/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kheekheekhee"},"content":"package tasks;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"kheekheekhee"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"kheekheekhee"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"kheekheekhee"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"kheekheekhee"},"content":"public class TaskTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"kheekheekhee"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"kheekheekhee"},"content":"    public void toString_notDone_correctStringReturned() {","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"kheekheekhee"},"content":"        String description \u003d \"a task\";","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"kheekheekhee"},"content":"        Task task \u003d new Task(description);","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"kheekheekhee"},"content":"        assertEquals(\"[ ] a task\", task.toString());","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"kheekheekhee"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"kheekheekhee"},"content":"    public void toString_done_correctStringReturned() {","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"kheekheekhee"},"content":"        String description \u003d \"done task\";","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"kheekheekhee"},"content":"        Task task \u003d new Task(description);","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"kheekheekhee"},"content":"        task.markAsDone();","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"kheekheekhee"},"content":"        assertEquals(\"[X] done task\", task.toString());","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"kheekheekhee"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"kheekheekhee":23}},{"path":"src/test/java/tasks/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kheekheekhee"},"content":"package tasks;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"kheekheekhee"},"content":"import duke.tasks.Todo;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"kheekheekhee"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"kheekheekhee"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"kheekheekhee"},"content":"public class TodoTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"kheekheekhee"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"kheekheekhee"},"content":"    public void toString_notDone_correctStringReturned() {","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"kheekheekhee"},"content":"        String description \u003d \"exercise\";","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"kheekheekhee"},"content":"        Todo todo \u003d new Todo(description);","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"kheekheekhee"},"content":"        assertEquals(\"[T][ ] exercise\", todo.toString());","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"kheekheekhee"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"kheekheekhee"},"content":"    public void toString_done_correctStringReturned() {","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"kheekheekhee"},"content":"        String description \u003d \"relax\";","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"kheekheekhee"},"content":"        Todo todo \u003d new Todo(description);","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"kheekheekhee"},"content":"        todo.markAsDone();","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"kheekheekhee"},"content":"        assertEquals(\"[T][X] relax\", todo.toString());","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"kheekheekhee"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"kheekheekhee":23}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"kheekheekhee"},"content":"list","lastModifiedDate":"2021-08-16"},{"lineNumber":2,"author":{"gitId":"kheekheekhee"},"content":"todo read book","lastModifiedDate":"2021-08-15"},{"lineNumber":3,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":4,"author":{"gitId":"kheekheekhee"},"content":"to do","lastModifiedDate":"2021-08-16"},{"lineNumber":5,"author":{"gitId":"kheekheekhee"},"content":"todo","lastModifiedDate":"2021-08-16"},{"lineNumber":6,"author":{"gitId":"kheekheekhee"},"content":"deadline","lastModifiedDate":"2021-08-16"},{"lineNumber":7,"author":{"gitId":"kheekheekhee"},"content":"event","lastModifiedDate":"2021-08-16"},{"lineNumber":8,"author":{"gitId":"kheekheekhee"},"content":"   deadline return book /by 2020/02/02 2222","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"kheekheekhee"},"content":"event project meeting /at 2020/02/02 0200-0400","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"kheekheekhee"},"content":"todo join sports club","lastModifiedDate":"2021-08-15"},{"lineNumber":11,"author":{"gitId":"kheekheekhee"},"content":"todo borrow book","lastModifiedDate":"2021-08-15"},{"lineNumber":12,"author":{"gitId":"kheekheekhee"},"content":"list","lastModifiedDate":"2021-08-15"},{"lineNumber":13,"author":{"gitId":"kheekheekhee"},"content":"done 1","lastModifiedDate":"2021-08-15"},{"lineNumber":14,"author":{"gitId":"kheekheekhee"},"content":"done 4","lastModifiedDate":"2021-08-15"},{"lineNumber":15,"author":{"gitId":"kheekheekhee"},"content":"list","lastModifiedDate":"2021-08-15"},{"lineNumber":16,"author":{"gitId":"kheekheekhee"},"content":"deadline return book /by 2020/02/02 2020","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"kheekheekhee"},"content":"deadline return book by 2020/02/02 2020","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"kheekheekhee"},"content":"event project meeting /at 2021/08/30 1400-1600","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"kheekheekhee"},"content":"event project meeting at Mon 4-6pm","lastModifiedDate":"2021-08-16"},{"lineNumber":20,"author":{"gitId":"kheekheekhee"},"content":"list","lastModifiedDate":"2021-08-15"},{"lineNumber":21,"author":{"gitId":"kheekheekhee"},"content":"event","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"kheekheekhee"},"content":"event /at","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"kheekheekhee"},"content":"event /at tereerfera","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"kheekheekhee"},"content":"event sleep /at 11112222333344445555","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"kheekheekhee"},"content":"event sleep /at 11112222333344-45555","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"kheekheekhee"},"content":"deadline","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"kheekheekhee"},"content":"deadline /by","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"kheekheekhee"},"content":"deadline /by 54","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"kheekheekhee"},"content":"deadline /by 2020/02/02 0600","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"kheekheekhee"},"content":"delete 3","lastModifiedDate":"2021-08-16"},{"lineNumber":31,"author":{"gitId":"kheekheekhee"},"content":"delete 8","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"kheekheekhee"},"content":"done 10","lastModifiedDate":"2021-08-16"},{"lineNumber":33,"author":{"gitId":"kheekheekhee"},"content":"bye","lastModifiedDate":"2021-08-15"}],"authorContributionMap":{"kheekheekhee":33}}]

[{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kheekheekhee"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"kheekheekhee"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"kheekheekhee"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-15"},{"lineNumber":5,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":6,"author":{"gitId":"kheekheekhee"},"content":"    private final LocalDateTime by;","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":8,"author":{"gitId":"kheekheekhee"},"content":"    public Deadline(String description, LocalDateTime by) {","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"kheekheekhee"},"content":"        super(description);","lastModifiedDate":"2021-08-15"},{"lineNumber":10,"author":{"gitId":"kheekheekhee"},"content":"        this.by \u003d by;","lastModifiedDate":"2021-08-15"},{"lineNumber":11,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":12,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":13,"author":{"gitId":"kheekheekhee"},"content":"    @Override","lastModifiedDate":"2021-08-15"},{"lineNumber":14,"author":{"gitId":"kheekheekhee"},"content":"    public String toString() {","lastModifiedDate":"2021-08-15"},{"lineNumber":15,"author":{"gitId":"kheekheekhee"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by.format(DateTimeFormatter.ofPattern(\"MMM d yyyy, h:mm a\")) + \")\";","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":17,"author":{"gitId":"kheekheekhee"},"content":"}","lastModifiedDate":"2021-08-15"}],"authorContributionMap":{"kheekheekhee":17}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kheekheekhee"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"kheekheekhee"},"content":"import java.io.File;","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"kheekheekhee"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"kheekheekhee"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-15"},{"lineNumber":7,"author":{"gitId":"kheekheekhee"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-15"},{"lineNumber":8,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":9,"author":{"gitId":"kheekheekhee"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"kheekheekhee"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"kheekheekhee"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"kheekheekhee"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"kheekheekhee"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"kheekheekhee"},"content":"import exception.DataFileChangedException;","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"kheekheekhee"},"content":"import exception.DukeException;","lastModifiedDate":"2021-08-16"},{"lineNumber":17,"author":{"gitId":"kheekheekhee"},"content":"import exception.EmptyCommandException;","lastModifiedDate":"2021-08-16"},{"lineNumber":18,"author":{"gitId":"kheekheekhee"},"content":"import exception.EmptyListException;","lastModifiedDate":"2021-08-16"},{"lineNumber":19,"author":{"gitId":"kheekheekhee"},"content":"import exception.IncorrectFormatException;","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"kheekheekhee"},"content":"import exception.InvalidCommandException;","lastModifiedDate":"2021-08-16"},{"lineNumber":21,"author":{"gitId":"kheekheekhee"},"content":"import exception.InvalidDateTimeException;","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"kheekheekhee"},"content":"import exception.InvalidDurationException;","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"kheekheekhee"},"content":"import exception.InvalidIndexException;","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"kheekheekhee"},"content":"import exception.MessageEmptyException;","lastModifiedDate":"2021-08-16"},{"lineNumber":25,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":26,"author":{"gitId":"kheekheekhee"},"content":"/**","lastModifiedDate":"2021-08-16"},{"lineNumber":27,"author":{"gitId":"kheekheekhee"},"content":" * Duke class that initialises the Duke chat bot.","lastModifiedDate":"2021-08-16"},{"lineNumber":28,"author":{"gitId":"kheekheekhee"},"content":" * The Duke class supports operators including","lastModifiedDate":"2021-08-16"},{"lineNumber":29,"author":{"gitId":"kheekheekhee"},"content":" * (i) run: runs the chat bot","lastModifiedDate":"2021-08-16"},{"lineNumber":30,"author":{"gitId":"kheekheekhee"},"content":" * (ii) greet: prints out a greeting when the chat bot runs","lastModifiedDate":"2021-08-16"},{"lineNumber":31,"author":{"gitId":"kheekheekhee"},"content":" * (iii) exit: ends the execution of the chat bot","lastModifiedDate":"2021-08-16"},{"lineNumber":32,"author":{"gitId":"kheekheekhee"},"content":" * (iv) addToList: adds a Task to the list of Tasks","lastModifiedDate":"2021-08-16"},{"lineNumber":33,"author":{"gitId":"kheekheekhee"},"content":" * (v) displayList: prints out the current list of Tasks","lastModifiedDate":"2021-08-16"},{"lineNumber":34,"author":{"gitId":"kheekheekhee"},"content":" * (vi) markDone: marks a Task as done","lastModifiedDate":"2021-08-16"},{"lineNumber":35,"author":{"gitId":"kheekheekhee"},"content":" * (vii) addDeadline: adds a Deadline to the list of Tasks","lastModifiedDate":"2021-08-16"},{"lineNumber":36,"author":{"gitId":"kheekheekhee"},"content":" * (viii) addTodo: adds a Todo to the list of Tasks","lastModifiedDate":"2021-08-16"},{"lineNumber":37,"author":{"gitId":"kheekheekhee"},"content":" * (ix) addEvent: adds an Event to the list of Tasks","lastModifiedDate":"2021-08-16"},{"lineNumber":38,"author":{"gitId":"kheekheekhee"},"content":" * (x) handleCommands: main logic for processing and executing various commands","lastModifiedDate":"2021-08-16"},{"lineNumber":39,"author":{"gitId":"kheekheekhee"},"content":" * like \"list\", \"done\", \"deadline\", \"todo\", \"event\" and other invalid commands","lastModifiedDate":"2021-08-16"},{"lineNumber":40,"author":{"gitId":"kheekheekhee"},"content":" */","lastModifiedDate":"2021-08-16"},{"lineNumber":41,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":42,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":43,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":44,"author":{"gitId":"kheekheekhee"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":45,"author":{"gitId":"kheekheekhee"},"content":"     * taskList is the list of Tasks","lastModifiedDate":"2021-08-16"},{"lineNumber":46,"author":{"gitId":"kheekheekhee"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":47,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":48,"author":{"gitId":"kheekheekhee"},"content":"    private final ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-15"},{"lineNumber":49,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":50,"author":{"gitId":"kheekheekhee"},"content":"    private final String FILE_PATH \u003d \"data.txt\";","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"kheekheekhee"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":53,"author":{"gitId":"kheekheekhee"},"content":"     * Runs the Duke chat bot.","lastModifiedDate":"2021-08-16"},{"lineNumber":54,"author":{"gitId":"kheekheekhee"},"content":"     * It takes in user inputs and responds accordingly.","lastModifiedDate":"2021-08-16"},{"lineNumber":55,"author":{"gitId":"kheekheekhee"},"content":"     * If a command is issued, the bot will execute the command if the appropriate message","lastModifiedDate":"2021-08-16"},{"lineNumber":56,"author":{"gitId":"kheekheekhee"},"content":"     * follows the command.","lastModifiedDate":"2021-08-16"},{"lineNumber":57,"author":{"gitId":"kheekheekhee"},"content":"     * Any invalid inputs are caught via custom Exceptions, thrown and printed for the user to see.","lastModifiedDate":"2021-08-16"},{"lineNumber":58,"author":{"gitId":"kheekheekhee"},"content":"     * Invalid inputs include empty inputs, incorrect formats, invalid index, empty messages and","lastModifiedDate":"2021-08-16"},{"lineNumber":59,"author":{"gitId":"kheekheekhee"},"content":"     * attempting to amend the list of Tasks when it is currently empty.","lastModifiedDate":"2021-08-16"},{"lineNumber":60,"author":{"gitId":"kheekheekhee"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":61,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":62,"author":{"gitId":"kheekheekhee"},"content":"    private void run() {","lastModifiedDate":"2021-08-19"},{"lineNumber":63,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":64,"author":{"gitId":"kheekheekhee"},"content":"        greet();","lastModifiedDate":"2021-08-15"},{"lineNumber":65,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":66,"author":{"gitId":"kheekheekhee"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":67,"author":{"gitId":"kheekheekhee"},"content":"            load();","lastModifiedDate":"2021-08-24"},{"lineNumber":68,"author":{"gitId":"kheekheekhee"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":69,"author":{"gitId":"kheekheekhee"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2021-08-24"},{"lineNumber":70,"author":{"gitId":"kheekheekhee"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":71,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":72,"author":{"gitId":"kheekheekhee"},"content":"        String input;","lastModifiedDate":"2021-08-15"},{"lineNumber":73,"author":{"gitId":"kheekheekhee"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-15"},{"lineNumber":74,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":75,"author":{"gitId":"kheekheekhee"},"content":"        // user input trimmed to remove unwanted spaces at the front and back of user input","lastModifiedDate":"2021-08-16"},{"lineNumber":76,"author":{"gitId":"kheekheekhee"},"content":"        // allows for greater margin of error when typing in commands","lastModifiedDate":"2021-08-16"},{"lineNumber":77,"author":{"gitId":"kheekheekhee"},"content":"        while(!(input \u003d sc.nextLine().trim()).equals(\"bye\")) {","lastModifiedDate":"2021-08-16"},{"lineNumber":78,"author":{"gitId":"kheekheekhee"},"content":"            // continuously runs the bot as long as the \"bye\" command is not issued","lastModifiedDate":"2021-08-16"},{"lineNumber":79,"author":{"gitId":"kheekheekhee"},"content":"            handleCommands(input);","lastModifiedDate":"2021-08-16"},{"lineNumber":80,"author":{"gitId":"kheekheekhee"},"content":"        }","lastModifiedDate":"2021-08-15"},{"lineNumber":81,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":82,"author":{"gitId":"kheekheekhee"},"content":"        sc.close(); // closes the Scanner","lastModifiedDate":"2021-08-16"},{"lineNumber":83,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":84,"author":{"gitId":"kheekheekhee"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":85,"author":{"gitId":"kheekheekhee"},"content":"            save();","lastModifiedDate":"2021-08-24"},{"lineNumber":86,"author":{"gitId":"kheekheekhee"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":87,"author":{"gitId":"kheekheekhee"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2021-08-24"},{"lineNumber":88,"author":{"gitId":"kheekheekhee"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":89,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":90,"author":{"gitId":"kheekheekhee"},"content":"        exit();","lastModifiedDate":"2021-08-15"},{"lineNumber":91,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":92,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":93,"author":{"gitId":"kheekheekhee"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":94,"author":{"gitId":"kheekheekhee"},"content":"     * Prints out a greeting for the user when the bot is first ran.","lastModifiedDate":"2021-08-16"},{"lineNumber":95,"author":{"gitId":"kheekheekhee"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":96,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":97,"author":{"gitId":"kheekheekhee"},"content":"    private void greet() {","lastModifiedDate":"2021-08-15"},{"lineNumber":98,"author":{"gitId":"kheekheekhee"},"content":"        System.out.println(\"__________________________________\");","lastModifiedDate":"2021-08-15"},{"lineNumber":99,"author":{"gitId":"kheekheekhee"},"content":"        System.out.println(\"Hello! I\u0027m Duke\");","lastModifiedDate":"2021-08-15"},{"lineNumber":100,"author":{"gitId":"kheekheekhee"},"content":"        System.out.println(\"What can I do for you?\");","lastModifiedDate":"2021-08-15"},{"lineNumber":101,"author":{"gitId":"kheekheekhee"},"content":"        System.out.println(\"__________________________________\");","lastModifiedDate":"2021-08-15"},{"lineNumber":102,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":103,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":104,"author":{"gitId":"kheekheekhee"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":105,"author":{"gitId":"kheekheekhee"},"content":"     * Prints out a goodbye message when the bot is exited.","lastModifiedDate":"2021-08-16"},{"lineNumber":106,"author":{"gitId":"kheekheekhee"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":107,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":108,"author":{"gitId":"kheekheekhee"},"content":"    private void exit() {","lastModifiedDate":"2021-08-15"},{"lineNumber":109,"author":{"gitId":"kheekheekhee"},"content":"        System.out.println(\"__________________________________\");","lastModifiedDate":"2021-08-15"},{"lineNumber":110,"author":{"gitId":"kheekheekhee"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2021-08-15"},{"lineNumber":111,"author":{"gitId":"kheekheekhee"},"content":"        System.out.println(\"__________________________________\");","lastModifiedDate":"2021-08-15"},{"lineNumber":112,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":113,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":114,"author":{"gitId":"kheekheekhee"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":115,"author":{"gitId":"kheekheekhee"},"content":"     * Adds a task to the list of Tasks with a confirmation message printed out after.","lastModifiedDate":"2021-08-16"},{"lineNumber":116,"author":{"gitId":"kheekheekhee"},"content":"     * @param task The Task to be added to the list of Tasks","lastModifiedDate":"2021-08-16"},{"lineNumber":117,"author":{"gitId":"kheekheekhee"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":118,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":119,"author":{"gitId":"kheekheekhee"},"content":"    private void addToList(Task task) {","lastModifiedDate":"2021-08-15"},{"lineNumber":120,"author":{"gitId":"kheekheekhee"},"content":"        taskList.add(task);","lastModifiedDate":"2021-08-24"},{"lineNumber":121,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":122,"author":{"gitId":"kheekheekhee"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2021-08-15"},{"lineNumber":123,"author":{"gitId":"kheekheekhee"},"content":"        System.out.println(\"Added: \" + task);","lastModifiedDate":"2021-08-24"},{"lineNumber":124,"author":{"gitId":"kheekheekhee"},"content":"        String taskGrammar \u003d (taskList.size() \u003d\u003d 1) ? \" task\" : \" tasks\";","lastModifiedDate":"2021-08-24"},{"lineNumber":125,"author":{"gitId":"kheekheekhee"},"content":"        System.out.println(\"Now you have \" + taskList.size() + taskGrammar + \" in the list.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":126,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":127,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":128,"author":{"gitId":"kheekheekhee"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":129,"author":{"gitId":"kheekheekhee"},"content":"     * Prints out the full contents of the list of Tasks.","lastModifiedDate":"2021-08-16"},{"lineNumber":130,"author":{"gitId":"kheekheekhee"},"content":"     * @throws EmptyListException If the list of Tasks is empty and there is nothing to be printed.","lastModifiedDate":"2021-08-16"},{"lineNumber":131,"author":{"gitId":"kheekheekhee"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":132,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":133,"author":{"gitId":"kheekheekhee"},"content":"    private void displayList() throws EmptyListException {","lastModifiedDate":"2021-08-16"},{"lineNumber":134,"author":{"gitId":"kheekheekhee"},"content":"        if (taskList.size() \u003d\u003d 0) {","lastModifiedDate":"2021-08-24"},{"lineNumber":135,"author":{"gitId":"kheekheekhee"},"content":"            throw new EmptyListException();","lastModifiedDate":"2021-08-16"},{"lineNumber":136,"author":{"gitId":"kheekheekhee"},"content":"        }","lastModifiedDate":"2021-08-16"},{"lineNumber":137,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":138,"author":{"gitId":"kheekheekhee"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {","lastModifiedDate":"2021-08-24"},{"lineNumber":139,"author":{"gitId":"kheekheekhee"},"content":"            Task task \u003d taskList.get(i);","lastModifiedDate":"2021-08-15"},{"lineNumber":140,"author":{"gitId":"kheekheekhee"},"content":"            System.out.println(i + 1 + \". \" + task);","lastModifiedDate":"2021-08-15"},{"lineNumber":141,"author":{"gitId":"kheekheekhee"},"content":"        }","lastModifiedDate":"2021-08-15"},{"lineNumber":142,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":143,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":144,"author":{"gitId":"kheekheekhee"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":145,"author":{"gitId":"kheekheekhee"},"content":"     * Marks a current Task in the list of Tasks as Done.","lastModifiedDate":"2021-08-16"},{"lineNumber":146,"author":{"gitId":"kheekheekhee"},"content":"     * @param taskIndex The index of the Task in the list of Tasks to be marked as Done.","lastModifiedDate":"2021-08-16"},{"lineNumber":147,"author":{"gitId":"kheekheekhee"},"content":"     * @throws EmptyListException If the list of Tasks is empty and there is nothing to be marked as Done.","lastModifiedDate":"2021-08-16"},{"lineNumber":148,"author":{"gitId":"kheekheekhee"},"content":"     * @throws InvalidIndexException If the index of the Task provided is out of range of the current list of Tasks.","lastModifiedDate":"2021-08-16"},{"lineNumber":149,"author":{"gitId":"kheekheekhee"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":150,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":151,"author":{"gitId":"kheekheekhee"},"content":"    private void markDone(String taskIndex) throws EmptyListException, InvalidIndexException {","lastModifiedDate":"2021-08-16"},{"lineNumber":152,"author":{"gitId":"kheekheekhee"},"content":"        int intTaskIndex \u003d Integer.parseInt(taskIndex) - 1; // -1 because user inputs start from 1 not 0","lastModifiedDate":"2021-08-16"},{"lineNumber":153,"author":{"gitId":"kheekheekhee"},"content":"        int taskListSize \u003d taskList.size();","lastModifiedDate":"2021-08-24"},{"lineNumber":154,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":155,"author":{"gitId":"kheekheekhee"},"content":"        if (taskListSize \u003d\u003d 0) {","lastModifiedDate":"2021-08-16"},{"lineNumber":156,"author":{"gitId":"kheekheekhee"},"content":"            throw new EmptyListException();","lastModifiedDate":"2021-08-16"},{"lineNumber":157,"author":{"gitId":"kheekheekhee"},"content":"        } else if (intTaskIndex \u003c 0 || intTaskIndex \u003e\u003d taskListSize) {","lastModifiedDate":"2021-08-24"},{"lineNumber":158,"author":{"gitId":"kheekheekhee"},"content":"            throw new InvalidIndexException(1, taskListSize, intTaskIndex + 1);","lastModifiedDate":"2021-08-16"},{"lineNumber":159,"author":{"gitId":"kheekheekhee"},"content":"        }","lastModifiedDate":"2021-08-16"},{"lineNumber":160,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":161,"author":{"gitId":"kheekheekhee"},"content":"        Task task \u003d taskList.get(intTaskIndex);","lastModifiedDate":"2021-08-24"},{"lineNumber":162,"author":{"gitId":"kheekheekhee"},"content":"        task.markAsDone();","lastModifiedDate":"2021-08-15"},{"lineNumber":163,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":164,"author":{"gitId":"kheekheekhee"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\\n\" + task);","lastModifiedDate":"2021-08-15"},{"lineNumber":165,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":166,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":167,"author":{"gitId":"kheekheekhee"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":168,"author":{"gitId":"kheekheekhee"},"content":"     * Adds a Deadline to the list of Tasks.","lastModifiedDate":"2021-08-16"},{"lineNumber":169,"author":{"gitId":"kheekheekhee"},"content":"     * @param deadline The Deadline to be added to the list of Tasks which is the whole input barring the command.","lastModifiedDate":"2021-08-16"},{"lineNumber":170,"author":{"gitId":"kheekheekhee"},"content":"     * @throws IncorrectFormatException If the deadline command is used but a \"/by\" is not present in the message.","lastModifiedDate":"2021-08-16"},{"lineNumber":171,"author":{"gitId":"kheekheekhee"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":172,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":173,"author":{"gitId":"kheekheekhee"},"content":"    private void addDeadline(String deadline) throws IncorrectFormatException, InvalidDateTimeException, MessageEmptyException {","lastModifiedDate":"2021-08-24"},{"lineNumber":174,"author":{"gitId":"kheekheekhee"},"content":"        String[] result \u003d deadline.split(\"/by\");","lastModifiedDate":"2021-08-15"},{"lineNumber":175,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":176,"author":{"gitId":"kheekheekhee"},"content":"        if (result.length \u003d\u003d 0) {","lastModifiedDate":"2021-08-24"},{"lineNumber":177,"author":{"gitId":"kheekheekhee"},"content":"            throw new MessageEmptyException();","lastModifiedDate":"2021-08-24"},{"lineNumber":178,"author":{"gitId":"kheekheekhee"},"content":"        } else if (result.length \u003d\u003d 1) {","lastModifiedDate":"2021-08-24"},{"lineNumber":179,"author":{"gitId":"kheekheekhee"},"content":"            // throws an error if \"/by\" is not present in the message","lastModifiedDate":"2021-08-24"},{"lineNumber":180,"author":{"gitId":"kheekheekhee"},"content":"            throw new IncorrectFormatException(\"deadline\", \"/by\");","lastModifiedDate":"2021-08-16"},{"lineNumber":181,"author":{"gitId":"kheekheekhee"},"content":"        }","lastModifiedDate":"2021-08-16"},{"lineNumber":182,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":183,"author":{"gitId":"kheekheekhee"},"content":"        String description \u003d result[0].trim(); // trims the additional spaces to the left and right of \"by\"","lastModifiedDate":"2021-08-16"},{"lineNumber":184,"author":{"gitId":"kheekheekhee"},"content":"        String by \u003d result[1].trim(); // trims the additional spaces to the left and right of \"by\"","lastModifiedDate":"2021-08-16"},{"lineNumber":185,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":186,"author":{"gitId":"kheekheekhee"},"content":"        LocalDateTime finalBy;","lastModifiedDate":"2021-08-24"},{"lineNumber":187,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":188,"author":{"gitId":"kheekheekhee"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":189,"author":{"gitId":"kheekheekhee"},"content":"            // checks if the formats of the input date and time are correct","lastModifiedDate":"2021-08-24"},{"lineNumber":190,"author":{"gitId":"kheekheekhee"},"content":"            finalBy \u003d LocalDateTime.parse(by, DateTimeFormatter.ofPattern(\"yyyy/MM/dd HHmm\"));","lastModifiedDate":"2021-08-24"},{"lineNumber":191,"author":{"gitId":"kheekheekhee"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":192,"author":{"gitId":"kheekheekhee"},"content":"            throw new InvalidDateTimeException();","lastModifiedDate":"2021-08-24"},{"lineNumber":193,"author":{"gitId":"kheekheekhee"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":194,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":195,"author":{"gitId":"kheekheekhee"},"content":"        Deadline d \u003d new Deadline(description, finalBy);","lastModifiedDate":"2021-08-24"},{"lineNumber":196,"author":{"gitId":"kheekheekhee"},"content":"        addToList(d);","lastModifiedDate":"2021-08-15"},{"lineNumber":197,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":198,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":199,"author":{"gitId":"kheekheekhee"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":200,"author":{"gitId":"kheekheekhee"},"content":"     * Adds a Todo to the list of Tasks.","lastModifiedDate":"2021-08-16"},{"lineNumber":201,"author":{"gitId":"kheekheekhee"},"content":"     * @param todo The Todo to be added to the list of Tasks.","lastModifiedDate":"2021-08-16"},{"lineNumber":202,"author":{"gitId":"kheekheekhee"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":203,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":204,"author":{"gitId":"kheekheekhee"},"content":"    private void addTodo(String todo) {","lastModifiedDate":"2021-08-15"},{"lineNumber":205,"author":{"gitId":"kheekheekhee"},"content":"        Todo tempTask \u003d new Todo(todo);","lastModifiedDate":"2021-08-15"},{"lineNumber":206,"author":{"gitId":"kheekheekhee"},"content":"        addToList(tempTask);","lastModifiedDate":"2021-08-15"},{"lineNumber":207,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":208,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":209,"author":{"gitId":"kheekheekhee"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":210,"author":{"gitId":"kheekheekhee"},"content":"     * Adds an Event to the list of Tasks.","lastModifiedDate":"2021-08-16"},{"lineNumber":211,"author":{"gitId":"kheekheekhee"},"content":"     * @param event The Event to be added to the list of Tasks, which is the entire user input barring the command.","lastModifiedDate":"2021-08-16"},{"lineNumber":212,"author":{"gitId":"kheekheekhee"},"content":"     * @throws IncorrectFormatException If the event command is used but a \"/at\" is not present in the message.","lastModifiedDate":"2021-08-16"},{"lineNumber":213,"author":{"gitId":"kheekheekhee"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":214,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":215,"author":{"gitId":"kheekheekhee"},"content":"    private void addEvent(String event) throws IncorrectFormatException, MessageEmptyException, InvalidDateTimeException, InvalidDurationException {","lastModifiedDate":"2021-08-24"},{"lineNumber":216,"author":{"gitId":"kheekheekhee"},"content":"        String[] result \u003d event.split(\"/at\");","lastModifiedDate":"2021-08-15"},{"lineNumber":217,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":218,"author":{"gitId":"kheekheekhee"},"content":"        if (result.length \u003d\u003d 0) {","lastModifiedDate":"2021-08-24"},{"lineNumber":219,"author":{"gitId":"kheekheekhee"},"content":"            throw new MessageEmptyException();","lastModifiedDate":"2021-08-24"},{"lineNumber":220,"author":{"gitId":"kheekheekhee"},"content":"        } else if (result.length \u003d\u003d 1) {","lastModifiedDate":"2021-08-24"},{"lineNumber":221,"author":{"gitId":"kheekheekhee"},"content":"            // throws an error if \"/at\" is not present in the message","lastModifiedDate":"2021-08-24"},{"lineNumber":222,"author":{"gitId":"kheekheekhee"},"content":"            throw new IncorrectFormatException(\"event\", \"/at\");","lastModifiedDate":"2021-08-16"},{"lineNumber":223,"author":{"gitId":"kheekheekhee"},"content":"        }","lastModifiedDate":"2021-08-16"},{"lineNumber":224,"author":{"gitId":"kheekheekhee"},"content":"        String description \u003d result[0].trim();    // trims the additional spaces to the left and right of \"at\"","lastModifiedDate":"2021-08-16"},{"lineNumber":225,"author":{"gitId":"kheekheekhee"},"content":"        String at \u003d result[1].trim();             // trims the additional spaces to the left and right of \"at\"","lastModifiedDate":"2021-08-16"},{"lineNumber":226,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":227,"author":{"gitId":"kheekheekhee"},"content":"        // throws error if it doesn\u0027t even contain sufficient number of characters for correct format","lastModifiedDate":"2021-08-24"},{"lineNumber":228,"author":{"gitId":"kheekheekhee"},"content":"        if (at.replaceAll(\"\\\\s\", \"\").length() \u003c 19) { // YYYY/MM/DD HHMM - HHMM","lastModifiedDate":"2021-08-25"},{"lineNumber":229,"author":{"gitId":"kheekheekhee"},"content":"            throw new InvalidDurationException();","lastModifiedDate":"2021-08-24"},{"lineNumber":230,"author":{"gitId":"kheekheekhee"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":231,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":232,"author":{"gitId":"kheekheekhee"},"content":"        String date \u003d at.substring(0, 10).trim(); // at this point, date contains 10 chars YYYY/MM/DD","lastModifiedDate":"2021-08-24"},{"lineNumber":233,"author":{"gitId":"kheekheekhee"},"content":"        String eventDuration \u003d at.substring(11).trim();","lastModifiedDate":"2021-08-24"},{"lineNumber":234,"author":{"gitId":"kheekheekhee"},"content":"        String[] eventTimes \u003d eventDuration.split(\"-\");","lastModifiedDate":"2021-08-24"},{"lineNumber":235,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":236,"author":{"gitId":"kheekheekhee"},"content":"        // if no \"-\" present","lastModifiedDate":"2021-08-24"},{"lineNumber":237,"author":{"gitId":"kheekheekhee"},"content":"        if (eventTimes.length !\u003d 2) {","lastModifiedDate":"2021-08-24"},{"lineNumber":238,"author":{"gitId":"kheekheekhee"},"content":"            throw new InvalidDurationException();","lastModifiedDate":"2021-08-24"},{"lineNumber":239,"author":{"gitId":"kheekheekhee"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":240,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":241,"author":{"gitId":"kheekheekhee"},"content":"        String startTime \u003d eventTimes[0].trim();","lastModifiedDate":"2021-08-24"},{"lineNumber":242,"author":{"gitId":"kheekheekhee"},"content":"        String endTime \u003d eventTimes[1].trim();","lastModifiedDate":"2021-08-24"},{"lineNumber":243,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":244,"author":{"gitId":"kheekheekhee"},"content":"        LocalDate finalDate;","lastModifiedDate":"2021-08-24"},{"lineNumber":245,"author":{"gitId":"kheekheekhee"},"content":"        LocalTime finalStartTime;","lastModifiedDate":"2021-08-24"},{"lineNumber":246,"author":{"gitId":"kheekheekhee"},"content":"        LocalTime finalEndTime;","lastModifiedDate":"2021-08-24"},{"lineNumber":247,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":248,"author":{"gitId":"kheekheekhee"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":249,"author":{"gitId":"kheekheekhee"},"content":"            // checks if the formats of the input date and time are correct","lastModifiedDate":"2021-08-24"},{"lineNumber":250,"author":{"gitId":"kheekheekhee"},"content":"            finalDate \u003d LocalDate.parse(date, DateTimeFormatter.ofPattern(\"yyyy/MM/dd\"));","lastModifiedDate":"2021-08-24"},{"lineNumber":251,"author":{"gitId":"kheekheekhee"},"content":"            finalStartTime \u003d LocalTime.parse(startTime, DateTimeFormatter.ofPattern(\"HHmm\"));","lastModifiedDate":"2021-08-24"},{"lineNumber":252,"author":{"gitId":"kheekheekhee"},"content":"            finalEndTime \u003d LocalTime.parse(endTime, DateTimeFormatter.ofPattern(\"HHmm\"));","lastModifiedDate":"2021-08-24"},{"lineNumber":253,"author":{"gitId":"kheekheekhee"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":254,"author":{"gitId":"kheekheekhee"},"content":"            throw new InvalidDateTimeException();","lastModifiedDate":"2021-08-24"},{"lineNumber":255,"author":{"gitId":"kheekheekhee"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":256,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":257,"author":{"gitId":"kheekheekhee"},"content":"        Event e \u003d new Event(description, finalDate, finalStartTime, finalEndTime);","lastModifiedDate":"2021-08-24"},{"lineNumber":258,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":259,"author":{"gitId":"kheekheekhee"},"content":"        addToList(e);","lastModifiedDate":"2021-08-15"},{"lineNumber":260,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":261,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":262,"author":{"gitId":"kheekheekhee"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":263,"author":{"gitId":"kheekheekhee"},"content":"     * Deletes a Task from the list of Tasks.","lastModifiedDate":"2021-08-16"},{"lineNumber":264,"author":{"gitId":"kheekheekhee"},"content":"     * @param taskIndex Index of the Task to be deleted.","lastModifiedDate":"2021-08-16"},{"lineNumber":265,"author":{"gitId":"kheekheekhee"},"content":"     * @throws EmptyListException If the list of Tasks is empty and there is nothing to be deleted.","lastModifiedDate":"2021-08-16"},{"lineNumber":266,"author":{"gitId":"kheekheekhee"},"content":"     * @throws InvalidIndexException If the index of the Task provided is out of range of the current list of Tasks.","lastModifiedDate":"2021-08-16"},{"lineNumber":267,"author":{"gitId":"kheekheekhee"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":268,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":269,"author":{"gitId":"kheekheekhee"},"content":"    private void deleteTask(String taskIndex) throws EmptyListException, InvalidIndexException {","lastModifiedDate":"2021-08-16"},{"lineNumber":270,"author":{"gitId":"kheekheekhee"},"content":"        int intTaskIndex \u003d Integer.parseInt(taskIndex) - 1; // -1 because user inputs start from 1 not 0","lastModifiedDate":"2021-08-16"},{"lineNumber":271,"author":{"gitId":"kheekheekhee"},"content":"        int taskListSize \u003d taskList.size();","lastModifiedDate":"2021-08-24"},{"lineNumber":272,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":273,"author":{"gitId":"kheekheekhee"},"content":"        if (taskListSize \u003d\u003d 0) {","lastModifiedDate":"2021-08-16"},{"lineNumber":274,"author":{"gitId":"kheekheekhee"},"content":"            throw new EmptyListException();","lastModifiedDate":"2021-08-16"},{"lineNumber":275,"author":{"gitId":"kheekheekhee"},"content":"        } else if (intTaskIndex \u003c 0 || intTaskIndex \u003e\u003d taskListSize) {","lastModifiedDate":"2021-08-24"},{"lineNumber":276,"author":{"gitId":"kheekheekhee"},"content":"            throw new InvalidIndexException(1, taskListSize, intTaskIndex + 1);","lastModifiedDate":"2021-08-16"},{"lineNumber":277,"author":{"gitId":"kheekheekhee"},"content":"        }","lastModifiedDate":"2021-08-16"},{"lineNumber":278,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":279,"author":{"gitId":"kheekheekhee"},"content":"        Task task \u003d taskList.remove(intTaskIndex);","lastModifiedDate":"2021-08-24"},{"lineNumber":280,"author":{"gitId":"kheekheekhee"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task:\\n\" + task);","lastModifiedDate":"2021-08-16"},{"lineNumber":281,"author":{"gitId":"kheekheekhee"},"content":"        String taskGrammar \u003d (taskList.size() \u003d\u003d 1) ? \" task\" : \" tasks\";","lastModifiedDate":"2021-08-24"},{"lineNumber":282,"author":{"gitId":"kheekheekhee"},"content":"        System.out.println(\"Now you have \" + taskList.size() + taskGrammar + \" in the list.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":283,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":284,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":285,"author":{"gitId":"kheekheekhee"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":286,"author":{"gitId":"kheekheekhee"},"content":"     * Logic for handling different commands and executing the appropriate methods for the inputted command.","lastModifiedDate":"2021-08-16"},{"lineNumber":287,"author":{"gitId":"kheekheekhee"},"content":"     * @param input The entire user input.","lastModifiedDate":"2021-08-16"},{"lineNumber":288,"author":{"gitId":"kheekheekhee"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":289,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":290,"author":{"gitId":"kheekheekhee"},"content":"    private void handleCommands(String input) {","lastModifiedDate":"2021-08-16"},{"lineNumber":291,"author":{"gitId":"kheekheekhee"},"content":"        String[] words \u003d input.split(\" \"); // isolates the command word","lastModifiedDate":"2021-08-16"},{"lineNumber":292,"author":{"gitId":"kheekheekhee"},"content":"        String command \u003d words[0];","lastModifiedDate":"2021-08-16"},{"lineNumber":293,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":294,"author":{"gitId":"kheekheekhee"},"content":"        try {","lastModifiedDate":"2021-08-16"},{"lineNumber":295,"author":{"gitId":"kheekheekhee"},"content":"            System.out.println(\"__________________________________\");","lastModifiedDate":"2021-08-16"},{"lineNumber":296,"author":{"gitId":"kheekheekhee"},"content":"            switch (command) {","lastModifiedDate":"2021-08-16"},{"lineNumber":297,"author":{"gitId":"kheekheekhee"},"content":"            case \"list\":","lastModifiedDate":"2021-08-16"},{"lineNumber":298,"author":{"gitId":"kheekheekhee"},"content":"                displayList();","lastModifiedDate":"2021-08-16"},{"lineNumber":299,"author":{"gitId":"kheekheekhee"},"content":"                break;","lastModifiedDate":"2021-08-16"},{"lineNumber":300,"author":{"gitId":"kheekheekhee"},"content":"            case \"done\":","lastModifiedDate":"2021-08-16"},{"lineNumber":301,"author":{"gitId":"kheekheekhee"},"content":"                if (words.length \u003d\u003d 1) {","lastModifiedDate":"2021-08-24"},{"lineNumber":302,"author":{"gitId":"kheekheekhee"},"content":"                    // throws an error if there is no message input after the command word","lastModifiedDate":"2021-08-24"},{"lineNumber":303,"author":{"gitId":"kheekheekhee"},"content":"                    throw new MessageEmptyException();","lastModifiedDate":"2021-08-16"},{"lineNumber":304,"author":{"gitId":"kheekheekhee"},"content":"                }","lastModifiedDate":"2021-08-16"},{"lineNumber":305,"author":{"gitId":"kheekheekhee"},"content":"                String doneTaskIndex \u003d words[words.length - 1];","lastModifiedDate":"2021-08-16"},{"lineNumber":306,"author":{"gitId":"kheekheekhee"},"content":"                markDone(doneTaskIndex);","lastModifiedDate":"2021-08-16"},{"lineNumber":307,"author":{"gitId":"kheekheekhee"},"content":"                break;","lastModifiedDate":"2021-08-16"},{"lineNumber":308,"author":{"gitId":"kheekheekhee"},"content":"            case \"deadline\":","lastModifiedDate":"2021-08-16"},{"lineNumber":309,"author":{"gitId":"kheekheekhee"},"content":"                if (words.length \u003d\u003d 1) {","lastModifiedDate":"2021-08-24"},{"lineNumber":310,"author":{"gitId":"kheekheekhee"},"content":"                    // throws an error if there is no message input after the command word","lastModifiedDate":"2021-08-24"},{"lineNumber":311,"author":{"gitId":"kheekheekhee"},"content":"                    throw new MessageEmptyException();","lastModifiedDate":"2021-08-16"},{"lineNumber":312,"author":{"gitId":"kheekheekhee"},"content":"                }","lastModifiedDate":"2021-08-16"},{"lineNumber":313,"author":{"gitId":"kheekheekhee"},"content":"                try {","lastModifiedDate":"2021-08-24"},{"lineNumber":314,"author":{"gitId":"kheekheekhee"},"content":"                    // excludes command \"deadline \" from the string","lastModifiedDate":"2021-08-16"},{"lineNumber":315,"author":{"gitId":"kheekheekhee"},"content":"                    addDeadline(input.substring(9));","lastModifiedDate":"2021-08-16"},{"lineNumber":316,"author":{"gitId":"kheekheekhee"},"content":"                } catch (InvalidDateTimeException | MessageEmptyException | IncorrectFormatException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":317,"author":{"gitId":"kheekheekhee"},"content":"                    System.out.println(e.getMessage());","lastModifiedDate":"2021-08-24"},{"lineNumber":318,"author":{"gitId":"kheekheekhee"},"content":"                }","lastModifiedDate":"2021-08-24"},{"lineNumber":319,"author":{"gitId":"kheekheekhee"},"content":"                break;","lastModifiedDate":"2021-08-16"},{"lineNumber":320,"author":{"gitId":"kheekheekhee"},"content":"            case \"todo\":","lastModifiedDate":"2021-08-16"},{"lineNumber":321,"author":{"gitId":"kheekheekhee"},"content":"                if (words.length \u003d\u003d 1) {","lastModifiedDate":"2021-08-24"},{"lineNumber":322,"author":{"gitId":"kheekheekhee"},"content":"                    // throws an error if there is no message input after the command word","lastModifiedDate":"2021-08-24"},{"lineNumber":323,"author":{"gitId":"kheekheekhee"},"content":"                    throw new MessageEmptyException();","lastModifiedDate":"2021-08-16"},{"lineNumber":324,"author":{"gitId":"kheekheekhee"},"content":"                }","lastModifiedDate":"2021-08-16"},{"lineNumber":325,"author":{"gitId":"kheekheekhee"},"content":"                // excludes command \"todo\" from the string","lastModifiedDate":"2021-08-16"},{"lineNumber":326,"author":{"gitId":"kheekheekhee"},"content":"                addTodo(input.substring(5));","lastModifiedDate":"2021-08-16"},{"lineNumber":327,"author":{"gitId":"kheekheekhee"},"content":"                break;","lastModifiedDate":"2021-08-16"},{"lineNumber":328,"author":{"gitId":"kheekheekhee"},"content":"            case \"event\":","lastModifiedDate":"2021-08-16"},{"lineNumber":329,"author":{"gitId":"kheekheekhee"},"content":"                if (words.length \u003d\u003d 1) {","lastModifiedDate":"2021-08-24"},{"lineNumber":330,"author":{"gitId":"kheekheekhee"},"content":"                    // throws an error if there is no message input after the command word","lastModifiedDate":"2021-08-24"},{"lineNumber":331,"author":{"gitId":"kheekheekhee"},"content":"                    throw new MessageEmptyException();","lastModifiedDate":"2021-08-16"},{"lineNumber":332,"author":{"gitId":"kheekheekhee"},"content":"                }","lastModifiedDate":"2021-08-16"},{"lineNumber":333,"author":{"gitId":"kheekheekhee"},"content":"                // excludes command \"event\" from the string","lastModifiedDate":"2021-08-16"},{"lineNumber":334,"author":{"gitId":"kheekheekhee"},"content":"                addEvent(input.substring(6));","lastModifiedDate":"2021-08-16"},{"lineNumber":335,"author":{"gitId":"kheekheekhee"},"content":"                break;","lastModifiedDate":"2021-08-16"},{"lineNumber":336,"author":{"gitId":"kheekheekhee"},"content":"            case \"delete\":","lastModifiedDate":"2021-08-16"},{"lineNumber":337,"author":{"gitId":"kheekheekhee"},"content":"                if (words.length \u003d\u003d 1) {","lastModifiedDate":"2021-08-24"},{"lineNumber":338,"author":{"gitId":"kheekheekhee"},"content":"                    // throws an error if there is no message input after the command word","lastModifiedDate":"2021-08-24"},{"lineNumber":339,"author":{"gitId":"kheekheekhee"},"content":"                    throw new MessageEmptyException();","lastModifiedDate":"2021-08-16"},{"lineNumber":340,"author":{"gitId":"kheekheekhee"},"content":"                }","lastModifiedDate":"2021-08-16"},{"lineNumber":341,"author":{"gitId":"kheekheekhee"},"content":"                String deleteTaskIndex \u003d words[words.length - 1];","lastModifiedDate":"2021-08-16"},{"lineNumber":342,"author":{"gitId":"kheekheekhee"},"content":"                deleteTask(deleteTaskIndex);","lastModifiedDate":"2021-08-16"},{"lineNumber":343,"author":{"gitId":"kheekheekhee"},"content":"                break;","lastModifiedDate":"2021-08-16"},{"lineNumber":344,"author":{"gitId":"kheekheekhee"},"content":"            case \"\": // empty user input","lastModifiedDate":"2021-08-16"},{"lineNumber":345,"author":{"gitId":"kheekheekhee"},"content":"                throw new EmptyCommandException();","lastModifiedDate":"2021-08-16"},{"lineNumber":346,"author":{"gitId":"kheekheekhee"},"content":"            default: // all other inputs that are not supported","lastModifiedDate":"2021-08-16"},{"lineNumber":347,"author":{"gitId":"kheekheekhee"},"content":"                throw new InvalidCommandException();","lastModifiedDate":"2021-08-16"},{"lineNumber":348,"author":{"gitId":"kheekheekhee"},"content":"            }","lastModifiedDate":"2021-08-16"},{"lineNumber":349,"author":{"gitId":"kheekheekhee"},"content":"            System.out.println(\"__________________________________\");","lastModifiedDate":"2021-08-16"},{"lineNumber":350,"author":{"gitId":"kheekheekhee"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-16"},{"lineNumber":351,"author":{"gitId":"kheekheekhee"},"content":"            System.out.println(e.getMessage()); // prints only error message out for user","lastModifiedDate":"2021-08-16"},{"lineNumber":352,"author":{"gitId":"kheekheekhee"},"content":"            System.out.println(\"__________________________________\");","lastModifiedDate":"2021-08-16"},{"lineNumber":353,"author":{"gitId":"kheekheekhee"},"content":"        }","lastModifiedDate":"2021-08-16"},{"lineNumber":354,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":355,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":356,"author":{"gitId":"kheekheekhee"},"content":"    private void save() throws IOException {","lastModifiedDate":"2021-08-24"},{"lineNumber":357,"author":{"gitId":"kheekheekhee"},"content":"        FileWriter fw \u003d new FileWriter(FILE_PATH);","lastModifiedDate":"2021-08-24"},{"lineNumber":358,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":359,"author":{"gitId":"kheekheekhee"},"content":"        for (Task task : taskList) {","lastModifiedDate":"2021-08-24"},{"lineNumber":360,"author":{"gitId":"kheekheekhee"},"content":"            fw.write(task.toString() + \"\\n\");","lastModifiedDate":"2021-08-24"},{"lineNumber":361,"author":{"gitId":"kheekheekhee"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":362,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":363,"author":{"gitId":"kheekheekhee"},"content":"        fw.flush();","lastModifiedDate":"2021-08-24"},{"lineNumber":364,"author":{"gitId":"kheekheekhee"},"content":"        fw.close();","lastModifiedDate":"2021-08-24"},{"lineNumber":365,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":366,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":367,"author":{"gitId":"kheekheekhee"},"content":"    private void load() throws IOException {","lastModifiedDate":"2021-08-24"},{"lineNumber":368,"author":{"gitId":"kheekheekhee"},"content":"        File file \u003d new File(FILE_PATH);","lastModifiedDate":"2021-08-24"},{"lineNumber":369,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":370,"author":{"gitId":"kheekheekhee"},"content":"        // creates file if not present, else it does nothing","lastModifiedDate":"2021-08-24"},{"lineNumber":371,"author":{"gitId":"kheekheekhee"},"content":"        if (file.createNewFile()) {","lastModifiedDate":"2021-08-24"},{"lineNumber":372,"author":{"gitId":"kheekheekhee"},"content":"            // exit method if a new file is created","lastModifiedDate":"2021-08-24"},{"lineNumber":373,"author":{"gitId":"kheekheekhee"},"content":"            return;","lastModifiedDate":"2021-08-24"},{"lineNumber":374,"author":{"gitId":"kheekheekhee"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":375,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":376,"author":{"gitId":"kheekheekhee"},"content":"        Scanner sc \u003d new Scanner(file);","lastModifiedDate":"2021-08-24"},{"lineNumber":377,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":378,"author":{"gitId":"kheekheekhee"},"content":"        while(sc.hasNext()) {","lastModifiedDate":"2021-08-24"},{"lineNumber":379,"author":{"gitId":"kheekheekhee"},"content":"            String nextCommand \u003d sc.nextLine();","lastModifiedDate":"2021-08-24"},{"lineNumber":380,"author":{"gitId":"kheekheekhee"},"content":"            Task task;","lastModifiedDate":"2021-08-24"},{"lineNumber":381,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":382,"author":{"gitId":"kheekheekhee"},"content":"            switch (nextCommand.charAt(1)) {","lastModifiedDate":"2021-08-24"},{"lineNumber":383,"author":{"gitId":"kheekheekhee"},"content":"            case \u0027D\u0027:","lastModifiedDate":"2021-08-24"},{"lineNumber":384,"author":{"gitId":"kheekheekhee"},"content":"                try {","lastModifiedDate":"2021-08-25"},{"lineNumber":385,"author":{"gitId":"kheekheekhee"},"content":"                    task \u003d extractDeadline(nextCommand.substring(7));   // [D][X] something by time","lastModifiedDate":"2021-08-24"},{"lineNumber":386,"author":{"gitId":"kheekheekhee"},"content":"                    break;","lastModifiedDate":"2021-08-24"},{"lineNumber":387,"author":{"gitId":"kheekheekhee"},"content":"                } catch (DataFileChangedException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":388,"author":{"gitId":"kheekheekhee"},"content":"                    System.out.println(e.getMessage());","lastModifiedDate":"2021-08-25"},{"lineNumber":389,"author":{"gitId":"kheekheekhee"},"content":"                }","lastModifiedDate":"2021-08-25"},{"lineNumber":390,"author":{"gitId":"kheekheekhee"},"content":"            case \u0027E\u0027:","lastModifiedDate":"2021-08-24"},{"lineNumber":391,"author":{"gitId":"kheekheekhee"},"content":"                try {","lastModifiedDate":"2021-08-25"},{"lineNumber":392,"author":{"gitId":"kheekheekhee"},"content":"                    task \u003d extractEvent(nextCommand.substring(7));      // [D][X] something at time","lastModifiedDate":"2021-08-24"},{"lineNumber":393,"author":{"gitId":"kheekheekhee"},"content":"                    break;","lastModifiedDate":"2021-08-24"},{"lineNumber":394,"author":{"gitId":"kheekheekhee"},"content":"                } catch (DataFileChangedException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":395,"author":{"gitId":"kheekheekhee"},"content":"                    System.out.println(e.getMessage());","lastModifiedDate":"2021-08-25"},{"lineNumber":396,"author":{"gitId":"kheekheekhee"},"content":"                }","lastModifiedDate":"2021-08-25"},{"lineNumber":397,"author":{"gitId":"kheekheekhee"},"content":"            default:                                                // todos","lastModifiedDate":"2021-08-24"},{"lineNumber":398,"author":{"gitId":"kheekheekhee"},"content":"                task \u003d new Todo(nextCommand.substring(7));          // disregards [T][X]","lastModifiedDate":"2021-08-24"},{"lineNumber":399,"author":{"gitId":"kheekheekhee"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":400,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":401,"author":{"gitId":"kheekheekhee"},"content":"            if (nextCommand.charAt(4) \u003d\u003d \u0027X\u0027) {","lastModifiedDate":"2021-08-24"},{"lineNumber":402,"author":{"gitId":"kheekheekhee"},"content":"                task.markAsDone();","lastModifiedDate":"2021-08-24"},{"lineNumber":403,"author":{"gitId":"kheekheekhee"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":404,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":405,"author":{"gitId":"kheekheekhee"},"content":"            taskList.add(task);","lastModifiedDate":"2021-08-24"},{"lineNumber":406,"author":{"gitId":"kheekheekhee"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":407,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":408,"author":{"gitId":"kheekheekhee"},"content":"        sc.close();","lastModifiedDate":"2021-08-24"},{"lineNumber":409,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":410,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":411,"author":{"gitId":"kheekheekhee"},"content":"    private Deadline extractDeadline(String text) throws DataFileChangedException {","lastModifiedDate":"2021-08-25"},{"lineNumber":412,"author":{"gitId":"kheekheekhee"},"content":"        int lastOccurrenceOfBy \u003d text.lastIndexOf(\" (by: \"); // in case other bys appear","lastModifiedDate":"2021-08-24"},{"lineNumber":413,"author":{"gitId":"kheekheekhee"},"content":"        String description \u003d text.substring(0, lastOccurrenceOfBy);","lastModifiedDate":"2021-08-24"},{"lineNumber":414,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":415,"author":{"gitId":"kheekheekhee"},"content":"        // disregards \"( by: \" and trailing \")\"","lastModifiedDate":"2021-08-24"},{"lineNumber":416,"author":{"gitId":"kheekheekhee"},"content":"        String by \u003d text.substring(lastOccurrenceOfBy + 6, text.length() - 1);","lastModifiedDate":"2021-08-24"},{"lineNumber":417,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":418,"author":{"gitId":"kheekheekhee"},"content":"        LocalDateTime dateTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":419,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":420,"author":{"gitId":"kheekheekhee"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":421,"author":{"gitId":"kheekheekhee"},"content":"            dateTime \u003d LocalDateTime.parse(by, DateTimeFormatter.ofPattern(\"MMM d yyyy, h:mm a\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":422,"author":{"gitId":"kheekheekhee"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":423,"author":{"gitId":"kheekheekhee"},"content":"            throw new DataFileChangedException();","lastModifiedDate":"2021-08-25"},{"lineNumber":424,"author":{"gitId":"kheekheekhee"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":425,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":426,"author":{"gitId":"kheekheekhee"},"content":"        return new Deadline(description, dateTime);","lastModifiedDate":"2021-08-25"},{"lineNumber":427,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":428,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":429,"author":{"gitId":"kheekheekhee"},"content":"    private Event extractEvent(String text) throws DataFileChangedException {","lastModifiedDate":"2021-08-25"},{"lineNumber":430,"author":{"gitId":"kheekheekhee"},"content":"        int lastOccurrenceOfAt \u003d text.lastIndexOf(\" (at: \");","lastModifiedDate":"2021-08-24"},{"lineNumber":431,"author":{"gitId":"kheekheekhee"},"content":"        String description \u003d text.substring(0, lastOccurrenceOfAt);","lastModifiedDate":"2021-08-24"},{"lineNumber":432,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":433,"author":{"gitId":"kheekheekhee"},"content":"        // disregards \"( at: \" and trailing \")\"","lastModifiedDate":"2021-08-24"},{"lineNumber":434,"author":{"gitId":"kheekheekhee"},"content":"        String at \u003d text.substring(lastOccurrenceOfAt + 6, text.length() - 1);","lastModifiedDate":"2021-08-24"},{"lineNumber":435,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":436,"author":{"gitId":"kheekheekhee"},"content":"        // throws error if it doesn\u0027t even contain sufficient number of characters for correct format","lastModifiedDate":"2021-08-25"},{"lineNumber":437,"author":{"gitId":"kheekheekhee"},"content":"        if (at.replaceAll(\"\\\\s\", \"\").length() \u003c 22 || at.replaceAll(\"\\\\s\", \"\").length() \u003e 25) { // MMM d yyyy, HH:mm - HH:mm","lastModifiedDate":"2021-08-25"},{"lineNumber":438,"author":{"gitId":"kheekheekhee"},"content":"            throw new DataFileChangedException();","lastModifiedDate":"2021-08-25"},{"lineNumber":439,"author":{"gitId":"kheekheekhee"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":440,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":441,"author":{"gitId":"kheekheekhee"},"content":"        int indexOfComma \u003d at.indexOf(\u0027,\u0027);","lastModifiedDate":"2021-08-25"},{"lineNumber":442,"author":{"gitId":"kheekheekhee"},"content":"        String date \u003d at.substring(0, indexOfComma).trim(); // at this point, date contains 10 chars YYYY/MM/DD","lastModifiedDate":"2021-08-25"},{"lineNumber":443,"author":{"gitId":"kheekheekhee"},"content":"        String eventDuration \u003d at.substring(indexOfComma + 1).trim();","lastModifiedDate":"2021-08-25"},{"lineNumber":444,"author":{"gitId":"kheekheekhee"},"content":"        String[] eventTimes \u003d eventDuration.split(\"-\");","lastModifiedDate":"2021-08-25"},{"lineNumber":445,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":446,"author":{"gitId":"kheekheekhee"},"content":"        // if no \"-\" present","lastModifiedDate":"2021-08-25"},{"lineNumber":447,"author":{"gitId":"kheekheekhee"},"content":"        if (eventTimes.length !\u003d 2) {","lastModifiedDate":"2021-08-25"},{"lineNumber":448,"author":{"gitId":"kheekheekhee"},"content":"            throw new DataFileChangedException();","lastModifiedDate":"2021-08-25"},{"lineNumber":449,"author":{"gitId":"kheekheekhee"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":450,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":451,"author":{"gitId":"kheekheekhee"},"content":"        String startTime \u003d eventTimes[0].trim();","lastModifiedDate":"2021-08-25"},{"lineNumber":452,"author":{"gitId":"kheekheekhee"},"content":"        String endTime \u003d eventTimes[1].trim();","lastModifiedDate":"2021-08-25"},{"lineNumber":453,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":454,"author":{"gitId":"kheekheekhee"},"content":"        LocalDate finalDate;","lastModifiedDate":"2021-08-25"},{"lineNumber":455,"author":{"gitId":"kheekheekhee"},"content":"        LocalTime finalStartTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":456,"author":{"gitId":"kheekheekhee"},"content":"        LocalTime finalEndTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":457,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":458,"author":{"gitId":"kheekheekhee"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":459,"author":{"gitId":"kheekheekhee"},"content":"            // checks if the formats of the input date and time are correct","lastModifiedDate":"2021-08-25"},{"lineNumber":460,"author":{"gitId":"kheekheekhee"},"content":"            finalDate \u003d LocalDate.parse(date, DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":461,"author":{"gitId":"kheekheekhee"},"content":"            finalStartTime \u003d LocalTime.parse(startTime, DateTimeFormatter.ofPattern(\"h:mm a\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":462,"author":{"gitId":"kheekheekhee"},"content":"            finalEndTime \u003d LocalTime.parse(endTime, DateTimeFormatter.ofPattern(\"h:mm a\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":463,"author":{"gitId":"kheekheekhee"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":464,"author":{"gitId":"kheekheekhee"},"content":"            throw new DataFileChangedException();","lastModifiedDate":"2021-08-25"},{"lineNumber":465,"author":{"gitId":"kheekheekhee"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":466,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":467,"author":{"gitId":"kheekheekhee"},"content":"        return new Event(description, finalDate, finalStartTime, finalEndTime);","lastModifiedDate":"2021-08-25"},{"lineNumber":468,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":469,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":470,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":471,"author":{"gitId":"kheekheekhee"},"content":"        new Duke().run();","lastModifiedDate":"2021-08-15"},{"lineNumber":472,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":473,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"kheekheekhee":469,"-":4}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kheekheekhee"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"kheekheekhee"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"kheekheekhee"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"kheekheekhee"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-15"},{"lineNumber":6,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":7,"author":{"gitId":"kheekheekhee"},"content":"    private final LocalDate date;","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"kheekheekhee"},"content":"    private final LocalTime start;","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"kheekheekhee"},"content":"    private final LocalTime end;","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":11,"author":{"gitId":"kheekheekhee"},"content":"    public Event(String description, LocalDate date, LocalTime start, LocalTime end) {","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"kheekheekhee"},"content":"        super(description);","lastModifiedDate":"2021-08-15"},{"lineNumber":13,"author":{"gitId":"kheekheekhee"},"content":"        this.date \u003d date;","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"kheekheekhee"},"content":"        this.start \u003d start;","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"kheekheekhee"},"content":"        this.end \u003d end;","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":17,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":18,"author":{"gitId":"kheekheekhee"},"content":"    @Override","lastModifiedDate":"2021-08-15"},{"lineNumber":19,"author":{"gitId":"kheekheekhee"},"content":"    public String toString() {","lastModifiedDate":"2021-08-15"},{"lineNumber":20,"author":{"gitId":"kheekheekhee"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"))","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"kheekheekhee"},"content":"                + \", \"","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"kheekheekhee"},"content":"                + start.format(DateTimeFormatter.ofPattern(\"h:mm a\"))","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"kheekheekhee"},"content":"                + \" - \"","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"kheekheekhee"},"content":"                + end.format(DateTimeFormatter.ofPattern(\"h:mm a\")) + \")\";","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":26,"author":{"gitId":"kheekheekhee"},"content":"}","lastModifiedDate":"2021-08-15"}],"authorContributionMap":{"kheekheekhee":26}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kheekheekhee"},"content":"public class Task {","lastModifiedDate":"2021-08-15"},{"lineNumber":2,"author":{"gitId":"kheekheekhee"},"content":"    private final String description;","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"kheekheekhee"},"content":"    private boolean isDone;","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":5,"author":{"gitId":"kheekheekhee"},"content":"    public Task(String description) {","lastModifiedDate":"2021-08-15"},{"lineNumber":6,"author":{"gitId":"kheekheekhee"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-15"},{"lineNumber":7,"author":{"gitId":"kheekheekhee"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-15"},{"lineNumber":8,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":9,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":10,"author":{"gitId":"kheekheekhee"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-15"},{"lineNumber":11,"author":{"gitId":"kheekheekhee"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2021-08-15"},{"lineNumber":12,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":13,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":14,"author":{"gitId":"kheekheekhee"},"content":"    public void markAsDone() {","lastModifiedDate":"2021-08-15"},{"lineNumber":15,"author":{"gitId":"kheekheekhee"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-08-15"},{"lineNumber":16,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":17,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":18,"author":{"gitId":"kheekheekhee"},"content":"    @Override","lastModifiedDate":"2021-08-15"},{"lineNumber":19,"author":{"gitId":"kheekheekhee"},"content":"    public String toString() {","lastModifiedDate":"2021-08-15"},{"lineNumber":20,"author":{"gitId":"kheekheekhee"},"content":"        return \"[\" + getStatusIcon() + \"] \" + this.description;","lastModifiedDate":"2021-08-15"},{"lineNumber":21,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":22,"author":{"gitId":"kheekheekhee"},"content":"}","lastModifiedDate":"2021-08-15"}],"authorContributionMap":{"kheekheekhee":22}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kheekheekhee"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-08-15"},{"lineNumber":2,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":3,"author":{"gitId":"kheekheekhee"},"content":"    public Todo(String description) {","lastModifiedDate":"2021-08-15"},{"lineNumber":4,"author":{"gitId":"kheekheekhee"},"content":"        super(description);","lastModifiedDate":"2021-08-15"},{"lineNumber":5,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":6,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":7,"author":{"gitId":"kheekheekhee"},"content":"    @Override","lastModifiedDate":"2021-08-15"},{"lineNumber":8,"author":{"gitId":"kheekheekhee"},"content":"    public String toString() {","lastModifiedDate":"2021-08-15"},{"lineNumber":9,"author":{"gitId":"kheekheekhee"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2021-08-15"},{"lineNumber":10,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":11,"author":{"gitId":"kheekheekhee"},"content":"}","lastModifiedDate":"2021-08-15"}],"authorContributionMap":{"kheekheekhee":11}},{"path":"src/main/java/exception/DataFileChangedException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kheekheekhee"},"content":"package exception;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"kheekheekhee"},"content":"public class DataFileChangedException extends DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"kheekheekhee"},"content":"    public DataFileChangedException() {","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"kheekheekhee"},"content":"        super(\"Contents of file have been changed!\");","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"kheekheekhee"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"kheekheekhee":7}},{"path":"src/main/java/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kheekheekhee"},"content":"package exception;","lastModifiedDate":"2021-08-16"},{"lineNumber":2,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":3,"author":{"gitId":"kheekheekhee"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-08-16"},{"lineNumber":4,"author":{"gitId":"kheekheekhee"},"content":"    public DukeException(String message) {","lastModifiedDate":"2021-08-16"},{"lineNumber":5,"author":{"gitId":"kheekheekhee"},"content":"        super(message);","lastModifiedDate":"2021-08-16"},{"lineNumber":6,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":7,"author":{"gitId":"kheekheekhee"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"kheekheekhee":7}},{"path":"src/main/java/exception/EmptyCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kheekheekhee"},"content":"package exception;","lastModifiedDate":"2021-08-16"},{"lineNumber":2,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":3,"author":{"gitId":"kheekheekhee"},"content":"public class EmptyCommandException extends DukeException {","lastModifiedDate":"2021-08-16"},{"lineNumber":4,"author":{"gitId":"kheekheekhee"},"content":"    public EmptyCommandException() {","lastModifiedDate":"2021-08-16"},{"lineNumber":5,"author":{"gitId":"kheekheekhee"},"content":"        super(\"You left the field blank!\");","lastModifiedDate":"2021-08-16"},{"lineNumber":6,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":7,"author":{"gitId":"kheekheekhee"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"kheekheekhee":7}},{"path":"src/main/java/exception/EmptyListException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kheekheekhee"},"content":"package exception;","lastModifiedDate":"2021-08-16"},{"lineNumber":2,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":3,"author":{"gitId":"kheekheekhee"},"content":"public class EmptyListException extends DukeException {","lastModifiedDate":"2021-08-16"},{"lineNumber":4,"author":{"gitId":"kheekheekhee"},"content":"    public EmptyListException() {","lastModifiedDate":"2021-08-16"},{"lineNumber":5,"author":{"gitId":"kheekheekhee"},"content":"        super(\"The list is currently empty!\");","lastModifiedDate":"2021-08-16"},{"lineNumber":6,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":7,"author":{"gitId":"kheekheekhee"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"kheekheekhee":7}},{"path":"src/main/java/exception/IncorrectFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kheekheekhee"},"content":"package exception;","lastModifiedDate":"2021-08-16"},{"lineNumber":2,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":3,"author":{"gitId":"kheekheekhee"},"content":"public class IncorrectFormatException extends DukeException {","lastModifiedDate":"2021-08-16"},{"lineNumber":4,"author":{"gitId":"kheekheekhee"},"content":"    public IncorrectFormatException(String command, String missingWord) {","lastModifiedDate":"2021-08-16"},{"lineNumber":5,"author":{"gitId":"kheekheekhee"},"content":"        super(\"Please use \" + missingWord + \" when you want to call the \"","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"kheekheekhee"},"content":"                + command","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"kheekheekhee"},"content":"                + \" command and include the date and time as YYYY/MM/DD and HHMM in 24 hour format.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":9,"author":{"gitId":"kheekheekhee"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"kheekheekhee":9}},{"path":"src/main/java/exception/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kheekheekhee"},"content":"package exception;","lastModifiedDate":"2021-08-16"},{"lineNumber":2,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":3,"author":{"gitId":"kheekheekhee"},"content":"public class InvalidCommandException extends DukeException {","lastModifiedDate":"2021-08-16"},{"lineNumber":4,"author":{"gitId":"kheekheekhee"},"content":"    public InvalidCommandException() {","lastModifiedDate":"2021-08-16"},{"lineNumber":5,"author":{"gitId":"kheekheekhee"},"content":"        super(\"Sorry, I don\u0027t understand that command.\");","lastModifiedDate":"2021-08-16"},{"lineNumber":6,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":7,"author":{"gitId":"kheekheekhee"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"kheekheekhee":7}},{"path":"src/main/java/exception/InvalidDateTimeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kheekheekhee"},"content":"package exception;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"kheekheekhee"},"content":"public class InvalidDateTimeException extends DukeException {","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"kheekheekhee"},"content":"    public InvalidDateTimeException() {","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"kheekheekhee"},"content":"        super(\"Your date or time format is wrong! \" +","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"kheekheekhee"},"content":"                \"Please use the format YYYY/MM/DD HHMM where the time is in 24 hours.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"kheekheekhee"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"kheekheekhee":8}},{"path":"src/main/java/exception/InvalidDurationException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kheekheekhee"},"content":"package exception;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"kheekheekhee"},"content":"public class InvalidDurationException extends DukeException {","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"kheekheekhee"},"content":"    public InvalidDurationException() {","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"kheekheekhee"},"content":"        super(\"Please define the duration of your event in the following format: \" +","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"kheekheekhee"},"content":"                \"YYYY/MM/DD HHMM - HHMM in the 24 hours format.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"kheekheekhee"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"kheekheekhee":8}},{"path":"src/main/java/exception/InvalidIndexException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kheekheekhee"},"content":"package exception;","lastModifiedDate":"2021-08-16"},{"lineNumber":2,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":3,"author":{"gitId":"kheekheekhee"},"content":"public class InvalidIndexException extends DukeException {","lastModifiedDate":"2021-08-16"},{"lineNumber":4,"author":{"gitId":"kheekheekhee"},"content":"    public InvalidIndexException(int start, int end, int actual) {","lastModifiedDate":"2021-08-16"},{"lineNumber":5,"author":{"gitId":"kheekheekhee"},"content":"        super(\"You entered an invalid task number of \" + actual + \". Please enter a task number from \" + start + \" to \" + end + \".\");","lastModifiedDate":"2021-08-16"},{"lineNumber":6,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":7,"author":{"gitId":"kheekheekhee"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"kheekheekhee":7}},{"path":"src/main/java/exception/MessageEmptyException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kheekheekhee"},"content":"package exception;","lastModifiedDate":"2021-08-16"},{"lineNumber":2,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":3,"author":{"gitId":"kheekheekhee"},"content":"public class MessageEmptyException extends DukeException {","lastModifiedDate":"2021-08-16"},{"lineNumber":4,"author":{"gitId":"kheekheekhee"},"content":"    public MessageEmptyException() {","lastModifiedDate":"2021-08-16"},{"lineNumber":5,"author":{"gitId":"kheekheekhee"},"content":"        super(\"You forgot to enter a message after the command!\");","lastModifiedDate":"2021-08-16"},{"lineNumber":6,"author":{"gitId":"kheekheekhee"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":7,"author":{"gitId":"kheekheekhee"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"kheekheekhee":7}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"kheekheekhee"},"content":"list","lastModifiedDate":"2021-08-16"},{"lineNumber":2,"author":{"gitId":"kheekheekhee"},"content":"todo read book","lastModifiedDate":"2021-08-15"},{"lineNumber":3,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":4,"author":{"gitId":"kheekheekhee"},"content":"to do","lastModifiedDate":"2021-08-16"},{"lineNumber":5,"author":{"gitId":"kheekheekhee"},"content":"todo","lastModifiedDate":"2021-08-16"},{"lineNumber":6,"author":{"gitId":"kheekheekhee"},"content":"deadline","lastModifiedDate":"2021-08-16"},{"lineNumber":7,"author":{"gitId":"kheekheekhee"},"content":"event","lastModifiedDate":"2021-08-16"},{"lineNumber":8,"author":{"gitId":"kheekheekhee"},"content":"   deadline return book /by 2020/02/02 2222","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"kheekheekhee"},"content":"event project meeting /at 2020/02/02 0200-0400","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"kheekheekhee"},"content":"todo join sports club","lastModifiedDate":"2021-08-15"},{"lineNumber":11,"author":{"gitId":"kheekheekhee"},"content":"todo borrow book","lastModifiedDate":"2021-08-15"},{"lineNumber":12,"author":{"gitId":"kheekheekhee"},"content":"list","lastModifiedDate":"2021-08-15"},{"lineNumber":13,"author":{"gitId":"kheekheekhee"},"content":"done 1","lastModifiedDate":"2021-08-15"},{"lineNumber":14,"author":{"gitId":"kheekheekhee"},"content":"done 4","lastModifiedDate":"2021-08-15"},{"lineNumber":15,"author":{"gitId":"kheekheekhee"},"content":"list","lastModifiedDate":"2021-08-15"},{"lineNumber":16,"author":{"gitId":"kheekheekhee"},"content":"deadline return book /by 2020/02/02 2020","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"kheekheekhee"},"content":"deadline return book by 2020/02/02 2020","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"kheekheekhee"},"content":"event project meeting /at 2021/08/30 1400-1600","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"kheekheekhee"},"content":"event project meeting at Mon 4-6pm","lastModifiedDate":"2021-08-16"},{"lineNumber":20,"author":{"gitId":"kheekheekhee"},"content":"list","lastModifiedDate":"2021-08-15"},{"lineNumber":21,"author":{"gitId":"kheekheekhee"},"content":"event","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"kheekheekhee"},"content":"event /at","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"kheekheekhee"},"content":"event /at tereerfera","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"kheekheekhee"},"content":"event sleep /at 11112222333344445555","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"kheekheekhee"},"content":"event sleep /at 11112222333344-45555","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"kheekheekhee"},"content":"deadline","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"kheekheekhee"},"content":"deadline /by","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"kheekheekhee"},"content":"deadline /by 54","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"kheekheekhee"},"content":"deadline /by 2020/02/02 0600","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"kheekheekhee"},"content":"delete 3","lastModifiedDate":"2021-08-16"},{"lineNumber":31,"author":{"gitId":"kheekheekhee"},"content":"delete 8","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"kheekheekhee"},"content":"done 10","lastModifiedDate":"2021-08-16"},{"lineNumber":33,"author":{"gitId":"kheekheekhee"},"content":"bye","lastModifiedDate":"2021-08-15"}],"authorContributionMap":{"kheekheekhee":33}}]

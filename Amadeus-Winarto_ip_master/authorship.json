[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"Amadeus-Winarto"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":17,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"Amadeus-Winarto"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"Amadeus-Winarto"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":20,"author":{"gitId":"Amadeus-Winarto"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":21,"author":{"gitId":"Amadeus-Winarto"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":22,"author":{"gitId":"Amadeus-Winarto"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":23,"author":{"gitId":"Amadeus-Winarto"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":24,"author":{"gitId":"Amadeus-Winarto"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":25,"author":{"gitId":"Amadeus-Winarto"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":26,"author":{"gitId":"Amadeus-Winarto"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":27,"author":{"gitId":"Amadeus-Winarto"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":28,"author":{"gitId":"Amadeus-Winarto"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":29,"author":{"gitId":"Amadeus-Winarto"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"Amadeus-Winarto"},"content":"    mainClassName \u003d \"bobcat.Launcher\"","lastModifiedDate":"2021-09-01"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"Amadeus-Winarto"},"content":"    archiveBaseName \u003d \"bobcat\"","lastModifiedDate":"2021-08-30"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Amadeus-Winarto":17,"-":44}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2019-07-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"Amadeus-Winarto"},"content":"BobCat is a desktop app for you to manage your todos. This application is optimised for the fast typist out there!","lastModifiedDate":"2021-09-16"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2019-07-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":7,"author":{"gitId":"Amadeus-Winarto"},"content":"### Add Todo Task: `todo`","lastModifiedDate":"2021-09-16"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":9,"author":{"gitId":"Amadeus-Winarto"},"content":"Add a ToDo task into your task list.","lastModifiedDate":"2021-09-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":11,"author":{"gitId":"Amadeus-Winarto"},"content":"Format: `todo DESCRIPTION`","lastModifiedDate":"2021-09-16"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":13,"author":{"gitId":"Amadeus-Winarto"},"content":"Example: `todo Read Book`","lastModifiedDate":"2021-09-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":15,"author":{"gitId":"Amadeus-Winarto"},"content":"### Add Event Task: `event`","lastModifiedDate":"2021-09-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":17,"author":{"gitId":"Amadeus-Winarto"},"content":"Add an Event into your task list.","lastModifiedDate":"2021-09-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":19,"author":{"gitId":"Amadeus-Winarto"},"content":"Format: `event DESCRIPTION /at yyyy-mm-dd`","lastModifiedDate":"2021-09-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":21,"author":{"gitId":"Amadeus-Winarto"},"content":"Example: `event Career Fair /at 2021-09-11`","lastModifiedDate":"2021-09-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":23,"author":{"gitId":"Amadeus-Winarto"},"content":"### Add Deadline Task: `deadline`","lastModifiedDate":"2021-09-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":25,"author":{"gitId":"Amadeus-Winarto"},"content":"Add a Deadline into your task list.","lastModifiedDate":"2021-09-16"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":27,"author":{"gitId":"Amadeus-Winarto"},"content":"Format: `deadline DESCRIPTION /by yyyy-mm-dd`","lastModifiedDate":"2021-09-16"},{"lineNumber":28,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":29,"author":{"gitId":"Amadeus-Winarto"},"content":"Example: `deadline CS2103T iP Submission /at 2021-09-17`","lastModifiedDate":"2021-09-16"},{"lineNumber":30,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":31,"author":{"gitId":"Amadeus-Winarto"},"content":"### List all added Task: `list`","lastModifiedDate":"2021-09-16"},{"lineNumber":32,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":33,"author":{"gitId":"Amadeus-Winarto"},"content":"List all added task","lastModifiedDate":"2021-09-16"},{"lineNumber":34,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":35,"author":{"gitId":"Amadeus-Winarto"},"content":"Format: `list`","lastModifiedDate":"2021-09-16"},{"lineNumber":36,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":37,"author":{"gitId":"Amadeus-Winarto"},"content":"### Delete Task: `delete`","lastModifiedDate":"2021-09-16"},{"lineNumber":38,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":39,"author":{"gitId":"Amadeus-Winarto"},"content":"Delete a previously added task in the task list.","lastModifiedDate":"2021-09-16"},{"lineNumber":40,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":41,"author":{"gitId":"Amadeus-Winarto"},"content":"Format: `delete INDEX`","lastModifiedDate":"2021-09-16"},{"lineNumber":42,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":43,"author":{"gitId":"Amadeus-Winarto"},"content":"Example: `delete 3`","lastModifiedDate":"2021-09-16"},{"lineNumber":44,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":45,"author":{"gitId":"Amadeus-Winarto"},"content":"### Find Task by description: `find`","lastModifiedDate":"2021-09-16"},{"lineNumber":46,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":47,"author":{"gitId":"Amadeus-Winarto"},"content":"Find a task with a matching description. If no exact match are found, tasks will be shown in order of similarity to given description, starting from the most similar.  ","lastModifiedDate":"2021-09-16"},{"lineNumber":48,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":49,"author":{"gitId":"Amadeus-Winarto"},"content":"Format: `find DESCRIPTION`","lastModifiedDate":"2021-09-16"},{"lineNumber":50,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":51,"author":{"gitId":"Amadeus-Winarto"},"content":"Example: `find read`","lastModifiedDate":"2021-09-16"},{"lineNumber":52,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":53,"author":{"gitId":"Amadeus-Winarto"},"content":"### Exit: `bye`","lastModifiedDate":"2021-09-16"},{"lineNumber":54,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":55,"author":{"gitId":"Amadeus-Winarto"},"content":"Close the application","lastModifiedDate":"2021-09-16"},{"lineNumber":56,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":57,"author":{"gitId":"Amadeus-Winarto"},"content":"Format: `bye`","lastModifiedDate":"2021-09-16"},{"lineNumber":58,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":59,"author":{"gitId":"Amadeus-Winarto"},"content":"## Usage and Examples","lastModifiedDate":"2021-09-16"},{"lineNumber":60,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":61,"author":{"gitId":"Amadeus-Winarto"},"content":"Type the commands into the given space, and press enter to run it!","lastModifiedDate":"2021-09-16"},{"lineNumber":62,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":63,"author":{"gitId":"Amadeus-Winarto"},"content":"### List all tasks","lastModifiedDate":"2021-09-16"},{"lineNumber":64,"author":{"gitId":"Amadeus-Winarto"},"content":"`list`: list all tasks","lastModifiedDate":"2021-09-16"},{"lineNumber":65,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":66,"author":{"gitId":"Amadeus-Winarto"},"content":"Output:","lastModifiedDate":"2021-09-16"},{"lineNumber":67,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":68,"author":{"gitId":"Amadeus-Winarto"},"content":"![Demo of list command](./list.png)","lastModifiedDate":"2021-09-16"},{"lineNumber":69,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":70,"author":{"gitId":"Amadeus-Winarto"},"content":"### Add Tasks","lastModifiedDate":"2021-09-16"},{"lineNumber":71,"author":{"gitId":"Amadeus-Winarto"},"content":"`todo Homework`: add Homework as a todo","lastModifiedDate":"2021-09-16"},{"lineNumber":72,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":73,"author":{"gitId":"Amadeus-Winarto"},"content":"`deadline Submission /by 2021-09-30`: add Submission as a deadline due 30 September 2021","lastModifiedDate":"2021-09-16"},{"lineNumber":74,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":75,"author":{"gitId":"Amadeus-Winarto"},"content":"`event Dinner /at 2021-09-27`: add Dinner as an event happening on 27 September 2021","lastModifiedDate":"2021-09-16"},{"lineNumber":76,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":77,"author":{"gitId":"Amadeus-Winarto"},"content":"Output:","lastModifiedDate":"2021-09-16"},{"lineNumber":78,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":79,"author":{"gitId":"Amadeus-Winarto"},"content":"![Demo of todo and deadline commands](./Todo_Deadline.png)","lastModifiedDate":"2021-09-16"},{"lineNumber":80,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":81,"author":{"gitId":"Amadeus-Winarto"},"content":"![Demo of event command](./Event.png)","lastModifiedDate":"2021-09-16"},{"lineNumber":82,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":83,"author":{"gitId":"Amadeus-Winarto"},"content":"![Demo correct result](./List_2.png)","lastModifiedDate":"2021-09-16"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":85,"author":{"gitId":"Amadeus-Winarto"},"content":"### Mark a Task in the task list as done","lastModifiedDate":"2021-09-16"},{"lineNumber":86,"author":{"gitId":"Amadeus-Winarto"},"content":"`done 1`: mark task with index 1 (Homework) as done","lastModifiedDate":"2021-09-16"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":88,"author":{"gitId":"Amadeus-Winarto"},"content":"Output: ","lastModifiedDate":"2021-09-16"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":90,"author":{"gitId":"Amadeus-Winarto"},"content":"![Demo of done](./Done.png)","lastModifiedDate":"2021-09-16"},{"lineNumber":91,"author":{"gitId":"Amadeus-Winarto"},"content":"### Delete a Task in the task list","lastModifiedDate":"2021-09-16"},{"lineNumber":92,"author":{"gitId":"Amadeus-Winarto"},"content":"`delete 2`: delete task with index 2 (Submission) ","lastModifiedDate":"2021-09-16"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":94,"author":{"gitId":"Amadeus-Winarto"},"content":"Output: ","lastModifiedDate":"2021-09-16"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":96,"author":{"gitId":"Amadeus-Winarto"},"content":"![Demo of delete](./Delete.png)","lastModifiedDate":"2021-09-16"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":98,"author":{"gitId":"Amadeus-Winarto"},"content":"### Find a Task in the task list","lastModifiedDate":"2021-09-16"},{"lineNumber":99,"author":{"gitId":"Amadeus-Winarto"},"content":"`find home`: find tasks whose description contain \"home\" (case-insensitive), if any. Otherwise, rank task according to similarity ","lastModifiedDate":"2021-09-16"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":101,"author":{"gitId":"Amadeus-Winarto"},"content":"Output: ","lastModifiedDate":"2021-09-16"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":103,"author":{"gitId":"Amadeus-Winarto"},"content":"![](./Find1.png)","lastModifiedDate":"2021-09-16"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":105,"author":{"gitId":"Amadeus-Winarto"},"content":"`find h0m3`: find tasks whose description contain \"h0m3\" (case-insensitive), if any. Otherwise, rank tasks according to closest match","lastModifiedDate":"2021-09-16"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":107,"author":{"gitId":"Amadeus-Winarto"},"content":"Output: ","lastModifiedDate":"2021-09-16"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":109,"author":{"gitId":"Amadeus-Winarto"},"content":"![](./Find2.png)","lastModifiedDate":"2021-09-16"},{"lineNumber":110,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":111,"author":{"gitId":"Amadeus-Winarto"},"content":"## Acknowledgement","lastModifiedDate":"2021-09-16"},{"lineNumber":112,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":113,"author":{"gitId":"Amadeus-Winarto"},"content":"I would like to acknowledge [JavaFX tutorial @SE-EDU/guides](https://se-education.org/guides/tutorials/javaFx.html) as this project\u0027s GUI is based on the JavaFX tutorial, including design and assets. ","lastModifiedDate":"2021-09-16"}],"authorContributionMap":{"Amadeus-Winarto":87,"-":26}},{"path":"src/main/java/bobcat/BobCat.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Amadeus-Winarto"},"content":"package bobcat;","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":3,"author":{"gitId":"Amadeus-Winarto"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-21"},{"lineNumber":4,"author":{"gitId":"Amadeus-Winarto"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-13"},{"lineNumber":5,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":6,"author":{"gitId":"Amadeus-Winarto"},"content":"import bobcat.exception.BobCatException;","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"Amadeus-Winarto"},"content":"import bobcat.executor.ExecutionUnit;","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"Amadeus-Winarto"},"content":"import bobcat.view.TextUi;","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-13"},{"lineNumber":10,"author":{"gitId":"Amadeus-Winarto"},"content":"/**","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"Amadeus-Winarto"},"content":" * Main entrypoint to the BobCat.BobCat Chat Application. Attempts to follow the MVC pattern","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"Amadeus-Winarto"},"content":" */","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"Amadeus-Winarto"},"content":"public class BobCat {","lastModifiedDate":"2021-08-16"},{"lineNumber":14,"author":{"gitId":"Amadeus-Winarto"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"Amadeus-Winarto"},"content":"     * Provides entrypoint to the BobCat chat app","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"Amadeus-Winarto"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"Amadeus-Winarto"},"content":"    public static void main(String[] args) throws IOException {","lastModifiedDate":"2021-08-21"},{"lineNumber":18,"author":{"gitId":"Amadeus-Winarto"},"content":"        Scanner scanObj \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-13"},{"lineNumber":19,"author":{"gitId":"Amadeus-Winarto"},"content":"        TextUi textUi \u003d new TextUi();","lastModifiedDate":"2021-09-01"},{"lineNumber":20,"author":{"gitId":"Amadeus-Winarto"},"content":"        ExecutionUnit executor \u003d new ExecutionUnit(\"memory/taskList.txt\");","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":22,"author":{"gitId":"Amadeus-Winarto"},"content":"        textUi.respond(new String[]{\"Hello! I\u0027m BobCat.BobCat!\", \"Trying to remember what happened...\"});","lastModifiedDate":"2021-09-01"},{"lineNumber":23,"author":{"gitId":"Amadeus-Winarto"},"content":"        try {","lastModifiedDate":"2021-08-21"},{"lineNumber":24,"author":{"gitId":"Amadeus-Winarto"},"content":"            executor.initStorage();","lastModifiedDate":"2021-08-21"},{"lineNumber":25,"author":{"gitId":"Amadeus-Winarto"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-21"},{"lineNumber":26,"author":{"gitId":"Amadeus-Winarto"},"content":"            textUi.respond(new String[]{\"Memory file not found! Starting from blank state...\"});","lastModifiedDate":"2021-09-01"},{"lineNumber":27,"author":{"gitId":"Amadeus-Winarto"},"content":"        } catch (BobCatException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"Amadeus-Winarto"},"content":"            textUi.respond(new String[]{\"Memory may have been corrupted! Starting from blank state...\"});","lastModifiedDate":"2021-09-01"},{"lineNumber":29,"author":{"gitId":"Amadeus-Winarto"},"content":"            executor.clearStorage();","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"Amadeus-Winarto"},"content":"        } finally {","lastModifiedDate":"2021-08-21"},{"lineNumber":31,"author":{"gitId":"Amadeus-Winarto"},"content":"            textUi.respond(new String[] {\"Initialisation done!\", \"What can I do for you?\"});","lastModifiedDate":"2021-09-01"},{"lineNumber":32,"author":{"gitId":"Amadeus-Winarto"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":33,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":34,"author":{"gitId":"Amadeus-Winarto"},"content":"        String inp \u003d \"\";","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"Amadeus-Winarto"},"content":"        while (!inp.equals(\"bye\")) {","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"Amadeus-Winarto"},"content":"            inp \u003d scanObj.nextLine();","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"Amadeus-Winarto"},"content":"            try {","lastModifiedDate":"2021-08-21"},{"lineNumber":38,"author":{"gitId":"Amadeus-Winarto"},"content":"                textUi.respond(executor.executeCommand(inp));","lastModifiedDate":"2021-09-01"},{"lineNumber":39,"author":{"gitId":"Amadeus-Winarto"},"content":"            } catch (BobCatException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":40,"author":{"gitId":"Amadeus-Winarto"},"content":"                textUi.respondError(e);","lastModifiedDate":"2021-09-01"},{"lineNumber":41,"author":{"gitId":"Amadeus-Winarto"},"content":"            }","lastModifiedDate":"2021-08-13"},{"lineNumber":42,"author":{"gitId":"Amadeus-Winarto"},"content":"        }","lastModifiedDate":"2021-08-13"},{"lineNumber":43,"author":{"gitId":"Amadeus-Winarto"},"content":"        scanObj.close();","lastModifiedDate":"2021-08-16"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"Amadeus-Winarto":43,"-":2}},{"path":"src/main/java/bobcat/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Amadeus-Winarto"},"content":"package bobcat;","lastModifiedDate":"2021-09-01"},{"lineNumber":2,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"Amadeus-Winarto"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"Amadeus-Winarto"},"content":"public class Launcher {","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"Amadeus-Winarto"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"Amadeus-Winarto"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"Amadeus-Winarto"},"content":"}","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"Amadeus-Winarto":9}},{"path":"src/main/java/bobcat/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Amadeus-Winarto"},"content":"package bobcat;","lastModifiedDate":"2021-09-01"},{"lineNumber":2,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"Amadeus-Winarto"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"Amadeus-Winarto"},"content":"import bobcat.exception.BobCatException;","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"Amadeus-Winarto"},"content":"import bobcat.executor.ExecutionUnit;","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"Amadeus-Winarto"},"content":"import bobcat.view.MainWindow;","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"Amadeus-Winarto"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"Amadeus-Winarto"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"Amadeus-Winarto"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"Amadeus-Winarto"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"Amadeus-Winarto"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"Amadeus-Winarto"},"content":"public class Main extends Application {","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"Amadeus-Winarto"},"content":"    @Override","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"Amadeus-Winarto"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2021-09-17"},{"lineNumber":17,"author":{"gitId":"Amadeus-Winarto"},"content":"        try {","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"Amadeus-Winarto"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"Amadeus-Winarto"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2021-09-01"},{"lineNumber":20,"author":{"gitId":"Amadeus-Winarto"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2021-09-01"},{"lineNumber":21,"author":{"gitId":"Amadeus-Winarto"},"content":"            ExecutionUnit executor \u003d new ExecutionUnit(\"memory/taskList.txt\");","lastModifiedDate":"2021-09-01"},{"lineNumber":22,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":23,"author":{"gitId":"Amadeus-Winarto"},"content":"            stage.setScene(scene);","lastModifiedDate":"2021-09-01"},{"lineNumber":24,"author":{"gitId":"Amadeus-Winarto"},"content":"            MainWindow mainWindow \u003d fxmlLoader.\u003cMainWindow\u003egetController();","lastModifiedDate":"2021-09-01"},{"lineNumber":25,"author":{"gitId":"Amadeus-Winarto"},"content":"            mainWindow.setExecutor(executor);","lastModifiedDate":"2021-09-01"},{"lineNumber":26,"author":{"gitId":"Amadeus-Winarto"},"content":"            mainWindow.setStage(stage);","lastModifiedDate":"2021-09-05"},{"lineNumber":27,"author":{"gitId":"Amadeus-Winarto"},"content":"            stage.setTitle(\"BobCat\");","lastModifiedDate":"2021-09-16"},{"lineNumber":28,"author":{"gitId":"Amadeus-Winarto"},"content":"            stage.show();","lastModifiedDate":"2021-09-01"},{"lineNumber":29,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":30,"author":{"gitId":"Amadeus-Winarto"},"content":"            mainWindow.respondBobCat(new String[]{\"Hello! I\u0027m BobCat!\", \"Trying to remember what happened...\"});","lastModifiedDate":"2021-09-01"},{"lineNumber":31,"author":{"gitId":"Amadeus-Winarto"},"content":"            try {","lastModifiedDate":"2021-09-01"},{"lineNumber":32,"author":{"gitId":"Amadeus-Winarto"},"content":"                executor.initStorage();","lastModifiedDate":"2021-09-01"},{"lineNumber":33,"author":{"gitId":"Amadeus-Winarto"},"content":"            } catch (IOException e) {","lastModifiedDate":"2021-09-01"},{"lineNumber":34,"author":{"gitId":"Amadeus-Winarto"},"content":"                mainWindow.respondBobCat(new String[]{\"Memory file not found! Starting from blank state...\"});","lastModifiedDate":"2021-09-01"},{"lineNumber":35,"author":{"gitId":"Amadeus-Winarto"},"content":"            } catch (BobCatException e) {","lastModifiedDate":"2021-09-01"},{"lineNumber":36,"author":{"gitId":"Amadeus-Winarto"},"content":"                mainWindow.respondBobCat(new String[]{\"Memory may have been corrupted! Starting from blank state...\"});","lastModifiedDate":"2021-09-01"},{"lineNumber":37,"author":{"gitId":"Amadeus-Winarto"},"content":"                executor.clearStorage();","lastModifiedDate":"2021-09-01"},{"lineNumber":38,"author":{"gitId":"Amadeus-Winarto"},"content":"            } finally {","lastModifiedDate":"2021-09-01"},{"lineNumber":39,"author":{"gitId":"Amadeus-Winarto"},"content":"                mainWindow.respondBobCat(new String[] {\"Initialisation done!\", \"What can I do for you?\"});","lastModifiedDate":"2021-09-01"},{"lineNumber":40,"author":{"gitId":"Amadeus-Winarto"},"content":"            }","lastModifiedDate":"2021-09-01"},{"lineNumber":41,"author":{"gitId":"Amadeus-Winarto"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-01"},{"lineNumber":42,"author":{"gitId":"Amadeus-Winarto"},"content":"            System.out.println(\"Error\");","lastModifiedDate":"2021-09-01"},{"lineNumber":43,"author":{"gitId":"Amadeus-Winarto"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-09-01"},{"lineNumber":44,"author":{"gitId":"Amadeus-Winarto"},"content":"        }","lastModifiedDate":"2021-09-01"},{"lineNumber":45,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":46,"author":{"gitId":"Amadeus-Winarto"},"content":"}","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"Amadeus-Winarto":46}},{"path":"src/main/java/bobcat/exception/BobCatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Amadeus-Winarto"},"content":"package bobcat.exception;","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"Amadeus-Winarto"},"content":"/**","lastModifiedDate":"2021-09-05"},{"lineNumber":4,"author":{"gitId":"Amadeus-Winarto"},"content":" * RuntimeException for BobCat. All unchecked exceptions in BobCat should throw an exception that extends","lastModifiedDate":"2021-09-05"},{"lineNumber":5,"author":{"gitId":"Amadeus-Winarto"},"content":" * BobCatException","lastModifiedDate":"2021-09-05"},{"lineNumber":6,"author":{"gitId":"Amadeus-Winarto"},"content":" */","lastModifiedDate":"2021-09-05"},{"lineNumber":7,"author":{"gitId":"Amadeus-Winarto"},"content":"public class BobCatException extends RuntimeException {","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"Amadeus-Winarto"},"content":"    public BobCatException(String errorMessage) {","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"Amadeus-Winarto"},"content":"        super(errorMessage);","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"Amadeus-Winarto"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"Amadeus-Winarto":11}},{"path":"src/main/java/bobcat/exception/CommandArityException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Amadeus-Winarto"},"content":"package bobcat.exception;","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":3,"author":{"gitId":"Amadeus-Winarto"},"content":"/**","lastModifiedDate":"2021-09-05"},{"lineNumber":4,"author":{"gitId":"Amadeus-Winarto"},"content":" * A ParserException that is thrown when number of arguments to the command do not match","lastModifiedDate":"2021-09-05"},{"lineNumber":5,"author":{"gitId":"Amadeus-Winarto"},"content":" * the expected number of arguments","lastModifiedDate":"2021-09-05"},{"lineNumber":6,"author":{"gitId":"Amadeus-Winarto"},"content":" */","lastModifiedDate":"2021-09-05"},{"lineNumber":7,"author":{"gitId":"Amadeus-Winarto"},"content":"public class CommandArityException extends ParserException {","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"Amadeus-Winarto"},"content":"    public CommandArityException(String errorMessage) {","lastModifiedDate":"2021-08-16"},{"lineNumber":9,"author":{"gitId":"Amadeus-Winarto"},"content":"        super(errorMessage);","lastModifiedDate":"2021-08-16"},{"lineNumber":10,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":11,"author":{"gitId":"Amadeus-Winarto"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"Amadeus-Winarto":11}},{"path":"src/main/java/bobcat/exception/ExitException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Amadeus-Winarto"},"content":"package bobcat.exception;","lastModifiedDate":"2021-09-05"},{"lineNumber":2,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":3,"author":{"gitId":"Amadeus-Winarto"},"content":"public class ExitException extends LogicException {","lastModifiedDate":"2021-09-05"},{"lineNumber":4,"author":{"gitId":"Amadeus-Winarto"},"content":"    public ExitException(String errorMessage) {","lastModifiedDate":"2021-09-05"},{"lineNumber":5,"author":{"gitId":"Amadeus-Winarto"},"content":"        super(errorMessage);","lastModifiedDate":"2021-09-05"},{"lineNumber":6,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-09-05"},{"lineNumber":7,"author":{"gitId":"Amadeus-Winarto"},"content":"}","lastModifiedDate":"2021-09-05"}],"authorContributionMap":{"Amadeus-Winarto":7}},{"path":"src/main/java/bobcat/exception/InvalidArgumentException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Amadeus-Winarto"},"content":"package bobcat.exception;","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"Amadeus-Winarto"},"content":"/**","lastModifiedDate":"2021-09-05"},{"lineNumber":4,"author":{"gitId":"Amadeus-Winarto"},"content":" * A ParserException that is thrown when the arguments to a command is not understandable by the parser","lastModifiedDate":"2021-09-05"},{"lineNumber":5,"author":{"gitId":"Amadeus-Winarto"},"content":" */","lastModifiedDate":"2021-09-05"},{"lineNumber":6,"author":{"gitId":"Amadeus-Winarto"},"content":"public class InvalidArgumentException extends ParserException {","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"Amadeus-Winarto"},"content":"    public InvalidArgumentException(String errorMessage) {","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"Amadeus-Winarto"},"content":"        super(errorMessage);","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"Amadeus-Winarto"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"Amadeus-Winarto":10}},{"path":"src/main/java/bobcat/exception/InvalidOpsException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Amadeus-Winarto"},"content":"package bobcat.exception;","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"Amadeus-Winarto"},"content":"/**","lastModifiedDate":"2021-09-05"},{"lineNumber":4,"author":{"gitId":"Amadeus-Winarto"},"content":" * A LogicException that is thrown when the given command cannot be executed","lastModifiedDate":"2021-09-05"},{"lineNumber":5,"author":{"gitId":"Amadeus-Winarto"},"content":" */","lastModifiedDate":"2021-09-05"},{"lineNumber":6,"author":{"gitId":"Amadeus-Winarto"},"content":"public class InvalidOpsException extends LogicException {","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"Amadeus-Winarto"},"content":"    public InvalidOpsException(String errorMessage) {","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"Amadeus-Winarto"},"content":"        super(errorMessage);","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"Amadeus-Winarto"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"Amadeus-Winarto":10}},{"path":"src/main/java/bobcat/exception/LogicException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Amadeus-Winarto"},"content":"package bobcat.exception;","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"Amadeus-Winarto"},"content":"/**","lastModifiedDate":"2021-09-05"},{"lineNumber":4,"author":{"gitId":"Amadeus-Winarto"},"content":" * A BobCatException that is thrown due to errors during execution of a given command","lastModifiedDate":"2021-09-05"},{"lineNumber":5,"author":{"gitId":"Amadeus-Winarto"},"content":" */","lastModifiedDate":"2021-09-05"},{"lineNumber":6,"author":{"gitId":"Amadeus-Winarto"},"content":"public class LogicException extends BobCatException {","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"Amadeus-Winarto"},"content":"    public LogicException(String errorMessage) {","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"Amadeus-Winarto"},"content":"        super(errorMessage);","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"Amadeus-Winarto"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"Amadeus-Winarto":10}},{"path":"src/main/java/bobcat/exception/ParserException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Amadeus-Winarto"},"content":"package bobcat.exception;","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"Amadeus-Winarto"},"content":"/**","lastModifiedDate":"2021-09-05"},{"lineNumber":4,"author":{"gitId":"Amadeus-Winarto"},"content":" * A BobCatException that is thrown due to errors in the parser","lastModifiedDate":"2021-09-05"},{"lineNumber":5,"author":{"gitId":"Amadeus-Winarto"},"content":" */","lastModifiedDate":"2021-09-05"},{"lineNumber":6,"author":{"gitId":"Amadeus-Winarto"},"content":"public class ParserException extends BobCatException {","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"Amadeus-Winarto"},"content":"    public ParserException(String errorMessage) {","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"Amadeus-Winarto"},"content":"        super(errorMessage);","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"Amadeus-Winarto"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"Amadeus-Winarto":10}},{"path":"src/main/java/bobcat/exception/UnknownCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Amadeus-Winarto"},"content":"package bobcat.exception;","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"Amadeus-Winarto"},"content":"/**","lastModifiedDate":"2021-09-05"},{"lineNumber":4,"author":{"gitId":"Amadeus-Winarto"},"content":" * A ParserException that is thrown when a given command is not recognised by the parser","lastModifiedDate":"2021-09-05"},{"lineNumber":5,"author":{"gitId":"Amadeus-Winarto"},"content":" */","lastModifiedDate":"2021-09-05"},{"lineNumber":6,"author":{"gitId":"Amadeus-Winarto"},"content":"public class UnknownCommandException extends ParserException {","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"Amadeus-Winarto"},"content":"    public UnknownCommandException(String errorMessage) {","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"Amadeus-Winarto"},"content":"        super(errorMessage);","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"Amadeus-Winarto"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"Amadeus-Winarto":10}},{"path":"src/main/java/bobcat/executor/ExecutionUnit.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Amadeus-Winarto"},"content":"package bobcat.executor;","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"Amadeus-Winarto"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"Amadeus-Winarto"},"content":"import java.util.Objects;","lastModifiedDate":"2021-09-06"},{"lineNumber":5,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"Amadeus-Winarto"},"content":"import bobcat.executor.command.basic.Bye;","lastModifiedDate":"2021-09-05"},{"lineNumber":7,"author":{"gitId":"Amadeus-Winarto"},"content":"import bobcat.executor.command.basic.Find;","lastModifiedDate":"2021-09-05"},{"lineNumber":8,"author":{"gitId":"Amadeus-Winarto"},"content":"import bobcat.executor.command.basic.List;","lastModifiedDate":"2021-09-16"},{"lineNumber":9,"author":{"gitId":"Amadeus-Winarto"},"content":"import bobcat.executor.command.create.Deadline;","lastModifiedDate":"2021-09-05"},{"lineNumber":10,"author":{"gitId":"Amadeus-Winarto"},"content":"import bobcat.executor.command.create.Event;","lastModifiedDate":"2021-09-05"},{"lineNumber":11,"author":{"gitId":"Amadeus-Winarto"},"content":"import bobcat.executor.command.create.ToDo;","lastModifiedDate":"2021-09-05"},{"lineNumber":12,"author":{"gitId":"Amadeus-Winarto"},"content":"import bobcat.executor.command.mutate.Delete;","lastModifiedDate":"2021-09-05"},{"lineNumber":13,"author":{"gitId":"Amadeus-Winarto"},"content":"import bobcat.executor.command.mutate.Done;","lastModifiedDate":"2021-09-05"},{"lineNumber":14,"author":{"gitId":"Amadeus-Winarto"},"content":"import bobcat.executor.parser.QueryParser;","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"Amadeus-Winarto"},"content":"import bobcat.model.TaskList;","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"Amadeus-Winarto"},"content":"/**","lastModifiedDate":"2021-09-05"},{"lineNumber":18,"author":{"gitId":"Amadeus-Winarto"},"content":" * Executes the logic part of the commands of BobCat","lastModifiedDate":"2021-09-05"},{"lineNumber":19,"author":{"gitId":"Amadeus-Winarto"},"content":" */","lastModifiedDate":"2021-09-05"},{"lineNumber":20,"author":{"gitId":"Amadeus-Winarto"},"content":"public class ExecutionUnit {","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"Amadeus-Winarto"},"content":"    private final QueryParser parser \u003d new QueryParser();","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"Amadeus-Winarto"},"content":"    private final Storage storeExecutor \u003d new Storage();","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"Amadeus-Winarto"},"content":"    private TaskList taskList \u003d new TaskList();","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"Amadeus-Winarto"},"content":"    private final String storagePath;","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"Amadeus-Winarto"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":27,"author":{"gitId":"Amadeus-Winarto"},"content":"     * Creations an \u003ccode\u003eExecutionUnit\u003c/code\u003e responsible for logic flow of BobCat. All user queries should be","lastModifiedDate":"2021-09-06"},{"lineNumber":28,"author":{"gitId":"Amadeus-Winarto"},"content":"     * directed to \u003ccode\u003eExecutionUnit\u003c/code\u003e","lastModifiedDate":"2021-09-06"},{"lineNumber":29,"author":{"gitId":"Amadeus-Winarto"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":30,"author":{"gitId":"Amadeus-Winarto"},"content":"    public ExecutionUnit(String storagePath) {","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"Amadeus-Winarto"},"content":"        this.storagePath \u003d storagePath;","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"Amadeus-Winarto"},"content":"        assert !Objects.equals(storagePath, null) \u0026\u0026 !Objects.equals(storagePath, \"\");","lastModifiedDate":"2021-09-06"},{"lineNumber":33,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"Amadeus-Winarto"},"content":"    public void initStorage() throws IOException {","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"Amadeus-Winarto"},"content":"        storeExecutor.initStorage(storagePath, taskList);","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"Amadeus-Winarto"},"content":"    public void clearStorage() {","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"Amadeus-Winarto"},"content":"        taskList \u003d new TaskList();","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"Amadeus-Winarto"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":43,"author":{"gitId":"Amadeus-Winarto"},"content":"     * Executes the given query. ExecutionUnit will pass the query to the appropriate parser and execute the","lastModifiedDate":"2021-08-30"},{"lineNumber":44,"author":{"gitId":"Amadeus-Winarto"},"content":"     * arguments according to the command recognised by the parser.","lastModifiedDate":"2021-08-30"},{"lineNumber":45,"author":{"gitId":"Amadeus-Winarto"},"content":"     * @param query The given query to the chat app","lastModifiedDate":"2021-08-30"},{"lineNumber":46,"author":{"gitId":"Amadeus-Winarto"},"content":"     * @return Array of strings representing information received after query is executed","lastModifiedDate":"2021-08-30"},{"lineNumber":47,"author":{"gitId":"Amadeus-Winarto"},"content":"     * @throws IOException may be thrown if given storagePath to ExecutionUnit does not exist","lastModifiedDate":"2021-08-30"},{"lineNumber":48,"author":{"gitId":"Amadeus-Winarto"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":49,"author":{"gitId":"Amadeus-Winarto"},"content":"    public String[] executeCommand(String query) throws IOException { // Very sus...","lastModifiedDate":"2021-09-05"},{"lineNumber":50,"author":{"gitId":"Amadeus-Winarto"},"content":"        String[] queryArr;","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"Amadeus-Winarto"},"content":"        queryArr \u003d parser.parse(query);","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"Amadeus-Winarto"},"content":"        String[] reply;","lastModifiedDate":"2021-09-05"},{"lineNumber":54,"author":{"gitId":"Amadeus-Winarto"},"content":"        reply \u003d Objects.equals(queryArr[0], \"list\")","lastModifiedDate":"2021-09-16"},{"lineNumber":55,"author":{"gitId":"Amadeus-Winarto"},"content":"                ? List.execute(taskList, queryArr)","lastModifiedDate":"2021-09-16"},{"lineNumber":56,"author":{"gitId":"Amadeus-Winarto"},"content":"                : Objects.equals(queryArr[0], \"bye\")","lastModifiedDate":"2021-09-16"},{"lineNumber":57,"author":{"gitId":"Amadeus-Winarto"},"content":"                ? Bye.execute(taskList, queryArr)","lastModifiedDate":"2021-09-16"},{"lineNumber":58,"author":{"gitId":"Amadeus-Winarto"},"content":"                : Objects.equals(queryArr[0], \"find\")","lastModifiedDate":"2021-09-16"},{"lineNumber":59,"author":{"gitId":"Amadeus-Winarto"},"content":"                ? Find.execute(taskList, queryArr)","lastModifiedDate":"2021-09-16"},{"lineNumber":60,"author":{"gitId":"Amadeus-Winarto"},"content":"                : Objects.equals(queryArr[0], \"done\")","lastModifiedDate":"2021-09-16"},{"lineNumber":61,"author":{"gitId":"Amadeus-Winarto"},"content":"                ? Done.execute(taskList, queryArr)","lastModifiedDate":"2021-09-16"},{"lineNumber":62,"author":{"gitId":"Amadeus-Winarto"},"content":"                : Objects.equals(queryArr[0], \"delete\")","lastModifiedDate":"2021-09-16"},{"lineNumber":63,"author":{"gitId":"Amadeus-Winarto"},"content":"                ? Delete.execute(taskList, queryArr)","lastModifiedDate":"2021-09-16"},{"lineNumber":64,"author":{"gitId":"Amadeus-Winarto"},"content":"                : Objects.equals(queryArr[0], \"todo\")","lastModifiedDate":"2021-09-16"},{"lineNumber":65,"author":{"gitId":"Amadeus-Winarto"},"content":"                ? ToDo.execute(taskList, queryArr)","lastModifiedDate":"2021-09-16"},{"lineNumber":66,"author":{"gitId":"Amadeus-Winarto"},"content":"                : Objects.equals(queryArr[0], \"deadline\")","lastModifiedDate":"2021-09-16"},{"lineNumber":67,"author":{"gitId":"Amadeus-Winarto"},"content":"                ? Deadline.execute(taskList, queryArr)","lastModifiedDate":"2021-09-16"},{"lineNumber":68,"author":{"gitId":"Amadeus-Winarto"},"content":"                : Objects.equals(queryArr[0], \"event\")","lastModifiedDate":"2021-09-16"},{"lineNumber":69,"author":{"gitId":"Amadeus-Winarto"},"content":"                ? Event.execute(taskList, queryArr)","lastModifiedDate":"2021-09-16"},{"lineNumber":70,"author":{"gitId":"Amadeus-Winarto"},"content":"                : null;","lastModifiedDate":"2021-09-16"},{"lineNumber":71,"author":{"gitId":"Amadeus-Winarto"},"content":"        storeExecutor.saveStorage(storagePath, taskList);","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"Amadeus-Winarto"},"content":"        return reply;","lastModifiedDate":"2021-09-05"},{"lineNumber":73,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"Amadeus-Winarto"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"Amadeus-Winarto":74}},{"path":"src/main/java/bobcat/executor/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Amadeus-Winarto"},"content":"package bobcat.executor;","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"Amadeus-Winarto"},"content":"import java.io.BufferedWriter;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"Amadeus-Winarto"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"Amadeus-Winarto"},"content":"import java.nio.file.Files;","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"Amadeus-Winarto"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"Amadeus-Winarto"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"Amadeus-Winarto"},"content":"import java.nio.file.StandardOpenOption;","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"Amadeus-Winarto"},"content":"import java.util.List;","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"Amadeus-Winarto"},"content":"import java.util.Objects;","lastModifiedDate":"2021-09-06"},{"lineNumber":11,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"Amadeus-Winarto"},"content":"import bobcat.executor.parser.StorageParser;","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"Amadeus-Winarto"},"content":"import bobcat.model.TaskList;","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"Amadeus-Winarto"},"content":"import bobcat.model.task.Task;","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"Amadeus-Winarto"},"content":"/**","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"Amadeus-Winarto"},"content":" * Represents the \"memory\" part of the application. A \u003ccode\u003eStorage\u003c/code\u003e object dictates \u003ci\u003ehow\u003c/i\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"Amadeus-Winarto"},"content":" * \u003ccode\u003eTaskList\u003c/code\u003e should be modified according to storage file, and also stores data into storage file.","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"Amadeus-Winarto"},"content":" * This class enables seamless interface between chat application and storage method, should the need arise to modify","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"Amadeus-Winarto"},"content":" * storage method e.g. file extensions, etc","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"Amadeus-Winarto"},"content":" */","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"Amadeus-Winarto"},"content":"public class Storage {","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"Amadeus-Winarto"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"Amadeus-Winarto"},"content":"     * Initialises given \u003ccode\u003eTaskList\u003c/code\u003e according to the content of the file in storagePath. Uses a","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"Amadeus-Winarto"},"content":"     * \u003ccode\u003eStorageParser\u003c/code\u003e object to parse the content of the file. If any single line in the file cannot be","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"Amadeus-Winarto"},"content":"     * understood by \u003ccode\u003eStorageParser\u003c/code\u003e, the whole operation stops.","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"Amadeus-Winarto"},"content":"     * @param storagePath Relative path to storage file","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"Amadeus-Winarto"},"content":"     * @param taskList TaskList to be appended onto","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"Amadeus-Winarto"},"content":"     * @throws IOException May throw IOException if storagePath is not appropriate.","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"Amadeus-Winarto"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"Amadeus-Winarto"},"content":"    public void initStorage(String storagePath, TaskList taskList) throws IOException {","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"Amadeus-Winarto"},"content":"        assert !Objects.equals(storagePath, null) \u0026\u0026 !Objects.equals(storagePath, \"\");","lastModifiedDate":"2021-09-06"},{"lineNumber":34,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":35,"author":{"gitId":"Amadeus-Winarto"},"content":"        StorageParser storeParser \u003d new StorageParser();","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"Amadeus-Winarto"},"content":"        Path path \u003d Paths.get(storagePath);","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"Amadeus-Winarto"},"content":"        List\u003cString\u003e read \u003d Files.readAllLines(path);","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"Amadeus-Winarto"},"content":"        for (String storeCmd : read) {","lastModifiedDate":"2021-08-23"},{"lineNumber":39,"author":{"gitId":"Amadeus-Winarto"},"content":"            Task t \u003d storeParser.parse(storeCmd);","lastModifiedDate":"2021-08-23"},{"lineNumber":40,"author":{"gitId":"Amadeus-Winarto"},"content":"            taskList.push(t);","lastModifiedDate":"2021-08-23"},{"lineNumber":41,"author":{"gitId":"Amadeus-Winarto"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":42,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":43,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":44,"author":{"gitId":"Amadeus-Winarto"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":45,"author":{"gitId":"Amadeus-Winarto"},"content":"     * Saves given \u003ccode\u003eTaskList\u003c/code\u003e into a file according to storagePath. Will overwrite existing file, or","lastModifiedDate":"2021-08-23"},{"lineNumber":46,"author":{"gitId":"Amadeus-Winarto"},"content":"     * create it if given filename does not exist.","lastModifiedDate":"2021-08-23"},{"lineNumber":47,"author":{"gitId":"Amadeus-Winarto"},"content":"     * @param storagePath Relative path to storage file","lastModifiedDate":"2021-08-23"},{"lineNumber":48,"author":{"gitId":"Amadeus-Winarto"},"content":"     * @param taskList TaskList to be saved","lastModifiedDate":"2021-08-23"},{"lineNumber":49,"author":{"gitId":"Amadeus-Winarto"},"content":"     * @throws IOException May throw IOException if storagePath is not appropriate.","lastModifiedDate":"2021-08-23"},{"lineNumber":50,"author":{"gitId":"Amadeus-Winarto"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":51,"author":{"gitId":"Amadeus-Winarto"},"content":"    public void saveStorage(String storagePath, TaskList taskList) throws IOException {","lastModifiedDate":"2021-08-23"},{"lineNumber":52,"author":{"gitId":"Amadeus-Winarto"},"content":"        Path path \u003d Paths.get(storagePath);","lastModifiedDate":"2021-08-23"},{"lineNumber":53,"author":{"gitId":"Amadeus-Winarto"},"content":"        Files.createDirectories(path.getParent());","lastModifiedDate":"2021-08-23"},{"lineNumber":54,"author":{"gitId":"Amadeus-Winarto"},"content":"        Files.deleteIfExists(path);","lastModifiedDate":"2021-08-23"},{"lineNumber":55,"author":{"gitId":"Amadeus-Winarto"},"content":"        Files.createFile(path);","lastModifiedDate":"2021-08-23"},{"lineNumber":56,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":57,"author":{"gitId":"Amadeus-Winarto"},"content":"        Task[] all \u003d taskList.getAllTasks();","lastModifiedDate":"2021-08-23"},{"lineNumber":58,"author":{"gitId":"Amadeus-Winarto"},"content":"        BufferedWriter bw \u003d Files.newBufferedWriter(path, StandardOpenOption.APPEND);","lastModifiedDate":"2021-08-23"},{"lineNumber":59,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":60,"author":{"gitId":"Amadeus-Winarto"},"content":"        for (Task t : all) {","lastModifiedDate":"2021-08-23"},{"lineNumber":61,"author":{"gitId":"Amadeus-Winarto"},"content":"            bw.write(t.toString() + \"\\n\");","lastModifiedDate":"2021-08-23"},{"lineNumber":62,"author":{"gitId":"Amadeus-Winarto"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":63,"author":{"gitId":"Amadeus-Winarto"},"content":"        bw.close();","lastModifiedDate":"2021-08-23"},{"lineNumber":64,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":65,"author":{"gitId":"Amadeus-Winarto"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"Amadeus-Winarto":65}},{"path":"src/main/java/bobcat/executor/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Amadeus-Winarto"},"content":"package bobcat.executor.command;","lastModifiedDate":"2021-09-05"},{"lineNumber":2,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":3,"author":{"gitId":"Amadeus-Winarto"},"content":"public interface Command {","lastModifiedDate":"2021-09-05"},{"lineNumber":4,"author":{"gitId":"Amadeus-Winarto"},"content":"}","lastModifiedDate":"2021-09-05"}],"authorContributionMap":{"Amadeus-Winarto":4}},{"path":"src/main/java/bobcat/executor/command/basic/BasicCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Amadeus-Winarto"},"content":"package bobcat.executor.command.basic;","lastModifiedDate":"2021-09-05"},{"lineNumber":2,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":3,"author":{"gitId":"Amadeus-Winarto"},"content":"import bobcat.executor.command.Command;","lastModifiedDate":"2021-09-05"},{"lineNumber":4,"author":{"gitId":"Amadeus-Winarto"},"content":"public abstract class BasicCommand implements Command {","lastModifiedDate":"2021-09-05"},{"lineNumber":5,"author":{"gitId":"Amadeus-Winarto"},"content":"}","lastModifiedDate":"2021-09-05"}],"authorContributionMap":{"Amadeus-Winarto":5}},{"path":"src/main/java/bobcat/executor/command/basic/Bye.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Amadeus-Winarto"},"content":"package bobcat.executor.command.basic;","lastModifiedDate":"2021-09-05"},{"lineNumber":2,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":3,"author":{"gitId":"Amadeus-Winarto"},"content":"import bobcat.exception.ExitException;","lastModifiedDate":"2021-09-16"},{"lineNumber":4,"author":{"gitId":"Amadeus-Winarto"},"content":"import bobcat.model.TaskList;","lastModifiedDate":"2021-09-05"},{"lineNumber":5,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":6,"author":{"gitId":"Amadeus-Winarto"},"content":"public class Bye extends BasicCommand {","lastModifiedDate":"2021-09-05"},{"lineNumber":7,"author":{"gitId":"Amadeus-Winarto"},"content":"    public static String[] execute(TaskList taskList, String... args) {","lastModifiedDate":"2021-09-05"},{"lineNumber":8,"author":{"gitId":"Amadeus-Winarto"},"content":"        throw new ExitException(\"Bye! Hope to see you again soon!\");","lastModifiedDate":"2021-09-16"},{"lineNumber":9,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-09-05"},{"lineNumber":10,"author":{"gitId":"Amadeus-Winarto"},"content":"}","lastModifiedDate":"2021-09-05"}],"authorContributionMap":{"Amadeus-Winarto":10}},{"path":"src/main/java/bobcat/executor/command/basic/Find.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Amadeus-Winarto"},"content":"package bobcat.executor.command.basic;","lastModifiedDate":"2021-09-05"},{"lineNumber":2,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":3,"author":{"gitId":"Amadeus-Winarto"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-05"},{"lineNumber":4,"author":{"gitId":"Amadeus-Winarto"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-09-05"},{"lineNumber":5,"author":{"gitId":"Amadeus-Winarto"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-09-05"},{"lineNumber":6,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":7,"author":{"gitId":"Amadeus-Winarto"},"content":"import bobcat.model.TaskList;","lastModifiedDate":"2021-09-05"},{"lineNumber":8,"author":{"gitId":"Amadeus-Winarto"},"content":"import bobcat.model.task.Task;","lastModifiedDate":"2021-09-05"},{"lineNumber":9,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":10,"author":{"gitId":"Amadeus-Winarto"},"content":"public class Find extends BasicCommand {","lastModifiedDate":"2021-09-05"},{"lineNumber":11,"author":{"gitId":"Amadeus-Winarto"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":12,"author":{"gitId":"Amadeus-Winarto"},"content":"     * Finds a \u003ccode\u003eTask\u003c/code\u003e to the provided \u003ccode\u003eTaskList\u003c/code\u003e, with \u003ccode\u003eargs\u003c/code\u003e being the description","lastModifiedDate":"2021-09-06"},{"lineNumber":13,"author":{"gitId":"Amadeus-Winarto"},"content":"     * field","lastModifiedDate":"2021-09-06"},{"lineNumber":14,"author":{"gitId":"Amadeus-Winarto"},"content":"     * @param taskList \u003ccode\u003eTaskList\u003c/code\u003e to be modified","lastModifiedDate":"2021-09-06"},{"lineNumber":15,"author":{"gitId":"Amadeus-Winarto"},"content":"     * @param args description of \u003ccode\u003eTask\u003c/code\u003e to be found. Can be partially written","lastModifiedDate":"2021-09-06"},{"lineNumber":16,"author":{"gitId":"Amadeus-Winarto"},"content":"     * @return Array of Strings to display","lastModifiedDate":"2021-09-06"},{"lineNumber":17,"author":{"gitId":"Amadeus-Winarto"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":18,"author":{"gitId":"Amadeus-Winarto"},"content":"    public static String[] execute(TaskList taskList, String... args) {","lastModifiedDate":"2021-09-05"},{"lineNumber":19,"author":{"gitId":"Amadeus-Winarto"},"content":"        java.util.List\u003cString\u003e initReply \u003d new ArrayList\u003cString\u003e();","lastModifiedDate":"2021-09-05"},{"lineNumber":20,"author":{"gitId":"Amadeus-Winarto"},"content":"        initReply.add(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2021-09-05"},{"lineNumber":21,"author":{"gitId":"Amadeus-Winarto"},"content":"        Task[] foundTasks \u003d taskList.findByName(args[1]);","lastModifiedDate":"2021-09-05"},{"lineNumber":22,"author":{"gitId":"Amadeus-Winarto"},"content":"        initReply.addAll(Stream.iterate(1, x -\u003e x + 1)","lastModifiedDate":"2021-09-05"},{"lineNumber":23,"author":{"gitId":"Amadeus-Winarto"},"content":"                .limit(foundTasks.length)","lastModifiedDate":"2021-09-05"},{"lineNumber":24,"author":{"gitId":"Amadeus-Winarto"},"content":"                .map(num -\u003e num.toString() + \".\" + foundTasks[num - 1])","lastModifiedDate":"2021-09-05"},{"lineNumber":25,"author":{"gitId":"Amadeus-Winarto"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2021-09-05"},{"lineNumber":26,"author":{"gitId":"Amadeus-Winarto"},"content":"        return initReply.toArray(new String[0]);","lastModifiedDate":"2021-09-05"},{"lineNumber":27,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-09-05"},{"lineNumber":28,"author":{"gitId":"Amadeus-Winarto"},"content":"}","lastModifiedDate":"2021-09-05"},{"lineNumber":29,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":30,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-05"}],"authorContributionMap":{"Amadeus-Winarto":30}},{"path":"src/main/java/bobcat/executor/command/basic/List.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Amadeus-Winarto"},"content":"package bobcat.executor.command.basic;","lastModifiedDate":"2021-09-05"},{"lineNumber":2,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":3,"author":{"gitId":"Amadeus-Winarto"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-05"},{"lineNumber":4,"author":{"gitId":"Amadeus-Winarto"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-09-05"},{"lineNumber":5,"author":{"gitId":"Amadeus-Winarto"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-09-05"},{"lineNumber":6,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":7,"author":{"gitId":"Amadeus-Winarto"},"content":"import bobcat.model.TaskList;","lastModifiedDate":"2021-09-05"},{"lineNumber":8,"author":{"gitId":"Amadeus-Winarto"},"content":"import bobcat.model.task.Task;","lastModifiedDate":"2021-09-05"},{"lineNumber":9,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":10,"author":{"gitId":"Amadeus-Winarto"},"content":"public class List extends BasicCommand {","lastModifiedDate":"2021-09-05"},{"lineNumber":11,"author":{"gitId":"Amadeus-Winarto"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":12,"author":{"gitId":"Amadeus-Winarto"},"content":"     * Lists all tasks in the given \u003ccode\u003eTaskList\u003c/code\u003e","lastModifiedDate":"2021-09-06"},{"lineNumber":13,"author":{"gitId":"Amadeus-Winarto"},"content":"     * @param taskList \u003ccode\u003eTaskList\u003c/code\u003e to be added to","lastModifiedDate":"2021-09-06"},{"lineNumber":14,"author":{"gitId":"Amadeus-Winarto"},"content":"     * @param args NOT USED. Empty String array. Not used for this method","lastModifiedDate":"2021-09-06"},{"lineNumber":15,"author":{"gitId":"Amadeus-Winarto"},"content":"     * @return Array of Strings to display","lastModifiedDate":"2021-09-06"},{"lineNumber":16,"author":{"gitId":"Amadeus-Winarto"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":17,"author":{"gitId":"Amadeus-Winarto"},"content":"    public static String[] execute(TaskList taskList, String... args) {","lastModifiedDate":"2021-09-05"},{"lineNumber":18,"author":{"gitId":"Amadeus-Winarto"},"content":"        java.util.List\u003cString\u003e initialReply \u003d new ArrayList\u003cString\u003e();","lastModifiedDate":"2021-09-05"},{"lineNumber":19,"author":{"gitId":"Amadeus-Winarto"},"content":"        initialReply.add(\"Here are the tasks in your list:\");","lastModifiedDate":"2021-09-05"},{"lineNumber":20,"author":{"gitId":"Amadeus-Winarto"},"content":"        Task[] toShow \u003d taskList.getAllTasks();","lastModifiedDate":"2021-09-05"},{"lineNumber":21,"author":{"gitId":"Amadeus-Winarto"},"content":"        initialReply.addAll(Stream.iterate(1, x -\u003e x + 1)","lastModifiedDate":"2021-09-05"},{"lineNumber":22,"author":{"gitId":"Amadeus-Winarto"},"content":"                .limit(toShow.length)","lastModifiedDate":"2021-09-05"},{"lineNumber":23,"author":{"gitId":"Amadeus-Winarto"},"content":"                .map(num -\u003e num.toString() + \".\" + toShow[num - 1])","lastModifiedDate":"2021-09-05"},{"lineNumber":24,"author":{"gitId":"Amadeus-Winarto"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2021-09-05"},{"lineNumber":25,"author":{"gitId":"Amadeus-Winarto"},"content":"        return initialReply.toArray(new String[0]);","lastModifiedDate":"2021-09-05"},{"lineNumber":26,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-09-05"},{"lineNumber":27,"author":{"gitId":"Amadeus-Winarto"},"content":"}","lastModifiedDate":"2021-09-05"}],"authorContributionMap":{"Amadeus-Winarto":27}},{"path":"src/main/java/bobcat/executor/command/create/CreationCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Amadeus-Winarto"},"content":"package bobcat.executor.command.create;","lastModifiedDate":"2021-09-05"},{"lineNumber":2,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":3,"author":{"gitId":"Amadeus-Winarto"},"content":"import bobcat.executor.command.Command;","lastModifiedDate":"2021-09-05"},{"lineNumber":4,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":5,"author":{"gitId":"Amadeus-Winarto"},"content":"public abstract class CreationCommand implements Command {","lastModifiedDate":"2021-09-05"},{"lineNumber":6,"author":{"gitId":"Amadeus-Winarto"},"content":"}","lastModifiedDate":"2021-09-05"}],"authorContributionMap":{"Amadeus-Winarto":6}},{"path":"src/main/java/bobcat/executor/command/create/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Amadeus-Winarto"},"content":"package bobcat.executor.command.create;","lastModifiedDate":"2021-09-05"},{"lineNumber":2,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":3,"author":{"gitId":"Amadeus-Winarto"},"content":"import bobcat.model.TaskList;","lastModifiedDate":"2021-09-05"},{"lineNumber":4,"author":{"gitId":"Amadeus-Winarto"},"content":"import bobcat.model.task.Task;","lastModifiedDate":"2021-09-05"},{"lineNumber":5,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":6,"author":{"gitId":"Amadeus-Winarto"},"content":"public class Deadline extends CreationCommand {","lastModifiedDate":"2021-09-05"},{"lineNumber":7,"author":{"gitId":"Amadeus-Winarto"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":8,"author":{"gitId":"Amadeus-Winarto"},"content":"     * Adds a deadline to the provided \u003ccode\u003eTaskList\u003c/code\u003e, with \u003ccode\u003eargs\u003c/code\u003e being the specifications","lastModifiedDate":"2021-09-06"},{"lineNumber":9,"author":{"gitId":"Amadeus-Winarto"},"content":"     * of the deadline","lastModifiedDate":"2021-09-06"},{"lineNumber":10,"author":{"gitId":"Amadeus-Winarto"},"content":"     * @param taskList \u003ccode\u003eTaskList\u003c/code\u003e to be added to","lastModifiedDate":"2021-09-06"},{"lineNumber":11,"author":{"gitId":"Amadeus-Winarto"},"content":"     * @param args Description and deadline of the \u003ccode\u003eDeadline\u003c/code\u003e to be added","lastModifiedDate":"2021-09-06"},{"lineNumber":12,"author":{"gitId":"Amadeus-Winarto"},"content":"     * @return Array of Strings to display","lastModifiedDate":"2021-09-06"},{"lineNumber":13,"author":{"gitId":"Amadeus-Winarto"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":14,"author":{"gitId":"Amadeus-Winarto"},"content":"    public static String[] execute(TaskList taskList, String... args) {","lastModifiedDate":"2021-09-05"},{"lineNumber":15,"author":{"gitId":"Amadeus-Winarto"},"content":"        assert args.length \u003e\u003d 3;","lastModifiedDate":"2021-09-06"},{"lineNumber":16,"author":{"gitId":"Amadeus-Winarto"},"content":"        Task addedTask \u003d taskList.push(new bobcat.model.task.Deadline(args[1], args[2]));","lastModifiedDate":"2021-09-05"},{"lineNumber":17,"author":{"gitId":"Amadeus-Winarto"},"content":"        return new String[]{\"Got it. I\u0027ve added this task:\",","lastModifiedDate":"2021-09-05"},{"lineNumber":18,"author":{"gitId":"Amadeus-Winarto"},"content":"                            \"  \" + addedTask.toString(),","lastModifiedDate":"2021-09-05"},{"lineNumber":19,"author":{"gitId":"Amadeus-Winarto"},"content":"                            \"Now you have \" + taskList.numTasks() + \" tasks in the list\"};","lastModifiedDate":"2021-09-05"},{"lineNumber":20,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-09-05"},{"lineNumber":21,"author":{"gitId":"Amadeus-Winarto"},"content":"}","lastModifiedDate":"2021-09-05"}],"authorContributionMap":{"Amadeus-Winarto":21}},{"path":"src/main/java/bobcat/executor/command/create/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Amadeus-Winarto"},"content":"package bobcat.executor.command.create;","lastModifiedDate":"2021-09-05"},{"lineNumber":2,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":3,"author":{"gitId":"Amadeus-Winarto"},"content":"import bobcat.model.TaskList;","lastModifiedDate":"2021-09-05"},{"lineNumber":4,"author":{"gitId":"Amadeus-Winarto"},"content":"import bobcat.model.task.Task;","lastModifiedDate":"2021-09-05"},{"lineNumber":5,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":6,"author":{"gitId":"Amadeus-Winarto"},"content":"public class Event extends CreationCommand {","lastModifiedDate":"2021-09-05"},{"lineNumber":7,"author":{"gitId":"Amadeus-Winarto"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":8,"author":{"gitId":"Amadeus-Winarto"},"content":"     * Adds an event to the provided \u003ccode\u003eTaskList\u003c/code\u003e, with \u003ccode\u003eargs\u003c/code\u003e being the specifications","lastModifiedDate":"2021-09-06"},{"lineNumber":9,"author":{"gitId":"Amadeus-Winarto"},"content":"     * of the event","lastModifiedDate":"2021-09-06"},{"lineNumber":10,"author":{"gitId":"Amadeus-Winarto"},"content":"     * @param taskList \u003ccode\u003eTaskList\u003c/code\u003e to be added to","lastModifiedDate":"2021-09-06"},{"lineNumber":11,"author":{"gitId":"Amadeus-Winarto"},"content":"     * @param args Description and start time of the \u003ccode\u003eEvent\u003c/code\u003e to be added","lastModifiedDate":"2021-09-06"},{"lineNumber":12,"author":{"gitId":"Amadeus-Winarto"},"content":"     * @return Array of Strings to display","lastModifiedDate":"2021-09-06"},{"lineNumber":13,"author":{"gitId":"Amadeus-Winarto"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":14,"author":{"gitId":"Amadeus-Winarto"},"content":"    public static String[] execute(TaskList taskList, String... args) {","lastModifiedDate":"2021-09-05"},{"lineNumber":15,"author":{"gitId":"Amadeus-Winarto"},"content":"        Task addedTask \u003d taskList.push(new bobcat.model.task.Event(args[1], args[2]));","lastModifiedDate":"2021-09-05"},{"lineNumber":16,"author":{"gitId":"Amadeus-Winarto"},"content":"        return new String[]{\"Got it. I\u0027ve added this task:\",","lastModifiedDate":"2021-09-05"},{"lineNumber":17,"author":{"gitId":"Amadeus-Winarto"},"content":"                            \"  \" + addedTask.toString(),","lastModifiedDate":"2021-09-05"},{"lineNumber":18,"author":{"gitId":"Amadeus-Winarto"},"content":"                            \"Now you have \" + taskList.numTasks() + \" tasks in the list\"};","lastModifiedDate":"2021-09-05"},{"lineNumber":19,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-09-05"},{"lineNumber":20,"author":{"gitId":"Amadeus-Winarto"},"content":"}","lastModifiedDate":"2021-09-05"}],"authorContributionMap":{"Amadeus-Winarto":20}},{"path":"src/main/java/bobcat/executor/command/create/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Amadeus-Winarto"},"content":"package bobcat.executor.command.create;","lastModifiedDate":"2021-09-05"},{"lineNumber":2,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":3,"author":{"gitId":"Amadeus-Winarto"},"content":"import bobcat.model.TaskList;","lastModifiedDate":"2021-09-05"},{"lineNumber":4,"author":{"gitId":"Amadeus-Winarto"},"content":"import bobcat.model.task.Task;","lastModifiedDate":"2021-09-05"},{"lineNumber":5,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":6,"author":{"gitId":"Amadeus-Winarto"},"content":"public class ToDo extends CreationCommand {","lastModifiedDate":"2021-09-05"},{"lineNumber":7,"author":{"gitId":"Amadeus-Winarto"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":8,"author":{"gitId":"Amadeus-Winarto"},"content":"     * Adds a todo to the provided \u003ccode\u003eTaskList\u003c/code\u003e, with \u003ccode\u003eargs\u003c/code\u003e being the specifications","lastModifiedDate":"2021-09-06"},{"lineNumber":9,"author":{"gitId":"Amadeus-Winarto"},"content":"     * of the todo","lastModifiedDate":"2021-09-06"},{"lineNumber":10,"author":{"gitId":"Amadeus-Winarto"},"content":"     * @param taskList \u003ccode\u003eTaskList\u003c/code\u003e to be added to","lastModifiedDate":"2021-09-06"},{"lineNumber":11,"author":{"gitId":"Amadeus-Winarto"},"content":"     * @param args Description of the \u003ccode\u003eToDo\u003c/code\u003e to be added","lastModifiedDate":"2021-09-06"},{"lineNumber":12,"author":{"gitId":"Amadeus-Winarto"},"content":"     * @return Array of Strings to display","lastModifiedDate":"2021-09-06"},{"lineNumber":13,"author":{"gitId":"Amadeus-Winarto"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":14,"author":{"gitId":"Amadeus-Winarto"},"content":"    public static String[] execute(TaskList taskList, String... args) {","lastModifiedDate":"2021-09-05"},{"lineNumber":15,"author":{"gitId":"Amadeus-Winarto"},"content":"        Task addedTask \u003d taskList.push(new bobcat.model.task.ToDo(args[1]));","lastModifiedDate":"2021-09-05"},{"lineNumber":16,"author":{"gitId":"Amadeus-Winarto"},"content":"        return new String[]{\"Got it. I\u0027ve added this task:\",","lastModifiedDate":"2021-09-05"},{"lineNumber":17,"author":{"gitId":"Amadeus-Winarto"},"content":"                            \"  \" + addedTask.toString(),","lastModifiedDate":"2021-09-05"},{"lineNumber":18,"author":{"gitId":"Amadeus-Winarto"},"content":"                            \"Now you have \" + taskList.numTasks() + \" tasks in the list\"};","lastModifiedDate":"2021-09-05"},{"lineNumber":19,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-09-05"},{"lineNumber":20,"author":{"gitId":"Amadeus-Winarto"},"content":"}","lastModifiedDate":"2021-09-05"}],"authorContributionMap":{"Amadeus-Winarto":20}},{"path":"src/main/java/bobcat/executor/command/mutate/Delete.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Amadeus-Winarto"},"content":"package bobcat.executor.command.mutate;","lastModifiedDate":"2021-09-05"},{"lineNumber":2,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":3,"author":{"gitId":"Amadeus-Winarto"},"content":"import bobcat.model.TaskList;","lastModifiedDate":"2021-09-05"},{"lineNumber":4,"author":{"gitId":"Amadeus-Winarto"},"content":"import bobcat.model.task.Task;","lastModifiedDate":"2021-09-05"},{"lineNumber":5,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":6,"author":{"gitId":"Amadeus-Winarto"},"content":"public class Delete extends MutationCommand {","lastModifiedDate":"2021-09-05"},{"lineNumber":7,"author":{"gitId":"Amadeus-Winarto"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":8,"author":{"gitId":"Amadeus-Winarto"},"content":"     * Deletes a given \u003ccode\u003eTask\u003c/code\u003e from the provided \u003ccode\u003eTaskList\u003c/code\u003e, with \u003ccode\u003eargs\u003c/code\u003e being the","lastModifiedDate":"2021-09-06"},{"lineNumber":9,"author":{"gitId":"Amadeus-Winarto"},"content":"     * id of the \u003ccode\u003eTask\u003c/code\u003e in the \u003ccode\u003eTaskList\u003c/code\u003e","lastModifiedDate":"2021-09-06"},{"lineNumber":10,"author":{"gitId":"Amadeus-Winarto"},"content":"     * of the deadline","lastModifiedDate":"2021-09-06"},{"lineNumber":11,"author":{"gitId":"Amadeus-Winarto"},"content":"     * @param taskList \u003ccode\u003eTaskList\u003c/code\u003e to be modified","lastModifiedDate":"2021-09-06"},{"lineNumber":12,"author":{"gitId":"Amadeus-Winarto"},"content":"     * @param args second position of array is id of the \u003ccode\u003eTask\u003c/code\u003e to be deleted","lastModifiedDate":"2021-09-06"},{"lineNumber":13,"author":{"gitId":"Amadeus-Winarto"},"content":"     * @return Array of Strings to display","lastModifiedDate":"2021-09-06"},{"lineNumber":14,"author":{"gitId":"Amadeus-Winarto"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":15,"author":{"gitId":"Amadeus-Winarto"},"content":"    public static String[] execute(TaskList taskList, String... args) {","lastModifiedDate":"2021-09-05"},{"lineNumber":16,"author":{"gitId":"Amadeus-Winarto"},"content":"        assert args.length \u003e 2;","lastModifiedDate":"2021-09-06"},{"lineNumber":17,"author":{"gitId":"Amadeus-Winarto"},"content":"        Task deletedTask \u003d taskList.deleteTaskByIdx(Integer.parseInt(args[1]));","lastModifiedDate":"2021-09-05"},{"lineNumber":18,"author":{"gitId":"Amadeus-Winarto"},"content":"        return new String[]{\"Noted. I\u0027ve removed this task:\",","lastModifiedDate":"2021-09-05"},{"lineNumber":19,"author":{"gitId":"Amadeus-Winarto"},"content":"                            \"  \" + deletedTask.toString(),","lastModifiedDate":"2021-09-05"},{"lineNumber":20,"author":{"gitId":"Amadeus-Winarto"},"content":"                            \"Now you have \" + taskList.numTasks() + \" tasks in the list\"};","lastModifiedDate":"2021-09-05"},{"lineNumber":21,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-09-05"},{"lineNumber":22,"author":{"gitId":"Amadeus-Winarto"},"content":"}","lastModifiedDate":"2021-09-05"}],"authorContributionMap":{"Amadeus-Winarto":22}},{"path":"src/main/java/bobcat/executor/command/mutate/Done.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Amadeus-Winarto"},"content":"package bobcat.executor.command.mutate;","lastModifiedDate":"2021-09-05"},{"lineNumber":2,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":3,"author":{"gitId":"Amadeus-Winarto"},"content":"import bobcat.model.TaskList;","lastModifiedDate":"2021-09-05"},{"lineNumber":4,"author":{"gitId":"Amadeus-Winarto"},"content":"import bobcat.model.task.Task;","lastModifiedDate":"2021-09-05"},{"lineNumber":5,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":6,"author":{"gitId":"Amadeus-Winarto"},"content":"public class Done extends MutationCommand {","lastModifiedDate":"2021-09-05"},{"lineNumber":7,"author":{"gitId":"Amadeus-Winarto"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":8,"author":{"gitId":"Amadeus-Winarto"},"content":"     * Tags a \u003ccode\u003eTask\u003c/code\u003e as completed","lastModifiedDate":"2021-09-06"},{"lineNumber":9,"author":{"gitId":"Amadeus-Winarto"},"content":"     * @param taskList \u003ccode\u003eTaskList\u003c/code\u003e to be modified","lastModifiedDate":"2021-09-06"},{"lineNumber":10,"author":{"gitId":"Amadeus-Winarto"},"content":"     * @param args id of \u003ccode\u003eTask\u003c/code\u003e to be marked as completed in the \u003ccode\u003eTaskList\u003c/code\u003e","lastModifiedDate":"2021-09-06"},{"lineNumber":11,"author":{"gitId":"Amadeus-Winarto"},"content":"     * @return Array of Strings to display","lastModifiedDate":"2021-09-06"},{"lineNumber":12,"author":{"gitId":"Amadeus-Winarto"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":13,"author":{"gitId":"Amadeus-Winarto"},"content":"    public static String[] execute(TaskList taskList, String... args) {","lastModifiedDate":"2021-09-05"},{"lineNumber":14,"author":{"gitId":"Amadeus-Winarto"},"content":"        Task markedTask \u003d taskList.markDone(Integer.parseInt(args[1]));","lastModifiedDate":"2021-09-05"},{"lineNumber":15,"author":{"gitId":"Amadeus-Winarto"},"content":"        return new String[]{\"Nice! I\u0027ve marked this task as done:\", \"  \" + markedTask.toString()};","lastModifiedDate":"2021-09-05"},{"lineNumber":16,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-09-05"},{"lineNumber":17,"author":{"gitId":"Amadeus-Winarto"},"content":"}","lastModifiedDate":"2021-09-05"}],"authorContributionMap":{"Amadeus-Winarto":17}},{"path":"src/main/java/bobcat/executor/command/mutate/MutationCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Amadeus-Winarto"},"content":"package bobcat.executor.command.mutate;","lastModifiedDate":"2021-09-05"},{"lineNumber":2,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":3,"author":{"gitId":"Amadeus-Winarto"},"content":"import bobcat.executor.command.Command;","lastModifiedDate":"2021-09-05"},{"lineNumber":4,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":5,"author":{"gitId":"Amadeus-Winarto"},"content":"public abstract class MutationCommand implements Command {","lastModifiedDate":"2021-09-05"},{"lineNumber":6,"author":{"gitId":"Amadeus-Winarto"},"content":"}","lastModifiedDate":"2021-09-05"}],"authorContributionMap":{"Amadeus-Winarto":6}},{"path":"src/main/java/bobcat/executor/parser/BasicCommandParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Amadeus-Winarto"},"content":"package bobcat.executor.parser;","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"Amadeus-Winarto"},"content":"/**","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"Amadeus-Winarto"},"content":" * Implements a \u003ccode\u003eCommandParser\u003c/code\u003e which process basic commands i.e. commands that do read-only operations","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"Amadeus-Winarto"},"content":" * Such commands include \"list\", \"find\", and \"bye\".","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"Amadeus-Winarto"},"content":" */","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"Amadeus-Winarto"},"content":"public class BasicCommandParser implements CommandParser {","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"Amadeus-Winarto"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"Amadeus-Winarto"},"content":"     * Process read-only commands.","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"Amadeus-Winarto"},"content":"     * @param command The given basic command","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"Amadeus-Winarto"},"content":"     * @param commandArgs Arguments to the basic command","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"Amadeus-Winarto"},"content":"     * @return Array of strings, where the 0th index is occupied by command, followed by the arguments to the command","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"Amadeus-Winarto"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"Amadeus-Winarto"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"Amadeus-Winarto"},"content":"    public String[] parse(String command, String[] commandArgs) {","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"Amadeus-Winarto"},"content":"        return commandArgs;","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"Amadeus-Winarto"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"Amadeus-Winarto":18}},{"path":"src/main/java/bobcat/executor/parser/CommandParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Amadeus-Winarto"},"content":"package bobcat.executor.parser;","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":3,"author":{"gitId":"Amadeus-Winarto"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"Amadeus-Winarto"},"content":" * Interface that all command parsers in BobCat.BobCat must obey. A \u003ccode\u003eCommandParser\u003c/code\u003e checks if the given","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"Amadeus-Winarto"},"content":" * command and commandArgs are appropriate for each other. Specifically, it checks for the number of given arguments.","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"Amadeus-Winarto"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"Amadeus-Winarto"},"content":"public interface CommandParser {","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"Amadeus-Winarto"},"content":"    String[] parse(String command, String[] commandArgs);","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"Amadeus-Winarto"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"Amadeus-Winarto":9}},{"path":"src/main/java/bobcat/executor/parser/CreationCommandParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Amadeus-Winarto"},"content":"package bobcat.executor.parser;","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"Amadeus-Winarto"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"Amadeus-Winarto"},"content":"import bobcat.exception.CommandArityException;","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"Amadeus-Winarto"},"content":"/**","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"Amadeus-Winarto"},"content":" * Implements a \u003ccode\u003eCommandParser\u003c/code\u003e which process taskCreation commands. Such commands include \"todo\",","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"Amadeus-Winarto"},"content":" * \"event\", and \"bye\". In particular it checks for the number of arguments corresponding to the provided command.","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"Amadeus-Winarto"},"content":" */","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"Amadeus-Winarto"},"content":"public class CreationCommandParser implements CommandParser {","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"Amadeus-Winarto"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"Amadeus-Winarto"},"content":"     * Process taskCreation commands.","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"Amadeus-Winarto"},"content":"     * @param command The given taskCreation command","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"Amadeus-Winarto"},"content":"     * @param commandArgs Arguments to the taskCreation command given","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"Amadeus-Winarto"},"content":"     * @return Array of strings, where the 0th index is occupied by command, followed by the arguments to the command","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"Amadeus-Winarto"},"content":"     * @throws CommandArityException May throw if number of elements in commandArgs is not appropriate relative to","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"Amadeus-Winarto"},"content":"     * given command","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"Amadeus-Winarto"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"Amadeus-Winarto"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"Amadeus-Winarto"},"content":"    public String[] parse(String command, String[] commandArgs) {","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"Amadeus-Winarto"},"content":"        if (command.equals(\"todo\")) {","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"Amadeus-Winarto"},"content":"            String commandArg \u003d String.join(\" \",","lastModifiedDate":"2021-08-18"},{"lineNumber":24,"author":{"gitId":"Amadeus-Winarto"},"content":"                    Arrays.copyOfRange(commandArgs, 1, commandArgs.length));","lastModifiedDate":"2021-08-18"},{"lineNumber":25,"author":{"gitId":"Amadeus-Winarto"},"content":"            if (commandArg.length() \u003c\u003d 0) {","lastModifiedDate":"2021-08-18"},{"lineNumber":26,"author":{"gitId":"Amadeus-Winarto"},"content":"                throw new CommandArityException(\"The description of a \" + command + \" cannot be empty.\");","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"Amadeus-Winarto"},"content":"            }","lastModifiedDate":"2021-08-18"},{"lineNumber":28,"author":{"gitId":"Amadeus-Winarto"},"content":"            return new String[]{command, commandArg};","lastModifiedDate":"2021-08-18"},{"lineNumber":29,"author":{"gitId":"Amadeus-Winarto"},"content":"        } else {","lastModifiedDate":"2021-08-18"},{"lineNumber":30,"author":{"gitId":"Amadeus-Winarto"},"content":"            String args \u003d String.join(\" \",","lastModifiedDate":"2021-08-18"},{"lineNumber":31,"author":{"gitId":"Amadeus-Winarto"},"content":"                    Arrays.copyOfRange(commandArgs, 1, commandArgs.length));","lastModifiedDate":"2021-08-18"},{"lineNumber":32,"author":{"gitId":"Amadeus-Winarto"},"content":"            String[] argArr \u003d args.split(\"\\\\s/\" + (command.equals(\"deadline\") ? \"by\" : \"at\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"Amadeus-Winarto"},"content":"            if (argArr[0].trim().length() \u003c\u003d 0) {","lastModifiedDate":"2021-08-18"},{"lineNumber":34,"author":{"gitId":"Amadeus-Winarto"},"content":"                throw new CommandArityException(\"The description of a \" + command + \" cannot be empty.\");","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"Amadeus-Winarto"},"content":"            } else if (argArr.length \u003d\u003d 1) {","lastModifiedDate":"2021-08-18"},{"lineNumber":36,"author":{"gitId":"Amadeus-Winarto"},"content":"                throw new CommandArityException(\"The date of a \" + command + \" cannot be empty.\");","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"Amadeus-Winarto"},"content":"            }","lastModifiedDate":"2021-08-18"},{"lineNumber":38,"author":{"gitId":"Amadeus-Winarto"},"content":"            return new String[]{command, argArr[0].trim(), argArr[1].trim()};","lastModifiedDate":"2021-08-18"},{"lineNumber":39,"author":{"gitId":"Amadeus-Winarto"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":40,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":41,"author":{"gitId":"Amadeus-Winarto"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"Amadeus-Winarto":41}},{"path":"src/main/java/bobcat/executor/parser/MutationCommandParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Amadeus-Winarto"},"content":"package bobcat.executor.parser;","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"Amadeus-Winarto"},"content":"import bobcat.exception.CommandArityException;","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"Amadeus-Winarto"},"content":"import bobcat.exception.InvalidArgumentException;","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"Amadeus-Winarto"},"content":"/**","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"Amadeus-Winarto"},"content":" * Implements a \u003ccode\u003eCommandParser\u003c/code\u003e which process taskMutation commands. Such commands include \"done\" and","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"Amadeus-Winarto"},"content":" * \"delete\". In particular, it checks for the number of arguments corresponding to the provided command, as well as","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"Amadeus-Winarto"},"content":" * type of the commandArgs i.e. must be cast-able to an Integer.","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"Amadeus-Winarto"},"content":" */","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"Amadeus-Winarto"},"content":"public class MutationCommandParser implements CommandParser {","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"Amadeus-Winarto"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"Amadeus-Winarto"},"content":"     * Process taskMutation commands.","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"Amadeus-Winarto"},"content":"     * @param command The given taskMutation command","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"Amadeus-Winarto"},"content":"     * @param commandArgs Arguments to the taskMutation command given","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"Amadeus-Winarto"},"content":"     * @return Array of strings, where the 0th index is occupied by command, followed by the arguments to the command","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"Amadeus-Winarto"},"content":"     * @throws CommandArityException May be thrown if number of elements in commandArgs is not appropriate relative to","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"Amadeus-Winarto"},"content":"     * given command","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"Amadeus-Winarto"},"content":"     * @throws InvalidArgumentException May be thrown if elements of commandArgs are not castable to integer","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"Amadeus-Winarto"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"Amadeus-Winarto"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"Amadeus-Winarto"},"content":"    public String[] parse(String command, String[] commandArgs) {","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"Amadeus-Winarto"},"content":"        if (commandArgs.length !\u003d 2) {","lastModifiedDate":"2021-08-18"},{"lineNumber":24,"author":{"gitId":"Amadeus-Winarto"},"content":"            throw new CommandArityException(commandArgs.length \u003e 1","lastModifiedDate":"2021-08-18"},{"lineNumber":25,"author":{"gitId":"Amadeus-Winarto"},"content":"                    ? \"You\u0027ve entered too many indices. Multiple \" + command + \" is unsupported right now!\"","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"Amadeus-Winarto"},"content":"                    : \"Index needs to be specified!\");","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"Amadeus-Winarto"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":28,"author":{"gitId":"Amadeus-Winarto"},"content":"        try {","lastModifiedDate":"2021-08-18"},{"lineNumber":29,"author":{"gitId":"Amadeus-Winarto"},"content":"            return new String[]{command, String.valueOf(Integer.parseInt(commandArgs[1]) - 1)};","lastModifiedDate":"2021-08-18"},{"lineNumber":30,"author":{"gitId":"Amadeus-Winarto"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-08-18"},{"lineNumber":31,"author":{"gitId":"Amadeus-Winarto"},"content":"            throw new InvalidArgumentException(\"You\u0027ve entered inappropriate argument/s to the command: \" + command);","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"Amadeus-Winarto"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":33,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":34,"author":{"gitId":"Amadeus-Winarto"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"Amadeus-Winarto":34}},{"path":"src/main/java/bobcat/executor/parser/QueryParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Amadeus-Winarto"},"content":"package bobcat.executor.parser;","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":3,"author":{"gitId":"Amadeus-Winarto"},"content":"import java.util.Set;","lastModifiedDate":"2021-08-16"},{"lineNumber":4,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":5,"author":{"gitId":"Amadeus-Winarto"},"content":"import bobcat.exception.CommandArityException;","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"Amadeus-Winarto"},"content":"import bobcat.exception.InvalidArgumentException;","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"Amadeus-Winarto"},"content":"import bobcat.exception.UnknownCommandException;","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"Amadeus-Winarto"},"content":"/**","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"Amadeus-Winarto"},"content":" * A parser object which process queries. Queries are grouped based on its behavior on \u003ccode\u003eTaskList\u003c/code\u003e i.e.","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"Amadeus-Winarto"},"content":" * creation, mutation, or read-only. QueryParser will call the appropriate \u003ccode\u003eCommandParser\u003c/code\u003e based on these","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"Amadeus-Winarto"},"content":" * sets of commands.","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"Amadeus-Winarto"},"content":" */","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"Amadeus-Winarto"},"content":"public class QueryParser {","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"Amadeus-Winarto"},"content":"    private static final Set\u003cString\u003e TASK_CREATION \u003d Set.of(\"todo\", \"event\", \"deadline\");","lastModifiedDate":"2021-09-05"},{"lineNumber":16,"author":{"gitId":"Amadeus-Winarto"},"content":"    private static final Set\u003cString\u003e TASK_MARKING \u003d Set.of(\"done\", \"delete\");","lastModifiedDate":"2021-09-05"},{"lineNumber":17,"author":{"gitId":"Amadeus-Winarto"},"content":"    private static final Set\u003cString\u003e BASIC_COMMAND \u003d Set.of(\"list\", \"find\", \"bye\");","lastModifiedDate":"2021-09-05"},{"lineNumber":18,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"Amadeus-Winarto"},"content":"    private final BasicCommandParser basicCommandParser \u003d new BasicCommandParser();","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"Amadeus-Winarto"},"content":"    private final CreationCommandParser taskCreationParser \u003d new CreationCommandParser();","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"Amadeus-Winarto"},"content":"    private final MutationCommandParser taskMarkingParser \u003d new MutationCommandParser();","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":23,"author":{"gitId":"Amadeus-Winarto"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"Amadeus-Winarto"},"content":"     * Process user query and call the appropriate \u003ccode\u003eCommandParser\u003c/code\u003e.","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"Amadeus-Winarto"},"content":"     * @param query The given user query","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"Amadeus-Winarto"},"content":"     * @return Array of strings, where the 0th index is occupied by command, followed by the arguments to the command as","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"Amadeus-Winarto"},"content":"     * understood by the parser","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"Amadeus-Winarto"},"content":"     * @throws CommandArityException May be thrown if number of elements in commandArgs is not appropriate relative to","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"Amadeus-Winarto"},"content":"     * given command, according to the relevant \u003ccode\u003eCommandParser\u003c/code\u003e","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"Amadeus-Winarto"},"content":"     * @throws InvalidArgumentException May be thrown if elements of commandArgs are not castable to integer,","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"Amadeus-Winarto"},"content":"     * according to the relevant \u003ccode\u003eCommandParser\u003c/code\u003e","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"Amadeus-Winarto"},"content":"     * @throws UnknownCommandException May be thrown if given query begins with an unrecognised command","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"Amadeus-Winarto"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"Amadeus-Winarto"},"content":"    public String[] parse(String query) {","lastModifiedDate":"2021-08-18"},{"lineNumber":35,"author":{"gitId":"Amadeus-Winarto"},"content":"        String[] queryArr \u003d query.split(\"\\\\s\");","lastModifiedDate":"2021-08-16"},{"lineNumber":36,"author":{"gitId":"Amadeus-Winarto"},"content":"        String command \u003d queryArr[0];","lastModifiedDate":"2021-08-16"},{"lineNumber":37,"author":{"gitId":"Amadeus-Winarto"},"content":"        if (BASIC_COMMAND.contains(command)) {","lastModifiedDate":"2021-09-05"},{"lineNumber":38,"author":{"gitId":"Amadeus-Winarto"},"content":"            return basicCommandParser.parse(command, queryArr);","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"Amadeus-Winarto"},"content":"        } else if (TASK_MARKING.contains(command)) {","lastModifiedDate":"2021-09-05"},{"lineNumber":40,"author":{"gitId":"Amadeus-Winarto"},"content":"            return taskMarkingParser.parse(command, queryArr);","lastModifiedDate":"2021-08-18"},{"lineNumber":41,"author":{"gitId":"Amadeus-Winarto"},"content":"        } else if (TASK_CREATION.contains(command)) {","lastModifiedDate":"2021-09-05"},{"lineNumber":42,"author":{"gitId":"Amadeus-Winarto"},"content":"            return taskCreationParser.parse(command, queryArr);","lastModifiedDate":"2021-08-18"},{"lineNumber":43,"author":{"gitId":"Amadeus-Winarto"},"content":"        }","lastModifiedDate":"2021-08-16"},{"lineNumber":44,"author":{"gitId":"Amadeus-Winarto"},"content":"        throw new UnknownCommandException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2021-08-23"},{"lineNumber":45,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":46,"author":{"gitId":"Amadeus-Winarto"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"Amadeus-Winarto":46}},{"path":"src/main/java/bobcat/executor/parser/StorageParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Amadeus-Winarto"},"content":"package bobcat.executor.parser;","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"Amadeus-Winarto"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"Amadeus-Winarto"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"Amadeus-Winarto"},"content":"import bobcat.exception.BobCatException;","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"Amadeus-Winarto"},"content":"import bobcat.exception.ParserException;","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"Amadeus-Winarto"},"content":"import bobcat.model.task.Deadline;","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"Amadeus-Winarto"},"content":"import bobcat.model.task.Event;","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"Amadeus-Winarto"},"content":"import bobcat.model.task.Task;","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"Amadeus-Winarto"},"content":"import bobcat.model.task.ToDo;","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"Amadeus-Winarto"},"content":"/**","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"Amadeus-Winarto"},"content":" * A parser object which process the lines in the storage file. Used for","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"Amadeus-Winarto"},"content":" */","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"Amadeus-Winarto"},"content":"public class StorageParser {","lastModifiedDate":"2021-08-21"},{"lineNumber":17,"author":{"gitId":"Amadeus-Winarto"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"Amadeus-Winarto"},"content":"     * Takes a string and parses it. The string is assumed to be tag with a task tag, a completion tag, a description,","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"Amadeus-Winarto"},"content":"     * and optionally a date of form \"dd MMM yyyy\".","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"Amadeus-Winarto"},"content":"     * @param stringRep string representation of the \u003ccode\u003eTask\u003c/code\u003e","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"Amadeus-Winarto"},"content":"     * @return a \u003ccode\u003eTask\u003c/code\u003e corresponding to the task tag in the string","lastModifiedDate":"2021-08-23"},{"lineNumber":22,"author":{"gitId":"Amadeus-Winarto"},"content":"     * @throws ParserException May be thrown if task tag cannot be found / not understandable","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"Amadeus-Winarto"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"Amadeus-Winarto"},"content":"    public Task parse(String stringRep) {","lastModifiedDate":"2021-08-21"},{"lineNumber":25,"author":{"gitId":"Amadeus-Winarto"},"content":"        try {","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"Amadeus-Winarto"},"content":"            char taskType \u003d stringRep.charAt(1);","lastModifiedDate":"2021-08-21"},{"lineNumber":27,"author":{"gitId":"Amadeus-Winarto"},"content":"            boolean isDone \u003d stringRep.charAt(4) \u003d\u003d \u0027X\u0027;","lastModifiedDate":"2021-08-21"},{"lineNumber":28,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":29,"author":{"gitId":"Amadeus-Winarto"},"content":"            if (taskType \u003d\u003d \u0027T\u0027) {","lastModifiedDate":"2021-08-21"},{"lineNumber":30,"author":{"gitId":"Amadeus-Winarto"},"content":"                String description \u003d stringRep.split(\"]\\\\s\")[1];","lastModifiedDate":"2021-08-21"},{"lineNumber":31,"author":{"gitId":"Amadeus-Winarto"},"content":"                return new ToDo(description, isDone);","lastModifiedDate":"2021-08-21"},{"lineNumber":32,"author":{"gitId":"Amadeus-Winarto"},"content":"            } else if (taskType \u003d\u003d \u0027D\u0027) {","lastModifiedDate":"2021-08-21"},{"lineNumber":33,"author":{"gitId":"Amadeus-Winarto"},"content":"                String description \u003d stringRep.split(\"]\\\\s\")[1].split(\"\\\\(\")[0].trim();","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"Amadeus-Winarto"},"content":"                String time \u003d stringRep.split(\"by: \")[1].split(\"\\\\)\")[0];","lastModifiedDate":"2021-08-21"},{"lineNumber":35,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"Amadeus-Winarto"},"content":"                String parsedTime \u003d LocalDate.parse(time, DateTimeFormatter.ofPattern(\"dd MMM yyyy\"))","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"Amadeus-Winarto"},"content":"                        .format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"Amadeus-Winarto"},"content":"                return new Deadline(description, isDone, parsedTime);","lastModifiedDate":"2021-08-23"},{"lineNumber":39,"author":{"gitId":"Amadeus-Winarto"},"content":"            } else if (taskType \u003d\u003d \u0027E\u0027) {","lastModifiedDate":"2021-08-21"},{"lineNumber":40,"author":{"gitId":"Amadeus-Winarto"},"content":"                String description \u003d stringRep.split(\"]\\\\s\")[1].trim().split(\"\\\\(\")[0].trim();","lastModifiedDate":"2021-08-23"},{"lineNumber":41,"author":{"gitId":"Amadeus-Winarto"},"content":"                String time \u003d stringRep.split(\"at: \")[1].split(\"\\\\)\")[0].trim();","lastModifiedDate":"2021-08-23"},{"lineNumber":42,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":43,"author":{"gitId":"Amadeus-Winarto"},"content":"                String parsedTime \u003d LocalDate.parse(time, DateTimeFormatter.ofPattern(\"dd MMM yyyy\"))","lastModifiedDate":"2021-08-23"},{"lineNumber":44,"author":{"gitId":"Amadeus-Winarto"},"content":"                        .format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));","lastModifiedDate":"2021-08-23"},{"lineNumber":45,"author":{"gitId":"Amadeus-Winarto"},"content":"                return new Event(description, isDone, parsedTime);","lastModifiedDate":"2021-08-23"},{"lineNumber":46,"author":{"gitId":"Amadeus-Winarto"},"content":"            } else {","lastModifiedDate":"2021-08-21"},{"lineNumber":47,"author":{"gitId":"Amadeus-Winarto"},"content":"                throw new ParserException(\"Unable to parse line from storage: task tag not found / understandable.\");","lastModifiedDate":"2021-08-23"},{"lineNumber":48,"author":{"gitId":"Amadeus-Winarto"},"content":"            }","lastModifiedDate":"2021-08-21"},{"lineNumber":49,"author":{"gitId":"Amadeus-Winarto"},"content":"        } catch (BobCatException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":50,"author":{"gitId":"Amadeus-Winarto"},"content":"            throw new ParserException(\"Unable to parse line from storage. \" + e.getMessage());","lastModifiedDate":"2021-08-23"},{"lineNumber":51,"author":{"gitId":"Amadeus-Winarto"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":52,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":53,"author":{"gitId":"Amadeus-Winarto"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"Amadeus-Winarto":53}},{"path":"src/main/java/bobcat/model/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Amadeus-Winarto"},"content":"package bobcat.model;","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":3,"author":{"gitId":"Amadeus-Winarto"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-16"},{"lineNumber":4,"author":{"gitId":"Amadeus-Winarto"},"content":"import java.util.Locale;","lastModifiedDate":"2021-09-07"},{"lineNumber":5,"author":{"gitId":"Amadeus-Winarto"},"content":"import java.util.Objects;","lastModifiedDate":"2021-09-06"},{"lineNumber":6,"author":{"gitId":"Amadeus-Winarto"},"content":"import java.util.concurrent.CompletableFuture;","lastModifiedDate":"2021-09-07"},{"lineNumber":7,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":8,"author":{"gitId":"Amadeus-Winarto"},"content":"import bobcat.exception.InvalidOpsException;","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"Amadeus-Winarto"},"content":"import bobcat.model.task.Task;","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"Amadeus-Winarto"},"content":"public class TaskList {","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"Amadeus-Winarto"},"content":"    private final ArrayList\u003cTask\u003e storage;","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"Amadeus-Winarto"},"content":"    private int index;","lastModifiedDate":"2021-08-16"},{"lineNumber":14,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":15,"author":{"gitId":"Amadeus-Winarto"},"content":"    private static class OrderedTask implements Comparable\u003cOrderedTask\u003e {","lastModifiedDate":"2021-09-07"},{"lineNumber":16,"author":{"gitId":"Amadeus-Winarto"},"content":"        private final Task t;","lastModifiedDate":"2021-09-07"},{"lineNumber":17,"author":{"gitId":"Amadeus-Winarto"},"content":"        private final int ordering;","lastModifiedDate":"2021-09-07"},{"lineNumber":18,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":19,"author":{"gitId":"Amadeus-Winarto"},"content":"        OrderedTask(Task t, int o) {","lastModifiedDate":"2021-09-07"},{"lineNumber":20,"author":{"gitId":"Amadeus-Winarto"},"content":"            this.t \u003d t;","lastModifiedDate":"2021-09-07"},{"lineNumber":21,"author":{"gitId":"Amadeus-Winarto"},"content":"            this.ordering \u003d o;","lastModifiedDate":"2021-09-07"},{"lineNumber":22,"author":{"gitId":"Amadeus-Winarto"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":23,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":24,"author":{"gitId":"Amadeus-Winarto"},"content":"        public Task getTask() {","lastModifiedDate":"2021-09-07"},{"lineNumber":25,"author":{"gitId":"Amadeus-Winarto"},"content":"            return t;","lastModifiedDate":"2021-09-07"},{"lineNumber":26,"author":{"gitId":"Amadeus-Winarto"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":27,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":28,"author":{"gitId":"Amadeus-Winarto"},"content":"        @Override","lastModifiedDate":"2021-09-07"},{"lineNumber":29,"author":{"gitId":"Amadeus-Winarto"},"content":"        public int compareTo(OrderedTask orderedTask) {","lastModifiedDate":"2021-09-07"},{"lineNumber":30,"author":{"gitId":"Amadeus-Winarto"},"content":"            return this.ordering - orderedTask.ordering;","lastModifiedDate":"2021-09-07"},{"lineNumber":31,"author":{"gitId":"Amadeus-Winarto"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":32,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":33,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":34,"author":{"gitId":"Amadeus-Winarto"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":35,"author":{"gitId":"Amadeus-Winarto"},"content":"     * Constructor for a task list","lastModifiedDate":"2021-08-30"},{"lineNumber":36,"author":{"gitId":"Amadeus-Winarto"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":37,"author":{"gitId":"Amadeus-Winarto"},"content":"    public TaskList() {","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"Amadeus-Winarto"},"content":"        storage \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-16"},{"lineNumber":39,"author":{"gitId":"Amadeus-Winarto"},"content":"        index \u003d 0;","lastModifiedDate":"2021-08-16"},{"lineNumber":40,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":41,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":42,"author":{"gitId":"Amadeus-Winarto"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":43,"author":{"gitId":"Amadeus-Winarto"},"content":"     * Adds a \u003ccode\u003eTask\u003c/code\u003e to the end of a \u003ccode\u003eTaskList\u003c/code\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":44,"author":{"gitId":"Amadeus-Winarto"},"content":"     * @param t task to be added","lastModifiedDate":"2021-08-30"},{"lineNumber":45,"author":{"gitId":"Amadeus-Winarto"},"content":"     * @return task to be added","lastModifiedDate":"2021-08-30"},{"lineNumber":46,"author":{"gitId":"Amadeus-Winarto"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":47,"author":{"gitId":"Amadeus-Winarto"},"content":"    public Task push(Task t) {","lastModifiedDate":"2021-08-21"},{"lineNumber":48,"author":{"gitId":"Amadeus-Winarto"},"content":"        assert !Objects.equals(t, null);","lastModifiedDate":"2021-09-06"},{"lineNumber":49,"author":{"gitId":"Amadeus-Winarto"},"content":"        storage.add(t);","lastModifiedDate":"2021-08-21"},{"lineNumber":50,"author":{"gitId":"Amadeus-Winarto"},"content":"        index +\u003d 1;","lastModifiedDate":"2021-08-16"},{"lineNumber":51,"author":{"gitId":"Amadeus-Winarto"},"content":"        return storage.get(index - 1);","lastModifiedDate":"2021-08-16"},{"lineNumber":52,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":53,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":54,"author":{"gitId":"Amadeus-Winarto"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":55,"author":{"gitId":"Amadeus-Winarto"},"content":"     * Marks a given task as completed","lastModifiedDate":"2021-08-30"},{"lineNumber":56,"author":{"gitId":"Amadeus-Winarto"},"content":"     * @param id ID of the task to be marked","lastModifiedDate":"2021-08-30"},{"lineNumber":57,"author":{"gitId":"Amadeus-Winarto"},"content":"     * @return the Task to be marked","lastModifiedDate":"2021-08-30"},{"lineNumber":58,"author":{"gitId":"Amadeus-Winarto"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":59,"author":{"gitId":"Amadeus-Winarto"},"content":"    public Task markDone(int id) {","lastModifiedDate":"2021-08-16"},{"lineNumber":60,"author":{"gitId":"Amadeus-Winarto"},"content":"        if (id \u003e\u003d index || id \u003c 0) {","lastModifiedDate":"2021-08-16"},{"lineNumber":61,"author":{"gitId":"Amadeus-Winarto"},"content":"            throw new InvalidOpsException(\"Provided Index is out of bounds! Given index is \" + (","lastModifiedDate":"2021-08-30"},{"lineNumber":62,"author":{"gitId":"Amadeus-Winarto"},"content":"                    id + 1) + \" but there are \" + index + \" elements in the list\");","lastModifiedDate":"2021-08-30"},{"lineNumber":63,"author":{"gitId":"Amadeus-Winarto"},"content":"        }","lastModifiedDate":"2021-08-16"},{"lineNumber":64,"author":{"gitId":"Amadeus-Winarto"},"content":"        storage.get(id).markDone();","lastModifiedDate":"2021-08-16"},{"lineNumber":65,"author":{"gitId":"Amadeus-Winarto"},"content":"        return storage.get(id);","lastModifiedDate":"2021-08-16"},{"lineNumber":66,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":67,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":68,"author":{"gitId":"Amadeus-Winarto"},"content":"    public Task[] getAllTasks() {","lastModifiedDate":"2021-08-18"},{"lineNumber":69,"author":{"gitId":"Amadeus-Winarto"},"content":"        return storage.toArray(Task[]::new);","lastModifiedDate":"2021-09-06"},{"lineNumber":70,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":71,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":72,"author":{"gitId":"Amadeus-Winarto"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":73,"author":{"gitId":"Amadeus-Winarto"},"content":"     * Deletes a task by its given id","lastModifiedDate":"2021-08-30"},{"lineNumber":74,"author":{"gitId":"Amadeus-Winarto"},"content":"     * @param id ID of the task to be deleted","lastModifiedDate":"2021-08-30"},{"lineNumber":75,"author":{"gitId":"Amadeus-Winarto"},"content":"     * @return Task to be deleted","lastModifiedDate":"2021-08-30"},{"lineNumber":76,"author":{"gitId":"Amadeus-Winarto"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":77,"author":{"gitId":"Amadeus-Winarto"},"content":"    public Task deleteTaskByIdx(int id) {","lastModifiedDate":"2021-08-16"},{"lineNumber":78,"author":{"gitId":"Amadeus-Winarto"},"content":"        if (id \u003e\u003d index || id \u003c 0) {","lastModifiedDate":"2021-08-16"},{"lineNumber":79,"author":{"gitId":"Amadeus-Winarto"},"content":"            throw new InvalidOpsException(\"Provided Index is out of bounds!\");","lastModifiedDate":"2021-08-18"},{"lineNumber":80,"author":{"gitId":"Amadeus-Winarto"},"content":"        }","lastModifiedDate":"2021-08-16"},{"lineNumber":81,"author":{"gitId":"Amadeus-Winarto"},"content":"        index -\u003d 1;","lastModifiedDate":"2021-08-16"},{"lineNumber":82,"author":{"gitId":"Amadeus-Winarto"},"content":"        return storage.remove(id);","lastModifiedDate":"2021-08-16"},{"lineNumber":83,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":84,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":85,"author":{"gitId":"Amadeus-Winarto"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":86,"author":{"gitId":"Amadeus-Winarto"},"content":"     * Returns an array of \u003ccode\u003eTask\u003c/code\u003e whose descriptions contain the given \u003ci\u003ename\u003c/i\u003e, or whose descriptions","lastModifiedDate":"2021-09-07"},{"lineNumber":87,"author":{"gitId":"Amadeus-Winarto"},"content":"     * are similar to the given \u003ci\u003ename\u003c/i\u003e. The similarity approach will be executed only if no description contains","lastModifiedDate":"2021-09-07"},{"lineNumber":88,"author":{"gitId":"Amadeus-Winarto"},"content":"     * the given \u003ci\u003ename\u003c/i\u003e.","lastModifiedDate":"2021-09-07"},{"lineNumber":89,"author":{"gitId":"Amadeus-Winarto"},"content":"     * @param name String to be searched in the description of \u003ccode\u003eTask\u003c/code\u003e in \u003ccode\u003eTaskList\u003c/code\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":90,"author":{"gitId":"Amadeus-Winarto"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":91,"author":{"gitId":"Amadeus-Winarto"},"content":"    public Task[] findByName(String name) {","lastModifiedDate":"2021-08-25"},{"lineNumber":92,"author":{"gitId":"Amadeus-Winarto"},"content":"        assert !Objects.equals(name, null);","lastModifiedDate":"2021-09-06"},{"lineNumber":93,"author":{"gitId":"Amadeus-Winarto"},"content":"        CompletableFuture\u003cTask[]\u003e naive \u003d CompletableFuture.supplyAsync(() -\u003e findByNameNaive(name));","lastModifiedDate":"2021-09-07"},{"lineNumber":94,"author":{"gitId":"Amadeus-Winarto"},"content":"        CompletableFuture\u003cTask[]\u003e advanced \u003d CompletableFuture.supplyAsync(() -\u003e findByNameAdvanced(name));","lastModifiedDate":"2021-09-07"},{"lineNumber":95,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":96,"author":{"gitId":"Amadeus-Winarto"},"content":"        return naive.thenApply(taskArr -\u003e taskArr.length \u003d\u003d 0 ? advanced : naive).join().join();","lastModifiedDate":"2021-09-07"},{"lineNumber":97,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":98,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":99,"author":{"gitId":"Amadeus-Winarto"},"content":"    public int numTasks() {","lastModifiedDate":"2021-08-16"},{"lineNumber":100,"author":{"gitId":"Amadeus-Winarto"},"content":"        return index;","lastModifiedDate":"2021-08-16"},{"lineNumber":101,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":102,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":103,"author":{"gitId":"Amadeus-Winarto"},"content":"    private Task[] findByNameNaive(String name) {","lastModifiedDate":"2021-09-07"},{"lineNumber":104,"author":{"gitId":"Amadeus-Winarto"},"content":"        return storage.stream().parallel().filter(x -\u003e x.getDescription().toLowerCase().contains(name.toLowerCase()))","lastModifiedDate":"2021-09-07"},{"lineNumber":105,"author":{"gitId":"Amadeus-Winarto"},"content":"                .toArray(Task[]::new);","lastModifiedDate":"2021-09-07"},{"lineNumber":106,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":107,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":108,"author":{"gitId":"Amadeus-Winarto"},"content":"    private int getOrdering(String source, String reference) { // Measures how close source is to reference","lastModifiedDate":"2021-09-07"},{"lineNumber":109,"author":{"gitId":"Amadeus-Winarto"},"content":"        int relevantLength \u003d Math.min(source.length(), reference.length());","lastModifiedDate":"2021-09-07"},{"lineNumber":110,"author":{"gitId":"Amadeus-Winarto"},"content":"        return naiveLevenshtein(reference, source.substring(0, relevantLength), 0, 0);","lastModifiedDate":"2021-09-07"},{"lineNumber":111,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":112,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":113,"author":{"gitId":"Amadeus-Winarto"},"content":"    private Task[] findByNameAdvanced(String name) {","lastModifiedDate":"2021-09-07"},{"lineNumber":114,"author":{"gitId":"Amadeus-Winarto"},"content":"        return storage.stream()","lastModifiedDate":"2021-09-07"},{"lineNumber":115,"author":{"gitId":"Amadeus-Winarto"},"content":"                .parallel()","lastModifiedDate":"2021-09-07"},{"lineNumber":116,"author":{"gitId":"Amadeus-Winarto"},"content":"                .map(x -\u003e new OrderedTask(x,","lastModifiedDate":"2021-09-07"},{"lineNumber":117,"author":{"gitId":"Amadeus-Winarto"},"content":"                        getOrdering(x.getDescription().toLowerCase(Locale.ROOT),","lastModifiedDate":"2021-09-07"},{"lineNumber":118,"author":{"gitId":"Amadeus-Winarto"},"content":"                                name.toLowerCase(Locale.ROOT))))","lastModifiedDate":"2021-09-07"},{"lineNumber":119,"author":{"gitId":"Amadeus-Winarto"},"content":"                .sorted()","lastModifiedDate":"2021-09-07"},{"lineNumber":120,"author":{"gitId":"Amadeus-Winarto"},"content":"                .limit(5)","lastModifiedDate":"2021-09-07"},{"lineNumber":121,"author":{"gitId":"Amadeus-Winarto"},"content":"                .map(OrderedTask::getTask)","lastModifiedDate":"2021-09-07"},{"lineNumber":122,"author":{"gitId":"Amadeus-Winarto"},"content":"                .toArray(Task[]::new);","lastModifiedDate":"2021-09-07"},{"lineNumber":123,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":124,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":125,"author":{"gitId":"Amadeus-Winarto"},"content":"    // Can be optimised by DP","lastModifiedDate":"2021-09-07"},{"lineNumber":126,"author":{"gitId":"Amadeus-Winarto"},"content":"    private int naiveLevenshtein(String s1, String reference, int idx1, int idx2) {","lastModifiedDate":"2021-09-07"},{"lineNumber":127,"author":{"gitId":"Amadeus-Winarto"},"content":"        if (s1.length() \u003c\u003d idx1) {","lastModifiedDate":"2021-09-07"},{"lineNumber":128,"author":{"gitId":"Amadeus-Winarto"},"content":"            return reference.length();","lastModifiedDate":"2021-09-07"},{"lineNumber":129,"author":{"gitId":"Amadeus-Winarto"},"content":"        } else if (reference.length() \u003c\u003d idx2) {","lastModifiedDate":"2021-09-07"},{"lineNumber":130,"author":{"gitId":"Amadeus-Winarto"},"content":"            return s1.length();","lastModifiedDate":"2021-09-07"},{"lineNumber":131,"author":{"gitId":"Amadeus-Winarto"},"content":"        } else if (s1.charAt(idx1) \u003d\u003d reference.charAt(idx2)) {","lastModifiedDate":"2021-09-07"},{"lineNumber":132,"author":{"gitId":"Amadeus-Winarto"},"content":"            return naiveLevenshtein(s1, reference, idx1 + 1, idx2 + 1);","lastModifiedDate":"2021-09-07"},{"lineNumber":133,"author":{"gitId":"Amadeus-Winarto"},"content":"        } else {","lastModifiedDate":"2021-09-07"},{"lineNumber":134,"author":{"gitId":"Amadeus-Winarto"},"content":"            return 1 + Math.min(naiveLevenshtein(s1, reference, idx1 + 1, idx2 + 1),","lastModifiedDate":"2021-09-07"},{"lineNumber":135,"author":{"gitId":"Amadeus-Winarto"},"content":"                    Math.min(","lastModifiedDate":"2021-09-07"},{"lineNumber":136,"author":{"gitId":"Amadeus-Winarto"},"content":"                        naiveLevenshtein(s1, reference, idx1 + 1, idx2),","lastModifiedDate":"2021-09-07"},{"lineNumber":137,"author":{"gitId":"Amadeus-Winarto"},"content":"                        naiveLevenshtein(s1, reference, idx1, idx2 + 1)","lastModifiedDate":"2021-09-07"},{"lineNumber":138,"author":{"gitId":"Amadeus-Winarto"},"content":"                    ));","lastModifiedDate":"2021-09-07"},{"lineNumber":139,"author":{"gitId":"Amadeus-Winarto"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":140,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":141,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":142,"author":{"gitId":"Amadeus-Winarto"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"Amadeus-Winarto":142}},{"path":"src/main/java/bobcat/model/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Amadeus-Winarto"},"content":"package bobcat.model.task;","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"Amadeus-Winarto"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"Amadeus-Winarto"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"Amadeus-Winarto"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"Amadeus-Winarto"},"content":"import bobcat.exception.LogicException;","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"Amadeus-Winarto"},"content":"/**","lastModifiedDate":"2021-09-05"},{"lineNumber":10,"author":{"gitId":"Amadeus-Winarto"},"content":" * A Task which represents a task with a deadline","lastModifiedDate":"2021-09-05"},{"lineNumber":11,"author":{"gitId":"Amadeus-Winarto"},"content":" */","lastModifiedDate":"2021-09-05"},{"lineNumber":12,"author":{"gitId":"Amadeus-Winarto"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-16"},{"lineNumber":13,"author":{"gitId":"Amadeus-Winarto"},"content":"    protected LocalDate dueDate;","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"Amadeus-Winarto"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"Amadeus-Winarto"},"content":"     * Returns a Deadline Object which represents a deadline in the TaskList","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"Amadeus-Winarto"},"content":"     * @param entry description of deadline","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"Amadeus-Winarto"},"content":"     * @param isComplete status of completion of deadline","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"Amadeus-Winarto"},"content":"     * @param dueDate due date of deadline","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"Amadeus-Winarto"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"Amadeus-Winarto"},"content":"    public Deadline(String entry, Boolean isComplete, String dueDate) {","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"Amadeus-Winarto"},"content":"        super(entry, isComplete);","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"Amadeus-Winarto"},"content":"        try {","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"Amadeus-Winarto"},"content":"            this.dueDate \u003d LocalDate.parse(dueDate);","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"Amadeus-Winarto"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"Amadeus-Winarto"},"content":"            throw new LogicException(\"Cannot understand given date. Is it in \\\"yyyy-mm-dd\\\" format?\");","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"Amadeus-Winarto"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"Amadeus-Winarto"},"content":"    public Deadline(String entry, String dueDate) {","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"Amadeus-Winarto"},"content":"        this(entry, false, dueDate);","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":33,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":34,"author":{"gitId":"Amadeus-Winarto"},"content":"    private String formatDateTime(LocalDate dateTime) {","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"Amadeus-Winarto"},"content":"        return dateTime.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy\")).trim();","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":37,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":38,"author":{"gitId":"Amadeus-Winarto"},"content":"    @Override","lastModifiedDate":"2021-08-16"},{"lineNumber":39,"author":{"gitId":"Amadeus-Winarto"},"content":"    public String toString() {","lastModifiedDate":"2021-08-16"},{"lineNumber":40,"author":{"gitId":"Amadeus-Winarto"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + formatDateTime(dueDate) + \")\";","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":42,"author":{"gitId":"Amadeus-Winarto"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"Amadeus-Winarto":42}},{"path":"src/main/java/bobcat/model/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Amadeus-Winarto"},"content":"package bobcat.model.task;","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"Amadeus-Winarto"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"Amadeus-Winarto"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"Amadeus-Winarto"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"Amadeus-Winarto"},"content":"import bobcat.exception.LogicException;","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"Amadeus-Winarto"},"content":"/**","lastModifiedDate":"2021-09-05"},{"lineNumber":10,"author":{"gitId":"Amadeus-Winarto"},"content":" * A Task which represents a task with a starting time","lastModifiedDate":"2021-09-05"},{"lineNumber":11,"author":{"gitId":"Amadeus-Winarto"},"content":" */","lastModifiedDate":"2021-09-05"},{"lineNumber":12,"author":{"gitId":"Amadeus-Winarto"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-16"},{"lineNumber":13,"author":{"gitId":"Amadeus-Winarto"},"content":"    protected LocalDate startTime;","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"Amadeus-Winarto"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"Amadeus-Winarto"},"content":"     * Returns an Event object which represents an event in the TaskList","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"Amadeus-Winarto"},"content":"     * @param entry description of Event","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"Amadeus-Winarto"},"content":"     * @param isComplete completion status of Event","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"Amadeus-Winarto"},"content":"     * @param startTime when the Event starts","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"Amadeus-Winarto"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"Amadeus-Winarto"},"content":"    public Event(String entry, boolean isComplete, String startTime) {","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"Amadeus-Winarto"},"content":"        super(entry, isComplete);","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"Amadeus-Winarto"},"content":"        try {","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"Amadeus-Winarto"},"content":"            this.startTime \u003d LocalDate.parse(startTime);","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"Amadeus-Winarto"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"Amadeus-Winarto"},"content":"            throw new LogicException(\"Cannot understand given date. Is it in \\\"yyyy-mm-dd\\\" format?\");","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"Amadeus-Winarto"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":29,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":30,"author":{"gitId":"Amadeus-Winarto"},"content":"    public Event(String entry, String startTime) {","lastModifiedDate":"2021-08-21"},{"lineNumber":31,"author":{"gitId":"Amadeus-Winarto"},"content":"        this(entry, false, startTime);","lastModifiedDate":"2021-08-21"},{"lineNumber":32,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":33,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":34,"author":{"gitId":"Amadeus-Winarto"},"content":"    private String formatDateTime(LocalDate dateTime) {","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"Amadeus-Winarto"},"content":"        return dateTime.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy\"));","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":37,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":38,"author":{"gitId":"Amadeus-Winarto"},"content":"    @Override","lastModifiedDate":"2021-08-16"},{"lineNumber":39,"author":{"gitId":"Amadeus-Winarto"},"content":"    public String toString() {","lastModifiedDate":"2021-08-16"},{"lineNumber":40,"author":{"gitId":"Amadeus-Winarto"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + formatDateTime(startTime) + \")\";","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":42,"author":{"gitId":"Amadeus-Winarto"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"Amadeus-Winarto":42}},{"path":"src/main/java/bobcat/model/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Amadeus-Winarto"},"content":"package bobcat.model.task;","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":3,"author":{"gitId":"Amadeus-Winarto"},"content":"public abstract class Task {","lastModifiedDate":"2021-09-05"},{"lineNumber":4,"author":{"gitId":"Amadeus-Winarto"},"content":"    private final String description;","lastModifiedDate":"2021-08-16"},{"lineNumber":5,"author":{"gitId":"Amadeus-Winarto"},"content":"    private boolean isDone;","lastModifiedDate":"2021-08-16"},{"lineNumber":6,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":7,"author":{"gitId":"Amadeus-Winarto"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"Amadeus-Winarto"},"content":"     * Returns a \u003ccode\u003eTask\u003c/code\u003e object which represents a task in a TaskList","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"Amadeus-Winarto"},"content":"     * @param entry description of task","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"Amadeus-Winarto"},"content":"     * @param isComplete status whether task is completed or not","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"Amadeus-Winarto"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"Amadeus-Winarto"},"content":"    public Task(String entry, boolean isComplete) {","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"Amadeus-Winarto"},"content":"        this.description \u003d entry;","lastModifiedDate":"2021-08-16"},{"lineNumber":14,"author":{"gitId":"Amadeus-Winarto"},"content":"        this.isDone \u003d isComplete;","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":16,"author":{"gitId":"Amadeus-Winarto"},"content":"    public Task(String entry) {","lastModifiedDate":"2021-08-21"},{"lineNumber":17,"author":{"gitId":"Amadeus-Winarto"},"content":"        this(entry, false);","lastModifiedDate":"2021-08-21"},{"lineNumber":18,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":19,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":20,"author":{"gitId":"Amadeus-Winarto"},"content":"    public void markDone() {","lastModifiedDate":"2021-08-16"},{"lineNumber":21,"author":{"gitId":"Amadeus-Winarto"},"content":"        isDone \u003d true;","lastModifiedDate":"2021-08-16"},{"lineNumber":22,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":23,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":24,"author":{"gitId":"Amadeus-Winarto"},"content":"    private String getStatus() {","lastModifiedDate":"2021-08-16"},{"lineNumber":25,"author":{"gitId":"Amadeus-Winarto"},"content":"        return isDone ? \"X\" : \" \";","lastModifiedDate":"2021-08-16"},{"lineNumber":26,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":27,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":28,"author":{"gitId":"Amadeus-Winarto"},"content":"    public String getDescription() {","lastModifiedDate":"2021-09-07"},{"lineNumber":29,"author":{"gitId":"Amadeus-Winarto"},"content":"        return description;","lastModifiedDate":"2021-09-07"},{"lineNumber":30,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":31,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":32,"author":{"gitId":"Amadeus-Winarto"},"content":"    public String toString() {","lastModifiedDate":"2021-08-16"},{"lineNumber":33,"author":{"gitId":"Amadeus-Winarto"},"content":"        return \"[\" + this.getStatus() + \"] \" + this.description;","lastModifiedDate":"2021-08-16"},{"lineNumber":34,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":35,"author":{"gitId":"Amadeus-Winarto"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"Amadeus-Winarto":35}},{"path":"src/main/java/bobcat/model/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Amadeus-Winarto"},"content":"package bobcat.model.task;","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":3,"author":{"gitId":"Amadeus-Winarto"},"content":"/**","lastModifiedDate":"2021-09-05"},{"lineNumber":4,"author":{"gitId":"Amadeus-Winarto"},"content":" * A Task which represents a task with no starting time or deadline","lastModifiedDate":"2021-09-05"},{"lineNumber":5,"author":{"gitId":"Amadeus-Winarto"},"content":" */","lastModifiedDate":"2021-09-05"},{"lineNumber":6,"author":{"gitId":"Amadeus-Winarto"},"content":"public class ToDo extends Task {","lastModifiedDate":"2021-08-16"},{"lineNumber":7,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"Amadeus-Winarto"},"content":"    public ToDo(String entry, boolean status) {","lastModifiedDate":"2021-08-21"},{"lineNumber":9,"author":{"gitId":"Amadeus-Winarto"},"content":"        super(entry, status);","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"Amadeus-Winarto"},"content":"    public ToDo(String entry) {","lastModifiedDate":"2021-08-16"},{"lineNumber":13,"author":{"gitId":"Amadeus-Winarto"},"content":"        super(entry);","lastModifiedDate":"2021-08-16"},{"lineNumber":14,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":15,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":16,"author":{"gitId":"Amadeus-Winarto"},"content":"    @Override","lastModifiedDate":"2021-08-16"},{"lineNumber":17,"author":{"gitId":"Amadeus-Winarto"},"content":"    public String toString() {","lastModifiedDate":"2021-08-16"},{"lineNumber":18,"author":{"gitId":"Amadeus-Winarto"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2021-08-16"},{"lineNumber":19,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":20,"author":{"gitId":"Amadeus-Winarto"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"Amadeus-Winarto":20}},{"path":"src/main/java/bobcat/view/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Amadeus-Winarto"},"content":"package bobcat.view;","lastModifiedDate":"2021-09-01"},{"lineNumber":2,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"Amadeus-Winarto"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"Amadeus-Winarto"},"content":"import java.util.Collections;","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"Amadeus-Winarto"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"Amadeus-Winarto"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"Amadeus-Winarto"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"Amadeus-Winarto"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"Amadeus-Winarto"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"Amadeus-Winarto"},"content":"import javafx.scene.Node;","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"Amadeus-Winarto"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"Amadeus-Winarto"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"Amadeus-Winarto"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"Amadeus-Winarto"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":17,"author":{"gitId":"Amadeus-Winarto"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"Amadeus-Winarto"},"content":"    @FXML","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"Amadeus-Winarto"},"content":"    private Label dialog;","lastModifiedDate":"2021-09-01"},{"lineNumber":20,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":21,"author":{"gitId":"Amadeus-Winarto"},"content":"    @FXML","lastModifiedDate":"2021-09-01"},{"lineNumber":22,"author":{"gitId":"Amadeus-Winarto"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2021-09-01"},{"lineNumber":23,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":24,"author":{"gitId":"Amadeus-Winarto"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2021-09-01"},{"lineNumber":25,"author":{"gitId":"Amadeus-Winarto"},"content":"        try {","lastModifiedDate":"2021-09-01"},{"lineNumber":26,"author":{"gitId":"Amadeus-Winarto"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2021-09-01"},{"lineNumber":27,"author":{"gitId":"Amadeus-Winarto"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2021-09-01"},{"lineNumber":28,"author":{"gitId":"Amadeus-Winarto"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2021-09-01"},{"lineNumber":29,"author":{"gitId":"Amadeus-Winarto"},"content":"            fxmlLoader.load();","lastModifiedDate":"2021-09-01"},{"lineNumber":30,"author":{"gitId":"Amadeus-Winarto"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-01"},{"lineNumber":31,"author":{"gitId":"Amadeus-Winarto"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-09-01"},{"lineNumber":32,"author":{"gitId":"Amadeus-Winarto"},"content":"        }","lastModifiedDate":"2021-09-01"},{"lineNumber":33,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":34,"author":{"gitId":"Amadeus-Winarto"},"content":"        dialog.setText(text);","lastModifiedDate":"2021-09-01"},{"lineNumber":35,"author":{"gitId":"Amadeus-Winarto"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2021-09-01"},{"lineNumber":36,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":37,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":38,"author":{"gitId":"Amadeus-Winarto"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":39,"author":{"gitId":"Amadeus-Winarto"},"content":"     * Returns a DialogBox object with the appropriate format.","lastModifiedDate":"2021-09-01"},{"lineNumber":40,"author":{"gitId":"Amadeus-Winarto"},"content":"     * @param l","lastModifiedDate":"2021-09-01"},{"lineNumber":41,"author":{"gitId":"Amadeus-Winarto"},"content":"     * @param iv","lastModifiedDate":"2021-09-01"},{"lineNumber":42,"author":{"gitId":"Amadeus-Winarto"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":43,"author":{"gitId":"Amadeus-Winarto"},"content":"    public DialogBox(Label l, ImageView iv) {","lastModifiedDate":"2021-09-01"},{"lineNumber":44,"author":{"gitId":"Amadeus-Winarto"},"content":"        l.setWrapText(true);","lastModifiedDate":"2021-09-01"},{"lineNumber":45,"author":{"gitId":"Amadeus-Winarto"},"content":"        iv.setFitWidth(100.0);","lastModifiedDate":"2021-09-01"},{"lineNumber":46,"author":{"gitId":"Amadeus-Winarto"},"content":"        iv.setFitHeight(100.0);","lastModifiedDate":"2021-09-01"},{"lineNumber":47,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":48,"author":{"gitId":"Amadeus-Winarto"},"content":"        this.setAlignment(Pos.TOP_RIGHT);","lastModifiedDate":"2021-09-01"},{"lineNumber":49,"author":{"gitId":"Amadeus-Winarto"},"content":"        this.getChildren().addAll(l, iv);","lastModifiedDate":"2021-09-01"},{"lineNumber":50,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":51,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":52,"author":{"gitId":"Amadeus-Winarto"},"content":"    private void flip() {","lastModifiedDate":"2021-09-01"},{"lineNumber":53,"author":{"gitId":"Amadeus-Winarto"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2021-09-01"},{"lineNumber":54,"author":{"gitId":"Amadeus-Winarto"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2021-09-01"},{"lineNumber":55,"author":{"gitId":"Amadeus-Winarto"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2021-09-01"},{"lineNumber":56,"author":{"gitId":"Amadeus-Winarto"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2021-09-01"},{"lineNumber":57,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":58,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":59,"author":{"gitId":"Amadeus-Winarto"},"content":"    public static DialogBox getUserDialog(Label l, ImageView iv) {","lastModifiedDate":"2021-09-01"},{"lineNumber":60,"author":{"gitId":"Amadeus-Winarto"},"content":"        return new DialogBox(l, iv);","lastModifiedDate":"2021-09-01"},{"lineNumber":61,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":62,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":63,"author":{"gitId":"Amadeus-Winarto"},"content":"    public static DialogBox getDukeDialog(Label l, ImageView iv) {","lastModifiedDate":"2021-09-01"},{"lineNumber":64,"author":{"gitId":"Amadeus-Winarto"},"content":"        var db \u003d new DialogBox(l, iv);","lastModifiedDate":"2021-09-01"},{"lineNumber":65,"author":{"gitId":"Amadeus-Winarto"},"content":"        db.flip();","lastModifiedDate":"2021-09-01"},{"lineNumber":66,"author":{"gitId":"Amadeus-Winarto"},"content":"        return db;","lastModifiedDate":"2021-09-01"},{"lineNumber":67,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":68,"author":{"gitId":"Amadeus-Winarto"},"content":"}","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"Amadeus-Winarto":68}},{"path":"src/main/java/bobcat/view/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Amadeus-Winarto"},"content":"package bobcat.view;","lastModifiedDate":"2021-09-01"},{"lineNumber":2,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"Amadeus-Winarto"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"Amadeus-Winarto"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"Amadeus-Winarto"},"content":"import java.util.Objects;","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"Amadeus-Winarto"},"content":"import bobcat.exception.BobCatException;","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"Amadeus-Winarto"},"content":"import bobcat.exception.ExitException;","lastModifiedDate":"2021-09-05"},{"lineNumber":9,"author":{"gitId":"Amadeus-Winarto"},"content":"import bobcat.executor.ExecutionUnit;","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"Amadeus-Winarto"},"content":"import javafx.event.ActionEvent;","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"Amadeus-Winarto"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"Amadeus-Winarto"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"Amadeus-Winarto"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"Amadeus-Winarto"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"Amadeus-Winarto"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"Amadeus-Winarto"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2021-09-01"},{"lineNumber":17,"author":{"gitId":"Amadeus-Winarto"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"Amadeus-Winarto"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"Amadeus-Winarto"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2021-09-05"},{"lineNumber":20,"author":{"gitId":"Amadeus-Winarto"},"content":"import javafx.stage.WindowEvent;","lastModifiedDate":"2021-09-05"},{"lineNumber":21,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":22,"author":{"gitId":"Amadeus-Winarto"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2021-09-01"},{"lineNumber":23,"author":{"gitId":"Amadeus-Winarto"},"content":"    @FXML","lastModifiedDate":"2021-09-01"},{"lineNumber":24,"author":{"gitId":"Amadeus-Winarto"},"content":"    private ScrollPane scrollPane; // This will find the appropriate fxml id","lastModifiedDate":"2021-09-01"},{"lineNumber":25,"author":{"gitId":"Amadeus-Winarto"},"content":"    @FXML","lastModifiedDate":"2021-09-01"},{"lineNumber":26,"author":{"gitId":"Amadeus-Winarto"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2021-09-01"},{"lineNumber":27,"author":{"gitId":"Amadeus-Winarto"},"content":"    @FXML","lastModifiedDate":"2021-09-01"},{"lineNumber":28,"author":{"gitId":"Amadeus-Winarto"},"content":"    private TextField userInput;","lastModifiedDate":"2021-09-01"},{"lineNumber":29,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":30,"author":{"gitId":"Amadeus-Winarto"},"content":"    private final Image userImage \u003d new Image(Objects.requireNonNull(this.getClass()","lastModifiedDate":"2021-09-01"},{"lineNumber":31,"author":{"gitId":"Amadeus-Winarto"},"content":"                                                        .getResourceAsStream(\"/images/DaUser.png\")));","lastModifiedDate":"2021-09-01"},{"lineNumber":32,"author":{"gitId":"Amadeus-Winarto"},"content":"    private final Image bobcatImage \u003d new Image(Objects.requireNonNull(this.getClass()","lastModifiedDate":"2021-09-01"},{"lineNumber":33,"author":{"gitId":"Amadeus-Winarto"},"content":"                                                        .getResourceAsStream(\"/images/DaBobCat.png\")));","lastModifiedDate":"2021-09-01"},{"lineNumber":34,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":35,"author":{"gitId":"Amadeus-Winarto"},"content":"    private ExecutionUnit executor;","lastModifiedDate":"2021-09-01"},{"lineNumber":36,"author":{"gitId":"Amadeus-Winarto"},"content":"    private Stage stage;","lastModifiedDate":"2021-09-05"},{"lineNumber":37,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":38,"author":{"gitId":"Amadeus-Winarto"},"content":"    @FXML","lastModifiedDate":"2021-09-01"},{"lineNumber":39,"author":{"gitId":"Amadeus-Winarto"},"content":"    public void initialize() {","lastModifiedDate":"2021-09-01"},{"lineNumber":40,"author":{"gitId":"Amadeus-Winarto"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2021-09-01"},{"lineNumber":41,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":42,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":43,"author":{"gitId":"Amadeus-Winarto"},"content":"    public void setExecutor(ExecutionUnit d) {","lastModifiedDate":"2021-09-01"},{"lineNumber":44,"author":{"gitId":"Amadeus-Winarto"},"content":"        executor \u003d d;","lastModifiedDate":"2021-09-01"},{"lineNumber":45,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":46,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":47,"author":{"gitId":"Amadeus-Winarto"},"content":"    public void setStage(Stage s) {","lastModifiedDate":"2021-09-05"},{"lineNumber":48,"author":{"gitId":"Amadeus-Winarto"},"content":"        stage \u003d s;","lastModifiedDate":"2021-09-05"},{"lineNumber":49,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-09-05"},{"lineNumber":50,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":51,"author":{"gitId":"Amadeus-Winarto"},"content":"    @FXML","lastModifiedDate":"2021-09-01"},{"lineNumber":52,"author":{"gitId":"Amadeus-Winarto"},"content":"    private void handleUserInput(ActionEvent actionEvent) {","lastModifiedDate":"2021-09-01"},{"lineNumber":53,"author":{"gitId":"Amadeus-Winarto"},"content":"        String query \u003d userInput.getText();","lastModifiedDate":"2021-09-01"},{"lineNumber":54,"author":{"gitId":"Amadeus-Winarto"},"content":"        respondUser(new String[]{query});","lastModifiedDate":"2021-09-01"},{"lineNumber":55,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":56,"author":{"gitId":"Amadeus-Winarto"},"content":"        try {","lastModifiedDate":"2021-09-01"},{"lineNumber":57,"author":{"gitId":"Amadeus-Winarto"},"content":"            respondBobCat(executor.executeCommand(query));","lastModifiedDate":"2021-09-01"},{"lineNumber":58,"author":{"gitId":"Amadeus-Winarto"},"content":"        } catch (ExitException e) {","lastModifiedDate":"2021-09-05"},{"lineNumber":59,"author":{"gitId":"Amadeus-Winarto"},"content":"            stage.fireEvent(new WindowEvent(stage, WindowEvent.WINDOW_CLOSE_REQUEST));","lastModifiedDate":"2021-09-05"},{"lineNumber":60,"author":{"gitId":"Amadeus-Winarto"},"content":"        } catch (BobCatException e) {","lastModifiedDate":"2021-09-01"},{"lineNumber":61,"author":{"gitId":"Amadeus-Winarto"},"content":"            respondError(e);","lastModifiedDate":"2021-09-01"},{"lineNumber":62,"author":{"gitId":"Amadeus-Winarto"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-01"},{"lineNumber":63,"author":{"gitId":"Amadeus-Winarto"},"content":"            respondError(new BobCatException(e.getMessage()));","lastModifiedDate":"2021-09-01"},{"lineNumber":64,"author":{"gitId":"Amadeus-Winarto"},"content":"        }","lastModifiedDate":"2021-09-01"},{"lineNumber":65,"author":{"gitId":"Amadeus-Winarto"},"content":"        userInput.clear();","lastModifiedDate":"2021-09-01"},{"lineNumber":66,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":67,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":68,"author":{"gitId":"Amadeus-Winarto"},"content":"    public void respondBobCat(String[] reply) {","lastModifiedDate":"2021-09-01"},{"lineNumber":69,"author":{"gitId":"Amadeus-Winarto"},"content":"        display(reply, (text) -\u003e DialogBox.getDukeDialog(getDialogLabel(text), new ImageView(bobcatImage)));","lastModifiedDate":"2021-09-01"},{"lineNumber":70,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":71,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":72,"author":{"gitId":"Amadeus-Winarto"},"content":"    public void respondUser(String[] reply) {","lastModifiedDate":"2021-09-01"},{"lineNumber":73,"author":{"gitId":"Amadeus-Winarto"},"content":"        display(reply, (text) -\u003e DialogBox.getUserDialog(getDialogLabel(text), new ImageView(userImage)));","lastModifiedDate":"2021-09-01"},{"lineNumber":74,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":75,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":76,"author":{"gitId":"Amadeus-Winarto"},"content":"    public void respondError(BobCatException error) {","lastModifiedDate":"2021-09-01"},{"lineNumber":77,"author":{"gitId":"Amadeus-Winarto"},"content":"        respondBobCat(new String[]{\"☹ OOPS!!! \", error.getMessage()});","lastModifiedDate":"2021-09-01"},{"lineNumber":78,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":79,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":80,"author":{"gitId":"Amadeus-Winarto"},"content":"    @FunctionalInterface","lastModifiedDate":"2021-09-01"},{"lineNumber":81,"author":{"gitId":"Amadeus-Winarto"},"content":"    private interface TextToDialogBox {","lastModifiedDate":"2021-09-01"},{"lineNumber":82,"author":{"gitId":"Amadeus-Winarto"},"content":"        DialogBox transform(String text);","lastModifiedDate":"2021-09-01"},{"lineNumber":83,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":84,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":85,"author":{"gitId":"Amadeus-Winarto"},"content":"    private void display(String text, TextToDialogBox textTransform) {","lastModifiedDate":"2021-09-01"},{"lineNumber":86,"author":{"gitId":"Amadeus-Winarto"},"content":"        dialogContainer.getChildren().add(textTransform.transform(text));","lastModifiedDate":"2021-09-01"},{"lineNumber":87,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":88,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":89,"author":{"gitId":"Amadeus-Winarto"},"content":"    private void display(String[] reply, TextToDialogBox textTransform) {","lastModifiedDate":"2021-09-01"},{"lineNumber":90,"author":{"gitId":"Amadeus-Winarto"},"content":"        String result \u003d Arrays.stream(reply).reduce(\"\", (x, y) -\u003e x + \"\\n\" + y);","lastModifiedDate":"2021-09-01"},{"lineNumber":91,"author":{"gitId":"Amadeus-Winarto"},"content":"        display(result, textTransform);","lastModifiedDate":"2021-09-01"},{"lineNumber":92,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":93,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":94,"author":{"gitId":"Amadeus-Winarto"},"content":"    private Label getDialogLabel(String text) {","lastModifiedDate":"2021-09-01"},{"lineNumber":95,"author":{"gitId":"Amadeus-Winarto"},"content":"        Label textToAdd \u003d new Label(text);","lastModifiedDate":"2021-09-01"},{"lineNumber":96,"author":{"gitId":"Amadeus-Winarto"},"content":"        textToAdd.setWrapText(true);","lastModifiedDate":"2021-09-01"},{"lineNumber":97,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":98,"author":{"gitId":"Amadeus-Winarto"},"content":"        return textToAdd;","lastModifiedDate":"2021-09-01"},{"lineNumber":99,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":100,"author":{"gitId":"Amadeus-Winarto"},"content":"}","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"Amadeus-Winarto":100}},{"path":"src/main/java/bobcat/view/TextUi.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Amadeus-Winarto"},"content":"package bobcat.view;","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":3,"author":{"gitId":"Amadeus-Winarto"},"content":"import bobcat.exception.BobCatException;","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"Amadeus-Winarto"},"content":"/**","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"Amadeus-Winarto"},"content":" * Represents the view of the application. Implements the \"View\" aspect of the MVC pattern. A \u003ccode\u003eTextUi\u003c/code\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"Amadeus-Winarto"},"content":" * object dictates \u003ci\u003ehow\u003c/i\u003e information should be presented.","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"Amadeus-Winarto"},"content":" */","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"Amadeus-Winarto"},"content":"public class TextUi {","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"Amadeus-Winarto"},"content":"    private static void hLine() {","lastModifiedDate":"2021-08-16"},{"lineNumber":11,"author":{"gitId":"Amadeus-Winarto"},"content":"        System.out.println(\"\\t----------------------------------------------\");","lastModifiedDate":"2021-08-16"},{"lineNumber":12,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":13,"author":{"gitId":"Amadeus-Winarto"},"content":"    private static void display(String arg) {","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"Amadeus-Winarto"},"content":"        System.out.println(\"\\t\" + arg);","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":17,"author":{"gitId":"Amadeus-Winarto"},"content":"    private void respondError(String errorMessage) {","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"Amadeus-Winarto"},"content":"        hLine();","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"Amadeus-Winarto"},"content":"        System.out.print(\"\\t☹ OOPS!!! \");","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"Amadeus-Winarto"},"content":"        System.out.println(errorMessage);","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"Amadeus-Winarto"},"content":"        hLine();","lastModifiedDate":"2021-08-23"},{"lineNumber":22,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"Amadeus-Winarto"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"Amadeus-Winarto"},"content":"     * Displays error message to the user. This is used primarily to standardise formatting of","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"Amadeus-Winarto"},"content":"     * error messages, particularly BobCatException.","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"Amadeus-Winarto"},"content":"     *  @param errorObj a BobCatException which is thrown by ExecutionUnit","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"Amadeus-Winarto"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"Amadeus-Winarto"},"content":"    public void respondError(BobCatException errorObj) {","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"Amadeus-Winarto"},"content":"        respondError(errorObj.getMessage());","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":32,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"Amadeus-Winarto"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"Amadeus-Winarto"},"content":"     * Displays content to the user. This is used primarily to respond to user queries, and to standardise","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"Amadeus-Winarto"},"content":"     * the format of the content to be displayed. Elements in the array will be displayed with a newline in between.","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"Amadeus-Winarto"},"content":"     *  @param reply a String array, where each element is a string to be displayed to the user.","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"Amadeus-Winarto"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"Amadeus-Winarto"},"content":"    public void respond(String[] reply) {","lastModifiedDate":"2021-08-21"},{"lineNumber":39,"author":{"gitId":"Amadeus-Winarto"},"content":"        hLine();","lastModifiedDate":"2021-08-16"},{"lineNumber":40,"author":{"gitId":"Amadeus-Winarto"},"content":"        for (int i \u003d 0; i \u003c reply.length - 1; i++) {","lastModifiedDate":"2021-08-16"},{"lineNumber":41,"author":{"gitId":"Amadeus-Winarto"},"content":"            display(reply[i]);","lastModifiedDate":"2021-08-18"},{"lineNumber":42,"author":{"gitId":"Amadeus-Winarto"},"content":"        }","lastModifiedDate":"2021-08-16"},{"lineNumber":43,"author":{"gitId":"Amadeus-Winarto"},"content":"        display(reply[reply.length - 1]);","lastModifiedDate":"2021-08-18"},{"lineNumber":44,"author":{"gitId":"Amadeus-Winarto"},"content":"        hLine();","lastModifiedDate":"2021-08-16"},{"lineNumber":45,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":46,"author":{"gitId":"Amadeus-Winarto"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"Amadeus-Winarto":46}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Amadeus-Winarto"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":2,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"Amadeus-Winarto"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"Amadeus-Winarto"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"Amadeus-Winarto"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"Amadeus-Winarto"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"Amadeus-Winarto"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-color: gray;\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/16\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"Amadeus-Winarto"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"Amadeus-Winarto"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" textFill\u003d\"WHITE\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"Amadeus-Winarto"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"Amadeus-Winarto"},"content":"    \u003c/children\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"Amadeus-Winarto"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"Amadeus-Winarto"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"Amadeus-Winarto"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"Amadeus-Winarto"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"Amadeus-Winarto":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Amadeus-Winarto"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":2,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"Amadeus-Winarto"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"Amadeus-Winarto"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"Amadeus-Winarto"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"Amadeus-Winarto"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"Amadeus-Winarto"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"Amadeus-Winarto"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-color: black;\" xmlns\u003d\"http://javafx.com/javafx/16\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"bobcat.view.MainWindow\"\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"Amadeus-Winarto"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"Amadeus-Winarto"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"320.0\" promptText\u003d\"Type your query here\" style\u003d\"-fx-background-color: gray; -fx-text-fill: white; -fx-prompt-text-fill: white;\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"Amadeus-Winarto"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" style\u003d\"-fx-background-color: gray;\" text\u003d\"Send\" textFill\u003d\"WHITE\" /\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"Amadeus-Winarto"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-color: gray;\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"Amadeus-Winarto"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"Amadeus-Winarto"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" style\u003d\"-fx-background-color: gray;\" /\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"Amadeus-Winarto"},"content":"            \u003c/content\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":17,"author":{"gitId":"Amadeus-Winarto"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"Amadeus-Winarto"},"content":"    \u003c/children\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"Amadeus-Winarto"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"Amadeus-Winarto":19}},{"path":"src/test/java/bobcat/BobCatTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Amadeus-Winarto"},"content":"package bobcat;","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":3,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"Amadeus-Winarto"},"content":"public class BobCatTest {","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"Amadeus-Winarto"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"Amadeus-Winarto":5}},{"path":"src/test/java/bobcat/executor/ExecutionUnitTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Amadeus-Winarto"},"content":"package bobcat.executor;","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"Amadeus-Winarto"},"content":"import static org.junit.jupiter.api.Assertions.assertArrayEquals;","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"Amadeus-Winarto"},"content":"import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"Amadeus-Winarto"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"Amadeus-Winarto"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"Amadeus-Winarto"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"Amadeus-Winarto"},"content":"import java.nio.file.Files;","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"Amadeus-Winarto"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"Amadeus-Winarto"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"Amadeus-Winarto"},"content":"import java.util.List;","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"Amadeus-Winarto"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"Amadeus-Winarto"},"content":"public class ExecutionUnitTest {","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"Amadeus-Winarto"},"content":"    @Test","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"Amadeus-Winarto"},"content":"    public void correctStorageInit() {","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"Amadeus-Winarto"},"content":"        assertDoesNotThrow(() -\u003e {","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"Amadeus-Winarto"},"content":"            ExecutionUnit executor \u003d new ExecutionUnit(\"src/test/resource/taskList1.txt\");","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"Amadeus-Winarto"},"content":"            executor.initStorage();","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"Amadeus-Winarto"},"content":"        });","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"Amadeus-Winarto"},"content":"    @Test","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"Amadeus-Winarto"},"content":"    public void incorrectFile_fileDoesNotExists_exceptionThrown() {","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"Amadeus-Winarto"},"content":"        assertThrows(IOException.class, () -\u003e {","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"Amadeus-Winarto"},"content":"            ExecutionUnit executor \u003d new ExecutionUnit(\"src/test/resource/taskList.txt\");","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"Amadeus-Winarto"},"content":"            executor.initStorage();","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"Amadeus-Winarto"},"content":"        });","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"Amadeus-Winarto"},"content":"    @Test","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"Amadeus-Winarto"},"content":"    public void todoCreation() {","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"Amadeus-Winarto"},"content":"        String todoQuery \u003d \"todo eat breakfast\";","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"Amadeus-Winarto"},"content":"        String[] todoExpected \u003d new String[]{\"Got it. I\u0027ve added this task:\",","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"Amadeus-Winarto"},"content":"                                                \"  [T][ ] eat breakfast\",","lastModifiedDate":"2021-08-23"},{"lineNumber":39,"author":{"gitId":"Amadeus-Winarto"},"content":"                                                \"Now you have 1 tasks in the list\"};","lastModifiedDate":"2021-08-23"},{"lineNumber":40,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":41,"author":{"gitId":"Amadeus-Winarto"},"content":"        assertDoesNotThrow(() -\u003e {","lastModifiedDate":"2021-08-23"},{"lineNumber":42,"author":{"gitId":"Amadeus-Winarto"},"content":"            ExecutionUnit executor \u003d new ExecutionUnit(\"src/test/resource/taskList1.txt\");","lastModifiedDate":"2021-08-30"},{"lineNumber":43,"author":{"gitId":"Amadeus-Winarto"},"content":"            executor.initStorage();","lastModifiedDate":"2021-08-23"},{"lineNumber":44,"author":{"gitId":"Amadeus-Winarto"},"content":"            String[] todoActual \u003d executor.executeCommand(todoQuery);","lastModifiedDate":"2021-08-23"},{"lineNumber":45,"author":{"gitId":"Amadeus-Winarto"},"content":"            todoExpected[2] \u003d todoActual[2]; // Hack to avoid dependency on actual content of taskList1.txt","lastModifiedDate":"2021-08-23"},{"lineNumber":46,"author":{"gitId":"Amadeus-Winarto"},"content":"            assertArrayEquals(todoExpected, todoActual);","lastModifiedDate":"2021-08-23"},{"lineNumber":47,"author":{"gitId":"Amadeus-Winarto"},"content":"        });","lastModifiedDate":"2021-08-23"},{"lineNumber":48,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":49,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":50,"author":{"gitId":"Amadeus-Winarto"},"content":"    @Test","lastModifiedDate":"2021-08-23"},{"lineNumber":51,"author":{"gitId":"Amadeus-Winarto"},"content":"    public void saveStorage() {","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"Amadeus-Winarto"},"content":"        String deadlineQuery \u003d \"deadline eat breakfast /by 2021-01-31\";","lastModifiedDate":"2021-08-23"},{"lineNumber":53,"author":{"gitId":"Amadeus-Winarto"},"content":"        String eventQuery \u003d \"event eat breakfast /at 2020-10-03\";","lastModifiedDate":"2021-08-23"},{"lineNumber":54,"author":{"gitId":"Amadeus-Winarto"},"content":"        String todoQuery \u003d \"todo eat breakfast\";","lastModifiedDate":"2021-08-23"},{"lineNumber":55,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":56,"author":{"gitId":"Amadeus-Winarto"},"content":"        assertDoesNotThrow(() -\u003e {","lastModifiedDate":"2021-08-23"},{"lineNumber":57,"author":{"gitId":"Amadeus-Winarto"},"content":"            String storagePath \u003d \"src/test/resource/taskList2.txt\";","lastModifiedDate":"2021-08-30"},{"lineNumber":58,"author":{"gitId":"Amadeus-Winarto"},"content":"            ExecutionUnit executor \u003d new ExecutionUnit(storagePath);","lastModifiedDate":"2021-08-30"},{"lineNumber":59,"author":{"gitId":"Amadeus-Winarto"},"content":"            executor.initStorage();","lastModifiedDate":"2021-08-23"},{"lineNumber":60,"author":{"gitId":"Amadeus-Winarto"},"content":"            executor.executeCommand(todoQuery);","lastModifiedDate":"2021-08-23"},{"lineNumber":61,"author":{"gitId":"Amadeus-Winarto"},"content":"            executor.executeCommand(eventQuery);","lastModifiedDate":"2021-08-23"},{"lineNumber":62,"author":{"gitId":"Amadeus-Winarto"},"content":"            executor.executeCommand(deadlineQuery);","lastModifiedDate":"2021-08-23"},{"lineNumber":63,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":64,"author":{"gitId":"Amadeus-Winarto"},"content":"            Path path \u003d Paths.get(storagePath);","lastModifiedDate":"2021-08-30"},{"lineNumber":65,"author":{"gitId":"Amadeus-Winarto"},"content":"            List\u003cString\u003e read \u003d Files.readAllLines(path);","lastModifiedDate":"2021-08-23"},{"lineNumber":66,"author":{"gitId":"Amadeus-Winarto"},"content":"            int n \u003d read.size();","lastModifiedDate":"2021-08-23"},{"lineNumber":67,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":68,"author":{"gitId":"Amadeus-Winarto"},"content":"            assertEquals(\"[D][ ] eat breakfast (by: 31 Jan 2021)\", read.get(n - 1));","lastModifiedDate":"2021-08-23"},{"lineNumber":69,"author":{"gitId":"Amadeus-Winarto"},"content":"            assertEquals(\"[E][ ] eat breakfast (at: 03 Oct 2020)\", read.get(n - 2));","lastModifiedDate":"2021-08-23"},{"lineNumber":70,"author":{"gitId":"Amadeus-Winarto"},"content":"            assertEquals(\"[T][ ] eat breakfast\", read.get(n - 3));","lastModifiedDate":"2021-08-23"},{"lineNumber":71,"author":{"gitId":"Amadeus-Winarto"},"content":"        });","lastModifiedDate":"2021-08-23"},{"lineNumber":72,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":73,"author":{"gitId":"Amadeus-Winarto"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"Amadeus-Winarto":73}},{"path":"src/test/java/bobcat/executor/parser/QueryParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Amadeus-Winarto"},"content":"package bobcat.executor.parser;","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":3,"author":{"gitId":"Amadeus-Winarto"},"content":"import static org.junit.jupiter.api.Assertions.assertAll;","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"Amadeus-Winarto"},"content":"import static org.junit.jupiter.api.Assertions.assertArrayEquals;","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"Amadeus-Winarto"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"Amadeus-Winarto"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"Amadeus-Winarto"},"content":"import bobcat.exception.CommandArityException;","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"Amadeus-Winarto"},"content":"import bobcat.exception.UnknownCommandException;","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"Amadeus-Winarto"},"content":"public class QueryParserTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"Amadeus-Winarto"},"content":"    private final bobcat.executor.parser.QueryParser parser \u003d new QueryParser();","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"Amadeus-Winarto"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"Amadeus-Winarto"},"content":"    public void todoCommandParser() {","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"Amadeus-Winarto"},"content":"        assertArrayEquals(parser.parse(\"todo eat breakfast\"), new String[]{\"todo\", \"eat breakfast\"});","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"Amadeus-Winarto"},"content":"        assertThrows(CommandArityException.class, () -\u003e parser.parse(\"todo\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"Amadeus-Winarto"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"Amadeus-Winarto"},"content":"    public void deadlineCommandParser() {","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"Amadeus-Winarto"},"content":"        assertAll(\"CommandArityException thrown\", () -\u003e {","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"Amadeus-Winarto"},"content":"            assertArrayEquals(parser.parse(\"deadline eat breakfast /by 2021-10-01\"),","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"Amadeus-Winarto"},"content":"                    new String[]{\"deadline\", \"eat breakfast\", \"2021-10-01\"});","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"Amadeus-Winarto"},"content":"            assertThrows(CommandArityException.class, () -\u003e parser.parse(\"deadline eat breakfast /at 2021-10-01\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"Amadeus-Winarto"},"content":"            assertThrows(CommandArityException.class, () -\u003e parser.parse(\"deadline eat breakfast\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"Amadeus-Winarto"},"content":"            assertThrows(CommandArityException.class, () -\u003e parser.parse(\"deadline\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"Amadeus-Winarto"},"content":"        });","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"Amadeus-Winarto"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"Amadeus-Winarto"},"content":"    public void eventCommandParser() {","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"Amadeus-Winarto"},"content":"        assertArrayEquals(parser.parse(\"event eat breakfast /at 2021-10-01\"),","lastModifiedDate":"2021-08-30"},{"lineNumber":36,"author":{"gitId":"Amadeus-Winarto"},"content":"                new String[]{\"event\", \"eat breakfast\", \"2021-10-01\"});","lastModifiedDate":"2021-08-30"},{"lineNumber":37,"author":{"gitId":"Amadeus-Winarto"},"content":"        assertThrows(CommandArityException.class, () -\u003e parser.parse(\"event eat breakfast /by 2021-10-01\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"Amadeus-Winarto"},"content":"        assertThrows(CommandArityException.class, () -\u003e parser.parse(\"event eat breakfast\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"Amadeus-Winarto"},"content":"        assertThrows(CommandArityException.class, () -\u003e parser.parse(\"event\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"Amadeus-Winarto"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"Amadeus-Winarto"},"content":"    public void unknownCommandParser() {","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"Amadeus-Winarto"},"content":"        assertThrows(UnknownCommandException.class, () -\u003e parser.parse(\"evet eat breakfast /by 2021-10-01\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"Amadeus-Winarto"},"content":"        assertThrows(UnknownCommandException.class, () -\u003e parser.parse(\"even eat breakfast\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"Amadeus-Winarto"},"content":"        assertThrows(UnknownCommandException.class, () -\u003e parser.parse(\"deadlined\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"Amadeus-Winarto"},"content":"        assertThrows(UnknownCommandException.class, () -\u003e parser.parse(\"tod\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"Amadeus-Winarto"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"Amadeus-Winarto":49}},{"path":"src/test/java/bobcat/executor/parser/StorageParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Amadeus-Winarto"},"content":"package bobcat.executor.parser;","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":3,"author":{"gitId":"Amadeus-Winarto"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"Amadeus-Winarto"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"Amadeus-Winarto"},"content":"import bobcat.model.task.Deadline;","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"Amadeus-Winarto"},"content":"import bobcat.model.task.Event;","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"Amadeus-Winarto"},"content":"import bobcat.model.task.Task;","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"Amadeus-Winarto"},"content":"import bobcat.model.task.ToDo;","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"Amadeus-Winarto"},"content":"public class StorageParserTest {","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"Amadeus-Winarto"},"content":"    private final bobcat.executor.parser.StorageParser parser \u003d new StorageParser();","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"Amadeus-Winarto"},"content":"    @Test","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"Amadeus-Winarto"},"content":"    public void deadlineStorageParser() {","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"Amadeus-Winarto"},"content":"        Task original \u003d new Deadline(\"eat breakfast\", \"2021-01-31\");","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"Amadeus-Winarto"},"content":"        Task afterParse \u003d parser.parse(original.toString());","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"Amadeus-Winarto"},"content":"        assertEquals(original.toString(), afterParse.toString());","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":22,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"Amadeus-Winarto"},"content":"    @Test","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"Amadeus-Winarto"},"content":"    public void todoStorageParser() {","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"Amadeus-Winarto"},"content":"        Task original \u003d new ToDo(\"eat breakfast\");","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"Amadeus-Winarto"},"content":"        Task afterParse \u003d parser.parse(original.toString());","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"Amadeus-Winarto"},"content":"        assertEquals(original.toString(), afterParse.toString());","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"Amadeus-Winarto"},"content":"    @Test","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"Amadeus-Winarto"},"content":"    public void eventStorageParser() {","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"Amadeus-Winarto"},"content":"        Task original \u003d new Event(\"eat breakfast\", \"2021-01-31\");","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"Amadeus-Winarto"},"content":"        Task afterParse \u003d parser.parse(original.toString());","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"Amadeus-Winarto"},"content":"        assertEquals(original.toString(), afterParse.toString());","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"Amadeus-Winarto"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"Amadeus-Winarto"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"Amadeus-Winarto":36}},{"path":"src/test/resource/taskList1.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Amadeus-Winarto"},"content":"[T][ ] eat breakfast","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"Amadeus-Winarto"},"content":"[E][ ] eat breakfast (at: 03 Oct 2020)","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"Amadeus-Winarto"},"content":"[D][ ] eat breakfast (by: 31 Jan 2021)","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"Amadeus-Winarto"},"content":"[T][ ] eat breakfast","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"Amadeus-Winarto"},"content":"[T][ ] eat breakfast","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"Amadeus-Winarto"},"content":"[T][ ] eat breakfast","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"Amadeus-Winarto"},"content":"[T][ ] eat breakfast","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"Amadeus-Winarto"},"content":"[T][ ] eat breakfast","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"Amadeus-Winarto"},"content":"[T][ ] eat breakfast","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"Amadeus-Winarto"},"content":"[T][ ] eat breakfast","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"Amadeus-Winarto"},"content":"[T][ ] eat breakfast","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"Amadeus-Winarto"},"content":"[T][ ] eat breakfast","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"Amadeus-Winarto"},"content":"[T][ ] eat breakfast","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"Amadeus-Winarto"},"content":"[T][ ] eat breakfast","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"Amadeus-Winarto"},"content":"[T][ ] eat breakfast","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"Amadeus-Winarto"},"content":"[T][ ] eat breakfast","lastModifiedDate":"2021-09-01"},{"lineNumber":17,"author":{"gitId":"Amadeus-Winarto"},"content":"[T][ ] eat breakfast","lastModifiedDate":"2021-09-17"}],"authorContributionMap":{"Amadeus-Winarto":17}},{"path":"src/test/resource/taskList2.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Amadeus-Winarto"},"content":"[T][ ] eat breakfast","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"Amadeus-Winarto"},"content":"[E][ ] eat breakfast (at: 03 Oct 2020)","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"Amadeus-Winarto"},"content":"[D][ ] eat breakfast (by: 31 Jan 2021)","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"Amadeus-Winarto"},"content":"[T][ ] eat breakfast","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"Amadeus-Winarto"},"content":"[E][ ] eat breakfast (at: 03 Oct 2020)","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"Amadeus-Winarto"},"content":"[D][ ] eat breakfast (by: 31 Jan 2021)","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"Amadeus-Winarto"},"content":"[T][ ] eat breakfast","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"Amadeus-Winarto"},"content":"[E][ ] eat breakfast (at: 03 Oct 2020)","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"Amadeus-Winarto"},"content":"[D][ ] eat breakfast (by: 31 Jan 2021)","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"Amadeus-Winarto"},"content":"[T][ ] eat breakfast","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"Amadeus-Winarto"},"content":"[E][ ] eat breakfast (at: 03 Oct 2020)","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"Amadeus-Winarto"},"content":"[D][ ] eat breakfast (by: 31 Jan 2021)","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"Amadeus-Winarto"},"content":"[T][ ] eat breakfast","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"Amadeus-Winarto"},"content":"[E][ ] eat breakfast (at: 03 Oct 2020)","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"Amadeus-Winarto"},"content":"[D][ ] eat breakfast (by: 31 Jan 2021)","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"Amadeus-Winarto"},"content":"[T][ ] eat breakfast","lastModifiedDate":"2021-09-17"},{"lineNumber":17,"author":{"gitId":"Amadeus-Winarto"},"content":"[E][ ] eat breakfast (at: 03 Oct 2020)","lastModifiedDate":"2021-09-17"},{"lineNumber":18,"author":{"gitId":"Amadeus-Winarto"},"content":"[D][ ] eat breakfast (by: 31 Jan 2021)","lastModifiedDate":"2021-09-17"}],"authorContributionMap":{"Amadeus-Winarto":18}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Amadeus-Winarto"},"content":"todo borrow book","lastModifiedDate":"2021-08-16"},{"lineNumber":2,"author":{"gitId":"Amadeus-Winarto"},"content":"deadline return book /by 2019-10-15","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"Amadeus-Winarto"},"content":"event project meeting /at 2019-10-15","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"Amadeus-Winarto"},"content":"done 3","lastModifiedDate":"2021-08-16"},{"lineNumber":5,"author":{"gitId":"Amadeus-Winarto"},"content":"done 1","lastModifiedDate":"2021-08-16"},{"lineNumber":6,"author":{"gitId":"Amadeus-Winarto"},"content":"done 2","lastModifiedDate":"2021-08-16"},{"lineNumber":7,"author":{"gitId":"Amadeus-Winarto"},"content":"list","lastModifiedDate":"2021-08-16"},{"lineNumber":8,"author":{"gitId":"Amadeus-Winarto"},"content":"todo bye","lastModifiedDate":"2021-08-16"},{"lineNumber":9,"author":{"gitId":"Amadeus-Winarto"},"content":"todos","lastModifiedDate":"2021-08-16"},{"lineNumber":10,"author":{"gitId":"Amadeus-Winarto"},"content":"deadline","lastModifiedDate":"2021-08-16"},{"lineNumber":11,"author":{"gitId":"Amadeus-Winarto"},"content":"todo","lastModifiedDate":"2021-08-16"},{"lineNumber":12,"author":{"gitId":"Amadeus-Winarto"},"content":"event","lastModifiedDate":"2021-08-16"},{"lineNumber":13,"author":{"gitId":"Amadeus-Winarto"},"content":"bye","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"Amadeus-Winarto":13}},{"path":"text-ui-test/memory/taskList.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Amadeus-Winarto"},"content":"[T][X] borrow book","lastModifiedDate":"2021-09-01"},{"lineNumber":2,"author":{"gitId":"Amadeus-Winarto"},"content":"[D][X] return book (by: 15 Oct 2019)","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"Amadeus-Winarto"},"content":"[E][X] project meeting (at: 15 Oct 2019)","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"Amadeus-Winarto"},"content":"[T][ ] bye","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"Amadeus-Winarto":4}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"Amadeus-Winarto"},"content":"# delete storage from previous run","lastModifiedDate":"2021-08-21"},{"lineNumber":16,"author":{"gitId":"Amadeus-Winarto"},"content":"if [ -e \"./memory\" ]","lastModifiedDate":"2021-08-21"},{"lineNumber":17,"author":{"gitId":"Amadeus-Winarto"},"content":"then","lastModifiedDate":"2021-08-21"},{"lineNumber":18,"author":{"gitId":"Amadeus-Winarto"},"content":"    rm -r ./memory","lastModifiedDate":"2021-08-21"},{"lineNumber":19,"author":{"gitId":"Amadeus-Winarto"},"content":"fi","lastModifiedDate":"2021-08-21"},{"lineNumber":20,"author":{"gitId":"Amadeus-Winarto"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"Amadeus-Winarto"},"content":"if ! javac -cp ../src/main/java/ -Xlint:none -d ../bin ../src/main/java/BobCat/*.java","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"Amadeus-Winarto"},"content":"java -classpath ../bin BobCat \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-08-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Amadeus-Winarto":8,"-":36}}]

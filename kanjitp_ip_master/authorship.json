[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"kanjitp"},"content":"# Welcome to Alice!","lastModifiedDate":"2021-09-02"},{"lineNumber":2,"author":{"gitId":"kanjitp"},"content":"## _The Last Virtual Assistant You will ever need, Ever_","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"kanjitp"},"content":"Alice is a virtual assistant started off as Duke task manager before evolving in to her own form.","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"kanjitp"},"content":"- Choose a save file by typing the save file name in","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"kanjitp"},"content":"- See your current task","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"kanjitp"},"content":"- ✨Start editing✨","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"kanjitp"},"content":"## Features","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":13,"author":{"gitId":"kanjitp"},"content":"- [X] Create local save files location for Alice to remember the task","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"kanjitp"},"content":"- [X] Fetch certain deadlines and other tasks using the yyyy-MM-dd format","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"kanjitp"},"content":"- [X] Fetch certain deadlines and other tasks using \"keywords\"","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"kanjitp"},"content":"- [ ]  GUI (Coming Soon)","lastModifiedDate":"2021-09-02"},{"lineNumber":17,"author":{"gitId":"kanjitp"},"content":"- [ ] Integration with Website (Coming Soon)","lastModifiedDate":"2021-09-02"},{"lineNumber":18,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":19,"author":{"gitId":"kanjitp"},"content":"\u003e Let\u0027s make a slight change to create big difference","lastModifiedDate":"2021-09-02"},{"lineNumber":20,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":21,"author":{"gitId":"kanjitp"},"content":"Alice is aimed to be implmeneted into a website in the future with ","lastModifiedDate":"2021-09-02"},{"lineNumber":22,"author":{"gitId":"kanjitp"},"content":"continuously improving UI, UX, and backend.","lastModifiedDate":"2021-09-02"},{"lineNumber":23,"author":{"gitId":"kanjitp"},"content":"```java","lastModifiedDate":"2021-09-02"},{"lineNumber":24,"author":{"gitId":"kanjitp"},"content":"public class Main {","lastModifiedDate":"2021-09-02"},{"lineNumber":25,"author":{"gitId":"kanjitp"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-09-02"},{"lineNumber":26,"author":{"gitId":"kanjitp"},"content":"        Application.launch(Alice.class, args);","lastModifiedDate":"2021-09-02"},{"lineNumber":27,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":28,"author":{"gitId":"kanjitp"},"content":"}","lastModifiedDate":"2021-09-02"},{"lineNumber":29,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"kanjitp":24,"-":5}},{"path":"src/main/java/Alice.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kanjitp"},"content":"import alice.AliceException;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"kanjitp"},"content":"import dialog.DialogException;","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"kanjitp"},"content":"import dialog.TaskDialog;","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"kanjitp"},"content":"import parser.Parser;","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"kanjitp"},"content":"import storage.Storage;","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"kanjitp"},"content":"import command.Command;","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"kanjitp"},"content":"import ui.Ui;","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"kanjitp"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"kanjitp"},"content":"/**","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"kanjitp"},"content":" * Main class of the chatbot.","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"kanjitp"},"content":" * By running the main method the bot will first ask for the save file and asking if","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"kanjitp"},"content":" * the user want to create a new save file location before proceeding.","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"kanjitp"},"content":" *","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"kanjitp"},"content":" * @author Kan Jitpakdi","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"kanjitp"},"content":" * @author GitHub: kanjitp","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"kanjitp"},"content":" * @version 0.01","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"kanjitp"},"content":" * @since 0.00","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"kanjitp"},"content":" */","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"kanjitp"},"content":"public class Alice {","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"kanjitp"},"content":"    /** storage for Alice */","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"kanjitp"},"content":"    private final Storage storage;","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"kanjitp"},"content":"    /** taskDialog dealing with the task that the bot wants to communicate back to the user */","lastModifiedDate":"2021-08-29"},{"lineNumber":27,"author":{"gitId":"kanjitp"},"content":"    private final TaskDialog taskDialog;","lastModifiedDate":"2021-08-28"},{"lineNumber":28,"author":{"gitId":"kanjitp"},"content":"    /** ui of Alice interacting with the user from inputting command and showing the ui back to the user */","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"kanjitp"},"content":"    private final Ui ui;","lastModifiedDate":"2021-08-28"},{"lineNumber":30,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":31,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"kanjitp"},"content":"     * Constructor of Alice.","lastModifiedDate":"2021-08-29"},{"lineNumber":33,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":34,"author":{"gitId":"kanjitp"},"content":"     * @param fileName the filename without the suffix .txt, .TXT, etc.","lastModifiedDate":"2021-08-29"},{"lineNumber":35,"author":{"gitId":"kanjitp"},"content":"     * @throws DialogException dialog cannot have the same id: same task with the same property (i.e. name, isDone)","lastModifiedDate":"2021-08-29"},{"lineNumber":36,"author":{"gitId":"kanjitp"},"content":"     *                         cannot coexist while the app is running","lastModifiedDate":"2021-08-29"},{"lineNumber":37,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":38,"author":{"gitId":"kanjitp"},"content":"    public Alice(String fileName) throws DialogException {","lastModifiedDate":"2021-08-28"},{"lineNumber":39,"author":{"gitId":"kanjitp"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2021-08-28"},{"lineNumber":40,"author":{"gitId":"kanjitp"},"content":"        storage \u003d new Storage(fileName);","lastModifiedDate":"2021-08-28"},{"lineNumber":41,"author":{"gitId":"kanjitp"},"content":"        // import the task from what the storage manage to load","lastModifiedDate":"2021-08-29"},{"lineNumber":42,"author":{"gitId":"kanjitp"},"content":"        ui.importTaskList(storage.load());","lastModifiedDate":"2021-08-28"},{"lineNumber":43,"author":{"gitId":"kanjitp"},"content":"        // set the current taskDialog of Alice to the one ui fetch from the storage","lastModifiedDate":"2021-08-29"},{"lineNumber":44,"author":{"gitId":"kanjitp"},"content":"        // in future update the taskDialog of Alice could change accordingly in case of reaching to other save file","lastModifiedDate":"2021-08-29"},{"lineNumber":45,"author":{"gitId":"kanjitp"},"content":"        taskDialog \u003d ui.getTaskDialog();","lastModifiedDate":"2021-08-28"},{"lineNumber":46,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":47,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":48,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":49,"author":{"gitId":"kanjitp"},"content":"     * The method for running the personal assistant Alice.","lastModifiedDate":"2021-08-29"},{"lineNumber":50,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":51,"author":{"gitId":"kanjitp"},"content":"     * @throws DialogException dialog cannot have the same id while the app is running","lastModifiedDate":"2021-08-29"},{"lineNumber":52,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":53,"author":{"gitId":"kanjitp"},"content":"    public void run() throws DialogException {","lastModifiedDate":"2021-08-28"},{"lineNumber":54,"author":{"gitId":"kanjitp"},"content":"        ui.showCurrentList();","lastModifiedDate":"2021-08-28"},{"lineNumber":55,"author":{"gitId":"kanjitp"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2021-08-28"},{"lineNumber":56,"author":{"gitId":"kanjitp"},"content":"        while (!isExit) {","lastModifiedDate":"2021-08-28"},{"lineNumber":57,"author":{"gitId":"kanjitp"},"content":"            try {","lastModifiedDate":"2021-08-28"},{"lineNumber":58,"author":{"gitId":"kanjitp"},"content":"                String fullCommand \u003d ui.readCommand();","lastModifiedDate":"2021-08-28"},{"lineNumber":59,"author":{"gitId":"kanjitp"},"content":"                Command c \u003d Parser.parse(fullCommand);","lastModifiedDate":"2021-08-28"},{"lineNumber":60,"author":{"gitId":"kanjitp"},"content":"                c.execute(taskDialog, storage);","lastModifiedDate":"2021-08-28"},{"lineNumber":61,"author":{"gitId":"kanjitp"},"content":"                isExit \u003d c.isExit();","lastModifiedDate":"2021-08-29"},{"lineNumber":62,"author":{"gitId":"kanjitp"},"content":"            } catch (AliceException | IOException e) {","lastModifiedDate":"2021-08-28"},{"lineNumber":63,"author":{"gitId":"kanjitp"},"content":"                Ui.printError(e);","lastModifiedDate":"2021-08-28"},{"lineNumber":64,"author":{"gitId":"kanjitp"},"content":"            }","lastModifiedDate":"2021-08-28"},{"lineNumber":65,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":66,"author":{"gitId":"kanjitp"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":67,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":68,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":69,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":70,"author":{"gitId":"kanjitp"},"content":"     * Main method of Alice.","lastModifiedDate":"2021-08-29"},{"lineNumber":71,"author":{"gitId":"kanjitp"},"content":"     * First show welcome message then ask the user to choose a save file or create a new one.","lastModifiedDate":"2021-08-29"},{"lineNumber":72,"author":{"gitId":"kanjitp"},"content":"     * When the user has chosen the save file location, run Alice application.","lastModifiedDate":"2021-08-29"},{"lineNumber":73,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":74,"author":{"gitId":"kanjitp"},"content":"     * @param args user arguments","lastModifiedDate":"2021-08-29"},{"lineNumber":75,"author":{"gitId":"kanjitp"},"content":"     * @throws DialogException dialog cannot have the same id while the app is running","lastModifiedDate":"2021-08-29"},{"lineNumber":76,"author":{"gitId":"kanjitp"},"content":"     * @throws IOException     if there is any error dealing with the system IO","lastModifiedDate":"2021-08-29"},{"lineNumber":77,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":78,"author":{"gitId":"kanjitp"},"content":"    public static void main(String[] args) throws DialogException, IOException {","lastModifiedDate":"2021-08-28"},{"lineNumber":79,"author":{"gitId":"kanjitp"},"content":"        Ui.showWelcome();","lastModifiedDate":"2021-08-28"},{"lineNumber":80,"author":{"gitId":"kanjitp"},"content":"        boolean isGo;","lastModifiedDate":"2021-08-28"},{"lineNumber":81,"author":{"gitId":"kanjitp"},"content":"        String saveFileName;","lastModifiedDate":"2021-08-28"},{"lineNumber":82,"author":{"gitId":"kanjitp"},"content":"        do {","lastModifiedDate":"2021-08-28"},{"lineNumber":83,"author":{"gitId":"kanjitp"},"content":"            isGo \u003d true;","lastModifiedDate":"2021-08-28"},{"lineNumber":84,"author":{"gitId":"kanjitp"},"content":"            Ui.printSelectSaveFile();","lastModifiedDate":"2021-08-28"},{"lineNumber":85,"author":{"gitId":"kanjitp"},"content":"            saveFileName \u003d Ui.fastRead();","lastModifiedDate":"2021-08-28"},{"lineNumber":86,"author":{"gitId":"kanjitp"},"content":"            if (!Storage.contains(saveFileName)) {","lastModifiedDate":"2021-08-28"},{"lineNumber":87,"author":{"gitId":"kanjitp"},"content":"                Ui.showConfirmCreateNewFile(saveFileName);","lastModifiedDate":"2021-08-28"},{"lineNumber":88,"author":{"gitId":"kanjitp"},"content":"                isGo \u003d Parser.yesNoToBoolean(Ui.fastRead());","lastModifiedDate":"2021-08-28"},{"lineNumber":89,"author":{"gitId":"kanjitp"},"content":"            }","lastModifiedDate":"2021-08-28"},{"lineNumber":90,"author":{"gitId":"kanjitp"},"content":"        } while (!isGo);","lastModifiedDate":"2021-08-28"},{"lineNumber":91,"author":{"gitId":"kanjitp"},"content":"        new Alice(saveFileName).run();","lastModifiedDate":"2021-08-28"},{"lineNumber":92,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":93,"author":{"gitId":"kanjitp"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"kanjitp":93}},{"path":"src/main/java/alice/AliceException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kanjitp"},"content":"package alice;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"kanjitp"},"content":"/**","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"kanjitp"},"content":" * Exception to do with Alice to be thrown when the user interact incorrectly","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"kanjitp"},"content":" * with the personal assistant","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"kanjitp"},"content":" */","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"kanjitp"},"content":"public class AliceException extends RuntimeException {","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"kanjitp"},"content":"     * Default constructor of AliceException","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"kanjitp"},"content":"     * @param errorMessage message to be stored in the AliceException","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"kanjitp"},"content":"    public AliceException(String errorMessage) {","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"kanjitp"},"content":"        super(errorMessage);","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"kanjitp"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"kanjitp":16}},{"path":"src/main/java/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kanjitp"},"content":"package command;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"kanjitp"},"content":"import alice.AliceException;","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"kanjitp"},"content":"import dialog.DialogException;","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"kanjitp"},"content":"import dialog.TaskDialog;","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"kanjitp"},"content":"import parser.Parser;","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"kanjitp"},"content":"import storage.Storage;","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"kanjitp"},"content":"import task.Deadline;","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"kanjitp"},"content":"import task.Event;","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"kanjitp"},"content":"import task.Todo;","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"kanjitp"},"content":"import ui.Ui;","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"kanjitp"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"kanjitp"},"content":"/**","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"kanjitp"},"content":" * Command class responsible for executing different command","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"kanjitp"},"content":" *","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"kanjitp"},"content":" * @author Kan Jitpakdi","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"kanjitp"},"content":" * @author GitHub: kanjitp","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"kanjitp"},"content":" * @version 0.01","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"kanjitp"},"content":" * @since 0.00","lastModifiedDate":"2021-08-29"},{"lineNumber":27,"author":{"gitId":"kanjitp"},"content":" */","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"kanjitp"},"content":"public class Command {","lastModifiedDate":"2021-08-28"},{"lineNumber":29,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"kanjitp"},"content":"     * Different type of Command available","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"kanjitp"},"content":"    public enum CommandType {","lastModifiedDate":"2021-08-28"},{"lineNumber":33,"author":{"gitId":"kanjitp"},"content":"        TODO, DEADLINE, EVENT, LIST, DATE, FIND, DONE, DELETE, COMMANDS, BYE","lastModifiedDate":"2021-08-29"},{"lineNumber":34,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":35,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":36,"author":{"gitId":"kanjitp"},"content":"    private String fullCommand;","lastModifiedDate":"2021-08-29"},{"lineNumber":37,"author":{"gitId":"kanjitp"},"content":"    private CommandType commandType;","lastModifiedDate":"2021-08-29"},{"lineNumber":38,"author":{"gitId":"kanjitp"},"content":"    private boolean isExit;","lastModifiedDate":"2021-08-29"},{"lineNumber":39,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":40,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":41,"author":{"gitId":"kanjitp"},"content":"     * Default constructor for Command.","lastModifiedDate":"2021-08-29"},{"lineNumber":42,"author":{"gitId":"kanjitp"},"content":"     * Create a Command object from given full Command","lastModifiedDate":"2021-08-29"},{"lineNumber":43,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":44,"author":{"gitId":"kanjitp"},"content":"     * @param fullCommand command with its arguments and tagger","lastModifiedDate":"2021-08-29"},{"lineNumber":45,"author":{"gitId":"kanjitp"},"content":"     * @throws AliceException invalid argument for command","lastModifiedDate":"2021-08-29"},{"lineNumber":46,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":47,"author":{"gitId":"kanjitp"},"content":"    public Command(String fullCommand) throws AliceException {","lastModifiedDate":"2021-08-28"},{"lineNumber":48,"author":{"gitId":"kanjitp"},"content":"        this.fullCommand \u003d fullCommand;","lastModifiedDate":"2021-08-28"},{"lineNumber":49,"author":{"gitId":"kanjitp"},"content":"        commandType \u003d Parser.stringToCommand(fullCommand.split(\" \")[0]);","lastModifiedDate":"2021-08-28"},{"lineNumber":50,"author":{"gitId":"kanjitp"},"content":"        isExit \u003d commandType \u003d\u003d CommandType.BYE;","lastModifiedDate":"2021-08-28"},{"lineNumber":51,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":52,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":53,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":54,"author":{"gitId":"kanjitp"},"content":"     * Return whether the command given is of type Bye","lastModifiedDate":"2021-08-29"},{"lineNumber":55,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":56,"author":{"gitId":"kanjitp"},"content":"     * @return if the command is bye or not","lastModifiedDate":"2021-08-29"},{"lineNumber":57,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":58,"author":{"gitId":"kanjitp"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-29"},{"lineNumber":59,"author":{"gitId":"kanjitp"},"content":"        return this.isExit;","lastModifiedDate":"2021-08-29"},{"lineNumber":60,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":61,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":62,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":63,"author":{"gitId":"kanjitp"},"content":"     * Execute the command according to its type","lastModifiedDate":"2021-08-29"},{"lineNumber":64,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":65,"author":{"gitId":"kanjitp"},"content":"     * @param taskDialog taskDialog for the command to interact with","lastModifiedDate":"2021-08-29"},{"lineNumber":66,"author":{"gitId":"kanjitp"},"content":"     * @param storage    the storage for the command to interact with","lastModifiedDate":"2021-08-29"},{"lineNumber":67,"author":{"gitId":"kanjitp"},"content":"     * @throws DialogException dialog cannot have the same id while the app is running","lastModifiedDate":"2021-08-29"},{"lineNumber":68,"author":{"gitId":"kanjitp"},"content":"     * @throws IOException     if there is any error dealing with the system IO","lastModifiedDate":"2021-08-29"},{"lineNumber":69,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":70,"author":{"gitId":"kanjitp"},"content":"    public void execute(TaskDialog taskDialog, Storage storage) throws DialogException, IOException {","lastModifiedDate":"2021-08-28"},{"lineNumber":71,"author":{"gitId":"kanjitp"},"content":"        switch (commandType) {","lastModifiedDate":"2021-08-28"},{"lineNumber":72,"author":{"gitId":"kanjitp"},"content":"        case LIST:","lastModifiedDate":"2021-08-28"},{"lineNumber":73,"author":{"gitId":"kanjitp"},"content":"            System.out.println(taskDialog);","lastModifiedDate":"2021-08-28"},{"lineNumber":74,"author":{"gitId":"kanjitp"},"content":"            break;","lastModifiedDate":"2021-08-28"},{"lineNumber":75,"author":{"gitId":"kanjitp"},"content":"        case DATE:","lastModifiedDate":"2021-08-28"},{"lineNumber":76,"author":{"gitId":"kanjitp"},"content":"            try {","lastModifiedDate":"2021-08-28"},{"lineNumber":77,"author":{"gitId":"kanjitp"},"content":"                if (fullCommand.split(\" \").length \u003d\u003d 1) {","lastModifiedDate":"2021-08-28"},{"lineNumber":78,"author":{"gitId":"kanjitp"},"content":"                    throw new EmptyDescriptionException(\"The date of deadline cannot be empty.\");","lastModifiedDate":"2021-08-28"},{"lineNumber":79,"author":{"gitId":"kanjitp"},"content":"                }","lastModifiedDate":"2021-08-28"},{"lineNumber":80,"author":{"gitId":"kanjitp"},"content":"                String dlString \u003d fullCommand.substring((\"date \").length());","lastModifiedDate":"2021-08-28"},{"lineNumber":81,"author":{"gitId":"kanjitp"},"content":"                System.out.println(taskDialog.by(dlString));","lastModifiedDate":"2021-08-28"},{"lineNumber":82,"author":{"gitId":"kanjitp"},"content":"            } catch (EmptyDescriptionException | EmptyTaggerException | InvalidTimeFormatException e) {","lastModifiedDate":"2021-08-28"},{"lineNumber":83,"author":{"gitId":"kanjitp"},"content":"                Ui.printError(e);","lastModifiedDate":"2021-08-28"},{"lineNumber":84,"author":{"gitId":"kanjitp"},"content":"            }","lastModifiedDate":"2021-08-28"},{"lineNumber":85,"author":{"gitId":"kanjitp"},"content":"            break;","lastModifiedDate":"2021-08-28"},{"lineNumber":86,"author":{"gitId":"kanjitp"},"content":"        case FIND:","lastModifiedDate":"2021-08-29"},{"lineNumber":87,"author":{"gitId":"kanjitp"},"content":"            try {","lastModifiedDate":"2021-08-29"},{"lineNumber":88,"author":{"gitId":"kanjitp"},"content":"                if (fullCommand.split(\" \").length \u003d\u003d 1) {","lastModifiedDate":"2021-08-29"},{"lineNumber":89,"author":{"gitId":"kanjitp"},"content":"                    throw new EmptyDescriptionException(\"The keyword of find cannot be empty. Try using command \" +","lastModifiedDate":"2021-08-29"},{"lineNumber":90,"author":{"gitId":"kanjitp"},"content":"                            \"\u0027list\u0027 if you want to see the full list\");","lastModifiedDate":"2021-08-29"},{"lineNumber":91,"author":{"gitId":"kanjitp"},"content":"                }","lastModifiedDate":"2021-08-29"},{"lineNumber":92,"author":{"gitId":"kanjitp"},"content":"                String kwString \u003d fullCommand.substring((\"find \").length());","lastModifiedDate":"2021-08-29"},{"lineNumber":93,"author":{"gitId":"kanjitp"},"content":"                System.out.println(taskDialog.with(kwString));","lastModifiedDate":"2021-08-29"},{"lineNumber":94,"author":{"gitId":"kanjitp"},"content":"            } catch (EmptyDescriptionException | EmptyTaggerException | InvalidTimeFormatException e) {","lastModifiedDate":"2021-08-29"},{"lineNumber":95,"author":{"gitId":"kanjitp"},"content":"                Ui.printError(e);","lastModifiedDate":"2021-08-29"},{"lineNumber":96,"author":{"gitId":"kanjitp"},"content":"            }","lastModifiedDate":"2021-08-29"},{"lineNumber":97,"author":{"gitId":"kanjitp"},"content":"            break;","lastModifiedDate":"2021-08-29"},{"lineNumber":98,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":99,"author":{"gitId":"kanjitp"},"content":"        case TODO: {","lastModifiedDate":"2021-08-28"},{"lineNumber":100,"author":{"gitId":"kanjitp"},"content":"            try {","lastModifiedDate":"2021-08-28"},{"lineNumber":101,"author":{"gitId":"kanjitp"},"content":"                if (fullCommand.split(\" \").length \u003d\u003d 1) {","lastModifiedDate":"2021-08-28"},{"lineNumber":102,"author":{"gitId":"kanjitp"},"content":"                    throw new EmptyDescriptionException(\"The description of a todo cannot be empty.\");","lastModifiedDate":"2021-08-28"},{"lineNumber":103,"author":{"gitId":"kanjitp"},"content":"                }","lastModifiedDate":"2021-08-28"},{"lineNumber":104,"author":{"gitId":"kanjitp"},"content":"                taskDialog.addTask(new Todo(fullCommand.substring((\"todo \").length())));","lastModifiedDate":"2021-08-28"},{"lineNumber":105,"author":{"gitId":"kanjitp"},"content":"            } catch (DialogException | EmptyDescriptionException e) {","lastModifiedDate":"2021-08-28"},{"lineNumber":106,"author":{"gitId":"kanjitp"},"content":"                Ui.printError(e);","lastModifiedDate":"2021-08-28"},{"lineNumber":107,"author":{"gitId":"kanjitp"},"content":"            }","lastModifiedDate":"2021-08-28"},{"lineNumber":108,"author":{"gitId":"kanjitp"},"content":"            break;","lastModifiedDate":"2021-08-28"},{"lineNumber":109,"author":{"gitId":"kanjitp"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":110,"author":{"gitId":"kanjitp"},"content":"        case DEADLINE: {","lastModifiedDate":"2021-08-28"},{"lineNumber":111,"author":{"gitId":"kanjitp"},"content":"            try {","lastModifiedDate":"2021-08-28"},{"lineNumber":112,"author":{"gitId":"kanjitp"},"content":"                if (fullCommand.split(\" \").length \u003d\u003d 1) {","lastModifiedDate":"2021-08-28"},{"lineNumber":113,"author":{"gitId":"kanjitp"},"content":"                    throw new EmptyDescriptionException(\"The description of a deadline cannot be empty.\");","lastModifiedDate":"2021-08-28"},{"lineNumber":114,"author":{"gitId":"kanjitp"},"content":"                } else if (!fullCommand.contains(\"/by\")) {","lastModifiedDate":"2021-08-28"},{"lineNumber":115,"author":{"gitId":"kanjitp"},"content":"                    throw new EmptyTaggerException(\"No /by tagger found.\");","lastModifiedDate":"2021-08-28"},{"lineNumber":116,"author":{"gitId":"kanjitp"},"content":"                }","lastModifiedDate":"2021-08-28"},{"lineNumber":117,"author":{"gitId":"kanjitp"},"content":"                String dDescription \u003d fullCommand.substring((\"deadline \").length(), fullCommand.indexOf(\"/\"));","lastModifiedDate":"2021-08-28"},{"lineNumber":118,"author":{"gitId":"kanjitp"},"content":"                String by \u003d fullCommand.substring(fullCommand.indexOf(\"/by \") + \"/by \".length());","lastModifiedDate":"2021-08-28"},{"lineNumber":119,"author":{"gitId":"kanjitp"},"content":"                taskDialog.addTask(new Deadline(dDescription, by));","lastModifiedDate":"2021-08-28"},{"lineNumber":120,"author":{"gitId":"kanjitp"},"content":"            } catch (DialogException | EmptyDescriptionException","lastModifiedDate":"2021-08-29"},{"lineNumber":121,"author":{"gitId":"kanjitp"},"content":"                    | EmptyTaggerException | InvalidTimeFormatException e) {","lastModifiedDate":"2021-08-29"},{"lineNumber":122,"author":{"gitId":"kanjitp"},"content":"                Ui.printError(e);","lastModifiedDate":"2021-08-28"},{"lineNumber":123,"author":{"gitId":"kanjitp"},"content":"            }","lastModifiedDate":"2021-08-28"},{"lineNumber":124,"author":{"gitId":"kanjitp"},"content":"            break;","lastModifiedDate":"2021-08-28"},{"lineNumber":125,"author":{"gitId":"kanjitp"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":126,"author":{"gitId":"kanjitp"},"content":"        case EVENT: {","lastModifiedDate":"2021-08-28"},{"lineNumber":127,"author":{"gitId":"kanjitp"},"content":"            try {","lastModifiedDate":"2021-08-28"},{"lineNumber":128,"author":{"gitId":"kanjitp"},"content":"                if (fullCommand.split(\" \").length \u003d\u003d 1) {","lastModifiedDate":"2021-08-28"},{"lineNumber":129,"author":{"gitId":"kanjitp"},"content":"                    throw new EmptyDescriptionException(\"The description of an event cannot be empty.\");","lastModifiedDate":"2021-08-28"},{"lineNumber":130,"author":{"gitId":"kanjitp"},"content":"                } else if (!fullCommand.contains(\"/at\")) {","lastModifiedDate":"2021-08-28"},{"lineNumber":131,"author":{"gitId":"kanjitp"},"content":"                    throw new EmptyTaggerException(\"No /at tagger found.\");","lastModifiedDate":"2021-08-28"},{"lineNumber":132,"author":{"gitId":"kanjitp"},"content":"                }","lastModifiedDate":"2021-08-28"},{"lineNumber":133,"author":{"gitId":"kanjitp"},"content":"                String eDescription \u003d fullCommand.substring((\"event \").length(), fullCommand.indexOf(\"/\"));","lastModifiedDate":"2021-08-28"},{"lineNumber":134,"author":{"gitId":"kanjitp"},"content":"                String at \u003d fullCommand.substring(fullCommand.indexOf(\"/at \") + \"/at \".length());","lastModifiedDate":"2021-08-28"},{"lineNumber":135,"author":{"gitId":"kanjitp"},"content":"                taskDialog.addTask(new Event(eDescription, at));","lastModifiedDate":"2021-08-28"},{"lineNumber":136,"author":{"gitId":"kanjitp"},"content":"            } catch (DialogException | EmptyDescriptionException","lastModifiedDate":"2021-08-29"},{"lineNumber":137,"author":{"gitId":"kanjitp"},"content":"                    | EmptyTaggerException | InvalidTimeFormatException e) {","lastModifiedDate":"2021-08-29"},{"lineNumber":138,"author":{"gitId":"kanjitp"},"content":"                Ui.printError(e);","lastModifiedDate":"2021-08-28"},{"lineNumber":139,"author":{"gitId":"kanjitp"},"content":"            }","lastModifiedDate":"2021-08-28"},{"lineNumber":140,"author":{"gitId":"kanjitp"},"content":"            break;","lastModifiedDate":"2021-08-28"},{"lineNumber":141,"author":{"gitId":"kanjitp"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":142,"author":{"gitId":"kanjitp"},"content":"        case DONE: {","lastModifiedDate":"2021-08-28"},{"lineNumber":143,"author":{"gitId":"kanjitp"},"content":"            try {","lastModifiedDate":"2021-08-28"},{"lineNumber":144,"author":{"gitId":"kanjitp"},"content":"                if (fullCommand.split(\" \").length \u003d\u003d 1) {","lastModifiedDate":"2021-08-28"},{"lineNumber":145,"author":{"gitId":"kanjitp"},"content":"                    throw new EmptyIndexException(\"The index of done cannot be empty.\");","lastModifiedDate":"2021-08-28"},{"lineNumber":146,"author":{"gitId":"kanjitp"},"content":"                } else if (Integer.parseInt(fullCommand.split(\" \")[1]) \u003c\u003d 0 ||","lastModifiedDate":"2021-08-29"},{"lineNumber":147,"author":{"gitId":"kanjitp"},"content":"                        Integer.parseInt(fullCommand.split(\" \")[1]) \u003e taskDialog.getTaskList().length()) {","lastModifiedDate":"2021-08-29"},{"lineNumber":148,"author":{"gitId":"kanjitp"},"content":"                    if (taskDialog.getTaskList().length() \u003d\u003d 0) {","lastModifiedDate":"2021-08-28"},{"lineNumber":149,"author":{"gitId":"kanjitp"},"content":"                        throw new InvalidIndexException(\"Looks like your list is currently empty.\");","lastModifiedDate":"2021-08-28"},{"lineNumber":150,"author":{"gitId":"kanjitp"},"content":"                    } else {","lastModifiedDate":"2021-08-28"},{"lineNumber":151,"author":{"gitId":"kanjitp"},"content":"                        throw new InvalidIndexException(\"Your list index can only be from 1 to \"","lastModifiedDate":"2021-08-29"},{"lineNumber":152,"author":{"gitId":"kanjitp"},"content":"                                + taskDialog.getTaskList().length() + \".\");","lastModifiedDate":"2021-08-29"},{"lineNumber":153,"author":{"gitId":"kanjitp"},"content":"                    }","lastModifiedDate":"2021-08-28"},{"lineNumber":154,"author":{"gitId":"kanjitp"},"content":"                } else if (fullCommand.split(\" \").length \u003e 2) {","lastModifiedDate":"2021-08-28"},{"lineNumber":155,"author":{"gitId":"kanjitp"},"content":"                    throw new InvalidArgumentException(\"The number of arguments seems to exceed for command done.\");","lastModifiedDate":"2021-08-28"},{"lineNumber":156,"author":{"gitId":"kanjitp"},"content":"                }","lastModifiedDate":"2021-08-28"},{"lineNumber":157,"author":{"gitId":"kanjitp"},"content":"                taskDialog.markTaskAsDone(Integer.parseInt(fullCommand.substring((\"done \").length())) - 1);","lastModifiedDate":"2021-08-28"},{"lineNumber":158,"author":{"gitId":"kanjitp"},"content":"            } catch (EmptyIndexException | InvalidArgumentException | InvalidIndexException e) {","lastModifiedDate":"2021-08-28"},{"lineNumber":159,"author":{"gitId":"kanjitp"},"content":"                Ui.printError(e);","lastModifiedDate":"2021-08-28"},{"lineNumber":160,"author":{"gitId":"kanjitp"},"content":"            }","lastModifiedDate":"2021-08-28"},{"lineNumber":161,"author":{"gitId":"kanjitp"},"content":"            break;","lastModifiedDate":"2021-08-28"},{"lineNumber":162,"author":{"gitId":"kanjitp"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":163,"author":{"gitId":"kanjitp"},"content":"        case DELETE: {","lastModifiedDate":"2021-08-28"},{"lineNumber":164,"author":{"gitId":"kanjitp"},"content":"            try {","lastModifiedDate":"2021-08-28"},{"lineNumber":165,"author":{"gitId":"kanjitp"},"content":"                if (fullCommand.split(\" \").length \u003d\u003d 1) {","lastModifiedDate":"2021-08-28"},{"lineNumber":166,"author":{"gitId":"kanjitp"},"content":"                    throw new EmptyIndexException(\"The index of delete cannot be empty.\");","lastModifiedDate":"2021-08-28"},{"lineNumber":167,"author":{"gitId":"kanjitp"},"content":"                } else if (Integer.parseInt(fullCommand.split(\" \")[1]) \u003c\u003d 0","lastModifiedDate":"2021-08-29"},{"lineNumber":168,"author":{"gitId":"kanjitp"},"content":"                        || Integer.parseInt(fullCommand.split(\" \")[1]) \u003e taskDialog.getTaskList().length()) {","lastModifiedDate":"2021-08-29"},{"lineNumber":169,"author":{"gitId":"kanjitp"},"content":"                    if (taskDialog.getTaskList().length() \u003d\u003d 0) {","lastModifiedDate":"2021-08-28"},{"lineNumber":170,"author":{"gitId":"kanjitp"},"content":"                        throw new InvalidIndexException(\"Looks like your list is currently empty.\");","lastModifiedDate":"2021-08-28"},{"lineNumber":171,"author":{"gitId":"kanjitp"},"content":"                    } else {","lastModifiedDate":"2021-08-28"},{"lineNumber":172,"author":{"gitId":"kanjitp"},"content":"                        throw new InvalidIndexException(\"Your list index can only be from 1 to \"","lastModifiedDate":"2021-08-29"},{"lineNumber":173,"author":{"gitId":"kanjitp"},"content":"                                + taskDialog.getTaskList().length() + \".\");","lastModifiedDate":"2021-08-29"},{"lineNumber":174,"author":{"gitId":"kanjitp"},"content":"                    }","lastModifiedDate":"2021-08-28"},{"lineNumber":175,"author":{"gitId":"kanjitp"},"content":"                } else if (fullCommand.split(\" \").length \u003e 2) {","lastModifiedDate":"2021-08-28"},{"lineNumber":176,"author":{"gitId":"kanjitp"},"content":"                    throw new InvalidArgumentException(\"The number of arguments seems to exceed for command delete.\");","lastModifiedDate":"2021-08-28"},{"lineNumber":177,"author":{"gitId":"kanjitp"},"content":"                }","lastModifiedDate":"2021-08-28"},{"lineNumber":178,"author":{"gitId":"kanjitp"},"content":"                taskDialog.deleteTaskByIndex(Integer.parseInt(fullCommand.substring((\"delete \").length())) - 1);","lastModifiedDate":"2021-08-28"},{"lineNumber":179,"author":{"gitId":"kanjitp"},"content":"            } catch (EmptyIndexException | InvalidArgumentException | InvalidIndexException e) {","lastModifiedDate":"2021-08-28"},{"lineNumber":180,"author":{"gitId":"kanjitp"},"content":"                Ui.printError(e);","lastModifiedDate":"2021-08-28"},{"lineNumber":181,"author":{"gitId":"kanjitp"},"content":"            }","lastModifiedDate":"2021-08-28"},{"lineNumber":182,"author":{"gitId":"kanjitp"},"content":"            break;","lastModifiedDate":"2021-08-28"},{"lineNumber":183,"author":{"gitId":"kanjitp"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":184,"author":{"gitId":"kanjitp"},"content":"        case COMMANDS:","lastModifiedDate":"2021-08-28"},{"lineNumber":185,"author":{"gitId":"kanjitp"},"content":"            Ui.showCommandList();","lastModifiedDate":"2021-08-28"},{"lineNumber":186,"author":{"gitId":"kanjitp"},"content":"            break;","lastModifiedDate":"2021-08-28"},{"lineNumber":187,"author":{"gitId":"kanjitp"},"content":"        case BYE:","lastModifiedDate":"2021-08-28"},{"lineNumber":188,"author":{"gitId":"kanjitp"},"content":"            storage.save(taskDialog.getTaskList());","lastModifiedDate":"2021-08-28"},{"lineNumber":189,"author":{"gitId":"kanjitp"},"content":"            Ui.showGoodBye();","lastModifiedDate":"2021-08-28"},{"lineNumber":190,"author":{"gitId":"kanjitp"},"content":"        default:","lastModifiedDate":"2021-08-28"},{"lineNumber":191,"author":{"gitId":"kanjitp"},"content":"            // UNREACHABLE: already checked via StringToCommand","lastModifiedDate":"2021-08-28"},{"lineNumber":192,"author":{"gitId":"kanjitp"},"content":"            break;","lastModifiedDate":"2021-08-28"},{"lineNumber":193,"author":{"gitId":"kanjitp"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":194,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":195,"author":{"gitId":"kanjitp"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"kanjitp":195}},{"path":"src/main/java/command/EmptyDescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kanjitp"},"content":"package command;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"kanjitp"},"content":"/**","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"kanjitp"},"content":" * Exception to do with Command to be thrown when the user does not input","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"kanjitp"},"content":" * a description when trying to create a task","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"kanjitp"},"content":" */","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"kanjitp"},"content":"public class EmptyDescriptionException extends RuntimeException {","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"kanjitp"},"content":"     * Default constructor of EmptyDescriptionException","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"kanjitp"},"content":"     * @param errorMessage message to be stored in the EmptyDescriptionException","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"kanjitp"},"content":"    public EmptyDescriptionException(String errorMessage) {","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"kanjitp"},"content":"        super(errorMessage);","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"kanjitp"},"content":"}","lastModifiedDate":"2021-08-19"},{"lineNumber":17,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"kanjitp":17}},{"path":"src/main/java/command/EmptyIndexException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kanjitp"},"content":"package command;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"kanjitp"},"content":"/**","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"kanjitp"},"content":" * Exception to do with Command to be thrown when the user does not input","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"kanjitp"},"content":" * an index given the specified command","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"kanjitp"},"content":" */","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"kanjitp"},"content":"public class EmptyIndexException extends RuntimeException {","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"kanjitp"},"content":"     * Default constructor of EmptyIndexException","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"kanjitp"},"content":"     * @param errorMessage message to be stored in the EmptyIndexException","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"kanjitp"},"content":"    public EmptyIndexException(String errorMessage) {","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"kanjitp"},"content":"        super(errorMessage);","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"kanjitp"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"kanjitp":16}},{"path":"src/main/java/command/EmptyTaggerException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kanjitp"},"content":"package command;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"kanjitp"},"content":"/**","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"kanjitp"},"content":" * Exception to do with Command to be thrown when the user does not input","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"kanjitp"},"content":" * a tagger given the specified command","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"kanjitp"},"content":" */","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"kanjitp"},"content":"public class EmptyTaggerException extends RuntimeException {","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"kanjitp"},"content":"     * Default constructor of EmptyTaggerException","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"kanjitp"},"content":"     * @param errorMessage message to be stored in the EmptyTaggerException","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"kanjitp"},"content":"    public EmptyTaggerException(String errorMessage) {","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"kanjitp"},"content":"        super(errorMessage);","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"kanjitp"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"kanjitp":16}},{"path":"src/main/java/command/InvalidArgumentException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kanjitp"},"content":"package command;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"kanjitp"},"content":"/**","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"kanjitp"},"content":" * Exception to do with Command to be thrown when the user input invalid argument","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"kanjitp"},"content":" * for the command input by the user","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"kanjitp"},"content":" */","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"kanjitp"},"content":"public class InvalidArgumentException extends RuntimeException {","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"kanjitp"},"content":"     * Default constructor of InvalidArgumentException","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"kanjitp"},"content":"     * @param errorMessage message to be stored in the InvalidArgumentException","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"kanjitp"},"content":"    public InvalidArgumentException(String errorMessage) {","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"kanjitp"},"content":"        super(errorMessage);","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"kanjitp"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"kanjitp":16}},{"path":"src/main/java/command/InvalidIndexException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kanjitp"},"content":"package command;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"kanjitp"},"content":"/**","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"kanjitp"},"content":" * Exception to do with Command to be thrown when the user","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"kanjitp"},"content":" * specify invalid index from 1 to length of TaskList","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"kanjitp"},"content":" */","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"kanjitp"},"content":"public class InvalidIndexException extends RuntimeException {","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"kanjitp"},"content":"     * Default constructor of InvalidIndexException","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"kanjitp"},"content":"     * @param errorMessage message to be stored in the InvalidIndexException","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"kanjitp"},"content":"    public InvalidIndexException(String errorMessage) {","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"kanjitp"},"content":"        super(errorMessage);","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"kanjitp"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"kanjitp":16}},{"path":"src/main/java/command/InvalidTimeFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kanjitp"},"content":"package command;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"kanjitp"},"content":"/**","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"kanjitp"},"content":" * Exception to do with Command to be thrown when the user input invalid time","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"kanjitp"},"content":" * format as a command","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"kanjitp"},"content":" */","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"kanjitp"},"content":"public class InvalidTimeFormatException extends RuntimeException {","lastModifiedDate":"2021-08-27"},{"lineNumber":8,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"kanjitp"},"content":"     * Default constructor of InvalidTimeException","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"kanjitp"},"content":"     * @param errorMessage message to be stored in the InvalidTimeException","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"kanjitp"},"content":"    public InvalidTimeFormatException(String errorMessage) {","lastModifiedDate":"2021-08-27"},{"lineNumber":14,"author":{"gitId":"kanjitp"},"content":"        super(errorMessage);","lastModifiedDate":"2021-08-27"},{"lineNumber":15,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":16,"author":{"gitId":"kanjitp"},"content":"}","lastModifiedDate":"2021-08-27"}],"authorContributionMap":{"kanjitp":16}},{"path":"src/main/java/dialog/Dialog.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kanjitp"},"content":"package dialog;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"kanjitp"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"kanjitp"},"content":"import java.util.HashMap;","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"kanjitp"},"content":"/**","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"kanjitp"},"content":" * Dialog class deal with printing feedback to the user.","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"kanjitp"},"content":" * Dialog stores sentences into an ArrayList before printing them in separate line","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"kanjitp"},"content":" *","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"kanjitp"},"content":" * @author Kan Jitpakdi","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"kanjitp"},"content":" * @author GitHub: kanjitp","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"kanjitp"},"content":" * @version 0.01","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"kanjitp"},"content":" * @since 0.00","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"kanjitp"},"content":" */","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"kanjitp"},"content":"public class Dialog {","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"kanjitp"},"content":"    /** archive to be shared with its subclasses */","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"kanjitp"},"content":"    protected static HashMap\u003cString, Dialog\u003e archive \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"kanjitp"},"content":"    /** sentences stored in the dialog */","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"kanjitp"},"content":"    protected final ArrayList\u003cString\u003e sentences;","lastModifiedDate":"2021-08-19"},{"lineNumber":22,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":23,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"kanjitp"},"content":"     * Protected Constructor of the Dialog","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"kanjitp"},"content":"     * @param sentences sentences to be stored in the dialog","lastModifiedDate":"2021-08-29"},{"lineNumber":27,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"kanjitp"},"content":"    protected Dialog(ArrayList\u003cString\u003e sentences) {","lastModifiedDate":"2021-08-19"},{"lineNumber":29,"author":{"gitId":"kanjitp"},"content":"        this.sentences \u003d sentences;","lastModifiedDate":"2021-08-19"},{"lineNumber":30,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":32,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":33,"author":{"gitId":"kanjitp"},"content":"     * Add sentence to current dialog","lastModifiedDate":"2021-08-29"},{"lineNumber":34,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":35,"author":{"gitId":"kanjitp"},"content":"     * @param sentence sentence not to be too long","lastModifiedDate":"2021-08-29"},{"lineNumber":36,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":37,"author":{"gitId":"kanjitp"},"content":"    public void add(String sentence) {","lastModifiedDate":"2021-08-19"},{"lineNumber":38,"author":{"gitId":"kanjitp"},"content":"        this.sentences.add(sentence);","lastModifiedDate":"2021-08-19"},{"lineNumber":39,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":40,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":41,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":42,"author":{"gitId":"kanjitp"},"content":"     * Return number of sentences stored in the Dialog","lastModifiedDate":"2021-08-29"},{"lineNumber":43,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":44,"author":{"gitId":"kanjitp"},"content":"     * @return the length of ArrayList sentences","lastModifiedDate":"2021-08-29"},{"lineNumber":45,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":46,"author":{"gitId":"kanjitp"},"content":"    public int length() {","lastModifiedDate":"2021-08-19"},{"lineNumber":47,"author":{"gitId":"kanjitp"},"content":"        return sentences.size();","lastModifiedDate":"2021-08-19"},{"lineNumber":48,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":49,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":50,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":51,"author":{"gitId":"kanjitp"},"content":"     * Generate dialog of specified Id.","lastModifiedDate":"2021-08-29"},{"lineNumber":52,"author":{"gitId":"kanjitp"},"content":"     * Dialog is not to have the same Id to avoid duplication","lastModifiedDate":"2021-08-29"},{"lineNumber":53,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":54,"author":{"gitId":"kanjitp"},"content":"     * @param id the id of the dialog","lastModifiedDate":"2021-08-29"},{"lineNumber":55,"author":{"gitId":"kanjitp"},"content":"     * @return the dialog of specified id","lastModifiedDate":"2021-08-29"},{"lineNumber":56,"author":{"gitId":"kanjitp"},"content":"     * @throws DialogException dialog cannot have the same id while the app is running","lastModifiedDate":"2021-08-29"},{"lineNumber":57,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":58,"author":{"gitId":"kanjitp"},"content":"    public static Dialog generate(String id) throws DialogException {","lastModifiedDate":"2021-08-19"},{"lineNumber":59,"author":{"gitId":"kanjitp"},"content":"        if (archive.containsKey(id)) {","lastModifiedDate":"2021-08-19"},{"lineNumber":60,"author":{"gitId":"kanjitp"},"content":"            throw new DialogException(id + \" already exists\");","lastModifiedDate":"2021-08-19"},{"lineNumber":61,"author":{"gitId":"kanjitp"},"content":"        } else {","lastModifiedDate":"2021-08-19"},{"lineNumber":62,"author":{"gitId":"kanjitp"},"content":"            final Dialog newDialog \u003d new Dialog(new ArrayList\u003c\u003e());","lastModifiedDate":"2021-08-19"},{"lineNumber":63,"author":{"gitId":"kanjitp"},"content":"            archive.put(id, newDialog);","lastModifiedDate":"2021-08-19"},{"lineNumber":64,"author":{"gitId":"kanjitp"},"content":"            return newDialog;","lastModifiedDate":"2021-08-19"},{"lineNumber":65,"author":{"gitId":"kanjitp"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":66,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":67,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":68,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":69,"author":{"gitId":"kanjitp"},"content":"     * Return whether the archive of the Dialog class have the dialog with specified id","lastModifiedDate":"2021-08-29"},{"lineNumber":70,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":71,"author":{"gitId":"kanjitp"},"content":"     * @param id id","lastModifiedDate":"2021-08-29"},{"lineNumber":72,"author":{"gitId":"kanjitp"},"content":"     * @return whether the archive have stored Dialog of specified Id","lastModifiedDate":"2021-08-29"},{"lineNumber":73,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":74,"author":{"gitId":"kanjitp"},"content":"    public static boolean containsId(String id) {","lastModifiedDate":"2021-08-29"},{"lineNumber":75,"author":{"gitId":"kanjitp"},"content":"        return archive.containsKey(id);","lastModifiedDate":"2021-08-29"},{"lineNumber":76,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":77,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":78,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":79,"author":{"gitId":"kanjitp"},"content":"     * Get existing dialog of existing Id","lastModifiedDate":"2021-08-29"},{"lineNumber":80,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":81,"author":{"gitId":"kanjitp"},"content":"     * @param id id","lastModifiedDate":"2021-08-29"},{"lineNumber":82,"author":{"gitId":"kanjitp"},"content":"     * @return return the Dialog in archive with the specified id","lastModifiedDate":"2021-08-29"},{"lineNumber":83,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":84,"author":{"gitId":"kanjitp"},"content":"    public static Dialog get(String id) {","lastModifiedDate":"2021-08-29"},{"lineNumber":85,"author":{"gitId":"kanjitp"},"content":"        return archive.get(id);","lastModifiedDate":"2021-08-19"},{"lineNumber":86,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":87,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":88,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":89,"author":{"gitId":"kanjitp"},"content":"     * Return string representation of Dialog with its sentences between the lines and 4 spaces indentation","lastModifiedDate":"2021-08-29"},{"lineNumber":90,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":91,"author":{"gitId":"kanjitp"},"content":"     * @return string representation of Dialog","lastModifiedDate":"2021-08-29"},{"lineNumber":92,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":93,"author":{"gitId":"kanjitp"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":94,"author":{"gitId":"kanjitp"},"content":"    public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":95,"author":{"gitId":"kanjitp"},"content":"        String dialogs \u003d this.sentences.stream().reduce(\"    \", (s1, s2) -\u003e s1 + s2 + \"\\n    \");","lastModifiedDate":"2021-08-19"},{"lineNumber":96,"author":{"gitId":"kanjitp"},"content":"        return \"    ____________________________________________________________\\n\"","lastModifiedDate":"2021-08-29"},{"lineNumber":97,"author":{"gitId":"kanjitp"},"content":"                + dialogs","lastModifiedDate":"2021-08-29"},{"lineNumber":98,"author":{"gitId":"kanjitp"},"content":"                + \"____________________________________________________________\";","lastModifiedDate":"2021-08-29"},{"lineNumber":99,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":100,"author":{"gitId":"kanjitp"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"kanjitp":100}},{"path":"src/main/java/dialog/DialogException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kanjitp"},"content":"package dialog;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"kanjitp"},"content":"/**","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"kanjitp"},"content":" * Exception to do with Dialog to be thrown when a Dialog of existing id","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"kanjitp"},"content":" * is to be generated.","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"kanjitp"},"content":" */","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"kanjitp"},"content":"public class DialogException extends Exception {","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"kanjitp"},"content":"     * Default constructor of DialogException","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"kanjitp"},"content":"     * @param errorMessage message to be stored in the DialogException","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"kanjitp"},"content":"    public DialogException(String errorMessage) {","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"kanjitp"},"content":"        super(errorMessage);","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"kanjitp"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"kanjitp":16}},{"path":"src/main/java/dialog/TaskDialog.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kanjitp"},"content":"package dialog;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"kanjitp"},"content":"import command.InvalidTimeFormatException;","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"kanjitp"},"content":"import parser.Parser;","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"kanjitp"},"content":"import task.Task;","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"kanjitp"},"content":"import task.TimeTask;","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"kanjitp"},"content":"import task.TaskList;","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"kanjitp"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-27"},{"lineNumber":11,"author":{"gitId":"kanjitp"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-27"},{"lineNumber":12,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":13,"author":{"gitId":"kanjitp"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"kanjitp"},"content":"import java.util.List;","lastModifiedDate":"2021-08-27"},{"lineNumber":15,"author":{"gitId":"kanjitp"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-08-27"},{"lineNumber":16,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":17,"author":{"gitId":"kanjitp"},"content":"/**","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"kanjitp"},"content":" * TaskDialog is a class for displaying dialogs which also has TaskList as its component","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"kanjitp"},"content":" *","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"kanjitp"},"content":" * @author Kan Jitpakdi","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"kanjitp"},"content":" * @author GitHub: kanjitp","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"kanjitp"},"content":" * @version 0.01","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"kanjitp"},"content":" * @since 0.00","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"kanjitp"},"content":" */","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"kanjitp"},"content":"public class TaskDialog extends Dialog {","lastModifiedDate":"2021-08-19"},{"lineNumber":26,"author":{"gitId":"kanjitp"},"content":"    // This class is a child of dialog class which allow the user to interact with the task","lastModifiedDate":"2021-08-19"},{"lineNumber":27,"author":{"gitId":"kanjitp"},"content":"    private TaskList taskList;","lastModifiedDate":"2021-08-28"},{"lineNumber":28,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":29,"author":{"gitId":"kanjitp"},"content":"    /** private constructor only to be used within the class */","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"kanjitp"},"content":"    private TaskDialog(ArrayList\u003cString\u003e sentences, TaskList taskList) {","lastModifiedDate":"2021-08-28"},{"lineNumber":31,"author":{"gitId":"kanjitp"},"content":"        super(sentences);","lastModifiedDate":"2021-08-28"},{"lineNumber":32,"author":{"gitId":"kanjitp"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2021-08-28"},{"lineNumber":33,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":34,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":35,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":36,"author":{"gitId":"kanjitp"},"content":"     * Factory method for creating TaskDialog as Dialog type (to be cast by developer)","lastModifiedDate":"2021-08-29"},{"lineNumber":37,"author":{"gitId":"kanjitp"},"content":"     * Factory method from TaskDialog allow the user to fetch the existing Dialog in the archive.","lastModifiedDate":"2021-08-29"},{"lineNumber":38,"author":{"gitId":"kanjitp"},"content":"     * The default TaskList will have an empty ArrayList of task.","lastModifiedDate":"2021-08-29"},{"lineNumber":39,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":40,"author":{"gitId":"kanjitp"},"content":"     * @param id the id of the TaskDialog","lastModifiedDate":"2021-08-29"},{"lineNumber":41,"author":{"gitId":"kanjitp"},"content":"     * @return TaskDialog of type Dialog","lastModifiedDate":"2021-08-29"},{"lineNumber":42,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":43,"author":{"gitId":"kanjitp"},"content":"    public static Dialog generate(String id) {","lastModifiedDate":"2021-08-28"},{"lineNumber":44,"author":{"gitId":"kanjitp"},"content":"        if (archive.containsKey(id)) {","lastModifiedDate":"2021-08-28"},{"lineNumber":45,"author":{"gitId":"kanjitp"},"content":"            return archive.get(id);","lastModifiedDate":"2021-08-28"},{"lineNumber":46,"author":{"gitId":"kanjitp"},"content":"        } else {","lastModifiedDate":"2021-08-28"},{"lineNumber":47,"author":{"gitId":"kanjitp"},"content":"            final Dialog newDialog \u003d new TaskDialog(new ArrayList\u003c\u003e(), new TaskList(new ArrayList\u003c\u003e()));","lastModifiedDate":"2021-08-28"},{"lineNumber":48,"author":{"gitId":"kanjitp"},"content":"            archive.put(id, newDialog);","lastModifiedDate":"2021-08-28"},{"lineNumber":49,"author":{"gitId":"kanjitp"},"content":"            return newDialog;","lastModifiedDate":"2021-08-28"},{"lineNumber":50,"author":{"gitId":"kanjitp"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":51,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":52,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":53,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":54,"author":{"gitId":"kanjitp"},"content":"     * Factory method for creating TaskDialog as Dialog type (to be cast by developer)","lastModifiedDate":"2021-08-29"},{"lineNumber":55,"author":{"gitId":"kanjitp"},"content":"     * Factory method from TaskDialog allow the user to fetch the existing Dialog in the archive.","lastModifiedDate":"2021-08-29"},{"lineNumber":56,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":57,"author":{"gitId":"kanjitp"},"content":"     * @param id       the id of the TaskDialog","lastModifiedDate":"2021-08-29"},{"lineNumber":58,"author":{"gitId":"kanjitp"},"content":"     * @param taskList the taskList the TaskDialog is going to have","lastModifiedDate":"2021-08-29"},{"lineNumber":59,"author":{"gitId":"kanjitp"},"content":"     * @return TaskDialog of type Dialog","lastModifiedDate":"2021-08-29"},{"lineNumber":60,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":61,"author":{"gitId":"kanjitp"},"content":"    public static Dialog generate(String id, TaskList taskList) {","lastModifiedDate":"2021-08-28"},{"lineNumber":62,"author":{"gitId":"kanjitp"},"content":"        if (archive.containsKey(id)) {","lastModifiedDate":"2021-08-27"},{"lineNumber":63,"author":{"gitId":"kanjitp"},"content":"            return archive.get(id);","lastModifiedDate":"2021-08-27"},{"lineNumber":64,"author":{"gitId":"kanjitp"},"content":"        } else {","lastModifiedDate":"2021-08-27"},{"lineNumber":65,"author":{"gitId":"kanjitp"},"content":"            final Dialog newDialog \u003d new TaskDialog(new ArrayList\u003c\u003e(), taskList);","lastModifiedDate":"2021-08-28"},{"lineNumber":66,"author":{"gitId":"kanjitp"},"content":"            archive.put(id, newDialog);","lastModifiedDate":"2021-08-27"},{"lineNumber":67,"author":{"gitId":"kanjitp"},"content":"            return newDialog;","lastModifiedDate":"2021-08-27"},{"lineNumber":68,"author":{"gitId":"kanjitp"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":69,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":70,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":71,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":72,"author":{"gitId":"kanjitp"},"content":"     * Add the task to the TaskList of this Dialog and print out feedback to the user","lastModifiedDate":"2021-08-29"},{"lineNumber":73,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":74,"author":{"gitId":"kanjitp"},"content":"     * @param task the task to be added to the TaskList of this TaskDialog","lastModifiedDate":"2021-08-29"},{"lineNumber":75,"author":{"gitId":"kanjitp"},"content":"     * @throws DialogException dialog cannot have the same id while the app is running","lastModifiedDate":"2021-08-29"},{"lineNumber":76,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":77,"author":{"gitId":"kanjitp"},"content":"    public void addTask(Task task) throws DialogException {","lastModifiedDate":"2021-08-19"},{"lineNumber":78,"author":{"gitId":"kanjitp"},"content":"        Dialog addDialog \u003d Dialog.generate(Integer.toString(task.hashCode()));","lastModifiedDate":"2021-08-28"},{"lineNumber":79,"author":{"gitId":"kanjitp"},"content":"        taskList.add(task);","lastModifiedDate":"2021-08-28"},{"lineNumber":80,"author":{"gitId":"kanjitp"},"content":"        addDialog.add(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2021-08-19"},{"lineNumber":81,"author":{"gitId":"kanjitp"},"content":"        addDialog.add(\"  \" + task);","lastModifiedDate":"2021-08-19"},{"lineNumber":82,"author":{"gitId":"kanjitp"},"content":"        addDialog.add(\"Now you have \" + this.taskList.length() + \" tasks in the list.\");","lastModifiedDate":"2021-08-28"},{"lineNumber":83,"author":{"gitId":"kanjitp"},"content":"        System.out.println(addDialog);","lastModifiedDate":"2021-08-19"},{"lineNumber":84,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":85,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":86,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":87,"author":{"gitId":"kanjitp"},"content":"     * Return TaskDialog filtered by the specific deadline of format yyyy-MM-dd","lastModifiedDate":"2021-08-29"},{"lineNumber":88,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":89,"author":{"gitId":"kanjitp"},"content":"     * @param deadline the deadline of format yyyy-MM-dd","lastModifiedDate":"2021-08-29"},{"lineNumber":90,"author":{"gitId":"kanjitp"},"content":"     * @return TaskDialog with new TaskList stored in it","lastModifiedDate":"2021-08-29"},{"lineNumber":91,"author":{"gitId":"kanjitp"},"content":"     * @throws InvalidTimeFormatException time of illegal format (not yyyy-MM-dd)","lastModifiedDate":"2021-08-29"},{"lineNumber":92,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":93,"author":{"gitId":"kanjitp"},"content":"    public TaskDialog by(String deadline) throws InvalidTimeFormatException {","lastModifiedDate":"2021-08-27"},{"lineNumber":94,"author":{"gitId":"kanjitp"},"content":"        LocalDate dlDate \u003d Parser.parseTimeString(deadline);","lastModifiedDate":"2021-08-29"},{"lineNumber":95,"author":{"gitId":"kanjitp"},"content":"        return new TaskDialog(new ArrayList\u003c\u003e(List.of(\"task.Deadline: \"","lastModifiedDate":"2021-08-29"},{"lineNumber":96,"author":{"gitId":"kanjitp"},"content":"                + dlDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")))),","lastModifiedDate":"2021-08-29"},{"lineNumber":97,"author":{"gitId":"kanjitp"},"content":"                new TaskList(new ArrayList\u003c\u003e(this.taskList.getTasks().stream().filter((task) -\u003e {","lastModifiedDate":"2021-08-28"},{"lineNumber":98,"author":{"gitId":"kanjitp"},"content":"                    if (!task.getClass().getSuperclass().getName().equals(\"task.TimeTask\")) {","lastModifiedDate":"2021-08-29"},{"lineNumber":99,"author":{"gitId":"kanjitp"},"content":"                        // return any task without time associated with it","lastModifiedDate":"2021-08-27"},{"lineNumber":100,"author":{"gitId":"kanjitp"},"content":"                        return true;","lastModifiedDate":"2021-08-27"},{"lineNumber":101,"author":{"gitId":"kanjitp"},"content":"                    } else {","lastModifiedDate":"2021-08-19"},{"lineNumber":102,"author":{"gitId":"kanjitp"},"content":"                        TimeTask timetask \u003d (TimeTask) task;","lastModifiedDate":"2021-08-27"},{"lineNumber":103,"author":{"gitId":"kanjitp"},"content":"                        return timetask.getTime().isBefore(dlDate) || timetask.getTime().isEqual(dlDate);","lastModifiedDate":"2021-08-27"},{"lineNumber":104,"author":{"gitId":"kanjitp"},"content":"                    }","lastModifiedDate":"2021-08-19"},{"lineNumber":105,"author":{"gitId":"kanjitp"},"content":"                }).collect(Collectors.toList()))));","lastModifiedDate":"2021-08-28"},{"lineNumber":106,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":107,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":108,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":109,"author":{"gitId":"kanjitp"},"content":"     * Return TaskDialog filtered by the keyword given by the user","lastModifiedDate":"2021-08-29"},{"lineNumber":110,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":111,"author":{"gitId":"kanjitp"},"content":"     * @param keyword the keyword to search description","lastModifiedDate":"2021-08-29"},{"lineNumber":112,"author":{"gitId":"kanjitp"},"content":"     * @return TaskDialog with TaskList with tasks matching the keyword","lastModifiedDate":"2021-08-29"},{"lineNumber":113,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":114,"author":{"gitId":"kanjitp"},"content":"    public TaskDialog with(String keyword) {","lastModifiedDate":"2021-08-29"},{"lineNumber":115,"author":{"gitId":"kanjitp"},"content":"        return new TaskDialog(new ArrayList\u003c\u003e(List.of(\"Find: \" + keyword)),","lastModifiedDate":"2021-08-29"},{"lineNumber":116,"author":{"gitId":"kanjitp"},"content":"                new TaskList(new ArrayList\u003c\u003e(this.taskList.getTasks().stream().filter(","lastModifiedDate":"2021-08-29"},{"lineNumber":117,"author":{"gitId":"kanjitp"},"content":"                        (task) -\u003e task.description().contains(keyword)).collect(Collectors.toList()))));","lastModifiedDate":"2021-08-29"},{"lineNumber":118,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":119,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":120,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":121,"author":{"gitId":"kanjitp"},"content":"     * Return the TaskList of current TaskDialog","lastModifiedDate":"2021-08-29"},{"lineNumber":122,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":123,"author":{"gitId":"kanjitp"},"content":"     * @return the taskList stored in this TaskDialog","lastModifiedDate":"2021-08-29"},{"lineNumber":124,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":125,"author":{"gitId":"kanjitp"},"content":"    public TaskList getTaskList() {","lastModifiedDate":"2021-08-28"},{"lineNumber":126,"author":{"gitId":"kanjitp"},"content":"        return this.taskList;","lastModifiedDate":"2021-08-28"},{"lineNumber":127,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":128,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":129,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":130,"author":{"gitId":"kanjitp"},"content":"     * Mark the task in TaskList with the specified index and print feedback to the user","lastModifiedDate":"2021-08-29"},{"lineNumber":131,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":132,"author":{"gitId":"kanjitp"},"content":"     * @param index the index of the Task in TaskList in this TaskDialog to mark as done","lastModifiedDate":"2021-08-29"},{"lineNumber":133,"author":{"gitId":"kanjitp"},"content":"     * @throws IndexOutOfBoundsException illegal index","lastModifiedDate":"2021-08-29"},{"lineNumber":134,"author":{"gitId":"kanjitp"},"content":"     * @throws DialogException           dialog cannot have the same id while the app is running","lastModifiedDate":"2021-08-29"},{"lineNumber":135,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":136,"author":{"gitId":"kanjitp"},"content":"    public void markTaskAsDone(int index) throws IndexOutOfBoundsException, DialogException {","lastModifiedDate":"2021-08-19"},{"lineNumber":137,"author":{"gitId":"kanjitp"},"content":"        if (index \u003c 0 || index \u003e this.taskList.length()) {","lastModifiedDate":"2021-08-28"},{"lineNumber":138,"author":{"gitId":"kanjitp"},"content":"            throw new IndexOutOfBoundsException();","lastModifiedDate":"2021-08-19"},{"lineNumber":139,"author":{"gitId":"kanjitp"},"content":"        } else {","lastModifiedDate":"2021-08-19"},{"lineNumber":140,"author":{"gitId":"kanjitp"},"content":"            Task task \u003d taskList.get(index);","lastModifiedDate":"2021-08-28"},{"lineNumber":141,"author":{"gitId":"kanjitp"},"content":"            task.markAsDone();","lastModifiedDate":"2021-08-19"},{"lineNumber":142,"author":{"gitId":"kanjitp"},"content":"            String id \u003d \"markAsDone\" + task.hashCode();","lastModifiedDate":"2021-08-28"},{"lineNumber":143,"author":{"gitId":"kanjitp"},"content":"            Dialog markAsDoneDialog \u003d Dialog.generate(id);","lastModifiedDate":"2021-08-19"},{"lineNumber":144,"author":{"gitId":"kanjitp"},"content":"            markAsDoneDialog.add(\"Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2021-08-19"},{"lineNumber":145,"author":{"gitId":"kanjitp"},"content":"            markAsDoneDialog.add(\"  \" + task);","lastModifiedDate":"2021-08-19"},{"lineNumber":146,"author":{"gitId":"kanjitp"},"content":"            System.out.println(markAsDoneDialog);","lastModifiedDate":"2021-08-19"},{"lineNumber":147,"author":{"gitId":"kanjitp"},"content":"            // allow duplicates later","lastModifiedDate":"2021-08-19"},{"lineNumber":148,"author":{"gitId":"kanjitp"},"content":"            Dialog.archive.remove(id);","lastModifiedDate":"2021-08-19"},{"lineNumber":149,"author":{"gitId":"kanjitp"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":150,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":151,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":152,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":153,"author":{"gitId":"kanjitp"},"content":"     * Delete the task by index and print feedback to the user","lastModifiedDate":"2021-08-29"},{"lineNumber":154,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":155,"author":{"gitId":"kanjitp"},"content":"     * @param index the index of the task to be deleted in TaskList of this TaskDialog","lastModifiedDate":"2021-08-29"},{"lineNumber":156,"author":{"gitId":"kanjitp"},"content":"     * @throws IndexOutOfBoundsException illegal index","lastModifiedDate":"2021-08-29"},{"lineNumber":157,"author":{"gitId":"kanjitp"},"content":"     * @throws DialogException           dialog cannot have the same id while the app is running","lastModifiedDate":"2021-08-29"},{"lineNumber":158,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":159,"author":{"gitId":"kanjitp"},"content":"    public void deleteTaskByIndex(int index) throws IndexOutOfBoundsException, DialogException {","lastModifiedDate":"2021-08-19"},{"lineNumber":160,"author":{"gitId":"kanjitp"},"content":"        if (index \u003c 0 || index \u003e this.taskList.length()) {","lastModifiedDate":"2021-08-28"},{"lineNumber":161,"author":{"gitId":"kanjitp"},"content":"            throw new IndexOutOfBoundsException();","lastModifiedDate":"2021-08-19"},{"lineNumber":162,"author":{"gitId":"kanjitp"},"content":"        } else {","lastModifiedDate":"2021-08-19"},{"lineNumber":163,"author":{"gitId":"kanjitp"},"content":"            Task task \u003d taskList.get(index);","lastModifiedDate":"2021-08-28"},{"lineNumber":164,"author":{"gitId":"kanjitp"},"content":"            taskList.remove(index);","lastModifiedDate":"2021-08-28"},{"lineNumber":165,"author":{"gitId":"kanjitp"},"content":"            String id \u003d \"remove\" + task.hashCode();","lastModifiedDate":"2021-08-28"},{"lineNumber":166,"author":{"gitId":"kanjitp"},"content":"            Dialog removeDialog \u003d Dialog.generate(id);","lastModifiedDate":"2021-08-19"},{"lineNumber":167,"author":{"gitId":"kanjitp"},"content":"            removeDialog.add(\"Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2021-08-19"},{"lineNumber":168,"author":{"gitId":"kanjitp"},"content":"            removeDialog.add(\"  \" + task);","lastModifiedDate":"2021-08-19"},{"lineNumber":169,"author":{"gitId":"kanjitp"},"content":"            removeDialog.add(\"Now you have \" + this.taskList.length() + \" tasks in the list.\");","lastModifiedDate":"2021-08-28"},{"lineNumber":170,"author":{"gitId":"kanjitp"},"content":"            System.out.println(removeDialog);","lastModifiedDate":"2021-08-19"},{"lineNumber":171,"author":{"gitId":"kanjitp"},"content":"            Dialog.archive.remove(id);","lastModifiedDate":"2021-08-19"},{"lineNumber":172,"author":{"gitId":"kanjitp"},"content":"            Dialog.archive.remove(task.toString());","lastModifiedDate":"2021-08-19"},{"lineNumber":173,"author":{"gitId":"kanjitp"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":174,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":175,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":176,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":177,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":178,"author":{"gitId":"kanjitp"},"content":"     * Return the string representation of the TaskDialog with its sentences at the top","lastModifiedDate":"2021-08-29"},{"lineNumber":179,"author":{"gitId":"kanjitp"},"content":"     * and followed by the TaskList","lastModifiedDate":"2021-08-29"},{"lineNumber":180,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":181,"author":{"gitId":"kanjitp"},"content":"     * @return string representation of taskDialog","lastModifiedDate":"2021-08-29"},{"lineNumber":182,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":183,"author":{"gitId":"kanjitp"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":184,"author":{"gitId":"kanjitp"},"content":"    public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":185,"author":{"gitId":"kanjitp"},"content":"        String dialogs \u003d this.sentences.stream().reduce(\"    \", (s1, s2) -\u003e s1 + s2 + \"\\n    \");","lastModifiedDate":"2021-08-19"},{"lineNumber":186,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":187,"author":{"gitId":"kanjitp"},"content":"        return \"    ____________________________________________________________\\n\"","lastModifiedDate":"2021-08-29"},{"lineNumber":188,"author":{"gitId":"kanjitp"},"content":"                + dialogs","lastModifiedDate":"2021-08-29"},{"lineNumber":189,"author":{"gitId":"kanjitp"},"content":"                + \"Here are the tasks in your list:\\n\"","lastModifiedDate":"2021-08-29"},{"lineNumber":190,"author":{"gitId":"kanjitp"},"content":"                + taskList","lastModifiedDate":"2021-08-29"},{"lineNumber":191,"author":{"gitId":"kanjitp"},"content":"                + \"    ____________________________________________________________\";","lastModifiedDate":"2021-08-29"},{"lineNumber":192,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":193,"author":{"gitId":"kanjitp"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"kanjitp":193}},{"path":"src/main/java/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kanjitp"},"content":"package parser;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"kanjitp"},"content":"import alice.AliceException;","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"kanjitp"},"content":"import command.Command;","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"kanjitp"},"content":"import command.InvalidTimeFormatException;","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"kanjitp"},"content":"import task.Deadline;","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"kanjitp"},"content":"import task.Event;","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"kanjitp"},"content":"import task.Task;","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"kanjitp"},"content":"import task.TaskList;","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"kanjitp"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"kanjitp"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"kanjitp"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"kanjitp"},"content":"/**","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"kanjitp"},"content":" * Class for parsing different data type to other type or different format.","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"kanjitp"},"content":" *","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"kanjitp"},"content":" * @author Kan Jitpakdi","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"kanjitp"},"content":" * @author GitHub: kanjitp","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"kanjitp"},"content":" * @version 0.01","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"kanjitp"},"content":" * @since 0.00","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"kanjitp"},"content":" */","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"kanjitp"},"content":"public class Parser {","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":27,"author":{"gitId":"kanjitp"},"content":"     * Static method for converting a string of command to Command Type","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"kanjitp"},"content":"     * @param s the string","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"kanjitp"},"content":"     * @return CommandType of the command","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"kanjitp"},"content":"     * @throws AliceException invalid command is parsed into the method","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":33,"author":{"gitId":"kanjitp"},"content":"    public static Command.CommandType stringToCommand(String s) throws AliceException {","lastModifiedDate":"2021-08-28"},{"lineNumber":34,"author":{"gitId":"kanjitp"},"content":"        switch (s) {","lastModifiedDate":"2021-08-28"},{"lineNumber":35,"author":{"gitId":"kanjitp"},"content":"        case \"list\":","lastModifiedDate":"2021-08-28"},{"lineNumber":36,"author":{"gitId":"kanjitp"},"content":"            return Command.CommandType.LIST;","lastModifiedDate":"2021-08-28"},{"lineNumber":37,"author":{"gitId":"kanjitp"},"content":"        case \"date\":","lastModifiedDate":"2021-08-28"},{"lineNumber":38,"author":{"gitId":"kanjitp"},"content":"            return Command.CommandType.DATE;","lastModifiedDate":"2021-08-28"},{"lineNumber":39,"author":{"gitId":"kanjitp"},"content":"        case \"find\":","lastModifiedDate":"2021-08-29"},{"lineNumber":40,"author":{"gitId":"kanjitp"},"content":"            return Command.CommandType.FIND;","lastModifiedDate":"2021-08-29"},{"lineNumber":41,"author":{"gitId":"kanjitp"},"content":"        case \"todo\":","lastModifiedDate":"2021-08-28"},{"lineNumber":42,"author":{"gitId":"kanjitp"},"content":"            return Command.CommandType.TODO;","lastModifiedDate":"2021-08-28"},{"lineNumber":43,"author":{"gitId":"kanjitp"},"content":"        case \"deadline\":","lastModifiedDate":"2021-08-28"},{"lineNumber":44,"author":{"gitId":"kanjitp"},"content":"            return Command.CommandType.DEADLINE;","lastModifiedDate":"2021-08-28"},{"lineNumber":45,"author":{"gitId":"kanjitp"},"content":"        case \"event\":","lastModifiedDate":"2021-08-28"},{"lineNumber":46,"author":{"gitId":"kanjitp"},"content":"            return Command.CommandType.EVENT;","lastModifiedDate":"2021-08-28"},{"lineNumber":47,"author":{"gitId":"kanjitp"},"content":"        case \"done\":","lastModifiedDate":"2021-08-28"},{"lineNumber":48,"author":{"gitId":"kanjitp"},"content":"            return Command.CommandType.DONE;","lastModifiedDate":"2021-08-28"},{"lineNumber":49,"author":{"gitId":"kanjitp"},"content":"        case \"delete\":","lastModifiedDate":"2021-08-28"},{"lineNumber":50,"author":{"gitId":"kanjitp"},"content":"            return Command.CommandType.DELETE;","lastModifiedDate":"2021-08-28"},{"lineNumber":51,"author":{"gitId":"kanjitp"},"content":"        case \"commands\":","lastModifiedDate":"2021-08-28"},{"lineNumber":52,"author":{"gitId":"kanjitp"},"content":"        case \"?\":","lastModifiedDate":"2021-08-28"},{"lineNumber":53,"author":{"gitId":"kanjitp"},"content":"        case \"help\":","lastModifiedDate":"2021-08-28"},{"lineNumber":54,"author":{"gitId":"kanjitp"},"content":"            return Command.CommandType.COMMANDS;","lastModifiedDate":"2021-08-28"},{"lineNumber":55,"author":{"gitId":"kanjitp"},"content":"        case \"bye\":","lastModifiedDate":"2021-08-28"},{"lineNumber":56,"author":{"gitId":"kanjitp"},"content":"            return Command.CommandType.BYE;","lastModifiedDate":"2021-08-28"},{"lineNumber":57,"author":{"gitId":"kanjitp"},"content":"        default:","lastModifiedDate":"2021-08-28"},{"lineNumber":58,"author":{"gitId":"kanjitp"},"content":"            throw new AliceException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2021-08-28"},{"lineNumber":59,"author":{"gitId":"kanjitp"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":60,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":61,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":62,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":63,"author":{"gitId":"kanjitp"},"content":"     * Static method for converting a string to different TaskType.","lastModifiedDate":"2021-08-29"},{"lineNumber":64,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":65,"author":{"gitId":"kanjitp"},"content":"     * @param s the string","lastModifiedDate":"2021-08-29"},{"lineNumber":66,"author":{"gitId":"kanjitp"},"content":"     * @return TaskType of the tasks","lastModifiedDate":"2021-08-29"},{"lineNumber":67,"author":{"gitId":"kanjitp"},"content":"     * @throws AliceException invalid task string representation is parsed into the method","lastModifiedDate":"2021-08-29"},{"lineNumber":68,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":69,"author":{"gitId":"kanjitp"},"content":"    public static TaskList.TaskType stringToTaskType(String s) throws AliceException {","lastModifiedDate":"2021-08-28"},{"lineNumber":70,"author":{"gitId":"kanjitp"},"content":"        switch (s) {","lastModifiedDate":"2021-08-28"},{"lineNumber":71,"author":{"gitId":"kanjitp"},"content":"        case \"TD\":","lastModifiedDate":"2021-08-28"},{"lineNumber":72,"author":{"gitId":"kanjitp"},"content":"            return TaskList.TaskType.TODO;","lastModifiedDate":"2021-08-28"},{"lineNumber":73,"author":{"gitId":"kanjitp"},"content":"        case \"DL\":","lastModifiedDate":"2021-08-28"},{"lineNumber":74,"author":{"gitId":"kanjitp"},"content":"            return TaskList.TaskType.DEADLINE;","lastModifiedDate":"2021-08-28"},{"lineNumber":75,"author":{"gitId":"kanjitp"},"content":"        case \"EV\":","lastModifiedDate":"2021-08-28"},{"lineNumber":76,"author":{"gitId":"kanjitp"},"content":"            return TaskList.TaskType.EVENT;","lastModifiedDate":"2021-08-28"},{"lineNumber":77,"author":{"gitId":"kanjitp"},"content":"        default:","lastModifiedDate":"2021-08-28"},{"lineNumber":78,"author":{"gitId":"kanjitp"},"content":"            throw new AliceException(\"Invalid String detected: \" + s);","lastModifiedDate":"2021-08-28"},{"lineNumber":79,"author":{"gitId":"kanjitp"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":80,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":81,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":82,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":83,"author":{"gitId":"kanjitp"},"content":"     * Static method for converting a className of a task to the TaskType enum","lastModifiedDate":"2021-08-29"},{"lineNumber":84,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":85,"author":{"gitId":"kanjitp"},"content":"     * @param cn class name","lastModifiedDate":"2021-08-29"},{"lineNumber":86,"author":{"gitId":"kanjitp"},"content":"     * @return taskType of the classname passed","lastModifiedDate":"2021-08-29"},{"lineNumber":87,"author":{"gitId":"kanjitp"},"content":"     * @throws AliceException invalid classname is parsed into the method","lastModifiedDate":"2021-08-29"},{"lineNumber":88,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":89,"author":{"gitId":"kanjitp"},"content":"    public static TaskList.TaskType classNameToTaskType(String cn) throws AliceException {","lastModifiedDate":"2021-08-28"},{"lineNumber":90,"author":{"gitId":"kanjitp"},"content":"        switch (cn) {","lastModifiedDate":"2021-08-28"},{"lineNumber":91,"author":{"gitId":"kanjitp"},"content":"        case \"task.Todo\":","lastModifiedDate":"2021-08-29"},{"lineNumber":92,"author":{"gitId":"kanjitp"},"content":"        case \"Todo\":","lastModifiedDate":"2021-08-29"},{"lineNumber":93,"author":{"gitId":"kanjitp"},"content":"            return TaskList.TaskType.TODO;","lastModifiedDate":"2021-08-28"},{"lineNumber":94,"author":{"gitId":"kanjitp"},"content":"        case \"task.Deadline\":","lastModifiedDate":"2021-08-29"},{"lineNumber":95,"author":{"gitId":"kanjitp"},"content":"        case \"Deadline\":","lastModifiedDate":"2021-08-29"},{"lineNumber":96,"author":{"gitId":"kanjitp"},"content":"            return TaskList.TaskType.DEADLINE;","lastModifiedDate":"2021-08-28"},{"lineNumber":97,"author":{"gitId":"kanjitp"},"content":"        case \"task.Event\":","lastModifiedDate":"2021-08-29"},{"lineNumber":98,"author":{"gitId":"kanjitp"},"content":"        case \"Event\":","lastModifiedDate":"2021-08-29"},{"lineNumber":99,"author":{"gitId":"kanjitp"},"content":"            return TaskList.TaskType.EVENT;","lastModifiedDate":"2021-08-28"},{"lineNumber":100,"author":{"gitId":"kanjitp"},"content":"        default:","lastModifiedDate":"2021-08-28"},{"lineNumber":101,"author":{"gitId":"kanjitp"},"content":"            throw new AliceException(\"Invalid ClassName detected: \" + cn);","lastModifiedDate":"2021-08-28"},{"lineNumber":102,"author":{"gitId":"kanjitp"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":103,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":104,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":105,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":106,"author":{"gitId":"kanjitp"},"content":"     * Static method for converting the taskType into its string representation","lastModifiedDate":"2021-08-29"},{"lineNumber":107,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":108,"author":{"gitId":"kanjitp"},"content":"     * @param t the taskType","lastModifiedDate":"2021-08-29"},{"lineNumber":109,"author":{"gitId":"kanjitp"},"content":"     * @return the String representation fo that taskType","lastModifiedDate":"2021-08-29"},{"lineNumber":110,"author":{"gitId":"kanjitp"},"content":"     * @throws AliceException invalid TaskType has been parsed into the method","lastModifiedDate":"2021-08-29"},{"lineNumber":111,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":112,"author":{"gitId":"kanjitp"},"content":"    public static String taskTypeToString(TaskList.TaskType t) throws AliceException {","lastModifiedDate":"2021-08-28"},{"lineNumber":113,"author":{"gitId":"kanjitp"},"content":"        switch (t) {","lastModifiedDate":"2021-08-28"},{"lineNumber":114,"author":{"gitId":"kanjitp"},"content":"        case TODO:","lastModifiedDate":"2021-08-28"},{"lineNumber":115,"author":{"gitId":"kanjitp"},"content":"            return \"TD\";","lastModifiedDate":"2021-08-28"},{"lineNumber":116,"author":{"gitId":"kanjitp"},"content":"        case DEADLINE:","lastModifiedDate":"2021-08-28"},{"lineNumber":117,"author":{"gitId":"kanjitp"},"content":"            return \"DL\";","lastModifiedDate":"2021-08-28"},{"lineNumber":118,"author":{"gitId":"kanjitp"},"content":"        case EVENT:","lastModifiedDate":"2021-08-28"},{"lineNumber":119,"author":{"gitId":"kanjitp"},"content":"            return \"EV\";","lastModifiedDate":"2021-08-28"},{"lineNumber":120,"author":{"gitId":"kanjitp"},"content":"        default:","lastModifiedDate":"2021-08-28"},{"lineNumber":121,"author":{"gitId":"kanjitp"},"content":"            throw new AliceException(\"Invalid TaskType detected: \" + t);","lastModifiedDate":"2021-08-28"},{"lineNumber":122,"author":{"gitId":"kanjitp"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":123,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":124,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":125,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":126,"author":{"gitId":"kanjitp"},"content":"     * Static method for converting the task to a save format string representation","lastModifiedDate":"2021-08-29"},{"lineNumber":127,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":128,"author":{"gitId":"kanjitp"},"content":"     * @param task the task","lastModifiedDate":"2021-08-29"},{"lineNumber":129,"author":{"gitId":"kanjitp"},"content":"     * @return string representation to be seen in the save file of the task","lastModifiedDate":"2021-08-29"},{"lineNumber":130,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":131,"author":{"gitId":"kanjitp"},"content":"    public static String taskToSaveFormat(Task task) {","lastModifiedDate":"2021-08-28"},{"lineNumber":132,"author":{"gitId":"kanjitp"},"content":"        TaskList.TaskType type \u003d classNameToTaskType(task.getClass().getName());","lastModifiedDate":"2021-08-28"},{"lineNumber":133,"author":{"gitId":"kanjitp"},"content":"        String s \u003d taskTypeToString(type) + \" | \" + (task.isDone() ? 1 : 0) + \" | \" + task.description();","lastModifiedDate":"2021-08-29"},{"lineNumber":134,"author":{"gitId":"kanjitp"},"content":"        switch (type) {","lastModifiedDate":"2021-08-28"},{"lineNumber":135,"author":{"gitId":"kanjitp"},"content":"        case EVENT:","lastModifiedDate":"2021-08-28"},{"lineNumber":136,"author":{"gitId":"kanjitp"},"content":"            Event ev \u003d (Event) task;","lastModifiedDate":"2021-08-28"},{"lineNumber":137,"author":{"gitId":"kanjitp"},"content":"            s +\u003d \" | \" + ev.getTime().format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));","lastModifiedDate":"2021-08-28"},{"lineNumber":138,"author":{"gitId":"kanjitp"},"content":"            break;","lastModifiedDate":"2021-08-28"},{"lineNumber":139,"author":{"gitId":"kanjitp"},"content":"        case DEADLINE:","lastModifiedDate":"2021-08-28"},{"lineNumber":140,"author":{"gitId":"kanjitp"},"content":"            Deadline dl \u003d (Deadline) task;","lastModifiedDate":"2021-08-28"},{"lineNumber":141,"author":{"gitId":"kanjitp"},"content":"            s +\u003d \" | \" + dl.getTime().format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));","lastModifiedDate":"2021-08-28"},{"lineNumber":142,"author":{"gitId":"kanjitp"},"content":"            break;","lastModifiedDate":"2021-08-28"},{"lineNumber":143,"author":{"gitId":"kanjitp"},"content":"        default:","lastModifiedDate":"2021-08-28"},{"lineNumber":144,"author":{"gitId":"kanjitp"},"content":"            break;","lastModifiedDate":"2021-08-28"},{"lineNumber":145,"author":{"gitId":"kanjitp"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":146,"author":{"gitId":"kanjitp"},"content":"        return s;","lastModifiedDate":"2021-08-28"},{"lineNumber":147,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":148,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":149,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":150,"author":{"gitId":"kanjitp"},"content":"     * Static method for converting a string of yes or others to boolean","lastModifiedDate":"2021-08-29"},{"lineNumber":151,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":152,"author":{"gitId":"kanjitp"},"content":"     * @param yesNo string of yes or no","lastModifiedDate":"2021-08-29"},{"lineNumber":153,"author":{"gitId":"kanjitp"},"content":"     * @return true for string resembling yes, false otherwise","lastModifiedDate":"2021-08-29"},{"lineNumber":154,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":155,"author":{"gitId":"kanjitp"},"content":"    public static boolean yesNoToBoolean(String yesNo) {","lastModifiedDate":"2021-08-28"},{"lineNumber":156,"author":{"gitId":"kanjitp"},"content":"        switch (yesNo) {","lastModifiedDate":"2021-08-28"},{"lineNumber":157,"author":{"gitId":"kanjitp"},"content":"        case \"yes\":","lastModifiedDate":"2021-08-28"},{"lineNumber":158,"author":{"gitId":"kanjitp"},"content":"        case \"y\":","lastModifiedDate":"2021-08-28"},{"lineNumber":159,"author":{"gitId":"kanjitp"},"content":"        case \"Y\":","lastModifiedDate":"2021-08-28"},{"lineNumber":160,"author":{"gitId":"kanjitp"},"content":"            return true;","lastModifiedDate":"2021-08-28"},{"lineNumber":161,"author":{"gitId":"kanjitp"},"content":"        default:","lastModifiedDate":"2021-08-28"},{"lineNumber":162,"author":{"gitId":"kanjitp"},"content":"            return false;","lastModifiedDate":"2021-08-28"},{"lineNumber":163,"author":{"gitId":"kanjitp"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":164,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":165,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":166,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":167,"author":{"gitId":"kanjitp"},"content":"     * Static method for parsing string representation to LocalDate object","lastModifiedDate":"2021-08-29"},{"lineNumber":168,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":169,"author":{"gitId":"kanjitp"},"content":"     * @param s the string representation of time","lastModifiedDate":"2021-08-29"},{"lineNumber":170,"author":{"gitId":"kanjitp"},"content":"     * @return LocalDate object if is is of format yyyy-MM-dd","lastModifiedDate":"2021-08-29"},{"lineNumber":171,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":172,"author":{"gitId":"kanjitp"},"content":"    public static LocalDate parseTimeString(String s) {","lastModifiedDate":"2021-08-29"},{"lineNumber":173,"author":{"gitId":"kanjitp"},"content":"        try {","lastModifiedDate":"2021-08-29"},{"lineNumber":174,"author":{"gitId":"kanjitp"},"content":"            return LocalDate.parse(s);","lastModifiedDate":"2021-08-29"},{"lineNumber":175,"author":{"gitId":"kanjitp"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-29"},{"lineNumber":176,"author":{"gitId":"kanjitp"},"content":"            throw new InvalidTimeFormatException(\"the inputted time format is invalid, please enter as yyyy-MM-dd\");","lastModifiedDate":"2021-08-29"},{"lineNumber":177,"author":{"gitId":"kanjitp"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":178,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":179,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":180,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":181,"author":{"gitId":"kanjitp"},"content":"     * For parsing a string of full command to a Command object","lastModifiedDate":"2021-08-29"},{"lineNumber":182,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":183,"author":{"gitId":"kanjitp"},"content":"     * @param fullCommand command in string format","lastModifiedDate":"2021-08-29"},{"lineNumber":184,"author":{"gitId":"kanjitp"},"content":"     * @return Command object of the string","lastModifiedDate":"2021-08-29"},{"lineNumber":185,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":186,"author":{"gitId":"kanjitp"},"content":"    public static Command parse(String fullCommand) {","lastModifiedDate":"2021-08-28"},{"lineNumber":187,"author":{"gitId":"kanjitp"},"content":"        return new Command(fullCommand);","lastModifiedDate":"2021-08-28"},{"lineNumber":188,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":189,"author":{"gitId":"kanjitp"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"kanjitp":189}},{"path":"src/main/java/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kanjitp"},"content":"package storage;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"kanjitp"},"content":"import dialog.DialogException;","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"kanjitp"},"content":"import parser.Parser;","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"kanjitp"},"content":"import task.TaskList;","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"kanjitp"},"content":"import ui.Ui;","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"kanjitp"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"kanjitp"},"content":"import java.io.BufferedWriter;","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"kanjitp"},"content":"import java.io.File;","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"kanjitp"},"content":"import java.io.FileReader;","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"kanjitp"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"kanjitp"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"kanjitp"},"content":"import java.nio.charset.StandardCharsets;","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"kanjitp"},"content":"import java.nio.file.Files;","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"kanjitp"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"kanjitp"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"kanjitp"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"kanjitp"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"kanjitp"},"content":"import java.util.List;","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"kanjitp"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"kanjitp"},"content":"/**","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"kanjitp"},"content":" * Class for dealing with the storage system saving and loading save file","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"kanjitp"},"content":" *","lastModifiedDate":"2021-08-29"},{"lineNumber":27,"author":{"gitId":"kanjitp"},"content":" * @author Kan Jitpakdi","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"kanjitp"},"content":" * @author GitHub: kanjitp","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"kanjitp"},"content":" * @version 0.01","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"kanjitp"},"content":" * @since 0.00","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"kanjitp"},"content":" */","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"kanjitp"},"content":"public class Storage {","lastModifiedDate":"2021-08-28"},{"lineNumber":33,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":34,"author":{"gitId":"kanjitp"},"content":"    /** the directory to store every information to be in alice */","lastModifiedDate":"2021-08-29"},{"lineNumber":35,"author":{"gitId":"kanjitp"},"content":"    public static final String DIRECTORY_PATH \u003d \"./alice\";","lastModifiedDate":"2021-08-29"},{"lineNumber":36,"author":{"gitId":"kanjitp"},"content":"    /** the directory to store all the save file to be called data */","lastModifiedDate":"2021-08-29"},{"lineNumber":37,"author":{"gitId":"kanjitp"},"content":"    public static final String DATA_PATH \u003d \"/data\";","lastModifiedDate":"2021-08-29"},{"lineNumber":38,"author":{"gitId":"kanjitp"},"content":"    /** default name for the file */","lastModifiedDate":"2021-08-29"},{"lineNumber":39,"author":{"gitId":"kanjitp"},"content":"    private static final String DEFAULT_FILE_NAME \u003d \"task_list\";","lastModifiedDate":"2021-08-29"},{"lineNumber":40,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":41,"author":{"gitId":"kanjitp"},"content":"    /** the filePath for the save file */","lastModifiedDate":"2021-08-29"},{"lineNumber":42,"author":{"gitId":"kanjitp"},"content":"    private String filePath;","lastModifiedDate":"2021-08-28"},{"lineNumber":43,"author":{"gitId":"kanjitp"},"content":"    /** the taskList read from the save file */","lastModifiedDate":"2021-08-29"},{"lineNumber":44,"author":{"gitId":"kanjitp"},"content":"    private TaskList taskListRead;","lastModifiedDate":"2021-08-28"},{"lineNumber":45,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":46,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":47,"author":{"gitId":"kanjitp"},"content":"    /** writer for writing to file */","lastModifiedDate":"2021-08-29"},{"lineNumber":48,"author":{"gitId":"kanjitp"},"content":"    public static BufferedWriter WRITER;","lastModifiedDate":"2021-08-28"},{"lineNumber":49,"author":{"gitId":"kanjitp"},"content":"    /** reader for reading the file */","lastModifiedDate":"2021-08-29"},{"lineNumber":50,"author":{"gitId":"kanjitp"},"content":"    public static BufferedReader READER;","lastModifiedDate":"2021-08-28"},{"lineNumber":51,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":52,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":53,"author":{"gitId":"kanjitp"},"content":"     * Constructor using default file location to use as storage","lastModifiedDate":"2021-08-29"},{"lineNumber":54,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":55,"author":{"gitId":"kanjitp"},"content":"     * @throws DialogException dialog cannot have the same id while the app is running","lastModifiedDate":"2021-08-29"},{"lineNumber":56,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":57,"author":{"gitId":"kanjitp"},"content":"    public Storage() throws DialogException {","lastModifiedDate":"2021-08-28"},{"lineNumber":58,"author":{"gitId":"kanjitp"},"content":"        this(DEFAULT_FILE_NAME);","lastModifiedDate":"2021-08-28"},{"lineNumber":59,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":60,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":61,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":62,"author":{"gitId":"kanjitp"},"content":"     * Constructor using the specified fileName as the name of the save file to read and write to","lastModifiedDate":"2021-08-29"},{"lineNumber":63,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":64,"author":{"gitId":"kanjitp"},"content":"     * @param fileName the name of the file without file type suffix","lastModifiedDate":"2021-08-29"},{"lineNumber":65,"author":{"gitId":"kanjitp"},"content":"     * @throws DialogException dialog cannot have the same id while the app is running","lastModifiedDate":"2021-08-29"},{"lineNumber":66,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":67,"author":{"gitId":"kanjitp"},"content":"    public Storage(String fileName) throws DialogException {","lastModifiedDate":"2021-08-28"},{"lineNumber":68,"author":{"gitId":"kanjitp"},"content":"        try {","lastModifiedDate":"2021-08-28"},{"lineNumber":69,"author":{"gitId":"kanjitp"},"content":"            if (!haveSaveLocation()) {","lastModifiedDate":"2021-08-29"},{"lineNumber":70,"author":{"gitId":"kanjitp"},"content":"                createSaveLocation();","lastModifiedDate":"2021-08-29"},{"lineNumber":71,"author":{"gitId":"kanjitp"},"content":"            }","lastModifiedDate":"2021-08-28"},{"lineNumber":72,"author":{"gitId":"kanjitp"},"content":"            // the save file to be used as simple text file in this update","lastModifiedDate":"2021-08-29"},{"lineNumber":73,"author":{"gitId":"kanjitp"},"content":"            this.filePath \u003d DIRECTORY_PATH + DATA_PATH + \"/\" + fileName + \".txt\";","lastModifiedDate":"2021-08-29"},{"lineNumber":74,"author":{"gitId":"kanjitp"},"content":"            WRITER \u003d new BufferedWriter(new FileWriter(filePath, true));","lastModifiedDate":"2021-08-28"},{"lineNumber":75,"author":{"gitId":"kanjitp"},"content":"            READER \u003d new BufferedReader(new FileReader(filePath));","lastModifiedDate":"2021-08-28"},{"lineNumber":76,"author":{"gitId":"kanjitp"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-08-28"},{"lineNumber":77,"author":{"gitId":"kanjitp"},"content":"            Ui.printError(e);","lastModifiedDate":"2021-08-28"},{"lineNumber":78,"author":{"gitId":"kanjitp"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":79,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":80,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":81,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":82,"author":{"gitId":"kanjitp"},"content":"     * check if within the data folder of alice contain the following fileName or not","lastModifiedDate":"2021-08-29"},{"lineNumber":83,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":84,"author":{"gitId":"kanjitp"},"content":"     * @param fileName the file name of the file in data folder","lastModifiedDate":"2021-08-29"},{"lineNumber":85,"author":{"gitId":"kanjitp"},"content":"     * @return if the file name exist or not","lastModifiedDate":"2021-08-29"},{"lineNumber":86,"author":{"gitId":"kanjitp"},"content":"     * @throws IOException if there is any error dealing with the system IO","lastModifiedDate":"2021-08-29"},{"lineNumber":87,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":88,"author":{"gitId":"kanjitp"},"content":"    public static boolean contains(String fileName) throws IOException {","lastModifiedDate":"2021-08-28"},{"lineNumber":89,"author":{"gitId":"kanjitp"},"content":"        String full_file_name \u003d fileName + \".txt\";","lastModifiedDate":"2021-08-28"},{"lineNumber":90,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":91,"author":{"gitId":"kanjitp"},"content":"        if (!haveSaveLocation()) {","lastModifiedDate":"2021-08-29"},{"lineNumber":92,"author":{"gitId":"kanjitp"},"content":"            createSaveLocation();","lastModifiedDate":"2021-08-29"},{"lineNumber":93,"author":{"gitId":"kanjitp"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":94,"author":{"gitId":"kanjitp"},"content":"        return new ArrayList\u003c\u003e(Arrays.stream(Storage.getFilesFromDirectory(Storage.DIRECTORY_PATH + Storage.DATA_PATH))","lastModifiedDate":"2021-08-29"},{"lineNumber":95,"author":{"gitId":"kanjitp"},"content":"                .map(File::getName).collect(Collectors.toList())).contains(full_file_name);","lastModifiedDate":"2021-08-29"},{"lineNumber":96,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":97,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":98,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":99,"author":{"gitId":"kanjitp"},"content":"     * load taskList from where the reader and writer is currently at","lastModifiedDate":"2021-08-29"},{"lineNumber":100,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":101,"author":{"gitId":"kanjitp"},"content":"     * @return TaskList read from the save file","lastModifiedDate":"2021-08-29"},{"lineNumber":102,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":103,"author":{"gitId":"kanjitp"},"content":"    public TaskList load() {","lastModifiedDate":"2021-08-28"},{"lineNumber":104,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":105,"author":{"gitId":"kanjitp"},"content":"        taskListRead \u003d new TaskList();","lastModifiedDate":"2021-08-28"},{"lineNumber":106,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":107,"author":{"gitId":"kanjitp"},"content":"        READER.lines().forEach((line) -\u003e {","lastModifiedDate":"2021-08-28"},{"lineNumber":108,"author":{"gitId":"kanjitp"},"content":"            TaskList.TaskType type \u003d Parser.stringToTaskType(line.substring(0, 2));","lastModifiedDate":"2021-08-28"},{"lineNumber":109,"author":{"gitId":"kanjitp"},"content":"            int index1 \u003d line.indexOf(\"|\");","lastModifiedDate":"2021-08-28"},{"lineNumber":110,"author":{"gitId":"kanjitp"},"content":"            String isDoneString \u003d line.substring(index1 + 2, index1 + 3);","lastModifiedDate":"2021-08-28"},{"lineNumber":111,"author":{"gitId":"kanjitp"},"content":"            int index2 \u003d line.indexOf(\"|\", index1 + 1);","lastModifiedDate":"2021-08-28"},{"lineNumber":112,"author":{"gitId":"kanjitp"},"content":"            String description;","lastModifiedDate":"2021-08-28"},{"lineNumber":113,"author":{"gitId":"kanjitp"},"content":"            String time \u003d \"\";","lastModifiedDate":"2021-08-28"},{"lineNumber":114,"author":{"gitId":"kanjitp"},"content":"            if (type \u003d\u003d TaskList.TaskType.DEADLINE || type \u003d\u003d TaskList.TaskType.EVENT) {","lastModifiedDate":"2021-08-28"},{"lineNumber":115,"author":{"gitId":"kanjitp"},"content":"                int index3 \u003d line.indexOf(\"|\", index2 + 1);","lastModifiedDate":"2021-08-28"},{"lineNumber":116,"author":{"gitId":"kanjitp"},"content":"                description \u003d line.substring(index2 + 2, index3 - 1);","lastModifiedDate":"2021-08-28"},{"lineNumber":117,"author":{"gitId":"kanjitp"},"content":"                time \u003d line.substring(index3 + 2);","lastModifiedDate":"2021-08-28"},{"lineNumber":118,"author":{"gitId":"kanjitp"},"content":"            } else {","lastModifiedDate":"2021-08-28"},{"lineNumber":119,"author":{"gitId":"kanjitp"},"content":"                description \u003d line.substring(index2 + 2);","lastModifiedDate":"2021-08-28"},{"lineNumber":120,"author":{"gitId":"kanjitp"},"content":"            }","lastModifiedDate":"2021-08-28"},{"lineNumber":121,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":122,"author":{"gitId":"kanjitp"},"content":"            TaskList.addTaskByType(taskListRead, type, isDoneString.equals(\"1\"), description, time);","lastModifiedDate":"2021-08-28"},{"lineNumber":123,"author":{"gitId":"kanjitp"},"content":"        });","lastModifiedDate":"2021-08-28"},{"lineNumber":124,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":125,"author":{"gitId":"kanjitp"},"content":"        return taskListRead;","lastModifiedDate":"2021-08-28"},{"lineNumber":126,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":127,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":128,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":129,"author":{"gitId":"kanjitp"},"content":"     * Return folder from the specified file path","lastModifiedDate":"2021-08-29"},{"lineNumber":130,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":131,"author":{"gitId":"kanjitp"},"content":"     * @param folderPath the folder path","lastModifiedDate":"2021-08-29"},{"lineNumber":132,"author":{"gitId":"kanjitp"},"content":"     * @return the folder as File","lastModifiedDate":"2021-08-29"},{"lineNumber":133,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":134,"author":{"gitId":"kanjitp"},"content":"    public static File getFolderFromPath(String folderPath) {","lastModifiedDate":"2021-08-29"},{"lineNumber":135,"author":{"gitId":"kanjitp"},"content":"        return new File(folderPath);","lastModifiedDate":"2021-08-29"},{"lineNumber":136,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":137,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":138,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":139,"author":{"gitId":"kanjitp"},"content":"     * Return an array of files from a directory from the file path","lastModifiedDate":"2021-08-29"},{"lineNumber":140,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":141,"author":{"gitId":"kanjitp"},"content":"     * @param folderPath the file path of the directory","lastModifiedDate":"2021-08-29"},{"lineNumber":142,"author":{"gitId":"kanjitp"},"content":"     * @return File[] of the files in the folder including hidden files","lastModifiedDate":"2021-08-29"},{"lineNumber":143,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":144,"author":{"gitId":"kanjitp"},"content":"    public static File[] getFilesFromDirectory(String folderPath) {","lastModifiedDate":"2021-08-29"},{"lineNumber":145,"author":{"gitId":"kanjitp"},"content":"        return new File(folderPath).listFiles();","lastModifiedDate":"2021-08-29"},{"lineNumber":146,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":147,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":148,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":149,"author":{"gitId":"kanjitp"},"content":"     * Check if the directory to store the save file exist or not","lastModifiedDate":"2021-08-29"},{"lineNumber":150,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":151,"author":{"gitId":"kanjitp"},"content":"     * @return whether the directory path and the folder for the save file exist or not","lastModifiedDate":"2021-08-29"},{"lineNumber":152,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":153,"author":{"gitId":"kanjitp"},"content":"    public static boolean haveSaveLocation() {","lastModifiedDate":"2021-08-29"},{"lineNumber":154,"author":{"gitId":"kanjitp"},"content":"        return java.nio.file.Files.exists(Paths.get(DIRECTORY_PATH)) \u0026\u0026 java.nio.file.Files.exists(Paths.get(DIRECTORY_PATH + DATA_PATH));","lastModifiedDate":"2021-08-29"},{"lineNumber":155,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":156,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":157,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":158,"author":{"gitId":"kanjitp"},"content":"     * Create save location from the directory to the folder to store the save files","lastModifiedDate":"2021-08-29"},{"lineNumber":159,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":160,"author":{"gitId":"kanjitp"},"content":"     * @throws IOException if there is any error dealing with the system IO","lastModifiedDate":"2021-08-29"},{"lineNumber":161,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":162,"author":{"gitId":"kanjitp"},"content":"    public static void createSaveLocation() throws IOException {","lastModifiedDate":"2021-08-29"},{"lineNumber":163,"author":{"gitId":"kanjitp"},"content":"        if (!haveSaveLocation()) {","lastModifiedDate":"2021-08-29"},{"lineNumber":164,"author":{"gitId":"kanjitp"},"content":"            if (!java.nio.file.Files.exists(Paths.get(Storage.DIRECTORY_PATH))) {","lastModifiedDate":"2021-08-29"},{"lineNumber":165,"author":{"gitId":"kanjitp"},"content":"                Files.createDirectory(Paths.get(Storage.DIRECTORY_PATH));","lastModifiedDate":"2021-08-29"},{"lineNumber":166,"author":{"gitId":"kanjitp"},"content":"            }","lastModifiedDate":"2021-08-29"},{"lineNumber":167,"author":{"gitId":"kanjitp"},"content":"            if (!java.nio.file.Files.exists(Paths.get(Storage.DIRECTORY_PATH + Storage.DATA_PATH))) {","lastModifiedDate":"2021-08-29"},{"lineNumber":168,"author":{"gitId":"kanjitp"},"content":"                Files.createDirectory(Paths.get(Storage.DIRECTORY_PATH + Storage.DATA_PATH));","lastModifiedDate":"2021-08-29"},{"lineNumber":169,"author":{"gitId":"kanjitp"},"content":"            }","lastModifiedDate":"2021-08-29"},{"lineNumber":170,"author":{"gitId":"kanjitp"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":171,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":172,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":173,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":174,"author":{"gitId":"kanjitp"},"content":"     * Store the taskList into the save file the reader and writer are currently at","lastModifiedDate":"2021-08-29"},{"lineNumber":175,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":176,"author":{"gitId":"kanjitp"},"content":"     * @param taskList the taskList to be stored","lastModifiedDate":"2021-08-29"},{"lineNumber":177,"author":{"gitId":"kanjitp"},"content":"     * @throws IOException if there is any error dealing with the system IO","lastModifiedDate":"2021-08-29"},{"lineNumber":178,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":179,"author":{"gitId":"kanjitp"},"content":"    public void save(TaskList taskList) throws IOException {","lastModifiedDate":"2021-08-28"},{"lineNumber":180,"author":{"gitId":"kanjitp"},"content":"        Path path \u003d Paths.get(filePath);","lastModifiedDate":"2021-08-28"},{"lineNumber":181,"author":{"gitId":"kanjitp"},"content":"        List\u003cString\u003e fileContent \u003d taskList.getTasks().stream().map(Parser::taskToSaveFormat).collect(Collectors.toList());","lastModifiedDate":"2021-08-28"},{"lineNumber":182,"author":{"gitId":"kanjitp"},"content":"        Files.write(path, fileContent, StandardCharsets.UTF_8);","lastModifiedDate":"2021-08-28"},{"lineNumber":183,"author":{"gitId":"kanjitp"},"content":"        READER.close();","lastModifiedDate":"2021-08-28"},{"lineNumber":184,"author":{"gitId":"kanjitp"},"content":"        WRITER.close();","lastModifiedDate":"2021-08-28"},{"lineNumber":185,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":186,"author":{"gitId":"kanjitp"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"kanjitp":186}},{"path":"src/main/java/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kanjitp"},"content":"package task;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"kanjitp"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-27"},{"lineNumber":4,"author":{"gitId":"kanjitp"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-27"},{"lineNumber":5,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"kanjitp"},"content":"/**","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"kanjitp"},"content":" * Class for Deadline with specific time for when task is due","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"kanjitp"},"content":" *","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"kanjitp"},"content":" * @author Kan Jitpakdi","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"kanjitp"},"content":" * @author GitHub: kanjitp","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"kanjitp"},"content":" * @version 0.01","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"kanjitp"},"content":" * @since 0.00","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"kanjitp"},"content":" */","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"kanjitp"},"content":"public class Deadline extends TimeTask {","lastModifiedDate":"2021-08-27"},{"lineNumber":15,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"kanjitp"},"content":"     * Default constructor for deadline.","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"kanjitp"},"content":"     * isDone is set to false and time is set to null.","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"kanjitp"},"content":"     * @param description the description of the deadline","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"kanjitp"},"content":"    public Deadline(String description) {","lastModifiedDate":"2021-08-27"},{"lineNumber":22,"author":{"gitId":"kanjitp"},"content":"        super(description);","lastModifiedDate":"2021-08-19"},{"lineNumber":23,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":24,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"kanjitp"},"content":"     * Default constructor for deadline.","lastModifiedDate":"2021-08-29"},{"lineNumber":27,"author":{"gitId":"kanjitp"},"content":"     * time is set to null.","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"kanjitp"},"content":"     * @param description the description of the deadline","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"kanjitp"},"content":"     * @param isDone      whether the deadline is done","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"kanjitp"},"content":"    public Deadline(String description, boolean isDone) {","lastModifiedDate":"2021-08-27"},{"lineNumber":33,"author":{"gitId":"kanjitp"},"content":"        super(description, isDone);","lastModifiedDate":"2021-08-27"},{"lineNumber":34,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":35,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":36,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":37,"author":{"gitId":"kanjitp"},"content":"     * Default constructor for deadline.","lastModifiedDate":"2021-08-29"},{"lineNumber":38,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":39,"author":{"gitId":"kanjitp"},"content":"     * @param description the description of the deadline","lastModifiedDate":"2021-08-29"},{"lineNumber":40,"author":{"gitId":"kanjitp"},"content":"     * @param isDone      whether the deadline is done","lastModifiedDate":"2021-08-29"},{"lineNumber":41,"author":{"gitId":"kanjitp"},"content":"     * @param time        the LocalDate time object of the deadline","lastModifiedDate":"2021-08-29"},{"lineNumber":42,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":43,"author":{"gitId":"kanjitp"},"content":"    public Deadline(String description, boolean isDone, LocalDate time) {","lastModifiedDate":"2021-08-27"},{"lineNumber":44,"author":{"gitId":"kanjitp"},"content":"        super(description, isDone, time);","lastModifiedDate":"2021-08-27"},{"lineNumber":45,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":46,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":47,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":48,"author":{"gitId":"kanjitp"},"content":"     * Adapted constructor for deadline.","lastModifiedDate":"2021-08-29"},{"lineNumber":49,"author":{"gitId":"kanjitp"},"content":"     * isDone is set to false.","lastModifiedDate":"2021-08-29"},{"lineNumber":50,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":51,"author":{"gitId":"kanjitp"},"content":"     * @param description the description of the deadline.","lastModifiedDate":"2021-08-29"},{"lineNumber":52,"author":{"gitId":"kanjitp"},"content":"     * @param by          the time of the event with yyyy-MM-dd format","lastModifiedDate":"2021-08-29"},{"lineNumber":53,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":54,"author":{"gitId":"kanjitp"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2021-08-27"},{"lineNumber":55,"author":{"gitId":"kanjitp"},"content":"        super(description, by);","lastModifiedDate":"2021-08-27"},{"lineNumber":56,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":57,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":58,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":59,"author":{"gitId":"kanjitp"},"content":"     * Adapted constructor for deadline.","lastModifiedDate":"2021-08-29"},{"lineNumber":60,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":61,"author":{"gitId":"kanjitp"},"content":"     * @param description the description of the deadline","lastModifiedDate":"2021-08-29"},{"lineNumber":62,"author":{"gitId":"kanjitp"},"content":"     * @param isDone      whether the deadline is done","lastModifiedDate":"2021-08-29"},{"lineNumber":63,"author":{"gitId":"kanjitp"},"content":"     * @param by          the time of the event with yyyy-MM-dd format","lastModifiedDate":"2021-08-29"},{"lineNumber":64,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":65,"author":{"gitId":"kanjitp"},"content":"    public Deadline(String description, boolean isDone, String by) {","lastModifiedDate":"2021-08-27"},{"lineNumber":66,"author":{"gitId":"kanjitp"},"content":"        super(description, isDone, by);","lastModifiedDate":"2021-08-27"},{"lineNumber":67,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":68,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":69,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":70,"author":{"gitId":"kanjitp"},"content":"     * Template: \"[D][x] description (by: Month DD YYYY)\" or \"[D][ ] description (by: Month DD YYYY)\" for done","lastModifiedDate":"2021-08-29"},{"lineNumber":71,"author":{"gitId":"kanjitp"},"content":"     * and not done task respectively.","lastModifiedDate":"2021-08-29"},{"lineNumber":72,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":73,"author":{"gitId":"kanjitp"},"content":"     * @return the template above for Deadline","lastModifiedDate":"2021-08-29"},{"lineNumber":74,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":75,"author":{"gitId":"kanjitp"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":76,"author":{"gitId":"kanjitp"},"content":"    public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":77,"author":{"gitId":"kanjitp"},"content":"        return \"[D]\" + super.toString() + \"(by: \"","lastModifiedDate":"2021-08-29"},{"lineNumber":78,"author":{"gitId":"kanjitp"},"content":"                + this.getTime().format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";","lastModifiedDate":"2021-08-29"},{"lineNumber":79,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":80,"author":{"gitId":"kanjitp"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"kanjitp":80}},{"path":"src/main/java/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kanjitp"},"content":"package task;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"kanjitp"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-27"},{"lineNumber":4,"author":{"gitId":"kanjitp"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-27"},{"lineNumber":5,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"kanjitp"},"content":"/**","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"kanjitp"},"content":" * Class for Event with specific time for when the event is occurring.","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"kanjitp"},"content":" *","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"kanjitp"},"content":" * @author Kan Jitpakdi","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"kanjitp"},"content":" * @author GitHub: kanjitp","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"kanjitp"},"content":" * @version 0.01","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"kanjitp"},"content":" * @since 0.00","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"kanjitp"},"content":" */","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"kanjitp"},"content":"public class Event extends TimeTask {","lastModifiedDate":"2021-08-27"},{"lineNumber":15,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"kanjitp"},"content":"     * Default constructor for Event.","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"kanjitp"},"content":"     * isDone is set to false and time is set to null.","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"kanjitp"},"content":"     * @param description the description fo the event","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"kanjitp"},"content":"    public Event(String description) {","lastModifiedDate":"2021-08-27"},{"lineNumber":22,"author":{"gitId":"kanjitp"},"content":"        super(description);","lastModifiedDate":"2021-08-19"},{"lineNumber":23,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":24,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"kanjitp"},"content":"     * Default constructor for Event.","lastModifiedDate":"2021-08-29"},{"lineNumber":27,"author":{"gitId":"kanjitp"},"content":"     * time is set to null.","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"kanjitp"},"content":"     * @param description the description of the event","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"kanjitp"},"content":"     * @param isDone      whether the event is done","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"kanjitp"},"content":"    public Event(String description, boolean isDone) {","lastModifiedDate":"2021-08-27"},{"lineNumber":33,"author":{"gitId":"kanjitp"},"content":"        super(description, isDone);","lastModifiedDate":"2021-08-27"},{"lineNumber":34,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":35,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":36,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":37,"author":{"gitId":"kanjitp"},"content":"     * Default constructor for Event.","lastModifiedDate":"2021-08-29"},{"lineNumber":38,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":39,"author":{"gitId":"kanjitp"},"content":"     * @param description the description of the event","lastModifiedDate":"2021-08-29"},{"lineNumber":40,"author":{"gitId":"kanjitp"},"content":"     * @param isDone      whether the event is done","lastModifiedDate":"2021-08-29"},{"lineNumber":41,"author":{"gitId":"kanjitp"},"content":"     * @param time        LocalDate object time of the event","lastModifiedDate":"2021-08-29"},{"lineNumber":42,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":43,"author":{"gitId":"kanjitp"},"content":"    public Event(String description, boolean isDone, LocalDate time) {","lastModifiedDate":"2021-08-27"},{"lineNumber":44,"author":{"gitId":"kanjitp"},"content":"        super(description, isDone, time);","lastModifiedDate":"2021-08-27"},{"lineNumber":45,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":46,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":47,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":48,"author":{"gitId":"kanjitp"},"content":"     * Adapted constructor for Event.","lastModifiedDate":"2021-08-29"},{"lineNumber":49,"author":{"gitId":"kanjitp"},"content":"     * isDone is set to false.","lastModifiedDate":"2021-08-29"},{"lineNumber":50,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":51,"author":{"gitId":"kanjitp"},"content":"     * @param description the description of the event","lastModifiedDate":"2021-08-29"},{"lineNumber":52,"author":{"gitId":"kanjitp"},"content":"     * @param at          the time of the event with yyyy-MM-dd format","lastModifiedDate":"2021-08-29"},{"lineNumber":53,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":54,"author":{"gitId":"kanjitp"},"content":"    public Event(String description, String at) {","lastModifiedDate":"2021-08-27"},{"lineNumber":55,"author":{"gitId":"kanjitp"},"content":"        super(description, at);","lastModifiedDate":"2021-08-27"},{"lineNumber":56,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":57,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":58,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":59,"author":{"gitId":"kanjitp"},"content":"     * Adapted constructor for Event.","lastModifiedDate":"2021-08-29"},{"lineNumber":60,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":61,"author":{"gitId":"kanjitp"},"content":"     * @param description the description of the event","lastModifiedDate":"2021-08-29"},{"lineNumber":62,"author":{"gitId":"kanjitp"},"content":"     * @param isDone      whether the event is done","lastModifiedDate":"2021-08-29"},{"lineNumber":63,"author":{"gitId":"kanjitp"},"content":"     * @param at          the time of the event with yyyy-MM-dd format","lastModifiedDate":"2021-08-29"},{"lineNumber":64,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":65,"author":{"gitId":"kanjitp"},"content":"    public Event(String description, boolean isDone, String at) {","lastModifiedDate":"2021-08-27"},{"lineNumber":66,"author":{"gitId":"kanjitp"},"content":"        super(description, isDone, at);","lastModifiedDate":"2021-08-27"},{"lineNumber":67,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":68,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":69,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":70,"author":{"gitId":"kanjitp"},"content":"     * Template: \"[E][x] description (at: Month DD YYYY)\" or \"[E][ ] description (at: Month DD YYYY)\" for done","lastModifiedDate":"2021-08-29"},{"lineNumber":71,"author":{"gitId":"kanjitp"},"content":"     * and not done task respectively.","lastModifiedDate":"2021-08-29"},{"lineNumber":72,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":73,"author":{"gitId":"kanjitp"},"content":"     * @return the template above for Event","lastModifiedDate":"2021-08-29"},{"lineNumber":74,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":75,"author":{"gitId":"kanjitp"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":76,"author":{"gitId":"kanjitp"},"content":"    public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":77,"author":{"gitId":"kanjitp"},"content":"        return \"[E]\" + super.toString() + \"(at: \" + this.getTime().format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";","lastModifiedDate":"2021-08-27"},{"lineNumber":78,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":79,"author":{"gitId":"kanjitp"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"kanjitp":79}},{"path":"src/main/java/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kanjitp"},"content":"package task;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"kanjitp"},"content":"/**","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"kanjitp"},"content":" * Abstract class for Task.","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"kanjitp"},"content":" * The task is made of description and whether it is done or not.","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"kanjitp"},"content":" *","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"kanjitp"},"content":" * @author Kan Jitpakdi","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"kanjitp"},"content":" * @author GitHub: kanjitp","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"kanjitp"},"content":" * @version 0.01","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"kanjitp"},"content":" * @since 0.00","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"kanjitp"},"content":" */","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"kanjitp"},"content":"public abstract class Task {","lastModifiedDate":"2021-08-27"},{"lineNumber":13,"author":{"gitId":"kanjitp"},"content":"    private String description;","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"kanjitp"},"content":"    private boolean isDone;","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"kanjitp"},"content":"     * Default constructor for Task to be used by its subclasses for convenience.","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"kanjitp"},"content":"     * Abstract Task cannot be created.","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"kanjitp"},"content":"     * isDone is set to false by default.","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"kanjitp"},"content":"     * @param description the description of the task","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"kanjitp"},"content":"    public Task(String description) {","lastModifiedDate":"2021-08-19"},{"lineNumber":24,"author":{"gitId":"kanjitp"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-19"},{"lineNumber":25,"author":{"gitId":"kanjitp"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-19"},{"lineNumber":26,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":27,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":28,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"kanjitp"},"content":"     * Default constructor for Task to be used by its subclasses for convenience.","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"kanjitp"},"content":"     * Abstract Task cannot be created.","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"kanjitp"},"content":"     * @param description the description of the task","lastModifiedDate":"2021-08-29"},{"lineNumber":33,"author":{"gitId":"kanjitp"},"content":"     * @param isDone      whether the task is done","lastModifiedDate":"2021-08-29"},{"lineNumber":34,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":35,"author":{"gitId":"kanjitp"},"content":"    public Task(String description, boolean isDone) {","lastModifiedDate":"2021-08-27"},{"lineNumber":36,"author":{"gitId":"kanjitp"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-27"},{"lineNumber":37,"author":{"gitId":"kanjitp"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2021-08-27"},{"lineNumber":38,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":39,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":40,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":41,"author":{"gitId":"kanjitp"},"content":"     * Getter for isDone.","lastModifiedDate":"2021-08-29"},{"lineNumber":42,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":43,"author":{"gitId":"kanjitp"},"content":"     * @return isDone boolean of the task","lastModifiedDate":"2021-08-29"},{"lineNumber":44,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":45,"author":{"gitId":"kanjitp"},"content":"    public boolean isDone() {","lastModifiedDate":"2021-08-29"},{"lineNumber":46,"author":{"gitId":"kanjitp"},"content":"        return this.isDone;","lastModifiedDate":"2021-08-29"},{"lineNumber":47,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":48,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":49,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":50,"author":{"gitId":"kanjitp"},"content":"     * Getter for description.","lastModifiedDate":"2021-08-29"},{"lineNumber":51,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":52,"author":{"gitId":"kanjitp"},"content":"     * @return description of the task","lastModifiedDate":"2021-08-29"},{"lineNumber":53,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":54,"author":{"gitId":"kanjitp"},"content":"    public String description() {","lastModifiedDate":"2021-08-29"},{"lineNumber":55,"author":{"gitId":"kanjitp"},"content":"        return this.description;","lastModifiedDate":"2021-08-29"},{"lineNumber":56,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":57,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":58,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":59,"author":{"gitId":"kanjitp"},"content":"     * Return a string representation of isDone boolean.","lastModifiedDate":"2021-08-29"},{"lineNumber":60,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":61,"author":{"gitId":"kanjitp"},"content":"     * @return X for true (done) and \" \" for false (not done)","lastModifiedDate":"2021-08-29"},{"lineNumber":62,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":63,"author":{"gitId":"kanjitp"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-19"},{"lineNumber":64,"author":{"gitId":"kanjitp"},"content":"        return (isDone ? \"X\" : \" \");","lastModifiedDate":"2021-08-19"},{"lineNumber":65,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":66,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":67,"author":{"gitId":"kanjitp"},"content":"    /** mark the current task as done. */","lastModifiedDate":"2021-08-29"},{"lineNumber":68,"author":{"gitId":"kanjitp"},"content":"    public void markAsDone() {","lastModifiedDate":"2021-08-19"},{"lineNumber":69,"author":{"gitId":"kanjitp"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-08-19"},{"lineNumber":70,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":71,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":72,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":73,"author":{"gitId":"kanjitp"},"content":"     * Template: \"[x] description\" or \"[ ] description\" for done and not done task respectively.","lastModifiedDate":"2021-08-29"},{"lineNumber":74,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":75,"author":{"gitId":"kanjitp"},"content":"     * @return the template of the string representation of task","lastModifiedDate":"2021-08-29"},{"lineNumber":76,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":77,"author":{"gitId":"kanjitp"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":78,"author":{"gitId":"kanjitp"},"content":"    public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":79,"author":{"gitId":"kanjitp"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + this.description;","lastModifiedDate":"2021-08-19"},{"lineNumber":80,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":81,"author":{"gitId":"kanjitp"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"kanjitp":81}},{"path":"src/main/java/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kanjitp"},"content":"package task;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"kanjitp"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"kanjitp"},"content":"/**","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"kanjitp"},"content":" * Class for dealing with a list of tasks object or its subclasses alternatives.","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"kanjitp"},"content":" *","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"kanjitp"},"content":" * @author Kan Jitpakdi","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"kanjitp"},"content":" * @author GitHub: kanjitp","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"kanjitp"},"content":" * @version 0.01","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"kanjitp"},"content":" * @since 0.00","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"kanjitp"},"content":" */","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"kanjitp"},"content":"public class TaskList {","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"kanjitp"},"content":"    /** ArrayList containing the tasks */","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"kanjitp"},"content":"    private final ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"kanjitp"},"content":"     * enum for type of tasks available.","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"kanjitp"},"content":"    public enum TaskType {","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"kanjitp"},"content":"        TODO, DEADLINE, EVENT","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"kanjitp"},"content":"     * default constructor for TaskList","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":27,"author":{"gitId":"kanjitp"},"content":"    public TaskList() {","lastModifiedDate":"2021-08-28"},{"lineNumber":28,"author":{"gitId":"kanjitp"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-28"},{"lineNumber":29,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":30,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":31,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"kanjitp"},"content":"     * Default constructor for TaskList","lastModifiedDate":"2021-08-29"},{"lineNumber":33,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":34,"author":{"gitId":"kanjitp"},"content":"     * @param tasks the arraylist of the tasks","lastModifiedDate":"2021-08-29"},{"lineNumber":35,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":36,"author":{"gitId":"kanjitp"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2021-08-28"},{"lineNumber":37,"author":{"gitId":"kanjitp"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2021-08-28"},{"lineNumber":38,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":39,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":40,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":41,"author":{"gitId":"kanjitp"},"content":"     * Add the task to the taskList","lastModifiedDate":"2021-08-29"},{"lineNumber":42,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":43,"author":{"gitId":"kanjitp"},"content":"     * @param task the task to be added.","lastModifiedDate":"2021-08-29"},{"lineNumber":44,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":45,"author":{"gitId":"kanjitp"},"content":"    public void add(Task task) {","lastModifiedDate":"2021-08-28"},{"lineNumber":46,"author":{"gitId":"kanjitp"},"content":"        tasks.add(task);","lastModifiedDate":"2021-08-28"},{"lineNumber":47,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":48,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":49,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":50,"author":{"gitId":"kanjitp"},"content":"     * Remove the task at given index","lastModifiedDate":"2021-08-29"},{"lineNumber":51,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":52,"author":{"gitId":"kanjitp"},"content":"     * @param index index of the task to be removed","lastModifiedDate":"2021-08-29"},{"lineNumber":53,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":54,"author":{"gitId":"kanjitp"},"content":"    public void remove(int index) {","lastModifiedDate":"2021-08-28"},{"lineNumber":55,"author":{"gitId":"kanjitp"},"content":"        tasks.remove(index);","lastModifiedDate":"2021-08-28"},{"lineNumber":56,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":57,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":58,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":59,"author":{"gitId":"kanjitp"},"content":"     * Return the task at specific index.","lastModifiedDate":"2021-08-29"},{"lineNumber":60,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":61,"author":{"gitId":"kanjitp"},"content":"     * @param index index of the task","lastModifiedDate":"2021-08-29"},{"lineNumber":62,"author":{"gitId":"kanjitp"},"content":"     * @return the task at that index","lastModifiedDate":"2021-08-29"},{"lineNumber":63,"author":{"gitId":"kanjitp"},"content":"     * @throws IndexOutOfBoundsException if the index is invalid","lastModifiedDate":"2021-08-29"},{"lineNumber":64,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":65,"author":{"gitId":"kanjitp"},"content":"    public Task get(int index) throws IndexOutOfBoundsException {","lastModifiedDate":"2021-08-28"},{"lineNumber":66,"author":{"gitId":"kanjitp"},"content":"        return tasks.get(index);","lastModifiedDate":"2021-08-28"},{"lineNumber":67,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":68,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":69,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":70,"author":{"gitId":"kanjitp"},"content":"     * Getter for the array list of tasks","lastModifiedDate":"2021-08-29"},{"lineNumber":71,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":72,"author":{"gitId":"kanjitp"},"content":"     * @return ArrayList of Task objects or its alternatives","lastModifiedDate":"2021-08-29"},{"lineNumber":73,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":74,"author":{"gitId":"kanjitp"},"content":"    public ArrayList\u003cTask\u003e getTasks() {","lastModifiedDate":"2021-08-28"},{"lineNumber":75,"author":{"gitId":"kanjitp"},"content":"        return this.tasks;","lastModifiedDate":"2021-08-28"},{"lineNumber":76,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":77,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":78,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":79,"author":{"gitId":"kanjitp"},"content":"     * Getter for length of the list of tasks.","lastModifiedDate":"2021-08-29"},{"lineNumber":80,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":81,"author":{"gitId":"kanjitp"},"content":"     * @return the length of the tasks","lastModifiedDate":"2021-08-29"},{"lineNumber":82,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":83,"author":{"gitId":"kanjitp"},"content":"    public int length() {","lastModifiedDate":"2021-08-28"},{"lineNumber":84,"author":{"gitId":"kanjitp"},"content":"        return tasks.size();","lastModifiedDate":"2021-08-28"},{"lineNumber":85,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":86,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":87,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":88,"author":{"gitId":"kanjitp"},"content":"     * Static helper method for manually adding the task to the specified taskList.","lastModifiedDate":"2021-08-29"},{"lineNumber":89,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":90,"author":{"gitId":"kanjitp"},"content":"     * @param taskList    the taskList to add the task to","lastModifiedDate":"2021-08-29"},{"lineNumber":91,"author":{"gitId":"kanjitp"},"content":"     * @param type        the type of the task to be added to the taskList","lastModifiedDate":"2021-08-29"},{"lineNumber":92,"author":{"gitId":"kanjitp"},"content":"     * @param isDone      whether the task should be done or not","lastModifiedDate":"2021-08-29"},{"lineNumber":93,"author":{"gitId":"kanjitp"},"content":"     * @param description the description of the task","lastModifiedDate":"2021-08-29"},{"lineNumber":94,"author":{"gitId":"kanjitp"},"content":"     * @param time        if the task is subclass of time task specify the time in yyyy-MM-dd or put empty string or null for","lastModifiedDate":"2021-08-29"},{"lineNumber":95,"author":{"gitId":"kanjitp"},"content":"     *                    non time task","lastModifiedDate":"2021-08-29"},{"lineNumber":96,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":97,"author":{"gitId":"kanjitp"},"content":"    public static void addTaskByType(TaskList taskList, TaskType type, boolean isDone, String description, String time) {","lastModifiedDate":"2021-08-29"},{"lineNumber":98,"author":{"gitId":"kanjitp"},"content":"        switch (type) {","lastModifiedDate":"2021-08-28"},{"lineNumber":99,"author":{"gitId":"kanjitp"},"content":"        case TODO:","lastModifiedDate":"2021-08-28"},{"lineNumber":100,"author":{"gitId":"kanjitp"},"content":"            taskList.add(new Todo(description, isDone));","lastModifiedDate":"2021-08-29"},{"lineNumber":101,"author":{"gitId":"kanjitp"},"content":"            break;","lastModifiedDate":"2021-08-28"},{"lineNumber":102,"author":{"gitId":"kanjitp"},"content":"        case EVENT:","lastModifiedDate":"2021-08-28"},{"lineNumber":103,"author":{"gitId":"kanjitp"},"content":"            taskList.add(new Event(description, isDone, time));","lastModifiedDate":"2021-08-29"},{"lineNumber":104,"author":{"gitId":"kanjitp"},"content":"            break;","lastModifiedDate":"2021-08-28"},{"lineNumber":105,"author":{"gitId":"kanjitp"},"content":"        case DEADLINE:","lastModifiedDate":"2021-08-28"},{"lineNumber":106,"author":{"gitId":"kanjitp"},"content":"            taskList.add(new Deadline(description, isDone, time));","lastModifiedDate":"2021-08-29"},{"lineNumber":107,"author":{"gitId":"kanjitp"},"content":"            break;","lastModifiedDate":"2021-08-28"},{"lineNumber":108,"author":{"gitId":"kanjitp"},"content":"        default:","lastModifiedDate":"2021-08-28"},{"lineNumber":109,"author":{"gitId":"kanjitp"},"content":"            throw new IllegalArgumentException(\"addTask Unsuccessful\");","lastModifiedDate":"2021-08-28"},{"lineNumber":110,"author":{"gitId":"kanjitp"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":111,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":112,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":113,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":114,"author":{"gitId":"kanjitp"},"content":"     * A list representation of the tasks numbered from 1 to the last task in the list","lastModifiedDate":"2021-08-29"},{"lineNumber":115,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":116,"author":{"gitId":"kanjitp"},"content":"     * @return string representation of the list of tasks","lastModifiedDate":"2021-08-29"},{"lineNumber":117,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":118,"author":{"gitId":"kanjitp"},"content":"    @Override","lastModifiedDate":"2021-08-28"},{"lineNumber":119,"author":{"gitId":"kanjitp"},"content":"    public String toString() {","lastModifiedDate":"2021-08-28"},{"lineNumber":120,"author":{"gitId":"kanjitp"},"content":"        StringBuilder tasksDialog \u003d new StringBuilder();","lastModifiedDate":"2021-08-28"},{"lineNumber":121,"author":{"gitId":"kanjitp"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2021-08-28"},{"lineNumber":122,"author":{"gitId":"kanjitp"},"content":"            tasksDialog.append(\"    \").append(i + 1).append(\".\").append(tasks.get(i).toString()).append(\"\\n\");","lastModifiedDate":"2021-08-28"},{"lineNumber":123,"author":{"gitId":"kanjitp"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":124,"author":{"gitId":"kanjitp"},"content":"        return tasksDialog.toString();","lastModifiedDate":"2021-08-28"},{"lineNumber":125,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":126,"author":{"gitId":"kanjitp"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"kanjitp":126}},{"path":"src/main/java/task/TimeTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kanjitp"},"content":"package task;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"kanjitp"},"content":"import parser.Parser;","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"kanjitp"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-27"},{"lineNumber":6,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":7,"author":{"gitId":"kanjitp"},"content":"/**","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"kanjitp"},"content":" * The abstract for task which has association with time.","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"kanjitp"},"content":" *","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"kanjitp"},"content":" * @author Kan Jitpakdi","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"kanjitp"},"content":" * @author GitHub: kanjitp","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"kanjitp"},"content":" * @version 0.01","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"kanjitp"},"content":" * @since 0.00","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"kanjitp"},"content":" */","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"kanjitp"},"content":"public abstract class TimeTask extends Task {","lastModifiedDate":"2021-08-27"},{"lineNumber":16,"author":{"gitId":"kanjitp"},"content":"    /** LocalDate time of the timeTask */","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"kanjitp"},"content":"    private LocalDate time;","lastModifiedDate":"2021-08-27"},{"lineNumber":18,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":19,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"kanjitp"},"content":"     * Default constructor for TimeTask.","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"kanjitp"},"content":"     * isDone is set to false and time is set to null.","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"kanjitp"},"content":"     * @param description the description of the TimeTask","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"kanjitp"},"content":"    public TimeTask(String description) {","lastModifiedDate":"2021-08-27"},{"lineNumber":26,"author":{"gitId":"kanjitp"},"content":"        super(description);","lastModifiedDate":"2021-08-27"},{"lineNumber":27,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":28,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":29,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"kanjitp"},"content":"     * Default constructor for TimeTask.","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"kanjitp"},"content":"     * time is set to null.","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":33,"author":{"gitId":"kanjitp"},"content":"     * @param description the description of the TimeTask","lastModifiedDate":"2021-08-29"},{"lineNumber":34,"author":{"gitId":"kanjitp"},"content":"     * @param isDone      whether the task is done","lastModifiedDate":"2021-08-29"},{"lineNumber":35,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":36,"author":{"gitId":"kanjitp"},"content":"    public TimeTask(String description, boolean isDone) {","lastModifiedDate":"2021-08-27"},{"lineNumber":37,"author":{"gitId":"kanjitp"},"content":"        super(description, isDone);","lastModifiedDate":"2021-08-27"},{"lineNumber":38,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":39,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":40,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":41,"author":{"gitId":"kanjitp"},"content":"     * Default constructor for TimeTask.","lastModifiedDate":"2021-08-29"},{"lineNumber":42,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":43,"author":{"gitId":"kanjitp"},"content":"     * @param description the description of the TimeTask","lastModifiedDate":"2021-08-29"},{"lineNumber":44,"author":{"gitId":"kanjitp"},"content":"     * @param isDone      whether the task is done","lastModifiedDate":"2021-08-29"},{"lineNumber":45,"author":{"gitId":"kanjitp"},"content":"     * @param time        the LocalDate time for the TimeTask","lastModifiedDate":"2021-08-29"},{"lineNumber":46,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":47,"author":{"gitId":"kanjitp"},"content":"    public TimeTask(String description, boolean isDone, LocalDate time) {","lastModifiedDate":"2021-08-27"},{"lineNumber":48,"author":{"gitId":"kanjitp"},"content":"        super(description, isDone);","lastModifiedDate":"2021-08-27"},{"lineNumber":49,"author":{"gitId":"kanjitp"},"content":"        this.time \u003d time;","lastModifiedDate":"2021-08-27"},{"lineNumber":50,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":51,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":52,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":53,"author":{"gitId":"kanjitp"},"content":"     * Adapted constructor for TimeTask.","lastModifiedDate":"2021-08-29"},{"lineNumber":54,"author":{"gitId":"kanjitp"},"content":"     * isDone is set to false.","lastModifiedDate":"2021-08-29"},{"lineNumber":55,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":56,"author":{"gitId":"kanjitp"},"content":"     * @param description the description of the TimeTask","lastModifiedDate":"2021-08-29"},{"lineNumber":57,"author":{"gitId":"kanjitp"},"content":"     * @param timeString  the time of the TimeTask with yyyy-MM-dd format","lastModifiedDate":"2021-08-29"},{"lineNumber":58,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":59,"author":{"gitId":"kanjitp"},"content":"    public TimeTask(String description, String timeString) {","lastModifiedDate":"2021-08-27"},{"lineNumber":60,"author":{"gitId":"kanjitp"},"content":"        super(description);","lastModifiedDate":"2021-08-27"},{"lineNumber":61,"author":{"gitId":"kanjitp"},"content":"        this.time \u003d Parser.parseTimeString(timeString);","lastModifiedDate":"2021-08-29"},{"lineNumber":62,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":63,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":64,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":65,"author":{"gitId":"kanjitp"},"content":"     * Adapted constructor for TimeTask.","lastModifiedDate":"2021-08-29"},{"lineNumber":66,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":67,"author":{"gitId":"kanjitp"},"content":"     * @param description the description of the TimeTask","lastModifiedDate":"2021-08-29"},{"lineNumber":68,"author":{"gitId":"kanjitp"},"content":"     * @param isDone      whether the task is done","lastModifiedDate":"2021-08-29"},{"lineNumber":69,"author":{"gitId":"kanjitp"},"content":"     * @param timeString  the time of the TimeTask with yyyy-MM-dd format","lastModifiedDate":"2021-08-29"},{"lineNumber":70,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":71,"author":{"gitId":"kanjitp"},"content":"    public TimeTask(String description, boolean isDone, String timeString) {","lastModifiedDate":"2021-08-27"},{"lineNumber":72,"author":{"gitId":"kanjitp"},"content":"        super(description, isDone);","lastModifiedDate":"2021-08-27"},{"lineNumber":73,"author":{"gitId":"kanjitp"},"content":"        this.time \u003d Parser.parseTimeString(timeString);","lastModifiedDate":"2021-08-29"},{"lineNumber":74,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":75,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":76,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":77,"author":{"gitId":"kanjitp"},"content":"     * Getter for time.","lastModifiedDate":"2021-08-29"},{"lineNumber":78,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":79,"author":{"gitId":"kanjitp"},"content":"     * @return LocalDate object of time","lastModifiedDate":"2021-08-29"},{"lineNumber":80,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":81,"author":{"gitId":"kanjitp"},"content":"    public LocalDate getTime() {","lastModifiedDate":"2021-08-27"},{"lineNumber":82,"author":{"gitId":"kanjitp"},"content":"        return this.time;","lastModifiedDate":"2021-08-27"},{"lineNumber":83,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":84,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":85,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":86,"author":{"gitId":"kanjitp"},"content":"     * Setter for time.","lastModifiedDate":"2021-08-29"},{"lineNumber":87,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":88,"author":{"gitId":"kanjitp"},"content":"     * @param time the LocalDate time for the TimeTask to be set to","lastModifiedDate":"2021-08-29"},{"lineNumber":89,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":90,"author":{"gitId":"kanjitp"},"content":"    public void setTime(LocalDate time) {","lastModifiedDate":"2021-08-27"},{"lineNumber":91,"author":{"gitId":"kanjitp"},"content":"        this.time \u003d time;","lastModifiedDate":"2021-08-27"},{"lineNumber":92,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":93,"author":{"gitId":"kanjitp"},"content":"}","lastModifiedDate":"2021-08-27"}],"authorContributionMap":{"kanjitp":93}},{"path":"src/main/java/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kanjitp"},"content":"package task;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"kanjitp"},"content":"/**","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"kanjitp"},"content":" * Class for simple To-Do task","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"kanjitp"},"content":" *","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"kanjitp"},"content":" * @author Kan Jitpakdi","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"kanjitp"},"content":" * @author GitHub: kanjitp","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"kanjitp"},"content":" * @version 0.01","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"kanjitp"},"content":" * @since 0.00","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"kanjitp"},"content":" */","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"kanjitp"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"kanjitp"},"content":"     * Default constructor for To-Do task","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"kanjitp"},"content":"     * @param description the description of the To-Do task","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"kanjitp"},"content":"    public Todo(String description) {","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"kanjitp"},"content":"        super(description);","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":20,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":21,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"kanjitp"},"content":"     * Default constructor for To-Do task","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"kanjitp"},"content":"     * @param description the description of the To-Do task","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"kanjitp"},"content":"     * @param isDone      whether the task is done","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":27,"author":{"gitId":"kanjitp"},"content":"    public Todo(String description, boolean isDone) {","lastModifiedDate":"2021-08-27"},{"lineNumber":28,"author":{"gitId":"kanjitp"},"content":"        super(description, isDone);","lastModifiedDate":"2021-08-27"},{"lineNumber":29,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":30,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":31,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"kanjitp"},"content":"     * Template: \"[T][x] description\" or \"[T][ ] description\" for done and not done task respectively.","lastModifiedDate":"2021-08-29"},{"lineNumber":33,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":34,"author":{"gitId":"kanjitp"},"content":"     * @return the template above for To-Do task","lastModifiedDate":"2021-08-29"},{"lineNumber":35,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":36,"author":{"gitId":"kanjitp"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":37,"author":{"gitId":"kanjitp"},"content":"    public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":38,"author":{"gitId":"kanjitp"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2021-08-19"},{"lineNumber":39,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":40,"author":{"gitId":"kanjitp"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"kanjitp":40}},{"path":"src/main/java/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kanjitp"},"content":"package ui;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"kanjitp"},"content":"import dialog.Dialog;","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"kanjitp"},"content":"import dialog.DialogException;","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"kanjitp"},"content":"import dialog.TaskDialog;","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"kanjitp"},"content":"import storage.Storage;","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"kanjitp"},"content":"import task.TaskList;","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"kanjitp"},"content":"import java.io.File;","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"kanjitp"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"kanjitp"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"kanjitp"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"kanjitp"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"kanjitp"},"content":"/**","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"kanjitp"},"content":" * The Ui class dealing with user interacting with the application and its system.","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"kanjitp"},"content":" *","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"kanjitp"},"content":" * @author Kan Jitpakdi","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"kanjitp"},"content":" * @author GitHub: kanjitp","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"kanjitp"},"content":" * @version 0.01","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"kanjitp"},"content":" * @since 0.00","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"kanjitp"},"content":" */","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"kanjitp"},"content":"public class Ui {","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"kanjitp"},"content":"    /** Scanner of the Ui - getting the input from the user */","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"kanjitp"},"content":"    public static Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":28,"author":{"gitId":"kanjitp"},"content":"    /** the latest input stored in the Ui */","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"kanjitp"},"content":"    private String input;","lastModifiedDate":"2021-08-28"},{"lineNumber":30,"author":{"gitId":"kanjitp"},"content":"    private TaskDialog taskDialog;","lastModifiedDate":"2021-08-28"},{"lineNumber":31,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":32,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":33,"author":{"gitId":"kanjitp"},"content":"     * Constructor of Ui.","lastModifiedDate":"2021-08-29"},{"lineNumber":34,"author":{"gitId":"kanjitp"},"content":"     * The Ui object should be specified of which TaskList it is supposed to import","lastModifiedDate":"2021-08-29"},{"lineNumber":35,"author":{"gitId":"kanjitp"},"content":"     * with the method importTaskList(TaskList taskList) not through the constructor.","lastModifiedDate":"2021-08-29"},{"lineNumber":36,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":37,"author":{"gitId":"kanjitp"},"content":"    public Ui() {","lastModifiedDate":"2021-08-28"},{"lineNumber":38,"author":{"gitId":"kanjitp"},"content":"        this.input \u003d \"\";","lastModifiedDate":"2021-08-28"},{"lineNumber":39,"author":{"gitId":"kanjitp"},"content":"        this.taskDialog \u003d null;","lastModifiedDate":"2021-08-29"},{"lineNumber":40,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":41,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":42,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":43,"author":{"gitId":"kanjitp"},"content":"     * Load the taskList to the Ui TaskDialog.","lastModifiedDate":"2021-08-29"},{"lineNumber":44,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":45,"author":{"gitId":"kanjitp"},"content":"     * @param taskList the taskList to be imported","lastModifiedDate":"2021-08-29"},{"lineNumber":46,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":47,"author":{"gitId":"kanjitp"},"content":"    public void importTaskList(TaskList taskList) {","lastModifiedDate":"2021-08-28"},{"lineNumber":48,"author":{"gitId":"kanjitp"},"content":"        this.taskDialog \u003d (TaskDialog) TaskDialog.generate(\"taskList: \" + taskList.hashCode(), taskList);","lastModifiedDate":"2021-08-28"},{"lineNumber":49,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":50,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":51,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":52,"author":{"gitId":"kanjitp"},"content":"     * Return the current taskDialog of the Ui object.","lastModifiedDate":"2021-08-29"},{"lineNumber":53,"author":{"gitId":"kanjitp"},"content":"     * The TaskDialog equal to null if it has not loaded a TaskList yet.","lastModifiedDate":"2021-08-29"},{"lineNumber":54,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":55,"author":{"gitId":"kanjitp"},"content":"     * @return taskDialog of the current Ui to be pass around to other method or fields","lastModifiedDate":"2021-08-29"},{"lineNumber":56,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":57,"author":{"gitId":"kanjitp"},"content":"    public TaskDialog getTaskDialog() {","lastModifiedDate":"2021-08-28"},{"lineNumber":58,"author":{"gitId":"kanjitp"},"content":"        return this.taskDialog;","lastModifiedDate":"2021-08-28"},{"lineNumber":59,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":60,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":61,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":62,"author":{"gitId":"kanjitp"},"content":"     * Static method for printing an error to the Ui.","lastModifiedDate":"2021-08-29"},{"lineNumber":63,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":64,"author":{"gitId":"kanjitp"},"content":"     * @param exception the exception with its message to be printed to the user","lastModifiedDate":"2021-08-29"},{"lineNumber":65,"author":{"gitId":"kanjitp"},"content":"     * @throws DialogException the dialog cannot have the same id while the app is running","lastModifiedDate":"2021-08-29"},{"lineNumber":66,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":67,"author":{"gitId":"kanjitp"},"content":"    public static void printError(Exception exception) throws DialogException {","lastModifiedDate":"2021-08-29"},{"lineNumber":68,"author":{"gitId":"kanjitp"},"content":"        if (Dialog.containsId(exception.toString())) {","lastModifiedDate":"2021-08-29"},{"lineNumber":69,"author":{"gitId":"kanjitp"},"content":"            System.out.println(Dialog.get(exception.toString()));","lastModifiedDate":"2021-08-29"},{"lineNumber":70,"author":{"gitId":"kanjitp"},"content":"        } else {","lastModifiedDate":"2021-08-28"},{"lineNumber":71,"author":{"gitId":"kanjitp"},"content":"            Dialog errorMessage \u003d Dialog.generate(exception.toString());","lastModifiedDate":"2021-08-29"},{"lineNumber":72,"author":{"gitId":"kanjitp"},"content":"            errorMessage.add(\"☹ OOPS!!! \" + exception.getMessage());","lastModifiedDate":"2021-08-29"},{"lineNumber":73,"author":{"gitId":"kanjitp"},"content":"            System.out.println(errorMessage);","lastModifiedDate":"2021-08-28"},{"lineNumber":74,"author":{"gitId":"kanjitp"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":75,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":76,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":77,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":78,"author":{"gitId":"kanjitp"},"content":"     * Static method for printing to the user the current save file names in the system.","lastModifiedDate":"2021-08-29"},{"lineNumber":79,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":80,"author":{"gitId":"kanjitp"},"content":"     * @throws DialogException the dialog cannot have the same id while the app is running","lastModifiedDate":"2021-08-29"},{"lineNumber":81,"author":{"gitId":"kanjitp"},"content":"     * @throws IOException     if there is any error dealing with the system IO","lastModifiedDate":"2021-08-29"},{"lineNumber":82,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":83,"author":{"gitId":"kanjitp"},"content":"    public static void printSelectSaveFile() throws DialogException, IOException {","lastModifiedDate":"2021-08-28"},{"lineNumber":84,"author":{"gitId":"kanjitp"},"content":"        String dialogId \u003d \"selectSaveFile\";","lastModifiedDate":"2021-08-28"},{"lineNumber":85,"author":{"gitId":"kanjitp"},"content":"        if (Dialog.containsId(dialogId)) {","lastModifiedDate":"2021-08-29"},{"lineNumber":86,"author":{"gitId":"kanjitp"},"content":"            System.out.println(Dialog.get(dialogId));","lastModifiedDate":"2021-08-29"},{"lineNumber":87,"author":{"gitId":"kanjitp"},"content":"        } else {","lastModifiedDate":"2021-08-28"},{"lineNumber":88,"author":{"gitId":"kanjitp"},"content":"            Dialog selectSaveFile \u003d Dialog.generate(\"selectSaveFile\");","lastModifiedDate":"2021-08-28"},{"lineNumber":89,"author":{"gitId":"kanjitp"},"content":"            selectSaveFile.add(\"Select your save file:\\n\");","lastModifiedDate":"2021-08-28"},{"lineNumber":90,"author":{"gitId":"kanjitp"},"content":"            if (!Storage.haveSaveLocation()) {","lastModifiedDate":"2021-08-29"},{"lineNumber":91,"author":{"gitId":"kanjitp"},"content":"                Storage.createSaveLocation();","lastModifiedDate":"2021-08-29"},{"lineNumber":92,"author":{"gitId":"kanjitp"},"content":"            }","lastModifiedDate":"2021-08-28"},{"lineNumber":93,"author":{"gitId":"kanjitp"},"content":"            ArrayList\u003cFile\u003e files \u003d new ArrayList\u003c\u003e(Arrays.asList(Storage.getFilesFromDirectory(","lastModifiedDate":"2021-08-29"},{"lineNumber":94,"author":{"gitId":"kanjitp"},"content":"                    Storage.DIRECTORY_PATH + Storage.DATA_PATH)));","lastModifiedDate":"2021-08-29"},{"lineNumber":95,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":96,"author":{"gitId":"kanjitp"},"content":"            int count \u003d 1;","lastModifiedDate":"2021-08-28"},{"lineNumber":97,"author":{"gitId":"kanjitp"},"content":"            for (File file : files) {","lastModifiedDate":"2021-08-29"},{"lineNumber":98,"author":{"gitId":"kanjitp"},"content":"                if (file.isFile() \u0026\u0026 !file.isHidden()) {","lastModifiedDate":"2021-08-29"},{"lineNumber":99,"author":{"gitId":"kanjitp"},"content":"                    String fullFileName \u003d file.getName();","lastModifiedDate":"2021-08-29"},{"lineNumber":100,"author":{"gitId":"kanjitp"},"content":"                    selectSaveFile.add(count + \". \" + fullFileName.substring(0, fullFileName.indexOf(\".\")));","lastModifiedDate":"2021-08-28"},{"lineNumber":101,"author":{"gitId":"kanjitp"},"content":"                    count++;","lastModifiedDate":"2021-08-28"},{"lineNumber":102,"author":{"gitId":"kanjitp"},"content":"                }","lastModifiedDate":"2021-08-28"},{"lineNumber":103,"author":{"gitId":"kanjitp"},"content":"            }","lastModifiedDate":"2021-08-28"},{"lineNumber":104,"author":{"gitId":"kanjitp"},"content":"            selectSaveFile.add(\"(input \u003cnew_file_name\u003e to create new save file)\");","lastModifiedDate":"2021-08-28"},{"lineNumber":105,"author":{"gitId":"kanjitp"},"content":"            System.out.println(selectSaveFile);","lastModifiedDate":"2021-08-28"},{"lineNumber":106,"author":{"gitId":"kanjitp"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":107,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":108,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":109,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":110,"author":{"gitId":"kanjitp"},"content":"     * Static method for printing to the user a welcome message and alice self-introduction.","lastModifiedDate":"2021-08-29"},{"lineNumber":111,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":112,"author":{"gitId":"kanjitp"},"content":"     * @throws DialogException the dialog cannot have the same id while the app is running","lastModifiedDate":"2021-08-29"},{"lineNumber":113,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":114,"author":{"gitId":"kanjitp"},"content":"    public static void showWelcome() throws DialogException {","lastModifiedDate":"2021-08-28"},{"lineNumber":115,"author":{"gitId":"kanjitp"},"content":"        Dialog greeting \u003d Dialog.generate(\"greeting\");","lastModifiedDate":"2021-08-28"},{"lineNumber":116,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":117,"author":{"gitId":"kanjitp"},"content":"        String logo \u003d \"     ___       __       __    ______  _______\\n\"","lastModifiedDate":"2021-08-29"},{"lineNumber":118,"author":{"gitId":"kanjitp"},"content":"                + \"        /   \\\\     |  |     |  |  /      ||   ____|\\n\"","lastModifiedDate":"2021-08-29"},{"lineNumber":119,"author":{"gitId":"kanjitp"},"content":"                + \"       /  ^  \\\\    |  |     |  | |  ,----\u0027|  |__\\n\"","lastModifiedDate":"2021-08-29"},{"lineNumber":120,"author":{"gitId":"kanjitp"},"content":"                + \"      /  /_\\\\  \\\\   |  |     |  | |  |     |   __|\\n\"","lastModifiedDate":"2021-08-29"},{"lineNumber":121,"author":{"gitId":"kanjitp"},"content":"                + \"     /  _____  \\\\  |  `----.|  | |  `----.|  |____\\n\"","lastModifiedDate":"2021-08-29"},{"lineNumber":122,"author":{"gitId":"kanjitp"},"content":"                + \"    /__/     \\\\__\\\\ |_______||__|  \\\\______||_______|\\n\";","lastModifiedDate":"2021-08-29"},{"lineNumber":123,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":124,"author":{"gitId":"kanjitp"},"content":"        greeting.add(logo);","lastModifiedDate":"2021-08-28"},{"lineNumber":125,"author":{"gitId":"kanjitp"},"content":"        greeting.add(\"Hello! I\u0027m Alice, your personal assistant\");","lastModifiedDate":"2021-08-28"},{"lineNumber":126,"author":{"gitId":"kanjitp"},"content":"        greeting.add(\"What can I do for you?\");","lastModifiedDate":"2021-08-28"},{"lineNumber":127,"author":{"gitId":"kanjitp"},"content":"        System.out.println(greeting);","lastModifiedDate":"2021-08-28"},{"lineNumber":128,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":129,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":130,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":131,"author":{"gitId":"kanjitp"},"content":"     * Static method for printing to the user a confirmation message if the user really want to create a new file.","lastModifiedDate":"2021-08-29"},{"lineNumber":132,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":133,"author":{"gitId":"kanjitp"},"content":"     * @param fileName the filename to be printed along with the confirmation message","lastModifiedDate":"2021-08-29"},{"lineNumber":134,"author":{"gitId":"kanjitp"},"content":"     * @throws DialogException the dialog cannot have the same id while the app is running","lastModifiedDate":"2021-08-29"},{"lineNumber":135,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":136,"author":{"gitId":"kanjitp"},"content":"    public static void showConfirmCreateNewFile(String fileName) throws DialogException {","lastModifiedDate":"2021-08-28"},{"lineNumber":137,"author":{"gitId":"kanjitp"},"content":"        String dialogId \u003d \"confirmCreateNewFile\" + fileName;","lastModifiedDate":"2021-08-28"},{"lineNumber":138,"author":{"gitId":"kanjitp"},"content":"        if (Dialog.containsId(dialogId)) {","lastModifiedDate":"2021-08-29"},{"lineNumber":139,"author":{"gitId":"kanjitp"},"content":"            System.out.println(Dialog.get(dialogId));","lastModifiedDate":"2021-08-29"},{"lineNumber":140,"author":{"gitId":"kanjitp"},"content":"        } else {","lastModifiedDate":"2021-08-28"},{"lineNumber":141,"author":{"gitId":"kanjitp"},"content":"            Dialog confirmCreate \u003d Dialog.generate(dialogId);","lastModifiedDate":"2021-08-28"},{"lineNumber":142,"author":{"gitId":"kanjitp"},"content":"            confirmCreate.add(\"Are you sure you want to create new file \" + fileName + \" [y/N]?\");","lastModifiedDate":"2021-08-28"},{"lineNumber":143,"author":{"gitId":"kanjitp"},"content":"            System.out.println(confirmCreate);","lastModifiedDate":"2021-08-28"},{"lineNumber":144,"author":{"gitId":"kanjitp"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":145,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":146,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":147,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":148,"author":{"gitId":"kanjitp"},"content":"     * Static method for showing to the user the command in which alice can perform.","lastModifiedDate":"2021-08-29"},{"lineNumber":149,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":150,"author":{"gitId":"kanjitp"},"content":"     * @throws DialogException the dialog cannot have the same id while the app is running","lastModifiedDate":"2021-08-29"},{"lineNumber":151,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":152,"author":{"gitId":"kanjitp"},"content":"    public static void showCommandList() throws DialogException {","lastModifiedDate":"2021-08-28"},{"lineNumber":153,"author":{"gitId":"kanjitp"},"content":"        String dialogId \u003d \"commands\";","lastModifiedDate":"2021-08-28"},{"lineNumber":154,"author":{"gitId":"kanjitp"},"content":"        if (Dialog.containsId(dialogId)) {","lastModifiedDate":"2021-08-29"},{"lineNumber":155,"author":{"gitId":"kanjitp"},"content":"            System.out.println(Dialog.get(dialogId));","lastModifiedDate":"2021-08-29"},{"lineNumber":156,"author":{"gitId":"kanjitp"},"content":"        } else {","lastModifiedDate":"2021-08-28"},{"lineNumber":157,"author":{"gitId":"kanjitp"},"content":"            Dialog commandsList \u003d Dialog.generate(dialogId);","lastModifiedDate":"2021-08-28"},{"lineNumber":158,"author":{"gitId":"kanjitp"},"content":"            commandsList.add(\"This is the following commands, I can perform:\\n\");","lastModifiedDate":"2021-08-28"},{"lineNumber":159,"author":{"gitId":"kanjitp"},"content":"            commandsList.add(\"1. \u0027todo \u003ctask description\u003e\u0027 - add a todo task to the list\");","lastModifiedDate":"2021-08-28"},{"lineNumber":160,"author":{"gitId":"kanjitp"},"content":"            commandsList.add(\"2. \u0027deadline \u003ctask description\u003e /by \u003cby when\u003e\u0027 \"","lastModifiedDate":"2021-08-29"},{"lineNumber":161,"author":{"gitId":"kanjitp"},"content":"                    + \"- add a deadline task with specific deadline\");","lastModifiedDate":"2021-08-29"},{"lineNumber":162,"author":{"gitId":"kanjitp"},"content":"            commandsList.add(\"3. \u0027event \u003ctask description\u003e /at \u003cat when\u003e\u0027 \"","lastModifiedDate":"2021-08-29"},{"lineNumber":163,"author":{"gitId":"kanjitp"},"content":"                    + \"- add an event task with specific time\");","lastModifiedDate":"2021-08-29"},{"lineNumber":164,"author":{"gitId":"kanjitp"},"content":"            commandsList.add(\"4. \u0027date \u003cyyyy-mm-dd\u003e\u0027 \"","lastModifiedDate":"2021-08-29"},{"lineNumber":165,"author":{"gitId":"kanjitp"},"content":"                    + \"- list all todos and all the deadlines and events before specified time\");","lastModifiedDate":"2021-08-29"},{"lineNumber":166,"author":{"gitId":"kanjitp"},"content":"            commandsList.add(\"5. \u0027list\u0027 - show the current task list\");","lastModifiedDate":"2021-08-28"},{"lineNumber":167,"author":{"gitId":"kanjitp"},"content":"            commandsList.add(\"6. \u0027find \u003ckeyword\u003e\u0027 - list the task with specific keywords\");","lastModifiedDate":"2021-08-29"},{"lineNumber":168,"author":{"gitId":"kanjitp"},"content":"            commandsList.add(\"7. \u0027done \u003ctask index\u003e\u0027 - mark that task as done\");","lastModifiedDate":"2021-08-29"},{"lineNumber":169,"author":{"gitId":"kanjitp"},"content":"            commandsList.add(\"8. \u0027delete \u003ctask index\u003e\u0027 - delete that task from the list\");","lastModifiedDate":"2021-08-29"},{"lineNumber":170,"author":{"gitId":"kanjitp"},"content":"            commandsList.add(\"9. \u0027commands\u0027 - show this current command window\");","lastModifiedDate":"2021-08-29"},{"lineNumber":171,"author":{"gitId":"kanjitp"},"content":"            commandsList.add(\"10.\u0027bye\u0027 - end session and save your task list\");","lastModifiedDate":"2021-08-29"},{"lineNumber":172,"author":{"gitId":"kanjitp"},"content":"            System.out.println(commandsList);","lastModifiedDate":"2021-08-28"},{"lineNumber":173,"author":{"gitId":"kanjitp"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":174,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":175,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":176,"author":{"gitId":"kanjitp"},"content":"    /** Print to the user the taskList stored in the Ui in a taskDialog format */","lastModifiedDate":"2021-08-29"},{"lineNumber":177,"author":{"gitId":"kanjitp"},"content":"    public void showCurrentList() {","lastModifiedDate":"2021-08-28"},{"lineNumber":178,"author":{"gitId":"kanjitp"},"content":"        System.out.println(taskDialog);","lastModifiedDate":"2021-08-28"},{"lineNumber":179,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":180,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":181,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":182,"author":{"gitId":"kanjitp"},"content":"     * Static method for printing to the user a good bye message.","lastModifiedDate":"2021-08-29"},{"lineNumber":183,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":184,"author":{"gitId":"kanjitp"},"content":"     * @throws DialogException the dialog cannot have the same id while the app is running","lastModifiedDate":"2021-08-29"},{"lineNumber":185,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":186,"author":{"gitId":"kanjitp"},"content":"    public static void showGoodBye() throws DialogException {","lastModifiedDate":"2021-08-28"},{"lineNumber":187,"author":{"gitId":"kanjitp"},"content":"        // a good bye will always be shown only once in this update","lastModifiedDate":"2021-08-29"},{"lineNumber":188,"author":{"gitId":"kanjitp"},"content":"        Dialog bye \u003d Dialog.generate(\"bye\");","lastModifiedDate":"2021-08-28"},{"lineNumber":189,"author":{"gitId":"kanjitp"},"content":"        bye.add(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2021-08-28"},{"lineNumber":190,"author":{"gitId":"kanjitp"},"content":"        System.out.println(bye);","lastModifiedDate":"2021-08-28"},{"lineNumber":191,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":192,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":193,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":194,"author":{"gitId":"kanjitp"},"content":"     * Static method for quickly asking the user to input something to the Ui without storing it into the input","lastModifiedDate":"2021-08-29"},{"lineNumber":195,"author":{"gitId":"kanjitp"},"content":"     * of the Ui and return it right away.","lastModifiedDate":"2021-08-29"},{"lineNumber":196,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":197,"author":{"gitId":"kanjitp"},"content":"     * @return the String read by the Scanner until the next line","lastModifiedDate":"2021-08-29"},{"lineNumber":198,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":199,"author":{"gitId":"kanjitp"},"content":"    public static String fastRead() {","lastModifiedDate":"2021-08-28"},{"lineNumber":200,"author":{"gitId":"kanjitp"},"content":"        System.out.print(\"\u003e \");","lastModifiedDate":"2021-08-28"},{"lineNumber":201,"author":{"gitId":"kanjitp"},"content":"        return sc.nextLine();","lastModifiedDate":"2021-08-28"},{"lineNumber":202,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":203,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":204,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":205,"author":{"gitId":"kanjitp"},"content":"     * Read the command input by the user until the next line while storing the input in the Ui for future reference.","lastModifiedDate":"2021-08-29"},{"lineNumber":206,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":207,"author":{"gitId":"kanjitp"},"content":"     * @return the input from the user","lastModifiedDate":"2021-08-29"},{"lineNumber":208,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":209,"author":{"gitId":"kanjitp"},"content":"    public String readCommand() {","lastModifiedDate":"2021-08-28"},{"lineNumber":210,"author":{"gitId":"kanjitp"},"content":"        System.out.print(\"\u003e \");","lastModifiedDate":"2021-08-28"},{"lineNumber":211,"author":{"gitId":"kanjitp"},"content":"        input \u003d sc.nextLine();","lastModifiedDate":"2021-08-28"},{"lineNumber":212,"author":{"gitId":"kanjitp"},"content":"        return input;","lastModifiedDate":"2021-08-28"},{"lineNumber":213,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":214,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":215,"author":{"gitId":"kanjitp"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":216,"author":{"gitId":"kanjitp"},"content":"     * The getter for the input stored in the Ui.","lastModifiedDate":"2021-08-29"},{"lineNumber":217,"author":{"gitId":"kanjitp"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":218,"author":{"gitId":"kanjitp"},"content":"     * @return the input stored in the current ui object","lastModifiedDate":"2021-08-29"},{"lineNumber":219,"author":{"gitId":"kanjitp"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":220,"author":{"gitId":"kanjitp"},"content":"    public String getLatestInput() {","lastModifiedDate":"2021-08-29"},{"lineNumber":221,"author":{"gitId":"kanjitp"},"content":"        return this.input;","lastModifiedDate":"2021-08-29"},{"lineNumber":222,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":223,"author":{"gitId":"kanjitp"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"kanjitp":223}},{"path":"src/test/java/dialog/DialogTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kanjitp"},"content":"package dialog;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"kanjitp"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"kanjitp"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"kanjitp"},"content":"public class DialogTest {","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"kanjitp"},"content":"    @Test","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"kanjitp"},"content":"    public void generateTest() throws DialogException {","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"kanjitp"},"content":"        String expected \u003d","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"kanjitp"},"content":"                \"    ____________________________________________________________\\n\" +","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"kanjitp"},"content":"                \"    test1\\n\" +","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"kanjitp"},"content":"                \"    test2\\n\" +","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"kanjitp"},"content":"                \"    ____________________________________________________________\";","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"kanjitp"},"content":"        Dialog testDialog \u003d Dialog.generate(\"generateTest\");","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"kanjitp"},"content":"        testDialog.add(\"test1\");","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"kanjitp"},"content":"        testDialog.add(\"test2\");","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"kanjitp"},"content":"        assertEquals(testDialog.toString(), expected);","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"kanjitp"},"content":"    @Test","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"kanjitp"},"content":"    public void generateTest2() {","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"kanjitp"},"content":"        Exception exception \u003d assertThrows(DialogException.class, () -\u003e {","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"kanjitp"},"content":"            Dialog testDialog1 \u003d Dialog.generate(\"generateTest2\");","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"kanjitp"},"content":"            Dialog testDialog2 \u003d Dialog.generate(\"generateTest2\");","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"kanjitp"},"content":"        });","lastModifiedDate":"2021-08-29"},{"lineNumber":27,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"kanjitp"},"content":"        String expectedMessage \u003d \"generateTest2 already exists\";","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"kanjitp"},"content":"        String actualMessage \u003d exception.getMessage();","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"kanjitp"},"content":"        assertEquals(expectedMessage, actualMessage);","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":33,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":34,"author":{"gitId":"kanjitp"},"content":"    @Test","lastModifiedDate":"2021-08-29"},{"lineNumber":35,"author":{"gitId":"kanjitp"},"content":"    public void addTest() throws DialogException {","lastModifiedDate":"2021-08-29"},{"lineNumber":36,"author":{"gitId":"kanjitp"},"content":"        Dialog testDialog \u003d Dialog.generate(\"addTest\");","lastModifiedDate":"2021-08-29"},{"lineNumber":37,"author":{"gitId":"kanjitp"},"content":"        testDialog.add(\"sentences\");","lastModifiedDate":"2021-08-29"},{"lineNumber":38,"author":{"gitId":"kanjitp"},"content":"        assertTrue(testDialog.sentences.contains(\"sentences\"));","lastModifiedDate":"2021-08-29"},{"lineNumber":39,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":40,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":41,"author":{"gitId":"kanjitp"},"content":"    @Test","lastModifiedDate":"2021-08-29"},{"lineNumber":42,"author":{"gitId":"kanjitp"},"content":"    public void getTest() throws DialogException {","lastModifiedDate":"2021-08-29"},{"lineNumber":43,"author":{"gitId":"kanjitp"},"content":"        Dialog testDialog \u003d Dialog.generate(\"getTest\");","lastModifiedDate":"2021-08-29"},{"lineNumber":44,"author":{"gitId":"kanjitp"},"content":"        testDialog.add(\"sentences\");","lastModifiedDate":"2021-08-29"},{"lineNumber":45,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":46,"author":{"gitId":"kanjitp"},"content":"        String expectedMessage \u003d","lastModifiedDate":"2021-08-29"},{"lineNumber":47,"author":{"gitId":"kanjitp"},"content":"                \"    ____________________________________________________________\\n\" +","lastModifiedDate":"2021-08-29"},{"lineNumber":48,"author":{"gitId":"kanjitp"},"content":"                \"    sentences\\n\" +","lastModifiedDate":"2021-08-29"},{"lineNumber":49,"author":{"gitId":"kanjitp"},"content":"                \"    ____________________________________________________________\";","lastModifiedDate":"2021-08-29"},{"lineNumber":50,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":51,"author":{"gitId":"kanjitp"},"content":"        assertEquals(Dialog.get(\"getTest\").toString(), expectedMessage);","lastModifiedDate":"2021-08-29"},{"lineNumber":52,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":53,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":54,"author":{"gitId":"kanjitp"},"content":"    @Test","lastModifiedDate":"2021-08-29"},{"lineNumber":55,"author":{"gitId":"kanjitp"},"content":"    public void containsIdTest() throws DialogException {","lastModifiedDate":"2021-08-29"},{"lineNumber":56,"author":{"gitId":"kanjitp"},"content":"        Dialog testDialog \u003d Dialog.generate(\"containsIdTest\");","lastModifiedDate":"2021-08-29"},{"lineNumber":57,"author":{"gitId":"kanjitp"},"content":"        assertTrue(Dialog.containsId(\"containsIdTest\"));","lastModifiedDate":"2021-08-29"},{"lineNumber":58,"author":{"gitId":"kanjitp"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":59,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":60,"author":{"gitId":"kanjitp"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"kanjitp":60}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"kanjitp"},"content":"task_list","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"kanjitp"},"content":"yes","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"kanjitp"},"content":"todo read book","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"kanjitp"},"content":"deadline return book /by 2020-06-06","lastModifiedDate":"2021-08-27"},{"lineNumber":5,"author":{"gitId":"kanjitp"},"content":"event project meeting /at 2020-08-06","lastModifiedDate":"2021-08-27"},{"lineNumber":6,"author":{"gitId":"kanjitp"},"content":"event project meeting /at 2020-08-06","lastModifiedDate":"2021-08-27"},{"lineNumber":7,"author":{"gitId":"kanjitp"},"content":"deadline commit /by 2020-08-24","lastModifiedDate":"2021-08-27"},{"lineNumber":8,"author":{"gitId":"kanjitp"},"content":"todo join sports club","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"kanjitp"},"content":"todo borrow book","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"kanjitp"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"kanjitp"},"content":"done 1","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"kanjitp"},"content":"done 2","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"kanjitp"},"content":"done 4","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"kanjitp"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"kanjitp"},"content":"date 2020-08-06","lastModifiedDate":"2021-08-27"},{"lineNumber":16,"author":{"gitId":"kanjitp"},"content":"date 2020-06-06","lastModifiedDate":"2021-08-27"},{"lineNumber":17,"author":{"gitId":"kanjitp"},"content":"delete 0","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"kanjitp"},"content":"delete 3","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"kanjitp"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":20,"author":{"gitId":"kanjitp"},"content":"bye","lastModifiedDate":"2021-08-19"},{"lineNumber":21,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"kanjitp":21}},{"path":"text-ui-test/input2.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"kanjitp"},"content":"task_list","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"kanjitp"},"content":"done 4","lastModifiedDate":"2021-08-27"},{"lineNumber":3,"author":{"gitId":"kanjitp"},"content":"delete 2","lastModifiedDate":"2021-08-27"},{"lineNumber":4,"author":{"gitId":"kanjitp"},"content":"list","lastModifiedDate":"2021-08-27"},{"lineNumber":5,"author":{"gitId":"kanjitp"},"content":"bye","lastModifiedDate":"2021-08-27"}],"authorContributionMap":{"kanjitp":5}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"kanjitp"},"content":"# remove previous task record to make testing consistent","lastModifiedDate":"2021-08-27"},{"lineNumber":16,"author":{"gitId":"kanjitp"},"content":"if [ -e \"./data/task_list.txt\" ]","lastModifiedDate":"2021-08-27"},{"lineNumber":17,"author":{"gitId":"kanjitp"},"content":"then","lastModifiedDate":"2021-08-27"},{"lineNumber":18,"author":{"gitId":"kanjitp"},"content":"    rm ./data/task_list.txt","lastModifiedDate":"2021-08-27"},{"lineNumber":19,"author":{"gitId":"kanjitp"},"content":"fi","lastModifiedDate":"2021-08-27"},{"lineNumber":20,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"kanjitp"},"content":"java -classpath ../bin Alice \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-08-28"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"kanjitp"},"content":"    echo \"Test result first save: PASSED\"","lastModifiedDate":"2021-08-27"},{"lineNumber":40,"author":{"gitId":"kanjitp"},"content":"else","lastModifiedDate":"2021-08-27"},{"lineNumber":41,"author":{"gitId":"kanjitp"},"content":"    echo \"Test result first save: FAILED\"","lastModifiedDate":"2021-08-27"},{"lineNumber":42,"author":{"gitId":"kanjitp"},"content":"    exit 1","lastModifiedDate":"2021-08-27"},{"lineNumber":43,"author":{"gitId":"kanjitp"},"content":"fi","lastModifiedDate":"2021-08-27"},{"lineNumber":44,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":45,"author":{"gitId":"kanjitp"},"content":"# delete output from previous run for second test","lastModifiedDate":"2021-08-27"},{"lineNumber":46,"author":{"gitId":"kanjitp"},"content":"if [ -e \"./ACTUAL2.TXT\" ]","lastModifiedDate":"2021-08-27"},{"lineNumber":47,"author":{"gitId":"kanjitp"},"content":"then","lastModifiedDate":"2021-08-27"},{"lineNumber":48,"author":{"gitId":"kanjitp"},"content":"    rm ACTUAL2.TXT","lastModifiedDate":"2021-08-27"},{"lineNumber":49,"author":{"gitId":"kanjitp"},"content":"fi","lastModifiedDate":"2021-08-27"},{"lineNumber":50,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":51,"author":{"gitId":"kanjitp"},"content":"java -classpath ../bin Alice \u003c input2.txt \u003e ACTUAL2.TXT","lastModifiedDate":"2021-08-28"},{"lineNumber":52,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":53,"author":{"gitId":"kanjitp"},"content":"# convert to UNIX format","lastModifiedDate":"2021-08-27"},{"lineNumber":54,"author":{"gitId":"kanjitp"},"content":"cp EXPECTED2.TXT EXPECTED-UNIX2.TXT","lastModifiedDate":"2021-08-27"},{"lineNumber":55,"author":{"gitId":"kanjitp"},"content":"dos2unix ACTUAL2.TXT EXPECTED-UNIX2.TXT","lastModifiedDate":"2021-08-27"},{"lineNumber":56,"author":{"gitId":"kanjitp"},"content":"# compare the output to the expected output","lastModifiedDate":"2021-08-27"},{"lineNumber":57,"author":{"gitId":"kanjitp"},"content":"diff ACTUAL2.TXT EXPECTED-UNIX2.TXT","lastModifiedDate":"2021-08-27"},{"lineNumber":58,"author":{"gitId":"kanjitp"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":59,"author":{"gitId":"kanjitp"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2021-08-27"},{"lineNumber":60,"author":{"gitId":"kanjitp"},"content":"then","lastModifiedDate":"2021-08-27"},{"lineNumber":61,"author":{"gitId":"kanjitp"},"content":"    echo \"Test result second save: PASSED\"","lastModifiedDate":"2021-08-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":63,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":64,"author":{"gitId":"kanjitp"},"content":"    echo \"Test result second save: FAILED\"","lastModifiedDate":"2021-08-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"kanjitp":31,"-":35}}]

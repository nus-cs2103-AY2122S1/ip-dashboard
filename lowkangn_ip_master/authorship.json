[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"lowkangn"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"lowkangn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"lowkangn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"lowkangn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"lowkangn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"lowkangn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"lowkangn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"lowkangn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"lowkangn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"lowkangn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"lowkangn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"lowkangn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"lowkangn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"lowkangn"},"content":"    testImplementation \u0027org.junit.jupiter:junit-jupiter-api:5.7.2\u0027","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"lowkangn"},"content":"    testRuntimeOnly \u0027org.junit.jupiter:junit-jupiter-engine:5.7.2\u0027","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"lowkangn"},"content":"    mainClassName \u003d \"duke.Launcher\"","lastModifiedDate":"2021-08-31"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"lowkangn"},"content":"    toolVersion \u003d \u00278.32\u0027","lastModifiedDate":"2021-08-30"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":61,"author":{"gitId":"lowkangn"},"content":"    enableAssertions(true)","lastModifiedDate":"2021-08-31"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":42,"lowkangn":20}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2019-07-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"lowkangn"},"content":"DukeNukemBot, or just Duke, is a desktop app for you to manage tasks using","lastModifiedDate":"2021-09-11"},{"lineNumber":4,"author":{"gitId":"lowkangn"},"content":"a Command Line Interface (CLI) while still having the benefits of a Graphical","lastModifiedDate":"2021-09-11"},{"lineNumber":5,"author":{"gitId":"lowkangn"},"content":"User Interface. (GUI) If you can type fast, Duke will help you organise your","lastModifiedDate":"2021-09-11"},{"lineNumber":6,"author":{"gitId":"lowkangn"},"content":"tasks quicker than traditional GUI apps.","lastModifiedDate":"2021-09-11"},{"lineNumber":7,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":8,"author":{"gitId":"lowkangn"},"content":"## Quick Start","lastModifiedDate":"2021-09-11"},{"lineNumber":9,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":10,"author":{"gitId":"lowkangn"},"content":"1. Ensure you have Java 11 installed on your computer for your operating system.","lastModifiedDate":"2021-09-11"},{"lineNumber":11,"author":{"gitId":"lowkangn"},"content":"   If you do not have Java 11 installed, you may visit the following link to do","lastModifiedDate":"2021-09-11"},{"lineNumber":12,"author":{"gitId":"lowkangn"},"content":"   so:","lastModifiedDate":"2021-09-11"},{"lineNumber":13,"author":{"gitId":"lowkangn"},"content":"   https://www.oracle.com/sg/java/technologies/javase-jdk11-downloads.html","lastModifiedDate":"2021-09-11"},{"lineNumber":14,"author":{"gitId":"lowkangn"},"content":"2. Download Duke.jar from [here](https://github.com/lowkangn/ip/releases/download/BCD-Extension/duke.jar).","lastModifiedDate":"2021-09-11"},{"lineNumber":15,"author":{"gitId":"lowkangn"},"content":"3. Copy Duke.jar to a folder you want.","lastModifiedDate":"2021-09-11"},{"lineNumber":16,"author":{"gitId":"lowkangn"},"content":"4. Double-click on Duke.jar to start Duke.","lastModifiedDate":"2021-09-11"},{"lineNumber":17,"author":{"gitId":"lowkangn"},"content":"5. Type in commands into the text book and hit Enter or Send to start using Duke.","lastModifiedDate":"2021-09-11"},{"lineNumber":18,"author":{"gitId":"lowkangn"},"content":"6. Refer to the Features section below to learn what commands you can use in Duke.","lastModifiedDate":"2021-09-11"},{"lineNumber":19,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"## Features ","lastModifiedDate":"2019-07-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":22,"author":{"gitId":"lowkangn"},"content":"### Add a ToDo task: `todo`","lastModifiedDate":"2021-09-11"},{"lineNumber":23,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":24,"author":{"gitId":"lowkangn"},"content":"Adds a task that you intend to do later to Duke\u0027s list.  ","lastModifiedDate":"2021-09-12"},{"lineNumber":25,"author":{"gitId":"lowkangn"},"content":"Format: `todo (DESCRIPTION)`  ","lastModifiedDate":"2021-09-12"},{"lineNumber":26,"author":{"gitId":"lowkangn"},"content":"Examples:","lastModifiedDate":"2021-09-11"},{"lineNumber":27,"author":{"gitId":"lowkangn"},"content":"* `todo borrow book`","lastModifiedDate":"2021-09-11"},{"lineNumber":28,"author":{"gitId":"lowkangn"},"content":"* `todo buy bread from store`","lastModifiedDate":"2021-09-11"},{"lineNumber":29,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":30,"author":{"gitId":"lowkangn"},"content":"### Add a Deadline task: `deadline`","lastModifiedDate":"2021-09-11"},{"lineNumber":31,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":32,"author":{"gitId":"lowkangn"},"content":"Adds a task that has a known deadline to Duke\u0027s list.\u003c/br\u003e","lastModifiedDate":"2021-09-11"},{"lineNumber":33,"author":{"gitId":"lowkangn"},"content":"Specify the date and time of the deadline in the following format:","lastModifiedDate":"2021-09-11"},{"lineNumber":34,"author":{"gitId":"lowkangn"},"content":"YYYY-MM-DD, HH:mm\u003cbr/\u003e","lastModifiedDate":"2021-09-11"},{"lineNumber":35,"author":{"gitId":"lowkangn"},"content":"If no time is specified, Duke will automatically set midnight of the date to be","lastModifiedDate":"2021-09-11"},{"lineNumber":36,"author":{"gitId":"lowkangn"},"content":"the time.  ","lastModifiedDate":"2021-09-12"},{"lineNumber":37,"author":{"gitId":"lowkangn"},"content":"Format: `deadline (DESCRIPTION) /by (DATETIME)`  ","lastModifiedDate":"2021-09-12"},{"lineNumber":38,"author":{"gitId":"lowkangn"},"content":"Examples:","lastModifiedDate":"2021-09-11"},{"lineNumber":39,"author":{"gitId":"lowkangn"},"content":"* `deadline finish homework /by 2021-09-11, 13:00`","lastModifiedDate":"2021-09-11"},{"lineNumber":40,"author":{"gitId":"lowkangn"},"content":"* `deadline return book /by 2021-08-20`","lastModifiedDate":"2021-09-11"},{"lineNumber":41,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":42,"author":{"gitId":"lowkangn"},"content":"### Add an Event task: `event`","lastModifiedDate":"2021-09-11"},{"lineNumber":43,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":44,"author":{"gitId":"lowkangn"},"content":"Adds a task that has a duration to Duke\u0027s list.  ","lastModifiedDate":"2021-09-12"},{"lineNumber":45,"author":{"gitId":"lowkangn"},"content":"Specify the date and time of the event in the following format:","lastModifiedDate":"2021-09-11"},{"lineNumber":46,"author":{"gitId":"lowkangn"},"content":"YYYY-MM-DD, HH:mm\u003cbr/\u003e","lastModifiedDate":"2021-09-11"},{"lineNumber":47,"author":{"gitId":"lowkangn"},"content":"A start and end time must be specified for the event.  ","lastModifiedDate":"2021-09-12"},{"lineNumber":48,"author":{"gitId":"lowkangn"},"content":"Format: `event (DESCRIPTION) /at (STARTTIME) - (ENDTIME)`  ","lastModifiedDate":"2021-09-12"},{"lineNumber":49,"author":{"gitId":"lowkangn"},"content":"Examples:","lastModifiedDate":"2021-09-11"},{"lineNumber":50,"author":{"gitId":"lowkangn"},"content":"* `event group meeting /at 2021-10-06, 13:00 - 14:00`","lastModifiedDate":"2021-09-11"},{"lineNumber":51,"author":{"gitId":"lowkangn"},"content":"* `event class reunion /at 2021-09-25, 14:00 - 17:00`","lastModifiedDate":"2021-09-11"},{"lineNumber":52,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":53,"author":{"gitId":"lowkangn"},"content":"### Lists all tasks: `list`","lastModifiedDate":"2021-09-11"},{"lineNumber":54,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":55,"author":{"gitId":"lowkangn"},"content":"Lists all the tasks that you have added to Duke\u0027s list.  ","lastModifiedDate":"2021-09-12"},{"lineNumber":56,"author":{"gitId":"lowkangn"},"content":"Format: `list`  ","lastModifiedDate":"2021-09-12"},{"lineNumber":57,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":58,"author":{"gitId":"lowkangn"},"content":"### Mark a task as done: `done`","lastModifiedDate":"2021-09-11"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":60,"author":{"gitId":"lowkangn"},"content":"Marks a task in Duke\u0027s list as done. Please supply the number of the task to be","lastModifiedDate":"2021-09-11"},{"lineNumber":61,"author":{"gitId":"lowkangn"},"content":"marked as done. The task number is its position in Duke\u0027s list.  ","lastModifiedDate":"2021-09-12"},{"lineNumber":62,"author":{"gitId":"lowkangn"},"content":"Format: `done (TASKNUMBER)`  ","lastModifiedDate":"2021-09-12"},{"lineNumber":63,"author":{"gitId":"lowkangn"},"content":"Examples:","lastModifiedDate":"2021-09-11"},{"lineNumber":64,"author":{"gitId":"lowkangn"},"content":"* `done 1`","lastModifiedDate":"2021-09-11"},{"lineNumber":65,"author":{"gitId":"lowkangn"},"content":"* `done 5`","lastModifiedDate":"2021-09-11"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":67,"author":{"gitId":"lowkangn"},"content":"### Delete a task: `delete`","lastModifiedDate":"2021-09-11"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":69,"author":{"gitId":"lowkangn"},"content":"Deletes a task in Duke\u0027s list. Please supply the number of the task to be deleted.","lastModifiedDate":"2021-09-11"},{"lineNumber":70,"author":{"gitId":"lowkangn"},"content":"The task number is its position in Duke\u0027s list.  ","lastModifiedDate":"2021-09-12"},{"lineNumber":71,"author":{"gitId":"lowkangn"},"content":"Format: `delete (TASKNUMBER)`  ","lastModifiedDate":"2021-09-12"},{"lineNumber":72,"author":{"gitId":"lowkangn"},"content":"Examples:","lastModifiedDate":"2021-09-11"},{"lineNumber":73,"author":{"gitId":"lowkangn"},"content":"* `delete 1`","lastModifiedDate":"2021-09-11"},{"lineNumber":74,"author":{"gitId":"lowkangn"},"content":"* `delete 5`","lastModifiedDate":"2021-09-11"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":76,"author":{"gitId":"lowkangn"},"content":"### Find a task: `find`","lastModifiedDate":"2021-09-11"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":78,"author":{"gitId":"lowkangn"},"content":"Locates a task in Duke\u0027s list with a given keyword.  ","lastModifiedDate":"2021-09-12"},{"lineNumber":79,"author":{"gitId":"lowkangn"},"content":"Format: `find (KEYWORD)`  ","lastModifiedDate":"2021-09-12"},{"lineNumber":80,"author":{"gitId":"lowkangn"},"content":"Examples:","lastModifiedDate":"2021-09-11"},{"lineNumber":81,"author":{"gitId":"lowkangn"},"content":"* `find book`","lastModifiedDate":"2021-09-11"},{"lineNumber":82,"author":{"gitId":"lowkangn"},"content":"* `find group meeting`","lastModifiedDate":"2021-09-11"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":84,"author":{"gitId":"lowkangn"},"content":"### Update a task\u0027s details: `update`","lastModifiedDate":"2021-09-11"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":86,"author":{"gitId":"lowkangn"},"content":"Updates a task in Duke\u0027s list by changing its description or its date and time.","lastModifiedDate":"2021-09-11"},{"lineNumber":87,"author":{"gitId":"lowkangn"},"content":"You cannot change tasks between types e.g. changing a ToDo task to a Deadline","lastModifiedDate":"2021-09-11"},{"lineNumber":88,"author":{"gitId":"lowkangn"},"content":"task is not allowed etc.   ","lastModifiedDate":"2021-09-12"},{"lineNumber":89,"author":{"gitId":"lowkangn"},"content":"You may choose to change only the description, only the date and time or both.","lastModifiedDate":"2021-09-11"},{"lineNumber":90,"author":{"gitId":"lowkangn"},"content":"Please supply the number of the task to be updated. The task number is its position","lastModifiedDate":"2021-09-11"},{"lineNumber":91,"author":{"gitId":"lowkangn"},"content":"in Duke\u0027s list.","lastModifiedDate":"2021-09-11"},{"lineNumber":92,"author":{"gitId":"lowkangn"},"content":"  ","lastModifiedDate":"2021-09-12"},{"lineNumber":93,"author":{"gitId":"lowkangn"},"content":"Format: `update (TASKNUMBER) /d (DESCRIPTION) /t (DATETIME)`  ","lastModifiedDate":"2021-09-12"},{"lineNumber":94,"author":{"gitId":"lowkangn"},"content":"Examples:","lastModifiedDate":"2021-09-11"},{"lineNumber":95,"author":{"gitId":"lowkangn"},"content":"* `update 1 /d throw out the trash`","lastModifiedDate":"2021-09-11"},{"lineNumber":96,"author":{"gitId":"lowkangn"},"content":"* `update 3 /t 2021-09-15, 12:00`","lastModifiedDate":"2021-09-11"},{"lineNumber":97,"author":{"gitId":"lowkangn"},"content":"* `update 10 /d web seminar /t 2021-11-23, 13:00 - 14:00`","lastModifiedDate":"2021-09-11"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":99,"author":{"gitId":"lowkangn"},"content":"### Close Duke: `bye`","lastModifiedDate":"2021-09-11"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":101,"author":{"gitId":"lowkangn"},"content":"Closes Duke.  ","lastModifiedDate":"2021-09-12"},{"lineNumber":102,"author":{"gitId":"lowkangn"},"content":"Format: `bye`  ","lastModifiedDate":"2021-09-12"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":104,"author":{"gitId":"lowkangn"},"content":"### Saving the data","lastModifiedDate":"2021-09-11"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":106,"author":{"gitId":"lowkangn"},"content":"Duke will save your tasks automatically in the hard disk after any changes you","lastModifiedDate":"2021-09-11"},{"lineNumber":107,"author":{"gitId":"lowkangn"},"content":"made to the list. There is no need to save manually. The save file will be created","lastModifiedDate":"2021-09-11"},{"lineNumber":108,"author":{"gitId":"lowkangn"},"content":"in the same folder as Duke.jar.","lastModifiedDate":"2021-09-11"}],"authorContributionMap":{"-":15,"lowkangn":93}},{"path":"gradlew.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@rem","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"@rem Copyright 2015 the original author or authors.","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"@rem","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"@rem Licensed under the Apache License, Version 2.0 (the \"License\");","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"@rem you may not use this file except in compliance with the License.","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"@rem You may obtain a copy of the License at","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"@rem","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"@rem      https://www.apache.org/licenses/LICENSE-2.0","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"@rem","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"@rem Unless required by applicable law or agreed to in writing, software","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"@rem distributed under the License is distributed on an \"AS IS\" BASIS,","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"@rem See the License for the specific language governing permissions and","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"@rem limitations under the License.","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"@rem","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"@if \"%DEBUG%\" \u003d\u003d \"\" @echo off","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"@rem ##########################################################################","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"@rem","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"@rem  Gradle startup script for Windows","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"@rem","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"@rem ##########################################################################","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"@rem Set local scope for the variables with windows NT shell","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"set DIRNAME\u003d%~dp0","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d.","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"set APP_BASE_NAME\u003d%~n0","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"set APP_HOME\u003d%DIRNAME%","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"@rem Find java.exe","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"if defined JAVA_HOME goto findJavaFromJavaHome","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"set JAVA_EXE\u003djava.exe","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"%JAVA_EXE% -version \u003eNUL 2\u003e\u00261","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"lowkangn"},"content":"if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto execute","lastModifiedDate":"2021-08-30"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"echo.","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH.","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"echo.","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"echo Please set the JAVA_HOME variable in your environment to match the","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"echo location of your Java installation.","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"goto fail","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":":findJavaFromJavaHome","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"lowkangn"},"content":"if exist \"%JAVA_EXE%\" goto execute","lastModifiedDate":"2021-08-30"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"echo.","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%","lastModifiedDate":"2020-05-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"echo.","lastModifiedDate":"2020-05-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"echo Please set the JAVA_HOME variable in your environment to match the","lastModifiedDate":"2020-05-25"},{"lineNumber":63,"author":{"gitId":"-"},"content":"echo location of your Java installation.","lastModifiedDate":"2020-05-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"goto fail","lastModifiedDate":"2020-05-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":67,"author":{"gitId":"-"},"content":":execute","lastModifiedDate":"2020-05-25"},{"lineNumber":68,"author":{"gitId":"-"},"content":"@rem Setup the command line","lastModifiedDate":"2020-05-25"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":70,"author":{"gitId":"-"},"content":"set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar","lastModifiedDate":"2020-05-25"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":72,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":73,"author":{"gitId":"-"},"content":"@rem Execute Gradle","lastModifiedDate":"2020-05-25"},{"lineNumber":74,"author":{"gitId":"lowkangn"},"content":"\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*","lastModifiedDate":"2021-08-30"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":76,"author":{"gitId":"-"},"content":":end","lastModifiedDate":"2020-05-25"},{"lineNumber":77,"author":{"gitId":"-"},"content":"@rem End local scope for the variables with windows NT shell","lastModifiedDate":"2020-05-25"},{"lineNumber":78,"author":{"gitId":"-"},"content":"if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd","lastModifiedDate":"2020-05-25"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":80,"author":{"gitId":"-"},"content":":fail","lastModifiedDate":"2020-05-25"},{"lineNumber":81,"author":{"gitId":"-"},"content":"rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of","lastModifiedDate":"2020-05-25"},{"lineNumber":82,"author":{"gitId":"-"},"content":"rem the _cmd.exe /c_ return code!","lastModifiedDate":"2020-05-25"},{"lineNumber":83,"author":{"gitId":"-"},"content":"if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":84,"author":{"gitId":"-"},"content":"exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":86,"author":{"gitId":"-"},"content":":mainEnd","lastModifiedDate":"2020-05-25"},{"lineNumber":87,"author":{"gitId":"-"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal","lastModifiedDate":"2020-05-25"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":89,"author":{"gitId":"-"},"content":":omega","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":85,"lowkangn":4}},{"path":"src/main/java/duke/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lowkangn"},"content":"package duke;","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"lowkangn"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"lowkangn"},"content":"import java.util.Collections;","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"lowkangn"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"lowkangn"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"lowkangn"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"lowkangn"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"lowkangn"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"lowkangn"},"content":"import javafx.scene.Node;","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"lowkangn"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"lowkangn"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"lowkangn"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"lowkangn"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"lowkangn"},"content":"/**","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"lowkangn"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"lowkangn"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"lowkangn"},"content":" * containing text from the speaker.","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"lowkangn"},"content":" */","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"lowkangn"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"lowkangn"},"content":"    @FXML","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"lowkangn"},"content":"    private Label dialog;","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"lowkangn"},"content":"    @FXML","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"lowkangn"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"lowkangn"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"lowkangn"},"content":"        try {","lastModifiedDate":"2021-08-31"},{"lineNumber":30,"author":{"gitId":"lowkangn"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2021-08-31"},{"lineNumber":31,"author":{"gitId":"lowkangn"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2021-08-31"},{"lineNumber":32,"author":{"gitId":"lowkangn"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2021-08-31"},{"lineNumber":33,"author":{"gitId":"lowkangn"},"content":"            fxmlLoader.load();","lastModifiedDate":"2021-08-31"},{"lineNumber":34,"author":{"gitId":"lowkangn"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-31"},{"lineNumber":35,"author":{"gitId":"lowkangn"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-31"},{"lineNumber":36,"author":{"gitId":"lowkangn"},"content":"        }","lastModifiedDate":"2021-08-31"},{"lineNumber":37,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":38,"author":{"gitId":"lowkangn"},"content":"        dialog.setText(text);","lastModifiedDate":"2021-08-31"},{"lineNumber":39,"author":{"gitId":"lowkangn"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2021-08-31"},{"lineNumber":40,"author":{"gitId":"lowkangn"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":41,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":42,"author":{"gitId":"lowkangn"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":43,"author":{"gitId":"lowkangn"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2021-08-31"},{"lineNumber":44,"author":{"gitId":"lowkangn"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":45,"author":{"gitId":"lowkangn"},"content":"    private void flip() {","lastModifiedDate":"2021-08-31"},{"lineNumber":46,"author":{"gitId":"lowkangn"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2021-08-31"},{"lineNumber":47,"author":{"gitId":"lowkangn"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2021-08-31"},{"lineNumber":48,"author":{"gitId":"lowkangn"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2021-08-31"},{"lineNumber":49,"author":{"gitId":"lowkangn"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2021-08-31"},{"lineNumber":50,"author":{"gitId":"lowkangn"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":51,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":52,"author":{"gitId":"lowkangn"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2021-08-31"},{"lineNumber":53,"author":{"gitId":"lowkangn"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2021-08-31"},{"lineNumber":54,"author":{"gitId":"lowkangn"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":55,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":56,"author":{"gitId":"lowkangn"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2021-08-31"},{"lineNumber":57,"author":{"gitId":"lowkangn"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2021-08-31"},{"lineNumber":58,"author":{"gitId":"lowkangn"},"content":"        db.flip();","lastModifiedDate":"2021-08-31"},{"lineNumber":59,"author":{"gitId":"lowkangn"},"content":"        return db;","lastModifiedDate":"2021-08-31"},{"lineNumber":60,"author":{"gitId":"lowkangn"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":61,"author":{"gitId":"lowkangn"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"lowkangn":61}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lowkangn"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"lowkangn"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"lowkangn"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"lowkangn"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"lowkangn"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"lowkangn"},"content":" * Handles the logic of Duke e.g. adding, saving and deleting tasks.","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"lowkangn"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":12,"author":{"gitId":"lowkangn"},"content":"    static final String UNKNOWN_COMMAND \u003d \"Sorry kid, no idea what that means.\";","lastModifiedDate":"2021-09-11"},{"lineNumber":13,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"lowkangn"},"content":"    private TaskList taskList;","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"lowkangn"},"content":"    private Storage storage;","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"lowkangn"},"content":"    private Ui ui;","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"lowkangn"},"content":"    private boolean isOpen;","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"lowkangn"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"lowkangn"},"content":"     * Initialises a new instance of Duke.","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"lowkangn"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"lowkangn"},"content":"    public Duke() {","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"lowkangn"},"content":"        String filepath \u003d \"save.txt\";","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"lowkangn"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"lowkangn"},"content":"        this.storage \u003d new Storage(filepath);","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"lowkangn"},"content":"        this.isOpen \u003d false;","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"lowkangn"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"lowkangn"},"content":"            this.taskList \u003d new TaskList(this.storage.load());","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"lowkangn"},"content":"        } catch (DukeException de) {","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"lowkangn"},"content":"            this.ui.showError(de);","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"lowkangn"},"content":"            this.taskList \u003d new TaskList(new ArrayList\u003c\u003e());","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"lowkangn"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"lowkangn"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"lowkangn"},"content":"    private boolean checkIsFunctionCommand(Parser.CommandType type) {","lastModifiedDate":"2021-09-05"},{"lineNumber":36,"author":{"gitId":"lowkangn"},"content":"        return type \u003d\u003d Parser.CommandType.EXIT","lastModifiedDate":"2021-09-05"},{"lineNumber":37,"author":{"gitId":"lowkangn"},"content":"                || type \u003d\u003d Parser.CommandType.LIST","lastModifiedDate":"2021-08-31"},{"lineNumber":38,"author":{"gitId":"lowkangn"},"content":"                || type \u003d\u003d Parser.CommandType.DONE","lastModifiedDate":"2021-08-31"},{"lineNumber":39,"author":{"gitId":"lowkangn"},"content":"                || type \u003d\u003d Parser.CommandType.UPDATE","lastModifiedDate":"2021-09-05"},{"lineNumber":40,"author":{"gitId":"lowkangn"},"content":"                || type \u003d\u003d Parser.CommandType.DELETE","lastModifiedDate":"2021-08-31"},{"lineNumber":41,"author":{"gitId":"lowkangn"},"content":"                || type \u003d\u003d Parser.CommandType.FIND;","lastModifiedDate":"2021-08-31"},{"lineNumber":42,"author":{"gitId":"lowkangn"},"content":"    }","lastModifiedDate":"2021-09-05"},{"lineNumber":43,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":44,"author":{"gitId":"lowkangn"},"content":"    private boolean checkIsTaskCommand(Parser.CommandType type) {","lastModifiedDate":"2021-09-05"},{"lineNumber":45,"author":{"gitId":"lowkangn"},"content":"        return type \u003d\u003d Parser.CommandType.TODO","lastModifiedDate":"2021-09-05"},{"lineNumber":46,"author":{"gitId":"lowkangn"},"content":"                || type \u003d\u003d Parser.CommandType.DEADLINE","lastModifiedDate":"2021-08-31"},{"lineNumber":47,"author":{"gitId":"lowkangn"},"content":"                || type \u003d\u003d Parser.CommandType.EVENT;","lastModifiedDate":"2021-08-31"},{"lineNumber":48,"author":{"gitId":"lowkangn"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":49,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":50,"author":{"gitId":"lowkangn"},"content":"    private String handleFunctionCommands(Parser.CommandType type, String userInput) throws DukeException {","lastModifiedDate":"2021-08-31"},{"lineNumber":51,"author":{"gitId":"lowkangn"},"content":"        if (type \u003d\u003d Parser.CommandType.EXIT) {","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"lowkangn"},"content":"            // Close the program.","lastModifiedDate":"2021-09-04"},{"lineNumber":53,"author":{"gitId":"lowkangn"},"content":"            this.storage.save(this.taskList);","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"lowkangn"},"content":"            this.isOpen \u003d false;","lastModifiedDate":"2021-08-31"},{"lineNumber":55,"author":{"gitId":"lowkangn"},"content":"            this.ui.exit();","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"lowkangn"},"content":"            return Ui.CLOSING_MESSAGE;","lastModifiedDate":"2021-08-31"},{"lineNumber":57,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":58,"author":{"gitId":"lowkangn"},"content":"        } else if (type \u003d\u003d Parser.CommandType.LIST) {","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"lowkangn"},"content":"            return this.taskList.listTasks();","lastModifiedDate":"2021-08-31"},{"lineNumber":60,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":61,"author":{"gitId":"lowkangn"},"content":"        } else if (type \u003d\u003d Parser.CommandType.DONE) {","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"lowkangn"},"content":"            int taskNumber \u003d Parser.parseDoneCommand(userInput);","lastModifiedDate":"2021-08-31"},{"lineNumber":63,"author":{"gitId":"lowkangn"},"content":"            this.storage.save(this.taskList);","lastModifiedDate":"2021-08-24"},{"lineNumber":64,"author":{"gitId":"lowkangn"},"content":"            return this.taskList.markTaskAsDone(taskNumber);","lastModifiedDate":"2021-08-31"},{"lineNumber":65,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":66,"author":{"gitId":"lowkangn"},"content":"        } else if (type \u003d\u003d Parser.CommandType.UPDATE) {","lastModifiedDate":"2021-09-05"},{"lineNumber":67,"author":{"gitId":"lowkangn"},"content":"            String[] extractedValues \u003d Parser.parseUpdateCommand(userInput);","lastModifiedDate":"2021-09-05"},{"lineNumber":68,"author":{"gitId":"lowkangn"},"content":"            this.storage.save(this.taskList);","lastModifiedDate":"2021-09-05"},{"lineNumber":69,"author":{"gitId":"lowkangn"},"content":"            return this.taskList.updateTask(extractedValues);","lastModifiedDate":"2021-09-05"},{"lineNumber":70,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":71,"author":{"gitId":"lowkangn"},"content":"        } else if (type \u003d\u003d Parser.CommandType.DELETE) {","lastModifiedDate":"2021-08-24"},{"lineNumber":72,"author":{"gitId":"lowkangn"},"content":"            int taskNumber \u003d Parser.parseDeleteCommand(userInput);","lastModifiedDate":"2021-08-31"},{"lineNumber":73,"author":{"gitId":"lowkangn"},"content":"            this.storage.save(this.taskList);","lastModifiedDate":"2021-08-24"},{"lineNumber":74,"author":{"gitId":"lowkangn"},"content":"            return this.taskList.deleteTask(taskNumber);","lastModifiedDate":"2021-08-31"},{"lineNumber":75,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":76,"author":{"gitId":"lowkangn"},"content":"        } else if (type \u003d\u003d Parser.CommandType.FIND) {","lastModifiedDate":"2021-08-24"},{"lineNumber":77,"author":{"gitId":"lowkangn"},"content":"            String toSearch \u003d Parser.parseFindCommand(userInput);","lastModifiedDate":"2021-08-31"},{"lineNumber":78,"author":{"gitId":"lowkangn"},"content":"            return this.taskList.findTasksWithSubstring(toSearch);","lastModifiedDate":"2021-08-31"},{"lineNumber":79,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":80,"author":{"gitId":"lowkangn"},"content":"        } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":81,"author":{"gitId":"lowkangn"},"content":"            throw new DukeException(UNKNOWN_COMMAND);","lastModifiedDate":"2021-09-11"},{"lineNumber":82,"author":{"gitId":"lowkangn"},"content":"        }","lastModifiedDate":"2021-08-31"},{"lineNumber":83,"author":{"gitId":"lowkangn"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":84,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":85,"author":{"gitId":"lowkangn"},"content":"    private String handleTaskCommand(Parser.CommandType type, String userInput) throws DukeException {","lastModifiedDate":"2021-08-31"},{"lineNumber":86,"author":{"gitId":"lowkangn"},"content":"        String[] splitBySpace \u003d userInput.split(\" \", 2);","lastModifiedDate":"2021-08-31"},{"lineNumber":87,"author":{"gitId":"lowkangn"},"content":"        boolean hasInputAfterSpace \u003d splitBySpace.length \u003e 1","lastModifiedDate":"2021-09-04"},{"lineNumber":88,"author":{"gitId":"lowkangn"},"content":"                \u0026\u0026 splitBySpace[1].trim().length() \u003e 0;","lastModifiedDate":"2021-09-04"},{"lineNumber":89,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":90,"author":{"gitId":"lowkangn"},"content":"        if (hasInputAfterSpace) {","lastModifiedDate":"2021-09-04"},{"lineNumber":91,"author":{"gitId":"lowkangn"},"content":"            String substring \u003d splitBySpace[1].trim();","lastModifiedDate":"2021-08-31"},{"lineNumber":92,"author":{"gitId":"lowkangn"},"content":"            Task newTask;","lastModifiedDate":"2021-08-31"},{"lineNumber":93,"author":{"gitId":"lowkangn"},"content":"            if (type \u003d\u003d Parser.CommandType.TODO) {","lastModifiedDate":"2021-08-31"},{"lineNumber":94,"author":{"gitId":"lowkangn"},"content":"                newTask \u003d Parser.parseTodoCommand(substring);","lastModifiedDate":"2021-08-31"},{"lineNumber":95,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":96,"author":{"gitId":"lowkangn"},"content":"            } else if (type \u003d\u003d Parser.CommandType.DEADLINE) {","lastModifiedDate":"2021-08-31"},{"lineNumber":97,"author":{"gitId":"lowkangn"},"content":"                newTask \u003d Parser.parseDeadlineCommand(substring);","lastModifiedDate":"2021-08-31"},{"lineNumber":98,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":99,"author":{"gitId":"lowkangn"},"content":"            } else if (type \u003d\u003d Parser.CommandType.EVENT) {","lastModifiedDate":"2021-08-31"},{"lineNumber":100,"author":{"gitId":"lowkangn"},"content":"                newTask \u003d Parser.parseEventCommand(substring);","lastModifiedDate":"2021-08-31"},{"lineNumber":101,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":102,"author":{"gitId":"lowkangn"},"content":"            } else {","lastModifiedDate":"2021-08-16"},{"lineNumber":103,"author":{"gitId":"lowkangn"},"content":"                throw new DukeException(UNKNOWN_COMMAND);","lastModifiedDate":"2021-09-11"},{"lineNumber":104,"author":{"gitId":"lowkangn"},"content":"            }","lastModifiedDate":"2021-08-16"},{"lineNumber":105,"author":{"gitId":"lowkangn"},"content":"            this.storage.save(this.taskList);","lastModifiedDate":"2021-08-24"},{"lineNumber":106,"author":{"gitId":"lowkangn"},"content":"            return this.taskList.addTask(newTask);","lastModifiedDate":"2021-08-31"},{"lineNumber":107,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":108,"author":{"gitId":"lowkangn"},"content":"        } else {","lastModifiedDate":"2021-08-16"},{"lineNumber":109,"author":{"gitId":"lowkangn"},"content":"            throw new DukeException(\"Hey kid!!! The description of a \" + splitBySpace[0]","lastModifiedDate":"2021-09-11"},{"lineNumber":110,"author":{"gitId":"lowkangn"},"content":"                    + \" cannot be empty.\");","lastModifiedDate":"2021-08-22"},{"lineNumber":111,"author":{"gitId":"lowkangn"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":112,"author":{"gitId":"lowkangn"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":113,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":114,"author":{"gitId":"lowkangn"},"content":"    /**","lastModifiedDate":"2021-09-05"},{"lineNumber":115,"author":{"gitId":"lowkangn"},"content":"     * Runs the Duke bot.","lastModifiedDate":"2021-09-05"},{"lineNumber":116,"author":{"gitId":"lowkangn"},"content":"     */","lastModifiedDate":"2021-09-05"},{"lineNumber":117,"author":{"gitId":"lowkangn"},"content":"    public void run() {","lastModifiedDate":"2021-09-05"},{"lineNumber":118,"author":{"gitId":"lowkangn"},"content":"        this.isOpen \u003d true;","lastModifiedDate":"2021-09-05"},{"lineNumber":119,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":120,"author":{"gitId":"lowkangn"},"content":"        while (this.isOpen) {","lastModifiedDate":"2021-09-05"},{"lineNumber":121,"author":{"gitId":"lowkangn"},"content":"            try {","lastModifiedDate":"2021-08-31"},{"lineNumber":122,"author":{"gitId":"lowkangn"},"content":"                String userInput \u003d this.ui.readCommand();","lastModifiedDate":"2021-09-05"},{"lineNumber":123,"author":{"gitId":"lowkangn"},"content":"                Parser.CommandType type \u003d Parser.decipherInput(userInput);","lastModifiedDate":"2021-08-31"},{"lineNumber":124,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":125,"author":{"gitId":"lowkangn"},"content":"                boolean isFunctionCommand \u003d checkIsFunctionCommand(type);","lastModifiedDate":"2021-09-05"},{"lineNumber":126,"author":{"gitId":"lowkangn"},"content":"                boolean isTaskCommand \u003d checkIsTaskCommand(type);","lastModifiedDate":"2021-09-05"},{"lineNumber":127,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":128,"author":{"gitId":"lowkangn"},"content":"                if (isFunctionCommand) {","lastModifiedDate":"2021-09-05"},{"lineNumber":129,"author":{"gitId":"lowkangn"},"content":"                    ui.printMessage(this.handleFunctionCommands(type, userInput));","lastModifiedDate":"2021-09-05"},{"lineNumber":130,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":131,"author":{"gitId":"lowkangn"},"content":"                } else if (isTaskCommand) {","lastModifiedDate":"2021-09-05"},{"lineNumber":132,"author":{"gitId":"lowkangn"},"content":"                    // Add a Task to the task list.","lastModifiedDate":"2021-09-05"},{"lineNumber":133,"author":{"gitId":"lowkangn"},"content":"                    ui.printMessage(this.handleTaskCommand(type, userInput));","lastModifiedDate":"2021-09-05"},{"lineNumber":134,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":135,"author":{"gitId":"lowkangn"},"content":"                } else {","lastModifiedDate":"2021-09-05"},{"lineNumber":136,"author":{"gitId":"lowkangn"},"content":"                    throw new DukeException(UNKNOWN_COMMAND);","lastModifiedDate":"2021-09-11"},{"lineNumber":137,"author":{"gitId":"lowkangn"},"content":"                }","lastModifiedDate":"2021-09-05"},{"lineNumber":138,"author":{"gitId":"lowkangn"},"content":"            } catch (DukeException de) {","lastModifiedDate":"2021-09-05"},{"lineNumber":139,"author":{"gitId":"lowkangn"},"content":"                this.ui.showError(de);","lastModifiedDate":"2021-09-05"},{"lineNumber":140,"author":{"gitId":"lowkangn"},"content":"            }","lastModifiedDate":"2021-09-05"},{"lineNumber":141,"author":{"gitId":"lowkangn"},"content":"        }","lastModifiedDate":"2021-09-05"},{"lineNumber":142,"author":{"gitId":"lowkangn"},"content":"    }","lastModifiedDate":"2021-09-05"},{"lineNumber":143,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":144,"author":{"gitId":"lowkangn"},"content":"    private String runFromGui(String userInput) {","lastModifiedDate":"2021-09-05"},{"lineNumber":145,"author":{"gitId":"lowkangn"},"content":"        try {","lastModifiedDate":"2021-09-05"},{"lineNumber":146,"author":{"gitId":"lowkangn"},"content":"            Parser.CommandType type \u003d Parser.decipherInput(userInput);","lastModifiedDate":"2021-09-05"},{"lineNumber":147,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":148,"author":{"gitId":"lowkangn"},"content":"            boolean isFunctionCommand \u003d checkIsFunctionCommand(type);","lastModifiedDate":"2021-09-05"},{"lineNumber":149,"author":{"gitId":"lowkangn"},"content":"            boolean isTaskCommand \u003d checkIsTaskCommand(type);","lastModifiedDate":"2021-09-05"},{"lineNumber":150,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":151,"author":{"gitId":"lowkangn"},"content":"            if (isFunctionCommand) {","lastModifiedDate":"2021-08-31"},{"lineNumber":152,"author":{"gitId":"lowkangn"},"content":"                return this.handleFunctionCommands(type, userInput);","lastModifiedDate":"2021-08-31"},{"lineNumber":153,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":154,"author":{"gitId":"lowkangn"},"content":"            } else if (isTaskCommand) {","lastModifiedDate":"2021-08-31"},{"lineNumber":155,"author":{"gitId":"lowkangn"},"content":"                // Add a Task to the task list.","lastModifiedDate":"2021-09-04"},{"lineNumber":156,"author":{"gitId":"lowkangn"},"content":"                return this.handleTaskCommand(type, userInput);","lastModifiedDate":"2021-08-31"},{"lineNumber":157,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":158,"author":{"gitId":"lowkangn"},"content":"            } else {","lastModifiedDate":"2021-08-31"},{"lineNumber":159,"author":{"gitId":"lowkangn"},"content":"                throw new DukeException(UNKNOWN_COMMAND);","lastModifiedDate":"2021-09-11"},{"lineNumber":160,"author":{"gitId":"lowkangn"},"content":"            }","lastModifiedDate":"2021-08-31"},{"lineNumber":161,"author":{"gitId":"lowkangn"},"content":"        } catch (DukeException de) {","lastModifiedDate":"2021-08-31"},{"lineNumber":162,"author":{"gitId":"lowkangn"},"content":"            return de.getMessage();","lastModifiedDate":"2021-08-31"},{"lineNumber":163,"author":{"gitId":"lowkangn"},"content":"        }","lastModifiedDate":"2021-08-31"},{"lineNumber":164,"author":{"gitId":"lowkangn"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":165,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":166,"author":{"gitId":"lowkangn"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":167,"author":{"gitId":"lowkangn"},"content":"     * Generates and returns response from Duke.","lastModifiedDate":"2021-09-04"},{"lineNumber":168,"author":{"gitId":"lowkangn"},"content":"     *","lastModifiedDate":"2021-09-04"},{"lineNumber":169,"author":{"gitId":"lowkangn"},"content":"     * @param input The input from the user.","lastModifiedDate":"2021-09-04"},{"lineNumber":170,"author":{"gitId":"lowkangn"},"content":"     * @return Duke\u0027s response to the input.","lastModifiedDate":"2021-09-04"},{"lineNumber":171,"author":{"gitId":"lowkangn"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":172,"author":{"gitId":"lowkangn"},"content":"    public String getResponse(String input) {","lastModifiedDate":"2021-08-31"},{"lineNumber":173,"author":{"gitId":"lowkangn"},"content":"        return runFromGui(input);","lastModifiedDate":"2021-08-31"},{"lineNumber":174,"author":{"gitId":"lowkangn"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":175,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":176,"author":{"gitId":"lowkangn"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":177,"author":{"gitId":"lowkangn"},"content":"     * Initialises Duke and runs it.","lastModifiedDate":"2021-09-11"},{"lineNumber":178,"author":{"gitId":"lowkangn"},"content":"     * @param args Any CLI arguments. (not used)","lastModifiedDate":"2021-09-11"},{"lineNumber":179,"author":{"gitId":"lowkangn"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":180,"author":{"gitId":"lowkangn"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-24"},{"lineNumber":181,"author":{"gitId":"lowkangn"},"content":"        Duke duke \u003d new Duke();","lastModifiedDate":"2021-08-31"},{"lineNumber":182,"author":{"gitId":"lowkangn"},"content":"        duke.run();","lastModifiedDate":"2021-08-24"},{"lineNumber":183,"author":{"gitId":"lowkangn"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":184,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"-":2,"lowkangn":182}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lowkangn"},"content":"package duke;","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"lowkangn"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"lowkangn"},"content":"/**","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"lowkangn"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"lowkangn"},"content":" */","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"lowkangn"},"content":"public class Launcher {","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"lowkangn"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"lowkangn"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"lowkangn"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"lowkangn"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"lowkangn":13}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lowkangn"},"content":"package duke;","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"lowkangn"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"lowkangn"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"lowkangn"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"lowkangn"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"lowkangn"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"lowkangn"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"lowkangn"},"content":"/**","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"lowkangn"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"lowkangn"},"content":" */","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"lowkangn"},"content":"public class Main extends Application {","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"lowkangn"},"content":"    private Duke duke \u003d new Duke();","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"lowkangn"},"content":"    @Override","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"lowkangn"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"lowkangn"},"content":"        try {","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"lowkangn"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"lowkangn"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"lowkangn"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"lowkangn"},"content":"            stage.setScene(scene);","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"lowkangn"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"lowkangn"},"content":"            stage.show();","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"lowkangn"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"lowkangn"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"lowkangn"},"content":"        }","lastModifiedDate":"2021-08-31"},{"lineNumber":30,"author":{"gitId":"lowkangn"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":31,"author":{"gitId":"lowkangn"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"lowkangn":31}},{"path":"src/main/java/duke/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lowkangn"},"content":"package duke;","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"lowkangn"},"content":"import java.util.Date;","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"lowkangn"},"content":"import java.util.Timer;","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"lowkangn"},"content":"import java.util.TimerTask;","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"lowkangn"},"content":"import javafx.application.Platform;","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"lowkangn"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"lowkangn"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"lowkangn"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"lowkangn"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"lowkangn"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"lowkangn"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"lowkangn"},"content":"/**","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"lowkangn"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"lowkangn"},"content":" */","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"lowkangn"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"lowkangn"},"content":"    @FXML","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"lowkangn"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"lowkangn"},"content":"    @FXML","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"lowkangn"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"lowkangn"},"content":"    @FXML","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"lowkangn"},"content":"    private TextField userInput;","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"lowkangn"},"content":"    private Duke duke;","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"lowkangn"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"lowkangn"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":30,"author":{"gitId":"lowkangn"},"content":"    @FXML","lastModifiedDate":"2021-08-31"},{"lineNumber":31,"author":{"gitId":"lowkangn"},"content":"    public void initialize() {","lastModifiedDate":"2021-08-31"},{"lineNumber":32,"author":{"gitId":"lowkangn"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2021-08-31"},{"lineNumber":33,"author":{"gitId":"lowkangn"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2021-08-31"},{"lineNumber":34,"author":{"gitId":"lowkangn"},"content":"                DialogBox.getDukeDialog(Ui.OPENING_MESSAGE, dukeImage)","lastModifiedDate":"2021-08-31"},{"lineNumber":35,"author":{"gitId":"lowkangn"},"content":"        );","lastModifiedDate":"2021-08-31"},{"lineNumber":36,"author":{"gitId":"lowkangn"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":37,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":38,"author":{"gitId":"lowkangn"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2021-08-31"},{"lineNumber":39,"author":{"gitId":"lowkangn"},"content":"        duke \u003d d;","lastModifiedDate":"2021-08-31"},{"lineNumber":40,"author":{"gitId":"lowkangn"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":41,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":42,"author":{"gitId":"lowkangn"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":43,"author":{"gitId":"lowkangn"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2021-08-31"},{"lineNumber":44,"author":{"gitId":"lowkangn"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2021-08-31"},{"lineNumber":45,"author":{"gitId":"lowkangn"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":46,"author":{"gitId":"lowkangn"},"content":"    @FXML","lastModifiedDate":"2021-08-31"},{"lineNumber":47,"author":{"gitId":"lowkangn"},"content":"    private void handleUserInput() {","lastModifiedDate":"2021-08-31"},{"lineNumber":48,"author":{"gitId":"lowkangn"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2021-08-31"},{"lineNumber":49,"author":{"gitId":"lowkangn"},"content":"        String response \u003d duke.getResponse(input);","lastModifiedDate":"2021-08-31"},{"lineNumber":50,"author":{"gitId":"lowkangn"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2021-08-31"},{"lineNumber":51,"author":{"gitId":"lowkangn"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2021-08-31"},{"lineNumber":52,"author":{"gitId":"lowkangn"},"content":"                DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2021-08-31"},{"lineNumber":53,"author":{"gitId":"lowkangn"},"content":"        );","lastModifiedDate":"2021-08-31"},{"lineNumber":54,"author":{"gitId":"lowkangn"},"content":"        userInput.clear();","lastModifiedDate":"2021-08-31"},{"lineNumber":55,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":56,"author":{"gitId":"lowkangn"},"content":"        if (input.trim().equals(\"bye\")) {","lastModifiedDate":"2021-08-31"},{"lineNumber":57,"author":{"gitId":"lowkangn"},"content":"            new Timer().schedule(new TimerTask() {","lastModifiedDate":"2021-08-31"},{"lineNumber":58,"author":{"gitId":"lowkangn"},"content":"                @Override","lastModifiedDate":"2021-08-31"},{"lineNumber":59,"author":{"gitId":"lowkangn"},"content":"                public void run() {","lastModifiedDate":"2021-08-31"},{"lineNumber":60,"author":{"gitId":"lowkangn"},"content":"                    System.exit(0);","lastModifiedDate":"2021-08-31"},{"lineNumber":61,"author":{"gitId":"lowkangn"},"content":"                }","lastModifiedDate":"2021-08-31"},{"lineNumber":62,"author":{"gitId":"lowkangn"},"content":"            }, new Date(System.currentTimeMillis() + 1000));","lastModifiedDate":"2021-08-31"},{"lineNumber":63,"author":{"gitId":"lowkangn"},"content":"        }","lastModifiedDate":"2021-08-31"},{"lineNumber":64,"author":{"gitId":"lowkangn"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":65,"author":{"gitId":"lowkangn"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"lowkangn":65}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lowkangn"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"lowkangn"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"lowkangn"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"lowkangn"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"lowkangn"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"lowkangn"},"content":"import duke.task.Event;","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"lowkangn"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"lowkangn"},"content":"import duke.task.ToDo;","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"lowkangn"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"lowkangn"},"content":" * Takes in the user\u0027s inputs and processes them to be understood by Duke to run commands.","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"lowkangn"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"lowkangn"},"content":"public abstract class Parser {","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"lowkangn"},"content":"    public enum CommandType {","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"lowkangn"},"content":"        EXIT,","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"lowkangn"},"content":"        LIST,","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"lowkangn"},"content":"        DONE,","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"lowkangn"},"content":"        UPDATE,","lastModifiedDate":"2021-09-05"},{"lineNumber":21,"author":{"gitId":"lowkangn"},"content":"        DELETE,","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"lowkangn"},"content":"        FIND,","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"lowkangn"},"content":"        TODO,","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"lowkangn"},"content":"        DEADLINE,","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"lowkangn"},"content":"        EVENT,","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"lowkangn"},"content":"        UNKNOWN","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"lowkangn"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"lowkangn"},"content":"    static final int MINIMUM_LENGTH_IF_CONTAINS_BOTH \u003d 9;","lastModifiedDate":"2021-09-05"},{"lineNumber":29,"author":{"gitId":"lowkangn"},"content":"    static final int MINIMUM_LENGTH_IF_CONTAINS_ONE \u003d 4;","lastModifiedDate":"2021-09-05"},{"lineNumber":30,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"lowkangn"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"lowkangn"},"content":"     * Takes in the user\u0027s String input and determines the type of Duke command it is.","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"lowkangn"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"lowkangn"},"content":"     * @param input The String input given by the user.","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"lowkangn"},"content":"     * @return The type of Duke command represented by the String input.","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"lowkangn"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"lowkangn"},"content":"    public static CommandType decipherInput(String input) {","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"lowkangn"},"content":"        if (input.equals(\"bye\")) {","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"lowkangn"},"content":"            return CommandType.EXIT;","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"lowkangn"},"content":"        } else if (input.equals(\"list\")) {","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"lowkangn"},"content":"            return CommandType.LIST;","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"lowkangn"},"content":"        } else if (input.startsWith(\"done\")) {","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"lowkangn"},"content":"            return CommandType.DONE;","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"lowkangn"},"content":"        } else if (input.startsWith(\"update\")) {","lastModifiedDate":"2021-09-05"},{"lineNumber":48,"author":{"gitId":"lowkangn"},"content":"            return CommandType.UPDATE;","lastModifiedDate":"2021-09-05"},{"lineNumber":49,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":50,"author":{"gitId":"lowkangn"},"content":"        } else if (input.startsWith(\"delete\")) {","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"lowkangn"},"content":"            return CommandType.DELETE;","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"lowkangn"},"content":"        } else if (input.startsWith(\"find\")) {","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"lowkangn"},"content":"            return CommandType.FIND;","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"lowkangn"},"content":"        } else if (input.startsWith(\"todo\")) {","lastModifiedDate":"2021-08-24"},{"lineNumber":57,"author":{"gitId":"lowkangn"},"content":"            return CommandType.TODO;","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"lowkangn"},"content":"        } else if (input.startsWith(\"deadline\")) {","lastModifiedDate":"2021-08-24"},{"lineNumber":60,"author":{"gitId":"lowkangn"},"content":"            return CommandType.DEADLINE;","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"lowkangn"},"content":"        } else if (input.startsWith(\"event\")) {","lastModifiedDate":"2021-08-24"},{"lineNumber":63,"author":{"gitId":"lowkangn"},"content":"            return CommandType.EVENT;","lastModifiedDate":"2021-08-24"},{"lineNumber":64,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"lowkangn"},"content":"        } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":66,"author":{"gitId":"lowkangn"},"content":"            return CommandType.UNKNOWN;","lastModifiedDate":"2021-08-24"},{"lineNumber":67,"author":{"gitId":"lowkangn"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":68,"author":{"gitId":"lowkangn"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":69,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":70,"author":{"gitId":"lowkangn"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":71,"author":{"gitId":"lowkangn"},"content":"     * Takes in the string representation of a task and returns the task represented by it.","lastModifiedDate":"2021-08-24"},{"lineNumber":72,"author":{"gitId":"lowkangn"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":73,"author":{"gitId":"lowkangn"},"content":"     * @param taskString The string representation of a task.","lastModifiedDate":"2021-08-24"},{"lineNumber":74,"author":{"gitId":"lowkangn"},"content":"     * @return The task represented by the string.","lastModifiedDate":"2021-08-24"},{"lineNumber":75,"author":{"gitId":"lowkangn"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":76,"author":{"gitId":"lowkangn"},"content":"    public static Task convertStringToTask(String taskString) {","lastModifiedDate":"2021-08-31"},{"lineNumber":77,"author":{"gitId":"lowkangn"},"content":"        assert taskString.length() !\u003d 0 : \"String representation of task is empty.\";","lastModifiedDate":"2021-09-04"},{"lineNumber":78,"author":{"gitId":"lowkangn"},"content":"        char type \u003d taskString.charAt(1);","lastModifiedDate":"2021-08-24"},{"lineNumber":79,"author":{"gitId":"lowkangn"},"content":"        boolean isDone \u003d taskString.charAt(0) \u003d\u003d \u0027X\u0027;","lastModifiedDate":"2021-08-24"},{"lineNumber":80,"author":{"gitId":"lowkangn"},"content":"        String[] splitAtSlash \u003d taskString.split(\"/\");","lastModifiedDate":"2021-08-31"},{"lineNumber":81,"author":{"gitId":"lowkangn"},"content":"        switch (type) {","lastModifiedDate":"2021-08-24"},{"lineNumber":82,"author":{"gitId":"lowkangn"},"content":"        case \u0027T\u0027:","lastModifiedDate":"2021-08-24"},{"lineNumber":83,"author":{"gitId":"lowkangn"},"content":"            return new ToDo(splitAtSlash[1], isDone);","lastModifiedDate":"2021-08-31"},{"lineNumber":84,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":85,"author":{"gitId":"lowkangn"},"content":"        case \u0027D\u0027:","lastModifiedDate":"2021-08-24"},{"lineNumber":86,"author":{"gitId":"lowkangn"},"content":"            String deadlineName \u003d splitAtSlash[1];","lastModifiedDate":"2021-08-31"},{"lineNumber":87,"author":{"gitId":"lowkangn"},"content":"            String deadlineDateAndTime \u003d splitAtSlash[2];","lastModifiedDate":"2021-08-31"},{"lineNumber":88,"author":{"gitId":"lowkangn"},"content":"            return new Deadline(deadlineName, LocalDateTime.parse(deadlineDateAndTime), isDone);","lastModifiedDate":"2021-08-24"},{"lineNumber":89,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":90,"author":{"gitId":"lowkangn"},"content":"        default:","lastModifiedDate":"2021-08-24"},{"lineNumber":91,"author":{"gitId":"lowkangn"},"content":"            String eventName \u003d splitAtSlash[1];","lastModifiedDate":"2021-08-31"},{"lineNumber":92,"author":{"gitId":"lowkangn"},"content":"            String eventDateAndTime \u003d splitAtSlash[2];","lastModifiedDate":"2021-08-31"},{"lineNumber":93,"author":{"gitId":"lowkangn"},"content":"            String eventEndTime \u003d splitAtSlash[3];","lastModifiedDate":"2021-08-31"},{"lineNumber":94,"author":{"gitId":"lowkangn"},"content":"            return new Event(eventName, LocalDateTime.parse(eventDateAndTime),","lastModifiedDate":"2021-08-24"},{"lineNumber":95,"author":{"gitId":"lowkangn"},"content":"                    LocalTime.parse(eventEndTime), isDone);","lastModifiedDate":"2021-08-24"},{"lineNumber":96,"author":{"gitId":"lowkangn"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":97,"author":{"gitId":"lowkangn"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":98,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":99,"author":{"gitId":"lowkangn"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":100,"author":{"gitId":"lowkangn"},"content":"     * Takes in a string representation of a date and time and parses it into a LocalDateTime object.","lastModifiedDate":"2021-08-24"},{"lineNumber":101,"author":{"gitId":"lowkangn"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":102,"author":{"gitId":"lowkangn"},"content":"     * @param dateAndTime The given date and time.","lastModifiedDate":"2021-08-24"},{"lineNumber":103,"author":{"gitId":"lowkangn"},"content":"     * @return A LocalDateTime object.","lastModifiedDate":"2021-08-24"},{"lineNumber":104,"author":{"gitId":"lowkangn"},"content":"     * @throws DukeException If the input date and time are incorrectly configured.","lastModifiedDate":"2021-08-24"},{"lineNumber":105,"author":{"gitId":"lowkangn"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":106,"author":{"gitId":"lowkangn"},"content":"    public static LocalDateTime formatDateTime(String dateAndTime) throws DukeException {","lastModifiedDate":"2021-08-24"},{"lineNumber":107,"author":{"gitId":"lowkangn"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":108,"author":{"gitId":"lowkangn"},"content":"            String[] splitAtComma \u003d dateAndTime.split(\", \");","lastModifiedDate":"2021-08-31"},{"lineNumber":109,"author":{"gitId":"lowkangn"},"content":"            String toFormat \u003d splitAtComma[0];","lastModifiedDate":"2021-08-31"},{"lineNumber":110,"author":{"gitId":"lowkangn"},"content":"            boolean hasInputAfterComma \u003d splitAtComma.length \u003e 1;","lastModifiedDate":"2021-09-04"},{"lineNumber":111,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":112,"author":{"gitId":"lowkangn"},"content":"            if (hasInputAfterComma) {","lastModifiedDate":"2021-09-04"},{"lineNumber":113,"author":{"gitId":"lowkangn"},"content":"                toFormat +\u003d \"T\" + splitAtComma[1];","lastModifiedDate":"2021-08-31"},{"lineNumber":114,"author":{"gitId":"lowkangn"},"content":"            } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":115,"author":{"gitId":"lowkangn"},"content":"                toFormat +\u003d \"T\" + \"00:00\";","lastModifiedDate":"2021-08-24"},{"lineNumber":116,"author":{"gitId":"lowkangn"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":117,"author":{"gitId":"lowkangn"},"content":"            return LocalDateTime.parse(toFormat);","lastModifiedDate":"2021-08-24"},{"lineNumber":118,"author":{"gitId":"lowkangn"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":119,"author":{"gitId":"lowkangn"},"content":"            throw new DukeException(\"Hey!!! Use the following format for date and time:\\n\"","lastModifiedDate":"2021-09-11"},{"lineNumber":120,"author":{"gitId":"lowkangn"},"content":"                    + \"yyyy-MM-dd, HH:mm\");","lastModifiedDate":"2021-08-24"},{"lineNumber":121,"author":{"gitId":"lowkangn"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":122,"author":{"gitId":"lowkangn"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":123,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":124,"author":{"gitId":"lowkangn"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":125,"author":{"gitId":"lowkangn"},"content":"     * Takes in the string of the done command entered by the user and returns the","lastModifiedDate":"2021-08-31"},{"lineNumber":126,"author":{"gitId":"lowkangn"},"content":"     * task number of the task to be marked as done.","lastModifiedDate":"2021-08-31"},{"lineNumber":127,"author":{"gitId":"lowkangn"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":128,"author":{"gitId":"lowkangn"},"content":"     * @param input The done command entered by the user.","lastModifiedDate":"2021-08-31"},{"lineNumber":129,"author":{"gitId":"lowkangn"},"content":"     * @return The task number to be marked as done.","lastModifiedDate":"2021-08-31"},{"lineNumber":130,"author":{"gitId":"lowkangn"},"content":"     * @throws DukeException If the given done command has missing arguments.","lastModifiedDate":"2021-08-31"},{"lineNumber":131,"author":{"gitId":"lowkangn"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":132,"author":{"gitId":"lowkangn"},"content":"    public static int parseDoneCommand(String input) throws DukeException {","lastModifiedDate":"2021-08-31"},{"lineNumber":133,"author":{"gitId":"lowkangn"},"content":"        assert input.length() !\u003d 0 : \"Invalid Done command.\";","lastModifiedDate":"2021-09-04"},{"lineNumber":134,"author":{"gitId":"lowkangn"},"content":"        String[] splitBySpace \u003d input.split(\" \");","lastModifiedDate":"2021-08-31"},{"lineNumber":135,"author":{"gitId":"lowkangn"},"content":"        boolean hasInputAfterSpace \u003d splitBySpace.length \u003e 1","lastModifiedDate":"2021-09-05"},{"lineNumber":136,"author":{"gitId":"lowkangn"},"content":"                \u0026\u0026 splitBySpace[1].trim().length() \u003e 0;","lastModifiedDate":"2021-09-05"},{"lineNumber":137,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":138,"author":{"gitId":"lowkangn"},"content":"        if (hasInputAfterSpace) {","lastModifiedDate":"2021-09-04"},{"lineNumber":139,"author":{"gitId":"lowkangn"},"content":"            return Integer.parseInt(splitBySpace[1].trim());","lastModifiedDate":"2021-08-31"},{"lineNumber":140,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":141,"author":{"gitId":"lowkangn"},"content":"        } else {","lastModifiedDate":"2021-08-31"},{"lineNumber":142,"author":{"gitId":"lowkangn"},"content":"            throw new DukeException(\"Hey!!! Please give a task number \"","lastModifiedDate":"2021-09-11"},{"lineNumber":143,"author":{"gitId":"lowkangn"},"content":"                    + \"you want me to mark as done.\");","lastModifiedDate":"2021-09-11"},{"lineNumber":144,"author":{"gitId":"lowkangn"},"content":"        }","lastModifiedDate":"2021-08-31"},{"lineNumber":145,"author":{"gitId":"lowkangn"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":146,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":147,"author":{"gitId":"lowkangn"},"content":"    private static boolean checkIfInteger(String string) {","lastModifiedDate":"2021-09-05"},{"lineNumber":148,"author":{"gitId":"lowkangn"},"content":"        try {","lastModifiedDate":"2021-09-05"},{"lineNumber":149,"author":{"gitId":"lowkangn"},"content":"            Integer.parseInt(string);","lastModifiedDate":"2021-09-05"},{"lineNumber":150,"author":{"gitId":"lowkangn"},"content":"            return true;","lastModifiedDate":"2021-09-05"},{"lineNumber":151,"author":{"gitId":"lowkangn"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-09-05"},{"lineNumber":152,"author":{"gitId":"lowkangn"},"content":"            return false;","lastModifiedDate":"2021-09-05"},{"lineNumber":153,"author":{"gitId":"lowkangn"},"content":"        }","lastModifiedDate":"2021-09-05"},{"lineNumber":154,"author":{"gitId":"lowkangn"},"content":"    }","lastModifiedDate":"2021-09-05"},{"lineNumber":155,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":156,"author":{"gitId":"lowkangn"},"content":"    private static boolean findArguments(String string) {","lastModifiedDate":"2021-09-05"},{"lineNumber":157,"author":{"gitId":"lowkangn"},"content":"        boolean hasDescription \u003d string.contains(\"/d\");","lastModifiedDate":"2021-09-05"},{"lineNumber":158,"author":{"gitId":"lowkangn"},"content":"        boolean hasTime \u003d string.contains(\"/t\");","lastModifiedDate":"2021-09-05"},{"lineNumber":159,"author":{"gitId":"lowkangn"},"content":"        int actualLength \u003d string.length();","lastModifiedDate":"2021-09-05"},{"lineNumber":160,"author":{"gitId":"lowkangn"},"content":"        if (hasDescription \u0026\u0026 hasTime) {","lastModifiedDate":"2021-09-05"},{"lineNumber":161,"author":{"gitId":"lowkangn"},"content":"            return actualLength \u003e\u003d MINIMUM_LENGTH_IF_CONTAINS_BOTH;","lastModifiedDate":"2021-09-05"},{"lineNumber":162,"author":{"gitId":"lowkangn"},"content":"        } else {","lastModifiedDate":"2021-09-05"},{"lineNumber":163,"author":{"gitId":"lowkangn"},"content":"            return hasDescription \u0026\u0026 actualLength \u003e\u003d MINIMUM_LENGTH_IF_CONTAINS_ONE","lastModifiedDate":"2021-09-05"},{"lineNumber":164,"author":{"gitId":"lowkangn"},"content":"                    || hasTime \u0026\u0026 actualLength \u003e\u003d MINIMUM_LENGTH_IF_CONTAINS_ONE;","lastModifiedDate":"2021-09-05"},{"lineNumber":165,"author":{"gitId":"lowkangn"},"content":"        }","lastModifiedDate":"2021-09-05"},{"lineNumber":166,"author":{"gitId":"lowkangn"},"content":"    }","lastModifiedDate":"2021-09-05"},{"lineNumber":167,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":168,"author":{"gitId":"lowkangn"},"content":"    private static String[] extractArguments(String string) {","lastModifiedDate":"2021-09-05"},{"lineNumber":169,"author":{"gitId":"lowkangn"},"content":"        String[] descriptionAndTime \u003d new String[2];","lastModifiedDate":"2021-09-05"},{"lineNumber":170,"author":{"gitId":"lowkangn"},"content":"        int descriptionIndex \u003d string.indexOf(\"/d \");","lastModifiedDate":"2021-09-05"},{"lineNumber":171,"author":{"gitId":"lowkangn"},"content":"        int timeIndex \u003d string.indexOf(\"/t \");","lastModifiedDate":"2021-09-05"},{"lineNumber":172,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":173,"author":{"gitId":"lowkangn"},"content":"        if (descriptionIndex \u003c 0) {","lastModifiedDate":"2021-09-05"},{"lineNumber":174,"author":{"gitId":"lowkangn"},"content":"            descriptionAndTime[1] \u003d string.substring(timeIndex + 3);","lastModifiedDate":"2021-09-05"},{"lineNumber":175,"author":{"gitId":"lowkangn"},"content":"        } else if (timeIndex \u003c 0) {","lastModifiedDate":"2021-09-05"},{"lineNumber":176,"author":{"gitId":"lowkangn"},"content":"            descriptionAndTime[0] \u003d string.substring(descriptionIndex + 3);","lastModifiedDate":"2021-09-05"},{"lineNumber":177,"author":{"gitId":"lowkangn"},"content":"        } else if (descriptionIndex \u003c timeIndex) {","lastModifiedDate":"2021-09-05"},{"lineNumber":178,"author":{"gitId":"lowkangn"},"content":"            String[] splitAtT \u003d string.substring(descriptionIndex + 3).split(\"/t \");","lastModifiedDate":"2021-09-05"},{"lineNumber":179,"author":{"gitId":"lowkangn"},"content":"            descriptionAndTime[0] \u003d splitAtT[0].trim();","lastModifiedDate":"2021-09-05"},{"lineNumber":180,"author":{"gitId":"lowkangn"},"content":"            descriptionAndTime[1] \u003d splitAtT[1].trim();","lastModifiedDate":"2021-09-05"},{"lineNumber":181,"author":{"gitId":"lowkangn"},"content":"        } else {","lastModifiedDate":"2021-09-05"},{"lineNumber":182,"author":{"gitId":"lowkangn"},"content":"            String[] splitAtD \u003d string.substring(timeIndex + 3).split(\"/d \");","lastModifiedDate":"2021-09-05"},{"lineNumber":183,"author":{"gitId":"lowkangn"},"content":"            descriptionAndTime[0] \u003d splitAtD[1].trim();","lastModifiedDate":"2021-09-05"},{"lineNumber":184,"author":{"gitId":"lowkangn"},"content":"            descriptionAndTime[1] \u003d splitAtD[0].trim();","lastModifiedDate":"2021-09-05"},{"lineNumber":185,"author":{"gitId":"lowkangn"},"content":"        }","lastModifiedDate":"2021-09-05"},{"lineNumber":186,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":187,"author":{"gitId":"lowkangn"},"content":"        return descriptionAndTime;","lastModifiedDate":"2021-09-05"},{"lineNumber":188,"author":{"gitId":"lowkangn"},"content":"    }","lastModifiedDate":"2021-09-05"},{"lineNumber":189,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":190,"author":{"gitId":"lowkangn"},"content":"    /**","lastModifiedDate":"2021-09-05"},{"lineNumber":191,"author":{"gitId":"lowkangn"},"content":"     * Takes in the string of the update command entered by the user and extracts the","lastModifiedDate":"2021-09-05"},{"lineNumber":192,"author":{"gitId":"lowkangn"},"content":"     * arguments passed into the update command.","lastModifiedDate":"2021-09-05"},{"lineNumber":193,"author":{"gitId":"lowkangn"},"content":"     *","lastModifiedDate":"2021-09-05"},{"lineNumber":194,"author":{"gitId":"lowkangn"},"content":"     * @param input The update command entered by the user.","lastModifiedDate":"2021-09-05"},{"lineNumber":195,"author":{"gitId":"lowkangn"},"content":"     * @return The extracted arguments of the update command.","lastModifiedDate":"2021-09-05"},{"lineNumber":196,"author":{"gitId":"lowkangn"},"content":"     * @throws DukeException If the given update command is missing arguments.","lastModifiedDate":"2021-09-05"},{"lineNumber":197,"author":{"gitId":"lowkangn"},"content":"     */","lastModifiedDate":"2021-09-05"},{"lineNumber":198,"author":{"gitId":"lowkangn"},"content":"    public static String[] parseUpdateCommand(String input) throws DukeException {","lastModifiedDate":"2021-09-05"},{"lineNumber":199,"author":{"gitId":"lowkangn"},"content":"        assert input.length() !\u003d 0 : \"Invalid Update command.\";","lastModifiedDate":"2021-09-05"},{"lineNumber":200,"author":{"gitId":"lowkangn"},"content":"        String[] splitBySpace \u003d input.split(\" \", 3);","lastModifiedDate":"2021-09-05"},{"lineNumber":201,"author":{"gitId":"lowkangn"},"content":"        boolean hasTaskNumber \u003d splitBySpace.length \u003e 1","lastModifiedDate":"2021-09-05"},{"lineNumber":202,"author":{"gitId":"lowkangn"},"content":"                \u0026\u0026 checkIfInteger(splitBySpace[1].trim());","lastModifiedDate":"2021-09-05"},{"lineNumber":203,"author":{"gitId":"lowkangn"},"content":"        boolean hasArguments \u003d splitBySpace.length \u003e 2","lastModifiedDate":"2021-09-05"},{"lineNumber":204,"author":{"gitId":"lowkangn"},"content":"                \u0026\u0026 findArguments(splitBySpace[2].trim());","lastModifiedDate":"2021-09-05"},{"lineNumber":205,"author":{"gitId":"lowkangn"},"content":"        boolean isValidUpdateCommand \u003d hasTaskNumber \u0026\u0026 hasArguments;","lastModifiedDate":"2021-09-05"},{"lineNumber":206,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":207,"author":{"gitId":"lowkangn"},"content":"        if (isValidUpdateCommand) {","lastModifiedDate":"2021-09-05"},{"lineNumber":208,"author":{"gitId":"lowkangn"},"content":"            String[] numberDescriptionAndTime \u003d new String[3];","lastModifiedDate":"2021-09-05"},{"lineNumber":209,"author":{"gitId":"lowkangn"},"content":"            numberDescriptionAndTime[0] \u003d splitBySpace[1].trim();","lastModifiedDate":"2021-09-05"},{"lineNumber":210,"author":{"gitId":"lowkangn"},"content":"            String[] commandArguments \u003d extractArguments(splitBySpace[2].trim());","lastModifiedDate":"2021-09-05"},{"lineNumber":211,"author":{"gitId":"lowkangn"},"content":"            numberDescriptionAndTime[1] \u003d commandArguments[0];","lastModifiedDate":"2021-09-05"},{"lineNumber":212,"author":{"gitId":"lowkangn"},"content":"            numberDescriptionAndTime[2] \u003d commandArguments[1];","lastModifiedDate":"2021-09-05"},{"lineNumber":213,"author":{"gitId":"lowkangn"},"content":"            return numberDescriptionAndTime;","lastModifiedDate":"2021-09-05"},{"lineNumber":214,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":215,"author":{"gitId":"lowkangn"},"content":"        } else if (!hasTaskNumber) {","lastModifiedDate":"2021-09-05"},{"lineNumber":216,"author":{"gitId":"lowkangn"},"content":"            throw new DukeException(\"Hey!!! Please state which task number \"","lastModifiedDate":"2021-09-11"},{"lineNumber":217,"author":{"gitId":"lowkangn"},"content":"                    + \"you want me to update.\");","lastModifiedDate":"2021-09-11"},{"lineNumber":218,"author":{"gitId":"lowkangn"},"content":"        } else {","lastModifiedDate":"2021-09-05"},{"lineNumber":219,"author":{"gitId":"lowkangn"},"content":"            throw new DukeException(\"Hey!!! Please provide a description or \"","lastModifiedDate":"2021-09-11"},{"lineNumber":220,"author":{"gitId":"lowkangn"},"content":"                    + \"time to me update.\");","lastModifiedDate":"2021-09-11"},{"lineNumber":221,"author":{"gitId":"lowkangn"},"content":"        }","lastModifiedDate":"2021-09-05"},{"lineNumber":222,"author":{"gitId":"lowkangn"},"content":"    }","lastModifiedDate":"2021-09-05"},{"lineNumber":223,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":224,"author":{"gitId":"lowkangn"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":225,"author":{"gitId":"lowkangn"},"content":"     * Takes in the string of the delete command entered by the user and returns the","lastModifiedDate":"2021-08-31"},{"lineNumber":226,"author":{"gitId":"lowkangn"},"content":"     * task number of the task to deleted.","lastModifiedDate":"2021-08-31"},{"lineNumber":227,"author":{"gitId":"lowkangn"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":228,"author":{"gitId":"lowkangn"},"content":"     * @param input The delete command entered by the user.","lastModifiedDate":"2021-08-31"},{"lineNumber":229,"author":{"gitId":"lowkangn"},"content":"     * @return The task number to be deleted.","lastModifiedDate":"2021-08-31"},{"lineNumber":230,"author":{"gitId":"lowkangn"},"content":"     * @throws DukeException If the given delete command has missing arguments.","lastModifiedDate":"2021-08-31"},{"lineNumber":231,"author":{"gitId":"lowkangn"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":232,"author":{"gitId":"lowkangn"},"content":"    public static int parseDeleteCommand(String input) throws DukeException {","lastModifiedDate":"2021-08-31"},{"lineNumber":233,"author":{"gitId":"lowkangn"},"content":"        assert input.length() !\u003d 0 : \"Invalid Delete command.\";","lastModifiedDate":"2021-09-04"},{"lineNumber":234,"author":{"gitId":"lowkangn"},"content":"        String[] splitBySpace \u003d input.split(\" \", 2);","lastModifiedDate":"2021-08-31"},{"lineNumber":235,"author":{"gitId":"lowkangn"},"content":"        boolean hasInputAfterSpace \u003d splitBySpace.length \u003e 1","lastModifiedDate":"2021-09-04"},{"lineNumber":236,"author":{"gitId":"lowkangn"},"content":"                \u0026\u0026 splitBySpace[1].trim().length() \u003e 0;","lastModifiedDate":"2021-09-04"},{"lineNumber":237,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":238,"author":{"gitId":"lowkangn"},"content":"        if (hasInputAfterSpace) {","lastModifiedDate":"2021-09-04"},{"lineNumber":239,"author":{"gitId":"lowkangn"},"content":"            return Integer.parseInt(splitBySpace[1].trim());","lastModifiedDate":"2021-08-31"},{"lineNumber":240,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":241,"author":{"gitId":"lowkangn"},"content":"        } else {","lastModifiedDate":"2021-08-31"},{"lineNumber":242,"author":{"gitId":"lowkangn"},"content":"            throw new DukeException(\"Hey!!! Please state which task number \"","lastModifiedDate":"2021-09-11"},{"lineNumber":243,"author":{"gitId":"lowkangn"},"content":"                    + \"you want me to delete.\");","lastModifiedDate":"2021-09-11"},{"lineNumber":244,"author":{"gitId":"lowkangn"},"content":"        }","lastModifiedDate":"2021-08-31"},{"lineNumber":245,"author":{"gitId":"lowkangn"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":246,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":247,"author":{"gitId":"lowkangn"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":248,"author":{"gitId":"lowkangn"},"content":"     * Takes in the string of the find command entered by the user and returns the","lastModifiedDate":"2021-08-31"},{"lineNumber":249,"author":{"gitId":"lowkangn"},"content":"     * substring to search for.","lastModifiedDate":"2021-08-31"},{"lineNumber":250,"author":{"gitId":"lowkangn"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":251,"author":{"gitId":"lowkangn"},"content":"     * @param input The find command entered by the user.","lastModifiedDate":"2021-08-31"},{"lineNumber":252,"author":{"gitId":"lowkangn"},"content":"     * @return The substring to search for.","lastModifiedDate":"2021-08-31"},{"lineNumber":253,"author":{"gitId":"lowkangn"},"content":"     * @throws DukeException If the given find command has missing arguments.","lastModifiedDate":"2021-08-31"},{"lineNumber":254,"author":{"gitId":"lowkangn"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":255,"author":{"gitId":"lowkangn"},"content":"    public static String parseFindCommand(String input) throws DukeException {","lastModifiedDate":"2021-08-31"},{"lineNumber":256,"author":{"gitId":"lowkangn"},"content":"        assert input.length() !\u003d 0 : \"Invalid Find command.\";","lastModifiedDate":"2021-09-04"},{"lineNumber":257,"author":{"gitId":"lowkangn"},"content":"        String[] splitBySpace \u003d input.split(\" \", 2);","lastModifiedDate":"2021-08-31"},{"lineNumber":258,"author":{"gitId":"lowkangn"},"content":"        boolean hasInputAfterSpace \u003d splitBySpace.length \u003e 1","lastModifiedDate":"2021-09-04"},{"lineNumber":259,"author":{"gitId":"lowkangn"},"content":"                \u0026\u0026 splitBySpace[1].trim().length() \u003e 0;","lastModifiedDate":"2021-09-04"},{"lineNumber":260,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":261,"author":{"gitId":"lowkangn"},"content":"        if (hasInputAfterSpace) {","lastModifiedDate":"2021-09-04"},{"lineNumber":262,"author":{"gitId":"lowkangn"},"content":"            return splitBySpace[1].trim();","lastModifiedDate":"2021-08-31"},{"lineNumber":263,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":264,"author":{"gitId":"lowkangn"},"content":"        } else {","lastModifiedDate":"2021-08-31"},{"lineNumber":265,"author":{"gitId":"lowkangn"},"content":"            throw new DukeException(\"Hey!!! Give me something to \"","lastModifiedDate":"2021-09-11"},{"lineNumber":266,"author":{"gitId":"lowkangn"},"content":"                    + \"actually search for.\");","lastModifiedDate":"2021-09-11"},{"lineNumber":267,"author":{"gitId":"lowkangn"},"content":"        }","lastModifiedDate":"2021-08-31"},{"lineNumber":268,"author":{"gitId":"lowkangn"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":269,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":270,"author":{"gitId":"lowkangn"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":271,"author":{"gitId":"lowkangn"},"content":"     * Takes in the substring of the todo command entered by the user and returns a","lastModifiedDate":"2021-08-31"},{"lineNumber":272,"author":{"gitId":"lowkangn"},"content":"     * Todo object representing the input.","lastModifiedDate":"2021-08-31"},{"lineNumber":273,"author":{"gitId":"lowkangn"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":274,"author":{"gitId":"lowkangn"},"content":"     * @param input The substring of the todo command entered by the user.","lastModifiedDate":"2021-08-31"},{"lineNumber":275,"author":{"gitId":"lowkangn"},"content":"     * @return The Todo object.","lastModifiedDate":"2021-08-31"},{"lineNumber":276,"author":{"gitId":"lowkangn"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":277,"author":{"gitId":"lowkangn"},"content":"    public static ToDo parseTodoCommand(String input) {","lastModifiedDate":"2021-08-31"},{"lineNumber":278,"author":{"gitId":"lowkangn"},"content":"        assert input.length() !\u003d 0 : \"Invalid Todo command.\";","lastModifiedDate":"2021-09-04"},{"lineNumber":279,"author":{"gitId":"lowkangn"},"content":"        return new ToDo(input, false);","lastModifiedDate":"2021-08-31"},{"lineNumber":280,"author":{"gitId":"lowkangn"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":281,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":282,"author":{"gitId":"lowkangn"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":283,"author":{"gitId":"lowkangn"},"content":"     * Takes in the substring of the deadline command entered by the user and returns a","lastModifiedDate":"2021-08-31"},{"lineNumber":284,"author":{"gitId":"lowkangn"},"content":"     * Deadline object representing the input.","lastModifiedDate":"2021-08-31"},{"lineNumber":285,"author":{"gitId":"lowkangn"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":286,"author":{"gitId":"lowkangn"},"content":"     * @param input The substring of the deadline command entered by the user.","lastModifiedDate":"2021-08-31"},{"lineNumber":287,"author":{"gitId":"lowkangn"},"content":"     * @return The Deadline object.","lastModifiedDate":"2021-08-31"},{"lineNumber":288,"author":{"gitId":"lowkangn"},"content":"     * @throws DukeException If the given deadline command has missing arguments.","lastModifiedDate":"2021-08-31"},{"lineNumber":289,"author":{"gitId":"lowkangn"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":290,"author":{"gitId":"lowkangn"},"content":"    public static Deadline parseDeadlineCommand(String input) throws DukeException {","lastModifiedDate":"2021-08-31"},{"lineNumber":291,"author":{"gitId":"lowkangn"},"content":"        assert input.length() !\u003d 0 : \"Invalid Deadline command.\";","lastModifiedDate":"2021-09-04"},{"lineNumber":292,"author":{"gitId":"lowkangn"},"content":"        String[] nameAndDeadline \u003d input.split(\" /by \");","lastModifiedDate":"2021-08-31"},{"lineNumber":293,"author":{"gitId":"lowkangn"},"content":"        boolean hasInputAfterBy \u003d nameAndDeadline.length \u003e 1","lastModifiedDate":"2021-09-04"},{"lineNumber":294,"author":{"gitId":"lowkangn"},"content":"                \u0026\u0026 nameAndDeadline[1].trim().length() \u003e 0;","lastModifiedDate":"2021-09-04"},{"lineNumber":295,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":296,"author":{"gitId":"lowkangn"},"content":"        if (hasInputAfterBy) {","lastModifiedDate":"2021-09-04"},{"lineNumber":297,"author":{"gitId":"lowkangn"},"content":"            LocalDateTime deadline \u003d Parser","lastModifiedDate":"2021-08-31"},{"lineNumber":298,"author":{"gitId":"lowkangn"},"content":"                    .formatDateTime(nameAndDeadline[1]);","lastModifiedDate":"2021-08-31"},{"lineNumber":299,"author":{"gitId":"lowkangn"},"content":"            return new Deadline(nameAndDeadline[0], deadline,","lastModifiedDate":"2021-08-31"},{"lineNumber":300,"author":{"gitId":"lowkangn"},"content":"                    false);","lastModifiedDate":"2021-08-31"},{"lineNumber":301,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":302,"author":{"gitId":"lowkangn"},"content":"        } else {","lastModifiedDate":"2021-08-31"},{"lineNumber":303,"author":{"gitId":"lowkangn"},"content":"            throw new DukeException(\"Hey!!! Please provide a date or \"","lastModifiedDate":"2021-09-11"},{"lineNumber":304,"author":{"gitId":"lowkangn"},"content":"                    + \"time for the deadline.\");","lastModifiedDate":"2021-08-31"},{"lineNumber":305,"author":{"gitId":"lowkangn"},"content":"        }","lastModifiedDate":"2021-08-31"},{"lineNumber":306,"author":{"gitId":"lowkangn"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":307,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":308,"author":{"gitId":"lowkangn"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":309,"author":{"gitId":"lowkangn"},"content":"     * Takes in the substring of the event command entered by the user and returns a","lastModifiedDate":"2021-08-31"},{"lineNumber":310,"author":{"gitId":"lowkangn"},"content":"     * Event object representing the input.","lastModifiedDate":"2021-08-31"},{"lineNumber":311,"author":{"gitId":"lowkangn"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":312,"author":{"gitId":"lowkangn"},"content":"     * @param input The substring of the event command entered by the user.","lastModifiedDate":"2021-08-31"},{"lineNumber":313,"author":{"gitId":"lowkangn"},"content":"     * @return The Event object.","lastModifiedDate":"2021-08-31"},{"lineNumber":314,"author":{"gitId":"lowkangn"},"content":"     * @throws DukeException If the given event command has missing arguments.","lastModifiedDate":"2021-08-31"},{"lineNumber":315,"author":{"gitId":"lowkangn"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":316,"author":{"gitId":"lowkangn"},"content":"    public static Event parseEventCommand(String input) throws DukeException {","lastModifiedDate":"2021-08-31"},{"lineNumber":317,"author":{"gitId":"lowkangn"},"content":"        assert input.length() !\u003d 0 : \"Invalid Event command.\";","lastModifiedDate":"2021-09-04"},{"lineNumber":318,"author":{"gitId":"lowkangn"},"content":"        String[] nameAndTime \u003d input.split(\" /at \");","lastModifiedDate":"2021-08-31"},{"lineNumber":319,"author":{"gitId":"lowkangn"},"content":"        boolean hasInputAfterAt \u003d nameAndTime.length \u003e 1","lastModifiedDate":"2021-09-04"},{"lineNumber":320,"author":{"gitId":"lowkangn"},"content":"                \u0026\u0026 nameAndTime[1].trim().length() \u003e 0;","lastModifiedDate":"2021-09-04"},{"lineNumber":321,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":322,"author":{"gitId":"lowkangn"},"content":"        if (hasInputAfterAt) {","lastModifiedDate":"2021-09-04"},{"lineNumber":323,"author":{"gitId":"lowkangn"},"content":"            String[] splitEndTime \u003d nameAndTime[1].split(\" - \");","lastModifiedDate":"2021-08-31"},{"lineNumber":324,"author":{"gitId":"lowkangn"},"content":"            LocalDateTime eventTime \u003d Parser","lastModifiedDate":"2021-08-31"},{"lineNumber":325,"author":{"gitId":"lowkangn"},"content":"                    .formatDateTime(splitEndTime[0]);","lastModifiedDate":"2021-08-31"},{"lineNumber":326,"author":{"gitId":"lowkangn"},"content":"            boolean hasInputAfterDash \u003d splitEndTime.length \u003e 1","lastModifiedDate":"2021-09-04"},{"lineNumber":327,"author":{"gitId":"lowkangn"},"content":"                    \u0026\u0026 splitEndTime[1].trim().length() \u003e 0;","lastModifiedDate":"2021-09-04"},{"lineNumber":328,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":329,"author":{"gitId":"lowkangn"},"content":"            if (hasInputAfterDash) {","lastModifiedDate":"2021-09-04"},{"lineNumber":330,"author":{"gitId":"lowkangn"},"content":"                LocalTime endTime \u003d LocalTime.parse(splitEndTime[1]);","lastModifiedDate":"2021-08-31"},{"lineNumber":331,"author":{"gitId":"lowkangn"},"content":"                return new Event(nameAndTime[0],","lastModifiedDate":"2021-08-31"},{"lineNumber":332,"author":{"gitId":"lowkangn"},"content":"                        eventTime, endTime, false);","lastModifiedDate":"2021-08-31"},{"lineNumber":333,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":334,"author":{"gitId":"lowkangn"},"content":"            } else {","lastModifiedDate":"2021-08-31"},{"lineNumber":335,"author":{"gitId":"lowkangn"},"content":"                throw new DukeException(\"Hey!!! Please provide an end \"","lastModifiedDate":"2021-09-11"},{"lineNumber":336,"author":{"gitId":"lowkangn"},"content":"                        + \"time for the event.\");","lastModifiedDate":"2021-08-31"},{"lineNumber":337,"author":{"gitId":"lowkangn"},"content":"            }","lastModifiedDate":"2021-08-31"},{"lineNumber":338,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":339,"author":{"gitId":"lowkangn"},"content":"        } else {","lastModifiedDate":"2021-08-31"},{"lineNumber":340,"author":{"gitId":"lowkangn"},"content":"            throw new DukeException(\"Hey!!! Please provide a date or \"","lastModifiedDate":"2021-09-11"},{"lineNumber":341,"author":{"gitId":"lowkangn"},"content":"                    + \"time for the event.\");","lastModifiedDate":"2021-08-31"},{"lineNumber":342,"author":{"gitId":"lowkangn"},"content":"        }","lastModifiedDate":"2021-08-31"},{"lineNumber":343,"author":{"gitId":"lowkangn"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":344,"author":{"gitId":"lowkangn"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"lowkangn":344}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lowkangn"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"lowkangn"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"lowkangn"},"content":"import java.io.BufferedWriter;","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"lowkangn"},"content":"import java.io.File;","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"lowkangn"},"content":"import java.io.FileReader;","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"lowkangn"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"lowkangn"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"lowkangn"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"lowkangn"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"lowkangn"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"lowkangn"},"content":" * Handles the reading and writing to the save file.","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"lowkangn"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"lowkangn"},"content":"public class Storage {","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"lowkangn"},"content":"    private String filePath;","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"lowkangn"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"lowkangn"},"content":"     * Initialises a new instance of Storage.","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"lowkangn"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"lowkangn"},"content":"     * @param filePath The filepath to save the save file to.","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"lowkangn"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"lowkangn"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"lowkangn"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"lowkangn"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"lowkangn"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"lowkangn"},"content":"     * Reads from the save file if it exists, otherwise a new save file is created.","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"lowkangn"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"lowkangn"},"content":"     * @return The previously saved task list, if it exists.","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"lowkangn"},"content":"     * @throws DukeException If there was an error reading or writing to the save file.","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"lowkangn"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"lowkangn"},"content":"    public ArrayList\u003cTask\u003e load() throws DukeException {","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"lowkangn"},"content":"        File saveFile \u003d new File(this.filePath);","lastModifiedDate":"2021-08-31"},{"lineNumber":36,"author":{"gitId":"lowkangn"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"lowkangn"},"content":"            ArrayList\u003cTask\u003e savedList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"lowkangn"},"content":"            if (saveFile.isFile()) {","lastModifiedDate":"2021-08-31"},{"lineNumber":40,"author":{"gitId":"lowkangn"},"content":"                // If the save file exists, simply load the data from the save file.","lastModifiedDate":"2021-09-04"},{"lineNumber":41,"author":{"gitId":"lowkangn"},"content":"                BufferedReader br \u003d new BufferedReader(new FileReader(this.filePath));","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"lowkangn"},"content":"                String nextTask \u003d br.readLine();","lastModifiedDate":"2021-08-31"},{"lineNumber":43,"author":{"gitId":"lowkangn"},"content":"                while (nextTask !\u003d null) {","lastModifiedDate":"2021-08-31"},{"lineNumber":44,"author":{"gitId":"lowkangn"},"content":"                    savedList.add(Parser.convertStringToTask(nextTask));","lastModifiedDate":"2021-08-31"},{"lineNumber":45,"author":{"gitId":"lowkangn"},"content":"                    nextTask \u003d br.readLine();","lastModifiedDate":"2021-08-31"},{"lineNumber":46,"author":{"gitId":"lowkangn"},"content":"                }","lastModifiedDate":"2021-08-30"},{"lineNumber":47,"author":{"gitId":"lowkangn"},"content":"                br.close();","lastModifiedDate":"2021-08-30"},{"lineNumber":48,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"lowkangn"},"content":"            } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"lowkangn"},"content":"                // If the save file does not exist, create a new save file.","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"lowkangn"},"content":"                BufferedWriter bw \u003d new BufferedWriter(new FileWriter(this.filePath));","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"lowkangn"},"content":"                bw.close();","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"lowkangn"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"lowkangn"},"content":"            return savedList;","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"lowkangn"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"lowkangn"},"content":"            throw new DukeException(\"Damn!!! The save file was too intimidated to form.\\n\"","lastModifiedDate":"2021-09-11"},{"lineNumber":57,"author":{"gitId":"lowkangn"},"content":"            + \"Your changes may not be saved.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"lowkangn"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"lowkangn"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":60,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"lowkangn"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"lowkangn"},"content":"     * Saves the current task list to the save file.","lastModifiedDate":"2021-08-24"},{"lineNumber":63,"author":{"gitId":"lowkangn"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":64,"author":{"gitId":"lowkangn"},"content":"     * @param  taskList The given task list.","lastModifiedDate":"2021-08-30"},{"lineNumber":65,"author":{"gitId":"lowkangn"},"content":"     * @throws DukeException If there was an error writing to the save file.","lastModifiedDate":"2021-08-24"},{"lineNumber":66,"author":{"gitId":"lowkangn"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":67,"author":{"gitId":"lowkangn"},"content":"    public void save(TaskList taskList) throws DukeException {","lastModifiedDate":"2021-08-24"},{"lineNumber":68,"author":{"gitId":"lowkangn"},"content":"        assert taskList !\u003d null : \"Task list is not initialised.\";","lastModifiedDate":"2021-09-04"},{"lineNumber":69,"author":{"gitId":"lowkangn"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":70,"author":{"gitId":"lowkangn"},"content":"            BufferedWriter bw \u003d new BufferedWriter(new FileWriter(this.filePath));","lastModifiedDate":"2021-08-24"},{"lineNumber":71,"author":{"gitId":"lowkangn"},"content":"            for (Task task : taskList.get()) {","lastModifiedDate":"2021-08-24"},{"lineNumber":72,"author":{"gitId":"lowkangn"},"content":"                bw.write(task.parseToString() + \"\\n\");","lastModifiedDate":"2021-08-24"},{"lineNumber":73,"author":{"gitId":"lowkangn"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":74,"author":{"gitId":"lowkangn"},"content":"            bw.close();","lastModifiedDate":"2021-08-24"},{"lineNumber":75,"author":{"gitId":"lowkangn"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":76,"author":{"gitId":"lowkangn"},"content":"            throw new DukeException(\"What the!!! The save file is too terrified to \"","lastModifiedDate":"2021-09-11"},{"lineNumber":77,"author":{"gitId":"lowkangn"},"content":"                + \"let me save your task list!\");","lastModifiedDate":"2021-09-11"},{"lineNumber":78,"author":{"gitId":"lowkangn"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":79,"author":{"gitId":"lowkangn"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":80,"author":{"gitId":"lowkangn"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"lowkangn":80}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lowkangn"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"lowkangn"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"lowkangn"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"lowkangn"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"lowkangn"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"lowkangn"},"content":" * Stores and handles operations for a list of tasks.","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"lowkangn"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"lowkangn"},"content":"public class TaskList {","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"lowkangn"},"content":"    private ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"lowkangn"},"content":"    private int taskCount;","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"lowkangn"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"lowkangn"},"content":"     * Initialises a new instance of TaskList.","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"lowkangn"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"lowkangn"},"content":"     * @param tasks The given tasks to store in the task list.","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"lowkangn"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"lowkangn"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"lowkangn"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"lowkangn"},"content":"        this.taskCount \u003d tasks.size();","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"lowkangn"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"lowkangn"},"content":"    public ArrayList\u003cTask\u003e get() {","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"lowkangn"},"content":"        return this.tasks;","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"lowkangn"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"lowkangn"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"lowkangn"},"content":"     * Adds a task to the task list.","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"lowkangn"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"lowkangn"},"content":"     * @param task The task to be added to the task list.","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"lowkangn"},"content":"     * @return A String output indicating that the task had been added to the task list.","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"lowkangn"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"lowkangn"},"content":"    public String addTask(Task task) {","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"lowkangn"},"content":"        this.tasks.add(task);","lastModifiedDate":"2021-08-30"},{"lineNumber":38,"author":{"gitId":"lowkangn"},"content":"        this.taskCount++;","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"lowkangn"},"content":"        String taskCount \u003d (this.taskCount \u003d\u003d 1) ? \"1 task\" : this.taskCount + \" tasks\";","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"lowkangn"},"content":"        return \"You\u0027ve got it kid. I\u0027ve added this task:\\n\" + \"  \" + task.toString()","lastModifiedDate":"2021-09-11"},{"lineNumber":41,"author":{"gitId":"lowkangn"},"content":"                + \"\\n\" + \"Now you have \" + taskCount + \" in the list.\\n\";","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"lowkangn"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"lowkangn"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"lowkangn"},"content":"     * Lists the current tasks in the task list.","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"lowkangn"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"lowkangn"},"content":"     * @return A String representing the tasks in the task list.","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"lowkangn"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"lowkangn"},"content":"    public String listTasks() {","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"lowkangn"},"content":"        int i \u003d 0;","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"lowkangn"},"content":"        String header \u003d \"Here are the tasks in your list:\\n\";","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"lowkangn"},"content":"        String result \u003d \"\";","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"lowkangn"},"content":"        for (Task task : this.tasks) {","lastModifiedDate":"2021-08-30"},{"lineNumber":54,"author":{"gitId":"lowkangn"},"content":"            if (task !\u003d null) {","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"lowkangn"},"content":"                result +\u003d ++i + \".\" + task.toString() + \"\\n\";","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"lowkangn"},"content":"            } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":57,"author":{"gitId":"lowkangn"},"content":"                break;","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"lowkangn"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"lowkangn"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":60,"author":{"gitId":"lowkangn"},"content":"        if (i \u003d\u003d 0) {","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"lowkangn"},"content":"            return header + \"Your list is currently empty.\\n\";","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"lowkangn"},"content":"        } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":63,"author":{"gitId":"lowkangn"},"content":"            return header + result;","lastModifiedDate":"2021-08-24"},{"lineNumber":64,"author":{"gitId":"lowkangn"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"lowkangn"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":66,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":67,"author":{"gitId":"lowkangn"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":68,"author":{"gitId":"lowkangn"},"content":"     * Marks a certain task in the task list as done, using its task number.","lastModifiedDate":"2021-08-24"},{"lineNumber":69,"author":{"gitId":"lowkangn"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":70,"author":{"gitId":"lowkangn"},"content":"     * @param taskNumber The number of the task in the task list.","lastModifiedDate":"2021-08-24"},{"lineNumber":71,"author":{"gitId":"lowkangn"},"content":"     * @return A String output indicating that the task was mark as done.","lastModifiedDate":"2021-08-24"},{"lineNumber":72,"author":{"gitId":"lowkangn"},"content":"     * @throws DukeException If the task number does not exist.","lastModifiedDate":"2021-08-24"},{"lineNumber":73,"author":{"gitId":"lowkangn"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":74,"author":{"gitId":"lowkangn"},"content":"    public String markTaskAsDone(int taskNumber) throws DukeException {","lastModifiedDate":"2021-08-24"},{"lineNumber":75,"author":{"gitId":"lowkangn"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":76,"author":{"gitId":"lowkangn"},"content":"            Task doneTask \u003d this.tasks.get(taskNumber - 1);","lastModifiedDate":"2021-08-30"},{"lineNumber":77,"author":{"gitId":"lowkangn"},"content":"            doneTask.markDone();","lastModifiedDate":"2021-08-24"},{"lineNumber":78,"author":{"gitId":"lowkangn"},"content":"            return \"Nice work! I\u0027ve marked this task as done:\\n\" + \"  \"","lastModifiedDate":"2021-09-11"},{"lineNumber":79,"author":{"gitId":"lowkangn"},"content":"                    + doneTask.toString() + \"\\n\";","lastModifiedDate":"2021-08-24"},{"lineNumber":80,"author":{"gitId":"lowkangn"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":81,"author":{"gitId":"lowkangn"},"content":"            throw new DukeException(\"What!!! That task does not exist!\");","lastModifiedDate":"2021-09-11"},{"lineNumber":82,"author":{"gitId":"lowkangn"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":83,"author":{"gitId":"lowkangn"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":84,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":85,"author":{"gitId":"lowkangn"},"content":"    /**","lastModifiedDate":"2021-09-05"},{"lineNumber":86,"author":{"gitId":"lowkangn"},"content":"     * Updates a certain task in the task list with new values, using its","lastModifiedDate":"2021-09-05"},{"lineNumber":87,"author":{"gitId":"lowkangn"},"content":"     * task number.","lastModifiedDate":"2021-09-05"},{"lineNumber":88,"author":{"gitId":"lowkangn"},"content":"     *","lastModifiedDate":"2021-09-05"},{"lineNumber":89,"author":{"gitId":"lowkangn"},"content":"     * @param valuesToUpdate The values to change for the task.","lastModifiedDate":"2021-09-05"},{"lineNumber":90,"author":{"gitId":"lowkangn"},"content":"     * @return A String output indicating that the task was updated.","lastModifiedDate":"2021-09-05"},{"lineNumber":91,"author":{"gitId":"lowkangn"},"content":"     * @throws DukeException If the task","lastModifiedDate":"2021-09-05"},{"lineNumber":92,"author":{"gitId":"lowkangn"},"content":"     */","lastModifiedDate":"2021-09-05"},{"lineNumber":93,"author":{"gitId":"lowkangn"},"content":"    public String updateTask(String[] valuesToUpdate) throws DukeException {","lastModifiedDate":"2021-09-05"},{"lineNumber":94,"author":{"gitId":"lowkangn"},"content":"        assert valuesToUpdate.length \u003d\u003d 3","lastModifiedDate":"2021-09-05"},{"lineNumber":95,"author":{"gitId":"lowkangn"},"content":"                : \"Not enough information provided to update task.\";","lastModifiedDate":"2021-09-05"},{"lineNumber":96,"author":{"gitId":"lowkangn"},"content":"        int taskNumber \u003d Integer.parseInt(valuesToUpdate[0]) - 1;","lastModifiedDate":"2021-09-05"},{"lineNumber":97,"author":{"gitId":"lowkangn"},"content":"        if (taskNumber \u003e\u003d this.tasks.size()) {","lastModifiedDate":"2021-09-05"},{"lineNumber":98,"author":{"gitId":"lowkangn"},"content":"            throw new DukeException(\"What!!! That task does not exist!\");","lastModifiedDate":"2021-09-11"},{"lineNumber":99,"author":{"gitId":"lowkangn"},"content":"        }","lastModifiedDate":"2021-09-05"},{"lineNumber":100,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":101,"author":{"gitId":"lowkangn"},"content":"        Task taskToUpdate \u003d this.tasks.get(taskNumber);","lastModifiedDate":"2021-09-05"},{"lineNumber":102,"author":{"gitId":"lowkangn"},"content":"        try {","lastModifiedDate":"2021-09-05"},{"lineNumber":103,"author":{"gitId":"lowkangn"},"content":"            this.tasks.set(taskNumber,","lastModifiedDate":"2021-09-05"},{"lineNumber":104,"author":{"gitId":"lowkangn"},"content":"                    taskToUpdate.update(valuesToUpdate[1], valuesToUpdate[2]));","lastModifiedDate":"2021-09-05"},{"lineNumber":105,"author":{"gitId":"lowkangn"},"content":"            return \"Sure thing kid. I\u0027ve replaced the following task:\\n\"","lastModifiedDate":"2021-09-11"},{"lineNumber":106,"author":{"gitId":"lowkangn"},"content":"                    + taskToUpdate.toString() + \"\\n\"","lastModifiedDate":"2021-09-05"},{"lineNumber":107,"author":{"gitId":"lowkangn"},"content":"                    + \"with this task:\\n\"","lastModifiedDate":"2021-09-05"},{"lineNumber":108,"author":{"gitId":"lowkangn"},"content":"                    + this.tasks.get(taskNumber).toString()","lastModifiedDate":"2021-09-05"},{"lineNumber":109,"author":{"gitId":"lowkangn"},"content":"                    + \"\\n\";","lastModifiedDate":"2021-09-05"},{"lineNumber":110,"author":{"gitId":"lowkangn"},"content":"        } catch (DukeException de) {","lastModifiedDate":"2021-09-05"},{"lineNumber":111,"author":{"gitId":"lowkangn"},"content":"            throw new DukeException(de.getMessage());","lastModifiedDate":"2021-09-05"},{"lineNumber":112,"author":{"gitId":"lowkangn"},"content":"        }","lastModifiedDate":"2021-09-05"},{"lineNumber":113,"author":{"gitId":"lowkangn"},"content":"    }","lastModifiedDate":"2021-09-05"},{"lineNumber":114,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":115,"author":{"gitId":"lowkangn"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":116,"author":{"gitId":"lowkangn"},"content":"     * Deletes a certain task from the task list, using its task number.","lastModifiedDate":"2021-08-24"},{"lineNumber":117,"author":{"gitId":"lowkangn"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":118,"author":{"gitId":"lowkangn"},"content":"     * @param taskNumber The number of the task in the task list.","lastModifiedDate":"2021-08-24"},{"lineNumber":119,"author":{"gitId":"lowkangn"},"content":"     * @return A String output indicating that the task was deleted.","lastModifiedDate":"2021-08-24"},{"lineNumber":120,"author":{"gitId":"lowkangn"},"content":"     * @throws DukeException If the task number does not exist.","lastModifiedDate":"2021-08-24"},{"lineNumber":121,"author":{"gitId":"lowkangn"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":122,"author":{"gitId":"lowkangn"},"content":"    public String deleteTask(int taskNumber) throws DukeException {","lastModifiedDate":"2021-08-24"},{"lineNumber":123,"author":{"gitId":"lowkangn"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":124,"author":{"gitId":"lowkangn"},"content":"            Task deletedTask \u003d this.tasks.get(taskNumber - 1);","lastModifiedDate":"2021-08-30"},{"lineNumber":125,"author":{"gitId":"lowkangn"},"content":"            this.tasks.remove(taskNumber - 1);","lastModifiedDate":"2021-08-30"},{"lineNumber":126,"author":{"gitId":"lowkangn"},"content":"            this.taskCount--;","lastModifiedDate":"2021-08-24"},{"lineNumber":127,"author":{"gitId":"lowkangn"},"content":"            String taskCount \u003d (this.taskCount \u003d\u003d 1) ? \"1 task\" : this.taskCount + \" tasks\";","lastModifiedDate":"2021-08-24"},{"lineNumber":128,"author":{"gitId":"lowkangn"},"content":"            return \"Noted. I\u0027ve removed this task:\\n\" + \"  \"","lastModifiedDate":"2021-08-24"},{"lineNumber":129,"author":{"gitId":"lowkangn"},"content":"                    + deletedTask.toString() + \"\\n\" + \"Now you have \" + taskCount","lastModifiedDate":"2021-08-24"},{"lineNumber":130,"author":{"gitId":"lowkangn"},"content":"                    + \" in the list.\\n\";","lastModifiedDate":"2021-08-24"},{"lineNumber":131,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":132,"author":{"gitId":"lowkangn"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":133,"author":{"gitId":"lowkangn"},"content":"            throw new DukeException(\"What!!! That task does not exist!\");","lastModifiedDate":"2021-09-11"},{"lineNumber":134,"author":{"gitId":"lowkangn"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":135,"author":{"gitId":"lowkangn"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":136,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":137,"author":{"gitId":"lowkangn"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":138,"author":{"gitId":"lowkangn"},"content":"     * Takes in a String and returns a list of the tasks in the task list that contain the given String","lastModifiedDate":"2021-08-24"},{"lineNumber":139,"author":{"gitId":"lowkangn"},"content":"     * within their descriptions.","lastModifiedDate":"2021-08-24"},{"lineNumber":140,"author":{"gitId":"lowkangn"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":141,"author":{"gitId":"lowkangn"},"content":"     * @param string The given String.","lastModifiedDate":"2021-08-24"},{"lineNumber":142,"author":{"gitId":"lowkangn"},"content":"     * @return A String representing the list of tasks that contain the given String.","lastModifiedDate":"2021-08-24"},{"lineNumber":143,"author":{"gitId":"lowkangn"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":144,"author":{"gitId":"lowkangn"},"content":"    public String findTasksWithSubstring(String string) {","lastModifiedDate":"2021-08-31"},{"lineNumber":145,"author":{"gitId":"lowkangn"},"content":"        ArrayList\u003cTask\u003e found \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-24"},{"lineNumber":146,"author":{"gitId":"lowkangn"},"content":"        for (Task task : this.tasks) {","lastModifiedDate":"2021-08-30"},{"lineNumber":147,"author":{"gitId":"lowkangn"},"content":"            if (task.hasSubString(string)) {","lastModifiedDate":"2021-08-24"},{"lineNumber":148,"author":{"gitId":"lowkangn"},"content":"                found.add(task);","lastModifiedDate":"2021-08-24"},{"lineNumber":149,"author":{"gitId":"lowkangn"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":150,"author":{"gitId":"lowkangn"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":151,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":152,"author":{"gitId":"lowkangn"},"content":"        if (found.size() \u003d\u003d 0) {","lastModifiedDate":"2021-08-24"},{"lineNumber":153,"author":{"gitId":"lowkangn"},"content":"            return \"Sorry, I couldn\u0027t find anything that matched.\\n\";","lastModifiedDate":"2021-09-11"},{"lineNumber":154,"author":{"gitId":"lowkangn"},"content":"        } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":155,"author":{"gitId":"lowkangn"},"content":"            StringBuilder result \u003d new StringBuilder(\"Here\u0027s what I found:\\n\");","lastModifiedDate":"2021-09-11"},{"lineNumber":156,"author":{"gitId":"lowkangn"},"content":"            int i \u003d 0;","lastModifiedDate":"2021-08-24"},{"lineNumber":157,"author":{"gitId":"lowkangn"},"content":"            for (Task task : found) {","lastModifiedDate":"2021-08-24"},{"lineNumber":158,"author":{"gitId":"lowkangn"},"content":"                result.append(++i).append(\".\").append(task.toString()).append(\"\\n\");","lastModifiedDate":"2021-08-24"},{"lineNumber":159,"author":{"gitId":"lowkangn"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":160,"author":{"gitId":"lowkangn"},"content":"            return result.toString();","lastModifiedDate":"2021-08-24"},{"lineNumber":161,"author":{"gitId":"lowkangn"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":162,"author":{"gitId":"lowkangn"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":163,"author":{"gitId":"lowkangn"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"lowkangn":163}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lowkangn"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"lowkangn"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"lowkangn"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"lowkangn"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"lowkangn"},"content":" * Handles the tasks of scanning in user inputs and displaying responses to the console.","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"lowkangn"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"lowkangn"},"content":"public class Ui {","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"lowkangn"},"content":"    static final String OPENING_MESSAGE \u003d \"I\u0027m Duke Nukem.\\n\"","lastModifiedDate":"2021-09-11"},{"lineNumber":12,"author":{"gitId":"lowkangn"},"content":"            + \"What can I do for you kid?\\n\";","lastModifiedDate":"2021-09-11"},{"lineNumber":13,"author":{"gitId":"lowkangn"},"content":"    static final String CLOSING_MESSAGE \u003d \"See you around kid!\\n\";","lastModifiedDate":"2021-09-11"},{"lineNumber":14,"author":{"gitId":"lowkangn"},"content":"    static final String LINE_SEPARATOR \u003d \"____________________________________________________________\";","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"lowkangn"},"content":"    private final Scanner sc;","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"lowkangn"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"lowkangn"},"content":"     * Initialises a new instance of Ui.","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"lowkangn"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"lowkangn"},"content":"    public Ui() {","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"lowkangn"},"content":"        this.sc \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"lowkangn"},"content":"        this.printMessage(OPENING_MESSAGE);","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"lowkangn"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"lowkangn"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"lowkangn"},"content":"     * Scans in the next line of user input and converts to a String which is returned.","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"lowkangn"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"lowkangn"},"content":"     * @return The user input converted to a String.","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"lowkangn"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"lowkangn"},"content":"    public String readCommand() {","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"lowkangn"},"content":"        return sc.nextLine().trim();","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"lowkangn"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"lowkangn"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"lowkangn"},"content":"     * Takes in a DukeException and wraps its message around with line separators before printing","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"lowkangn"},"content":"     * the error message to console.","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"lowkangn"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"lowkangn"},"content":"     * @param de The given DukeException.","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"lowkangn"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"lowkangn"},"content":"    public void showError(DukeException de) {","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"lowkangn"},"content":"        System.out.println(LINE_SEPARATOR + \"\\n\" + de.getMessage() + \"\\n\" + LINE_SEPARATOR);","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"lowkangn"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"lowkangn"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"lowkangn"},"content":"     * Takes in a String and wraps it in line separators before printing the result to console.","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"lowkangn"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"lowkangn"},"content":"     * @param string The given String.","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"lowkangn"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"lowkangn"},"content":"    public void printMessage(String string) {","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"lowkangn"},"content":"        System.out.println(LINE_SEPARATOR + \"\\n\" + string + LINE_SEPARATOR);","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"lowkangn"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"lowkangn"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"lowkangn"},"content":"     * Exits the UI.","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"lowkangn"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":57,"author":{"gitId":"lowkangn"},"content":"    public void exit() {","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"lowkangn"},"content":"        sc.close();","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"lowkangn"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":60,"author":{"gitId":"lowkangn"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"lowkangn":60}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lowkangn"},"content":"package duke.exception;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"lowkangn"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"lowkangn"},"content":" * Represents an exception encountered when running Duke.","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"lowkangn"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"lowkangn"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-08-16"},{"lineNumber":7,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":8,"author":{"gitId":"lowkangn"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"lowkangn"},"content":"     * Initialises a new instance of DukeException.","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"lowkangn"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"lowkangn"},"content":"     * @param message The given error message.","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"lowkangn"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"lowkangn"},"content":"    public DukeException(String message) {","lastModifiedDate":"2021-08-16"},{"lineNumber":14,"author":{"gitId":"lowkangn"},"content":"        super(message);","lastModifiedDate":"2021-08-16"},{"lineNumber":15,"author":{"gitId":"lowkangn"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":16,"author":{"gitId":"lowkangn"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"lowkangn":16}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lowkangn"},"content":"package duke.task;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"lowkangn"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"lowkangn"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"lowkangn"},"content":"import duke.Parser;","lastModifiedDate":"2021-09-05"},{"lineNumber":7,"author":{"gitId":"lowkangn"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-09-05"},{"lineNumber":8,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":9,"author":{"gitId":"lowkangn"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"lowkangn"},"content":" * A task with a given deadline.","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"lowkangn"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"lowkangn"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-16"},{"lineNumber":13,"author":{"gitId":"lowkangn"},"content":"    private final LocalDateTime dateAndTime;","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":15,"author":{"gitId":"lowkangn"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"lowkangn"},"content":"     * Initialises a new instance of Deadline.","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"lowkangn"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"lowkangn"},"content":"     * @param taskDescription The description of the deadline.","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"lowkangn"},"content":"     * @param dateAndTime The deadline time and date.","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"lowkangn"},"content":"     * @param isDone Marks the deadline as done or not done.","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"lowkangn"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"lowkangn"},"content":"    public Deadline(String taskDescription, LocalDateTime dateAndTime, boolean isDone) {","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"lowkangn"},"content":"        super(taskDescription, isDone);","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"lowkangn"},"content":"        this.dateAndTime \u003d dateAndTime;","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"lowkangn"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":26,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":27,"author":{"gitId":"lowkangn"},"content":"    /**","lastModifiedDate":"2021-09-05"},{"lineNumber":28,"author":{"gitId":"lowkangn"},"content":"     Returns a new instance of Deadline with updated values.","lastModifiedDate":"2021-09-05"},{"lineNumber":29,"author":{"gitId":"lowkangn"},"content":"     *","lastModifiedDate":"2021-09-05"},{"lineNumber":30,"author":{"gitId":"lowkangn"},"content":"     * @param taskDescription The description of the updated Deadline.","lastModifiedDate":"2021-09-05"},{"lineNumber":31,"author":{"gitId":"lowkangn"},"content":"     * @param dateAndTime The date and time of the updated Deadline.","lastModifiedDate":"2021-09-05"},{"lineNumber":32,"author":{"gitId":"lowkangn"},"content":"     * @return A Deadline with the updated description or time, or both.","lastModifiedDate":"2021-09-05"},{"lineNumber":33,"author":{"gitId":"lowkangn"},"content":"     * @throws DukeException If the given date and time is invalid.","lastModifiedDate":"2021-09-05"},{"lineNumber":34,"author":{"gitId":"lowkangn"},"content":"     */","lastModifiedDate":"2021-09-05"},{"lineNumber":35,"author":{"gitId":"lowkangn"},"content":"    public Deadline update(String taskDescription, String dateAndTime) throws DukeException {","lastModifiedDate":"2021-09-05"},{"lineNumber":36,"author":{"gitId":"lowkangn"},"content":"        try {","lastModifiedDate":"2021-09-05"},{"lineNumber":37,"author":{"gitId":"lowkangn"},"content":"            String updatedDescription \u003d taskDescription \u003d\u003d null","lastModifiedDate":"2021-09-05"},{"lineNumber":38,"author":{"gitId":"lowkangn"},"content":"                    ? this.taskDescription","lastModifiedDate":"2021-09-05"},{"lineNumber":39,"author":{"gitId":"lowkangn"},"content":"                    : taskDescription;","lastModifiedDate":"2021-09-05"},{"lineNumber":40,"author":{"gitId":"lowkangn"},"content":"            LocalDateTime updatedTime \u003d dateAndTime \u003d\u003d null","lastModifiedDate":"2021-09-05"},{"lineNumber":41,"author":{"gitId":"lowkangn"},"content":"                    ? this.dateAndTime","lastModifiedDate":"2021-09-05"},{"lineNumber":42,"author":{"gitId":"lowkangn"},"content":"                    : Parser.formatDateTime(dateAndTime);","lastModifiedDate":"2021-09-05"},{"lineNumber":43,"author":{"gitId":"lowkangn"},"content":"            return new Deadline(updatedDescription, updatedTime, this.isDone);","lastModifiedDate":"2021-09-05"},{"lineNumber":44,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":45,"author":{"gitId":"lowkangn"},"content":"        } catch (DukeException de) {","lastModifiedDate":"2021-09-05"},{"lineNumber":46,"author":{"gitId":"lowkangn"},"content":"            throw new DukeException(de.getMessage());","lastModifiedDate":"2021-09-05"},{"lineNumber":47,"author":{"gitId":"lowkangn"},"content":"        }","lastModifiedDate":"2021-09-05"},{"lineNumber":48,"author":{"gitId":"lowkangn"},"content":"    }","lastModifiedDate":"2021-09-05"},{"lineNumber":49,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":50,"author":{"gitId":"lowkangn"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":51,"author":{"gitId":"lowkangn"},"content":"     * Returns the String representation of the Deadline task.","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"lowkangn"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"lowkangn"},"content":"     * @return The String representation of the task.","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"lowkangn"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":55,"author":{"gitId":"lowkangn"},"content":"    @Override","lastModifiedDate":"2021-08-16"},{"lineNumber":56,"author":{"gitId":"lowkangn"},"content":"    public String toString() {","lastModifiedDate":"2021-08-16"},{"lineNumber":57,"author":{"gitId":"lowkangn"},"content":"        String dateAndTime \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy \u0027at\u0027 h:mm a\")","lastModifiedDate":"2021-08-23"},{"lineNumber":58,"author":{"gitId":"lowkangn"},"content":"                .format(this.dateAndTime);","lastModifiedDate":"2021-08-23"},{"lineNumber":59,"author":{"gitId":"lowkangn"},"content":"        if (super.isDone) {","lastModifiedDate":"2021-08-16"},{"lineNumber":60,"author":{"gitId":"lowkangn"},"content":"            return \"[D][X] \" + super.taskDescription + \" (by: \" + dateAndTime + \")\";","lastModifiedDate":"2021-08-30"},{"lineNumber":61,"author":{"gitId":"lowkangn"},"content":"        } else {","lastModifiedDate":"2021-08-16"},{"lineNumber":62,"author":{"gitId":"lowkangn"},"content":"            return \"[D][ ] \" + super.taskDescription + \" (by: \" + dateAndTime + \")\";","lastModifiedDate":"2021-08-30"},{"lineNumber":63,"author":{"gitId":"lowkangn"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":64,"author":{"gitId":"lowkangn"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":65,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":66,"author":{"gitId":"lowkangn"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":67,"author":{"gitId":"lowkangn"},"content":"     * Returns a String representation of the task to store within the save file.","lastModifiedDate":"2021-08-24"},{"lineNumber":68,"author":{"gitId":"lowkangn"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":69,"author":{"gitId":"lowkangn"},"content":"     * @return The String representation of the task.","lastModifiedDate":"2021-08-24"},{"lineNumber":70,"author":{"gitId":"lowkangn"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":71,"author":{"gitId":"lowkangn"},"content":"    @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":72,"author":{"gitId":"lowkangn"},"content":"    public String parseToString() {","lastModifiedDate":"2021-08-23"},{"lineNumber":73,"author":{"gitId":"lowkangn"},"content":"        String result \u003d super.isDone ? \"X\" : \"0\";","lastModifiedDate":"2021-08-23"},{"lineNumber":74,"author":{"gitId":"lowkangn"},"content":"        result +\u003d \"D/\" + super.taskDescription + \"/\" + this.dateAndTime.toString();","lastModifiedDate":"2021-08-30"},{"lineNumber":75,"author":{"gitId":"lowkangn"},"content":"        return result;","lastModifiedDate":"2021-08-23"},{"lineNumber":76,"author":{"gitId":"lowkangn"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":77,"author":{"gitId":"lowkangn"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"lowkangn":77}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lowkangn"},"content":"package duke.task;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"lowkangn"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"lowkangn"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"lowkangn"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"lowkangn"},"content":"import duke.Parser;","lastModifiedDate":"2021-09-05"},{"lineNumber":8,"author":{"gitId":"lowkangn"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-09-05"},{"lineNumber":9,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":10,"author":{"gitId":"lowkangn"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"lowkangn"},"content":" * A task that has a starting time and date, and an ending time and date.","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"lowkangn"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"lowkangn"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-16"},{"lineNumber":14,"author":{"gitId":"lowkangn"},"content":"    private final LocalDateTime dateAndTime;","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"lowkangn"},"content":"    private final LocalTime endTime;","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":17,"author":{"gitId":"lowkangn"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"lowkangn"},"content":"     * Initialises a new instance of Event.","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"lowkangn"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"lowkangn"},"content":"     * @param taskDescription The description of the event.","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"lowkangn"},"content":"     * @param dateAndTime The starting time and date.","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"lowkangn"},"content":"     * @param endTime The ending time and date.","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"lowkangn"},"content":"     * @param isDone Marks the event as done or not done.","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"lowkangn"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"lowkangn"},"content":"    public Event(String taskDescription, LocalDateTime dateAndTime, LocalTime endTime, boolean isDone) {","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"lowkangn"},"content":"        super(taskDescription, isDone);","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"lowkangn"},"content":"        this.dateAndTime \u003d dateAndTime;","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"lowkangn"},"content":"        this.endTime \u003d endTime;","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"lowkangn"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":30,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":31,"author":{"gitId":"lowkangn"},"content":"    /**","lastModifiedDate":"2021-09-05"},{"lineNumber":32,"author":{"gitId":"lowkangn"},"content":"     Returns a new instance of Event with updated values.","lastModifiedDate":"2021-09-05"},{"lineNumber":33,"author":{"gitId":"lowkangn"},"content":"     *","lastModifiedDate":"2021-09-05"},{"lineNumber":34,"author":{"gitId":"lowkangn"},"content":"     * @param taskDescription The description of the updated Event.","lastModifiedDate":"2021-09-05"},{"lineNumber":35,"author":{"gitId":"lowkangn"},"content":"     * @param dateAndTime The date and time of the updated Event.","lastModifiedDate":"2021-09-05"},{"lineNumber":36,"author":{"gitId":"lowkangn"},"content":"     * @return A Event with the updated description or time, or both.","lastModifiedDate":"2021-09-05"},{"lineNumber":37,"author":{"gitId":"lowkangn"},"content":"     * @throws DukeException If the given date and time is invalid.","lastModifiedDate":"2021-09-05"},{"lineNumber":38,"author":{"gitId":"lowkangn"},"content":"     */","lastModifiedDate":"2021-09-05"},{"lineNumber":39,"author":{"gitId":"lowkangn"},"content":"    public Event update(String taskDescription, String dateAndTime) throws DukeException {","lastModifiedDate":"2021-09-05"},{"lineNumber":40,"author":{"gitId":"lowkangn"},"content":"        try {","lastModifiedDate":"2021-09-05"},{"lineNumber":41,"author":{"gitId":"lowkangn"},"content":"            String updatedDescription \u003d taskDescription \u003d\u003d null","lastModifiedDate":"2021-09-05"},{"lineNumber":42,"author":{"gitId":"lowkangn"},"content":"                    ? this.taskDescription","lastModifiedDate":"2021-09-05"},{"lineNumber":43,"author":{"gitId":"lowkangn"},"content":"                    : taskDescription;","lastModifiedDate":"2021-09-05"},{"lineNumber":44,"author":{"gitId":"lowkangn"},"content":"            LocalDateTime updatedTime \u003d this.dateAndTime;","lastModifiedDate":"2021-09-05"},{"lineNumber":45,"author":{"gitId":"lowkangn"},"content":"            LocalTime updatedEndTime \u003d this.endTime;","lastModifiedDate":"2021-09-05"},{"lineNumber":46,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":47,"author":{"gitId":"lowkangn"},"content":"            if (dateAndTime !\u003d null) {","lastModifiedDate":"2021-09-05"},{"lineNumber":48,"author":{"gitId":"lowkangn"},"content":"                String[] splitEndTime \u003d dateAndTime.split(\" - \");","lastModifiedDate":"2021-09-05"},{"lineNumber":49,"author":{"gitId":"lowkangn"},"content":"                updatedTime \u003d Parser","lastModifiedDate":"2021-09-05"},{"lineNumber":50,"author":{"gitId":"lowkangn"},"content":"                        .formatDateTime(splitEndTime[0]);","lastModifiedDate":"2021-09-05"},{"lineNumber":51,"author":{"gitId":"lowkangn"},"content":"                boolean hasInputAfterDash \u003d splitEndTime.length \u003e 1","lastModifiedDate":"2021-09-05"},{"lineNumber":52,"author":{"gitId":"lowkangn"},"content":"                        \u0026\u0026 splitEndTime[1].trim().length() \u003e 0;","lastModifiedDate":"2021-09-05"},{"lineNumber":53,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":54,"author":{"gitId":"lowkangn"},"content":"                if (hasInputAfterDash) {","lastModifiedDate":"2021-09-05"},{"lineNumber":55,"author":{"gitId":"lowkangn"},"content":"                    updatedEndTime \u003d LocalTime.parse(splitEndTime[1]);","lastModifiedDate":"2021-09-05"},{"lineNumber":56,"author":{"gitId":"lowkangn"},"content":"                } else {","lastModifiedDate":"2021-09-05"},{"lineNumber":57,"author":{"gitId":"lowkangn"},"content":"                    throw new DukeException(\"☹ OOPS!!! Please provide an end \"","lastModifiedDate":"2021-09-05"},{"lineNumber":58,"author":{"gitId":"lowkangn"},"content":"                            + \"time for the event.\");","lastModifiedDate":"2021-09-05"},{"lineNumber":59,"author":{"gitId":"lowkangn"},"content":"                }","lastModifiedDate":"2021-09-05"},{"lineNumber":60,"author":{"gitId":"lowkangn"},"content":"            }","lastModifiedDate":"2021-09-05"},{"lineNumber":61,"author":{"gitId":"lowkangn"},"content":"            return new Event(updatedDescription,","lastModifiedDate":"2021-09-05"},{"lineNumber":62,"author":{"gitId":"lowkangn"},"content":"                    updatedTime, updatedEndTime, this.isDone);","lastModifiedDate":"2021-09-05"},{"lineNumber":63,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":64,"author":{"gitId":"lowkangn"},"content":"        } catch (DukeException de) {","lastModifiedDate":"2021-09-05"},{"lineNumber":65,"author":{"gitId":"lowkangn"},"content":"            throw new DukeException(de.getMessage());","lastModifiedDate":"2021-09-05"},{"lineNumber":66,"author":{"gitId":"lowkangn"},"content":"        }","lastModifiedDate":"2021-09-05"},{"lineNumber":67,"author":{"gitId":"lowkangn"},"content":"    }","lastModifiedDate":"2021-09-05"},{"lineNumber":68,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":69,"author":{"gitId":"lowkangn"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":70,"author":{"gitId":"lowkangn"},"content":"     * Returns the String representation of the Deadline task.","lastModifiedDate":"2021-08-24"},{"lineNumber":71,"author":{"gitId":"lowkangn"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":72,"author":{"gitId":"lowkangn"},"content":"     * @return The String representation of the task.","lastModifiedDate":"2021-08-24"},{"lineNumber":73,"author":{"gitId":"lowkangn"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":74,"author":{"gitId":"lowkangn"},"content":"    @Override","lastModifiedDate":"2021-08-16"},{"lineNumber":75,"author":{"gitId":"lowkangn"},"content":"    public String toString() {","lastModifiedDate":"2021-08-16"},{"lineNumber":76,"author":{"gitId":"lowkangn"},"content":"        String dateAndTime \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy \u0027from\u0027 h:mm a\")","lastModifiedDate":"2021-08-23"},{"lineNumber":77,"author":{"gitId":"lowkangn"},"content":"                .format(this.dateAndTime);","lastModifiedDate":"2021-08-23"},{"lineNumber":78,"author":{"gitId":"lowkangn"},"content":"        String endTime \u003d DateTimeFormatter.ofPattern(\"h:mm a\").format(this.endTime);","lastModifiedDate":"2021-08-23"},{"lineNumber":79,"author":{"gitId":"lowkangn"},"content":"        if (super.isDone) {","lastModifiedDate":"2021-08-16"},{"lineNumber":80,"author":{"gitId":"lowkangn"},"content":"            return \"[E][X] \" + super.taskDescription + \" (at: \" + dateAndTime + \" - \" + endTime + \")\";","lastModifiedDate":"2021-08-30"},{"lineNumber":81,"author":{"gitId":"lowkangn"},"content":"        } else {","lastModifiedDate":"2021-08-16"},{"lineNumber":82,"author":{"gitId":"lowkangn"},"content":"            return \"[E][ ] \" + super.taskDescription + \" (at: \" + dateAndTime + \" - \" + endTime + \")\";","lastModifiedDate":"2021-08-30"},{"lineNumber":83,"author":{"gitId":"lowkangn"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":84,"author":{"gitId":"lowkangn"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":85,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":86,"author":{"gitId":"lowkangn"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":87,"author":{"gitId":"lowkangn"},"content":"     * Returns a String representation of the task to store within the save file.","lastModifiedDate":"2021-08-24"},{"lineNumber":88,"author":{"gitId":"lowkangn"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":89,"author":{"gitId":"lowkangn"},"content":"     * @return The String representation of the task.","lastModifiedDate":"2021-08-24"},{"lineNumber":90,"author":{"gitId":"lowkangn"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":91,"author":{"gitId":"lowkangn"},"content":"    @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":92,"author":{"gitId":"lowkangn"},"content":"    public String parseToString() {","lastModifiedDate":"2021-08-23"},{"lineNumber":93,"author":{"gitId":"lowkangn"},"content":"        String result \u003d super.isDone ? \"X\" : \"0\";","lastModifiedDate":"2021-08-23"},{"lineNumber":94,"author":{"gitId":"lowkangn"},"content":"        result +\u003d \"E/\" + super.taskDescription + \"/\" + this.dateAndTime.toString() + \"/\"","lastModifiedDate":"2021-08-30"},{"lineNumber":95,"author":{"gitId":"lowkangn"},"content":"                + this.endTime.toString();","lastModifiedDate":"2021-08-23"},{"lineNumber":96,"author":{"gitId":"lowkangn"},"content":"        return result;","lastModifiedDate":"2021-08-23"},{"lineNumber":97,"author":{"gitId":"lowkangn"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":98,"author":{"gitId":"lowkangn"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"lowkangn":98}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lowkangn"},"content":"package duke.task;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"lowkangn"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-09-05"},{"lineNumber":4,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":5,"author":{"gitId":"lowkangn"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"lowkangn"},"content":" * Represents a task that has a given description and is either done or not done.","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"lowkangn"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"lowkangn"},"content":"public abstract class Task {","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"lowkangn"},"content":"    protected String taskDescription;","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"lowkangn"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-16"},{"lineNumber":11,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":12,"author":{"gitId":"lowkangn"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"lowkangn"},"content":"     * Initialises a new instance of task.","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"lowkangn"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"lowkangn"},"content":"     * @param taskDescription The description of the task.","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"lowkangn"},"content":"     * @param isDone Marks the task as done or not done.","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"lowkangn"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"lowkangn"},"content":"    public Task(String taskDescription, boolean isDone) {","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"lowkangn"},"content":"        this.taskDescription \u003d taskDescription;","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"lowkangn"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"lowkangn"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":22,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":23,"author":{"gitId":"lowkangn"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"lowkangn"},"content":"     * Marks this particular task as done.","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"lowkangn"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"lowkangn"},"content":"    public void markDone() {","lastModifiedDate":"2021-08-16"},{"lineNumber":27,"author":{"gitId":"lowkangn"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-08-16"},{"lineNumber":28,"author":{"gitId":"lowkangn"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":29,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"lowkangn"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"lowkangn"},"content":"     * Returns a boolean representing if the given String is a substring of the task\u0027s description.","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"lowkangn"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"lowkangn"},"content":"     * @param string The given String.","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"lowkangn"},"content":"     * @return True if the given String is a substring, and false otherwise.","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"lowkangn"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"lowkangn"},"content":"    public boolean hasSubString(String string) {","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"lowkangn"},"content":"        return this.taskDescription.contains(string);","lastModifiedDate":"2021-08-30"},{"lineNumber":38,"author":{"gitId":"lowkangn"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":40,"author":{"gitId":"lowkangn"},"content":"    /**","lastModifiedDate":"2021-09-05"},{"lineNumber":41,"author":{"gitId":"lowkangn"},"content":"     * Returns a new instance of the task with updated values.","lastModifiedDate":"2021-09-05"},{"lineNumber":42,"author":{"gitId":"lowkangn"},"content":"     *","lastModifiedDate":"2021-09-05"},{"lineNumber":43,"author":{"gitId":"lowkangn"},"content":"     * @param taskDescription The description of the updated task.","lastModifiedDate":"2021-09-05"},{"lineNumber":44,"author":{"gitId":"lowkangn"},"content":"     * @param dateAndTime The date and time of the updated task.","lastModifiedDate":"2021-09-05"},{"lineNumber":45,"author":{"gitId":"lowkangn"},"content":"     * @return A task with the updated description or time, or both.","lastModifiedDate":"2021-09-05"},{"lineNumber":46,"author":{"gitId":"lowkangn"},"content":"     */","lastModifiedDate":"2021-09-05"},{"lineNumber":47,"author":{"gitId":"lowkangn"},"content":"    public abstract Task update(String taskDescription, String dateAndTime) throws DukeException;","lastModifiedDate":"2021-09-05"},{"lineNumber":48,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":49,"author":{"gitId":"lowkangn"},"content":"    /**","lastModifiedDate":"2021-09-05"},{"lineNumber":50,"author":{"gitId":"lowkangn"},"content":"     * Returns a String representation of the task to store within the save file.","lastModifiedDate":"2021-09-05"},{"lineNumber":51,"author":{"gitId":"lowkangn"},"content":"     *","lastModifiedDate":"2021-09-05"},{"lineNumber":52,"author":{"gitId":"lowkangn"},"content":"     * @return The String representation of the task.","lastModifiedDate":"2021-09-05"},{"lineNumber":53,"author":{"gitId":"lowkangn"},"content":"     */","lastModifiedDate":"2021-09-05"},{"lineNumber":54,"author":{"gitId":"lowkangn"},"content":"    public abstract String parseToString();","lastModifiedDate":"2021-09-05"},{"lineNumber":55,"author":{"gitId":"lowkangn"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"lowkangn":55}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lowkangn"},"content":"package duke.task;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"lowkangn"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-09-05"},{"lineNumber":4,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":5,"author":{"gitId":"lowkangn"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"lowkangn"},"content":" * A task to be marked as done.","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"lowkangn"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"lowkangn"},"content":"public class ToDo extends Task {","lastModifiedDate":"2021-08-16"},{"lineNumber":9,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":10,"author":{"gitId":"lowkangn"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"lowkangn"},"content":"     * Initialises a new instance of ToDo.","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"lowkangn"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"lowkangn"},"content":"     * @param taskDescription The description of the Todo task.","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"lowkangn"},"content":"     * @param isDone Marks the Todo task as done or not done.","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"lowkangn"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"lowkangn"},"content":"    public ToDo(String taskDescription, boolean isDone) {","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"lowkangn"},"content":"        super(taskDescription, isDone);","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"lowkangn"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":19,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":20,"author":{"gitId":"lowkangn"},"content":"    /**","lastModifiedDate":"2021-09-05"},{"lineNumber":21,"author":{"gitId":"lowkangn"},"content":"     Returns a new instance of ToDo with updated values.","lastModifiedDate":"2021-09-05"},{"lineNumber":22,"author":{"gitId":"lowkangn"},"content":"     *","lastModifiedDate":"2021-09-05"},{"lineNumber":23,"author":{"gitId":"lowkangn"},"content":"     * @param taskDescription The description of the updated ToDo.","lastModifiedDate":"2021-09-05"},{"lineNumber":24,"author":{"gitId":"lowkangn"},"content":"     * @param dateAndTime A given date and time, invalid if not null.","lastModifiedDate":"2021-09-05"},{"lineNumber":25,"author":{"gitId":"lowkangn"},"content":"     * @return A ToDo with the updated description.","lastModifiedDate":"2021-09-05"},{"lineNumber":26,"author":{"gitId":"lowkangn"},"content":"     * @throws DukeException If a date and time was given.","lastModifiedDate":"2021-09-05"},{"lineNumber":27,"author":{"gitId":"lowkangn"},"content":"     */","lastModifiedDate":"2021-09-05"},{"lineNumber":28,"author":{"gitId":"lowkangn"},"content":"    public ToDo update(String taskDescription, String dateAndTime) throws DukeException {","lastModifiedDate":"2021-09-05"},{"lineNumber":29,"author":{"gitId":"lowkangn"},"content":"        String updatedDescription \u003d taskDescription \u003d\u003d null","lastModifiedDate":"2021-09-05"},{"lineNumber":30,"author":{"gitId":"lowkangn"},"content":"                ? this.taskDescription","lastModifiedDate":"2021-09-05"},{"lineNumber":31,"author":{"gitId":"lowkangn"},"content":"                : taskDescription;","lastModifiedDate":"2021-09-05"},{"lineNumber":32,"author":{"gitId":"lowkangn"},"content":"        if (dateAndTime !\u003d null) {","lastModifiedDate":"2021-09-05"},{"lineNumber":33,"author":{"gitId":"lowkangn"},"content":"            throw new DukeException(\"Sorry kid, A todo cannot have a date or time.\");","lastModifiedDate":"2021-09-11"},{"lineNumber":34,"author":{"gitId":"lowkangn"},"content":"        } else {","lastModifiedDate":"2021-09-05"},{"lineNumber":35,"author":{"gitId":"lowkangn"},"content":"            return new ToDo(updatedDescription, this.isDone);","lastModifiedDate":"2021-09-05"},{"lineNumber":36,"author":{"gitId":"lowkangn"},"content":"        }","lastModifiedDate":"2021-09-05"},{"lineNumber":37,"author":{"gitId":"lowkangn"},"content":"    }","lastModifiedDate":"2021-09-05"},{"lineNumber":38,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":39,"author":{"gitId":"lowkangn"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":40,"author":{"gitId":"lowkangn"},"content":"     * Returns the String representation of the ToDo task.","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"lowkangn"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"lowkangn"},"content":"     * @return The String representation of the task.","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"lowkangn"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":44,"author":{"gitId":"lowkangn"},"content":"    @Override","lastModifiedDate":"2021-08-16"},{"lineNumber":45,"author":{"gitId":"lowkangn"},"content":"    public String toString() {","lastModifiedDate":"2021-08-16"},{"lineNumber":46,"author":{"gitId":"lowkangn"},"content":"        if (super.isDone) {","lastModifiedDate":"2021-08-16"},{"lineNumber":47,"author":{"gitId":"lowkangn"},"content":"            return \"[T][X] \" + super.taskDescription;","lastModifiedDate":"2021-08-30"},{"lineNumber":48,"author":{"gitId":"lowkangn"},"content":"        } else {","lastModifiedDate":"2021-08-16"},{"lineNumber":49,"author":{"gitId":"lowkangn"},"content":"            return \"[T][ ] \" + super.taskDescription;","lastModifiedDate":"2021-08-30"},{"lineNumber":50,"author":{"gitId":"lowkangn"},"content":"        }","lastModifiedDate":"2021-08-16"},{"lineNumber":51,"author":{"gitId":"lowkangn"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":52,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":53,"author":{"gitId":"lowkangn"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":54,"author":{"gitId":"lowkangn"},"content":"     * Returns a String representation of the task to store within the save file.","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"lowkangn"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"lowkangn"},"content":"     * @return The String representation of the task.","lastModifiedDate":"2021-08-24"},{"lineNumber":57,"author":{"gitId":"lowkangn"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":58,"author":{"gitId":"lowkangn"},"content":"    @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":59,"author":{"gitId":"lowkangn"},"content":"    public String parseToString() {","lastModifiedDate":"2021-08-23"},{"lineNumber":60,"author":{"gitId":"lowkangn"},"content":"        String result \u003d super.isDone ? \"X\" : \"0\";","lastModifiedDate":"2021-08-23"},{"lineNumber":61,"author":{"gitId":"lowkangn"},"content":"        result +\u003d \"T/\" + super.taskDescription;","lastModifiedDate":"2021-08-30"},{"lineNumber":62,"author":{"gitId":"lowkangn"},"content":"        return result;","lastModifiedDate":"2021-08-23"},{"lineNumber":63,"author":{"gitId":"lowkangn"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":64,"author":{"gitId":"lowkangn"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"lowkangn":64}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"lowkangn"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"lowkangn"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"lowkangn"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"lowkangn"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"lowkangn"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"lowkangn"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"lowkangn"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"lowkangn"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"lowkangn"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"lowkangn"},"content":"    \u003c/children\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"lowkangn"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"lowkangn"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"lowkangn"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"lowkangn"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"lowkangn":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"lowkangn"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"lowkangn"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"lowkangn"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"lowkangn"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"lowkangn"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"lowkangn"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"lowkangn"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"lowkangn"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"lowkangn"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"lowkangn"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"lowkangn"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"lowkangn"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"lowkangn"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" maxHeight\u003d\"Infinity\" prefWidth\u003d\"388.0\" /\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"lowkangn"},"content":"            \u003c/content\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"lowkangn"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"lowkangn"},"content":"    \u003c/children\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"lowkangn"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"lowkangn":19}},{"path":"src/test/java/duke/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lowkangn"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"lowkangn"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"lowkangn"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"lowkangn"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"lowkangn"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"lowkangn"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"lowkangn"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"lowkangn"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"lowkangn"},"content":"import duke.task.Event;","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"lowkangn"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"lowkangn"},"content":"import duke.task.ToDo;","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"lowkangn"},"content":"class TaskListTest {","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"lowkangn"},"content":"    @Test","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"lowkangn"},"content":"    void get() {","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"lowkangn"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"lowkangn"},"content":"        tasks.add(new ToDo(\"buy bread\", true));","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"lowkangn"},"content":"        tasks.add(new Deadline(\"eat bread\", LocalDateTime.parse(\"2021-08-28T18:00\"), false));","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"lowkangn"},"content":"        tasks.add(new Event(\"bread-eating contest\", LocalDateTime.parse(\"2021-09-01T15:00\"),","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"lowkangn"},"content":"                LocalTime.parse(\"16:30\"), false));","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"lowkangn"},"content":"        TaskList taskList \u003d new TaskList(tasks);","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"lowkangn"},"content":"        assertEquals(tasks, taskList.get());","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"lowkangn"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"lowkangn"},"content":"    @Test","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"lowkangn"},"content":"    void addTask() {","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"lowkangn"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"lowkangn"},"content":"        TaskList taskList \u003d new TaskList(tasks);","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"lowkangn"},"content":"        ToDo td \u003d new ToDo(\"learn to bake bread\", false);","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"lowkangn"},"content":"        tasks.add(td);","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"lowkangn"},"content":"        taskList.addTask(td);","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"lowkangn"},"content":"        assertEquals(tasks, taskList.get());","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"lowkangn"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"lowkangn"},"content":"    @Test","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"lowkangn"},"content":"    void markTaskAsDone() {","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"lowkangn"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"lowkangn"},"content":"        tasks.add(new ToDo(\"learn to bake bread\", false));","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"lowkangn"},"content":"        TaskList taskList \u003d new TaskList(tasks);","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"lowkangn"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"lowkangn"},"content":"            char checkmark \u003d taskList.get().get(0).toString().charAt(4);","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"lowkangn"},"content":"            assertEquals(\u0027 \u0027, checkmark);","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"lowkangn"},"content":"            taskList.markTaskAsDone(1);","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"lowkangn"},"content":"            checkmark \u003d taskList.get().get(0).toString().charAt(4);","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"lowkangn"},"content":"            assertEquals(\u0027X\u0027, checkmark);","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"lowkangn"},"content":"            taskList.markTaskAsDone(3);","lastModifiedDate":"2021-08-24"},{"lineNumber":57,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"lowkangn"},"content":"        } catch (DukeException de) {","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"lowkangn"},"content":"            assertEquals(\"☹ OOPS!!! That task does not exist.\", de.getMessage());","lastModifiedDate":"2021-08-24"},{"lineNumber":60,"author":{"gitId":"lowkangn"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"lowkangn"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":63,"author":{"gitId":"lowkangn"},"content":"    @Test","lastModifiedDate":"2021-08-24"},{"lineNumber":64,"author":{"gitId":"lowkangn"},"content":"    void deleteTask() {","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"lowkangn"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-24"},{"lineNumber":66,"author":{"gitId":"lowkangn"},"content":"        ToDo td \u003d new ToDo(\"buy bread\", true);","lastModifiedDate":"2021-08-24"},{"lineNumber":67,"author":{"gitId":"lowkangn"},"content":"        tasks.add(td);","lastModifiedDate":"2021-08-24"},{"lineNumber":68,"author":{"gitId":"lowkangn"},"content":"        tasks.add(new Deadline(\"eat bread\", LocalDateTime.parse(\"2021-08-28T18:00\"), false));","lastModifiedDate":"2021-08-24"},{"lineNumber":69,"author":{"gitId":"lowkangn"},"content":"        TaskList taskList \u003d new TaskList(tasks);","lastModifiedDate":"2021-08-24"},{"lineNumber":70,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":71,"author":{"gitId":"lowkangn"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":72,"author":{"gitId":"lowkangn"},"content":"            assertEquals(2, taskList.get().size());","lastModifiedDate":"2021-08-24"},{"lineNumber":73,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":74,"author":{"gitId":"lowkangn"},"content":"            taskList.deleteTask(2);","lastModifiedDate":"2021-08-24"},{"lineNumber":75,"author":{"gitId":"lowkangn"},"content":"            assertEquals(1, taskList.get().size());","lastModifiedDate":"2021-08-24"},{"lineNumber":76,"author":{"gitId":"lowkangn"},"content":"            assertEquals(td, taskList.get().get(0));","lastModifiedDate":"2021-08-24"},{"lineNumber":77,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":78,"author":{"gitId":"lowkangn"},"content":"            taskList.deleteTask(2);","lastModifiedDate":"2021-08-24"},{"lineNumber":79,"author":{"gitId":"lowkangn"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":80,"author":{"gitId":"lowkangn"},"content":"        } catch (DukeException de) {","lastModifiedDate":"2021-08-24"},{"lineNumber":81,"author":{"gitId":"lowkangn"},"content":"            assertEquals(\"☹ OOPS!!! That task does not exist.\", de.getMessage());","lastModifiedDate":"2021-08-24"},{"lineNumber":82,"author":{"gitId":"lowkangn"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":83,"author":{"gitId":"lowkangn"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":84,"author":{"gitId":"lowkangn"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"lowkangn":84}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"lowkangn"},"content":"list","lastModifiedDate":"2021-08-16"},{"lineNumber":2,"author":{"gitId":"lowkangn"},"content":"todo read book","lastModifiedDate":"2021-08-16"},{"lineNumber":3,"author":{"gitId":"lowkangn"},"content":"deadline return book /by 2021-06-06","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"lowkangn"},"content":"event project meeting /at 2021-08-06, 14:00 - 16:00","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"lowkangn"},"content":"todo join sports club","lastModifiedDate":"2021-08-16"},{"lineNumber":6,"author":{"gitId":"lowkangn"},"content":"todo borrow book","lastModifiedDate":"2021-08-16"},{"lineNumber":7,"author":{"gitId":"lowkangn"},"content":"list","lastModifiedDate":"2021-08-16"},{"lineNumber":8,"author":{"gitId":"lowkangn"},"content":"done 1","lastModifiedDate":"2021-08-16"},{"lineNumber":9,"author":{"gitId":"lowkangn"},"content":"done 4","lastModifiedDate":"2021-08-16"},{"lineNumber":10,"author":{"gitId":"lowkangn"},"content":"list","lastModifiedDate":"2021-08-16"},{"lineNumber":11,"author":{"gitId":"lowkangn"},"content":"delete 300","lastModifiedDate":"2021-08-16"},{"lineNumber":12,"author":{"gitId":"lowkangn"},"content":"delete -5","lastModifiedDate":"2021-08-16"},{"lineNumber":13,"author":{"gitId":"lowkangn"},"content":"delete 1","lastModifiedDate":"2021-08-16"},{"lineNumber":14,"author":{"gitId":"lowkangn"},"content":"delete","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"lowkangn"},"content":"list","lastModifiedDate":"2021-08-16"},{"lineNumber":16,"author":{"gitId":"lowkangn"},"content":"find book","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"lowkangn"},"content":"find sports","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"lowkangn"},"content":"find 123","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"lowkangn"},"content":"find project meeting a","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"lowkangn"},"content":"find","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"lowkangn"},"content":"todo","lastModifiedDate":"2021-08-16"},{"lineNumber":22,"author":{"gitId":"lowkangn"},"content":"deadline","lastModifiedDate":"2021-08-16"},{"lineNumber":23,"author":{"gitId":"lowkangn"},"content":"event","lastModifiedDate":"2021-08-16"},{"lineNumber":24,"author":{"gitId":"lowkangn"},"content":"deadline return book","lastModifiedDate":"2021-08-16"},{"lineNumber":25,"author":{"gitId":"lowkangn"},"content":"event project meeting","lastModifiedDate":"2021-08-16"},{"lineNumber":26,"author":{"gitId":"lowkangn"},"content":"deadline return book /by tonight","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"lowkangn"},"content":"event project meeting /at 12th Aug","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"lowkangn"},"content":"event project meeting /at 2021-08-06, 14:00","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"lowkangn"},"content":"list","lastModifiedDate":"2021-09-05"},{"lineNumber":30,"author":{"gitId":"lowkangn"},"content":"update 4 /d buy bread from store","lastModifiedDate":"2021-09-05"},{"lineNumber":31,"author":{"gitId":"lowkangn"},"content":"update 2 /d project discussion /t 2021-08-06, 15:00 - 16:00","lastModifiedDate":"2021-09-05"},{"lineNumber":32,"author":{"gitId":"lowkangn"},"content":"update 1 /t 2021-06-13","lastModifiedDate":"2021-09-05"},{"lineNumber":33,"author":{"gitId":"lowkangn"},"content":"update 2 /d project discussion on Zoom","lastModifiedDate":"2021-09-05"},{"lineNumber":34,"author":{"gitId":"lowkangn"},"content":"update","lastModifiedDate":"2021-09-05"},{"lineNumber":35,"author":{"gitId":"lowkangn"},"content":"update 3","lastModifiedDate":"2021-09-05"},{"lineNumber":36,"author":{"gitId":"lowkangn"},"content":"update 3 /t 2021-08-06","lastModifiedDate":"2021-09-05"},{"lineNumber":37,"author":{"gitId":"lowkangn"},"content":"update 20 /d buy new laptop","lastModifiedDate":"2021-09-05"},{"lineNumber":38,"author":{"gitId":"lowkangn"},"content":"done 100","lastModifiedDate":"2021-08-16"},{"lineNumber":39,"author":{"gitId":"lowkangn"},"content":"done -1","lastModifiedDate":"2021-08-16"},{"lineNumber":40,"author":{"gitId":"lowkangn"},"content":"done","lastModifiedDate":"2021-08-16"},{"lineNumber":41,"author":{"gitId":"lowkangn"},"content":"blah","lastModifiedDate":"2021-08-16"},{"lineNumber":42,"author":{"gitId":"lowkangn"},"content":"bye","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"lowkangn":42}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"lowkangn"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\Duke.java","lastModifiedDate":"2021-09-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"lowkangn"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":19,"lowkangn":2}}]

[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"thanwinnikki"},"content":"    mainClassName \u003d \"duke.Duke\"","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2021-08-30"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"thanwinnikki":1,"-":45}},{"path":"src/main/java/duke/DeadLine.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"thanwinnikki"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"thanwinnikki"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"thanwinnikki"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"thanwinnikki"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"thanwinnikki"},"content":" * Represents a Deadline task.","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"thanwinnikki"},"content":" * @author Nikki","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"thanwinnikki"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"thanwinnikki"},"content":"public class DeadLine extends Task {","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"thanwinnikki"},"content":"    private String deadLine;","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"thanwinnikki"},"content":"    private LocalDateTime dateTime;","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"thanwinnikki"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"thanwinnikki"},"content":"     * Creates a Deadline task object.","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"thanwinnikki"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"thanwinnikki"},"content":"     * @param task Name of the task.","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"thanwinnikki"},"content":"     * @param deadLine Deadline of the task.","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"thanwinnikki"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"thanwinnikki"},"content":"    public DeadLine(String task, String deadLine) {","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"thanwinnikki"},"content":"        super(task);","lastModifiedDate":"2021-08-18"},{"lineNumber":24,"author":{"gitId":"thanwinnikki"},"content":"        this.deadLine \u003d deadLine;","lastModifiedDate":"2021-08-18"},{"lineNumber":25,"author":{"gitId":"thanwinnikki"},"content":"        timeFormatter(deadLine);","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"thanwinnikki"},"content":"    private void timeFormatter(String timeInput) {","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"thanwinnikki"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d/MM/yyyy HHmm\");","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"thanwinnikki"},"content":"        dateTime \u003d LocalDateTime.parse(timeInput, formatter);","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"thanwinnikki"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"thanwinnikki"},"content":"     * Returns a String with a different date and time format than user input.","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"thanwinnikki"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"thanwinnikki"},"content":"     * @return String representation of date and time after format change.","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"thanwinnikki"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"thanwinnikki"},"content":"    public String formatChanger() {","lastModifiedDate":"2021-08-30"},{"lineNumber":39,"author":{"gitId":"thanwinnikki"},"content":"        DateTimeFormatter dateFormat \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy\");","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"thanwinnikki"},"content":"        DateTimeFormatter timeFormatter \u003d DateTimeFormatter.ofPattern(\"h.mm a\");","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"thanwinnikki"},"content":"        return dateFormat.format(dateTime) + \", \" + timeFormatter.format(dateTime);","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":43,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":44,"author":{"gitId":"thanwinnikki"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"thanwinnikki"},"content":"     * Returns a String representation of a Deadline task.","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"thanwinnikki"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"thanwinnikki"},"content":"     * @return String representation of this Deadline task.","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"thanwinnikki"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"thanwinnikki"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":50,"author":{"gitId":"thanwinnikki"},"content":"    public String printTask() {","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"thanwinnikki"},"content":"        String result \u003d \"\";","lastModifiedDate":"2021-08-18"},{"lineNumber":52,"author":{"gitId":"thanwinnikki"},"content":"        if (super.complete) {","lastModifiedDate":"2021-08-18"},{"lineNumber":53,"author":{"gitId":"thanwinnikki"},"content":"            result \u003d \"[D][X] \";","lastModifiedDate":"2021-08-18"},{"lineNumber":54,"author":{"gitId":"thanwinnikki"},"content":"        } else {","lastModifiedDate":"2021-08-18"},{"lineNumber":55,"author":{"gitId":"thanwinnikki"},"content":"            result \u003d \"[D][ ] \";","lastModifiedDate":"2021-08-18"},{"lineNumber":56,"author":{"gitId":"thanwinnikki"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":57,"author":{"gitId":"thanwinnikki"},"content":"        return result + super.task + \" (by: \" + formatChanger() + \")\";","lastModifiedDate":"2021-08-30"},{"lineNumber":58,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":59,"author":{"gitId":"thanwinnikki"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"thanwinnikki":59}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"thanwinnikki"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"thanwinnikki"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"thanwinnikki"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"thanwinnikki"},"content":" * Represents a chat bot assistant to keep track of tasks.","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"thanwinnikki"},"content":" * @author Nikki","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"thanwinnikki"},"content":" * @version 0.1","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"thanwinnikki"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":11,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":12,"author":{"gitId":"thanwinnikki"},"content":"    private Storage storage;","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"thanwinnikki"},"content":"    private TaskList taskList;","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"thanwinnikki"},"content":"    private Ui ui;","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"thanwinnikki"},"content":"    private Parser parser;","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"thanwinnikki"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"thanwinnikki"},"content":"     * Creates Duke Chat Bot instance.","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"thanwinnikki"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"thanwinnikki"},"content":"    public Duke() {","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"thanwinnikki"},"content":"        storage \u003d new Storage();","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"thanwinnikki"},"content":"        ArrayList readList \u003d storage.fileReader();","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"thanwinnikki"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"thanwinnikki"},"content":"        taskList \u003d new TaskList(readList, ui);","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"thanwinnikki"},"content":"        parser \u003d new Parser(ui, taskList, storage);","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"thanwinnikki"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"thanwinnikki"},"content":"     * Starts chat bot when the main method is called.","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"thanwinnikki"},"content":"     * @throws InputError If user inputs are invalid or unrecognised.","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"thanwinnikki"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"thanwinnikki"},"content":"    public void run() throws InputError {","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"thanwinnikki"},"content":"        boolean byeMessage \u003d false;","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"thanwinnikki"},"content":"        ui.startMessage();","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"thanwinnikki"},"content":"        while (!byeMessage) {","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"thanwinnikki"},"content":"            String userInput \u003d ui.startInput();","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"thanwinnikki"},"content":"            int caseNum \u003d parser.caseChecker(userInput);","lastModifiedDate":"2021-08-30"},{"lineNumber":39,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"thanwinnikki"},"content":"            if (caseNum \u003d\u003d 1) {","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"thanwinnikki"},"content":"                byeMessage \u003d true;","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"thanwinnikki"},"content":"            } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"thanwinnikki"},"content":"                parser.caseHandler(caseNum, userInput, taskList);","lastModifiedDate":"2021-08-30"},{"lineNumber":44,"author":{"gitId":"thanwinnikki"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"thanwinnikki"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"thanwinnikki"},"content":"        ui.byeMessage();","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"thanwinnikki"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"thanwinnikki"},"content":"     * Starts the program with this method.","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"thanwinnikki"},"content":"     * @param args The command line arguments which is empty.","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"thanwinnikki"},"content":"     * @throws InputError If user inputs are invalid or unrecognised.","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"thanwinnikki"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"thanwinnikki"},"content":"    public static void main(String[] args) throws InputError {","lastModifiedDate":"2021-08-18"},{"lineNumber":55,"author":{"gitId":"thanwinnikki"},"content":"        new Duke().run();","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"thanwinnikki":54,"-":3}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"thanwinnikki"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"thanwinnikki"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"thanwinnikki"},"content":" * Represents an Event task.","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"thanwinnikki"},"content":" * @author Nikki","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"thanwinnikki"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"thanwinnikki"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"thanwinnikki"},"content":"    private String timing;","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"thanwinnikki"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"thanwinnikki"},"content":"     * Creates an Event task.","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"thanwinnikki"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"thanwinnikki"},"content":"     * @param task Name of the event.","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"thanwinnikki"},"content":"     * @param timing Duration of the event.","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"thanwinnikki"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"thanwinnikki"},"content":"    public Event(String task, String timing) {","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"thanwinnikki"},"content":"        super(task);","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"thanwinnikki"},"content":"        this.timing \u003d timing;","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"thanwinnikki"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"thanwinnikki"},"content":"     * Returns a String representation of an Event task.","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"thanwinnikki"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"thanwinnikki"},"content":"     * @return String representation of this Event task.","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"thanwinnikki"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"thanwinnikki"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":28,"author":{"gitId":"thanwinnikki"},"content":"    String printTask() {","lastModifiedDate":"2021-08-18"},{"lineNumber":29,"author":{"gitId":"thanwinnikki"},"content":"        String result \u003d \"\";","lastModifiedDate":"2021-08-18"},{"lineNumber":30,"author":{"gitId":"thanwinnikki"},"content":"        if (super.complete) {","lastModifiedDate":"2021-08-18"},{"lineNumber":31,"author":{"gitId":"thanwinnikki"},"content":"            result \u003d \"[E][X] \";","lastModifiedDate":"2021-08-18"},{"lineNumber":32,"author":{"gitId":"thanwinnikki"},"content":"        } else {","lastModifiedDate":"2021-08-18"},{"lineNumber":33,"author":{"gitId":"thanwinnikki"},"content":"            result \u003d \"[E][ ] \";","lastModifiedDate":"2021-08-18"},{"lineNumber":34,"author":{"gitId":"thanwinnikki"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":35,"author":{"gitId":"thanwinnikki"},"content":"        return result + super.task + \" (at: \" + this.timing + \")\";","lastModifiedDate":"2021-08-18"},{"lineNumber":36,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":37,"author":{"gitId":"thanwinnikki"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"thanwinnikki":37}},{"path":"src/main/java/duke/InputError.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"thanwinnikki"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"thanwinnikki"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"thanwinnikki"},"content":" * Custom Error when users enters an invalid input.","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"thanwinnikki"},"content":" * @author Nikki","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"thanwinnikki"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"thanwinnikki"},"content":"public class InputError extends Exception {","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"thanwinnikki"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"thanwinnikki"},"content":"     * Creates an InputError.","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"thanwinnikki"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"thanwinnikki"},"content":"     * @param errorMessage Error message of invalid input.","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"thanwinnikki"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"thanwinnikki"},"content":"    public InputError(String errorMessage) {","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"thanwinnikki"},"content":"        super(errorMessage);","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"thanwinnikki"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"thanwinnikki":17}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"thanwinnikki"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"thanwinnikki"},"content":"public class Parser {","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"thanwinnikki"},"content":"    private Ui ui;","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"thanwinnikki"},"content":"    private TaskList taskList;","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"thanwinnikki"},"content":"    private Storage storage;","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"thanwinnikki"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"thanwinnikki"},"content":"     * Creates a Parser that processes the user\u0027s inputs.","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"thanwinnikki"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"thanwinnikki"},"content":"     * @param ui Ui object which interacts with the users.","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"thanwinnikki"},"content":"     * @param taskList TaskList object which stores the list of tasks.","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"thanwinnikki"},"content":"     * @param storage Storage object which saves and retrieves files.","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"thanwinnikki"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"thanwinnikki"},"content":"    public Parser(Ui ui, TaskList taskList, Storage storage) {","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"thanwinnikki"},"content":"        this.ui \u003d ui;","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"thanwinnikki"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"thanwinnikki"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"thanwinnikki"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"thanwinnikki"},"content":"     * Checks whether user input is a bye command.","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"thanwinnikki"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"thanwinnikki"},"content":"     * @param str User input.","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"thanwinnikki"},"content":"     * @return True if bye command. False if not bye command.","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"thanwinnikki"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"thanwinnikki"},"content":"    private boolean byeChecker(String str) {","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"thanwinnikki"},"content":"        boolean isBye \u003d false;","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"thanwinnikki"},"content":"        if (str.length() \u003e\u003d 3) {","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"thanwinnikki"},"content":"            isBye \u003d str.equals(\"bye\");","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"thanwinnikki"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"thanwinnikki"},"content":"        return isBye;","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"thanwinnikki"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"thanwinnikki"},"content":"     * Checks whether user input is a list command.","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"thanwinnikki"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"thanwinnikki"},"content":"     * @param str User input.","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"thanwinnikki"},"content":"     * @return True if list command. False if not list command.","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"thanwinnikki"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"thanwinnikki"},"content":"    private boolean listChecker(String str) {","lastModifiedDate":"2021-08-30"},{"lineNumber":43,"author":{"gitId":"thanwinnikki"},"content":"        boolean isList \u003d false;","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"thanwinnikki"},"content":"        if (str.length() \u003e\u003d 4) {","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"thanwinnikki"},"content":"            isList \u003d str.equals(\"list\");","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"thanwinnikki"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"thanwinnikki"},"content":"        return isList;","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"thanwinnikki"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"thanwinnikki"},"content":"     * Checks whether user input is a check command.","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"thanwinnikki"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"thanwinnikki"},"content":"     * @param str User input.","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"thanwinnikki"},"content":"     * @return True if check command. False if not check command.","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"thanwinnikki"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"thanwinnikki"},"content":"    private boolean doneChecker(String str) {","lastModifiedDate":"2021-08-30"},{"lineNumber":57,"author":{"gitId":"thanwinnikki"},"content":"        boolean isDone \u003d false;","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"thanwinnikki"},"content":"        if (str.length() \u003e\u003d 4) {","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"thanwinnikki"},"content":"            isDone \u003d str.substring(0, 4).equals(\"done\");","lastModifiedDate":"2021-08-24"},{"lineNumber":60,"author":{"gitId":"thanwinnikki"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"thanwinnikki"},"content":"        return isDone;","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":63,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":64,"author":{"gitId":"thanwinnikki"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"thanwinnikki"},"content":"     * Checks whether user input is a To Do command.","lastModifiedDate":"2021-08-24"},{"lineNumber":66,"author":{"gitId":"thanwinnikki"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":67,"author":{"gitId":"thanwinnikki"},"content":"     * @param str User input.","lastModifiedDate":"2021-08-24"},{"lineNumber":68,"author":{"gitId":"thanwinnikki"},"content":"     * @return True if To Do command. False if not To Do command.","lastModifiedDate":"2021-08-24"},{"lineNumber":69,"author":{"gitId":"thanwinnikki"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":70,"author":{"gitId":"thanwinnikki"},"content":"    private boolean todoChecker(String str) {","lastModifiedDate":"2021-08-30"},{"lineNumber":71,"author":{"gitId":"thanwinnikki"},"content":"        boolean isTodo \u003d false;","lastModifiedDate":"2021-08-24"},{"lineNumber":72,"author":{"gitId":"thanwinnikki"},"content":"        if (str.length() \u003e\u003d 4) {","lastModifiedDate":"2021-08-24"},{"lineNumber":73,"author":{"gitId":"thanwinnikki"},"content":"            isTodo \u003d str.substring(0, 4).equals(\"todo\");","lastModifiedDate":"2021-08-24"},{"lineNumber":74,"author":{"gitId":"thanwinnikki"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":75,"author":{"gitId":"thanwinnikki"},"content":"        return isTodo;","lastModifiedDate":"2021-08-24"},{"lineNumber":76,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":77,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":78,"author":{"gitId":"thanwinnikki"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":79,"author":{"gitId":"thanwinnikki"},"content":"     * Checks whether user input is a Deadline command.","lastModifiedDate":"2021-08-24"},{"lineNumber":80,"author":{"gitId":"thanwinnikki"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":81,"author":{"gitId":"thanwinnikki"},"content":"     * @param str User input.","lastModifiedDate":"2021-08-24"},{"lineNumber":82,"author":{"gitId":"thanwinnikki"},"content":"     * @return True if Deadline command. False if not Deadline command.","lastModifiedDate":"2021-08-24"},{"lineNumber":83,"author":{"gitId":"thanwinnikki"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":84,"author":{"gitId":"thanwinnikki"},"content":"    private boolean deadlineChecker(String str) {","lastModifiedDate":"2021-08-30"},{"lineNumber":85,"author":{"gitId":"thanwinnikki"},"content":"        boolean isDeadLine \u003d false;","lastModifiedDate":"2021-08-24"},{"lineNumber":86,"author":{"gitId":"thanwinnikki"},"content":"        if (str.length() \u003e\u003d 8) {","lastModifiedDate":"2021-08-24"},{"lineNumber":87,"author":{"gitId":"thanwinnikki"},"content":"            isDeadLine \u003d str.substring(0, 8).equals(\"deadline\");","lastModifiedDate":"2021-08-24"},{"lineNumber":88,"author":{"gitId":"thanwinnikki"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":89,"author":{"gitId":"thanwinnikki"},"content":"        return isDeadLine;","lastModifiedDate":"2021-08-24"},{"lineNumber":90,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":91,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":92,"author":{"gitId":"thanwinnikki"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":93,"author":{"gitId":"thanwinnikki"},"content":"     * Checks whether user input is a Event command.","lastModifiedDate":"2021-08-24"},{"lineNumber":94,"author":{"gitId":"thanwinnikki"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":95,"author":{"gitId":"thanwinnikki"},"content":"     * @param str User input.","lastModifiedDate":"2021-08-24"},{"lineNumber":96,"author":{"gitId":"thanwinnikki"},"content":"     * @return True if Event command. False if not Event command.","lastModifiedDate":"2021-08-24"},{"lineNumber":97,"author":{"gitId":"thanwinnikki"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":98,"author":{"gitId":"thanwinnikki"},"content":"    private boolean eventChecker(String str) {","lastModifiedDate":"2021-08-30"},{"lineNumber":99,"author":{"gitId":"thanwinnikki"},"content":"        boolean isEvent \u003d false;","lastModifiedDate":"2021-08-24"},{"lineNumber":100,"author":{"gitId":"thanwinnikki"},"content":"        if (str.length() \u003e\u003d 5) {","lastModifiedDate":"2021-08-24"},{"lineNumber":101,"author":{"gitId":"thanwinnikki"},"content":"            isEvent \u003d str.substring(0, 5).equals(\"event\");","lastModifiedDate":"2021-08-24"},{"lineNumber":102,"author":{"gitId":"thanwinnikki"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":103,"author":{"gitId":"thanwinnikki"},"content":"        return isEvent;","lastModifiedDate":"2021-08-24"},{"lineNumber":104,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":105,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":106,"author":{"gitId":"thanwinnikki"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":107,"author":{"gitId":"thanwinnikki"},"content":"     * Checks whether user input is a delete command.","lastModifiedDate":"2021-08-24"},{"lineNumber":108,"author":{"gitId":"thanwinnikki"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":109,"author":{"gitId":"thanwinnikki"},"content":"     * @param str User input.","lastModifiedDate":"2021-08-24"},{"lineNumber":110,"author":{"gitId":"thanwinnikki"},"content":"     * @return True if delete command. False if not delete command.","lastModifiedDate":"2021-08-24"},{"lineNumber":111,"author":{"gitId":"thanwinnikki"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":112,"author":{"gitId":"thanwinnikki"},"content":"    private boolean deleteChecker(String str) {","lastModifiedDate":"2021-08-30"},{"lineNumber":113,"author":{"gitId":"thanwinnikki"},"content":"        boolean isDelete \u003d false;","lastModifiedDate":"2021-08-24"},{"lineNumber":114,"author":{"gitId":"thanwinnikki"},"content":"        if (str.length() \u003e\u003d 6) {","lastModifiedDate":"2021-08-24"},{"lineNumber":115,"author":{"gitId":"thanwinnikki"},"content":"            isDelete \u003d str.substring(0, 6).equals(\"delete\");","lastModifiedDate":"2021-08-24"},{"lineNumber":116,"author":{"gitId":"thanwinnikki"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":117,"author":{"gitId":"thanwinnikki"},"content":"        return isDelete;","lastModifiedDate":"2021-08-24"},{"lineNumber":118,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":119,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":120,"author":{"gitId":"thanwinnikki"},"content":"    private boolean findChecker(String str) {","lastModifiedDate":"2021-08-30"},{"lineNumber":121,"author":{"gitId":"thanwinnikki"},"content":"        boolean isFind \u003d false;","lastModifiedDate":"2021-08-24"},{"lineNumber":122,"author":{"gitId":"thanwinnikki"},"content":"        if (str.length() \u003e\u003d 4) {","lastModifiedDate":"2021-08-24"},{"lineNumber":123,"author":{"gitId":"thanwinnikki"},"content":"            isFind \u003d str.substring(0, 4).equals(\"find\");","lastModifiedDate":"2021-08-24"},{"lineNumber":124,"author":{"gitId":"thanwinnikki"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":125,"author":{"gitId":"thanwinnikki"},"content":"        return isFind;","lastModifiedDate":"2021-08-24"},{"lineNumber":126,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":127,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":128,"author":{"gitId":"thanwinnikki"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":129,"author":{"gitId":"thanwinnikki"},"content":"     * Checks what command is the user input.","lastModifiedDate":"2021-08-24"},{"lineNumber":130,"author":{"gitId":"thanwinnikki"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":131,"author":{"gitId":"thanwinnikki"},"content":"     * @param input User input.","lastModifiedDate":"2021-08-24"},{"lineNumber":132,"author":{"gitId":"thanwinnikki"},"content":"     * @return Case number of command.","lastModifiedDate":"2021-08-24"},{"lineNumber":133,"author":{"gitId":"thanwinnikki"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":134,"author":{"gitId":"thanwinnikki"},"content":"    public int caseChecker(String input) {","lastModifiedDate":"2021-08-30"},{"lineNumber":135,"author":{"gitId":"thanwinnikki"},"content":"        int caseNum \u003d 0;","lastModifiedDate":"2021-08-24"},{"lineNumber":136,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":137,"author":{"gitId":"thanwinnikki"},"content":"        if (byeChecker(input)) {","lastModifiedDate":"2021-08-30"},{"lineNumber":138,"author":{"gitId":"thanwinnikki"},"content":"            caseNum \u003d 1;","lastModifiedDate":"2021-08-24"},{"lineNumber":139,"author":{"gitId":"thanwinnikki"},"content":"        } else if (listChecker(input)) {","lastModifiedDate":"2021-08-30"},{"lineNumber":140,"author":{"gitId":"thanwinnikki"},"content":"            caseNum \u003d 2;","lastModifiedDate":"2021-08-24"},{"lineNumber":141,"author":{"gitId":"thanwinnikki"},"content":"        } else if (doneChecker(input)) {","lastModifiedDate":"2021-08-30"},{"lineNumber":142,"author":{"gitId":"thanwinnikki"},"content":"            caseNum \u003d 3;","lastModifiedDate":"2021-08-24"},{"lineNumber":143,"author":{"gitId":"thanwinnikki"},"content":"        } else if (todoChecker(input)) {","lastModifiedDate":"2021-08-30"},{"lineNumber":144,"author":{"gitId":"thanwinnikki"},"content":"            caseNum \u003d 4;","lastModifiedDate":"2021-08-24"},{"lineNumber":145,"author":{"gitId":"thanwinnikki"},"content":"        } else if (deadlineChecker(input)) {","lastModifiedDate":"2021-08-30"},{"lineNumber":146,"author":{"gitId":"thanwinnikki"},"content":"            caseNum \u003d 5;","lastModifiedDate":"2021-08-24"},{"lineNumber":147,"author":{"gitId":"thanwinnikki"},"content":"        } else if (eventChecker(input)) {","lastModifiedDate":"2021-08-30"},{"lineNumber":148,"author":{"gitId":"thanwinnikki"},"content":"            caseNum \u003d 6;","lastModifiedDate":"2021-08-24"},{"lineNumber":149,"author":{"gitId":"thanwinnikki"},"content":"        } else if (deleteChecker(input)) {","lastModifiedDate":"2021-08-30"},{"lineNumber":150,"author":{"gitId":"thanwinnikki"},"content":"            caseNum \u003d 7;","lastModifiedDate":"2021-08-24"},{"lineNumber":151,"author":{"gitId":"thanwinnikki"},"content":"        } else if (findChecker(input)) {","lastModifiedDate":"2021-08-30"},{"lineNumber":152,"author":{"gitId":"thanwinnikki"},"content":"            caseNum \u003d 8;","lastModifiedDate":"2021-08-24"},{"lineNumber":153,"author":{"gitId":"thanwinnikki"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":154,"author":{"gitId":"thanwinnikki"},"content":"        return caseNum;","lastModifiedDate":"2021-08-24"},{"lineNumber":155,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":156,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":157,"author":{"gitId":"thanwinnikki"},"content":"    private void listInput(TaskList taskList) throws InputError {","lastModifiedDate":"2021-08-30"},{"lineNumber":158,"author":{"gitId":"thanwinnikki"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":159,"author":{"gitId":"thanwinnikki"},"content":"            if (taskList.size() \u003d\u003d 0) {","lastModifiedDate":"2021-08-24"},{"lineNumber":160,"author":{"gitId":"thanwinnikki"},"content":"                throw new InputError(\"No items in list\");","lastModifiedDate":"2021-08-24"},{"lineNumber":161,"author":{"gitId":"thanwinnikki"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":162,"author":{"gitId":"thanwinnikki"},"content":"            taskList.printList();","lastModifiedDate":"2021-08-24"},{"lineNumber":163,"author":{"gitId":"thanwinnikki"},"content":"        } catch (InputError e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":164,"author":{"gitId":"thanwinnikki"},"content":"            ui.errorMessage(e);","lastModifiedDate":"2021-08-24"},{"lineNumber":165,"author":{"gitId":"thanwinnikki"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":166,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":167,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":168,"author":{"gitId":"thanwinnikki"},"content":"    private void doneInput(String str, TaskList taskList) throws InputError {","lastModifiedDate":"2021-08-30"},{"lineNumber":169,"author":{"gitId":"thanwinnikki"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":170,"author":{"gitId":"thanwinnikki"},"content":"            if (str.length() \u003d\u003d 4) {","lastModifiedDate":"2021-08-24"},{"lineNumber":171,"author":{"gitId":"thanwinnikki"},"content":"                throw new InputError(\"No task indicated\");","lastModifiedDate":"2021-08-24"},{"lineNumber":172,"author":{"gitId":"thanwinnikki"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":173,"author":{"gitId":"thanwinnikki"},"content":"            int indexNum \u003d Integer.parseInt(str.replaceAll(\"[^0-9]\", \"\"));","lastModifiedDate":"2021-08-24"},{"lineNumber":174,"author":{"gitId":"thanwinnikki"},"content":"            taskList.doneItem(indexNum);","lastModifiedDate":"2021-08-24"},{"lineNumber":175,"author":{"gitId":"thanwinnikki"},"content":"        } catch (InputError e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":176,"author":{"gitId":"thanwinnikki"},"content":"            ui.errorMessage(e);","lastModifiedDate":"2021-08-24"},{"lineNumber":177,"author":{"gitId":"thanwinnikki"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":178,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":179,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":180,"author":{"gitId":"thanwinnikki"},"content":"    private void findInput(String str, TaskList taskList) throws InputError {","lastModifiedDate":"2021-08-30"},{"lineNumber":181,"author":{"gitId":"thanwinnikki"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":182,"author":{"gitId":"thanwinnikki"},"content":"            if (str.length() \u003d\u003d 4) {","lastModifiedDate":"2021-08-24"},{"lineNumber":183,"author":{"gitId":"thanwinnikki"},"content":"                throw new InputError(\"No task indicated\");","lastModifiedDate":"2021-08-24"},{"lineNumber":184,"author":{"gitId":"thanwinnikki"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":185,"author":{"gitId":"thanwinnikki"},"content":"            String searchWord \u003d str.substring(5);","lastModifiedDate":"2021-08-24"},{"lineNumber":186,"author":{"gitId":"thanwinnikki"},"content":"            TaskList foundList \u003d taskList.findTasks(searchWord);","lastModifiedDate":"2021-08-24"},{"lineNumber":187,"author":{"gitId":"thanwinnikki"},"content":"            if (foundList.currList().isEmpty()) {","lastModifiedDate":"2021-08-24"},{"lineNumber":188,"author":{"gitId":"thanwinnikki"},"content":"                throw new InputError(\"No such tasks found\");","lastModifiedDate":"2021-08-24"},{"lineNumber":189,"author":{"gitId":"thanwinnikki"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":190,"author":{"gitId":"thanwinnikki"},"content":"            System.out.println(\"We found these for you boss:\");","lastModifiedDate":"2021-08-24"},{"lineNumber":191,"author":{"gitId":"thanwinnikki"},"content":"            foundList.printList();","lastModifiedDate":"2021-08-24"},{"lineNumber":192,"author":{"gitId":"thanwinnikki"},"content":"        } catch (InputError e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":193,"author":{"gitId":"thanwinnikki"},"content":"            ui.errorMessage(e);","lastModifiedDate":"2021-08-24"},{"lineNumber":194,"author":{"gitId":"thanwinnikki"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":195,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":196,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":197,"author":{"gitId":"thanwinnikki"},"content":"    private void todoInput(String str, TaskList taskList) throws InputError {","lastModifiedDate":"2021-08-30"},{"lineNumber":198,"author":{"gitId":"thanwinnikki"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":199,"author":{"gitId":"thanwinnikki"},"content":"            if (str.length() \u003d\u003d 4) {","lastModifiedDate":"2021-08-24"},{"lineNumber":200,"author":{"gitId":"thanwinnikki"},"content":"                throw new InputError(\"Description Please!\");","lastModifiedDate":"2021-08-24"},{"lineNumber":201,"author":{"gitId":"thanwinnikki"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":202,"author":{"gitId":"thanwinnikki"},"content":"            taskList.addTodo(str);","lastModifiedDate":"2021-08-24"},{"lineNumber":203,"author":{"gitId":"thanwinnikki"},"content":"        } catch (InputError e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":204,"author":{"gitId":"thanwinnikki"},"content":"            ui.errorMessage(e);","lastModifiedDate":"2021-08-24"},{"lineNumber":205,"author":{"gitId":"thanwinnikki"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":206,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":207,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":208,"author":{"gitId":"thanwinnikki"},"content":"    private void deadlineInput(String str, TaskList taskList) throws InputError {","lastModifiedDate":"2021-08-30"},{"lineNumber":209,"author":{"gitId":"thanwinnikki"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":210,"author":{"gitId":"thanwinnikki"},"content":"            if (str.length() \u003d\u003d 8) {","lastModifiedDate":"2021-08-24"},{"lineNumber":211,"author":{"gitId":"thanwinnikki"},"content":"                throw new InputError(\"Description Please!\");","lastModifiedDate":"2021-08-24"},{"lineNumber":212,"author":{"gitId":"thanwinnikki"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":213,"author":{"gitId":"thanwinnikki"},"content":"            taskList.addDeadline(str);","lastModifiedDate":"2021-08-24"},{"lineNumber":214,"author":{"gitId":"thanwinnikki"},"content":"        } catch (InputError e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":215,"author":{"gitId":"thanwinnikki"},"content":"            ui.errorMessage(e);","lastModifiedDate":"2021-08-24"},{"lineNumber":216,"author":{"gitId":"thanwinnikki"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":217,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":218,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":219,"author":{"gitId":"thanwinnikki"},"content":"    private void eventInput(String str, TaskList taskList) throws InputError {","lastModifiedDate":"2021-08-30"},{"lineNumber":220,"author":{"gitId":"thanwinnikki"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":221,"author":{"gitId":"thanwinnikki"},"content":"            if (str.length() \u003d\u003d 5) {","lastModifiedDate":"2021-08-24"},{"lineNumber":222,"author":{"gitId":"thanwinnikki"},"content":"                throw new InputError(\"Description Please!\");","lastModifiedDate":"2021-08-24"},{"lineNumber":223,"author":{"gitId":"thanwinnikki"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":224,"author":{"gitId":"thanwinnikki"},"content":"            taskList.addEvent(str);","lastModifiedDate":"2021-08-24"},{"lineNumber":225,"author":{"gitId":"thanwinnikki"},"content":"        } catch (InputError e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":226,"author":{"gitId":"thanwinnikki"},"content":"            ui.errorMessage(e);","lastModifiedDate":"2021-08-24"},{"lineNumber":227,"author":{"gitId":"thanwinnikki"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":228,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":229,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":230,"author":{"gitId":"thanwinnikki"},"content":"    private void deleteInput(String str, TaskList taskList) throws InputError {","lastModifiedDate":"2021-08-30"},{"lineNumber":231,"author":{"gitId":"thanwinnikki"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":232,"author":{"gitId":"thanwinnikki"},"content":"            if (str.length() \u003d\u003d 5) {","lastModifiedDate":"2021-08-24"},{"lineNumber":233,"author":{"gitId":"thanwinnikki"},"content":"                throw new InputError(\"No Task to delete\");","lastModifiedDate":"2021-08-24"},{"lineNumber":234,"author":{"gitId":"thanwinnikki"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":235,"author":{"gitId":"thanwinnikki"},"content":"            int indexNum \u003d Integer.parseInt(str.replaceAll(\"[^0-9]\", \"\"));","lastModifiedDate":"2021-08-24"},{"lineNumber":236,"author":{"gitId":"thanwinnikki"},"content":"            taskList.deleteItem(indexNum);","lastModifiedDate":"2021-08-24"},{"lineNumber":237,"author":{"gitId":"thanwinnikki"},"content":"        } catch (InputError e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":238,"author":{"gitId":"thanwinnikki"},"content":"            ui.errorMessage(e);","lastModifiedDate":"2021-08-24"},{"lineNumber":239,"author":{"gitId":"thanwinnikki"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":240,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":241,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":242,"author":{"gitId":"thanwinnikki"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":243,"author":{"gitId":"thanwinnikki"},"content":"     * Handles the logic for different command cases.","lastModifiedDate":"2021-08-24"},{"lineNumber":244,"author":{"gitId":"thanwinnikki"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":245,"author":{"gitId":"thanwinnikki"},"content":"     * @param caseNum Case Number of the command.","lastModifiedDate":"2021-08-24"},{"lineNumber":246,"author":{"gitId":"thanwinnikki"},"content":"     * @param input Current user input.","lastModifiedDate":"2021-08-24"},{"lineNumber":247,"author":{"gitId":"thanwinnikki"},"content":"     * @param taskList Current TaskList being used.","lastModifiedDate":"2021-08-24"},{"lineNumber":248,"author":{"gitId":"thanwinnikki"},"content":"     * @throws InputError If user input is invalid or unrecognised.","lastModifiedDate":"2021-08-24"},{"lineNumber":249,"author":{"gitId":"thanwinnikki"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":250,"author":{"gitId":"thanwinnikki"},"content":"    public void caseHandler(int caseNum, String input, TaskList taskList) throws InputError {","lastModifiedDate":"2021-08-30"},{"lineNumber":251,"author":{"gitId":"thanwinnikki"},"content":"        switch (caseNum) {","lastModifiedDate":"2021-08-24"},{"lineNumber":252,"author":{"gitId":"thanwinnikki"},"content":"        case 2:","lastModifiedDate":"2021-08-24"},{"lineNumber":253,"author":{"gitId":"thanwinnikki"},"content":"            listInput(taskList);","lastModifiedDate":"2021-08-30"},{"lineNumber":254,"author":{"gitId":"thanwinnikki"},"content":"            break;","lastModifiedDate":"2021-08-24"},{"lineNumber":255,"author":{"gitId":"thanwinnikki"},"content":"        case 3:","lastModifiedDate":"2021-08-24"},{"lineNumber":256,"author":{"gitId":"thanwinnikki"},"content":"            doneInput(input, taskList);","lastModifiedDate":"2021-08-30"},{"lineNumber":257,"author":{"gitId":"thanwinnikki"},"content":"            storage.fileSaver(taskList.currList());","lastModifiedDate":"2021-08-24"},{"lineNumber":258,"author":{"gitId":"thanwinnikki"},"content":"            break;","lastModifiedDate":"2021-08-24"},{"lineNumber":259,"author":{"gitId":"thanwinnikki"},"content":"        case 4:","lastModifiedDate":"2021-08-24"},{"lineNumber":260,"author":{"gitId":"thanwinnikki"},"content":"            todoInput(input, taskList);","lastModifiedDate":"2021-08-30"},{"lineNumber":261,"author":{"gitId":"thanwinnikki"},"content":"            storage.fileSaver(taskList.currList());","lastModifiedDate":"2021-08-24"},{"lineNumber":262,"author":{"gitId":"thanwinnikki"},"content":"            break;","lastModifiedDate":"2021-08-24"},{"lineNumber":263,"author":{"gitId":"thanwinnikki"},"content":"        case 5:","lastModifiedDate":"2021-08-24"},{"lineNumber":264,"author":{"gitId":"thanwinnikki"},"content":"            deadlineInput(input, taskList);","lastModifiedDate":"2021-08-30"},{"lineNumber":265,"author":{"gitId":"thanwinnikki"},"content":"            storage.fileSaver(taskList.currList());","lastModifiedDate":"2021-08-24"},{"lineNumber":266,"author":{"gitId":"thanwinnikki"},"content":"            break;","lastModifiedDate":"2021-08-24"},{"lineNumber":267,"author":{"gitId":"thanwinnikki"},"content":"        case 6:","lastModifiedDate":"2021-08-24"},{"lineNumber":268,"author":{"gitId":"thanwinnikki"},"content":"            eventInput(input, taskList);","lastModifiedDate":"2021-08-30"},{"lineNumber":269,"author":{"gitId":"thanwinnikki"},"content":"            storage.fileSaver(taskList.currList());","lastModifiedDate":"2021-08-24"},{"lineNumber":270,"author":{"gitId":"thanwinnikki"},"content":"            break;","lastModifiedDate":"2021-08-24"},{"lineNumber":271,"author":{"gitId":"thanwinnikki"},"content":"        case 7:","lastModifiedDate":"2021-08-24"},{"lineNumber":272,"author":{"gitId":"thanwinnikki"},"content":"            deleteInput(input, taskList);","lastModifiedDate":"2021-08-30"},{"lineNumber":273,"author":{"gitId":"thanwinnikki"},"content":"            storage.fileSaver(taskList.currList());","lastModifiedDate":"2021-08-24"},{"lineNumber":274,"author":{"gitId":"thanwinnikki"},"content":"            break;","lastModifiedDate":"2021-08-24"},{"lineNumber":275,"author":{"gitId":"thanwinnikki"},"content":"        case 8:","lastModifiedDate":"2021-08-24"},{"lineNumber":276,"author":{"gitId":"thanwinnikki"},"content":"            findInput(input, taskList);","lastModifiedDate":"2021-08-30"},{"lineNumber":277,"author":{"gitId":"thanwinnikki"},"content":"            break;","lastModifiedDate":"2021-08-24"},{"lineNumber":278,"author":{"gitId":"thanwinnikki"},"content":"        default:","lastModifiedDate":"2021-08-24"},{"lineNumber":279,"author":{"gitId":"thanwinnikki"},"content":"            ui.invalidInput();","lastModifiedDate":"2021-08-24"},{"lineNumber":280,"author":{"gitId":"thanwinnikki"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":281,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":282,"author":{"gitId":"thanwinnikki"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"thanwinnikki":282}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"thanwinnikki"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"thanwinnikki"},"content":"import java.io.File;","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"thanwinnikki"},"content":"import java.io.FileInputStream;","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"thanwinnikki"},"content":"import java.io.FileOutputStream;","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"thanwinnikki"},"content":"import java.io.ObjectInputStream;","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"thanwinnikki"},"content":"import java.io.ObjectOutputStream;","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"thanwinnikki"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"thanwinnikki"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"thanwinnikki"},"content":" * Represents a storage which you can retrieve and save from.","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"thanwinnikki"},"content":" * @author Nikki","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"thanwinnikki"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"thanwinnikki"},"content":"public class Storage {","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"thanwinnikki"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"thanwinnikki"},"content":"     * Saves the ArrayList representing tasks into hard drive.","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"thanwinnikki"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"thanwinnikki"},"content":"     * @param saveThis Any ArrayList of Tasks to save.","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"thanwinnikki"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"thanwinnikki"},"content":"    public void fileSaver(ArrayList saveThis) {","lastModifiedDate":"2021-08-23"},{"lineNumber":22,"author":{"gitId":"thanwinnikki"},"content":"        try {","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"thanwinnikki"},"content":"            FileOutputStream fileOut \u003d new FileOutputStream(\"saveFile\");","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"thanwinnikki"},"content":"            ObjectOutputStream out \u003d new ObjectOutputStream(fileOut);","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"thanwinnikki"},"content":"            out.writeObject(saveThis);","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"thanwinnikki"},"content":"            out.flush();","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"thanwinnikki"},"content":"            out.close();","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"thanwinnikki"},"content":"            System.out.println(\"Saved Successfully!\");","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"thanwinnikki"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"thanwinnikki"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"thanwinnikki"},"content":"            System.out.println(\"Write failed\");","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"thanwinnikki"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"thanwinnikki"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"thanwinnikki"},"content":"     * Reads the ArrayList representing tasks from the hard drive.","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"thanwinnikki"},"content":"     * Creates a new file if there is no file to read from.","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"thanwinnikki"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"thanwinnikki"},"content":"     * @return ArrayList of tasks for the current program to use.","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"thanwinnikki"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"thanwinnikki"},"content":"    public ArrayList fileReader() {","lastModifiedDate":"2021-08-23"},{"lineNumber":42,"author":{"gitId":"thanwinnikki"},"content":"        ArrayList result \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2021-08-30"},{"lineNumber":43,"author":{"gitId":"thanwinnikki"},"content":"        File tempFile \u003d new File(\"saveFile\");","lastModifiedDate":"2021-08-23"},{"lineNumber":44,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":45,"author":{"gitId":"thanwinnikki"},"content":"        if (tempFile.exists()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":46,"author":{"gitId":"thanwinnikki"},"content":"            try {","lastModifiedDate":"2021-08-23"},{"lineNumber":47,"author":{"gitId":"thanwinnikki"},"content":"                FileInputStream file \u003d new FileInputStream(\"saveFile\");","lastModifiedDate":"2021-08-23"},{"lineNumber":48,"author":{"gitId":"thanwinnikki"},"content":"                ObjectInputStream in \u003d new ObjectInputStream(file);","lastModifiedDate":"2021-08-23"},{"lineNumber":49,"author":{"gitId":"thanwinnikki"},"content":"                result \u003d (ArrayList) in.readObject();","lastModifiedDate":"2021-08-23"},{"lineNumber":50,"author":{"gitId":"thanwinnikki"},"content":"            } catch (Exception e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":51,"author":{"gitId":"thanwinnikki"},"content":"                e.printStackTrace();","lastModifiedDate":"2021-08-23"},{"lineNumber":52,"author":{"gitId":"thanwinnikki"},"content":"                System.out.println(\"Read failed\");","lastModifiedDate":"2021-08-23"},{"lineNumber":53,"author":{"gitId":"thanwinnikki"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":54,"author":{"gitId":"thanwinnikki"},"content":"        } else {","lastModifiedDate":"2021-08-23"},{"lineNumber":55,"author":{"gitId":"thanwinnikki"},"content":"            System.out.println(\"New Save File Created\");","lastModifiedDate":"2021-08-23"},{"lineNumber":56,"author":{"gitId":"thanwinnikki"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":57,"author":{"gitId":"thanwinnikki"},"content":"        return result;","lastModifiedDate":"2021-08-23"},{"lineNumber":58,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":59,"author":{"gitId":"thanwinnikki"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"thanwinnikki":59}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"thanwinnikki"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"thanwinnikki"},"content":"import java.io.Serializable;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"thanwinnikki"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"thanwinnikki"},"content":" * Represents Tasks that the user might want to do.","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"thanwinnikki"},"content":" * @author Nikki","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"thanwinnikki"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"thanwinnikki"},"content":"public class Task implements Serializable {","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"thanwinnikki"},"content":"    protected boolean complete;","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"thanwinnikki"},"content":"    protected String task;","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":13,"author":{"gitId":"thanwinnikki"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"thanwinnikki"},"content":"     * Creates a task object.","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"thanwinnikki"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"thanwinnikki"},"content":"     * @param task Name of task.","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"thanwinnikki"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"thanwinnikki"},"content":"    public Task(String task) {","lastModifiedDate":"2021-08-17"},{"lineNumber":19,"author":{"gitId":"thanwinnikki"},"content":"        this.task \u003d task;","lastModifiedDate":"2021-08-17"},{"lineNumber":20,"author":{"gitId":"thanwinnikki"},"content":"        this.complete \u003d false;","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":22,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":23,"author":{"gitId":"thanwinnikki"},"content":"    public String getTask() {","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"thanwinnikki"},"content":"        return this.task;","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"thanwinnikki"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"thanwinnikki"},"content":"     * Return the String representation of a Task.","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"thanwinnikki"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"thanwinnikki"},"content":"     * @return String representation of this Task.","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"thanwinnikki"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"thanwinnikki"},"content":"    String printTask() {","lastModifiedDate":"2021-08-17"},{"lineNumber":33,"author":{"gitId":"thanwinnikki"},"content":"        String result;","lastModifiedDate":"2021-08-30"},{"lineNumber":34,"author":{"gitId":"thanwinnikki"},"content":"        if (complete) {","lastModifiedDate":"2021-08-17"},{"lineNumber":35,"author":{"gitId":"thanwinnikki"},"content":"            result \u003d \"[X] \";","lastModifiedDate":"2021-08-17"},{"lineNumber":36,"author":{"gitId":"thanwinnikki"},"content":"        } else {","lastModifiedDate":"2021-08-17"},{"lineNumber":37,"author":{"gitId":"thanwinnikki"},"content":"            result \u003d \"[ ] \";","lastModifiedDate":"2021-08-17"},{"lineNumber":38,"author":{"gitId":"thanwinnikki"},"content":"        }","lastModifiedDate":"2021-08-17"},{"lineNumber":39,"author":{"gitId":"thanwinnikki"},"content":"        return result + this.task;","lastModifiedDate":"2021-08-17"},{"lineNumber":40,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":41,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":42,"author":{"gitId":"thanwinnikki"},"content":"    void setComplete() {","lastModifiedDate":"2021-08-17"},{"lineNumber":43,"author":{"gitId":"thanwinnikki"},"content":"        this.complete \u003d true;","lastModifiedDate":"2021-08-17"},{"lineNumber":44,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":45,"author":{"gitId":"thanwinnikki"},"content":"}","lastModifiedDate":"2021-08-17"}],"authorContributionMap":{"thanwinnikki":45}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"thanwinnikki"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"thanwinnikki"},"content":"import java.io.Serializable;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"thanwinnikki"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"thanwinnikki"},"content":"import java.util.List;","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"thanwinnikki"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"thanwinnikki"},"content":"public class TaskList implements Serializable {","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"thanwinnikki"},"content":"    private ArrayList\u003cTask\u003e taskList;","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"thanwinnikki"},"content":"    private Ui ui;","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"thanwinnikki"},"content":"    private int currIndex \u003d 1;","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"thanwinnikki"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"thanwinnikki"},"content":"     * Creates a task list object.","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"thanwinnikki"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"thanwinnikki"},"content":"     * * @param list Lists of tasks as an Array List.","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"thanwinnikki"},"content":"     * @param ui UI to handle user interactions.","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"thanwinnikki"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"thanwinnikki"},"content":"    public TaskList(ArrayList list, Ui ui) {","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"thanwinnikki"},"content":"        this.taskList \u003d list;","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"thanwinnikki"},"content":"        this.ui \u003d ui;","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"thanwinnikki"},"content":"    public ArrayList\u003cTask\u003e currList() {","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"thanwinnikki"},"content":"        return this.taskList;","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"thanwinnikki"},"content":"    public int size() {","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"thanwinnikki"},"content":"        return this.taskList.size();","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"thanwinnikki"},"content":"    private void printItem(Task task) {","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"thanwinnikki"},"content":"        System.out.println(currIndex + \".\" + task.printTask());","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"thanwinnikki"},"content":"        currIndex++;","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"thanwinnikki"},"content":"    void printList() {","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"thanwinnikki"},"content":"        taskList.forEach((task) -\u003e printItem(task));","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"thanwinnikki"},"content":"        currIndex \u003d 1;","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"thanwinnikki"},"content":"    void doneItem(int index) throws InputError {","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"thanwinnikki"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"thanwinnikki"},"content":"            if (index \u003e taskList.size()) {","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"thanwinnikki"},"content":"                throw new InputError(\"Invalid Number\");","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"thanwinnikki"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"thanwinnikki"},"content":"            System.out.println(\"Good job for this thing done man:\");","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"thanwinnikki"},"content":"            Task currTask \u003d taskList.get(index - 1);","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"thanwinnikki"},"content":"            currTask.setComplete();","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"thanwinnikki"},"content":"            System.out.println(\"   \" + currTask.printTask());","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"thanwinnikki"},"content":"        } catch (InputError e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"thanwinnikki"},"content":"            ui.errorMessage(e);","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"thanwinnikki"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"thanwinnikki"},"content":"    void addTodo(String str) {","lastModifiedDate":"2021-08-24"},{"lineNumber":57,"author":{"gitId":"thanwinnikki"},"content":"        System.out.println(\"Alrighty! I have added this task:\");","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"thanwinnikki"},"content":"        taskList.add(new ToDo(str.substring(5)));","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"thanwinnikki"},"content":"        System.out.println(\"   \" + taskList.get(taskList.size() - 1).printTask());","lastModifiedDate":"2021-08-24"},{"lineNumber":60,"author":{"gitId":"thanwinnikki"},"content":"        System.out.println(\"Now you have \" + taskList.size() + \" task(s) in total!\");","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":63,"author":{"gitId":"thanwinnikki"},"content":"    void addDeadline(String str) {","lastModifiedDate":"2021-08-24"},{"lineNumber":64,"author":{"gitId":"thanwinnikki"},"content":"        System.out.println(\"Alrighty! I have added this task:\");","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"thanwinnikki"},"content":"        taskList.add(new DeadLine(str.substring(9, str.indexOf(\"/\") - 1), str.substring(str.indexOf(\"/\") + 4)));","lastModifiedDate":"2021-08-24"},{"lineNumber":66,"author":{"gitId":"thanwinnikki"},"content":"        System.out.println(\"   \" + taskList.get(taskList.size() - 1).printTask());","lastModifiedDate":"2021-08-24"},{"lineNumber":67,"author":{"gitId":"thanwinnikki"},"content":"        System.out.println(\"Now you have \" + taskList.size() + \" task(s) in total!\");","lastModifiedDate":"2021-08-24"},{"lineNumber":68,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":69,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":70,"author":{"gitId":"thanwinnikki"},"content":"    void addEvent(String str) {","lastModifiedDate":"2021-08-24"},{"lineNumber":71,"author":{"gitId":"thanwinnikki"},"content":"        System.out.println(\"Alrighty! I have added this task:\");","lastModifiedDate":"2021-08-24"},{"lineNumber":72,"author":{"gitId":"thanwinnikki"},"content":"        taskList.add(new Event(str.substring(6, str.indexOf(\"/\") - 1), str.substring(str.indexOf(\"/\") + 4)));","lastModifiedDate":"2021-08-24"},{"lineNumber":73,"author":{"gitId":"thanwinnikki"},"content":"        System.out.println(\"   \" + taskList.get(taskList.size() - 1).printTask());","lastModifiedDate":"2021-08-24"},{"lineNumber":74,"author":{"gitId":"thanwinnikki"},"content":"        System.out.println(\"Now you have \" + taskList.size() + \" task(s) in total!\");","lastModifiedDate":"2021-08-24"},{"lineNumber":75,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":76,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":77,"author":{"gitId":"thanwinnikki"},"content":"    void deleteItem(int index) throws InputError {","lastModifiedDate":"2021-08-24"},{"lineNumber":78,"author":{"gitId":"thanwinnikki"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":79,"author":{"gitId":"thanwinnikki"},"content":"            if (index \u003e taskList.size()) {","lastModifiedDate":"2021-08-24"},{"lineNumber":80,"author":{"gitId":"thanwinnikki"},"content":"                throw new InputError(\"Invalid Number\");","lastModifiedDate":"2021-08-24"},{"lineNumber":81,"author":{"gitId":"thanwinnikki"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":82,"author":{"gitId":"thanwinnikki"},"content":"            System.out.println(\"Alrighty! I have deleted this task:\");","lastModifiedDate":"2021-08-24"},{"lineNumber":83,"author":{"gitId":"thanwinnikki"},"content":"            Task removed \u003d taskList.remove(index - 1);","lastModifiedDate":"2021-08-24"},{"lineNumber":84,"author":{"gitId":"thanwinnikki"},"content":"            System.out.println(\"   \" + removed.printTask());","lastModifiedDate":"2021-08-24"},{"lineNumber":85,"author":{"gitId":"thanwinnikki"},"content":"            System.out.println(\"Now you have \" + taskList.size() + \" task(s) in total!\");","lastModifiedDate":"2021-08-24"},{"lineNumber":86,"author":{"gitId":"thanwinnikki"},"content":"        } catch (InputError e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":87,"author":{"gitId":"thanwinnikki"},"content":"            ui.errorMessage(e);","lastModifiedDate":"2021-08-24"},{"lineNumber":88,"author":{"gitId":"thanwinnikki"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":89,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":90,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":91,"author":{"gitId":"thanwinnikki"},"content":"    private void addTasks(Task task, ArrayList\u003cTask\u003e list, String word) {","lastModifiedDate":"2021-08-24"},{"lineNumber":92,"author":{"gitId":"thanwinnikki"},"content":"        if (task.getTask().equals(word)) {","lastModifiedDate":"2021-08-24"},{"lineNumber":93,"author":{"gitId":"thanwinnikki"},"content":"            list.add(task);","lastModifiedDate":"2021-08-24"},{"lineNumber":94,"author":{"gitId":"thanwinnikki"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":95,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":96,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":97,"author":{"gitId":"thanwinnikki"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":98,"author":{"gitId":"thanwinnikki"},"content":"     * Returns tasks that have the keyword in the task list.","lastModifiedDate":"2021-08-30"},{"lineNumber":99,"author":{"gitId":"thanwinnikki"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":100,"author":{"gitId":"thanwinnikki"},"content":"     * @param str Keyword to search.","lastModifiedDate":"2021-08-30"},{"lineNumber":101,"author":{"gitId":"thanwinnikki"},"content":"     * @return A new TaskList with the tasks containing the keyword.","lastModifiedDate":"2021-08-30"},{"lineNumber":102,"author":{"gitId":"thanwinnikki"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":103,"author":{"gitId":"thanwinnikki"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":104,"author":{"gitId":"thanwinnikki"},"content":"    public TaskList findTasks(String str) {","lastModifiedDate":"2021-08-30"},{"lineNumber":105,"author":{"gitId":"thanwinnikki"},"content":"        ArrayList\u003cTask\u003e resultList \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2021-08-24"},{"lineNumber":106,"author":{"gitId":"thanwinnikki"},"content":"        List\u003cTask\u003e foundArray \u003d taskList.stream().filter(task -\u003e task.printTask().contains(str))","lastModifiedDate":"2021-08-24"},{"lineNumber":107,"author":{"gitId":"thanwinnikki"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2021-08-24"},{"lineNumber":108,"author":{"gitId":"thanwinnikki"},"content":"        resultList \u003d new ArrayList\u003cTask\u003e(foundArray);","lastModifiedDate":"2021-08-24"},{"lineNumber":109,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":110,"author":{"gitId":"thanwinnikki"},"content":"        return new TaskList(resultList, ui);","lastModifiedDate":"2021-08-24"},{"lineNumber":111,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":112,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":113,"author":{"gitId":"thanwinnikki"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"thanwinnikki":113}},{"path":"src/main/java/duke/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"thanwinnikki"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"thanwinnikki"},"content":"public class ToDo extends Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"thanwinnikki"},"content":"    public ToDo(String task) {","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"thanwinnikki"},"content":"        super(task);","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"thanwinnikki"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"thanwinnikki"},"content":"    public String printTask() {","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"thanwinnikki"},"content":"        String result \u003d \"\";","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"thanwinnikki"},"content":"        if (this.complete) {","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"thanwinnikki"},"content":"            result \u003d \"[T][X] \";","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"thanwinnikki"},"content":"        } else {","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"thanwinnikki"},"content":"            result \u003d \"[T][ ] \";","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"thanwinnikki"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"thanwinnikki"},"content":"        return result + this.task;","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"thanwinnikki"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"thanwinnikki":19}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"thanwinnikki"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"thanwinnikki"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"thanwinnikki"},"content":"public class Ui {","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"thanwinnikki"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"thanwinnikki"},"content":"     * Displays start message.","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"thanwinnikki"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"thanwinnikki"},"content":"    public void startMessage() {","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"thanwinnikki"},"content":"        String greeting \u003d \"Why hello there! It\u0027s Duke here!\\n\" + \"How can I help you today master?\";","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"thanwinnikki"},"content":"        System.out.println(greeting);","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"thanwinnikki"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"thanwinnikki"},"content":"     * Initialises the user input.","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"thanwinnikki"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"thanwinnikki"},"content":"     * @return User input.","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"thanwinnikki"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"thanwinnikki"},"content":"    public String startInput() {","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"thanwinnikki"},"content":"        Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"thanwinnikki"},"content":"        String input \u003d scanner.nextLine();","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"thanwinnikki"},"content":"        return input;","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"thanwinnikki"},"content":"    public void byeMessage() {","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"thanwinnikki"},"content":"        System.out.println(\"See ya again later!\");","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"thanwinnikki"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"thanwinnikki"},"content":"     * Returns an error message for the user.","lastModifiedDate":"2021-08-30"},{"lineNumber":32,"author":{"gitId":"thanwinnikki"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"thanwinnikki"},"content":"    public void invalidInput() {","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"thanwinnikki"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"thanwinnikki"},"content":"            throw new InputError(\"Invalid Input\");","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"thanwinnikki"},"content":"        } catch (InputError e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"thanwinnikki"},"content":"            System.out.println(\"Here is the error boss. \" + e.getMessage());","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"thanwinnikki"},"content":"            System.out.println(\"I\u0027m not too sure what you meant.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"thanwinnikki"},"content":"            System.out.println(\"Try again with these keywords.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"thanwinnikki"},"content":"            System.out.println(\"todo deadline event\");","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"thanwinnikki"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"thanwinnikki"},"content":"    public void errorMessage(InputError e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"thanwinnikki"},"content":"        System.out.println(\"Here is the error boss. \" + e.getMessage());","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"thanwinnikki"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"thanwinnikki":47}},{"path":"src/test/java/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"thanwinnikki"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":3,"author":{"gitId":"thanwinnikki"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"thanwinnikki"},"content":"import duke.DeadLine;","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"thanwinnikki"},"content":"public class DeadlineTest {","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"thanwinnikki"},"content":"    private String task \u003d \"project submission\";","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"thanwinnikki"},"content":"    private String deadline \u003d \"2/12/2021 1635\";","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"thanwinnikki"},"content":"    private DeadLine deadlineTest \u003d new DeadLine(task, deadline);","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"thanwinnikki"},"content":"    @Test","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"thanwinnikki"},"content":"    public void timeFormChangeTest() {","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"thanwinnikki"},"content":"        String actual \u003d deadlineTest.formatChanger();","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"thanwinnikki"},"content":"        String expected \u003d \"Dec 02 2021, 4.35 PM\";","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"thanwinnikki"},"content":"        assertEquals(actual, expected);","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"thanwinnikki"},"content":"    @Test","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"thanwinnikki"},"content":"    public void printTaskTest() {","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"thanwinnikki"},"content":"        String actual \u003d deadlineTest.printTask();","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"thanwinnikki"},"content":"        String expected \u003d \"[D][ ] project submission (by: Dec 02 2021, 4.35 PM)\";","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"thanwinnikki"},"content":"        assertEquals(actual, expected);","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"thanwinnikki"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"thanwinnikki":25}},{"path":"src/test/java/ToDoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"thanwinnikki"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":3,"author":{"gitId":"thanwinnikki"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"thanwinnikki"},"content":"import duke.ToDo;","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"thanwinnikki"},"content":"public class ToDoTest {","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"thanwinnikki"},"content":"    @Test","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"thanwinnikki"},"content":"    public void printTest() {","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"thanwinnikki"},"content":"        String task \u003d \"read book\";","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"thanwinnikki"},"content":"        ToDo toDoTest1 \u003d new ToDo(task);","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"thanwinnikki"},"content":"        String printTaskActual \u003d toDoTest1.printTask();","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"thanwinnikki"},"content":"        String printTaskExpected \u003d \"[T][ ] read book\";","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"thanwinnikki"},"content":"        assertEquals(printTaskExpected, printTaskActual);","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"thanwinnikki"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"thanwinnikki":16}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"thanwinnikki"},"content":"event go running /at Monday 2pm","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"thanwinnikki":1}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"thanwinnikki"},"content":"del ACTUAL.TXT","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"thanwinnikki"},"content":"javac  -cp ..\\src\\main\\java\\duke -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"thanwinnikki":2,"-":19}}]

[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"thanwinnikki"},"content":"    id \u0027org.jetbrains.kotlin.jvm\u0027 version \u00271.5.30\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"thanwinnikki"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"thanwinnikki"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"thanwinnikki"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"thanwinnikki"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"thanwinnikki"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"thanwinnikki"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"thanwinnikki"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"thanwinnikki"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"thanwinnikki"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"thanwinnikki"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"thanwinnikki"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"thanwinnikki"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":30,"author":{"gitId":"thanwinnikki"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":31,"author":{"gitId":"thanwinnikki"},"content":"    implementation \"org.jetbrains.kotlin:kotlin-stdlib-jdk8\"","lastModifiedDate":"2021-08-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"thanwinnikki"},"content":"    mainClassName \u003d \"duke.Duke\"","lastModifiedDate":"2021-08-30"},{"lineNumber":50,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2021-08-30"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":64,"author":{"gitId":"thanwinnikki"},"content":"compileKotlin {","lastModifiedDate":"2021-08-31"},{"lineNumber":65,"author":{"gitId":"thanwinnikki"},"content":"    kotlinOptions {","lastModifiedDate":"2021-08-31"},{"lineNumber":66,"author":{"gitId":"thanwinnikki"},"content":"        jvmTarget \u003d \"1.8\"","lastModifiedDate":"2021-08-31"},{"lineNumber":67,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":68,"author":{"gitId":"thanwinnikki"},"content":"}","lastModifiedDate":"2021-08-31"},{"lineNumber":69,"author":{"gitId":"thanwinnikki"},"content":"compileTestKotlin {","lastModifiedDate":"2021-08-31"},{"lineNumber":70,"author":{"gitId":"thanwinnikki"},"content":"    kotlinOptions {","lastModifiedDate":"2021-08-31"},{"lineNumber":71,"author":{"gitId":"thanwinnikki"},"content":"        jvmTarget \u003d \"1.8\"","lastModifiedDate":"2021-08-31"},{"lineNumber":72,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":73,"author":{"gitId":"thanwinnikki"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"thanwinnikki":28,"-":45}},{"path":"src/main/java/duke/DeadLine.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"thanwinnikki"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"thanwinnikki"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"thanwinnikki"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"thanwinnikki"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"thanwinnikki"},"content":" * Represents a Deadline task.","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"thanwinnikki"},"content":" * @author Nikki","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"thanwinnikki"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"thanwinnikki"},"content":"public class DeadLine extends Task {","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"thanwinnikki"},"content":"    static final String DONE \u003d \"[D][X] \";","lastModifiedDate":"2021-09-07"},{"lineNumber":13,"author":{"gitId":"thanwinnikki"},"content":"    static final String NOT_DONE \u003d \"[D][ ] \";","lastModifiedDate":"2021-09-07"},{"lineNumber":14,"author":{"gitId":"thanwinnikki"},"content":"    private String deadLine;","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"thanwinnikki"},"content":"    private LocalDateTime dateTime;","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"thanwinnikki"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"thanwinnikki"},"content":"     * Creates a Deadline task object.","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"thanwinnikki"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"thanwinnikki"},"content":"     * @param task Name of the task.","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"thanwinnikki"},"content":"     * @param deadLine Deadline of the task.","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"thanwinnikki"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"thanwinnikki"},"content":"    public DeadLine(String task, String deadLine) {","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"thanwinnikki"},"content":"        super(task);","lastModifiedDate":"2021-08-18"},{"lineNumber":25,"author":{"gitId":"thanwinnikki"},"content":"        this.deadLine \u003d deadLine;","lastModifiedDate":"2021-08-18"},{"lineNumber":26,"author":{"gitId":"thanwinnikki"},"content":"        timeFormatter(deadLine);","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"thanwinnikki"},"content":"    private void timeFormatter(String timeInput) {","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"thanwinnikki"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d/MM/yyyy HHmm\");","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"thanwinnikki"},"content":"        dateTime \u003d LocalDateTime.parse(timeInput, formatter);","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"thanwinnikki"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"thanwinnikki"},"content":"     * Returns a String with a different date and time format than user input.","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"thanwinnikki"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"thanwinnikki"},"content":"     * @return String representation of date and time after format change.","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"thanwinnikki"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"thanwinnikki"},"content":"    public String formatChanger() {","lastModifiedDate":"2021-08-30"},{"lineNumber":40,"author":{"gitId":"thanwinnikki"},"content":"        DateTimeFormatter dateFormat \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy\");","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"thanwinnikki"},"content":"        DateTimeFormatter timeFormatter \u003d DateTimeFormatter.ofPattern(\"h.mm a\");","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"thanwinnikki"},"content":"        return dateFormat.format(dateTime) + \", \" + timeFormatter.format(dateTime);","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":44,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":45,"author":{"gitId":"thanwinnikki"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"thanwinnikki"},"content":"     * Returns a String representation of a Deadline task.","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"thanwinnikki"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"thanwinnikki"},"content":"     * @return String representation of this Deadline task.","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"thanwinnikki"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"thanwinnikki"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":51,"author":{"gitId":"thanwinnikki"},"content":"    public String printTask() {","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"thanwinnikki"},"content":"        String result \u003d \"\";","lastModifiedDate":"2021-08-18"},{"lineNumber":53,"author":{"gitId":"thanwinnikki"},"content":"        if (taskComplete) {","lastModifiedDate":"2021-09-07"},{"lineNumber":54,"author":{"gitId":"thanwinnikki"},"content":"            result \u003d DONE;","lastModifiedDate":"2021-09-07"},{"lineNumber":55,"author":{"gitId":"thanwinnikki"},"content":"        } else {","lastModifiedDate":"2021-08-18"},{"lineNumber":56,"author":{"gitId":"thanwinnikki"},"content":"            result \u003d NOT_DONE;","lastModifiedDate":"2021-09-07"},{"lineNumber":57,"author":{"gitId":"thanwinnikki"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":58,"author":{"gitId":"thanwinnikki"},"content":"        return result + task + \" (by: \" + formatChanger() + \")\";","lastModifiedDate":"2021-09-07"},{"lineNumber":59,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":60,"author":{"gitId":"thanwinnikki"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"thanwinnikki":60}},{"path":"src/main/java/duke/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"thanwinnikki"},"content":"package duke;","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"thanwinnikki"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"thanwinnikki"},"content":"import java.util.Collections;","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"thanwinnikki"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"thanwinnikki"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"thanwinnikki"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"thanwinnikki"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"thanwinnikki"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"thanwinnikki"},"content":"import javafx.scene.Node;","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"thanwinnikki"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"thanwinnikki"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"thanwinnikki"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"thanwinnikki"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"thanwinnikki"},"content":"/**","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"thanwinnikki"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"thanwinnikki"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"thanwinnikki"},"content":" * containing text from the speaker.","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"thanwinnikki"},"content":" */","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"thanwinnikki"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"thanwinnikki"},"content":"    @FXML","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"thanwinnikki"},"content":"    private Label dialog;","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"thanwinnikki"},"content":"    @FXML","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"thanwinnikki"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"thanwinnikki"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"thanwinnikki"},"content":"        try {","lastModifiedDate":"2021-08-31"},{"lineNumber":30,"author":{"gitId":"thanwinnikki"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2021-08-31"},{"lineNumber":31,"author":{"gitId":"thanwinnikki"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2021-08-31"},{"lineNumber":32,"author":{"gitId":"thanwinnikki"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2021-08-31"},{"lineNumber":33,"author":{"gitId":"thanwinnikki"},"content":"            fxmlLoader.load();","lastModifiedDate":"2021-08-31"},{"lineNumber":34,"author":{"gitId":"thanwinnikki"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-31"},{"lineNumber":35,"author":{"gitId":"thanwinnikki"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-31"},{"lineNumber":36,"author":{"gitId":"thanwinnikki"},"content":"        }","lastModifiedDate":"2021-08-31"},{"lineNumber":37,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":38,"author":{"gitId":"thanwinnikki"},"content":"        dialog.setText(text);","lastModifiedDate":"2021-08-31"},{"lineNumber":39,"author":{"gitId":"thanwinnikki"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2021-08-31"},{"lineNumber":40,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":41,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":42,"author":{"gitId":"thanwinnikki"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":43,"author":{"gitId":"thanwinnikki"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2021-08-31"},{"lineNumber":44,"author":{"gitId":"thanwinnikki"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":45,"author":{"gitId":"thanwinnikki"},"content":"    private void flip() {","lastModifiedDate":"2021-08-31"},{"lineNumber":46,"author":{"gitId":"thanwinnikki"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2021-08-31"},{"lineNumber":47,"author":{"gitId":"thanwinnikki"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2021-08-31"},{"lineNumber":48,"author":{"gitId":"thanwinnikki"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2021-08-31"},{"lineNumber":49,"author":{"gitId":"thanwinnikki"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2021-08-31"},{"lineNumber":50,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":51,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":52,"author":{"gitId":"thanwinnikki"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2021-08-31"},{"lineNumber":53,"author":{"gitId":"thanwinnikki"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2021-08-31"},{"lineNumber":54,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":55,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":56,"author":{"gitId":"thanwinnikki"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2021-08-31"},{"lineNumber":57,"author":{"gitId":"thanwinnikki"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2021-08-31"},{"lineNumber":58,"author":{"gitId":"thanwinnikki"},"content":"        db.flip();","lastModifiedDate":"2021-08-31"},{"lineNumber":59,"author":{"gitId":"thanwinnikki"},"content":"        return db;","lastModifiedDate":"2021-08-31"},{"lineNumber":60,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":61,"author":{"gitId":"thanwinnikki"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"thanwinnikki":61}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"thanwinnikki"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"thanwinnikki"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"thanwinnikki"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"thanwinnikki"},"content":" * Represents a chat bot assistant to keep track of tasks.","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"thanwinnikki"},"content":" * @author Nikki","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"thanwinnikki"},"content":" * @version 0.1","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"thanwinnikki"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":11,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":12,"author":{"gitId":"thanwinnikki"},"content":"    private Storage storage;","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"thanwinnikki"},"content":"    private TaskList taskList;","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"thanwinnikki"},"content":"    private Ui ui;","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"thanwinnikki"},"content":"    private Parser parser;","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"thanwinnikki"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"thanwinnikki"},"content":"     * Creates Duke Chat Bot instance.","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"thanwinnikki"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"thanwinnikki"},"content":"    public Duke() {","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"thanwinnikki"},"content":"        storage \u003d new Storage();","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"thanwinnikki"},"content":"        ArrayList\u003cTask\u003e readList \u003d storage.fileReader();","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"thanwinnikki"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"thanwinnikki"},"content":"        taskList \u003d new TaskList(readList, ui);","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"thanwinnikki"},"content":"        parser \u003d new Parser(ui, storage);","lastModifiedDate":"2021-09-07"},{"lineNumber":26,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"thanwinnikki"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"thanwinnikki"},"content":"     * Generates duke response for any user input.","lastModifiedDate":"2021-08-31"},{"lineNumber":30,"author":{"gitId":"thanwinnikki"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":31,"author":{"gitId":"thanwinnikki"},"content":"     * @param input User input.","lastModifiedDate":"2021-08-31"},{"lineNumber":32,"author":{"gitId":"thanwinnikki"},"content":"     * @return","lastModifiedDate":"2021-08-31"},{"lineNumber":33,"author":{"gitId":"thanwinnikki"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"thanwinnikki"},"content":"    public String getResponse(String input) throws InputError {","lastModifiedDate":"2021-08-31"},{"lineNumber":35,"author":{"gitId":"thanwinnikki"},"content":"        int caseNum \u003d parser.caseChecker(input);","lastModifiedDate":"2021-08-31"},{"lineNumber":36,"author":{"gitId":"thanwinnikki"},"content":"        return parser.caseHandler(caseNum, input, taskList);","lastModifiedDate":"2021-08-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"thanwinnikki":35,"-":3}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"thanwinnikki"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"thanwinnikki"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"thanwinnikki"},"content":" * Represents an Event task.","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"thanwinnikki"},"content":" * @author Nikki","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"thanwinnikki"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"thanwinnikki"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"thanwinnikki"},"content":"    static final String DONE \u003d \"[E][X] \";","lastModifiedDate":"2021-09-07"},{"lineNumber":9,"author":{"gitId":"thanwinnikki"},"content":"    static final String NOT_DONE \u003d \"[E][ ] \";","lastModifiedDate":"2021-09-07"},{"lineNumber":10,"author":{"gitId":"thanwinnikki"},"content":"    private String timing;","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"thanwinnikki"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"thanwinnikki"},"content":"     * Creates an Event task.","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"thanwinnikki"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"thanwinnikki"},"content":"     * @param task Name of the event.","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"thanwinnikki"},"content":"     * @param timing Duration of the event.","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"thanwinnikki"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"thanwinnikki"},"content":"    public Event(String task, String timing) {","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"thanwinnikki"},"content":"        super(task);","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"thanwinnikki"},"content":"        this.timing \u003d timing;","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"thanwinnikki"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"thanwinnikki"},"content":"     * Returns a String representation of an Event task.","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"thanwinnikki"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"thanwinnikki"},"content":"     * @return String representation of this Event task.","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"thanwinnikki"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"thanwinnikki"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":29,"author":{"gitId":"thanwinnikki"},"content":"    String printTask() {","lastModifiedDate":"2021-08-18"},{"lineNumber":30,"author":{"gitId":"thanwinnikki"},"content":"        String result \u003d \"\";","lastModifiedDate":"2021-08-18"},{"lineNumber":31,"author":{"gitId":"thanwinnikki"},"content":"        if (taskComplete) {","lastModifiedDate":"2021-09-07"},{"lineNumber":32,"author":{"gitId":"thanwinnikki"},"content":"            result \u003d DONE;","lastModifiedDate":"2021-09-07"},{"lineNumber":33,"author":{"gitId":"thanwinnikki"},"content":"        } else {","lastModifiedDate":"2021-08-18"},{"lineNumber":34,"author":{"gitId":"thanwinnikki"},"content":"            result \u003d NOT_DONE;","lastModifiedDate":"2021-09-07"},{"lineNumber":35,"author":{"gitId":"thanwinnikki"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":36,"author":{"gitId":"thanwinnikki"},"content":"        return result + task + \" (at: \" + this.timing + \")\";","lastModifiedDate":"2021-09-07"},{"lineNumber":37,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":38,"author":{"gitId":"thanwinnikki"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"thanwinnikki":38}},{"path":"src/main/java/duke/InputError.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"thanwinnikki"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"thanwinnikki"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"thanwinnikki"},"content":" * Custom Error when users enters an invalid input.","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"thanwinnikki"},"content":" * @author Nikki","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"thanwinnikki"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"thanwinnikki"},"content":"public class InputError extends Exception {","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"thanwinnikki"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"thanwinnikki"},"content":"     * Creates an InputError.","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"thanwinnikki"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"thanwinnikki"},"content":"     * @param errorMessage Error message of invalid input.","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"thanwinnikki"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"thanwinnikki"},"content":"    public InputError(String errorMessage) {","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"thanwinnikki"},"content":"        super(errorMessage);","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"thanwinnikki"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"thanwinnikki":17}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"thanwinnikki"},"content":"package duke;","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"thanwinnikki"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"thanwinnikki"},"content":"/**","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"thanwinnikki"},"content":" * A Launcher class to workaround classpath issues. args argument is ignored.","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"thanwinnikki"},"content":" */","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"thanwinnikki"},"content":"public class Launcher {","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"thanwinnikki"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"thanwinnikki"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"thanwinnikki"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"thanwinnikki":12}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"thanwinnikki"},"content":"package duke;","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"thanwinnikki"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"thanwinnikki"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"thanwinnikki"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"thanwinnikki"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"thanwinnikki"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"thanwinnikki"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"thanwinnikki"},"content":"/**","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"thanwinnikki"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"thanwinnikki"},"content":" */","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"thanwinnikki"},"content":"public class Main extends Application {","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"thanwinnikki"},"content":"    private Duke duke \u003d new Duke();","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"thanwinnikki"},"content":"    @Override","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"thanwinnikki"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"thanwinnikki"},"content":"        try {","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"thanwinnikki"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"thanwinnikki"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"thanwinnikki"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"thanwinnikki"},"content":"            stage.setScene(scene);","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"thanwinnikki"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"thanwinnikki"},"content":"            stage.show();","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"thanwinnikki"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"thanwinnikki"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"thanwinnikki"},"content":"        }","lastModifiedDate":"2021-08-31"},{"lineNumber":30,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":31,"author":{"gitId":"thanwinnikki"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"thanwinnikki":31}},{"path":"src/main/java/duke/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"thanwinnikki"},"content":"package duke;","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"thanwinnikki"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"thanwinnikki"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"thanwinnikki"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"thanwinnikki"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"thanwinnikki"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"thanwinnikki"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"thanwinnikki"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"thanwinnikki"},"content":"/**","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"thanwinnikki"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"thanwinnikki"},"content":" */","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"thanwinnikki"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"thanwinnikki"},"content":"    @FXML","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"thanwinnikki"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"thanwinnikki"},"content":"    @FXML","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"thanwinnikki"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"thanwinnikki"},"content":"    @FXML","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"thanwinnikki"},"content":"    private TextField userInput;","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"thanwinnikki"},"content":"    @FXML","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"thanwinnikki"},"content":"    private Button sendButton;","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"thanwinnikki"},"content":"    private Duke duke;","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"thanwinnikki"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"thanwinnikki"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"thanwinnikki"},"content":"    @FXML","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"thanwinnikki"},"content":"    public void initialize() {","lastModifiedDate":"2021-08-31"},{"lineNumber":30,"author":{"gitId":"thanwinnikki"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2021-08-31"},{"lineNumber":31,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":32,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":33,"author":{"gitId":"thanwinnikki"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2021-08-31"},{"lineNumber":34,"author":{"gitId":"thanwinnikki"},"content":"        duke \u003d d;","lastModifiedDate":"2021-08-31"},{"lineNumber":35,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":36,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":37,"author":{"gitId":"thanwinnikki"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":38,"author":{"gitId":"thanwinnikki"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2021-08-31"},{"lineNumber":39,"author":{"gitId":"thanwinnikki"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2021-08-31"},{"lineNumber":40,"author":{"gitId":"thanwinnikki"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":41,"author":{"gitId":"thanwinnikki"},"content":"    @FXML","lastModifiedDate":"2021-08-31"},{"lineNumber":42,"author":{"gitId":"thanwinnikki"},"content":"    private void handleUserInput() throws InputError {","lastModifiedDate":"2021-08-31"},{"lineNumber":43,"author":{"gitId":"thanwinnikki"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2021-08-31"},{"lineNumber":44,"author":{"gitId":"thanwinnikki"},"content":"        String response \u003d duke.getResponse(input);","lastModifiedDate":"2021-08-31"},{"lineNumber":45,"author":{"gitId":"thanwinnikki"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2021-08-31"},{"lineNumber":46,"author":{"gitId":"thanwinnikki"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2021-08-31"},{"lineNumber":47,"author":{"gitId":"thanwinnikki"},"content":"                DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2021-08-31"},{"lineNumber":48,"author":{"gitId":"thanwinnikki"},"content":"        );","lastModifiedDate":"2021-08-31"},{"lineNumber":49,"author":{"gitId":"thanwinnikki"},"content":"        userInput.clear();","lastModifiedDate":"2021-08-31"},{"lineNumber":50,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":51,"author":{"gitId":"thanwinnikki"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"thanwinnikki":51}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"thanwinnikki"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"thanwinnikki"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"thanwinnikki"},"content":"import javafx.application.Platform;","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"thanwinnikki"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"thanwinnikki"},"content":"@SuppressWarnings(\"checkstyle:Regexp\")","lastModifiedDate":"2021-09-07"},{"lineNumber":8,"author":{"gitId":"thanwinnikki"},"content":"public class Parser extends Application {","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"thanwinnikki"},"content":"    static final int BYE_LENGTH \u003d 3;","lastModifiedDate":"2021-09-07"},{"lineNumber":11,"author":{"gitId":"thanwinnikki"},"content":"    static final int LIST_LENGTH \u003d 4;","lastModifiedDate":"2021-09-07"},{"lineNumber":12,"author":{"gitId":"thanwinnikki"},"content":"    static final int DONE_LENGTH \u003d 4;","lastModifiedDate":"2021-09-07"},{"lineNumber":13,"author":{"gitId":"thanwinnikki"},"content":"    static final int TODO_LENGTH \u003d 4;","lastModifiedDate":"2021-09-07"},{"lineNumber":14,"author":{"gitId":"thanwinnikki"},"content":"    static final int DEADLINE_LENGTH \u003d 8;","lastModifiedDate":"2021-09-07"},{"lineNumber":15,"author":{"gitId":"thanwinnikki"},"content":"    static final int EVENT_LENGTH \u003d 5;","lastModifiedDate":"2021-09-07"},{"lineNumber":16,"author":{"gitId":"thanwinnikki"},"content":"    static final int DELETE_LENGTH \u003d 6;","lastModifiedDate":"2021-09-07"},{"lineNumber":17,"author":{"gitId":"thanwinnikki"},"content":"    static final int FIND_LENGTH \u003d 4;","lastModifiedDate":"2021-09-07"},{"lineNumber":18,"author":{"gitId":"thanwinnikki"},"content":"    static final int HELP_LENGTH \u003d 4;","lastModifiedDate":"2021-09-07"},{"lineNumber":19,"author":{"gitId":"thanwinnikki"},"content":"    static final int INVALID_INPUT \u003d 0;","lastModifiedDate":"2021-09-07"},{"lineNumber":20,"author":{"gitId":"thanwinnikki"},"content":"    static final int BYE_INPUT \u003d 1;","lastModifiedDate":"2021-09-07"},{"lineNumber":21,"author":{"gitId":"thanwinnikki"},"content":"    static final int LIST_INPUT \u003d 2;","lastModifiedDate":"2021-09-07"},{"lineNumber":22,"author":{"gitId":"thanwinnikki"},"content":"    static final int DONE_INPUT \u003d 3;","lastModifiedDate":"2021-09-07"},{"lineNumber":23,"author":{"gitId":"thanwinnikki"},"content":"    static final int TODO_INPUT \u003d 4;","lastModifiedDate":"2021-09-07"},{"lineNumber":24,"author":{"gitId":"thanwinnikki"},"content":"    static final int DEADLINE_INPUT \u003d 5;","lastModifiedDate":"2021-09-07"},{"lineNumber":25,"author":{"gitId":"thanwinnikki"},"content":"    static final int EVENT_INPUT \u003d 6;","lastModifiedDate":"2021-09-07"},{"lineNumber":26,"author":{"gitId":"thanwinnikki"},"content":"    static final int DELETE_INPUT \u003d 7;","lastModifiedDate":"2021-09-07"},{"lineNumber":27,"author":{"gitId":"thanwinnikki"},"content":"    static final int FIND_INPUT \u003d 8;","lastModifiedDate":"2021-09-07"},{"lineNumber":28,"author":{"gitId":"thanwinnikki"},"content":"    static final int HELP_INPUT \u003d 9;","lastModifiedDate":"2021-09-07"},{"lineNumber":29,"author":{"gitId":"thanwinnikki"},"content":"    private final Ui ui;","lastModifiedDate":"2021-09-07"},{"lineNumber":30,"author":{"gitId":"thanwinnikki"},"content":"    private final Storage storage;","lastModifiedDate":"2021-09-07"},{"lineNumber":31,"author":{"gitId":"thanwinnikki"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"thanwinnikki"},"content":"     * Creates a Parser that processes the user\u0027s inputs.","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"thanwinnikki"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"thanwinnikki"},"content":"     * @param ui Ui object which interacts with the users.","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"thanwinnikki"},"content":"     * @param storage Storage object which saves and retrieves files.","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"thanwinnikki"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"thanwinnikki"},"content":"    public Parser(Ui ui, Storage storage) {","lastModifiedDate":"2021-09-07"},{"lineNumber":38,"author":{"gitId":"thanwinnikki"},"content":"        this.ui \u003d ui;","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"thanwinnikki"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"thanwinnikki"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"thanwinnikki"},"content":"     * Checks whether user input is a bye command.","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"thanwinnikki"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"thanwinnikki"},"content":"     * @param str User input.","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"thanwinnikki"},"content":"     * @return True if bye command. False if not bye command.","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"thanwinnikki"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"thanwinnikki"},"content":"    private boolean byeChecker(String str) {","lastModifiedDate":"2021-08-30"},{"lineNumber":49,"author":{"gitId":"thanwinnikki"},"content":"        boolean isBye \u003d false;","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"thanwinnikki"},"content":"        if (str.length() \u003d\u003d BYE_LENGTH) {","lastModifiedDate":"2021-09-07"},{"lineNumber":51,"author":{"gitId":"thanwinnikki"},"content":"            isBye \u003d str.startsWith(\"bye\");","lastModifiedDate":"2021-09-07"},{"lineNumber":52,"author":{"gitId":"thanwinnikki"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"thanwinnikki"},"content":"        return isBye;","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"thanwinnikki"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":57,"author":{"gitId":"thanwinnikki"},"content":"     * Checks whether user input is a list command.","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"thanwinnikki"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"thanwinnikki"},"content":"     * @param str User input.","lastModifiedDate":"2021-08-24"},{"lineNumber":60,"author":{"gitId":"thanwinnikki"},"content":"     * @return True if list command. False if not list command.","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"thanwinnikki"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"thanwinnikki"},"content":"    private boolean listChecker(String str) {","lastModifiedDate":"2021-08-30"},{"lineNumber":63,"author":{"gitId":"thanwinnikki"},"content":"        boolean isList \u003d false;","lastModifiedDate":"2021-08-24"},{"lineNumber":64,"author":{"gitId":"thanwinnikki"},"content":"        if (str.length() \u003d\u003d LIST_LENGTH) {","lastModifiedDate":"2021-09-07"},{"lineNumber":65,"author":{"gitId":"thanwinnikki"},"content":"            isList \u003d str.startsWith(\"list\");","lastModifiedDate":"2021-09-07"},{"lineNumber":66,"author":{"gitId":"thanwinnikki"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":67,"author":{"gitId":"thanwinnikki"},"content":"        return isList;","lastModifiedDate":"2021-08-24"},{"lineNumber":68,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":69,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":70,"author":{"gitId":"thanwinnikki"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":71,"author":{"gitId":"thanwinnikki"},"content":"     * Checks whether user input is a check command.","lastModifiedDate":"2021-08-24"},{"lineNumber":72,"author":{"gitId":"thanwinnikki"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":73,"author":{"gitId":"thanwinnikki"},"content":"     * @param str User input.","lastModifiedDate":"2021-08-24"},{"lineNumber":74,"author":{"gitId":"thanwinnikki"},"content":"     * @return True if check command. False if not check command.","lastModifiedDate":"2021-08-24"},{"lineNumber":75,"author":{"gitId":"thanwinnikki"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":76,"author":{"gitId":"thanwinnikki"},"content":"    private boolean doneChecker(String str) {","lastModifiedDate":"2021-08-30"},{"lineNumber":77,"author":{"gitId":"thanwinnikki"},"content":"        boolean isDone \u003d false;","lastModifiedDate":"2021-08-24"},{"lineNumber":78,"author":{"gitId":"thanwinnikki"},"content":"        if (str.length() \u003e\u003d DONE_LENGTH) {","lastModifiedDate":"2021-09-07"},{"lineNumber":79,"author":{"gitId":"thanwinnikki"},"content":"            isDone \u003d str.startsWith(\"done\");","lastModifiedDate":"2021-09-07"},{"lineNumber":80,"author":{"gitId":"thanwinnikki"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":81,"author":{"gitId":"thanwinnikki"},"content":"        return isDone;","lastModifiedDate":"2021-08-24"},{"lineNumber":82,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":83,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":84,"author":{"gitId":"thanwinnikki"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":85,"author":{"gitId":"thanwinnikki"},"content":"     * Checks whether user input is a To Do command.","lastModifiedDate":"2021-08-24"},{"lineNumber":86,"author":{"gitId":"thanwinnikki"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":87,"author":{"gitId":"thanwinnikki"},"content":"     * @param str User input.","lastModifiedDate":"2021-08-24"},{"lineNumber":88,"author":{"gitId":"thanwinnikki"},"content":"     * @return True if To Do command. False if not To Do command.","lastModifiedDate":"2021-08-24"},{"lineNumber":89,"author":{"gitId":"thanwinnikki"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":90,"author":{"gitId":"thanwinnikki"},"content":"    private boolean todoChecker(String str) {","lastModifiedDate":"2021-08-30"},{"lineNumber":91,"author":{"gitId":"thanwinnikki"},"content":"        boolean isTodo \u003d false;","lastModifiedDate":"2021-08-24"},{"lineNumber":92,"author":{"gitId":"thanwinnikki"},"content":"        if (str.length() \u003e\u003d TODO_LENGTH) {","lastModifiedDate":"2021-09-07"},{"lineNumber":93,"author":{"gitId":"thanwinnikki"},"content":"            isTodo \u003d str.startsWith(\"todo\");","lastModifiedDate":"2021-09-07"},{"lineNumber":94,"author":{"gitId":"thanwinnikki"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":95,"author":{"gitId":"thanwinnikki"},"content":"        return isTodo;","lastModifiedDate":"2021-08-24"},{"lineNumber":96,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":97,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":98,"author":{"gitId":"thanwinnikki"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":99,"author":{"gitId":"thanwinnikki"},"content":"     * Checks whether user input is a Deadline command.","lastModifiedDate":"2021-08-24"},{"lineNumber":100,"author":{"gitId":"thanwinnikki"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":101,"author":{"gitId":"thanwinnikki"},"content":"     * @param str User input.","lastModifiedDate":"2021-08-24"},{"lineNumber":102,"author":{"gitId":"thanwinnikki"},"content":"     * @return True if Deadline command. False if not Deadline command.","lastModifiedDate":"2021-08-24"},{"lineNumber":103,"author":{"gitId":"thanwinnikki"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":104,"author":{"gitId":"thanwinnikki"},"content":"    private boolean deadlineChecker(String str) {","lastModifiedDate":"2021-08-30"},{"lineNumber":105,"author":{"gitId":"thanwinnikki"},"content":"        boolean isDeadLine \u003d false;","lastModifiedDate":"2021-08-24"},{"lineNumber":106,"author":{"gitId":"thanwinnikki"},"content":"        if (str.length() \u003e\u003d DEADLINE_LENGTH) {","lastModifiedDate":"2021-09-07"},{"lineNumber":107,"author":{"gitId":"thanwinnikki"},"content":"            isDeadLine \u003d str.startsWith(\"deadline\");","lastModifiedDate":"2021-09-07"},{"lineNumber":108,"author":{"gitId":"thanwinnikki"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":109,"author":{"gitId":"thanwinnikki"},"content":"        return isDeadLine;","lastModifiedDate":"2021-08-24"},{"lineNumber":110,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":111,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":112,"author":{"gitId":"thanwinnikki"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":113,"author":{"gitId":"thanwinnikki"},"content":"     * Checks whether user input is a Event command.","lastModifiedDate":"2021-08-24"},{"lineNumber":114,"author":{"gitId":"thanwinnikki"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":115,"author":{"gitId":"thanwinnikki"},"content":"     * @param str User input.","lastModifiedDate":"2021-08-24"},{"lineNumber":116,"author":{"gitId":"thanwinnikki"},"content":"     * @return True if Event command. False if not Event command.","lastModifiedDate":"2021-08-24"},{"lineNumber":117,"author":{"gitId":"thanwinnikki"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":118,"author":{"gitId":"thanwinnikki"},"content":"    private boolean eventChecker(String str) {","lastModifiedDate":"2021-08-30"},{"lineNumber":119,"author":{"gitId":"thanwinnikki"},"content":"        boolean isEvent \u003d false;","lastModifiedDate":"2021-08-24"},{"lineNumber":120,"author":{"gitId":"thanwinnikki"},"content":"        if (str.length() \u003e\u003d EVENT_LENGTH) {","lastModifiedDate":"2021-09-07"},{"lineNumber":121,"author":{"gitId":"thanwinnikki"},"content":"            isEvent \u003d str.startsWith(\"event\");","lastModifiedDate":"2021-09-07"},{"lineNumber":122,"author":{"gitId":"thanwinnikki"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":123,"author":{"gitId":"thanwinnikki"},"content":"        return isEvent;","lastModifiedDate":"2021-08-24"},{"lineNumber":124,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":125,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":126,"author":{"gitId":"thanwinnikki"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":127,"author":{"gitId":"thanwinnikki"},"content":"     * Checks whether user input is a delete command.","lastModifiedDate":"2021-08-24"},{"lineNumber":128,"author":{"gitId":"thanwinnikki"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":129,"author":{"gitId":"thanwinnikki"},"content":"     * @param str User input.","lastModifiedDate":"2021-08-24"},{"lineNumber":130,"author":{"gitId":"thanwinnikki"},"content":"     * @return True if delete command. False if not delete command.","lastModifiedDate":"2021-08-24"},{"lineNumber":131,"author":{"gitId":"thanwinnikki"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":132,"author":{"gitId":"thanwinnikki"},"content":"    private boolean deleteChecker(String str) {","lastModifiedDate":"2021-08-30"},{"lineNumber":133,"author":{"gitId":"thanwinnikki"},"content":"        boolean isDelete \u003d false;","lastModifiedDate":"2021-08-24"},{"lineNumber":134,"author":{"gitId":"thanwinnikki"},"content":"        if (str.length() \u003e\u003d DELETE_LENGTH) {","lastModifiedDate":"2021-09-07"},{"lineNumber":135,"author":{"gitId":"thanwinnikki"},"content":"            isDelete \u003d str.startsWith(\"delete\");","lastModifiedDate":"2021-09-07"},{"lineNumber":136,"author":{"gitId":"thanwinnikki"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":137,"author":{"gitId":"thanwinnikki"},"content":"        return isDelete;","lastModifiedDate":"2021-08-24"},{"lineNumber":138,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":139,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":140,"author":{"gitId":"thanwinnikki"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":141,"author":{"gitId":"thanwinnikki"},"content":"     * Checks whether user input is a delete command.","lastModifiedDate":"2021-09-07"},{"lineNumber":142,"author":{"gitId":"thanwinnikki"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":143,"author":{"gitId":"thanwinnikki"},"content":"     * @param str User input.","lastModifiedDate":"2021-09-07"},{"lineNumber":144,"author":{"gitId":"thanwinnikki"},"content":"     * @return True if delete command. False if not delete command.","lastModifiedDate":"2021-09-07"},{"lineNumber":145,"author":{"gitId":"thanwinnikki"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":146,"author":{"gitId":"thanwinnikki"},"content":"    private boolean findChecker(String str) {","lastModifiedDate":"2021-08-30"},{"lineNumber":147,"author":{"gitId":"thanwinnikki"},"content":"        boolean isFind \u003d false;","lastModifiedDate":"2021-08-24"},{"lineNumber":148,"author":{"gitId":"thanwinnikki"},"content":"        if (str.length() \u003e\u003d FIND_LENGTH) {","lastModifiedDate":"2021-09-07"},{"lineNumber":149,"author":{"gitId":"thanwinnikki"},"content":"            isFind \u003d str.startsWith(\"find\");","lastModifiedDate":"2021-09-07"},{"lineNumber":150,"author":{"gitId":"thanwinnikki"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":151,"author":{"gitId":"thanwinnikki"},"content":"        return isFind;","lastModifiedDate":"2021-08-24"},{"lineNumber":152,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":153,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":154,"author":{"gitId":"thanwinnikki"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":155,"author":{"gitId":"thanwinnikki"},"content":"     * Checks whether user input is a delete command.","lastModifiedDate":"2021-09-07"},{"lineNumber":156,"author":{"gitId":"thanwinnikki"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":157,"author":{"gitId":"thanwinnikki"},"content":"     * @param str User input.","lastModifiedDate":"2021-09-07"},{"lineNumber":158,"author":{"gitId":"thanwinnikki"},"content":"     * @return True if delete command. False if not delete command.","lastModifiedDate":"2021-09-07"},{"lineNumber":159,"author":{"gitId":"thanwinnikki"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":160,"author":{"gitId":"thanwinnikki"},"content":"    private boolean helpChecker(String str) {","lastModifiedDate":"2021-09-07"},{"lineNumber":161,"author":{"gitId":"thanwinnikki"},"content":"        boolean isHelp \u003d false;","lastModifiedDate":"2021-09-07"},{"lineNumber":162,"author":{"gitId":"thanwinnikki"},"content":"        if (str.length() \u003e\u003d HELP_LENGTH) {","lastModifiedDate":"2021-09-07"},{"lineNumber":163,"author":{"gitId":"thanwinnikki"},"content":"            isHelp \u003d str.startsWith(\"help\");","lastModifiedDate":"2021-09-07"},{"lineNumber":164,"author":{"gitId":"thanwinnikki"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":165,"author":{"gitId":"thanwinnikki"},"content":"        return isHelp;","lastModifiedDate":"2021-09-07"},{"lineNumber":166,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":167,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":168,"author":{"gitId":"thanwinnikki"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":169,"author":{"gitId":"thanwinnikki"},"content":"     * Checks what command is the user input.","lastModifiedDate":"2021-08-24"},{"lineNumber":170,"author":{"gitId":"thanwinnikki"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":171,"author":{"gitId":"thanwinnikki"},"content":"     * @param input User input.","lastModifiedDate":"2021-08-24"},{"lineNumber":172,"author":{"gitId":"thanwinnikki"},"content":"     * @return Case number of command.","lastModifiedDate":"2021-08-24"},{"lineNumber":173,"author":{"gitId":"thanwinnikki"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":174,"author":{"gitId":"thanwinnikki"},"content":"    public int caseChecker(String input) {","lastModifiedDate":"2021-08-30"},{"lineNumber":175,"author":{"gitId":"thanwinnikki"},"content":"        int caseNum \u003d INVALID_INPUT;","lastModifiedDate":"2021-09-07"},{"lineNumber":176,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":177,"author":{"gitId":"thanwinnikki"},"content":"        if (byeChecker(input)) {","lastModifiedDate":"2021-08-30"},{"lineNumber":178,"author":{"gitId":"thanwinnikki"},"content":"            caseNum \u003d BYE_INPUT;","lastModifiedDate":"2021-09-07"},{"lineNumber":179,"author":{"gitId":"thanwinnikki"},"content":"        } else if (listChecker(input)) {","lastModifiedDate":"2021-08-30"},{"lineNumber":180,"author":{"gitId":"thanwinnikki"},"content":"            caseNum \u003d LIST_INPUT;","lastModifiedDate":"2021-09-07"},{"lineNumber":181,"author":{"gitId":"thanwinnikki"},"content":"        } else if (doneChecker(input)) {","lastModifiedDate":"2021-08-30"},{"lineNumber":182,"author":{"gitId":"thanwinnikki"},"content":"            caseNum \u003d DONE_INPUT;","lastModifiedDate":"2021-09-07"},{"lineNumber":183,"author":{"gitId":"thanwinnikki"},"content":"        } else if (todoChecker(input)) {","lastModifiedDate":"2021-08-30"},{"lineNumber":184,"author":{"gitId":"thanwinnikki"},"content":"            caseNum \u003d TODO_INPUT;","lastModifiedDate":"2021-09-07"},{"lineNumber":185,"author":{"gitId":"thanwinnikki"},"content":"        } else if (deadlineChecker(input)) {","lastModifiedDate":"2021-08-30"},{"lineNumber":186,"author":{"gitId":"thanwinnikki"},"content":"            caseNum \u003d DEADLINE_INPUT;","lastModifiedDate":"2021-09-07"},{"lineNumber":187,"author":{"gitId":"thanwinnikki"},"content":"        } else if (eventChecker(input)) {","lastModifiedDate":"2021-08-30"},{"lineNumber":188,"author":{"gitId":"thanwinnikki"},"content":"            caseNum \u003d EVENT_INPUT;","lastModifiedDate":"2021-09-07"},{"lineNumber":189,"author":{"gitId":"thanwinnikki"},"content":"        } else if (deleteChecker(input)) {","lastModifiedDate":"2021-08-30"},{"lineNumber":190,"author":{"gitId":"thanwinnikki"},"content":"            caseNum \u003d DELETE_INPUT;","lastModifiedDate":"2021-09-07"},{"lineNumber":191,"author":{"gitId":"thanwinnikki"},"content":"        } else if (findChecker(input)) {","lastModifiedDate":"2021-08-30"},{"lineNumber":192,"author":{"gitId":"thanwinnikki"},"content":"            caseNum \u003d FIND_INPUT;","lastModifiedDate":"2021-09-07"},{"lineNumber":193,"author":{"gitId":"thanwinnikki"},"content":"        } else if (helpChecker(input)) {","lastModifiedDate":"2021-09-07"},{"lineNumber":194,"author":{"gitId":"thanwinnikki"},"content":"            caseNum \u003d HELP_INPUT;","lastModifiedDate":"2021-09-07"},{"lineNumber":195,"author":{"gitId":"thanwinnikki"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":196,"author":{"gitId":"thanwinnikki"},"content":"        return caseNum;","lastModifiedDate":"2021-08-24"},{"lineNumber":197,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":198,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":199,"author":{"gitId":"thanwinnikki"},"content":"    private String listInput(TaskList taskList) throws InputError {","lastModifiedDate":"2021-08-31"},{"lineNumber":200,"author":{"gitId":"thanwinnikki"},"content":"        String response \u003d \"\";","lastModifiedDate":"2021-08-31"},{"lineNumber":201,"author":{"gitId":"thanwinnikki"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":202,"author":{"gitId":"thanwinnikki"},"content":"            if (taskList.size() \u003d\u003d 0) {","lastModifiedDate":"2021-08-24"},{"lineNumber":203,"author":{"gitId":"thanwinnikki"},"content":"                throw new InputError(\"No items in list\");","lastModifiedDate":"2021-08-24"},{"lineNumber":204,"author":{"gitId":"thanwinnikki"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":205,"author":{"gitId":"thanwinnikki"},"content":"            response \u003d taskList.printList();","lastModifiedDate":"2021-08-31"},{"lineNumber":206,"author":{"gitId":"thanwinnikki"},"content":"        } catch (InputError e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":207,"author":{"gitId":"thanwinnikki"},"content":"            response \u003d ui.errorMessage(e);","lastModifiedDate":"2021-08-31"},{"lineNumber":208,"author":{"gitId":"thanwinnikki"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":209,"author":{"gitId":"thanwinnikki"},"content":"        assert (response.length() !\u003d 0);","lastModifiedDate":"2021-09-07"},{"lineNumber":210,"author":{"gitId":"thanwinnikki"},"content":"        return response;","lastModifiedDate":"2021-08-31"},{"lineNumber":211,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":212,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":213,"author":{"gitId":"thanwinnikki"},"content":"    private String doneInput(String str, TaskList taskList) throws InputError {","lastModifiedDate":"2021-08-31"},{"lineNumber":214,"author":{"gitId":"thanwinnikki"},"content":"        String response \u003d \"\";","lastModifiedDate":"2021-08-31"},{"lineNumber":215,"author":{"gitId":"thanwinnikki"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":216,"author":{"gitId":"thanwinnikki"},"content":"            if (str.length() \u003d\u003d DONE_LENGTH) {","lastModifiedDate":"2021-09-07"},{"lineNumber":217,"author":{"gitId":"thanwinnikki"},"content":"                throw new InputError(\"No task indicated\");","lastModifiedDate":"2021-08-24"},{"lineNumber":218,"author":{"gitId":"thanwinnikki"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":219,"author":{"gitId":"thanwinnikki"},"content":"            int indexNum \u003d Integer.parseInt(str.replaceAll(\"[^0-9]\", \"\"));","lastModifiedDate":"2021-08-24"},{"lineNumber":220,"author":{"gitId":"thanwinnikki"},"content":"            if (indexNum \u003c\u003d 0 || indexNum \u003e taskList.size()) {","lastModifiedDate":"2021-09-07"},{"lineNumber":221,"author":{"gitId":"thanwinnikki"},"content":"                throw new InputError(\"Invalid Number\");","lastModifiedDate":"2021-09-07"},{"lineNumber":222,"author":{"gitId":"thanwinnikki"},"content":"            }","lastModifiedDate":"2021-09-07"},{"lineNumber":223,"author":{"gitId":"thanwinnikki"},"content":"            response \u003d taskList.doneTask(indexNum);","lastModifiedDate":"2021-09-07"},{"lineNumber":224,"author":{"gitId":"thanwinnikki"},"content":"        } catch (InputError e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":225,"author":{"gitId":"thanwinnikki"},"content":"            response \u003d ui.errorMessage(e);","lastModifiedDate":"2021-08-31"},{"lineNumber":226,"author":{"gitId":"thanwinnikki"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":227,"author":{"gitId":"thanwinnikki"},"content":"        assert (response.length() !\u003d 0);","lastModifiedDate":"2021-09-07"},{"lineNumber":228,"author":{"gitId":"thanwinnikki"},"content":"        return response;","lastModifiedDate":"2021-08-31"},{"lineNumber":229,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":230,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":231,"author":{"gitId":"thanwinnikki"},"content":"    private String findInput(String str, TaskList taskList) throws InputError {","lastModifiedDate":"2021-08-31"},{"lineNumber":232,"author":{"gitId":"thanwinnikki"},"content":"        String response \u003d \"\";","lastModifiedDate":"2021-08-31"},{"lineNumber":233,"author":{"gitId":"thanwinnikki"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":234,"author":{"gitId":"thanwinnikki"},"content":"            if (str.length() \u003d\u003d FIND_LENGTH) {","lastModifiedDate":"2021-09-07"},{"lineNumber":235,"author":{"gitId":"thanwinnikki"},"content":"                throw new InputError(\"No task indicated\");","lastModifiedDate":"2021-08-24"},{"lineNumber":236,"author":{"gitId":"thanwinnikki"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":237,"author":{"gitId":"thanwinnikki"},"content":"            String searchWord \u003d str.substring(FIND_LENGTH + 1);","lastModifiedDate":"2021-09-07"},{"lineNumber":238,"author":{"gitId":"thanwinnikki"},"content":"            TaskList foundList \u003d taskList.findTasks(searchWord);","lastModifiedDate":"2021-08-24"},{"lineNumber":239,"author":{"gitId":"thanwinnikki"},"content":"            if (foundList.currList().isEmpty()) {","lastModifiedDate":"2021-08-24"},{"lineNumber":240,"author":{"gitId":"thanwinnikki"},"content":"                throw new InputError(\"No such tasks found\");","lastModifiedDate":"2021-08-24"},{"lineNumber":241,"author":{"gitId":"thanwinnikki"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":242,"author":{"gitId":"thanwinnikki"},"content":"            response \u003d \"We found these for you boss:\\n\" + foundList.printList();","lastModifiedDate":"2021-08-31"},{"lineNumber":243,"author":{"gitId":"thanwinnikki"},"content":"        } catch (InputError e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":244,"author":{"gitId":"thanwinnikki"},"content":"            response \u003d ui.errorMessage(e);","lastModifiedDate":"2021-08-31"},{"lineNumber":245,"author":{"gitId":"thanwinnikki"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":246,"author":{"gitId":"thanwinnikki"},"content":"        assert (response.length() !\u003d 0);","lastModifiedDate":"2021-09-07"},{"lineNumber":247,"author":{"gitId":"thanwinnikki"},"content":"        return response;","lastModifiedDate":"2021-08-31"},{"lineNumber":248,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":249,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":250,"author":{"gitId":"thanwinnikki"},"content":"    private String todoInput(String str, TaskList taskList) throws InputError {","lastModifiedDate":"2021-08-31"},{"lineNumber":251,"author":{"gitId":"thanwinnikki"},"content":"        String response \u003d \"\";","lastModifiedDate":"2021-08-31"},{"lineNumber":252,"author":{"gitId":"thanwinnikki"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":253,"author":{"gitId":"thanwinnikki"},"content":"            if (str.length() \u003d\u003d TODO_LENGTH) {","lastModifiedDate":"2021-09-07"},{"lineNumber":254,"author":{"gitId":"thanwinnikki"},"content":"                throw new InputError(\"Description Please!\");","lastModifiedDate":"2021-08-24"},{"lineNumber":255,"author":{"gitId":"thanwinnikki"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":256,"author":{"gitId":"thanwinnikki"},"content":"            response \u003d taskList.addTodo(str);","lastModifiedDate":"2021-08-31"},{"lineNumber":257,"author":{"gitId":"thanwinnikki"},"content":"        } catch (InputError e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":258,"author":{"gitId":"thanwinnikki"},"content":"            response \u003d ui.errorMessage(e);","lastModifiedDate":"2021-08-31"},{"lineNumber":259,"author":{"gitId":"thanwinnikki"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":260,"author":{"gitId":"thanwinnikki"},"content":"        assert (response.length() !\u003d 0);","lastModifiedDate":"2021-09-07"},{"lineNumber":261,"author":{"gitId":"thanwinnikki"},"content":"        return response;","lastModifiedDate":"2021-08-31"},{"lineNumber":262,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":263,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":264,"author":{"gitId":"thanwinnikki"},"content":"    private String deadlineInput(String str, TaskList taskList) throws InputError {","lastModifiedDate":"2021-08-31"},{"lineNumber":265,"author":{"gitId":"thanwinnikki"},"content":"        String response \u003d \"\";","lastModifiedDate":"2021-08-31"},{"lineNumber":266,"author":{"gitId":"thanwinnikki"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":267,"author":{"gitId":"thanwinnikki"},"content":"            if (str.length() \u003d\u003d DEADLINE_LENGTH) {","lastModifiedDate":"2021-09-07"},{"lineNumber":268,"author":{"gitId":"thanwinnikki"},"content":"                throw new InputError(\"Description Please!\");","lastModifiedDate":"2021-08-24"},{"lineNumber":269,"author":{"gitId":"thanwinnikki"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":270,"author":{"gitId":"thanwinnikki"},"content":"            response \u003d taskList.addDeadline(str);","lastModifiedDate":"2021-08-31"},{"lineNumber":271,"author":{"gitId":"thanwinnikki"},"content":"        } catch (InputError e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":272,"author":{"gitId":"thanwinnikki"},"content":"            response \u003d ui.errorMessage(e);","lastModifiedDate":"2021-08-31"},{"lineNumber":273,"author":{"gitId":"thanwinnikki"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":274,"author":{"gitId":"thanwinnikki"},"content":"        assert (response.length() !\u003d 0);","lastModifiedDate":"2021-09-07"},{"lineNumber":275,"author":{"gitId":"thanwinnikki"},"content":"        return response;","lastModifiedDate":"2021-08-31"},{"lineNumber":276,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":277,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":278,"author":{"gitId":"thanwinnikki"},"content":"    private String eventInput(String str, TaskList taskList) throws InputError {","lastModifiedDate":"2021-08-31"},{"lineNumber":279,"author":{"gitId":"thanwinnikki"},"content":"        String response \u003d \"\";","lastModifiedDate":"2021-08-31"},{"lineNumber":280,"author":{"gitId":"thanwinnikki"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":281,"author":{"gitId":"thanwinnikki"},"content":"            if (str.length() \u003d\u003d EVENT_LENGTH) {","lastModifiedDate":"2021-09-07"},{"lineNumber":282,"author":{"gitId":"thanwinnikki"},"content":"                throw new InputError(\"Description Please!\");","lastModifiedDate":"2021-08-24"},{"lineNumber":283,"author":{"gitId":"thanwinnikki"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":284,"author":{"gitId":"thanwinnikki"},"content":"            response \u003d taskList.addEvent(str);","lastModifiedDate":"2021-08-31"},{"lineNumber":285,"author":{"gitId":"thanwinnikki"},"content":"        } catch (InputError e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":286,"author":{"gitId":"thanwinnikki"},"content":"            response \u003d ui.errorMessage(e);","lastModifiedDate":"2021-08-31"},{"lineNumber":287,"author":{"gitId":"thanwinnikki"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":288,"author":{"gitId":"thanwinnikki"},"content":"        assert (response.length() !\u003d 0);","lastModifiedDate":"2021-09-07"},{"lineNumber":289,"author":{"gitId":"thanwinnikki"},"content":"        return response;","lastModifiedDate":"2021-08-31"},{"lineNumber":290,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":291,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":292,"author":{"gitId":"thanwinnikki"},"content":"    private String deleteInput(String str, TaskList taskList) throws InputError {","lastModifiedDate":"2021-08-31"},{"lineNumber":293,"author":{"gitId":"thanwinnikki"},"content":"        String response \u003d \"\";","lastModifiedDate":"2021-08-31"},{"lineNumber":294,"author":{"gitId":"thanwinnikki"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":295,"author":{"gitId":"thanwinnikki"},"content":"            if (str.length() \u003d\u003d DELETE_LENGTH) {","lastModifiedDate":"2021-09-07"},{"lineNumber":296,"author":{"gitId":"thanwinnikki"},"content":"                throw new InputError(\"No Task to delete\");","lastModifiedDate":"2021-08-24"},{"lineNumber":297,"author":{"gitId":"thanwinnikki"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":298,"author":{"gitId":"thanwinnikki"},"content":"            int indexNum \u003d Integer.parseInt(str.replaceAll(\"[^0-9]\", \"\"));","lastModifiedDate":"2021-08-24"},{"lineNumber":299,"author":{"gitId":"thanwinnikki"},"content":"            if (indexNum \u003c\u003d 0 || indexNum \u003e taskList.size()) {","lastModifiedDate":"2021-09-07"},{"lineNumber":300,"author":{"gitId":"thanwinnikki"},"content":"                throw new InputError(\"Invalid Number!\");","lastModifiedDate":"2021-09-07"},{"lineNumber":301,"author":{"gitId":"thanwinnikki"},"content":"            }","lastModifiedDate":"2021-09-07"},{"lineNumber":302,"author":{"gitId":"thanwinnikki"},"content":"            response \u003d taskList.deleteTask(indexNum);","lastModifiedDate":"2021-09-07"},{"lineNumber":303,"author":{"gitId":"thanwinnikki"},"content":"        } catch (InputError e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":304,"author":{"gitId":"thanwinnikki"},"content":"            response \u003d ui.errorMessage(e);","lastModifiedDate":"2021-08-31"},{"lineNumber":305,"author":{"gitId":"thanwinnikki"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":306,"author":{"gitId":"thanwinnikki"},"content":"        assert (response.length() !\u003d 0);","lastModifiedDate":"2021-09-07"},{"lineNumber":307,"author":{"gitId":"thanwinnikki"},"content":"        return response;","lastModifiedDate":"2021-08-31"},{"lineNumber":308,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":309,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":310,"author":{"gitId":"thanwinnikki"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":311,"author":{"gitId":"thanwinnikki"},"content":"     * Returns the commands available for user if they need help.","lastModifiedDate":"2021-09-07"},{"lineNumber":312,"author":{"gitId":"thanwinnikki"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":313,"author":{"gitId":"thanwinnikki"},"content":"     * @return String message including all the commands available.","lastModifiedDate":"2021-09-07"},{"lineNumber":314,"author":{"gitId":"thanwinnikki"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":315,"author":{"gitId":"thanwinnikki"},"content":"    private String helpInput() {","lastModifiedDate":"2021-09-07"},{"lineNumber":316,"author":{"gitId":"thanwinnikki"},"content":"        String response;","lastModifiedDate":"2021-09-07"},{"lineNumber":317,"author":{"gitId":"thanwinnikki"},"content":"        response \u003d ui.helpMessage();","lastModifiedDate":"2021-09-07"},{"lineNumber":318,"author":{"gitId":"thanwinnikki"},"content":"        return response;","lastModifiedDate":"2021-09-07"},{"lineNumber":319,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":320,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":321,"author":{"gitId":"thanwinnikki"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":322,"author":{"gitId":"thanwinnikki"},"content":"     * Handles the logic for different command cases.","lastModifiedDate":"2021-08-24"},{"lineNumber":323,"author":{"gitId":"thanwinnikki"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":324,"author":{"gitId":"thanwinnikki"},"content":"     * @param caseNum Case Number of the command.","lastModifiedDate":"2021-08-24"},{"lineNumber":325,"author":{"gitId":"thanwinnikki"},"content":"     * @param input Current user input.","lastModifiedDate":"2021-08-24"},{"lineNumber":326,"author":{"gitId":"thanwinnikki"},"content":"     * @param taskList Current TaskList being used.","lastModifiedDate":"2021-08-24"},{"lineNumber":327,"author":{"gitId":"thanwinnikki"},"content":"     * @throws InputError If user input is invalid or unrecognised.","lastModifiedDate":"2021-08-24"},{"lineNumber":328,"author":{"gitId":"thanwinnikki"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":329,"author":{"gitId":"thanwinnikki"},"content":"    public String caseHandler(int caseNum, String input, TaskList taskList) throws InputError {","lastModifiedDate":"2021-08-31"},{"lineNumber":330,"author":{"gitId":"thanwinnikki"},"content":"        String response \u003d \"\";","lastModifiedDate":"2021-08-31"},{"lineNumber":331,"author":{"gitId":"thanwinnikki"},"content":"        switch (caseNum) {","lastModifiedDate":"2021-08-24"},{"lineNumber":332,"author":{"gitId":"thanwinnikki"},"content":"        case BYE_INPUT:","lastModifiedDate":"2021-09-07"},{"lineNumber":333,"author":{"gitId":"thanwinnikki"},"content":"            response \u003d ui.byeMessage();","lastModifiedDate":"2021-08-31"},{"lineNumber":334,"author":{"gitId":"thanwinnikki"},"content":"            Platform.exit();","lastModifiedDate":"2021-08-31"},{"lineNumber":335,"author":{"gitId":"thanwinnikki"},"content":"            break;","lastModifiedDate":"2021-08-31"},{"lineNumber":336,"author":{"gitId":"thanwinnikki"},"content":"        case LIST_INPUT:","lastModifiedDate":"2021-09-07"},{"lineNumber":337,"author":{"gitId":"thanwinnikki"},"content":"            response \u003d listInput(taskList);","lastModifiedDate":"2021-08-31"},{"lineNumber":338,"author":{"gitId":"thanwinnikki"},"content":"            break;","lastModifiedDate":"2021-08-24"},{"lineNumber":339,"author":{"gitId":"thanwinnikki"},"content":"        case DONE_INPUT:","lastModifiedDate":"2021-09-07"},{"lineNumber":340,"author":{"gitId":"thanwinnikki"},"content":"            response \u003d doneInput(input, taskList);","lastModifiedDate":"2021-08-31"},{"lineNumber":341,"author":{"gitId":"thanwinnikki"},"content":"            storage.fileSaver(taskList.currList());","lastModifiedDate":"2021-08-24"},{"lineNumber":342,"author":{"gitId":"thanwinnikki"},"content":"            break;","lastModifiedDate":"2021-08-24"},{"lineNumber":343,"author":{"gitId":"thanwinnikki"},"content":"        case TODO_INPUT:","lastModifiedDate":"2021-09-07"},{"lineNumber":344,"author":{"gitId":"thanwinnikki"},"content":"            response \u003d todoInput(input, taskList);","lastModifiedDate":"2021-08-31"},{"lineNumber":345,"author":{"gitId":"thanwinnikki"},"content":"            storage.fileSaver(taskList.currList());","lastModifiedDate":"2021-08-24"},{"lineNumber":346,"author":{"gitId":"thanwinnikki"},"content":"            break;","lastModifiedDate":"2021-08-24"},{"lineNumber":347,"author":{"gitId":"thanwinnikki"},"content":"        case DEADLINE_INPUT:","lastModifiedDate":"2021-09-07"},{"lineNumber":348,"author":{"gitId":"thanwinnikki"},"content":"            response \u003d deadlineInput(input, taskList);","lastModifiedDate":"2021-08-31"},{"lineNumber":349,"author":{"gitId":"thanwinnikki"},"content":"            storage.fileSaver(taskList.currList());","lastModifiedDate":"2021-08-24"},{"lineNumber":350,"author":{"gitId":"thanwinnikki"},"content":"            break;","lastModifiedDate":"2021-08-24"},{"lineNumber":351,"author":{"gitId":"thanwinnikki"},"content":"        case EVENT_INPUT:","lastModifiedDate":"2021-09-07"},{"lineNumber":352,"author":{"gitId":"thanwinnikki"},"content":"            response \u003d eventInput(input, taskList);","lastModifiedDate":"2021-08-31"},{"lineNumber":353,"author":{"gitId":"thanwinnikki"},"content":"            storage.fileSaver(taskList.currList());","lastModifiedDate":"2021-08-24"},{"lineNumber":354,"author":{"gitId":"thanwinnikki"},"content":"            break;","lastModifiedDate":"2021-08-24"},{"lineNumber":355,"author":{"gitId":"thanwinnikki"},"content":"        case DELETE_INPUT:","lastModifiedDate":"2021-09-07"},{"lineNumber":356,"author":{"gitId":"thanwinnikki"},"content":"            response \u003d deleteInput(input, taskList);","lastModifiedDate":"2021-08-31"},{"lineNumber":357,"author":{"gitId":"thanwinnikki"},"content":"            storage.fileSaver(taskList.currList());","lastModifiedDate":"2021-08-24"},{"lineNumber":358,"author":{"gitId":"thanwinnikki"},"content":"            break;","lastModifiedDate":"2021-08-24"},{"lineNumber":359,"author":{"gitId":"thanwinnikki"},"content":"        case FIND_INPUT:","lastModifiedDate":"2021-09-07"},{"lineNumber":360,"author":{"gitId":"thanwinnikki"},"content":"            response \u003d findInput(input, taskList);","lastModifiedDate":"2021-08-31"},{"lineNumber":361,"author":{"gitId":"thanwinnikki"},"content":"            break;","lastModifiedDate":"2021-08-24"},{"lineNumber":362,"author":{"gitId":"thanwinnikki"},"content":"        case HELP_INPUT:","lastModifiedDate":"2021-09-07"},{"lineNumber":363,"author":{"gitId":"thanwinnikki"},"content":"            response \u003d helpInput();","lastModifiedDate":"2021-09-07"},{"lineNumber":364,"author":{"gitId":"thanwinnikki"},"content":"            break;","lastModifiedDate":"2021-09-07"},{"lineNumber":365,"author":{"gitId":"thanwinnikki"},"content":"        default:","lastModifiedDate":"2021-08-24"},{"lineNumber":366,"author":{"gitId":"thanwinnikki"},"content":"            response \u003d ui.invalidInput();","lastModifiedDate":"2021-08-31"},{"lineNumber":367,"author":{"gitId":"thanwinnikki"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":368,"author":{"gitId":"thanwinnikki"},"content":"        assert (response.length() !\u003d 0);","lastModifiedDate":"2021-09-07"},{"lineNumber":369,"author":{"gitId":"thanwinnikki"},"content":"        return response;","lastModifiedDate":"2021-08-31"},{"lineNumber":370,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":371,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":372,"author":{"gitId":"thanwinnikki"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":373,"author":{"gitId":"thanwinnikki"},"content":"     * Empty start method to extend the Application class.","lastModifiedDate":"2021-09-01"},{"lineNumber":374,"author":{"gitId":"thanwinnikki"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":375,"author":{"gitId":"thanwinnikki"},"content":"     * @param stage Method is not used.","lastModifiedDate":"2021-09-01"},{"lineNumber":376,"author":{"gitId":"thanwinnikki"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":377,"author":{"gitId":"thanwinnikki"},"content":"    @Override","lastModifiedDate":"2021-08-31"},{"lineNumber":378,"author":{"gitId":"thanwinnikki"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2021-08-31"},{"lineNumber":379,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":380,"author":{"gitId":"thanwinnikki"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"thanwinnikki":380}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"thanwinnikki"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"thanwinnikki"},"content":"import java.io.File;","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"thanwinnikki"},"content":"import java.io.FileInputStream;","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"thanwinnikki"},"content":"import java.io.FileOutputStream;","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"thanwinnikki"},"content":"import java.io.ObjectInputStream;","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"thanwinnikki"},"content":"import java.io.ObjectOutputStream;","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"thanwinnikki"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"thanwinnikki"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"thanwinnikki"},"content":" * Represents a storage which you can retrieve and save from.","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"thanwinnikki"},"content":" * @author Nikki","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"thanwinnikki"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"thanwinnikki"},"content":"public class Storage {","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"thanwinnikki"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"thanwinnikki"},"content":"     * Saves the ArrayList representing tasks into hard drive.","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"thanwinnikki"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"thanwinnikki"},"content":"     * @param saveThis Any ArrayList of Tasks to save.","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"thanwinnikki"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"thanwinnikki"},"content":"    public void fileSaver(ArrayList\u003cTask\u003e saveThis) {","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"thanwinnikki"},"content":"        try {","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"thanwinnikki"},"content":"            FileOutputStream fileOut \u003d new FileOutputStream(\"saveFile\");","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"thanwinnikki"},"content":"            ObjectOutputStream out \u003d new ObjectOutputStream(fileOut);","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"thanwinnikki"},"content":"            out.writeObject(saveThis);","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"thanwinnikki"},"content":"            out.flush();","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"thanwinnikki"},"content":"            out.close();","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"thanwinnikki"},"content":"            System.out.println(\"Saved Successfully!\");","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"thanwinnikki"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"thanwinnikki"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"thanwinnikki"},"content":"            System.out.println(\"Write failed\");","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"thanwinnikki"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"thanwinnikki"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"thanwinnikki"},"content":"     * Reads the ArrayList representing tasks from the hard drive.","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"thanwinnikki"},"content":"     * Creates a new file if there is no file to read from.","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"thanwinnikki"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"thanwinnikki"},"content":"     * @return ArrayList of tasks for the current program to use.","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"thanwinnikki"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"thanwinnikki"},"content":"    public ArrayList\u003cTask\u003e fileReader() {","lastModifiedDate":"2021-08-31"},{"lineNumber":42,"author":{"gitId":"thanwinnikki"},"content":"        ArrayList\u003cTask\u003e result \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2021-09-07"},{"lineNumber":43,"author":{"gitId":"thanwinnikki"},"content":"        File tempFile \u003d new File(\"saveFile\");","lastModifiedDate":"2021-08-23"},{"lineNumber":44,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":45,"author":{"gitId":"thanwinnikki"},"content":"        if (tempFile.exists()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":46,"author":{"gitId":"thanwinnikki"},"content":"            try {","lastModifiedDate":"2021-08-23"},{"lineNumber":47,"author":{"gitId":"thanwinnikki"},"content":"                FileInputStream file \u003d new FileInputStream(\"saveFile\");","lastModifiedDate":"2021-08-23"},{"lineNumber":48,"author":{"gitId":"thanwinnikki"},"content":"                ObjectInputStream in \u003d new ObjectInputStream(file);","lastModifiedDate":"2021-08-23"},{"lineNumber":49,"author":{"gitId":"thanwinnikki"},"content":"                result \u003d (ArrayList\u003cTask\u003e) in.readObject();","lastModifiedDate":"2021-08-31"},{"lineNumber":50,"author":{"gitId":"thanwinnikki"},"content":"            } catch (Exception e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":51,"author":{"gitId":"thanwinnikki"},"content":"                e.printStackTrace();","lastModifiedDate":"2021-08-23"},{"lineNumber":52,"author":{"gitId":"thanwinnikki"},"content":"                System.out.println(\"Read failed\");","lastModifiedDate":"2021-08-23"},{"lineNumber":53,"author":{"gitId":"thanwinnikki"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":54,"author":{"gitId":"thanwinnikki"},"content":"        } else {","lastModifiedDate":"2021-08-23"},{"lineNumber":55,"author":{"gitId":"thanwinnikki"},"content":"            System.out.println(\"New Save File Created\");","lastModifiedDate":"2021-08-23"},{"lineNumber":56,"author":{"gitId":"thanwinnikki"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":57,"author":{"gitId":"thanwinnikki"},"content":"        return result;","lastModifiedDate":"2021-08-23"},{"lineNumber":58,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":59,"author":{"gitId":"thanwinnikki"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"thanwinnikki":59}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"thanwinnikki"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"thanwinnikki"},"content":"import java.io.Serializable;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"thanwinnikki"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"thanwinnikki"},"content":" * Represents Tasks that the user might want to do.","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"thanwinnikki"},"content":" * @author Nikki","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"thanwinnikki"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"thanwinnikki"},"content":"public class Task implements Serializable {","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"thanwinnikki"},"content":"    static final String DONE \u003d \"[X] \";","lastModifiedDate":"2021-09-07"},{"lineNumber":11,"author":{"gitId":"thanwinnikki"},"content":"    static final String NOT_DONE \u003d \"[ ] \";","lastModifiedDate":"2021-09-07"},{"lineNumber":12,"author":{"gitId":"thanwinnikki"},"content":"    protected boolean taskComplete;","lastModifiedDate":"2021-09-07"},{"lineNumber":13,"author":{"gitId":"thanwinnikki"},"content":"    protected String task;","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":15,"author":{"gitId":"thanwinnikki"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"thanwinnikki"},"content":"     * Creates a task object.","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"thanwinnikki"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"thanwinnikki"},"content":"     * @param task Name of task.","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"thanwinnikki"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"thanwinnikki"},"content":"    public Task(String task) {","lastModifiedDate":"2021-08-17"},{"lineNumber":21,"author":{"gitId":"thanwinnikki"},"content":"        this.task \u003d task;","lastModifiedDate":"2021-08-17"},{"lineNumber":22,"author":{"gitId":"thanwinnikki"},"content":"        this.taskComplete \u003d false;","lastModifiedDate":"2021-09-07"},{"lineNumber":23,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":24,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":25,"author":{"gitId":"thanwinnikki"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"thanwinnikki"},"content":"     * Return the String representation of a Task.","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"thanwinnikki"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"thanwinnikki"},"content":"     * @return String representation of this Task.","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"thanwinnikki"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"thanwinnikki"},"content":"    String printTask() {","lastModifiedDate":"2021-08-17"},{"lineNumber":31,"author":{"gitId":"thanwinnikki"},"content":"        String result;","lastModifiedDate":"2021-08-30"},{"lineNumber":32,"author":{"gitId":"thanwinnikki"},"content":"        if (taskComplete) {","lastModifiedDate":"2021-09-07"},{"lineNumber":33,"author":{"gitId":"thanwinnikki"},"content":"            result \u003d DONE;","lastModifiedDate":"2021-09-07"},{"lineNumber":34,"author":{"gitId":"thanwinnikki"},"content":"        } else {","lastModifiedDate":"2021-08-17"},{"lineNumber":35,"author":{"gitId":"thanwinnikki"},"content":"            result \u003d NOT_DONE;","lastModifiedDate":"2021-09-07"},{"lineNumber":36,"author":{"gitId":"thanwinnikki"},"content":"        }","lastModifiedDate":"2021-08-17"},{"lineNumber":37,"author":{"gitId":"thanwinnikki"},"content":"        return result + task;","lastModifiedDate":"2021-09-07"},{"lineNumber":38,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":39,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":40,"author":{"gitId":"thanwinnikki"},"content":"    void setComplete() {","lastModifiedDate":"2021-08-17"},{"lineNumber":41,"author":{"gitId":"thanwinnikki"},"content":"        taskComplete \u003d true;","lastModifiedDate":"2021-09-07"},{"lineNumber":42,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":43,"author":{"gitId":"thanwinnikki"},"content":"}","lastModifiedDate":"2021-08-17"}],"authorContributionMap":{"thanwinnikki":43}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"thanwinnikki"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"thanwinnikki"},"content":"import java.io.Serializable;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"thanwinnikki"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"thanwinnikki"},"content":"import java.util.List;","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"thanwinnikki"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"thanwinnikki"},"content":"public class TaskList implements Serializable {","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"thanwinnikki"},"content":"    static final int TODO_TASK \u003d 5;","lastModifiedDate":"2021-09-07"},{"lineNumber":10,"author":{"gitId":"thanwinnikki"},"content":"    static final int DEADLINE_TASK \u003d 9;","lastModifiedDate":"2021-09-07"},{"lineNumber":11,"author":{"gitId":"thanwinnikki"},"content":"    static final int EVENT_TASK \u003d 6;","lastModifiedDate":"2021-09-07"},{"lineNumber":12,"author":{"gitId":"thanwinnikki"},"content":"    static final int EVENT_TIMING \u003d 4;","lastModifiedDate":"2021-09-07"},{"lineNumber":13,"author":{"gitId":"thanwinnikki"},"content":"    private ArrayList\u003cTask\u003e taskList;","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"thanwinnikki"},"content":"    private Ui ui;","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"thanwinnikki"},"content":"    private int currIndex \u003d 1;","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"thanwinnikki"},"content":"    private String stringList \u003d \"\";","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"thanwinnikki"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"thanwinnikki"},"content":"     * Creates a task list object.","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"thanwinnikki"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"thanwinnikki"},"content":"     * * @param list Lists of tasks as an Array List.","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"thanwinnikki"},"content":"     * @param ui UI to handle user interactions.","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"thanwinnikki"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"thanwinnikki"},"content":"    public TaskList(ArrayList\u003cTask\u003e list, Ui ui) {","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"thanwinnikki"},"content":"        this.taskList \u003d list;","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"thanwinnikki"},"content":"        this.ui \u003d ui;","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"thanwinnikki"},"content":"    public ArrayList\u003cTask\u003e currList() {","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"thanwinnikki"},"content":"        return taskList;","lastModifiedDate":"2021-09-07"},{"lineNumber":31,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"thanwinnikki"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":34,"author":{"gitId":"thanwinnikki"},"content":"     * Returns the number of tasks in the task list.","lastModifiedDate":"2021-09-07"},{"lineNumber":35,"author":{"gitId":"thanwinnikki"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":36,"author":{"gitId":"thanwinnikki"},"content":"     * @return Size of task list ArrayList.","lastModifiedDate":"2021-09-07"},{"lineNumber":37,"author":{"gitId":"thanwinnikki"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":38,"author":{"gitId":"thanwinnikki"},"content":"    public int size() {","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"thanwinnikki"},"content":"        assert(taskList.size() \u003e\u003d 0);","lastModifiedDate":"2021-09-07"},{"lineNumber":40,"author":{"gitId":"thanwinnikki"},"content":"        return taskList.size();","lastModifiedDate":"2021-09-07"},{"lineNumber":41,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"thanwinnikki"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":44,"author":{"gitId":"thanwinnikki"},"content":"     * Prints the Task in the current index of the TaskList.","lastModifiedDate":"2021-09-07"},{"lineNumber":45,"author":{"gitId":"thanwinnikki"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":46,"author":{"gitId":"thanwinnikki"},"content":"     * @param task Task object to be printed.","lastModifiedDate":"2021-09-07"},{"lineNumber":47,"author":{"gitId":"thanwinnikki"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":48,"author":{"gitId":"thanwinnikki"},"content":"    private void printItem(Task task) {","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"thanwinnikki"},"content":"        if (stringList.equals(\"\")) {","lastModifiedDate":"2021-08-31"},{"lineNumber":50,"author":{"gitId":"thanwinnikki"},"content":"            stringList \u003d currIndex + \".\" + task.printTask();","lastModifiedDate":"2021-08-31"},{"lineNumber":51,"author":{"gitId":"thanwinnikki"},"content":"        } else {","lastModifiedDate":"2021-08-31"},{"lineNumber":52,"author":{"gitId":"thanwinnikki"},"content":"            stringList \u003d stringList + \"\\n\" + currIndex + \".\" + task.printTask();","lastModifiedDate":"2021-08-31"},{"lineNumber":53,"author":{"gitId":"thanwinnikki"},"content":"        }","lastModifiedDate":"2021-08-31"},{"lineNumber":54,"author":{"gitId":"thanwinnikki"},"content":"        currIndex++;","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":57,"author":{"gitId":"thanwinnikki"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":58,"author":{"gitId":"thanwinnikki"},"content":"     * Prints all the tasks in the TaskList in order of how they were added.","lastModifiedDate":"2021-09-07"},{"lineNumber":59,"author":{"gitId":"thanwinnikki"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":60,"author":{"gitId":"thanwinnikki"},"content":"     * @return String representation of the tasks inside the TaskList.","lastModifiedDate":"2021-09-07"},{"lineNumber":61,"author":{"gitId":"thanwinnikki"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":62,"author":{"gitId":"thanwinnikki"},"content":"    public String printList() {","lastModifiedDate":"2021-09-07"},{"lineNumber":63,"author":{"gitId":"thanwinnikki"},"content":"        assert(taskList.size() \u003e\u003d 0);","lastModifiedDate":"2021-09-07"},{"lineNumber":64,"author":{"gitId":"thanwinnikki"},"content":"        taskList.forEach((task) -\u003e printItem(task));","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"thanwinnikki"},"content":"        String response \u003d stringList;","lastModifiedDate":"2021-08-31"},{"lineNumber":66,"author":{"gitId":"thanwinnikki"},"content":"        currIndex \u003d 1;","lastModifiedDate":"2021-08-24"},{"lineNumber":67,"author":{"gitId":"thanwinnikki"},"content":"        stringList \u003d \"\";","lastModifiedDate":"2021-08-31"},{"lineNumber":68,"author":{"gitId":"thanwinnikki"},"content":"        return response;","lastModifiedDate":"2021-08-31"},{"lineNumber":69,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":70,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":71,"author":{"gitId":"thanwinnikki"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":72,"author":{"gitId":"thanwinnikki"},"content":"     * Marks a Task as done in the TaskList.","lastModifiedDate":"2021-09-07"},{"lineNumber":73,"author":{"gitId":"thanwinnikki"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":74,"author":{"gitId":"thanwinnikki"},"content":"     * @param index Numbered Task in the TaskList to be marked as done.","lastModifiedDate":"2021-09-07"},{"lineNumber":75,"author":{"gitId":"thanwinnikki"},"content":"     * @return String message indicating that Task has been marked as done.","lastModifiedDate":"2021-09-07"},{"lineNumber":76,"author":{"gitId":"thanwinnikki"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":77,"author":{"gitId":"thanwinnikki"},"content":"    public String doneTask(int index) {","lastModifiedDate":"2021-09-07"},{"lineNumber":78,"author":{"gitId":"thanwinnikki"},"content":"        String response;","lastModifiedDate":"2021-09-07"},{"lineNumber":79,"author":{"gitId":"thanwinnikki"},"content":"        Task currTask \u003d taskList.get(index - 1);","lastModifiedDate":"2021-08-24"},{"lineNumber":80,"author":{"gitId":"thanwinnikki"},"content":"        currTask.setComplete();","lastModifiedDate":"2021-08-24"},{"lineNumber":81,"author":{"gitId":"thanwinnikki"},"content":"        response \u003d \"Good job for this thing done man: \\n\" + \"   \" + currTask.printTask();","lastModifiedDate":"2021-08-31"},{"lineNumber":82,"author":{"gitId":"thanwinnikki"},"content":"        return response;","lastModifiedDate":"2021-08-31"},{"lineNumber":83,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":84,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":85,"author":{"gitId":"thanwinnikki"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":86,"author":{"gitId":"thanwinnikki"},"content":"     * Adds a To Do task to the TaskList.","lastModifiedDate":"2021-09-07"},{"lineNumber":87,"author":{"gitId":"thanwinnikki"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":88,"author":{"gitId":"thanwinnikki"},"content":"     * @param str to do instruction containing the to do task.","lastModifiedDate":"2021-09-07"},{"lineNumber":89,"author":{"gitId":"thanwinnikki"},"content":"     * @return String message indicating that to do task has been added to the TaskList.","lastModifiedDate":"2021-09-07"},{"lineNumber":90,"author":{"gitId":"thanwinnikki"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":91,"author":{"gitId":"thanwinnikki"},"content":"    public String addTodo(String str) {","lastModifiedDate":"2021-09-07"},{"lineNumber":92,"author":{"gitId":"thanwinnikki"},"content":"        String response;","lastModifiedDate":"2021-09-07"},{"lineNumber":93,"author":{"gitId":"thanwinnikki"},"content":"        ToDo todoTask \u003d new ToDo(str.substring(TODO_TASK));","lastModifiedDate":"2021-09-07"},{"lineNumber":94,"author":{"gitId":"thanwinnikki"},"content":"        taskList.add(todoTask);","lastModifiedDate":"2021-09-07"},{"lineNumber":95,"author":{"gitId":"thanwinnikki"},"content":"        response \u003d \"Alrighty! I have added this task:\\n\" + \"   \" + taskList.get(taskList.size() - 1).printTask() + \"\\n\"","lastModifiedDate":"2021-08-31"},{"lineNumber":96,"author":{"gitId":"thanwinnikki"},"content":"                + \"Now you have \" + taskList.size() + \" task(s) in total!\";","lastModifiedDate":"2021-08-31"},{"lineNumber":97,"author":{"gitId":"thanwinnikki"},"content":"        return response;","lastModifiedDate":"2021-08-31"},{"lineNumber":98,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":99,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":100,"author":{"gitId":"thanwinnikki"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":101,"author":{"gitId":"thanwinnikki"},"content":"     * Adds a DeadLine task to the TaskList.","lastModifiedDate":"2021-09-07"},{"lineNumber":102,"author":{"gitId":"thanwinnikki"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":103,"author":{"gitId":"thanwinnikki"},"content":"     * @param str DeadLine instruction containing the DeadLine Task.","lastModifiedDate":"2021-09-07"},{"lineNumber":104,"author":{"gitId":"thanwinnikki"},"content":"     * @return String message indicating that the DeadLine task has been added to the TaskList.","lastModifiedDate":"2021-09-07"},{"lineNumber":105,"author":{"gitId":"thanwinnikki"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":106,"author":{"gitId":"thanwinnikki"},"content":"    public String addDeadline(String str) {","lastModifiedDate":"2021-09-07"},{"lineNumber":107,"author":{"gitId":"thanwinnikki"},"content":"        String response \u003d \"\";","lastModifiedDate":"2021-08-31"},{"lineNumber":108,"author":{"gitId":"thanwinnikki"},"content":"        int slashIndex \u003d str.indexOf(\"/\");","lastModifiedDate":"2021-09-07"},{"lineNumber":109,"author":{"gitId":"thanwinnikki"},"content":"        DeadLine deadlineTask \u003d new DeadLine(str.substring(DEADLINE_TASK, slashIndex - 1),","lastModifiedDate":"2021-09-07"},{"lineNumber":110,"author":{"gitId":"thanwinnikki"},"content":"                str.substring(slashIndex + 4));","lastModifiedDate":"2021-09-07"},{"lineNumber":111,"author":{"gitId":"thanwinnikki"},"content":"        taskList.add(deadlineTask);","lastModifiedDate":"2021-09-07"},{"lineNumber":112,"author":{"gitId":"thanwinnikki"},"content":"        response \u003d \"Alrighty! I have added this task:\\n\" + \"   \" + taskList.get(taskList.size() - 1).printTask()","lastModifiedDate":"2021-08-31"},{"lineNumber":113,"author":{"gitId":"thanwinnikki"},"content":"                + \"\\n\" + \"Now you have \" + taskList.size() + \" task(s) in total!\";","lastModifiedDate":"2021-08-31"},{"lineNumber":114,"author":{"gitId":"thanwinnikki"},"content":"        return response;","lastModifiedDate":"2021-08-31"},{"lineNumber":115,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":116,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":117,"author":{"gitId":"thanwinnikki"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":118,"author":{"gitId":"thanwinnikki"},"content":"     * Adds an Event task to the TaskList.","lastModifiedDate":"2021-09-07"},{"lineNumber":119,"author":{"gitId":"thanwinnikki"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":120,"author":{"gitId":"thanwinnikki"},"content":"     * @param str Event instruction containing the Event Task.","lastModifiedDate":"2021-09-07"},{"lineNumber":121,"author":{"gitId":"thanwinnikki"},"content":"     * @return String message indicating that Event task has been added to the TaskList.","lastModifiedDate":"2021-09-07"},{"lineNumber":122,"author":{"gitId":"thanwinnikki"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":123,"author":{"gitId":"thanwinnikki"},"content":"    public String addEvent(String str) {","lastModifiedDate":"2021-09-07"},{"lineNumber":124,"author":{"gitId":"thanwinnikki"},"content":"        String response;","lastModifiedDate":"2021-09-07"},{"lineNumber":125,"author":{"gitId":"thanwinnikki"},"content":"        int slashIndex \u003d str.indexOf(\"/\");","lastModifiedDate":"2021-09-07"},{"lineNumber":126,"author":{"gitId":"thanwinnikki"},"content":"        String event \u003d str.substring(EVENT_TASK, slashIndex - 1);","lastModifiedDate":"2021-09-07"},{"lineNumber":127,"author":{"gitId":"thanwinnikki"},"content":"        String timing \u003d str.substring(slashIndex + EVENT_TIMING);","lastModifiedDate":"2021-09-07"},{"lineNumber":128,"author":{"gitId":"thanwinnikki"},"content":"        Event eventTask \u003d new Event(event, timing);","lastModifiedDate":"2021-09-07"},{"lineNumber":129,"author":{"gitId":"thanwinnikki"},"content":"        taskList.add(eventTask);","lastModifiedDate":"2021-09-07"},{"lineNumber":130,"author":{"gitId":"thanwinnikki"},"content":"        response \u003d \"Alrighty! I have added this task:\\n\" + \"   \" + taskList.get(taskList.size() - 1).printTask()","lastModifiedDate":"2021-08-31"},{"lineNumber":131,"author":{"gitId":"thanwinnikki"},"content":"                + \"\\n\" + \"Now you have \" + taskList.size() + \" task(s) in total!\";","lastModifiedDate":"2021-08-31"},{"lineNumber":132,"author":{"gitId":"thanwinnikki"},"content":"        return response;","lastModifiedDate":"2021-08-31"},{"lineNumber":133,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":134,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":135,"author":{"gitId":"thanwinnikki"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":136,"author":{"gitId":"thanwinnikki"},"content":"     * Deletes a Task from the TaskList.","lastModifiedDate":"2021-09-07"},{"lineNumber":137,"author":{"gitId":"thanwinnikki"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":138,"author":{"gitId":"thanwinnikki"},"content":"     * @param index Numbered Task in the TaskList to be deleted.","lastModifiedDate":"2021-09-07"},{"lineNumber":139,"author":{"gitId":"thanwinnikki"},"content":"     * @return String message indicating that the desired Task has been deleted from the TaskList.","lastModifiedDate":"2021-09-07"},{"lineNumber":140,"author":{"gitId":"thanwinnikki"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":141,"author":{"gitId":"thanwinnikki"},"content":"    public String deleteTask(int index) {","lastModifiedDate":"2021-09-07"},{"lineNumber":142,"author":{"gitId":"thanwinnikki"},"content":"        String response \u003d \"\";","lastModifiedDate":"2021-08-31"},{"lineNumber":143,"author":{"gitId":"thanwinnikki"},"content":"        Task removed \u003d taskList.remove(index - 1);","lastModifiedDate":"2021-08-24"},{"lineNumber":144,"author":{"gitId":"thanwinnikki"},"content":"        response \u003d \"Alrighty! I have deleted this task:\\n\" + \"   \" + removed.printTask() + \"\\n\"","lastModifiedDate":"2021-08-31"},{"lineNumber":145,"author":{"gitId":"thanwinnikki"},"content":"                + \"Now you have \" + taskList.size() + \" task(s) in total!\";","lastModifiedDate":"2021-08-31"},{"lineNumber":146,"author":{"gitId":"thanwinnikki"},"content":"        return response;","lastModifiedDate":"2021-08-31"},{"lineNumber":147,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":148,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":149,"author":{"gitId":"thanwinnikki"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":150,"author":{"gitId":"thanwinnikki"},"content":"     * Returns tasks that have the keyword in the task list.","lastModifiedDate":"2021-08-30"},{"lineNumber":151,"author":{"gitId":"thanwinnikki"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":152,"author":{"gitId":"thanwinnikki"},"content":"     * @param str Keyword to search.","lastModifiedDate":"2021-08-30"},{"lineNumber":153,"author":{"gitId":"thanwinnikki"},"content":"     * @return A new TaskList with the tasks containing the keyword.","lastModifiedDate":"2021-08-30"},{"lineNumber":154,"author":{"gitId":"thanwinnikki"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":155,"author":{"gitId":"thanwinnikki"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":156,"author":{"gitId":"thanwinnikki"},"content":"    public TaskList findTasks(String str) {","lastModifiedDate":"2021-08-30"},{"lineNumber":157,"author":{"gitId":"thanwinnikki"},"content":"        ArrayList\u003cTask\u003e foundArrayList;","lastModifiedDate":"2021-09-07"},{"lineNumber":158,"author":{"gitId":"thanwinnikki"},"content":"        TaskList foundTaskList;","lastModifiedDate":"2021-09-07"},{"lineNumber":159,"author":{"gitId":"thanwinnikki"},"content":"        List\u003cTask\u003e foundArray \u003d taskList.stream().filter(task -\u003e task.printTask().contains(str))","lastModifiedDate":"2021-08-24"},{"lineNumber":160,"author":{"gitId":"thanwinnikki"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2021-08-24"},{"lineNumber":161,"author":{"gitId":"thanwinnikki"},"content":"        foundArrayList \u003d new ArrayList\u003cTask\u003e(foundArray);","lastModifiedDate":"2021-09-07"},{"lineNumber":162,"author":{"gitId":"thanwinnikki"},"content":"        foundTaskList \u003d new TaskList(foundArrayList, ui);","lastModifiedDate":"2021-09-07"},{"lineNumber":163,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":164,"author":{"gitId":"thanwinnikki"},"content":"        return foundTaskList;","lastModifiedDate":"2021-09-07"},{"lineNumber":165,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":166,"author":{"gitId":"thanwinnikki"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"thanwinnikki":166}},{"path":"src/main/java/duke/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"thanwinnikki"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"thanwinnikki"},"content":"public class ToDo extends Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"thanwinnikki"},"content":"    static final String DONE \u003d \"[T][X] \";","lastModifiedDate":"2021-09-07"},{"lineNumber":5,"author":{"gitId":"thanwinnikki"},"content":"    static final String NOT_DONE \u003d \"[T][ ] \";","lastModifiedDate":"2021-09-07"},{"lineNumber":6,"author":{"gitId":"thanwinnikki"},"content":"    public ToDo(String task) {","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"thanwinnikki"},"content":"        super(task);","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"thanwinnikki"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"thanwinnikki"},"content":"    public String printTask() {","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"thanwinnikki"},"content":"        String result \u003d \"\";","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"thanwinnikki"},"content":"        if (taskComplete) {","lastModifiedDate":"2021-09-07"},{"lineNumber":14,"author":{"gitId":"thanwinnikki"},"content":"            result \u003d DONE;","lastModifiedDate":"2021-09-07"},{"lineNumber":15,"author":{"gitId":"thanwinnikki"},"content":"        } else {","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"thanwinnikki"},"content":"            result \u003d NOT_DONE;","lastModifiedDate":"2021-09-07"},{"lineNumber":17,"author":{"gitId":"thanwinnikki"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"thanwinnikki"},"content":"        return result + task;","lastModifiedDate":"2021-09-07"},{"lineNumber":19,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"thanwinnikki"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"thanwinnikki":20}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"thanwinnikki"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"thanwinnikki"},"content":"public class Ui {","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"thanwinnikki"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"thanwinnikki"},"content":"     * Displays start message.","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"thanwinnikki"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"thanwinnikki"},"content":"    public void startMessage() {","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"thanwinnikki"},"content":"        String greeting \u003d \"Why hello there! It\u0027s Duke here!\\n\" + \"How can I help you today master?\";","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"thanwinnikki"},"content":"        System.out.println(greeting);","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"thanwinnikki"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"thanwinnikki"},"content":"     * Displays bye message.","lastModifiedDate":"2021-09-07"},{"lineNumber":15,"author":{"gitId":"thanwinnikki"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"thanwinnikki"},"content":"     * @return String message for the bye sequence.","lastModifiedDate":"2021-09-07"},{"lineNumber":17,"author":{"gitId":"thanwinnikki"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"thanwinnikki"},"content":"    public String byeMessage() {","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"thanwinnikki"},"content":"        return \"See ya again later!\";","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"thanwinnikki"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":23,"author":{"gitId":"thanwinnikki"},"content":"     * Displays the help message for users.","lastModifiedDate":"2021-09-07"},{"lineNumber":24,"author":{"gitId":"thanwinnikki"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":25,"author":{"gitId":"thanwinnikki"},"content":"     * @return String message containing all the commands.","lastModifiedDate":"2021-09-07"},{"lineNumber":26,"author":{"gitId":"thanwinnikki"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":27,"author":{"gitId":"thanwinnikki"},"content":"    public String helpMessage() {","lastModifiedDate":"2021-09-07"},{"lineNumber":28,"author":{"gitId":"thanwinnikki"},"content":"        String helpIntro \u003d \"Here are the list of commands you can use!\\n\\n\";","lastModifiedDate":"2021-09-07"},{"lineNumber":29,"author":{"gitId":"thanwinnikki"},"content":"        String todoHelp \u003d \"todo - \u0027todo \u003cinsert task name\u003e\u0027\\n\\n\";","lastModifiedDate":"2021-09-07"},{"lineNumber":30,"author":{"gitId":"thanwinnikki"},"content":"        String deadlineHelp \u003d \"deadline - \u0027deadline \u003cinsert task name\u003e /by \u003cdd/mm/yyyy\u003e \u003cHHmm\u003e\u0027\\n\\n\";","lastModifiedDate":"2021-09-07"},{"lineNumber":31,"author":{"gitId":"thanwinnikki"},"content":"        String eventHelp \u003d \"event - \u0027event \u003cinsert task name\u003e /at \u003ctime of event\u003e\u0027\\n\\n\";","lastModifiedDate":"2021-09-07"},{"lineNumber":32,"author":{"gitId":"thanwinnikki"},"content":"        String doneHelp \u003d \"done - \u0027done \u003cinsert task number\u003e\u0027\\n\\n\";","lastModifiedDate":"2021-09-07"},{"lineNumber":33,"author":{"gitId":"thanwinnikki"},"content":"        String deleteHelp \u003d \"delete - \u0027delete \u003cinsert task number\u0027\\n\\n\";","lastModifiedDate":"2021-09-07"},{"lineNumber":34,"author":{"gitId":"thanwinnikki"},"content":"        String findHelp \u003d \"find - \u0027find \u003cinsert search word\u003e\u0027\\n\\n\";","lastModifiedDate":"2021-09-07"},{"lineNumber":35,"author":{"gitId":"thanwinnikki"},"content":"        String listHelp \u003d \"list - Displays the tasks in your list\\n\\n\";","lastModifiedDate":"2021-09-07"},{"lineNumber":36,"author":{"gitId":"thanwinnikki"},"content":"        String byeHelp \u003d \"bye - Exit the program\\n\\n\";","lastModifiedDate":"2021-09-07"},{"lineNumber":37,"author":{"gitId":"thanwinnikki"},"content":"        String helpHelp \u003d \"help - Displays available commands\\n\\n\";","lastModifiedDate":"2021-09-07"},{"lineNumber":38,"author":{"gitId":"thanwinnikki"},"content":"        return helpIntro + todoHelp + deadlineHelp + eventHelp + doneHelp + deleteHelp + findHelp + listHelp + byeHelp","lastModifiedDate":"2021-09-07"},{"lineNumber":39,"author":{"gitId":"thanwinnikki"},"content":"                + helpHelp;","lastModifiedDate":"2021-09-07"},{"lineNumber":40,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":41,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":42,"author":{"gitId":"thanwinnikki"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":43,"author":{"gitId":"thanwinnikki"},"content":"     * Returns an error message for the user.","lastModifiedDate":"2021-08-30"},{"lineNumber":44,"author":{"gitId":"thanwinnikki"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":45,"author":{"gitId":"thanwinnikki"},"content":"    public String invalidInput() {","lastModifiedDate":"2021-08-31"},{"lineNumber":46,"author":{"gitId":"thanwinnikki"},"content":"        String response \u003d \"\";","lastModifiedDate":"2021-08-31"},{"lineNumber":47,"author":{"gitId":"thanwinnikki"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"thanwinnikki"},"content":"            throw new InputError(\"Invalid Input\");","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"thanwinnikki"},"content":"        } catch (InputError e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"thanwinnikki"},"content":"            response \u003d \"Here is the error boss. \" + e.getMessage() + \"\\n\" + \"I\u0027m not too sure what you meant.\\n\"","lastModifiedDate":"2021-08-31"},{"lineNumber":51,"author":{"gitId":"thanwinnikki"},"content":"                    + \"Try again with these keywords.\\n\" + \"todo deadline event\";","lastModifiedDate":"2021-08-31"},{"lineNumber":52,"author":{"gitId":"thanwinnikki"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"thanwinnikki"},"content":"        return response;","lastModifiedDate":"2021-08-31"},{"lineNumber":54,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"thanwinnikki"},"content":"    public String errorMessage(InputError e) {","lastModifiedDate":"2021-08-31"},{"lineNumber":57,"author":{"gitId":"thanwinnikki"},"content":"        return \"Here is the error boss. \" + e.getMessage();","lastModifiedDate":"2021-08-31"},{"lineNumber":58,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"thanwinnikki"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"thanwinnikki":59}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"thanwinnikki"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"thanwinnikki"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"thanwinnikki"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"thanwinnikki"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"thanwinnikki"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"thanwinnikki"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"thanwinnikki"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"thanwinnikki"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"thanwinnikki"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"thanwinnikki"},"content":"    \u003c/children\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"thanwinnikki"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"thanwinnikki"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"thanwinnikki"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"thanwinnikki"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"thanwinnikki":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"thanwinnikki"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"thanwinnikki"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"thanwinnikki"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"thanwinnikki"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"thanwinnikki"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"thanwinnikki"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"thanwinnikki"},"content":"\u003c?import javafx.scene.text.Font?\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"thanwinnikki"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/16\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"thanwinnikki"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"thanwinnikki"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" promptText\u003d\"Enter Input Here\" AnchorPane.bottomAnchor\u003d\"1.0\"\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"thanwinnikki"},"content":"         \u003cfont\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"thanwinnikki"},"content":"            \u003cFont name\u003d\"Dubai Medium\" size\u003d\"12.0\" /\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"thanwinnikki"},"content":"         \u003c/font\u003e\u003c/TextField\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"thanwinnikki"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"thanwinnikki"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"thanwinnikki"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"thanwinnikki"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"thanwinnikki"},"content":"            \u003c/content\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"thanwinnikki"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"thanwinnikki"},"content":"    \u003c/children\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"thanwinnikki"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"thanwinnikki":23}},{"path":"src/test/java/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"thanwinnikki"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":3,"author":{"gitId":"thanwinnikki"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"thanwinnikki"},"content":"import duke.DeadLine;","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"thanwinnikki"},"content":"public class DeadlineTest {","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"thanwinnikki"},"content":"    private String task \u003d \"project submission\";","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"thanwinnikki"},"content":"    private String deadline \u003d \"2/12/2021 1635\";","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"thanwinnikki"},"content":"    private DeadLine deadlineTest \u003d new DeadLine(task, deadline);","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"thanwinnikki"},"content":"    @Test","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"thanwinnikki"},"content":"    public void timeFormChangeTest() {","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"thanwinnikki"},"content":"        String actual \u003d deadlineTest.formatChanger();","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"thanwinnikki"},"content":"        String expected \u003d \"Dec 02 2021, 4.35 PM\";","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"thanwinnikki"},"content":"        assertEquals(actual, expected);","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"thanwinnikki"},"content":"    @Test","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"thanwinnikki"},"content":"    public void printTaskTest() {","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"thanwinnikki"},"content":"        String actual \u003d deadlineTest.printTask();","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"thanwinnikki"},"content":"        String expected \u003d \"[D][ ] project submission (by: Dec 02 2021, 4.35 PM)\";","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"thanwinnikki"},"content":"        assertEquals(actual, expected);","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"thanwinnikki"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"thanwinnikki":25}},{"path":"src/test/java/ToDoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"thanwinnikki"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":3,"author":{"gitId":"thanwinnikki"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"thanwinnikki"},"content":"import duke.ToDo;","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"thanwinnikki"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"thanwinnikki"},"content":"public class ToDoTest {","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"thanwinnikki"},"content":"    @Test","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"thanwinnikki"},"content":"    public void printTest() {","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"thanwinnikki"},"content":"        String task \u003d \"read book\";","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"thanwinnikki"},"content":"        ToDo toDoTest1 \u003d new ToDo(task);","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"thanwinnikki"},"content":"        String printTaskActual \u003d toDoTest1.printTask();","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"thanwinnikki"},"content":"        String printTaskExpected \u003d \"[T][ ] read book\";","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"thanwinnikki"},"content":"        assertEquals(printTaskExpected, printTaskActual);","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"thanwinnikki"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"thanwinnikki"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"thanwinnikki":16}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"thanwinnikki"},"content":"event go running /at Monday 2pm","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"thanwinnikki":1}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"thanwinnikki"},"content":"del ACTUAL.TXT","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"thanwinnikki"},"content":"javac  -cp ..\\src\\main\\java\\duke -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"thanwinnikki":2,"-":19}}]

[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"jonas-chow"},"content":"    mainClassName \u003d \"duke.application.Launcher\"","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":48,"author":{"gitId":"jonas-chow"},"content":"repositories {","lastModifiedDate":"2021-08-30"},{"lineNumber":49,"author":{"gitId":"jonas-chow"},"content":"    mavenCentral()","lastModifiedDate":"2021-08-30"},{"lineNumber":50,"author":{"gitId":"jonas-chow"},"content":"}","lastModifiedDate":"2021-08-30"},{"lineNumber":51,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":52,"author":{"gitId":"jonas-chow"},"content":"dependencies {","lastModifiedDate":"2021-08-30"},{"lineNumber":53,"author":{"gitId":"jonas-chow"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2021-08-30"},{"lineNumber":54,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":55,"author":{"gitId":"jonas-chow"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-08-30"},{"lineNumber":56,"author":{"gitId":"jonas-chow"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-08-30"},{"lineNumber":57,"author":{"gitId":"jonas-chow"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-08-30"},{"lineNumber":58,"author":{"gitId":"jonas-chow"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-08-30"},{"lineNumber":59,"author":{"gitId":"jonas-chow"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-08-30"},{"lineNumber":60,"author":{"gitId":"jonas-chow"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-08-30"},{"lineNumber":61,"author":{"gitId":"jonas-chow"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-08-30"},{"lineNumber":62,"author":{"gitId":"jonas-chow"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-08-30"},{"lineNumber":63,"author":{"gitId":"jonas-chow"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-08-30"},{"lineNumber":64,"author":{"gitId":"jonas-chow"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-08-30"},{"lineNumber":65,"author":{"gitId":"jonas-chow"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-08-30"},{"lineNumber":66,"author":{"gitId":"jonas-chow"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-08-30"},{"lineNumber":67,"author":{"gitId":"jonas-chow"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"jonas-chow":22,"-":45}},{"path":"src/main/java/duke/application/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jonas-chow"},"content":"package duke.application;","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":3,"author":{"gitId":"jonas-chow"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"jonas-chow"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"jonas-chow"},"content":"import java.util.Collections;","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"jonas-chow"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"jonas-chow"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"jonas-chow"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"jonas-chow"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"jonas-chow"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"jonas-chow"},"content":"import javafx.scene.Node;","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"jonas-chow"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"jonas-chow"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"jonas-chow"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"jonas-chow"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"jonas-chow"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"jonas-chow"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"jonas-chow"},"content":" * containing text from the speaker.","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"jonas-chow"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"jonas-chow"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"jonas-chow"},"content":"    @FXML","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"jonas-chow"},"content":"    private Label dialog;","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"jonas-chow"},"content":"    @FXML","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"jonas-chow"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"jonas-chow"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"jonas-chow"},"content":"     * Generates a dialog box representing communication from one party","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"jonas-chow"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"jonas-chow"},"content":"     * @param text Text to be written","lastModifiedDate":"2021-08-30"},{"lineNumber":32,"author":{"gitId":"jonas-chow"},"content":"     * @param img Profile image of user","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"jonas-chow"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":34,"author":{"gitId":"jonas-chow"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2021-08-30"},{"lineNumber":35,"author":{"gitId":"jonas-chow"},"content":"        try {","lastModifiedDate":"2021-08-30"},{"lineNumber":36,"author":{"gitId":"jonas-chow"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2021-08-30"},{"lineNumber":37,"author":{"gitId":"jonas-chow"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2021-08-30"},{"lineNumber":38,"author":{"gitId":"jonas-chow"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2021-08-30"},{"lineNumber":39,"author":{"gitId":"jonas-chow"},"content":"            fxmlLoader.load();","lastModifiedDate":"2021-08-30"},{"lineNumber":40,"author":{"gitId":"jonas-chow"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-30"},{"lineNumber":41,"author":{"gitId":"jonas-chow"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-30"},{"lineNumber":42,"author":{"gitId":"jonas-chow"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":43,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":44,"author":{"gitId":"jonas-chow"},"content":"        dialog.setText(text);","lastModifiedDate":"2021-08-30"},{"lineNumber":45,"author":{"gitId":"jonas-chow"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2021-08-30"},{"lineNumber":46,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":47,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":48,"author":{"gitId":"jonas-chow"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":49,"author":{"gitId":"jonas-chow"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2021-08-30"},{"lineNumber":50,"author":{"gitId":"jonas-chow"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":51,"author":{"gitId":"jonas-chow"},"content":"    private void flip() {","lastModifiedDate":"2021-08-30"},{"lineNumber":52,"author":{"gitId":"jonas-chow"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2021-08-30"},{"lineNumber":53,"author":{"gitId":"jonas-chow"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2021-08-30"},{"lineNumber":54,"author":{"gitId":"jonas-chow"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2021-08-30"},{"lineNumber":55,"author":{"gitId":"jonas-chow"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2021-08-30"},{"lineNumber":56,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":57,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":58,"author":{"gitId":"jonas-chow"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":59,"author":{"gitId":"jonas-chow"},"content":"     * Generates dialog box representing input from the user","lastModifiedDate":"2021-08-30"},{"lineNumber":60,"author":{"gitId":"jonas-chow"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":61,"author":{"gitId":"jonas-chow"},"content":"     * @param text User input text","lastModifiedDate":"2021-08-30"},{"lineNumber":62,"author":{"gitId":"jonas-chow"},"content":"     * @param img User profile image","lastModifiedDate":"2021-08-30"},{"lineNumber":63,"author":{"gitId":"jonas-chow"},"content":"     * @return Dialog box representing input from the user","lastModifiedDate":"2021-08-30"},{"lineNumber":64,"author":{"gitId":"jonas-chow"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":65,"author":{"gitId":"jonas-chow"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2021-08-30"},{"lineNumber":66,"author":{"gitId":"jonas-chow"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2021-08-30"},{"lineNumber":67,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":68,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":69,"author":{"gitId":"jonas-chow"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":70,"author":{"gitId":"jonas-chow"},"content":"     * Generates dialog boxes representing response from Duke","lastModifiedDate":"2021-08-30"},{"lineNumber":71,"author":{"gitId":"jonas-chow"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":72,"author":{"gitId":"jonas-chow"},"content":"     * @param text Response text","lastModifiedDate":"2021-08-30"},{"lineNumber":73,"author":{"gitId":"jonas-chow"},"content":"     * @param img Duke profile image","lastModifiedDate":"2021-08-30"},{"lineNumber":74,"author":{"gitId":"jonas-chow"},"content":"     * @return Dialog box representing response from Duke","lastModifiedDate":"2021-08-30"},{"lineNumber":75,"author":{"gitId":"jonas-chow"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":76,"author":{"gitId":"jonas-chow"},"content":"    public static ArrayList\u003cDialogBox\u003e getDukeDialog(String text, Image img) {","lastModifiedDate":"2021-08-30"},{"lineNumber":77,"author":{"gitId":"jonas-chow"},"content":"        String[] lines \u003d text.split(\"\\n\");","lastModifiedDate":"2021-08-30"},{"lineNumber":78,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":79,"author":{"gitId":"jonas-chow"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2021-08-30"},{"lineNumber":80,"author":{"gitId":"jonas-chow"},"content":"        ArrayList\u003cDialogBox\u003e dialogBoxes \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-30"},{"lineNumber":81,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":82,"author":{"gitId":"jonas-chow"},"content":"        // split long responses into blocks of 5 lines each","lastModifiedDate":"2021-08-30"},{"lineNumber":83,"author":{"gitId":"jonas-chow"},"content":"        for (int i \u003d 0; i \u003c lines.length; i++) {","lastModifiedDate":"2021-08-30"},{"lineNumber":84,"author":{"gitId":"jonas-chow"},"content":"            sb.append(lines[i]);","lastModifiedDate":"2021-08-30"},{"lineNumber":85,"author":{"gitId":"jonas-chow"},"content":"            sb.append(\"\\n\");","lastModifiedDate":"2021-08-30"},{"lineNumber":86,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":87,"author":{"gitId":"jonas-chow"},"content":"            if (i % 5 \u003d\u003d 4 || i \u003d\u003d lines.length - 1) {","lastModifiedDate":"2021-08-30"},{"lineNumber":88,"author":{"gitId":"jonas-chow"},"content":"                DialogBox db \u003d new DialogBox(sb.toString(), img);","lastModifiedDate":"2021-08-30"},{"lineNumber":89,"author":{"gitId":"jonas-chow"},"content":"                db.flip();","lastModifiedDate":"2021-08-30"},{"lineNumber":90,"author":{"gitId":"jonas-chow"},"content":"                dialogBoxes.add(db);","lastModifiedDate":"2021-08-30"},{"lineNumber":91,"author":{"gitId":"jonas-chow"},"content":"                sb \u003d new StringBuilder();","lastModifiedDate":"2021-08-30"},{"lineNumber":92,"author":{"gitId":"jonas-chow"},"content":"            }","lastModifiedDate":"2021-08-30"},{"lineNumber":93,"author":{"gitId":"jonas-chow"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":94,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":95,"author":{"gitId":"jonas-chow"},"content":"        return dialogBoxes;","lastModifiedDate":"2021-08-30"},{"lineNumber":96,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":97,"author":{"gitId":"jonas-chow"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"jonas-chow":97}},{"path":"src/main/java/duke/application/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jonas-chow"},"content":"package duke.application;","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":3,"author":{"gitId":"jonas-chow"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"jonas-chow"},"content":"import duke.io.Parser;","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"jonas-chow"},"content":"import duke.io.Storage;","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"jonas-chow"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"jonas-chow"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"jonas-chow"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"jonas-chow"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"jonas-chow"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"jonas-chow"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"jonas-chow"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"jonas-chow"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"jonas-chow"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"jonas-chow"},"content":"public class Duke extends Application {","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"jonas-chow"},"content":"    private final Storage storage \u003d new Storage(\"save.csv\");","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"jonas-chow"},"content":"    private final TaskList taskList \u003d new TaskList(storage);","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"jonas-chow"},"content":"    private final Parser parser \u003d new Parser(taskList);","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"jonas-chow"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"jonas-chow"},"content":"     * Loads the MainWindow from fxml, and initialises it, then sets it as the scene to be shown","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"jonas-chow"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"jonas-chow"},"content":"     * @param stage Provided primary stage","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"jonas-chow"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"jonas-chow"},"content":"    @Override","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"jonas-chow"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"jonas-chow"},"content":"        try {","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"jonas-chow"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Duke.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"jonas-chow"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2021-08-30"},{"lineNumber":32,"author":{"gitId":"jonas-chow"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"jonas-chow"},"content":"            stage.setScene(scene);","lastModifiedDate":"2021-08-30"},{"lineNumber":34,"author":{"gitId":"jonas-chow"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setParser(parser);","lastModifiedDate":"2021-08-30"},{"lineNumber":35,"author":{"gitId":"jonas-chow"},"content":"            stage.show();","lastModifiedDate":"2021-08-30"},{"lineNumber":36,"author":{"gitId":"jonas-chow"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-30"},{"lineNumber":37,"author":{"gitId":"jonas-chow"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-30"},{"lineNumber":38,"author":{"gitId":"jonas-chow"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":39,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":40,"author":{"gitId":"jonas-chow"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"jonas-chow":40}},{"path":"src/main/java/duke/application/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jonas-chow"},"content":"package duke.application;","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":3,"author":{"gitId":"jonas-chow"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"jonas-chow"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"jonas-chow"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"jonas-chow"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"jonas-chow"},"content":"public class Launcher {","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"jonas-chow"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"jonas-chow"},"content":"     * Launches the application","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"jonas-chow"},"content":"     * @param args Command-line arguments (none expected)","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"jonas-chow"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"jonas-chow"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"jonas-chow"},"content":"        Application.launch(Duke.class, args);","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"jonas-chow"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"jonas-chow":16}},{"path":"src/main/java/duke/application/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jonas-chow"},"content":"package duke.application;","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":3,"author":{"gitId":"jonas-chow"},"content":"import duke.io.Parser;","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"jonas-chow"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"jonas-chow"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"jonas-chow"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"jonas-chow"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"jonas-chow"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"jonas-chow"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"jonas-chow"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"jonas-chow"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"jonas-chow"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"jonas-chow"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"jonas-chow"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"jonas-chow"},"content":"    @FXML","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"jonas-chow"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"jonas-chow"},"content":"    @FXML","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"jonas-chow"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"jonas-chow"},"content":"    @FXML","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"jonas-chow"},"content":"    private TextField userInput;","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"jonas-chow"},"content":"    @FXML","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"jonas-chow"},"content":"    private Button sendButton;","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"jonas-chow"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/UserIcon.png\"));","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"jonas-chow"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DukeIcon.png\"));","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"jonas-chow"},"content":"    private Parser parser;","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"jonas-chow"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"jonas-chow"},"content":"     * Initialise settings, and greet user","lastModifiedDate":"2021-08-30"},{"lineNumber":32,"author":{"gitId":"jonas-chow"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"jonas-chow"},"content":"    @FXML","lastModifiedDate":"2021-08-30"},{"lineNumber":34,"author":{"gitId":"jonas-chow"},"content":"    public void initialize() {","lastModifiedDate":"2021-08-30"},{"lineNumber":35,"author":{"gitId":"jonas-chow"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2021-08-30"},{"lineNumber":36,"author":{"gitId":"jonas-chow"},"content":"        addDukeDialog(\"Hello! I am Duke. How may I help you?\");","lastModifiedDate":"2021-08-30"},{"lineNumber":37,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":38,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":39,"author":{"gitId":"jonas-chow"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":40,"author":{"gitId":"jonas-chow"},"content":"     * Set the parser","lastModifiedDate":"2021-08-30"},{"lineNumber":41,"author":{"gitId":"jonas-chow"},"content":"     * @param parser Parser to be set","lastModifiedDate":"2021-08-30"},{"lineNumber":42,"author":{"gitId":"jonas-chow"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":43,"author":{"gitId":"jonas-chow"},"content":"    public void setParser(Parser parser) {","lastModifiedDate":"2021-08-30"},{"lineNumber":44,"author":{"gitId":"jonas-chow"},"content":"        this.parser \u003d parser;","lastModifiedDate":"2021-08-30"},{"lineNumber":45,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":46,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":47,"author":{"gitId":"jonas-chow"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":48,"author":{"gitId":"jonas-chow"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2021-08-30"},{"lineNumber":49,"author":{"gitId":"jonas-chow"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2021-08-30"},{"lineNumber":50,"author":{"gitId":"jonas-chow"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":51,"author":{"gitId":"jonas-chow"},"content":"    @FXML","lastModifiedDate":"2021-08-30"},{"lineNumber":52,"author":{"gitId":"jonas-chow"},"content":"    private void handleUserInput() {","lastModifiedDate":"2021-08-30"},{"lineNumber":53,"author":{"gitId":"jonas-chow"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2021-08-30"},{"lineNumber":54,"author":{"gitId":"jonas-chow"},"content":"        userInput.clear();","lastModifiedDate":"2021-08-30"},{"lineNumber":55,"author":{"gitId":"jonas-chow"},"content":"        addUserDialog(input);","lastModifiedDate":"2021-08-30"},{"lineNumber":56,"author":{"gitId":"jonas-chow"},"content":"        String response \u003d parser.getResponse(input);","lastModifiedDate":"2021-08-30"},{"lineNumber":57,"author":{"gitId":"jonas-chow"},"content":"        addDukeDialog(response);","lastModifiedDate":"2021-08-30"},{"lineNumber":58,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":59,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":60,"author":{"gitId":"jonas-chow"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":61,"author":{"gitId":"jonas-chow"},"content":"     * Adds a dialog for the user to reflect user input being taken","lastModifiedDate":"2021-08-30"},{"lineNumber":62,"author":{"gitId":"jonas-chow"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":63,"author":{"gitId":"jonas-chow"},"content":"     * @param input User input","lastModifiedDate":"2021-08-30"},{"lineNumber":64,"author":{"gitId":"jonas-chow"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":65,"author":{"gitId":"jonas-chow"},"content":"    private void addUserDialog(String input) {","lastModifiedDate":"2021-08-30"},{"lineNumber":66,"author":{"gitId":"jonas-chow"},"content":"        dialogContainer.getChildren().add(DialogBox.getUserDialog(input, userImage));","lastModifiedDate":"2021-08-30"},{"lineNumber":67,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":68,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":69,"author":{"gitId":"jonas-chow"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":70,"author":{"gitId":"jonas-chow"},"content":"     * Adds a dialog for Duke to reflect Duke\u0027s response","lastModifiedDate":"2021-08-30"},{"lineNumber":71,"author":{"gitId":"jonas-chow"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":72,"author":{"gitId":"jonas-chow"},"content":"     * @param response Response from Duke","lastModifiedDate":"2021-08-30"},{"lineNumber":73,"author":{"gitId":"jonas-chow"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":74,"author":{"gitId":"jonas-chow"},"content":"    private void addDukeDialog(String response) {","lastModifiedDate":"2021-08-30"},{"lineNumber":75,"author":{"gitId":"jonas-chow"},"content":"        dialogContainer.getChildren().addAll(DialogBox.getDukeDialog(response, dukeImage));","lastModifiedDate":"2021-08-30"},{"lineNumber":76,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":77,"author":{"gitId":"jonas-chow"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"jonas-chow":77}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jonas-chow"},"content":"package duke.command;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"jonas-chow"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"jonas-chow"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"jonas-chow"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"jonas-chow"},"content":" * A command keeps track of its string and parses user input using its parse function","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"jonas-chow"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"jonas-chow"},"content":"public abstract class Command {","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"jonas-chow"},"content":"    private String commandString;","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"jonas-chow"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"jonas-chow"},"content":"     * Sets the command string of this command.","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"jonas-chow"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"jonas-chow"},"content":"     * @param commandString User Input\u0027s first word to execute this command","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"jonas-chow"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"jonas-chow"},"content":"    protected void setCommandString(String commandString) {","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"jonas-chow"},"content":"        this.commandString \u003d commandString;","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"jonas-chow"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"jonas-chow"},"content":"     * Returns the length of the command string + 1 to account for the whitespace","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"jonas-chow"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"jonas-chow"},"content":"     * @return length of command string + 1 to account for the whitespace","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"jonas-chow"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"jonas-chow"},"content":"    protected int getCommandLength() {","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"jonas-chow"},"content":"        return commandString.length() + 1;","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"jonas-chow"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"jonas-chow"},"content":"     * Returns the command string of this command.","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"jonas-chow"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"jonas-chow"},"content":"     * @return User Input\u0027s first word to execute this command","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"jonas-chow"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"jonas-chow"},"content":"    public String getCommandString() {","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"jonas-chow"},"content":"        return commandString;","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":39,"author":{"gitId":"jonas-chow"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"jonas-chow"},"content":"     * Parse the user input based on the command\u0027s possible parameters","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"jonas-chow"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"jonas-chow"},"content":"     * @param input Full user input","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"jonas-chow"},"content":"     * @param taskList The list of tasks","lastModifiedDate":"2021-08-30"},{"lineNumber":44,"author":{"gitId":"jonas-chow"},"content":"     * @return the response","lastModifiedDate":"2021-08-30"},{"lineNumber":45,"author":{"gitId":"jonas-chow"},"content":"     * @throws DukeException Any exception handled when executing the command","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"jonas-chow"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"jonas-chow"},"content":"    public abstract String parse(String input, TaskList taskList) throws DukeException;","lastModifiedDate":"2021-08-30"},{"lineNumber":48,"author":{"gitId":"jonas-chow"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"jonas-chow":48}},{"path":"src/main/java/duke/command/Commands.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jonas-chow"},"content":"package duke.command;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"jonas-chow"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"jonas-chow"},"content":" * Enum of commands to cycle through and return the right command that matches user input","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"jonas-chow"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"jonas-chow"},"content":"public enum Commands {","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"jonas-chow"},"content":"    EXIT (new ExitCommand()),","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"jonas-chow"},"content":"    LIST (new ListCommand()),","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"jonas-chow"},"content":"    TODO (new ToDoCommand()),","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"jonas-chow"},"content":"    DEADLINE (new DeadlineCommand()),","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"jonas-chow"},"content":"    EVENT (new EventCommand()),","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"jonas-chow"},"content":"    DONE (new DoneCommand()),","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"jonas-chow"},"content":"    DELETE (new DeleteCommand()),","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"jonas-chow"},"content":"    FIND (new FindCommand());","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"jonas-chow"},"content":"    private final Command command;","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"jonas-chow"},"content":"    Commands(Command command) {","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"jonas-chow"},"content":"        this.command \u003d command;","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"jonas-chow"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"jonas-chow"},"content":"     * Checks if the first word of the user input matches this command.","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"jonas-chow"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"jonas-chow"},"content":"     * @param firstWord first word of user input","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"jonas-chow"},"content":"     * @return true if the first word of the user input matches this command","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"jonas-chow"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"jonas-chow"},"content":"    public boolean isCommand(String firstWord) {","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"jonas-chow"},"content":"        return firstWord.equals(command.getCommandString());","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":30,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":31,"author":{"gitId":"jonas-chow"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"jonas-chow"},"content":"     * Returns the command of this type","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"jonas-chow"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"jonas-chow"},"content":"     * @return the Command","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"jonas-chow"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"jonas-chow"},"content":"    public Command getCommand() {","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"jonas-chow"},"content":"        return command;","lastModifiedDate":"2021-08-18"},{"lineNumber":38,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":39,"author":{"gitId":"jonas-chow"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"jonas-chow":39}},{"path":"src/main/java/duke/command/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jonas-chow"},"content":"package duke.command;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"jonas-chow"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"jonas-chow"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":6,"author":{"gitId":"jonas-chow"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"jonas-chow"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"jonas-chow"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"jonas-chow"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"jonas-chow"},"content":" * Command to add a deadline into the task list","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"jonas-chow"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"jonas-chow"},"content":"public class DeadlineCommand extends Command {","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"jonas-chow"},"content":"    public DeadlineCommand() {","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"jonas-chow"},"content":"        setCommandString(\"deadline\");","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"jonas-chow"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"jonas-chow"},"content":"     * Parses the user input for a name and a date,","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"jonas-chow"},"content":"     * then creates the deadline and adds it into the taskList","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"jonas-chow"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"jonas-chow"},"content":"     * @param input Full user input","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"jonas-chow"},"content":"     * @param taskList The list of tasks","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"jonas-chow"},"content":"     * @return The response","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"jonas-chow"},"content":"     * @throws DukeException Any exception caught when executing this command","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"jonas-chow"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"jonas-chow"},"content":"    @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"jonas-chow"},"content":"    public String parse(String input, TaskList taskList) throws DukeException {","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"jonas-chow"},"content":"        if (input.length() \u003c\u003d getCommandLength()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"jonas-chow"},"content":"            throw new DukeException(\"Please input the deadline\u0027s name and date!\");","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"jonas-chow"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"jonas-chow"},"content":"        String[] inputs \u003d input.substring(getCommandLength()).split(\"/by\");","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"jonas-chow"},"content":"        if (inputs.length \u003c 2) {","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"jonas-chow"},"content":"            // /by not specified","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"jonas-chow"},"content":"            throw new DukeException(\"Please input when the deadline is to be done by!\");","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"jonas-chow"},"content":"        } else if (inputs.length \u003e 2) {","lastModifiedDate":"2021-08-23"},{"lineNumber":39,"author":{"gitId":"jonas-chow"},"content":"            // more than one /by","lastModifiedDate":"2021-08-23"},{"lineNumber":40,"author":{"gitId":"jonas-chow"},"content":"            throw new DukeException(\"Please input only one deadline!\");","lastModifiedDate":"2021-08-23"},{"lineNumber":41,"author":{"gitId":"jonas-chow"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":42,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":43,"author":{"gitId":"jonas-chow"},"content":"        String name \u003d inputs[0].strip();","lastModifiedDate":"2021-08-23"},{"lineNumber":44,"author":{"gitId":"jonas-chow"},"content":"        if (name.equals(\"\")) {","lastModifiedDate":"2021-08-23"},{"lineNumber":45,"author":{"gitId":"jonas-chow"},"content":"            throw new DukeException(\"Please input the deadline\u0027s name!\");","lastModifiedDate":"2021-08-23"},{"lineNumber":46,"author":{"gitId":"jonas-chow"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":47,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":48,"author":{"gitId":"jonas-chow"},"content":"        LocalDate date;","lastModifiedDate":"2021-08-23"},{"lineNumber":49,"author":{"gitId":"jonas-chow"},"content":"        try {","lastModifiedDate":"2021-08-23"},{"lineNumber":50,"author":{"gitId":"jonas-chow"},"content":"            date \u003d LocalDate.parse(inputs[1].strip());","lastModifiedDate":"2021-08-23"},{"lineNumber":51,"author":{"gitId":"jonas-chow"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":52,"author":{"gitId":"jonas-chow"},"content":"            throw new DukeException(\"Please input your date in the format YYYY-MM-DD\");","lastModifiedDate":"2021-08-23"},{"lineNumber":53,"author":{"gitId":"jonas-chow"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":54,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":55,"author":{"gitId":"jonas-chow"},"content":"        Deadline deadline \u003d new Deadline(name, date);","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"jonas-chow"},"content":"        return taskList.addTask(deadline);","lastModifiedDate":"2021-08-30"},{"lineNumber":57,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":58,"author":{"gitId":"jonas-chow"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"jonas-chow":58}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jonas-chow"},"content":"package duke.command;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"jonas-chow"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"jonas-chow"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"jonas-chow"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"jonas-chow"},"content":" * Command to delete a task, or delete tasks that satisfy a specified condition","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"jonas-chow"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"jonas-chow"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"jonas-chow"},"content":"    public DeleteCommand() {","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"jonas-chow"},"content":"        setCommandString(\"delete\");","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"jonas-chow"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"jonas-chow"},"content":"     * Parses the user input for a taskNumber, or a condition.","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"jonas-chow"},"content":"     * Then deletes the specified task, or all tasks matching the condition","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"jonas-chow"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"jonas-chow"},"content":"     * @param input Full user input","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"jonas-chow"},"content":"     * @param taskList The list of tasks","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"jonas-chow"},"content":"     * @return The response","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"jonas-chow"},"content":"     * @throws DukeException Any exception caught when executing this command","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"jonas-chow"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"jonas-chow"},"content":"    @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"jonas-chow"},"content":"    public String parse(String input, TaskList taskList) throws DukeException {","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"jonas-chow"},"content":"        if (input.length() \u003c\u003d getCommandLength()) {","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"jonas-chow"},"content":"            throw new DukeException(\"Please input a task number.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"jonas-chow"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"jonas-chow"},"content":"        String data \u003d input.substring(getCommandLength()).strip();","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"jonas-chow"},"content":"        if (data.equals(\"done\")) {","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"jonas-chow"},"content":"            return taskList.deleteDone();","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"jonas-chow"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"jonas-chow"},"content":"        if (data.equals(\"expired\")) {","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"jonas-chow"},"content":"            return taskList.deleteExpired();","lastModifiedDate":"2021-08-30"},{"lineNumber":37,"author":{"gitId":"jonas-chow"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":39,"author":{"gitId":"jonas-chow"},"content":"        int idx;","lastModifiedDate":"2021-08-23"},{"lineNumber":40,"author":{"gitId":"jonas-chow"},"content":"        try {","lastModifiedDate":"2021-08-23"},{"lineNumber":41,"author":{"gitId":"jonas-chow"},"content":"            idx \u003d Integer.parseInt(data);","lastModifiedDate":"2021-08-23"},{"lineNumber":42,"author":{"gitId":"jonas-chow"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":43,"author":{"gitId":"jonas-chow"},"content":"            throw new DukeException(\"Please input a number\");","lastModifiedDate":"2021-08-23"},{"lineNumber":44,"author":{"gitId":"jonas-chow"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":45,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":46,"author":{"gitId":"jonas-chow"},"content":"        return taskList.deleteTask(idx);","lastModifiedDate":"2021-08-30"},{"lineNumber":47,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":48,"author":{"gitId":"jonas-chow"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"jonas-chow":48}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jonas-chow"},"content":"package duke.command;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"jonas-chow"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"jonas-chow"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"jonas-chow"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"jonas-chow"},"content":" * Command to mark a task as done","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"jonas-chow"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"jonas-chow"},"content":"public class DoneCommand extends Command {","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"jonas-chow"},"content":"    public DoneCommand() {","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"jonas-chow"},"content":"        setCommandString(\"done\");","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"jonas-chow"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"jonas-chow"},"content":"     * Parses the user input for a taskNumber.","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"jonas-chow"},"content":"     * Then marks the specified task as done.","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"jonas-chow"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"jonas-chow"},"content":"     * @param input Full user input","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"jonas-chow"},"content":"     * @param taskList The list of tasks","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"jonas-chow"},"content":"     * @return The response","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"jonas-chow"},"content":"     * @throws DukeException Any exception caught when executing this command","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"jonas-chow"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"jonas-chow"},"content":"    @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"jonas-chow"},"content":"    public String parse(String input, TaskList taskList) throws DukeException {","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"jonas-chow"},"content":"        if (input.length() \u003c\u003d getCommandLength()) {","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"jonas-chow"},"content":"            throw new DukeException(\"Please input a task number.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"jonas-chow"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"jonas-chow"},"content":"        String data \u003d input.substring(getCommandLength()).strip();","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"jonas-chow"},"content":"        int idx;","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"jonas-chow"},"content":"        try {","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"jonas-chow"},"content":"            idx \u003d Integer.parseInt(data);","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"jonas-chow"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"jonas-chow"},"content":"            throw new DukeException(\"Please input a number\");","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"jonas-chow"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"jonas-chow"},"content":"        return taskList.doTask(idx);","lastModifiedDate":"2021-08-30"},{"lineNumber":39,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":40,"author":{"gitId":"jonas-chow"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"jonas-chow":40}},{"path":"src/main/java/duke/command/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jonas-chow"},"content":"package duke.command;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"jonas-chow"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"jonas-chow"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":6,"author":{"gitId":"jonas-chow"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-27"},{"lineNumber":7,"author":{"gitId":"jonas-chow"},"content":"import duke.task.Event;","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"jonas-chow"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"jonas-chow"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"jonas-chow"},"content":" * Command to add an event into the task list","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"jonas-chow"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"jonas-chow"},"content":"public class EventCommand extends Command {","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"jonas-chow"},"content":"    public EventCommand() {","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"jonas-chow"},"content":"        setCommandString(\"event\");","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"jonas-chow"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"jonas-chow"},"content":"     * Parses the user input for a name and a date,","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"jonas-chow"},"content":"     * then creates the event and adds it into the taskList","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"jonas-chow"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"jonas-chow"},"content":"     * @param input Full user input","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"jonas-chow"},"content":"     * @param taskList The list of tasks","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"jonas-chow"},"content":"     * @return The response","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"jonas-chow"},"content":"     * @throws DukeException Any exception caught when executing this command","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"jonas-chow"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"jonas-chow"},"content":"    @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"jonas-chow"},"content":"    public String parse(String input, TaskList taskList) throws DukeException {","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"jonas-chow"},"content":"        if (input.length() \u003c\u003d getCommandLength()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"jonas-chow"},"content":"            throw new DukeException(\"Please input the event\u0027s name and date!\");","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"jonas-chow"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"jonas-chow"},"content":"        String[] inputs \u003d input.substring(getCommandLength()).split(\"/at\");","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"jonas-chow"},"content":"        if (inputs.length \u003c 2) {","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"jonas-chow"},"content":"            // /by not specified","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"jonas-chow"},"content":"            throw new DukeException(\"Please input when the event is at!\");","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"jonas-chow"},"content":"        } else if (inputs.length \u003e 2) {","lastModifiedDate":"2021-08-23"},{"lineNumber":39,"author":{"gitId":"jonas-chow"},"content":"            // more than one /by","lastModifiedDate":"2021-08-23"},{"lineNumber":40,"author":{"gitId":"jonas-chow"},"content":"            throw new DukeException(\"Please input only one timing for the event!\");","lastModifiedDate":"2021-08-23"},{"lineNumber":41,"author":{"gitId":"jonas-chow"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":42,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":43,"author":{"gitId":"jonas-chow"},"content":"        String name \u003d inputs[0].strip();","lastModifiedDate":"2021-08-23"},{"lineNumber":44,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":45,"author":{"gitId":"jonas-chow"},"content":"        if (name.equals(\"\")) {","lastModifiedDate":"2021-08-23"},{"lineNumber":46,"author":{"gitId":"jonas-chow"},"content":"            throw new DukeException(\"Please input the event\u0027s name!\");","lastModifiedDate":"2021-08-23"},{"lineNumber":47,"author":{"gitId":"jonas-chow"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":48,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":49,"author":{"gitId":"jonas-chow"},"content":"        LocalDate date;","lastModifiedDate":"2021-08-23"},{"lineNumber":50,"author":{"gitId":"jonas-chow"},"content":"        try {","lastModifiedDate":"2021-08-23"},{"lineNumber":51,"author":{"gitId":"jonas-chow"},"content":"            date \u003d LocalDate.parse(inputs[1].strip());","lastModifiedDate":"2021-08-23"},{"lineNumber":52,"author":{"gitId":"jonas-chow"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":53,"author":{"gitId":"jonas-chow"},"content":"            throw new DukeException(\"Please input your date in the format YYYY-MM-DD\");","lastModifiedDate":"2021-08-23"},{"lineNumber":54,"author":{"gitId":"jonas-chow"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":55,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":56,"author":{"gitId":"jonas-chow"},"content":"        Event event \u003d new Event(name, date);","lastModifiedDate":"2021-08-24"},{"lineNumber":57,"author":{"gitId":"jonas-chow"},"content":"        return taskList.addTask(event);","lastModifiedDate":"2021-08-30"},{"lineNumber":58,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":59,"author":{"gitId":"jonas-chow"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"jonas-chow":59}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jonas-chow"},"content":"package duke.command;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"jonas-chow"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"jonas-chow"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"jonas-chow"},"content":" * Command to close the application","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"jonas-chow"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"jonas-chow"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"jonas-chow"},"content":"    public ExitCommand() {","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"jonas-chow"},"content":"        setCommandString(\"bye\");","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"jonas-chow"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"jonas-chow"},"content":"     * Exits the application.","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"jonas-chow"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"jonas-chow"},"content":"     * @param input Full user input","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"jonas-chow"},"content":"     * @param taskList The list of tasks","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"jonas-chow"},"content":"     * @return The response","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"jonas-chow"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"jonas-chow"},"content":"    @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"jonas-chow"},"content":"    public String parse(String input, TaskList taskList) {","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"jonas-chow"},"content":"        System.exit(0);","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"jonas-chow"},"content":"        return \"Goodbye, hope to see you again!\";","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"jonas-chow"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"jonas-chow":25}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jonas-chow"},"content":"package duke.command;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"jonas-chow"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"jonas-chow"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"jonas-chow"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"jonas-chow"},"content":" * Command to find a task that matches the search string","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"jonas-chow"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"jonas-chow"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"jonas-chow"},"content":"    public FindCommand() {","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"jonas-chow"},"content":"        setCommandString(\"find\");","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"jonas-chow"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"jonas-chow"},"content":"     * Parses the user input for a search string,","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"jonas-chow"},"content":"     * then finds all tasks that contain the search string and lists them","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"jonas-chow"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"jonas-chow"},"content":"     * @param input Full user input","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"jonas-chow"},"content":"     * @param taskList The list of tasks","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"jonas-chow"},"content":"     * @return The response","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"jonas-chow"},"content":"     * @throws DukeException Exception thrown when search string is empty","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"jonas-chow"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"jonas-chow"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"jonas-chow"},"content":"    public String parse(String input, TaskList taskList) throws DukeException {","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"jonas-chow"},"content":"        if (input.length() \u003c\u003d getCommandLength()) {","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"jonas-chow"},"content":"            throw new DukeException(\"Please input a search string.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"jonas-chow"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"jonas-chow"},"content":"        String data \u003d input.substring(getCommandLength()).strip();","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"jonas-chow"},"content":"        if (data.equals(\"\")) {","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"jonas-chow"},"content":"            throw new DukeException(\"Please input a search string.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"jonas-chow"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"jonas-chow"},"content":"        return taskList.find(data);","lastModifiedDate":"2021-08-30"},{"lineNumber":36,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"jonas-chow"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"jonas-chow":37}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jonas-chow"},"content":"package duke.command;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"jonas-chow"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"jonas-chow"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"jonas-chow"},"content":" * Command to list all tasks in the task list","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"jonas-chow"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"jonas-chow"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"jonas-chow"},"content":"    public ListCommand() {","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"jonas-chow"},"content":"        setCommandString(\"list\");","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"jonas-chow"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"jonas-chow"},"content":"     * Lists all tasks","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"jonas-chow"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"jonas-chow"},"content":"     * @param input Full user input","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"jonas-chow"},"content":"     * @param taskList The list of tasks","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"jonas-chow"},"content":"     * @return The response","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"jonas-chow"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"jonas-chow"},"content":"    @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"jonas-chow"},"content":"    public String parse(String input, TaskList taskList) {","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"jonas-chow"},"content":"        return taskList.list();","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"jonas-chow"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"jonas-chow":24}},{"path":"src/main/java/duke/command/ToDoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jonas-chow"},"content":"package duke.command;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"jonas-chow"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"jonas-chow"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"jonas-chow"},"content":"import duke.task.ToDo;","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"jonas-chow"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"jonas-chow"},"content":" * Command to add a todo into the task list","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"jonas-chow"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"jonas-chow"},"content":"public class ToDoCommand extends Command {","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"jonas-chow"},"content":"    public ToDoCommand() {","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"jonas-chow"},"content":"        setCommandString(\"todo\");","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"jonas-chow"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"jonas-chow"},"content":"     * Parses the user input for a name,","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"jonas-chow"},"content":"     * then creates the ToDo and adds it into the taskList","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"jonas-chow"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"jonas-chow"},"content":"     * @param input Full user input","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"jonas-chow"},"content":"     * @param taskList The list of tasks","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"jonas-chow"},"content":"     * @return The response","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"jonas-chow"},"content":"     * @throws DukeException Any exception caught when executing this command","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"jonas-chow"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"jonas-chow"},"content":"    @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"jonas-chow"},"content":"    public String parse(String input, TaskList taskList) throws DukeException {","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"jonas-chow"},"content":"        if (input.length() \u003c\u003d getCommandLength()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"jonas-chow"},"content":"            throw new DukeException(\"Please input the todo\u0027s name!\");","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"jonas-chow"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"jonas-chow"},"content":"        String name \u003d input.substring(getCommandLength()).strip();","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"jonas-chow"},"content":"        if (name.equals(\"\")) {","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"jonas-chow"},"content":"            throw new DukeException(\"Please input the todo\u0027s name!\");","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"jonas-chow"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"jonas-chow"},"content":"        ToDo toDo \u003d new ToDo(name);","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"jonas-chow"},"content":"        return taskList.addTask(toDo);","lastModifiedDate":"2021-08-30"},{"lineNumber":38,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":39,"author":{"gitId":"jonas-chow"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"jonas-chow":39}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jonas-chow"},"content":"package duke.exception;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"jonas-chow"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"jonas-chow"},"content":" * Exception thrown when something expected goes wrong within Duke","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"jonas-chow"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"jonas-chow"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"jonas-chow"},"content":"    public DukeException(String message) {","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"jonas-chow"},"content":"        super(message);","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"jonas-chow"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"jonas-chow"},"content":"     * Clears any queued message and prints the error message in red instead","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"jonas-chow"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"jonas-chow"},"content":"    public String displayError() {","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"jonas-chow"},"content":"        return \"Oops! Something went wrong :(\\n\" + getMessage();","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"jonas-chow"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"jonas-chow":17}},{"path":"src/main/java/duke/io/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jonas-chow"},"content":"package duke.io;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"jonas-chow"},"content":"import duke.command.Commands;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"jonas-chow"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"jonas-chow"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"jonas-chow"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"jonas-chow"},"content":" * Parser to parse user input and process it","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"jonas-chow"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"jonas-chow"},"content":"public class Parser {","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"jonas-chow"},"content":"    private TaskList taskList;","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"jonas-chow"},"content":"    public Parser(TaskList taskList) {","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"jonas-chow"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"jonas-chow"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"jonas-chow"},"content":"     * Parses the user input for the first word, then calls the appropriate function for the command","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"jonas-chow"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"jonas-chow"},"content":"     * @param input User input","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"jonas-chow"},"content":"     * @return The response to be sent","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"jonas-chow"},"content":"     * @throws DukeException Any error thrown by Duke when executing the command","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"jonas-chow"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"jonas-chow"},"content":"    public String getResponse(String input) {","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"jonas-chow"},"content":"        String firstWord \u003d input.split(\" \")[0];","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"jonas-chow"},"content":"        // if nothing matches, response stays like this","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"jonas-chow"},"content":"        String response \u003d \"Unsupported Operation!\";","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"jonas-chow"},"content":"        try {","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"jonas-chow"},"content":"            for (Commands command : Commands.values()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"jonas-chow"},"content":"                if (command.isCommand(firstWord)) {","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"jonas-chow"},"content":"                    response \u003d command.getCommand().parse(input, taskList);","lastModifiedDate":"2021-08-30"},{"lineNumber":34,"author":{"gitId":"jonas-chow"},"content":"                    // terminate out of loop once the command is found","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"jonas-chow"},"content":"                    break;","lastModifiedDate":"2021-08-30"},{"lineNumber":36,"author":{"gitId":"jonas-chow"},"content":"                }","lastModifiedDate":"2021-08-30"},{"lineNumber":37,"author":{"gitId":"jonas-chow"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"jonas-chow"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-30"},{"lineNumber":39,"author":{"gitId":"jonas-chow"},"content":"            response \u003d e.displayError();","lastModifiedDate":"2021-08-30"},{"lineNumber":40,"author":{"gitId":"jonas-chow"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":41,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":42,"author":{"gitId":"jonas-chow"},"content":"        return response;","lastModifiedDate":"2021-08-30"},{"lineNumber":43,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":44,"author":{"gitId":"jonas-chow"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"jonas-chow":44}},{"path":"src/main/java/duke/io/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jonas-chow"},"content":"package duke.io;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"jonas-chow"},"content":"import java.io.File;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"jonas-chow"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"jonas-chow"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"jonas-chow"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"jonas-chow"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"jonas-chow"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":10,"author":{"gitId":"jonas-chow"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"jonas-chow"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"jonas-chow"},"content":"import duke.task.Event;","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"jonas-chow"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"jonas-chow"},"content":"import duke.task.ToDo;","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"jonas-chow"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"jonas-chow"},"content":" * Storage class that manages the saving and loading of the task list","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"jonas-chow"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"jonas-chow"},"content":"public class Storage {","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"jonas-chow"},"content":"    private final File saveFile;","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":22,"author":{"gitId":"jonas-chow"},"content":"    public Storage(String filepath) {","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"jonas-chow"},"content":"        this.saveFile \u003d new File(filepath);","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"jonas-chow"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"jonas-chow"},"content":"     * Loads the taskList from the saveFile","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"jonas-chow"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"jonas-chow"},"content":"     * @return false if the file does not exist, i.e. the user is a new user. true otherwise.","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"jonas-chow"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"jonas-chow"},"content":"    public ArrayList\u003cTask\u003e load() {","lastModifiedDate":"2021-08-30"},{"lineNumber":32,"author":{"gitId":"jonas-chow"},"content":"        try {","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"jonas-chow"},"content":"            ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"jonas-chow"},"content":"            Scanner sc \u003d new Scanner(saveFile);","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"jonas-chow"},"content":"            while (sc.hasNextLine()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"jonas-chow"},"content":"                String[] datas \u003d sc.nextLine().split(\",\");","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"jonas-chow"},"content":"                switch (datas[0]) {","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"jonas-chow"},"content":"                case \"t\":","lastModifiedDate":"2021-08-23"},{"lineNumber":39,"author":{"gitId":"jonas-chow"},"content":"                    tasks.add(ToDo.load(datas));","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"jonas-chow"},"content":"                    break;","lastModifiedDate":"2021-08-23"},{"lineNumber":41,"author":{"gitId":"jonas-chow"},"content":"                case \"d\":","lastModifiedDate":"2021-08-23"},{"lineNumber":42,"author":{"gitId":"jonas-chow"},"content":"                    tasks.add(Deadline.load(datas));","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"jonas-chow"},"content":"                    break;","lastModifiedDate":"2021-08-23"},{"lineNumber":44,"author":{"gitId":"jonas-chow"},"content":"                case \"e\":","lastModifiedDate":"2021-08-23"},{"lineNumber":45,"author":{"gitId":"jonas-chow"},"content":"                    tasks.add(Event.load(datas));","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"jonas-chow"},"content":"                    break;","lastModifiedDate":"2021-08-23"},{"lineNumber":47,"author":{"gitId":"jonas-chow"},"content":"                default:","lastModifiedDate":"2021-08-23"},{"lineNumber":48,"author":{"gitId":"jonas-chow"},"content":"                    break;","lastModifiedDate":"2021-08-23"},{"lineNumber":49,"author":{"gitId":"jonas-chow"},"content":"                }","lastModifiedDate":"2021-08-23"},{"lineNumber":50,"author":{"gitId":"jonas-chow"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":51,"author":{"gitId":"jonas-chow"},"content":"            return tasks;","lastModifiedDate":"2021-08-30"},{"lineNumber":52,"author":{"gitId":"jonas-chow"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":53,"author":{"gitId":"jonas-chow"},"content":"            return new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-30"},{"lineNumber":54,"author":{"gitId":"jonas-chow"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":55,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":56,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":57,"author":{"gitId":"jonas-chow"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"jonas-chow"},"content":"     * Saves the taskList into save.csv","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"jonas-chow"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":60,"author":{"gitId":"jonas-chow"},"content":"     * @param tasks The tasks to be saved","lastModifiedDate":"2021-08-30"},{"lineNumber":61,"author":{"gitId":"jonas-chow"},"content":"     * @throws DukeException Any exception caught that has to do with the I/O","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"jonas-chow"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":63,"author":{"gitId":"jonas-chow"},"content":"    public void save(ArrayList\u003cTask\u003e tasks) throws DukeException {","lastModifiedDate":"2021-08-30"},{"lineNumber":64,"author":{"gitId":"jonas-chow"},"content":"        String taskListContent \u003d convertToSaveString(tasks);","lastModifiedDate":"2021-08-30"},{"lineNumber":65,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":66,"author":{"gitId":"jonas-chow"},"content":"        try {","lastModifiedDate":"2021-08-23"},{"lineNumber":67,"author":{"gitId":"jonas-chow"},"content":"            // create the file if it does not exist","lastModifiedDate":"2021-08-23"},{"lineNumber":68,"author":{"gitId":"jonas-chow"},"content":"            saveFile.createNewFile();","lastModifiedDate":"2021-08-23"},{"lineNumber":69,"author":{"gitId":"jonas-chow"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":70,"author":{"gitId":"jonas-chow"},"content":"            throw new DukeException(e.getMessage());","lastModifiedDate":"2021-08-23"},{"lineNumber":71,"author":{"gitId":"jonas-chow"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":72,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":73,"author":{"gitId":"jonas-chow"},"content":"        try (FileWriter fw \u003d new FileWriter(saveFile)) {","lastModifiedDate":"2021-08-23"},{"lineNumber":74,"author":{"gitId":"jonas-chow"},"content":"            fw.write(taskListContent);","lastModifiedDate":"2021-08-23"},{"lineNumber":75,"author":{"gitId":"jonas-chow"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":76,"author":{"gitId":"jonas-chow"},"content":"            throw new DukeException(e.getMessage());","lastModifiedDate":"2021-08-23"},{"lineNumber":77,"author":{"gitId":"jonas-chow"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":78,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":79,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":80,"author":{"gitId":"jonas-chow"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":81,"author":{"gitId":"jonas-chow"},"content":"     * Returns a string representing the tasks compliant to the save format","lastModifiedDate":"2021-08-30"},{"lineNumber":82,"author":{"gitId":"jonas-chow"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":83,"author":{"gitId":"jonas-chow"},"content":"     * @param tasks The tasks to be saved","lastModifiedDate":"2021-08-30"},{"lineNumber":84,"author":{"gitId":"jonas-chow"},"content":"     * @return a string representing the tasks compliant to the save format","lastModifiedDate":"2021-08-30"},{"lineNumber":85,"author":{"gitId":"jonas-chow"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":86,"author":{"gitId":"jonas-chow"},"content":"    private String convertToSaveString(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2021-08-30"},{"lineNumber":87,"author":{"gitId":"jonas-chow"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2021-08-30"},{"lineNumber":88,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":89,"author":{"gitId":"jonas-chow"},"content":"        if (tasks.size() \u003d\u003d 0) {","lastModifiedDate":"2021-08-30"},{"lineNumber":90,"author":{"gitId":"jonas-chow"},"content":"            return \"\";","lastModifiedDate":"2021-08-30"},{"lineNumber":91,"author":{"gitId":"jonas-chow"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":92,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":93,"author":{"gitId":"jonas-chow"},"content":"        for (Task task : tasks) {","lastModifiedDate":"2021-08-30"},{"lineNumber":94,"author":{"gitId":"jonas-chow"},"content":"            sb.append(task.getSaveString());","lastModifiedDate":"2021-08-30"},{"lineNumber":95,"author":{"gitId":"jonas-chow"},"content":"            sb.append(\u0027\\n\u0027);","lastModifiedDate":"2021-08-30"},{"lineNumber":96,"author":{"gitId":"jonas-chow"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":97,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":98,"author":{"gitId":"jonas-chow"},"content":"        // remove the last newline character","lastModifiedDate":"2021-08-30"},{"lineNumber":99,"author":{"gitId":"jonas-chow"},"content":"        sb.deleteCharAt(sb.length() - 1);","lastModifiedDate":"2021-08-30"},{"lineNumber":100,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":101,"author":{"gitId":"jonas-chow"},"content":"        return sb.toString();","lastModifiedDate":"2021-08-30"},{"lineNumber":102,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":103,"author":{"gitId":"jonas-chow"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"jonas-chow":103}},{"path":"src/main/java/duke/stubs/StorageStub.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jonas-chow"},"content":"package duke.stubs;","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":3,"author":{"gitId":"jonas-chow"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"jonas-chow"},"content":"import duke.io.Storage;","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"jonas-chow"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"jonas-chow"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"jonas-chow"},"content":" * Storage stub used for testing that doesn\u0027t load or store","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"jonas-chow"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"jonas-chow"},"content":"public class StorageStub extends Storage {","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"jonas-chow"},"content":"    public StorageStub() {","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"jonas-chow"},"content":"        super(\"\");","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"jonas-chow"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"jonas-chow"},"content":"     * Does not load tasks","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"jonas-chow"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"jonas-chow"},"content":"     * @return an empty list of tasks","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"jonas-chow"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"jonas-chow"},"content":"    @Override","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"jonas-chow"},"content":"    public ArrayList\u003cTask\u003e load() {","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"jonas-chow"},"content":"        return new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"jonas-chow"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"jonas-chow"},"content":"     * Does not save tasks","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"jonas-chow"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"jonas-chow"},"content":"     * @param tasks The tasks to be saved","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"jonas-chow"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"jonas-chow"},"content":"    @Override","lastModifiedDate":"2021-08-30"},{"lineNumber":32,"author":{"gitId":"jonas-chow"},"content":"    public void save(ArrayList\u003cTask\u003e tasks) {}","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"jonas-chow"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"jonas-chow":33}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jonas-chow"},"content":"package duke.task;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"jonas-chow"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"jonas-chow"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"jonas-chow"},"content":" * Class representing a deadline that has a date to be completed by","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"jonas-chow"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"jonas-chow"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-15"},{"lineNumber":9,"author":{"gitId":"jonas-chow"},"content":"    private LocalDate date;","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":11,"author":{"gitId":"jonas-chow"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"jonas-chow"},"content":"     * Constructor for deadline, setting its name and date, and marking it not done.","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"jonas-chow"},"content":"     * @param name name of the deadline","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"jonas-chow"},"content":"     * @param date date the deadline is by","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"jonas-chow"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"jonas-chow"},"content":"    public Deadline(String name, LocalDate date) {","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"jonas-chow"},"content":"        super(name);","lastModifiedDate":"2021-08-15"},{"lineNumber":18,"author":{"gitId":"jonas-chow"},"content":"        this.date \u003d date;","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"jonas-chow"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"jonas-chow"},"content":"     * Returns whether the deadline is today.","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"jonas-chow"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"jonas-chow"},"content":"     * @return true if the date is today. False otherwise.","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"jonas-chow"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"jonas-chow"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"jonas-chow"},"content":"    public boolean isToday() {","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"jonas-chow"},"content":"        return date.equals(LocalDate.now());","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":30,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":31,"author":{"gitId":"jonas-chow"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"jonas-chow"},"content":"     * Loads a deadline from data parsed from the save file","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"jonas-chow"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"jonas-chow"},"content":"     * @param loadDatas A line from the csv, split by commas","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"jonas-chow"},"content":"     * @return Deadline created from provided data","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"jonas-chow"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"jonas-chow"},"content":"    public static Deadline load(String[] loadDatas) {","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"jonas-chow"},"content":"        boolean isDone \u003d loadDatas[1].equals(\"o\");","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"jonas-chow"},"content":"        String name \u003d loadDatas[2];","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"jonas-chow"},"content":"        LocalDate time \u003d LocalDate.parse(loadDatas[3]);","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"jonas-chow"},"content":"        Deadline deadline \u003d new Deadline(name, time);","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"jonas-chow"},"content":"        if (isDone) {","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"jonas-chow"},"content":"            deadline.doTask();","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"jonas-chow"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":47,"author":{"gitId":"jonas-chow"},"content":"        return deadline;","lastModifiedDate":"2021-08-22"},{"lineNumber":48,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":49,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":50,"author":{"gitId":"jonas-chow"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"jonas-chow"},"content":"     * Returns whether the deadline has passed.","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"jonas-chow"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"jonas-chow"},"content":"     * @return true if the date is before today. False otherwise.","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"jonas-chow"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"jonas-chow"},"content":"    @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":56,"author":{"gitId":"jonas-chow"},"content":"    public boolean isExpired() {","lastModifiedDate":"2021-08-23"},{"lineNumber":57,"author":{"gitId":"jonas-chow"},"content":"        return date.isBefore(LocalDate.now());","lastModifiedDate":"2021-08-23"},{"lineNumber":58,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":59,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":60,"author":{"gitId":"jonas-chow"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"jonas-chow"},"content":"     * Returns a string representation of the deadline and its data","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"jonas-chow"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":63,"author":{"gitId":"jonas-chow"},"content":"     * @return string representation of the deadline","lastModifiedDate":"2021-08-24"},{"lineNumber":64,"author":{"gitId":"jonas-chow"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"jonas-chow"},"content":"    @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":66,"author":{"gitId":"jonas-chow"},"content":"    public String toString() {","lastModifiedDate":"2021-08-23"},{"lineNumber":67,"author":{"gitId":"jonas-chow"},"content":"        return \"[D] \" + super.toString() + \" (by: \" + date + \")\";","lastModifiedDate":"2021-08-23"},{"lineNumber":68,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":69,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":70,"author":{"gitId":"jonas-chow"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":71,"author":{"gitId":"jonas-chow"},"content":"     * Returns a string representing the deadline compliant to the saveFile format","lastModifiedDate":"2021-08-24"},{"lineNumber":72,"author":{"gitId":"jonas-chow"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":73,"author":{"gitId":"jonas-chow"},"content":"     * @return String to be saved as a line in save.csv","lastModifiedDate":"2021-08-24"},{"lineNumber":74,"author":{"gitId":"jonas-chow"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":75,"author":{"gitId":"jonas-chow"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":76,"author":{"gitId":"jonas-chow"},"content":"    public String getSaveString() {","lastModifiedDate":"2021-08-22"},{"lineNumber":77,"author":{"gitId":"jonas-chow"},"content":"        return \"d,\" + super.getSaveString() + \",\" + date;","lastModifiedDate":"2021-08-23"},{"lineNumber":78,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":79,"author":{"gitId":"jonas-chow"},"content":"}","lastModifiedDate":"2021-08-15"}],"authorContributionMap":{"jonas-chow":79}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jonas-chow"},"content":"package duke.task;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"jonas-chow"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"jonas-chow"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"jonas-chow"},"content":" * Class representing an event that happens at a specified date","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"jonas-chow"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"jonas-chow"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-15"},{"lineNumber":9,"author":{"gitId":"jonas-chow"},"content":"    private LocalDate date;","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":11,"author":{"gitId":"jonas-chow"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"jonas-chow"},"content":"     * Constructor for event, setting its name and date, and marking it not done.","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"jonas-chow"},"content":"     * @param name name of the event","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"jonas-chow"},"content":"     * @param date date the event is at","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"jonas-chow"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"jonas-chow"},"content":"    public Event(String name, LocalDate date) {","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"jonas-chow"},"content":"        super(name);","lastModifiedDate":"2021-08-15"},{"lineNumber":18,"author":{"gitId":"jonas-chow"},"content":"        this.date \u003d date;","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"jonas-chow"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"jonas-chow"},"content":"     * Returns whether the event is happening today.","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"jonas-chow"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"jonas-chow"},"content":"     * @return true if the date is today. False otherwise.","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"jonas-chow"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"jonas-chow"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"jonas-chow"},"content":"    public boolean isToday() {","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"jonas-chow"},"content":"        return date.equals(LocalDate.now());","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":30,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":31,"author":{"gitId":"jonas-chow"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"jonas-chow"},"content":"     * Loads an event from data parsed from the save file","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"jonas-chow"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"jonas-chow"},"content":"     * @param loadDatas A line from the csv, split by commas","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"jonas-chow"},"content":"     * @return Event created from provided data","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"jonas-chow"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"jonas-chow"},"content":"    public static Event load(String[] loadDatas) {","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"jonas-chow"},"content":"        boolean isDone \u003d loadDatas[1].equals(\"o\");","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"jonas-chow"},"content":"        String name \u003d loadDatas[2];","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"jonas-chow"},"content":"        LocalDate time \u003d LocalDate.parse(loadDatas[3]);","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"jonas-chow"},"content":"        Event event \u003d new Event(name, time);","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"jonas-chow"},"content":"        if (isDone) {","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"jonas-chow"},"content":"            event.doTask();","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"jonas-chow"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":47,"author":{"gitId":"jonas-chow"},"content":"        return event;","lastModifiedDate":"2021-08-22"},{"lineNumber":48,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":49,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":50,"author":{"gitId":"jonas-chow"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"jonas-chow"},"content":"     * Returns whether the event has passed.","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"jonas-chow"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"jonas-chow"},"content":"     * @return true if the date is before today. False otherwise.","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"jonas-chow"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"jonas-chow"},"content":"    @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":56,"author":{"gitId":"jonas-chow"},"content":"    public boolean isExpired() {","lastModifiedDate":"2021-08-23"},{"lineNumber":57,"author":{"gitId":"jonas-chow"},"content":"        return date.isBefore(LocalDate.now());","lastModifiedDate":"2021-08-23"},{"lineNumber":58,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":59,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":60,"author":{"gitId":"jonas-chow"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"jonas-chow"},"content":"     * Returns a string representation of the event and its data","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"jonas-chow"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":63,"author":{"gitId":"jonas-chow"},"content":"     * @return string representation of the event","lastModifiedDate":"2021-08-24"},{"lineNumber":64,"author":{"gitId":"jonas-chow"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"jonas-chow"},"content":"    @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":66,"author":{"gitId":"jonas-chow"},"content":"    public String toString() {","lastModifiedDate":"2021-08-23"},{"lineNumber":67,"author":{"gitId":"jonas-chow"},"content":"        return \"[E] \" + super.toString() + \" (at: \" + date + \")\";","lastModifiedDate":"2021-08-23"},{"lineNumber":68,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":69,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":70,"author":{"gitId":"jonas-chow"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":71,"author":{"gitId":"jonas-chow"},"content":"     * Returns a string representing the event compliant to the saveFile format","lastModifiedDate":"2021-08-24"},{"lineNumber":72,"author":{"gitId":"jonas-chow"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":73,"author":{"gitId":"jonas-chow"},"content":"     * @return String to be saved as a line in save.csv","lastModifiedDate":"2021-08-24"},{"lineNumber":74,"author":{"gitId":"jonas-chow"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":75,"author":{"gitId":"jonas-chow"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":76,"author":{"gitId":"jonas-chow"},"content":"    public String getSaveString() {","lastModifiedDate":"2021-08-22"},{"lineNumber":77,"author":{"gitId":"jonas-chow"},"content":"        return \"e,\" + super.getSaveString() + \",\" + date;","lastModifiedDate":"2021-08-23"},{"lineNumber":78,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":79,"author":{"gitId":"jonas-chow"},"content":"}","lastModifiedDate":"2021-08-15"}],"authorContributionMap":{"jonas-chow":79}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jonas-chow"},"content":"package duke.task;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"jonas-chow"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"jonas-chow"},"content":" * Abstract class representing a task","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"jonas-chow"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"jonas-chow"},"content":"public abstract class Task {","lastModifiedDate":"2021-08-15"},{"lineNumber":7,"author":{"gitId":"jonas-chow"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"jonas-chow"},"content":"    protected String name;","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":10,"author":{"gitId":"jonas-chow"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"jonas-chow"},"content":"     * Constructor for a Task that sets its name and sets it to not done.","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"jonas-chow"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"jonas-chow"},"content":"     * @param name name of the task","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"jonas-chow"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"jonas-chow"},"content":"    public Task(String name) {","lastModifiedDate":"2021-08-15"},{"lineNumber":16,"author":{"gitId":"jonas-chow"},"content":"        this.name \u003d name;","lastModifiedDate":"2021-08-15"},{"lineNumber":17,"author":{"gitId":"jonas-chow"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":19,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":20,"author":{"gitId":"jonas-chow"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"jonas-chow"},"content":"     * Marks the task as done","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"jonas-chow"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"jonas-chow"},"content":"    public void doTask() {","lastModifiedDate":"2021-08-15"},{"lineNumber":24,"author":{"gitId":"jonas-chow"},"content":"        isDone \u003d true;","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":26,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":27,"author":{"gitId":"jonas-chow"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"jonas-chow"},"content":"     * Returns whether the task is done.","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"jonas-chow"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"jonas-chow"},"content":"     * @return true if task is done, false if task is not done","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"jonas-chow"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"jonas-chow"},"content":"    public boolean isDone() {","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"jonas-chow"},"content":"        return isDone;","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"jonas-chow"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"jonas-chow"},"content":"     * Returns whether the task is expired. A task with no date is not expired.","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"jonas-chow"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"jonas-chow"},"content":"     * @return whether the task is expired","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"jonas-chow"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"jonas-chow"},"content":"    public boolean isExpired() {","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"jonas-chow"},"content":"        return false;","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"jonas-chow"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"jonas-chow"},"content":"     * Returns whether the task is happening today.","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"jonas-chow"},"content":"     * A task with no date is not happening today.","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"jonas-chow"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"jonas-chow"},"content":"     * @return whether the task is happening today","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"jonas-chow"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"jonas-chow"},"content":"    public boolean isToday() {","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"jonas-chow"},"content":"        return false;","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":55,"author":{"gitId":"jonas-chow"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"jonas-chow"},"content":"     * Returns the name of the task","lastModifiedDate":"2021-08-24"},{"lineNumber":57,"author":{"gitId":"jonas-chow"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"jonas-chow"},"content":"     * @return name of the task","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"jonas-chow"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":60,"author":{"gitId":"jonas-chow"},"content":"    public String getName() {","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"jonas-chow"},"content":"        return name;","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":63,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":64,"author":{"gitId":"jonas-chow"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"jonas-chow"},"content":"     * Returns a string representation of the task, including its status and name","lastModifiedDate":"2021-08-24"},{"lineNumber":66,"author":{"gitId":"jonas-chow"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":67,"author":{"gitId":"jonas-chow"},"content":"     * @return string representation of the task","lastModifiedDate":"2021-08-24"},{"lineNumber":68,"author":{"gitId":"jonas-chow"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":69,"author":{"gitId":"jonas-chow"},"content":"    @Override","lastModifiedDate":"2021-08-15"},{"lineNumber":70,"author":{"gitId":"jonas-chow"},"content":"    public String toString() {","lastModifiedDate":"2021-08-15"},{"lineNumber":71,"author":{"gitId":"jonas-chow"},"content":"        return \"[\" + (isDone ? \"X\" : \" \") + \"] \" + name;","lastModifiedDate":"2021-08-24"},{"lineNumber":72,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":73,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":74,"author":{"gitId":"jonas-chow"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":75,"author":{"gitId":"jonas-chow"},"content":"     * Returns a string compliant to the saveFile format","lastModifiedDate":"2021-08-24"},{"lineNumber":76,"author":{"gitId":"jonas-chow"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":77,"author":{"gitId":"jonas-chow"},"content":"     * @return String to be saved as a line in save.csv","lastModifiedDate":"2021-08-24"},{"lineNumber":78,"author":{"gitId":"jonas-chow"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":79,"author":{"gitId":"jonas-chow"},"content":"    public String getSaveString() {","lastModifiedDate":"2021-08-22"},{"lineNumber":80,"author":{"gitId":"jonas-chow"},"content":"        return (isDone ? \"o,\" : \"x,\") + name;","lastModifiedDate":"2021-08-24"},{"lineNumber":81,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":82,"author":{"gitId":"jonas-chow"},"content":"}","lastModifiedDate":"2021-08-15"}],"authorContributionMap":{"jonas-chow":82}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jonas-chow"},"content":"package duke.task;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"jonas-chow"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-15"},{"lineNumber":4,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":5,"author":{"gitId":"jonas-chow"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-27"},{"lineNumber":6,"author":{"gitId":"jonas-chow"},"content":"import duke.io.Storage;","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":8,"author":{"gitId":"jonas-chow"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"jonas-chow"},"content":" * Class representing the list of tasks","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"jonas-chow"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"jonas-chow"},"content":"public class TaskList {","lastModifiedDate":"2021-08-15"},{"lineNumber":12,"author":{"gitId":"jonas-chow"},"content":"    private final ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"jonas-chow"},"content":"    private final Storage storage;","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":15,"author":{"gitId":"jonas-chow"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"jonas-chow"},"content":"     * Constructor of task list. Loads tasks from specified savefile.","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"jonas-chow"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"jonas-chow"},"content":"     * @param storage The storage system that manages saving and loading","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"jonas-chow"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"jonas-chow"},"content":"    public TaskList(Storage storage) {","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"jonas-chow"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"jonas-chow"},"content":"        this.tasks \u003d storage.load();","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"jonas-chow"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"jonas-chow"},"content":"     * Adds the task into the taskList","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"jonas-chow"},"content":"     * Also saves the taskList and queues a message to be printed","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"jonas-chow"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"jonas-chow"},"content":"     * @param task The task to be added","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"jonas-chow"},"content":"     * @return The response","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"jonas-chow"},"content":"     * @throws DukeException I/O exception from saving the taskList state","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"jonas-chow"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"jonas-chow"},"content":"    public String addTask(Task task) throws DukeException {","lastModifiedDate":"2021-08-30"},{"lineNumber":34,"author":{"gitId":"jonas-chow"},"content":"        tasks.add(task);","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"jonas-chow"},"content":"        save();","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"jonas-chow"},"content":"        return \"Got it. I\u0027ve added this task:\\n  \" + task.toString() + \"\\n\" + getTaskLengthReport();","lastModifiedDate":"2021-08-30"},{"lineNumber":38,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":39,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":40,"author":{"gitId":"jonas-chow"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"jonas-chow"},"content":"     * Marks the specified task as done","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"jonas-chow"},"content":"     * Also saves the taskList and queues a message to be printed","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"jonas-chow"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"jonas-chow"},"content":"     * @param taskNum The number of the task to be marked as done (1-indexed)","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"jonas-chow"},"content":"     * @return The response","lastModifiedDate":"2021-08-30"},{"lineNumber":46,"author":{"gitId":"jonas-chow"},"content":"     * @throws DukeException Exception from out of range index, or from saving the list","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"jonas-chow"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"jonas-chow"},"content":"    public String doTask(int taskNum) throws DukeException {","lastModifiedDate":"2021-08-30"},{"lineNumber":49,"author":{"gitId":"jonas-chow"},"content":"        int idx \u003d getTaskIndexFromTaskNum(taskNum);","lastModifiedDate":"2021-08-23"},{"lineNumber":50,"author":{"gitId":"jonas-chow"},"content":"        Task task \u003d tasks.get(idx);","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"jonas-chow"},"content":"        task.doTask();","lastModifiedDate":"2021-08-18"},{"lineNumber":52,"author":{"gitId":"jonas-chow"},"content":"        save();","lastModifiedDate":"2021-08-22"},{"lineNumber":53,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":54,"author":{"gitId":"jonas-chow"},"content":"        return \"Nice! I\u0027ve marked this task as done:\\n  \" + task.toString();","lastModifiedDate":"2021-08-30"},{"lineNumber":55,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":56,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":57,"author":{"gitId":"jonas-chow"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"jonas-chow"},"content":"     * Deletes the specified task","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"jonas-chow"},"content":"     * Also saves the taskList and queues a message to be printed","lastModifiedDate":"2021-08-24"},{"lineNumber":60,"author":{"gitId":"jonas-chow"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"jonas-chow"},"content":"     * @param taskNum The number of the task to be deleted (1-indexed)","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"jonas-chow"},"content":"     * @return The response","lastModifiedDate":"2021-08-30"},{"lineNumber":63,"author":{"gitId":"jonas-chow"},"content":"     * @throws DukeException Exception from out of range index, or from saving the list","lastModifiedDate":"2021-08-24"},{"lineNumber":64,"author":{"gitId":"jonas-chow"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"jonas-chow"},"content":"    public String deleteTask(int taskNum) throws DukeException {","lastModifiedDate":"2021-08-30"},{"lineNumber":66,"author":{"gitId":"jonas-chow"},"content":"        int idx \u003d getTaskIndexFromTaskNum(taskNum);","lastModifiedDate":"2021-08-23"},{"lineNumber":67,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":68,"author":{"gitId":"jonas-chow"},"content":"        Task task \u003d tasks.get(idx);","lastModifiedDate":"2021-08-24"},{"lineNumber":69,"author":{"gitId":"jonas-chow"},"content":"        tasks.remove(idx);","lastModifiedDate":"2021-08-24"},{"lineNumber":70,"author":{"gitId":"jonas-chow"},"content":"        save();","lastModifiedDate":"2021-08-22"},{"lineNumber":71,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":72,"author":{"gitId":"jonas-chow"},"content":"        return \"Noted! I\u0027ve removed this task:\\n  \" + task.toString() + \"\\n\" + getTaskLengthReport();","lastModifiedDate":"2021-08-30"},{"lineNumber":73,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":74,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":75,"author":{"gitId":"jonas-chow"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":76,"author":{"gitId":"jonas-chow"},"content":"     * Deletes all tasks that have been marked as done","lastModifiedDate":"2021-08-24"},{"lineNumber":77,"author":{"gitId":"jonas-chow"},"content":"     * Also saves the taskList and queues a message to be printed","lastModifiedDate":"2021-08-24"},{"lineNumber":78,"author":{"gitId":"jonas-chow"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":79,"author":{"gitId":"jonas-chow"},"content":"     * @return The response","lastModifiedDate":"2021-08-30"},{"lineNumber":80,"author":{"gitId":"jonas-chow"},"content":"     * @throws DukeException I/O exception from saving the taskList state","lastModifiedDate":"2021-08-24"},{"lineNumber":81,"author":{"gitId":"jonas-chow"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":82,"author":{"gitId":"jonas-chow"},"content":"    public String deleteDone() throws DukeException {","lastModifiedDate":"2021-08-30"},{"lineNumber":83,"author":{"gitId":"jonas-chow"},"content":"        tasks.removeIf(Task::isDone);","lastModifiedDate":"2021-08-24"},{"lineNumber":84,"author":{"gitId":"jonas-chow"},"content":"        save();","lastModifiedDate":"2021-08-23"},{"lineNumber":85,"author":{"gitId":"jonas-chow"},"content":"        return \"Noted! I\u0027ve removed all completed tasks.\\n\" + getTaskLengthReport();","lastModifiedDate":"2021-08-30"},{"lineNumber":86,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":87,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":88,"author":{"gitId":"jonas-chow"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":89,"author":{"gitId":"jonas-chow"},"content":"     * Deletes all tasks that are expired","lastModifiedDate":"2021-08-24"},{"lineNumber":90,"author":{"gitId":"jonas-chow"},"content":"     * Also saves the taskList and queues a message to be printed","lastModifiedDate":"2021-08-24"},{"lineNumber":91,"author":{"gitId":"jonas-chow"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":92,"author":{"gitId":"jonas-chow"},"content":"     * @return The response","lastModifiedDate":"2021-08-30"},{"lineNumber":93,"author":{"gitId":"jonas-chow"},"content":"     * @throws DukeException I/O exception from saving the taskList state","lastModifiedDate":"2021-08-24"},{"lineNumber":94,"author":{"gitId":"jonas-chow"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":95,"author":{"gitId":"jonas-chow"},"content":"    public String deleteExpired() throws DukeException {","lastModifiedDate":"2021-08-30"},{"lineNumber":96,"author":{"gitId":"jonas-chow"},"content":"        tasks.removeIf(Task::isExpired);","lastModifiedDate":"2021-08-24"},{"lineNumber":97,"author":{"gitId":"jonas-chow"},"content":"        save();","lastModifiedDate":"2021-08-23"},{"lineNumber":98,"author":{"gitId":"jonas-chow"},"content":"        return \"Noted! I\u0027ve removed all expired tasks.\\n\" + getTaskLengthReport();","lastModifiedDate":"2021-08-30"},{"lineNumber":99,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":100,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":101,"author":{"gitId":"jonas-chow"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":102,"author":{"gitId":"jonas-chow"},"content":"     * Queues a message listing all the tasks to be printed","lastModifiedDate":"2021-08-24"},{"lineNumber":103,"author":{"gitId":"jonas-chow"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":104,"author":{"gitId":"jonas-chow"},"content":"     * @return The response","lastModifiedDate":"2021-08-30"},{"lineNumber":105,"author":{"gitId":"jonas-chow"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":106,"author":{"gitId":"jonas-chow"},"content":"    public String list() {","lastModifiedDate":"2021-08-30"},{"lineNumber":107,"author":{"gitId":"jonas-chow"},"content":"        int size \u003d tasks.size();","lastModifiedDate":"2021-08-24"},{"lineNumber":108,"author":{"gitId":"jonas-chow"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2021-08-30"},{"lineNumber":109,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":110,"author":{"gitId":"jonas-chow"},"content":"        if (size \u003d\u003d 0) {","lastModifiedDate":"2021-08-23"},{"lineNumber":111,"author":{"gitId":"jonas-chow"},"content":"            sb.append(\"No tasks yet!\");","lastModifiedDate":"2021-08-30"},{"lineNumber":112,"author":{"gitId":"jonas-chow"},"content":"        } else {","lastModifiedDate":"2021-08-23"},{"lineNumber":113,"author":{"gitId":"jonas-chow"},"content":"            for (int i \u003d 0; i \u003c size; i++) {","lastModifiedDate":"2021-08-23"},{"lineNumber":114,"author":{"gitId":"jonas-chow"},"content":"                Task task \u003d tasks.get(i);","lastModifiedDate":"2021-08-24"},{"lineNumber":115,"author":{"gitId":"jonas-chow"},"content":"                sb.append(i + 1);","lastModifiedDate":"2021-08-30"},{"lineNumber":116,"author":{"gitId":"jonas-chow"},"content":"                sb.append(\". \");","lastModifiedDate":"2021-08-30"},{"lineNumber":117,"author":{"gitId":"jonas-chow"},"content":"                sb.append(task.toString());","lastModifiedDate":"2021-08-30"},{"lineNumber":118,"author":{"gitId":"jonas-chow"},"content":"                sb.append(\u0027\\n\u0027);","lastModifiedDate":"2021-08-30"},{"lineNumber":119,"author":{"gitId":"jonas-chow"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":120,"author":{"gitId":"jonas-chow"},"content":"            // delete the last newline character","lastModifiedDate":"2021-08-30"},{"lineNumber":121,"author":{"gitId":"jonas-chow"},"content":"            sb.deleteCharAt(sb.length() - 1);","lastModifiedDate":"2021-08-30"},{"lineNumber":122,"author":{"gitId":"jonas-chow"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":123,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":124,"author":{"gitId":"jonas-chow"},"content":"        return sb.toString();","lastModifiedDate":"2021-08-30"},{"lineNumber":125,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":126,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":127,"author":{"gitId":"jonas-chow"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":128,"author":{"gitId":"jonas-chow"},"content":"     * Finds all tasks with name matching the search string (case insensitive)","lastModifiedDate":"2021-08-24"},{"lineNumber":129,"author":{"gitId":"jonas-chow"},"content":"     * Prints the tasks and their status","lastModifiedDate":"2021-08-24"},{"lineNumber":130,"author":{"gitId":"jonas-chow"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":131,"author":{"gitId":"jonas-chow"},"content":"     * @param searchString the string to find in the tasks","lastModifiedDate":"2021-08-24"},{"lineNumber":132,"author":{"gitId":"jonas-chow"},"content":"     * @return The response","lastModifiedDate":"2021-08-30"},{"lineNumber":133,"author":{"gitId":"jonas-chow"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":134,"author":{"gitId":"jonas-chow"},"content":"    public String find(String searchString) {","lastModifiedDate":"2021-08-30"},{"lineNumber":135,"author":{"gitId":"jonas-chow"},"content":"        int size \u003d tasks.size();","lastModifiedDate":"2021-08-24"},{"lineNumber":136,"author":{"gitId":"jonas-chow"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2021-08-30"},{"lineNumber":137,"author":{"gitId":"jonas-chow"},"content":"        int foundCount \u003d 0;","lastModifiedDate":"2021-08-24"},{"lineNumber":138,"author":{"gitId":"jonas-chow"},"content":"        sb.append(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2021-08-30"},{"lineNumber":139,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":140,"author":{"gitId":"jonas-chow"},"content":"        for (int i \u003d 0; i \u003c size; i++) {","lastModifiedDate":"2021-08-24"},{"lineNumber":141,"author":{"gitId":"jonas-chow"},"content":"            Task task \u003d tasks.get(i);","lastModifiedDate":"2021-08-24"},{"lineNumber":142,"author":{"gitId":"jonas-chow"},"content":"            // case insensitive search","lastModifiedDate":"2021-08-24"},{"lineNumber":143,"author":{"gitId":"jonas-chow"},"content":"            if (task.getName().toLowerCase().contains(searchString.toLowerCase())) {","lastModifiedDate":"2021-08-24"},{"lineNumber":144,"author":{"gitId":"jonas-chow"},"content":"                // print each task indented, in a new line","lastModifiedDate":"2021-08-24"},{"lineNumber":145,"author":{"gitId":"jonas-chow"},"content":"                sb.append(\u0027\\n\u0027);","lastModifiedDate":"2021-08-30"},{"lineNumber":146,"author":{"gitId":"jonas-chow"},"content":"                sb.append(i + 1);","lastModifiedDate":"2021-08-30"},{"lineNumber":147,"author":{"gitId":"jonas-chow"},"content":"                sb.append(\". \");","lastModifiedDate":"2021-08-30"},{"lineNumber":148,"author":{"gitId":"jonas-chow"},"content":"                sb.append(task.toString());","lastModifiedDate":"2021-08-30"},{"lineNumber":149,"author":{"gitId":"jonas-chow"},"content":"                foundCount++;","lastModifiedDate":"2021-08-24"},{"lineNumber":150,"author":{"gitId":"jonas-chow"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":151,"author":{"gitId":"jonas-chow"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":152,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":153,"author":{"gitId":"jonas-chow"},"content":"        if (foundCount \u003d\u003d 0) {","lastModifiedDate":"2021-08-24"},{"lineNumber":154,"author":{"gitId":"jonas-chow"},"content":"            return \"No matching tasks!\";","lastModifiedDate":"2021-08-30"},{"lineNumber":155,"author":{"gitId":"jonas-chow"},"content":"        } else {","lastModifiedDate":"2021-08-30"},{"lineNumber":156,"author":{"gitId":"jonas-chow"},"content":"            return sb.toString();","lastModifiedDate":"2021-08-30"},{"lineNumber":157,"author":{"gitId":"jonas-chow"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":158,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":159,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":160,"author":{"gitId":"jonas-chow"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":161,"author":{"gitId":"jonas-chow"},"content":"     * Returns the 0-indexed index of the task from it\u0027s 1-indexed index","lastModifiedDate":"2021-08-24"},{"lineNumber":162,"author":{"gitId":"jonas-chow"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":163,"author":{"gitId":"jonas-chow"},"content":"     * @param taskNum 1-indexed index of the task","lastModifiedDate":"2021-08-24"},{"lineNumber":164,"author":{"gitId":"jonas-chow"},"content":"     * @return 0-indexed index of the task","lastModifiedDate":"2021-08-24"},{"lineNumber":165,"author":{"gitId":"jonas-chow"},"content":"     * @throws DukeException Exception thrown if the index is out of range","lastModifiedDate":"2021-08-24"},{"lineNumber":166,"author":{"gitId":"jonas-chow"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":167,"author":{"gitId":"jonas-chow"},"content":"    private int getTaskIndexFromTaskNum(int taskNum) throws DukeException {","lastModifiedDate":"2021-08-23"},{"lineNumber":168,"author":{"gitId":"jonas-chow"},"content":"        if (taskNum \u003c\u003d 0 || taskNum \u003e tasks.size()) {","lastModifiedDate":"2021-08-24"},{"lineNumber":169,"author":{"gitId":"jonas-chow"},"content":"            throw new DukeException(\"Please input the ID of a task!\");","lastModifiedDate":"2021-08-18"},{"lineNumber":170,"author":{"gitId":"jonas-chow"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":171,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":172,"author":{"gitId":"jonas-chow"},"content":"        // tasks are 1-indexed to the user, but 0-indexed by implementation","lastModifiedDate":"2021-08-18"},{"lineNumber":173,"author":{"gitId":"jonas-chow"},"content":"        return taskNum - 1;","lastModifiedDate":"2021-08-23"},{"lineNumber":174,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":175,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":176,"author":{"gitId":"jonas-chow"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":177,"author":{"gitId":"jonas-chow"},"content":"     * Returns a string telling the user how many tasks are in the list","lastModifiedDate":"2021-08-24"},{"lineNumber":178,"author":{"gitId":"jonas-chow"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":179,"author":{"gitId":"jonas-chow"},"content":"     * @return string telling the user how many tasks are in the list","lastModifiedDate":"2021-08-24"},{"lineNumber":180,"author":{"gitId":"jonas-chow"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":181,"author":{"gitId":"jonas-chow"},"content":"    private String getTaskLengthReport() {","lastModifiedDate":"2021-08-27"},{"lineNumber":182,"author":{"gitId":"jonas-chow"},"content":"        return \"Now you have \" + tasks.size()","lastModifiedDate":"2021-08-24"},{"lineNumber":183,"author":{"gitId":"jonas-chow"},"content":"                + (tasks.size() !\u003d 1 ? \" tasks\" : \" task\") + \" in the list.\";","lastModifiedDate":"2021-08-24"},{"lineNumber":184,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":185,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":186,"author":{"gitId":"jonas-chow"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":187,"author":{"gitId":"jonas-chow"},"content":"     * Saves the state of the taskList","lastModifiedDate":"2021-08-24"},{"lineNumber":188,"author":{"gitId":"jonas-chow"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":189,"author":{"gitId":"jonas-chow"},"content":"     * @throws DukeException I/O exception from saving","lastModifiedDate":"2021-08-24"},{"lineNumber":190,"author":{"gitId":"jonas-chow"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":191,"author":{"gitId":"jonas-chow"},"content":"    private void save() throws DukeException {","lastModifiedDate":"2021-08-22"},{"lineNumber":192,"author":{"gitId":"jonas-chow"},"content":"        storage.save(tasks);","lastModifiedDate":"2021-08-30"},{"lineNumber":193,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":194,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":195,"author":{"gitId":"jonas-chow"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":196,"author":{"gitId":"jonas-chow"},"content":"     * Returns the taskList to operate on without any side effects","lastModifiedDate":"2021-08-24"},{"lineNumber":197,"author":{"gitId":"jonas-chow"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":198,"author":{"gitId":"jonas-chow"},"content":"     * @return the taskList","lastModifiedDate":"2021-08-24"},{"lineNumber":199,"author":{"gitId":"jonas-chow"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":200,"author":{"gitId":"jonas-chow"},"content":"    protected ArrayList\u003cTask\u003e getList() {","lastModifiedDate":"2021-08-24"},{"lineNumber":201,"author":{"gitId":"jonas-chow"},"content":"        return tasks;","lastModifiedDate":"2021-08-24"},{"lineNumber":202,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":203,"author":{"gitId":"jonas-chow"},"content":"}","lastModifiedDate":"2021-08-15"}],"authorContributionMap":{"jonas-chow":203}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jonas-chow"},"content":"package duke.task;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"jonas-chow"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"jonas-chow"},"content":" * Class representing a todo task that can be marked as done","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"jonas-chow"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"jonas-chow"},"content":"public class ToDo extends Task {","lastModifiedDate":"2021-08-15"},{"lineNumber":7,"author":{"gitId":"jonas-chow"},"content":"    public ToDo(String name) {","lastModifiedDate":"2021-08-15"},{"lineNumber":8,"author":{"gitId":"jonas-chow"},"content":"        super(name);","lastModifiedDate":"2021-08-15"},{"lineNumber":9,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":10,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":11,"author":{"gitId":"jonas-chow"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"jonas-chow"},"content":"     * Loads a ToDo from data parsed from the save file","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"jonas-chow"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"jonas-chow"},"content":"     * @param loadDatas A line from the csv, split by commas","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"jonas-chow"},"content":"     * @return ToDo created from provided data","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"jonas-chow"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"jonas-chow"},"content":"    public static ToDo load(String[] loadDatas) {","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"jonas-chow"},"content":"        boolean isDone \u003d loadDatas[1].equals(\"o\");","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"jonas-chow"},"content":"        String name \u003d loadDatas[2];","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"jonas-chow"},"content":"        ToDo todo \u003d new ToDo(name);","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"jonas-chow"},"content":"        if (isDone) {","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"jonas-chow"},"content":"            todo.doTask();","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"jonas-chow"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"jonas-chow"},"content":"        return todo;","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"jonas-chow"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"jonas-chow"},"content":"     * Returns a string representation of the ToDo and its status","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"jonas-chow"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"jonas-chow"},"content":"     * @return string representation of the ToDo","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"jonas-chow"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"jonas-chow"},"content":"    @Override","lastModifiedDate":"2021-08-15"},{"lineNumber":35,"author":{"gitId":"jonas-chow"},"content":"    public String toString() {","lastModifiedDate":"2021-08-15"},{"lineNumber":36,"author":{"gitId":"jonas-chow"},"content":"        return \"[T] \" + super.toString();","lastModifiedDate":"2021-08-15"},{"lineNumber":37,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":38,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"jonas-chow"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"jonas-chow"},"content":"     * Returns a string representing the ToDo compliant to the saveFile format","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"jonas-chow"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"jonas-chow"},"content":"     * @return String to be saved as a line in save.csv","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"jonas-chow"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"jonas-chow"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"jonas-chow"},"content":"    public String getSaveString() {","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"jonas-chow"},"content":"        return \"t,\" + super.getSaveString();","lastModifiedDate":"2021-08-22"},{"lineNumber":47,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":48,"author":{"gitId":"jonas-chow"},"content":"}","lastModifiedDate":"2021-08-15"}],"authorContributionMap":{"jonas-chow":48}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"jonas-chow"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":3,"author":{"gitId":"jonas-chow"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"jonas-chow"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"jonas-chow"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"jonas-chow"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"jonas-chow"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"jonas-chow"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"jonas-chow"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"jonas-chow"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"jonas-chow"},"content":"    \u003c/children\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"jonas-chow"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"jonas-chow"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"jonas-chow"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"jonas-chow"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"jonas-chow":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"jonas-chow"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":3,"author":{"gitId":"jonas-chow"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"jonas-chow"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"jonas-chow"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"jonas-chow"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"jonas-chow"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"jonas-chow"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.application.MainWindow\"\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"jonas-chow"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"jonas-chow"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"30.0\" prefWidth\u003d\"300.0\" promptText\u003d\"Type command here...\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" /\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"jonas-chow"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"30.0\" prefWidth\u003d\"100.0\" text\u003d\"Send\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" /\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"jonas-chow"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"570.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\" AnchorPane.bottomAnchor\u003d\"30.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"jonas-chow"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"jonas-chow"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"570.0\" prefWidth\u003d\"388.0\" /\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"jonas-chow"},"content":"            \u003c/content\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"jonas-chow"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"jonas-chow"},"content":"    \u003c/children\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"jonas-chow"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"jonas-chow":19}},{"path":"src/test/java/duke/command/CommandsTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jonas-chow"},"content":"package duke.command;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"jonas-chow"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-08-27"},{"lineNumber":4,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"jonas-chow"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-27"},{"lineNumber":6,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"jonas-chow"},"content":"class CommandsTest {","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"jonas-chow"},"content":"    @Test","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"jonas-chow"},"content":"    void isCommand() {","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"jonas-chow"},"content":"        assertTrue(Commands.DEADLINE.isCommand(\"deadline\"));","lastModifiedDate":"2021-08-27"},{"lineNumber":12,"author":{"gitId":"jonas-chow"},"content":"        assertTrue(Commands.DELETE.isCommand(\"delete\"));","lastModifiedDate":"2021-08-27"},{"lineNumber":13,"author":{"gitId":"jonas-chow"},"content":"        assertTrue(Commands.DONE.isCommand(\"done\"));","lastModifiedDate":"2021-08-27"},{"lineNumber":14,"author":{"gitId":"jonas-chow"},"content":"        assertTrue(Commands.EVENT.isCommand(\"event\"));","lastModifiedDate":"2021-08-27"},{"lineNumber":15,"author":{"gitId":"jonas-chow"},"content":"        assertTrue(Commands.EXIT.isCommand(\"bye\"));","lastModifiedDate":"2021-08-27"},{"lineNumber":16,"author":{"gitId":"jonas-chow"},"content":"        assertTrue(Commands.LIST.isCommand(\"list\"));","lastModifiedDate":"2021-08-27"},{"lineNumber":17,"author":{"gitId":"jonas-chow"},"content":"        assertTrue(Commands.TODO.isCommand(\"todo\"));","lastModifiedDate":"2021-08-27"},{"lineNumber":18,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"jonas-chow"},"content":"    @Test","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"jonas-chow"},"content":"    void getCommand() {","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"jonas-chow"},"content":"        assertTrue(Commands.DEADLINE.getCommand() instanceof DeadlineCommand);","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"jonas-chow"},"content":"        assertTrue(Commands.DELETE.getCommand() instanceof DeleteCommand);","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"jonas-chow"},"content":"        assertTrue(Commands.DONE.getCommand() instanceof DoneCommand);","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"jonas-chow"},"content":"        assertTrue(Commands.EVENT.getCommand() instanceof EventCommand);","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"jonas-chow"},"content":"        assertTrue(Commands.EXIT.getCommand() instanceof ExitCommand);","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"jonas-chow"},"content":"        assertTrue(Commands.LIST.getCommand() instanceof ListCommand);","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"jonas-chow"},"content":"        assertTrue(Commands.TODO.getCommand() instanceof ToDoCommand);","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"jonas-chow"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"jonas-chow":31}},{"path":"src/test/java/duke/task/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jonas-chow"},"content":"package duke.task;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"jonas-chow"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-27"},{"lineNumber":4,"author":{"gitId":"jonas-chow"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-08-27"},{"lineNumber":5,"author":{"gitId":"jonas-chow"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-08-27"},{"lineNumber":6,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"jonas-chow"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"jonas-chow"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"jonas-chow"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"jonas-chow"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-27"},{"lineNumber":13,"author":{"gitId":"jonas-chow"},"content":"import duke.stubs.StorageStub;","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"jonas-chow"},"content":"class TaskListTest {","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"jonas-chow"},"content":"    @Test","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"jonas-chow"},"content":"    void addTask() throws DukeException {","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"jonas-chow"},"content":"        TaskList taskList \u003d new TaskList(new StorageStub());","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"jonas-chow"},"content":"        Task todo \u003d new ToDo(\"name\");","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"jonas-chow"},"content":"        Task deadline \u003d new Deadline(\"name\", LocalDate.now());","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"jonas-chow"},"content":"        Task event \u003d new Event(\"name\", LocalDate.now());","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"jonas-chow"},"content":"        taskList.addTask(todo);","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"jonas-chow"},"content":"        taskList.addTask(deadline);","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"jonas-chow"},"content":"        taskList.addTask(event);","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"jonas-chow"},"content":"        ArrayList\u003cTask\u003e expected \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"jonas-chow"},"content":"        expected.add(todo);","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"jonas-chow"},"content":"        expected.add(deadline);","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"jonas-chow"},"content":"        expected.add(event);","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"jonas-chow"},"content":"        assertEquals(taskList.getList(), expected);","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"jonas-chow"},"content":"    @Test","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"jonas-chow"},"content":"    void doTask() throws DukeException {","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"jonas-chow"},"content":"        TaskList taskList \u003d new TaskList(new StorageStub());","lastModifiedDate":"2021-08-30"},{"lineNumber":38,"author":{"gitId":"jonas-chow"},"content":"        Task toDo \u003d new ToDo(\"name\");","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"jonas-chow"},"content":"        taskList.getList().add(toDo);","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"jonas-chow"},"content":"        assertFalse(toDo.isDone);","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"jonas-chow"},"content":"        taskList.doTask(1);","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"jonas-chow"},"content":"        assertTrue(toDo.isDone);","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"jonas-chow"},"content":"    @Test","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"jonas-chow"},"content":"    void deleteTask() throws DukeException {","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"jonas-chow"},"content":"        TaskList taskList \u003d new TaskList(new StorageStub());","lastModifiedDate":"2021-08-30"},{"lineNumber":49,"author":{"gitId":"jonas-chow"},"content":"        Task toDo \u003d new ToDo(\"name\");","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"jonas-chow"},"content":"        taskList.getList().add(toDo);","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"jonas-chow"},"content":"        taskList.deleteTask(1);","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"jonas-chow"},"content":"        assertEquals(taskList.getList(), new ArrayList\u003cTask\u003e());","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"jonas-chow"},"content":"    @Test","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"jonas-chow"},"content":"    void deleteDone() throws DukeException {","lastModifiedDate":"2021-08-24"},{"lineNumber":57,"author":{"gitId":"jonas-chow"},"content":"        TaskList taskList \u003d new TaskList(new StorageStub());","lastModifiedDate":"2021-08-30"},{"lineNumber":58,"author":{"gitId":"jonas-chow"},"content":"        Task toDo1 \u003d new ToDo(\"name\");","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"jonas-chow"},"content":"        Task toDo2 \u003d new ToDo(\"name\");","lastModifiedDate":"2021-08-24"},{"lineNumber":60,"author":{"gitId":"jonas-chow"},"content":"        taskList.getList().add(toDo1);","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"jonas-chow"},"content":"        taskList.getList().add(toDo2);","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":63,"author":{"gitId":"jonas-chow"},"content":"        toDo2.isDone \u003d true;","lastModifiedDate":"2021-08-24"},{"lineNumber":64,"author":{"gitId":"jonas-chow"},"content":"        taskList.deleteDone();","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"jonas-chow"},"content":"        ArrayList\u003cTask\u003e expected \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-24"},{"lineNumber":66,"author":{"gitId":"jonas-chow"},"content":"        expected.add(toDo1);","lastModifiedDate":"2021-08-24"},{"lineNumber":67,"author":{"gitId":"jonas-chow"},"content":"        assertEquals(taskList.getList(), expected);","lastModifiedDate":"2021-08-24"},{"lineNumber":68,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":69,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":70,"author":{"gitId":"jonas-chow"},"content":"    @Test","lastModifiedDate":"2021-08-24"},{"lineNumber":71,"author":{"gitId":"jonas-chow"},"content":"    void deleteExpired() throws DukeException {","lastModifiedDate":"2021-08-24"},{"lineNumber":72,"author":{"gitId":"jonas-chow"},"content":"        TaskList taskList \u003d new TaskList(new StorageStub());","lastModifiedDate":"2021-08-30"},{"lineNumber":73,"author":{"gitId":"jonas-chow"},"content":"        Task deadline1 \u003d new Deadline(\"name\", LocalDate.now());","lastModifiedDate":"2021-08-24"},{"lineNumber":74,"author":{"gitId":"jonas-chow"},"content":"        Task deadline2 \u003d new Deadline(\"name\", LocalDate.parse(\"2010-01-01\"));","lastModifiedDate":"2021-08-24"},{"lineNumber":75,"author":{"gitId":"jonas-chow"},"content":"        taskList.getList().add(deadline1);","lastModifiedDate":"2021-08-24"},{"lineNumber":76,"author":{"gitId":"jonas-chow"},"content":"        taskList.getList().add(deadline2);","lastModifiedDate":"2021-08-24"},{"lineNumber":77,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":78,"author":{"gitId":"jonas-chow"},"content":"        taskList.deleteExpired();","lastModifiedDate":"2021-08-24"},{"lineNumber":79,"author":{"gitId":"jonas-chow"},"content":"        ArrayList\u003cTask\u003e expected \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-24"},{"lineNumber":80,"author":{"gitId":"jonas-chow"},"content":"        expected.add(deadline1);","lastModifiedDate":"2021-08-24"},{"lineNumber":81,"author":{"gitId":"jonas-chow"},"content":"        assertEquals(taskList.getList(), expected);","lastModifiedDate":"2021-08-24"},{"lineNumber":82,"author":{"gitId":"jonas-chow"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":83,"author":{"gitId":"jonas-chow"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"jonas-chow":83}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"jonas-chow"},"content":"todo hello","lastModifiedDate":"2021-08-15"},{"lineNumber":2,"author":{"gitId":"jonas-chow"},"content":"list","lastModifiedDate":"2021-08-15"},{"lineNumber":3,"author":{"gitId":"jonas-chow"},"content":"deadline bad format /by 31-12-2030","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"jonas-chow"},"content":"deadline far future /by 2030-12-31","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"jonas-chow"},"content":"list","lastModifiedDate":"2021-08-15"},{"lineNumber":6,"author":{"gitId":"jonas-chow"},"content":"event past /at 2020-01-01","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"jonas-chow"},"content":"list","lastModifiedDate":"2021-08-15"},{"lineNumber":8,"author":{"gitId":"jonas-chow"},"content":"done 1","lastModifiedDate":"2021-08-15"},{"lineNumber":9,"author":{"gitId":"jonas-chow"},"content":"list","lastModifiedDate":"2021-08-15"},{"lineNumber":10,"author":{"gitId":"jonas-chow"},"content":"done 2","lastModifiedDate":"2021-08-15"},{"lineNumber":11,"author":{"gitId":"jonas-chow"},"content":"list","lastModifiedDate":"2021-08-15"},{"lineNumber":12,"author":{"gitId":"jonas-chow"},"content":"delete 2","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"jonas-chow"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"jonas-chow"},"content":"delete done","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"jonas-chow"},"content":"list","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"jonas-chow"},"content":"delete expired","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"jonas-chow"},"content":"list","lastModifiedDate":"2021-08-15"},{"lineNumber":18,"author":{"gitId":"jonas-chow"},"content":"goodbye","lastModifiedDate":"2021-08-15"},{"lineNumber":19,"author":{"gitId":"jonas-chow"},"content":"bye","lastModifiedDate":"2021-08-15"}],"authorContributionMap":{"jonas-chow":19}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"jonas-chow"},"content":"# delete existing save","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"jonas-chow"},"content":"if [ -e \"./save.csv\" ]","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"jonas-chow"},"content":"then","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"jonas-chow"},"content":"    rm save.csv","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"jonas-chow"},"content":"fi","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"jonas-chow"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"jonas-chow":6,"-":38}}]

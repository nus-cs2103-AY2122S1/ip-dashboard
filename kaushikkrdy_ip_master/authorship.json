[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"kaushikkrdy"},"content":"# DukeBot","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"kaushikkrdy"},"content":"\u003e “Not only should you have a to-do list, but it must become your best friend.” — Jim Kwik [(source)](https://medium.com/@oaklinejournal/25-quotes-from-successful-people-on-the-power-of-writing-to-do-lists-8a0b3729a34c)","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"kaushikkrdy"},"content":"DukeBot is a greenfield Java Project made in CS2103T (Software Engineering).","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"kaushikkrdy"},"content":"It\u0027s named after the Java mascot _Duke_. ","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"kaushikkrdy"},"content":"## About","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"kaushikkrdy"},"content":"DukeBot is a CLI (Command Line Interface) program that functions as a to-do list. ","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"kaushikkrdy"},"content":"It frees your mind of having to remember things you need to do. ","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"kaushikkrdy"},"content":"It\u0027s: ","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"kaushikkrdy"},"content":"* Easy to install ","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"kaushikkrdy"},"content":"* ~~Easy~~ **SUPER EASY** to use","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"kaushikkrdy"},"content":"* Text-based ","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"kaushikkrdy"},"content":"Start using it **today** to increase your productivity!","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"kaushikkrdy"},"content":"## Features ","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"kaushikkrdy"},"content":"Features:","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"kaushikkrdy"},"content":"* Managing tasks","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"kaushikkrdy"},"content":"* Managing deadlines","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"kaushikkrdy"},"content":"* Managing events","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"kaushikkrdy"},"content":"* Filter your tasks","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"kaushikkrdy"},"content":"* Save the date and time of your tasks","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":34,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":35,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":36,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":37,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"3. After that, locate the `src/main/java/Duke.java` file, right-click it, and choose `Run Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2021-07-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"kaushikkrdy"},"content":"   Hello! I\u0027m Duke.","lastModifiedDate":"2021-08-31"},{"lineNumber":43,"author":{"gitId":"kaushikkrdy"},"content":"   What can I do for you?","lastModifiedDate":"2021-08-31"},{"lineNumber":44,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":46,"author":{"gitId":"kaushikkrdy"},"content":"## For programmers","lastModifiedDate":"2021-08-31"},{"lineNumber":47,"author":{"gitId":"kaushikkrdy"},"content":"If you are a Java programmer, you can use it to practice Java too. Here\u0027s the main method:","lastModifiedDate":"2021-08-31"},{"lineNumber":48,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":49,"author":{"gitId":"kaushikkrdy"},"content":"```java ","lastModifiedDate":"2021-08-31"},{"lineNumber":50,"author":{"gitId":"kaushikkrdy"},"content":"public Duke {","lastModifiedDate":"2021-08-31"},{"lineNumber":51,"author":{"gitId":"kaushikkrdy"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-31"},{"lineNumber":52,"author":{"gitId":"kaushikkrdy"},"content":"        new Duke(\"data/duke.txt\").run();","lastModifiedDate":"2021-08-31"},{"lineNumber":53,"author":{"gitId":"kaushikkrdy"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":54,"author":{"gitId":"kaushikkrdy"},"content":"}","lastModifiedDate":"2021-08-31"},{"lineNumber":55,"author":{"gitId":"kaushikkrdy"},"content":"```","lastModifiedDate":"2021-08-31"},{"lineNumber":56,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":57,"author":{"gitId":"kaushikkrdy"},"content":"`data/duke.txt` is where your tasks will be saved and retrieved from when needed.","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"kaushikkrdy":41,"-":16}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"kaushikkrdy"},"content":"    mainClassName \u003d \"duke.Duke\"","lastModifiedDate":"2021-08-31"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"kaushikkrdy":1,"-":45}},{"path":"src/main/java/duke/CommandType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaushikkrdy"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"kaushikkrdy"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"kaushikkrdy"},"content":" * Commands that are available for use by user.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"kaushikkrdy"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"kaushikkrdy"},"content":"public enum CommandType {","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"kaushikkrdy"},"content":"    LIST, BYE, FIND, DELETE, DONE,  TODO, EVENT, DEADLINE","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"kaushikkrdy"},"content":"}","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"kaushikkrdy":9}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaushikkrdy"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"kaushikkrdy"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"kaushikkrdy"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"kaushikkrdy"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"kaushikkrdy"},"content":" * Creates Deadline tasks with descriptions and date and time.","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"kaushikkrdy"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"kaushikkrdy"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-17"},{"lineNumber":10,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":11,"author":{"gitId":"kaushikkrdy"},"content":"    protected LocalDateTime dateTimeBy;","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"kaushikkrdy"},"content":"    protected String by;","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"kaushikkrdy"},"content":"    DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d/MM/yyyy HHmm\");","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"kaushikkrdy"},"content":"    ","lastModifiedDate":"2021-08-17"},{"lineNumber":16,"author":{"gitId":"kaushikkrdy"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"kaushikkrdy"},"content":"     * Creates a Deadline object from user command using the description and date and time.","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"kaushikkrdy"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":19,"author":{"gitId":"kaushikkrdy"},"content":"     * @param description describes the nature of the task.","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"kaushikkrdy"},"content":"     * @param by is the date and time by which the task is due, converted to LocalDateTime object.","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"kaushikkrdy"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"kaushikkrdy"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2021-08-17"},{"lineNumber":23,"author":{"gitId":"kaushikkrdy"},"content":"        super(description);","lastModifiedDate":"2021-08-17"},{"lineNumber":24,"author":{"gitId":"kaushikkrdy"},"content":"        this.by \u003d by;","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"kaushikkrdy"},"content":"        this.dateTimeBy \u003d LocalDateTime.parse(by, formatter);","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"kaushikkrdy"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":27,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":28,"author":{"gitId":"kaushikkrdy"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"kaushikkrdy"},"content":"     * Creates a Deadline object from a disk task string using the description, number representing done status and date and time.","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"kaushikkrdy"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":31,"author":{"gitId":"kaushikkrdy"},"content":"     * @param num number retrieved from the drive that determines if the task is done or not.","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"kaushikkrdy"},"content":"     * @param description describes the nature of the task.","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"kaushikkrdy"},"content":"     * @param by is the date and time by which the task is due, converted to LocalDateTime object.","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"kaushikkrdy"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"kaushikkrdy"},"content":"    public Deadline(String num, String description, String by) {","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"kaushikkrdy"},"content":"        this(description, by);","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"kaushikkrdy"},"content":"        this.isDone \u003d !num.equals(\"0\");","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"kaushikkrdy"},"content":"        this.dateTimeBy \u003d LocalDateTime.parse(by, formatter);","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"kaushikkrdy"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"kaushikkrdy"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"kaushikkrdy"},"content":"     * Returns a formatted date and time from the LocalDateTime object.","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"kaushikkrdy"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":44,"author":{"gitId":"kaushikkrdy"},"content":"     * @return date and time following the format: MMM dd yyyy h:mm a.","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"kaushikkrdy"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"kaushikkrdy"},"content":"    public String getFormattedBy() {","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"kaushikkrdy"},"content":"        return this.dateTimeBy.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy h:mm a\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"kaushikkrdy"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"kaushikkrdy"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":51,"author":{"gitId":"kaushikkrdy"},"content":"     * Returns the string format in which to store the task to the disk, which is D | 1 or 0 | description | datetime.","lastModifiedDate":"2021-08-26"},{"lineNumber":52,"author":{"gitId":"kaushikkrdy"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":53,"author":{"gitId":"kaushikkrdy"},"content":"     * @return new string format in which to store the task to the disk which is different from toString.","lastModifiedDate":"2021-08-26"},{"lineNumber":54,"author":{"gitId":"kaushikkrdy"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"kaushikkrdy"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"kaushikkrdy"},"content":"    public String getFileString() {","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"kaushikkrdy"},"content":"        return String.format(\"D | %d | %s | %s\", this.isDone ? 1 : 0, this.description, this.by);","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"kaushikkrdy"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"kaushikkrdy"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"kaushikkrdy"},"content":"     * Returns a string in the form of \"[D] (done status) (description) (by: datetime)\" when task is printed.","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"kaushikkrdy"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":63,"author":{"gitId":"kaushikkrdy"},"content":"     * @return string that is displayed when task is printed.","lastModifiedDate":"2021-08-26"},{"lineNumber":64,"author":{"gitId":"kaushikkrdy"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":65,"author":{"gitId":"kaushikkrdy"},"content":"    @Override","lastModifiedDate":"2021-08-17"},{"lineNumber":66,"author":{"gitId":"kaushikkrdy"},"content":"    public String toString() {","lastModifiedDate":"2021-08-17"},{"lineNumber":67,"author":{"gitId":"kaushikkrdy"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + getFormattedBy() + \")\";","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"kaushikkrdy"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":69,"author":{"gitId":"kaushikkrdy"},"content":"}","lastModifiedDate":"2021-08-17"}],"authorContributionMap":{"kaushikkrdy":69}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaushikkrdy"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"kaushikkrdy"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-17"},{"lineNumber":4,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":5,"author":{"gitId":"kaushikkrdy"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"kaushikkrdy"},"content":" * Handles receiving input from user and starting/stopping the program.","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"kaushikkrdy"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":9,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":10,"author":{"gitId":"kaushikkrdy"},"content":"    private Storage storage;","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"kaushikkrdy"},"content":"    private TaskList tasks;","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"kaushikkrdy"},"content":"    private Ui ui;","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":14,"author":{"gitId":"kaushikkrdy"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"kaushikkrdy"},"content":"     * Creates Ui and Storage instances.","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"kaushikkrdy"},"content":"     * Loads data from fisk into TaskList object to create list of tasks user currently has.","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"kaushikkrdy"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":18,"author":{"gitId":"kaushikkrdy"},"content":"     * @param filePath denotes the relative file path of where the tasks will be saved in the disk.","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"kaushikkrdy"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"kaushikkrdy"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"kaushikkrdy"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"kaushikkrdy"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"kaushikkrdy"},"content":"        tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"kaushikkrdy"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":25,"author":{"gitId":"kaushikkrdy"},"content":"    ","lastModifiedDate":"2021-08-17"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":27,"author":{"gitId":"kaushikkrdy"},"content":"        new Duke(\"data/duke.txt\").run();","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"kaushikkrdy"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"kaushikkrdy"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"kaushikkrdy"},"content":"     * Waits continuously for input from user and executes the appropriate commands","lastModifiedDate":"2021-08-27"},{"lineNumber":32,"author":{"gitId":"kaushikkrdy"},"content":"     * based on command type.","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"kaushikkrdy"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"kaushikkrdy"},"content":"    public void run() {","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"kaushikkrdy"},"content":"        ui.printGreeting();","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":37,"author":{"gitId":"kaushikkrdy"},"content":"        Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-17"},{"lineNumber":38,"author":{"gitId":"kaushikkrdy"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":40,"author":{"gitId":"kaushikkrdy"},"content":"        while (!isExit \u0026\u0026 scanner.hasNextLine()) {","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"kaushikkrdy"},"content":"            try {","lastModifiedDate":"2021-08-18"},{"lineNumber":42,"author":{"gitId":"kaushikkrdy"},"content":"                String fullCommand \u003d scanner.nextLine().trim();","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"kaushikkrdy"},"content":"                CommandType commandType \u003d Parser.parse(fullCommand);","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":45,"author":{"gitId":"kaushikkrdy"},"content":"                switch (commandType) {","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"kaushikkrdy"},"content":"                case LIST:","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"kaushikkrdy"},"content":"                    ui.showTasks(tasks.getTaskList());","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"kaushikkrdy"},"content":"                    break;","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"kaushikkrdy"},"content":"                case BYE:","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"kaushikkrdy"},"content":"                    ui.printGoodbye();","lastModifiedDate":"2021-08-26"},{"lineNumber":51,"author":{"gitId":"kaushikkrdy"},"content":"                    isExit \u003d true;","lastModifiedDate":"2021-08-26"},{"lineNumber":52,"author":{"gitId":"kaushikkrdy"},"content":"                    break;","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"kaushikkrdy"},"content":"                case FIND:","lastModifiedDate":"2021-08-26"},{"lineNumber":54,"author":{"gitId":"kaushikkrdy"},"content":"                    tasks.find(fullCommand.substring(5), ui);","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"kaushikkrdy"},"content":"                    break;","lastModifiedDate":"2021-08-26"},{"lineNumber":56,"author":{"gitId":"kaushikkrdy"},"content":"                case DELETE:","lastModifiedDate":"2021-08-26"},{"lineNumber":57,"author":{"gitId":"kaushikkrdy"},"content":"                    tasks.delete(fullCommand.substring(7), storage, ui);","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"kaushikkrdy"},"content":"                    break;","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"kaushikkrdy"},"content":"                case DONE:","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"kaushikkrdy"},"content":"                    tasks.done(fullCommand.substring(5), storage, ui);","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"kaushikkrdy"},"content":"                    break;","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"kaushikkrdy"},"content":"                case TODO:","lastModifiedDate":"2021-08-26"},{"lineNumber":63,"author":{"gitId":"kaushikkrdy"},"content":"                    tasks.createTodo(fullCommand.substring(5), storage, ui);","lastModifiedDate":"2021-08-26"},{"lineNumber":64,"author":{"gitId":"kaushikkrdy"},"content":"                    break;","lastModifiedDate":"2021-08-26"},{"lineNumber":65,"author":{"gitId":"kaushikkrdy"},"content":"                case DEADLINE:","lastModifiedDate":"2021-08-26"},{"lineNumber":66,"author":{"gitId":"kaushikkrdy"},"content":"                    tasks.createDeadline(fullCommand.substring(9), storage, ui);","lastModifiedDate":"2021-08-26"},{"lineNumber":67,"author":{"gitId":"kaushikkrdy"},"content":"                    break;","lastModifiedDate":"2021-08-26"},{"lineNumber":68,"author":{"gitId":"kaushikkrdy"},"content":"                case EVENT:","lastModifiedDate":"2021-08-26"},{"lineNumber":69,"author":{"gitId":"kaushikkrdy"},"content":"                    tasks.createEvent(fullCommand.substring(6), storage, ui);","lastModifiedDate":"2021-08-26"},{"lineNumber":70,"author":{"gitId":"kaushikkrdy"},"content":"                    break;","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"kaushikkrdy"},"content":"                }","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"kaushikkrdy"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2021-08-26"},{"lineNumber":73,"author":{"gitId":"kaushikkrdy"},"content":"                ui.showError(e.getMessage());","lastModifiedDate":"2021-08-26"},{"lineNumber":74,"author":{"gitId":"kaushikkrdy"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"kaushikkrdy"},"content":"        }","lastModifiedDate":"2021-08-17"},{"lineNumber":76,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":77,"author":{"gitId":"kaushikkrdy"},"content":"        scanner.close();","lastModifiedDate":"2021-08-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":79,"author":{"gitId":"kaushikkrdy"},"content":"}","lastModifiedDate":"2021-08-18"},{"lineNumber":80,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":81,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"kaushikkrdy":78,"-":3}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaushikkrdy"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"kaushikkrdy"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"kaushikkrdy"},"content":" * Creates exceptions caused by Duke program.","lastModifiedDate":"2021-08-27"},{"lineNumber":5,"author":{"gitId":"kaushikkrdy"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"kaushikkrdy"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"kaushikkrdy"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"kaushikkrdy"},"content":"     * Initialises exceptions with custom messages.","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"kaushikkrdy"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"kaushikkrdy"},"content":"     * @param message","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"kaushikkrdy"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"kaushikkrdy"},"content":"    public DukeException(String message) {","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"kaushikkrdy"},"content":"        super(message);","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"kaushikkrdy"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"kaushikkrdy"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"kaushikkrdy":16}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaushikkrdy"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"kaushikkrdy"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"kaushikkrdy"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"kaushikkrdy"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"kaushikkrdy"},"content":" * Creates Event tasks with descriptions and date and time.","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"kaushikkrdy"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"kaushikkrdy"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-17"},{"lineNumber":10,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":11,"author":{"gitId":"kaushikkrdy"},"content":"    protected LocalDateTime dateTimeAt;","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"kaushikkrdy"},"content":"    protected String at;","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"kaushikkrdy"},"content":"    DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d/MM/yyyy HHmm\");","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":16,"author":{"gitId":"kaushikkrdy"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"kaushikkrdy"},"content":"     * Creates an Event object from user command using the description and date and time.","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"kaushikkrdy"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":19,"author":{"gitId":"kaushikkrdy"},"content":"     * @param description describes the nature of the task.","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"kaushikkrdy"},"content":"     * @param at is the date and time at which the task is ocurring, converted to LocalDateTime object.","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"kaushikkrdy"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"kaushikkrdy"},"content":"    public Event(String description, String at) {","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"kaushikkrdy"},"content":"        super(description);","lastModifiedDate":"2021-08-17"},{"lineNumber":24,"author":{"gitId":"kaushikkrdy"},"content":"        this.at \u003d at;","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"kaushikkrdy"},"content":"        this.dateTimeAt \u003d LocalDateTime.parse(at, formatter);","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"kaushikkrdy"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":27,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":28,"author":{"gitId":"kaushikkrdy"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"kaushikkrdy"},"content":"     * Creates an Event object from a disk task string using the description, number representing done status and date and time.","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"kaushikkrdy"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":31,"author":{"gitId":"kaushikkrdy"},"content":"     * @param num number retrieved from the drive that determines if the task is done or not.","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"kaushikkrdy"},"content":"     * @param description describes the nature of the task.","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"kaushikkrdy"},"content":"     * @param at is the date and time at which the task is ocurring, converted to LocalDateTime object.","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"kaushikkrdy"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"kaushikkrdy"},"content":"    public Event(String num, String description, String at) {","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"kaushikkrdy"},"content":"        this(description, at);","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"kaushikkrdy"},"content":"        this.isDone \u003d !num.equals(\"0\");","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"kaushikkrdy"},"content":"        this.dateTimeAt \u003d LocalDateTime.parse(at, formatter);","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"kaushikkrdy"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"kaushikkrdy"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"kaushikkrdy"},"content":"     * Returns a formatted date and time from the LocalDateTime object.","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"kaushikkrdy"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":44,"author":{"gitId":"kaushikkrdy"},"content":"     * @return date and time following the format: MMM dd yyyy h:mm a.","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"kaushikkrdy"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"kaushikkrdy"},"content":"    public String getFormattedAt() {","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"kaushikkrdy"},"content":"        return this.dateTimeAt.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy h:mm a\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"kaushikkrdy"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"kaushikkrdy"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":51,"author":{"gitId":"kaushikkrdy"},"content":"     * Returns the string format in which to store the task to the disk, which is E | 1 or 0 | description | datetime.","lastModifiedDate":"2021-08-26"},{"lineNumber":52,"author":{"gitId":"kaushikkrdy"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":53,"author":{"gitId":"kaushikkrdy"},"content":"     * @return new string format in which to store the task to the disk which is different from toString.","lastModifiedDate":"2021-08-26"},{"lineNumber":54,"author":{"gitId":"kaushikkrdy"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"kaushikkrdy"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"kaushikkrdy"},"content":"    public String getFileString() {","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"kaushikkrdy"},"content":"        return String.format(\"E | %d | %s | %s\", this.isDone ? 1 : 0, this.description, this.at);","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"kaushikkrdy"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"kaushikkrdy"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"kaushikkrdy"},"content":"     * Returns a string in the form of \"[E] (done status) (description) (at: datetime)\" when task is printed.","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"kaushikkrdy"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":63,"author":{"gitId":"kaushikkrdy"},"content":"     * @return string that is displayed when task is printed.","lastModifiedDate":"2021-08-26"},{"lineNumber":64,"author":{"gitId":"kaushikkrdy"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":65,"author":{"gitId":"kaushikkrdy"},"content":"    @Override","lastModifiedDate":"2021-08-17"},{"lineNumber":66,"author":{"gitId":"kaushikkrdy"},"content":"    public String toString() {","lastModifiedDate":"2021-08-17"},{"lineNumber":67,"author":{"gitId":"kaushikkrdy"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + getFormattedAt() + \")\";","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"kaushikkrdy"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":69,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"kaushikkrdy"},"content":"}","lastModifiedDate":"2021-08-17"}],"authorContributionMap":{"kaushikkrdy":70}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaushikkrdy"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"kaushikkrdy"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"kaushikkrdy"},"content":" * Deals with interpreting the user command.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"kaushikkrdy"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"kaushikkrdy"},"content":"public class Parser {","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"kaushikkrdy"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"kaushikkrdy"},"content":"     * Returns the type of command user has entered if valid, or throws an exception.","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"kaushikkrdy"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":11,"author":{"gitId":"kaushikkrdy"},"content":"     * @param command entered by user in the terminal.","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"kaushikkrdy"},"content":"     * @return CommandType that denotes the type of command corresponding to the user input.","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"kaushikkrdy"},"content":"     * @throws DukeException if there is an invalid command or an incomplete command.","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"kaushikkrdy"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"kaushikkrdy"},"content":"    public static CommandType parse(String command) throws DukeException {","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"kaushikkrdy"},"content":"        if (command.equals(\"list\")) {","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"kaushikkrdy"},"content":"            return CommandType.LIST;","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"kaushikkrdy"},"content":"        } else if (command.equals(\"bye\")) {","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"kaushikkrdy"},"content":"            return CommandType.BYE;","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"kaushikkrdy"},"content":"        } else if (command.startsWith(\"find\")) {","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"kaushikkrdy"},"content":"            if(command.equals(\"find\")) {","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"kaushikkrdy"},"content":"                throw new DukeException(\"☹ OOPS!!! The find command needs a search term after it in the following format: \"","lastModifiedDate":"2021-08-27"},{"lineNumber":25,"author":{"gitId":"kaushikkrdy"},"content":"                        + \"find searchterm\");","lastModifiedDate":"2021-08-27"},{"lineNumber":26,"author":{"gitId":"kaushikkrdy"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"kaushikkrdy"},"content":"            return CommandType.FIND;","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"kaushikkrdy"},"content":"        } else if (command.startsWith(\"delete\")) {","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"kaushikkrdy"},"content":"            if (command.equals(\"delete\")) {","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"kaushikkrdy"},"content":"                throw new DukeException(\"☹ OOPS!!! The delete command needs a number after it in the following format:\"","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"kaushikkrdy"},"content":"                        + \" delete number\");","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"kaushikkrdy"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"kaushikkrdy"},"content":"            return CommandType.DELETE;","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"kaushikkrdy"},"content":"        } else if (command.startsWith(\"done\")) {","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"kaushikkrdy"},"content":"            if (command.equals(\"done\")) {","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"kaushikkrdy"},"content":"                throw new DukeException(\"☹ OOPS!!! The done command needs a number after it in the following format:\"","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"kaushikkrdy"},"content":"                        + \" done number\");","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"kaushikkrdy"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"kaushikkrdy"},"content":"            return CommandType.DONE;","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"kaushikkrdy"},"content":"        } else if (command.startsWith(\"todo\")) {","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"kaushikkrdy"},"content":"            if (command.equals(\"todo\")) {","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"kaushikkrdy"},"content":"                throw new DukeException(\"☹ OOPS!!! The description of a todo cannot be empty.\");","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"kaushikkrdy"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"kaushikkrdy"},"content":"            return CommandType.TODO;","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"kaushikkrdy"},"content":"        } else if (command.startsWith(\"deadline\")) {","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"kaushikkrdy"},"content":"            if (command.equals(\"deadline\")) {","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"kaushikkrdy"},"content":"                throw new DukeException(\"☹ OOPS!!! The description of a deadline cannot be empty.\");","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"kaushikkrdy"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"kaushikkrdy"},"content":"            return CommandType.DEADLINE;","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"kaushikkrdy"},"content":"        } else if (command.startsWith(\"event\")) {","lastModifiedDate":"2021-08-26"},{"lineNumber":51,"author":{"gitId":"kaushikkrdy"},"content":"            if (command.equals(\"event\")) {","lastModifiedDate":"2021-08-26"},{"lineNumber":52,"author":{"gitId":"kaushikkrdy"},"content":"                throw new DukeException(\"☹ OOPS!!! The description of an event cannot be empty.\");","lastModifiedDate":"2021-08-26"},{"lineNumber":53,"author":{"gitId":"kaushikkrdy"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":54,"author":{"gitId":"kaushikkrdy"},"content":"            return CommandType.EVENT;","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"kaushikkrdy"},"content":"        } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":56,"author":{"gitId":"kaushikkrdy"},"content":"            throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2021-08-26"},{"lineNumber":57,"author":{"gitId":"kaushikkrdy"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"kaushikkrdy"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"kaushikkrdy"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"kaushikkrdy":59}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaushikkrdy"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"kaushikkrdy"},"content":"import java.io.File;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"kaushikkrdy"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"kaushikkrdy"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"kaushikkrdy"},"content":"import java.nio.charset.StandardCharsets;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"kaushikkrdy"},"content":"import java.nio.file.Files;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"kaushikkrdy"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"kaushikkrdy"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"kaushikkrdy"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"kaushikkrdy"},"content":"import java.util.List;","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"kaushikkrdy"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"kaushikkrdy"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"kaushikkrdy"},"content":" * Deals with all file operations.","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"kaushikkrdy"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"kaushikkrdy"},"content":"public class Storage {","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"kaushikkrdy"},"content":"    private final String FILEPATH;","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"kaushikkrdy"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"kaushikkrdy"},"content":"     * Initialises Storage object with file path.","lastModifiedDate":"2021-08-27"},{"lineNumber":25,"author":{"gitId":"kaushikkrdy"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":26,"author":{"gitId":"kaushikkrdy"},"content":"     * @param filePath represents absolute file path of where user\u0027s tasks are stored.","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"kaushikkrdy"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"kaushikkrdy"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"kaushikkrdy"},"content":"        this.FILEPATH \u003d filePath;","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"kaushikkrdy"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"kaushikkrdy"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"kaushikkrdy"},"content":"     * Loads list of strings representing Task objects from the file.","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"kaushikkrdy"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":35,"author":{"gitId":"kaushikkrdy"},"content":"     * @return ArrayList of task strings.","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"kaushikkrdy"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"kaushikkrdy"},"content":"    public ArrayList\u003cString\u003e load() {","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"kaushikkrdy"},"content":"        ArrayList\u003cString\u003e taskStrings \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"kaushikkrdy"},"content":"        File file \u003d new File(FILEPATH);","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"kaushikkrdy"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"kaushikkrdy"},"content":"            if (!file.exists()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"kaushikkrdy"},"content":"                if (!file.getParentFile().exists()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"kaushikkrdy"},"content":"                    file.getParentFile().mkdirs();","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"kaushikkrdy"},"content":"                }","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"kaushikkrdy"},"content":"                file.createNewFile();","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"kaushikkrdy"},"content":"            } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"kaushikkrdy"},"content":"                Scanner s \u003d new Scanner(file);","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"kaushikkrdy"},"content":"                while (s.hasNext()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"kaushikkrdy"},"content":"                    taskStrings.add(s.nextLine());","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"kaushikkrdy"},"content":"                }","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"kaushikkrdy"},"content":"                return taskStrings;","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"kaushikkrdy"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"kaushikkrdy"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"kaushikkrdy"},"content":"            System.out.println(e);","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"kaushikkrdy"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"kaushikkrdy"},"content":"        return taskStrings;","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"kaushikkrdy"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"kaushikkrdy"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"kaushikkrdy"},"content":"     * Appends a line on the file.","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"kaushikkrdy"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":63,"author":{"gitId":"kaushikkrdy"},"content":"     * @param textToAdd new text that will be added to the file.","lastModifiedDate":"2021-08-26"},{"lineNumber":64,"author":{"gitId":"kaushikkrdy"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":65,"author":{"gitId":"kaushikkrdy"},"content":"    public void appendToFile(String textToAdd) {","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"kaushikkrdy"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"kaushikkrdy"},"content":"            FileWriter fw \u003d new FileWriter(FILEPATH, true);","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"kaushikkrdy"},"content":"            fw.write(textToAdd);","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"kaushikkrdy"},"content":"            fw.write(\"\\n\");","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"kaushikkrdy"},"content":"            fw.close();","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"kaushikkrdy"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"kaushikkrdy"},"content":"            System.out.println(e);","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"kaushikkrdy"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"kaushikkrdy"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":76,"author":{"gitId":"kaushikkrdy"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":77,"author":{"gitId":"kaushikkrdy"},"content":"     * Replaces specific line on the file.","lastModifiedDate":"2021-08-26"},{"lineNumber":78,"author":{"gitId":"kaushikkrdy"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":79,"author":{"gitId":"kaushikkrdy"},"content":"     * @param textToReplaceWith new text that will replace the old text.","lastModifiedDate":"2021-08-26"},{"lineNumber":80,"author":{"gitId":"kaushikkrdy"},"content":"     * @param lineNumber denotes the line number of the line that needs to be replaced.","lastModifiedDate":"2021-08-26"},{"lineNumber":81,"author":{"gitId":"kaushikkrdy"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":82,"author":{"gitId":"kaushikkrdy"},"content":"    public void replaceFileLine(String textToReplaceWith, int lineNumber) {","lastModifiedDate":"2021-08-25"},{"lineNumber":83,"author":{"gitId":"kaushikkrdy"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":84,"author":{"gitId":"kaushikkrdy"},"content":"            Path path \u003d Paths.get(FILEPATH);","lastModifiedDate":"2021-08-25"},{"lineNumber":85,"author":{"gitId":"kaushikkrdy"},"content":"            List\u003cString\u003e lines \u003d Files.readAllLines(path);","lastModifiedDate":"2021-08-25"},{"lineNumber":86,"author":{"gitId":"kaushikkrdy"},"content":"            lines.set(lineNumber, textToReplaceWith);","lastModifiedDate":"2021-08-25"},{"lineNumber":87,"author":{"gitId":"kaushikkrdy"},"content":"            Files.write(path, lines, StandardCharsets.UTF_8);","lastModifiedDate":"2021-08-25"},{"lineNumber":88,"author":{"gitId":"kaushikkrdy"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":89,"author":{"gitId":"kaushikkrdy"},"content":"            System.out.println(e);","lastModifiedDate":"2021-08-25"},{"lineNumber":90,"author":{"gitId":"kaushikkrdy"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":91,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":92,"author":{"gitId":"kaushikkrdy"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":93,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":94,"author":{"gitId":"kaushikkrdy"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":95,"author":{"gitId":"kaushikkrdy"},"content":"     * Deletes specific line from the file.","lastModifiedDate":"2021-08-26"},{"lineNumber":96,"author":{"gitId":"kaushikkrdy"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":97,"author":{"gitId":"kaushikkrdy"},"content":"     * @param lineNumber denotes the line number of the line that needs to be deleted.","lastModifiedDate":"2021-08-26"},{"lineNumber":98,"author":{"gitId":"kaushikkrdy"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":99,"author":{"gitId":"kaushikkrdy"},"content":"    public void deleteFileLine(int lineNumber) {","lastModifiedDate":"2021-08-25"},{"lineNumber":100,"author":{"gitId":"kaushikkrdy"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":101,"author":{"gitId":"kaushikkrdy"},"content":"            Path path \u003d Paths.get(FILEPATH);","lastModifiedDate":"2021-08-25"},{"lineNumber":102,"author":{"gitId":"kaushikkrdy"},"content":"            List\u003cString\u003e lines \u003d Files.readAllLines(path);","lastModifiedDate":"2021-08-25"},{"lineNumber":103,"author":{"gitId":"kaushikkrdy"},"content":"            lines.remove(lineNumber);","lastModifiedDate":"2021-08-25"},{"lineNumber":104,"author":{"gitId":"kaushikkrdy"},"content":"            Files.write(path, lines, StandardCharsets.UTF_8);","lastModifiedDate":"2021-08-25"},{"lineNumber":105,"author":{"gitId":"kaushikkrdy"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":106,"author":{"gitId":"kaushikkrdy"},"content":"            System.out.println(e);","lastModifiedDate":"2021-08-25"},{"lineNumber":107,"author":{"gitId":"kaushikkrdy"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":108,"author":{"gitId":"kaushikkrdy"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":109,"author":{"gitId":"kaushikkrdy"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"kaushikkrdy":109}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaushikkrdy"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"kaushikkrdy"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"kaushikkrdy"},"content":" * Abstract class for generic tasks with description.","lastModifiedDate":"2021-08-27"},{"lineNumber":5,"author":{"gitId":"kaushikkrdy"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"kaushikkrdy"},"content":"public abstract class Task {","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":8,"author":{"gitId":"kaushikkrdy"},"content":"    protected String description;","lastModifiedDate":"2021-08-17"},{"lineNumber":9,"author":{"gitId":"kaushikkrdy"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-17"},{"lineNumber":10,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":11,"author":{"gitId":"kaushikkrdy"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"kaushikkrdy"},"content":"     * Initialises Task object with a description and default undone status.","lastModifiedDate":"2021-08-27"},{"lineNumber":13,"author":{"gitId":"kaushikkrdy"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":14,"author":{"gitId":"kaushikkrdy"},"content":"     * @param description describes the nature of the task.","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"kaushikkrdy"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"kaushikkrdy"},"content":"    public Task(String description) {","lastModifiedDate":"2021-08-17"},{"lineNumber":17,"author":{"gitId":"kaushikkrdy"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-17"},{"lineNumber":18,"author":{"gitId":"kaushikkrdy"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-17"},{"lineNumber":19,"author":{"gitId":"kaushikkrdy"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":20,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":21,"author":{"gitId":"kaushikkrdy"},"content":"    public void setIsDone(boolean isDone) {","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"kaushikkrdy"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"kaushikkrdy"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":24,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":25,"author":{"gitId":"kaushikkrdy"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-17"},{"lineNumber":26,"author":{"gitId":"kaushikkrdy"},"content":"        return (isDone? \"[X]\" : \"[ ]\");","lastModifiedDate":"2021-08-17"},{"lineNumber":27,"author":{"gitId":"kaushikkrdy"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":28,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":29,"author":{"gitId":"kaushikkrdy"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":30,"author":{"gitId":"kaushikkrdy"},"content":"     * Returns the string format in which to store the task to the disk.","lastModifiedDate":"2021-08-31"},{"lineNumber":31,"author":{"gitId":"kaushikkrdy"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":32,"author":{"gitId":"kaushikkrdy"},"content":"     * @return new string format in which to store the task to the disk which is different from toString.","lastModifiedDate":"2021-08-31"},{"lineNumber":33,"author":{"gitId":"kaushikkrdy"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":34,"author":{"gitId":"kaushikkrdy"},"content":"    public abstract String getFileString();","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"kaushikkrdy"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"kaushikkrdy"},"content":"     * Returns a string in the form of \"(done status) (description)\" when task is printed.","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"kaushikkrdy"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":39,"author":{"gitId":"kaushikkrdy"},"content":"     * @return string that is displayed when task is printed.","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"kaushikkrdy"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"kaushikkrdy"},"content":"    @Override","lastModifiedDate":"2021-08-17"},{"lineNumber":42,"author":{"gitId":"kaushikkrdy"},"content":"    public String toString() {","lastModifiedDate":"2021-08-17"},{"lineNumber":43,"author":{"gitId":"kaushikkrdy"},"content":"        return String.format(\"%s %s\", getStatusIcon(), this.description);","lastModifiedDate":"2021-08-17"},{"lineNumber":44,"author":{"gitId":"kaushikkrdy"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":45,"author":{"gitId":"kaushikkrdy"},"content":"}","lastModifiedDate":"2021-08-17"}],"authorContributionMap":{"kaushikkrdy":45}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaushikkrdy"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"kaushikkrdy"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"kaushikkrdy"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"kaushikkrdy"},"content":"import java.util.List;","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"kaushikkrdy"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"kaushikkrdy"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"kaushikkrdy"},"content":" * Creates TaskList objects and handles all task list operations.","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"kaushikkrdy"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"kaushikkrdy"},"content":"public class TaskList {","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"kaushikkrdy"},"content":"    private ArrayList\u003cTask\u003e taskList;","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"kaushikkrdy"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"kaushikkrdy"},"content":"     * Converts the ArrayList of task strings to Task objects stored in the ArrayList of tasks.","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"kaushikkrdy"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":19,"author":{"gitId":"kaushikkrdy"},"content":"     * @param taskListStrings ArrayList of task strings taken from the disk file representing Task objects.","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"kaushikkrdy"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"kaushikkrdy"},"content":"    public TaskList(ArrayList\u003cString\u003e taskListStrings) {","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"kaushikkrdy"},"content":"        this.taskList \u003d convertToTasks(taskListStrings);","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"kaushikkrdy"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"kaushikkrdy"},"content":"    public ArrayList\u003cTask\u003e getTaskList() {","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"kaushikkrdy"},"content":"        return this.taskList;","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"kaushikkrdy"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"kaushikkrdy"},"content":"    /**","lastModifiedDate":"2021-08-27"},{"lineNumber":30,"author":{"gitId":"kaushikkrdy"},"content":"     * Finds tasks that match user\u0027s search term.","lastModifiedDate":"2021-08-27"},{"lineNumber":31,"author":{"gitId":"kaushikkrdy"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":32,"author":{"gitId":"kaushikkrdy"},"content":"     * @param searchTerm user wants to find all tasks that have descriptions matching user\u0027s search term.","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"kaushikkrdy"},"content":"     * @param ui handles interactions with user by printing the appropriate messages.","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"kaushikkrdy"},"content":"     * @throws DukeException if search term is not given alongside the find command in the following format: find searchterm.","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"kaushikkrdy"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"kaushikkrdy"},"content":"    public void find(String searchTerm, Ui ui) throws DukeException {","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"kaushikkrdy"},"content":"        if (searchTerm.isEmpty()) {","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"kaushikkrdy"},"content":"            throw new DukeException(\"Please provide a search term after the find command in the following format: find searchterm\");","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"kaushikkrdy"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"kaushikkrdy"},"content":"        try {","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"kaushikkrdy"},"content":"            List\u003cTask\u003e matchingTaskList \u003d this.taskList.stream()","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"kaushikkrdy"},"content":"                    .filter(task -\u003e task.toString().contains(searchTerm))","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"kaushikkrdy"},"content":"                    .collect(Collectors.toList());","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"kaushikkrdy"},"content":"            ui.showMatchingTasks(new ArrayList\u003cTask\u003e(matchingTaskList));","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"kaushikkrdy"},"content":"        } catch (StringIndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"kaushikkrdy"},"content":"            throw new DukeException(\"Please provide a search term after the find command in the following format: find searchterm\");","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"kaushikkrdy"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"kaushikkrdy"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"kaushikkrdy"},"content":"    /**","lastModifiedDate":"2021-08-27"},{"lineNumber":51,"author":{"gitId":"kaushikkrdy"},"content":"     * Marks a task in the task list done.","lastModifiedDate":"2021-08-27"},{"lineNumber":52,"author":{"gitId":"kaushikkrdy"},"content":"     * Updates the task as done in the disk using storage and prints appropriate messages using ui.","lastModifiedDate":"2021-08-26"},{"lineNumber":53,"author":{"gitId":"kaushikkrdy"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":54,"author":{"gitId":"kaushikkrdy"},"content":"     * @param num denotes the position of the task in the task list (if counting from 1).","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"kaushikkrdy"},"content":"     * @param storage handles updating the specified task from the disk as done.","lastModifiedDate":"2021-08-26"},{"lineNumber":56,"author":{"gitId":"kaushikkrdy"},"content":"     * @param ui handles interactions with user by printing the appropriate messages.","lastModifiedDate":"2021-08-26"},{"lineNumber":57,"author":{"gitId":"kaushikkrdy"},"content":"     * @throws DukeException if number given is not within the total number of tasks or done command does not follow the format: done number.","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"kaushikkrdy"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"kaushikkrdy"},"content":"    public void done(String num, Storage storage, Ui ui) throws DukeException {","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"kaushikkrdy"},"content":"        try {","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"kaushikkrdy"},"content":"            int listNum \u003d Integer.parseInt(num);","lastModifiedDate":"2021-08-26"},{"lineNumber":63,"author":{"gitId":"kaushikkrdy"},"content":"            this.taskList.get(listNum - 1).setIsDone(true);","lastModifiedDate":"2021-08-26"},{"lineNumber":64,"author":{"gitId":"kaushikkrdy"},"content":"            Task doneTask \u003d this.taskList.get(listNum - 1);","lastModifiedDate":"2021-08-26"},{"lineNumber":65,"author":{"gitId":"kaushikkrdy"},"content":"            storage.replaceFileLine(doneTask.getFileString(), listNum - 1);","lastModifiedDate":"2021-08-26"},{"lineNumber":66,"author":{"gitId":"kaushikkrdy"},"content":"            ui.printDoneMessage(doneTask);","lastModifiedDate":"2021-08-26"},{"lineNumber":67,"author":{"gitId":"kaushikkrdy"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-26"},{"lineNumber":68,"author":{"gitId":"kaushikkrdy"},"content":"            throw new DukeException(\"Please provide a number after the done command that is within the total number of tasks: \"","lastModifiedDate":"2021-08-26"},{"lineNumber":69,"author":{"gitId":"kaushikkrdy"},"content":"                    + this.taskList.size());","lastModifiedDate":"2021-08-26"},{"lineNumber":70,"author":{"gitId":"kaushikkrdy"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-08-26"},{"lineNumber":71,"author":{"gitId":"kaushikkrdy"},"content":"            throw new DukeException(\"☹ OOPS!!! The done command needs a number after it in the following format:\"","lastModifiedDate":"2021-08-26"},{"lineNumber":72,"author":{"gitId":"kaushikkrdy"},"content":"                    + \" done number\");","lastModifiedDate":"2021-08-26"},{"lineNumber":73,"author":{"gitId":"kaushikkrdy"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":74,"author":{"gitId":"kaushikkrdy"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":75,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":76,"author":{"gitId":"kaushikkrdy"},"content":"    /**","lastModifiedDate":"2021-08-27"},{"lineNumber":77,"author":{"gitId":"kaushikkrdy"},"content":"     * Deletes a task from the task list.","lastModifiedDate":"2021-08-27"},{"lineNumber":78,"author":{"gitId":"kaushikkrdy"},"content":"     * Deletes task from disk using storage and prints appropriate messages using ui.","lastModifiedDate":"2021-08-26"},{"lineNumber":79,"author":{"gitId":"kaushikkrdy"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":80,"author":{"gitId":"kaushikkrdy"},"content":"     * @param num denotes the position of the task in the task list (if counting from 1).","lastModifiedDate":"2021-08-26"},{"lineNumber":81,"author":{"gitId":"kaushikkrdy"},"content":"     * @param storage handles deleting the specified task from the disk.","lastModifiedDate":"2021-08-26"},{"lineNumber":82,"author":{"gitId":"kaushikkrdy"},"content":"     * @param ui handles interactions with user by printing the appropriate messages.","lastModifiedDate":"2021-08-26"},{"lineNumber":83,"author":{"gitId":"kaushikkrdy"},"content":"     * @throws DukeException if number given is not within the total number of tasks or delete command","lastModifiedDate":"2021-08-27"},{"lineNumber":84,"author":{"gitId":"kaushikkrdy"},"content":"     * does not follow the format: delete number.","lastModifiedDate":"2021-08-27"},{"lineNumber":85,"author":{"gitId":"kaushikkrdy"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":86,"author":{"gitId":"kaushikkrdy"},"content":"    public void delete(String num, Storage storage, Ui ui) throws DukeException {","lastModifiedDate":"2021-08-26"},{"lineNumber":87,"author":{"gitId":"kaushikkrdy"},"content":"        try {","lastModifiedDate":"2021-08-26"},{"lineNumber":88,"author":{"gitId":"kaushikkrdy"},"content":"            int listNum \u003d Integer.parseInt(num);","lastModifiedDate":"2021-08-26"},{"lineNumber":89,"author":{"gitId":"kaushikkrdy"},"content":"            Task deletedTask \u003d this.taskList.remove(listNum - 1);","lastModifiedDate":"2021-08-26"},{"lineNumber":90,"author":{"gitId":"kaushikkrdy"},"content":"            storage.deleteFileLine(listNum - 1);","lastModifiedDate":"2021-08-26"},{"lineNumber":91,"author":{"gitId":"kaushikkrdy"},"content":"            ui.printDeleteMessage(deletedTask);","lastModifiedDate":"2021-08-26"},{"lineNumber":92,"author":{"gitId":"kaushikkrdy"},"content":"            ui.printTaskListSize(this.taskList.size());","lastModifiedDate":"2021-08-26"},{"lineNumber":93,"author":{"gitId":"kaushikkrdy"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-26"},{"lineNumber":94,"author":{"gitId":"kaushikkrdy"},"content":"            throw new DukeException(\"Please provide a number after the delete command that is within the total number of tasks: \"","lastModifiedDate":"2021-08-26"},{"lineNumber":95,"author":{"gitId":"kaushikkrdy"},"content":"                    + this.taskList.size());","lastModifiedDate":"2021-08-26"},{"lineNumber":96,"author":{"gitId":"kaushikkrdy"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-08-26"},{"lineNumber":97,"author":{"gitId":"kaushikkrdy"},"content":"            throw new DukeException(\"☹ OOPS!!! The delete command needs a number after it in the following format:\"","lastModifiedDate":"2021-08-26"},{"lineNumber":98,"author":{"gitId":"kaushikkrdy"},"content":"                    + \" delete number\");","lastModifiedDate":"2021-08-26"},{"lineNumber":99,"author":{"gitId":"kaushikkrdy"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":100,"author":{"gitId":"kaushikkrdy"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":101,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":102,"author":{"gitId":"kaushikkrdy"},"content":"    /**","lastModifiedDate":"2021-08-27"},{"lineNumber":103,"author":{"gitId":"kaushikkrdy"},"content":"     * Creates a Todo task with the appropriate description.","lastModifiedDate":"2021-08-27"},{"lineNumber":104,"author":{"gitId":"kaushikkrdy"},"content":"     * Stores task in disk using storage and prints appropriate messages using ui.","lastModifiedDate":"2021-08-26"},{"lineNumber":105,"author":{"gitId":"kaushikkrdy"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":106,"author":{"gitId":"kaushikkrdy"},"content":"     * @param description describes the nature of the Deadline task.","lastModifiedDate":"2021-08-26"},{"lineNumber":107,"author":{"gitId":"kaushikkrdy"},"content":"     * @param storage handles storing the new task in the disk.","lastModifiedDate":"2021-08-26"},{"lineNumber":108,"author":{"gitId":"kaushikkrdy"},"content":"     * @param ui handles interactions with user by printing the appropriate messages.","lastModifiedDate":"2021-08-26"},{"lineNumber":109,"author":{"gitId":"kaushikkrdy"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":110,"author":{"gitId":"kaushikkrdy"},"content":"    public void createTodo(String description, Storage storage, Ui ui) {","lastModifiedDate":"2021-08-26"},{"lineNumber":111,"author":{"gitId":"kaushikkrdy"},"content":"        Task addedTask \u003d new Todo(description);","lastModifiedDate":"2021-08-26"},{"lineNumber":112,"author":{"gitId":"kaushikkrdy"},"content":"        this.taskList.add(addedTask);","lastModifiedDate":"2021-08-26"},{"lineNumber":113,"author":{"gitId":"kaushikkrdy"},"content":"        storage.appendToFile(addedTask.getFileString());","lastModifiedDate":"2021-08-26"},{"lineNumber":114,"author":{"gitId":"kaushikkrdy"},"content":"        ui.printAddMessage(addedTask);","lastModifiedDate":"2021-08-26"},{"lineNumber":115,"author":{"gitId":"kaushikkrdy"},"content":"        ui.printTaskListSize(this.taskList.size());","lastModifiedDate":"2021-08-26"},{"lineNumber":116,"author":{"gitId":"kaushikkrdy"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":117,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":118,"author":{"gitId":"kaushikkrdy"},"content":"    /**","lastModifiedDate":"2021-08-27"},{"lineNumber":119,"author":{"gitId":"kaushikkrdy"},"content":"     * Creates a Deadline task with the appropriate description.","lastModifiedDate":"2021-08-27"},{"lineNumber":120,"author":{"gitId":"kaushikkrdy"},"content":"     * Stores task in disk using storage and prints appropriate messages using ui.","lastModifiedDate":"2021-08-26"},{"lineNumber":121,"author":{"gitId":"kaushikkrdy"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":122,"author":{"gitId":"kaushikkrdy"},"content":"     * @param description describes the nature of the Deadline task.","lastModifiedDate":"2021-08-26"},{"lineNumber":123,"author":{"gitId":"kaushikkrdy"},"content":"     * @param storage handles storing the new task in the disk.","lastModifiedDate":"2021-08-26"},{"lineNumber":124,"author":{"gitId":"kaushikkrdy"},"content":"     * @param ui handles interactions with user by printing the appropriate messages.","lastModifiedDate":"2021-08-26"},{"lineNumber":125,"author":{"gitId":"kaushikkrdy"},"content":"     * @throws DukeException if description contains incorrectly formatted date/time or does not follow the format:","lastModifiedDate":"2021-08-27"},{"lineNumber":126,"author":{"gitId":"kaushikkrdy"},"content":"     * deadline task /by datetime","lastModifiedDate":"2021-08-27"},{"lineNumber":127,"author":{"gitId":"kaushikkrdy"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":128,"author":{"gitId":"kaushikkrdy"},"content":"    public void createDeadline(String description, Storage storage, Ui ui) throws DukeException {","lastModifiedDate":"2021-08-26"},{"lineNumber":129,"author":{"gitId":"kaushikkrdy"},"content":"        try {","lastModifiedDate":"2021-08-26"},{"lineNumber":130,"author":{"gitId":"kaushikkrdy"},"content":"            String newDescription \u003d description.substring(0, description.indexOf(\" /by \"));","lastModifiedDate":"2021-08-26"},{"lineNumber":131,"author":{"gitId":"kaushikkrdy"},"content":"            String by \u003d description.substring(description.indexOf(\"/by \") + 4);","lastModifiedDate":"2021-08-26"},{"lineNumber":132,"author":{"gitId":"kaushikkrdy"},"content":"            Task addedTask \u003d new Deadline(newDescription, by);","lastModifiedDate":"2021-08-26"},{"lineNumber":133,"author":{"gitId":"kaushikkrdy"},"content":"            this.taskList.add(addedTask);","lastModifiedDate":"2021-08-26"},{"lineNumber":134,"author":{"gitId":"kaushikkrdy"},"content":"            storage.appendToFile(addedTask.getFileString());","lastModifiedDate":"2021-08-26"},{"lineNumber":135,"author":{"gitId":"kaushikkrdy"},"content":"            ui.printAddMessage(addedTask);","lastModifiedDate":"2021-08-26"},{"lineNumber":136,"author":{"gitId":"kaushikkrdy"},"content":"            ui.printTaskListSize(this.taskList.size());","lastModifiedDate":"2021-08-26"},{"lineNumber":137,"author":{"gitId":"kaushikkrdy"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-26"},{"lineNumber":138,"author":{"gitId":"kaushikkrdy"},"content":"            throw new DukeException(\"Please write your date and time in the following format: \"","lastModifiedDate":"2021-08-26"},{"lineNumber":139,"author":{"gitId":"kaushikkrdy"},"content":"                    + \"D/MM/YYYY HHMM\");","lastModifiedDate":"2021-08-26"},{"lineNumber":140,"author":{"gitId":"kaushikkrdy"},"content":"        } catch (StringIndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-26"},{"lineNumber":141,"author":{"gitId":"kaushikkrdy"},"content":"            throw new DukeException(\"Please write your deadline command in the following format: \"","lastModifiedDate":"2021-08-26"},{"lineNumber":142,"author":{"gitId":"kaushikkrdy"},"content":"                    + \"deadline task /by datetime\");","lastModifiedDate":"2021-08-26"},{"lineNumber":143,"author":{"gitId":"kaushikkrdy"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":144,"author":{"gitId":"kaushikkrdy"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":145,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":146,"author":{"gitId":"kaushikkrdy"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":147,"author":{"gitId":"kaushikkrdy"},"content":"     * Creates an Event task with the appropriate description.","lastModifiedDate":"2021-08-26"},{"lineNumber":148,"author":{"gitId":"kaushikkrdy"},"content":"     * Stores task in disk using storage and prints appropriate messages using ui.","lastModifiedDate":"2021-08-26"},{"lineNumber":149,"author":{"gitId":"kaushikkrdy"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":150,"author":{"gitId":"kaushikkrdy"},"content":"     * @param description describes the nature of the Event task.","lastModifiedDate":"2021-08-26"},{"lineNumber":151,"author":{"gitId":"kaushikkrdy"},"content":"     * @param storage handles storing the new task in the disk.","lastModifiedDate":"2021-08-26"},{"lineNumber":152,"author":{"gitId":"kaushikkrdy"},"content":"     * @param ui handles interactions with user by printing the appropriate messages.","lastModifiedDate":"2021-08-26"},{"lineNumber":153,"author":{"gitId":"kaushikkrdy"},"content":"     * @throws DukeException if description contains incorrectly formatted date/time or does not follow the format:","lastModifiedDate":"2021-08-27"},{"lineNumber":154,"author":{"gitId":"kaushikkrdy"},"content":"     * event task /at datetime","lastModifiedDate":"2021-08-27"},{"lineNumber":155,"author":{"gitId":"kaushikkrdy"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":156,"author":{"gitId":"kaushikkrdy"},"content":"    public void createEvent(String description, Storage storage, Ui ui) throws DukeException {","lastModifiedDate":"2021-08-26"},{"lineNumber":157,"author":{"gitId":"kaushikkrdy"},"content":"        try {","lastModifiedDate":"2021-08-26"},{"lineNumber":158,"author":{"gitId":"kaushikkrdy"},"content":"            String newDescription \u003d description.substring(0, description.indexOf(\" /at \"));","lastModifiedDate":"2021-08-26"},{"lineNumber":159,"author":{"gitId":"kaushikkrdy"},"content":"            String at \u003d description.substring(description.indexOf(\"/at \") + 4);","lastModifiedDate":"2021-08-26"},{"lineNumber":160,"author":{"gitId":"kaushikkrdy"},"content":"            Task addedTask \u003d new Event(newDescription, at);","lastModifiedDate":"2021-08-26"},{"lineNumber":161,"author":{"gitId":"kaushikkrdy"},"content":"            this.taskList.add(addedTask);","lastModifiedDate":"2021-08-26"},{"lineNumber":162,"author":{"gitId":"kaushikkrdy"},"content":"            storage.appendToFile(addedTask.getFileString());","lastModifiedDate":"2021-08-26"},{"lineNumber":163,"author":{"gitId":"kaushikkrdy"},"content":"            ui.printAddMessage(addedTask);","lastModifiedDate":"2021-08-26"},{"lineNumber":164,"author":{"gitId":"kaushikkrdy"},"content":"            ui.printTaskListSize(this.taskList.size());","lastModifiedDate":"2021-08-26"},{"lineNumber":165,"author":{"gitId":"kaushikkrdy"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-26"},{"lineNumber":166,"author":{"gitId":"kaushikkrdy"},"content":"            throw new DukeException(\"Please write your date and time in the following format: \"","lastModifiedDate":"2021-08-31"},{"lineNumber":167,"author":{"gitId":"kaushikkrdy"},"content":"                    + \"D/MM/YYYY HHMM\");","lastModifiedDate":"2021-08-31"},{"lineNumber":168,"author":{"gitId":"kaushikkrdy"},"content":"        } catch (StringIndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-26"},{"lineNumber":169,"author":{"gitId":"kaushikkrdy"},"content":"            throw new DukeException(\"Please write your event command in the following format: \"","lastModifiedDate":"2021-08-31"},{"lineNumber":170,"author":{"gitId":"kaushikkrdy"},"content":"                    + \"event task /at datetime\");","lastModifiedDate":"2021-08-31"},{"lineNumber":171,"author":{"gitId":"kaushikkrdy"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":172,"author":{"gitId":"kaushikkrdy"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":173,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":174,"author":{"gitId":"kaushikkrdy"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":175,"author":{"gitId":"kaushikkrdy"},"content":"     * Converts ArrayList of strings representing Task objects to ArrayList of Task objects.","lastModifiedDate":"2021-08-26"},{"lineNumber":176,"author":{"gitId":"kaushikkrdy"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":177,"author":{"gitId":"kaushikkrdy"},"content":"     * @param taskListStrings ArrayList of strings representing Task objects.","lastModifiedDate":"2021-08-26"},{"lineNumber":178,"author":{"gitId":"kaushikkrdy"},"content":"     * @return ArrayList of Task objects","lastModifiedDate":"2021-08-26"},{"lineNumber":179,"author":{"gitId":"kaushikkrdy"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":180,"author":{"gitId":"kaushikkrdy"},"content":"    private ArrayList\u003cTask\u003e convertToTasks(ArrayList\u003cString\u003e taskListStrings) {","lastModifiedDate":"2021-08-26"},{"lineNumber":181,"author":{"gitId":"kaushikkrdy"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-26"},{"lineNumber":182,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":183,"author":{"gitId":"kaushikkrdy"},"content":"        for (String ts : taskListStrings) {","lastModifiedDate":"2021-08-26"},{"lineNumber":184,"author":{"gitId":"kaushikkrdy"},"content":"            String[] tsData \u003d ts.split(\" \\\\| \");","lastModifiedDate":"2021-08-26"},{"lineNumber":185,"author":{"gitId":"kaushikkrdy"},"content":"            String taskType \u003d tsData[0];","lastModifiedDate":"2021-08-26"},{"lineNumber":186,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":187,"author":{"gitId":"kaushikkrdy"},"content":"            switch (taskType) {","lastModifiedDate":"2021-08-26"},{"lineNumber":188,"author":{"gitId":"kaushikkrdy"},"content":"            case \"T\":","lastModifiedDate":"2021-08-26"},{"lineNumber":189,"author":{"gitId":"kaushikkrdy"},"content":"                tasks.add(new Todo(tsData[1], tsData[2]));","lastModifiedDate":"2021-08-26"},{"lineNumber":190,"author":{"gitId":"kaushikkrdy"},"content":"                break;","lastModifiedDate":"2021-08-26"},{"lineNumber":191,"author":{"gitId":"kaushikkrdy"},"content":"            case \"D\":","lastModifiedDate":"2021-08-26"},{"lineNumber":192,"author":{"gitId":"kaushikkrdy"},"content":"                tasks.add(new Deadline(tsData[1], tsData[2], tsData[3]));","lastModifiedDate":"2021-08-26"},{"lineNumber":193,"author":{"gitId":"kaushikkrdy"},"content":"                break;","lastModifiedDate":"2021-08-26"},{"lineNumber":194,"author":{"gitId":"kaushikkrdy"},"content":"            case \"E\":","lastModifiedDate":"2021-08-26"},{"lineNumber":195,"author":{"gitId":"kaushikkrdy"},"content":"                tasks.add(new Event(tsData[1], tsData[2], tsData[3]));","lastModifiedDate":"2021-08-26"},{"lineNumber":196,"author":{"gitId":"kaushikkrdy"},"content":"                break;","lastModifiedDate":"2021-08-26"},{"lineNumber":197,"author":{"gitId":"kaushikkrdy"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":198,"author":{"gitId":"kaushikkrdy"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":199,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":200,"author":{"gitId":"kaushikkrdy"},"content":"        return tasks;","lastModifiedDate":"2021-08-26"},{"lineNumber":201,"author":{"gitId":"kaushikkrdy"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":202,"author":{"gitId":"kaushikkrdy"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"kaushikkrdy":202}},{"path":"src/main/java/duke/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaushikkrdy"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"kaushikkrdy"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"kaushikkrdy"},"content":" * Creates Todo tasks with descriptions.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"kaushikkrdy"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"kaushikkrdy"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-08-17"},{"lineNumber":7,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":8,"author":{"gitId":"kaushikkrdy"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"kaushikkrdy"},"content":"     * Creates a Todo task from user command with the correct description, done status is false by default.","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"kaushikkrdy"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":11,"author":{"gitId":"kaushikkrdy"},"content":"     * @param description describes the nature of the task.","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"kaushikkrdy"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"kaushikkrdy"},"content":"    public Todo(String description) {","lastModifiedDate":"2021-08-17"},{"lineNumber":14,"author":{"gitId":"kaushikkrdy"},"content":"        super(description);","lastModifiedDate":"2021-08-17"},{"lineNumber":15,"author":{"gitId":"kaushikkrdy"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":16,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":17,"author":{"gitId":"kaushikkrdy"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"kaushikkrdy"},"content":"     * Creates a Todo task from a disk task string with the correct description and done status.","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"kaushikkrdy"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":20,"author":{"gitId":"kaushikkrdy"},"content":"     * @param num number retrieved from the disk that determines if the task is done or not.","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"kaushikkrdy"},"content":"     * @param description describes the nature of the task.","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"kaushikkrdy"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"kaushikkrdy"},"content":"    public Todo(String num, String description) {","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"kaushikkrdy"},"content":"        super(description);","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"kaushikkrdy"},"content":"        this.isDone \u003d !num.equals(\"0\");","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"kaushikkrdy"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"kaushikkrdy"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"kaushikkrdy"},"content":"     * Returns the string format in which to store the task to the disk, which is T | 1 or 0 | description.","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"kaushikkrdy"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":31,"author":{"gitId":"kaushikkrdy"},"content":"     * @return new string format in which to store the task to the disk which is different from toString.","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"kaushikkrdy"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"kaushikkrdy"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"kaushikkrdy"},"content":"    public String getFileString() {","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"kaushikkrdy"},"content":"        return String.format(\"T | %d | %s\", this.isDone ? 1 : 0, this.description);","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"kaushikkrdy"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"kaushikkrdy"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"kaushikkrdy"},"content":"     * Returns a string in the form of \"[T] (done status) (description)\" when task is printed.","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"kaushikkrdy"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":41,"author":{"gitId":"kaushikkrdy"},"content":"     * @return string that is displayed when task is printed.","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"kaushikkrdy"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"kaushikkrdy"},"content":"    @Override","lastModifiedDate":"2021-08-17"},{"lineNumber":44,"author":{"gitId":"kaushikkrdy"},"content":"    public String toString() {","lastModifiedDate":"2021-08-17"},{"lineNumber":45,"author":{"gitId":"kaushikkrdy"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2021-08-17"},{"lineNumber":46,"author":{"gitId":"kaushikkrdy"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":47,"author":{"gitId":"kaushikkrdy"},"content":"}","lastModifiedDate":"2021-08-17"}],"authorContributionMap":{"kaushikkrdy":47}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaushikkrdy"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"kaushikkrdy"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"kaushikkrdy"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"kaushikkrdy"},"content":" * Handles interactions with user through message outputs.","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"kaushikkrdy"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"kaushikkrdy"},"content":"public class Ui {","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"kaushikkrdy"},"content":"    ","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"kaushikkrdy"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"kaushikkrdy"},"content":"     * Prints error message.","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"kaushikkrdy"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":13,"author":{"gitId":"kaushikkrdy"},"content":"     * @param error message that is returned by an exception.","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"kaushikkrdy"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"kaushikkrdy"},"content":"    public void showError(String error) {","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"kaushikkrdy"},"content":"        System.out.println(error);","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"kaushikkrdy"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"kaushikkrdy"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"kaushikkrdy"},"content":"     * Prints greeting to user when program starts.","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"kaushikkrdy"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"kaushikkrdy"},"content":"    public void printGreeting() {","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"kaushikkrdy"},"content":"        System.out.println(\"Hello! I\u0027m Duke\\nWhat can I do for you?\");","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"kaushikkrdy"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"kaushikkrdy"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"kaushikkrdy"},"content":"     * Prints the task that has been marked done.","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"kaushikkrdy"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":29,"author":{"gitId":"kaushikkrdy"},"content":"     * @param doneTask task that has been marked done.","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"kaushikkrdy"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"kaushikkrdy"},"content":"    public void printDoneMessage(Task doneTask) {","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"kaushikkrdy"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"kaushikkrdy"},"content":"        System.out.println(doneTask);","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"kaushikkrdy"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"kaushikkrdy"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"kaushikkrdy"},"content":"     * Prints the task that has been deleted from the task list.","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"kaushikkrdy"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":39,"author":{"gitId":"kaushikkrdy"},"content":"     * @param deletedTask task that has been deleted from the task list.","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"kaushikkrdy"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"kaushikkrdy"},"content":"    public void printDeleteMessage(Task deletedTask) {","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"kaushikkrdy"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"kaushikkrdy"},"content":"        System.out.println(deletedTask);","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"kaushikkrdy"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"kaushikkrdy"},"content":"    public void printAddMessage(Task addedTask) {","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"kaushikkrdy"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"kaushikkrdy"},"content":"        System.out.println(addedTask);","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"kaushikkrdy"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":51,"author":{"gitId":"kaushikkrdy"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":52,"author":{"gitId":"kaushikkrdy"},"content":"     * Prints the number of tasks in the task list.","lastModifiedDate":"2021-08-26"},{"lineNumber":53,"author":{"gitId":"kaushikkrdy"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":54,"author":{"gitId":"kaushikkrdy"},"content":"     * @param size number of tasks in the task list.","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"kaushikkrdy"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":56,"author":{"gitId":"kaushikkrdy"},"content":"    public void printTaskListSize(int size) {","lastModifiedDate":"2021-08-26"},{"lineNumber":57,"author":{"gitId":"kaushikkrdy"},"content":"        if (size \u003d\u003d 1) {","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"kaushikkrdy"},"content":"            System.out.println(\"Now you have 1 task in the list.\");","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"kaushikkrdy"},"content":"        } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"kaushikkrdy"},"content":"            System.out.printf(\"Now you have %d tasks in the list.%n\", size);","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"kaushikkrdy"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"kaushikkrdy"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":63,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":64,"author":{"gitId":"kaushikkrdy"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":65,"author":{"gitId":"kaushikkrdy"},"content":"     * Prints goodbye message to user when \u0027bye\u0027 command is entered.","lastModifiedDate":"2021-08-26"},{"lineNumber":66,"author":{"gitId":"kaushikkrdy"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":67,"author":{"gitId":"kaushikkrdy"},"content":"    public void printGoodbye() {","lastModifiedDate":"2021-08-26"},{"lineNumber":68,"author":{"gitId":"kaushikkrdy"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2021-08-26"},{"lineNumber":69,"author":{"gitId":"kaushikkrdy"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":70,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":71,"author":{"gitId":"kaushikkrdy"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":72,"author":{"gitId":"kaushikkrdy"},"content":"     * Prints out all the tasks matching user\u0027s search term.","lastModifiedDate":"2021-08-26"},{"lineNumber":73,"author":{"gitId":"kaushikkrdy"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":74,"author":{"gitId":"kaushikkrdy"},"content":"     * @param matchingTaskList ArrayList of tasks that matches user\u0027s search term.","lastModifiedDate":"2021-08-26"},{"lineNumber":75,"author":{"gitId":"kaushikkrdy"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":76,"author":{"gitId":"kaushikkrdy"},"content":"    public void showMatchingTasks(ArrayList\u003cTask\u003e matchingTaskList) {","lastModifiedDate":"2021-08-26"},{"lineNumber":77,"author":{"gitId":"kaushikkrdy"},"content":"        if (matchingTaskList.size() \u003d\u003d 0) {","lastModifiedDate":"2021-08-26"},{"lineNumber":78,"author":{"gitId":"kaushikkrdy"},"content":"            System.out.println(\"There are no tasks containing that term in your list!\");","lastModifiedDate":"2021-08-26"},{"lineNumber":79,"author":{"gitId":"kaushikkrdy"},"content":"        } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":80,"author":{"gitId":"kaushikkrdy"},"content":"            System.out.println(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2021-08-26"},{"lineNumber":81,"author":{"gitId":"kaushikkrdy"},"content":"            int num \u003d 1;","lastModifiedDate":"2021-08-26"},{"lineNumber":82,"author":{"gitId":"kaushikkrdy"},"content":"            for (Task task : matchingTaskList) {","lastModifiedDate":"2021-08-26"},{"lineNumber":83,"author":{"gitId":"kaushikkrdy"},"content":"                System.out.printf(\"%d.%s%n\", num, task);","lastModifiedDate":"2021-08-26"},{"lineNumber":84,"author":{"gitId":"kaushikkrdy"},"content":"                num++;","lastModifiedDate":"2021-08-26"},{"lineNumber":85,"author":{"gitId":"kaushikkrdy"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":86,"author":{"gitId":"kaushikkrdy"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":87,"author":{"gitId":"kaushikkrdy"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":88,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":89,"author":{"gitId":"kaushikkrdy"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":90,"author":{"gitId":"kaushikkrdy"},"content":"     * Prints out all the tasks present in the task list.","lastModifiedDate":"2021-08-26"},{"lineNumber":91,"author":{"gitId":"kaushikkrdy"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":92,"author":{"gitId":"kaushikkrdy"},"content":"     * @param taskList ArrayList of tasks user has.","lastModifiedDate":"2021-08-26"},{"lineNumber":93,"author":{"gitId":"kaushikkrdy"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":94,"author":{"gitId":"kaushikkrdy"},"content":"    public void showTasks(ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2021-08-26"},{"lineNumber":95,"author":{"gitId":"kaushikkrdy"},"content":"        if (taskList.size() \u003d\u003d 0) {","lastModifiedDate":"2021-08-26"},{"lineNumber":96,"author":{"gitId":"kaushikkrdy"},"content":"            System.out.println(\"There are no tasks in your list!\");","lastModifiedDate":"2021-08-26"},{"lineNumber":97,"author":{"gitId":"kaushikkrdy"},"content":"        } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":98,"author":{"gitId":"kaushikkrdy"},"content":"            System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2021-08-26"},{"lineNumber":99,"author":{"gitId":"kaushikkrdy"},"content":"            int num \u003d 1;","lastModifiedDate":"2021-08-26"},{"lineNumber":100,"author":{"gitId":"kaushikkrdy"},"content":"            for (Task task : taskList) {","lastModifiedDate":"2021-08-26"},{"lineNumber":101,"author":{"gitId":"kaushikkrdy"},"content":"                System.out.printf(\"%d.%s%n\", num, task);","lastModifiedDate":"2021-08-26"},{"lineNumber":102,"author":{"gitId":"kaushikkrdy"},"content":"                num++;","lastModifiedDate":"2021-08-26"},{"lineNumber":103,"author":{"gitId":"kaushikkrdy"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":104,"author":{"gitId":"kaushikkrdy"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":105,"author":{"gitId":"kaushikkrdy"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":106,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":107,"author":{"gitId":"kaushikkrdy"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"kaushikkrdy":107}},{"path":"src/test/java/duke/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaushikkrdy"},"content":"import duke.Event;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"kaushikkrdy"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"kaushikkrdy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"kaushikkrdy"},"content":"public class EventTest {","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"kaushikkrdy"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"kaushikkrdy"},"content":"    public void createEvent_withDescriptionAndDate_DateFormattedAsMMDYYYYHHMMa() {","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"kaushikkrdy"},"content":"        Event event \u003d new Event(\"project meeting\", \"06/08/2021 1400\");","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"kaushikkrdy"},"content":"        assertEquals(\"[E][ ] project meeting (at: Aug 06 2021 2:00 pm)\", event.toString());","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"kaushikkrdy"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"kaushikkrdy"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"kaushikkrdy":14}},{"path":"src/test/java/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaushikkrdy"},"content":"import duke.DukeException;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"kaushikkrdy"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"kaushikkrdy"},"content":"import static duke.Parser.parse;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"kaushikkrdy"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"kaushikkrdy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"kaushikkrdy"},"content":"public class ParserTest {","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"kaushikkrdy"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"kaushikkrdy"},"content":"    public void deleteTask_noTaskNumber_dukeExceptionThrown() {","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"kaushikkrdy"},"content":"        Exception exception \u003d assertThrows(DukeException.class, () -\u003e parse(\"delete\"));","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"kaushikkrdy"},"content":"        String expectedMessage \u003d \"☹ OOPS!!! The delete command needs a number after it in the following format: delete number\";","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"kaushikkrdy"},"content":"        String actualMessage \u003d exception.getMessage();","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"kaushikkrdy"},"content":"        assertEquals(expectedMessage, actualMessage);","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"kaushikkrdy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"kaushikkrdy"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"kaushikkrdy"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"kaushikkrdy":18}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"kaushikkrdy"},"content":"todo borrow book","lastModifiedDate":"2021-08-18"},{"lineNumber":2,"author":{"gitId":"kaushikkrdy"},"content":"deadline return book /by 06/06/2021 1600","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"kaushikkrdy"},"content":"event project meeting /at 06/08/2021 1400","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"kaushikkrdy"},"content":"done 1","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"kaushikkrdy"},"content":"done 2","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"kaushikkrdy"},"content":"done 3","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"kaushikkrdy"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"kaushikkrdy"},"content":"find book","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"kaushikkrdy"},"content":"delete 3","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"kaushikkrdy"},"content":"delete 2","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"kaushikkrdy"},"content":"todo","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"kaushikkrdy"},"content":"deadline","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"kaushikkrdy"},"content":"event","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"kaushikkrdy"},"content":"delete","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"kaushikkrdy"},"content":"done","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"kaushikkrdy"},"content":"delete 2","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"kaushikkrdy"},"content":"done 2","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"kaushikkrdy"},"content":"invalidcommand","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"kaushikkrdy"},"content":"deadline return book /by 6-6-2021 1600","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"kaushikkrdy"},"content":"deadline asdfgh","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"kaushikkrdy"},"content":"find cat","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"kaushikkrdy":21}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"kaushikkrdy"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/duke/*.java","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"kaushikkrdy"},"content":"java -classpath ../bin duke/Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"kaushikkrdy":2,"-":36}}]

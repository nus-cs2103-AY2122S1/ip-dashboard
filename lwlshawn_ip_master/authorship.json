[{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lwlshawn"},"content":"public class Deadline extends Task{","lastModifiedDate":"2021-08-14"},{"lineNumber":2,"author":{"gitId":"lwlshawn"},"content":"    public Deadline(String label) {","lastModifiedDate":"2021-08-14"},{"lineNumber":3,"author":{"gitId":"lwlshawn"},"content":"        super(label);","lastModifiedDate":"2021-08-14"},{"lineNumber":4,"author":{"gitId":"lwlshawn"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":5,"author":{"gitId":"lwlshawn"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":6,"author":{"gitId":"lwlshawn"},"content":"    @Override","lastModifiedDate":"2021-08-14"},{"lineNumber":7,"author":{"gitId":"lwlshawn"},"content":"    public String toString() {","lastModifiedDate":"2021-08-14"},{"lineNumber":8,"author":{"gitId":"lwlshawn"},"content":"        return \"[D]\" + super.toString();","lastModifiedDate":"2021-08-14"},{"lineNumber":9,"author":{"gitId":"lwlshawn"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":10,"author":{"gitId":"lwlshawn"},"content":"}","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"lwlshawn":10}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lwlshawn"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-14"},{"lineNumber":2,"author":{"gitId":"lwlshawn"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-14"},{"lineNumber":3,"author":{"gitId":"lwlshawn"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":4,"author":{"gitId":"lwlshawn"},"content":"//automated testing script closes super fast; still have to manually run the final FC command in terminal","lastModifiedDate":"2021-08-14"},{"lineNumber":5,"author":{"gitId":"lwlshawn"},"content":"//managed to fix the issue with FC not being found however. Git push issues also fixed.","lastModifiedDate":"2021-08-14"},{"lineNumber":6,"author":{"gitId":"lwlshawn"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":7,"author":{"gitId":"lwlshawn"},"content":"//most obvious uncaught exceptions are incorrect delete/done commands. fix in the future.","lastModifiedDate":"2021-08-14"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":9,"author":{"gitId":"lwlshawn"},"content":"    private static ArrayList\u003cTask\u003e store \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-14"},{"lineNumber":10,"author":{"gitId":"lwlshawn"},"content":"    private static int index \u003d 0;","lastModifiedDate":"2021-08-14"},{"lineNumber":11,"author":{"gitId":"lwlshawn"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":12,"author":{"gitId":"lwlshawn"},"content":"    //subroutine for adding tasks to the collection of tasks","lastModifiedDate":"2021-08-14"},{"lineNumber":13,"author":{"gitId":"lwlshawn"},"content":"    public static void addTask(String descriptor) throws DukeException {","lastModifiedDate":"2021-08-14"},{"lineNumber":14,"author":{"gitId":"lwlshawn"},"content":"        if (descriptor.startsWith(\"todo\")) {","lastModifiedDate":"2021-08-14"},{"lineNumber":15,"author":{"gitId":"lwlshawn"},"content":"            descriptor \u003d descriptor.replaceFirst(\"todo\", \"\");","lastModifiedDate":"2021-08-14"},{"lineNumber":16,"author":{"gitId":"lwlshawn"},"content":"            if (descriptor.equals(\"\")) {","lastModifiedDate":"2021-08-14"},{"lineNumber":17,"author":{"gitId":"lwlshawn"},"content":"                throw new DukeException(\"empty description\");","lastModifiedDate":"2021-08-14"},{"lineNumber":18,"author":{"gitId":"lwlshawn"},"content":"            }","lastModifiedDate":"2021-08-14"},{"lineNumber":19,"author":{"gitId":"lwlshawn"},"content":"            store.add(new Todo(descriptor.stripLeading()));","lastModifiedDate":"2021-08-14"},{"lineNumber":20,"author":{"gitId":"lwlshawn"},"content":"        } else if (descriptor.startsWith(\"deadline\")) {","lastModifiedDate":"2021-08-14"},{"lineNumber":21,"author":{"gitId":"lwlshawn"},"content":"            descriptor \u003d descriptor.replaceFirst(\"deadline\", \"\");","lastModifiedDate":"2021-08-14"},{"lineNumber":22,"author":{"gitId":"lwlshawn"},"content":"            if (descriptor.equals(\"\")) {","lastModifiedDate":"2021-08-14"},{"lineNumber":23,"author":{"gitId":"lwlshawn"},"content":"                throw new DukeException(\"empty description\");","lastModifiedDate":"2021-08-14"},{"lineNumber":24,"author":{"gitId":"lwlshawn"},"content":"            }","lastModifiedDate":"2021-08-14"},{"lineNumber":25,"author":{"gitId":"lwlshawn"},"content":"            descriptor \u003d descriptor.replaceFirst(\"/by \", \"(by: \");","lastModifiedDate":"2021-08-14"},{"lineNumber":26,"author":{"gitId":"lwlshawn"},"content":"            descriptor \u003d descriptor + \")\";","lastModifiedDate":"2021-08-14"},{"lineNumber":27,"author":{"gitId":"lwlshawn"},"content":"            store.add(new Deadline(descriptor.stripLeading()));","lastModifiedDate":"2021-08-14"},{"lineNumber":28,"author":{"gitId":"lwlshawn"},"content":"        } else if (descriptor.startsWith(\"event\")) {","lastModifiedDate":"2021-08-14"},{"lineNumber":29,"author":{"gitId":"lwlshawn"},"content":"            descriptor \u003d descriptor.replaceFirst(\"event\", \"\");","lastModifiedDate":"2021-08-14"},{"lineNumber":30,"author":{"gitId":"lwlshawn"},"content":"            if (descriptor.equals(\"\")) {","lastModifiedDate":"2021-08-14"},{"lineNumber":31,"author":{"gitId":"lwlshawn"},"content":"                throw new DukeException(\"empty description\");","lastModifiedDate":"2021-08-14"},{"lineNumber":32,"author":{"gitId":"lwlshawn"},"content":"            }","lastModifiedDate":"2021-08-14"},{"lineNumber":33,"author":{"gitId":"lwlshawn"},"content":"            descriptor \u003d descriptor.replaceFirst(\"/at \", \"(at: \");","lastModifiedDate":"2021-08-14"},{"lineNumber":34,"author":{"gitId":"lwlshawn"},"content":"            descriptor \u003d descriptor + \")\";","lastModifiedDate":"2021-08-14"},{"lineNumber":35,"author":{"gitId":"lwlshawn"},"content":"            store.add(new Event(descriptor.stripLeading()));","lastModifiedDate":"2021-08-14"},{"lineNumber":36,"author":{"gitId":"lwlshawn"},"content":"        } else {","lastModifiedDate":"2021-08-14"},{"lineNumber":37,"author":{"gitId":"lwlshawn"},"content":"            //based on logic in Main, should never reach this branch.","lastModifiedDate":"2021-08-14"},{"lineNumber":38,"author":{"gitId":"lwlshawn"},"content":"            throw new DukeException();","lastModifiedDate":"2021-08-14"},{"lineNumber":39,"author":{"gitId":"lwlshawn"},"content":"        }","lastModifiedDate":"2021-08-14"},{"lineNumber":40,"author":{"gitId":"lwlshawn"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":41,"author":{"gitId":"lwlshawn"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2021-08-14"},{"lineNumber":42,"author":{"gitId":"lwlshawn"},"content":"        System.out.println(\"  \" + store.get(store.size() - 1));","lastModifiedDate":"2021-08-14"},{"lineNumber":43,"author":{"gitId":"lwlshawn"},"content":"        System.out.println(\"Now you have \" + store.size() + \" tasks in the list.\");","lastModifiedDate":"2021-08-14"},{"lineNumber":44,"author":{"gitId":"lwlshawn"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":45,"author":{"gitId":"lwlshawn"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-14"},{"lineNumber":47,"author":{"gitId":"lwlshawn"},"content":"        System.out.println(","lastModifiedDate":"2021-08-14"},{"lineNumber":48,"author":{"gitId":"lwlshawn"},"content":"                \"░▄░█░░░▄▀▀▀▀▀▄░░░█░▄░\\n\" +","lastModifiedDate":"2021-08-14"},{"lineNumber":49,"author":{"gitId":"lwlshawn"},"content":"                \"▄▄▀▄░░░█─▀─▀─█░░░▄▀▄▄\\n\" +","lastModifiedDate":"2021-08-14"},{"lineNumber":50,"author":{"gitId":"lwlshawn"},"content":"                \"░░░░▀▄▒▒▒▒▒▒▒▒▒▄▀░░░░\\n\" +","lastModifiedDate":"2021-08-14"},{"lineNumber":51,"author":{"gitId":"lwlshawn"},"content":"                \"░░░░░█────▀────█░░░░░\\n\" +","lastModifiedDate":"2021-08-14"},{"lineNumber":52,"author":{"gitId":"lwlshawn"},"content":"                \"░░░░░█────▀────█░░░░░\\n\");","lastModifiedDate":"2021-08-14"},{"lineNumber":53,"author":{"gitId":"lwlshawn"},"content":"        System.out.println(\"I\u0027m Frosty! How can I help?\");","lastModifiedDate":"2021-08-14"},{"lineNumber":54,"author":{"gitId":"lwlshawn"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":55,"author":{"gitId":"lwlshawn"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-14"},{"lineNumber":56,"author":{"gitId":"lwlshawn"},"content":"        String in \u003d sc.nextLine();","lastModifiedDate":"2021-08-14"},{"lineNumber":57,"author":{"gitId":"lwlshawn"},"content":"        while(!in.equals(\"bye\")) {","lastModifiedDate":"2021-08-14"},{"lineNumber":58,"author":{"gitId":"lwlshawn"},"content":"            if (in.equals(\"list\")) {","lastModifiedDate":"2021-08-14"},{"lineNumber":59,"author":{"gitId":"lwlshawn"},"content":"                System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2021-08-14"},{"lineNumber":60,"author":{"gitId":"lwlshawn"},"content":"                for (int i \u003d 0; i \u003c store.size(); i++) {","lastModifiedDate":"2021-08-14"},{"lineNumber":61,"author":{"gitId":"lwlshawn"},"content":"                    System.out.println((i + 1) + \". \" + store.get(i));","lastModifiedDate":"2021-08-14"},{"lineNumber":62,"author":{"gitId":"lwlshawn"},"content":"                }","lastModifiedDate":"2021-08-14"},{"lineNumber":63,"author":{"gitId":"lwlshawn"},"content":"            } else if (in.startsWith(\"done\")) {","lastModifiedDate":"2021-08-14"},{"lineNumber":64,"author":{"gitId":"lwlshawn"},"content":"                try {","lastModifiedDate":"2021-08-14"},{"lineNumber":65,"author":{"gitId":"lwlshawn"},"content":"                    String[] temp \u003d in.split(\" \");","lastModifiedDate":"2021-08-14"},{"lineNumber":66,"author":{"gitId":"lwlshawn"},"content":"                    store.get(Integer.parseInt(temp[1]) - 1).setFlag(true);","lastModifiedDate":"2021-08-14"},{"lineNumber":67,"author":{"gitId":"lwlshawn"},"content":"                    System.out.println(\"Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2021-08-14"},{"lineNumber":68,"author":{"gitId":"lwlshawn"},"content":"                    System.out.println(\"  \" + store.get(Integer.parseInt(temp[1]) - 1));","lastModifiedDate":"2021-08-14"},{"lineNumber":69,"author":{"gitId":"lwlshawn"},"content":"                } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-14"},{"lineNumber":70,"author":{"gitId":"lwlshawn"},"content":"                    System.out.println(\"Sorry! Your done command has an invalid index choice\");","lastModifiedDate":"2021-08-14"},{"lineNumber":71,"author":{"gitId":"lwlshawn"},"content":"                } catch (NumberFormatException e) {","lastModifiedDate":"2021-08-14"},{"lineNumber":72,"author":{"gitId":"lwlshawn"},"content":"                    System.out.println(\"Sorry! I can\u0027t understand the index for your done command\");","lastModifiedDate":"2021-08-14"},{"lineNumber":73,"author":{"gitId":"lwlshawn"},"content":"                }","lastModifiedDate":"2021-08-14"},{"lineNumber":74,"author":{"gitId":"lwlshawn"},"content":"            } else if (in.startsWith(\"todo\") || in.startsWith(\"deadline\") || in.startsWith(\"event\")) {","lastModifiedDate":"2021-08-14"},{"lineNumber":75,"author":{"gitId":"lwlshawn"},"content":"                try {","lastModifiedDate":"2021-08-14"},{"lineNumber":76,"author":{"gitId":"lwlshawn"},"content":"                    addTask(in);","lastModifiedDate":"2021-08-14"},{"lineNumber":77,"author":{"gitId":"lwlshawn"},"content":"                } catch (DukeException e) {","lastModifiedDate":"2021-08-14"},{"lineNumber":78,"author":{"gitId":"lwlshawn"},"content":"                    System.out.println(\"Sorry! Your request caused \" + e);","lastModifiedDate":"2021-08-14"},{"lineNumber":79,"author":{"gitId":"lwlshawn"},"content":"                }","lastModifiedDate":"2021-08-14"},{"lineNumber":80,"author":{"gitId":"lwlshawn"},"content":"            } else if (in.startsWith(\"delete\")) {","lastModifiedDate":"2021-08-14"},{"lineNumber":81,"author":{"gitId":"lwlshawn"},"content":"                try {","lastModifiedDate":"2021-08-14"},{"lineNumber":82,"author":{"gitId":"lwlshawn"},"content":"                    String[] temp \u003d in.split(\" \");","lastModifiedDate":"2021-08-14"},{"lineNumber":83,"author":{"gitId":"lwlshawn"},"content":"                    Task removed \u003d store.remove(Integer.parseInt(temp[1]) - 1);","lastModifiedDate":"2021-08-14"},{"lineNumber":84,"author":{"gitId":"lwlshawn"},"content":"                    System.out.println(\"Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2021-08-14"},{"lineNumber":85,"author":{"gitId":"lwlshawn"},"content":"                    System.out.println(\"  \" + removed);","lastModifiedDate":"2021-08-14"},{"lineNumber":86,"author":{"gitId":"lwlshawn"},"content":"                    System.out.println(\"Now you have \" + store.size() + \" tasks in the list.\");","lastModifiedDate":"2021-08-14"},{"lineNumber":87,"author":{"gitId":"lwlshawn"},"content":"                } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-14"},{"lineNumber":88,"author":{"gitId":"lwlshawn"},"content":"                    System.out.println(\"Sorry! Your delete command has an invalid index choice\");","lastModifiedDate":"2021-08-14"},{"lineNumber":89,"author":{"gitId":"lwlshawn"},"content":"                } catch (NumberFormatException e) {","lastModifiedDate":"2021-08-14"},{"lineNumber":90,"author":{"gitId":"lwlshawn"},"content":"                    System.out.println(\"Sorry! I can\u0027t understand the index for your delete command\");","lastModifiedDate":"2021-08-14"},{"lineNumber":91,"author":{"gitId":"lwlshawn"},"content":"                }","lastModifiedDate":"2021-08-14"},{"lineNumber":92,"author":{"gitId":"lwlshawn"},"content":"            } else {","lastModifiedDate":"2021-08-14"},{"lineNumber":93,"author":{"gitId":"lwlshawn"},"content":"                System.out.println(\"Sorry! I don\u0027t know what your request means...\");","lastModifiedDate":"2021-08-14"},{"lineNumber":94,"author":{"gitId":"lwlshawn"},"content":"            }","lastModifiedDate":"2021-08-14"},{"lineNumber":95,"author":{"gitId":"lwlshawn"},"content":"            in \u003d sc.nextLine();","lastModifiedDate":"2021-08-14"},{"lineNumber":96,"author":{"gitId":"lwlshawn"},"content":"        }","lastModifiedDate":"2021-08-14"},{"lineNumber":97,"author":{"gitId":"lwlshawn"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":98,"author":{"gitId":"lwlshawn"},"content":"        System.out.println(\"Have a Merry Christmas and a Happy New Year!\");","lastModifiedDate":"2021-08-14"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":100,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"lwlshawn":96,"-":4}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lwlshawn"},"content":"public class DukeException extends Exception{","lastModifiedDate":"2021-08-14"},{"lineNumber":2,"author":{"gitId":"lwlshawn"},"content":"    public DukeException(String description) {","lastModifiedDate":"2021-08-14"},{"lineNumber":3,"author":{"gitId":"lwlshawn"},"content":"        super(description);","lastModifiedDate":"2021-08-14"},{"lineNumber":4,"author":{"gitId":"lwlshawn"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":5,"author":{"gitId":"lwlshawn"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":6,"author":{"gitId":"lwlshawn"},"content":"    public DukeException() {","lastModifiedDate":"2021-08-14"},{"lineNumber":7,"author":{"gitId":"lwlshawn"},"content":"        super();","lastModifiedDate":"2021-08-14"},{"lineNumber":8,"author":{"gitId":"lwlshawn"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":9,"author":{"gitId":"lwlshawn"},"content":"}","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"lwlshawn":9}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lwlshawn"},"content":"public class Event extends Task{","lastModifiedDate":"2021-08-14"},{"lineNumber":2,"author":{"gitId":"lwlshawn"},"content":"    public Event(String label) {","lastModifiedDate":"2021-08-14"},{"lineNumber":3,"author":{"gitId":"lwlshawn"},"content":"        super(label);","lastModifiedDate":"2021-08-14"},{"lineNumber":4,"author":{"gitId":"lwlshawn"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":5,"author":{"gitId":"lwlshawn"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":6,"author":{"gitId":"lwlshawn"},"content":"    @Override","lastModifiedDate":"2021-08-14"},{"lineNumber":7,"author":{"gitId":"lwlshawn"},"content":"    public String toString() {","lastModifiedDate":"2021-08-14"},{"lineNumber":8,"author":{"gitId":"lwlshawn"},"content":"        return \"[E]\" + super.toString();","lastModifiedDate":"2021-08-14"},{"lineNumber":9,"author":{"gitId":"lwlshawn"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":10,"author":{"gitId":"lwlshawn"},"content":"}","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"lwlshawn":10}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lwlshawn"},"content":"public class Task {","lastModifiedDate":"2021-08-14"},{"lineNumber":2,"author":{"gitId":"lwlshawn"},"content":"    private boolean flag;","lastModifiedDate":"2021-08-14"},{"lineNumber":3,"author":{"gitId":"lwlshawn"},"content":"    private String label;","lastModifiedDate":"2021-08-14"},{"lineNumber":4,"author":{"gitId":"lwlshawn"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":5,"author":{"gitId":"lwlshawn"},"content":"    public Task(String label) {","lastModifiedDate":"2021-08-14"},{"lineNumber":6,"author":{"gitId":"lwlshawn"},"content":"        this.label \u003d label;","lastModifiedDate":"2021-08-14"},{"lineNumber":7,"author":{"gitId":"lwlshawn"},"content":"        this.flag \u003d false;","lastModifiedDate":"2021-08-14"},{"lineNumber":8,"author":{"gitId":"lwlshawn"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":9,"author":{"gitId":"lwlshawn"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":10,"author":{"gitId":"lwlshawn"},"content":"    public void setFlag(boolean flag) {","lastModifiedDate":"2021-08-14"},{"lineNumber":11,"author":{"gitId":"lwlshawn"},"content":"        this.flag \u003d flag;","lastModifiedDate":"2021-08-14"},{"lineNumber":12,"author":{"gitId":"lwlshawn"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":13,"author":{"gitId":"lwlshawn"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":14,"author":{"gitId":"lwlshawn"},"content":"    @Override","lastModifiedDate":"2021-08-14"},{"lineNumber":15,"author":{"gitId":"lwlshawn"},"content":"    public String toString() {","lastModifiedDate":"2021-08-14"},{"lineNumber":16,"author":{"gitId":"lwlshawn"},"content":"        if (flag) {","lastModifiedDate":"2021-08-14"},{"lineNumber":17,"author":{"gitId":"lwlshawn"},"content":"            return \"[X] \" + label;","lastModifiedDate":"2021-08-14"},{"lineNumber":18,"author":{"gitId":"lwlshawn"},"content":"        } else {","lastModifiedDate":"2021-08-14"},{"lineNumber":19,"author":{"gitId":"lwlshawn"},"content":"            return \"[ ] \" + label;","lastModifiedDate":"2021-08-14"},{"lineNumber":20,"author":{"gitId":"lwlshawn"},"content":"        }","lastModifiedDate":"2021-08-14"},{"lineNumber":21,"author":{"gitId":"lwlshawn"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":22,"author":{"gitId":"lwlshawn"},"content":"}","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"lwlshawn":22}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lwlshawn"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-08-14"},{"lineNumber":2,"author":{"gitId":"lwlshawn"},"content":"    public Todo(String label) {","lastModifiedDate":"2021-08-14"},{"lineNumber":3,"author":{"gitId":"lwlshawn"},"content":"        super(label);","lastModifiedDate":"2021-08-14"},{"lineNumber":4,"author":{"gitId":"lwlshawn"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":5,"author":{"gitId":"lwlshawn"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":6,"author":{"gitId":"lwlshawn"},"content":"    @Override","lastModifiedDate":"2021-08-14"},{"lineNumber":7,"author":{"gitId":"lwlshawn"},"content":"    public String toString() {","lastModifiedDate":"2021-08-14"},{"lineNumber":8,"author":{"gitId":"lwlshawn"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2021-08-14"},{"lineNumber":9,"author":{"gitId":"lwlshawn"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":10,"author":{"gitId":"lwlshawn"},"content":"}","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"lwlshawn":10}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"lwlshawn"},"content":"todo read book","lastModifiedDate":"2021-08-14"},{"lineNumber":2,"author":{"gitId":"lwlshawn"},"content":"deadline return book /by Sunday","lastModifiedDate":"2021-08-14"},{"lineNumber":3,"author":{"gitId":"lwlshawn"},"content":"event project meeting /at Mon 2-4pm","lastModifiedDate":"2021-08-14"},{"lineNumber":4,"author":{"gitId":"lwlshawn"},"content":"list","lastModifiedDate":"2021-08-14"},{"lineNumber":5,"author":{"gitId":"lwlshawn"},"content":"done 2","lastModifiedDate":"2021-08-14"},{"lineNumber":6,"author":{"gitId":"lwlshawn"},"content":"delete 3","lastModifiedDate":"2021-08-14"},{"lineNumber":7,"author":{"gitId":"lwlshawn"},"content":"list","lastModifiedDate":"2021-08-14"},{"lineNumber":8,"author":{"gitId":"lwlshawn"},"content":"bye","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"lwlshawn":8}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"lwlshawn"},"content":"","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"lwlshawn":1,"-":21}}]

[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"weenleen"},"content":"# duke.Duke project template","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"weenleen"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"weenleen":2,"-":22}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"weenleen"},"content":"package duke;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"weenleen"},"content":"import duke.command.Command;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"weenleen"},"content":"import duke.command.ExitCommand;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"weenleen"},"content":"public class Duke {","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"weenleen"},"content":"    private final Storage storage;","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"weenleen"},"content":"    private final TaskList taskList;","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"weenleen"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"weenleen"},"content":"        this.storage \u003d new Storage(filePath);","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"weenleen"},"content":"        this.taskList \u003d new TaskList(storage.load());","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"weenleen"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"weenleen"},"content":"    public void run() {","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"weenleen"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"weenleen"},"content":"        ui.greet();","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"weenleen"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":22,"author":{"gitId":"weenleen"},"content":"        // duke.Duke continuously asks for the user\u0027s input until they type \"bye\"","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"weenleen"},"content":"        while (!isExit) {","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"weenleen"},"content":"            try {","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"weenleen"},"content":"                String fullCommand \u003d ui.readCommand();","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"weenleen"},"content":"                Command c \u003d Parser.parse(fullCommand);","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"weenleen"},"content":"                c.execute(taskList, ui, storage);","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"weenleen"},"content":"                isExit \u003d c.isExit();","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"weenleen"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"weenleen"},"content":"                ui.showError(e.getMessage());","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"weenleen"},"content":"            } finally {","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"weenleen"},"content":"                ui.showLine();","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"weenleen"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"weenleen"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"weenleen"},"content":"        new ExitCommand().execute(taskList, ui, storage);","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"weenleen"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":39,"author":{"gitId":"weenleen"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-23"},{"lineNumber":40,"author":{"gitId":"weenleen"},"content":"        Duke duke \u003d new Duke(\"myTasks.txt\");","lastModifiedDate":"2021-08-23"},{"lineNumber":41,"author":{"gitId":"weenleen"},"content":"        duke.run();","lastModifiedDate":"2021-08-23"},{"lineNumber":42,"author":{"gitId":"weenleen"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":43,"author":{"gitId":"weenleen"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"weenleen":43}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"weenleen"},"content":"package duke;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"weenleen"},"content":"/**","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"weenleen"},"content":" * A class that represents exceptions unique to duke.Duke.","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"weenleen"},"content":" * A DukeException is thrown when a given input is not recognised a valid","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"weenleen"},"content":" * input for duke.Duke.","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"weenleen"},"content":" */","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"weenleen"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"weenleen"},"content":"    @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"weenleen"},"content":"    public String getMessage() {","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"weenleen"},"content":"        return \"Sorry, I don\u0027t know what that means :(\";","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"weenleen"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"weenleen"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"weenleen"},"content":"     * An exception which is thrown when the description of a duke.Task is not provided.","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"weenleen"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"weenleen"},"content":"    public static class EmptyDescriptionException extends DukeException {","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"weenleen"},"content":"        private final Task.Type type;","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"weenleen"},"content":"        public EmptyDescriptionException(Task.Type type) {","lastModifiedDate":"2021-08-23"},{"lineNumber":22,"author":{"gitId":"weenleen"},"content":"            this.type \u003d type;","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"weenleen"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"weenleen"},"content":"        @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"weenleen"},"content":"        public String getMessage() {","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"weenleen"},"content":"            return \"The description of a \" + type + \" cannot be empty!\";","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"weenleen"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"weenleen"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"weenleen"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"weenleen"},"content":"     * An exception that is thrown when the date/time of a Deadline or Event is not provided.","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"weenleen"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"weenleen"},"content":"    public static class NoTimeException extends DukeException {","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"weenleen"},"content":"        private final Task.Type type;","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"weenleen"},"content":"        public NoTimeException(Task.Type type) {","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"weenleen"},"content":"            this.type \u003d type;","lastModifiedDate":"2021-08-23"},{"lineNumber":39,"author":{"gitId":"weenleen"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":40,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":41,"author":{"gitId":"weenleen"},"content":"        @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":42,"author":{"gitId":"weenleen"},"content":"        public String getMessage() {","lastModifiedDate":"2021-08-23"},{"lineNumber":43,"author":{"gitId":"weenleen"},"content":"            return \"The \" + type + \" must have a date / time!\";","lastModifiedDate":"2021-08-23"},{"lineNumber":44,"author":{"gitId":"weenleen"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":45,"author":{"gitId":"weenleen"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":46,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":47,"author":{"gitId":"weenleen"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":48,"author":{"gitId":"weenleen"},"content":"     * Exception thrown when duke.Duke is unable to parse data in the file","lastModifiedDate":"2021-08-23"},{"lineNumber":49,"author":{"gitId":"weenleen"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":50,"author":{"gitId":"weenleen"},"content":"    public static class FileDataInvalidException extends DukeException {","lastModifiedDate":"2021-08-23"},{"lineNumber":51,"author":{"gitId":"weenleen"},"content":"        @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":52,"author":{"gitId":"weenleen"},"content":"        public String getMessage() {","lastModifiedDate":"2021-08-23"},{"lineNumber":53,"author":{"gitId":"weenleen"},"content":"            return \"Oh no! duke.Duke cannot retrieve data from the file :(\";","lastModifiedDate":"2021-08-23"},{"lineNumber":54,"author":{"gitId":"weenleen"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":55,"author":{"gitId":"weenleen"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":56,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":57,"author":{"gitId":"weenleen"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":58,"author":{"gitId":"weenleen"},"content":"     * Exception thrown when the input date string is in the wrong format","lastModifiedDate":"2021-08-23"},{"lineNumber":59,"author":{"gitId":"weenleen"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":60,"author":{"gitId":"weenleen"},"content":"    public static class DateInputInvalidException extends DukeException {","lastModifiedDate":"2021-08-23"},{"lineNumber":61,"author":{"gitId":"weenleen"},"content":"        @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":62,"author":{"gitId":"weenleen"},"content":"        public String getMessage() {","lastModifiedDate":"2021-08-23"},{"lineNumber":63,"author":{"gitId":"weenleen"},"content":"            return \"duke.Duke cannot parse the date! Please ensure the date is in the format dd-MM-yyyy\";","lastModifiedDate":"2021-08-23"},{"lineNumber":64,"author":{"gitId":"weenleen"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":65,"author":{"gitId":"weenleen"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":66,"author":{"gitId":"weenleen"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"weenleen":66}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"weenleen"},"content":"package duke;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"weenleen"},"content":"import duke.command.Command;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"weenleen"},"content":"public class Parser {","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"weenleen"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"weenleen"},"content":"     * Parses a given input string to determine what command should be executed.","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"weenleen"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"weenleen"},"content":"     * @param input The given input String.","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"weenleen"},"content":"     * @return The command to be executed.","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"weenleen"},"content":"     * @throws DukeException The exception thrown when the input cannot be parsed.","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"weenleen"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"weenleen"},"content":"    public static Command parse(String input) throws DukeException {","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"weenleen"},"content":"        String command \u003d input.split(\"\\\\s\", 2)[0];","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"weenleen"},"content":"        for (Command.Type type : Command.Type.values()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"weenleen"},"content":"            if (command.matches(type.commandRegex)) {","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"weenleen"},"content":"                return Command.createCommand(type, input);","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"weenleen"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"weenleen"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":22,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"weenleen"},"content":"        throw new DukeException();","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"weenleen"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"weenleen"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"weenleen":25}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"weenleen"},"content":"package duke;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"weenleen"},"content":"import java.io.BufferedWriter;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"weenleen"},"content":"import java.io.File;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"weenleen"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"weenleen"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"weenleen"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"weenleen"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"weenleen"},"content":"public class Storage {","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"weenleen"},"content":"    private final String filePath;","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"weenleen"},"content":"    private final File file;","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"weenleen"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"weenleen"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"weenleen"},"content":"        this.file \u003d new File(filePath);","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"weenleen"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"weenleen"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"weenleen"},"content":"     * Reads data from the file to load all the current tasks.","lastModifiedDate":"2021-08-23"},{"lineNumber":22,"author":{"gitId":"weenleen"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"weenleen"},"content":"     * @return An ArrayList of tasks stored int the file.","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"weenleen"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"weenleen"},"content":"    public ArrayList\u003cTask\u003e load() {","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"weenleen"},"content":"        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"weenleen"},"content":"        try {","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"weenleen"},"content":"            if (!file.createNewFile()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"weenleen"},"content":"                // if file already exists, read from it","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"weenleen"},"content":"                Scanner myReader \u003d new Scanner(file);","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"weenleen"},"content":"                while (myReader.hasNextLine()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"weenleen"},"content":"                    String taskData \u003d myReader.nextLine();","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"weenleen"},"content":"                    try {","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"weenleen"},"content":"                        // get Tasks from the file and add them to the list","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"weenleen"},"content":"                        Task currTask \u003d Task.readTaskFromFile(taskData);","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"weenleen"},"content":"                        list.add(currTask);","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"weenleen"},"content":"                    } catch (DukeException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":39,"author":{"gitId":"weenleen"},"content":"                        // file data is in the wrong format, cannot be read","lastModifiedDate":"2021-08-23"},{"lineNumber":40,"author":{"gitId":"weenleen"},"content":"                        System.err.println(e.getMessage());","lastModifiedDate":"2021-08-23"},{"lineNumber":41,"author":{"gitId":"weenleen"},"content":"                        System.exit(-1);","lastModifiedDate":"2021-08-23"},{"lineNumber":42,"author":{"gitId":"weenleen"},"content":"                    }","lastModifiedDate":"2021-08-23"},{"lineNumber":43,"author":{"gitId":"weenleen"},"content":"                }","lastModifiedDate":"2021-08-23"},{"lineNumber":44,"author":{"gitId":"weenleen"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":45,"author":{"gitId":"weenleen"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":46,"author":{"gitId":"weenleen"},"content":"            // exception when creating file","lastModifiedDate":"2021-08-23"},{"lineNumber":47,"author":{"gitId":"weenleen"},"content":"            System.err.println(e.getMessage());","lastModifiedDate":"2021-08-23"},{"lineNumber":48,"author":{"gitId":"weenleen"},"content":"            System.exit(-1);","lastModifiedDate":"2021-08-23"},{"lineNumber":49,"author":{"gitId":"weenleen"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":50,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":51,"author":{"gitId":"weenleen"},"content":"        return list;","lastModifiedDate":"2021-08-23"},{"lineNumber":52,"author":{"gitId":"weenleen"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":53,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":54,"author":{"gitId":"weenleen"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":55,"author":{"gitId":"weenleen"},"content":"     * Saves all the tasks in a given TaskList to the file.","lastModifiedDate":"2021-08-23"},{"lineNumber":56,"author":{"gitId":"weenleen"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":57,"author":{"gitId":"weenleen"},"content":"     * @param taskList The TaskList whose data is to be saved.","lastModifiedDate":"2021-08-23"},{"lineNumber":58,"author":{"gitId":"weenleen"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":59,"author":{"gitId":"weenleen"},"content":"    public void save(TaskList taskList) {","lastModifiedDate":"2021-08-23"},{"lineNumber":60,"author":{"gitId":"weenleen"},"content":"        ArrayList\u003cTask\u003e list \u003d taskList.getTaskList();","lastModifiedDate":"2021-08-23"},{"lineNumber":61,"author":{"gitId":"weenleen"},"content":"        try {","lastModifiedDate":"2021-08-23"},{"lineNumber":62,"author":{"gitId":"weenleen"},"content":"            BufferedWriter myWriter \u003d","lastModifiedDate":"2021-08-23"},{"lineNumber":63,"author":{"gitId":"weenleen"},"content":"                    new BufferedWriter(new FileWriter(filePath));","lastModifiedDate":"2021-08-23"},{"lineNumber":64,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":65,"author":{"gitId":"weenleen"},"content":"            for (int i \u003d 0; i \u003c list.size(); i++) {","lastModifiedDate":"2021-08-23"},{"lineNumber":66,"author":{"gitId":"weenleen"},"content":"                if (i !\u003d 0) {","lastModifiedDate":"2021-08-23"},{"lineNumber":67,"author":{"gitId":"weenleen"},"content":"                    myWriter.newLine();","lastModifiedDate":"2021-08-23"},{"lineNumber":68,"author":{"gitId":"weenleen"},"content":"                }","lastModifiedDate":"2021-08-23"},{"lineNumber":69,"author":{"gitId":"weenleen"},"content":"                myWriter.append(list.get(i).toString());","lastModifiedDate":"2021-08-23"},{"lineNumber":70,"author":{"gitId":"weenleen"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":71,"author":{"gitId":"weenleen"},"content":"            myWriter.close();","lastModifiedDate":"2021-08-23"},{"lineNumber":72,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":73,"author":{"gitId":"weenleen"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":74,"author":{"gitId":"weenleen"},"content":"            System.err.println(\"Oh no! An error occurred while writing to the file.\");","lastModifiedDate":"2021-08-23"},{"lineNumber":75,"author":{"gitId":"weenleen"},"content":"            System.exit(-1);","lastModifiedDate":"2021-08-23"},{"lineNumber":76,"author":{"gitId":"weenleen"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":77,"author":{"gitId":"weenleen"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":78,"author":{"gitId":"weenleen"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"weenleen":78}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"weenleen"},"content":"package duke;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"weenleen"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"weenleen"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"weenleen"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"weenleen"},"content":"import java.util.Locale;","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"weenleen"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"weenleen"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"weenleen"},"content":"/**","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"weenleen"},"content":" * A class representing the tasks that the user can create with duke.Duke.","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"weenleen"},"content":" * Each duke.Task has a description, and is either done or not yet done.","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"weenleen"},"content":" */","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"weenleen"},"content":"public class Task {","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"weenleen"},"content":"    private static final String DONE_STATUS_ICON \u003d \"X\";","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"weenleen"},"content":"    private static final String NOT_DONE_STATUS_ICON \u003d \" \";","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"weenleen"},"content":"    private static final DateTimeFormatter dateInputFormatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"weenleen"},"content":"    /** An enum describing the type of task. */","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"weenleen"},"content":"    enum Type {","lastModifiedDate":"2021-08-23"},{"lineNumber":22,"author":{"gitId":"weenleen"},"content":"        TODO(\"T\"), DEADLINE(\"D\"), EVENT(\"E\");","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"weenleen"},"content":"        private final String symbol;","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"weenleen"},"content":"        Type(String symbol) {","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"weenleen"},"content":"            this.symbol \u003d symbol;","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"weenleen"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"weenleen"},"content":"        public String getSymbol() {","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"weenleen"},"content":"            return this.symbol;","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"weenleen"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"weenleen"},"content":"        @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"weenleen"},"content":"        public String toString() {","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"weenleen"},"content":"            return this.name().toLowerCase(Locale.ROOT);","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"weenleen"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":39,"author":{"gitId":"weenleen"},"content":"        /**","lastModifiedDate":"2021-08-23"},{"lineNumber":40,"author":{"gitId":"weenleen"},"content":"         * Method to parse a given String input and return a Type.","lastModifiedDate":"2021-08-23"},{"lineNumber":41,"author":{"gitId":"weenleen"},"content":"         *","lastModifiedDate":"2021-08-23"},{"lineNumber":42,"author":{"gitId":"weenleen"},"content":"         * @param str The given String input.","lastModifiedDate":"2021-08-23"},{"lineNumber":43,"author":{"gitId":"weenleen"},"content":"         * @return The Type matching the String input.","lastModifiedDate":"2021-08-23"},{"lineNumber":44,"author":{"gitId":"weenleen"},"content":"         */","lastModifiedDate":"2021-08-23"},{"lineNumber":45,"author":{"gitId":"weenleen"},"content":"        public static Type getType(String str) {","lastModifiedDate":"2021-08-23"},{"lineNumber":46,"author":{"gitId":"weenleen"},"content":"            for (Type type : Type.values()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":47,"author":{"gitId":"weenleen"},"content":"                if (str.contentEquals(type.toString())) {","lastModifiedDate":"2021-08-23"},{"lineNumber":48,"author":{"gitId":"weenleen"},"content":"                    return type;","lastModifiedDate":"2021-08-23"},{"lineNumber":49,"author":{"gitId":"weenleen"},"content":"                }","lastModifiedDate":"2021-08-23"},{"lineNumber":50,"author":{"gitId":"weenleen"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":51,"author":{"gitId":"weenleen"},"content":"            return null;","lastModifiedDate":"2021-08-23"},{"lineNumber":52,"author":{"gitId":"weenleen"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":53,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":54,"author":{"gitId":"weenleen"},"content":"        /**","lastModifiedDate":"2021-08-23"},{"lineNumber":55,"author":{"gitId":"weenleen"},"content":"         * Returns the Type represented by the symbol.","lastModifiedDate":"2021-08-23"},{"lineNumber":56,"author":{"gitId":"weenleen"},"content":"         *","lastModifiedDate":"2021-08-23"},{"lineNumber":57,"author":{"gitId":"weenleen"},"content":"         * @param symbol The symbol provided.","lastModifiedDate":"2021-08-23"},{"lineNumber":58,"author":{"gitId":"weenleen"},"content":"         * @return The represented Type.","lastModifiedDate":"2021-08-23"},{"lineNumber":59,"author":{"gitId":"weenleen"},"content":"         */","lastModifiedDate":"2021-08-23"},{"lineNumber":60,"author":{"gitId":"weenleen"},"content":"        public static Type getTypeFromSymbol(String symbol) {","lastModifiedDate":"2021-08-23"},{"lineNumber":61,"author":{"gitId":"weenleen"},"content":"            for (Type type : Type.values()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":62,"author":{"gitId":"weenleen"},"content":"                if (symbol.equals(type.getSymbol())) {","lastModifiedDate":"2021-08-23"},{"lineNumber":63,"author":{"gitId":"weenleen"},"content":"                    return type;","lastModifiedDate":"2021-08-23"},{"lineNumber":64,"author":{"gitId":"weenleen"},"content":"                }","lastModifiedDate":"2021-08-23"},{"lineNumber":65,"author":{"gitId":"weenleen"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":66,"author":{"gitId":"weenleen"},"content":"            return null;","lastModifiedDate":"2021-08-23"},{"lineNumber":67,"author":{"gitId":"weenleen"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":68,"author":{"gitId":"weenleen"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":69,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":70,"author":{"gitId":"weenleen"},"content":"    private final String description;","lastModifiedDate":"2021-08-23"},{"lineNumber":71,"author":{"gitId":"weenleen"},"content":"    private boolean isDone;","lastModifiedDate":"2021-08-23"},{"lineNumber":72,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":73,"author":{"gitId":"weenleen"},"content":"    protected Task(String description) {","lastModifiedDate":"2021-08-23"},{"lineNumber":74,"author":{"gitId":"weenleen"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-23"},{"lineNumber":75,"author":{"gitId":"weenleen"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-23"},{"lineNumber":76,"author":{"gitId":"weenleen"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":77,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":78,"author":{"gitId":"weenleen"},"content":"    protected Task(String description, boolean isDone) {","lastModifiedDate":"2021-08-23"},{"lineNumber":79,"author":{"gitId":"weenleen"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-23"},{"lineNumber":80,"author":{"gitId":"weenleen"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2021-08-23"},{"lineNumber":81,"author":{"gitId":"weenleen"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":82,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":83,"author":{"gitId":"weenleen"},"content":"    /** A duke.Task without any date/time attached to it. */","lastModifiedDate":"2021-08-23"},{"lineNumber":84,"author":{"gitId":"weenleen"},"content":"    private static class ToDo extends Task {","lastModifiedDate":"2021-08-23"},{"lineNumber":85,"author":{"gitId":"weenleen"},"content":"        public ToDo(String description) {","lastModifiedDate":"2021-08-23"},{"lineNumber":86,"author":{"gitId":"weenleen"},"content":"            super(description);","lastModifiedDate":"2021-08-23"},{"lineNumber":87,"author":{"gitId":"weenleen"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":88,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":89,"author":{"gitId":"weenleen"},"content":"        public ToDo(String description, boolean isDone) {","lastModifiedDate":"2021-08-23"},{"lineNumber":90,"author":{"gitId":"weenleen"},"content":"            super(description, isDone);","lastModifiedDate":"2021-08-23"},{"lineNumber":91,"author":{"gitId":"weenleen"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":92,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":93,"author":{"gitId":"weenleen"},"content":"        @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":94,"author":{"gitId":"weenleen"},"content":"        public String toString() {","lastModifiedDate":"2021-08-23"},{"lineNumber":95,"author":{"gitId":"weenleen"},"content":"            return \"[\" + Type.TODO.getSymbol() + \"]\" + super.toString();","lastModifiedDate":"2021-08-23"},{"lineNumber":96,"author":{"gitId":"weenleen"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":97,"author":{"gitId":"weenleen"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":98,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":99,"author":{"gitId":"weenleen"},"content":"    /** A type of task that needs to be done before a specific date/time. */","lastModifiedDate":"2021-08-23"},{"lineNumber":100,"author":{"gitId":"weenleen"},"content":"    public static class Deadline extends Task {","lastModifiedDate":"2021-08-23"},{"lineNumber":101,"author":{"gitId":"weenleen"},"content":"        private final LocalDate time;","lastModifiedDate":"2021-08-23"},{"lineNumber":102,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":103,"author":{"gitId":"weenleen"},"content":"        public Deadline(String description, String time) throws DukeException {","lastModifiedDate":"2021-08-23"},{"lineNumber":104,"author":{"gitId":"weenleen"},"content":"            super(description);","lastModifiedDate":"2021-08-23"},{"lineNumber":105,"author":{"gitId":"weenleen"},"content":"            try {","lastModifiedDate":"2021-08-23"},{"lineNumber":106,"author":{"gitId":"weenleen"},"content":"                this.time \u003d LocalDate.parse(time, dateInputFormatter);","lastModifiedDate":"2021-08-23"},{"lineNumber":107,"author":{"gitId":"weenleen"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":108,"author":{"gitId":"weenleen"},"content":"                throw new DukeException.DateInputInvalidException();","lastModifiedDate":"2021-08-23"},{"lineNumber":109,"author":{"gitId":"weenleen"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":110,"author":{"gitId":"weenleen"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":111,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":112,"author":{"gitId":"weenleen"},"content":"        public Deadline(String description, boolean isDone, String time) throws DukeException {","lastModifiedDate":"2021-08-23"},{"lineNumber":113,"author":{"gitId":"weenleen"},"content":"            super(description, isDone);","lastModifiedDate":"2021-08-23"},{"lineNumber":114,"author":{"gitId":"weenleen"},"content":"            try {","lastModifiedDate":"2021-08-23"},{"lineNumber":115,"author":{"gitId":"weenleen"},"content":"                this.time \u003d LocalDate.parse(time, dateInputFormatter);","lastModifiedDate":"2021-08-23"},{"lineNumber":116,"author":{"gitId":"weenleen"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":117,"author":{"gitId":"weenleen"},"content":"                throw new DukeException.DateInputInvalidException();","lastModifiedDate":"2021-08-23"},{"lineNumber":118,"author":{"gitId":"weenleen"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":119,"author":{"gitId":"weenleen"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":120,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":121,"author":{"gitId":"weenleen"},"content":"        @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":122,"author":{"gitId":"weenleen"},"content":"        public String toString() {","lastModifiedDate":"2021-08-23"},{"lineNumber":123,"author":{"gitId":"weenleen"},"content":"            return \"[\" + Type.DEADLINE.getSymbol() + \"]\" + super.toString()","lastModifiedDate":"2021-08-23"},{"lineNumber":124,"author":{"gitId":"weenleen"},"content":"                    + \" (by: \" + dateInputFormatter.format(time) + \")\";","lastModifiedDate":"2021-08-23"},{"lineNumber":125,"author":{"gitId":"weenleen"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":126,"author":{"gitId":"weenleen"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":127,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":128,"author":{"gitId":"weenleen"},"content":"    /** A type of duke.Task that starts at a specific time and ends at a specific date/time. */","lastModifiedDate":"2021-08-23"},{"lineNumber":129,"author":{"gitId":"weenleen"},"content":"    public static class Event extends Task {","lastModifiedDate":"2021-08-23"},{"lineNumber":130,"author":{"gitId":"weenleen"},"content":"        private final LocalDate time;","lastModifiedDate":"2021-08-23"},{"lineNumber":131,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":132,"author":{"gitId":"weenleen"},"content":"        public Event(String description, String time) throws DukeException {","lastModifiedDate":"2021-08-23"},{"lineNumber":133,"author":{"gitId":"weenleen"},"content":"            super(description);","lastModifiedDate":"2021-08-23"},{"lineNumber":134,"author":{"gitId":"weenleen"},"content":"            try {","lastModifiedDate":"2021-08-23"},{"lineNumber":135,"author":{"gitId":"weenleen"},"content":"                this.time \u003d LocalDate.parse(time, dateInputFormatter);","lastModifiedDate":"2021-08-23"},{"lineNumber":136,"author":{"gitId":"weenleen"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":137,"author":{"gitId":"weenleen"},"content":"                throw new DukeException.DateInputInvalidException();","lastModifiedDate":"2021-08-23"},{"lineNumber":138,"author":{"gitId":"weenleen"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":139,"author":{"gitId":"weenleen"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":140,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":141,"author":{"gitId":"weenleen"},"content":"        public Event(String description, boolean isDone, String time) throws DukeException {","lastModifiedDate":"2021-08-23"},{"lineNumber":142,"author":{"gitId":"weenleen"},"content":"            super(description, isDone);","lastModifiedDate":"2021-08-23"},{"lineNumber":143,"author":{"gitId":"weenleen"},"content":"            try {","lastModifiedDate":"2021-08-23"},{"lineNumber":144,"author":{"gitId":"weenleen"},"content":"                this.time \u003d LocalDate.parse(time, dateInputFormatter);","lastModifiedDate":"2021-08-23"},{"lineNumber":145,"author":{"gitId":"weenleen"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":146,"author":{"gitId":"weenleen"},"content":"                throw new DukeException.DateInputInvalidException();","lastModifiedDate":"2021-08-23"},{"lineNumber":147,"author":{"gitId":"weenleen"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":148,"author":{"gitId":"weenleen"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":149,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":150,"author":{"gitId":"weenleen"},"content":"        @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":151,"author":{"gitId":"weenleen"},"content":"        public String toString() {","lastModifiedDate":"2021-08-23"},{"lineNumber":152,"author":{"gitId":"weenleen"},"content":"            return \"[\" + Type.EVENT.getSymbol() + \"]\" + super.toString()","lastModifiedDate":"2021-08-23"},{"lineNumber":153,"author":{"gitId":"weenleen"},"content":"                    + \" (at: \" + dateInputFormatter.format(time) + \")\";","lastModifiedDate":"2021-08-23"},{"lineNumber":154,"author":{"gitId":"weenleen"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":155,"author":{"gitId":"weenleen"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":156,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":157,"author":{"gitId":"weenleen"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":158,"author":{"gitId":"weenleen"},"content":"     * Parses the data from the file to return a duke.Task.","lastModifiedDate":"2021-08-23"},{"lineNumber":159,"author":{"gitId":"weenleen"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":160,"author":{"gitId":"weenleen"},"content":"     * @param str The String input read from the file.","lastModifiedDate":"2021-08-23"},{"lineNumber":161,"author":{"gitId":"weenleen"},"content":"     * @return The duke.Task whose data is stored in the file.","lastModifiedDate":"2021-08-23"},{"lineNumber":162,"author":{"gitId":"weenleen"},"content":"     * @throws DukeException The exception thrown when the file data is invalid.","lastModifiedDate":"2021-08-23"},{"lineNumber":163,"author":{"gitId":"weenleen"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":164,"author":{"gitId":"weenleen"},"content":"    public static Task readTaskFromFile(String str) throws DukeException {","lastModifiedDate":"2021-08-23"},{"lineNumber":165,"author":{"gitId":"weenleen"},"content":"        String regex \u003d \"^\\\\[([TDE])]\\\\[([X ])] (.+)$\";","lastModifiedDate":"2021-08-23"},{"lineNumber":166,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":167,"author":{"gitId":"weenleen"},"content":"        // Create a Pattern object","lastModifiedDate":"2021-08-23"},{"lineNumber":168,"author":{"gitId":"weenleen"},"content":"        Pattern pattern \u003d Pattern.compile(regex);","lastModifiedDate":"2021-08-23"},{"lineNumber":169,"author":{"gitId":"weenleen"},"content":"        Matcher m \u003d pattern.matcher(str);","lastModifiedDate":"2021-08-23"},{"lineNumber":170,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":171,"author":{"gitId":"weenleen"},"content":"        String taskSymbol;","lastModifiedDate":"2021-08-23"},{"lineNumber":172,"author":{"gitId":"weenleen"},"content":"        String statusIcon;","lastModifiedDate":"2021-08-23"},{"lineNumber":173,"author":{"gitId":"weenleen"},"content":"        String details;","lastModifiedDate":"2021-08-23"},{"lineNumber":174,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":175,"author":{"gitId":"weenleen"},"content":"        // check if file string matches the format","lastModifiedDate":"2021-08-23"},{"lineNumber":176,"author":{"gitId":"weenleen"},"content":"        if (m.find()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":177,"author":{"gitId":"weenleen"},"content":"            taskSymbol \u003d m.group(1);","lastModifiedDate":"2021-08-23"},{"lineNumber":178,"author":{"gitId":"weenleen"},"content":"            statusIcon \u003d  m.group(2);","lastModifiedDate":"2021-08-23"},{"lineNumber":179,"author":{"gitId":"weenleen"},"content":"            details \u003d m.group(3);","lastModifiedDate":"2021-08-23"},{"lineNumber":180,"author":{"gitId":"weenleen"},"content":"        } else {","lastModifiedDate":"2021-08-23"},{"lineNumber":181,"author":{"gitId":"weenleen"},"content":"            throw new DukeException.FileDataInvalidException();","lastModifiedDate":"2021-08-23"},{"lineNumber":182,"author":{"gitId":"weenleen"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":183,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":184,"author":{"gitId":"weenleen"},"content":"        boolean isDone;","lastModifiedDate":"2021-08-23"},{"lineNumber":185,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":186,"author":{"gitId":"weenleen"},"content":"        // parse task type","lastModifiedDate":"2021-08-23"},{"lineNumber":187,"author":{"gitId":"weenleen"},"content":"        Type type \u003d Type.getTypeFromSymbol(taskSymbol);","lastModifiedDate":"2021-08-23"},{"lineNumber":188,"author":{"gitId":"weenleen"},"content":"        if (type \u003d\u003d null) {","lastModifiedDate":"2021-08-23"},{"lineNumber":189,"author":{"gitId":"weenleen"},"content":"            throw new DukeException.FileDataInvalidException();","lastModifiedDate":"2021-08-23"},{"lineNumber":190,"author":{"gitId":"weenleen"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":191,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":192,"author":{"gitId":"weenleen"},"content":"        // parse status icon","lastModifiedDate":"2021-08-23"},{"lineNumber":193,"author":{"gitId":"weenleen"},"content":"        if (statusIcon.equals(DONE_STATUS_ICON)) {","lastModifiedDate":"2021-08-23"},{"lineNumber":194,"author":{"gitId":"weenleen"},"content":"            isDone \u003d true;","lastModifiedDate":"2021-08-23"},{"lineNumber":195,"author":{"gitId":"weenleen"},"content":"        } else if (statusIcon.equals(NOT_DONE_STATUS_ICON)) {","lastModifiedDate":"2021-08-23"},{"lineNumber":196,"author":{"gitId":"weenleen"},"content":"            isDone \u003d false;","lastModifiedDate":"2021-08-23"},{"lineNumber":197,"author":{"gitId":"weenleen"},"content":"        } else {","lastModifiedDate":"2021-08-23"},{"lineNumber":198,"author":{"gitId":"weenleen"},"content":"            throw new DukeException.FileDataInvalidException();","lastModifiedDate":"2021-08-23"},{"lineNumber":199,"author":{"gitId":"weenleen"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":200,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":201,"author":{"gitId":"weenleen"},"content":"        switch (type) {","lastModifiedDate":"2021-08-23"},{"lineNumber":202,"author":{"gitId":"weenleen"},"content":"            case TODO:","lastModifiedDate":"2021-08-23"},{"lineNumber":203,"author":{"gitId":"weenleen"},"content":"                return new ToDo(details, isDone);","lastModifiedDate":"2021-08-23"},{"lineNumber":204,"author":{"gitId":"weenleen"},"content":"            case DEADLINE:","lastModifiedDate":"2021-08-23"},{"lineNumber":205,"author":{"gitId":"weenleen"},"content":"                Pattern deadlinePattern \u003d","lastModifiedDate":"2021-08-23"},{"lineNumber":206,"author":{"gitId":"weenleen"},"content":"                        Pattern.compile(\"(.+) \\\\(by: (\\\\d{1,2}-\\\\d{1,2}-\\\\d{4})\\\\)\");","lastModifiedDate":"2021-08-23"},{"lineNumber":207,"author":{"gitId":"weenleen"},"content":"                Matcher deadlineMatcher \u003d deadlinePattern.matcher(details);","lastModifiedDate":"2021-08-23"},{"lineNumber":208,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":209,"author":{"gitId":"weenleen"},"content":"                if (deadlineMatcher.find()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":210,"author":{"gitId":"weenleen"},"content":"                    try {","lastModifiedDate":"2021-08-23"},{"lineNumber":211,"author":{"gitId":"weenleen"},"content":"                        return new Deadline(","lastModifiedDate":"2021-08-23"},{"lineNumber":212,"author":{"gitId":"weenleen"},"content":"                                deadlineMatcher.group(1), isDone, deadlineMatcher.group(2));","lastModifiedDate":"2021-08-23"},{"lineNumber":213,"author":{"gitId":"weenleen"},"content":"                    } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":214,"author":{"gitId":"weenleen"},"content":"                        throw new DukeException.FileDataInvalidException();","lastModifiedDate":"2021-08-23"},{"lineNumber":215,"author":{"gitId":"weenleen"},"content":"                    }","lastModifiedDate":"2021-08-23"},{"lineNumber":216,"author":{"gitId":"weenleen"},"content":"                }","lastModifiedDate":"2021-08-23"},{"lineNumber":217,"author":{"gitId":"weenleen"},"content":"            case EVENT:","lastModifiedDate":"2021-08-23"},{"lineNumber":218,"author":{"gitId":"weenleen"},"content":"                Pattern eventPattern \u003d","lastModifiedDate":"2021-08-23"},{"lineNumber":219,"author":{"gitId":"weenleen"},"content":"                        Pattern.compile(\"(.+) \\\\(at: (\\\\d{1,2}-\\\\d{1,2}-\\\\d{4})\\\\)\");","lastModifiedDate":"2021-08-23"},{"lineNumber":220,"author":{"gitId":"weenleen"},"content":"                Matcher eventMatcher \u003d eventPattern.matcher(details);","lastModifiedDate":"2021-08-23"},{"lineNumber":221,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":222,"author":{"gitId":"weenleen"},"content":"                if (eventMatcher.find()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":223,"author":{"gitId":"weenleen"},"content":"                    try {","lastModifiedDate":"2021-08-23"},{"lineNumber":224,"author":{"gitId":"weenleen"},"content":"                        return new Event(","lastModifiedDate":"2021-08-23"},{"lineNumber":225,"author":{"gitId":"weenleen"},"content":"                                eventMatcher.group(1), isDone, eventMatcher.group(2));","lastModifiedDate":"2021-08-23"},{"lineNumber":226,"author":{"gitId":"weenleen"},"content":"                    } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":227,"author":{"gitId":"weenleen"},"content":"                        throw new DukeException.FileDataInvalidException();","lastModifiedDate":"2021-08-23"},{"lineNumber":228,"author":{"gitId":"weenleen"},"content":"                    }","lastModifiedDate":"2021-08-23"},{"lineNumber":229,"author":{"gitId":"weenleen"},"content":"                }","lastModifiedDate":"2021-08-23"},{"lineNumber":230,"author":{"gitId":"weenleen"},"content":"            default:","lastModifiedDate":"2021-08-23"},{"lineNumber":231,"author":{"gitId":"weenleen"},"content":"                throw new DukeException.FileDataInvalidException();","lastModifiedDate":"2021-08-23"},{"lineNumber":232,"author":{"gitId":"weenleen"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":233,"author":{"gitId":"weenleen"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":234,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":235,"author":{"gitId":"weenleen"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":236,"author":{"gitId":"weenleen"},"content":"     * Creates a task from the input provided by the user.","lastModifiedDate":"2021-08-23"},{"lineNumber":237,"author":{"gitId":"weenleen"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":238,"author":{"gitId":"weenleen"},"content":"     * @param str The input from the user.","lastModifiedDate":"2021-08-23"},{"lineNumber":239,"author":{"gitId":"weenleen"},"content":"     * @return A duke.Task made by the user.","lastModifiedDate":"2021-08-23"},{"lineNumber":240,"author":{"gitId":"weenleen"},"content":"     * @throws DukeException The exception thrown when input is invalid.","lastModifiedDate":"2021-08-23"},{"lineNumber":241,"author":{"gitId":"weenleen"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":242,"author":{"gitId":"weenleen"},"content":"    public static Task createTask(String str) throws DukeException {","lastModifiedDate":"2021-08-23"},{"lineNumber":243,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":244,"author":{"gitId":"weenleen"},"content":"        Pattern pattern \u003d Pattern.compile(\"^(todo|deadline|event)( (.*?))?$\");","lastModifiedDate":"2021-08-23"},{"lineNumber":245,"author":{"gitId":"weenleen"},"content":"        Matcher m \u003d pattern.matcher(str);","lastModifiedDate":"2021-08-23"},{"lineNumber":246,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":247,"author":{"gitId":"weenleen"},"content":"        Type type;","lastModifiedDate":"2021-08-23"},{"lineNumber":248,"author":{"gitId":"weenleen"},"content":"        boolean descIsEmpty;","lastModifiedDate":"2021-08-23"},{"lineNumber":249,"author":{"gitId":"weenleen"},"content":"        String details;","lastModifiedDate":"2021-08-23"},{"lineNumber":250,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":251,"author":{"gitId":"weenleen"},"content":"        if (m.find()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":252,"author":{"gitId":"weenleen"},"content":"            type \u003d Type.getType(m.group(1));","lastModifiedDate":"2021-08-23"},{"lineNumber":253,"author":{"gitId":"weenleen"},"content":"            if (type \u003d\u003d null) {","lastModifiedDate":"2021-08-23"},{"lineNumber":254,"author":{"gitId":"weenleen"},"content":"                throw new DukeException();","lastModifiedDate":"2021-08-23"},{"lineNumber":255,"author":{"gitId":"weenleen"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":256,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":257,"author":{"gitId":"weenleen"},"content":"            String tmp \u003d m.group(2);","lastModifiedDate":"2021-08-23"},{"lineNumber":258,"author":{"gitId":"weenleen"},"content":"            details \u003d m.group(3);","lastModifiedDate":"2021-08-23"},{"lineNumber":259,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":260,"author":{"gitId":"weenleen"},"content":"            descIsEmpty \u003d tmp \u003d\u003d null || tmp.isEmpty() || tmp.matches(\"^ *?$\")","lastModifiedDate":"2021-08-23"},{"lineNumber":261,"author":{"gitId":"weenleen"},"content":"                    || details \u003d\u003d null;","lastModifiedDate":"2021-08-23"},{"lineNumber":262,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":263,"author":{"gitId":"weenleen"},"content":"            if (descIsEmpty) {","lastModifiedDate":"2021-08-23"},{"lineNumber":264,"author":{"gitId":"weenleen"},"content":"                throw new DukeException.EmptyDescriptionException(type);","lastModifiedDate":"2021-08-23"},{"lineNumber":265,"author":{"gitId":"weenleen"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":266,"author":{"gitId":"weenleen"},"content":"        } else {","lastModifiedDate":"2021-08-23"},{"lineNumber":267,"author":{"gitId":"weenleen"},"content":"            throw new DukeException();","lastModifiedDate":"2021-08-23"},{"lineNumber":268,"author":{"gitId":"weenleen"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":269,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":270,"author":{"gitId":"weenleen"},"content":"        switch (type) {","lastModifiedDate":"2021-08-23"},{"lineNumber":271,"author":{"gitId":"weenleen"},"content":"            case TODO:","lastModifiedDate":"2021-08-23"},{"lineNumber":272,"author":{"gitId":"weenleen"},"content":"                return new ToDo(details);","lastModifiedDate":"2021-08-23"},{"lineNumber":273,"author":{"gitId":"weenleen"},"content":"            case DEADLINE:","lastModifiedDate":"2021-08-23"},{"lineNumber":274,"author":{"gitId":"weenleen"},"content":"                Pattern p_deadline \u003d Pattern.compile(\"^(.+) /by (.+)$\");","lastModifiedDate":"2021-08-23"},{"lineNumber":275,"author":{"gitId":"weenleen"},"content":"                Matcher m_deadline \u003d p_deadline.matcher(details);","lastModifiedDate":"2021-08-23"},{"lineNumber":276,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":277,"author":{"gitId":"weenleen"},"content":"                if (m_deadline.find()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":278,"author":{"gitId":"weenleen"},"content":"                    return new Deadline(m_deadline.group(1), m_deadline.group(2));","lastModifiedDate":"2021-08-23"},{"lineNumber":279,"author":{"gitId":"weenleen"},"content":"                }else {","lastModifiedDate":"2021-08-23"},{"lineNumber":280,"author":{"gitId":"weenleen"},"content":"                    throw new DukeException.NoTimeException(type);","lastModifiedDate":"2021-08-23"},{"lineNumber":281,"author":{"gitId":"weenleen"},"content":"                }","lastModifiedDate":"2021-08-23"},{"lineNumber":282,"author":{"gitId":"weenleen"},"content":"            case EVENT:","lastModifiedDate":"2021-08-23"},{"lineNumber":283,"author":{"gitId":"weenleen"},"content":"                Pattern p_event \u003d Pattern.compile(\"^(.+) /at (.+)$\");","lastModifiedDate":"2021-08-23"},{"lineNumber":284,"author":{"gitId":"weenleen"},"content":"                Matcher m_event \u003d p_event.matcher(details);","lastModifiedDate":"2021-08-23"},{"lineNumber":285,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":286,"author":{"gitId":"weenleen"},"content":"                if (m_event.find()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":287,"author":{"gitId":"weenleen"},"content":"                    return new Event(m_event.group(1), m_event.group(2));","lastModifiedDate":"2021-08-23"},{"lineNumber":288,"author":{"gitId":"weenleen"},"content":"                }else {","lastModifiedDate":"2021-08-23"},{"lineNumber":289,"author":{"gitId":"weenleen"},"content":"                    throw new DukeException.NoTimeException(type);","lastModifiedDate":"2021-08-23"},{"lineNumber":290,"author":{"gitId":"weenleen"},"content":"                }","lastModifiedDate":"2021-08-23"},{"lineNumber":291,"author":{"gitId":"weenleen"},"content":"            default:","lastModifiedDate":"2021-08-23"},{"lineNumber":292,"author":{"gitId":"weenleen"},"content":"                throw new DukeException();","lastModifiedDate":"2021-08-23"},{"lineNumber":293,"author":{"gitId":"weenleen"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":294,"author":{"gitId":"weenleen"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":295,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":296,"author":{"gitId":"weenleen"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":297,"author":{"gitId":"weenleen"},"content":"     * Returns the status icon indicated whether a task is done.","lastModifiedDate":"2021-08-23"},{"lineNumber":298,"author":{"gitId":"weenleen"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":299,"author":{"gitId":"weenleen"},"content":"     * @return A status icon showing whether a task is done.","lastModifiedDate":"2021-08-23"},{"lineNumber":300,"author":{"gitId":"weenleen"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":301,"author":{"gitId":"weenleen"},"content":"    private String getStatusIcon() {","lastModifiedDate":"2021-08-23"},{"lineNumber":302,"author":{"gitId":"weenleen"},"content":"        return (isDone ? DONE_STATUS_ICON : NOT_DONE_STATUS_ICON);","lastModifiedDate":"2021-08-23"},{"lineNumber":303,"author":{"gitId":"weenleen"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":304,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":305,"author":{"gitId":"weenleen"},"content":"    /** Marks the current task as done. */","lastModifiedDate":"2021-08-23"},{"lineNumber":306,"author":{"gitId":"weenleen"},"content":"    public void markAsDone() {","lastModifiedDate":"2021-08-23"},{"lineNumber":307,"author":{"gitId":"weenleen"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-08-23"},{"lineNumber":308,"author":{"gitId":"weenleen"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2021-08-23"},{"lineNumber":309,"author":{"gitId":"weenleen"},"content":"        System.out.println(\"  \" + this);","lastModifiedDate":"2021-08-23"},{"lineNumber":310,"author":{"gitId":"weenleen"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":311,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":312,"author":{"gitId":"weenleen"},"content":"    @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":313,"author":{"gitId":"weenleen"},"content":"    public String toString() {","lastModifiedDate":"2021-08-23"},{"lineNumber":314,"author":{"gitId":"weenleen"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + this.description;","lastModifiedDate":"2021-08-23"},{"lineNumber":315,"author":{"gitId":"weenleen"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":316,"author":{"gitId":"weenleen"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"weenleen":316}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"weenleen"},"content":"package duke;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"weenleen"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"weenleen"},"content":"public class TaskList {","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"weenleen"},"content":"    private final ArrayList\u003cTask\u003e taskList;","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"weenleen"},"content":"    public TaskList(ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"weenleen"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"weenleen"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"weenleen"},"content":"    public ArrayList\u003cTask\u003e getTaskList() {","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"weenleen"},"content":"        return taskList;","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"weenleen"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"weenleen"},"content":"    public int getSize() {","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"weenleen"},"content":"        return taskList.size();","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"weenleen"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"weenleen"},"content":"    public void addToList(Task task) {","lastModifiedDate":"2021-08-23"},{"lineNumber":22,"author":{"gitId":"weenleen"},"content":"        taskList.add(task);","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"weenleen"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"weenleen"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"weenleen"},"content":"     * Removes the element in the list represented by the index.","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"weenleen"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"weenleen"},"content":"     * @param index The index of the element to be removed.","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"weenleen"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"weenleen"},"content":"    public void removeFromList(int index) {","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"weenleen"},"content":"        if (index \u003c\u003d 0 || index \u003e taskList.size()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"weenleen"},"content":"            // number given is out of bounds of the taskList","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"weenleen"},"content":"            System.out.println(\"Invalid Argument: Index \" + index + \" is out of bounds!\");","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"weenleen"},"content":"        } else {","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"weenleen"},"content":"            // no problems with the input, a task is added","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"weenleen"},"content":"            Task toDelete \u003d taskList.get(index - 1);","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"weenleen"},"content":"            taskList.remove(index - 1);","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"weenleen"},"content":"            System.out.println(\"Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2021-08-23"},{"lineNumber":39,"author":{"gitId":"weenleen"},"content":"            System.out.println(\"  \" + toDelete);","lastModifiedDate":"2021-08-23"},{"lineNumber":40,"author":{"gitId":"weenleen"},"content":"            System.out.println(\"Now you have \" + taskList.size() + \" tasks in the list.\");","lastModifiedDate":"2021-08-23"},{"lineNumber":41,"author":{"gitId":"weenleen"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":42,"author":{"gitId":"weenleen"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":43,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":44,"author":{"gitId":"weenleen"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":45,"author":{"gitId":"weenleen"},"content":"     * Prints all the elements in the TaskList.","lastModifiedDate":"2021-08-23"},{"lineNumber":46,"author":{"gitId":"weenleen"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":47,"author":{"gitId":"weenleen"},"content":"    public void printList() {","lastModifiedDate":"2021-08-23"},{"lineNumber":48,"author":{"gitId":"weenleen"},"content":"        if (taskList \u003d\u003d null || taskList.isEmpty()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":49,"author":{"gitId":"weenleen"},"content":"            System.out.println(\"You currently have no tasks!\");","lastModifiedDate":"2021-08-23"},{"lineNumber":50,"author":{"gitId":"weenleen"},"content":"        } else {","lastModifiedDate":"2021-08-23"},{"lineNumber":51,"author":{"gitId":"weenleen"},"content":"            for (int i \u003d 0; i \u003c taskList.size(); i++) {","lastModifiedDate":"2021-08-23"},{"lineNumber":52,"author":{"gitId":"weenleen"},"content":"                System.out.println((i + 1) + \". \" + taskList.get(i));","lastModifiedDate":"2021-08-23"},{"lineNumber":53,"author":{"gitId":"weenleen"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":54,"author":{"gitId":"weenleen"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":55,"author":{"gitId":"weenleen"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":56,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":57,"author":{"gitId":"weenleen"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":58,"author":{"gitId":"weenleen"},"content":"     * Marks the task at the given index as done.","lastModifiedDate":"2021-08-23"},{"lineNumber":59,"author":{"gitId":"weenleen"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":60,"author":{"gitId":"weenleen"},"content":"     * @param index The index of the task to be marked as done.","lastModifiedDate":"2021-08-23"},{"lineNumber":61,"author":{"gitId":"weenleen"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":62,"author":{"gitId":"weenleen"},"content":"    public void markAsDone(int index) {","lastModifiedDate":"2021-08-23"},{"lineNumber":63,"author":{"gitId":"weenleen"},"content":"        if (index \u003c\u003d 0 || index \u003e taskList.size()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":64,"author":{"gitId":"weenleen"},"content":"            // number given is out of bounds of the taskList","lastModifiedDate":"2021-08-23"},{"lineNumber":65,"author":{"gitId":"weenleen"},"content":"            System.out.println(\"Invalid Argument: Index \" + index + \" is out of bounds!\");","lastModifiedDate":"2021-08-23"},{"lineNumber":66,"author":{"gitId":"weenleen"},"content":"        } else {","lastModifiedDate":"2021-08-23"},{"lineNumber":67,"author":{"gitId":"weenleen"},"content":"            // no problems with the input, a task is added","lastModifiedDate":"2021-08-23"},{"lineNumber":68,"author":{"gitId":"weenleen"},"content":"            taskList.get(index - 1).markAsDone();","lastModifiedDate":"2021-08-23"},{"lineNumber":69,"author":{"gitId":"weenleen"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":70,"author":{"gitId":"weenleen"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":71,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":72,"author":{"gitId":"weenleen"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":73,"author":{"gitId":"weenleen"},"content":"     * Finds the tasks that match a given String.","lastModifiedDate":"2021-08-23"},{"lineNumber":74,"author":{"gitId":"weenleen"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":75,"author":{"gitId":"weenleen"},"content":"     * @param str The given String.","lastModifiedDate":"2021-08-23"},{"lineNumber":76,"author":{"gitId":"weenleen"},"content":"     * @return An ArrayList of the tasks that contain the string.","lastModifiedDate":"2021-08-23"},{"lineNumber":77,"author":{"gitId":"weenleen"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":78,"author":{"gitId":"weenleen"},"content":"    public ArrayList\u003cTask\u003e findMatches(String str) {","lastModifiedDate":"2021-08-23"},{"lineNumber":79,"author":{"gitId":"weenleen"},"content":"        ArrayList\u003cTask\u003e result \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-23"},{"lineNumber":80,"author":{"gitId":"weenleen"},"content":"        for (Task task : getTaskList()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":81,"author":{"gitId":"weenleen"},"content":"            if (task.toString().contains(str)) {","lastModifiedDate":"2021-08-23"},{"lineNumber":82,"author":{"gitId":"weenleen"},"content":"                result.add(task);","lastModifiedDate":"2021-08-23"},{"lineNumber":83,"author":{"gitId":"weenleen"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":84,"author":{"gitId":"weenleen"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":85,"author":{"gitId":"weenleen"},"content":"        return result;","lastModifiedDate":"2021-08-23"},{"lineNumber":86,"author":{"gitId":"weenleen"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":87,"author":{"gitId":"weenleen"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"weenleen":87}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"weenleen"},"content":"package duke;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"weenleen"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"weenleen"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"weenleen"},"content":"public class Ui {","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"weenleen"},"content":"    private static final String divider \u003d \"____________________________________________________________\";","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"weenleen"},"content":"    private static final String logo \u003d","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"weenleen"},"content":"            \" ____        _        \\n\"","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"weenleen"},"content":"                    + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"weenleen"},"content":"                    + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"weenleen"},"content":"                    + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"weenleen"},"content":"                    + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"weenleen"},"content":"    private final Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"weenleen"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"weenleen"},"content":"     * Displays a greeting message.","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"weenleen"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":22,"author":{"gitId":"weenleen"},"content":"    public void greet() {","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"weenleen"},"content":"        System.out.println(\"Hello from\\n\" + logo +\"\\n\");","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"weenleen"},"content":"        System.out.println(\"What can I do for you?\");","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"weenleen"},"content":"        showLine();","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"weenleen"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"weenleen"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"weenleen"},"content":"     * Displays a goodbye message.","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"weenleen"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"weenleen"},"content":"    public void goodBye() {","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"weenleen"},"content":"        scanner.close();","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"weenleen"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"weenleen"},"content":"        showLine();","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"weenleen"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"weenleen"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"weenleen"},"content":"     * Prints a divider.","lastModifiedDate":"2021-08-23"},{"lineNumber":39,"author":{"gitId":"weenleen"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":40,"author":{"gitId":"weenleen"},"content":"    public void showLine() {","lastModifiedDate":"2021-08-23"},{"lineNumber":41,"author":{"gitId":"weenleen"},"content":"        System.out.println(divider);","lastModifiedDate":"2021-08-23"},{"lineNumber":42,"author":{"gitId":"weenleen"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":43,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":44,"author":{"gitId":"weenleen"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":45,"author":{"gitId":"weenleen"},"content":"     * Prints a message for when a task is created.","lastModifiedDate":"2021-08-23"},{"lineNumber":46,"author":{"gitId":"weenleen"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":47,"author":{"gitId":"weenleen"},"content":"     * @param task The task created.","lastModifiedDate":"2021-08-23"},{"lineNumber":48,"author":{"gitId":"weenleen"},"content":"     * @param taskList The current TaskList.","lastModifiedDate":"2021-08-23"},{"lineNumber":49,"author":{"gitId":"weenleen"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":50,"author":{"gitId":"weenleen"},"content":"    public void taskCreatedMessage(Task task, TaskList taskList) {","lastModifiedDate":"2021-08-23"},{"lineNumber":51,"author":{"gitId":"weenleen"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2021-08-23"},{"lineNumber":52,"author":{"gitId":"weenleen"},"content":"        System.out.println(\"  \" + task);","lastModifiedDate":"2021-08-23"},{"lineNumber":53,"author":{"gitId":"weenleen"},"content":"        System.out.println(\"Now you have \" + taskList.getSize() + \" tasks in the list.\");","lastModifiedDate":"2021-08-23"},{"lineNumber":54,"author":{"gitId":"weenleen"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":55,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":56,"author":{"gitId":"weenleen"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":57,"author":{"gitId":"weenleen"},"content":"     * Reads the given input from the user.","lastModifiedDate":"2021-08-23"},{"lineNumber":58,"author":{"gitId":"weenleen"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":59,"author":{"gitId":"weenleen"},"content":"     * @return The String input from the user.","lastModifiedDate":"2021-08-23"},{"lineNumber":60,"author":{"gitId":"weenleen"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":61,"author":{"gitId":"weenleen"},"content":"    public String readCommand() {","lastModifiedDate":"2021-08-23"},{"lineNumber":62,"author":{"gitId":"weenleen"},"content":"        return scanner.nextLine();","lastModifiedDate":"2021-08-23"},{"lineNumber":63,"author":{"gitId":"weenleen"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":64,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":65,"author":{"gitId":"weenleen"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":66,"author":{"gitId":"weenleen"},"content":"     * Displays an error message.","lastModifiedDate":"2021-08-23"},{"lineNumber":67,"author":{"gitId":"weenleen"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":68,"author":{"gitId":"weenleen"},"content":"     * @param message The message to be displayed.","lastModifiedDate":"2021-08-23"},{"lineNumber":69,"author":{"gitId":"weenleen"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":70,"author":{"gitId":"weenleen"},"content":"    public void showError(String message) {","lastModifiedDate":"2021-08-23"},{"lineNumber":71,"author":{"gitId":"weenleen"},"content":"        System.out.println(message);","lastModifiedDate":"2021-08-23"},{"lineNumber":72,"author":{"gitId":"weenleen"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":73,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":74,"author":{"gitId":"weenleen"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":75,"author":{"gitId":"weenleen"},"content":"     * Displays the results of the find command.","lastModifiedDate":"2021-08-23"},{"lineNumber":76,"author":{"gitId":"weenleen"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":77,"author":{"gitId":"weenleen"},"content":"     * @param matchList The resultant list of tasks from calling find.","lastModifiedDate":"2021-08-23"},{"lineNumber":78,"author":{"gitId":"weenleen"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":79,"author":{"gitId":"weenleen"},"content":"    public void showFindMessage(ArrayList\u003cTask\u003e matchList) {","lastModifiedDate":"2021-08-23"},{"lineNumber":80,"author":{"gitId":"weenleen"},"content":"        if (matchList \u003d\u003d null || matchList.isEmpty()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":81,"author":{"gitId":"weenleen"},"content":"            System.out.println(\"Oh no, Duke cannot find any matches!\");","lastModifiedDate":"2021-08-23"},{"lineNumber":82,"author":{"gitId":"weenleen"},"content":"            return;","lastModifiedDate":"2021-08-23"},{"lineNumber":83,"author":{"gitId":"weenleen"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":84,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":85,"author":{"gitId":"weenleen"},"content":"        System.out.println(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2021-08-23"},{"lineNumber":86,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":87,"author":{"gitId":"weenleen"},"content":"        for (int i \u003d 0; i \u003c matchList.size(); i++) {","lastModifiedDate":"2021-08-23"},{"lineNumber":88,"author":{"gitId":"weenleen"},"content":"            System.out.println((i + 1) + \".  \" + matchList.get(i));","lastModifiedDate":"2021-08-23"},{"lineNumber":89,"author":{"gitId":"weenleen"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":90,"author":{"gitId":"weenleen"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":91,"author":{"gitId":"weenleen"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"weenleen":91}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"weenleen"},"content":"package duke.command;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"weenleen"},"content":"import duke.*;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"weenleen"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"weenleen"},"content":"    private final String input;","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"weenleen"},"content":"    public AddCommand(String input) {","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"weenleen"},"content":"        this.input \u003d input;","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"weenleen"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"weenleen"},"content":"    @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"weenleen"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"weenleen"},"content":"        Task toAdd \u003d Task.createTask(input);","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"weenleen"},"content":"        taskList.addToList(toAdd);","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"weenleen"},"content":"        ui.taskCreatedMessage(toAdd, taskList);","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"weenleen"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"weenleen"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"weenleen":19}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"weenleen"},"content":"package duke.command;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"weenleen"},"content":"import duke.DukeException;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"weenleen"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"weenleen"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"weenleen"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"weenleen"},"content":"public abstract class Command {","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"weenleen"},"content":"    public enum Type {","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"weenleen"},"content":"        ADD(\"(todo|deadline|event)\"),","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"weenleen"},"content":"        DELETE(\"delete\"),","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"weenleen"},"content":"        LIST(\"^list *?\"),","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"weenleen"},"content":"        MARK_DONE(\"done\"),","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"weenleen"},"content":"        FIND(\"find\"),","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"weenleen"},"content":"        EXIT(\"^bye *?\");","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"weenleen"},"content":"        public String commandRegex;","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"weenleen"},"content":"        Type(String str) {","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"weenleen"},"content":"            this.commandRegex \u003d str;","lastModifiedDate":"2021-08-23"},{"lineNumber":22,"author":{"gitId":"weenleen"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"weenleen"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"weenleen"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"weenleen"},"content":"     * Execute the command.","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"weenleen"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"weenleen"},"content":"     * @param taskList The current TaskList.","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"weenleen"},"content":"     * @param ui The Ui.","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"weenleen"},"content":"     * @param storage The storage.","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"weenleen"},"content":"     * @throws DukeException Teh exception thrown when the command is unable to execute.","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"weenleen"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"weenleen"},"content":"    public abstract void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException;","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"weenleen"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"weenleen"},"content":"     * Returns whether a command is an ExitCommand.","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"weenleen"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"weenleen"},"content":"     * @return Whether a command is an ExitCommand.","lastModifiedDate":"2021-08-23"},{"lineNumber":39,"author":{"gitId":"weenleen"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":40,"author":{"gitId":"weenleen"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-23"},{"lineNumber":41,"author":{"gitId":"weenleen"},"content":"        return this instanceof ExitCommand;","lastModifiedDate":"2021-08-23"},{"lineNumber":42,"author":{"gitId":"weenleen"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":43,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":44,"author":{"gitId":"weenleen"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":45,"author":{"gitId":"weenleen"},"content":"     * Creates a command of a given type from a given input.","lastModifiedDate":"2021-08-23"},{"lineNumber":46,"author":{"gitId":"weenleen"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":47,"author":{"gitId":"weenleen"},"content":"     * @param type The type of command.","lastModifiedDate":"2021-08-23"},{"lineNumber":48,"author":{"gitId":"weenleen"},"content":"     * @param input The given input.","lastModifiedDate":"2021-08-23"},{"lineNumber":49,"author":{"gitId":"weenleen"},"content":"     * @return A command.","lastModifiedDate":"2021-08-23"},{"lineNumber":50,"author":{"gitId":"weenleen"},"content":"     * @throws DukeException The exception thrown when a command cannot be created.","lastModifiedDate":"2021-08-23"},{"lineNumber":51,"author":{"gitId":"weenleen"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":52,"author":{"gitId":"weenleen"},"content":"    public static Command createCommand(Command.Type type, String input) throws DukeException {","lastModifiedDate":"2021-08-23"},{"lineNumber":53,"author":{"gitId":"weenleen"},"content":"        switch (type) {","lastModifiedDate":"2021-08-23"},{"lineNumber":54,"author":{"gitId":"weenleen"},"content":"            case ADD:","lastModifiedDate":"2021-08-23"},{"lineNumber":55,"author":{"gitId":"weenleen"},"content":"                return new AddCommand(input);","lastModifiedDate":"2021-08-23"},{"lineNumber":56,"author":{"gitId":"weenleen"},"content":"            case DELETE:","lastModifiedDate":"2021-08-23"},{"lineNumber":57,"author":{"gitId":"weenleen"},"content":"                return new DeleteCommand(input);","lastModifiedDate":"2021-08-23"},{"lineNumber":58,"author":{"gitId":"weenleen"},"content":"            case LIST:","lastModifiedDate":"2021-08-23"},{"lineNumber":59,"author":{"gitId":"weenleen"},"content":"                return new ListCommand();","lastModifiedDate":"2021-08-23"},{"lineNumber":60,"author":{"gitId":"weenleen"},"content":"            case MARK_DONE:","lastModifiedDate":"2021-08-23"},{"lineNumber":61,"author":{"gitId":"weenleen"},"content":"                return new MarkDoneCommand(input);","lastModifiedDate":"2021-08-23"},{"lineNumber":62,"author":{"gitId":"weenleen"},"content":"            case FIND:","lastModifiedDate":"2021-08-23"},{"lineNumber":63,"author":{"gitId":"weenleen"},"content":"                return new FindCommand(input);","lastModifiedDate":"2021-08-23"},{"lineNumber":64,"author":{"gitId":"weenleen"},"content":"            case EXIT:","lastModifiedDate":"2021-08-23"},{"lineNumber":65,"author":{"gitId":"weenleen"},"content":"                return new ExitCommand();","lastModifiedDate":"2021-08-23"},{"lineNumber":66,"author":{"gitId":"weenleen"},"content":"            default:","lastModifiedDate":"2021-08-23"},{"lineNumber":67,"author":{"gitId":"weenleen"},"content":"                throw new DukeException();","lastModifiedDate":"2021-08-23"},{"lineNumber":68,"author":{"gitId":"weenleen"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":69,"author":{"gitId":"weenleen"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":70,"author":{"gitId":"weenleen"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"weenleen":70}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"weenleen"},"content":"package duke.command;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"weenleen"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"weenleen"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"weenleen"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"weenleen"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"weenleen"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"weenleen"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"weenleen"},"content":"    private final String input;","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"weenleen"},"content":"    public DeleteCommand(String input) {","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"weenleen"},"content":"        this.input \u003d input;","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"weenleen"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"weenleen"},"content":"    @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"weenleen"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"weenleen"},"content":"        Pattern pattern \u003d Pattern.compile(\"^delete (\\\\d+) *?$\");","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"weenleen"},"content":"        Matcher m \u003d pattern.matcher(input);","lastModifiedDate":"2021-08-23"},{"lineNumber":22,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"weenleen"},"content":"        if (m.find()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"weenleen"},"content":"            taskList.removeFromList(Integer.parseInt(m.group(1)));","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"weenleen"},"content":"        } else {","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"weenleen"},"content":"            System.out.println(\"Please indicate a task to delete\");","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"weenleen"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"weenleen"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"weenleen"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"weenleen":29}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"weenleen"},"content":"package duke.command;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"weenleen"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"weenleen"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"weenleen"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"weenleen"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"weenleen"},"content":"    @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"weenleen"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"weenleen"},"content":"        storage.save(taskList);","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"weenleen"},"content":"        ui.goodBye();","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"weenleen"},"content":"        System.exit(0);","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"weenleen"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"weenleen"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"weenleen":14}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"weenleen"},"content":"package duke.command;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"weenleen"},"content":"import duke.*;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"weenleen"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"weenleen"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"weenleen"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"weenleen"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"weenleen"},"content":"    private final String input;","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"weenleen"},"content":"    public FindCommand(String input) {","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"weenleen"},"content":"        this.input \u003d input;","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"weenleen"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"weenleen"},"content":"    @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"weenleen"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"weenleen"},"content":"        Pattern pattern \u003d Pattern.compile(\"^find (.+)$\");","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"weenleen"},"content":"        Matcher m \u003d pattern.matcher(input);","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":22,"author":{"gitId":"weenleen"},"content":"        if (m.find()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"weenleen"},"content":"            ArrayList\u003cTask\u003e matchList \u003d taskList.findMatches(m.group(1));","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"weenleen"},"content":"            ui.showFindMessage(matchList);","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"weenleen"},"content":"        } else {","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"weenleen"},"content":"            throw new DukeException();","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"weenleen"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"weenleen"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"weenleen"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"weenleen":29}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"weenleen"},"content":"package duke.command;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"weenleen"},"content":"import duke.DukeException;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"weenleen"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"weenleen"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"weenleen"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"weenleen"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"weenleen"},"content":"    @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"weenleen"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"weenleen"},"content":"        taskList.printList();","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"weenleen"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"weenleen"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"weenleen":13}},{"path":"src/main/java/duke/command/MarkDoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"weenleen"},"content":"package duke.command;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"weenleen"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"weenleen"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"weenleen"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"weenleen"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"weenleen"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"weenleen"},"content":"public class MarkDoneCommand extends Command {","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"weenleen"},"content":"    private final String input;","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"weenleen"},"content":"    public MarkDoneCommand(String input) {","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"weenleen"},"content":"        this.input \u003d input;","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"weenleen"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"weenleen"},"content":"    @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"weenleen"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"weenleen"},"content":"        Pattern pattern \u003d Pattern.compile(\"^done (\\\\d+) *?$\");","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"weenleen"},"content":"        Matcher m \u003d pattern.matcher(input);","lastModifiedDate":"2021-08-23"},{"lineNumber":22,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"weenleen"},"content":"        if (m.find()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"weenleen"},"content":"            taskList.markAsDone(Integer.parseInt(m.group(1)));","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"weenleen"},"content":"        } else {","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"weenleen"},"content":"            System.out.println(\"Please indicate a task to mark as done\");","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"weenleen"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"weenleen"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"weenleen"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"weenleen":29}},{"path":"src/test/java/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"weenleen"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"weenleen"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"weenleen"},"content":"public class DukeTest {","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"weenleen"},"content":"    @Test","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"weenleen"},"content":"    public void dummyTest(){","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"weenleen"},"content":"        assertEquals(2, 2);","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"weenleen"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"weenleen"},"content":"    @Test","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"weenleen"},"content":"    public void dummyTest2(){","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"weenleen"},"content":"        assertEquals(2, 3);","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"weenleen"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"weenleen"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"weenleen":15}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"weenleen"},"content":"todo something","lastModifiedDate":"2021-08-19"},{"lineNumber":2,"author":{"gitId":"weenleen"},"content":"deadline homework","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"weenleen"},"content":"deadline homework /by friday night","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"weenleen"},"content":"event","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"weenleen"},"content":"event birthday /at next week","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"weenleen"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"weenleen"},"content":"done 3","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"weenleen"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"weenleen"},"content":"delete 2","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"weenleen"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"weenleen"},"content":"hello","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"weenleen"},"content":"bye","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"weenleen":12}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"weenleen"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke.java","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"weenleen":1,"-":20}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"weenleen"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/Duke.java","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"weenleen":1,"-":37}}]

[{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"weenleen"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"weenleen"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"weenleen"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"weenleen"},"content":"import java.io.BufferedWriter;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"weenleen"},"content":"import java.io.File;","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"weenleen"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"weenleen"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"weenleen"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"weenleen"},"content":"import java.util.Locale;","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"weenleen"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"weenleen"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"weenleen"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":15,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"weenleen"},"content":"    private static final String divider \u003d \"____________________________________________________________\";","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"weenleen"},"content":"    private static final DateTimeFormatter dateInputFormatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":20,"author":{"gitId":"weenleen"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":21,"author":{"gitId":"weenleen"},"content":"     * An enum describing the type of task.","lastModifiedDate":"2021-08-19"},{"lineNumber":22,"author":{"gitId":"weenleen"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":23,"author":{"gitId":"weenleen"},"content":"    enum TaskType {","lastModifiedDate":"2021-08-19"},{"lineNumber":24,"author":{"gitId":"weenleen"},"content":"        TODO(\"T\"), DEADLINE(\"D\"), EVENT(\"E\");","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"weenleen"},"content":"        private final String symbol;","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"weenleen"},"content":"        TaskType(String symbol) {","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"weenleen"},"content":"            this.symbol \u003d symbol;","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"weenleen"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"weenleen"},"content":"        public String getSymbol() {","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"weenleen"},"content":"            return this.symbol;","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"weenleen"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":36,"author":{"gitId":"weenleen"},"content":"        @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":37,"author":{"gitId":"weenleen"},"content":"        public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":38,"author":{"gitId":"weenleen"},"content":"            return this.name().toLowerCase(Locale.ROOT);","lastModifiedDate":"2021-08-19"},{"lineNumber":39,"author":{"gitId":"weenleen"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":40,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":41,"author":{"gitId":"weenleen"},"content":"        /**","lastModifiedDate":"2021-08-19"},{"lineNumber":42,"author":{"gitId":"weenleen"},"content":"         * Method to parse a given String input and return a TaskType.","lastModifiedDate":"2021-08-19"},{"lineNumber":43,"author":{"gitId":"weenleen"},"content":"         *","lastModifiedDate":"2021-08-19"},{"lineNumber":44,"author":{"gitId":"weenleen"},"content":"         * @param str The given String input.","lastModifiedDate":"2021-08-19"},{"lineNumber":45,"author":{"gitId":"weenleen"},"content":"         * @return The TaskType matching the String input.","lastModifiedDate":"2021-08-19"},{"lineNumber":46,"author":{"gitId":"weenleen"},"content":"         */","lastModifiedDate":"2021-08-19"},{"lineNumber":47,"author":{"gitId":"weenleen"},"content":"        public static TaskType getType(String str) {","lastModifiedDate":"2021-08-19"},{"lineNumber":48,"author":{"gitId":"weenleen"},"content":"            for (TaskType type : TaskType.values()) {","lastModifiedDate":"2021-08-19"},{"lineNumber":49,"author":{"gitId":"weenleen"},"content":"                if (str.contentEquals(type.toString())) {","lastModifiedDate":"2021-08-23"},{"lineNumber":50,"author":{"gitId":"weenleen"},"content":"                    return type;","lastModifiedDate":"2021-08-23"},{"lineNumber":51,"author":{"gitId":"weenleen"},"content":"                }","lastModifiedDate":"2021-08-23"},{"lineNumber":52,"author":{"gitId":"weenleen"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":53,"author":{"gitId":"weenleen"},"content":"            return null;","lastModifiedDate":"2021-08-23"},{"lineNumber":54,"author":{"gitId":"weenleen"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":55,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":56,"author":{"gitId":"weenleen"},"content":"        /**","lastModifiedDate":"2021-08-23"},{"lineNumber":57,"author":{"gitId":"weenleen"},"content":"         * Returns the TaskType represented by the symbol.","lastModifiedDate":"2021-08-23"},{"lineNumber":58,"author":{"gitId":"weenleen"},"content":"         *","lastModifiedDate":"2021-08-23"},{"lineNumber":59,"author":{"gitId":"weenleen"},"content":"         * @param symbol The symbol provided.","lastModifiedDate":"2021-08-23"},{"lineNumber":60,"author":{"gitId":"weenleen"},"content":"         * @return The represented TaskType.","lastModifiedDate":"2021-08-23"},{"lineNumber":61,"author":{"gitId":"weenleen"},"content":"         */","lastModifiedDate":"2021-08-23"},{"lineNumber":62,"author":{"gitId":"weenleen"},"content":"        public static TaskType getTypeFromSymbol(String symbol) {","lastModifiedDate":"2021-08-23"},{"lineNumber":63,"author":{"gitId":"weenleen"},"content":"            for (TaskType type : TaskType.values()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":64,"author":{"gitId":"weenleen"},"content":"                if (symbol.equals(type.getSymbol())) {","lastModifiedDate":"2021-08-23"},{"lineNumber":65,"author":{"gitId":"weenleen"},"content":"                    return type;","lastModifiedDate":"2021-08-23"},{"lineNumber":66,"author":{"gitId":"weenleen"},"content":"                }","lastModifiedDate":"2021-08-23"},{"lineNumber":67,"author":{"gitId":"weenleen"},"content":"            }","lastModifiedDate":"2021-08-19"},{"lineNumber":68,"author":{"gitId":"weenleen"},"content":"            return null;","lastModifiedDate":"2021-08-19"},{"lineNumber":69,"author":{"gitId":"weenleen"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":70,"author":{"gitId":"weenleen"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":71,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":72,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":73,"author":{"gitId":"weenleen"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":74,"author":{"gitId":"weenleen"},"content":"     * A class representing the tasks that the user can create with Duke.","lastModifiedDate":"2021-08-19"},{"lineNumber":75,"author":{"gitId":"weenleen"},"content":"     * Each Task has a description, and is either done or not yet done.","lastModifiedDate":"2021-08-19"},{"lineNumber":76,"author":{"gitId":"weenleen"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":77,"author":{"gitId":"weenleen"},"content":"    private static class Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":78,"author":{"gitId":"weenleen"},"content":"        private static final String DONE_STATUS_ICON \u003d \"X\";","lastModifiedDate":"2021-08-23"},{"lineNumber":79,"author":{"gitId":"weenleen"},"content":"        private static final String NOT_DONE_STATUS_ICON \u003d \" \";","lastModifiedDate":"2021-08-23"},{"lineNumber":80,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":81,"author":{"gitId":"weenleen"},"content":"        private final String description;","lastModifiedDate":"2021-08-19"},{"lineNumber":82,"author":{"gitId":"weenleen"},"content":"        private boolean isDone;","lastModifiedDate":"2021-08-18"},{"lineNumber":83,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":84,"author":{"gitId":"weenleen"},"content":"        protected Task(String description) {","lastModifiedDate":"2021-08-19"},{"lineNumber":85,"author":{"gitId":"weenleen"},"content":"            this.description \u003d description;","lastModifiedDate":"2021-08-19"},{"lineNumber":86,"author":{"gitId":"weenleen"},"content":"            this.isDone \u003d false;","lastModifiedDate":"2021-08-18"},{"lineNumber":87,"author":{"gitId":"weenleen"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":88,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":89,"author":{"gitId":"weenleen"},"content":"        protected Task(String description, boolean isDone) {","lastModifiedDate":"2021-08-23"},{"lineNumber":90,"author":{"gitId":"weenleen"},"content":"            this.description \u003d description;","lastModifiedDate":"2021-08-23"},{"lineNumber":91,"author":{"gitId":"weenleen"},"content":"            this.isDone \u003d isDone;","lastModifiedDate":"2021-08-23"},{"lineNumber":92,"author":{"gitId":"weenleen"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":93,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":94,"author":{"gitId":"weenleen"},"content":"        /**","lastModifiedDate":"2021-08-19"},{"lineNumber":95,"author":{"gitId":"weenleen"},"content":"         * Parses the data from the file to return a Task.","lastModifiedDate":"2021-08-23"},{"lineNumber":96,"author":{"gitId":"weenleen"},"content":"         *","lastModifiedDate":"2021-08-19"},{"lineNumber":97,"author":{"gitId":"weenleen"},"content":"         * @param str The String input read from the file.","lastModifiedDate":"2021-08-23"},{"lineNumber":98,"author":{"gitId":"weenleen"},"content":"         * @return The Task whose data is stored in the file.","lastModifiedDate":"2021-08-23"},{"lineNumber":99,"author":{"gitId":"weenleen"},"content":"         * @throws DukeException The exception thrown when the file data is invalid.","lastModifiedDate":"2021-08-23"},{"lineNumber":100,"author":{"gitId":"weenleen"},"content":"         */","lastModifiedDate":"2021-08-19"},{"lineNumber":101,"author":{"gitId":"weenleen"},"content":"        public static Task readTaskFromFile(String str) throws DukeException {","lastModifiedDate":"2021-08-23"},{"lineNumber":102,"author":{"gitId":"weenleen"},"content":"            String regex \u003d \"^\\\\[([TDE])]\\\\[([X ])] (.+)$\";","lastModifiedDate":"2021-08-23"},{"lineNumber":103,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":104,"author":{"gitId":"weenleen"},"content":"            // Create a Pattern object","lastModifiedDate":"2021-08-23"},{"lineNumber":105,"author":{"gitId":"weenleen"},"content":"            Pattern pattern \u003d Pattern.compile(regex);","lastModifiedDate":"2021-08-23"},{"lineNumber":106,"author":{"gitId":"weenleen"},"content":"            Matcher m \u003d pattern.matcher(str);","lastModifiedDate":"2021-08-23"},{"lineNumber":107,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":108,"author":{"gitId":"weenleen"},"content":"            String taskSymbol;","lastModifiedDate":"2021-08-23"},{"lineNumber":109,"author":{"gitId":"weenleen"},"content":"            String statusIcon;","lastModifiedDate":"2021-08-23"},{"lineNumber":110,"author":{"gitId":"weenleen"},"content":"            String details;","lastModifiedDate":"2021-08-23"},{"lineNumber":111,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":112,"author":{"gitId":"weenleen"},"content":"            // check if file string matches the format","lastModifiedDate":"2021-08-23"},{"lineNumber":113,"author":{"gitId":"weenleen"},"content":"            if (m.find()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":114,"author":{"gitId":"weenleen"},"content":"                taskSymbol \u003d m.group(1);","lastModifiedDate":"2021-08-23"},{"lineNumber":115,"author":{"gitId":"weenleen"},"content":"                statusIcon \u003d  m.group(2);","lastModifiedDate":"2021-08-23"},{"lineNumber":116,"author":{"gitId":"weenleen"},"content":"                details \u003d m.group(3);","lastModifiedDate":"2021-08-23"},{"lineNumber":117,"author":{"gitId":"weenleen"},"content":"            } else {","lastModifiedDate":"2021-08-23"},{"lineNumber":118,"author":{"gitId":"weenleen"},"content":"                throw new DukeException.FileDataInvalidException();","lastModifiedDate":"2021-08-23"},{"lineNumber":119,"author":{"gitId":"weenleen"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":120,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":121,"author":{"gitId":"weenleen"},"content":"            boolean isDone;","lastModifiedDate":"2021-08-23"},{"lineNumber":122,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":123,"author":{"gitId":"weenleen"},"content":"            // parse task type","lastModifiedDate":"2021-08-23"},{"lineNumber":124,"author":{"gitId":"weenleen"},"content":"            TaskType type \u003d TaskType.getTypeFromSymbol(taskSymbol);","lastModifiedDate":"2021-08-23"},{"lineNumber":125,"author":{"gitId":"weenleen"},"content":"            if (type \u003d\u003d null) {","lastModifiedDate":"2021-08-23"},{"lineNumber":126,"author":{"gitId":"weenleen"},"content":"                throw new DukeException.FileDataInvalidException();","lastModifiedDate":"2021-08-23"},{"lineNumber":127,"author":{"gitId":"weenleen"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":128,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":129,"author":{"gitId":"weenleen"},"content":"            // parse status icon","lastModifiedDate":"2021-08-23"},{"lineNumber":130,"author":{"gitId":"weenleen"},"content":"            if (statusIcon.equals(DONE_STATUS_ICON)) {","lastModifiedDate":"2021-08-23"},{"lineNumber":131,"author":{"gitId":"weenleen"},"content":"                isDone \u003d true;","lastModifiedDate":"2021-08-23"},{"lineNumber":132,"author":{"gitId":"weenleen"},"content":"            } else if (statusIcon.equals(NOT_DONE_STATUS_ICON)) {","lastModifiedDate":"2021-08-23"},{"lineNumber":133,"author":{"gitId":"weenleen"},"content":"                isDone \u003d false;","lastModifiedDate":"2021-08-23"},{"lineNumber":134,"author":{"gitId":"weenleen"},"content":"            } else {","lastModifiedDate":"2021-08-19"},{"lineNumber":135,"author":{"gitId":"weenleen"},"content":"                throw new DukeException.FileDataInvalidException();","lastModifiedDate":"2021-08-23"},{"lineNumber":136,"author":{"gitId":"weenleen"},"content":"            }","lastModifiedDate":"2021-08-18"},{"lineNumber":137,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":138,"author":{"gitId":"weenleen"},"content":"            switch (type) {","lastModifiedDate":"2021-08-23"},{"lineNumber":139,"author":{"gitId":"weenleen"},"content":"                case TODO:","lastModifiedDate":"2021-08-23"},{"lineNumber":140,"author":{"gitId":"weenleen"},"content":"                    return new ToDo(details, isDone);","lastModifiedDate":"2021-08-23"},{"lineNumber":141,"author":{"gitId":"weenleen"},"content":"                case DEADLINE:","lastModifiedDate":"2021-08-23"},{"lineNumber":142,"author":{"gitId":"weenleen"},"content":"                    Pattern deadlinePattern \u003d","lastModifiedDate":"2021-08-23"},{"lineNumber":143,"author":{"gitId":"weenleen"},"content":"                            Pattern.compile(\"(.+) \\\\(by: (\\\\d{1,2}-\\\\d{1,2}-\\\\d{4})\\\\)\");","lastModifiedDate":"2021-08-23"},{"lineNumber":144,"author":{"gitId":"weenleen"},"content":"                    Matcher deadlineMatcher \u003d deadlinePattern.matcher(details);","lastModifiedDate":"2021-08-23"},{"lineNumber":145,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":146,"author":{"gitId":"weenleen"},"content":"                    if (deadlineMatcher.find()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":147,"author":{"gitId":"weenleen"},"content":"                        try {","lastModifiedDate":"2021-08-23"},{"lineNumber":148,"author":{"gitId":"weenleen"},"content":"                            return new Deadline(","lastModifiedDate":"2021-08-23"},{"lineNumber":149,"author":{"gitId":"weenleen"},"content":"                                    deadlineMatcher.group(1), isDone, deadlineMatcher.group(2));","lastModifiedDate":"2021-08-23"},{"lineNumber":150,"author":{"gitId":"weenleen"},"content":"                        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":151,"author":{"gitId":"weenleen"},"content":"                            throw new DukeException.FileDataInvalidException();","lastModifiedDate":"2021-08-23"},{"lineNumber":152,"author":{"gitId":"weenleen"},"content":"                        }","lastModifiedDate":"2021-08-23"},{"lineNumber":153,"author":{"gitId":"weenleen"},"content":"                    }","lastModifiedDate":"2021-08-19"},{"lineNumber":154,"author":{"gitId":"weenleen"},"content":"                case EVENT:","lastModifiedDate":"2021-08-23"},{"lineNumber":155,"author":{"gitId":"weenleen"},"content":"                    Pattern eventPattern \u003d","lastModifiedDate":"2021-08-23"},{"lineNumber":156,"author":{"gitId":"weenleen"},"content":"                            Pattern.compile(\"(.+) \\\\(at: (\\\\d{1,2}-\\\\d{1,2}-\\\\d{4})\\\\)\");","lastModifiedDate":"2021-08-23"},{"lineNumber":157,"author":{"gitId":"weenleen"},"content":"                    Matcher eventMatcher \u003d eventPattern.matcher(details);","lastModifiedDate":"2021-08-23"},{"lineNumber":158,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":159,"author":{"gitId":"weenleen"},"content":"                    if (eventMatcher.find()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":160,"author":{"gitId":"weenleen"},"content":"                        try {","lastModifiedDate":"2021-08-23"},{"lineNumber":161,"author":{"gitId":"weenleen"},"content":"                            return new Event(","lastModifiedDate":"2021-08-23"},{"lineNumber":162,"author":{"gitId":"weenleen"},"content":"                                    eventMatcher.group(1), isDone, eventMatcher.group(2));","lastModifiedDate":"2021-08-23"},{"lineNumber":163,"author":{"gitId":"weenleen"},"content":"                        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":164,"author":{"gitId":"weenleen"},"content":"                            throw new DukeException.FileDataInvalidException();","lastModifiedDate":"2021-08-23"},{"lineNumber":165,"author":{"gitId":"weenleen"},"content":"                        }","lastModifiedDate":"2021-08-23"},{"lineNumber":166,"author":{"gitId":"weenleen"},"content":"                    }","lastModifiedDate":"2021-08-23"},{"lineNumber":167,"author":{"gitId":"weenleen"},"content":"                default:","lastModifiedDate":"2021-08-23"},{"lineNumber":168,"author":{"gitId":"weenleen"},"content":"                    throw new DukeException.FileDataInvalidException();","lastModifiedDate":"2021-08-23"},{"lineNumber":169,"author":{"gitId":"weenleen"},"content":"            }","lastModifiedDate":"2021-08-19"},{"lineNumber":170,"author":{"gitId":"weenleen"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":171,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":172,"author":{"gitId":"weenleen"},"content":"        /**","lastModifiedDate":"2021-08-23"},{"lineNumber":173,"author":{"gitId":"weenleen"},"content":"         * Creates a task from the input provided by the user.","lastModifiedDate":"2021-08-23"},{"lineNumber":174,"author":{"gitId":"weenleen"},"content":"         *","lastModifiedDate":"2021-08-23"},{"lineNumber":175,"author":{"gitId":"weenleen"},"content":"         * @param str The input from the user.","lastModifiedDate":"2021-08-23"},{"lineNumber":176,"author":{"gitId":"weenleen"},"content":"         * @return A Task made by the user.","lastModifiedDate":"2021-08-23"},{"lineNumber":177,"author":{"gitId":"weenleen"},"content":"         * @throws DukeException The exception thrown when input is invalid.","lastModifiedDate":"2021-08-23"},{"lineNumber":178,"author":{"gitId":"weenleen"},"content":"         */","lastModifiedDate":"2021-08-23"},{"lineNumber":179,"author":{"gitId":"weenleen"},"content":"        public static Task createTask(String str) throws DukeException {","lastModifiedDate":"2021-08-23"},{"lineNumber":180,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":181,"author":{"gitId":"weenleen"},"content":"            Pattern pattern \u003d Pattern.compile(\"^(todo|deadline|event)( (.*?))?$\");","lastModifiedDate":"2021-08-23"},{"lineNumber":182,"author":{"gitId":"weenleen"},"content":"            Matcher m \u003d pattern.matcher(str);","lastModifiedDate":"2021-08-23"},{"lineNumber":183,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":184,"author":{"gitId":"weenleen"},"content":"            TaskType type;","lastModifiedDate":"2021-08-23"},{"lineNumber":185,"author":{"gitId":"weenleen"},"content":"            boolean descIsEmpty;","lastModifiedDate":"2021-08-23"},{"lineNumber":186,"author":{"gitId":"weenleen"},"content":"            String details;","lastModifiedDate":"2021-08-23"},{"lineNumber":187,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":188,"author":{"gitId":"weenleen"},"content":"            if (m.find()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":189,"author":{"gitId":"weenleen"},"content":"                type \u003d TaskType.getType(m.group(1));","lastModifiedDate":"2021-08-23"},{"lineNumber":190,"author":{"gitId":"weenleen"},"content":"                if (type \u003d\u003d null) {","lastModifiedDate":"2021-08-23"},{"lineNumber":191,"author":{"gitId":"weenleen"},"content":"                    throw new DukeException();","lastModifiedDate":"2021-08-23"},{"lineNumber":192,"author":{"gitId":"weenleen"},"content":"                }","lastModifiedDate":"2021-08-19"},{"lineNumber":193,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":194,"author":{"gitId":"weenleen"},"content":"                String tmp \u003d m.group(2);","lastModifiedDate":"2021-08-23"},{"lineNumber":195,"author":{"gitId":"weenleen"},"content":"                details \u003d m.group(3);","lastModifiedDate":"2021-08-23"},{"lineNumber":196,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":197,"author":{"gitId":"weenleen"},"content":"                descIsEmpty \u003d tmp \u003d\u003d null || tmp.isEmpty() || tmp.matches(\"^ *?$\")","lastModifiedDate":"2021-08-23"},{"lineNumber":198,"author":{"gitId":"weenleen"},"content":"                        || details \u003d\u003d null;","lastModifiedDate":"2021-08-23"},{"lineNumber":199,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":200,"author":{"gitId":"weenleen"},"content":"                if (descIsEmpty) {","lastModifiedDate":"2021-08-23"},{"lineNumber":201,"author":{"gitId":"weenleen"},"content":"                    throw new DukeException.EmptyDescriptionException(type);","lastModifiedDate":"2021-08-19"},{"lineNumber":202,"author":{"gitId":"weenleen"},"content":"                }","lastModifiedDate":"2021-08-19"},{"lineNumber":203,"author":{"gitId":"weenleen"},"content":"            } else {","lastModifiedDate":"2021-08-23"},{"lineNumber":204,"author":{"gitId":"weenleen"},"content":"                throw new DukeException();","lastModifiedDate":"2021-08-23"},{"lineNumber":205,"author":{"gitId":"weenleen"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":206,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":207,"author":{"gitId":"weenleen"},"content":"            switch (type) {","lastModifiedDate":"2021-08-23"},{"lineNumber":208,"author":{"gitId":"weenleen"},"content":"            case TODO:","lastModifiedDate":"2021-08-23"},{"lineNumber":209,"author":{"gitId":"weenleen"},"content":"                return new ToDo(details);","lastModifiedDate":"2021-08-23"},{"lineNumber":210,"author":{"gitId":"weenleen"},"content":"            case DEADLINE:","lastModifiedDate":"2021-08-23"},{"lineNumber":211,"author":{"gitId":"weenleen"},"content":"                Pattern p_deadline \u003d Pattern.compile(\"^(.+) /by (.+)$\");","lastModifiedDate":"2021-08-23"},{"lineNumber":212,"author":{"gitId":"weenleen"},"content":"                Matcher m_deadline \u003d p_deadline.matcher(details);","lastModifiedDate":"2021-08-23"},{"lineNumber":213,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":214,"author":{"gitId":"weenleen"},"content":"                if (m_deadline.find()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":215,"author":{"gitId":"weenleen"},"content":"                    return new Deadline(m_deadline.group(1), m_deadline.group(2));","lastModifiedDate":"2021-08-23"},{"lineNumber":216,"author":{"gitId":"weenleen"},"content":"                }else {","lastModifiedDate":"2021-08-23"},{"lineNumber":217,"author":{"gitId":"weenleen"},"content":"                    throw new DukeException.NoTimeException(type);","lastModifiedDate":"2021-08-19"},{"lineNumber":218,"author":{"gitId":"weenleen"},"content":"                }","lastModifiedDate":"2021-08-19"},{"lineNumber":219,"author":{"gitId":"weenleen"},"content":"            case EVENT:","lastModifiedDate":"2021-08-23"},{"lineNumber":220,"author":{"gitId":"weenleen"},"content":"                Pattern p_event \u003d Pattern.compile(\"^(.+) /at (.+)$\");","lastModifiedDate":"2021-08-23"},{"lineNumber":221,"author":{"gitId":"weenleen"},"content":"                Matcher m_event \u003d p_event.matcher(details);","lastModifiedDate":"2021-08-23"},{"lineNumber":222,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":223,"author":{"gitId":"weenleen"},"content":"                if (m_event.find()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":224,"author":{"gitId":"weenleen"},"content":"                    return new Event(m_event.group(1), m_event.group(2));","lastModifiedDate":"2021-08-23"},{"lineNumber":225,"author":{"gitId":"weenleen"},"content":"                }else {","lastModifiedDate":"2021-08-23"},{"lineNumber":226,"author":{"gitId":"weenleen"},"content":"                    throw new DukeException.NoTimeException(type);","lastModifiedDate":"2021-08-23"},{"lineNumber":227,"author":{"gitId":"weenleen"},"content":"                }","lastModifiedDate":"2021-08-19"},{"lineNumber":228,"author":{"gitId":"weenleen"},"content":"            default:","lastModifiedDate":"2021-08-23"},{"lineNumber":229,"author":{"gitId":"weenleen"},"content":"                throw new DukeException();","lastModifiedDate":"2021-08-19"},{"lineNumber":230,"author":{"gitId":"weenleen"},"content":"            }","lastModifiedDate":"2021-08-19"},{"lineNumber":231,"author":{"gitId":"weenleen"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":232,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":233,"author":{"gitId":"weenleen"},"content":"        /**","lastModifiedDate":"2021-08-19"},{"lineNumber":234,"author":{"gitId":"weenleen"},"content":"         * Returns the status icon indicated whether a task is done.","lastModifiedDate":"2021-08-19"},{"lineNumber":235,"author":{"gitId":"weenleen"},"content":"         *","lastModifiedDate":"2021-08-19"},{"lineNumber":236,"author":{"gitId":"weenleen"},"content":"         * @return A status icon showing whether a task is done.","lastModifiedDate":"2021-08-19"},{"lineNumber":237,"author":{"gitId":"weenleen"},"content":"         */","lastModifiedDate":"2021-08-19"},{"lineNumber":238,"author":{"gitId":"weenleen"},"content":"        private String getStatusIcon() {","lastModifiedDate":"2021-08-23"},{"lineNumber":239,"author":{"gitId":"weenleen"},"content":"            return (isDone ? DONE_STATUS_ICON : NOT_DONE_STATUS_ICON);","lastModifiedDate":"2021-08-23"},{"lineNumber":240,"author":{"gitId":"weenleen"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":241,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":242,"author":{"gitId":"weenleen"},"content":"        /**","lastModifiedDate":"2021-08-19"},{"lineNumber":243,"author":{"gitId":"weenleen"},"content":"         * Marks the current task as done.","lastModifiedDate":"2021-08-19"},{"lineNumber":244,"author":{"gitId":"weenleen"},"content":"         */","lastModifiedDate":"2021-08-19"},{"lineNumber":245,"author":{"gitId":"weenleen"},"content":"        public void markAsDone() {","lastModifiedDate":"2021-08-18"},{"lineNumber":246,"author":{"gitId":"weenleen"},"content":"            this.isDone \u003d true;","lastModifiedDate":"2021-08-18"},{"lineNumber":247,"author":{"gitId":"weenleen"},"content":"            System.out.println(\"Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2021-08-18"},{"lineNumber":248,"author":{"gitId":"weenleen"},"content":"            System.out.println(\"  \" + this);","lastModifiedDate":"2021-08-19"},{"lineNumber":249,"author":{"gitId":"weenleen"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":250,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":251,"author":{"gitId":"weenleen"},"content":"        @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":252,"author":{"gitId":"weenleen"},"content":"        public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":253,"author":{"gitId":"weenleen"},"content":"            return \"[\" + this.getStatusIcon() + \"] \" + this.description;","lastModifiedDate":"2021-08-19"},{"lineNumber":254,"author":{"gitId":"weenleen"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":255,"author":{"gitId":"weenleen"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":256,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":257,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":258,"author":{"gitId":"weenleen"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":259,"author":{"gitId":"weenleen"},"content":"     * A Task without any date/time attached to it.","lastModifiedDate":"2021-08-19"},{"lineNumber":260,"author":{"gitId":"weenleen"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":261,"author":{"gitId":"weenleen"},"content":"    public static class ToDo extends Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":262,"author":{"gitId":"weenleen"},"content":"        public ToDo(String description) {","lastModifiedDate":"2021-08-19"},{"lineNumber":263,"author":{"gitId":"weenleen"},"content":"            super(description);","lastModifiedDate":"2021-08-19"},{"lineNumber":264,"author":{"gitId":"weenleen"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":265,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":266,"author":{"gitId":"weenleen"},"content":"        public ToDo(String description, boolean isDone) {","lastModifiedDate":"2021-08-23"},{"lineNumber":267,"author":{"gitId":"weenleen"},"content":"            super(description, isDone);","lastModifiedDate":"2021-08-23"},{"lineNumber":268,"author":{"gitId":"weenleen"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":269,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":270,"author":{"gitId":"weenleen"},"content":"        @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":271,"author":{"gitId":"weenleen"},"content":"        public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":272,"author":{"gitId":"weenleen"},"content":"            return \"[\" + TaskType.TODO.getSymbol() + \"]\" + super.toString();","lastModifiedDate":"2021-08-23"},{"lineNumber":273,"author":{"gitId":"weenleen"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":274,"author":{"gitId":"weenleen"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":275,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":276,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":277,"author":{"gitId":"weenleen"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":278,"author":{"gitId":"weenleen"},"content":"     * A type of task that needs to be done before a specific date/time.","lastModifiedDate":"2021-08-19"},{"lineNumber":279,"author":{"gitId":"weenleen"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":280,"author":{"gitId":"weenleen"},"content":"    public static class Deadline extends Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":281,"author":{"gitId":"weenleen"},"content":"       private final LocalDate time;","lastModifiedDate":"2021-08-23"},{"lineNumber":282,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":283,"author":{"gitId":"weenleen"},"content":"        public Deadline(String description, String time) throws DukeException {","lastModifiedDate":"2021-08-23"},{"lineNumber":284,"author":{"gitId":"weenleen"},"content":"            super(description);","lastModifiedDate":"2021-08-19"},{"lineNumber":285,"author":{"gitId":"weenleen"},"content":"            try {","lastModifiedDate":"2021-08-23"},{"lineNumber":286,"author":{"gitId":"weenleen"},"content":"                this.time \u003d LocalDate.parse(time, dateInputFormatter);","lastModifiedDate":"2021-08-23"},{"lineNumber":287,"author":{"gitId":"weenleen"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":288,"author":{"gitId":"weenleen"},"content":"                throw new DukeException.DateInputInvalidException();","lastModifiedDate":"2021-08-23"},{"lineNumber":289,"author":{"gitId":"weenleen"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":290,"author":{"gitId":"weenleen"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":291,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":292,"author":{"gitId":"weenleen"},"content":"        public Deadline(String description, boolean isDone, String time) throws DukeException {","lastModifiedDate":"2021-08-23"},{"lineNumber":293,"author":{"gitId":"weenleen"},"content":"            super(description, isDone);","lastModifiedDate":"2021-08-23"},{"lineNumber":294,"author":{"gitId":"weenleen"},"content":"            try {","lastModifiedDate":"2021-08-23"},{"lineNumber":295,"author":{"gitId":"weenleen"},"content":"                this.time \u003d LocalDate.parse(time, dateInputFormatter);","lastModifiedDate":"2021-08-23"},{"lineNumber":296,"author":{"gitId":"weenleen"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":297,"author":{"gitId":"weenleen"},"content":"                throw new DukeException.DateInputInvalidException();","lastModifiedDate":"2021-08-23"},{"lineNumber":298,"author":{"gitId":"weenleen"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":299,"author":{"gitId":"weenleen"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":300,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":301,"author":{"gitId":"weenleen"},"content":"        @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":302,"author":{"gitId":"weenleen"},"content":"        public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":303,"author":{"gitId":"weenleen"},"content":"            return \"[\" + TaskType.DEADLINE.getSymbol() + \"]\" + super.toString()","lastModifiedDate":"2021-08-23"},{"lineNumber":304,"author":{"gitId":"weenleen"},"content":"                    + \" (by: \" + dateInputFormatter.format(time) + \")\";","lastModifiedDate":"2021-08-23"},{"lineNumber":305,"author":{"gitId":"weenleen"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":306,"author":{"gitId":"weenleen"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":307,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":308,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":309,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":310,"author":{"gitId":"weenleen"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":311,"author":{"gitId":"weenleen"},"content":"     * A type of Task that starts at a specific time and ends at a specific date/time.","lastModifiedDate":"2021-08-19"},{"lineNumber":312,"author":{"gitId":"weenleen"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":313,"author":{"gitId":"weenleen"},"content":"    public static class Event extends Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":314,"author":{"gitId":"weenleen"},"content":"        private final LocalDate time;","lastModifiedDate":"2021-08-23"},{"lineNumber":315,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":316,"author":{"gitId":"weenleen"},"content":"        public Event(String description, String time) throws DukeException {","lastModifiedDate":"2021-08-23"},{"lineNumber":317,"author":{"gitId":"weenleen"},"content":"            super(description);","lastModifiedDate":"2021-08-19"},{"lineNumber":318,"author":{"gitId":"weenleen"},"content":"            try {","lastModifiedDate":"2021-08-23"},{"lineNumber":319,"author":{"gitId":"weenleen"},"content":"                this.time \u003d LocalDate.parse(time, dateInputFormatter);","lastModifiedDate":"2021-08-23"},{"lineNumber":320,"author":{"gitId":"weenleen"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":321,"author":{"gitId":"weenleen"},"content":"                throw new DukeException.DateInputInvalidException();","lastModifiedDate":"2021-08-23"},{"lineNumber":322,"author":{"gitId":"weenleen"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":323,"author":{"gitId":"weenleen"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":324,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":325,"author":{"gitId":"weenleen"},"content":"        public Event(String description, boolean isDone, String time) throws DukeException {","lastModifiedDate":"2021-08-23"},{"lineNumber":326,"author":{"gitId":"weenleen"},"content":"            super(description, isDone);","lastModifiedDate":"2021-08-23"},{"lineNumber":327,"author":{"gitId":"weenleen"},"content":"            try {","lastModifiedDate":"2021-08-23"},{"lineNumber":328,"author":{"gitId":"weenleen"},"content":"                this.time \u003d LocalDate.parse(time, dateInputFormatter);","lastModifiedDate":"2021-08-23"},{"lineNumber":329,"author":{"gitId":"weenleen"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":330,"author":{"gitId":"weenleen"},"content":"                throw new DukeException.DateInputInvalidException();","lastModifiedDate":"2021-08-23"},{"lineNumber":331,"author":{"gitId":"weenleen"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":332,"author":{"gitId":"weenleen"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":333,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":334,"author":{"gitId":"weenleen"},"content":"        @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":335,"author":{"gitId":"weenleen"},"content":"        public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":336,"author":{"gitId":"weenleen"},"content":"            return \"[\" + TaskType.EVENT.getSymbol() + \"]\" + super.toString()","lastModifiedDate":"2021-08-23"},{"lineNumber":337,"author":{"gitId":"weenleen"},"content":"                    + \" (at: \" + dateInputFormatter.format(time) + \")\";","lastModifiedDate":"2021-08-23"},{"lineNumber":338,"author":{"gitId":"weenleen"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":339,"author":{"gitId":"weenleen"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":340,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":341,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":342,"author":{"gitId":"weenleen"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":343,"author":{"gitId":"weenleen"},"content":"     * A class that represents exceptions unique to Duke.","lastModifiedDate":"2021-08-19"},{"lineNumber":344,"author":{"gitId":"weenleen"},"content":"     * A DukeException is thrown when a given input is not recognised a valid","lastModifiedDate":"2021-08-19"},{"lineNumber":345,"author":{"gitId":"weenleen"},"content":"     * input for Duke.","lastModifiedDate":"2021-08-19"},{"lineNumber":346,"author":{"gitId":"weenleen"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":347,"author":{"gitId":"weenleen"},"content":"    private static class DukeException extends Exception {","lastModifiedDate":"2021-08-19"},{"lineNumber":348,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":349,"author":{"gitId":"weenleen"},"content":"        @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":350,"author":{"gitId":"weenleen"},"content":"        public String getMessage() {","lastModifiedDate":"2021-08-19"},{"lineNumber":351,"author":{"gitId":"weenleen"},"content":"            return \"Sorry, I don\u0027t know what that means :(\";","lastModifiedDate":"2021-08-19"},{"lineNumber":352,"author":{"gitId":"weenleen"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":353,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":354,"author":{"gitId":"weenleen"},"content":"        /**","lastModifiedDate":"2021-08-19"},{"lineNumber":355,"author":{"gitId":"weenleen"},"content":"         * An exception which is thrown when the description of a Task is not provided.","lastModifiedDate":"2021-08-19"},{"lineNumber":356,"author":{"gitId":"weenleen"},"content":"         */","lastModifiedDate":"2021-08-19"},{"lineNumber":357,"author":{"gitId":"weenleen"},"content":"        public static class EmptyDescriptionException extends DukeException {","lastModifiedDate":"2021-08-19"},{"lineNumber":358,"author":{"gitId":"weenleen"},"content":"            private final TaskType type;","lastModifiedDate":"2021-08-19"},{"lineNumber":359,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":360,"author":{"gitId":"weenleen"},"content":"            public EmptyDescriptionException(TaskType type) {","lastModifiedDate":"2021-08-19"},{"lineNumber":361,"author":{"gitId":"weenleen"},"content":"                this.type \u003d type;","lastModifiedDate":"2021-08-19"},{"lineNumber":362,"author":{"gitId":"weenleen"},"content":"            }","lastModifiedDate":"2021-08-18"},{"lineNumber":363,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":364,"author":{"gitId":"weenleen"},"content":"            @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":365,"author":{"gitId":"weenleen"},"content":"            public String getMessage() {","lastModifiedDate":"2021-08-19"},{"lineNumber":366,"author":{"gitId":"weenleen"},"content":"                return \"The description of a \" + type + \" cannot be empty!\";","lastModifiedDate":"2021-08-19"},{"lineNumber":367,"author":{"gitId":"weenleen"},"content":"            }","lastModifiedDate":"2021-08-19"},{"lineNumber":368,"author":{"gitId":"weenleen"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":369,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":370,"author":{"gitId":"weenleen"},"content":"        /**","lastModifiedDate":"2021-08-19"},{"lineNumber":371,"author":{"gitId":"weenleen"},"content":"         * An exception that is thrown when the date/time of a Deadline or Event is not provided.","lastModifiedDate":"2021-08-19"},{"lineNumber":372,"author":{"gitId":"weenleen"},"content":"         */","lastModifiedDate":"2021-08-19"},{"lineNumber":373,"author":{"gitId":"weenleen"},"content":"        public static class NoTimeException extends DukeException {","lastModifiedDate":"2021-08-19"},{"lineNumber":374,"author":{"gitId":"weenleen"},"content":"            private final TaskType type;","lastModifiedDate":"2021-08-19"},{"lineNumber":375,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":376,"author":{"gitId":"weenleen"},"content":"            public NoTimeException(TaskType type) {","lastModifiedDate":"2021-08-19"},{"lineNumber":377,"author":{"gitId":"weenleen"},"content":"                this.type \u003d type;","lastModifiedDate":"2021-08-19"},{"lineNumber":378,"author":{"gitId":"weenleen"},"content":"            }","lastModifiedDate":"2021-08-18"},{"lineNumber":379,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":380,"author":{"gitId":"weenleen"},"content":"            @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":381,"author":{"gitId":"weenleen"},"content":"            public String getMessage() {","lastModifiedDate":"2021-08-19"},{"lineNumber":382,"author":{"gitId":"weenleen"},"content":"                return \"The \" + type + \" must have a date / time!\";","lastModifiedDate":"2021-08-19"},{"lineNumber":383,"author":{"gitId":"weenleen"},"content":"            }","lastModifiedDate":"2021-08-19"},{"lineNumber":384,"author":{"gitId":"weenleen"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":385,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":386,"author":{"gitId":"weenleen"},"content":"        /**","lastModifiedDate":"2021-08-23"},{"lineNumber":387,"author":{"gitId":"weenleen"},"content":"         * Exception thrown when Duke is unable to parse data in the file","lastModifiedDate":"2021-08-23"},{"lineNumber":388,"author":{"gitId":"weenleen"},"content":"         */","lastModifiedDate":"2021-08-23"},{"lineNumber":389,"author":{"gitId":"weenleen"},"content":"        public static class FileDataInvalidException extends DukeException {","lastModifiedDate":"2021-08-23"},{"lineNumber":390,"author":{"gitId":"weenleen"},"content":"            @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":391,"author":{"gitId":"weenleen"},"content":"            public String getMessage() {","lastModifiedDate":"2021-08-23"},{"lineNumber":392,"author":{"gitId":"weenleen"},"content":"                return \"Oh no! Duke cannot retrieve data from the file :(\";","lastModifiedDate":"2021-08-23"},{"lineNumber":393,"author":{"gitId":"weenleen"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":394,"author":{"gitId":"weenleen"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":395,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":396,"author":{"gitId":"weenleen"},"content":"        /**","lastModifiedDate":"2021-08-23"},{"lineNumber":397,"author":{"gitId":"weenleen"},"content":"         * Exception thrown when the input date string is in the wrong format","lastModifiedDate":"2021-08-23"},{"lineNumber":398,"author":{"gitId":"weenleen"},"content":"         */","lastModifiedDate":"2021-08-23"},{"lineNumber":399,"author":{"gitId":"weenleen"},"content":"        public static class DateInputInvalidException extends DukeException {","lastModifiedDate":"2021-08-23"},{"lineNumber":400,"author":{"gitId":"weenleen"},"content":"            @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":401,"author":{"gitId":"weenleen"},"content":"            public String getMessage() {","lastModifiedDate":"2021-08-23"},{"lineNumber":402,"author":{"gitId":"weenleen"},"content":"                return \"Duke cannot parse the date! Please ensure the date is in the format dd-MM-yyyy\";","lastModifiedDate":"2021-08-23"},{"lineNumber":403,"author":{"gitId":"weenleen"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":404,"author":{"gitId":"weenleen"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":405,"author":{"gitId":"weenleen"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":406,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":407,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":408,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":409,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":410,"author":{"gitId":"-"},"content":"        String logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":411,"author":{"gitId":"-"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":412,"author":{"gitId":"-"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":413,"author":{"gitId":"-"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":414,"author":{"gitId":"-"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2019-07-29"},{"lineNumber":415,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":416,"author":{"gitId":"weenleen"},"content":"        System.out.println(\"Hello from\\n\" + logo +\"\\n\");","lastModifiedDate":"2021-08-23"},{"lineNumber":417,"author":{"gitId":"weenleen"},"content":"        System.out.println(\"What can I do for you?\\n\");","lastModifiedDate":"2021-08-23"},{"lineNumber":418,"author":{"gitId":"weenleen"},"content":"        System.out.println(divider);","lastModifiedDate":"2021-08-23"},{"lineNumber":419,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":420,"author":{"gitId":"weenleen"},"content":"        // a list of all the tasks created by the user","lastModifiedDate":"2021-08-19"},{"lineNumber":421,"author":{"gitId":"weenleen"},"content":"        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-18"},{"lineNumber":422,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":423,"author":{"gitId":"weenleen"},"content":"        File file \u003d new File(\"myTasks.txt\");","lastModifiedDate":"2021-08-23"},{"lineNumber":424,"author":{"gitId":"weenleen"},"content":"        // create a file, if it doesn\u0027t already exist","lastModifiedDate":"2021-08-23"},{"lineNumber":425,"author":{"gitId":"weenleen"},"content":"        try {","lastModifiedDate":"2021-08-23"},{"lineNumber":426,"author":{"gitId":"weenleen"},"content":"            if (!file.createNewFile()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":427,"author":{"gitId":"weenleen"},"content":"                // if file already exists, read from it","lastModifiedDate":"2021-08-23"},{"lineNumber":428,"author":{"gitId":"weenleen"},"content":"                Scanner myReader \u003d new Scanner(file);","lastModifiedDate":"2021-08-23"},{"lineNumber":429,"author":{"gitId":"weenleen"},"content":"                while (myReader.hasNextLine()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":430,"author":{"gitId":"weenleen"},"content":"                    String taskData \u003d myReader.nextLine();","lastModifiedDate":"2021-08-23"},{"lineNumber":431,"author":{"gitId":"weenleen"},"content":"                    try {","lastModifiedDate":"2021-08-23"},{"lineNumber":432,"author":{"gitId":"weenleen"},"content":"                        // get Tasks from the file and add them to the list","lastModifiedDate":"2021-08-23"},{"lineNumber":433,"author":{"gitId":"weenleen"},"content":"                        Task currTask \u003d Task.readTaskFromFile(taskData);","lastModifiedDate":"2021-08-23"},{"lineNumber":434,"author":{"gitId":"weenleen"},"content":"                        taskList.add(currTask);","lastModifiedDate":"2021-08-23"},{"lineNumber":435,"author":{"gitId":"weenleen"},"content":"                    } catch (DukeException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":436,"author":{"gitId":"weenleen"},"content":"                        // file data is in the wrong format, cannot be read","lastModifiedDate":"2021-08-23"},{"lineNumber":437,"author":{"gitId":"weenleen"},"content":"                        System.err.println(e.getMessage());","lastModifiedDate":"2021-08-23"},{"lineNumber":438,"author":{"gitId":"weenleen"},"content":"                        return;","lastModifiedDate":"2021-08-23"},{"lineNumber":439,"author":{"gitId":"weenleen"},"content":"                    }","lastModifiedDate":"2021-08-23"},{"lineNumber":440,"author":{"gitId":"weenleen"},"content":"                }","lastModifiedDate":"2021-08-23"},{"lineNumber":441,"author":{"gitId":"weenleen"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":442,"author":{"gitId":"weenleen"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":443,"author":{"gitId":"weenleen"},"content":"            // exception when creating file","lastModifiedDate":"2021-08-23"},{"lineNumber":444,"author":{"gitId":"weenleen"},"content":"            System.err.println(e.getMessage());","lastModifiedDate":"2021-08-23"},{"lineNumber":445,"author":{"gitId":"weenleen"},"content":"            return;","lastModifiedDate":"2021-08-23"},{"lineNumber":446,"author":{"gitId":"weenleen"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":447,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":448,"author":{"gitId":"weenleen"},"content":"        Scanner in \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-18"},{"lineNumber":449,"author":{"gitId":"weenleen"},"content":"        String s \u003d in.nextLine();","lastModifiedDate":"2021-08-18"},{"lineNumber":450,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":451,"author":{"gitId":"weenleen"},"content":"        // Duke continuously asks for the user\u0027s input until they type \"bye\"","lastModifiedDate":"2021-08-19"},{"lineNumber":452,"author":{"gitId":"weenleen"},"content":"        while (!s.matches(\"^bye *?$\")) {","lastModifiedDate":"2021-08-23"},{"lineNumber":453,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":454,"author":{"gitId":"weenleen"},"content":"            System.out.println(divider);","lastModifiedDate":"2021-08-18"},{"lineNumber":455,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":456,"author":{"gitId":"weenleen"},"content":"            if (s.matches(\"^list *?$\")) {","lastModifiedDate":"2021-08-23"},{"lineNumber":457,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":458,"author":{"gitId":"weenleen"},"content":"                // list command, that prints out all the tasks in the taskList.","lastModifiedDate":"2021-08-19"},{"lineNumber":459,"author":{"gitId":"weenleen"},"content":"                if (taskList.isEmpty()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":460,"author":{"gitId":"weenleen"},"content":"                    System.out.println(\"You currently have no tasks!\");","lastModifiedDate":"2021-08-23"},{"lineNumber":461,"author":{"gitId":"weenleen"},"content":"                } else {","lastModifiedDate":"2021-08-23"},{"lineNumber":462,"author":{"gitId":"weenleen"},"content":"                    for (int i \u003d 0; i \u003c taskList.size(); i++) {","lastModifiedDate":"2021-08-18"},{"lineNumber":463,"author":{"gitId":"weenleen"},"content":"                        System.out.println((i + 1) + \". \" + taskList.get(i));","lastModifiedDate":"2021-08-18"},{"lineNumber":464,"author":{"gitId":"weenleen"},"content":"                    }","lastModifiedDate":"2021-08-18"},{"lineNumber":465,"author":{"gitId":"weenleen"},"content":"                }","lastModifiedDate":"2021-08-23"},{"lineNumber":466,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":467,"author":{"gitId":"weenleen"},"content":"            } else if (s.matches(\"^done.*?$\")) {","lastModifiedDate":"2021-08-23"},{"lineNumber":468,"author":{"gitId":"weenleen"},"content":"                // done command","lastModifiedDate":"2021-08-18"},{"lineNumber":469,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":470,"author":{"gitId":"weenleen"},"content":"                Pattern pattern \u003d Pattern.compile(\"^done (\\\\d+) *?$\");","lastModifiedDate":"2021-08-23"},{"lineNumber":471,"author":{"gitId":"weenleen"},"content":"                Matcher m \u003d pattern.matcher(s);","lastModifiedDate":"2021-08-23"},{"lineNumber":472,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":473,"author":{"gitId":"weenleen"},"content":"                if (m.find()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":474,"author":{"gitId":"weenleen"},"content":"                    int listIndex \u003d Integer.parseInt(m.group(1));","lastModifiedDate":"2021-08-23"},{"lineNumber":475,"author":{"gitId":"weenleen"},"content":"                    if (listIndex \u003c\u003d 0 || listIndex \u003e taskList.size()) {","lastModifiedDate":"2021-08-18"},{"lineNumber":476,"author":{"gitId":"weenleen"},"content":"                        // number given is out of bounds of the taskList","lastModifiedDate":"2021-08-19"},{"lineNumber":477,"author":{"gitId":"weenleen"},"content":"                        System.out.println(\"Invalid Argument: Index \" + listIndex + \" is out of bounds!\");","lastModifiedDate":"2021-08-18"},{"lineNumber":478,"author":{"gitId":"weenleen"},"content":"                    } else {","lastModifiedDate":"2021-08-18"},{"lineNumber":479,"author":{"gitId":"weenleen"},"content":"                        // no problems with the input, a task is added","lastModifiedDate":"2021-08-19"},{"lineNumber":480,"author":{"gitId":"weenleen"},"content":"                        taskList.get(listIndex - 1).markAsDone();","lastModifiedDate":"2021-08-18"},{"lineNumber":481,"author":{"gitId":"weenleen"},"content":"                    }","lastModifiedDate":"2021-08-18"},{"lineNumber":482,"author":{"gitId":"weenleen"},"content":"                } else {","lastModifiedDate":"2021-08-18"},{"lineNumber":483,"author":{"gitId":"weenleen"},"content":"                    System.out.println(\"Please indicate a task to mark as done\");","lastModifiedDate":"2021-08-18"},{"lineNumber":484,"author":{"gitId":"weenleen"},"content":"                }","lastModifiedDate":"2021-08-18"},{"lineNumber":485,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":486,"author":{"gitId":"weenleen"},"content":"            } else if(s.matches(\"^delete.*?\")) {","lastModifiedDate":"2021-08-23"},{"lineNumber":487,"author":{"gitId":"weenleen"},"content":"                // delete command","lastModifiedDate":"2021-08-18"},{"lineNumber":488,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":489,"author":{"gitId":"weenleen"},"content":"                Pattern pattern \u003d Pattern.compile(\"^delete (\\\\d+) *?$\");","lastModifiedDate":"2021-08-23"},{"lineNumber":490,"author":{"gitId":"weenleen"},"content":"                Matcher m \u003d pattern.matcher(s);","lastModifiedDate":"2021-08-23"},{"lineNumber":491,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":492,"author":{"gitId":"weenleen"},"content":"                if (m.find()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":493,"author":{"gitId":"weenleen"},"content":"                    int listIndex \u003d Integer.parseInt(m.group(1));","lastModifiedDate":"2021-08-23"},{"lineNumber":494,"author":{"gitId":"weenleen"},"content":"                    if (listIndex \u003c\u003d 0 || listIndex \u003e taskList.size()) {","lastModifiedDate":"2021-08-18"},{"lineNumber":495,"author":{"gitId":"weenleen"},"content":"                        // number given is out of bounds of the taskList","lastModifiedDate":"2021-08-19"},{"lineNumber":496,"author":{"gitId":"weenleen"},"content":"                        System.out.println(\"Invalid Argument: Index \" + listIndex + \" is out of bounds!\");","lastModifiedDate":"2021-08-18"},{"lineNumber":497,"author":{"gitId":"weenleen"},"content":"                    } else {","lastModifiedDate":"2021-08-18"},{"lineNumber":498,"author":{"gitId":"weenleen"},"content":"                        // no problems with the input, a task is added","lastModifiedDate":"2021-08-19"},{"lineNumber":499,"author":{"gitId":"weenleen"},"content":"                        Task toDelete \u003d taskList.get(listIndex - 1);","lastModifiedDate":"2021-08-18"},{"lineNumber":500,"author":{"gitId":"weenleen"},"content":"                        taskList.remove(listIndex - 1);","lastModifiedDate":"2021-08-18"},{"lineNumber":501,"author":{"gitId":"weenleen"},"content":"                        System.out.println(\"Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2021-08-18"},{"lineNumber":502,"author":{"gitId":"weenleen"},"content":"                        System.out.println(\"  \" + toDelete);","lastModifiedDate":"2021-08-18"},{"lineNumber":503,"author":{"gitId":"weenleen"},"content":"                        System.out.println(\"Now you have \" + taskList.size() + \" tasks in the list.\");","lastModifiedDate":"2021-08-18"},{"lineNumber":504,"author":{"gitId":"weenleen"},"content":"                    }","lastModifiedDate":"2021-08-18"},{"lineNumber":505,"author":{"gitId":"weenleen"},"content":"                } else {","lastModifiedDate":"2021-08-18"},{"lineNumber":506,"author":{"gitId":"weenleen"},"content":"                    System.out.println(\"Please indicate a task to delete\");","lastModifiedDate":"2021-08-18"},{"lineNumber":507,"author":{"gitId":"weenleen"},"content":"                }","lastModifiedDate":"2021-08-18"},{"lineNumber":508,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":509,"author":{"gitId":"weenleen"},"content":"            } else if (s.matches(\"^(todo|deadline|event).*?\")){","lastModifiedDate":"2021-08-23"},{"lineNumber":510,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":511,"author":{"gitId":"weenleen"},"content":"                try {","lastModifiedDate":"2021-08-19"},{"lineNumber":512,"author":{"gitId":"weenleen"},"content":"                    Task toAdd \u003d Task.createTask(s);","lastModifiedDate":"2021-08-23"},{"lineNumber":513,"author":{"gitId":"weenleen"},"content":"                    taskList.add(toAdd);","lastModifiedDate":"2021-08-19"},{"lineNumber":514,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":515,"author":{"gitId":"weenleen"},"content":"                    System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2021-08-18"},{"lineNumber":516,"author":{"gitId":"weenleen"},"content":"                    System.out.println(\"  \" + toAdd);","lastModifiedDate":"2021-08-19"},{"lineNumber":517,"author":{"gitId":"weenleen"},"content":"                    System.out.println(\"Now you have \" + taskList.size() + \" tasks in the list.\");","lastModifiedDate":"2021-08-18"},{"lineNumber":518,"author":{"gitId":"weenleen"},"content":"                } catch (DukeException e) {","lastModifiedDate":"2021-08-19"},{"lineNumber":519,"author":{"gitId":"weenleen"},"content":"                    System.out.println(e.getMessage());","lastModifiedDate":"2021-08-19"},{"lineNumber":520,"author":{"gitId":"weenleen"},"content":"                }","lastModifiedDate":"2021-08-18"},{"lineNumber":521,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":522,"author":{"gitId":"weenleen"},"content":"            } else {","lastModifiedDate":"2021-08-23"},{"lineNumber":523,"author":{"gitId":"weenleen"},"content":"                // input is not recognised","lastModifiedDate":"2021-08-23"},{"lineNumber":524,"author":{"gitId":"weenleen"},"content":"                System.out.println(\"Sorry, I don\u0027t know what that means :(\");","lastModifiedDate":"2021-08-23"},{"lineNumber":525,"author":{"gitId":"weenleen"},"content":"            }","lastModifiedDate":"2021-08-18"},{"lineNumber":526,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":527,"author":{"gitId":"weenleen"},"content":"            System.out.println(divider);","lastModifiedDate":"2021-08-18"},{"lineNumber":528,"author":{"gitId":"weenleen"},"content":"            s \u003d in.nextLine();","lastModifiedDate":"2021-08-18"},{"lineNumber":529,"author":{"gitId":"weenleen"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":530,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":531,"author":{"gitId":"weenleen"},"content":"        in.close();","lastModifiedDate":"2021-08-18"},{"lineNumber":532,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":533,"author":{"gitId":"weenleen"},"content":"        // save all changes to the file at the end","lastModifiedDate":"2021-08-23"},{"lineNumber":534,"author":{"gitId":"weenleen"},"content":"        try {","lastModifiedDate":"2021-08-23"},{"lineNumber":535,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":536,"author":{"gitId":"weenleen"},"content":"            BufferedWriter myWriter \u003d","lastModifiedDate":"2021-08-23"},{"lineNumber":537,"author":{"gitId":"weenleen"},"content":"                    new BufferedWriter(new FileWriter(\"myTasks.txt\"));","lastModifiedDate":"2021-08-23"},{"lineNumber":538,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":539,"author":{"gitId":"weenleen"},"content":"            for (int i \u003d 0; i \u003c taskList.size(); i++) {","lastModifiedDate":"2021-08-23"},{"lineNumber":540,"author":{"gitId":"weenleen"},"content":"                if (i !\u003d 0) {","lastModifiedDate":"2021-08-23"},{"lineNumber":541,"author":{"gitId":"weenleen"},"content":"                    myWriter.newLine();","lastModifiedDate":"2021-08-23"},{"lineNumber":542,"author":{"gitId":"weenleen"},"content":"                }","lastModifiedDate":"2021-08-23"},{"lineNumber":543,"author":{"gitId":"weenleen"},"content":"                myWriter.append(taskList.get(i).toString());","lastModifiedDate":"2021-08-23"},{"lineNumber":544,"author":{"gitId":"weenleen"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":545,"author":{"gitId":"weenleen"},"content":"            myWriter.close();","lastModifiedDate":"2021-08-23"},{"lineNumber":546,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":547,"author":{"gitId":"weenleen"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":548,"author":{"gitId":"weenleen"},"content":"            System.err.println(\"Oh no! An error occurred while writing to the file.\");","lastModifiedDate":"2021-08-23"},{"lineNumber":549,"author":{"gitId":"weenleen"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-23"},{"lineNumber":550,"author":{"gitId":"weenleen"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":551,"author":{"gitId":"weenleen"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":552,"author":{"gitId":"weenleen"},"content":"        // say goodbye","lastModifiedDate":"2021-08-23"},{"lineNumber":553,"author":{"gitId":"weenleen"},"content":"        System.out.println(divider);","lastModifiedDate":"2021-08-18"},{"lineNumber":554,"author":{"gitId":"weenleen"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2021-08-18"},{"lineNumber":555,"author":{"gitId":"weenleen"},"content":"        System.out.println(divider);","lastModifiedDate":"2021-08-18"},{"lineNumber":556,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":557,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"weenleen":548,"-":9}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"weenleen"},"content":"todo something","lastModifiedDate":"2021-08-19"},{"lineNumber":2,"author":{"gitId":"weenleen"},"content":"deadline homework","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"weenleen"},"content":"deadline homework /by friday night","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"weenleen"},"content":"event","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"weenleen"},"content":"event birthday /at next week","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"weenleen"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"weenleen"},"content":"done 3","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"weenleen"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"weenleen"},"content":"delete 2","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"weenleen"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"weenleen"},"content":"hello","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"weenleen"},"content":"bye","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"weenleen":12}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"weenleen"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke.java","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"weenleen":1,"-":20}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"weenleen"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/Duke.java","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"weenleen":1,"-":37}}]

[{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Gabau"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"Gabau"},"content":"import java.util.HashMap;","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"Gabau"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-15"},{"lineNumber":4,"author":{"gitId":"Gabau"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-15"},{"lineNumber":5,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"Gabau"},"content":"import java.io.File;","lastModifiedDate":"2021-08-21"},{"lineNumber":7,"author":{"gitId":"Gabau"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"Gabau"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-21"},{"lineNumber":9,"author":{"gitId":"Gabau"},"content":"import util.tasks.*;","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"Gabau"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"Gabau"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":15,"author":{"gitId":"Gabau"},"content":"    private static final String tempFilePath \u003d \"data/temp.txt\";","lastModifiedDate":"2021-08-21"},{"lineNumber":16,"author":{"gitId":"Gabau"},"content":"    private static final String saveFilePath \u003d \"data/save.txt\";","lastModifiedDate":"2021-08-21"},{"lineNumber":17,"author":{"gitId":"Gabau"},"content":"    private static final String taskRemoved \u003d \"Noted, I\u0027ve removed this task:\";","lastModifiedDate":"2021-08-15"},{"lineNumber":18,"author":{"gitId":"Gabau"},"content":"    private static final String DELETE \u003d \"delete\";","lastModifiedDate":"2021-08-15"},{"lineNumber":19,"author":{"gitId":"Gabau"},"content":"    private static final String TODO \u003d \"todo\";","lastModifiedDate":"2021-08-15"},{"lineNumber":20,"author":{"gitId":"Gabau"},"content":"    private static final String DEADLINE \u003d \"deadline\";","lastModifiedDate":"2021-08-15"},{"lineNumber":21,"author":{"gitId":"Gabau"},"content":"    private static final String EVENT \u003d \"event\";","lastModifiedDate":"2021-08-15"},{"lineNumber":22,"author":{"gitId":"Gabau"},"content":"    //the command for listing all the tasks under a certain date.","lastModifiedDate":"2021-08-21"},{"lineNumber":23,"author":{"gitId":"Gabau"},"content":"    private static final String DLIST \u003d \"dlist\";","lastModifiedDate":"2021-08-21"},{"lineNumber":24,"author":{"gitId":"Gabau"},"content":"    private static final String taskComplete \u003d \"Nice, I\u0027ve marked this task as done\";","lastModifiedDate":"2021-08-15"},{"lineNumber":25,"author":{"gitId":"Gabau"},"content":"    private static final String logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2021-08-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2019-07-29"},{"lineNumber":30,"author":{"gitId":"Gabau"},"content":"    private static final String greetings \u003d \"Greetings! I\u0027m Duke\\n\\tWhat can I do for you?\";","lastModifiedDate":"2021-08-15"},{"lineNumber":31,"author":{"gitId":"Gabau"},"content":"    private static final String bye \u003d \"Godspeed young padawan!\";","lastModifiedDate":"2021-08-15"},{"lineNumber":32,"author":{"gitId":"Gabau"},"content":"    private static final String hline \u003d \"\\t----------------------------\";","lastModifiedDate":"2021-08-15"},{"lineNumber":33,"author":{"gitId":"Gabau"},"content":"    //hashmap cannot enumerate","lastModifiedDate":"2021-08-15"},{"lineNumber":34,"author":{"gitId":"Gabau"},"content":"    //array of inputs capped at 100","lastModifiedDate":"2021-08-15"},{"lineNumber":35,"author":{"gitId":"Gabau"},"content":"    private final ArrayList\u003cTask\u003e inputs \u003d  new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-15"},{"lineNumber":36,"author":{"gitId":"Gabau"},"content":"    //pointer to the last location of inputs available","lastModifiedDate":"2021-08-15"},{"lineNumber":37,"author":{"gitId":"Gabau"},"content":"    private int ptr \u003d 0;","lastModifiedDate":"2021-08-15"},{"lineNumber":38,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":39,"author":{"gitId":"Gabau"},"content":"    //list of tasks that have a deadline/date","lastModifiedDate":"2021-08-21"},{"lineNumber":40,"author":{"gitId":"Gabau"},"content":"    private final HashMap\u003cLocalDate, ArrayList\u003cDatedTask\u003e\u003e datedTaskTable \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2021-08-21"},{"lineNumber":41,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":42,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":43,"author":{"gitId":"Gabau"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":44,"author":{"gitId":"Gabau"},"content":"     * Method to parse the string into a date.","lastModifiedDate":"2021-08-21"},{"lineNumber":45,"author":{"gitId":"Gabau"},"content":"     * Goal: To be able to parse as many possible formats","lastModifiedDate":"2021-08-21"},{"lineNumber":46,"author":{"gitId":"Gabau"},"content":"     * as possible. (TBC)","lastModifiedDate":"2021-08-21"},{"lineNumber":47,"author":{"gitId":"Gabau"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":48,"author":{"gitId":"Gabau"},"content":"     * @param s The string to parse","lastModifiedDate":"2021-08-21"},{"lineNumber":49,"author":{"gitId":"Gabau"},"content":"     * @return The LocalDate object representing the input date.","lastModifiedDate":"2021-08-21"},{"lineNumber":50,"author":{"gitId":"Gabau"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":51,"author":{"gitId":"Gabau"},"content":"    private LocalDate dateParse(String s) {","lastModifiedDate":"2021-08-21"},{"lineNumber":52,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":53,"author":{"gitId":"Gabau"},"content":"        return LocalDate.parse(s.trim());","lastModifiedDate":"2021-08-21"},{"lineNumber":54,"author":{"gitId":"Gabau"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":55,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":56,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":57,"author":{"gitId":"Gabau"},"content":"    public Duke() {","lastModifiedDate":"2021-08-21"},{"lineNumber":58,"author":{"gitId":"Gabau"},"content":"        this.read();","lastModifiedDate":"2021-08-21"},{"lineNumber":59,"author":{"gitId":"Gabau"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":60,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":61,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":62,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":63,"author":{"gitId":"Gabau"},"content":"    /**","lastModifiedDate":"2021-08-15"},{"lineNumber":64,"author":{"gitId":"Gabau"},"content":"     * Dukes own method to print a string","lastModifiedDate":"2021-08-15"},{"lineNumber":65,"author":{"gitId":"Gabau"},"content":"     * in his own special way. (only single line inputs though, multi line requires tabs)","lastModifiedDate":"2021-08-15"},{"lineNumber":66,"author":{"gitId":"Gabau"},"content":"     *","lastModifiedDate":"2021-08-15"},{"lineNumber":67,"author":{"gitId":"Gabau"},"content":"     * @param s The string to be printed.","lastModifiedDate":"2021-08-15"},{"lineNumber":68,"author":{"gitId":"Gabau"},"content":"     */","lastModifiedDate":"2021-08-15"},{"lineNumber":69,"author":{"gitId":"Gabau"},"content":"    private void print(String s) {","lastModifiedDate":"2021-08-15"},{"lineNumber":70,"author":{"gitId":"Gabau"},"content":"        System.out.println(hline);","lastModifiedDate":"2021-08-15"},{"lineNumber":71,"author":{"gitId":"Gabau"},"content":"        System.out.println(\"\\t\" + s);","lastModifiedDate":"2021-08-15"},{"lineNumber":72,"author":{"gitId":"Gabau"},"content":"        System.out.println(\"\\n\" + hline);","lastModifiedDate":"2021-08-15"},{"lineNumber":73,"author":{"gitId":"Gabau"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":74,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":75,"author":{"gitId":"Gabau"},"content":"    /**","lastModifiedDate":"2021-08-15"},{"lineNumber":76,"author":{"gitId":"Gabau"},"content":"     * Method to print the Logo for Duke.","lastModifiedDate":"2021-08-15"},{"lineNumber":77,"author":{"gitId":"Gabau"},"content":"     */","lastModifiedDate":"2021-08-15"},{"lineNumber":78,"author":{"gitId":"Gabau"},"content":"    private void print_logo() {","lastModifiedDate":"2021-08-15"},{"lineNumber":79,"author":{"gitId":"Gabau"},"content":"        System.out.println(\"Hello from\\n\" + Duke.logo);","lastModifiedDate":"2021-08-15"},{"lineNumber":80,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":81,"author":{"gitId":"Gabau"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":82,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":83,"author":{"gitId":"Gabau"},"content":"    /**","lastModifiedDate":"2021-08-15"},{"lineNumber":84,"author":{"gitId":"Gabau"},"content":"     * Checks if the input task has been added before or not.","lastModifiedDate":"2021-08-15"},{"lineNumber":85,"author":{"gitId":"Gabau"},"content":"     *","lastModifiedDate":"2021-08-15"},{"lineNumber":86,"author":{"gitId":"Gabau"},"content":"     * @param t The Task to check.","lastModifiedDate":"2021-08-15"},{"lineNumber":87,"author":{"gitId":"Gabau"},"content":"     * @return True if the string has been added and false otherwise.","lastModifiedDate":"2021-08-15"},{"lineNumber":88,"author":{"gitId":"Gabau"},"content":"     */","lastModifiedDate":"2021-08-15"},{"lineNumber":89,"author":{"gitId":"Gabau"},"content":"    private boolean isAdded(Task t) {","lastModifiedDate":"2021-08-15"},{"lineNumber":90,"author":{"gitId":"Gabau"},"content":"        for (int i \u003d 0; i \u003c ptr; i++) {","lastModifiedDate":"2021-08-15"},{"lineNumber":91,"author":{"gitId":"Gabau"},"content":"            if (inputs.get(i).equals(t)) {","lastModifiedDate":"2021-08-15"},{"lineNumber":92,"author":{"gitId":"Gabau"},"content":"                return true;","lastModifiedDate":"2021-08-15"},{"lineNumber":93,"author":{"gitId":"Gabau"},"content":"            }","lastModifiedDate":"2021-08-15"},{"lineNumber":94,"author":{"gitId":"Gabau"},"content":"        }","lastModifiedDate":"2021-08-15"},{"lineNumber":95,"author":{"gitId":"Gabau"},"content":"        return false;","lastModifiedDate":"2021-08-15"},{"lineNumber":96,"author":{"gitId":"Gabau"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":97,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":98,"author":{"gitId":"Gabau"},"content":"    /**","lastModifiedDate":"2021-08-15"},{"lineNumber":99,"author":{"gitId":"Gabau"},"content":"     * Adds the input task to the list.","lastModifiedDate":"2021-08-15"},{"lineNumber":100,"author":{"gitId":"Gabau"},"content":"     *","lastModifiedDate":"2021-08-15"},{"lineNumber":101,"author":{"gitId":"Gabau"},"content":"     * @param t Input task","lastModifiedDate":"2021-08-15"},{"lineNumber":102,"author":{"gitId":"Gabau"},"content":"     */","lastModifiedDate":"2021-08-15"},{"lineNumber":103,"author":{"gitId":"Gabau"},"content":"    private void add(Task t) {","lastModifiedDate":"2021-08-15"},{"lineNumber":104,"author":{"gitId":"Gabau"},"content":"        this.inputs.add(t);","lastModifiedDate":"2021-08-15"},{"lineNumber":105,"author":{"gitId":"Gabau"},"content":"        this.ptr++;","lastModifiedDate":"2021-08-15"},{"lineNumber":106,"author":{"gitId":"Gabau"},"content":"        this.print(\"Got it, I\u0027ve added this task\\n\\t  \" + t.toString() +","lastModifiedDate":"2021-08-15"},{"lineNumber":107,"author":{"gitId":"Gabau"},"content":"                \"\\n\\tNow you have \" + ptr + \" tasks in the list.\");","lastModifiedDate":"2021-08-15"},{"lineNumber":108,"author":{"gitId":"Gabau"},"content":"        write(saveFilePath);","lastModifiedDate":"2021-08-21"},{"lineNumber":109,"author":{"gitId":"Gabau"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":110,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":111,"author":{"gitId":"Gabau"},"content":"    /**","lastModifiedDate":"2021-08-15"},{"lineNumber":112,"author":{"gitId":"Gabau"},"content":"     * Prints all the strings added.","lastModifiedDate":"2021-08-15"},{"lineNumber":113,"author":{"gitId":"Gabau"},"content":"     */","lastModifiedDate":"2021-08-15"},{"lineNumber":114,"author":{"gitId":"Gabau"},"content":"    private void list(ArrayList\u003c? extends Task\u003e ls) throws DukeException {","lastModifiedDate":"2021-08-21"},{"lineNumber":115,"author":{"gitId":"Gabau"},"content":"        String output \u003d \"\";","lastModifiedDate":"2021-08-15"},{"lineNumber":116,"author":{"gitId":"Gabau"},"content":"        if (ls.size() \u003d\u003d 0) return;","lastModifiedDate":"2021-08-21"},{"lineNumber":117,"author":{"gitId":"Gabau"},"content":"        output +\u003d \"1.\" + ls.get(0);","lastModifiedDate":"2021-08-21"},{"lineNumber":118,"author":{"gitId":"Gabau"},"content":"        for (int i \u003d 1; i \u003c ls.size(); i++) {","lastModifiedDate":"2021-08-21"},{"lineNumber":119,"author":{"gitId":"Gabau"},"content":"            int indi \u003d i + 1;","lastModifiedDate":"2021-08-15"},{"lineNumber":120,"author":{"gitId":"Gabau"},"content":"            output +\u003d \"\\n\\t\" + indi + \".\" + ls.get(i);","lastModifiedDate":"2021-08-21"},{"lineNumber":121,"author":{"gitId":"Gabau"},"content":"        }","lastModifiedDate":"2021-08-15"},{"lineNumber":122,"author":{"gitId":"Gabau"},"content":"        this.print(output);","lastModifiedDate":"2021-08-15"},{"lineNumber":123,"author":{"gitId":"Gabau"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":124,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":125,"author":{"gitId":"Gabau"},"content":"    /**","lastModifiedDate":"2021-08-15"},{"lineNumber":126,"author":{"gitId":"Gabau"},"content":"     * Creates a todo task with the ipt String","lastModifiedDate":"2021-08-15"},{"lineNumber":127,"author":{"gitId":"Gabau"},"content":"     *","lastModifiedDate":"2021-08-15"},{"lineNumber":128,"author":{"gitId":"Gabau"},"content":"     * @param ipt The input string","lastModifiedDate":"2021-08-15"},{"lineNumber":129,"author":{"gitId":"Gabau"},"content":"     */","lastModifiedDate":"2021-08-15"},{"lineNumber":130,"author":{"gitId":"Gabau"},"content":"    private void todo(String ipt) {","lastModifiedDate":"2021-08-15"},{"lineNumber":131,"author":{"gitId":"Gabau"},"content":"        Task t \u003d new ToDos(ipt);","lastModifiedDate":"2021-08-15"},{"lineNumber":132,"author":{"gitId":"Gabau"},"content":"        if (isAdded(t)) {","lastModifiedDate":"2021-08-15"},{"lineNumber":133,"author":{"gitId":"Gabau"},"content":"            this.print(\"Added: \" + t.toString());","lastModifiedDate":"2021-08-15"},{"lineNumber":134,"author":{"gitId":"Gabau"},"content":"            return;","lastModifiedDate":"2021-08-15"},{"lineNumber":135,"author":{"gitId":"Gabau"},"content":"        }","lastModifiedDate":"2021-08-15"},{"lineNumber":136,"author":{"gitId":"Gabau"},"content":"        this.add(t);","lastModifiedDate":"2021-08-15"},{"lineNumber":137,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":138,"author":{"gitId":"Gabau"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":139,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":140,"author":{"gitId":"Gabau"},"content":"    /**","lastModifiedDate":"2021-08-15"},{"lineNumber":141,"author":{"gitId":"Gabau"},"content":"     * Creates a deadLine task with the input string","lastModifiedDate":"2021-08-15"},{"lineNumber":142,"author":{"gitId":"Gabau"},"content":"     *","lastModifiedDate":"2021-08-15"},{"lineNumber":143,"author":{"gitId":"Gabau"},"content":"     * @param input The input String","lastModifiedDate":"2021-08-15"},{"lineNumber":144,"author":{"gitId":"Gabau"},"content":"     * @throws DukeException Exceptions in a duke object.","lastModifiedDate":"2021-08-15"},{"lineNumber":145,"author":{"gitId":"Gabau"},"content":"     */","lastModifiedDate":"2021-08-15"},{"lineNumber":146,"author":{"gitId":"Gabau"},"content":"    private void deadline(String input) throws DukeException {","lastModifiedDate":"2021-08-15"},{"lineNumber":147,"author":{"gitId":"Gabau"},"content":"        String[] arr \u003d input.split(\"/by\", 2);","lastModifiedDate":"2021-08-15"},{"lineNumber":148,"author":{"gitId":"Gabau"},"content":"        if (arr.length \u003d\u003d 1) throw new DukeException(\"☹ OOPS!!! The deadline must be filled in prefixed by /by\");","lastModifiedDate":"2021-08-15"},{"lineNumber":149,"author":{"gitId":"Gabau"},"content":"        LocalDate date \u003d dateParse(arr[1].trim());","lastModifiedDate":"2021-08-21"},{"lineNumber":150,"author":{"gitId":"Gabau"},"content":"        Deadlines t \u003d new Deadlines(arr[0], date);","lastModifiedDate":"2021-08-21"},{"lineNumber":151,"author":{"gitId":"Gabau"},"content":"        if (isAdded(t)) {","lastModifiedDate":"2021-08-15"},{"lineNumber":152,"author":{"gitId":"Gabau"},"content":"            this.print(\"Added: \" + t.toString());","lastModifiedDate":"2021-08-15"},{"lineNumber":153,"author":{"gitId":"Gabau"},"content":"            return;","lastModifiedDate":"2021-08-15"},{"lineNumber":154,"author":{"gitId":"Gabau"},"content":"        }","lastModifiedDate":"2021-08-15"},{"lineNumber":155,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":156,"author":{"gitId":"Gabau"},"content":"        if (this.datedTaskTable.get(date) \u003d\u003d null) this.datedTaskTable.put(date, new ArrayList\u003c\u003e());","lastModifiedDate":"2021-08-21"},{"lineNumber":157,"author":{"gitId":"Gabau"},"content":"        this.datedTaskTable.get(date).add(t);","lastModifiedDate":"2021-08-21"},{"lineNumber":158,"author":{"gitId":"Gabau"},"content":"        this.add(t);","lastModifiedDate":"2021-08-15"},{"lineNumber":159,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":160,"author":{"gitId":"Gabau"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":161,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":162,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":163,"author":{"gitId":"Gabau"},"content":"    /**","lastModifiedDate":"2021-08-15"},{"lineNumber":164,"author":{"gitId":"Gabau"},"content":"     * Creates an Event with the input String","lastModifiedDate":"2021-08-15"},{"lineNumber":165,"author":{"gitId":"Gabau"},"content":"     *","lastModifiedDate":"2021-08-15"},{"lineNumber":166,"author":{"gitId":"Gabau"},"content":"     * @param input The input String","lastModifiedDate":"2021-08-15"},{"lineNumber":167,"author":{"gitId":"Gabau"},"content":"     * @throws DukeException Exceptions in a Duke object due to problems with task input.","lastModifiedDate":"2021-08-15"},{"lineNumber":168,"author":{"gitId":"Gabau"},"content":"     */","lastModifiedDate":"2021-08-15"},{"lineNumber":169,"author":{"gitId":"Gabau"},"content":"    private void event(String input) throws DukeException {","lastModifiedDate":"2021-08-15"},{"lineNumber":170,"author":{"gitId":"Gabau"},"content":"        String[] arr \u003d input.split(\"/at\", 2);","lastModifiedDate":"2021-08-15"},{"lineNumber":171,"author":{"gitId":"Gabau"},"content":"        if (arr.length \u003d\u003d 1) throw new DukeException(\"☹ OOPS!!! The event deadline must be filled in prefixed by /at\");","lastModifiedDate":"2021-08-15"},{"lineNumber":172,"author":{"gitId":"Gabau"},"content":"        LocalDate date \u003d dateParse(arr[1].trim());","lastModifiedDate":"2021-08-21"},{"lineNumber":173,"author":{"gitId":"Gabau"},"content":"        Events t \u003d new Events(arr[0], date);","lastModifiedDate":"2021-08-21"},{"lineNumber":174,"author":{"gitId":"Gabau"},"content":"        if (isAdded(t)) {","lastModifiedDate":"2021-08-15"},{"lineNumber":175,"author":{"gitId":"Gabau"},"content":"            this.print(\"Added: \" + t.toString());","lastModifiedDate":"2021-08-15"},{"lineNumber":176,"author":{"gitId":"Gabau"},"content":"            return;","lastModifiedDate":"2021-08-15"},{"lineNumber":177,"author":{"gitId":"Gabau"},"content":"        }","lastModifiedDate":"2021-08-15"},{"lineNumber":178,"author":{"gitId":"Gabau"},"content":"        if (this.datedTaskTable.get(date) \u003d\u003d null) this.datedTaskTable.put(date, new ArrayList\u003c\u003e());","lastModifiedDate":"2021-08-21"},{"lineNumber":179,"author":{"gitId":"Gabau"},"content":"        this.datedTaskTable.get(date).add(t);","lastModifiedDate":"2021-08-21"},{"lineNumber":180,"author":{"gitId":"Gabau"},"content":"        this.add(t);","lastModifiedDate":"2021-08-15"},{"lineNumber":181,"author":{"gitId":"Gabau"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":182,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":183,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":184,"author":{"gitId":"Gabau"},"content":"    /**","lastModifiedDate":"2021-08-15"},{"lineNumber":185,"author":{"gitId":"Gabau"},"content":"     * To understand the input.","lastModifiedDate":"2021-08-15"},{"lineNumber":186,"author":{"gitId":"Gabau"},"content":"     *","lastModifiedDate":"2021-08-15"},{"lineNumber":187,"author":{"gitId":"Gabau"},"content":"     * @param input The input String","lastModifiedDate":"2021-08-15"},{"lineNumber":188,"author":{"gitId":"Gabau"},"content":"     * @throws DukeException Exception due to wrong input.","lastModifiedDate":"2021-08-15"},{"lineNumber":189,"author":{"gitId":"Gabau"},"content":"     */","lastModifiedDate":"2021-08-15"},{"lineNumber":190,"author":{"gitId":"Gabau"},"content":"    public void inputsParser(String input) throws DukeException, DateTimeParseException {","lastModifiedDate":"2021-08-21"},{"lineNumber":191,"author":{"gitId":"Gabau"},"content":"        String[] twoInputs \u003d input.split(\" \", 2);","lastModifiedDate":"2021-08-15"},{"lineNumber":192,"author":{"gitId":"Gabau"},"content":"        if (twoInputs[0].equals(DLIST)) {","lastModifiedDate":"2021-08-21"},{"lineNumber":193,"author":{"gitId":"Gabau"},"content":"            if (twoInputs.length \u003d\u003d 1) throw new DukeException(\"Expected date after \" + DLIST);","lastModifiedDate":"2021-08-21"},{"lineNumber":194,"author":{"gitId":"Gabau"},"content":"            list(this.datedTaskTable.get(LocalDate.parse(twoInputs[1].trim())));","lastModifiedDate":"2021-08-21"},{"lineNumber":195,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":196,"author":{"gitId":"Gabau"},"content":"        } else if (twoInputs[0].equals(DELETE)) {","lastModifiedDate":"2021-08-21"},{"lineNumber":197,"author":{"gitId":"Gabau"},"content":"            if (twoInputs.length \u003d\u003d 1) {","lastModifiedDate":"2021-08-15"},{"lineNumber":198,"author":{"gitId":"Gabau"},"content":"                throw new DukeException(\"Number expected after done.\");","lastModifiedDate":"2021-08-15"},{"lineNumber":199,"author":{"gitId":"Gabau"},"content":"            }","lastModifiedDate":"2021-08-15"},{"lineNumber":200,"author":{"gitId":"Gabau"},"content":"            String s \u003d twoInputs[1].trim();","lastModifiedDate":"2021-08-15"},{"lineNumber":201,"author":{"gitId":"Gabau"},"content":"            int val \u003d Integer.parseInt(s) - 1;","lastModifiedDate":"2021-08-15"},{"lineNumber":202,"author":{"gitId":"Gabau"},"content":"            if (val \u003e\u003d ptr)","lastModifiedDate":"2021-08-15"},{"lineNumber":203,"author":{"gitId":"Gabau"},"content":"                throw new DukeException(\"☹ OOPS!!! The list is not that long!\");","lastModifiedDate":"2021-08-15"},{"lineNumber":204,"author":{"gitId":"Gabau"},"content":"            Task removed \u003d inputs.remove(val);","lastModifiedDate":"2021-08-15"},{"lineNumber":205,"author":{"gitId":"Gabau"},"content":"            print(taskRemoved + \"\\n\\t\" + removed.toString());","lastModifiedDate":"2021-08-15"},{"lineNumber":206,"author":{"gitId":"Gabau"},"content":"            ptr--;","lastModifiedDate":"2021-08-15"},{"lineNumber":207,"author":{"gitId":"Gabau"},"content":"            write(saveFilePath);","lastModifiedDate":"2021-08-21"},{"lineNumber":208,"author":{"gitId":"Gabau"},"content":"        } else if (twoInputs[0].equals(\"done\")) {","lastModifiedDate":"2021-08-15"},{"lineNumber":209,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":210,"author":{"gitId":"Gabau"},"content":"            //and at what point is this considered using exception handling to dictate the control","lastModifiedDate":"2021-08-15"},{"lineNumber":211,"author":{"gitId":"Gabau"},"content":"            if (twoInputs.length \u003d\u003d 1) {","lastModifiedDate":"2021-08-15"},{"lineNumber":212,"author":{"gitId":"Gabau"},"content":"                throw new DukeException(\"Number expected after done.\");","lastModifiedDate":"2021-08-15"},{"lineNumber":213,"author":{"gitId":"Gabau"},"content":"            }","lastModifiedDate":"2021-08-15"},{"lineNumber":214,"author":{"gitId":"Gabau"},"content":"            String s \u003d twoInputs[1].trim();","lastModifiedDate":"2021-08-15"},{"lineNumber":215,"author":{"gitId":"Gabau"},"content":"            int val \u003d Integer.parseInt(s) - 1;","lastModifiedDate":"2021-08-15"},{"lineNumber":216,"author":{"gitId":"Gabau"},"content":"            if (val \u003e\u003d ptr)","lastModifiedDate":"2021-08-15"},{"lineNumber":217,"author":{"gitId":"Gabau"},"content":"                throw new DukeException(\"☹ OOPS!!! The list is not that long!\");","lastModifiedDate":"2021-08-15"},{"lineNumber":218,"author":{"gitId":"Gabau"},"content":"            inputs.get(val).done();","lastModifiedDate":"2021-08-15"},{"lineNumber":219,"author":{"gitId":"Gabau"},"content":"            print(taskComplete + \"\\n\\t\" + this.inputs.get(val));","lastModifiedDate":"2021-08-15"},{"lineNumber":220,"author":{"gitId":"Gabau"},"content":"            write(saveFilePath);","lastModifiedDate":"2021-08-21"},{"lineNumber":221,"author":{"gitId":"Gabau"},"content":"            //this is ridiculous, is there a way to nest the exceptions within the class","lastModifiedDate":"2021-08-15"},{"lineNumber":222,"author":{"gitId":"Gabau"},"content":"            //without having to use the array as an input... -- maybe encapsulate the parsing in a function to make it look neat","lastModifiedDate":"2021-08-15"},{"lineNumber":223,"author":{"gitId":"Gabau"},"content":"        } else if (twoInputs[0].equals(TODO)) {","lastModifiedDate":"2021-08-15"},{"lineNumber":224,"author":{"gitId":"Gabau"},"content":"            if (twoInputs.length \u003d\u003d 1)","lastModifiedDate":"2021-08-15"},{"lineNumber":225,"author":{"gitId":"Gabau"},"content":"                throw new DukeException(\"☹ OOPS!!! The description of a todo cannot be empty.\");","lastModifiedDate":"2021-08-15"},{"lineNumber":226,"author":{"gitId":"Gabau"},"content":"            todo(twoInputs[1]);","lastModifiedDate":"2021-08-15"},{"lineNumber":227,"author":{"gitId":"Gabau"},"content":"        } else if (twoInputs[0].equals(EVENT)) {","lastModifiedDate":"2021-08-15"},{"lineNumber":228,"author":{"gitId":"Gabau"},"content":"            if (twoInputs.length \u003d\u003d 1)","lastModifiedDate":"2021-08-15"},{"lineNumber":229,"author":{"gitId":"Gabau"},"content":"                throw new DukeException(\"☹ OOPS!!! The description of a event cannot be empty.\");","lastModifiedDate":"2021-08-15"},{"lineNumber":230,"author":{"gitId":"Gabau"},"content":"            event(twoInputs[1]);","lastModifiedDate":"2021-08-15"},{"lineNumber":231,"author":{"gitId":"Gabau"},"content":"        } else if (twoInputs[0].equals(DEADLINE)) {","lastModifiedDate":"2021-08-15"},{"lineNumber":232,"author":{"gitId":"Gabau"},"content":"            if (twoInputs.length \u003d\u003d 1)","lastModifiedDate":"2021-08-15"},{"lineNumber":233,"author":{"gitId":"Gabau"},"content":"                throw new DukeException(\"☹ OOPS!!! The description of a deadline cannot be empty.\");","lastModifiedDate":"2021-08-15"},{"lineNumber":234,"author":{"gitId":"Gabau"},"content":"            deadline(twoInputs[1]);","lastModifiedDate":"2021-08-15"},{"lineNumber":235,"author":{"gitId":"Gabau"},"content":"        } else if (input.equals(\"list\")) {","lastModifiedDate":"2021-08-15"},{"lineNumber":236,"author":{"gitId":"Gabau"},"content":"            this.list(this.inputs);","lastModifiedDate":"2021-08-21"},{"lineNumber":237,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":238,"author":{"gitId":"Gabau"},"content":"        } else {","lastModifiedDate":"2021-08-15"},{"lineNumber":239,"author":{"gitId":"Gabau"},"content":"            throw new DukeException();","lastModifiedDate":"2021-08-15"},{"lineNumber":240,"author":{"gitId":"Gabau"},"content":"        }","lastModifiedDate":"2021-08-15"},{"lineNumber":241,"author":{"gitId":"Gabau"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":242,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":243,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":244,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":245,"author":{"gitId":"Gabau"},"content":"    /**","lastModifiedDate":"2021-08-15"},{"lineNumber":246,"author":{"gitId":"Gabau"},"content":"     * Running Duke.","lastModifiedDate":"2021-08-15"},{"lineNumber":247,"author":{"gitId":"Gabau"},"content":"     */","lastModifiedDate":"2021-08-15"},{"lineNumber":248,"author":{"gitId":"Gabau"},"content":"    public void run() {","lastModifiedDate":"2021-08-15"},{"lineNumber":249,"author":{"gitId":"Gabau"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-15"},{"lineNumber":250,"author":{"gitId":"Gabau"},"content":"        //initialising Duke","lastModifiedDate":"2021-08-15"},{"lineNumber":251,"author":{"gitId":"Gabau"},"content":"        //via greetings","lastModifiedDate":"2021-08-15"},{"lineNumber":252,"author":{"gitId":"Gabau"},"content":"        this.print_logo();","lastModifiedDate":"2021-08-15"},{"lineNumber":253,"author":{"gitId":"Gabau"},"content":"        this.print(greetings);","lastModifiedDate":"2021-08-15"},{"lineNumber":254,"author":{"gitId":"Gabau"},"content":"        String inpt \u003d sc.nextLine();","lastModifiedDate":"2021-08-15"},{"lineNumber":255,"author":{"gitId":"Gabau"},"content":"        while(!inpt.equals(\"bye\")) {","lastModifiedDate":"2021-08-15"},{"lineNumber":256,"author":{"gitId":"Gabau"},"content":"            try {","lastModifiedDate":"2021-08-15"},{"lineNumber":257,"author":{"gitId":"Gabau"},"content":"                inputsParser(inpt);","lastModifiedDate":"2021-08-15"},{"lineNumber":258,"author":{"gitId":"Gabau"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2021-08-15"},{"lineNumber":259,"author":{"gitId":"Gabau"},"content":"                this.print(e.getMessage());","lastModifiedDate":"2021-08-15"},{"lineNumber":260,"author":{"gitId":"Gabau"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-21"},{"lineNumber":261,"author":{"gitId":"Gabau"},"content":"                this.print(\"Expected date format YYYY MM DD\");","lastModifiedDate":"2021-08-21"},{"lineNumber":262,"author":{"gitId":"Gabau"},"content":"            }","lastModifiedDate":"2021-08-15"},{"lineNumber":263,"author":{"gitId":"Gabau"},"content":"            inpt \u003d sc.nextLine();","lastModifiedDate":"2021-08-15"},{"lineNumber":264,"author":{"gitId":"Gabau"},"content":"        }","lastModifiedDate":"2021-08-15"},{"lineNumber":265,"author":{"gitId":"Gabau"},"content":"        this.print(bye);","lastModifiedDate":"2021-08-15"},{"lineNumber":266,"author":{"gitId":"Gabau"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":267,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":268,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":269,"author":{"gitId":"Gabau"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":270,"author":{"gitId":"Gabau"},"content":"     * The method used to read from the current save File. --Use a save object?","lastModifiedDate":"2021-08-21"},{"lineNumber":271,"author":{"gitId":"Gabau"},"content":"     * Can allow for multiple saves --\u003e could use such an object to handle","lastModifiedDate":"2021-08-21"},{"lineNumber":272,"author":{"gitId":"Gabau"},"content":"     * the saves in an arraylist.","lastModifiedDate":"2021-08-21"},{"lineNumber":273,"author":{"gitId":"Gabau"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":274,"author":{"gitId":"Gabau"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":275,"author":{"gitId":"Gabau"},"content":"    private void read() {","lastModifiedDate":"2021-08-21"},{"lineNumber":276,"author":{"gitId":"Gabau"},"content":"        try {","lastModifiedDate":"2021-08-21"},{"lineNumber":277,"author":{"gitId":"Gabau"},"content":"            File f \u003d new File(saveFilePath);","lastModifiedDate":"2021-08-21"},{"lineNumber":278,"author":{"gitId":"Gabau"},"content":"            if (!f.exists()) return;","lastModifiedDate":"2021-08-21"},{"lineNumber":279,"author":{"gitId":"Gabau"},"content":"            Scanner sc \u003d new Scanner(f);","lastModifiedDate":"2021-08-21"},{"lineNumber":280,"author":{"gitId":"Gabau"},"content":"            while (sc.hasNext()) {","lastModifiedDate":"2021-08-21"},{"lineNumber":281,"author":{"gitId":"Gabau"},"content":"                this.inputs.add(Task.decode(sc.nextLine()));","lastModifiedDate":"2021-08-21"},{"lineNumber":282,"author":{"gitId":"Gabau"},"content":"                ptr++;","lastModifiedDate":"2021-08-21"},{"lineNumber":283,"author":{"gitId":"Gabau"},"content":"            }","lastModifiedDate":"2021-08-21"},{"lineNumber":284,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":285,"author":{"gitId":"Gabau"},"content":"        } catch (IOException | DukeException ioe) {","lastModifiedDate":"2021-08-21"},{"lineNumber":286,"author":{"gitId":"Gabau"},"content":"            this.print(ioe.getMessage());","lastModifiedDate":"2021-08-21"},{"lineNumber":287,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":288,"author":{"gitId":"Gabau"},"content":"        } finally {","lastModifiedDate":"2021-08-21"},{"lineNumber":289,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":290,"author":{"gitId":"Gabau"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":291,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":292,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":293,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":294,"author":{"gitId":"Gabau"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":295,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":296,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":297,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":298,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":299,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":300,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":301,"author":{"gitId":"Gabau"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":302,"author":{"gitId":"Gabau"},"content":"     * The method that runs when the Duke needs to log the","lastModifiedDate":"2021-08-21"},{"lineNumber":303,"author":{"gitId":"Gabau"},"content":"     * list of Tasks. Occurs every time there is a modification to the","lastModifiedDate":"2021-08-21"},{"lineNumber":304,"author":{"gitId":"Gabau"},"content":"     * List of tasks.","lastModifiedDate":"2021-08-21"},{"lineNumber":305,"author":{"gitId":"Gabau"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":306,"author":{"gitId":"Gabau"},"content":"     * todo -- check if it is possible to have write and read in a seperate class file (encapsulate in a package)?","lastModifiedDate":"2021-08-21"},{"lineNumber":307,"author":{"gitId":"Gabau"},"content":"     * maybe its not better though?","lastModifiedDate":"2021-08-21"},{"lineNumber":308,"author":{"gitId":"Gabau"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":309,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":310,"author":{"gitId":"Gabau"},"content":"    private void write(String filename) {","lastModifiedDate":"2021-08-21"},{"lineNumber":311,"author":{"gitId":"Gabau"},"content":"        try {","lastModifiedDate":"2021-08-21"},{"lineNumber":312,"author":{"gitId":"Gabau"},"content":"            //creating the directory","lastModifiedDate":"2021-08-21"},{"lineNumber":313,"author":{"gitId":"Gabau"},"content":"            File dir \u003d new File(\"./data\");","lastModifiedDate":"2021-08-21"},{"lineNumber":314,"author":{"gitId":"Gabau"},"content":"            if (!dir.exists()) dir.mkdirs();","lastModifiedDate":"2021-08-21"},{"lineNumber":315,"author":{"gitId":"Gabau"},"content":"            //creating the files","lastModifiedDate":"2021-08-21"},{"lineNumber":316,"author":{"gitId":"Gabau"},"content":"            File saveFile \u003d new File(filename);","lastModifiedDate":"2021-08-21"},{"lineNumber":317,"author":{"gitId":"Gabau"},"content":"            File tempfile \u003d new File(tempFilePath);","lastModifiedDate":"2021-08-21"},{"lineNumber":318,"author":{"gitId":"Gabau"},"content":"            //if the file does not exist","lastModifiedDate":"2021-08-21"},{"lineNumber":319,"author":{"gitId":"Gabau"},"content":"            if (!saveFile.exists()) {","lastModifiedDate":"2021-08-21"},{"lineNumber":320,"author":{"gitId":"Gabau"},"content":"                //When the old save file does not exist","lastModifiedDate":"2021-08-21"},{"lineNumber":321,"author":{"gitId":"Gabau"},"content":"                //do not have to use the tempfile","lastModifiedDate":"2021-08-21"},{"lineNumber":322,"author":{"gitId":"Gabau"},"content":"                saveFile.createNewFile();","lastModifiedDate":"2021-08-21"},{"lineNumber":323,"author":{"gitId":"Gabau"},"content":"                FileWriter wr \u003d new FileWriter(filename);","lastModifiedDate":"2021-08-21"},{"lineNumber":324,"author":{"gitId":"Gabau"},"content":"                writeTasks(wr);","lastModifiedDate":"2021-08-21"},{"lineNumber":325,"author":{"gitId":"Gabau"},"content":"                wr.close();","lastModifiedDate":"2021-08-21"},{"lineNumber":326,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":327,"author":{"gitId":"Gabau"},"content":"            } else {","lastModifiedDate":"2021-08-21"},{"lineNumber":328,"author":{"gitId":"Gabau"},"content":"                //could use a temp file and switch after writing?","lastModifiedDate":"2021-08-21"},{"lineNumber":329,"author":{"gitId":"Gabau"},"content":"                FileWriter wr \u003d new FileWriter(saveFilePath);","lastModifiedDate":"2021-08-21"},{"lineNumber":330,"author":{"gitId":"Gabau"},"content":"                writeTasks(wr);","lastModifiedDate":"2021-08-21"},{"lineNumber":331,"author":{"gitId":"Gabau"},"content":"                wr.close();","lastModifiedDate":"2021-08-21"},{"lineNumber":332,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":333,"author":{"gitId":"Gabau"},"content":"            }","lastModifiedDate":"2021-08-21"},{"lineNumber":334,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":335,"author":{"gitId":"Gabau"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-21"},{"lineNumber":336,"author":{"gitId":"Gabau"},"content":"            this.print(e.getMessage());","lastModifiedDate":"2021-08-21"},{"lineNumber":337,"author":{"gitId":"Gabau"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":338,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":339,"author":{"gitId":"Gabau"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":340,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":341,"author":{"gitId":"Gabau"},"content":"    private void writeTasks(FileWriter writer) throws IOException {","lastModifiedDate":"2021-08-21"},{"lineNumber":342,"author":{"gitId":"Gabau"},"content":"        for (int i \u003d 0; i \u003c this.inputs.size(); i++) {","lastModifiedDate":"2021-08-21"},{"lineNumber":343,"author":{"gitId":"Gabau"},"content":"            writer.write(inputs.get(i).encode());","lastModifiedDate":"2021-08-21"},{"lineNumber":344,"author":{"gitId":"Gabau"},"content":"            writer.write(\"\\n\");","lastModifiedDate":"2021-08-21"},{"lineNumber":345,"author":{"gitId":"Gabau"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":346,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":347,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":348,"author":{"gitId":"Gabau"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":349,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":350,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":351,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":352,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":353,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-15"},{"lineNumber":354,"author":{"gitId":"Gabau"},"content":"        Duke d \u003d new Duke();","lastModifiedDate":"2021-08-15"},{"lineNumber":355,"author":{"gitId":"Gabau"},"content":"        d.run();","lastModifiedDate":"2021-08-15"},{"lineNumber":356,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":357,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":358,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":359,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":360,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"Gabau":352,"-":8}},{"path":"src/main/java/util/tasks/DatedTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Gabau"},"content":"package util.tasks;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"Gabau"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-21"},{"lineNumber":4,"author":{"gitId":"Gabau"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"Gabau"},"content":"public abstract class DatedTask extends Task {","lastModifiedDate":"2021-08-21"},{"lineNumber":7,"author":{"gitId":"Gabau"},"content":"    protected LocalDate lDate;","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":9,"author":{"gitId":"Gabau"},"content":"    public DatedTask(String name, LocalDate date) {","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"Gabau"},"content":"        super(name);","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"Gabau"},"content":"        this.lDate \u003d date;","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"Gabau"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"Gabau"},"content":"    public String localDate() {","lastModifiedDate":"2021-08-21"},{"lineNumber":16,"author":{"gitId":"Gabau"},"content":"        return lDate.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));","lastModifiedDate":"2021-08-21"},{"lineNumber":17,"author":{"gitId":"Gabau"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":18,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":19,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":20,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":21,"author":{"gitId":"Gabau"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"Gabau":21}},{"path":"src/main/java/util/tasks/Deadlines.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Gabau"},"content":"package util.tasks;","lastModifiedDate":"2021-08-20"},{"lineNumber":2,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":3,"author":{"gitId":"Gabau"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-21"},{"lineNumber":4,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"Gabau"},"content":"public class Deadlines extends DatedTask {","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"Gabau"},"content":"    private static String label \u003d \"[D]\";","lastModifiedDate":"2021-08-15"},{"lineNumber":7,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"Gabau"},"content":"    public Deadlines(String s, LocalDate dl) {","lastModifiedDate":"2021-08-21"},{"lineNumber":9,"author":{"gitId":"Gabau"},"content":"        super(s.trim(), dl);","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"Gabau"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"Gabau"},"content":"    public Deadlines(String s, String dl) {","lastModifiedDate":"2021-08-15"},{"lineNumber":13,"author":{"gitId":"Gabau"},"content":"        super(s.trim(), LocalDate.parse(dl.trim()));","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"Gabau"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":16,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":17,"author":{"gitId":"Gabau"},"content":"    @Override","lastModifiedDate":"2021-08-15"},{"lineNumber":18,"author":{"gitId":"Gabau"},"content":"    public String toString() {","lastModifiedDate":"2021-08-15"},{"lineNumber":19,"author":{"gitId":"Gabau"},"content":"        return this.label + super.toString() + \" \" + \"(by: \" + this.localDate() + \")\";","lastModifiedDate":"2021-08-21"},{"lineNumber":20,"author":{"gitId":"Gabau"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":21,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":22,"author":{"gitId":"Gabau"},"content":"    @Override","lastModifiedDate":"2021-08-15"},{"lineNumber":23,"author":{"gitId":"Gabau"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2021-08-15"},{"lineNumber":24,"author":{"gitId":"Gabau"},"content":"        if (obj instanceof Deadlines) {","lastModifiedDate":"2021-08-15"},{"lineNumber":25,"author":{"gitId":"Gabau"},"content":"            Deadlines dl \u003d (Deadlines) obj;","lastModifiedDate":"2021-08-15"},{"lineNumber":26,"author":{"gitId":"Gabau"},"content":"            return this.name.equals(dl.name) \u0026\u0026 this.lDate.equals(dl.lDate);","lastModifiedDate":"2021-08-21"},{"lineNumber":27,"author":{"gitId":"Gabau"},"content":"        }","lastModifiedDate":"2021-08-15"},{"lineNumber":28,"author":{"gitId":"Gabau"},"content":"        return false;","lastModifiedDate":"2021-08-15"},{"lineNumber":29,"author":{"gitId":"Gabau"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":30,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":31,"author":{"gitId":"Gabau"},"content":"    @Override","lastModifiedDate":"2021-08-21"},{"lineNumber":32,"author":{"gitId":"Gabau"},"content":"    public String encode() {","lastModifiedDate":"2021-08-21"},{"lineNumber":33,"author":{"gitId":"Gabau"},"content":"        //String indicating whether this task is done or not.","lastModifiedDate":"2021-08-21"},{"lineNumber":34,"author":{"gitId":"Gabau"},"content":"        String d \u003d this.isDone()","lastModifiedDate":"2021-08-21"},{"lineNumber":35,"author":{"gitId":"Gabau"},"content":"                ? Task.DONE","lastModifiedDate":"2021-08-21"},{"lineNumber":36,"author":{"gitId":"Gabau"},"content":"                : Task.NOTDONE;","lastModifiedDate":"2021-08-21"},{"lineNumber":37,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":38,"author":{"gitId":"Gabau"},"content":"        return Task.Label.D + Task.DELIMITER + d + Task.DELIMITER + this.name + Task.DELIMITER + this.lDate;","lastModifiedDate":"2021-08-21"},{"lineNumber":39,"author":{"gitId":"Gabau"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":40,"author":{"gitId":"Gabau"},"content":"}","lastModifiedDate":"2021-08-15"}],"authorContributionMap":{"Gabau":40}},{"path":"src/main/java/util/tasks/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Gabau"},"content":"package util.tasks;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"Gabau"},"content":"/**","lastModifiedDate":"2021-08-21"},{"lineNumber":4,"author":{"gitId":"Gabau"},"content":" * DukeException, an exception that arose from inaccurate input.","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"Gabau"},"content":" *","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"Gabau"},"content":" */","lastModifiedDate":"2021-08-21"},{"lineNumber":7,"author":{"gitId":"Gabau"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":9,"author":{"gitId":"Gabau"},"content":"    public DukeException() {","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"Gabau"},"content":"        super(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"Gabau"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"Gabau"},"content":"    public DukeException(String message) {","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"Gabau"},"content":"        super(message);","lastModifiedDate":"2021-08-21"},{"lineNumber":16,"author":{"gitId":"Gabau"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":17,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":18,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":19,"author":{"gitId":"Gabau"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"Gabau":19}},{"path":"src/main/java/util/tasks/Events.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Gabau"},"content":"package util.tasks;","lastModifiedDate":"2021-08-20"},{"lineNumber":2,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":3,"author":{"gitId":"Gabau"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-21"},{"lineNumber":4,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"Gabau"},"content":"public class Events extends DatedTask {","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"Gabau"},"content":"    private static String label \u003d \"[E]\";","lastModifiedDate":"2021-08-15"},{"lineNumber":7,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"Gabau"},"content":"    public Events(String name, LocalDate date) {","lastModifiedDate":"2021-08-21"},{"lineNumber":9,"author":{"gitId":"Gabau"},"content":"        super(name.trim(), date);","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"Gabau"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":12,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":13,"author":{"gitId":"Gabau"},"content":"    public Events(String name, String date) {","lastModifiedDate":"2021-08-15"},{"lineNumber":14,"author":{"gitId":"Gabau"},"content":"        super(name.trim(), LocalDate.parse(date.trim()));","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":16,"author":{"gitId":"Gabau"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":17,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":18,"author":{"gitId":"Gabau"},"content":"    @Override","lastModifiedDate":"2021-08-15"},{"lineNumber":19,"author":{"gitId":"Gabau"},"content":"    public String toString() {","lastModifiedDate":"2021-08-15"},{"lineNumber":20,"author":{"gitId":"Gabau"},"content":"        return this.label + super.toString() + \" (at: \" + this.localDate() + \")\";","lastModifiedDate":"2021-08-21"},{"lineNumber":21,"author":{"gitId":"Gabau"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":22,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":23,"author":{"gitId":"Gabau"},"content":"    @Override","lastModifiedDate":"2021-08-15"},{"lineNumber":24,"author":{"gitId":"Gabau"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2021-08-15"},{"lineNumber":25,"author":{"gitId":"Gabau"},"content":"        if (obj instanceof Events) {","lastModifiedDate":"2021-08-15"},{"lineNumber":26,"author":{"gitId":"Gabau"},"content":"            Events e \u003d (Events) obj;","lastModifiedDate":"2021-08-15"},{"lineNumber":27,"author":{"gitId":"Gabau"},"content":"            return this.name.equals(e.name) \u0026\u0026 e.lDate.equals(this.lDate);","lastModifiedDate":"2021-08-21"},{"lineNumber":28,"author":{"gitId":"Gabau"},"content":"        }","lastModifiedDate":"2021-08-15"},{"lineNumber":29,"author":{"gitId":"Gabau"},"content":"        return false;","lastModifiedDate":"2021-08-15"},{"lineNumber":30,"author":{"gitId":"Gabau"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":31,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":32,"author":{"gitId":"Gabau"},"content":"    @Override","lastModifiedDate":"2021-08-21"},{"lineNumber":33,"author":{"gitId":"Gabau"},"content":"    public String encode() {","lastModifiedDate":"2021-08-21"},{"lineNumber":34,"author":{"gitId":"Gabau"},"content":"        //String indicating whether this task is done or not.","lastModifiedDate":"2021-08-21"},{"lineNumber":35,"author":{"gitId":"Gabau"},"content":"        String d \u003d this.isDone()","lastModifiedDate":"2021-08-21"},{"lineNumber":36,"author":{"gitId":"Gabau"},"content":"                ? Task.DONE","lastModifiedDate":"2021-08-21"},{"lineNumber":37,"author":{"gitId":"Gabau"},"content":"                : Task.NOTDONE;","lastModifiedDate":"2021-08-21"},{"lineNumber":38,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":39,"author":{"gitId":"Gabau"},"content":"        return Task.Label.E + Task.DELIMITER + d + Task.DELIMITER + this.name + Task.DELIMITER + this.lDate;","lastModifiedDate":"2021-08-21"},{"lineNumber":40,"author":{"gitId":"Gabau"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":41,"author":{"gitId":"Gabau"},"content":"}","lastModifiedDate":"2021-08-15"}],"authorContributionMap":{"Gabau":41}},{"path":"src/main/java/util/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Gabau"},"content":"/**","lastModifiedDate":"2021-08-15"},{"lineNumber":2,"author":{"gitId":"Gabau"},"content":" * Class of a task to be done.","lastModifiedDate":"2021-08-15"},{"lineNumber":3,"author":{"gitId":"Gabau"},"content":" *","lastModifiedDate":"2021-08-15"},{"lineNumber":4,"author":{"gitId":"Gabau"},"content":" */","lastModifiedDate":"2021-08-15"},{"lineNumber":5,"author":{"gitId":"Gabau"},"content":"package util.tasks;","lastModifiedDate":"2021-08-20"},{"lineNumber":6,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":7,"author":{"gitId":"Gabau"},"content":"public abstract class Task {","lastModifiedDate":"2021-08-15"},{"lineNumber":8,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":9,"author":{"gitId":"Gabau"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"Gabau"},"content":"     * Method to encode the task as a String.","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"Gabau"},"content":"     * Format - {type of task}{DELIMITER}{DONE/NOTDONE}{DELIMITER}{TASKNAME}{Extra information}","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"Gabau"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"Gabau"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"Gabau"},"content":"     * @return The encoded task;","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"Gabau"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":16,"author":{"gitId":"Gabau"},"content":"    public abstract String encode();","lastModifiedDate":"2021-08-21"},{"lineNumber":17,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":18,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":19,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":20,"author":{"gitId":"Gabau"},"content":"    protected static enum Label {","lastModifiedDate":"2021-08-21"},{"lineNumber":21,"author":{"gitId":"Gabau"},"content":"        T, E, D;","lastModifiedDate":"2021-08-21"},{"lineNumber":22,"author":{"gitId":"Gabau"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":23,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":24,"author":{"gitId":"Gabau"},"content":"    protected String name;","lastModifiedDate":"2021-08-15"},{"lineNumber":25,"author":{"gitId":"Gabau"},"content":"    boolean isdone;","lastModifiedDate":"2021-08-21"},{"lineNumber":26,"author":{"gitId":"Gabau"},"content":"    //what is a better choice for a delimiter","lastModifiedDate":"2021-08-21"},{"lineNumber":27,"author":{"gitId":"Gabau"},"content":"    protected static String DELIMITER \u003d \"/ghx-124\";","lastModifiedDate":"2021-08-21"},{"lineNumber":28,"author":{"gitId":"Gabau"},"content":"    protected static String DONE \u003d \"DONETASKe123111\";","lastModifiedDate":"2021-08-21"},{"lineNumber":29,"author":{"gitId":"Gabau"},"content":"    protected static String NOTDONE \u003d \"NOTDONETASK454e-e\";","lastModifiedDate":"2021-08-21"},{"lineNumber":30,"author":{"gitId":"Gabau"},"content":"    private static String notDone \u003d \"[ ]\";","lastModifiedDate":"2021-08-15"},{"lineNumber":31,"author":{"gitId":"Gabau"},"content":"    private static String done \u003d \"[X]\";","lastModifiedDate":"2021-08-15"},{"lineNumber":32,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":33,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":34,"author":{"gitId":"Gabau"},"content":"    /**","lastModifiedDate":"2021-08-15"},{"lineNumber":35,"author":{"gitId":"Gabau"},"content":"     * Constructor of task.","lastModifiedDate":"2021-08-15"},{"lineNumber":36,"author":{"gitId":"Gabau"},"content":"     *","lastModifiedDate":"2021-08-15"},{"lineNumber":37,"author":{"gitId":"Gabau"},"content":"     * @param s Name of the task.","lastModifiedDate":"2021-08-15"},{"lineNumber":38,"author":{"gitId":"Gabau"},"content":"     */","lastModifiedDate":"2021-08-15"},{"lineNumber":39,"author":{"gitId":"Gabau"},"content":"    public Task(String s) {","lastModifiedDate":"2021-08-15"},{"lineNumber":40,"author":{"gitId":"Gabau"},"content":"        this.name \u003d s;","lastModifiedDate":"2021-08-15"},{"lineNumber":41,"author":{"gitId":"Gabau"},"content":"        this.isdone \u003d false;","lastModifiedDate":"2021-08-21"},{"lineNumber":42,"author":{"gitId":"Gabau"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":43,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":44,"author":{"gitId":"Gabau"},"content":"    /**","lastModifiedDate":"2021-08-15"},{"lineNumber":45,"author":{"gitId":"Gabau"},"content":"     * Marks when the task is done.","lastModifiedDate":"2021-08-15"},{"lineNumber":46,"author":{"gitId":"Gabau"},"content":"     */","lastModifiedDate":"2021-08-15"},{"lineNumber":47,"author":{"gitId":"Gabau"},"content":"    public void done() {","lastModifiedDate":"2021-08-15"},{"lineNumber":48,"author":{"gitId":"Gabau"},"content":"        this.isdone \u003d true;","lastModifiedDate":"2021-08-21"},{"lineNumber":49,"author":{"gitId":"Gabau"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":50,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":51,"author":{"gitId":"Gabau"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":52,"author":{"gitId":"Gabau"},"content":"     * Obtains the corresponding task from the string input.","lastModifiedDate":"2021-08-21"},{"lineNumber":53,"author":{"gitId":"Gabau"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":54,"author":{"gitId":"Gabau"},"content":"     * @param s The input String.","lastModifiedDate":"2021-08-21"},{"lineNumber":55,"author":{"gitId":"Gabau"},"content":"     * @return The task the string represents.","lastModifiedDate":"2021-08-21"},{"lineNumber":56,"author":{"gitId":"Gabau"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":57,"author":{"gitId":"Gabau"},"content":"    public static Task decode(String s) throws DukeException {","lastModifiedDate":"2021-08-21"},{"lineNumber":58,"author":{"gitId":"Gabau"},"content":"        String[] ssplit \u003d s.split(DELIMITER, 4);","lastModifiedDate":"2021-08-21"},{"lineNumber":59,"author":{"gitId":"Gabau"},"content":"        Label currentType \u003d Label.valueOf(ssplit[0]);","lastModifiedDate":"2021-08-21"},{"lineNumber":60,"author":{"gitId":"Gabau"},"content":"        boolean done \u003d ssplit[1].equals(Task.DONE);","lastModifiedDate":"2021-08-21"},{"lineNumber":61,"author":{"gitId":"Gabau"},"content":"        Task t;","lastModifiedDate":"2021-08-21"},{"lineNumber":62,"author":{"gitId":"Gabau"},"content":"        switch (currentType) {","lastModifiedDate":"2021-08-21"},{"lineNumber":63,"author":{"gitId":"Gabau"},"content":"            //For todo","lastModifiedDate":"2021-08-21"},{"lineNumber":64,"author":{"gitId":"Gabau"},"content":"            case T:","lastModifiedDate":"2021-08-21"},{"lineNumber":65,"author":{"gitId":"Gabau"},"content":"                t \u003d new ToDos(ssplit[2]);","lastModifiedDate":"2021-08-21"},{"lineNumber":66,"author":{"gitId":"Gabau"},"content":"                break;","lastModifiedDate":"2021-08-21"},{"lineNumber":67,"author":{"gitId":"Gabau"},"content":"            case E:","lastModifiedDate":"2021-08-21"},{"lineNumber":68,"author":{"gitId":"Gabau"},"content":"                t \u003d new Events(ssplit[2], ssplit[3]);","lastModifiedDate":"2021-08-21"},{"lineNumber":69,"author":{"gitId":"Gabau"},"content":"                break;","lastModifiedDate":"2021-08-21"},{"lineNumber":70,"author":{"gitId":"Gabau"},"content":"            case D:","lastModifiedDate":"2021-08-21"},{"lineNumber":71,"author":{"gitId":"Gabau"},"content":"                t \u003d new Deadlines(ssplit[2], ssplit[3]);","lastModifiedDate":"2021-08-21"},{"lineNumber":72,"author":{"gitId":"Gabau"},"content":"                break;","lastModifiedDate":"2021-08-21"},{"lineNumber":73,"author":{"gitId":"Gabau"},"content":"            default:","lastModifiedDate":"2021-08-21"},{"lineNumber":74,"author":{"gitId":"Gabau"},"content":"                throw new DukeException(\"Not a valid text document\");","lastModifiedDate":"2021-08-21"},{"lineNumber":75,"author":{"gitId":"Gabau"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":76,"author":{"gitId":"Gabau"},"content":"        if (done) {","lastModifiedDate":"2021-08-21"},{"lineNumber":77,"author":{"gitId":"Gabau"},"content":"            t.done();","lastModifiedDate":"2021-08-21"},{"lineNumber":78,"author":{"gitId":"Gabau"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":79,"author":{"gitId":"Gabau"},"content":"        return t;","lastModifiedDate":"2021-08-21"},{"lineNumber":80,"author":{"gitId":"Gabau"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":81,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":82,"author":{"gitId":"Gabau"},"content":"    public boolean isDone() {","lastModifiedDate":"2021-08-21"},{"lineNumber":83,"author":{"gitId":"Gabau"},"content":"        return this.isdone;","lastModifiedDate":"2021-08-21"},{"lineNumber":84,"author":{"gitId":"Gabau"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":85,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":86,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":87,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":88,"author":{"gitId":"Gabau"},"content":"    @Override","lastModifiedDate":"2021-08-15"},{"lineNumber":89,"author":{"gitId":"Gabau"},"content":"    public String toString() {","lastModifiedDate":"2021-08-15"},{"lineNumber":90,"author":{"gitId":"Gabau"},"content":"        String checkBox \u003d this.isdone","lastModifiedDate":"2021-08-21"},{"lineNumber":91,"author":{"gitId":"Gabau"},"content":"                ? Task.done","lastModifiedDate":"2021-08-21"},{"lineNumber":92,"author":{"gitId":"Gabau"},"content":"                : Task.notDone;","lastModifiedDate":"2021-08-21"},{"lineNumber":93,"author":{"gitId":"Gabau"},"content":"        return checkBox + \" \" + this.name;","lastModifiedDate":"2021-08-21"},{"lineNumber":94,"author":{"gitId":"Gabau"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":95,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":96,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":97,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":98,"author":{"gitId":"Gabau"},"content":"    @Override","lastModifiedDate":"2021-08-15"},{"lineNumber":99,"author":{"gitId":"Gabau"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2021-08-15"},{"lineNumber":100,"author":{"gitId":"Gabau"},"content":"        if (obj instanceof Task) {","lastModifiedDate":"2021-08-15"},{"lineNumber":101,"author":{"gitId":"Gabau"},"content":"            Task t \u003d (Task) obj;","lastModifiedDate":"2021-08-15"},{"lineNumber":102,"author":{"gitId":"Gabau"},"content":"            return t.name.equals(this.name);","lastModifiedDate":"2021-08-15"},{"lineNumber":103,"author":{"gitId":"Gabau"},"content":"        }","lastModifiedDate":"2021-08-15"},{"lineNumber":104,"author":{"gitId":"Gabau"},"content":"        return false;","lastModifiedDate":"2021-08-15"},{"lineNumber":105,"author":{"gitId":"Gabau"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":106,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":107,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":108,"author":{"gitId":"Gabau"},"content":"}","lastModifiedDate":"2021-08-15"}],"authorContributionMap":{"Gabau":108}},{"path":"src/main/java/util/tasks/ToDos.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Gabau"},"content":"package util.tasks;","lastModifiedDate":"2021-08-20"},{"lineNumber":2,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":3,"author":{"gitId":"Gabau"},"content":"public class ToDos extends Task {","lastModifiedDate":"2021-08-15"},{"lineNumber":4,"author":{"gitId":"Gabau"},"content":"    private static String label \u003d \"[T]\";","lastModifiedDate":"2021-08-15"},{"lineNumber":5,"author":{"gitId":"Gabau"},"content":"    public ToDos(String s) {","lastModifiedDate":"2021-08-15"},{"lineNumber":6,"author":{"gitId":"Gabau"},"content":"        super(s.trim());","lastModifiedDate":"2021-08-15"},{"lineNumber":7,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":8,"author":{"gitId":"Gabau"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":9,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":10,"author":{"gitId":"Gabau"},"content":"    @Override","lastModifiedDate":"2021-08-15"},{"lineNumber":11,"author":{"gitId":"Gabau"},"content":"    public String toString() {","lastModifiedDate":"2021-08-15"},{"lineNumber":12,"author":{"gitId":"Gabau"},"content":"        return this.label + super.toString();","lastModifiedDate":"2021-08-15"},{"lineNumber":13,"author":{"gitId":"Gabau"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":14,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"Gabau"},"content":"    @Override","lastModifiedDate":"2021-08-21"},{"lineNumber":16,"author":{"gitId":"Gabau"},"content":"    public String encode() {","lastModifiedDate":"2021-08-21"},{"lineNumber":17,"author":{"gitId":"Gabau"},"content":"        //String indicating whether this task is done or not.","lastModifiedDate":"2021-08-21"},{"lineNumber":18,"author":{"gitId":"Gabau"},"content":"        String d \u003d this.isDone()","lastModifiedDate":"2021-08-21"},{"lineNumber":19,"author":{"gitId":"Gabau"},"content":"                ? Task.DONE","lastModifiedDate":"2021-08-21"},{"lineNumber":20,"author":{"gitId":"Gabau"},"content":"                : Task.NOTDONE;","lastModifiedDate":"2021-08-21"},{"lineNumber":21,"author":{"gitId":"Gabau"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":22,"author":{"gitId":"Gabau"},"content":"        return Task.Label.T + Task.DELIMITER + d + Task.DELIMITER + this.name;","lastModifiedDate":"2021-08-21"},{"lineNumber":23,"author":{"gitId":"Gabau"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":24,"author":{"gitId":"Gabau"},"content":"}","lastModifiedDate":"2021-08-15"}],"authorContributionMap":{"Gabau":24}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Gabau"},"content":"todo drink water","lastModifiedDate":"2021-08-15"},{"lineNumber":2,"author":{"gitId":"Gabau"},"content":"deadline make origami /by Now","lastModifiedDate":"2021-08-15"},{"lineNumber":3,"author":{"gitId":"Gabau"},"content":"event attend concert /at 9-11-2001","lastModifiedDate":"2021-08-15"},{"lineNumber":4,"author":{"gitId":"Gabau"},"content":"event make windows 11 /at Microsoft","lastModifiedDate":"2021-08-15"},{"lineNumber":5,"author":{"gitId":"Gabau"},"content":"list","lastModifiedDate":"2021-08-15"},{"lineNumber":6,"author":{"gitId":"Gabau"},"content":"done 2","lastModifiedDate":"2021-08-15"},{"lineNumber":7,"author":{"gitId":"Gabau"},"content":"list","lastModifiedDate":"2021-08-15"},{"lineNumber":8,"author":{"gitId":"Gabau"},"content":"todo eat cheese","lastModifiedDate":"2021-08-15"},{"lineNumber":9,"author":{"gitId":"Gabau"},"content":"list","lastModifiedDate":"2021-08-15"},{"lineNumber":10,"author":{"gitId":"Gabau"},"content":"delete 2","lastModifiedDate":"2021-08-15"},{"lineNumber":11,"author":{"gitId":"Gabau"},"content":"list","lastModifiedDate":"2021-08-15"},{"lineNumber":12,"author":{"gitId":"Gabau"},"content":"delete","lastModifiedDate":"2021-08-15"},{"lineNumber":13,"author":{"gitId":"Gabau"},"content":"done 1","lastModifiedDate":"2021-08-15"},{"lineNumber":14,"author":{"gitId":"Gabau"},"content":"list","lastModifiedDate":"2021-08-15"},{"lineNumber":15,"author":{"gitId":"Gabau"},"content":"bye","lastModifiedDate":"2021-08-15"}],"authorContributionMap":{"Gabau":15}}]

[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"Yttruire"},"content":"# duke.Duke project template","lastModifiedDate":"2021-08-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"Yttruire"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2021-08-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Yttruire":2,"-":22}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"Yttruire"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2021-09-03"},{"lineNumber":16,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":17,"author":{"gitId":"Yttruire"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-03"},{"lineNumber":18,"author":{"gitId":"Yttruire"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-03"},{"lineNumber":19,"author":{"gitId":"Yttruire"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-03"},{"lineNumber":20,"author":{"gitId":"Yttruire"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-03"},{"lineNumber":21,"author":{"gitId":"Yttruire"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-03"},{"lineNumber":22,"author":{"gitId":"Yttruire"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-03"},{"lineNumber":23,"author":{"gitId":"Yttruire"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-03"},{"lineNumber":24,"author":{"gitId":"Yttruire"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-03"},{"lineNumber":25,"author":{"gitId":"Yttruire"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-03"},{"lineNumber":26,"author":{"gitId":"Yttruire"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-03"},{"lineNumber":27,"author":{"gitId":"Yttruire"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-03"},{"lineNumber":28,"author":{"gitId":"Yttruire"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"Yttruire"},"content":"    mainClassName \u003d \"duke.gui.Launcher\"","lastModifiedDate":"2021-09-14"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Yttruire":15,"-":45}},{"path":"data/Duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Yttruire"},"content":"E|0|Sleep|2021-09-14","lastModifiedDate":"2021-09-14"},{"lineNumber":2,"author":{"gitId":"Yttruire"},"content":"D|1|CS2100 Assignment|2021-09-15","lastModifiedDate":"2021-09-14"},{"lineNumber":3,"author":{"gitId":"Yttruire"},"content":"T|1|Take a screenshot of DukeSupreme","lastModifiedDate":"2021-09-14"}],"authorContributionMap":{"Yttruire":3}},{"path":"data/tasks.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Yttruire"},"content":"T|0|task","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"Yttruire"},"content":"D|1|read book|2021-08-29","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"Yttruire"},"content":"E|0|destroy book|2021-08-30","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"Yttruire"},"content":"T|1|bok typo","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"Yttruire"},"content":"T|0|book","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"Yttruire":5}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"Yttruire"},"content":"# DukeSupreme User Guide","lastModifiedDate":"2021-09-14"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Features ","lastModifiedDate":"2019-07-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":5,"author":{"gitId":"Yttruire"},"content":"### Track all of your Tasks","lastModifiedDate":"2021-09-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":7,"author":{"gitId":"Yttruire"},"content":"Choose from four different tasks to create and keep track of.","lastModifiedDate":"2021-09-14"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":9,"author":{"gitId":"Yttruire"},"content":"* A Todo task is simply a Task that can be checked off.","lastModifiedDate":"2021-09-14"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":11,"author":{"gitId":"Yttruire"},"content":"* An Event is a Task to be completed on a certain date.","lastModifiedDate":"2021-09-14"},{"lineNumber":12,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":13,"author":{"gitId":"Yttruire"},"content":"* A Deadline is a Task to be completed before a given date.","lastModifiedDate":"2021-09-14"},{"lineNumber":14,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":15,"author":{"gitId":"Yttruire"},"content":"* A DoWithinPeriod is a Task that should be completed within a given time period.","lastModifiedDate":"2021-09-14"},{"lineNumber":16,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":17,"author":{"gitId":"Yttruire"},"content":"### Automatic saving of your Task list to drive","lastModifiedDate":"2021-09-14"},{"lineNumber":18,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":19,"author":{"gitId":"Yttruire"},"content":"All tasks with their dates and completion status are automatically recorded and updated onto a save file on the disk!","lastModifiedDate":"2021-09-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"## Usage","lastModifiedDate":"2019-07-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":23,"author":{"gitId":"Yttruire"},"content":"### `bye` - Exits the program","lastModifiedDate":"2021-09-14"},{"lineNumber":24,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":25,"author":{"gitId":"Yttruire"},"content":"Immediately exits the program.","lastModifiedDate":"2021-09-14"},{"lineNumber":26,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":27,"author":{"gitId":"Yttruire"},"content":"Example: `bye`","lastModifiedDate":"2021-09-15"},{"lineNumber":28,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":29,"author":{"gitId":"Yttruire"},"content":"### `list` - Lists all logged tasks","lastModifiedDate":"2021-09-14"},{"lineNumber":30,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":31,"author":{"gitId":"Yttruire"},"content":"Displays a list of all of the tasks that have been logged, their completion status and due dates/deadlines (if applicable).","lastModifiedDate":"2021-09-14"},{"lineNumber":32,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":33,"author":{"gitId":"Yttruire"},"content":"Example of usage: `list`","lastModifiedDate":"2021-09-15"},{"lineNumber":34,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":35,"author":{"gitId":"Yttruire"},"content":"Example outcome:","lastModifiedDate":"2021-09-15"},{"lineNumber":36,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":37,"author":{"gitId":"Yttruire"},"content":"```","lastModifiedDate":"2021-09-15"},{"lineNumber":38,"author":{"gitId":"Yttruire"},"content":"Here are the tasks in your list:","lastModifiedDate":"2021-09-15"},{"lineNumber":39,"author":{"gitId":"Yttruire"},"content":"1. [T][] Read book","lastModifiedDate":"2021-09-15"},{"lineNumber":40,"author":{"gitId":"Yttruire"},"content":"2. [D][] Complete IP (by: Sep 15 2021)","lastModifiedDate":"2021-09-15"},{"lineNumber":41,"author":{"gitId":"Yttruire"},"content":"```","lastModifiedDate":"2021-09-15"},{"lineNumber":42,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":43,"author":{"gitId":"Yttruire"},"content":"### `done` - Sets a task to DONE status","lastModifiedDate":"2021-09-14"},{"lineNumber":44,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":45,"author":{"gitId":"Yttruire"},"content":"Sets a task that is specified by index to be completed.","lastModifiedDate":"2021-09-14"},{"lineNumber":46,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":47,"author":{"gitId":"Yttruire"},"content":"Format: done INDEX","lastModifiedDate":"2021-09-15"},{"lineNumber":48,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":49,"author":{"gitId":"Yttruire"},"content":"Example of usage: `done 2`","lastModifiedDate":"2021-09-15"},{"lineNumber":50,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":51,"author":{"gitId":"Yttruire"},"content":"Example outcome:","lastModifiedDate":"2021-09-15"},{"lineNumber":52,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":53,"author":{"gitId":"Yttruire"},"content":"```","lastModifiedDate":"2021-09-15"},{"lineNumber":54,"author":{"gitId":"Yttruire"},"content":"Nice! I\u0027ve marked this task as done:","lastModifiedDate":"2021-09-15"},{"lineNumber":55,"author":{"gitId":"Yttruire"},"content":"  [D][X] Complete IP (by: Sep 15 2021)","lastModifiedDate":"2021-09-15"},{"lineNumber":56,"author":{"gitId":"Yttruire"},"content":"```","lastModifiedDate":"2021-09-15"},{"lineNumber":57,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":58,"author":{"gitId":"Yttruire"},"content":"### `delete` - Deletes a task from the task list","lastModifiedDate":"2021-09-14"},{"lineNumber":59,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":60,"author":{"gitId":"Yttruire"},"content":"Deletes a task that is specified by index from the list of tasks.","lastModifiedDate":"2021-09-14"},{"lineNumber":61,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":62,"author":{"gitId":"Yttruire"},"content":"Format: delete INDEX","lastModifiedDate":"2021-09-15"},{"lineNumber":63,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":64,"author":{"gitId":"Yttruire"},"content":"Example of usage: `delete 2`","lastModifiedDate":"2021-09-15"},{"lineNumber":65,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":66,"author":{"gitId":"Yttruire"},"content":"Example outcome:","lastModifiedDate":"2021-09-15"},{"lineNumber":67,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":68,"author":{"gitId":"Yttruire"},"content":"```","lastModifiedDate":"2021-09-15"},{"lineNumber":69,"author":{"gitId":"Yttruire"},"content":"Noted. I\u0027ve removed this task:","lastModifiedDate":"2021-09-15"},{"lineNumber":70,"author":{"gitId":"Yttruire"},"content":"  [D][X] Complete IP (by: Sep 15 2021)","lastModifiedDate":"2021-09-15"},{"lineNumber":71,"author":{"gitId":"Yttruire"},"content":"Now you have 1 tasks in the list.","lastModifiedDate":"2021-09-15"},{"lineNumber":72,"author":{"gitId":"Yttruire"},"content":"```","lastModifiedDate":"2021-09-15"},{"lineNumber":73,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":74,"author":{"gitId":"Yttruire"},"content":"### `todo` - Creates a new Todo Task","lastModifiedDate":"2021-09-14"},{"lineNumber":75,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":76,"author":{"gitId":"Yttruire"},"content":"Creates a Task that is to be completed. Has no due date/deadline, only completion status.","lastModifiedDate":"2021-09-14"},{"lineNumber":77,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":78,"author":{"gitId":"Yttruire"},"content":"Format: todo DESCRIPTION","lastModifiedDate":"2021-09-15"},{"lineNumber":79,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":80,"author":{"gitId":"Yttruire"},"content":"Example of usage: `todo Read a book`","lastModifiedDate":"2021-09-15"},{"lineNumber":81,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":82,"author":{"gitId":"Yttruire"},"content":"Example outcome:","lastModifiedDate":"2021-09-15"},{"lineNumber":83,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":84,"author":{"gitId":"Yttruire"},"content":"```","lastModifiedDate":"2021-09-15"},{"lineNumber":85,"author":{"gitId":"Yttruire"},"content":"Got it. I\u0027ve added this task:","lastModifiedDate":"2021-09-15"},{"lineNumber":86,"author":{"gitId":"Yttruire"},"content":"  [T][] Read a book","lastModifiedDate":"2021-09-15"},{"lineNumber":87,"author":{"gitId":"Yttruire"},"content":"Now you have 2 tasks in the list.","lastModifiedDate":"2021-09-15"},{"lineNumber":88,"author":{"gitId":"Yttruire"},"content":"```","lastModifiedDate":"2021-09-15"},{"lineNumber":89,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":90,"author":{"gitId":"Yttruire"},"content":"### `deadline` - Creates a new Task with a deadline","lastModifiedDate":"2021-09-14"},{"lineNumber":91,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":92,"author":{"gitId":"Yttruire"},"content":"Creates a Task that is to be completed by a specified deadline.","lastModifiedDate":"2021-09-14"},{"lineNumber":93,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":94,"author":{"gitId":"Yttruire"},"content":"Format: deadline DESCRIPTION /by YEAR-MONTH-DAY","lastModifiedDate":"2021-09-15"},{"lineNumber":95,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":96,"author":{"gitId":"Yttruire"},"content":"Example of usage: `deadline Read a book /by 2021-09-14`","lastModifiedDate":"2021-09-15"},{"lineNumber":97,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":98,"author":{"gitId":"Yttruire"},"content":"Example outcome:","lastModifiedDate":"2021-09-15"},{"lineNumber":99,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":100,"author":{"gitId":"Yttruire"},"content":"```","lastModifiedDate":"2021-09-15"},{"lineNumber":101,"author":{"gitId":"Yttruire"},"content":"Got it. I\u0027ve added this task:","lastModifiedDate":"2021-09-15"},{"lineNumber":102,"author":{"gitId":"Yttruire"},"content":"  [D][] Read a book (by: Sep 14 2021)","lastModifiedDate":"2021-09-15"},{"lineNumber":103,"author":{"gitId":"Yttruire"},"content":"Now you have 3 tasks in the list.","lastModifiedDate":"2021-09-15"},{"lineNumber":104,"author":{"gitId":"Yttruire"},"content":"```","lastModifiedDate":"2021-09-15"},{"lineNumber":105,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":106,"author":{"gitId":"Yttruire"},"content":"### `event` - Creates a new Task with a specific date","lastModifiedDate":"2021-09-14"},{"lineNumber":107,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":108,"author":{"gitId":"Yttruire"},"content":"Creates a Task that will happen on the specified date.","lastModifiedDate":"2021-09-14"},{"lineNumber":109,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":110,"author":{"gitId":"Yttruire"},"content":"Format: event DESCRIPTION /at YEAR-MONTH-DAY","lastModifiedDate":"2021-09-15"},{"lineNumber":111,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":112,"author":{"gitId":"Yttruire"},"content":"Example of usage: `event Attend book event /at 2021-09-14`","lastModifiedDate":"2021-09-15"},{"lineNumber":113,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":114,"author":{"gitId":"Yttruire"},"content":"Example outcome:","lastModifiedDate":"2021-09-15"},{"lineNumber":115,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":116,"author":{"gitId":"Yttruire"},"content":"```","lastModifiedDate":"2021-09-15"},{"lineNumber":117,"author":{"gitId":"Yttruire"},"content":"Got it. I\u0027ve added this task:","lastModifiedDate":"2021-09-15"},{"lineNumber":118,"author":{"gitId":"Yttruire"},"content":"  [E][] Attend book event (at: Sep 14 2021)","lastModifiedDate":"2021-09-15"},{"lineNumber":119,"author":{"gitId":"Yttruire"},"content":"Now you have 4 tasks in the list.","lastModifiedDate":"2021-09-15"},{"lineNumber":120,"author":{"gitId":"Yttruire"},"content":"```","lastModifiedDate":"2021-09-15"},{"lineNumber":121,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":122,"author":{"gitId":"Yttruire"},"content":"### `dowithinperiod` - Creates a new Task that should be completed within a time period","lastModifiedDate":"2021-09-14"},{"lineNumber":123,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":124,"author":{"gitId":"Yttruire"},"content":"Creates a Task that as a start and end date, specifying a time period in which the task should be completed.","lastModifiedDate":"2021-09-14"},{"lineNumber":125,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":126,"author":{"gitId":"Yttruire"},"content":"Format: dowithinperiod DESCRIPTION /between YEAR-MONTH-DAY /and YEAR-MONTH-DAY","lastModifiedDate":"2021-09-15"},{"lineNumber":127,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":128,"author":{"gitId":"Yttruire"},"content":"Example of usage: `dowithinperiod Complete CS2103T IP /between 2021-09-10 /and 2021-09-15`","lastModifiedDate":"2021-09-15"},{"lineNumber":129,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":130,"author":{"gitId":"Yttruire"},"content":"Example outcome:","lastModifiedDate":"2021-09-15"},{"lineNumber":131,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":132,"author":{"gitId":"Yttruire"},"content":"```","lastModifiedDate":"2021-09-15"},{"lineNumber":133,"author":{"gitId":"Yttruire"},"content":"Got it. I\u0027ve added this task:","lastModifiedDate":"2021-09-15"},{"lineNumber":134,"author":{"gitId":"Yttruire"},"content":"  [P][] Complete CS2103T IP (between: Sep 10 2021 and Sep 15 2021)","lastModifiedDate":"2021-09-15"},{"lineNumber":135,"author":{"gitId":"Yttruire"},"content":"Now you have 5 tasks in the list.","lastModifiedDate":"2021-09-15"},{"lineNumber":136,"author":{"gitId":"Yttruire"},"content":"```","lastModifiedDate":"2021-09-15"},{"lineNumber":137,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":138,"author":{"gitId":"Yttruire"},"content":"### `date` - Filters and returns tasks that are due on the given date","lastModifiedDate":"2021-09-14"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":140,"author":{"gitId":"Yttruire"},"content":"Displays a list of only tasks that are due on the given date.","lastModifiedDate":"2021-09-14"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":142,"author":{"gitId":"Yttruire"},"content":"Format: date YEAR-MONTH-DAY","lastModifiedDate":"2021-09-15"},{"lineNumber":143,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":144,"author":{"gitId":"Yttruire"},"content":"Example of usage: `date 2021-09-14`","lastModifiedDate":"2021-09-15"},{"lineNumber":145,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":146,"author":{"gitId":"Yttruire"},"content":"Example outcome:","lastModifiedDate":"2021-09-15"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":148,"author":{"gitId":"Yttruire"},"content":"```","lastModifiedDate":"2021-09-15"},{"lineNumber":149,"author":{"gitId":"Yttruire"},"content":"Here are the tasks in your list that are due on Sep 14 2021:","lastModifiedDate":"2021-09-15"},{"lineNumber":150,"author":{"gitId":"Yttruire"},"content":"1. [D][] Read a book (by: Sep 14 2021)","lastModifiedDate":"2021-09-15"},{"lineNumber":151,"author":{"gitId":"Yttruire"},"content":"2. [E][] Attend book event (at: Sep 14 2021)","lastModifiedDate":"2021-09-15"},{"lineNumber":152,"author":{"gitId":"Yttruire"},"content":"```","lastModifiedDate":"2021-09-15"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":154,"author":{"gitId":"Yttruire"},"content":"### `find` - Finds and returns all tasks that have the given string in its description","lastModifiedDate":"2021-09-14"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":156,"author":{"gitId":"Yttruire"},"content":"Displays a list of only tasks whose descriptions cotnain the string given by the user.","lastModifiedDate":"2021-09-14"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":158,"author":{"gitId":"Yttruire"},"content":"Format: find KEYWORD","lastModifiedDate":"2021-09-15"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":160,"author":{"gitId":"Yttruire"},"content":"Example of usage: `find book`","lastModifiedDate":"2021-09-15"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":162,"author":{"gitId":"Yttruire"},"content":"Example outcome:","lastModifiedDate":"2021-09-15"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":164,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-09-15"},{"lineNumber":165,"author":{"gitId":"Yttruire"},"content":"Here are the tasks in your list:","lastModifiedDate":"2021-09-15"},{"lineNumber":166,"author":{"gitId":"Yttruire"},"content":"1. [T][] Read a book","lastModifiedDate":"2021-09-15"},{"lineNumber":167,"author":{"gitId":"Yttruire"},"content":"2. [D][] Read a book (by: Sep 14 2021)","lastModifiedDate":"2021-09-15"},{"lineNumber":168,"author":{"gitId":"Yttruire"},"content":"3. [E][] Attend a book event (at: Sep 14 2021)","lastModifiedDate":"2021-09-15"},{"lineNumber":169,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-09-15"}],"authorContributionMap":{"Yttruire":149,"-":20}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yttruire"},"content":"package duke;","lastModifiedDate":"2021-08-27"},{"lineNumber":2,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":3,"author":{"gitId":"Yttruire"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"Yttruire"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"Yttruire"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"Yttruire"},"content":"import duke.data.Storage;","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"Yttruire"},"content":"import duke.data.TaskList;","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"Yttruire"},"content":"import duke.io.Command;","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"Yttruire"},"content":"import duke.io.OutputFormatter;","lastModifiedDate":"2021-09-03"},{"lineNumber":11,"author":{"gitId":"Yttruire"},"content":"import duke.io.Parser;","lastModifiedDate":"2021-09-10"},{"lineNumber":12,"author":{"gitId":"Yttruire"},"content":"import duke.tasks.*;","lastModifiedDate":"2021-09-11"},{"lineNumber":13,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":14,"author":{"gitId":"Yttruire"},"content":"/**","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"Yttruire"},"content":" * Main program managing all main functions.","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"Yttruire"},"content":" */","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"Yttruire"},"content":"public class Duke {","lastModifiedDate":"2021-08-27"},{"lineNumber":18,"author":{"gitId":"Yttruire"},"content":"    private final Storage storage;","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"Yttruire"},"content":"    private TaskList taskList;","lastModifiedDate":"2021-08-27"},{"lineNumber":20,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":21,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"Yttruire"},"content":"     * Constructs the main Duke object to run the program.","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"Yttruire"},"content":"     * @param filePath The path of the save file to be used/created","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"Yttruire"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2021-08-27"},{"lineNumber":27,"author":{"gitId":"Yttruire"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2021-08-27"},{"lineNumber":28,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":29,"author":{"gitId":"Yttruire"},"content":"        try {","lastModifiedDate":"2021-08-27"},{"lineNumber":30,"author":{"gitId":"Yttruire"},"content":"            taskList \u003d storage.loadTaskData();","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"Yttruire"},"content":"        } catch (IOException | DukeException e) {","lastModifiedDate":"2021-09-03"},{"lineNumber":32,"author":{"gitId":"Yttruire"},"content":"            taskList \u003d new TaskList();","lastModifiedDate":"2021-09-03"},{"lineNumber":33,"author":{"gitId":"Yttruire"},"content":"        }","lastModifiedDate":"2021-09-03"},{"lineNumber":34,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-09-03"},{"lineNumber":35,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":36,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-09-03"},{"lineNumber":37,"author":{"gitId":"Yttruire"},"content":"     * Constructs the main Duke object to run the program with a hardcoded default filepath.","lastModifiedDate":"2021-09-03"},{"lineNumber":38,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-09-03"},{"lineNumber":39,"author":{"gitId":"Yttruire"},"content":"    public Duke() {","lastModifiedDate":"2021-09-03"},{"lineNumber":40,"author":{"gitId":"Yttruire"},"content":"        this.storage \u003d new Storage(\"data/Duke.txt\");","lastModifiedDate":"2021-09-03"},{"lineNumber":41,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":42,"author":{"gitId":"Yttruire"},"content":"        try {","lastModifiedDate":"2021-09-03"},{"lineNumber":43,"author":{"gitId":"Yttruire"},"content":"            taskList \u003d storage.loadTaskData();","lastModifiedDate":"2021-09-03"},{"lineNumber":44,"author":{"gitId":"Yttruire"},"content":"        } catch (IOException | DukeException e) {","lastModifiedDate":"2021-09-03"},{"lineNumber":45,"author":{"gitId":"Yttruire"},"content":"            taskList \u003d new TaskList();","lastModifiedDate":"2021-08-27"},{"lineNumber":46,"author":{"gitId":"Yttruire"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":47,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":48,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":49,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":50,"author":{"gitId":"Yttruire"},"content":"     * Runs the main program loop.","lastModifiedDate":"2021-08-29"},{"lineNumber":51,"author":{"gitId":"Yttruire"},"content":"     * Manages the main loop, handling all user input and saving data/etc.","lastModifiedDate":"2021-08-29"},{"lineNumber":52,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":53,"author":{"gitId":"Yttruire"},"content":"    public void run() {","lastModifiedDate":"2021-08-27"},{"lineNumber":54,"author":{"gitId":"Yttruire"},"content":"        // Deprecated","lastModifiedDate":"2021-09-03"},{"lineNumber":55,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":56,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":57,"author":{"gitId":"Yttruire"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-09-03"},{"lineNumber":58,"author":{"gitId":"Yttruire"},"content":"        new Duke(\"data/tasks.txt\").run();","lastModifiedDate":"2021-09-03"},{"lineNumber":59,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-09-03"},{"lineNumber":60,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":61,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-09-03"},{"lineNumber":62,"author":{"gitId":"Yttruire"},"content":"     * Returns a String response to be sent to the user after performing the respective action indicated by user.","lastModifiedDate":"2021-09-10"},{"lineNumber":63,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-09-10"},{"lineNumber":64,"author":{"gitId":"Yttruire"},"content":"     * @param userInput A string containing the commands that the user desires to execute","lastModifiedDate":"2021-09-10"},{"lineNumber":65,"author":{"gitId":"Yttruire"},"content":"     * @return A string containing the response from the application after performing the desired command","lastModifiedDate":"2021-09-10"},{"lineNumber":66,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-09-03"},{"lineNumber":67,"author":{"gitId":"Yttruire"},"content":"    public String getResponse(String userInput) {","lastModifiedDate":"2021-09-03"},{"lineNumber":68,"author":{"gitId":"Yttruire"},"content":"        while (true) {","lastModifiedDate":"2021-09-03"},{"lineNumber":69,"author":{"gitId":"Yttruire"},"content":"            try {","lastModifiedDate":"2021-09-03"},{"lineNumber":70,"author":{"gitId":"Yttruire"},"content":"                Command command \u003d Parser.parse(userInput.trim());","lastModifiedDate":"2021-09-14"},{"lineNumber":71,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":72,"author":{"gitId":"Yttruire"},"content":"                switch (command.getCommand()) {","lastModifiedDate":"2021-08-27"},{"lineNumber":73,"author":{"gitId":"Yttruire"},"content":"                case BYE:","lastModifiedDate":"2021-08-27"},{"lineNumber":74,"author":{"gitId":"Yttruire"},"content":"                    return getResponseBye();","lastModifiedDate":"2021-09-10"},{"lineNumber":75,"author":{"gitId":"Yttruire"},"content":"                case LIST:","lastModifiedDate":"2021-08-27"},{"lineNumber":76,"author":{"gitId":"Yttruire"},"content":"                    return getResponseList();","lastModifiedDate":"2021-09-10"},{"lineNumber":77,"author":{"gitId":"Yttruire"},"content":"                case DONE:","lastModifiedDate":"2021-08-27"},{"lineNumber":78,"author":{"gitId":"Yttruire"},"content":"                    return getResponseDone(command);","lastModifiedDate":"2021-09-10"},{"lineNumber":79,"author":{"gitId":"Yttruire"},"content":"                case DELETE:","lastModifiedDate":"2021-09-10"},{"lineNumber":80,"author":{"gitId":"Yttruire"},"content":"                    return getResponseDelete(command);","lastModifiedDate":"2021-09-10"},{"lineNumber":81,"author":{"gitId":"Yttruire"},"content":"                case TODO:","lastModifiedDate":"2021-09-10"},{"lineNumber":82,"author":{"gitId":"Yttruire"},"content":"                    return getResponseTodo(userInput);","lastModifiedDate":"2021-09-10"},{"lineNumber":83,"author":{"gitId":"Yttruire"},"content":"                case DEADLINE:","lastModifiedDate":"2021-09-10"},{"lineNumber":84,"author":{"gitId":"Yttruire"},"content":"                    return getResponseDeadline(command);","lastModifiedDate":"2021-09-10"},{"lineNumber":85,"author":{"gitId":"Yttruire"},"content":"                case EVENT:","lastModifiedDate":"2021-09-10"},{"lineNumber":86,"author":{"gitId":"Yttruire"},"content":"                    return getResponseEvent(command);","lastModifiedDate":"2021-09-10"},{"lineNumber":87,"author":{"gitId":"Yttruire"},"content":"                case DOWITHINPERIOD:","lastModifiedDate":"2021-09-11"},{"lineNumber":88,"author":{"gitId":"Yttruire"},"content":"                    return getResponseDoWithinPeriod(command);","lastModifiedDate":"2021-09-11"},{"lineNumber":89,"author":{"gitId":"Yttruire"},"content":"                case DATE:","lastModifiedDate":"2021-09-10"},{"lineNumber":90,"author":{"gitId":"Yttruire"},"content":"                    return getResponseDate(userInput);","lastModifiedDate":"2021-09-10"},{"lineNumber":91,"author":{"gitId":"Yttruire"},"content":"                case FIND:","lastModifiedDate":"2021-09-10"},{"lineNumber":92,"author":{"gitId":"Yttruire"},"content":"                    return getResponseFind(command);","lastModifiedDate":"2021-09-10"},{"lineNumber":93,"author":{"gitId":"Yttruire"},"content":"                default:","lastModifiedDate":"2021-09-10"},{"lineNumber":94,"author":{"gitId":"Yttruire"},"content":"                    assert(true); // Should never reach here","lastModifiedDate":"2021-09-10"},{"lineNumber":95,"author":{"gitId":"Yttruire"},"content":"                    break;","lastModifiedDate":"2021-09-10"},{"lineNumber":96,"author":{"gitId":"Yttruire"},"content":"                }","lastModifiedDate":"2021-09-10"},{"lineNumber":97,"author":{"gitId":"Yttruire"},"content":"            } catch (DukeException | IOException e) {","lastModifiedDate":"2021-09-10"},{"lineNumber":98,"author":{"gitId":"Yttruire"},"content":"                return e.getMessage();","lastModifiedDate":"2021-09-10"},{"lineNumber":99,"author":{"gitId":"Yttruire"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2021-09-10"},{"lineNumber":100,"author":{"gitId":"Yttruire"},"content":"                return \"Unknown date format. Please input a valid date in the format: YYYY-MM-DD\";","lastModifiedDate":"2021-09-10"},{"lineNumber":101,"author":{"gitId":"Yttruire"},"content":"            }","lastModifiedDate":"2021-09-10"},{"lineNumber":102,"author":{"gitId":"Yttruire"},"content":"        }","lastModifiedDate":"2021-09-10"},{"lineNumber":103,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-09-10"},{"lineNumber":104,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":105,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-09-10"},{"lineNumber":106,"author":{"gitId":"Yttruire"},"content":"     * Returns a message that the application will respond to the user with when BYE command is used.","lastModifiedDate":"2021-09-10"},{"lineNumber":107,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-09-10"},{"lineNumber":108,"author":{"gitId":"Yttruire"},"content":"     * @return A String containing the message to be transmitted to the user","lastModifiedDate":"2021-09-10"},{"lineNumber":109,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-09-10"},{"lineNumber":110,"author":{"gitId":"Yttruire"},"content":"    public String getResponseBye() {","lastModifiedDate":"2021-09-10"},{"lineNumber":111,"author":{"gitId":"Yttruire"},"content":"        return \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2021-09-10"},{"lineNumber":112,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-09-10"},{"lineNumber":113,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":114,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-09-10"},{"lineNumber":115,"author":{"gitId":"Yttruire"},"content":"     * Returns a message that the application will respond to the user with when LIST command is used.","lastModifiedDate":"2021-09-10"},{"lineNumber":116,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-09-10"},{"lineNumber":117,"author":{"gitId":"Yttruire"},"content":"     * @return A String containing the message to be transmitted to the user","lastModifiedDate":"2021-09-10"},{"lineNumber":118,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-09-10"},{"lineNumber":119,"author":{"gitId":"Yttruire"},"content":"    public String getResponseList() {","lastModifiedDate":"2021-09-10"},{"lineNumber":120,"author":{"gitId":"Yttruire"},"content":"        return OutputFormatter.formatTaskList(taskList);","lastModifiedDate":"2021-09-10"},{"lineNumber":121,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-09-10"},{"lineNumber":122,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":123,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-09-10"},{"lineNumber":124,"author":{"gitId":"Yttruire"},"content":"     * Returns a message that the application will respond to the user with when DONE command is used.","lastModifiedDate":"2021-09-10"},{"lineNumber":125,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-09-10"},{"lineNumber":126,"author":{"gitId":"Yttruire"},"content":"     * @param command The object containing all the details about the requested action by the user","lastModifiedDate":"2021-09-10"},{"lineNumber":127,"author":{"gitId":"Yttruire"},"content":"     * @return A String containing the message to be transmitted to the user","lastModifiedDate":"2021-09-10"},{"lineNumber":128,"author":{"gitId":"Yttruire"},"content":"     * @throws IOException Thrown when IO exceptions occurs when saving task data to hard disk","lastModifiedDate":"2021-09-10"},{"lineNumber":129,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-09-10"},{"lineNumber":130,"author":{"gitId":"Yttruire"},"content":"    public String getResponseDone(Command command) throws IOException {","lastModifiedDate":"2021-09-10"},{"lineNumber":131,"author":{"gitId":"Yttruire"},"content":"        // -1 to account for zero-indexing","lastModifiedDate":"2021-08-29"},{"lineNumber":132,"author":{"gitId":"Yttruire"},"content":"        int index \u003d Integer.parseInt(command.getArgs()[0]) - 1;","lastModifiedDate":"2021-09-10"},{"lineNumber":133,"author":{"gitId":"Yttruire"},"content":"        taskList.get(index).markAsDone();","lastModifiedDate":"2021-08-27"},{"lineNumber":134,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":135,"author":{"gitId":"Yttruire"},"content":"        // update file","lastModifiedDate":"2021-09-03"},{"lineNumber":136,"author":{"gitId":"Yttruire"},"content":"        storage.saveTaskData(taskList);","lastModifiedDate":"2021-09-03"},{"lineNumber":137,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":138,"author":{"gitId":"Yttruire"},"content":"        return \"Nice! I\u0027ve marked this task as done:\\n  \" + taskList.get(index);","lastModifiedDate":"2021-09-03"},{"lineNumber":139,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-09-10"},{"lineNumber":140,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":141,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-09-10"},{"lineNumber":142,"author":{"gitId":"Yttruire"},"content":"     * Returns a message that the application will respond to the user with when DELETE command is used.","lastModifiedDate":"2021-09-10"},{"lineNumber":143,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-09-10"},{"lineNumber":144,"author":{"gitId":"Yttruire"},"content":"     * @param command The object containing all the details about the requested action by the user","lastModifiedDate":"2021-09-10"},{"lineNumber":145,"author":{"gitId":"Yttruire"},"content":"     * @return A String containing the message to be transmitted to the user","lastModifiedDate":"2021-09-10"},{"lineNumber":146,"author":{"gitId":"Yttruire"},"content":"     * @throws IOException Thrown when IO exceptions occurs when saving task data to hard disk","lastModifiedDate":"2021-09-10"},{"lineNumber":147,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-09-10"},{"lineNumber":148,"author":{"gitId":"Yttruire"},"content":"    public String getResponseDelete(Command command) throws IOException {","lastModifiedDate":"2021-09-10"},{"lineNumber":149,"author":{"gitId":"Yttruire"},"content":"        // -1 to account for zero-indexing","lastModifiedDate":"2021-08-29"},{"lineNumber":150,"author":{"gitId":"Yttruire"},"content":"        Task removedTask \u003d taskList.remove(Integer.parseInt(command.getArgs()[0]) - 1);","lastModifiedDate":"2021-08-29"},{"lineNumber":151,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":152,"author":{"gitId":"Yttruire"},"content":"        // update file","lastModifiedDate":"2021-09-03"},{"lineNumber":153,"author":{"gitId":"Yttruire"},"content":"        storage.saveTaskData(taskList);","lastModifiedDate":"2021-09-03"},{"lineNumber":154,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":155,"author":{"gitId":"Yttruire"},"content":"        return \"Noted. I\u0027ve removed this task:\\n  \" + removedTask + \"\\nNow you have \"","lastModifiedDate":"2021-09-03"},{"lineNumber":156,"author":{"gitId":"Yttruire"},"content":"                + taskList.size() + \" tasks in the list.\";","lastModifiedDate":"2021-09-03"},{"lineNumber":157,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":158,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-09-10"},{"lineNumber":159,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":160,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-09-10"},{"lineNumber":161,"author":{"gitId":"Yttruire"},"content":"     * Returns a message that the application will respond to the user with when TODO command is used.","lastModifiedDate":"2021-09-10"},{"lineNumber":162,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-09-10"},{"lineNumber":163,"author":{"gitId":"Yttruire"},"content":"     * @param userInput The string containing the original unparsed command by the user","lastModifiedDate":"2021-09-10"},{"lineNumber":164,"author":{"gitId":"Yttruire"},"content":"     * @return A String containing the message to be transmitted to the user","lastModifiedDate":"2021-09-10"},{"lineNumber":165,"author":{"gitId":"Yttruire"},"content":"     * @throws IOException Thrown when IO exceptions occurs when saving task data to hard disk","lastModifiedDate":"2021-09-10"},{"lineNumber":166,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-09-10"},{"lineNumber":167,"author":{"gitId":"Yttruire"},"content":"    public String getResponseTodo(String userInput) throws IOException {","lastModifiedDate":"2021-09-10"},{"lineNumber":168,"author":{"gitId":"Yttruire"},"content":"        Todo newTodo \u003d new Todo(userInput.substring(5).trim());","lastModifiedDate":"2021-08-27"},{"lineNumber":169,"author":{"gitId":"Yttruire"},"content":"        this.taskList.add(newTodo);","lastModifiedDate":"2021-08-27"},{"lineNumber":170,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":171,"author":{"gitId":"Yttruire"},"content":"        // update file","lastModifiedDate":"2021-09-03"},{"lineNumber":172,"author":{"gitId":"Yttruire"},"content":"        storage.saveTaskData(taskList);","lastModifiedDate":"2021-09-03"},{"lineNumber":173,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":174,"author":{"gitId":"Yttruire"},"content":"        return \"Got it. I\u0027ve added this task:\\n  \"","lastModifiedDate":"2021-09-03"},{"lineNumber":175,"author":{"gitId":"Yttruire"},"content":"                + newTodo + \"\\nNow you have \" + this.taskList.size()","lastModifiedDate":"2021-09-02"},{"lineNumber":176,"author":{"gitId":"Yttruire"},"content":"                + \" tasks in the list.\";","lastModifiedDate":"2021-09-03"},{"lineNumber":177,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-09-10"},{"lineNumber":178,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":179,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-09-10"},{"lineNumber":180,"author":{"gitId":"Yttruire"},"content":"     * Returns a message that the application will respond to the user with when DEADLINE command is used.","lastModifiedDate":"2021-09-10"},{"lineNumber":181,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-09-10"},{"lineNumber":182,"author":{"gitId":"Yttruire"},"content":"     * @param command The object containing all the details about the requested action by the user","lastModifiedDate":"2021-09-10"},{"lineNumber":183,"author":{"gitId":"Yttruire"},"content":"     * @return A String containing the message to be transmitted to the user","lastModifiedDate":"2021-09-10"},{"lineNumber":184,"author":{"gitId":"Yttruire"},"content":"     * @throws IOException Thrown when IO exceptions occurs when saving task data to hard disk","lastModifiedDate":"2021-09-10"},{"lineNumber":185,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-09-10"},{"lineNumber":186,"author":{"gitId":"Yttruire"},"content":"    public String getResponseDeadline(Command command) throws IOException {","lastModifiedDate":"2021-09-10"},{"lineNumber":187,"author":{"gitId":"Yttruire"},"content":"        String description \u003d command.getArgs()[0];","lastModifiedDate":"2021-09-10"},{"lineNumber":188,"author":{"gitId":"Yttruire"},"content":"        LocalDate dateTime \u003d LocalDate.parse(command.getArgs()[1]);","lastModifiedDate":"2021-09-10"},{"lineNumber":189,"author":{"gitId":"Yttruire"},"content":"        Deadline newDeadline \u003d new Deadline(description, dateTime);","lastModifiedDate":"2021-08-27"},{"lineNumber":190,"author":{"gitId":"Yttruire"},"content":"        taskList.add(newDeadline);","lastModifiedDate":"2021-08-27"},{"lineNumber":191,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":192,"author":{"gitId":"Yttruire"},"content":"        // update file","lastModifiedDate":"2021-09-03"},{"lineNumber":193,"author":{"gitId":"Yttruire"},"content":"        storage.saveTaskData(taskList);","lastModifiedDate":"2021-09-03"},{"lineNumber":194,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":195,"author":{"gitId":"Yttruire"},"content":"        return \"Got it. I\u0027ve added this task:\\n  \" + newDeadline + \"\\nNow you have \"","lastModifiedDate":"2021-09-03"},{"lineNumber":196,"author":{"gitId":"Yttruire"},"content":"                + taskList.size() + \" tasks in the list.\";","lastModifiedDate":"2021-09-03"},{"lineNumber":197,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-09-10"},{"lineNumber":198,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":199,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-09-10"},{"lineNumber":200,"author":{"gitId":"Yttruire"},"content":"     * Returns a message that the application will respond to the user with when EVENT command is used.","lastModifiedDate":"2021-09-10"},{"lineNumber":201,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-09-10"},{"lineNumber":202,"author":{"gitId":"Yttruire"},"content":"     * @param command The object containing all the details about the requested action by the user","lastModifiedDate":"2021-09-10"},{"lineNumber":203,"author":{"gitId":"Yttruire"},"content":"     * @return A String containing the message to be transmitted to the user","lastModifiedDate":"2021-09-10"},{"lineNumber":204,"author":{"gitId":"Yttruire"},"content":"     * @throws IOException Thrown when IO exceptions occurs when saving task data to hard disk","lastModifiedDate":"2021-09-10"},{"lineNumber":205,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-09-10"},{"lineNumber":206,"author":{"gitId":"Yttruire"},"content":"    public String getResponseEvent(Command command) throws IOException {","lastModifiedDate":"2021-09-10"},{"lineNumber":207,"author":{"gitId":"Yttruire"},"content":"        String description \u003d command.getArgs()[0];","lastModifiedDate":"2021-09-10"},{"lineNumber":208,"author":{"gitId":"Yttruire"},"content":"        LocalDate dateTime \u003d LocalDate.parse(command.getArgs()[1]);","lastModifiedDate":"2021-09-10"},{"lineNumber":209,"author":{"gitId":"Yttruire"},"content":"        Event newEvent \u003d new Event(description, dateTime);","lastModifiedDate":"2021-08-27"},{"lineNumber":210,"author":{"gitId":"Yttruire"},"content":"        taskList.add(newEvent);","lastModifiedDate":"2021-08-27"},{"lineNumber":211,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":212,"author":{"gitId":"Yttruire"},"content":"        // update file","lastModifiedDate":"2021-09-03"},{"lineNumber":213,"author":{"gitId":"Yttruire"},"content":"        storage.saveTaskData(taskList);","lastModifiedDate":"2021-09-03"},{"lineNumber":214,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":215,"author":{"gitId":"Yttruire"},"content":"        return \"Got it. I\u0027ve added this task:\\n  \"","lastModifiedDate":"2021-09-03"},{"lineNumber":216,"author":{"gitId":"Yttruire"},"content":"                + newEvent + \"\\nNow you have \" + taskList.size()","lastModifiedDate":"2021-09-02"},{"lineNumber":217,"author":{"gitId":"Yttruire"},"content":"                + \" tasks in the list.\";","lastModifiedDate":"2021-09-03"},{"lineNumber":218,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-09-10"},{"lineNumber":219,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":220,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-09-11"},{"lineNumber":221,"author":{"gitId":"Yttruire"},"content":"     * Returns a message that the application will respond to the user with when DOWITHINPERIOD command is used.","lastModifiedDate":"2021-09-11"},{"lineNumber":222,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-09-11"},{"lineNumber":223,"author":{"gitId":"Yttruire"},"content":"     * @param command The object containing all the details about the requested action by the user","lastModifiedDate":"2021-09-11"},{"lineNumber":224,"author":{"gitId":"Yttruire"},"content":"     * @return A String containing the message to be transmitted to the user","lastModifiedDate":"2021-09-11"},{"lineNumber":225,"author":{"gitId":"Yttruire"},"content":"     * @throws IOException Thrown when IO exceptions occurs when saving task data to hard disk","lastModifiedDate":"2021-09-11"},{"lineNumber":226,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-09-11"},{"lineNumber":227,"author":{"gitId":"Yttruire"},"content":"    public String getResponseDoWithinPeriod(Command command) throws IOException {","lastModifiedDate":"2021-09-11"},{"lineNumber":228,"author":{"gitId":"Yttruire"},"content":"        String description \u003d command.getArgs()[0];","lastModifiedDate":"2021-09-11"},{"lineNumber":229,"author":{"gitId":"Yttruire"},"content":"        LocalDate startOfPeriod \u003d LocalDate.parse(command.getArgs()[1]);","lastModifiedDate":"2021-09-11"},{"lineNumber":230,"author":{"gitId":"Yttruire"},"content":"        LocalDate endOfPeriod \u003d LocalDate.parse(command.getArgs()[2]);","lastModifiedDate":"2021-09-11"},{"lineNumber":231,"author":{"gitId":"Yttruire"},"content":"        DoWithinPeriodTask newDoWithinPeriodTask \u003d new DoWithinPeriodTask(description, startOfPeriod, endOfPeriod);","lastModifiedDate":"2021-09-11"},{"lineNumber":232,"author":{"gitId":"Yttruire"},"content":"        taskList.add(newDoWithinPeriodTask);","lastModifiedDate":"2021-09-11"},{"lineNumber":233,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":234,"author":{"gitId":"Yttruire"},"content":"        // update file","lastModifiedDate":"2021-09-11"},{"lineNumber":235,"author":{"gitId":"Yttruire"},"content":"        storage.saveTaskData(taskList);","lastModifiedDate":"2021-09-11"},{"lineNumber":236,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":237,"author":{"gitId":"Yttruire"},"content":"        return \"Got it. I\u0027ve added this task:\\n  \"","lastModifiedDate":"2021-09-11"},{"lineNumber":238,"author":{"gitId":"Yttruire"},"content":"                + newDoWithinPeriodTask + \"\\nNow you have \" + taskList.size()","lastModifiedDate":"2021-09-11"},{"lineNumber":239,"author":{"gitId":"Yttruire"},"content":"                + \" tasks in the list.\";","lastModifiedDate":"2021-09-11"},{"lineNumber":240,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":241,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":242,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-09-10"},{"lineNumber":243,"author":{"gitId":"Yttruire"},"content":"     * Returns a message that the application will respond to the user with when DATE command is used.","lastModifiedDate":"2021-09-10"},{"lineNumber":244,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-09-10"},{"lineNumber":245,"author":{"gitId":"Yttruire"},"content":"     * @param userInput The string containing the original unparsed command by the user","lastModifiedDate":"2021-09-10"},{"lineNumber":246,"author":{"gitId":"Yttruire"},"content":"     * @return A String containing the message to be transmitted to the user","lastModifiedDate":"2021-09-10"},{"lineNumber":247,"author":{"gitId":"Yttruire"},"content":"     * @throws IOException Thrown when IO exceptions occurs when saving task data to hard disk","lastModifiedDate":"2021-09-10"},{"lineNumber":248,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-09-10"},{"lineNumber":249,"author":{"gitId":"Yttruire"},"content":"    public String getResponseDate(String userInput) {","lastModifiedDate":"2021-09-10"},{"lineNumber":250,"author":{"gitId":"Yttruire"},"content":"        LocalDate queryDate \u003d LocalDate.parse(userInput.substring(5));","lastModifiedDate":"2021-08-27"},{"lineNumber":251,"author":{"gitId":"Yttruire"},"content":"        TaskList dueTasks \u003d taskList.filterByDate(queryDate);","lastModifiedDate":"2021-08-29"},{"lineNumber":252,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":253,"author":{"gitId":"Yttruire"},"content":"        return OutputFormatter.formatTaskList(dueTasks, queryDate);","lastModifiedDate":"2021-09-03"},{"lineNumber":254,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-09-10"},{"lineNumber":255,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":256,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-09-10"},{"lineNumber":257,"author":{"gitId":"Yttruire"},"content":"     * Returns a message that the application will respond to the user with when EVENT command is used.","lastModifiedDate":"2021-09-10"},{"lineNumber":258,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-09-10"},{"lineNumber":259,"author":{"gitId":"Yttruire"},"content":"     * @param command The object containing all the details about the requested action by the user","lastModifiedDate":"2021-09-10"},{"lineNumber":260,"author":{"gitId":"Yttruire"},"content":"     * @return A String containing the message to be transmitted to the user","lastModifiedDate":"2021-09-10"},{"lineNumber":261,"author":{"gitId":"Yttruire"},"content":"     * @throws IOException Thrown when IO exceptions occurs when saving task data to hard disk","lastModifiedDate":"2021-09-10"},{"lineNumber":262,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-09-10"},{"lineNumber":263,"author":{"gitId":"Yttruire"},"content":"    public String getResponseFind(Command command) {","lastModifiedDate":"2021-09-10"},{"lineNumber":264,"author":{"gitId":"Yttruire"},"content":"        String keyword \u003d command.getArgs()[0];","lastModifiedDate":"2021-09-10"},{"lineNumber":265,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":266,"author":{"gitId":"Yttruire"},"content":"        return OutputFormatter.formatTaskList(taskList.containsKeyword(keyword));","lastModifiedDate":"2021-09-03"},{"lineNumber":267,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":268,"author":{"gitId":"Yttruire"},"content":"}","lastModifiedDate":"2021-08-27"}],"authorContributionMap":{"Yttruire":268}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yttruire"},"content":"package duke;","lastModifiedDate":"2021-08-27"},{"lineNumber":2,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":3,"author":{"gitId":"Yttruire"},"content":"/**","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"Yttruire"},"content":" * Exception class for all Duke-related issues.","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"Yttruire"},"content":" */","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"Yttruire"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"Yttruire"},"content":"    public DukeException(String errorMessage) {","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"Yttruire"},"content":"        super(errorMessage);","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"Yttruire"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"Yttruire"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"Yttruire"},"content":"        return \"☹ OOPS!!! \" + this.getMessage();","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"Yttruire"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"Yttruire":15}},{"path":"src/main/java/duke/data/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yttruire"},"content":"package duke.data;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":3,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":4,"author":{"gitId":"Yttruire"},"content":"import java.io.BufferedWriter;","lastModifiedDate":"2021-08-27"},{"lineNumber":5,"author":{"gitId":"Yttruire"},"content":"import java.io.File;","lastModifiedDate":"2021-08-27"},{"lineNumber":6,"author":{"gitId":"Yttruire"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-08-27"},{"lineNumber":7,"author":{"gitId":"Yttruire"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-27"},{"lineNumber":8,"author":{"gitId":"Yttruire"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-27"},{"lineNumber":9,"author":{"gitId":"Yttruire"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-27"},{"lineNumber":10,"author":{"gitId":"Yttruire"},"content":"import java.util.List;","lastModifiedDate":"2021-08-27"},{"lineNumber":11,"author":{"gitId":"Yttruire"},"content":"import java.util.Objects;","lastModifiedDate":"2021-08-27"},{"lineNumber":12,"author":{"gitId":"Yttruire"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-27"},{"lineNumber":13,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":14,"author":{"gitId":"Yttruire"},"content":"import duke.DukeException;","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"Yttruire"},"content":"import duke.tasks.*;","lastModifiedDate":"2021-09-11"},{"lineNumber":16,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":17,"author":{"gitId":"Yttruire"},"content":"/**","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"Yttruire"},"content":" * Encapsulates the saving and loading of task data from a save file.","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"Yttruire"},"content":" */","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"Yttruire"},"content":"public class Storage {","lastModifiedDate":"2021-08-27"},{"lineNumber":21,"author":{"gitId":"Yttruire"},"content":"    protected String pathName;","lastModifiedDate":"2021-08-27"},{"lineNumber":22,"author":{"gitId":"Yttruire"},"content":"    protected File taskFile;","lastModifiedDate":"2021-08-27"},{"lineNumber":23,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":24,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"Yttruire"},"content":"     * Initialises the object with a path to the save file.","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":27,"author":{"gitId":"Yttruire"},"content":"     * @param pathName A String containing a relative path to the save file","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"Yttruire"},"content":"    public Storage(String pathName) {","lastModifiedDate":"2021-08-27"},{"lineNumber":30,"author":{"gitId":"Yttruire"},"content":"        this.pathName \u003d pathName;","lastModifiedDate":"2021-08-27"},{"lineNumber":31,"author":{"gitId":"Yttruire"},"content":"        this.taskFile \u003d new File(pathName);","lastModifiedDate":"2021-08-27"},{"lineNumber":32,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":33,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":34,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":35,"author":{"gitId":"Yttruire"},"content":"     * Saves a given TaskList to the file at the path given at initialisation.","lastModifiedDate":"2021-08-29"},{"lineNumber":36,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":37,"author":{"gitId":"Yttruire"},"content":"     * @param taskList The list of tasks to be saved to file","lastModifiedDate":"2021-08-29"},{"lineNumber":38,"author":{"gitId":"Yttruire"},"content":"     * @throws IOException Thrown in the case of an error while initialising the file writer","lastModifiedDate":"2021-08-29"},{"lineNumber":39,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":40,"author":{"gitId":"Yttruire"},"content":"    public void saveTaskData(TaskList taskList) throws IOException {","lastModifiedDate":"2021-08-27"},{"lineNumber":41,"author":{"gitId":"Yttruire"},"content":"        BufferedWriter writer \u003d new BufferedWriter(new FileWriter(pathName));","lastModifiedDate":"2021-08-27"},{"lineNumber":42,"author":{"gitId":"Yttruire"},"content":"        if (!taskList.isEmpty()) {","lastModifiedDate":"2021-08-27"},{"lineNumber":43,"author":{"gitId":"Yttruire"},"content":"            writer.write(taskList.get(0).getFormattedData() + \"\\n\");","lastModifiedDate":"2021-08-27"},{"lineNumber":44,"author":{"gitId":"Yttruire"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":45,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":46,"author":{"gitId":"Yttruire"},"content":"        for (int i \u003d 1; i \u003c taskList.size(); ++i) {","lastModifiedDate":"2021-08-27"},{"lineNumber":47,"author":{"gitId":"Yttruire"},"content":"            writer.append(taskList.get(i).getFormattedData()).append(\"\\n\");","lastModifiedDate":"2021-08-27"},{"lineNumber":48,"author":{"gitId":"Yttruire"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":49,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":50,"author":{"gitId":"Yttruire"},"content":"        writer.close();","lastModifiedDate":"2021-08-27"},{"lineNumber":51,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":52,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":53,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":54,"author":{"gitId":"Yttruire"},"content":"     * Loads a TaskList from a save file at the path given at initialisation.","lastModifiedDate":"2021-08-29"},{"lineNumber":55,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":56,"author":{"gitId":"Yttruire"},"content":"     * @return The TaskList representing the tasks retrieved from the save file","lastModifiedDate":"2021-08-29"},{"lineNumber":57,"author":{"gitId":"Yttruire"},"content":"     * @throws IOException Thrown when there is an exception while creating the save file (if it doesn\u0027t already exist)","lastModifiedDate":"2021-08-29"},{"lineNumber":58,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":59,"author":{"gitId":"Yttruire"},"content":"    public TaskList loadTaskData() throws IOException, DukeException {","lastModifiedDate":"2021-09-02"},{"lineNumber":60,"author":{"gitId":"Yttruire"},"content":"        this.taskFile.getParentFile().mkdirs();","lastModifiedDate":"2021-08-27"},{"lineNumber":61,"author":{"gitId":"Yttruire"},"content":"        if (!this.taskFile.createNewFile()) {","lastModifiedDate":"2021-08-27"},{"lineNumber":62,"author":{"gitId":"Yttruire"},"content":"            // Save file exists, so load it","lastModifiedDate":"2021-08-27"},{"lineNumber":63,"author":{"gitId":"Yttruire"},"content":"            Scanner sc \u003d new Scanner(this.taskFile);","lastModifiedDate":"2021-08-27"},{"lineNumber":64,"author":{"gitId":"Yttruire"},"content":"            List\u003cTask\u003e taskData \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-27"},{"lineNumber":65,"author":{"gitId":"Yttruire"},"content":"            while (sc.hasNextLine()) {","lastModifiedDate":"2021-08-27"},{"lineNumber":66,"author":{"gitId":"Yttruire"},"content":"                String task \u003d sc.nextLine();","lastModifiedDate":"2021-08-27"},{"lineNumber":67,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":68,"author":{"gitId":"Yttruire"},"content":"                // Index 0 should contain the identifier for the type of task being loaded","lastModifiedDate":"2021-09-02"},{"lineNumber":69,"author":{"gitId":"Yttruire"},"content":"                // The rest of the indices are arguments that provide more information (E.g. description, deadline, etc)","lastModifiedDate":"2021-09-02"},{"lineNumber":70,"author":{"gitId":"Yttruire"},"content":"                String[] taskDetails \u003d task.split(\"\\\\|\");","lastModifiedDate":"2021-08-27"},{"lineNumber":71,"author":{"gitId":"Yttruire"},"content":"                assert(taskDetails.length \u003e\u003d 3);","lastModifiedDate":"2021-09-10"},{"lineNumber":72,"author":{"gitId":"Yttruire"},"content":"                assert(Objects.equals(taskDetails[1], \"0\") || Objects.equals(taskDetails[1], \"1\"));","lastModifiedDate":"2021-09-10"},{"lineNumber":73,"author":{"gitId":"Yttruire"},"content":"                boolean taskDone \u003d Objects.equals(taskDetails[1], \"1\");","lastModifiedDate":"2021-08-27"},{"lineNumber":74,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":75,"author":{"gitId":"Yttruire"},"content":"                switch (taskDetails[0]) {","lastModifiedDate":"2021-08-27"},{"lineNumber":76,"author":{"gitId":"Yttruire"},"content":"                case \"T\":","lastModifiedDate":"2021-08-27"},{"lineNumber":77,"author":{"gitId":"Yttruire"},"content":"                    taskData.add(new Todo(taskDetails[2], taskDone));","lastModifiedDate":"2021-08-27"},{"lineNumber":78,"author":{"gitId":"Yttruire"},"content":"                    break;","lastModifiedDate":"2021-08-27"},{"lineNumber":79,"author":{"gitId":"Yttruire"},"content":"                case \"D\":","lastModifiedDate":"2021-08-27"},{"lineNumber":80,"author":{"gitId":"Yttruire"},"content":"                    assert(taskDetails.length \u003d\u003d 4);","lastModifiedDate":"2021-09-10"},{"lineNumber":81,"author":{"gitId":"Yttruire"},"content":"                    taskData.add(new Deadline(taskDetails[2], LocalDate.parse(taskDetails[3]), taskDone));","lastModifiedDate":"2021-08-27"},{"lineNumber":82,"author":{"gitId":"Yttruire"},"content":"                    break;","lastModifiedDate":"2021-08-27"},{"lineNumber":83,"author":{"gitId":"Yttruire"},"content":"                case \"E\":","lastModifiedDate":"2021-08-27"},{"lineNumber":84,"author":{"gitId":"Yttruire"},"content":"                    assert(taskDetails.length \u003d\u003d 4);","lastModifiedDate":"2021-09-10"},{"lineNumber":85,"author":{"gitId":"Yttruire"},"content":"                    taskData.add(new Event(taskDetails[2], LocalDate.parse(taskDetails[3]), taskDone));","lastModifiedDate":"2021-08-27"},{"lineNumber":86,"author":{"gitId":"Yttruire"},"content":"                    break;","lastModifiedDate":"2021-08-27"},{"lineNumber":87,"author":{"gitId":"Yttruire"},"content":"                case \"P\":","lastModifiedDate":"2021-09-11"},{"lineNumber":88,"author":{"gitId":"Yttruire"},"content":"                    assert(taskDetails.length \u003d\u003d 5);","lastModifiedDate":"2021-09-11"},{"lineNumber":89,"author":{"gitId":"Yttruire"},"content":"                    taskData.add(new DoWithinPeriodTask(taskDetails[2], LocalDate.parse(taskDetails[3]), LocalDate.parse(taskDetails[4]), taskDone));","lastModifiedDate":"2021-09-11"},{"lineNumber":90,"author":{"gitId":"Yttruire"},"content":"                    break;","lastModifiedDate":"2021-09-11"},{"lineNumber":91,"author":{"gitId":"Yttruire"},"content":"                default:","lastModifiedDate":"2021-09-02"},{"lineNumber":92,"author":{"gitId":"Yttruire"},"content":"                    throw new DukeException(\"Error loading Task. Unrecognised Task identifier\");","lastModifiedDate":"2021-09-02"},{"lineNumber":93,"author":{"gitId":"Yttruire"},"content":"                }","lastModifiedDate":"2021-08-27"},{"lineNumber":94,"author":{"gitId":"Yttruire"},"content":"            }","lastModifiedDate":"2021-08-27"},{"lineNumber":95,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":96,"author":{"gitId":"Yttruire"},"content":"            sc.close();","lastModifiedDate":"2021-08-27"},{"lineNumber":97,"author":{"gitId":"Yttruire"},"content":"            return new TaskList(taskData);","lastModifiedDate":"2021-08-29"},{"lineNumber":98,"author":{"gitId":"Yttruire"},"content":"        } else {","lastModifiedDate":"2021-08-27"},{"lineNumber":99,"author":{"gitId":"Yttruire"},"content":"            // No save file exists, so a new one is created. Return empty list of tasks","lastModifiedDate":"2021-08-27"},{"lineNumber":100,"author":{"gitId":"Yttruire"},"content":"            return new TaskList(new ArrayList\u003c\u003e());","lastModifiedDate":"2021-08-29"},{"lineNumber":101,"author":{"gitId":"Yttruire"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":102,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":103,"author":{"gitId":"Yttruire"},"content":"}","lastModifiedDate":"2021-08-27"}],"authorContributionMap":{"Yttruire":103}},{"path":"src/main/java/duke/data/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yttruire"},"content":"package duke.data;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":3,"author":{"gitId":"Yttruire"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-27"},{"lineNumber":4,"author":{"gitId":"Yttruire"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-27"},{"lineNumber":5,"author":{"gitId":"Yttruire"},"content":"import java.util.List;","lastModifiedDate":"2021-08-27"},{"lineNumber":6,"author":{"gitId":"Yttruire"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-08-27"},{"lineNumber":7,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":8,"author":{"gitId":"Yttruire"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"Yttruire"},"content":"/**","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"Yttruire"},"content":" * An encapsulation of a list of tasks handled by our program.","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"Yttruire"},"content":" */","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"Yttruire"},"content":"public class TaskList {","lastModifiedDate":"2021-08-27"},{"lineNumber":14,"author":{"gitId":"Yttruire"},"content":"    protected List\u003cTask\u003e taskData;","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":16,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"Yttruire"},"content":"     * Initialises the tasklist with an empty arraylist.","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"Yttruire"},"content":"    public TaskList() {","lastModifiedDate":"2021-08-27"},{"lineNumber":20,"author":{"gitId":"Yttruire"},"content":"        this.taskData \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-27"},{"lineNumber":21,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":22,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":23,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"Yttruire"},"content":"     * Initialises the tasklist with an existing list of tasks.","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"Yttruire"},"content":"     * @param taskData A list of tasks to be kept by the tasklist","lastModifiedDate":"2021-08-29"},{"lineNumber":27,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"Yttruire"},"content":"    public TaskList(List\u003cTask\u003e taskData) {","lastModifiedDate":"2021-08-27"},{"lineNumber":29,"author":{"gitId":"Yttruire"},"content":"        this.taskData \u003d taskData;","lastModifiedDate":"2021-08-27"},{"lineNumber":30,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":31,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":32,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":33,"author":{"gitId":"Yttruire"},"content":"     * Adds a task to the list.","lastModifiedDate":"2021-08-29"},{"lineNumber":34,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":35,"author":{"gitId":"Yttruire"},"content":"     * @param task Task to be added to the list","lastModifiedDate":"2021-08-29"},{"lineNumber":36,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":37,"author":{"gitId":"Yttruire"},"content":"    public void add(Task task) {","lastModifiedDate":"2021-08-27"},{"lineNumber":38,"author":{"gitId":"Yttruire"},"content":"        this.taskData.add(task);","lastModifiedDate":"2021-08-27"},{"lineNumber":39,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":40,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":41,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":42,"author":{"gitId":"Yttruire"},"content":"     * Removes a task from the list.","lastModifiedDate":"2021-08-29"},{"lineNumber":43,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":44,"author":{"gitId":"Yttruire"},"content":"     * @param index The index of the task to be removed","lastModifiedDate":"2021-08-29"},{"lineNumber":45,"author":{"gitId":"Yttruire"},"content":"     * @return The Task that was removed","lastModifiedDate":"2021-08-29"},{"lineNumber":46,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":47,"author":{"gitId":"Yttruire"},"content":"    public Task remove(int index) {","lastModifiedDate":"2021-08-27"},{"lineNumber":48,"author":{"gitId":"Yttruire"},"content":"        return this.taskData.remove(index);","lastModifiedDate":"2021-08-27"},{"lineNumber":49,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":50,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":51,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":52,"author":{"gitId":"Yttruire"},"content":"     * Returns a task from the list at the given index.","lastModifiedDate":"2021-08-29"},{"lineNumber":53,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":54,"author":{"gitId":"Yttruire"},"content":"     * @param index The index of the task to be retrieved","lastModifiedDate":"2021-08-29"},{"lineNumber":55,"author":{"gitId":"Yttruire"},"content":"     * @return The task at the given index","lastModifiedDate":"2021-08-29"},{"lineNumber":56,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":57,"author":{"gitId":"Yttruire"},"content":"    public Task get(int index) {","lastModifiedDate":"2021-08-27"},{"lineNumber":58,"author":{"gitId":"Yttruire"},"content":"        return this.taskData.get(index);","lastModifiedDate":"2021-08-27"},{"lineNumber":59,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":60,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":61,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":62,"author":{"gitId":"Yttruire"},"content":"     * Returns true iff the list has no tasks","lastModifiedDate":"2021-08-29"},{"lineNumber":63,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":64,"author":{"gitId":"Yttruire"},"content":"     * @return Whether the list does not have any tasks","lastModifiedDate":"2021-08-29"},{"lineNumber":65,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":66,"author":{"gitId":"Yttruire"},"content":"    public boolean isEmpty() {","lastModifiedDate":"2021-08-27"},{"lineNumber":67,"author":{"gitId":"Yttruire"},"content":"        return this.taskData.isEmpty();","lastModifiedDate":"2021-08-27"},{"lineNumber":68,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":69,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":70,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":71,"author":{"gitId":"Yttruire"},"content":"     * Returns the number of tasks held by this list","lastModifiedDate":"2021-08-29"},{"lineNumber":72,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":73,"author":{"gitId":"Yttruire"},"content":"     * @return An integer representing the size of the list of tasks held","lastModifiedDate":"2021-08-29"},{"lineNumber":74,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":75,"author":{"gitId":"Yttruire"},"content":"    public int size() {","lastModifiedDate":"2021-08-27"},{"lineNumber":76,"author":{"gitId":"Yttruire"},"content":"        return this.taskData.size();","lastModifiedDate":"2021-08-27"},{"lineNumber":77,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":78,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":79,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":80,"author":{"gitId":"Yttruire"},"content":"     * Returns a new tasklist containing only the tasks that have a due date on the same date as the given date","lastModifiedDate":"2021-08-29"},{"lineNumber":81,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":82,"author":{"gitId":"Yttruire"},"content":"     * @param queryDate The date that we want to retrieve tasks of","lastModifiedDate":"2021-08-29"},{"lineNumber":83,"author":{"gitId":"Yttruire"},"content":"     * @return A new tasklist containing only tasks due on the given date","lastModifiedDate":"2021-08-29"},{"lineNumber":84,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":85,"author":{"gitId":"Yttruire"},"content":"    public TaskList filterByDate(LocalDate queryDate) {","lastModifiedDate":"2021-08-29"},{"lineNumber":86,"author":{"gitId":"Yttruire"},"content":"        return new TaskList(this.taskData.stream().filter(x -\u003e x.isDue(queryDate)).collect(Collectors.toList()));","lastModifiedDate":"2021-08-29"},{"lineNumber":87,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":88,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":89,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":90,"author":{"gitId":"Yttruire"},"content":"     * Returns a new TaskList containing Tasks whose description contains the given keyword/String","lastModifiedDate":"2021-09-02"},{"lineNumber":91,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":92,"author":{"gitId":"Yttruire"},"content":"     * @param keyword A String to be used to filter Tasks with descriptions","lastModifiedDate":"2021-08-29"},{"lineNumber":93,"author":{"gitId":"Yttruire"},"content":"     * @return A new TaskList of smaller/equal size","lastModifiedDate":"2021-08-29"},{"lineNumber":94,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":95,"author":{"gitId":"Yttruire"},"content":"    public TaskList containsKeyword(String keyword) {","lastModifiedDate":"2021-08-29"},{"lineNumber":96,"author":{"gitId":"Yttruire"},"content":"        return new TaskList(","lastModifiedDate":"2021-08-29"},{"lineNumber":97,"author":{"gitId":"Yttruire"},"content":"                this.taskData.stream().filter(x -\u003e x.containsKeyword(keyword)).collect(Collectors.toList()));","lastModifiedDate":"2021-08-29"},{"lineNumber":98,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":99,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":100,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":101,"author":{"gitId":"Yttruire"},"content":"     * Does a deep comparison of this object to another object.","lastModifiedDate":"2021-08-29"},{"lineNumber":102,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":103,"author":{"gitId":"Yttruire"},"content":"     * @param otherObj The other object to be compared to","lastModifiedDate":"2021-08-29"},{"lineNumber":104,"author":{"gitId":"Yttruire"},"content":"     * @return Returns true iff the two objects are of same type and same value in every field","lastModifiedDate":"2021-08-29"},{"lineNumber":105,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":106,"author":{"gitId":"Yttruire"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":107,"author":{"gitId":"Yttruire"},"content":"    public boolean equals(Object otherObj) {","lastModifiedDate":"2021-08-29"},{"lineNumber":108,"author":{"gitId":"Yttruire"},"content":"        if (!(otherObj instanceof TaskList)) {","lastModifiedDate":"2021-08-29"},{"lineNumber":109,"author":{"gitId":"Yttruire"},"content":"            return false;","lastModifiedDate":"2021-08-29"},{"lineNumber":110,"author":{"gitId":"Yttruire"},"content":"        } else {","lastModifiedDate":"2021-08-29"},{"lineNumber":111,"author":{"gitId":"Yttruire"},"content":"            final TaskList otherTaskList \u003d (TaskList) otherObj;","lastModifiedDate":"2021-08-29"},{"lineNumber":112,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":113,"author":{"gitId":"Yttruire"},"content":"            if (this.taskData \u003d\u003d null \u0026\u0026 otherTaskList.taskData \u003d\u003d null) {","lastModifiedDate":"2021-08-29"},{"lineNumber":114,"author":{"gitId":"Yttruire"},"content":"                return true;","lastModifiedDate":"2021-08-29"},{"lineNumber":115,"author":{"gitId":"Yttruire"},"content":"            } else if (this.taskData \u003d\u003d null || otherTaskList.taskData \u003d\u003d null) {","lastModifiedDate":"2021-08-29"},{"lineNumber":116,"author":{"gitId":"Yttruire"},"content":"                return false;","lastModifiedDate":"2021-08-29"},{"lineNumber":117,"author":{"gitId":"Yttruire"},"content":"            } else {","lastModifiedDate":"2021-08-29"},{"lineNumber":118,"author":{"gitId":"Yttruire"},"content":"                return this.taskData.equals(otherTaskList.taskData);","lastModifiedDate":"2021-08-29"},{"lineNumber":119,"author":{"gitId":"Yttruire"},"content":"            }","lastModifiedDate":"2021-08-29"},{"lineNumber":120,"author":{"gitId":"Yttruire"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":121,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":122,"author":{"gitId":"Yttruire"},"content":"}","lastModifiedDate":"2021-08-27"}],"authorContributionMap":{"Yttruire":122}},{"path":"src/main/java/duke/gui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yttruire"},"content":"package duke.gui;","lastModifiedDate":"2021-09-03"},{"lineNumber":2,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":3,"author":{"gitId":"Yttruire"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-03"},{"lineNumber":4,"author":{"gitId":"Yttruire"},"content":"import java.util.Collections;","lastModifiedDate":"2021-09-03"},{"lineNumber":5,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":6,"author":{"gitId":"Yttruire"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-09-03"},{"lineNumber":7,"author":{"gitId":"Yttruire"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-09-03"},{"lineNumber":8,"author":{"gitId":"Yttruire"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-09-03"},{"lineNumber":9,"author":{"gitId":"Yttruire"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-09-03"},{"lineNumber":10,"author":{"gitId":"Yttruire"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2021-09-03"},{"lineNumber":11,"author":{"gitId":"Yttruire"},"content":"import javafx.scene.Node;","lastModifiedDate":"2021-09-03"},{"lineNumber":12,"author":{"gitId":"Yttruire"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-09-03"},{"lineNumber":13,"author":{"gitId":"Yttruire"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-09-03"},{"lineNumber":14,"author":{"gitId":"Yttruire"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2021-09-03"},{"lineNumber":15,"author":{"gitId":"Yttruire"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2021-09-03"},{"lineNumber":16,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":17,"author":{"gitId":"Yttruire"},"content":"/**","lastModifiedDate":"2021-09-03"},{"lineNumber":18,"author":{"gitId":"Yttruire"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2021-09-03"},{"lineNumber":19,"author":{"gitId":"Yttruire"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2021-09-03"},{"lineNumber":20,"author":{"gitId":"Yttruire"},"content":" * containing text from the speaker.","lastModifiedDate":"2021-09-03"},{"lineNumber":21,"author":{"gitId":"Yttruire"},"content":" */","lastModifiedDate":"2021-09-03"},{"lineNumber":22,"author":{"gitId":"Yttruire"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2021-09-03"},{"lineNumber":23,"author":{"gitId":"Yttruire"},"content":"    @FXML","lastModifiedDate":"2021-09-03"},{"lineNumber":24,"author":{"gitId":"Yttruire"},"content":"    private Label dialog;","lastModifiedDate":"2021-09-03"},{"lineNumber":25,"author":{"gitId":"Yttruire"},"content":"    @FXML","lastModifiedDate":"2021-09-03"},{"lineNumber":26,"author":{"gitId":"Yttruire"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2021-09-03"},{"lineNumber":27,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":28,"author":{"gitId":"Yttruire"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2021-09-03"},{"lineNumber":29,"author":{"gitId":"Yttruire"},"content":"        try {","lastModifiedDate":"2021-09-03"},{"lineNumber":30,"author":{"gitId":"Yttruire"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2021-09-03"},{"lineNumber":31,"author":{"gitId":"Yttruire"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2021-09-03"},{"lineNumber":32,"author":{"gitId":"Yttruire"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2021-09-03"},{"lineNumber":33,"author":{"gitId":"Yttruire"},"content":"            fxmlLoader.load();","lastModifiedDate":"2021-09-03"},{"lineNumber":34,"author":{"gitId":"Yttruire"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-03"},{"lineNumber":35,"author":{"gitId":"Yttruire"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-09-03"},{"lineNumber":36,"author":{"gitId":"Yttruire"},"content":"        }","lastModifiedDate":"2021-09-03"},{"lineNumber":37,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":38,"author":{"gitId":"Yttruire"},"content":"        dialog.setText(text);","lastModifiedDate":"2021-09-03"},{"lineNumber":39,"author":{"gitId":"Yttruire"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2021-09-03"},{"lineNumber":40,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-09-03"},{"lineNumber":41,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":42,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-09-03"},{"lineNumber":43,"author":{"gitId":"Yttruire"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2021-09-03"},{"lineNumber":44,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-09-03"},{"lineNumber":45,"author":{"gitId":"Yttruire"},"content":"    private void flip() {","lastModifiedDate":"2021-09-03"},{"lineNumber":46,"author":{"gitId":"Yttruire"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2021-09-03"},{"lineNumber":47,"author":{"gitId":"Yttruire"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2021-09-03"},{"lineNumber":48,"author":{"gitId":"Yttruire"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2021-09-03"},{"lineNumber":49,"author":{"gitId":"Yttruire"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2021-09-03"},{"lineNumber":50,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-09-03"},{"lineNumber":51,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":52,"author":{"gitId":"Yttruire"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2021-09-03"},{"lineNumber":53,"author":{"gitId":"Yttruire"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2021-09-03"},{"lineNumber":54,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-09-03"},{"lineNumber":55,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":56,"author":{"gitId":"Yttruire"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2021-09-03"},{"lineNumber":57,"author":{"gitId":"Yttruire"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2021-09-03"},{"lineNumber":58,"author":{"gitId":"Yttruire"},"content":"        db.flip();","lastModifiedDate":"2021-09-03"},{"lineNumber":59,"author":{"gitId":"Yttruire"},"content":"        return db;","lastModifiedDate":"2021-09-03"},{"lineNumber":60,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-09-03"},{"lineNumber":61,"author":{"gitId":"Yttruire"},"content":"}","lastModifiedDate":"2021-09-03"}],"authorContributionMap":{"Yttruire":61}},{"path":"src/main/java/duke/gui/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yttruire"},"content":"package duke.gui;","lastModifiedDate":"2021-09-03"},{"lineNumber":2,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":3,"author":{"gitId":"Yttruire"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-09-03"},{"lineNumber":4,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":5,"author":{"gitId":"Yttruire"},"content":"/**","lastModifiedDate":"2021-09-03"},{"lineNumber":6,"author":{"gitId":"Yttruire"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2021-09-03"},{"lineNumber":7,"author":{"gitId":"Yttruire"},"content":" */","lastModifiedDate":"2021-09-03"},{"lineNumber":8,"author":{"gitId":"Yttruire"},"content":"public class Launcher {","lastModifiedDate":"2021-09-03"},{"lineNumber":9,"author":{"gitId":"Yttruire"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-09-03"},{"lineNumber":10,"author":{"gitId":"Yttruire"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2021-09-03"},{"lineNumber":11,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-09-03"},{"lineNumber":12,"author":{"gitId":"Yttruire"},"content":"}","lastModifiedDate":"2021-09-03"}],"authorContributionMap":{"Yttruire":12}},{"path":"src/main/java/duke/gui/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yttruire"},"content":"package duke.gui;","lastModifiedDate":"2021-09-03"},{"lineNumber":2,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":3,"author":{"gitId":"Yttruire"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-03"},{"lineNumber":4,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":5,"author":{"gitId":"Yttruire"},"content":"import duke.Duke;","lastModifiedDate":"2021-09-03"},{"lineNumber":6,"author":{"gitId":"Yttruire"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-09-03"},{"lineNumber":7,"author":{"gitId":"Yttruire"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-09-03"},{"lineNumber":8,"author":{"gitId":"Yttruire"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2021-09-03"},{"lineNumber":9,"author":{"gitId":"Yttruire"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-09-03"},{"lineNumber":10,"author":{"gitId":"Yttruire"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2021-09-03"},{"lineNumber":11,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":12,"author":{"gitId":"Yttruire"},"content":"/**","lastModifiedDate":"2021-09-03"},{"lineNumber":13,"author":{"gitId":"Yttruire"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2021-09-03"},{"lineNumber":14,"author":{"gitId":"Yttruire"},"content":" */","lastModifiedDate":"2021-09-03"},{"lineNumber":15,"author":{"gitId":"Yttruire"},"content":"public class Main extends Application {","lastModifiedDate":"2021-09-03"},{"lineNumber":16,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":17,"author":{"gitId":"Yttruire"},"content":"    private Duke duke \u003d new Duke();","lastModifiedDate":"2021-09-03"},{"lineNumber":18,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":19,"author":{"gitId":"Yttruire"},"content":"    @Override","lastModifiedDate":"2021-09-03"},{"lineNumber":20,"author":{"gitId":"Yttruire"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2021-09-03"},{"lineNumber":21,"author":{"gitId":"Yttruire"},"content":"        try {","lastModifiedDate":"2021-09-03"},{"lineNumber":22,"author":{"gitId":"Yttruire"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2021-09-03"},{"lineNumber":23,"author":{"gitId":"Yttruire"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2021-09-03"},{"lineNumber":24,"author":{"gitId":"Yttruire"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2021-09-03"},{"lineNumber":25,"author":{"gitId":"Yttruire"},"content":"            stage.setScene(scene);","lastModifiedDate":"2021-09-03"},{"lineNumber":26,"author":{"gitId":"Yttruire"},"content":"            stage.setTitle(\"DukeSupreme\");","lastModifiedDate":"2021-09-14"},{"lineNumber":27,"author":{"gitId":"Yttruire"},"content":"            stage.setResizable(false);","lastModifiedDate":"2021-09-14"},{"lineNumber":28,"author":{"gitId":"Yttruire"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2021-09-03"},{"lineNumber":29,"author":{"gitId":"Yttruire"},"content":"            stage.show();","lastModifiedDate":"2021-09-03"},{"lineNumber":30,"author":{"gitId":"Yttruire"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-03"},{"lineNumber":31,"author":{"gitId":"Yttruire"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-09-03"},{"lineNumber":32,"author":{"gitId":"Yttruire"},"content":"        }","lastModifiedDate":"2021-09-03"},{"lineNumber":33,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-09-03"},{"lineNumber":34,"author":{"gitId":"Yttruire"},"content":"}","lastModifiedDate":"2021-09-03"}],"authorContributionMap":{"Yttruire":34}},{"path":"src/main/java/duke/gui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yttruire"},"content":"package duke.gui;","lastModifiedDate":"2021-09-03"},{"lineNumber":2,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":3,"author":{"gitId":"Yttruire"},"content":"import java.util.Objects;","lastModifiedDate":"2021-09-03"},{"lineNumber":4,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":5,"author":{"gitId":"Yttruire"},"content":"import duke.Duke;","lastModifiedDate":"2021-09-03"},{"lineNumber":6,"author":{"gitId":"Yttruire"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-09-03"},{"lineNumber":7,"author":{"gitId":"Yttruire"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2021-09-03"},{"lineNumber":8,"author":{"gitId":"Yttruire"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2021-09-03"},{"lineNumber":9,"author":{"gitId":"Yttruire"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2021-09-03"},{"lineNumber":10,"author":{"gitId":"Yttruire"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-09-03"},{"lineNumber":11,"author":{"gitId":"Yttruire"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-09-03"},{"lineNumber":12,"author":{"gitId":"Yttruire"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2021-09-03"},{"lineNumber":13,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":14,"author":{"gitId":"Yttruire"},"content":"/**","lastModifiedDate":"2021-09-03"},{"lineNumber":15,"author":{"gitId":"Yttruire"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2021-09-03"},{"lineNumber":16,"author":{"gitId":"Yttruire"},"content":" */","lastModifiedDate":"2021-09-03"},{"lineNumber":17,"author":{"gitId":"Yttruire"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2021-09-03"},{"lineNumber":18,"author":{"gitId":"Yttruire"},"content":"    @FXML","lastModifiedDate":"2021-09-03"},{"lineNumber":19,"author":{"gitId":"Yttruire"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2021-09-03"},{"lineNumber":20,"author":{"gitId":"Yttruire"},"content":"    @FXML","lastModifiedDate":"2021-09-03"},{"lineNumber":21,"author":{"gitId":"Yttruire"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2021-09-03"},{"lineNumber":22,"author":{"gitId":"Yttruire"},"content":"    @FXML","lastModifiedDate":"2021-09-03"},{"lineNumber":23,"author":{"gitId":"Yttruire"},"content":"    private TextField userInput;","lastModifiedDate":"2021-09-03"},{"lineNumber":24,"author":{"gitId":"Yttruire"},"content":"    @FXML","lastModifiedDate":"2021-09-03"},{"lineNumber":25,"author":{"gitId":"Yttruire"},"content":"    private Button sendButton;","lastModifiedDate":"2021-09-03"},{"lineNumber":26,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":27,"author":{"gitId":"Yttruire"},"content":"    private Duke duke;","lastModifiedDate":"2021-09-03"},{"lineNumber":28,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":29,"author":{"gitId":"Yttruire"},"content":"    private final Image userImage \u003d new Image(","lastModifiedDate":"2021-09-03"},{"lineNumber":30,"author":{"gitId":"Yttruire"},"content":"            Objects.requireNonNull(this.getClass().getResourceAsStream(\"/images/DaUser.png\")));","lastModifiedDate":"2021-09-03"},{"lineNumber":31,"author":{"gitId":"Yttruire"},"content":"    private final Image dukeImage \u003d new Image(","lastModifiedDate":"2021-09-03"},{"lineNumber":32,"author":{"gitId":"Yttruire"},"content":"            Objects.requireNonNull(this.getClass().getResourceAsStream(\"/images/DaDuke.png\")));","lastModifiedDate":"2021-09-03"},{"lineNumber":33,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":34,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-09-10"},{"lineNumber":35,"author":{"gitId":"Yttruire"},"content":"     * Initialises Duke with a welcome message","lastModifiedDate":"2021-09-10"},{"lineNumber":36,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-09-10"},{"lineNumber":37,"author":{"gitId":"Yttruire"},"content":"    @FXML","lastModifiedDate":"2021-09-03"},{"lineNumber":38,"author":{"gitId":"Yttruire"},"content":"    public void initialize() {","lastModifiedDate":"2021-09-03"},{"lineNumber":39,"author":{"gitId":"Yttruire"},"content":"        final String welcomeMessage \u003d \"Hello! I\u0027m duke.\\nWhat can I do for you?\";","lastModifiedDate":"2021-09-03"},{"lineNumber":40,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":41,"author":{"gitId":"Yttruire"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2021-09-03"},{"lineNumber":42,"author":{"gitId":"Yttruire"},"content":"        dialogContainer.getChildren().add(DialogBox.getDukeDialog(welcomeMessage, dukeImage));","lastModifiedDate":"2021-09-03"},{"lineNumber":43,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-09-03"},{"lineNumber":44,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":45,"author":{"gitId":"Yttruire"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2021-09-03"},{"lineNumber":46,"author":{"gitId":"Yttruire"},"content":"        duke \u003d d;","lastModifiedDate":"2021-09-03"},{"lineNumber":47,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-09-03"},{"lineNumber":48,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":49,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-09-03"},{"lineNumber":50,"author":{"gitId":"Yttruire"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2021-09-03"},{"lineNumber":51,"author":{"gitId":"Yttruire"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2021-09-03"},{"lineNumber":52,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-09-03"},{"lineNumber":53,"author":{"gitId":"Yttruire"},"content":"    @FXML","lastModifiedDate":"2021-09-03"},{"lineNumber":54,"author":{"gitId":"Yttruire"},"content":"    private void handleUserInput() {","lastModifiedDate":"2021-09-03"},{"lineNumber":55,"author":{"gitId":"Yttruire"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2021-09-03"},{"lineNumber":56,"author":{"gitId":"Yttruire"},"content":"        String response \u003d duke.getResponse(input);","lastModifiedDate":"2021-09-03"},{"lineNumber":57,"author":{"gitId":"Yttruire"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2021-09-03"},{"lineNumber":58,"author":{"gitId":"Yttruire"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2021-09-03"},{"lineNumber":59,"author":{"gitId":"Yttruire"},"content":"                DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2021-09-03"},{"lineNumber":60,"author":{"gitId":"Yttruire"},"content":"        );","lastModifiedDate":"2021-09-03"},{"lineNumber":61,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":62,"author":{"gitId":"Yttruire"},"content":"        if (input.equals(\"bye\")) {","lastModifiedDate":"2021-09-10"},{"lineNumber":63,"author":{"gitId":"Yttruire"},"content":"            System.exit(0);","lastModifiedDate":"2021-09-03"},{"lineNumber":64,"author":{"gitId":"Yttruire"},"content":"        }","lastModifiedDate":"2021-09-03"},{"lineNumber":65,"author":{"gitId":"Yttruire"},"content":"        userInput.clear();","lastModifiedDate":"2021-09-03"},{"lineNumber":66,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-09-03"},{"lineNumber":67,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":68,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":69,"author":{"gitId":"Yttruire"},"content":"}","lastModifiedDate":"2021-09-03"}],"authorContributionMap":{"Yttruire":69}},{"path":"src/main/java/duke/io/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yttruire"},"content":"package duke.io;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":3,"author":{"gitId":"Yttruire"},"content":"/**","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"Yttruire"},"content":" * A Command class to encapsulate command names and its given arguments.","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"Yttruire"},"content":" */","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"Yttruire"},"content":"public class Command {","lastModifiedDate":"2021-08-27"},{"lineNumber":7,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"Yttruire"},"content":"     * An enumeration that serves as an identifier of valid commands","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"Yttruire"},"content":"    public enum CommandName {","lastModifiedDate":"2021-08-27"},{"lineNumber":11,"author":{"gitId":"Yttruire"},"content":"        BYE, LIST, DONE, DELETE, TODO, DEADLINE, EVENT, DOWITHINPERIOD, DATE, FIND","lastModifiedDate":"2021-09-11"},{"lineNumber":12,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":13,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":14,"author":{"gitId":"Yttruire"},"content":"    protected CommandName command;","lastModifiedDate":"2021-08-27"},{"lineNumber":15,"author":{"gitId":"Yttruire"},"content":"    protected String[] args;","lastModifiedDate":"2021-08-27"},{"lineNumber":16,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":17,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"Yttruire"},"content":"     * Constructs a Command with an identifier accepting no arguments","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"Yttruire"},"content":"     * @param command An identifier for the command","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"Yttruire"},"content":"    public Command(CommandName command) {","lastModifiedDate":"2021-08-27"},{"lineNumber":23,"author":{"gitId":"Yttruire"},"content":"        this.command \u003d command;","lastModifiedDate":"2021-08-27"},{"lineNumber":24,"author":{"gitId":"Yttruire"},"content":"        this.args \u003d null;","lastModifiedDate":"2021-08-27"},{"lineNumber":25,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":26,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":27,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"Yttruire"},"content":"     * Constructs a Command with an identifier and arbitrary number of arguments stored as String","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"Yttruire"},"content":"     * @param command An identifier for the command","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"Yttruire"},"content":"     * @param args Any number of arguments stored in String format","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":33,"author":{"gitId":"Yttruire"},"content":"    public Command(CommandName command, String[] args) {","lastModifiedDate":"2021-08-27"},{"lineNumber":34,"author":{"gitId":"Yttruire"},"content":"        this.command \u003d command;","lastModifiedDate":"2021-08-27"},{"lineNumber":35,"author":{"gitId":"Yttruire"},"content":"        this.args \u003d args;","lastModifiedDate":"2021-08-27"},{"lineNumber":36,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":37,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":38,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":39,"author":{"gitId":"Yttruire"},"content":"     * Returns the command identifier.","lastModifiedDate":"2021-08-29"},{"lineNumber":40,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":41,"author":{"gitId":"Yttruire"},"content":"     * @return An enumeration identifying the command received from user","lastModifiedDate":"2021-08-29"},{"lineNumber":42,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":43,"author":{"gitId":"Yttruire"},"content":"    public CommandName getCommand() {","lastModifiedDate":"2021-08-27"},{"lineNumber":44,"author":{"gitId":"Yttruire"},"content":"        return this.command;","lastModifiedDate":"2021-08-27"},{"lineNumber":45,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":46,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":47,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":48,"author":{"gitId":"Yttruire"},"content":"     * Returns the arguments received with this command","lastModifiedDate":"2021-08-29"},{"lineNumber":49,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":50,"author":{"gitId":"Yttruire"},"content":"     * @return An array containing the string arguments","lastModifiedDate":"2021-08-29"},{"lineNumber":51,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":52,"author":{"gitId":"Yttruire"},"content":"    public String[] getArgs() {","lastModifiedDate":"2021-08-27"},{"lineNumber":53,"author":{"gitId":"Yttruire"},"content":"        return this.args;","lastModifiedDate":"2021-08-27"},{"lineNumber":54,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":55,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":56,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":57,"author":{"gitId":"Yttruire"},"content":"     * Does a deep comparison of this object to another object.","lastModifiedDate":"2021-08-29"},{"lineNumber":58,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":59,"author":{"gitId":"Yttruire"},"content":"     * @param otherObj The other object to be compared to","lastModifiedDate":"2021-08-29"},{"lineNumber":60,"author":{"gitId":"Yttruire"},"content":"     * @return Returns true iff the two objects are of same type and same value in every field","lastModifiedDate":"2021-08-29"},{"lineNumber":61,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":62,"author":{"gitId":"Yttruire"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":63,"author":{"gitId":"Yttruire"},"content":"    public boolean equals(Object otherObj) {","lastModifiedDate":"2021-08-29"},{"lineNumber":64,"author":{"gitId":"Yttruire"},"content":"        if (!(otherObj instanceof Command)) {","lastModifiedDate":"2021-08-29"},{"lineNumber":65,"author":{"gitId":"Yttruire"},"content":"            return false;","lastModifiedDate":"2021-08-29"},{"lineNumber":66,"author":{"gitId":"Yttruire"},"content":"        } else {","lastModifiedDate":"2021-08-29"},{"lineNumber":67,"author":{"gitId":"Yttruire"},"content":"            final Command otherCommand \u003d (Command) otherObj;","lastModifiedDate":"2021-08-29"},{"lineNumber":68,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":69,"author":{"gitId":"Yttruire"},"content":"            if (!this.command.equals(otherCommand.command)) {","lastModifiedDate":"2021-08-29"},{"lineNumber":70,"author":{"gitId":"Yttruire"},"content":"                return false;","lastModifiedDate":"2021-08-29"},{"lineNumber":71,"author":{"gitId":"Yttruire"},"content":"            } else if (this.args \u003d\u003d null \u0026\u0026 otherCommand.args \u003d\u003d null) {","lastModifiedDate":"2021-08-29"},{"lineNumber":72,"author":{"gitId":"Yttruire"},"content":"                return true;","lastModifiedDate":"2021-08-29"},{"lineNumber":73,"author":{"gitId":"Yttruire"},"content":"            } else if (this.args \u003d\u003d null || otherCommand.args \u003d\u003d null) {","lastModifiedDate":"2021-08-29"},{"lineNumber":74,"author":{"gitId":"Yttruire"},"content":"                return false;","lastModifiedDate":"2021-08-29"},{"lineNumber":75,"author":{"gitId":"Yttruire"},"content":"            } else if (this.args.length !\u003d otherCommand.args.length) {","lastModifiedDate":"2021-08-29"},{"lineNumber":76,"author":{"gitId":"Yttruire"},"content":"                return false;","lastModifiedDate":"2021-08-29"},{"lineNumber":77,"author":{"gitId":"Yttruire"},"content":"            } else {","lastModifiedDate":"2021-08-29"},{"lineNumber":78,"author":{"gitId":"Yttruire"},"content":"                for (int i \u003d 0; i \u003c this.args.length; ++i) {","lastModifiedDate":"2021-08-29"},{"lineNumber":79,"author":{"gitId":"Yttruire"},"content":"                    if (!this.args[i].equals(otherCommand.args[i])) {","lastModifiedDate":"2021-08-29"},{"lineNumber":80,"author":{"gitId":"Yttruire"},"content":"                        return false;","lastModifiedDate":"2021-08-29"},{"lineNumber":81,"author":{"gitId":"Yttruire"},"content":"                    }","lastModifiedDate":"2021-08-29"},{"lineNumber":82,"author":{"gitId":"Yttruire"},"content":"                }","lastModifiedDate":"2021-08-29"},{"lineNumber":83,"author":{"gitId":"Yttruire"},"content":"            }","lastModifiedDate":"2021-08-29"},{"lineNumber":84,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":85,"author":{"gitId":"Yttruire"},"content":"            return true;","lastModifiedDate":"2021-08-29"},{"lineNumber":86,"author":{"gitId":"Yttruire"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":87,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":88,"author":{"gitId":"Yttruire"},"content":"}","lastModifiedDate":"2021-08-27"}],"authorContributionMap":{"Yttruire":88}},{"path":"src/main/java/duke/io/OutputFormatter.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yttruire"},"content":"package duke.io;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":3,"author":{"gitId":"Yttruire"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-27"},{"lineNumber":4,"author":{"gitId":"Yttruire"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-27"},{"lineNumber":5,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":6,"author":{"gitId":"Yttruire"},"content":"import duke.data.TaskList;","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"Yttruire"},"content":"/**","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"Yttruire"},"content":" * OutputFormatter class that formats strings for output to the user","lastModifiedDate":"2021-09-05"},{"lineNumber":10,"author":{"gitId":"Yttruire"},"content":" */","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"Yttruire"},"content":"public class OutputFormatter {","lastModifiedDate":"2021-09-03"},{"lineNumber":12,"author":{"gitId":"Yttruire"},"content":"    private OutputFormatter() {}","lastModifiedDate":"2021-09-03"},{"lineNumber":13,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-09-03"},{"lineNumber":15,"author":{"gitId":"Yttruire"},"content":"     * Returns a pre-defined welcome message","lastModifiedDate":"2021-09-03"},{"lineNumber":16,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-09-03"},{"lineNumber":17,"author":{"gitId":"Yttruire"},"content":"     * @return A fixed pre-defined welcome message","lastModifiedDate":"2021-09-03"},{"lineNumber":18,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-09-03"},{"lineNumber":19,"author":{"gitId":"Yttruire"},"content":"    public static String getWelcomeMessage() {","lastModifiedDate":"2021-09-03"},{"lineNumber":20,"author":{"gitId":"Yttruire"},"content":"        return \"Hello! I\u0027m duke.\\nWhat can I do for you?\";","lastModifiedDate":"2021-09-03"},{"lineNumber":21,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":22,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":23,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-08-27"},{"lineNumber":24,"author":{"gitId":"Yttruire"},"content":"     * Returns a message to the user in a specified format (Deprecated).","lastModifiedDate":"2021-09-03"},{"lineNumber":25,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":26,"author":{"gitId":"Yttruire"},"content":"     * @param message The message to be sent to the user","lastModifiedDate":"2021-08-27"},{"lineNumber":27,"author":{"gitId":"Yttruire"},"content":"     * @return A formatted string containing the message to be sent to the user","lastModifiedDate":"2021-09-03"},{"lineNumber":28,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-08-27"},{"lineNumber":29,"author":{"gitId":"Yttruire"},"content":"    public static String formatMessage(String message) {","lastModifiedDate":"2021-09-03"},{"lineNumber":30,"author":{"gitId":"Yttruire"},"content":"        return \"    ____________________________________________________________\\n    \"","lastModifiedDate":"2021-09-03"},{"lineNumber":31,"author":{"gitId":"Yttruire"},"content":"                + message.replace(\"\\n\", \"\\n    \")","lastModifiedDate":"2021-08-27"},{"lineNumber":32,"author":{"gitId":"Yttruire"},"content":"                + \"\\n    ____________________________________________________________\";","lastModifiedDate":"2021-09-03"},{"lineNumber":33,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":34,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":35,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":36,"author":{"gitId":"Yttruire"},"content":"     * Returns a string containing a message for in the case of an error in loading.","lastModifiedDate":"2021-09-03"},{"lineNumber":37,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-09-03"},{"lineNumber":38,"author":{"gitId":"Yttruire"},"content":"     * @return A string containing an error message for unable to load tasks from save file","lastModifiedDate":"2021-09-03"},{"lineNumber":39,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":40,"author":{"gitId":"Yttruire"},"content":"    public static String getLoadingErrorMessage() {","lastModifiedDate":"2021-09-03"},{"lineNumber":41,"author":{"gitId":"Yttruire"},"content":"        return \"Error! Cannot load tasks from save file!\";","lastModifiedDate":"2021-09-03"},{"lineNumber":42,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":43,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":44,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":45,"author":{"gitId":"Yttruire"},"content":"     * Returns a string containing the given list of tasks.","lastModifiedDate":"2021-09-03"},{"lineNumber":46,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":47,"author":{"gitId":"Yttruire"},"content":"     * @param taskList An object containing a list of tasks to be formatted and displayed to the user","lastModifiedDate":"2021-08-29"},{"lineNumber":48,"author":{"gitId":"Yttruire"},"content":"     * @return A string containing the list of given tasks","lastModifiedDate":"2021-09-03"},{"lineNumber":49,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":50,"author":{"gitId":"Yttruire"},"content":"    public static String formatTaskList(TaskList taskList) {","lastModifiedDate":"2021-09-03"},{"lineNumber":51,"author":{"gitId":"Yttruire"},"content":"        // Construct the string containing the list of items that have been stored in","lastModifiedDate":"2021-08-27"},{"lineNumber":52,"author":{"gitId":"Yttruire"},"content":"        // preparation to send to user","lastModifiedDate":"2021-08-27"},{"lineNumber":53,"author":{"gitId":"Yttruire"},"content":"        StringBuilder listMessage \u003d new StringBuilder(\"Here are the tasks in your list:\");","lastModifiedDate":"2021-08-27"},{"lineNumber":54,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":55,"author":{"gitId":"Yttruire"},"content":"        // Add all elements in the list","lastModifiedDate":"2021-08-27"},{"lineNumber":56,"author":{"gitId":"Yttruire"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); ++i) {","lastModifiedDate":"2021-08-27"},{"lineNumber":57,"author":{"gitId":"Yttruire"},"content":"            listMessage.append(\"\\n\").append(i + 1).append(\". \").append(taskList.get(i));","lastModifiedDate":"2021-08-27"},{"lineNumber":58,"author":{"gitId":"Yttruire"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":59,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":60,"author":{"gitId":"Yttruire"},"content":"        return listMessage.toString();","lastModifiedDate":"2021-09-03"},{"lineNumber":61,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":62,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":63,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":64,"author":{"gitId":"Yttruire"},"content":"     * Returns a string containing the given list of tasks.","lastModifiedDate":"2021-09-03"},{"lineNumber":65,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":66,"author":{"gitId":"Yttruire"},"content":"     * @param taskList An object containing a list of tasks to be formatted and displayed to the user","lastModifiedDate":"2021-09-03"},{"lineNumber":67,"author":{"gitId":"Yttruire"},"content":"     * @param date The date of the tasks we want to display to the user","lastModifiedDate":"2021-09-03"},{"lineNumber":68,"author":{"gitId":"Yttruire"},"content":"     * @return A string containing the list of given tasks","lastModifiedDate":"2021-09-03"},{"lineNumber":69,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":70,"author":{"gitId":"Yttruire"},"content":"    public static String formatTaskList(TaskList taskList, LocalDate date) {","lastModifiedDate":"2021-09-03"},{"lineNumber":71,"author":{"gitId":"Yttruire"},"content":"        // Construct the string containing the list of items that have been stored in","lastModifiedDate":"2021-08-27"},{"lineNumber":72,"author":{"gitId":"Yttruire"},"content":"        // preparation to send to user","lastModifiedDate":"2021-08-27"},{"lineNumber":73,"author":{"gitId":"Yttruire"},"content":"        StringBuilder listMessage \u003d new StringBuilder(\"Here are the tasks in your list that are due on \")","lastModifiedDate":"2021-08-27"},{"lineNumber":74,"author":{"gitId":"Yttruire"},"content":"                .append(date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"))).append(\":\");","lastModifiedDate":"2021-08-27"},{"lineNumber":75,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":76,"author":{"gitId":"Yttruire"},"content":"        // Add all elements in the list","lastModifiedDate":"2021-08-27"},{"lineNumber":77,"author":{"gitId":"Yttruire"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); ++i) {","lastModifiedDate":"2021-08-27"},{"lineNumber":78,"author":{"gitId":"Yttruire"},"content":"            listMessage.append(\"\\n\").append(i + 1).append(\". \").append(taskList.get(i));","lastModifiedDate":"2021-08-27"},{"lineNumber":79,"author":{"gitId":"Yttruire"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":80,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":81,"author":{"gitId":"Yttruire"},"content":"        return listMessage.toString();","lastModifiedDate":"2021-09-03"},{"lineNumber":82,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":83,"author":{"gitId":"Yttruire"},"content":"}","lastModifiedDate":"2021-08-27"}],"authorContributionMap":{"Yttruire":83}},{"path":"src/main/java/duke/io/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yttruire"},"content":"package duke.io;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":3,"author":{"gitId":"Yttruire"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"Yttruire"},"content":"import duke.Duke;","lastModifiedDate":"2021-09-14"},{"lineNumber":6,"author":{"gitId":"Yttruire"},"content":"import duke.DukeException;","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"Yttruire"},"content":"import duke.io.Command.CommandName;","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":9,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":10,"author":{"gitId":"Yttruire"},"content":"/**","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"Yttruire"},"content":" * Parser class intended to be used to parse user input to extract the correct command.","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"Yttruire"},"content":" */","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"Yttruire"},"content":"public class Parser {","lastModifiedDate":"2021-08-27"},{"lineNumber":14,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"Yttruire"},"content":"     * Retrieves the next line of input, disregarding extra whitespaces.","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"Yttruire"},"content":"     * @param sc The scanner object to retrieve the next line of input from","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"Yttruire"},"content":"     * @return The next line of input after trimming whitespace from both ends","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"Yttruire"},"content":"    public static String getInput(Scanner sc) {","lastModifiedDate":"2021-08-27"},{"lineNumber":22,"author":{"gitId":"Yttruire"},"content":"        return sc.nextLine().trim();","lastModifiedDate":"2021-08-27"},{"lineNumber":23,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":24,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":25,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"Yttruire"},"content":"     * Parses a line of given user input to extract the relevant/correct command.","lastModifiedDate":"2021-08-29"},{"lineNumber":27,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"Yttruire"},"content":"     * @param userInput A String containing a line of input to parse as a single command","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"Yttruire"},"content":"     * @return A Command object containing an identifier of the command and its arguments","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"Yttruire"},"content":"     * @throws DukeException When given input cannot be parsed successfully","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"Yttruire"},"content":"    public static Command parse(String userInput) throws DukeException {","lastModifiedDate":"2021-08-27"},{"lineNumber":33,"author":{"gitId":"Yttruire"},"content":"        if (userInput.equals(\"bye\")) {","lastModifiedDate":"2021-08-27"},{"lineNumber":34,"author":{"gitId":"Yttruire"},"content":"            // EXIT command","lastModifiedDate":"2021-08-27"},{"lineNumber":35,"author":{"gitId":"Yttruire"},"content":"            return parseBye(userInput);","lastModifiedDate":"2021-09-02"},{"lineNumber":36,"author":{"gitId":"Yttruire"},"content":"        } else if (userInput.equals(\"list\")) {","lastModifiedDate":"2021-08-27"},{"lineNumber":37,"author":{"gitId":"Yttruire"},"content":"            // LIST command","lastModifiedDate":"2021-08-27"},{"lineNumber":38,"author":{"gitId":"Yttruire"},"content":"            return parseList(userInput);","lastModifiedDate":"2021-09-02"},{"lineNumber":39,"author":{"gitId":"Yttruire"},"content":"        } else if (userInput.startsWith(\"done\")) {","lastModifiedDate":"2021-08-27"},{"lineNumber":40,"author":{"gitId":"Yttruire"},"content":"            // DONE command","lastModifiedDate":"2021-08-27"},{"lineNumber":41,"author":{"gitId":"Yttruire"},"content":"            return parseDone(userInput);","lastModifiedDate":"2021-09-02"},{"lineNumber":42,"author":{"gitId":"Yttruire"},"content":"        } else if (userInput.startsWith(\"delete\")) {","lastModifiedDate":"2021-08-27"},{"lineNumber":43,"author":{"gitId":"Yttruire"},"content":"            // DELETE command","lastModifiedDate":"2021-08-27"},{"lineNumber":44,"author":{"gitId":"Yttruire"},"content":"            return parseDelete(userInput);","lastModifiedDate":"2021-09-02"},{"lineNumber":45,"author":{"gitId":"Yttruire"},"content":"        } else if (userInput.startsWith(\"todo\")) {","lastModifiedDate":"2021-08-27"},{"lineNumber":46,"author":{"gitId":"Yttruire"},"content":"            // TODO command","lastModifiedDate":"2021-08-27"},{"lineNumber":47,"author":{"gitId":"Yttruire"},"content":"            return parseTodo(userInput);","lastModifiedDate":"2021-09-02"},{"lineNumber":48,"author":{"gitId":"Yttruire"},"content":"        } else if (userInput.startsWith(\"deadline\")) {","lastModifiedDate":"2021-09-02"},{"lineNumber":49,"author":{"gitId":"Yttruire"},"content":"            // DEADLINE command","lastModifiedDate":"2021-09-02"},{"lineNumber":50,"author":{"gitId":"Yttruire"},"content":"            return parseDeadline(userInput);","lastModifiedDate":"2021-09-02"},{"lineNumber":51,"author":{"gitId":"Yttruire"},"content":"        } else if (userInput.startsWith(\"event\")) {","lastModifiedDate":"2021-09-02"},{"lineNumber":52,"author":{"gitId":"Yttruire"},"content":"            // EVENT command","lastModifiedDate":"2021-09-02"},{"lineNumber":53,"author":{"gitId":"Yttruire"},"content":"            return parseEvent(userInput);","lastModifiedDate":"2021-09-02"},{"lineNumber":54,"author":{"gitId":"Yttruire"},"content":"        } else if (userInput.startsWith(\"dowithinperiod\")) {","lastModifiedDate":"2021-09-11"},{"lineNumber":55,"author":{"gitId":"Yttruire"},"content":"            // DOWITHINPERIOD command","lastModifiedDate":"2021-09-11"},{"lineNumber":56,"author":{"gitId":"Yttruire"},"content":"            return parseDoWithinPeriod(userInput);","lastModifiedDate":"2021-09-11"},{"lineNumber":57,"author":{"gitId":"Yttruire"},"content":"        }else if (userInput.startsWith(\"date\")) {","lastModifiedDate":"2021-09-02"},{"lineNumber":58,"author":{"gitId":"Yttruire"},"content":"            // DATE command","lastModifiedDate":"2021-09-02"},{"lineNumber":59,"author":{"gitId":"Yttruire"},"content":"            return parseDate(userInput);","lastModifiedDate":"2021-09-02"},{"lineNumber":60,"author":{"gitId":"Yttruire"},"content":"        } else if (userInput.startsWith(\"find\")) {","lastModifiedDate":"2021-09-02"},{"lineNumber":61,"author":{"gitId":"Yttruire"},"content":"            // FIND command","lastModifiedDate":"2021-09-02"},{"lineNumber":62,"author":{"gitId":"Yttruire"},"content":"            return parseFind(userInput);","lastModifiedDate":"2021-09-02"},{"lineNumber":63,"author":{"gitId":"Yttruire"},"content":"        } else {","lastModifiedDate":"2021-09-02"},{"lineNumber":64,"author":{"gitId":"Yttruire"},"content":"            // Unknown command","lastModifiedDate":"2021-09-02"},{"lineNumber":65,"author":{"gitId":"Yttruire"},"content":"            throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2021-09-14"},{"lineNumber":66,"author":{"gitId":"Yttruire"},"content":"        }","lastModifiedDate":"2021-09-02"},{"lineNumber":67,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":68,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":69,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":70,"author":{"gitId":"Yttruire"},"content":"     * Parses a string expected to be a line of command + its arguments for a BYE command","lastModifiedDate":"2021-09-02"},{"lineNumber":71,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":72,"author":{"gitId":"Yttruire"},"content":"     * @param userInput A line of characters from the user","lastModifiedDate":"2021-09-02"},{"lineNumber":73,"author":{"gitId":"Yttruire"},"content":"     * @return A command representing the BYE command","lastModifiedDate":"2021-09-02"},{"lineNumber":74,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":75,"author":{"gitId":"Yttruire"},"content":"    protected static Command parseBye(String userInput) {","lastModifiedDate":"2021-09-02"},{"lineNumber":76,"author":{"gitId":"Yttruire"},"content":"        return new Command(CommandName.BYE);","lastModifiedDate":"2021-09-02"},{"lineNumber":77,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":78,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":79,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":80,"author":{"gitId":"Yttruire"},"content":"     * Parses a string expected to be a line of command + its arguments for a LIST command","lastModifiedDate":"2021-09-02"},{"lineNumber":81,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":82,"author":{"gitId":"Yttruire"},"content":"     * @param userInput A line of characters from the user","lastModifiedDate":"2021-09-02"},{"lineNumber":83,"author":{"gitId":"Yttruire"},"content":"     * @return A command representing the LIST command","lastModifiedDate":"2021-09-02"},{"lineNumber":84,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":85,"author":{"gitId":"Yttruire"},"content":"    protected static Command parseList(String userInput) {","lastModifiedDate":"2021-09-02"},{"lineNumber":86,"author":{"gitId":"Yttruire"},"content":"        return new Command(CommandName.LIST);","lastModifiedDate":"2021-09-02"},{"lineNumber":87,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":88,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":89,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":90,"author":{"gitId":"Yttruire"},"content":"     * Parses a string expected to be a line of command + its arguments for a DONE command","lastModifiedDate":"2021-09-02"},{"lineNumber":91,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":92,"author":{"gitId":"Yttruire"},"content":"     * @param userInput A line of characters from the user","lastModifiedDate":"2021-09-02"},{"lineNumber":93,"author":{"gitId":"Yttruire"},"content":"     * @return A command representing the DONE command","lastModifiedDate":"2021-09-02"},{"lineNumber":94,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":95,"author":{"gitId":"Yttruire"},"content":"    protected static Command parseDone(String userInput) throws DukeException {","lastModifiedDate":"2021-09-14"},{"lineNumber":96,"author":{"gitId":"Yttruire"},"content":"        if (userInput.length() \u003d\u003d 4) {","lastModifiedDate":"2021-09-14"},{"lineNumber":97,"author":{"gitId":"Yttruire"},"content":"            throw new DukeException(\"A Done command should be accompanied by the index of the Task to mark as done.\");","lastModifiedDate":"2021-09-14"},{"lineNumber":98,"author":{"gitId":"Yttruire"},"content":"        } else if (!userInput.startsWith(\"done \")) {","lastModifiedDate":"2021-09-14"},{"lineNumber":99,"author":{"gitId":"Yttruire"},"content":"            // If it does not start with \"done \" after trimming, it is an invalid word","lastModifiedDate":"2021-09-14"},{"lineNumber":100,"author":{"gitId":"Yttruire"},"content":"            throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2021-09-14"},{"lineNumber":101,"author":{"gitId":"Yttruire"},"content":"        }","lastModifiedDate":"2021-09-14"},{"lineNumber":102,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":103,"author":{"gitId":"Yttruire"},"content":"        int index \u003d Integer.parseInt(userInput.substring(5));","lastModifiedDate":"2021-09-02"},{"lineNumber":104,"author":{"gitId":"Yttruire"},"content":"        return new Command(CommandName.DONE, new String[]{String.valueOf(index)});","lastModifiedDate":"2021-09-02"},{"lineNumber":105,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":106,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":107,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":108,"author":{"gitId":"Yttruire"},"content":"     * Parses a string expected to be a line of command + its arguments for a DELETE command","lastModifiedDate":"2021-09-02"},{"lineNumber":109,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":110,"author":{"gitId":"Yttruire"},"content":"     * @param userInput A line of characters from the user","lastModifiedDate":"2021-09-02"},{"lineNumber":111,"author":{"gitId":"Yttruire"},"content":"     * @return A command representing the DELETE command","lastModifiedDate":"2021-09-02"},{"lineNumber":112,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":113,"author":{"gitId":"Yttruire"},"content":"    protected static Command parseDelete(String userInput) throws DukeException {","lastModifiedDate":"2021-09-14"},{"lineNumber":114,"author":{"gitId":"Yttruire"},"content":"        if (userInput.length() \u003d\u003d 6) {","lastModifiedDate":"2021-09-14"},{"lineNumber":115,"author":{"gitId":"Yttruire"},"content":"            throw new DukeException(\"A Delete command should be accompanied by the index of the Task to delete.\");","lastModifiedDate":"2021-09-14"},{"lineNumber":116,"author":{"gitId":"Yttruire"},"content":"        } else if (!userInput.startsWith(\"delete \")) {","lastModifiedDate":"2021-09-14"},{"lineNumber":117,"author":{"gitId":"Yttruire"},"content":"            // If it does not start with \"done \" after trimming, it is an invalid word","lastModifiedDate":"2021-09-14"},{"lineNumber":118,"author":{"gitId":"Yttruire"},"content":"            throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2021-09-14"},{"lineNumber":119,"author":{"gitId":"Yttruire"},"content":"        }","lastModifiedDate":"2021-09-14"},{"lineNumber":120,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":121,"author":{"gitId":"Yttruire"},"content":"        int index \u003d Integer.parseInt(userInput.substring(7));","lastModifiedDate":"2021-09-02"},{"lineNumber":122,"author":{"gitId":"Yttruire"},"content":"        return new Command(CommandName.DELETE, new String[]{String.valueOf(index)});","lastModifiedDate":"2021-09-02"},{"lineNumber":123,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":124,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":125,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":126,"author":{"gitId":"Yttruire"},"content":"     * Parses a string expected to be a line of command + its arguments for a TODO command","lastModifiedDate":"2021-09-02"},{"lineNumber":127,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":128,"author":{"gitId":"Yttruire"},"content":"     * @param userInput A line of characters from the user","lastModifiedDate":"2021-09-02"},{"lineNumber":129,"author":{"gitId":"Yttruire"},"content":"     * @return A command representing the TODO command (If the input is valid)","lastModifiedDate":"2021-09-02"},{"lineNumber":130,"author":{"gitId":"Yttruire"},"content":"     * @throws DukeException An exception describing why the TODO command was unable to be parsed","lastModifiedDate":"2021-09-02"},{"lineNumber":131,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":132,"author":{"gitId":"Yttruire"},"content":"    protected static Command parseTodo(String userInput) throws DukeException {","lastModifiedDate":"2021-09-02"},{"lineNumber":133,"author":{"gitId":"Yttruire"},"content":"        // If no arguments provided","lastModifiedDate":"2021-08-27"},{"lineNumber":134,"author":{"gitId":"Yttruire"},"content":"        if (userInput.length() \u003d\u003d 4) {","lastModifiedDate":"2021-08-27"},{"lineNumber":135,"author":{"gitId":"Yttruire"},"content":"            throw new DukeException(\"The description of a todo cannot be empty.\");","lastModifiedDate":"2021-08-27"},{"lineNumber":136,"author":{"gitId":"Yttruire"},"content":"        } else if (!userInput.startsWith(\"todo \")) {","lastModifiedDate":"2021-08-27"},{"lineNumber":137,"author":{"gitId":"Yttruire"},"content":"            // If it does not start with \"todo \" after trimming, it is an invalid word","lastModifiedDate":"2021-08-27"},{"lineNumber":138,"author":{"gitId":"Yttruire"},"content":"            throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2021-08-27"},{"lineNumber":139,"author":{"gitId":"Yttruire"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":140,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":141,"author":{"gitId":"Yttruire"},"content":"        // Command name + description only","lastModifiedDate":"2021-08-27"},{"lineNumber":142,"author":{"gitId":"Yttruire"},"content":"        return new Command(CommandName.TODO, new String[]{userInput.substring(5).trim()});","lastModifiedDate":"2021-08-27"},{"lineNumber":143,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":144,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":145,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":146,"author":{"gitId":"Yttruire"},"content":"     * Parses a string expected to be a line of command + its arguments for a DEADLINE command","lastModifiedDate":"2021-09-02"},{"lineNumber":147,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":148,"author":{"gitId":"Yttruire"},"content":"     * @param userInput A line of characters from the user","lastModifiedDate":"2021-09-02"},{"lineNumber":149,"author":{"gitId":"Yttruire"},"content":"     * @return A command representing the DEADLINE command (If the input is valid)","lastModifiedDate":"2021-09-02"},{"lineNumber":150,"author":{"gitId":"Yttruire"},"content":"     * @throws DukeException An exception describing why the DEADLINE command was unable to be parsed","lastModifiedDate":"2021-09-02"},{"lineNumber":151,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":152,"author":{"gitId":"Yttruire"},"content":"    protected static Command parseDeadline(String userInput) throws DukeException {","lastModifiedDate":"2021-09-02"},{"lineNumber":153,"author":{"gitId":"Yttruire"},"content":"        // If no arguments provided","lastModifiedDate":"2021-08-27"},{"lineNumber":154,"author":{"gitId":"Yttruire"},"content":"        if (userInput.length() \u003d\u003d 8) {","lastModifiedDate":"2021-08-27"},{"lineNumber":155,"author":{"gitId":"Yttruire"},"content":"            throw new DukeException(\"The description of a deadline cannot be empty.\");","lastModifiedDate":"2021-08-27"},{"lineNumber":156,"author":{"gitId":"Yttruire"},"content":"        } else if (!userInput.startsWith(\"deadline \")) {","lastModifiedDate":"2021-08-27"},{"lineNumber":157,"author":{"gitId":"Yttruire"},"content":"            // If it does not start with \"deadline \" after trimming, it is an invalid word","lastModifiedDate":"2021-08-27"},{"lineNumber":158,"author":{"gitId":"Yttruire"},"content":"            throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2021-08-27"},{"lineNumber":159,"author":{"gitId":"Yttruire"},"content":"        } else if (!userInput.contains(\"/by \")) {","lastModifiedDate":"2021-08-27"},{"lineNumber":160,"author":{"gitId":"Yttruire"},"content":"            throw new DukeException(\"A deadline must contain a deadline indicated after the /by command\");","lastModifiedDate":"2021-09-02"},{"lineNumber":161,"author":{"gitId":"Yttruire"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":162,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":163,"author":{"gitId":"Yttruire"},"content":"        String description \u003d userInput.substring(9, userInput.indexOf(\"/by\")).trim();","lastModifiedDate":"2021-08-27"},{"lineNumber":164,"author":{"gitId":"Yttruire"},"content":"        String deadline \u003d userInput.substring(userInput.indexOf(\"/by\")).trim().substring(4);","lastModifiedDate":"2021-09-11"},{"lineNumber":165,"author":{"gitId":"Yttruire"},"content":"        if (description.length() \u003d\u003d 0) {","lastModifiedDate":"2021-08-27"},{"lineNumber":166,"author":{"gitId":"Yttruire"},"content":"            throw new DukeException(\"The description of a deadline cannot be empty\");","lastModifiedDate":"2021-08-27"},{"lineNumber":167,"author":{"gitId":"Yttruire"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":168,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":169,"author":{"gitId":"Yttruire"},"content":"        // Command name + description + deadline","lastModifiedDate":"2021-08-27"},{"lineNumber":170,"author":{"gitId":"Yttruire"},"content":"        return new Command(CommandName.DEADLINE, new String[]{description, deadline});","lastModifiedDate":"2021-09-11"},{"lineNumber":171,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":172,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":173,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":174,"author":{"gitId":"Yttruire"},"content":"     * Parses a string expected to be a line of command + its arguments for an EVENT command","lastModifiedDate":"2021-09-02"},{"lineNumber":175,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":176,"author":{"gitId":"Yttruire"},"content":"     * @param userInput A line of characters from the user","lastModifiedDate":"2021-09-02"},{"lineNumber":177,"author":{"gitId":"Yttruire"},"content":"     * @return A command representing the EVENT command (If the input is valid)","lastModifiedDate":"2021-09-02"},{"lineNumber":178,"author":{"gitId":"Yttruire"},"content":"     * @throws DukeException An exception describing why the EVENT command was unable to be parsed","lastModifiedDate":"2021-09-02"},{"lineNumber":179,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":180,"author":{"gitId":"Yttruire"},"content":"    protected static Command parseEvent(String userInput) throws DukeException {","lastModifiedDate":"2021-09-02"},{"lineNumber":181,"author":{"gitId":"Yttruire"},"content":"        // If no arguments provided","lastModifiedDate":"2021-08-27"},{"lineNumber":182,"author":{"gitId":"Yttruire"},"content":"        if (userInput.length() \u003d\u003d 5) {","lastModifiedDate":"2021-08-27"},{"lineNumber":183,"author":{"gitId":"Yttruire"},"content":"            throw new DukeException(\"The description of a event cannot be empty.\");","lastModifiedDate":"2021-08-27"},{"lineNumber":184,"author":{"gitId":"Yttruire"},"content":"        } else if (!userInput.startsWith(\"event \")) {","lastModifiedDate":"2021-08-27"},{"lineNumber":185,"author":{"gitId":"Yttruire"},"content":"            // If it does not start with \"deadline \" after trimming, it is an invalid word","lastModifiedDate":"2021-08-27"},{"lineNumber":186,"author":{"gitId":"Yttruire"},"content":"            throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2021-08-27"},{"lineNumber":187,"author":{"gitId":"Yttruire"},"content":"        } else if (!userInput.contains(\"/at \")) {","lastModifiedDate":"2021-08-27"},{"lineNumber":188,"author":{"gitId":"Yttruire"},"content":"            throw new DukeException(\"An event must contain a datetime indicated after the /at command\");","lastModifiedDate":"2021-09-02"},{"lineNumber":189,"author":{"gitId":"Yttruire"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":190,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":191,"author":{"gitId":"Yttruire"},"content":"        String description \u003d userInput.substring(6, userInput.indexOf(\"/at\")).trim();","lastModifiedDate":"2021-09-11"},{"lineNumber":192,"author":{"gitId":"Yttruire"},"content":"        String dateTime \u003d userInput.substring(userInput.indexOf(\"/at\")).trim().substring(4);","lastModifiedDate":"2021-09-11"},{"lineNumber":193,"author":{"gitId":"Yttruire"},"content":"        if (description.length() \u003d\u003d 0) {","lastModifiedDate":"2021-08-27"},{"lineNumber":194,"author":{"gitId":"Yttruire"},"content":"            throw new DukeException(\"The description of an event cannot be empty\");","lastModifiedDate":"2021-08-27"},{"lineNumber":195,"author":{"gitId":"Yttruire"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":196,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":197,"author":{"gitId":"Yttruire"},"content":"        // Command name + description + dateTime","lastModifiedDate":"2021-08-27"},{"lineNumber":198,"author":{"gitId":"Yttruire"},"content":"        return new Command(CommandName.EVENT, new String[]{description, dateTime});","lastModifiedDate":"2021-09-11"},{"lineNumber":199,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":200,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":201,"author":{"gitId":"Yttruire"},"content":"    protected static Command parseDoWithinPeriod(String userInput) throws DukeException {","lastModifiedDate":"2021-09-11"},{"lineNumber":202,"author":{"gitId":"Yttruire"},"content":"        if (userInput.length() \u003d\u003d 14) {","lastModifiedDate":"2021-09-11"},{"lineNumber":203,"author":{"gitId":"Yttruire"},"content":"            throw new DukeException(\"A start and end date must be provided to specify the period to complete the task\");","lastModifiedDate":"2021-09-11"},{"lineNumber":204,"author":{"gitId":"Yttruire"},"content":"        } else if(!userInput.startsWith(\"dowithinperiod \")) {","lastModifiedDate":"2021-09-11"},{"lineNumber":205,"author":{"gitId":"Yttruire"},"content":"            // If it does not start with \"dowithinperiod \" after trimming, it is an invalid command","lastModifiedDate":"2021-09-11"},{"lineNumber":206,"author":{"gitId":"Yttruire"},"content":"            throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2021-09-11"},{"lineNumber":207,"author":{"gitId":"Yttruire"},"content":"        } else if (!userInput.contains(\"/between \")) {","lastModifiedDate":"2021-09-11"},{"lineNumber":208,"author":{"gitId":"Yttruire"},"content":"            throw new DukeException(\"A DoWithinPeriodTask must contain a start of time period indicated after the /between command\");","lastModifiedDate":"2021-09-11"},{"lineNumber":209,"author":{"gitId":"Yttruire"},"content":"        } else if (!userInput.contains(\"/and \")) {","lastModifiedDate":"2021-09-11"},{"lineNumber":210,"author":{"gitId":"Yttruire"},"content":"            throw new DukeException(\"A DoWithinPeriodTask must contains an end of time period indicated after the /and command\");","lastModifiedDate":"2021-09-11"},{"lineNumber":211,"author":{"gitId":"Yttruire"},"content":"        }","lastModifiedDate":"2021-09-11"},{"lineNumber":212,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":213,"author":{"gitId":"Yttruire"},"content":"        String description \u003d userInput.substring(15, userInput.indexOf(\"/between\")).trim();","lastModifiedDate":"2021-09-11"},{"lineNumber":214,"author":{"gitId":"Yttruire"},"content":"        String startOfPeriod \u003d userInput.substring(userInput.indexOf(\"/between\"), userInput.indexOf(\"/and\")).substring(9).trim();","lastModifiedDate":"2021-09-11"},{"lineNumber":215,"author":{"gitId":"Yttruire"},"content":"        String endOfPeriod \u003d userInput.substring(userInput.indexOf(\"/and\")).substring(5).trim();","lastModifiedDate":"2021-09-11"},{"lineNumber":216,"author":{"gitId":"Yttruire"},"content":"        if (description.length() \u003d\u003d 0) {","lastModifiedDate":"2021-09-11"},{"lineNumber":217,"author":{"gitId":"Yttruire"},"content":"            throw new DukeException(\"The description of an event cannot be empty\");","lastModifiedDate":"2021-09-11"},{"lineNumber":218,"author":{"gitId":"Yttruire"},"content":"        }","lastModifiedDate":"2021-09-11"},{"lineNumber":219,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":220,"author":{"gitId":"Yttruire"},"content":"        // Command name + description + startOfPeriod + endOfPeriod","lastModifiedDate":"2021-09-11"},{"lineNumber":221,"author":{"gitId":"Yttruire"},"content":"        return new Command(CommandName.DOWITHINPERIOD, new String[]{description, startOfPeriod, endOfPeriod});","lastModifiedDate":"2021-09-11"},{"lineNumber":222,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":223,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":224,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":225,"author":{"gitId":"Yttruire"},"content":"     * Parses a string expected to be a line of command + its arguments for a DATE command","lastModifiedDate":"2021-09-02"},{"lineNumber":226,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":227,"author":{"gitId":"Yttruire"},"content":"     * @param userInput A line of characters from the user","lastModifiedDate":"2021-09-02"},{"lineNumber":228,"author":{"gitId":"Yttruire"},"content":"     * @return A command representing the DATE command (If the input is valid)","lastModifiedDate":"2021-09-02"},{"lineNumber":229,"author":{"gitId":"Yttruire"},"content":"     * @throws DukeException An exception describing why the DATE command was unable to be parsed","lastModifiedDate":"2021-09-02"},{"lineNumber":230,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":231,"author":{"gitId":"Yttruire"},"content":"    protected static Command parseDate(String userInput) throws DukeException {","lastModifiedDate":"2021-09-02"},{"lineNumber":232,"author":{"gitId":"Yttruire"},"content":"        if (userInput.length() \u003d\u003d 4) {","lastModifiedDate":"2021-08-27"},{"lineNumber":233,"author":{"gitId":"Yttruire"},"content":"            throw new DukeException(","lastModifiedDate":"2021-08-27"},{"lineNumber":234,"author":{"gitId":"Yttruire"},"content":"                    \"A date must be provided to find events and deadlines occurring on that day\");","lastModifiedDate":"2021-08-27"},{"lineNumber":235,"author":{"gitId":"Yttruire"},"content":"        } else if (!userInput.startsWith(\"date \")) {","lastModifiedDate":"2021-08-27"},{"lineNumber":236,"author":{"gitId":"Yttruire"},"content":"            // If it does not start with \"date \" after trimming, it is an invalid command","lastModifiedDate":"2021-08-27"},{"lineNumber":237,"author":{"gitId":"Yttruire"},"content":"            throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2021-08-27"},{"lineNumber":238,"author":{"gitId":"Yttruire"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":239,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":240,"author":{"gitId":"Yttruire"},"content":"        // Command name + date only","lastModifiedDate":"2021-08-27"},{"lineNumber":241,"author":{"gitId":"Yttruire"},"content":"        return new Command(CommandName.DATE, new String[]{userInput.substring(5)});","lastModifiedDate":"2021-08-27"},{"lineNumber":242,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":243,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":244,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":245,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":246,"author":{"gitId":"Yttruire"},"content":"     * Parses a string expected to be a line of command + its arguments for a FIND command","lastModifiedDate":"2021-09-02"},{"lineNumber":247,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":248,"author":{"gitId":"Yttruire"},"content":"     * @param userInput A line of characters from the user","lastModifiedDate":"2021-09-02"},{"lineNumber":249,"author":{"gitId":"Yttruire"},"content":"     * @return A command representing the FIND command (If the input is valid)","lastModifiedDate":"2021-09-02"},{"lineNumber":250,"author":{"gitId":"Yttruire"},"content":"     * @throws DukeException An exception describing why the FIND command was unable to be parsed","lastModifiedDate":"2021-09-02"},{"lineNumber":251,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":252,"author":{"gitId":"Yttruire"},"content":"    protected static Command parseFind(String userInput) throws DukeException {","lastModifiedDate":"2021-09-02"},{"lineNumber":253,"author":{"gitId":"Yttruire"},"content":"        if (userInput.length() \u003d\u003d 4) {","lastModifiedDate":"2021-08-29"},{"lineNumber":254,"author":{"gitId":"Yttruire"},"content":"            throw new DukeException(\"A keyword must be input for the FIND command to search through your tasks\");","lastModifiedDate":"2021-08-29"},{"lineNumber":255,"author":{"gitId":"Yttruire"},"content":"        } else if (!userInput.startsWith(\"find \")) {","lastModifiedDate":"2021-08-29"},{"lineNumber":256,"author":{"gitId":"Yttruire"},"content":"            // If it does not start with \"find \" after trimming, it is an invalid command","lastModifiedDate":"2021-08-29"},{"lineNumber":257,"author":{"gitId":"Yttruire"},"content":"            throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2021-08-29"},{"lineNumber":258,"author":{"gitId":"Yttruire"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":259,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":260,"author":{"gitId":"Yttruire"},"content":"        return new Command(CommandName.FIND, new String[]{userInput.substring(5)});","lastModifiedDate":"2021-08-29"},{"lineNumber":261,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":262,"author":{"gitId":"Yttruire"},"content":"}","lastModifiedDate":"2021-08-27"}],"authorContributionMap":{"Yttruire":262}},{"path":"src/main/java/duke/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yttruire"},"content":"package duke.tasks;","lastModifiedDate":"2021-08-27"},{"lineNumber":2,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":3,"author":{"gitId":"Yttruire"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"Yttruire"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"Yttruire"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"Yttruire"},"content":"    protected LocalDate deadline;","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"Yttruire"},"content":"     * Constructs a Deadline Task with given description, deadline date \u0026 time and uncompleted flag by default.","lastModifiedDate":"2021-09-14"},{"lineNumber":11,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"Yttruire"},"content":"     * @param description Description of the deadline","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"Yttruire"},"content":"     * @param deadline Date \u0026 time of the due date of this Deadline Task","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"Yttruire"},"content":"    public Deadline(String description, LocalDate deadline) {","lastModifiedDate":"2021-08-27"},{"lineNumber":16,"author":{"gitId":"Yttruire"},"content":"        super(description);","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"Yttruire"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2021-08-27"},{"lineNumber":18,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":19,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":20,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"Yttruire"},"content":"     * Constructs a Deadline Task with given description, deadline date \u0026 time and completion flag.","lastModifiedDate":"2021-09-14"},{"lineNumber":22,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"Yttruire"},"content":"     * @param description Description of the deadline","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"Yttruire"},"content":"     * @param deadline Date \u0026 time of the due date of this Deadline Task","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"Yttruire"},"content":"     * @param isDone Completed flag for this Deadline","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":27,"author":{"gitId":"Yttruire"},"content":"    public Deadline(String description, LocalDate deadline, boolean isDone) {","lastModifiedDate":"2021-08-27"},{"lineNumber":28,"author":{"gitId":"Yttruire"},"content":"        super(description, isDone);","lastModifiedDate":"2021-08-27"},{"lineNumber":29,"author":{"gitId":"Yttruire"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2021-08-27"},{"lineNumber":30,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":33,"author":{"gitId":"Yttruire"},"content":"     * Returns true if the Task has a due date that is due on the given date.","lastModifiedDate":"2021-08-29"},{"lineNumber":34,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":35,"author":{"gitId":"Yttruire"},"content":"     * @param dueDate The date to check if this task is on the same deadline/due date","lastModifiedDate":"2021-08-29"},{"lineNumber":36,"author":{"gitId":"Yttruire"},"content":"     * @return Returns true if this task is due the same date as the given one","lastModifiedDate":"2021-08-29"},{"lineNumber":37,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":38,"author":{"gitId":"Yttruire"},"content":"    @Override","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"Yttruire"},"content":"    public boolean isDue(LocalDate dueDate) {","lastModifiedDate":"2021-08-29"},{"lineNumber":40,"author":{"gitId":"Yttruire"},"content":"        return dueDate.isEqual(this.deadline);","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":42,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":43,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":44,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":45,"author":{"gitId":"Yttruire"},"content":"     * Returns a formatted version with delimiters of this task for saving to file.","lastModifiedDate":"2021-08-29"},{"lineNumber":46,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":47,"author":{"gitId":"Yttruire"},"content":"     * @return A formatted String representing the data stored in the task","lastModifiedDate":"2021-08-29"},{"lineNumber":48,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":49,"author":{"gitId":"Yttruire"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"Yttruire"},"content":"    public String getFormattedData() {","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"Yttruire"},"content":"        return super.getFormattedData() + \"|\" + this.deadline;","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":55,"author":{"gitId":"Yttruire"},"content":"     * Returns a letter identifying the Task as a Todo.","lastModifiedDate":"2021-08-29"},{"lineNumber":56,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":57,"author":{"gitId":"Yttruire"},"content":"     * @return A character identifying the Task","lastModifiedDate":"2021-08-29"},{"lineNumber":58,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":59,"author":{"gitId":"Yttruire"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"Yttruire"},"content":"    public String getTaskIdentifier() {","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"Yttruire"},"content":"        return \"D\";","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":65,"author":{"gitId":"Yttruire"},"content":"     * Returns a string representation of the Todo Task.","lastModifiedDate":"2021-08-29"},{"lineNumber":66,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":67,"author":{"gitId":"Yttruire"},"content":"     * @return String representing the Todo Task","lastModifiedDate":"2021-08-29"},{"lineNumber":68,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":69,"author":{"gitId":"Yttruire"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":70,"author":{"gitId":"Yttruire"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":71,"author":{"gitId":"Yttruire"},"content":"        return \"[D][\" + getStatusIcon() + \"] \"","lastModifiedDate":"2021-09-02"},{"lineNumber":72,"author":{"gitId":"Yttruire"},"content":"                + this.description + \" (by: \"","lastModifiedDate":"2021-09-02"},{"lineNumber":73,"author":{"gitId":"Yttruire"},"content":"                + this.deadline.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"))","lastModifiedDate":"2021-09-02"},{"lineNumber":74,"author":{"gitId":"Yttruire"},"content":"                + \")\";","lastModifiedDate":"2021-09-02"},{"lineNumber":75,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":76,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":77,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":78,"author":{"gitId":"Yttruire"},"content":"     * Does a deep comparison of this object to another object.","lastModifiedDate":"2021-08-29"},{"lineNumber":79,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":80,"author":{"gitId":"Yttruire"},"content":"     * @param otherObj The other object to be compared to","lastModifiedDate":"2021-08-29"},{"lineNumber":81,"author":{"gitId":"Yttruire"},"content":"     * @return Returns true iff the two objects are of same type and same value in every field","lastModifiedDate":"2021-08-29"},{"lineNumber":82,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":83,"author":{"gitId":"Yttruire"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":84,"author":{"gitId":"Yttruire"},"content":"    public boolean equals(Object otherObj) {","lastModifiedDate":"2021-08-29"},{"lineNumber":85,"author":{"gitId":"Yttruire"},"content":"        if (!(otherObj instanceof Deadline)) {","lastModifiedDate":"2021-08-29"},{"lineNumber":86,"author":{"gitId":"Yttruire"},"content":"            return false;","lastModifiedDate":"2021-08-29"},{"lineNumber":87,"author":{"gitId":"Yttruire"},"content":"        } else {","lastModifiedDate":"2021-08-29"},{"lineNumber":88,"author":{"gitId":"Yttruire"},"content":"            final Deadline otherDeadline \u003d (Deadline) otherObj;","lastModifiedDate":"2021-08-29"},{"lineNumber":89,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":90,"author":{"gitId":"Yttruire"},"content":"            if (this.isDone !\u003d otherDeadline.isDone) {","lastModifiedDate":"2021-08-29"},{"lineNumber":91,"author":{"gitId":"Yttruire"},"content":"                return false;","lastModifiedDate":"2021-08-29"},{"lineNumber":92,"author":{"gitId":"Yttruire"},"content":"            } else if (!this.description.equals(otherDeadline.description)) {","lastModifiedDate":"2021-08-29"},{"lineNumber":93,"author":{"gitId":"Yttruire"},"content":"                return false;","lastModifiedDate":"2021-08-29"},{"lineNumber":94,"author":{"gitId":"Yttruire"},"content":"            } else {","lastModifiedDate":"2021-09-02"},{"lineNumber":95,"author":{"gitId":"Yttruire"},"content":"                return this.deadline.equals(otherDeadline.deadline);","lastModifiedDate":"2021-09-02"},{"lineNumber":96,"author":{"gitId":"Yttruire"},"content":"            }","lastModifiedDate":"2021-09-02"},{"lineNumber":97,"author":{"gitId":"Yttruire"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":98,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":99,"author":{"gitId":"Yttruire"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"Yttruire":99}},{"path":"src/main/java/duke/tasks/DoWithinPeriodTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yttruire"},"content":"package duke.tasks;","lastModifiedDate":"2021-09-11"},{"lineNumber":2,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":3,"author":{"gitId":"Yttruire"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-11"},{"lineNumber":4,"author":{"gitId":"Yttruire"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-09-11"},{"lineNumber":5,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":6,"author":{"gitId":"Yttruire"},"content":"public class DoWithinPeriodTask extends Task {","lastModifiedDate":"2021-09-11"},{"lineNumber":7,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":8,"author":{"gitId":"Yttruire"},"content":"    protected LocalDate startOfPeriod;","lastModifiedDate":"2021-09-11"},{"lineNumber":9,"author":{"gitId":"Yttruire"},"content":"    protected LocalDate endOfPeriod;","lastModifiedDate":"2021-09-11"},{"lineNumber":10,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":11,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-09-11"},{"lineNumber":12,"author":{"gitId":"Yttruire"},"content":"     * Constructs a new DoWithinPeriodTask with description, startOfperiod, endOfPeriod and default isDone is false.","lastModifiedDate":"2021-09-14"},{"lineNumber":13,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-09-11"},{"lineNumber":14,"author":{"gitId":"Yttruire"},"content":"     * @param description Describes the Task","lastModifiedDate":"2021-09-11"},{"lineNumber":15,"author":{"gitId":"Yttruire"},"content":"     * @param startOfPeriod The start of the time period that the task is supposed to be done","lastModifiedDate":"2021-09-11"},{"lineNumber":16,"author":{"gitId":"Yttruire"},"content":"     * @param endOfPeriod The end of the time period that the task is supposed to be done","lastModifiedDate":"2021-09-11"},{"lineNumber":17,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-09-11"},{"lineNumber":18,"author":{"gitId":"Yttruire"},"content":"    public DoWithinPeriodTask(String description, LocalDate startOfPeriod, LocalDate endOfPeriod) {","lastModifiedDate":"2021-09-11"},{"lineNumber":19,"author":{"gitId":"Yttruire"},"content":"        super(description);","lastModifiedDate":"2021-09-11"},{"lineNumber":20,"author":{"gitId":"Yttruire"},"content":"        this.startOfPeriod \u003d startOfPeriod;","lastModifiedDate":"2021-09-11"},{"lineNumber":21,"author":{"gitId":"Yttruire"},"content":"        this.endOfPeriod \u003d endOfPeriod;","lastModifiedDate":"2021-09-11"},{"lineNumber":22,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":23,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":24,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-09-11"},{"lineNumber":25,"author":{"gitId":"Yttruire"},"content":"     * Constructs a new DoWithinPeriodTask with description, startOfPeriod, endOfPeriod and given isDone boolean.","lastModifiedDate":"2021-09-14"},{"lineNumber":26,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-09-11"},{"lineNumber":27,"author":{"gitId":"Yttruire"},"content":"     * @param description Describes the Task","lastModifiedDate":"2021-09-11"},{"lineNumber":28,"author":{"gitId":"Yttruire"},"content":"     * @param startOfPeriod The start of the time period that the task is supposed to be done","lastModifiedDate":"2021-09-11"},{"lineNumber":29,"author":{"gitId":"Yttruire"},"content":"     * @param endOfPeriod The end of the time period that the task is supposed to be done","lastModifiedDate":"2021-09-11"},{"lineNumber":30,"author":{"gitId":"Yttruire"},"content":"     * @param isDone Is the task already done","lastModifiedDate":"2021-09-11"},{"lineNumber":31,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-09-11"},{"lineNumber":32,"author":{"gitId":"Yttruire"},"content":"    public DoWithinPeriodTask(String description, LocalDate startOfPeriod, LocalDate endOfPeriod, boolean isDone) {","lastModifiedDate":"2021-09-11"},{"lineNumber":33,"author":{"gitId":"Yttruire"},"content":"        super(description, isDone);","lastModifiedDate":"2021-09-11"},{"lineNumber":34,"author":{"gitId":"Yttruire"},"content":"        this.startOfPeriod \u003d startOfPeriod;","lastModifiedDate":"2021-09-11"},{"lineNumber":35,"author":{"gitId":"Yttruire"},"content":"        this.endOfPeriod \u003d endOfPeriod;","lastModifiedDate":"2021-09-11"},{"lineNumber":36,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":37,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":38,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-09-11"},{"lineNumber":39,"author":{"gitId":"Yttruire"},"content":"     * Returns true if the Task is due on the given date (Last day to complete task).","lastModifiedDate":"2021-09-11"},{"lineNumber":40,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-09-11"},{"lineNumber":41,"author":{"gitId":"Yttruire"},"content":"     * @param dueDate The date to check if this task is on the last day that the task should be completed","lastModifiedDate":"2021-09-11"},{"lineNumber":42,"author":{"gitId":"Yttruire"},"content":"     * @return Returns true if this task is due the same date as the given one","lastModifiedDate":"2021-09-11"},{"lineNumber":43,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-09-11"},{"lineNumber":44,"author":{"gitId":"Yttruire"},"content":"    @Override","lastModifiedDate":"2021-09-11"},{"lineNumber":45,"author":{"gitId":"Yttruire"},"content":"    public boolean isDue(LocalDate dueDate) {","lastModifiedDate":"2021-09-11"},{"lineNumber":46,"author":{"gitId":"Yttruire"},"content":"        return dueDate.isEqual(this.endOfPeriod);","lastModifiedDate":"2021-09-11"},{"lineNumber":47,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":48,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":49,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":50,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":51,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-09-11"},{"lineNumber":52,"author":{"gitId":"Yttruire"},"content":"     * Returns a formatted version with delimiters of this task for saving to file.","lastModifiedDate":"2021-09-11"},{"lineNumber":53,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-09-11"},{"lineNumber":54,"author":{"gitId":"Yttruire"},"content":"     * @return A formatted String representing the data stored in the task","lastModifiedDate":"2021-09-11"},{"lineNumber":55,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-09-11"},{"lineNumber":56,"author":{"gitId":"Yttruire"},"content":"    @Override","lastModifiedDate":"2021-09-11"},{"lineNumber":57,"author":{"gitId":"Yttruire"},"content":"    public String getFormattedData() {","lastModifiedDate":"2021-09-11"},{"lineNumber":58,"author":{"gitId":"Yttruire"},"content":"        return super.getFormattedData() + \"|\" + this.startOfPeriod + \"|\" + this.endOfPeriod;","lastModifiedDate":"2021-09-11"},{"lineNumber":59,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":60,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":61,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":62,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-09-11"},{"lineNumber":63,"author":{"gitId":"Yttruire"},"content":"     * Returns a letter identifying the Task as a DoWithinPeriodTask.","lastModifiedDate":"2021-09-11"},{"lineNumber":64,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-09-11"},{"lineNumber":65,"author":{"gitId":"Yttruire"},"content":"     * @return A character identifying the Task","lastModifiedDate":"2021-09-11"},{"lineNumber":66,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-09-11"},{"lineNumber":67,"author":{"gitId":"Yttruire"},"content":"    @Override","lastModifiedDate":"2021-09-11"},{"lineNumber":68,"author":{"gitId":"Yttruire"},"content":"    public String getTaskIdentifier() {","lastModifiedDate":"2021-09-11"},{"lineNumber":69,"author":{"gitId":"Yttruire"},"content":"        return \"P\";","lastModifiedDate":"2021-09-11"},{"lineNumber":70,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":71,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":72,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-09-11"},{"lineNumber":73,"author":{"gitId":"Yttruire"},"content":"     * Returns a string representation of the DoWithinPeriodTask Task.","lastModifiedDate":"2021-09-11"},{"lineNumber":74,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-09-11"},{"lineNumber":75,"author":{"gitId":"Yttruire"},"content":"     * @return String representing the DoWithinPeriodTask Task","lastModifiedDate":"2021-09-11"},{"lineNumber":76,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-09-11"},{"lineNumber":77,"author":{"gitId":"Yttruire"},"content":"    @Override","lastModifiedDate":"2021-09-11"},{"lineNumber":78,"author":{"gitId":"Yttruire"},"content":"    public String toString() {","lastModifiedDate":"2021-09-11"},{"lineNumber":79,"author":{"gitId":"Yttruire"},"content":"        return \"[P][\" + getStatusIcon() + \"] \"","lastModifiedDate":"2021-09-11"},{"lineNumber":80,"author":{"gitId":"Yttruire"},"content":"                + this.description + \" (between: \"","lastModifiedDate":"2021-09-11"},{"lineNumber":81,"author":{"gitId":"Yttruire"},"content":"                + this.startOfPeriod.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \" and \"","lastModifiedDate":"2021-09-11"},{"lineNumber":82,"author":{"gitId":"Yttruire"},"content":"                + this.endOfPeriod.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";","lastModifiedDate":"2021-09-11"},{"lineNumber":83,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":84,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":85,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":86,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-09-11"},{"lineNumber":87,"author":{"gitId":"Yttruire"},"content":"     * Does a deep comparison of this object to another object.","lastModifiedDate":"2021-09-11"},{"lineNumber":88,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-09-11"},{"lineNumber":89,"author":{"gitId":"Yttruire"},"content":"     * @param otherObj The other object to be compared to","lastModifiedDate":"2021-09-11"},{"lineNumber":90,"author":{"gitId":"Yttruire"},"content":"     * @return Returns true iff the two objects are of same type and same value in every field","lastModifiedDate":"2021-09-11"},{"lineNumber":91,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-09-11"},{"lineNumber":92,"author":{"gitId":"Yttruire"},"content":"    @Override","lastModifiedDate":"2021-09-11"},{"lineNumber":93,"author":{"gitId":"Yttruire"},"content":"    public boolean equals(Object otherObj) {","lastModifiedDate":"2021-09-11"},{"lineNumber":94,"author":{"gitId":"Yttruire"},"content":"        if (!(otherObj instanceof DoWithinPeriodTask)) {","lastModifiedDate":"2021-09-11"},{"lineNumber":95,"author":{"gitId":"Yttruire"},"content":"            return false;","lastModifiedDate":"2021-09-11"},{"lineNumber":96,"author":{"gitId":"Yttruire"},"content":"        } else {","lastModifiedDate":"2021-09-11"},{"lineNumber":97,"author":{"gitId":"Yttruire"},"content":"            final DoWithinPeriodTask otherDoWithinPeriodtask \u003d (DoWithinPeriodTask) otherObj;","lastModifiedDate":"2021-09-11"},{"lineNumber":98,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":99,"author":{"gitId":"Yttruire"},"content":"            if (this.isDone !\u003d otherDoWithinPeriodtask.isDone) {","lastModifiedDate":"2021-09-11"},{"lineNumber":100,"author":{"gitId":"Yttruire"},"content":"                return false;","lastModifiedDate":"2021-09-11"},{"lineNumber":101,"author":{"gitId":"Yttruire"},"content":"            } else if (!this.description.equals(otherDoWithinPeriodtask.description)) {","lastModifiedDate":"2021-09-11"},{"lineNumber":102,"author":{"gitId":"Yttruire"},"content":"                return false;","lastModifiedDate":"2021-09-11"},{"lineNumber":103,"author":{"gitId":"Yttruire"},"content":"            } else {","lastModifiedDate":"2021-09-11"},{"lineNumber":104,"author":{"gitId":"Yttruire"},"content":"                return this.startOfPeriod.equals(otherDoWithinPeriodtask.startOfPeriod) \u0026\u0026 this.endOfPeriod.equals(otherDoWithinPeriodtask.endOfPeriod);","lastModifiedDate":"2021-09-11"},{"lineNumber":105,"author":{"gitId":"Yttruire"},"content":"            }","lastModifiedDate":"2021-09-11"},{"lineNumber":106,"author":{"gitId":"Yttruire"},"content":"        }","lastModifiedDate":"2021-09-11"},{"lineNumber":107,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":108,"author":{"gitId":"Yttruire"},"content":"}","lastModifiedDate":"2021-09-11"}],"authorContributionMap":{"Yttruire":108}},{"path":"src/main/java/duke/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yttruire"},"content":"package duke.tasks;","lastModifiedDate":"2021-08-27"},{"lineNumber":2,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":3,"author":{"gitId":"Yttruire"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"Yttruire"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"Yttruire"},"content":"/**","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"Yttruire"},"content":" * A Task that describes an Event, having a description and date of event","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"Yttruire"},"content":" */","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"Yttruire"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"Yttruire"},"content":"    protected LocalDate dateTime;","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"Yttruire"},"content":"     * Constructs an event with a given description and date \u0026 time with uncompleted flag by default","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"Yttruire"},"content":"     * @param description Description of the event","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"Yttruire"},"content":"     * @param dateTime Date and time of the event","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"Yttruire"},"content":"    public Event(String description, LocalDate dateTime) {","lastModifiedDate":"2021-08-27"},{"lineNumber":19,"author":{"gitId":"Yttruire"},"content":"        super(description);","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"Yttruire"},"content":"        this.dateTime \u003d dateTime;","lastModifiedDate":"2021-08-27"},{"lineNumber":21,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"Yttruire"},"content":"     * Constructs an event with a given description, date \u0026 time, and completion flag","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"Yttruire"},"content":"     * @param description Description of the event","lastModifiedDate":"2021-08-29"},{"lineNumber":27,"author":{"gitId":"Yttruire"},"content":"     * @param dateTime Date and time of the event","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"Yttruire"},"content":"     * @param isDone Whether the event starts out done","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"Yttruire"},"content":"    public Event(String description, LocalDate dateTime, boolean isDone) {","lastModifiedDate":"2021-08-27"},{"lineNumber":31,"author":{"gitId":"Yttruire"},"content":"        super(description, isDone);","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"Yttruire"},"content":"        this.dateTime \u003d dateTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":36,"author":{"gitId":"Yttruire"},"content":"     * Returns true if the Task has a due date that is due on the given date.","lastModifiedDate":"2021-08-29"},{"lineNumber":37,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":38,"author":{"gitId":"Yttruire"},"content":"     * @param dueDate The date to check if this task is on the same deadline/due date","lastModifiedDate":"2021-08-29"},{"lineNumber":39,"author":{"gitId":"Yttruire"},"content":"     * @return Returns true if this task is due the same date as the given one","lastModifiedDate":"2021-08-29"},{"lineNumber":40,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":41,"author":{"gitId":"Yttruire"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":42,"author":{"gitId":"Yttruire"},"content":"    public boolean isDue(LocalDate dueDate) {","lastModifiedDate":"2021-08-29"},{"lineNumber":43,"author":{"gitId":"Yttruire"},"content":"        return dueDate.isEqual(this.dateTime);","lastModifiedDate":"2021-08-29"},{"lineNumber":44,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":45,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":46,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":47,"author":{"gitId":"Yttruire"},"content":"     * Returns a formatted version with delimiters of this task for saving to file.","lastModifiedDate":"2021-08-29"},{"lineNumber":48,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":49,"author":{"gitId":"Yttruire"},"content":"     * @return A formatted String representing the data stored in the task","lastModifiedDate":"2021-08-29"},{"lineNumber":50,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":51,"author":{"gitId":"Yttruire"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"Yttruire"},"content":"    public String getFormattedData() {","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"Yttruire"},"content":"        return super.getFormattedData() + \"|\" + this.dateTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":57,"author":{"gitId":"Yttruire"},"content":"     * Returns a letter identifying the Task as a Todo.","lastModifiedDate":"2021-08-29"},{"lineNumber":58,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":59,"author":{"gitId":"Yttruire"},"content":"     * @return A character identifying the Task","lastModifiedDate":"2021-08-29"},{"lineNumber":60,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":61,"author":{"gitId":"Yttruire"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"Yttruire"},"content":"    public String getTaskIdentifier() {","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"Yttruire"},"content":"        return \"E\";","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":67,"author":{"gitId":"Yttruire"},"content":"     * Returns a string representation of the Todo Task.","lastModifiedDate":"2021-08-29"},{"lineNumber":68,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":69,"author":{"gitId":"Yttruire"},"content":"     * @return String representing the Todo Task","lastModifiedDate":"2021-08-29"},{"lineNumber":70,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":71,"author":{"gitId":"Yttruire"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":72,"author":{"gitId":"Yttruire"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":73,"author":{"gitId":"Yttruire"},"content":"        return \"[E][\" + getStatusIcon() + \"] \"","lastModifiedDate":"2021-09-02"},{"lineNumber":74,"author":{"gitId":"Yttruire"},"content":"                + this.description + \" (at: \"","lastModifiedDate":"2021-09-02"},{"lineNumber":75,"author":{"gitId":"Yttruire"},"content":"                + this.dateTime.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"))","lastModifiedDate":"2021-09-02"},{"lineNumber":76,"author":{"gitId":"Yttruire"},"content":"                + \")\";","lastModifiedDate":"2021-09-02"},{"lineNumber":77,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":78,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":79,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":80,"author":{"gitId":"Yttruire"},"content":"     * Does a deep comparison of this object to another object.","lastModifiedDate":"2021-08-29"},{"lineNumber":81,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":82,"author":{"gitId":"Yttruire"},"content":"     * @param otherObj The other object to be compared to","lastModifiedDate":"2021-08-29"},{"lineNumber":83,"author":{"gitId":"Yttruire"},"content":"     * @return Returns true iff the two objects are of same type and same value in every field","lastModifiedDate":"2021-08-29"},{"lineNumber":84,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":85,"author":{"gitId":"Yttruire"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":86,"author":{"gitId":"Yttruire"},"content":"    public boolean equals(Object otherObj) {","lastModifiedDate":"2021-08-29"},{"lineNumber":87,"author":{"gitId":"Yttruire"},"content":"        if (!(otherObj instanceof Event)) {","lastModifiedDate":"2021-08-29"},{"lineNumber":88,"author":{"gitId":"Yttruire"},"content":"            return false;","lastModifiedDate":"2021-08-29"},{"lineNumber":89,"author":{"gitId":"Yttruire"},"content":"        } else {","lastModifiedDate":"2021-08-29"},{"lineNumber":90,"author":{"gitId":"Yttruire"},"content":"            final Event otherEvent \u003d (Event) otherObj;","lastModifiedDate":"2021-08-29"},{"lineNumber":91,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":92,"author":{"gitId":"Yttruire"},"content":"            if (this.isDone !\u003d otherEvent.isDone) {","lastModifiedDate":"2021-08-29"},{"lineNumber":93,"author":{"gitId":"Yttruire"},"content":"                return false;","lastModifiedDate":"2021-08-29"},{"lineNumber":94,"author":{"gitId":"Yttruire"},"content":"            } else if (!this.description.equals(otherEvent.description)) {","lastModifiedDate":"2021-08-29"},{"lineNumber":95,"author":{"gitId":"Yttruire"},"content":"                return false;","lastModifiedDate":"2021-08-29"},{"lineNumber":96,"author":{"gitId":"Yttruire"},"content":"            } else {","lastModifiedDate":"2021-09-02"},{"lineNumber":97,"author":{"gitId":"Yttruire"},"content":"                return this.dateTime.equals(otherEvent.dateTime);","lastModifiedDate":"2021-09-02"},{"lineNumber":98,"author":{"gitId":"Yttruire"},"content":"            }","lastModifiedDate":"2021-09-02"},{"lineNumber":99,"author":{"gitId":"Yttruire"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":100,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":101,"author":{"gitId":"Yttruire"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"Yttruire":101}},{"path":"src/main/java/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yttruire"},"content":"package duke.tasks;","lastModifiedDate":"2021-08-27"},{"lineNumber":2,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":3,"author":{"gitId":"Yttruire"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"Yttruire"},"content":"/**","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"Yttruire"},"content":" * Abstract class representing a task that can be completed.","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"Yttruire"},"content":" */","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"Yttruire"},"content":"public abstract class Task {","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"Yttruire"},"content":"    protected String description;","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"Yttruire"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"Yttruire"},"content":"     * Constructs a Task using only description, isDone is false by default.","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"Yttruire"},"content":"     * @param description A description of the task to be done","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"Yttruire"},"content":"    protected Task(String description) {","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"Yttruire"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"Yttruire"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"Yttruire"},"content":"     * Constructs a Task given both description and completion flag.","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"Yttruire"},"content":"     * @param description A description of the task to be done","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"Yttruire"},"content":"     * @param isDone      Tracks whether the task is complete or not","lastModifiedDate":"2021-08-29"},{"lineNumber":27,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"Yttruire"},"content":"    protected Task(String description, boolean isDone) {","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"Yttruire"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"Yttruire"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":34,"author":{"gitId":"Yttruire"},"content":"     * Returns a string representing whether the task is complete.","lastModifiedDate":"2021-08-29"},{"lineNumber":35,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":36,"author":{"gitId":"Yttruire"},"content":"     * @return Either the letter \"X\" or \" \"","lastModifiedDate":"2021-08-29"},{"lineNumber":37,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":38,"author":{"gitId":"Yttruire"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-18"},{"lineNumber":39,"author":{"gitId":"Yttruire"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2021-08-18"},{"lineNumber":40,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":41,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":42,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":43,"author":{"gitId":"Yttruire"},"content":"     * Marks the task as completed.","lastModifiedDate":"2021-08-29"},{"lineNumber":44,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":45,"author":{"gitId":"Yttruire"},"content":"    public void markAsDone() {","lastModifiedDate":"2021-08-18"},{"lineNumber":46,"author":{"gitId":"Yttruire"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-08-18"},{"lineNumber":47,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":48,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":49,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":50,"author":{"gitId":"Yttruire"},"content":"     * Returns the status of completion of the Task.","lastModifiedDate":"2021-08-29"},{"lineNumber":51,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":52,"author":{"gitId":"Yttruire"},"content":"     * @return True if task is marked as complete","lastModifiedDate":"2021-08-29"},{"lineNumber":53,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":54,"author":{"gitId":"Yttruire"},"content":"    public boolean isDone() {","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"Yttruire"},"content":"        return this.isDone;","lastModifiedDate":"2021-08-26"},{"lineNumber":56,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":57,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":59,"author":{"gitId":"Yttruire"},"content":"     * Returns a formatted version with delimiters of this task for saving to file.","lastModifiedDate":"2021-08-29"},{"lineNumber":60,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":61,"author":{"gitId":"Yttruire"},"content":"     * @return A formatted String representing the data stored in the task","lastModifiedDate":"2021-08-29"},{"lineNumber":62,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":63,"author":{"gitId":"Yttruire"},"content":"    public String getFormattedData() {","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"Yttruire"},"content":"        return this.getTaskIdentifier() + \"|\" + (this.isDone ? 1 : 0) + \"|\" + this.description;","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":68,"author":{"gitId":"Yttruire"},"content":"     * Abstract function for each Task to return an identifier of what type of task it is.","lastModifiedDate":"2021-08-29"},{"lineNumber":69,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":70,"author":{"gitId":"Yttruire"},"content":"     * @return A character identifying the type of Task it is","lastModifiedDate":"2021-08-29"},{"lineNumber":71,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":72,"author":{"gitId":"Yttruire"},"content":"    public abstract String getTaskIdentifier();","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":75,"author":{"gitId":"Yttruire"},"content":"     * Returns true (false by default) if the Task has a due date that is due on the given date.","lastModifiedDate":"2021-08-29"},{"lineNumber":76,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":77,"author":{"gitId":"Yttruire"},"content":"     * @param dueDate The date to check if this task is on the same deadline/due date","lastModifiedDate":"2021-08-29"},{"lineNumber":78,"author":{"gitId":"Yttruire"},"content":"     * @return Always returns false by default unless overridden","lastModifiedDate":"2021-08-29"},{"lineNumber":79,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":80,"author":{"gitId":"Yttruire"},"content":"    public boolean isDue(LocalDate dueDate) {","lastModifiedDate":"2021-08-29"},{"lineNumber":81,"author":{"gitId":"Yttruire"},"content":"        return false;","lastModifiedDate":"2021-08-26"},{"lineNumber":82,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":83,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":84,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":85,"author":{"gitId":"Yttruire"},"content":"     * Returns true if the Task description contains the given keyword/String","lastModifiedDate":"2021-08-29"},{"lineNumber":86,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":87,"author":{"gitId":"Yttruire"},"content":"     * @param keyword A String to be checked if it is contained in the Task description field","lastModifiedDate":"2021-08-29"},{"lineNumber":88,"author":{"gitId":"Yttruire"},"content":"     * @return True iff this.description contains the given keyword String","lastModifiedDate":"2021-08-29"},{"lineNumber":89,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":90,"author":{"gitId":"Yttruire"},"content":"    public boolean containsKeyword(String keyword) {","lastModifiedDate":"2021-08-29"},{"lineNumber":91,"author":{"gitId":"Yttruire"},"content":"        return this.description.contains(keyword);","lastModifiedDate":"2021-08-29"},{"lineNumber":92,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":93,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":94,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":95,"author":{"gitId":"Yttruire"},"content":"     * Returns a string representation of the Todo Task","lastModifiedDate":"2021-08-29"},{"lineNumber":96,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":97,"author":{"gitId":"Yttruire"},"content":"     * @return String representing the Todo Task","lastModifiedDate":"2021-08-29"},{"lineNumber":98,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":99,"author":{"gitId":"Yttruire"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":100,"author":{"gitId":"Yttruire"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":101,"author":{"gitId":"Yttruire"},"content":"        return \"[\" + getStatusIcon() + \"] \" + this.description;","lastModifiedDate":"2021-08-18"},{"lineNumber":102,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":103,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":104,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":105,"author":{"gitId":"Yttruire"},"content":"     * Does a deep comparison of this object to another object.","lastModifiedDate":"2021-08-29"},{"lineNumber":106,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":107,"author":{"gitId":"Yttruire"},"content":"     * @param otherObj The other object to be compared to","lastModifiedDate":"2021-08-29"},{"lineNumber":108,"author":{"gitId":"Yttruire"},"content":"     * @return Returns true iff the two objects are of same type and same value in every field","lastModifiedDate":"2021-08-29"},{"lineNumber":109,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":110,"author":{"gitId":"Yttruire"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":111,"author":{"gitId":"Yttruire"},"content":"    public boolean equals(Object otherObj) {","lastModifiedDate":"2021-08-29"},{"lineNumber":112,"author":{"gitId":"Yttruire"},"content":"        if (!(otherObj instanceof Task)) {","lastModifiedDate":"2021-08-29"},{"lineNumber":113,"author":{"gitId":"Yttruire"},"content":"            return false;","lastModifiedDate":"2021-08-29"},{"lineNumber":114,"author":{"gitId":"Yttruire"},"content":"        } else {","lastModifiedDate":"2021-08-29"},{"lineNumber":115,"author":{"gitId":"Yttruire"},"content":"            final Task otherTask \u003d (Task) otherObj;","lastModifiedDate":"2021-08-29"},{"lineNumber":116,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":117,"author":{"gitId":"Yttruire"},"content":"            if (this.isDone !\u003d otherTask.isDone) {","lastModifiedDate":"2021-08-29"},{"lineNumber":118,"author":{"gitId":"Yttruire"},"content":"                return false;","lastModifiedDate":"2021-08-29"},{"lineNumber":119,"author":{"gitId":"Yttruire"},"content":"            } else {","lastModifiedDate":"2021-09-02"},{"lineNumber":120,"author":{"gitId":"Yttruire"},"content":"                return this.description.equals(otherTask.description);","lastModifiedDate":"2021-08-29"},{"lineNumber":121,"author":{"gitId":"Yttruire"},"content":"            }","lastModifiedDate":"2021-08-29"},{"lineNumber":122,"author":{"gitId":"Yttruire"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":123,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":124,"author":{"gitId":"Yttruire"},"content":"}","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"Yttruire":124}},{"path":"src/main/java/duke/tasks/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yttruire"},"content":"package duke.tasks;","lastModifiedDate":"2021-08-27"},{"lineNumber":2,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":3,"author":{"gitId":"Yttruire"},"content":"/**","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"Yttruire"},"content":" * Todo tasks containing just a description and isDone field.","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"Yttruire"},"content":" */","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"Yttruire"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"Yttruire"},"content":"     * Constructs a Todo Task given a description and uncompleted flag by default","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"Yttruire"},"content":"     * @param description Description for the todo task","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"Yttruire"},"content":"    public Todo(String description) {","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"Yttruire"},"content":"        super(description);","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"Yttruire"},"content":"     * Constructs a Todo Task, given both description and completion flag.","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"Yttruire"},"content":"     * @param description Description for the todo task","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"Yttruire"},"content":"     * @param isDone Tracks whether task is done","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"Yttruire"},"content":"    public Todo(String description, boolean isDone) {","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"Yttruire"},"content":"        super(description, isDone);","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":27,"author":{"gitId":"Yttruire"},"content":"     * Returns a letter identifying the Task as a Todo.","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"Yttruire"},"content":"     * @return A character identifying the Task","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"Yttruire"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"Yttruire"},"content":"    public String getTaskIdentifier() {","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"Yttruire"},"content":"        return \"T\";","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":37,"author":{"gitId":"Yttruire"},"content":"     * Returns a string representation of the Todo Task.","lastModifiedDate":"2021-08-29"},{"lineNumber":38,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":39,"author":{"gitId":"Yttruire"},"content":"     * @return String representing the Todo Task","lastModifiedDate":"2021-08-29"},{"lineNumber":40,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":41,"author":{"gitId":"Yttruire"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":42,"author":{"gitId":"Yttruire"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":43,"author":{"gitId":"Yttruire"},"content":"        return \"[T][\" + getStatusIcon() + \"] \" + this.description;","lastModifiedDate":"2021-08-18"},{"lineNumber":44,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":45,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":46,"author":{"gitId":"Yttruire"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":47,"author":{"gitId":"Yttruire"},"content":"     * Does a deep comparison of this object to another object.","lastModifiedDate":"2021-08-29"},{"lineNumber":48,"author":{"gitId":"Yttruire"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":49,"author":{"gitId":"Yttruire"},"content":"     * @param otherObj The other object to be compared to","lastModifiedDate":"2021-08-29"},{"lineNumber":50,"author":{"gitId":"Yttruire"},"content":"     * @return Returns true iff the two objects are of same type and same value in every field","lastModifiedDate":"2021-08-29"},{"lineNumber":51,"author":{"gitId":"Yttruire"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":52,"author":{"gitId":"Yttruire"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":53,"author":{"gitId":"Yttruire"},"content":"    public boolean equals(Object otherObj) {","lastModifiedDate":"2021-08-29"},{"lineNumber":54,"author":{"gitId":"Yttruire"},"content":"        if (!(otherObj instanceof Event)) {","lastModifiedDate":"2021-08-29"},{"lineNumber":55,"author":{"gitId":"Yttruire"},"content":"            return false;","lastModifiedDate":"2021-08-29"},{"lineNumber":56,"author":{"gitId":"Yttruire"},"content":"        } else {","lastModifiedDate":"2021-08-29"},{"lineNumber":57,"author":{"gitId":"Yttruire"},"content":"            final Event otherEvent \u003d (Event) otherObj;","lastModifiedDate":"2021-08-29"},{"lineNumber":58,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":59,"author":{"gitId":"Yttruire"},"content":"            if (this.isDone !\u003d otherEvent.isDone) {","lastModifiedDate":"2021-08-29"},{"lineNumber":60,"author":{"gitId":"Yttruire"},"content":"                return false;","lastModifiedDate":"2021-08-29"},{"lineNumber":61,"author":{"gitId":"Yttruire"},"content":"            } else {","lastModifiedDate":"2021-08-29"},{"lineNumber":62,"author":{"gitId":"Yttruire"},"content":"                return this.description.equals(otherEvent.description);","lastModifiedDate":"2021-08-29"},{"lineNumber":63,"author":{"gitId":"Yttruire"},"content":"            }","lastModifiedDate":"2021-08-29"},{"lineNumber":64,"author":{"gitId":"Yttruire"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":65,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":66,"author":{"gitId":"Yttruire"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"Yttruire":66}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Yttruire"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":2,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":3,"author":{"gitId":"Yttruire"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":4,"author":{"gitId":"Yttruire"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":5,"author":{"gitId":"Yttruire"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":6,"author":{"gitId":"Yttruire"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":7,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":8,"author":{"gitId":"Yttruire"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":9,"author":{"gitId":"Yttruire"},"content":"  \u003cchildren\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":10,"author":{"gitId":"Yttruire"},"content":"    \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":11,"author":{"gitId":"Yttruire"},"content":"    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":12,"author":{"gitId":"Yttruire"},"content":"  \u003c/children\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":13,"author":{"gitId":"Yttruire"},"content":"  \u003cpadding\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":14,"author":{"gitId":"Yttruire"},"content":"    \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":15,"author":{"gitId":"Yttruire"},"content":"  \u003c/padding\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":16,"author":{"gitId":"Yttruire"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2021-09-03"}],"authorContributionMap":{"Yttruire":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Yttruire"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":2,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":3,"author":{"gitId":"Yttruire"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":4,"author":{"gitId":"Yttruire"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":5,"author":{"gitId":"Yttruire"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":6,"author":{"gitId":"Yttruire"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":7,"author":{"gitId":"Yttruire"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":8,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":9,"author":{"gitId":"Yttruire"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.gui.MainWindow\"\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":10,"author":{"gitId":"Yttruire"},"content":"  \u003cchildren\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":11,"author":{"gitId":"Yttruire"},"content":"    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":12,"author":{"gitId":"Yttruire"},"content":"    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":13,"author":{"gitId":"Yttruire"},"content":"    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":14,"author":{"gitId":"Yttruire"},"content":"      \u003ccontent\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":15,"author":{"gitId":"Yttruire"},"content":"        \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":16,"author":{"gitId":"Yttruire"},"content":"      \u003c/content\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":17,"author":{"gitId":"Yttruire"},"content":"    \u003c/ScrollPane\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":18,"author":{"gitId":"Yttruire"},"content":"  \u003c/children\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":19,"author":{"gitId":"Yttruire"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2021-09-03"}],"authorContributionMap":{"Yttruire":19}},{"path":"src/test/java/duke/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yttruire"},"content":"package duke;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"Yttruire"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"Yttruire"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"Yttruire"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"Yttruire"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"Yttruire"},"content":"import duke.data.TaskList;","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"Yttruire"},"content":"import duke.io.Command;","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"Yttruire"},"content":"import duke.io.Parser;","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"Yttruire"},"content":"import duke.tasks.Deadline;","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"Yttruire"},"content":"import duke.tasks.Event;","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"Yttruire"},"content":"import duke.tasks.Todo;","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"Yttruire"},"content":"public class DukeTest {","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"Yttruire"},"content":"    @Test","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"Yttruire"},"content":"    public void parserTest() {","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"Yttruire"},"content":"        try {","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"Yttruire"},"content":"            assertEquals(new Command(Command.CommandName.BYE), Parser.parse(\"bye\"));","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"Yttruire"},"content":"            assertEquals(new Command(Command.CommandName.LIST), Parser.parse(\"list\"));","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"Yttruire"},"content":"            assertEquals(new Command(Command.CommandName.DONE, new String[]{\"2\"}), Parser.parse(\"done 2\"));","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"Yttruire"},"content":"            assertEquals(new Command(Command.CommandName.DELETE, new String[]{\"2\"}), Parser.parse(\"delete 2\"));","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"Yttruire"},"content":"            assertEquals(new Command(Command.CommandName.TODO, new String[]{\"description\"}),","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"Yttruire"},"content":"                    Parser.parse(\"todo description\"));","lastModifiedDate":"2021-08-29"},{"lineNumber":27,"author":{"gitId":"Yttruire"},"content":"            assertEquals(new Command(Command.CommandName.DEADLINE, new String[]{\"description\", \"2021-08-28\"}),","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"Yttruire"},"content":"                    Parser.parse(\"deadline description /by 2021-08-28\"));","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"Yttruire"},"content":"            assertEquals(new Command(Command.CommandName.EVENT, new String[]{\"description\", \"2021-08-28\"}),","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"Yttruire"},"content":"                    Parser.parse(\"event description /at 2021-08-28\"));","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"Yttruire"},"content":"            assertEquals(new Command(Command.CommandName.DATE, new String[]{\"2021-08-28\"}),","lastModifiedDate":"2021-09-02"},{"lineNumber":32,"author":{"gitId":"Yttruire"},"content":"                    Parser.parse(\"date 2021-08-28\"));","lastModifiedDate":"2021-09-02"},{"lineNumber":33,"author":{"gitId":"Yttruire"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-29"},{"lineNumber":34,"author":{"gitId":"Yttruire"},"content":"            throw new AssertionError(\"Test case failed, unintended error in parsing\");","lastModifiedDate":"2021-08-29"},{"lineNumber":35,"author":{"gitId":"Yttruire"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":36,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":37,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":38,"author":{"gitId":"Yttruire"},"content":"    @Test","lastModifiedDate":"2021-08-29"},{"lineNumber":39,"author":{"gitId":"Yttruire"},"content":"    public void parserInvalidInputTest() {","lastModifiedDate":"2021-08-29"},{"lineNumber":40,"author":{"gitId":"Yttruire"},"content":"        assertThrows(DukeException.class, () -\u003e Parser.parse(\"todo\"));","lastModifiedDate":"2021-09-03"},{"lineNumber":41,"author":{"gitId":"Yttruire"},"content":"        assertThrows(DukeException.class, () -\u003e Parser.parse(\"deadline\"));","lastModifiedDate":"2021-09-03"},{"lineNumber":42,"author":{"gitId":"Yttruire"},"content":"        assertThrows(DukeException.class, () -\u003e Parser.parse(\"listtodo\"));","lastModifiedDate":"2021-09-03"},{"lineNumber":43,"author":{"gitId":"Yttruire"},"content":"        assertThrows(DukeException.class, () -\u003e Parser.parse(\"list todo\"));","lastModifiedDate":"2021-09-03"},{"lineNumber":44,"author":{"gitId":"Yttruire"},"content":"        assertThrows(DukeException.class, () -\u003e Parser.parse(\"event /at 2021-06-12\"));","lastModifiedDate":"2021-09-03"},{"lineNumber":45,"author":{"gitId":"Yttruire"},"content":"        assertThrows(DukeException.class, () -\u003e Parser.parse(\"event desc /at\"));","lastModifiedDate":"2021-09-03"},{"lineNumber":46,"author":{"gitId":"Yttruire"},"content":"        assertThrows(DukeException.class, () -\u003e Parser.parse(\"deadline desc /by\"));","lastModifiedDate":"2021-09-03"},{"lineNumber":47,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":48,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":49,"author":{"gitId":"Yttruire"},"content":"    @Test","lastModifiedDate":"2021-08-29"},{"lineNumber":50,"author":{"gitId":"Yttruire"},"content":"    public void taskListFilterTest() {","lastModifiedDate":"2021-08-29"},{"lineNumber":51,"author":{"gitId":"Yttruire"},"content":"        TaskList testList \u003d new TaskList();","lastModifiedDate":"2021-08-29"},{"lineNumber":52,"author":{"gitId":"Yttruire"},"content":"        testList.add(new Todo(\"description\", true));","lastModifiedDate":"2021-08-29"},{"lineNumber":53,"author":{"gitId":"Yttruire"},"content":"        testList.add(new Deadline(\"A deadline\", LocalDate.parse(\"2021-08-28\"), false));","lastModifiedDate":"2021-08-29"},{"lineNumber":54,"author":{"gitId":"Yttruire"},"content":"        testList.add(new Event(\"An event\", LocalDate.parse(\"2021-08-28\"), true));","lastModifiedDate":"2021-08-29"},{"lineNumber":55,"author":{"gitId":"Yttruire"},"content":"        testList.add(new Deadline(\"Wrong deadline\", LocalDate.parse(\"2021-08-27\"), false));","lastModifiedDate":"2021-08-29"},{"lineNumber":56,"author":{"gitId":"Yttruire"},"content":"        testList.add(new Event(\"Wrong event\", LocalDate.parse(\"2021-08-27\"), true));","lastModifiedDate":"2021-08-29"},{"lineNumber":57,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":58,"author":{"gitId":"Yttruire"},"content":"        TaskList expectedList \u003d new TaskList();","lastModifiedDate":"2021-08-29"},{"lineNumber":59,"author":{"gitId":"Yttruire"},"content":"        expectedList.add(new Deadline(\"A deadline\", LocalDate.parse(\"2021-08-28\"), false));","lastModifiedDate":"2021-08-29"},{"lineNumber":60,"author":{"gitId":"Yttruire"},"content":"        expectedList.add(new Event(\"An event\", LocalDate.parse(\"2021-08-28\"), true));","lastModifiedDate":"2021-08-29"},{"lineNumber":61,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":62,"author":{"gitId":"Yttruire"},"content":"        TaskList actualList \u003d testList.filterByDate(LocalDate.parse(\"2021-08-28\"));","lastModifiedDate":"2021-08-29"},{"lineNumber":63,"author":{"gitId":"Yttruire"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":64,"author":{"gitId":"Yttruire"},"content":"        assertEquals(expectedList, actualList);","lastModifiedDate":"2021-08-29"},{"lineNumber":65,"author":{"gitId":"Yttruire"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":66,"author":{"gitId":"Yttruire"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"Yttruire":66}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Yttruire"},"content":"todo borrow book","lastModifiedDate":"2021-08-18"},{"lineNumber":2,"author":{"gitId":"Yttruire"},"content":"deadline return book /by Sunday","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"Yttruire"},"content":"event project meeting /at Mon 2-4pm","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"Yttruire"},"content":"deadline do homework /by no idea :-p","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"Yttruire"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"Yttruire"},"content":"deadline","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"Yttruire"},"content":"deadline as","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"Yttruire"},"content":"deadline /by","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"Yttruire"},"content":"deadline /by","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"Yttruire"},"content":"deadline 3 /by","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"Yttruire"},"content":"deadline /by thurs","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"Yttruire"},"content":"delete 3","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"Yttruire"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"Yttruire"},"content":"bye","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"Yttruire":14}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"Yttruire"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-08-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Yttruire":1,"-":20}}]

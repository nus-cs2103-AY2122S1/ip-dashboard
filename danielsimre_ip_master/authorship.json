[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":22,"author":{"gitId":"danielsimre"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":23,"author":{"gitId":"danielsimre"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":27,"author":{"gitId":"danielsimre"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":28,"author":{"gitId":"danielsimre"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"danielsimre"},"content":"    mainClassName \u003d \"Launcher\"","lastModifiedDate":"2021-09-02"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"danielsimre":15,"-":45}},{"path":"src/main/java/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-09-02"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"import duke.Main;","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":"/**","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"danielsimre"},"content":" */","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":"public class Launcher {","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":"}","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"danielsimre":12}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":"import duke.command.Command;","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":"import duke.util.Parser;","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":"import duke.util.Storage;","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":"import duke.util.Ui;","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":" * The driver class for the Duke chat bot.","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":"public class Duke {","lastModifiedDate":"2021-09-02"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":"     * Object to handle UI-related functions (e.g. printing messages and lines)","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"danielsimre"},"content":"    private final Ui ui;","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"     * Object to handle loading from/save to a save file","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"    private final Storage storage;","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"danielsimre"},"content":"     * Object to represent the user\u0027s task list (e.g. add/delete/mark as done)","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"danielsimre"},"content":"    private TaskList taskList;","lastModifiedDate":"2021-09-02"},{"lineNumber":31,"author":{"gitId":"danielsimre"},"content":"    private String initMessage;","lastModifiedDate":"2021-09-03"},{"lineNumber":32,"author":{"gitId":"danielsimre"},"content":"    private boolean isTerminated \u003d false;","lastModifiedDate":"2021-09-03"},{"lineNumber":33,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":34,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"danielsimre"},"content":"     * Creates a Duke chat bot instance, using a file path for loading/saving.","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"danielsimre"},"content":"     * @param filePath Relative path to the location of the save file.","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"danielsimre"},"content":"    public Duke(Path filePath) {","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"danielsimre"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"danielsimre"},"content":"        this.storage \u003d new Storage(filePath);","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"danielsimre"},"content":"        initMessage \u003d \"\";","lastModifiedDate":"2021-09-03"},{"lineNumber":43,"author":{"gitId":"danielsimre"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"danielsimre"},"content":"            taskList \u003d new TaskList(storage.loadTasksFromFile());","lastModifiedDate":"2021-09-02"},{"lineNumber":45,"author":{"gitId":"danielsimre"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"danielsimre"},"content":"            initMessage \u003d ui.showFileNotFoundError();","lastModifiedDate":"2021-09-03"},{"lineNumber":47,"author":{"gitId":"danielsimre"},"content":"            taskList \u003d new TaskList();","lastModifiedDate":"2021-09-02"},{"lineNumber":48,"author":{"gitId":"danielsimre"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"danielsimre"},"content":"            initMessage \u003d ui.showLoadingError(e.getMessage());","lastModifiedDate":"2021-09-03"},{"lineNumber":50,"author":{"gitId":"danielsimre"},"content":"            taskList \u003d new TaskList();","lastModifiedDate":"2021-09-02"},{"lineNumber":51,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":52,"author":{"gitId":"danielsimre"},"content":"        initMessage +\u003d ui.showIntroduction();","lastModifiedDate":"2021-09-03"},{"lineNumber":53,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":56,"author":{"gitId":"danielsimre"},"content":"     * Creates a Duke chat bot instance, using a default file path for loading/saving.","lastModifiedDate":"2021-09-02"},{"lineNumber":57,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":58,"author":{"gitId":"danielsimre"},"content":"    public Duke() {","lastModifiedDate":"2021-09-02"},{"lineNumber":59,"author":{"gitId":"danielsimre"},"content":"        this(Paths.get(System.getProperty(\"user.dir\"), \"data\", \"tasks.txt\"));","lastModifiedDate":"2021-09-02"},{"lineNumber":60,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":61,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":62,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":63,"author":{"gitId":"danielsimre"},"content":"     * Returns the messages generated on the initialization of Duke.","lastModifiedDate":"2021-09-03"},{"lineNumber":64,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-09-03"},{"lineNumber":65,"author":{"gitId":"danielsimre"},"content":"     * @return A string message to be used by the JavaFX GUI.","lastModifiedDate":"2021-09-03"},{"lineNumber":66,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":67,"author":{"gitId":"danielsimre"},"content":"    public String getInitMessage() {","lastModifiedDate":"2021-09-03"},{"lineNumber":68,"author":{"gitId":"danielsimre"},"content":"        return initMessage;","lastModifiedDate":"2021-09-03"},{"lineNumber":69,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-09-03"},{"lineNumber":70,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":71,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-09-03"},{"lineNumber":72,"author":{"gitId":"danielsimre"},"content":"     * Gives a user input to the Duke chat bot, and returns the appropriate response.","lastModifiedDate":"2021-09-03"},{"lineNumber":73,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-09-03"},{"lineNumber":74,"author":{"gitId":"danielsimre"},"content":"     * @param input The user input from the GUI.","lastModifiedDate":"2021-09-03"},{"lineNumber":75,"author":{"gitId":"danielsimre"},"content":"     * @return A string message to be used by the JavaFX GUI.","lastModifiedDate":"2021-09-03"},{"lineNumber":76,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-09-03"},{"lineNumber":77,"author":{"gitId":"danielsimre"},"content":"    public String getResponse(String input) {","lastModifiedDate":"2021-09-03"},{"lineNumber":78,"author":{"gitId":"danielsimre"},"content":"        try {","lastModifiedDate":"2021-08-18"},{"lineNumber":79,"author":{"gitId":"danielsimre"},"content":"            Command command \u003d Parser.parseCommandFromInput(input);","lastModifiedDate":"2021-08-26"},{"lineNumber":80,"author":{"gitId":"danielsimre"},"content":"            taskList \u003d command.execute(taskList, ui, storage);","lastModifiedDate":"2021-09-02"},{"lineNumber":81,"author":{"gitId":"danielsimre"},"content":"            isTerminated \u003d command.isTerminated();","lastModifiedDate":"2021-09-03"},{"lineNumber":82,"author":{"gitId":"danielsimre"},"content":"            return taskList.getRecentMessage();","lastModifiedDate":"2021-09-03"},{"lineNumber":83,"author":{"gitId":"danielsimre"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":84,"author":{"gitId":"danielsimre"},"content":"            return ui.showError(\"The data failed to save to the save file with error:\"","lastModifiedDate":"2021-09-03"},{"lineNumber":85,"author":{"gitId":"danielsimre"},"content":"                    + e.getMessage());","lastModifiedDate":"2021-08-26"},{"lineNumber":86,"author":{"gitId":"danielsimre"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2021-08-18"},{"lineNumber":87,"author":{"gitId":"danielsimre"},"content":"            // When invalid command is given, it is unable to be parsed into the enum","lastModifiedDate":"2021-08-18"},{"lineNumber":88,"author":{"gitId":"danielsimre"},"content":"            return ui.showError(\"You have entered an invalid command.\");","lastModifiedDate":"2021-09-03"},{"lineNumber":89,"author":{"gitId":"danielsimre"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-08-18"},{"lineNumber":90,"author":{"gitId":"danielsimre"},"content":"            return ui.showError(e.getMessage());","lastModifiedDate":"2021-09-03"},{"lineNumber":91,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":92,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":93,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":94,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-09-03"},{"lineNumber":95,"author":{"gitId":"danielsimre"},"content":"     * Returns a boolean representing whether or not the program should continue running.","lastModifiedDate":"2021-09-03"},{"lineNumber":96,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-09-03"},{"lineNumber":97,"author":{"gitId":"danielsimre"},"content":"     * @return True if a bye/terminating command has been inputted, false otherwise.","lastModifiedDate":"2021-09-03"},{"lineNumber":98,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-09-03"},{"lineNumber":99,"author":{"gitId":"danielsimre"},"content":"    public boolean getIsTerminated() {","lastModifiedDate":"2021-09-03"},{"lineNumber":100,"author":{"gitId":"danielsimre"},"content":"        return isTerminated;","lastModifiedDate":"2021-09-03"},{"lineNumber":101,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-09-03"},{"lineNumber":102,"author":{"gitId":"danielsimre"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"danielsimre":102}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"package duke;","lastModifiedDate":"2021-09-02"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"danielsimre"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":"import duke.controller.MainWindow;","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":"/**","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2021-09-02"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":" */","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"public class Main extends Application {","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":"    private final Duke duke \u003d new Duke();","lastModifiedDate":"2021-09-02"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":"    @Override","lastModifiedDate":"2021-09-02"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2021-09-02"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":"        try {","lastModifiedDate":"2021-09-02"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2021-09-02"},{"lineNumber":22,"author":{"gitId":"danielsimre"},"content":"            fxmlLoader.setRoot(new MainWindow());","lastModifiedDate":"2021-09-03"},{"lineNumber":23,"author":{"gitId":"danielsimre"},"content":"            stage \u003d fxmlLoader.load();","lastModifiedDate":"2021-09-03"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2021-09-02"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"            stage.show();","lastModifiedDate":"2021-09-02"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-02"},{"lineNumber":27,"author":{"gitId":"danielsimre"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-09-02"},{"lineNumber":28,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-09-02"},{"lineNumber":29,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":30,"author":{"gitId":"danielsimre"},"content":"}","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"danielsimre":30}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"package duke.command;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":"import duke.util.Storage;","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"danielsimre"},"content":"import duke.util.Ui;","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":"/**","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":" * A class that represents the command when the user types in \u0027todo\u0027, \u0027deadline\u0027 or \u0027event\u0027.","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":" */","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"     * Creates an AddCommand, which relies on user inputs to function.","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":"     * @param input A string containing the user\u0027s input.","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":"    public AddCommand(String input) {","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":"        super(input);","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"     * Adds a todo/deadline/event task and saves the new task list to the save file.","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"     * @param taskList   The current list of tasks from the user.","lastModifiedDate":"2021-09-02"},{"lineNumber":27,"author":{"gitId":"danielsimre"},"content":"     * @param ui      An object that handles all UI related functionality. (e.g. printing)","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"danielsimre"},"content":"     * @param storage An object that handles all save/load related functionality.","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"danielsimre"},"content":"     * @return A task list with the new task added and an output message.","lastModifiedDate":"2021-09-03"},{"lineNumber":30,"author":{"gitId":"danielsimre"},"content":"     * @throws IOException If an error occurs during the save operation.","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"danielsimre"},"content":"    @Override","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"danielsimre"},"content":"    public TaskList execute(TaskList taskList, Ui ui, Storage storage) throws IOException {","lastModifiedDate":"2021-09-02"},{"lineNumber":34,"author":{"gitId":"danielsimre"},"content":"        TaskList newTaskList \u003d taskList.addTask(input, ui);","lastModifiedDate":"2021-09-02"},{"lineNumber":35,"author":{"gitId":"danielsimre"},"content":"        storage.saveTasksToFile(newTaskList);","lastModifiedDate":"2021-09-02"},{"lineNumber":36,"author":{"gitId":"danielsimre"},"content":"        return newTaskList;","lastModifiedDate":"2021-09-02"},{"lineNumber":37,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"danielsimre"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"danielsimre":38}},{"path":"src/main/java/duke/command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"package duke.command;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"import duke.util.Storage;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":"import duke.util.Ui;","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"danielsimre"},"content":"/**","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":" * A class that represents the command when the user types in \u0027bye\u0027.","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":" */","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":"public class ByeCommand extends Command {","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":"     * Prints a goodbye message and exits the program.","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"     * @param taskList   The current list of tasks from the user.","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":"     * @param ui      An object that handles all UI related functionality. (e.g. printing)","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":"     * @param storage An object that handles all save/load related functionality.","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":"     * @return The input task list with an output message.","lastModifiedDate":"2021-09-03"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":"    @Override","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"    public TaskList execute(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-02"},{"lineNumber":22,"author":{"gitId":"danielsimre"},"content":"        return new TaskList(taskList, ui.showMessage(\"Goodbye. Have a nice day!\"));","lastModifiedDate":"2021-09-03"},{"lineNumber":23,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"     * Returns true if the command terminates Duke, false otherwise.","lastModifiedDate":"2021-08-29"},{"lineNumber":27,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"danielsimre"},"content":"     * @return True, as ByeCommand terminates Duke.","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"danielsimre"},"content":"    @Override","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"danielsimre"},"content":"    public boolean isTerminated() {","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"danielsimre"},"content":"        return true;","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"danielsimre"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"danielsimre":34}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"package duke.command;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":"import duke.util.Storage;","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"danielsimre"},"content":"import duke.util.Ui;","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":"/**","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":" * A class that represents a valid command that can be executed according to the user\u0027s input.","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":" */","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":"public abstract class Command {","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":"    protected final String input;","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":"     * Creates a command that does not rely on user inputs to function.","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":"    public Command() {","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":"        this.input \u003d \"\";","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"danielsimre"},"content":"     * Creates a command that relies on user inputs to function.","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"     * @param input A string containing the user\u0027s input.","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":27,"author":{"gitId":"danielsimre"},"content":"    public Command(String input) {","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"danielsimre"},"content":"        this.input \u003d input;","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"danielsimre"},"content":"     * Executes the function associated with the command.","lastModifiedDate":"2021-08-29"},{"lineNumber":33,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":34,"author":{"gitId":"danielsimre"},"content":"     * @param taskList   The current list of tasks from the user.","lastModifiedDate":"2021-09-02"},{"lineNumber":35,"author":{"gitId":"danielsimre"},"content":"     * @param ui      An object that handles all UI related functionality. (e.g. printing)","lastModifiedDate":"2021-08-29"},{"lineNumber":36,"author":{"gitId":"danielsimre"},"content":"     * @param storage An object that handles all save/load related functionality.","lastModifiedDate":"2021-08-29"},{"lineNumber":37,"author":{"gitId":"danielsimre"},"content":"     * @return A task list that may or may not be modified from the input task list, depending on","lastModifiedDate":"2021-08-29"},{"lineNumber":38,"author":{"gitId":"danielsimre"},"content":"     * the command called, along with a new output message.","lastModifiedDate":"2021-09-03"},{"lineNumber":39,"author":{"gitId":"danielsimre"},"content":"     * @throws IOException If an error occurs during a save/load operation.","lastModifiedDate":"2021-08-29"},{"lineNumber":40,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":41,"author":{"gitId":"danielsimre"},"content":"    public abstract TaskList execute(TaskList taskList, Ui ui, Storage storage) throws IOException;","lastModifiedDate":"2021-09-02"},{"lineNumber":42,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":44,"author":{"gitId":"danielsimre"},"content":"     * Returns true if the command terminates Duke, false otherwise.","lastModifiedDate":"2021-08-29"},{"lineNumber":45,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":46,"author":{"gitId":"danielsimre"},"content":"     * @return False by default, unless the command is a terminating command (e.g. ByeCommand)","lastModifiedDate":"2021-08-29"},{"lineNumber":47,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":48,"author":{"gitId":"danielsimre"},"content":"    public boolean isTerminated() {","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"danielsimre"},"content":"        return false;","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":51,"author":{"gitId":"danielsimre"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"danielsimre":51}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"package duke.command;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":"import duke.util.Storage;","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"danielsimre"},"content":"import duke.util.Ui;","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":"/**","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":" * A class that represents the command when the user types in \u0027delete\u0027.","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":" */","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"     * Creates a DeleteCommand, which relies on user inputs to function.","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":"     * @param input A string containing the user\u0027s input.","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":"    public DeleteCommand(String input) {","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":"        super(input);","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"     * Deletes a task from the task list and saves the new task list to the save file.","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"     * @param taskList   The current list of tasks from the user.","lastModifiedDate":"2021-09-02"},{"lineNumber":27,"author":{"gitId":"danielsimre"},"content":"     * @param ui      An object that handles all UI related functionality. (e.g. printing)","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"danielsimre"},"content":"     * @param storage An object that handles all save/load related functionality.","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"danielsimre"},"content":"     * @return A task list with the specified task removed and an output message.","lastModifiedDate":"2021-09-03"},{"lineNumber":30,"author":{"gitId":"danielsimre"},"content":"     * @throws IOException If an error occurs during the save operation.","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"danielsimre"},"content":"    @Override","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"danielsimre"},"content":"    public TaskList execute(TaskList taskList, Ui ui, Storage storage) throws IOException {","lastModifiedDate":"2021-09-02"},{"lineNumber":34,"author":{"gitId":"danielsimre"},"content":"        TaskList newTaskList \u003d taskList.deleteTask(input, ui);","lastModifiedDate":"2021-09-02"},{"lineNumber":35,"author":{"gitId":"danielsimre"},"content":"        storage.saveTasksToFile(newTaskList);","lastModifiedDate":"2021-09-02"},{"lineNumber":36,"author":{"gitId":"danielsimre"},"content":"        return newTaskList;","lastModifiedDate":"2021-09-02"},{"lineNumber":37,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"danielsimre"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"danielsimre":38}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"package duke.command;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":"import duke.util.Storage;","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"danielsimre"},"content":"import duke.util.Ui;","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":"/**","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":" * A class that represents the command when the user types in \u0027done\u0027.","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":" */","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":"public class DoneCommand extends Command {","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"     * Creates a DoneCommand, which relies on user inputs to function.","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":"     * @param input A string containing the user\u0027s input.","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":"    public DoneCommand(String input) {","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":"        super(input);","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"     * Marks a specified task as done and saves the new task list to the save file.","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"     * @param taskList   The current list of tasks from the user.","lastModifiedDate":"2021-09-02"},{"lineNumber":27,"author":{"gitId":"danielsimre"},"content":"     * @param ui      An object that handles all UI related functionality. (e.g. printing)","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"danielsimre"},"content":"     * @param storage An object that handles all save/load related functionality.","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"danielsimre"},"content":"     * @return A task list with the specified task marked as done and an output message.","lastModifiedDate":"2021-09-03"},{"lineNumber":30,"author":{"gitId":"danielsimre"},"content":"     * @throws IOException If an error occurs during the save operation.","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"danielsimre"},"content":"    @Override","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"danielsimre"},"content":"    public TaskList execute(TaskList taskList, Ui ui, Storage storage) throws IOException {","lastModifiedDate":"2021-09-02"},{"lineNumber":34,"author":{"gitId":"danielsimre"},"content":"        TaskList newTaskList \u003d taskList.markTask(input, ui);","lastModifiedDate":"2021-09-02"},{"lineNumber":35,"author":{"gitId":"danielsimre"},"content":"        storage.saveTasksToFile(newTaskList);","lastModifiedDate":"2021-09-02"},{"lineNumber":36,"author":{"gitId":"danielsimre"},"content":"        return newTaskList;","lastModifiedDate":"2021-09-02"},{"lineNumber":37,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"danielsimre"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"danielsimre":38}},{"path":"src/main/java/duke/command/DueCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"package duke.command;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"import duke.util.Storage;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":"import duke.util.Ui;","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"danielsimre"},"content":"/**","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":" * A class that represents the command when the user types in \u0027due\u0027.","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":" */","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":"public class DueCommand extends Command {","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":"     * Creates a DueCommand, which relies on user inputs to function.","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"     * @param input A string containing the user\u0027s input.","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":"    public DueCommand(String input) {","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":"        super(input);","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"danielsimre"},"content":"     * Displays all tasks due before a certain period, for example all tasks due before","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"danielsimre"},"content":"     * the time now, +x hours/days/months.","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"     * @param taskList   The current list of tasks from the user.","lastModifiedDate":"2021-09-02"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"     * @param ui      An object that handles all UI related functionality. (e.g. printing)","lastModifiedDate":"2021-08-29"},{"lineNumber":27,"author":{"gitId":"danielsimre"},"content":"     * @param storage An object that handles all save/load related functionality.","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"danielsimre"},"content":"     * @return The input task list with an output message.","lastModifiedDate":"2021-09-03"},{"lineNumber":29,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"danielsimre"},"content":"    @Override","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"danielsimre"},"content":"    public TaskList execute(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-02"},{"lineNumber":32,"author":{"gitId":"danielsimre"},"content":"        String message \u003d \"\";","lastModifiedDate":"2021-09-03"},{"lineNumber":33,"author":{"gitId":"danielsimre"},"content":"        message +\u003d ui.showMessage(\"Here are the tasks occurring within this time period:\");","lastModifiedDate":"2021-09-03"},{"lineNumber":34,"author":{"gitId":"danielsimre"},"content":"        message +\u003d ui.showMessage(taskList.getDueTasks(input).toString());","lastModifiedDate":"2021-09-03"},{"lineNumber":35,"author":{"gitId":"danielsimre"},"content":"        return new TaskList(taskList, message);","lastModifiedDate":"2021-09-03"},{"lineNumber":36,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"danielsimre"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"danielsimre":37}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"package duke.command;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"import duke.util.Storage;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":"import duke.util.Ui;","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"danielsimre"},"content":"/**","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":" * A class that represents the command when the user types in \u0027find\u0027.","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":" */","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":"     * Creates a FindCommand, which relies on user inputs to function.","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"     * @param input A string containing the user\u0027s input.","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":"    public FindCommand(String input) {","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":"        super(input);","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"danielsimre"},"content":"     * Displays all tasks that contain a phrase given by the user.","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"     * @param taskList   The current list of tasks from the user.","lastModifiedDate":"2021-09-02"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"     * @param ui      An object that handles all UI related functionality. (e.g. printing)","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"     * @param storage An object that handles all save/load related functionality.","lastModifiedDate":"2021-08-29"},{"lineNumber":27,"author":{"gitId":"danielsimre"},"content":"     * @return The input task list with an output message.","lastModifiedDate":"2021-09-03"},{"lineNumber":28,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"danielsimre"},"content":"    @Override","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"danielsimre"},"content":"    public TaskList execute(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-02"},{"lineNumber":31,"author":{"gitId":"danielsimre"},"content":"        String message \u003d \"\";","lastModifiedDate":"2021-09-03"},{"lineNumber":32,"author":{"gitId":"danielsimre"},"content":"        message +\u003d ui.showMessage(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2021-09-03"},{"lineNumber":33,"author":{"gitId":"danielsimre"},"content":"        message +\u003d ui.showMessage(taskList.findTasks(input).toString());","lastModifiedDate":"2021-09-03"},{"lineNumber":34,"author":{"gitId":"danielsimre"},"content":"        return new TaskList(taskList, message);","lastModifiedDate":"2021-09-03"},{"lineNumber":35,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"danielsimre"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"danielsimre":36}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"package duke.command;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"import duke.util.Storage;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":"import duke.util.Ui;","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"danielsimre"},"content":"/**","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":" * A class that represents the command when the user types in \u0027list\u0027.","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":" */","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":"     * Displays all tasks in the user\u0027s task list.","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"     * @param taskList   The current list of tasks from the user.","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":"     * @param ui      An object that handles all UI related functionality. (e.g. printing)","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":"     * @param storage An object that handles all save/load related functionality.","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":"     * @return The input task list with an output message.","lastModifiedDate":"2021-09-03"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":"    @Override","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"    public TaskList execute(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-02"},{"lineNumber":22,"author":{"gitId":"danielsimre"},"content":"        String message \u003d \"\";","lastModifiedDate":"2021-09-03"},{"lineNumber":23,"author":{"gitId":"danielsimre"},"content":"        message +\u003d ui.showMessage(\"Here is your task list:\");","lastModifiedDate":"2021-09-03"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"        message +\u003d ui.showMessage(taskList.toString());","lastModifiedDate":"2021-09-03"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"        return new TaskList(taskList, message);","lastModifiedDate":"2021-09-03"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"danielsimre"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"danielsimre":27}},{"path":"src/main/java/duke/command/OnDateCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"package duke.command;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"import duke.util.Storage;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":"import duke.util.Ui;","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"danielsimre"},"content":"/**","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":" * A class that represents the command when the user types in \u0027ondate\u0027.","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":" */","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":"public class OnDateCommand extends Command {","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":"     * Creates an OnDateCommand, which relies on user inputs to function.","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"     * @param input A string containing the user\u0027s input.","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":"    public OnDateCommand(String input) {","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":"        super(input);","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"danielsimre"},"content":"     * Displays all tasks due on a specific date.","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"     * @param taskList   The current list of tasks from the user.","lastModifiedDate":"2021-09-02"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"     * @param ui      An object that handles all UI related functionality. (e.g. printing)","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"     * @param storage An object that handles all save/load related functionality.","lastModifiedDate":"2021-08-29"},{"lineNumber":27,"author":{"gitId":"danielsimre"},"content":"     * @return The input task list with an output message.","lastModifiedDate":"2021-09-03"},{"lineNumber":28,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"danielsimre"},"content":"    @Override","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"danielsimre"},"content":"    public TaskList execute(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-02"},{"lineNumber":31,"author":{"gitId":"danielsimre"},"content":"        String message \u003d \"\";","lastModifiedDate":"2021-09-03"},{"lineNumber":32,"author":{"gitId":"danielsimre"},"content":"        message +\u003d ui.showMessage(\"Here are the tasks occurring on this date:\");","lastModifiedDate":"2021-09-03"},{"lineNumber":33,"author":{"gitId":"danielsimre"},"content":"        message +\u003d ui.showMessage(taskList.getOnDateTasks(input).toString());","lastModifiedDate":"2021-09-03"},{"lineNumber":34,"author":{"gitId":"danielsimre"},"content":"        return new TaskList(taskList, message);","lastModifiedDate":"2021-09-03"},{"lineNumber":35,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"danielsimre"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"danielsimre":36}},{"path":"src/main/java/duke/controller/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"package duke.controller;","lastModifiedDate":"2021-09-02"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"import java.util.Collections;","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"danielsimre"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":"import javafx.scene.Node;","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-09-02"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"import javafx.scene.text.Text;","lastModifiedDate":"2021-09-03"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":"import javafx.scene.text.TextAlignment;","lastModifiedDate":"2021-09-03"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":"/**","lastModifiedDate":"2021-09-02"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2021-09-02"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2021-09-02"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":" * containing text from the speaker.","lastModifiedDate":"2021-09-02"},{"lineNumber":22,"author":{"gitId":"danielsimre"},"content":" */","lastModifiedDate":"2021-09-02"},{"lineNumber":23,"author":{"gitId":"danielsimre"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2021-09-02"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"    @FXML","lastModifiedDate":"2021-09-02"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"    private Text dialog;","lastModifiedDate":"2021-09-03"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"    @FXML","lastModifiedDate":"2021-09-02"},{"lineNumber":27,"author":{"gitId":"danielsimre"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2021-09-02"},{"lineNumber":28,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":29,"author":{"gitId":"danielsimre"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2021-09-02"},{"lineNumber":30,"author":{"gitId":"danielsimre"},"content":"        try {","lastModifiedDate":"2021-09-02"},{"lineNumber":31,"author":{"gitId":"danielsimre"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2021-09-02"},{"lineNumber":32,"author":{"gitId":"danielsimre"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2021-09-02"},{"lineNumber":33,"author":{"gitId":"danielsimre"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2021-09-02"},{"lineNumber":34,"author":{"gitId":"danielsimre"},"content":"            fxmlLoader.load();","lastModifiedDate":"2021-09-02"},{"lineNumber":35,"author":{"gitId":"danielsimre"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-02"},{"lineNumber":36,"author":{"gitId":"danielsimre"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-09-02"},{"lineNumber":37,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-09-02"},{"lineNumber":38,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":39,"author":{"gitId":"danielsimre"},"content":"        dialog.setText(text);","lastModifiedDate":"2021-09-02"},{"lineNumber":40,"author":{"gitId":"danielsimre"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2021-09-02"},{"lineNumber":41,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":42,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":43,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":44,"author":{"gitId":"danielsimre"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2021-09-02"},{"lineNumber":45,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":46,"author":{"gitId":"danielsimre"},"content":"    private void flip() {","lastModifiedDate":"2021-09-02"},{"lineNumber":47,"author":{"gitId":"danielsimre"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2021-09-02"},{"lineNumber":48,"author":{"gitId":"danielsimre"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2021-09-02"},{"lineNumber":49,"author":{"gitId":"danielsimre"},"content":"        dialog.setTextAlignment(TextAlignment.LEFT);","lastModifiedDate":"2021-09-03"},{"lineNumber":50,"author":{"gitId":"danielsimre"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2021-09-02"},{"lineNumber":51,"author":{"gitId":"danielsimre"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2021-09-02"},{"lineNumber":52,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":53,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":54,"author":{"gitId":"danielsimre"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2021-09-02"},{"lineNumber":55,"author":{"gitId":"danielsimre"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2021-09-02"},{"lineNumber":56,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":57,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":58,"author":{"gitId":"danielsimre"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2021-09-02"},{"lineNumber":59,"author":{"gitId":"danielsimre"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2021-09-02"},{"lineNumber":60,"author":{"gitId":"danielsimre"},"content":"        db.flip();","lastModifiedDate":"2021-09-02"},{"lineNumber":61,"author":{"gitId":"danielsimre"},"content":"        return db;","lastModifiedDate":"2021-09-02"},{"lineNumber":62,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":63,"author":{"gitId":"danielsimre"},"content":"}","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"danielsimre":63}},{"path":"src/main/java/duke/controller/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"package duke.controller;","lastModifiedDate":"2021-09-02"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"import javafx.application.Platform;","lastModifiedDate":"2021-09-03"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"danielsimre"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2021-09-03"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":"import duke.Duke;","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":"/**","lastModifiedDate":"2021-09-02"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2021-09-02"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":" */","lastModifiedDate":"2021-09-02"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":"public class MainWindow extends Stage {","lastModifiedDate":"2021-09-03"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":"    @FXML","lastModifiedDate":"2021-09-03"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"    private AnchorPane anchorPane;","lastModifiedDate":"2021-09-03"},{"lineNumber":22,"author":{"gitId":"danielsimre"},"content":"    @FXML","lastModifiedDate":"2021-09-02"},{"lineNumber":23,"author":{"gitId":"danielsimre"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2021-09-02"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"    @FXML","lastModifiedDate":"2021-09-02"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2021-09-02"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"    @FXML","lastModifiedDate":"2021-09-02"},{"lineNumber":27,"author":{"gitId":"danielsimre"},"content":"    private TextField userInput;","lastModifiedDate":"2021-09-02"},{"lineNumber":28,"author":{"gitId":"danielsimre"},"content":"    @FXML","lastModifiedDate":"2021-09-02"},{"lineNumber":29,"author":{"gitId":"danielsimre"},"content":"    private Button sendButton;","lastModifiedDate":"2021-09-02"},{"lineNumber":30,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":31,"author":{"gitId":"danielsimre"},"content":"    private Duke duke;","lastModifiedDate":"2021-09-02"},{"lineNumber":32,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":33,"author":{"gitId":"danielsimre"},"content":"    private final Image userImage \u003d","lastModifiedDate":"2021-09-02"},{"lineNumber":34,"author":{"gitId":"danielsimre"},"content":"            new Image(this.getClass().getResourceAsStream(\"/images/TakeNRG.png\"));","lastModifiedDate":"2021-09-02"},{"lineNumber":35,"author":{"gitId":"danielsimre"},"content":"    private final Image dukeImage \u003d","lastModifiedDate":"2021-09-02"},{"lineNumber":36,"author":{"gitId":"danielsimre"},"content":"            new Image(this.getClass().getResourceAsStream(\"/images/GivePLZ.png\"));","lastModifiedDate":"2021-09-02"},{"lineNumber":37,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":38,"author":{"gitId":"danielsimre"},"content":"    @FXML","lastModifiedDate":"2021-09-02"},{"lineNumber":39,"author":{"gitId":"danielsimre"},"content":"    public void initialize() {","lastModifiedDate":"2021-09-02"},{"lineNumber":40,"author":{"gitId":"danielsimre"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2021-09-02"},{"lineNumber":41,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":42,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":43,"author":{"gitId":"danielsimre"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2021-09-02"},{"lineNumber":44,"author":{"gitId":"danielsimre"},"content":"        duke \u003d d;","lastModifiedDate":"2021-09-02"},{"lineNumber":45,"author":{"gitId":"danielsimre"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2021-09-03"},{"lineNumber":46,"author":{"gitId":"danielsimre"},"content":"                DialogBox.getDukeDialog(duke.getInitMessage(), dukeImage)","lastModifiedDate":"2021-09-03"},{"lineNumber":47,"author":{"gitId":"danielsimre"},"content":"        );","lastModifiedDate":"2021-09-03"},{"lineNumber":48,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":49,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":50,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":51,"author":{"gitId":"danielsimre"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2021-09-02"},{"lineNumber":52,"author":{"gitId":"danielsimre"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2021-09-02"},{"lineNumber":53,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":54,"author":{"gitId":"danielsimre"},"content":"    @FXML","lastModifiedDate":"2021-09-02"},{"lineNumber":55,"author":{"gitId":"danielsimre"},"content":"    private void handleUserInput() {","lastModifiedDate":"2021-09-02"},{"lineNumber":56,"author":{"gitId":"danielsimre"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2021-09-02"},{"lineNumber":57,"author":{"gitId":"danielsimre"},"content":"        String response \u003d duke.getResponse(input);","lastModifiedDate":"2021-09-02"},{"lineNumber":58,"author":{"gitId":"danielsimre"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2021-09-02"},{"lineNumber":59,"author":{"gitId":"danielsimre"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2021-09-02"},{"lineNumber":60,"author":{"gitId":"danielsimre"},"content":"                DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2021-09-02"},{"lineNumber":61,"author":{"gitId":"danielsimre"},"content":"        );","lastModifiedDate":"2021-09-02"},{"lineNumber":62,"author":{"gitId":"danielsimre"},"content":"        userInput.clear();","lastModifiedDate":"2021-09-02"},{"lineNumber":63,"author":{"gitId":"danielsimre"},"content":"        if (duke.getIsTerminated()) {","lastModifiedDate":"2021-09-03"},{"lineNumber":64,"author":{"gitId":"danielsimre"},"content":"            Platform.exit();","lastModifiedDate":"2021-09-03"},{"lineNumber":65,"author":{"gitId":"danielsimre"},"content":"            System.exit(0);","lastModifiedDate":"2021-09-03"},{"lineNumber":66,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-09-03"},{"lineNumber":67,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":68,"author":{"gitId":"danielsimre"},"content":"}","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"danielsimre":68}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"package duke.task;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":" * A class that represents a task that is to be done by a certain date and time.","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":"    private final LocalDate date;","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":"    private final LocalTime time;","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":"     * Creates a deadline task with a task name, date and time.","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":"     * @param taskName Short description of the task.","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":"     * @param date     Date for the deadline.","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":"     * @param time     Time for the deadline.","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"danielsimre"},"content":"    public Deadline(String taskName, LocalDate date, LocalTime time) {","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"danielsimre"},"content":"        super(taskName);","lastModifiedDate":"2021-08-18"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"        this.date \u003d date;","lastModifiedDate":"2021-08-18"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"        this.time \u003d time;","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":27,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":28,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"danielsimre"},"content":"     * Creates a deadline task with a task name, date, time, and whether or not the task is done.","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"danielsimre"},"content":"     * @param taskName Short description of the task.","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"danielsimre"},"content":"     * @param isDone   Boolean that represents whether or not the task is done.","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"danielsimre"},"content":"     * @param date     Date for the deadline.","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"danielsimre"},"content":"     * @param time     Time for the deadline.","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"danielsimre"},"content":"    public Deadline(String taskName, boolean isDone,","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"danielsimre"},"content":"                    LocalDate date, LocalTime time) {","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"danielsimre"},"content":"        super(taskName, isDone);","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"danielsimre"},"content":"        this.date \u003d date;","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"danielsimre"},"content":"        this.time \u003d time;","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"danielsimre"},"content":"     * Checks if the current task has the same date as the input date.","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"danielsimre"},"content":"     * @param date A LocalDate object that contains date information.","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"danielsimre"},"content":"     * @return True if the input date and the task\u0027s dates are equal, false otherwise.","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"danielsimre"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"danielsimre"},"content":"    public boolean hasSameDate(LocalDate date) {","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"danielsimre"},"content":"        return this.date.equals(date);","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"danielsimre"},"content":"     * Checks if the current task occurs before the input date and time.","lastModifiedDate":"2021-08-26"},{"lineNumber":56,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":57,"author":{"gitId":"danielsimre"},"content":"     * @param dateTime A LocalDateTime object that contains date and time information.","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"danielsimre"},"content":"     * @return True if the task occurs before the input date, false otherwise.","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"danielsimre"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"danielsimre"},"content":"    public boolean isBeforeDate(LocalDateTime dateTime) {","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"danielsimre"},"content":"        // Will also return true if the date times are equal","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"danielsimre"},"content":"        return !date.atTime(time).isAfter(dateTime);","lastModifiedDate":"2021-08-29"},{"lineNumber":64,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":67,"author":{"gitId":"danielsimre"},"content":"     * Converts the deadline task data into its corresponding save file data format.","lastModifiedDate":"2021-08-29"},{"lineNumber":68,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":69,"author":{"gitId":"danielsimre"},"content":"     * @return A string to represent the data of the deadline task in the save file.","lastModifiedDate":"2021-08-29"},{"lineNumber":70,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":71,"author":{"gitId":"danielsimre"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"danielsimre"},"content":"    public String toSaveData() {","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"danielsimre"},"content":"        return \"D|\" + super.toSaveData() + \"|\" + date + \"|\" + time;","lastModifiedDate":"2021-08-29"},{"lineNumber":74,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":76,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":77,"author":{"gitId":"danielsimre"},"content":"     * Marks the current task as done. Returns a new instance of the task to maintain immutability.","lastModifiedDate":"2021-08-29"},{"lineNumber":78,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":79,"author":{"gitId":"danielsimre"},"content":"     * @return A task with the same task name, date and time but is marked as done.","lastModifiedDate":"2021-08-29"},{"lineNumber":80,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":81,"author":{"gitId":"danielsimre"},"content":"    @Override","lastModifiedDate":"2021-08-26"},{"lineNumber":82,"author":{"gitId":"danielsimre"},"content":"    public Task markAsDone() {","lastModifiedDate":"2021-08-26"},{"lineNumber":83,"author":{"gitId":"danielsimre"},"content":"        return new Deadline(taskName, true, date, time);","lastModifiedDate":"2021-08-29"},{"lineNumber":84,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":85,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":86,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":87,"author":{"gitId":"danielsimre"},"content":"     * Returns a string representation of the current deadline task.","lastModifiedDate":"2021-08-29"},{"lineNumber":88,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":89,"author":{"gitId":"danielsimre"},"content":"     * @return A string that contains the information of the deadline task.","lastModifiedDate":"2021-08-29"},{"lineNumber":90,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":91,"author":{"gitId":"danielsimre"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":92,"author":{"gitId":"danielsimre"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":93,"author":{"gitId":"danielsimre"},"content":"        String formattedDate \u003d date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2021-08-29"},{"lineNumber":94,"author":{"gitId":"danielsimre"},"content":"        String formattedTime \u003d time.format(DateTimeFormatter.ofPattern(\"hh:mm a\"));","lastModifiedDate":"2021-08-29"},{"lineNumber":95,"author":{"gitId":"danielsimre"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + formattedDate + \", \" + formattedTime + \")\";","lastModifiedDate":"2021-08-25"},{"lineNumber":96,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":97,"author":{"gitId":"danielsimre"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"danielsimre":97}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"package duke.task;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":"import duke.util.DukeException;","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":" * A class that represents a task that occurs on a certain date, from a start to end time.","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"    private final LocalDate date;","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"    private final LocalTime startTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":"    private final LocalTime endTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":"     * Creates an event task with a task name, date, start time and end time.","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"     * @param taskName  Short description of the task.","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"danielsimre"},"content":"     * @param date      Date for the event.","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"danielsimre"},"content":"     * @param startTime Start time for the event.","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"     * @param endTime   End time for the event.","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"     * @throws DukeException If start time is later or equal to the end time.","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"danielsimre"},"content":"    public Event(String taskName, LocalDate date,","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"danielsimre"},"content":"                 LocalTime startTime, LocalTime endTime) throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"danielsimre"},"content":"        super(taskName);","lastModifiedDate":"2021-08-18"},{"lineNumber":30,"author":{"gitId":"danielsimre"},"content":"        // If start time is greater than or equal to end time, throw exception","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"danielsimre"},"content":"        if (startTime.compareTo(endTime) \u003e\u003d 0) {","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"danielsimre"},"content":"            throw new DukeException(\"Start time of event cannot be later or equal to end time.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"danielsimre"},"content":"        this.date \u003d date;","lastModifiedDate":"2021-08-18"},{"lineNumber":35,"author":{"gitId":"danielsimre"},"content":"        this.startTime \u003d startTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"danielsimre"},"content":"        this.endTime \u003d endTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":38,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":39,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"danielsimre"},"content":"     * Creates an event task with a task name, date, start time, end time,","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"danielsimre"},"content":"     * and whether or not the task is done.","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"danielsimre"},"content":"     * @param taskName  Short description of the task.","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"danielsimre"},"content":"     * @param isDone    Boolean that represents whether or not the task is done.","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"danielsimre"},"content":"     * @param date      Date for the event.","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"danielsimre"},"content":"     * @param startTime Start time for the event.","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"danielsimre"},"content":"     * @param endTime   End time for the event.","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"danielsimre"},"content":"     * @throws DukeException If start time is later or equal to the end time.","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"danielsimre"},"content":"    public Event(String taskName, boolean isDone, LocalDate date,","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"danielsimre"},"content":"                 LocalTime startTime, LocalTime endTime) throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"danielsimre"},"content":"        super(taskName, isDone);","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"danielsimre"},"content":"        // If start time is greater than or equal to end time, throw exception","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"danielsimre"},"content":"        if (startTime.compareTo(endTime) \u003e\u003d 0) {","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"danielsimre"},"content":"            throw new DukeException(\"Start time of event cannot be later or equal to end time.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"danielsimre"},"content":"        this.date \u003d date;","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"danielsimre"},"content":"        this.startTime \u003d startTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"danielsimre"},"content":"        this.endTime \u003d endTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":63,"author":{"gitId":"danielsimre"},"content":"     * Checks if the current task has the same date as the input date.","lastModifiedDate":"2021-08-26"},{"lineNumber":64,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":65,"author":{"gitId":"danielsimre"},"content":"     * @param date A LocalDate object that contains date information.","lastModifiedDate":"2021-08-26"},{"lineNumber":66,"author":{"gitId":"danielsimre"},"content":"     * @return True if the input date and the task\u0027s dates are equal, false otherwise.","lastModifiedDate":"2021-08-26"},{"lineNumber":67,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":68,"author":{"gitId":"danielsimre"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"danielsimre"},"content":"    public boolean hasSameDate(LocalDate date) {","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"danielsimre"},"content":"        return this.date.equals(date);","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":74,"author":{"gitId":"danielsimre"},"content":"     * Checks if the current task occurs before the input date and time.","lastModifiedDate":"2021-08-26"},{"lineNumber":75,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":76,"author":{"gitId":"danielsimre"},"content":"     * @param dateTime A LocalDateTime object that contains date and time information.","lastModifiedDate":"2021-08-26"},{"lineNumber":77,"author":{"gitId":"danielsimre"},"content":"     * @return True if the task occurs before the input date, false otherwise.","lastModifiedDate":"2021-08-26"},{"lineNumber":78,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":79,"author":{"gitId":"danielsimre"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":80,"author":{"gitId":"danielsimre"},"content":"    public boolean isBeforeDate(LocalDateTime dateTime) {","lastModifiedDate":"2021-08-25"},{"lineNumber":81,"author":{"gitId":"danielsimre"},"content":"        // Will also return true if the date times are equal","lastModifiedDate":"2021-08-25"},{"lineNumber":82,"author":{"gitId":"danielsimre"},"content":"        return !date.atTime(startTime).isAfter(dateTime);","lastModifiedDate":"2021-08-29"},{"lineNumber":83,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":84,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":85,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":86,"author":{"gitId":"danielsimre"},"content":"     * Converts the event task data into its corresponding save file data format.","lastModifiedDate":"2021-08-29"},{"lineNumber":87,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":88,"author":{"gitId":"danielsimre"},"content":"     * @return A string to represent the data of the event task in the save file.","lastModifiedDate":"2021-08-29"},{"lineNumber":89,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":90,"author":{"gitId":"danielsimre"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":91,"author":{"gitId":"danielsimre"},"content":"    public String toSaveData() {","lastModifiedDate":"2021-08-25"},{"lineNumber":92,"author":{"gitId":"danielsimre"},"content":"        return \"E|\" + super.toSaveData() + \"|\" + date","lastModifiedDate":"2021-08-29"},{"lineNumber":93,"author":{"gitId":"danielsimre"},"content":"                + \"|\" + startTime + \"|\" + endTime;","lastModifiedDate":"2021-08-29"},{"lineNumber":94,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":95,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":96,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":97,"author":{"gitId":"danielsimre"},"content":"     * Marks the current task as done. Returns a new instance of the task to maintain immutability.","lastModifiedDate":"2021-08-29"},{"lineNumber":98,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":99,"author":{"gitId":"danielsimre"},"content":"     * @return A task with the same task name, date and times but is marked as done.","lastModifiedDate":"2021-08-29"},{"lineNumber":100,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":101,"author":{"gitId":"danielsimre"},"content":"    @Override","lastModifiedDate":"2021-08-26"},{"lineNumber":102,"author":{"gitId":"danielsimre"},"content":"    public Task markAsDone() {","lastModifiedDate":"2021-08-26"},{"lineNumber":103,"author":{"gitId":"danielsimre"},"content":"        return new Event(taskName, true, date, startTime, endTime);","lastModifiedDate":"2021-08-29"},{"lineNumber":104,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":105,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":106,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":107,"author":{"gitId":"danielsimre"},"content":"     * Returns a string representation of the current event task.","lastModifiedDate":"2021-08-29"},{"lineNumber":108,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":109,"author":{"gitId":"danielsimre"},"content":"     * @return A string that contains the information of the event task.","lastModifiedDate":"2021-08-29"},{"lineNumber":110,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":111,"author":{"gitId":"danielsimre"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":112,"author":{"gitId":"danielsimre"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":113,"author":{"gitId":"danielsimre"},"content":"        String formattedDate \u003d date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2021-08-29"},{"lineNumber":114,"author":{"gitId":"danielsimre"},"content":"        String formattedStartTime \u003d startTime.format(DateTimeFormatter.ofPattern(\"hh:mm a\"));","lastModifiedDate":"2021-08-29"},{"lineNumber":115,"author":{"gitId":"danielsimre"},"content":"        String formattedEndTime \u003d endTime.format(DateTimeFormatter.ofPattern(\"hh:mm a\"));","lastModifiedDate":"2021-08-29"},{"lineNumber":116,"author":{"gitId":"danielsimre"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + formattedDate + \", \"","lastModifiedDate":"2021-08-25"},{"lineNumber":117,"author":{"gitId":"danielsimre"},"content":"                + formattedStartTime + \" - \" + formattedEndTime + \")\";","lastModifiedDate":"2021-08-25"},{"lineNumber":118,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":119,"author":{"gitId":"danielsimre"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"danielsimre":119}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"package duke.task;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"danielsimre"},"content":" * A class that contains the base functionality for a task.","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":"public class Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":"    protected final String taskName;","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"     * Creates a task with a task name.","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":"     * @param taskName Short description of the task.","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":"    public Task(String taskName) {","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":"        this.taskName \u003d taskName;","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"     * Creates a task with a task name and whether or not the task is done.","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"     * @param taskName Short description of the task.","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"danielsimre"},"content":"     * @param isDone   Boolean that represents whether or not the task is done.","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"danielsimre"},"content":"    public Task(String taskName, boolean isDone) {","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"danielsimre"},"content":"        this.taskName \u003d taskName;","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"danielsimre"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"danielsimre"},"content":"     * Checks if the current task contains a given key phrase within its name.","lastModifiedDate":"2021-08-29"},{"lineNumber":36,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"danielsimre"},"content":"     * @param phrase A string that is to be check against the task name.","lastModifiedDate":"2021-08-29"},{"lineNumber":38,"author":{"gitId":"danielsimre"},"content":"     * @return True if the task name contains this phrase, false otherwise.","lastModifiedDate":"2021-08-29"},{"lineNumber":39,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"danielsimre"},"content":"    public boolean containsPhrase(String phrase) {","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"danielsimre"},"content":"        return taskName.contains(phrase);","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":45,"author":{"gitId":"danielsimre"},"content":"     * Checks if the current task has the same date as the input date.","lastModifiedDate":"2021-08-29"},{"lineNumber":46,"author":{"gitId":"danielsimre"},"content":"     * Proper functionality is present in the Deadline and Event classes.","lastModifiedDate":"2021-08-29"},{"lineNumber":47,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":48,"author":{"gitId":"danielsimre"},"content":"     * @param date A LocalDate object that contains date information.","lastModifiedDate":"2021-08-29"},{"lineNumber":49,"author":{"gitId":"danielsimre"},"content":"     * @return False, since this class does not contain a date attribute.","lastModifiedDate":"2021-08-29"},{"lineNumber":50,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":51,"author":{"gitId":"danielsimre"},"content":"    public boolean hasSameDate(LocalDate date) {","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"danielsimre"},"content":"        return false;","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":56,"author":{"gitId":"danielsimre"},"content":"     * Checks if the current task occurs before the input date and time.","lastModifiedDate":"2021-08-26"},{"lineNumber":57,"author":{"gitId":"danielsimre"},"content":"     * Proper functionality is present in the Deadline and Event classes.","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"danielsimre"},"content":"     * @param dateTime A LocalDateTime object that contains date and time information.","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"danielsimre"},"content":"     * @return False, since this class does not contain date/time attributes.","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"danielsimre"},"content":"    public boolean isBeforeDate(LocalDateTime dateTime) {","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"danielsimre"},"content":"        return false;","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":67,"author":{"gitId":"danielsimre"},"content":"     * Marks the current task as done. Returns a new instance of the task to maintain immutability.","lastModifiedDate":"2021-08-26"},{"lineNumber":68,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":69,"author":{"gitId":"danielsimre"},"content":"     * @return A task with the same task name, but is marked as done.","lastModifiedDate":"2021-08-26"},{"lineNumber":70,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":71,"author":{"gitId":"danielsimre"},"content":"    public Task markAsDone() {","lastModifiedDate":"2021-08-26"},{"lineNumber":72,"author":{"gitId":"danielsimre"},"content":"        return new Task(taskName, true);","lastModifiedDate":"2021-08-29"},{"lineNumber":73,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":74,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":75,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":76,"author":{"gitId":"danielsimre"},"content":"     * Converts the task data into its corresponding save file data format.","lastModifiedDate":"2021-08-29"},{"lineNumber":77,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":78,"author":{"gitId":"danielsimre"},"content":"     * @return A string to represent the data of the task in the save file.","lastModifiedDate":"2021-08-26"},{"lineNumber":79,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":80,"author":{"gitId":"danielsimre"},"content":"    public String toSaveData() {","lastModifiedDate":"2021-08-26"},{"lineNumber":81,"author":{"gitId":"danielsimre"},"content":"        return isDone + \"|\" + taskName;","lastModifiedDate":"2021-08-29"},{"lineNumber":82,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":83,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":84,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":85,"author":{"gitId":"danielsimre"},"content":"     * Returns a string representation of the current task.","lastModifiedDate":"2021-08-29"},{"lineNumber":86,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":87,"author":{"gitId":"danielsimre"},"content":"     * @return A string that contains the information of the task.","lastModifiedDate":"2021-08-26"},{"lineNumber":88,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":89,"author":{"gitId":"danielsimre"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":90,"author":{"gitId":"danielsimre"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":91,"author":{"gitId":"danielsimre"},"content":"        String statusString \u003d isDone ? \"X\" : \" \";","lastModifiedDate":"2021-08-29"},{"lineNumber":92,"author":{"gitId":"danielsimre"},"content":"        return String.format(\"[%s] %s\", statusString, taskName);","lastModifiedDate":"2021-08-29"},{"lineNumber":93,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":94,"author":{"gitId":"danielsimre"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"danielsimre":94}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"package duke.task;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":"import java.util.List;","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"danielsimre"},"content":"import java.util.function.Consumer;","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":"import duke.util.DukeException;","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":"import duke.util.Parser;","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":"import duke.util.Ui;","lastModifiedDate":"2021-09-02"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":" * A class that contains the base functionality for a task list,","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":" * including adding, deleting, listing, and marking tasks as done.","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":"public class TaskList {","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":"    private final List\u003cTask\u003e tasks;","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":"    private final String recentMessage;","lastModifiedDate":"2021-09-03"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"danielsimre"},"content":"     * Creates a task list with no tasks.","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"    public TaskList() {","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"        tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-29"},{"lineNumber":27,"author":{"gitId":"danielsimre"},"content":"        recentMessage \u003d \"\";","lastModifiedDate":"2021-09-03"},{"lineNumber":28,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"danielsimre"},"content":"     * Creates a task list with a given list of tasks and a message.","lastModifiedDate":"2021-09-03"},{"lineNumber":32,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"danielsimre"},"content":"     * @param tasks A list of tasks.","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"danielsimre"},"content":"    public TaskList(List\u003cTask\u003e tasks) {","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"danielsimre"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e(tasks);","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"danielsimre"},"content":"        this.recentMessage \u003d \"\";","lastModifiedDate":"2021-09-03"},{"lineNumber":38,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-09-03"},{"lineNumber":39,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":40,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-09-03"},{"lineNumber":41,"author":{"gitId":"danielsimre"},"content":"     * Creates a task list with a given list of tasks and a message.","lastModifiedDate":"2021-09-03"},{"lineNumber":42,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-09-03"},{"lineNumber":43,"author":{"gitId":"danielsimre"},"content":"     * @param tasks         A list of tasks.","lastModifiedDate":"2021-09-03"},{"lineNumber":44,"author":{"gitId":"danielsimre"},"content":"     * @param recentMessage A string generated from running a command.","lastModifiedDate":"2021-09-03"},{"lineNumber":45,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-09-03"},{"lineNumber":46,"author":{"gitId":"danielsimre"},"content":"    public TaskList(List\u003cTask\u003e tasks, String recentMessage) {","lastModifiedDate":"2021-09-03"},{"lineNumber":47,"author":{"gitId":"danielsimre"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e(tasks);","lastModifiedDate":"2021-09-03"},{"lineNumber":48,"author":{"gitId":"danielsimre"},"content":"        this.recentMessage \u003d recentMessage;","lastModifiedDate":"2021-09-03"},{"lineNumber":49,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-09-03"},{"lineNumber":50,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":51,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-09-03"},{"lineNumber":52,"author":{"gitId":"danielsimre"},"content":"     * Creates a task list with a given TaskList and a message.","lastModifiedDate":"2021-09-03"},{"lineNumber":53,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-09-03"},{"lineNumber":54,"author":{"gitId":"danielsimre"},"content":"     * @param otherTaskList A TaskList object representing a list of tasks.","lastModifiedDate":"2021-09-03"},{"lineNumber":55,"author":{"gitId":"danielsimre"},"content":"     * @param recentMessage A string generated from running a command.","lastModifiedDate":"2021-09-03"},{"lineNumber":56,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-09-03"},{"lineNumber":57,"author":{"gitId":"danielsimre"},"content":"    public TaskList(TaskList otherTaskList, String recentMessage) {","lastModifiedDate":"2021-09-03"},{"lineNumber":58,"author":{"gitId":"danielsimre"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e(otherTaskList.tasks);","lastModifiedDate":"2021-09-03"},{"lineNumber":59,"author":{"gitId":"danielsimre"},"content":"        this.recentMessage \u003d recentMessage;","lastModifiedDate":"2021-09-03"},{"lineNumber":60,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":63,"author":{"gitId":"danielsimre"},"content":"     * Applies a function to every task in the task list.","lastModifiedDate":"2021-08-26"},{"lineNumber":64,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":65,"author":{"gitId":"danielsimre"},"content":"     * @param consumer A function that is to be applied to each task in the list.","lastModifiedDate":"2021-08-26"},{"lineNumber":66,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":67,"author":{"gitId":"danielsimre"},"content":"    public void forEach(Consumer\u003c? super Task\u003e consumer) {","lastModifiedDate":"2021-08-26"},{"lineNumber":68,"author":{"gitId":"danielsimre"},"content":"        tasks.forEach(consumer);","lastModifiedDate":"2021-08-26"},{"lineNumber":69,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":70,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":71,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":72,"author":{"gitId":"danielsimre"},"content":"     * Adds a task to the task list with a task name.","lastModifiedDate":"2021-08-26"},{"lineNumber":73,"author":{"gitId":"danielsimre"},"content":"     * Task is either a todo, deadline or event task depending on the input.","lastModifiedDate":"2021-08-26"},{"lineNumber":74,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":75,"author":{"gitId":"danielsimre"},"content":"     * @param input String containing user input.","lastModifiedDate":"2021-08-26"},{"lineNumber":76,"author":{"gitId":"danielsimre"},"content":"     * @param ui    Object that handles user interface functionality. (e.g. printing)","lastModifiedDate":"2021-08-26"},{"lineNumber":77,"author":{"gitId":"danielsimre"},"content":"     * @return A new TaskList instance containing the new task and an output message.","lastModifiedDate":"2021-09-03"},{"lineNumber":78,"author":{"gitId":"danielsimre"},"content":"     * @throws DukeException If input contains |, or is in an invalid format.","lastModifiedDate":"2021-08-26"},{"lineNumber":79,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":80,"author":{"gitId":"danielsimre"},"content":"    public TaskList addTask(String input, Ui ui) throws DukeException {","lastModifiedDate":"2021-08-26"},{"lineNumber":81,"author":{"gitId":"danielsimre"},"content":"        List\u003cTask\u003e newTasks \u003d new ArrayList\u003c\u003e(tasks);","lastModifiedDate":"2021-09-03"},{"lineNumber":82,"author":{"gitId":"danielsimre"},"content":"        String message \u003d \"\";","lastModifiedDate":"2021-09-03"},{"lineNumber":83,"author":{"gitId":"danielsimre"},"content":"        if (input.contains(\"|\")) {","lastModifiedDate":"2021-08-26"},{"lineNumber":84,"author":{"gitId":"danielsimre"},"content":"            throw new DukeException(\"Input contains |, which is an invalid character.\");","lastModifiedDate":"2021-08-26"},{"lineNumber":85,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":86,"author":{"gitId":"danielsimre"},"content":"        Task task;","lastModifiedDate":"2021-08-26"},{"lineNumber":87,"author":{"gitId":"danielsimre"},"content":"        String commandString \u003d input.split(\" \")[0].toUpperCase();","lastModifiedDate":"2021-08-26"},{"lineNumber":88,"author":{"gitId":"danielsimre"},"content":"        switch (commandString) {","lastModifiedDate":"2021-08-26"},{"lineNumber":89,"author":{"gitId":"danielsimre"},"content":"        case \"TODO\":","lastModifiedDate":"2021-08-26"},{"lineNumber":90,"author":{"gitId":"danielsimre"},"content":"            // Add Todo task","lastModifiedDate":"2021-08-26"},{"lineNumber":91,"author":{"gitId":"danielsimre"},"content":"            if (input.length() \u003c\u003d 5) {","lastModifiedDate":"2021-08-26"},{"lineNumber":92,"author":{"gitId":"danielsimre"},"content":"                throw new DukeException(\"The description of a todo cannot be empty.\");","lastModifiedDate":"2021-08-26"},{"lineNumber":93,"author":{"gitId":"danielsimre"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":94,"author":{"gitId":"danielsimre"},"content":"            task \u003d new Todo(input.substring(5));","lastModifiedDate":"2021-08-26"},{"lineNumber":95,"author":{"gitId":"danielsimre"},"content":"            break;","lastModifiedDate":"2021-08-26"},{"lineNumber":96,"author":{"gitId":"danielsimre"},"content":"        case \"DEADLINE\":","lastModifiedDate":"2021-08-26"},{"lineNumber":97,"author":{"gitId":"danielsimre"},"content":"            // Add Deadline task","lastModifiedDate":"2021-08-26"},{"lineNumber":98,"author":{"gitId":"danielsimre"},"content":"            String errorMessage \u003d \"Command must be in the format: [taskName] /by \"","lastModifiedDate":"2021-08-26"},{"lineNumber":99,"author":{"gitId":"danielsimre"},"content":"                    + \"[date(YYYY-MM-DD)] [time(HH:MM)].\";","lastModifiedDate":"2021-08-26"},{"lineNumber":100,"author":{"gitId":"danielsimre"},"content":"            String[] splitInputs \u003d Parser.splitWith(input, 9, \" /by \", errorMessage);","lastModifiedDate":"2021-09-02"},{"lineNumber":101,"author":{"gitId":"danielsimre"},"content":"            String taskName \u003d splitInputs[0];","lastModifiedDate":"2021-09-02"},{"lineNumber":102,"author":{"gitId":"danielsimre"},"content":"            errorMessage \u003d \"Date and time must be in the format: YYYY-MM-DD HH:MM.\";","lastModifiedDate":"2021-08-26"},{"lineNumber":103,"author":{"gitId":"danielsimre"},"content":"            String[] dateTimeInputs \u003d Parser.splitWith(splitInputs[1], 0, \" \", errorMessage);","lastModifiedDate":"2021-09-02"},{"lineNumber":104,"author":{"gitId":"danielsimre"},"content":"            String date \u003d dateTimeInputs[0];","lastModifiedDate":"2021-09-02"},{"lineNumber":105,"author":{"gitId":"danielsimre"},"content":"            String time \u003d dateTimeInputs[1];","lastModifiedDate":"2021-09-02"},{"lineNumber":106,"author":{"gitId":"danielsimre"},"content":"            task \u003d new Deadline(taskName, Parser.parseDateFromInput(date), Parser.parseTimeFromInput(time));","lastModifiedDate":"2021-08-26"},{"lineNumber":107,"author":{"gitId":"danielsimre"},"content":"            break;","lastModifiedDate":"2021-08-26"},{"lineNumber":108,"author":{"gitId":"danielsimre"},"content":"        default: // default is guaranteed to be event task due to use of enum + outer control flow","lastModifiedDate":"2021-08-26"},{"lineNumber":109,"author":{"gitId":"danielsimre"},"content":"            // Add Event task","lastModifiedDate":"2021-08-26"},{"lineNumber":110,"author":{"gitId":"danielsimre"},"content":"            errorMessage \u003d \"Command must be in the format: [taskName] /at \"","lastModifiedDate":"2021-08-26"},{"lineNumber":111,"author":{"gitId":"danielsimre"},"content":"                    + \"[date(YYYY-MM-DD)] [start time(HH:MM)] [end time(HH:MM)].\";","lastModifiedDate":"2021-08-26"},{"lineNumber":112,"author":{"gitId":"danielsimre"},"content":"            splitInputs \u003d Parser.splitWith(input, 6, \" /at \", errorMessage);","lastModifiedDate":"2021-09-02"},{"lineNumber":113,"author":{"gitId":"danielsimre"},"content":"            taskName \u003d splitInputs[0];","lastModifiedDate":"2021-09-02"},{"lineNumber":114,"author":{"gitId":"danielsimre"},"content":"            errorMessage \u003d \"Date and times must be in the format: YYYY-MM-DD HH:MM HH:MM.\";","lastModifiedDate":"2021-08-26"},{"lineNumber":115,"author":{"gitId":"danielsimre"},"content":"            dateTimeInputs \u003d Parser.splitWith(splitInputs[1], 0, \" \", errorMessage);","lastModifiedDate":"2021-09-02"},{"lineNumber":116,"author":{"gitId":"danielsimre"},"content":"            // If user only input in one time","lastModifiedDate":"2021-08-26"},{"lineNumber":117,"author":{"gitId":"danielsimre"},"content":"            if (dateTimeInputs.length \u003c 3) {","lastModifiedDate":"2021-09-02"},{"lineNumber":118,"author":{"gitId":"danielsimre"},"content":"                throw new DukeException(errorMessage);","lastModifiedDate":"2021-08-26"},{"lineNumber":119,"author":{"gitId":"danielsimre"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":120,"author":{"gitId":"danielsimre"},"content":"            date \u003d dateTimeInputs[0];","lastModifiedDate":"2021-09-02"},{"lineNumber":121,"author":{"gitId":"danielsimre"},"content":"            String startTime \u003d dateTimeInputs[1];","lastModifiedDate":"2021-09-02"},{"lineNumber":122,"author":{"gitId":"danielsimre"},"content":"            String endTime \u003d dateTimeInputs[2];","lastModifiedDate":"2021-09-02"},{"lineNumber":123,"author":{"gitId":"danielsimre"},"content":"            task \u003d new Event(taskName, Parser.parseDateFromInput(date),","lastModifiedDate":"2021-08-26"},{"lineNumber":124,"author":{"gitId":"danielsimre"},"content":"                    Parser.parseTimeFromInput(startTime), Parser.parseTimeFromInput(endTime));","lastModifiedDate":"2021-08-26"},{"lineNumber":125,"author":{"gitId":"danielsimre"},"content":"            break;","lastModifiedDate":"2021-08-26"},{"lineNumber":126,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":127,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":128,"author":{"gitId":"danielsimre"},"content":"        // Common functionality: add task to list, print task and list size, save tasks to file","lastModifiedDate":"2021-08-26"},{"lineNumber":129,"author":{"gitId":"danielsimre"},"content":"        newTasks.add(task);","lastModifiedDate":"2021-09-03"},{"lineNumber":130,"author":{"gitId":"danielsimre"},"content":"        message +\u003d ui.showMessage(\"Got it. The following task has been added: \");","lastModifiedDate":"2021-09-03"},{"lineNumber":131,"author":{"gitId":"danielsimre"},"content":"        message +\u003d ui.showIndentedMessage(task.toString());","lastModifiedDate":"2021-09-03"},{"lineNumber":132,"author":{"gitId":"danielsimre"},"content":"        message +\u003d ui.showMessage(String.format(\"Now you have %d task%s in the list.\",","lastModifiedDate":"2021-09-03"},{"lineNumber":133,"author":{"gitId":"danielsimre"},"content":"                newTasks.size(), newTasks.size() \u003d\u003d 1 ? \"\" : \"s\"));","lastModifiedDate":"2021-09-03"},{"lineNumber":134,"author":{"gitId":"danielsimre"},"content":"        return new TaskList(newTasks, message);","lastModifiedDate":"2021-09-03"},{"lineNumber":135,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":136,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":137,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":138,"author":{"gitId":"danielsimre"},"content":"     * Deletes a task from the task list.","lastModifiedDate":"2021-08-26"},{"lineNumber":139,"author":{"gitId":"danielsimre"},"content":"     * Index of deleted task depends on the input.","lastModifiedDate":"2021-08-26"},{"lineNumber":140,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":141,"author":{"gitId":"danielsimre"},"content":"     * @param input String containing user input.","lastModifiedDate":"2021-08-26"},{"lineNumber":142,"author":{"gitId":"danielsimre"},"content":"     * @param ui    Object that handles user interface functionality. (e.g. printing)","lastModifiedDate":"2021-08-26"},{"lineNumber":143,"author":{"gitId":"danielsimre"},"content":"     * @return A new TaskList instance with the selected task removed and an output message.","lastModifiedDate":"2021-09-03"},{"lineNumber":144,"author":{"gitId":"danielsimre"},"content":"     * @throws DukeException If input is in an invalid format, or specified index is out of bounds.","lastModifiedDate":"2021-08-26"},{"lineNumber":145,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":146,"author":{"gitId":"danielsimre"},"content":"    public TaskList deleteTask(String input, Ui ui) {","lastModifiedDate":"2021-08-26"},{"lineNumber":147,"author":{"gitId":"danielsimre"},"content":"        List\u003cTask\u003e newTasks \u003d new ArrayList\u003c\u003e(tasks);","lastModifiedDate":"2021-09-03"},{"lineNumber":148,"author":{"gitId":"danielsimre"},"content":"        String message \u003d \"\";","lastModifiedDate":"2021-09-03"},{"lineNumber":149,"author":{"gitId":"danielsimre"},"content":"        if (input.length() \u003c\u003d 7) {","lastModifiedDate":"2021-08-26"},{"lineNumber":150,"author":{"gitId":"danielsimre"},"content":"            throw new DukeException(\"Please type in a task number to delete.\");","lastModifiedDate":"2021-08-26"},{"lineNumber":151,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":152,"author":{"gitId":"danielsimre"},"content":"        String taskNumberString \u003d input.substring(7);","lastModifiedDate":"2021-08-26"},{"lineNumber":153,"author":{"gitId":"danielsimre"},"content":"        if (taskNumberString.matches(\"\\\\d+\")","lastModifiedDate":"2021-08-26"},{"lineNumber":154,"author":{"gitId":"danielsimre"},"content":"                \u0026\u0026 (Integer.parseInt(taskNumberString) - 1 \u003c tasks.size()","lastModifiedDate":"2021-08-26"},{"lineNumber":155,"author":{"gitId":"danielsimre"},"content":"                \u0026\u0026 Integer.parseInt(taskNumberString) - 1 \u003e\u003d 0)) {","lastModifiedDate":"2021-08-26"},{"lineNumber":156,"author":{"gitId":"danielsimre"},"content":"            int taskIndex \u003d Integer.parseInt(taskNumberString) - 1;","lastModifiedDate":"2021-08-26"},{"lineNumber":157,"author":{"gitId":"danielsimre"},"content":"            Task removedTask \u003d newTasks.remove(taskIndex);","lastModifiedDate":"2021-09-03"},{"lineNumber":158,"author":{"gitId":"danielsimre"},"content":"            message +\u003d ui.showMessage(\"Got it. The following task has been removed:\");","lastModifiedDate":"2021-09-03"},{"lineNumber":159,"author":{"gitId":"danielsimre"},"content":"            message +\u003d ui.showIndentedMessage(removedTask.toString());","lastModifiedDate":"2021-09-03"},{"lineNumber":160,"author":{"gitId":"danielsimre"},"content":"            message +\u003d ui.showMessage(String.format(\"Now you have %d task%s in the list.\",","lastModifiedDate":"2021-09-03"},{"lineNumber":161,"author":{"gitId":"danielsimre"},"content":"                    newTasks.size(), newTasks.size() \u003d\u003d 1 ? \"\" : \"s\"));","lastModifiedDate":"2021-09-03"},{"lineNumber":162,"author":{"gitId":"danielsimre"},"content":"        } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":163,"author":{"gitId":"danielsimre"},"content":"            // Invalid input (not a number or invalid number)","lastModifiedDate":"2021-08-26"},{"lineNumber":164,"author":{"gitId":"danielsimre"},"content":"            throw new DukeException(\"Please type in a valid task number to delete.\");","lastModifiedDate":"2021-08-26"},{"lineNumber":165,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":166,"author":{"gitId":"danielsimre"},"content":"        return new TaskList(newTasks, message);","lastModifiedDate":"2021-09-03"},{"lineNumber":167,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":168,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":169,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":170,"author":{"gitId":"danielsimre"},"content":"     * Marks a task as done on in the task list.","lastModifiedDate":"2021-08-26"},{"lineNumber":171,"author":{"gitId":"danielsimre"},"content":"     * Index of marked task depends on the input.","lastModifiedDate":"2021-08-26"},{"lineNumber":172,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":173,"author":{"gitId":"danielsimre"},"content":"     * @param input String containing user input.","lastModifiedDate":"2021-08-26"},{"lineNumber":174,"author":{"gitId":"danielsimre"},"content":"     * @param ui    Object that handles user interface functionality. (e.g. printing)","lastModifiedDate":"2021-08-26"},{"lineNumber":175,"author":{"gitId":"danielsimre"},"content":"     * @return A new TaskList instance with the selected task marked as done.","lastModifiedDate":"2021-08-26"},{"lineNumber":176,"author":{"gitId":"danielsimre"},"content":"     * @throws DukeException If input is in an invalid format, or specified index is out of bounds.","lastModifiedDate":"2021-08-26"},{"lineNumber":177,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":178,"author":{"gitId":"danielsimre"},"content":"    public TaskList markTask(String input, Ui ui) {","lastModifiedDate":"2021-08-26"},{"lineNumber":179,"author":{"gitId":"danielsimre"},"content":"        List\u003cTask\u003e newTasks \u003d new ArrayList\u003c\u003e(tasks);","lastModifiedDate":"2021-09-03"},{"lineNumber":180,"author":{"gitId":"danielsimre"},"content":"        String message \u003d \"\";","lastModifiedDate":"2021-09-03"},{"lineNumber":181,"author":{"gitId":"danielsimre"},"content":"        if (input.length() \u003c\u003d 5) {","lastModifiedDate":"2021-08-26"},{"lineNumber":182,"author":{"gitId":"danielsimre"},"content":"            throw new DukeException(\"Please type in a task number to mark as done.\");","lastModifiedDate":"2021-08-26"},{"lineNumber":183,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":184,"author":{"gitId":"danielsimre"},"content":"        String taskNumberString \u003d input.substring(5);","lastModifiedDate":"2021-08-26"},{"lineNumber":185,"author":{"gitId":"danielsimre"},"content":"        if (taskNumberString.matches(\"\\\\d+\")","lastModifiedDate":"2021-08-26"},{"lineNumber":186,"author":{"gitId":"danielsimre"},"content":"                \u0026\u0026 (Integer.parseInt(taskNumberString) - 1 \u003c tasks.size()","lastModifiedDate":"2021-08-26"},{"lineNumber":187,"author":{"gitId":"danielsimre"},"content":"                \u0026\u0026 Integer.parseInt(taskNumberString) - 1 \u003e\u003d 0)) {","lastModifiedDate":"2021-08-26"},{"lineNumber":188,"author":{"gitId":"danielsimre"},"content":"            int taskIndex \u003d Integer.parseInt(taskNumberString) - 1;","lastModifiedDate":"2021-08-26"},{"lineNumber":189,"author":{"gitId":"danielsimre"},"content":"            Task doneTask \u003d newTasks.get(taskIndex);","lastModifiedDate":"2021-09-03"},{"lineNumber":190,"author":{"gitId":"danielsimre"},"content":"            message +\u003d ui.showMessage(\"Good work! This task is now marked as done:\");","lastModifiedDate":"2021-09-03"},{"lineNumber":191,"author":{"gitId":"danielsimre"},"content":"            message +\u003d ui.showIndentedMessage(doneTask.toString());","lastModifiedDate":"2021-09-03"},{"lineNumber":192,"author":{"gitId":"danielsimre"},"content":"            newTasks.set(taskIndex, doneTask.markAsDone());","lastModifiedDate":"2021-09-03"},{"lineNumber":193,"author":{"gitId":"danielsimre"},"content":"        } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":194,"author":{"gitId":"danielsimre"},"content":"            // Invalid input (not a number or invalid number)","lastModifiedDate":"2021-08-26"},{"lineNumber":195,"author":{"gitId":"danielsimre"},"content":"            throw new DukeException(\"Please type in a valid task number to mark as done.\");","lastModifiedDate":"2021-08-26"},{"lineNumber":196,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":197,"author":{"gitId":"danielsimre"},"content":"        return new TaskList(newTasks, message);","lastModifiedDate":"2021-09-03"},{"lineNumber":198,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":199,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":200,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":201,"author":{"gitId":"danielsimre"},"content":"     * Gets all tasks containing a certain keyphrase, depending on the user\u0027s input.","lastModifiedDate":"2021-08-26"},{"lineNumber":202,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":203,"author":{"gitId":"danielsimre"},"content":"     * @param input String containing user input.","lastModifiedDate":"2021-08-26"},{"lineNumber":204,"author":{"gitId":"danielsimre"},"content":"     * @return A new TaskList instance containing all tasks that contain the input phrase.","lastModifiedDate":"2021-08-26"},{"lineNumber":205,"author":{"gitId":"danielsimre"},"content":"     * @throws DukeException If input is in an invalid format.","lastModifiedDate":"2021-08-26"},{"lineNumber":206,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":207,"author":{"gitId":"danielsimre"},"content":"    public TaskList findTasks(String input) throws DukeException {","lastModifiedDate":"2021-08-26"},{"lineNumber":208,"author":{"gitId":"danielsimre"},"content":"        if (input.length() \u003c\u003d 4) {","lastModifiedDate":"2021-08-26"},{"lineNumber":209,"author":{"gitId":"danielsimre"},"content":"            throw new DukeException(\"Please type in a keyphrase to search your tasks with.\");","lastModifiedDate":"2021-08-26"},{"lineNumber":210,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":211,"author":{"gitId":"danielsimre"},"content":"        String keyphrase \u003d input.substring(5);","lastModifiedDate":"2021-08-26"},{"lineNumber":212,"author":{"gitId":"danielsimre"},"content":"        List\u003cTask\u003e foundTasks \u003d tasks.stream()","lastModifiedDate":"2021-08-26"},{"lineNumber":213,"author":{"gitId":"danielsimre"},"content":"                .filter(task -\u003e task.containsPhrase(keyphrase))","lastModifiedDate":"2021-08-26"},{"lineNumber":214,"author":{"gitId":"danielsimre"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2021-08-26"},{"lineNumber":215,"author":{"gitId":"danielsimre"},"content":"        return new TaskList(foundTasks);","lastModifiedDate":"2021-08-26"},{"lineNumber":216,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":217,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":218,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":219,"author":{"gitId":"danielsimre"},"content":"     * Gets all tasks due in x hours/days/months from now, depending on the user\u0027s input.","lastModifiedDate":"2021-08-26"},{"lineNumber":220,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":221,"author":{"gitId":"danielsimre"},"content":"     * @param input String containing user input.","lastModifiedDate":"2021-08-26"},{"lineNumber":222,"author":{"gitId":"danielsimre"},"content":"     * @return A new TaskList instance containing all tasks due within the inputted period.","lastModifiedDate":"2021-08-26"},{"lineNumber":223,"author":{"gitId":"danielsimre"},"content":"     * @throws DukeException If input is in an invalid format.","lastModifiedDate":"2021-08-26"},{"lineNumber":224,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":225,"author":{"gitId":"danielsimre"},"content":"    public TaskList getDueTasks(String input) {","lastModifiedDate":"2021-08-26"},{"lineNumber":226,"author":{"gitId":"danielsimre"},"content":"        // Check if input is valid and input number is an integer","lastModifiedDate":"2021-08-26"},{"lineNumber":227,"author":{"gitId":"danielsimre"},"content":"        if (input.length() \u003c\u003d 4 || !input.substring(4, input.length() - 1).matches(\"\\\\d+\")) {","lastModifiedDate":"2021-08-26"},{"lineNumber":228,"author":{"gitId":"danielsimre"},"content":"            throw new DukeException(\"Command must be of the form: due [integer][h/d/m] \"","lastModifiedDate":"2021-08-26"},{"lineNumber":229,"author":{"gitId":"danielsimre"},"content":"                    + \"(h \u003d hours, d \u003d days, m \u003d months)\");","lastModifiedDate":"2021-08-26"},{"lineNumber":230,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":231,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":232,"author":{"gitId":"danielsimre"},"content":"        String offset \u003d input.substring(4, input.length() - 1);","lastModifiedDate":"2021-08-26"},{"lineNumber":233,"author":{"gitId":"danielsimre"},"content":"        LocalDateTime dateTime \u003d LocalDateTime.now();","lastModifiedDate":"2021-08-26"},{"lineNumber":234,"author":{"gitId":"danielsimre"},"content":"        switch (input.charAt(input.length() - 1)) {","lastModifiedDate":"2021-08-26"},{"lineNumber":235,"author":{"gitId":"danielsimre"},"content":"        case (\u0027h\u0027):","lastModifiedDate":"2021-08-26"},{"lineNumber":236,"author":{"gitId":"danielsimre"},"content":"            dateTime \u003d dateTime.plusHours(Integer.parseInt(offset));","lastModifiedDate":"2021-08-26"},{"lineNumber":237,"author":{"gitId":"danielsimre"},"content":"            break;","lastModifiedDate":"2021-08-26"},{"lineNumber":238,"author":{"gitId":"danielsimre"},"content":"        case (\u0027d\u0027):","lastModifiedDate":"2021-08-26"},{"lineNumber":239,"author":{"gitId":"danielsimre"},"content":"            dateTime \u003d dateTime.plusDays(Integer.parseInt(offset));","lastModifiedDate":"2021-08-26"},{"lineNumber":240,"author":{"gitId":"danielsimre"},"content":"            break;","lastModifiedDate":"2021-08-26"},{"lineNumber":241,"author":{"gitId":"danielsimre"},"content":"        case (\u0027m\u0027):","lastModifiedDate":"2021-08-26"},{"lineNumber":242,"author":{"gitId":"danielsimre"},"content":"            dateTime \u003d dateTime.plusMonths(Integer.parseInt(offset));","lastModifiedDate":"2021-08-26"},{"lineNumber":243,"author":{"gitId":"danielsimre"},"content":"            break;","lastModifiedDate":"2021-08-26"},{"lineNumber":244,"author":{"gitId":"danielsimre"},"content":"        default:","lastModifiedDate":"2021-08-26"},{"lineNumber":245,"author":{"gitId":"danielsimre"},"content":"            throw new DukeException(\"Command must be of the form: due [integer][h/d/m] \"","lastModifiedDate":"2021-08-26"},{"lineNumber":246,"author":{"gitId":"danielsimre"},"content":"                    + \"(h \u003d hours, d \u003d days, m \u003d months)\");","lastModifiedDate":"2021-08-26"},{"lineNumber":247,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":248,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":249,"author":{"gitId":"danielsimre"},"content":"        // Copy dateTime to an effectively final variable for use in lambda","lastModifiedDate":"2021-08-26"},{"lineNumber":250,"author":{"gitId":"danielsimre"},"content":"        LocalDateTime finalDateTime \u003d dateTime;","lastModifiedDate":"2021-08-26"},{"lineNumber":251,"author":{"gitId":"danielsimre"},"content":"        List\u003cTask\u003e beforeDateTasks \u003d tasks.stream()","lastModifiedDate":"2021-08-26"},{"lineNumber":252,"author":{"gitId":"danielsimre"},"content":"                .filter(task -\u003e task.isBeforeDate(finalDateTime))","lastModifiedDate":"2021-08-26"},{"lineNumber":253,"author":{"gitId":"danielsimre"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2021-08-26"},{"lineNumber":254,"author":{"gitId":"danielsimre"},"content":"        return new TaskList(beforeDateTasks);","lastModifiedDate":"2021-08-26"},{"lineNumber":255,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":256,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":257,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":258,"author":{"gitId":"danielsimre"},"content":"     * Gets all tasks occurring on a given date, depending on the user\u0027s input.","lastModifiedDate":"2021-08-26"},{"lineNumber":259,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":260,"author":{"gitId":"danielsimre"},"content":"     * @param input String containing user input.","lastModifiedDate":"2021-08-26"},{"lineNumber":261,"author":{"gitId":"danielsimre"},"content":"     * @return A new TaskList instance containing all tasks occurring on the input date.","lastModifiedDate":"2021-08-26"},{"lineNumber":262,"author":{"gitId":"danielsimre"},"content":"     * @throws DukeException If input is in an invalid format, or an invalid date is given.","lastModifiedDate":"2021-08-26"},{"lineNumber":263,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":264,"author":{"gitId":"danielsimre"},"content":"    public TaskList getOnDateTasks(String input) {","lastModifiedDate":"2021-08-26"},{"lineNumber":265,"author":{"gitId":"danielsimre"},"content":"        if (input.length() \u003c\u003d 7) {","lastModifiedDate":"2021-08-26"},{"lineNumber":266,"author":{"gitId":"danielsimre"},"content":"            throw new DukeException(\"Date must be of the form YYYY-MM-DD, and must be a real/valid date.\");","lastModifiedDate":"2021-08-26"},{"lineNumber":267,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":268,"author":{"gitId":"danielsimre"},"content":"        String dateString \u003d input.substring(7);","lastModifiedDate":"2021-08-26"},{"lineNumber":269,"author":{"gitId":"danielsimre"},"content":"        LocalDate date \u003d Parser.parseDateFromInput(dateString);","lastModifiedDate":"2021-08-26"},{"lineNumber":270,"author":{"gitId":"danielsimre"},"content":"        List\u003cTask\u003e onDateTasks \u003d tasks.stream()","lastModifiedDate":"2021-08-26"},{"lineNumber":271,"author":{"gitId":"danielsimre"},"content":"                .filter(task -\u003e task.hasSameDate(date))","lastModifiedDate":"2021-08-26"},{"lineNumber":272,"author":{"gitId":"danielsimre"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2021-08-26"},{"lineNumber":273,"author":{"gitId":"danielsimre"},"content":"        return new TaskList(onDateTasks);","lastModifiedDate":"2021-08-26"},{"lineNumber":274,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":275,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":276,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-09-03"},{"lineNumber":277,"author":{"gitId":"danielsimre"},"content":"     * Gets the string message generated after running a command.","lastModifiedDate":"2021-09-03"},{"lineNumber":278,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-09-03"},{"lineNumber":279,"author":{"gitId":"danielsimre"},"content":"     * @return A string generated after running a command.","lastModifiedDate":"2021-09-03"},{"lineNumber":280,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-09-03"},{"lineNumber":281,"author":{"gitId":"danielsimre"},"content":"    public String getRecentMessage() {","lastModifiedDate":"2021-09-03"},{"lineNumber":282,"author":{"gitId":"danielsimre"},"content":"        return recentMessage;","lastModifiedDate":"2021-09-03"},{"lineNumber":283,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-09-03"},{"lineNumber":284,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":285,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":286,"author":{"gitId":"danielsimre"},"content":"     * Converts the TaskList data into a string format.","lastModifiedDate":"2021-08-26"},{"lineNumber":287,"author":{"gitId":"danielsimre"},"content":"     * The tasks are listed in a numerical order. (1, 2, 3...)","lastModifiedDate":"2021-08-26"},{"lineNumber":288,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":289,"author":{"gitId":"danielsimre"},"content":"     * @return A string representation of the TaskList instance.","lastModifiedDate":"2021-08-26"},{"lineNumber":290,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":291,"author":{"gitId":"danielsimre"},"content":"    @Override","lastModifiedDate":"2021-08-26"},{"lineNumber":292,"author":{"gitId":"danielsimre"},"content":"    public String toString() {","lastModifiedDate":"2021-08-26"},{"lineNumber":293,"author":{"gitId":"danielsimre"},"content":"        if (tasks.size() \u003d\u003d 0) {","lastModifiedDate":"2021-08-26"},{"lineNumber":294,"author":{"gitId":"danielsimre"},"content":"            return \"No tasks found.\";","lastModifiedDate":"2021-08-26"},{"lineNumber":295,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":296,"author":{"gitId":"danielsimre"},"content":"        StringBuilder listString \u003d new StringBuilder();","lastModifiedDate":"2021-08-26"},{"lineNumber":297,"author":{"gitId":"danielsimre"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2021-08-26"},{"lineNumber":298,"author":{"gitId":"danielsimre"},"content":"            if (i \u003d\u003d tasks.size() - 1) {","lastModifiedDate":"2021-08-26"},{"lineNumber":299,"author":{"gitId":"danielsimre"},"content":"                listString.append(String.format(\"%d. %s\", i + 1, tasks.get(i)));","lastModifiedDate":"2021-09-03"},{"lineNumber":300,"author":{"gitId":"danielsimre"},"content":"            } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":301,"author":{"gitId":"danielsimre"},"content":"                listString.append(String.format(\"%d. %s\\n\", i + 1, tasks.get(i)));","lastModifiedDate":"2021-09-03"},{"lineNumber":302,"author":{"gitId":"danielsimre"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":303,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":304,"author":{"gitId":"danielsimre"},"content":"        return listString.toString().trim();","lastModifiedDate":"2021-08-26"},{"lineNumber":305,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":306,"author":{"gitId":"danielsimre"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"danielsimre":306}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"package duke.task;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":" * A class that represents a task that is to be done, without a fixed date.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":"     * Creates a todo task with a task name.","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":"     * @param taskName Short description of the task.","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":"    public Todo(String taskName) {","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"        super(taskName);","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":"     * Creates a todo task with a task name and whether or not the task is done.","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":"     * @param taskName Short description of the task.","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"     * @param isDone   Boolean that represents whether or not the task is done.","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"danielsimre"},"content":"    public Todo(String taskName, boolean isDone) {","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"        super(taskName, isDone);","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"danielsimre"},"content":"     * Converts the todo task data into its corresponding save file data format.","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"danielsimre"},"content":"     * @return A string to represent the data of the todo task in the save file.","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"danielsimre"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"danielsimre"},"content":"    public String toSaveData() {","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"danielsimre"},"content":"        return \"T|\" + super.toSaveData();","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":38,"author":{"gitId":"danielsimre"},"content":"     * Returns a string representation of the current todo task.","lastModifiedDate":"2021-08-29"},{"lineNumber":39,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":40,"author":{"gitId":"danielsimre"},"content":"     * @return A string that contains the information of the todo task.","lastModifiedDate":"2021-08-29"},{"lineNumber":41,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":42,"author":{"gitId":"danielsimre"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":43,"author":{"gitId":"danielsimre"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":44,"author":{"gitId":"danielsimre"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2021-08-18"},{"lineNumber":45,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":46,"author":{"gitId":"danielsimre"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"danielsimre":46}},{"path":"src/main/java/duke/util/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"package duke.util;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":" * A class that represents exceptions related to the running of Duke.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":"public class DukeException extends RuntimeException {","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":"     * Creates a new DukeException with a custom message.","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":"     * @param errorMessage A string representing an error message.","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":"    public DukeException(String errorMessage) {","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":"        super(errorMessage);","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"danielsimre":15}},{"path":"src/main/java/duke/util/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"package duke.util;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"danielsimre"},"content":"import duke.command.AddCommand;","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":"import duke.command.ByeCommand;","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":"import duke.command.Command;","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":"import duke.command.DeleteCommand;","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":"import duke.command.DoneCommand;","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":"import duke.command.DueCommand;","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":"import duke.command.FindCommand;","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"import duke.command.ListCommand;","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"import duke.command.OnDateCommand;","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":" * A class that handles all parsing related functionality, parsing dates, times,","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":" * and commands from user input.","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"public class Parser {","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"     * Converts a string representing a date into a LocalDate object.","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"     * @param dateString Date string that is to be converted to a LocalDate.","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"danielsimre"},"content":"     * @return LocalDate converted from the input string.","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"danielsimre"},"content":"     * @throws DukeException If an invalid format or invalid date is given.","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"danielsimre"},"content":"    public static LocalDate parseDateFromInput(String dateString) throws DukeException {","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"danielsimre"},"content":"        try {","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"danielsimre"},"content":"            return LocalDate.parse(dateString);","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"danielsimre"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"danielsimre"},"content":"            throw new DukeException(\"Date must be of the form YYYY-MM-DD, and must be a real/valid date.\");","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"danielsimre"},"content":"     * Converts a string representing a time into a LocalTime object.","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"danielsimre"},"content":"     * @param timeString Time string that is to be converted to a LocalTime.","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"danielsimre"},"content":"     * @return LocalTime converted from the input string.","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"danielsimre"},"content":"     * @throws DukeException If an invalid format or invalid time is given.","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"danielsimre"},"content":"    public static LocalTime parseTimeFromInput(String timeString) throws DukeException {","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"danielsimre"},"content":"        try {","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"danielsimre"},"content":"            return LocalTime.parse(timeString);","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"danielsimre"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"danielsimre"},"content":"            throw new DukeException(\"Time must be of the form HH:MM. (HH from 00-23, MM from 00-59)\");","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":51,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":52,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":53,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":54,"author":{"gitId":"danielsimre"},"content":"     * Parses the user\u0027s input to determine what command is being called.","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":56,"author":{"gitId":"danielsimre"},"content":"     * @param input Input that contains the user\u0027s command.","lastModifiedDate":"2021-08-26"},{"lineNumber":57,"author":{"gitId":"danielsimre"},"content":"     * @return Command object that can be used to execute the related function.","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"danielsimre"},"content":"     * @throws DukeException If an invalid command is given.","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"danielsimre"},"content":"    public static Command parseCommandFromInput(String input) throws DukeException {","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"danielsimre"},"content":"        String commandString \u003d input.split(\" \")[0].toUpperCase();","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"danielsimre"},"content":"        switch (commandString) {","lastModifiedDate":"2021-08-26"},{"lineNumber":63,"author":{"gitId":"danielsimre"},"content":"        case \"BYE\":","lastModifiedDate":"2021-08-26"},{"lineNumber":64,"author":{"gitId":"danielsimre"},"content":"            return new ByeCommand();","lastModifiedDate":"2021-08-26"},{"lineNumber":65,"author":{"gitId":"danielsimre"},"content":"        case \"LIST\":","lastModifiedDate":"2021-08-26"},{"lineNumber":66,"author":{"gitId":"danielsimre"},"content":"            return new ListCommand();","lastModifiedDate":"2021-08-26"},{"lineNumber":67,"author":{"gitId":"danielsimre"},"content":"        case \"DONE\":","lastModifiedDate":"2021-08-26"},{"lineNumber":68,"author":{"gitId":"danielsimre"},"content":"            return new DoneCommand(input);","lastModifiedDate":"2021-08-26"},{"lineNumber":69,"author":{"gitId":"danielsimre"},"content":"        case \"TODO\":","lastModifiedDate":"2021-08-26"},{"lineNumber":70,"author":{"gitId":"danielsimre"},"content":"        case \"DEADLINE\":","lastModifiedDate":"2021-08-26"},{"lineNumber":71,"author":{"gitId":"danielsimre"},"content":"        case \"EVENT\":","lastModifiedDate":"2021-08-26"},{"lineNumber":72,"author":{"gitId":"danielsimre"},"content":"            return new AddCommand(input);","lastModifiedDate":"2021-08-26"},{"lineNumber":73,"author":{"gitId":"danielsimre"},"content":"        case \"DELETE\":","lastModifiedDate":"2021-08-26"},{"lineNumber":74,"author":{"gitId":"danielsimre"},"content":"            return new DeleteCommand(input);","lastModifiedDate":"2021-08-26"},{"lineNumber":75,"author":{"gitId":"danielsimre"},"content":"        case \"ONDATE\":","lastModifiedDate":"2021-08-26"},{"lineNumber":76,"author":{"gitId":"danielsimre"},"content":"            return new OnDateCommand(input);","lastModifiedDate":"2021-08-26"},{"lineNumber":77,"author":{"gitId":"danielsimre"},"content":"        case \"DUE\":","lastModifiedDate":"2021-08-26"},{"lineNumber":78,"author":{"gitId":"danielsimre"},"content":"            return new DueCommand(input);","lastModifiedDate":"2021-08-26"},{"lineNumber":79,"author":{"gitId":"danielsimre"},"content":"        case \"FIND\":","lastModifiedDate":"2021-08-26"},{"lineNumber":80,"author":{"gitId":"danielsimre"},"content":"            return new FindCommand(input);","lastModifiedDate":"2021-08-26"},{"lineNumber":81,"author":{"gitId":"danielsimre"},"content":"        default:","lastModifiedDate":"2021-08-26"},{"lineNumber":82,"author":{"gitId":"danielsimre"},"content":"            throw new DukeException(\"You have entered an invalid command.\");","lastModifiedDate":"2021-08-26"},{"lineNumber":83,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":84,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":85,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":86,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":87,"author":{"gitId":"danielsimre"},"content":"     * Splits a string into a string array depending on a regular expression.","lastModifiedDate":"2021-08-26"},{"lineNumber":88,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":89,"author":{"gitId":"danielsimre"},"content":"     * @param input        Input that contains the user\u0027s command.","lastModifiedDate":"2021-08-26"},{"lineNumber":90,"author":{"gitId":"danielsimre"},"content":"     * @param startIndex   Location to start splitting from.","lastModifiedDate":"2021-08-26"},{"lineNumber":91,"author":{"gitId":"danielsimre"},"content":"     * @param regex        Regular expression that is used to split the string into pieces.","lastModifiedDate":"2021-08-26"},{"lineNumber":92,"author":{"gitId":"danielsimre"},"content":"     * @param errorMessage Error message to be displayed if the input is invalid.","lastModifiedDate":"2021-08-26"},{"lineNumber":93,"author":{"gitId":"danielsimre"},"content":"     * @return Command object that can be used to execute the related function.","lastModifiedDate":"2021-08-26"},{"lineNumber":94,"author":{"gitId":"danielsimre"},"content":"     * @throws DukeException If startIndex \u003e length of input, or input does not contain the regex.","lastModifiedDate":"2021-08-26"},{"lineNumber":95,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":96,"author":{"gitId":"danielsimre"},"content":"    public static String[] splitWith(String input, int startIndex, String regex, String errorMessage)","lastModifiedDate":"2021-08-26"},{"lineNumber":97,"author":{"gitId":"danielsimre"},"content":"            throws DukeException {","lastModifiedDate":"2021-08-26"},{"lineNumber":98,"author":{"gitId":"danielsimre"},"content":"        if (startIndex \u003e\u003d input.length() || !input.contains(regex)) {","lastModifiedDate":"2021-08-26"},{"lineNumber":99,"author":{"gitId":"danielsimre"},"content":"            throw new DukeException(errorMessage);","lastModifiedDate":"2021-08-26"},{"lineNumber":100,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":101,"author":{"gitId":"danielsimre"},"content":"        return input.substring(startIndex).split(regex);","lastModifiedDate":"2021-08-26"},{"lineNumber":102,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":103,"author":{"gitId":"danielsimre"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"danielsimre":103}},{"path":"src/main/java/duke/util/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"package duke.util;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"import java.io.File;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"danielsimre"},"content":"import java.nio.file.Files;","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":"import java.util.List;","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"import duke.task.Event;","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-09-02"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":"import duke.task.Todo;","lastModifiedDate":"2021-09-02"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":" * A class that handles all file related functionality, such as loading from","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":" * and saving to a save file.","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"danielsimre"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"danielsimre"},"content":"public class Storage {","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"    private final Path filePath;","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"danielsimre"},"content":"     * Creates an instance of the Storage class.","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"danielsimre"},"content":"     * @param filePath File path for the save file.","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"danielsimre"},"content":"    public Storage(Path filePath) {","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"danielsimre"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"danielsimre"},"content":"     * Loads tasks from the file path given on instantiation. Called when Duke starts.","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"danielsimre"},"content":"     * @return The list of tasks loaded from the save file.","lastModifiedDate":"2021-08-29"},{"lineNumber":40,"author":{"gitId":"danielsimre"},"content":"     * @throws FileNotFoundException If file does not exist.","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"danielsimre"},"content":"     * @throws DukeException         If the file contains invalid task data.","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"danielsimre"},"content":"    public List\u003cTask\u003e loadTasksFromFile() throws FileNotFoundException, DukeException {","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"danielsimre"},"content":"        File saveFile \u003d filePath.toFile();","lastModifiedDate":"2021-08-29"},{"lineNumber":45,"author":{"gitId":"danielsimre"},"content":"        Scanner scanner \u003d new Scanner(saveFile);","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"danielsimre"},"content":"        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"danielsimre"},"content":"        while (scanner.hasNextLine()) {","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"danielsimre"},"content":"            String taskLine \u003d scanner.nextLine();","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"danielsimre"},"content":"            String[] taskData \u003d taskLine.split(\"\\\\|\");","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"danielsimre"},"content":"            switch (taskData[0]) {","lastModifiedDate":"2021-08-26"},{"lineNumber":51,"author":{"gitId":"danielsimre"},"content":"            case (\"T\"):","lastModifiedDate":"2021-08-26"},{"lineNumber":52,"author":{"gitId":"danielsimre"},"content":"                tasks.add(new Todo(taskData[2], Boolean.parseBoolean(taskData[1])));","lastModifiedDate":"2021-08-26"},{"lineNumber":53,"author":{"gitId":"danielsimre"},"content":"                break;","lastModifiedDate":"2021-08-26"},{"lineNumber":54,"author":{"gitId":"danielsimre"},"content":"            case (\"D\"):","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"danielsimre"},"content":"                tasks.add(new Deadline(taskData[2], Boolean.parseBoolean(taskData[1]),","lastModifiedDate":"2021-08-26"},{"lineNumber":56,"author":{"gitId":"danielsimre"},"content":"                        Parser.parseDateFromInput(taskData[3]), Parser.parseTimeFromInput(taskData[4])));","lastModifiedDate":"2021-08-26"},{"lineNumber":57,"author":{"gitId":"danielsimre"},"content":"                break;","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"danielsimre"},"content":"            case (\"E\"):","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"danielsimre"},"content":"                tasks.add(new Event(taskData[2], Boolean.parseBoolean(taskData[1]),","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"danielsimre"},"content":"                        Parser.parseDateFromInput(taskData[3]), Parser.parseTimeFromInput(taskData[4]),","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"danielsimre"},"content":"                        Parser.parseTimeFromInput(taskData[5])));","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"danielsimre"},"content":"                break;","lastModifiedDate":"2021-08-26"},{"lineNumber":63,"author":{"gitId":"danielsimre"},"content":"            default:","lastModifiedDate":"2021-08-26"},{"lineNumber":64,"author":{"gitId":"danielsimre"},"content":"                throw new DukeException(\"Save file contains invalid task data (Invalid task type)\");","lastModifiedDate":"2021-08-26"},{"lineNumber":65,"author":{"gitId":"danielsimre"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":66,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":67,"author":{"gitId":"danielsimre"},"content":"        return tasks;","lastModifiedDate":"2021-08-26"},{"lineNumber":68,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":69,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":70,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":71,"author":{"gitId":"danielsimre"},"content":"     * Saves tasks to the file path given at instantiation. Called when list is modified.","lastModifiedDate":"2021-08-26"},{"lineNumber":72,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":73,"author":{"gitId":"danielsimre"},"content":"     * @param taskList The list of tasks to be saved.","lastModifiedDate":"2021-09-02"},{"lineNumber":74,"author":{"gitId":"danielsimre"},"content":"     * @throws IOException If the saving process fails.","lastModifiedDate":"2021-08-26"},{"lineNumber":75,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":76,"author":{"gitId":"danielsimre"},"content":"    public void saveTasksToFile(TaskList taskList) throws IOException {","lastModifiedDate":"2021-09-02"},{"lineNumber":77,"author":{"gitId":"danielsimre"},"content":"        Files.createDirectories(filePath.getParent()); // Create directories if they do not exist","lastModifiedDate":"2021-08-29"},{"lineNumber":78,"author":{"gitId":"danielsimre"},"content":"        FileWriter fw \u003d new FileWriter(filePath.toAbsolutePath().toString());","lastModifiedDate":"2021-08-29"},{"lineNumber":79,"author":{"gitId":"danielsimre"},"content":"        StringBuilder saveData \u003d new StringBuilder();","lastModifiedDate":"2021-08-26"},{"lineNumber":80,"author":{"gitId":"danielsimre"},"content":"        taskList.forEach((task) -\u003e saveData.append(task.toSaveData()).append(System.lineSeparator()));","lastModifiedDate":"2021-09-02"},{"lineNumber":81,"author":{"gitId":"danielsimre"},"content":"        fw.write(saveData.toString());","lastModifiedDate":"2021-08-26"},{"lineNumber":82,"author":{"gitId":"danielsimre"},"content":"        fw.close();","lastModifiedDate":"2021-08-26"},{"lineNumber":83,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":84,"author":{"gitId":"danielsimre"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"danielsimre":84}},{"path":"src/main/java/duke/util/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"package duke.util;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":" * A class that handles all UI related functionality, such as formatting and printing outputs,","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":" * as well as reading inputs.","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"danielsimre"},"content":"public class Ui {","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":"    private static final String FORMAT \u003d \"%s\\n\";","lastModifiedDate":"2021-09-03"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":"    private static final String INDENTED_FORMAT \u003d \"\\t%s\\n\";","lastModifiedDate":"2021-09-03"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":"     * Creates an instance of the Ui class.","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"    public Ui() {","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":"     * Displays the greeting message. Called when the chat bot starts up.","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":"    public String showIntroduction() {","lastModifiedDate":"2021-09-03"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"        return String.format(FORMAT, \"Hello there, I\u0027m Duke!\")","lastModifiedDate":"2021-09-03"},{"lineNumber":22,"author":{"gitId":"danielsimre"},"content":"                + String.format(FORMAT, \"What can I do for you today?\");","lastModifiedDate":"2021-09-03"},{"lineNumber":23,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"     * Displays a formatted message.","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"danielsimre"},"content":"     * @param message String that is to be formatted and printed.","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"danielsimre"},"content":"     * @return A formatted string.","lastModifiedDate":"2021-09-03"},{"lineNumber":30,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"danielsimre"},"content":"    public String showMessage(String message) {","lastModifiedDate":"2021-09-03"},{"lineNumber":32,"author":{"gitId":"danielsimre"},"content":"        return String.format(FORMAT, message);","lastModifiedDate":"2021-09-03"},{"lineNumber":33,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"danielsimre"},"content":"     * Displays a formatted message, with an extra tab indent compared to showMessage.","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"danielsimre"},"content":"     * @param message String that is to be formatted and printed.","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"danielsimre"},"content":"     * @return A formatted string.","lastModifiedDate":"2021-09-03"},{"lineNumber":40,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"danielsimre"},"content":"    public String showIndentedMessage(String message) {","lastModifiedDate":"2021-09-03"},{"lineNumber":42,"author":{"gitId":"danielsimre"},"content":"        return String.format(INDENTED_FORMAT, message);","lastModifiedDate":"2021-09-03"},{"lineNumber":43,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"danielsimre"},"content":"     * Returns a formatted error string.","lastModifiedDate":"2021-09-03"},{"lineNumber":47,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"danielsimre"},"content":"     * @param errorMessage Error string that is to be formatted and printed.","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"danielsimre"},"content":"     * @return A formatted error string.","lastModifiedDate":"2021-09-03"},{"lineNumber":50,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":51,"author":{"gitId":"danielsimre"},"content":"    public String showError(String errorMessage) {","lastModifiedDate":"2021-09-03"},{"lineNumber":52,"author":{"gitId":"danielsimre"},"content":"        return String.format(\"Uh-oh! %s\\n\", errorMessage);","lastModifiedDate":"2021-09-03"},{"lineNumber":53,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":54,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":56,"author":{"gitId":"danielsimre"},"content":"     * Returns a formatted error string. Is called if the save file does not exist.","lastModifiedDate":"2021-09-03"},{"lineNumber":57,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-09-03"},{"lineNumber":58,"author":{"gitId":"danielsimre"},"content":"     * @return A formatted error string.","lastModifiedDate":"2021-09-03"},{"lineNumber":59,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"danielsimre"},"content":"    public String showFileNotFoundError() {","lastModifiedDate":"2021-09-03"},{"lineNumber":61,"author":{"gitId":"danielsimre"},"content":"        return String.format(FORMAT, \"This appears to be your first time using Duke.\")","lastModifiedDate":"2021-09-03"},{"lineNumber":62,"author":{"gitId":"danielsimre"},"content":"                + String.format(FORMAT, \"A save file will be created to save your tasks when you first add a task.\");","lastModifiedDate":"2021-09-03"},{"lineNumber":63,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":64,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":65,"author":{"gitId":"danielsimre"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":66,"author":{"gitId":"danielsimre"},"content":"     * Returns a formatted error string. Is called if the save file contains incorrectly","lastModifiedDate":"2021-09-03"},{"lineNumber":67,"author":{"gitId":"danielsimre"},"content":"     * formatted data.","lastModifiedDate":"2021-08-26"},{"lineNumber":68,"author":{"gitId":"danielsimre"},"content":"     *","lastModifiedDate":"2021-09-03"},{"lineNumber":69,"author":{"gitId":"danielsimre"},"content":"     * @return A formatted error string.","lastModifiedDate":"2021-09-03"},{"lineNumber":70,"author":{"gitId":"danielsimre"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":71,"author":{"gitId":"danielsimre"},"content":"    public String showLoadingError(String errorMessage) {","lastModifiedDate":"2021-09-03"},{"lineNumber":72,"author":{"gitId":"danielsimre"},"content":"        return showError(errorMessage)","lastModifiedDate":"2021-09-03"},{"lineNumber":73,"author":{"gitId":"danielsimre"},"content":"                + String.format(FORMAT, \"This appears to be an error with your save file.\")","lastModifiedDate":"2021-09-03"},{"lineNumber":74,"author":{"gitId":"danielsimre"},"content":"                + String.format(FORMAT, \"Either edit data/tasks.txt to rectify the error, or delete it.\")","lastModifiedDate":"2021-09-03"},{"lineNumber":75,"author":{"gitId":"danielsimre"},"content":"                + String.format(FORMAT, \"For now, you\u0027ll start with an empty task list.\");","lastModifiedDate":"2021-09-03"},{"lineNumber":76,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":77,"author":{"gitId":"danielsimre"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"danielsimre":77}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"danielsimre"},"content":"\u003c?import javafx.scene.text.Text?\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":"        \u003cAnchorPane prefHeight\u003d\"99.0\" prefWidth\u003d\"203.0\" style\u003d\"-fx-background-color: white; -fx-border-color: black; -fx-border-radius: 5px;\"\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":"            \u003cchildren\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":"                \u003cText fx:id\u003d\"dialog\" layoutX\u003d\"9.0\" layoutY\u003d\"19.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Text\" textAlignment\u003d\"RIGHT\" wrappingWidth\u003d\"185.20000000000005\" /\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"            \u003c/children\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"        \u003c/AnchorPane\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":"    \u003c/children\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"danielsimre":21}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"\u003c?import javafx.scene.Scene?\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"danielsimre"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":"\u003c?import javafx.stage.Stage?\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":"\u003cfx:root resizable\u003d\"false\" title\u003d\"Duke\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.controller.MainWindow\"\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":"    \u003cscene\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":"        \u003cScene\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"            \u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\"\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"                \u003cchildren\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":"                    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"0.7999999999999545\" /\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":"                    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":"                    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":"                        \u003ccontent\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":"                            \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"                        \u003c/content\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":22,"author":{"gitId":"danielsimre"},"content":"                    \u003c/ScrollPane\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":23,"author":{"gitId":"danielsimre"},"content":"                \u003c/children\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"            \u003c/AnchorPane\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"        \u003c/Scene\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"    \u003c/scene\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":27,"author":{"gitId":"danielsimre"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2021-09-03"}],"authorContributionMap":{"danielsimre":27}},{"path":"src/test/java/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"danielsimre"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":"import duke.command.AddCommand;","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":"import duke.command.ByeCommand;","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"import duke.command.DeleteCommand;","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"import duke.command.DoneCommand;","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":"import duke.command.DueCommand;","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":"import duke.command.ListCommand;","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":"import duke.command.OnDateCommand;","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":"import duke.util.Parser;","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"public class ParserTest {","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"danielsimre"},"content":"    public void parseDateFromInput_incorrectFormat_exceptionThrown() {","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"        try {","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"            Parser.parseDateFromInput(\"2021-021-10\");","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"            fail(); // the test should not reach this line","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"danielsimre"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"danielsimre"},"content":"            assertEquals(\"Date must be of the form YYYY-MM-DD, and must be a real/valid date.\", e.getMessage());","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"danielsimre"},"content":"    public void parseDateFromInput_invalidDate_exceptionThrown() {","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"danielsimre"},"content":"        try {","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"danielsimre"},"content":"            Parser.parseDateFromInput(\"2021-26-10\");","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"danielsimre"},"content":"            fail(); // the test should not reach this line","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"danielsimre"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"danielsimre"},"content":"            assertEquals(\"Date must be of the form YYYY-MM-DD, and must be a real/valid date.\", e.getMessage());","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"danielsimre"},"content":"    public void parseDateFromInput_success() {","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"danielsimre"},"content":"        try {","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"danielsimre"},"content":"            String timeString \u003d \"2021-02-16\";","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"danielsimre"},"content":"            assertEquals(LocalDate.parse(timeString), Parser.parseDateFromInput(timeString));","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"danielsimre"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"danielsimre"},"content":"            fail();","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":51,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":52,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":53,"author":{"gitId":"danielsimre"},"content":"    public void parseTimeFromInput_incorrectFormat_exceptionThrown() {","lastModifiedDate":"2021-08-26"},{"lineNumber":54,"author":{"gitId":"danielsimre"},"content":"        try {","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"danielsimre"},"content":"            Parser.parseTimeFromInput(\"0:11\");","lastModifiedDate":"2021-08-26"},{"lineNumber":56,"author":{"gitId":"danielsimre"},"content":"            fail();","lastModifiedDate":"2021-08-26"},{"lineNumber":57,"author":{"gitId":"danielsimre"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"danielsimre"},"content":"            assertEquals(\"Time must be of the form HH:MM. (HH from 00-23, MM from 00-59)\", e.getMessage());","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":63,"author":{"gitId":"danielsimre"},"content":"    public void parseTimeFromInput_invalidTime_exceptionThrown() {","lastModifiedDate":"2021-08-26"},{"lineNumber":64,"author":{"gitId":"danielsimre"},"content":"        try {","lastModifiedDate":"2021-08-26"},{"lineNumber":65,"author":{"gitId":"danielsimre"},"content":"            Parser.parseTimeFromInput(\"25:11\");","lastModifiedDate":"2021-08-26"},{"lineNumber":66,"author":{"gitId":"danielsimre"},"content":"            fail();","lastModifiedDate":"2021-08-26"},{"lineNumber":67,"author":{"gitId":"danielsimre"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-08-26"},{"lineNumber":68,"author":{"gitId":"danielsimre"},"content":"            assertEquals(\"Time must be of the form HH:MM. (HH from 00-23, MM from 00-59)\", e.getMessage());","lastModifiedDate":"2021-08-26"},{"lineNumber":69,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":70,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":71,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":72,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":73,"author":{"gitId":"danielsimre"},"content":"    public void parseTimeFromInput_success() {","lastModifiedDate":"2021-08-26"},{"lineNumber":74,"author":{"gitId":"danielsimre"},"content":"        try {","lastModifiedDate":"2021-08-26"},{"lineNumber":75,"author":{"gitId":"danielsimre"},"content":"            String timeString \u003d \"11:11\";","lastModifiedDate":"2021-08-26"},{"lineNumber":76,"author":{"gitId":"danielsimre"},"content":"            assertEquals(LocalTime.parse(timeString), Parser.parseTimeFromInput(timeString));","lastModifiedDate":"2021-08-26"},{"lineNumber":77,"author":{"gitId":"danielsimre"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-08-26"},{"lineNumber":78,"author":{"gitId":"danielsimre"},"content":"            fail();","lastModifiedDate":"2021-08-26"},{"lineNumber":79,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":80,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":81,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":82,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":83,"author":{"gitId":"danielsimre"},"content":"    public void parseCommandFromInput_invalidCommand_exceptionThrown() {","lastModifiedDate":"2021-08-26"},{"lineNumber":84,"author":{"gitId":"danielsimre"},"content":"        try {","lastModifiedDate":"2021-08-26"},{"lineNumber":85,"author":{"gitId":"danielsimre"},"content":"            Parser.parseCommandFromInput(\"blah blah blah\");","lastModifiedDate":"2021-08-26"},{"lineNumber":86,"author":{"gitId":"danielsimre"},"content":"            fail();","lastModifiedDate":"2021-08-26"},{"lineNumber":87,"author":{"gitId":"danielsimre"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-08-26"},{"lineNumber":88,"author":{"gitId":"danielsimre"},"content":"            assertEquals(\"You have entered an invalid command.\", e.getMessage());","lastModifiedDate":"2021-08-26"},{"lineNumber":89,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":90,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":91,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":92,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":93,"author":{"gitId":"danielsimre"},"content":"    public void parseCommandFromInput_byeCommand_success() {","lastModifiedDate":"2021-08-26"},{"lineNumber":94,"author":{"gitId":"danielsimre"},"content":"        try {","lastModifiedDate":"2021-08-26"},{"lineNumber":95,"author":{"gitId":"danielsimre"},"content":"            assertTrue(Parser.parseCommandFromInput(\"bye\") instanceof ByeCommand);","lastModifiedDate":"2021-08-26"},{"lineNumber":96,"author":{"gitId":"danielsimre"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-08-26"},{"lineNumber":97,"author":{"gitId":"danielsimre"},"content":"            fail();","lastModifiedDate":"2021-08-26"},{"lineNumber":98,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":99,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":100,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":101,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":102,"author":{"gitId":"danielsimre"},"content":"    public void parseCommandFromInput_listCommand_success() {","lastModifiedDate":"2021-08-26"},{"lineNumber":103,"author":{"gitId":"danielsimre"},"content":"        try {","lastModifiedDate":"2021-08-26"},{"lineNumber":104,"author":{"gitId":"danielsimre"},"content":"            assertTrue(Parser.parseCommandFromInput(\"list\") instanceof ListCommand);","lastModifiedDate":"2021-08-26"},{"lineNumber":105,"author":{"gitId":"danielsimre"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-08-26"},{"lineNumber":106,"author":{"gitId":"danielsimre"},"content":"            fail();","lastModifiedDate":"2021-08-26"},{"lineNumber":107,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":108,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":109,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":110,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":111,"author":{"gitId":"danielsimre"},"content":"    public void parseCommandFromInput_doneCommand_success() {","lastModifiedDate":"2021-08-26"},{"lineNumber":112,"author":{"gitId":"danielsimre"},"content":"        try {","lastModifiedDate":"2021-08-26"},{"lineNumber":113,"author":{"gitId":"danielsimre"},"content":"            assertTrue(Parser.parseCommandFromInput(\"done\") instanceof DoneCommand);","lastModifiedDate":"2021-08-26"},{"lineNumber":114,"author":{"gitId":"danielsimre"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-08-26"},{"lineNumber":115,"author":{"gitId":"danielsimre"},"content":"            fail();","lastModifiedDate":"2021-08-26"},{"lineNumber":116,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":117,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":118,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":119,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":120,"author":{"gitId":"danielsimre"},"content":"    public void parseCommandFromInput_todoCommand_success() {","lastModifiedDate":"2021-08-26"},{"lineNumber":121,"author":{"gitId":"danielsimre"},"content":"        try {","lastModifiedDate":"2021-08-26"},{"lineNumber":122,"author":{"gitId":"danielsimre"},"content":"            assertTrue(Parser.parseCommandFromInput(\"todo\") instanceof AddCommand);","lastModifiedDate":"2021-08-26"},{"lineNumber":123,"author":{"gitId":"danielsimre"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-08-26"},{"lineNumber":124,"author":{"gitId":"danielsimre"},"content":"            fail();","lastModifiedDate":"2021-08-26"},{"lineNumber":125,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":126,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":127,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":128,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":129,"author":{"gitId":"danielsimre"},"content":"    public void parseCommandFromInput_deadlineCommand_success() {","lastModifiedDate":"2021-08-26"},{"lineNumber":130,"author":{"gitId":"danielsimre"},"content":"        try {","lastModifiedDate":"2021-08-26"},{"lineNumber":131,"author":{"gitId":"danielsimre"},"content":"            assertTrue(Parser.parseCommandFromInput(\"deadline\") instanceof AddCommand);","lastModifiedDate":"2021-08-26"},{"lineNumber":132,"author":{"gitId":"danielsimre"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-08-26"},{"lineNumber":133,"author":{"gitId":"danielsimre"},"content":"            fail();","lastModifiedDate":"2021-08-26"},{"lineNumber":134,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":135,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":136,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":137,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":138,"author":{"gitId":"danielsimre"},"content":"    public void parseCommandFromInput_eventCommand_success() {","lastModifiedDate":"2021-08-26"},{"lineNumber":139,"author":{"gitId":"danielsimre"},"content":"        try {","lastModifiedDate":"2021-08-26"},{"lineNumber":140,"author":{"gitId":"danielsimre"},"content":"            assertTrue(Parser.parseCommandFromInput(\"event\") instanceof AddCommand);","lastModifiedDate":"2021-08-26"},{"lineNumber":141,"author":{"gitId":"danielsimre"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-08-26"},{"lineNumber":142,"author":{"gitId":"danielsimre"},"content":"            fail();","lastModifiedDate":"2021-08-26"},{"lineNumber":143,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":144,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":145,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":146,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":147,"author":{"gitId":"danielsimre"},"content":"    public void parseCommandFromInput_deleteCommand_success() {","lastModifiedDate":"2021-08-26"},{"lineNumber":148,"author":{"gitId":"danielsimre"},"content":"        try {","lastModifiedDate":"2021-08-26"},{"lineNumber":149,"author":{"gitId":"danielsimre"},"content":"            assertTrue(Parser.parseCommandFromInput(\"delete\") instanceof DeleteCommand);","lastModifiedDate":"2021-08-26"},{"lineNumber":150,"author":{"gitId":"danielsimre"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-08-26"},{"lineNumber":151,"author":{"gitId":"danielsimre"},"content":"            fail();","lastModifiedDate":"2021-08-26"},{"lineNumber":152,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":153,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":154,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":155,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":156,"author":{"gitId":"danielsimre"},"content":"    public void parseCommandFromInput_onDateCommand_success() {","lastModifiedDate":"2021-08-26"},{"lineNumber":157,"author":{"gitId":"danielsimre"},"content":"        try {","lastModifiedDate":"2021-08-26"},{"lineNumber":158,"author":{"gitId":"danielsimre"},"content":"            assertTrue(Parser.parseCommandFromInput(\"ondate\") instanceof OnDateCommand);","lastModifiedDate":"2021-08-26"},{"lineNumber":159,"author":{"gitId":"danielsimre"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-08-26"},{"lineNumber":160,"author":{"gitId":"danielsimre"},"content":"            fail();","lastModifiedDate":"2021-08-26"},{"lineNumber":161,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":162,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":163,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":164,"author":{"gitId":"danielsimre"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":165,"author":{"gitId":"danielsimre"},"content":"    public void parseCommandFromInput_dueCommand_success() {","lastModifiedDate":"2021-08-26"},{"lineNumber":166,"author":{"gitId":"danielsimre"},"content":"        try {","lastModifiedDate":"2021-08-26"},{"lineNumber":167,"author":{"gitId":"danielsimre"},"content":"            assertTrue(Parser.parseCommandFromInput(\"due\") instanceof DueCommand);","lastModifiedDate":"2021-08-26"},{"lineNumber":168,"author":{"gitId":"danielsimre"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-08-26"},{"lineNumber":169,"author":{"gitId":"danielsimre"},"content":"            fail();","lastModifiedDate":"2021-08-26"},{"lineNumber":170,"author":{"gitId":"danielsimre"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":171,"author":{"gitId":"danielsimre"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":172,"author":{"gitId":"danielsimre"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"danielsimre":172}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"blah","lastModifiedDate":"2021-08-18"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"done","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"done 1","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"todo   ","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":"todo Buy bread","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":"todo Buy|bread","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"danielsimre"},"content":"deadline   ","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":"deadline Presentation Slides Due/by","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":"deadline Presentation Slides Due /by","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":"deadline Presentation Slides Due /by 2021-08-2 11:00","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":"deadline Presentation Slides Due /by 2021-08-26 11:0","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":"deadline Presentation Slides Due /by 2021-13-26 11:00","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":"deadline Presentation Slides Due /by 2021-08-26 26:00","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"deadline Presentation Slides Due /by 2021-08-26 11:00","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"event","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":"event Project Meeting/atMon 2-4pm","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":"event Project Meeting /at 2021-08-26 20:00","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":"event Project Meeting /at 2021-08-26 20:00 18:00","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":"event Project Meeting /at 2021-08-26 18:00 20:00 ","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"danielsimre"},"content":"done 2","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"danielsimre"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"danielsimre"},"content":"done 3","lastModifiedDate":"2021-08-18"},{"lineNumber":24,"author":{"gitId":"danielsimre"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":25,"author":{"gitId":"danielsimre"},"content":"ondate","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"danielsimre"},"content":"ondate 2021-08-26","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"danielsimre"},"content":"due","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"danielsimre"},"content":"due 1y","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"danielsimre"},"content":"due 10d","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"danielsimre"},"content":"delete","lastModifiedDate":"2021-08-18"},{"lineNumber":31,"author":{"gitId":"danielsimre"},"content":"delete 4","lastModifiedDate":"2021-08-18"},{"lineNumber":32,"author":{"gitId":"danielsimre"},"content":"delete 2","lastModifiedDate":"2021-08-18"},{"lineNumber":33,"author":{"gitId":"danielsimre"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":34,"author":{"gitId":"danielsimre"},"content":"bye","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"danielsimre":34}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":"if exist .\\data\\tasks.txt del .\\data\\tasks.txt","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":"javac -cp ..\\src\\main\\java -Xlint:none -d ..\\bin @sources.txt","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"danielsimre"},"content":"java -classpath ..\\bin duke/Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"danielsimre":4,"-":19}},{"path":"text-ui-test/sources.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"danielsimre"},"content":"..\\src\\main\\java\\duke\\Duke.java","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"danielsimre"},"content":"..\\src\\main\\java\\duke\\command\\AddCommand.java","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"danielsimre"},"content":"..\\src\\main\\java\\duke\\command\\ByeCommand.java","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"danielsimre"},"content":"..\\src\\main\\java\\duke\\command\\Command.java","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"danielsimre"},"content":"..\\src\\main\\java\\duke\\command\\DeleteCommand.java","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"danielsimre"},"content":"..\\src\\main\\java\\duke\\command\\DoneCommand.java","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"danielsimre"},"content":"..\\src\\main\\java\\duke\\command\\DueCommand.java","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"danielsimre"},"content":"..\\src\\main\\java\\duke\\command\\ListCommand.java","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"danielsimre"},"content":"..\\src\\main\\java\\duke\\command\\OnDateCommand.java","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"danielsimre"},"content":"..\\src\\main\\java\\duke\\task\\Deadline.java","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"danielsimre"},"content":"..\\src\\main\\java\\duke\\task\\Event.java","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"danielsimre"},"content":"..\\src\\main\\java\\duke\\task\\Task.java","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"danielsimre"},"content":"..\\src\\main\\java\\duke\\task\\TaskList.java","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"danielsimre"},"content":"..\\src\\main\\java\\duke\\task\\Todo.java","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"danielsimre"},"content":"..\\src\\main\\java\\duke\\util\\DukeException.java","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"danielsimre"},"content":"..\\src\\main\\java\\duke\\util\\Parser.java","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"danielsimre"},"content":"..\\src\\main\\java\\duke\\util\\Storage.java","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"danielsimre"},"content":"..\\src\\main\\java\\duke\\util\\Ui.java","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"danielsimre"},"content":"","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"danielsimre":19}}]

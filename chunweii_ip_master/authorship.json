[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"chunweii"},"content":"# duke.Duke project template","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"chunweii"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"chunweii":2,"-":22}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chunweii"},"content":"package duke;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"chunweii"},"content":"import duke.logic.LDateTimeParser;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"chunweii"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"chunweii"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"chunweii"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"chunweii"},"content":"/**","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"chunweii"},"content":" * A deadline is a task that has a specific deadline.","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"chunweii"},"content":" */","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"chunweii"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"chunweii"},"content":"    private final LocalDate dateOfDeadline;","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"chunweii"},"content":"    private final LocalTime timeOfDeadline;","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"chunweii"},"content":"     * Creates a new deadline object that has the given description and due on the given date.","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"chunweii"},"content":"     * @param description          The description of the deadline","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"chunweii"},"content":"     * @param stringDateOfDeadline The due date/time of the task","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"chunweii"},"content":"    public Deadline(String description, String stringDateOfDeadline) {","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"chunweii"},"content":"        super(description, \"D\");","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"chunweii"},"content":"        LDateTimeParser logicDateTimeParser \u003d new LDateTimeParser(stringDateOfDeadline);","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"chunweii"},"content":"        this.timeOfDeadline \u003d logicDateTimeParser.getTime();","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"chunweii"},"content":"        this.dateOfDeadline \u003d logicDateTimeParser.getDate();","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"chunweii"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"chunweii"},"content":"    public LocalDateTime getDateTime() {","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"chunweii"},"content":"        return LocalDateTime.of(dateOfDeadline, timeOfDeadline);","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"chunweii"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"chunweii"},"content":"    public String toString() {","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"chunweii"},"content":"        return super.toString() + String.format(\" (by: %s, %s)\", dateOfDeadline, timeOfDeadline); // No preposition","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"chunweii"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"chunweii"},"content":"    public String getDataLine() {","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"chunweii"},"content":"        return super.getDataLine() + \" | \" + dateOfDeadline + \" \" + timeOfDeadline;","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"chunweii"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"chunweii":43}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chunweii"},"content":"package duke;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"chunweii"},"content":"import duke.logic.LPrintTask;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"chunweii"},"content":"import java.io.BufferedWriter;","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"chunweii"},"content":"import java.io.File;","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"chunweii"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"chunweii"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"chunweii"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"chunweii"},"content":"import java.util.List;","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"chunweii"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-17"},{"lineNumber":12,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":13,"author":{"gitId":"chunweii"},"content":"/**","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"chunweii"},"content":" * Duke is a personal assistant that allows users to keep track of events, deadlines and things to do.","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"chunweii"},"content":" * The main method will start the personal assistant in the console.","lastModifiedDate":"2021-08-21"},{"lineNumber":16,"author":{"gitId":"chunweii"},"content":" */","lastModifiedDate":"2021-08-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":18,"author":{"gitId":"chunweii"},"content":"    private static final List\u003cTask\u003e storage \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":20,"author":{"gitId":"chunweii"},"content":"    private static void addTask(String[] splitInput) {","lastModifiedDate":"2021-08-17"},{"lineNumber":21,"author":{"gitId":"chunweii"},"content":"        String action; // eg. event, deadline, todo","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"chunweii"},"content":"        StringBuilder descriptionBuilder \u003d new StringBuilder();","lastModifiedDate":"2021-08-17"},{"lineNumber":23,"author":{"gitId":"chunweii"},"content":"        String preposition \u003d null; // eg. at, by, etc","lastModifiedDate":"2021-08-17"},{"lineNumber":24,"author":{"gitId":"chunweii"},"content":"        StringBuilder dateBuilder \u003d new StringBuilder();","lastModifiedDate":"2021-08-17"},{"lineNumber":25,"author":{"gitId":"chunweii"},"content":"        if (splitInput \u003d\u003d null || splitInput.length \u003c 2) {","lastModifiedDate":"2021-08-17"},{"lineNumber":26,"author":{"gitId":"chunweii"},"content":"            throw new DukeException(\"Invalid input. Please enter the action, followed by the description.\\n\" +","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"chunweii"},"content":"                    \"If action is \\\"deadline\\\", add a date in the format:\\\"/by dd/mm/yyyy hh:mm\\\".\\n\" +","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"chunweii"},"content":"                    \"If action is \\\"event\\\", add a date in the format: \\\"/at dd/mm/yyyy hh:mm\\\".\\n\" +","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"chunweii"},"content":"                    \"For example: todo Buy a gift for mum\\n\" +","lastModifiedDate":"2021-08-17"},{"lineNumber":30,"author":{"gitId":"chunweii"},"content":"                    \"For example: deadline CS2103T individual project /by 26/08/2021 23:59\\n\" +","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"chunweii"},"content":"                    \"For example: event CS2103T lecture /at 19/08/2021 16:00\");","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-08-17"},{"lineNumber":33,"author":{"gitId":"chunweii"},"content":"        action \u003d splitInput[0];","lastModifiedDate":"2021-08-17"},{"lineNumber":34,"author":{"gitId":"chunweii"},"content":"        for (int i \u003d 1; i \u003c splitInput.length; i++) {","lastModifiedDate":"2021-08-17"},{"lineNumber":35,"author":{"gitId":"chunweii"},"content":"            if (preposition \u003d\u003d null) {","lastModifiedDate":"2021-08-17"},{"lineNumber":36,"author":{"gitId":"chunweii"},"content":"                if (splitInput[i].contains(\"/\")) {","lastModifiedDate":"2021-08-17"},{"lineNumber":37,"author":{"gitId":"chunweii"},"content":"                    preposition \u003d splitInput[i].substring(1);","lastModifiedDate":"2021-08-17"},{"lineNumber":38,"author":{"gitId":"chunweii"},"content":"                } else {","lastModifiedDate":"2021-08-17"},{"lineNumber":39,"author":{"gitId":"chunweii"},"content":"                    descriptionBuilder.append(splitInput[i]).append(\" \");","lastModifiedDate":"2021-08-17"},{"lineNumber":40,"author":{"gitId":"chunweii"},"content":"                }","lastModifiedDate":"2021-08-17"},{"lineNumber":41,"author":{"gitId":"chunweii"},"content":"            } else {","lastModifiedDate":"2021-08-17"},{"lineNumber":42,"author":{"gitId":"chunweii"},"content":"                dateBuilder.append(splitInput[i]).append(\" \");","lastModifiedDate":"2021-08-17"},{"lineNumber":43,"author":{"gitId":"chunweii"},"content":"            }","lastModifiedDate":"2021-08-17"},{"lineNumber":44,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-08-17"},{"lineNumber":45,"author":{"gitId":"chunweii"},"content":"        if (descriptionBuilder.length() \u003d\u003d 0) {","lastModifiedDate":"2021-08-17"},{"lineNumber":46,"author":{"gitId":"chunweii"},"content":"            throw new DukeException(\"Missing task description.\");","lastModifiedDate":"2021-08-17"},{"lineNumber":47,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-08-17"},{"lineNumber":48,"author":{"gitId":"chunweii"},"content":"        Task newTask;","lastModifiedDate":"2021-08-17"},{"lineNumber":49,"author":{"gitId":"chunweii"},"content":"        switch (action) {","lastModifiedDate":"2021-08-17"},{"lineNumber":50,"author":{"gitId":"chunweii"},"content":"        case \"todo\":","lastModifiedDate":"2021-08-17"},{"lineNumber":51,"author":{"gitId":"chunweii"},"content":"            newTask \u003d new Todo(descriptionBuilder.toString().trim());","lastModifiedDate":"2021-08-17"},{"lineNumber":52,"author":{"gitId":"chunweii"},"content":"            break;","lastModifiedDate":"2021-08-17"},{"lineNumber":53,"author":{"gitId":"chunweii"},"content":"        case \"event\":","lastModifiedDate":"2021-08-17"},{"lineNumber":54,"author":{"gitId":"chunweii"},"content":"            if (preposition \u003d\u003d null || !preposition.equals(\"at\")) {","lastModifiedDate":"2021-08-17"},{"lineNumber":55,"author":{"gitId":"chunweii"},"content":"                throw new DukeException(\"Use the preposition \\\"at\\\".\");","lastModifiedDate":"2021-08-17"},{"lineNumber":56,"author":{"gitId":"chunweii"},"content":"            } else if (dateBuilder.length() \u003d\u003d 0) {","lastModifiedDate":"2021-08-17"},{"lineNumber":57,"author":{"gitId":"chunweii"},"content":"                throw new DukeException(\"Enter the date of the event.\");","lastModifiedDate":"2021-08-17"},{"lineNumber":58,"author":{"gitId":"chunweii"},"content":"            }","lastModifiedDate":"2021-08-17"},{"lineNumber":59,"author":{"gitId":"chunweii"},"content":"            newTask \u003d new Event(descriptionBuilder.toString().trim(), dateBuilder.toString().trim());","lastModifiedDate":"2021-08-17"},{"lineNumber":60,"author":{"gitId":"chunweii"},"content":"            break;","lastModifiedDate":"2021-08-17"},{"lineNumber":61,"author":{"gitId":"chunweii"},"content":"        case \"deadline\":","lastModifiedDate":"2021-08-17"},{"lineNumber":62,"author":{"gitId":"chunweii"},"content":"            if (preposition \u003d\u003d null || !preposition.equals(\"by\")) {","lastModifiedDate":"2021-08-17"},{"lineNumber":63,"author":{"gitId":"chunweii"},"content":"                throw new DukeException(\"Use the preposition \\\"by\\\".\");","lastModifiedDate":"2021-08-17"},{"lineNumber":64,"author":{"gitId":"chunweii"},"content":"            } else if (dateBuilder.length() \u003d\u003d 0) {","lastModifiedDate":"2021-08-17"},{"lineNumber":65,"author":{"gitId":"chunweii"},"content":"                throw new DukeException(\"Enter the deadline.\");","lastModifiedDate":"2021-08-17"},{"lineNumber":66,"author":{"gitId":"chunweii"},"content":"            }","lastModifiedDate":"2021-08-17"},{"lineNumber":67,"author":{"gitId":"chunweii"},"content":"            newTask \u003d new Deadline(descriptionBuilder.toString().trim(), dateBuilder.toString().trim());","lastModifiedDate":"2021-08-17"},{"lineNumber":68,"author":{"gitId":"chunweii"},"content":"            break;","lastModifiedDate":"2021-08-17"},{"lineNumber":69,"author":{"gitId":"chunweii"},"content":"        default:","lastModifiedDate":"2021-08-17"},{"lineNumber":70,"author":{"gitId":"chunweii"},"content":"            throw new DukeException(\"Only todo, event or deadline allowed.\");","lastModifiedDate":"2021-08-17"},{"lineNumber":71,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-08-17"},{"lineNumber":72,"author":{"gitId":"chunweii"},"content":"        storage.add(newTask);","lastModifiedDate":"2021-08-22"},{"lineNumber":73,"author":{"gitId":"chunweii"},"content":"        System.out.println(\"Got it. I have added this task:\");","lastModifiedDate":"2021-08-17"},{"lineNumber":74,"author":{"gitId":"chunweii"},"content":"        System.out.println(\"    \" + newTask);","lastModifiedDate":"2021-08-17"},{"lineNumber":75,"author":{"gitId":"chunweii"},"content":"        try {","lastModifiedDate":"2021-08-22"},{"lineNumber":76,"author":{"gitId":"chunweii"},"content":"            updateDukeTextFile();","lastModifiedDate":"2021-08-22"},{"lineNumber":77,"author":{"gitId":"chunweii"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-22"},{"lineNumber":78,"author":{"gitId":"chunweii"},"content":"            System.out.println(\"However an error occured while writing to dukedata.txt:\");","lastModifiedDate":"2021-08-22"},{"lineNumber":79,"author":{"gitId":"chunweii"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-22"},{"lineNumber":80,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":81,"author":{"gitId":"chunweii"},"content":"        printNumberOfTasks();","lastModifiedDate":"2021-08-22"},{"lineNumber":82,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":83,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":84,"author":{"gitId":"chunweii"},"content":"    private static void deleteTask(int taskNumber) {","lastModifiedDate":"2021-08-22"},{"lineNumber":85,"author":{"gitId":"chunweii"},"content":"        Task task \u003d storage.remove(taskNumber - 1);","lastModifiedDate":"2021-08-22"},{"lineNumber":86,"author":{"gitId":"chunweii"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2021-08-22"},{"lineNumber":87,"author":{"gitId":"chunweii"},"content":"        System.out.println(\"    \" + task);","lastModifiedDate":"2021-08-22"},{"lineNumber":88,"author":{"gitId":"chunweii"},"content":"        try {","lastModifiedDate":"2021-08-22"},{"lineNumber":89,"author":{"gitId":"chunweii"},"content":"            updateDukeTextFile();","lastModifiedDate":"2021-08-22"},{"lineNumber":90,"author":{"gitId":"chunweii"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-22"},{"lineNumber":91,"author":{"gitId":"chunweii"},"content":"            System.out.println(\"However an error occured while writing to dukedata.txt:\");","lastModifiedDate":"2021-08-22"},{"lineNumber":92,"author":{"gitId":"chunweii"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-22"},{"lineNumber":93,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":94,"author":{"gitId":"chunweii"},"content":"        printNumberOfTasks();","lastModifiedDate":"2021-08-18"},{"lineNumber":95,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":96,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":97,"author":{"gitId":"chunweii"},"content":"    private static boolean doneTask(int taskNumber) { // returns true if success","lastModifiedDate":"2021-08-22"},{"lineNumber":98,"author":{"gitId":"chunweii"},"content":"        if (storage.get(taskNumber - 1).markAsDone()) {","lastModifiedDate":"2021-08-22"},{"lineNumber":99,"author":{"gitId":"chunweii"},"content":"            System.out.println(\"Nice! I\u0027ve marked this task as done: \");","lastModifiedDate":"2021-08-22"},{"lineNumber":100,"author":{"gitId":"chunweii"},"content":"            System.out.println(\"    \" + storage.get(taskNumber - 1));","lastModifiedDate":"2021-08-22"},{"lineNumber":101,"author":{"gitId":"chunweii"},"content":"            try {","lastModifiedDate":"2021-08-22"},{"lineNumber":102,"author":{"gitId":"chunweii"},"content":"                updateDukeTextFile();","lastModifiedDate":"2021-08-22"},{"lineNumber":103,"author":{"gitId":"chunweii"},"content":"            } catch (IOException e) {","lastModifiedDate":"2021-08-22"},{"lineNumber":104,"author":{"gitId":"chunweii"},"content":"                System.out.println(\"However an error occured while writing to dukedata.txt:\");","lastModifiedDate":"2021-08-22"},{"lineNumber":105,"author":{"gitId":"chunweii"},"content":"                e.printStackTrace();","lastModifiedDate":"2021-08-22"},{"lineNumber":106,"author":{"gitId":"chunweii"},"content":"            }","lastModifiedDate":"2021-08-22"},{"lineNumber":107,"author":{"gitId":"chunweii"},"content":"            return true;","lastModifiedDate":"2021-08-22"},{"lineNumber":108,"author":{"gitId":"chunweii"},"content":"        } else {","lastModifiedDate":"2021-08-22"},{"lineNumber":109,"author":{"gitId":"chunweii"},"content":"            return false;","lastModifiedDate":"2021-08-22"},{"lineNumber":110,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":111,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":112,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":113,"author":{"gitId":"chunweii"},"content":"    private static void printNumberOfTasks() {","lastModifiedDate":"2021-08-18"},{"lineNumber":114,"author":{"gitId":"chunweii"},"content":"        System.out.println(\"Now you have \" + storage.size() + \" task\"","lastModifiedDate":"2021-08-22"},{"lineNumber":115,"author":{"gitId":"chunweii"},"content":"                + (storage.size() \u003c\u003d 1 ? \" in the list\" : \"s in the list\"));","lastModifiedDate":"2021-08-22"},{"lineNumber":116,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":117,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":118,"author":{"gitId":"chunweii"},"content":"    // A naive but good enough approach. A better way will be just to edit the lines,","lastModifiedDate":"2021-08-22"},{"lineNumber":119,"author":{"gitId":"chunweii"},"content":"    // but only if the text file is correct, which is hard to enforce.","lastModifiedDate":"2021-08-22"},{"lineNumber":120,"author":{"gitId":"chunweii"},"content":"    private static void updateDukeTextFile() throws IOException {","lastModifiedDate":"2021-08-22"},{"lineNumber":121,"author":{"gitId":"chunweii"},"content":"        File textFile \u003d new File(\"./dukedata.txt\");","lastModifiedDate":"2021-08-22"},{"lineNumber":122,"author":{"gitId":"chunweii"},"content":"        BufferedWriter writer \u003d new BufferedWriter(new FileWriter(textFile));","lastModifiedDate":"2021-08-22"},{"lineNumber":123,"author":{"gitId":"chunweii"},"content":"        writer.write(\"\"); // Overwrites everything","lastModifiedDate":"2021-08-22"},{"lineNumber":124,"author":{"gitId":"chunweii"},"content":"        for (Task task : storage) {","lastModifiedDate":"2021-08-22"},{"lineNumber":125,"author":{"gitId":"chunweii"},"content":"            writer.append(task.getDataLine()).append(\"\\n\");","lastModifiedDate":"2021-08-22"},{"lineNumber":126,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":127,"author":{"gitId":"chunweii"},"content":"        writer.close();","lastModifiedDate":"2021-08-22"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":129,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":130,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":131,"author":{"gitId":"chunweii"},"content":"     * Processes the input and prints the responses, or throw a DukeException if input is wrong.","lastModifiedDate":"2021-08-18"},{"lineNumber":132,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":133,"author":{"gitId":"chunweii"},"content":"     * @param input The input from the user","lastModifiedDate":"2021-08-18"},{"lineNumber":134,"author":{"gitId":"chunweii"},"content":"     * @return true only if a command (\"bye\") to shut down the chat is given","lastModifiedDate":"2021-08-18"},{"lineNumber":135,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":136,"author":{"gitId":"chunweii"},"content":"    private static boolean processInput(String input) {","lastModifiedDate":"2021-08-18"},{"lineNumber":137,"author":{"gitId":"chunweii"},"content":"        int storageCount \u003d storage.size();","lastModifiedDate":"2021-08-22"},{"lineNumber":138,"author":{"gitId":"chunweii"},"content":"        switch (input) {","lastModifiedDate":"2021-08-18"},{"lineNumber":139,"author":{"gitId":"chunweii"},"content":"        case \"bye\":","lastModifiedDate":"2021-08-18"},{"lineNumber":140,"author":{"gitId":"chunweii"},"content":"            System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2021-08-18"},{"lineNumber":141,"author":{"gitId":"chunweii"},"content":"            return true;","lastModifiedDate":"2021-08-18"},{"lineNumber":142,"author":{"gitId":"chunweii"},"content":"        case \"list\":","lastModifiedDate":"2021-08-18"},{"lineNumber":143,"author":{"gitId":"chunweii"},"content":"            LPrintTask.printAllTasks(storage);","lastModifiedDate":"2021-08-22"},{"lineNumber":144,"author":{"gitId":"chunweii"},"content":"            break;","lastModifiedDate":"2021-08-18"},{"lineNumber":145,"author":{"gitId":"chunweii"},"content":"        case \"upcoming\":","lastModifiedDate":"2021-08-22"},{"lineNumber":146,"author":{"gitId":"chunweii"},"content":"            LPrintTask.printUpcomingTasks(storage);","lastModifiedDate":"2021-08-22"},{"lineNumber":147,"author":{"gitId":"chunweii"},"content":"            break;","lastModifiedDate":"2021-08-18"},{"lineNumber":148,"author":{"gitId":"chunweii"},"content":"        default:","lastModifiedDate":"2021-08-18"},{"lineNumber":149,"author":{"gitId":"chunweii"},"content":"            String[] splitInput \u003d input.split(\" \");","lastModifiedDate":"2021-08-18"},{"lineNumber":150,"author":{"gitId":"chunweii"},"content":"            if (splitInput[0].equals(\"done\") || splitInput[0].equals(\"delete\")) {","lastModifiedDate":"2021-08-18"},{"lineNumber":151,"author":{"gitId":"chunweii"},"content":"                int taskNumber;","lastModifiedDate":"2021-08-18"},{"lineNumber":152,"author":{"gitId":"chunweii"},"content":"                if (splitInput.length !\u003d 2) {","lastModifiedDate":"2021-08-18"},{"lineNumber":153,"author":{"gitId":"chunweii"},"content":"                    System.out.printf(\"Please key in %s [number].\\n\", splitInput[0]);","lastModifiedDate":"2021-08-18"},{"lineNumber":154,"author":{"gitId":"chunweii"},"content":"                } else {","lastModifiedDate":"2021-08-18"},{"lineNumber":155,"author":{"gitId":"chunweii"},"content":"                    try {","lastModifiedDate":"2021-08-18"},{"lineNumber":156,"author":{"gitId":"chunweii"},"content":"                        taskNumber \u003d Integer.parseInt(splitInput[1]);","lastModifiedDate":"2021-08-18"},{"lineNumber":157,"author":{"gitId":"chunweii"},"content":"                        if (taskNumber \u003c 1 || taskNumber \u003e storageCount) {","lastModifiedDate":"2021-08-18"},{"lineNumber":158,"author":{"gitId":"chunweii"},"content":"                            throw new DukeException(storageCount \u003e 1","lastModifiedDate":"2021-08-18"},{"lineNumber":159,"author":{"gitId":"chunweii"},"content":"                                    ? \"Please input a value between 1 and \" + storageCount","lastModifiedDate":"2021-08-18"},{"lineNumber":160,"author":{"gitId":"chunweii"},"content":"                                    : storageCount \u003d\u003d 1","lastModifiedDate":"2021-08-18"},{"lineNumber":161,"author":{"gitId":"chunweii"},"content":"                                    ? \"You can only input the value 1\"","lastModifiedDate":"2021-08-18"},{"lineNumber":162,"author":{"gitId":"chunweii"},"content":"                                    : \"There are no tasks so far\");","lastModifiedDate":"2021-08-18"},{"lineNumber":163,"author":{"gitId":"chunweii"},"content":"                        }","lastModifiedDate":"2021-08-18"},{"lineNumber":164,"author":{"gitId":"chunweii"},"content":"                    } catch (NumberFormatException e) {","lastModifiedDate":"2021-08-18"},{"lineNumber":165,"author":{"gitId":"chunweii"},"content":"                        throw new DukeException(\"Please enter a number after \" + splitInput[0]);","lastModifiedDate":"2021-08-18"},{"lineNumber":166,"author":{"gitId":"chunweii"},"content":"                    }","lastModifiedDate":"2021-08-18"},{"lineNumber":167,"author":{"gitId":"chunweii"},"content":"                    if (splitInput[0].equals(\"done\")) {","lastModifiedDate":"2021-08-18"},{"lineNumber":168,"author":{"gitId":"chunweii"},"content":"                        if (!doneTask(taskNumber)) { // attempts to mark task as done","lastModifiedDate":"2021-08-22"},{"lineNumber":169,"author":{"gitId":"chunweii"},"content":"                            throw new DukeException(\"You have already marked this as done\");","lastModifiedDate":"2021-08-18"},{"lineNumber":170,"author":{"gitId":"chunweii"},"content":"                        }","lastModifiedDate":"2021-08-18"},{"lineNumber":171,"author":{"gitId":"chunweii"},"content":"                    } else { // first word is delete","lastModifiedDate":"2021-08-18"},{"lineNumber":172,"author":{"gitId":"chunweii"},"content":"                        deleteTask(taskNumber);","lastModifiedDate":"2021-08-22"},{"lineNumber":173,"author":{"gitId":"chunweii"},"content":"                    }","lastModifiedDate":"2021-08-18"},{"lineNumber":174,"author":{"gitId":"chunweii"},"content":"                }","lastModifiedDate":"2021-08-18"},{"lineNumber":175,"author":{"gitId":"chunweii"},"content":"            } else if (storageCount \u003c 100) {","lastModifiedDate":"2021-08-18"},{"lineNumber":176,"author":{"gitId":"chunweii"},"content":"                addTask(splitInput);","lastModifiedDate":"2021-08-18"},{"lineNumber":177,"author":{"gitId":"chunweii"},"content":"            } else {","lastModifiedDate":"2021-08-18"},{"lineNumber":178,"author":{"gitId":"chunweii"},"content":"                throw new DukeException(\"Maximum storage size reached.\");","lastModifiedDate":"2021-08-18"},{"lineNumber":179,"author":{"gitId":"chunweii"},"content":"            }","lastModifiedDate":"2021-08-18"},{"lineNumber":180,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":181,"author":{"gitId":"chunweii"},"content":"        return false;","lastModifiedDate":"2021-08-18"},{"lineNumber":182,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":183,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":184,"author":{"gitId":"chunweii"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-18"},{"lineNumber":185,"author":{"gitId":"chunweii"},"content":"        String logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2021-08-18"},{"lineNumber":186,"author":{"gitId":"chunweii"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2021-08-18"},{"lineNumber":187,"author":{"gitId":"chunweii"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2021-08-18"},{"lineNumber":188,"author":{"gitId":"chunweii"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2021-08-18"},{"lineNumber":189,"author":{"gitId":"chunweii"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2021-08-18"},{"lineNumber":190,"author":{"gitId":"chunweii"},"content":"        System.out.println(\"Hello, I am\\n\" + logo);","lastModifiedDate":"2021-08-18"},{"lineNumber":191,"author":{"gitId":"chunweii"},"content":"        System.out.println(\"What can I do for you today?\");","lastModifiedDate":"2021-08-18"},{"lineNumber":192,"author":{"gitId":"chunweii"},"content":"        System.out.println(\"------------------\");","lastModifiedDate":"2021-08-18"},{"lineNumber":193,"author":{"gitId":"chunweii"},"content":"        String input;","lastModifiedDate":"2021-08-18"},{"lineNumber":194,"author":{"gitId":"chunweii"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-18"},{"lineNumber":195,"author":{"gitId":"chunweii"},"content":"        while (sc.hasNextLine()) {","lastModifiedDate":"2021-08-18"},{"lineNumber":196,"author":{"gitId":"chunweii"},"content":"            input \u003d sc.nextLine();","lastModifiedDate":"2021-08-18"},{"lineNumber":197,"author":{"gitId":"chunweii"},"content":"            try {","lastModifiedDate":"2021-08-18"},{"lineNumber":198,"author":{"gitId":"chunweii"},"content":"                if (processInput(input)) {","lastModifiedDate":"2021-08-18"},{"lineNumber":199,"author":{"gitId":"chunweii"},"content":"                    return;","lastModifiedDate":"2021-08-18"},{"lineNumber":200,"author":{"gitId":"chunweii"},"content":"                }","lastModifiedDate":"2021-08-18"},{"lineNumber":201,"author":{"gitId":"chunweii"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2021-08-18"},{"lineNumber":202,"author":{"gitId":"chunweii"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2021-08-18"},{"lineNumber":203,"author":{"gitId":"chunweii"},"content":"            }","lastModifiedDate":"2021-08-18"},{"lineNumber":204,"author":{"gitId":"chunweii"},"content":"            System.out.println(\"------------------\");","lastModifiedDate":"2021-08-18"},{"lineNumber":205,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":206,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":207,"author":{"gitId":"chunweii"},"content":"        sc.close();","lastModifiedDate":"2021-08-18"},{"lineNumber":208,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":209,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":210,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":211,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"chunweii":208,"-":3}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chunweii"},"content":"package duke;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"chunweii"},"content":"/**","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"chunweii"},"content":" * duke.DukeException is a runtime exception for exceptions generated due to invalid inputs or problems adding tasks.","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"chunweii"},"content":" */","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"chunweii"},"content":"public class DukeException extends RuntimeException {","lastModifiedDate":"2021-08-17"},{"lineNumber":7,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":9,"author":{"gitId":"chunweii"},"content":"     * Creates a new runtime exception when there is a problem with inputs or adding tasks.","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"chunweii"},"content":"     * @param message The description of the error","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"chunweii"},"content":"    public DukeException(String message) {","lastModifiedDate":"2021-08-17"},{"lineNumber":14,"author":{"gitId":"chunweii"},"content":"        super(message);","lastModifiedDate":"2021-08-17"},{"lineNumber":15,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":16,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":17,"author":{"gitId":"chunweii"},"content":"    @Override","lastModifiedDate":"2021-08-17"},{"lineNumber":18,"author":{"gitId":"chunweii"},"content":"    public String getMessage() {","lastModifiedDate":"2021-08-17"},{"lineNumber":19,"author":{"gitId":"chunweii"},"content":"        return \":\u0027( OOPS!!! \" + super.getMessage();","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":21,"author":{"gitId":"chunweii"},"content":"}","lastModifiedDate":"2021-08-17"}],"authorContributionMap":{"chunweii":21}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chunweii"},"content":"package duke;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"chunweii"},"content":"import duke.logic.LDateTimeParser;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"chunweii"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"chunweii"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"chunweii"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"chunweii"},"content":"/**","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"chunweii"},"content":" * An event is a task that has a date attached.","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"chunweii"},"content":" */","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"chunweii"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"chunweii"},"content":"    private final LocalDate dateOfEvent;","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"chunweii"},"content":"    private final LocalTime timeOfEvent;","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"chunweii"},"content":"     * Creates a new event with the given description on the given eventDate.","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"chunweii"},"content":"     * @param description The description of the event","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"chunweii"},"content":"     * @param eventDate   The date of the event","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"chunweii"},"content":"    public Event(String description, String eventDate) {","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"chunweii"},"content":"        super(description, \"E\");","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"chunweii"},"content":"        LDateTimeParser logicDateTimeParser \u003d new LDateTimeParser(eventDate);","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"chunweii"},"content":"        this.timeOfEvent \u003d logicDateTimeParser.getTime();","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"chunweii"},"content":"        this.dateOfEvent \u003d logicDateTimeParser.getDate();","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"chunweii"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"chunweii"},"content":"    public LocalDateTime getDateTime() {","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"chunweii"},"content":"        return LocalDateTime.of(dateOfEvent, timeOfEvent);","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"chunweii"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"chunweii"},"content":"    public String toString() {","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"chunweii"},"content":"        return super.toString() + String.format(\" (at: %s, %s)\", dateOfEvent, timeOfEvent); // No preposition","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"chunweii"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"chunweii"},"content":"    public String getDataLine() {","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"chunweii"},"content":"        return super.getDataLine() + \" | \" + dateOfEvent + \" \" + timeOfEvent;","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"chunweii"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"chunweii":43}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chunweii"},"content":"package duke;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"chunweii"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"chunweii"},"content":"import java.util.Objects;","lastModifiedDate":"2021-08-17"},{"lineNumber":5,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":6,"author":{"gitId":"chunweii"},"content":"/**","lastModifiedDate":"2021-08-21"},{"lineNumber":7,"author":{"gitId":"chunweii"},"content":" * duke.Task is a general class for any task that is to be saved by duke.Duke.","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"chunweii"},"content":" */","lastModifiedDate":"2021-08-21"},{"lineNumber":9,"author":{"gitId":"chunweii"},"content":"public abstract class Task {","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"chunweii"},"content":"    private final String description, taskType;","lastModifiedDate":"2021-08-17"},{"lineNumber":11,"author":{"gitId":"chunweii"},"content":"    private boolean isDone;","lastModifiedDate":"2021-08-17"},{"lineNumber":12,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":13,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"chunweii"},"content":"     * The constructor for a task object","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"chunweii"},"content":"     * @param description The description of the task","lastModifiedDate":"2021-08-21"},{"lineNumber":17,"author":{"gitId":"chunweii"},"content":"     * @param taskType    The type of task (to\u003c\u003e\u003c/\u003edo/event/deadline)","lastModifiedDate":"2021-08-21"},{"lineNumber":18,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":19,"author":{"gitId":"chunweii"},"content":"    public Task(String description, String taskType) {","lastModifiedDate":"2021-08-17"},{"lineNumber":20,"author":{"gitId":"chunweii"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-17"},{"lineNumber":21,"author":{"gitId":"chunweii"},"content":"        this.taskType \u003d taskType;","lastModifiedDate":"2021-08-17"},{"lineNumber":22,"author":{"gitId":"chunweii"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-17"},{"lineNumber":23,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":24,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":25,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-17"},{"lineNumber":26,"author":{"gitId":"chunweii"},"content":"     * Gets the status string \u003ccode\u003e[\u0026lt;taskType\u0026gt;][\u0026lt;isDone\u0026gt;]\u003c/code\u003e","lastModifiedDate":"2021-08-17"},{"lineNumber":27,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-17"},{"lineNumber":28,"author":{"gitId":"chunweii"},"content":"     * @return the associated string","lastModifiedDate":"2021-08-17"},{"lineNumber":29,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-17"},{"lineNumber":30,"author":{"gitId":"chunweii"},"content":"    public String getStatus() {","lastModifiedDate":"2021-08-17"},{"lineNumber":31,"author":{"gitId":"chunweii"},"content":"        return (isDone ? String.format(\"[%s][X]\", taskType) : String.format(\"[%s][ ]\", taskType)); // mark done task with X","lastModifiedDate":"2021-08-17"},{"lineNumber":32,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":33,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":34,"author":{"gitId":"chunweii"},"content":"    public boolean isDone() {","lastModifiedDate":"2021-08-17"},{"lineNumber":35,"author":{"gitId":"chunweii"},"content":"        return this.isDone;","lastModifiedDate":"2021-08-17"},{"lineNumber":36,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":37,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":38,"author":{"gitId":"chunweii"},"content":"    public String getDescription() {","lastModifiedDate":"2021-08-17"},{"lineNumber":39,"author":{"gitId":"chunweii"},"content":"        return this.description;","lastModifiedDate":"2021-08-17"},{"lineNumber":40,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":41,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":42,"author":{"gitId":"chunweii"},"content":"    public String getTaskType() {","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"chunweii"},"content":"        return taskType;","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"chunweii"},"content":"    public boolean markAsDone() {","lastModifiedDate":"2021-08-17"},{"lineNumber":47,"author":{"gitId":"chunweii"},"content":"        if (this.isDone) {","lastModifiedDate":"2021-08-18"},{"lineNumber":48,"author":{"gitId":"chunweii"},"content":"            return false;","lastModifiedDate":"2021-08-18"},{"lineNumber":49,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":50,"author":{"gitId":"chunweii"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-08-17"},{"lineNumber":51,"author":{"gitId":"chunweii"},"content":"        return true;","lastModifiedDate":"2021-08-17"},{"lineNumber":52,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":53,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":54,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":55,"author":{"gitId":"chunweii"},"content":"     * Gets the date and time of the task, or null if not applicable.","lastModifiedDate":"2021-08-22"},{"lineNumber":56,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":57,"author":{"gitId":"chunweii"},"content":"     * @return the associated LocalDateTime object","lastModifiedDate":"2021-08-22"},{"lineNumber":58,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":59,"author":{"gitId":"chunweii"},"content":"    public abstract LocalDateTime getDateTime();","lastModifiedDate":"2021-08-22"},{"lineNumber":60,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":61,"author":{"gitId":"chunweii"},"content":"    @Override","lastModifiedDate":"2021-08-17"},{"lineNumber":62,"author":{"gitId":"chunweii"},"content":"    public boolean equals(Object o) {","lastModifiedDate":"2021-08-17"},{"lineNumber":63,"author":{"gitId":"chunweii"},"content":"        if (this \u003d\u003d o) return true;","lastModifiedDate":"2021-08-17"},{"lineNumber":64,"author":{"gitId":"chunweii"},"content":"        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) return false;","lastModifiedDate":"2021-08-17"},{"lineNumber":65,"author":{"gitId":"chunweii"},"content":"        Task task \u003d (Task) o;","lastModifiedDate":"2021-08-17"},{"lineNumber":66,"author":{"gitId":"chunweii"},"content":"        return isDone \u003d\u003d task.isDone \u0026\u0026 description.equals(task.description);","lastModifiedDate":"2021-08-17"},{"lineNumber":67,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":68,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":69,"author":{"gitId":"chunweii"},"content":"    @Override","lastModifiedDate":"2021-08-17"},{"lineNumber":70,"author":{"gitId":"chunweii"},"content":"    public int hashCode() {","lastModifiedDate":"2021-08-17"},{"lineNumber":71,"author":{"gitId":"chunweii"},"content":"        return Objects.hash(description, isDone);","lastModifiedDate":"2021-08-17"},{"lineNumber":72,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":73,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":74,"author":{"gitId":"chunweii"},"content":"    @Override","lastModifiedDate":"2021-08-17"},{"lineNumber":75,"author":{"gitId":"chunweii"},"content":"    public String toString() {","lastModifiedDate":"2021-08-17"},{"lineNumber":76,"author":{"gitId":"chunweii"},"content":"        return String.format(\"%s %s\", this.getStatus(), this.getDescription());","lastModifiedDate":"2021-08-17"},{"lineNumber":77,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":78,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":79,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":80,"author":{"gitId":"chunweii"},"content":"     * Gets the string that is to be appended in the dukedata.txt file.","lastModifiedDate":"2021-08-22"},{"lineNumber":81,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":82,"author":{"gitId":"chunweii"},"content":"     * @return The associated string","lastModifiedDate":"2021-08-22"},{"lineNumber":83,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":84,"author":{"gitId":"chunweii"},"content":"    public String getDataLine() {","lastModifiedDate":"2021-08-22"},{"lineNumber":85,"author":{"gitId":"chunweii"},"content":"        return String.format(\"%s | %d | %s\", taskType, isDone ? 1 : 0, description);","lastModifiedDate":"2021-08-22"},{"lineNumber":86,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":87,"author":{"gitId":"chunweii"},"content":"}","lastModifiedDate":"2021-08-17"}],"authorContributionMap":{"chunweii":87}},{"path":"src/main/java/duke/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chunweii"},"content":"package duke;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"chunweii"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"chunweii"},"content":"/**","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"chunweii"},"content":" * A simple task with no deadline","lastModifiedDate":"2021-08-21"},{"lineNumber":7,"author":{"gitId":"chunweii"},"content":" */","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"chunweii"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-08-17"},{"lineNumber":9,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"chunweii"},"content":"     * Creates a duke.Todo object that does not have any dates.","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"chunweii"},"content":"     * @param description The description of the task to be done","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"chunweii"},"content":"    public Todo(String description) {","lastModifiedDate":"2021-08-17"},{"lineNumber":15,"author":{"gitId":"chunweii"},"content":"        super(description, \"T\");","lastModifiedDate":"2021-08-17"},{"lineNumber":16,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":17,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"chunweii"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"chunweii"},"content":"    public LocalDateTime getDateTime() {","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"chunweii"},"content":"        return null;","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"chunweii"},"content":"    @Override","lastModifiedDate":"2021-08-17"},{"lineNumber":24,"author":{"gitId":"chunweii"},"content":"    public String toString() {","lastModifiedDate":"2021-08-17"},{"lineNumber":25,"author":{"gitId":"chunweii"},"content":"        return super.toString(); // No preposition","lastModifiedDate":"2021-08-17"},{"lineNumber":26,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":27,"author":{"gitId":"chunweii"},"content":"}","lastModifiedDate":"2021-08-17"}],"authorContributionMap":{"chunweii":27}},{"path":"src/main/java/duke/logic/LDateTimeParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chunweii"},"content":"package duke.logic;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"chunweii"},"content":"import duke.DukeException;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"chunweii"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"chunweii"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"chunweii"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"chunweii"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"chunweii"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"chunweii"},"content":"/**","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"chunweii"},"content":" * Enables simpler parsing of date and time for events and deadlines.","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"chunweii"},"content":" */","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"chunweii"},"content":"public class LDateTimeParser {","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"chunweii"},"content":"    private final LocalTime time;","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"chunweii"},"content":"    private final LocalDate date;","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"chunweii"},"content":"     * Creates a new instance of a Date","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"chunweii"},"content":"     * @param dateTime The string to be parsed","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"chunweii"},"content":"    public LDateTimeParser(String dateTime) {","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"chunweii"},"content":"        String[] dateAndTime \u003d Arrays.stream(dateTime.split(\"[ |,]\", 2))","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"chunweii"},"content":"                .map(String::trim).toArray(String[]::new);","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"chunweii"},"content":"        try {","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"chunweii"},"content":"            if (dateAndTime.length \u003d\u003d 1) {","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"chunweii"},"content":"                if (dateAndTime[0].contains(\"/\")) { // User entered date","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"chunweii"},"content":"                    this.date \u003d LocalDate.parse(dateAndTime[0], DateTimeFormatter.ofPattern(\"d/M/yyyy\"));","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"chunweii"},"content":"                    this.time \u003d LocalTime.parse(\"23:59\");","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"chunweii"},"content":"                } else { // User likely entered time","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"chunweii"},"content":"                    this.time \u003d LocalTime.parse(dateAndTime[0], DateTimeFormatter.ofPattern(\"H:m\"));","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"chunweii"},"content":"                    this.date \u003d this.time.isAfter(LocalTime.now()) ? LocalDate.now() : LocalDate.now().plusDays(1);","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"chunweii"},"content":"                }","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"chunweii"},"content":"            } else {","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"chunweii"},"content":"                this.date \u003d LocalDate.parse(dateAndTime[0], DateTimeFormatter.ofPattern(\"d/M/yyyy\"));","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"chunweii"},"content":"                this.time \u003d LocalTime.parse(dateAndTime[1], DateTimeFormatter.ofPattern(\"H:m\"));","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"chunweii"},"content":"            }","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"chunweii"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"chunweii"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"chunweii"},"content":"            throw new DukeException(\"Invalid date and time format. Please enter them in the format: d/M/YYYY H:m.\\n\" +","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"chunweii"},"content":"                    \"For example: 23/8/2021 14:00\");","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"chunweii"},"content":"    public LocalDate getDate() {","lastModifiedDate":"2021-08-22"},{"lineNumber":47,"author":{"gitId":"chunweii"},"content":"        return date;","lastModifiedDate":"2021-08-22"},{"lineNumber":48,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":49,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":50,"author":{"gitId":"chunweii"},"content":"    public LocalTime getTime() {","lastModifiedDate":"2021-08-22"},{"lineNumber":51,"author":{"gitId":"chunweii"},"content":"        return time;","lastModifiedDate":"2021-08-22"},{"lineNumber":52,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":53,"author":{"gitId":"chunweii"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"chunweii":53}},{"path":"src/main/java/duke/logic/LPrintTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chunweii"},"content":"package duke.logic;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"chunweii"},"content":"import duke.Task;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"chunweii"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"chunweii"},"content":"import java.util.List;","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"chunweii"},"content":"import java.util.Map;","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"chunweii"},"content":"import java.util.TreeMap;","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"chunweii"},"content":"/**","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"chunweii"},"content":" * The logic for printing tasks.","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"chunweii"},"content":" */","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"chunweii"},"content":"public final class LPrintTask {","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"chunweii"},"content":"    // No initialization required.","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"chunweii"},"content":"    private LPrintTask() {","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"chunweii"},"content":"     * Prints all upcoming tasks from a list of tasks.","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"chunweii"},"content":"     * @param tasks The list of tasks","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"chunweii"},"content":"    public static void printUpcomingTasks(List\u003c? extends Task\u003e tasks) {","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"chunweii"},"content":"        int taskSize \u003d tasks.size();","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"chunweii"},"content":"        Map\u003cTask, Integer\u003e upcomingTasks \u003d new TreeMap\u003c\u003e((task1, task2) -\u003e {","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"chunweii"},"content":"            LocalDateTime dateTime1 \u003d task1.getDateTime();","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"chunweii"},"content":"            LocalDateTime dateTime2 \u003d task2.getDateTime();","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"chunweii"},"content":"            // time can be null if task is to-do. By default, put all to-do to the last.","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"chunweii"},"content":"            return dateTime1 \u003d\u003d null \u0026\u0026 dateTime2 \u003d\u003d null","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"chunweii"},"content":"                    ? 0","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"chunweii"},"content":"                    : dateTime1 \u003d\u003d null","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"chunweii"},"content":"                    ? 1","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"chunweii"},"content":"                    : dateTime2 \u003d\u003d null","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"chunweii"},"content":"                    ? -1","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"chunweii"},"content":"                    : dateTime1.compareTo(dateTime2);","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"chunweii"},"content":"        });","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"chunweii"},"content":"        for (int i \u003d 1; i \u003c\u003d taskSize; i++) {","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"chunweii"},"content":"            Task task \u003d tasks.get(i - 1);","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"chunweii"},"content":"            String type \u003d task.getTaskType();","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"chunweii"},"content":"            if (!task.isDone() \u0026\u0026 // Task is not done and it is either to-do or the date is later than now.","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"chunweii"},"content":"                    (type.equals(\"T\") || task.getDateTime().isAfter(LocalDateTime.now()))) {","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"chunweii"},"content":"                upcomingTasks.put(task, i);","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"chunweii"},"content":"            }","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"chunweii"},"content":"        upcomingTasks.forEach((task, i) -\u003e print(task, i, taskSize));","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":47,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":48,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":49,"author":{"gitId":"chunweii"},"content":"     * Prints all tasks from a list of tasks.","lastModifiedDate":"2021-08-22"},{"lineNumber":50,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":51,"author":{"gitId":"chunweii"},"content":"     * @param tasks The list of tasks","lastModifiedDate":"2021-08-22"},{"lineNumber":52,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":53,"author":{"gitId":"chunweii"},"content":"    public static void printAllTasks(List\u003c? extends Task\u003e tasks) {","lastModifiedDate":"2021-08-22"},{"lineNumber":54,"author":{"gitId":"chunweii"},"content":"        int taskSize \u003d tasks.size();","lastModifiedDate":"2021-08-22"},{"lineNumber":55,"author":{"gitId":"chunweii"},"content":"        for (int i \u003d 1; i \u003c\u003d taskSize; i++) {","lastModifiedDate":"2021-08-22"},{"lineNumber":56,"author":{"gitId":"chunweii"},"content":"            Task task \u003d tasks.get(i - 1);","lastModifiedDate":"2021-08-22"},{"lineNumber":57,"author":{"gitId":"chunweii"},"content":"            print(task, i, taskSize);","lastModifiedDate":"2021-08-22"},{"lineNumber":58,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":59,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":60,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":61,"author":{"gitId":"chunweii"},"content":"    private static void print(Task task, int number, int max) {","lastModifiedDate":"2021-08-22"},{"lineNumber":62,"author":{"gitId":"chunweii"},"content":"        String leadingSpace \u003d \" \".repeat((int) Math.log10(max) - (int) Math.log10(number));","lastModifiedDate":"2021-08-22"},{"lineNumber":63,"author":{"gitId":"chunweii"},"content":"        // For better formatting if numbers exceed 9","lastModifiedDate":"2021-08-22"},{"lineNumber":64,"author":{"gitId":"chunweii"},"content":"        System.out.printf(\"%s%d: %s\\n\", leadingSpace, number, task);","lastModifiedDate":"2021-08-22"},{"lineNumber":65,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":66,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":67,"author":{"gitId":"chunweii"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"chunweii":67}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"chunweii"},"content":"todo Buy Milk","lastModifiedDate":"2021-08-17"},{"lineNumber":2,"author":{"gitId":"chunweii"},"content":"delete 1","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"chunweii"},"content":"delete 1","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"chunweii"},"content":"event Townhall /at 27/8/2021 15:00","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"chunweii"},"content":"todo Wash laundry","lastModifiedDate":"2021-08-17"},{"lineNumber":6,"author":{"gitId":"chunweii"},"content":"deadline CS2103T Project /by 19/8/2021","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"chunweii"},"content":"list","lastModifiedDate":"2021-08-17"},{"lineNumber":8,"author":{"gitId":"chunweii"},"content":"do this thing","lastModifiedDate":"2021-08-17"},{"lineNumber":9,"author":{"gitId":"chunweii"},"content":"todo","lastModifiedDate":"2021-08-17"},{"lineNumber":10,"author":{"gitId":"chunweii"},"content":"deadline Art Project","lastModifiedDate":"2021-08-17"},{"lineNumber":11,"author":{"gitId":"chunweii"},"content":"deadline /by 20","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"chunweii"},"content":"event Concert /by 19/2/2021","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"chunweii"},"content":"deadline hello","lastModifiedDate":"2021-08-17"},{"lineNumber":14,"author":{"gitId":"chunweii"},"content":"event Job Interview /at 15:00","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"chunweii"},"content":"deadline Write resume /by","lastModifiedDate":"2021-08-17"},{"lineNumber":16,"author":{"gitId":"chunweii"},"content":"deadline Prepare presentation /by 21:30","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"chunweii"},"content":"event Mum\u0027s birthday /at 24/8/2021, 20:00","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"chunweii"},"content":"todo Get a life","lastModifiedDate":"2021-08-17"},{"lineNumber":19,"author":{"gitId":"chunweii"},"content":"todo Get a wife","lastModifiedDate":"2021-08-17"},{"lineNumber":20,"author":{"gitId":"chunweii"},"content":"todo Get 6 packs","lastModifiedDate":"2021-08-17"},{"lineNumber":21,"author":{"gitId":"chunweii"},"content":"event Sleep /at 2:00","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"chunweii"},"content":"deadline CS2100 homework /by 25/8/2021","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"chunweii"},"content":"todo Learn to bake","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"chunweii"},"content":"todo Renew passport","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"chunweii"},"content":"upcoming","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"chunweii"},"content":"done 2","lastModifiedDate":"2021-08-17"},{"lineNumber":27,"author":{"gitId":"chunweii"},"content":"done 2","lastModifiedDate":"2021-08-18"},{"lineNumber":28,"author":{"gitId":"chunweii"},"content":"done 7","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"chunweii"},"content":"done","lastModifiedDate":"2021-08-18"},{"lineNumber":30,"author":{"gitId":"chunweii"},"content":"delete","lastModifiedDate":"2021-08-18"},{"lineNumber":31,"author":{"gitId":"chunweii"},"content":"list","lastModifiedDate":"2021-08-17"},{"lineNumber":32,"author":{"gitId":"chunweii"},"content":"bye","lastModifiedDate":"2021-08-17"}],"authorContributionMap":{"chunweii":32}}]

[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"chunweii"},"content":"# Duke","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"chunweii"},"content":"\u003e The key is not to prioritize whatâ€™s on your schedule, but to schedule your priorities.  ","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"chunweii"},"content":"\u003e ~ Stephen Covey","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"chunweii"},"content":"Duke is an awesome way to keep track of all your daily tasks.","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"chunweii"},"content":"Forgot what is coming up in your schedule? **Duke it**","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"chunweii"},"content":"Hard to remember all your appointments? **Duke it**","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"chunweii"},"content":"Find it difficult to manage your todo list? **Duke it**","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"chunweii"},"content":"Duke is:","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"chunweii"},"content":"1. `Text-based`","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"chunweii"},"content":"2. Easy-to-learn","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"chunweii"},"content":"3. _Blazing_ fast :fire:","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"chunweii"},"content":"4. **Free** :no_entry_sign::dollar:","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"chunweii"},"content":"## Setting up","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"chunweii"},"content":"Prerequisites: JDK 11, download [here](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html).","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"chunweii"},"content":"1. Download the Duke jar file [here](https://github.com/chunweii/ip/releases)","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"chunweii"},"content":"2. Open a terminal/command prompt and navigate to the directory of the jar file.","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"chunweii"},"content":"3. Run `java -jar ip.jar`","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"chunweii"},"content":"4. Add your tasks!","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"chunweii"},"content":"## Future features","lastModifiedDate":"2021-08-29"},{"lineNumber":27,"author":{"gitId":"chunweii"},"content":"- ~~Graphical User Interface~~ will be implemented in the next release!","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"chunweii"},"content":"- Reminders","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"chunweii"},"content":"Do support us! If you are a Java programmer, consider improving the program and submitting a pull request! Here is our main method:","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"chunweii"},"content":"```java","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"chunweii"},"content":"public static void main(String[] args) {","lastModifiedDate":"2021-08-29"},{"lineNumber":33,"author":{"gitId":"chunweii"},"content":"    // new Duke(\u003cfile path\u003e, \u003climit\u003e).run();","lastModifiedDate":"2021-08-29"},{"lineNumber":34,"author":{"gitId":"chunweii"},"content":"    new Duke(\"./dukedata.txt\", 100).run();","lastModifiedDate":"2021-08-29"},{"lineNumber":35,"author":{"gitId":"chunweii"},"content":"}","lastModifiedDate":"2021-08-29"},{"lineNumber":36,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"chunweii":31,"-":5}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chunweii"},"content":"package duke;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"chunweii"},"content":"import duke.logic.LStorage;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"chunweii"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":6,"author":{"gitId":"chunweii"},"content":"/**","lastModifiedDate":"2021-08-21"},{"lineNumber":7,"author":{"gitId":"chunweii"},"content":" * Duke is a personal assistant that allows users to keep track of events, deadlines and things to do.","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"chunweii"},"content":" * The main method will start the personal assistant in the console.","lastModifiedDate":"2021-08-21"},{"lineNumber":9,"author":{"gitId":"chunweii"},"content":" */","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":11,"author":{"gitId":"chunweii"},"content":"    private final TaskList taskList;","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"chunweii"},"content":"    private final LStorage lStorage;","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"chunweii"},"content":"     * Creates a new instance of a duke chat-bot.","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"chunweii"},"content":"     * @param filePath the path where the data of the tasks will be saved","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"chunweii"},"content":"     * @param listLimit the maximum size of the task list","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"chunweii"},"content":"    public Duke(String filePath, int listLimit) {","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"chunweii"},"content":"        taskList \u003d new TaskList(listLimit);","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"chunweii"},"content":"        lStorage \u003d new LStorage(filePath, taskList);","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"chunweii"},"content":"     * Runs the duke chat-bot.","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"chunweii"},"content":"    public void run() {","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"chunweii"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"chunweii"},"content":"        while (!ui.willExit()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"chunweii"},"content":"            ui.checkInput(taskList, lStorage);","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":33,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":34,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":35,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"chunweii"},"content":"     * Runs the duke chat-bot with default filepath and limit.","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"chunweii"},"content":"     * @param args irrelevant for now","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"chunweii"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-23"},{"lineNumber":41,"author":{"gitId":"chunweii"},"content":"        new Duke(\"./dukedata.txt\", 100).run();","lastModifiedDate":"2021-08-23"},{"lineNumber":42,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"chunweii":41,"-":2}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chunweii"},"content":"package duke;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"chunweii"},"content":"/**","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"chunweii"},"content":" * DukeException is a runtime exception for exceptions generated due to invalid inputs or problems adding tasks.","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"chunweii"},"content":" */","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"chunweii"},"content":"public class DukeException extends RuntimeException {","lastModifiedDate":"2021-08-17"},{"lineNumber":7,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":9,"author":{"gitId":"chunweii"},"content":"     * Creates a new runtime exception when there is a problem with inputs or adding tasks.","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"chunweii"},"content":"     * @param message the description of the error","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"chunweii"},"content":"    public DukeException(String message) {","lastModifiedDate":"2021-08-17"},{"lineNumber":14,"author":{"gitId":"chunweii"},"content":"        super(message);","lastModifiedDate":"2021-08-17"},{"lineNumber":15,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":16,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":17,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"chunweii"},"content":"     * Creates a new runtime exception when there is a problem with inputs or adding tasks.","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"chunweii"},"content":"     * This constructor takes in a formatted string as the message just like \u003ccode\u003eString::format\u003c/code\u003e.","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"chunweii"},"content":"     * @param formattedMessage a format string","lastModifiedDate":"2021-08-23"},{"lineNumber":22,"author":{"gitId":"chunweii"},"content":"     * @param args the arguments to String::format","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"chunweii"},"content":"    public DukeException(String formattedMessage, Object... args) {","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"chunweii"},"content":"        this(String.format(formattedMessage, args));","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"chunweii"},"content":"    @Override","lastModifiedDate":"2021-08-17"},{"lineNumber":29,"author":{"gitId":"chunweii"},"content":"    public String getMessage() {","lastModifiedDate":"2021-08-17"},{"lineNumber":30,"author":{"gitId":"chunweii"},"content":"        return \":\u0027( OOPS!!! \" + super.getMessage();","lastModifiedDate":"2021-08-18"},{"lineNumber":31,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":32,"author":{"gitId":"chunweii"},"content":"}","lastModifiedDate":"2021-08-17"}],"authorContributionMap":{"chunweii":32}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chunweii"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"chunweii"},"content":"import duke.logic.LCommandParser;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"chunweii"},"content":"import duke.logic.LCommandsEnum;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"chunweii"},"content":"import duke.logic.LStorage;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"chunweii"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"chunweii"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"chunweii"},"content":"import java.util.List;","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"chunweii"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"chunweii"},"content":"import static java.util.AbstractMap.SimpleImmutableEntry;","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"chunweii"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"chunweii"},"content":" * The user interface of Duke. Deals with printing messages to the console and reading user input.","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"chunweii"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"chunweii"},"content":"public class Ui {","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"chunweii"},"content":"    private final Scanner sc;","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"chunweii"},"content":"    private final String name;","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"chunweii"},"content":"    private boolean willExit;","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"chunweii"},"content":"     * Creates a new instance of a user interface by creating a new scanner and querying for the user\u0027s name.","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"chunweii"},"content":"    public Ui() {","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"chunweii"},"content":"        sc \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"chunweii"},"content":"        String name \u003d \"\";","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"chunweii"},"content":"        willExit \u003d false;","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"chunweii"},"content":"        String logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"chunweii"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"chunweii"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"chunweii"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"chunweii"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"chunweii"},"content":"        System.out.println(\"Hello, I am\\n\" + logo);","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"chunweii"},"content":"        System.out.println(\"Please enter your name:\");","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"chunweii"},"content":"        while (name.equals(\"\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"chunweii"},"content":"            name \u003d sc.nextLine();","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"chunweii"},"content":"        this.name \u003d name;","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"chunweii"},"content":"        System.out.printf(\"%s, that is a nice name. What can I do for you today?\\n\", this.name);","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"chunweii"},"content":"        System.out.println(\"----------------------------\");","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"chunweii"},"content":"    public boolean willExit() {","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"chunweii"},"content":"        return willExit;","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"chunweii"},"content":"     * Checks the user input from stdin.","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"chunweii"},"content":"     * @param taskList the task list that the user is using","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"chunweii"},"content":"     * @param storage  the storage that the user wants the data to be stored into","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"chunweii"},"content":"    public void checkInput(TaskList taskList, LStorage storage) {","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"chunweii"},"content":"        String userInput \u003d sc.nextLine();","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"chunweii"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"chunweii"},"content":"            willExit \u003d (new LCommandParser(userInput, taskList, storage, this)).willExit();","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"chunweii"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"chunweii"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"chunweii"},"content":"        } finally {","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"chunweii"},"content":"            System.out.println(\"----------------------------\");","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"chunweii"},"content":"     * Called when the user wants to exit the program.","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"chunweii"},"content":"    public void sayGoodBye() {","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"chunweii"},"content":"        System.out.println(\"Bye, \" + name + \"! Hope to see you again soon.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"chunweii"},"content":"        sc.close();","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"chunweii"},"content":"     * Called when the user successfully adds the task to tasklist.","lastModifiedDate":"2021-08-25"},{"lineNumber":76,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":77,"author":{"gitId":"chunweii"},"content":"     * @param task       the task that is added","lastModifiedDate":"2021-08-25"},{"lineNumber":78,"author":{"gitId":"chunweii"},"content":"     * @param sizeOfList the number of tasks so far","lastModifiedDate":"2021-08-25"},{"lineNumber":79,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":80,"author":{"gitId":"chunweii"},"content":"    public void addTaskMessage(Task task, int sizeOfList) {","lastModifiedDate":"2021-08-25"},{"lineNumber":81,"author":{"gitId":"chunweii"},"content":"        System.out.println(\"Got it, \" + name + \". I have added this task:\");","lastModifiedDate":"2021-08-25"},{"lineNumber":82,"author":{"gitId":"chunweii"},"content":"        System.out.println(\"    \" + task);","lastModifiedDate":"2021-08-25"},{"lineNumber":83,"author":{"gitId":"chunweii"},"content":"        System.out.println(\"Now you have \" + sizeOfList + \" task\"","lastModifiedDate":"2021-08-25"},{"lineNumber":84,"author":{"gitId":"chunweii"},"content":"                + (sizeOfList \u003c\u003d 1 ? \" in the list\" : \"s in the list\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":85,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":86,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":87,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":88,"author":{"gitId":"chunweii"},"content":"     * Called when the user removes a task from the task list.","lastModifiedDate":"2021-08-25"},{"lineNumber":89,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":90,"author":{"gitId":"chunweii"},"content":"     * @param task the task that is removed or deleted","lastModifiedDate":"2021-08-25"},{"lineNumber":91,"author":{"gitId":"chunweii"},"content":"     * @param size the final size of the task list","lastModifiedDate":"2021-08-25"},{"lineNumber":92,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":93,"author":{"gitId":"chunweii"},"content":"    public void removeTaskMessage(Task task, int size) {","lastModifiedDate":"2021-08-25"},{"lineNumber":94,"author":{"gitId":"chunweii"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2021-08-25"},{"lineNumber":95,"author":{"gitId":"chunweii"},"content":"        displayTask(task);","lastModifiedDate":"2021-08-25"},{"lineNumber":96,"author":{"gitId":"chunweii"},"content":"        displayNumberOfTasks(size);","lastModifiedDate":"2021-08-25"},{"lineNumber":97,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":98,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":99,"author":{"gitId":"chunweii"},"content":"    public void markAsDoneMessage(Task task) {","lastModifiedDate":"2021-08-25"},{"lineNumber":100,"author":{"gitId":"chunweii"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done: \");","lastModifiedDate":"2021-08-25"},{"lineNumber":101,"author":{"gitId":"chunweii"},"content":"        displayTask(task);","lastModifiedDate":"2021-08-25"},{"lineNumber":102,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":103,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":104,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":105,"author":{"gitId":"chunweii"},"content":"     * Displays the help message that contains documentations of the commands.","lastModifiedDate":"2021-08-25"},{"lineNumber":106,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":107,"author":{"gitId":"chunweii"},"content":"    public void displayHelp(LCommandsEnum input) {","lastModifiedDate":"2021-08-25"},{"lineNumber":108,"author":{"gitId":"chunweii"},"content":"        if (input \u003d\u003d null) {","lastModifiedDate":"2021-08-25"},{"lineNumber":109,"author":{"gitId":"chunweii"},"content":"            for (LCommandsEnum command : LCommandsEnum.values()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":110,"author":{"gitId":"chunweii"},"content":"                System.out.println(command.helpMessage());","lastModifiedDate":"2021-08-25"},{"lineNumber":111,"author":{"gitId":"chunweii"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":112,"author":{"gitId":"chunweii"},"content":"        } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":113,"author":{"gitId":"chunweii"},"content":"            System.out.println(input.helpMessage());","lastModifiedDate":"2021-08-25"},{"lineNumber":114,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":115,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":116,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":117,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":118,"author":{"gitId":"chunweii"},"content":"     * Prints all tasks from a list of tasks and task numbers.","lastModifiedDate":"2021-08-25"},{"lineNumber":119,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":120,"author":{"gitId":"chunweii"},"content":"     * @param tasksWithTaskNumbers the list of tasks and task numbers, each in a SimpleImmutableEntry","lastModifiedDate":"2021-08-25"},{"lineNumber":121,"author":{"gitId":"chunweii"},"content":"     * @param maxTaskNumber the size of the task list. This will ensure proper padding of numbers.","lastModifiedDate":"2021-08-25"},{"lineNumber":122,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":123,"author":{"gitId":"chunweii"},"content":"    public void printAllTasks(List\u003cSimpleImmutableEntry\u003c? extends Task, Integer\u003e\u003e tasksWithTaskNumbers,","lastModifiedDate":"2021-08-25"},{"lineNumber":124,"author":{"gitId":"chunweii"},"content":"                              int maxTaskNumber) {","lastModifiedDate":"2021-08-25"},{"lineNumber":125,"author":{"gitId":"chunweii"},"content":"        System.out.println(\"Ok, \" + name + \". I am getting all your tasks:\");","lastModifiedDate":"2021-08-25"},{"lineNumber":126,"author":{"gitId":"chunweii"},"content":"        printMultipleTasks(tasksWithTaskNumbers, maxTaskNumber);","lastModifiedDate":"2021-08-25"},{"lineNumber":127,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":128,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":129,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":130,"author":{"gitId":"chunweii"},"content":"     * Prints all upcoming tasks from a list of tasks and task numbers.","lastModifiedDate":"2021-08-25"},{"lineNumber":131,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":132,"author":{"gitId":"chunweii"},"content":"     * @param tasksWithTaskNumbers the list of tasks and task numbers, each in a SimpleImmutableEntry","lastModifiedDate":"2021-08-25"},{"lineNumber":133,"author":{"gitId":"chunweii"},"content":"     * @param maxTaskNumber the size of the task list. This will ensure proper padding of numbers.","lastModifiedDate":"2021-08-25"},{"lineNumber":134,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":135,"author":{"gitId":"chunweii"},"content":"    public void printUpcomingTasks(List\u003cSimpleImmutableEntry\u003c? extends Task, Integer\u003e\u003e tasksWithTaskNumbers,","lastModifiedDate":"2021-08-25"},{"lineNumber":136,"author":{"gitId":"chunweii"},"content":"                                   int maxTaskNumber) {","lastModifiedDate":"2021-08-25"},{"lineNumber":137,"author":{"gitId":"chunweii"},"content":"        System.out.println(\"Ok, \" + name + \". I am getting all your upcoming tasks:\");","lastModifiedDate":"2021-08-25"},{"lineNumber":138,"author":{"gitId":"chunweii"},"content":"        printMultipleTasks(tasksWithTaskNumbers, maxTaskNumber);","lastModifiedDate":"2021-08-25"},{"lineNumber":139,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":140,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":141,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":142,"author":{"gitId":"chunweii"},"content":"     * Prints all tasks from a list of tasks and task numbers containing a pattern.","lastModifiedDate":"2021-08-25"},{"lineNumber":143,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":144,"author":{"gitId":"chunweii"},"content":"     * @param pattern the string pattern that the user is searching for","lastModifiedDate":"2021-08-25"},{"lineNumber":145,"author":{"gitId":"chunweii"},"content":"     * @param tasksWithTaskNumbers the list of tasks and task numbers, each in a SimpleImmutableEntry","lastModifiedDate":"2021-08-25"},{"lineNumber":146,"author":{"gitId":"chunweii"},"content":"     * @param maxTaskNumber the size of the task list. This will ensure proper padding of numbers.","lastModifiedDate":"2021-08-25"},{"lineNumber":147,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":148,"author":{"gitId":"chunweii"},"content":"    public void printTasksContaining(String pattern, List\u003cSimpleImmutableEntry\u003c? extends Task, Integer\u003e\u003e tasksWithTaskNumbers,","lastModifiedDate":"2021-08-25"},{"lineNumber":149,"author":{"gitId":"chunweii"},"content":"                                     int maxTaskNumber) {","lastModifiedDate":"2021-08-25"},{"lineNumber":150,"author":{"gitId":"chunweii"},"content":"        System.out.println(\"Ok, \" + name + \". I am getting all tasks containing \" + pattern + \":\");","lastModifiedDate":"2021-08-25"},{"lineNumber":151,"author":{"gitId":"chunweii"},"content":"        printMultipleTasks(tasksWithTaskNumbers, maxTaskNumber);","lastModifiedDate":"2021-08-25"},{"lineNumber":152,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":153,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":154,"author":{"gitId":"chunweii"},"content":"    private void printMultipleTasks(List\u003cSimpleImmutableEntry\u003c? extends Task, Integer\u003e\u003e tasksWithTaskNumbers,","lastModifiedDate":"2021-08-25"},{"lineNumber":155,"author":{"gitId":"chunweii"},"content":"                                    int maxTaskNumber) {","lastModifiedDate":"2021-08-25"},{"lineNumber":156,"author":{"gitId":"chunweii"},"content":"        for (SimpleImmutableEntry\u003c? extends Task, Integer\u003e task : tasksWithTaskNumbers) {","lastModifiedDate":"2021-08-25"},{"lineNumber":157,"author":{"gitId":"chunweii"},"content":"            printSingleTask(task.getKey(), task.getValue(), maxTaskNumber);","lastModifiedDate":"2021-08-25"},{"lineNumber":158,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":159,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":160,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":161,"author":{"gitId":"chunweii"},"content":"    private void printSingleTask(Task task, int number, int max) {","lastModifiedDate":"2021-08-25"},{"lineNumber":162,"author":{"gitId":"chunweii"},"content":"        String leadingSpace \u003d \" \".repeat((int) Math.log10(max) - (int) Math.log10(number));","lastModifiedDate":"2021-08-25"},{"lineNumber":163,"author":{"gitId":"chunweii"},"content":"        // For better formatting if numbers exceed 9","lastModifiedDate":"2021-08-25"},{"lineNumber":164,"author":{"gitId":"chunweii"},"content":"        System.out.printf(\"%s%d: %s\\n\", leadingSpace, number, task);","lastModifiedDate":"2021-08-25"},{"lineNumber":165,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":166,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":167,"author":{"gitId":"chunweii"},"content":"    private void displayTask(Task task) {","lastModifiedDate":"2021-08-25"},{"lineNumber":168,"author":{"gitId":"chunweii"},"content":"        System.out.println(\"    \" + task);","lastModifiedDate":"2021-08-25"},{"lineNumber":169,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":170,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":171,"author":{"gitId":"chunweii"},"content":"    private void displayNumberOfTasks(int num) {","lastModifiedDate":"2021-08-25"},{"lineNumber":172,"author":{"gitId":"chunweii"},"content":"        System.out.println(\"Now you have \" + num + \" task\"","lastModifiedDate":"2021-08-25"},{"lineNumber":173,"author":{"gitId":"chunweii"},"content":"                + (num \u003c\u003d 1 ? \" in the list\" : \"s in the list\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":174,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":175,"author":{"gitId":"chunweii"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"chunweii":175}},{"path":"src/main/java/duke/logic/LCommandParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chunweii"},"content":"package duke.logic;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"chunweii"},"content":"import duke.DukeException;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"chunweii"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"chunweii"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"chunweii"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"chunweii"},"content":"import duke.task.TasksEnum;","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"chunweii"},"content":"/**","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"chunweii"},"content":" * The logic for parsing commands typed by the user.","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"chunweii"},"content":" */","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"chunweii"},"content":"public class LCommandParser {","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"chunweii"},"content":"    private boolean willExit;","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"chunweii"},"content":"    private static final String INVALID_COMMAND \u003d \"Invalid input. Type \\\"help\\\" for more information.\";","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"chunweii"},"content":"    private static final String EMPTY_INPUT_MESSAGE \u003d \"Input is empty. Type \\\"help\\\" for more information.\";","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"chunweii"},"content":"    private static final String TOO_LITTLE_ARGUMENTS_MESSAGE \u003d \"Too little arguments. Type \\\"help\\\" \" +","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"chunweii"},"content":"            \"followed by the command for more information.\";","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"chunweii"},"content":"    private static final String FULL_TASKLIST_MESSAGE \u003d \"Unable to add task. List is full. Consider deleting\" +","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"chunweii"},"content":"            \" some tasks\";","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"chunweii"},"content":"    private static final String INVALID_NUMBER_MESSAGE \u003d \"Please input a valid task number after the command.\";","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"chunweii"},"content":"     * Creates a new command parser for the input.","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"chunweii"},"content":"     * @param input The string input from the user.","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"chunweii"},"content":"     * @param storage The storage logic that allows the command parser to write the task list data to it.","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"chunweii"},"content":"     * @param taskList The list of tasks.","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"chunweii"},"content":"    public LCommandParser(String input, TaskList taskList, LStorage storage, Ui ui) {","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"chunweii"},"content":"        if (input \u003d\u003d null || input.equals(\"\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"chunweii"},"content":"            throw new DukeException(EMPTY_INPUT_MESSAGE);","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"chunweii"},"content":"        String[] inputArr \u003d input.split(\" \", 2);","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"chunweii"},"content":"        LCommandsEnum commandEnum;","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"chunweii"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"chunweii"},"content":"            commandEnum \u003d LCommandsEnum.valueOf(inputArr[0].toUpperCase());","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"chunweii"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"chunweii"},"content":"            throw new DukeException(INVALID_COMMAND);","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"chunweii"},"content":"        this.willExit \u003d false;","lastModifiedDate":"2021-08-23"},{"lineNumber":41,"author":{"gitId":"chunweii"},"content":"        switch (commandEnum) {","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"chunweii"},"content":"        case BYE:","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"chunweii"},"content":"            ui.sayGoodBye();","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"chunweii"},"content":"            willExit \u003d true;","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"chunweii"},"content":"            break;","lastModifiedDate":"2021-08-23"},{"lineNumber":46,"author":{"gitId":"chunweii"},"content":"        case LIST:","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"chunweii"},"content":"            ui.printAllTasks(taskList.getAllTasks(), taskList.size());","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"chunweii"},"content":"            break;","lastModifiedDate":"2021-08-23"},{"lineNumber":49,"author":{"gitId":"chunweii"},"content":"        case UPCOMING:","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"chunweii"},"content":"            ui.printUpcomingTasks(taskList.getUpcomingTasks(), taskList.size());","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"chunweii"},"content":"            break;","lastModifiedDate":"2021-08-23"},{"lineNumber":52,"author":{"gitId":"chunweii"},"content":"        case HELP:","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"chunweii"},"content":"            try {","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"chunweii"},"content":"                ui.displayHelp(inputArr.length \u003d\u003d 1 ? null : LCommandsEnum.valueOf(inputArr[1].toUpperCase()));","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"chunweii"},"content":"            } catch (IllegalArgumentException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"chunweii"},"content":"                throw new DukeException(INVALID_COMMAND);","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"chunweii"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":58,"author":{"gitId":"chunweii"},"content":"            break;","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"chunweii"},"content":"        default:","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"chunweii"},"content":"            if (inputArr.length \u003c 2) {","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"chunweii"},"content":"                throw new DukeException(TOO_LITTLE_ARGUMENTS_MESSAGE);","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"chunweii"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":63,"author":{"gitId":"chunweii"},"content":"            switch (commandEnum) {","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"chunweii"},"content":"            case FIND:","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"chunweii"},"content":"                ui.printTasksContaining(inputArr[1],","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"chunweii"},"content":"                        taskList.getTasksContaining(inputArr[1]), taskList.size());","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"chunweii"},"content":"                break;","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"chunweii"},"content":"            case TODO: // fallthrough intended","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"chunweii"},"content":"            case EVENT: // fallthrough intended","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"chunweii"},"content":"            case DEADLINE:","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"chunweii"},"content":"                ui.addTaskMessage(addTask(commandEnum.name(), inputArr[1], taskList), taskList.size());","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"chunweii"},"content":"                break;","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"chunweii"},"content":"            default:","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"chunweii"},"content":"                int taskNumber;","lastModifiedDate":"2021-08-23"},{"lineNumber":75,"author":{"gitId":"chunweii"},"content":"                try {","lastModifiedDate":"2021-08-23"},{"lineNumber":76,"author":{"gitId":"chunweii"},"content":"                    taskNumber \u003d Integer.parseInt(inputArr[1]);","lastModifiedDate":"2021-08-25"},{"lineNumber":77,"author":{"gitId":"chunweii"},"content":"                } catch (NumberFormatException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":78,"author":{"gitId":"chunweii"},"content":"                    throw new DukeException(INVALID_NUMBER_MESSAGE);","lastModifiedDate":"2021-08-25"},{"lineNumber":79,"author":{"gitId":"chunweii"},"content":"                }","lastModifiedDate":"2021-08-23"},{"lineNumber":80,"author":{"gitId":"chunweii"},"content":"                switch (commandEnum) {","lastModifiedDate":"2021-08-25"},{"lineNumber":81,"author":{"gitId":"chunweii"},"content":"                case DONE:","lastModifiedDate":"2021-08-25"},{"lineNumber":82,"author":{"gitId":"chunweii"},"content":"                    if (!taskList.markAsDone(taskNumber)) { // task already marked as done","lastModifiedDate":"2021-08-23"},{"lineNumber":83,"author":{"gitId":"chunweii"},"content":"                        throw new DukeException(\"You have already marked this task (%s) as done\",","lastModifiedDate":"2021-08-23"},{"lineNumber":84,"author":{"gitId":"chunweii"},"content":"                                taskList.getTask(taskNumber));","lastModifiedDate":"2021-08-23"},{"lineNumber":85,"author":{"gitId":"chunweii"},"content":"                    }","lastModifiedDate":"2021-08-23"},{"lineNumber":86,"author":{"gitId":"chunweii"},"content":"                    ui.markAsDoneMessage(taskList.getTask(taskNumber));","lastModifiedDate":"2021-08-25"},{"lineNumber":87,"author":{"gitId":"chunweii"},"content":"                    break;","lastModifiedDate":"2021-08-25"},{"lineNumber":88,"author":{"gitId":"chunweii"},"content":"                case DELETE:","lastModifiedDate":"2021-08-25"},{"lineNumber":89,"author":{"gitId":"chunweii"},"content":"                    ui.removeTaskMessage(taskList.removeTask(taskNumber), taskList.size());","lastModifiedDate":"2021-08-25"},{"lineNumber":90,"author":{"gitId":"chunweii"},"content":"                    break;","lastModifiedDate":"2021-08-25"},{"lineNumber":91,"author":{"gitId":"chunweii"},"content":"                default:","lastModifiedDate":"2021-08-25"},{"lineNumber":92,"author":{"gitId":"chunweii"},"content":"                    throw new DukeException(INVALID_COMMAND);","lastModifiedDate":"2021-08-25"},{"lineNumber":93,"author":{"gitId":"chunweii"},"content":"                }","lastModifiedDate":"2021-08-23"},{"lineNumber":94,"author":{"gitId":"chunweii"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":95,"author":{"gitId":"chunweii"},"content":"            storage.updateDukeTextFile();","lastModifiedDate":"2021-08-23"},{"lineNumber":96,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":97,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":98,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":99,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":100,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":101,"author":{"gitId":"chunweii"},"content":"     * Checks if the command given by the user is to exit.","lastModifiedDate":"2021-08-25"},{"lineNumber":102,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":103,"author":{"gitId":"chunweii"},"content":"     * @return true if and only if the command is to exit","lastModifiedDate":"2021-08-25"},{"lineNumber":104,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":105,"author":{"gitId":"chunweii"},"content":"    public boolean willExit() {","lastModifiedDate":"2021-08-25"},{"lineNumber":106,"author":{"gitId":"chunweii"},"content":"        return willExit;","lastModifiedDate":"2021-08-25"},{"lineNumber":107,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":108,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":109,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":110,"author":{"gitId":"chunweii"},"content":"     * Attempts to add the task to the tasklist based on the user command.","lastModifiedDate":"2021-08-23"},{"lineNumber":111,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":112,"author":{"gitId":"chunweii"},"content":"     * @param action the action of either todo, event or deadline","lastModifiedDate":"2021-08-23"},{"lineNumber":113,"author":{"gitId":"chunweii"},"content":"     * @param otherInput the rest of the string without the action","lastModifiedDate":"2021-08-23"},{"lineNumber":114,"author":{"gitId":"chunweii"},"content":"     * @param taskList the list of task to be added to","lastModifiedDate":"2021-08-23"},{"lineNumber":115,"author":{"gitId":"chunweii"},"content":"     * @return the task that is added.","lastModifiedDate":"2021-08-23"},{"lineNumber":116,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":117,"author":{"gitId":"chunweii"},"content":"    private static Task addTask(String action, String otherInput, TaskList taskList) {","lastModifiedDate":"2021-08-23"},{"lineNumber":118,"author":{"gitId":"chunweii"},"content":"        TasksEnum tasksEnum \u003d TasksEnum.valueOf(action);","lastModifiedDate":"2021-08-25"},{"lineNumber":119,"author":{"gitId":"chunweii"},"content":"        Task result \u003d tasksEnum.getTask(otherInput);","lastModifiedDate":"2021-08-23"},{"lineNumber":120,"author":{"gitId":"chunweii"},"content":"        if (!taskList.addTask(result)) { // if adding task is unsuccessful","lastModifiedDate":"2021-08-25"},{"lineNumber":121,"author":{"gitId":"chunweii"},"content":"            throw new DukeException(FULL_TASKLIST_MESSAGE);","lastModifiedDate":"2021-08-25"},{"lineNumber":122,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":123,"author":{"gitId":"chunweii"},"content":"        return result;","lastModifiedDate":"2021-08-23"},{"lineNumber":124,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":125,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":126,"author":{"gitId":"chunweii"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"chunweii":126}},{"path":"src/main/java/duke/logic/LCommandsEnum.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chunweii"},"content":"package duke.logic;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"chunweii"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"chunweii"},"content":" * The enums of the commands available. Also contains the help messages of each command.","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"chunweii"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"chunweii"},"content":"public enum LCommandsEnum {","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"chunweii"},"content":"    BYE() {","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"chunweii"},"content":"        @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"chunweii"},"content":"        public String helpMessage() {","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"chunweii"},"content":"            return \"Usage: bye\\n\" +","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"chunweii"},"content":"                    \"This will quit the Duke chatbot.\";","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"chunweii"},"content":"    }, DEADLINE() {","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"chunweii"},"content":"        @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"chunweii"},"content":"        public String helpMessage() {","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"chunweii"},"content":"            return \"Usage: deadline \u003ctask description\u003e /by \u003cdate and/or time\u003e\" +","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"chunweii"},"content":"                    \"Where date and time is in the format: D/M/YYYY hh:mm\\n\" +","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"chunweii"},"content":"                    \"For example: deadline haircut /by 19:00\\n\" +","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"chunweii"},"content":"                    \"This will add a deadline task \\\"haircut\\\" to the list,\" +","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"chunweii"},"content":"                    \" with today\u0027s date (or tomorrow if it is past 19:00) and the time 19:00.\\n\" +","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"chunweii"},"content":"                    \"             deadline give $1 million to charity /by 31/12/2090 12:00\\n\" +","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"chunweii"},"content":"                    \"This will add a deadline task \\\"give $1 million to charity\\\" to the list,\" +","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"chunweii"},"content":"                    \" with the date on 31 December 2090 on 12pm.\";","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"chunweii"},"content":"    }, DELETE() {","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"chunweii"},"content":"        @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"chunweii"},"content":"        public String helpMessage() {","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"chunweii"},"content":"            return \"Usage: delete \u003ctask number\u003e\\n\" +","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"chunweii"},"content":"                    \"For example: delete 1\\n\" +","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"chunweii"},"content":"                    \"This will delete the first task in the list.\";","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"chunweii"},"content":"    }, DONE() {","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"chunweii"},"content":"        @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"chunweii"},"content":"        public String helpMessage() {","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"chunweii"},"content":"            return \"Usage: done \u003ctask number\u003e\\n\" +","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"chunweii"},"content":"                    \"For example: done 1\\n\" +","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"chunweii"},"content":"                    \"This will mark the first task as done.\";","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"chunweii"},"content":"    }, EVENT() {","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"chunweii"},"content":"        @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"chunweii"},"content":"        public String helpMessage() {","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"chunweii"},"content":"            return \"Usage: event \u003ctask description\u003e /at \u003cdate and/or time\u003e\" +","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"chunweii"},"content":"                    \"Where date and time is in the format: D/M/YYYY hh:mm\\n\" +","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"chunweii"},"content":"                    \"For example: event Shopee 21.7 sale /at 21/7/2021\\n\" +","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"chunweii"},"content":"                    \"This will add an event task \\\"Shopee 21.7 sale\\\" to the list,\" +","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"chunweii"},"content":"                    \" with the date on 21 July 2021, 23:59 by default.\\n\" +","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"chunweii"},"content":"                    \"             event first date /at 31/12/2090 12:00\\n\" +","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"chunweii"},"content":"                    \"This will add an event task \\\"first date\\\" to the list,\" +","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"chunweii"},"content":"                    \" with the date on 31 December 2090 on 12pm.\";","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"chunweii"},"content":"    }, HELP() {","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"chunweii"},"content":"        @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"chunweii"},"content":"        public String helpMessage() {","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"chunweii"},"content":"            return \"Usage: help [command]\\n\" +","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"chunweii"},"content":"                    \"For example: help\\n\" +","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"chunweii"},"content":"                    \"This will display the help messages for every command. Alternatively,\\n\" +","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"chunweii"},"content":"                    \"             help list\\n\" +","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"chunweii"},"content":"                    \"This will display the help message for the list command.\";","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"chunweii"},"content":"    }, LIST() {","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"chunweii"},"content":"        @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"chunweii"},"content":"        public String helpMessage() {","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"chunweii"},"content":"            return \"Usage: list\\n\" +","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"chunweii"},"content":"                    \"This will display the list of tasks.\";","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"chunweii"},"content":"    }, TODO() {","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"chunweii"},"content":"        @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"chunweii"},"content":"        public String helpMessage() {","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"chunweii"},"content":"            return \"Usage: todo \u003ctask description\u003e\\n\" +","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"chunweii"},"content":"                    \"For example: todo Quit smoking\\n\" +","lastModifiedDate":"2021-08-25"},{"lineNumber":76,"author":{"gitId":"chunweii"},"content":"                    \"This will add a todo task \\\"Quit smoking\\\" to the list.\";","lastModifiedDate":"2021-08-25"},{"lineNumber":77,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":78,"author":{"gitId":"chunweii"},"content":"    }, UPCOMING() {","lastModifiedDate":"2021-08-25"},{"lineNumber":79,"author":{"gitId":"chunweii"},"content":"        @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":80,"author":{"gitId":"chunweii"},"content":"        public String helpMessage() {","lastModifiedDate":"2021-08-25"},{"lineNumber":81,"author":{"gitId":"chunweii"},"content":"            return \"Usage: upcoming\\n\" +","lastModifiedDate":"2021-08-25"},{"lineNumber":82,"author":{"gitId":"chunweii"},"content":"                    \"This will display all the upcoming tasks, in chronological order.\";","lastModifiedDate":"2021-08-25"},{"lineNumber":83,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":84,"author":{"gitId":"chunweii"},"content":"    }, FIND() {","lastModifiedDate":"2021-08-25"},{"lineNumber":85,"author":{"gitId":"chunweii"},"content":"        @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":86,"author":{"gitId":"chunweii"},"content":"        public String helpMessage() {","lastModifiedDate":"2021-08-25"},{"lineNumber":87,"author":{"gitId":"chunweii"},"content":"            return \"Usage: find \u003citem\u003e\\n\" +","lastModifiedDate":"2021-08-25"},{"lineNumber":88,"author":{"gitId":"chunweii"},"content":"                    \"For example: find book\\n\" +","lastModifiedDate":"2021-08-25"},{"lineNumber":89,"author":{"gitId":"chunweii"},"content":"                    \"This will list every task that contains \\\"book\\\".\";","lastModifiedDate":"2021-08-25"},{"lineNumber":90,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":91,"author":{"gitId":"chunweii"},"content":"    };","lastModifiedDate":"2021-08-25"},{"lineNumber":92,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":93,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":94,"author":{"gitId":"chunweii"},"content":"     * Gets the help message of the specific command.","lastModifiedDate":"2021-08-25"},{"lineNumber":95,"author":{"gitId":"chunweii"},"content":"     * @return the associated string.","lastModifiedDate":"2021-08-25"},{"lineNumber":96,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":97,"author":{"gitId":"chunweii"},"content":"    public abstract String helpMessage();","lastModifiedDate":"2021-08-25"},{"lineNumber":98,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":99,"author":{"gitId":"chunweii"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"chunweii":99}},{"path":"src/main/java/duke/logic/LDateTimeParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chunweii"},"content":"package duke.logic;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"chunweii"},"content":"import duke.DukeException;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"chunweii"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"chunweii"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"chunweii"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"chunweii"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"chunweii"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"chunweii"},"content":"/**","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"chunweii"},"content":" * Enables simpler parsing of date and time for events and deadlines.","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"chunweii"},"content":" */","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"chunweii"},"content":"public class LDateTimeParser {","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"chunweii"},"content":"    private final LocalTime time;","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"chunweii"},"content":"    private final LocalDate date;","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"chunweii"},"content":"     * Creates a new instance of a Date","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"chunweii"},"content":"     * @param dateTime The string to be parsed","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"chunweii"},"content":"    public LDateTimeParser(String dateTime) {","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"chunweii"},"content":"        String[] dateAndTime \u003d Arrays.stream(dateTime.split(\"[ |,]\", 2))","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"chunweii"},"content":"                .map(String::trim).toArray(String[]::new);","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"chunweii"},"content":"        try {","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"chunweii"},"content":"            if (dateAndTime.length \u003d\u003d 1) {","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"chunweii"},"content":"                if (dateAndTime[0].contains(\"/\")) { // User entered date","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"chunweii"},"content":"                    date \u003d LocalDate.parse(dateAndTime[0], DateTimeFormatter.ofPattern(\"d/M/yyyy\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"chunweii"},"content":"                    time \u003d LocalTime.parse(\"23:59\");","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"chunweii"},"content":"                } else { // User likely entered time","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"chunweii"},"content":"                    time \u003d LocalTime.parse(dateAndTime[0], DateTimeFormatter.ofPattern(\"H:m\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"chunweii"},"content":"                    date \u003d time.isAfter(LocalTime.now()) ? LocalDate.now() : LocalDate.now().plusDays(1);","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"chunweii"},"content":"                }","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"chunweii"},"content":"            } else {","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"chunweii"},"content":"                date \u003d LocalDate.parse(dateAndTime[0], DateTimeFormatter.ofPattern(\"d/M/yyyy\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"chunweii"},"content":"                time \u003d LocalTime.parse(dateAndTime[1], DateTimeFormatter.ofPattern(\"H:m\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"chunweii"},"content":"            }","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"chunweii"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"chunweii"},"content":"            throw new DukeException(\"Invalid date and time format. Please enter them in the format: d/M/YYYY H:m.\\n\" +","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"chunweii"},"content":"                    \"For example: 23/8/2021 14:00\");","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"chunweii"},"content":"     * Gets the date of this datetime.","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"chunweii"},"content":"     * @return the local date object.","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"chunweii"},"content":"    public LocalDate getDate() {","lastModifiedDate":"2021-08-22"},{"lineNumber":50,"author":{"gitId":"chunweii"},"content":"        return date;","lastModifiedDate":"2021-08-22"},{"lineNumber":51,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":52,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":53,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"chunweii"},"content":"     * Gets the time of this datetime.","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"chunweii"},"content":"     * @return the local time object.","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"chunweii"},"content":"    public LocalTime getTime() {","lastModifiedDate":"2021-08-22"},{"lineNumber":58,"author":{"gitId":"chunweii"},"content":"        return time;","lastModifiedDate":"2021-08-22"},{"lineNumber":59,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":60,"author":{"gitId":"chunweii"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"chunweii":60}},{"path":"src/main/java/duke/logic/LStorage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chunweii"},"content":"package duke.logic;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"chunweii"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"chunweii"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"chunweii"},"content":"import java.io.BufferedWriter;","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"chunweii"},"content":"import java.io.File;","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"chunweii"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"chunweii"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"chunweii"},"content":"/**","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"chunweii"},"content":" * Deals with the logic of writing to the dukedata.txt file each time there is an update to the task list.","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"chunweii"},"content":" */","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"chunweii"},"content":"public class LStorage {","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"chunweii"},"content":"    private final String filePath;","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"chunweii"},"content":"    private final TaskList taskList;","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"chunweii"},"content":"     * Creates a new instance of a storage object that deals with saving the task list in Duke.","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"chunweii"},"content":"     * @param filePath The string representing the path of the file that the data will be saved into.","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"chunweii"},"content":"     * @param taskList The list of task that will be saved into the file.","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"chunweii"},"content":"    public LStorage(String filePath, TaskList taskList) {","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"chunweii"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"chunweii"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"chunweii"},"content":"     * Updates the text file with the latest task list.","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"chunweii"},"content":"     * \u003cp\u003eCurrently the text file is overwritten each time it updates.","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"chunweii"},"content":"     * A more efficient method should be implemented.\u003c/p\u003e","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"chunweii"},"content":"    public void updateDukeTextFile() {","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"chunweii"},"content":"        File textFile \u003d new File(filePath);","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"chunweii"},"content":"        try {","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"chunweii"},"content":"            BufferedWriter writer \u003d new BufferedWriter(new FileWriter(textFile));","lastModifiedDate":"2021-08-23"},{"lineNumber":39,"author":{"gitId":"chunweii"},"content":"            writer.write(\"\"); // Overwrites everything","lastModifiedDate":"2021-08-23"},{"lineNumber":40,"author":{"gitId":"chunweii"},"content":"            for (Task task : taskList.getTasks()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":41,"author":{"gitId":"chunweii"},"content":"                writer.append(task.getDataLine()).append(\"\\n\");","lastModifiedDate":"2021-08-23"},{"lineNumber":42,"author":{"gitId":"chunweii"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":43,"author":{"gitId":"chunweii"},"content":"            writer.close();","lastModifiedDate":"2021-08-23"},{"lineNumber":44,"author":{"gitId":"chunweii"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":45,"author":{"gitId":"chunweii"},"content":"            System.out.printf(\"However an error occurred while writing to %s:\\n\", textFile.getAbsolutePath());","lastModifiedDate":"2021-08-23"},{"lineNumber":46,"author":{"gitId":"chunweii"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-23"},{"lineNumber":47,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":48,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":49,"author":{"gitId":"chunweii"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"chunweii":49}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chunweii"},"content":"package duke.task;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"chunweii"},"content":"import duke.logic.LDateTimeParser;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"chunweii"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"chunweii"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"chunweii"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"chunweii"},"content":"/**","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"chunweii"},"content":" * A deadline is a task that has a specific deadline.","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"chunweii"},"content":" */","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"chunweii"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"chunweii"},"content":"    private final LocalDate dateOfDeadline;","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"chunweii"},"content":"    private final LocalTime timeOfDeadline;","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"chunweii"},"content":"     * Creates a new deadline object that has the given description and due on the given date.","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"chunweii"},"content":"     * @param description          The description of the deadline","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"chunweii"},"content":"     * @param stringDateOfDeadline The due date/time of the task","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"chunweii"},"content":"    public Deadline(String description, String stringDateOfDeadline) {","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"chunweii"},"content":"        super(description, \"D\");","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"chunweii"},"content":"        LDateTimeParser logicDateTimeParser \u003d new LDateTimeParser(stringDateOfDeadline);","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"chunweii"},"content":"        timeOfDeadline \u003d logicDateTimeParser.getTime();","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"chunweii"},"content":"        dateOfDeadline \u003d logicDateTimeParser.getDate();","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"chunweii"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"chunweii"},"content":"    public LocalDateTime getDateTime() {","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"chunweii"},"content":"        return LocalDateTime.of(dateOfDeadline, timeOfDeadline);","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"chunweii"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"chunweii"},"content":"    public String toString() {","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"chunweii"},"content":"        return super.toString() + String.format(\" (by: %s, %s)\", dateOfDeadline, timeOfDeadline); // No preposition","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"chunweii"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"chunweii"},"content":"    public String getDataLine() {","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"chunweii"},"content":"        return super.getDataLine() + \" | \" + dateOfDeadline + \" \" + timeOfDeadline;","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"chunweii"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"chunweii":43}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chunweii"},"content":"package duke.task;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"chunweii"},"content":"import duke.logic.LDateTimeParser;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"chunweii"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"chunweii"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"chunweii"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"chunweii"},"content":"/**","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"chunweii"},"content":" * An event is a task that has a date attached.","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"chunweii"},"content":" */","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"chunweii"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"chunweii"},"content":"    private final LocalDate dateOfEvent;","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"chunweii"},"content":"    private final LocalTime timeOfEvent;","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"chunweii"},"content":"     * Creates a new event with the given description on the given eventDate.","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"chunweii"},"content":"     * @param description The description of the event","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"chunweii"},"content":"     * @param eventDate   The date of the event","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"chunweii"},"content":"    public Event(String description, String eventDate) {","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"chunweii"},"content":"        super(description, \"E\");","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"chunweii"},"content":"        LDateTimeParser logicDateTimeParser \u003d new LDateTimeParser(eventDate);","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"chunweii"},"content":"        timeOfEvent \u003d logicDateTimeParser.getTime();","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"chunweii"},"content":"        dateOfEvent \u003d logicDateTimeParser.getDate();","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"chunweii"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"chunweii"},"content":"    public LocalDateTime getDateTime() {","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"chunweii"},"content":"        return LocalDateTime.of(dateOfEvent, timeOfEvent);","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"chunweii"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"chunweii"},"content":"    public String toString() {","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"chunweii"},"content":"        return super.toString() + String.format(\" (at: %s, %s)\", dateOfEvent, timeOfEvent); // No preposition","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"chunweii"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"chunweii"},"content":"    public String getDataLine() {","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"chunweii"},"content":"        return super.getDataLine() + \" | \" + dateOfEvent + \" \" + timeOfEvent;","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"chunweii"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"chunweii":43}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chunweii"},"content":"package duke.task;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"chunweii"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"chunweii"},"content":"import java.util.Objects;","lastModifiedDate":"2021-08-17"},{"lineNumber":5,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":6,"author":{"gitId":"chunweii"},"content":"/**","lastModifiedDate":"2021-08-21"},{"lineNumber":7,"author":{"gitId":"chunweii"},"content":" * Task is a general class for any task that is to be saved by {@link} .","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"chunweii"},"content":" */","lastModifiedDate":"2021-08-21"},{"lineNumber":9,"author":{"gitId":"chunweii"},"content":"public abstract class Task {","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"chunweii"},"content":"    private final String description, taskType;","lastModifiedDate":"2021-08-17"},{"lineNumber":11,"author":{"gitId":"chunweii"},"content":"    private boolean isDone;","lastModifiedDate":"2021-08-17"},{"lineNumber":12,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":13,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"chunweii"},"content":"     * Creates a new task object with the description and type of task.","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"chunweii"},"content":"     * @param description The description of the task","lastModifiedDate":"2021-08-21"},{"lineNumber":17,"author":{"gitId":"chunweii"},"content":"     * @param taskType    The type of task (todo/event/deadline)","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":19,"author":{"gitId":"chunweii"},"content":"    public Task(String description, String taskType) {","lastModifiedDate":"2021-08-17"},{"lineNumber":20,"author":{"gitId":"chunweii"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-17"},{"lineNumber":21,"author":{"gitId":"chunweii"},"content":"        this.taskType \u003d taskType;","lastModifiedDate":"2021-08-17"},{"lineNumber":22,"author":{"gitId":"chunweii"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-17"},{"lineNumber":23,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":24,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":25,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-17"},{"lineNumber":26,"author":{"gitId":"chunweii"},"content":"     * Gets the status string \u003ccode\u003e[\u0026lt;taskType\u0026gt;][\u0026lt;isDone\u0026gt;]\u003c/code\u003e","lastModifiedDate":"2021-08-17"},{"lineNumber":27,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-17"},{"lineNumber":28,"author":{"gitId":"chunweii"},"content":"     * @return the associated string","lastModifiedDate":"2021-08-17"},{"lineNumber":29,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-17"},{"lineNumber":30,"author":{"gitId":"chunweii"},"content":"    public String getStatus() {","lastModifiedDate":"2021-08-17"},{"lineNumber":31,"author":{"gitId":"chunweii"},"content":"        return (isDone ? String.format(\"[%s][X]\", taskType) : String.format(\"[%s][ ]\", taskType)); // mark done task with X","lastModifiedDate":"2021-08-17"},{"lineNumber":32,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":33,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":34,"author":{"gitId":"chunweii"},"content":"    public boolean isDone() {","lastModifiedDate":"2021-08-17"},{"lineNumber":35,"author":{"gitId":"chunweii"},"content":"        return this.isDone;","lastModifiedDate":"2021-08-17"},{"lineNumber":36,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":37,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":38,"author":{"gitId":"chunweii"},"content":"    public String getDescription() {","lastModifiedDate":"2021-08-17"},{"lineNumber":39,"author":{"gitId":"chunweii"},"content":"        return this.description;","lastModifiedDate":"2021-08-17"},{"lineNumber":40,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":41,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":42,"author":{"gitId":"chunweii"},"content":"    public String getTaskType() {","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"chunweii"},"content":"        return taskType;","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":47,"author":{"gitId":"chunweii"},"content":"     * Marks the current task as done.","lastModifiedDate":"2021-08-23"},{"lineNumber":48,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"chunweii"},"content":"     * @return true if task is successfully marked, or false if task has been marked as done before.","lastModifiedDate":"2021-08-23"},{"lineNumber":50,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":51,"author":{"gitId":"chunweii"},"content":"    public boolean markAsDone() {","lastModifiedDate":"2021-08-17"},{"lineNumber":52,"author":{"gitId":"chunweii"},"content":"        if (this.isDone) {","lastModifiedDate":"2021-08-18"},{"lineNumber":53,"author":{"gitId":"chunweii"},"content":"            return false;","lastModifiedDate":"2021-08-18"},{"lineNumber":54,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":55,"author":{"gitId":"chunweii"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-08-17"},{"lineNumber":56,"author":{"gitId":"chunweii"},"content":"        return true;","lastModifiedDate":"2021-08-17"},{"lineNumber":57,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":58,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":59,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":60,"author":{"gitId":"chunweii"},"content":"     * Gets the date and time of the task, or null if not applicable.","lastModifiedDate":"2021-08-22"},{"lineNumber":61,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":62,"author":{"gitId":"chunweii"},"content":"     * @return the associated LocalDateTime object","lastModifiedDate":"2021-08-22"},{"lineNumber":63,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":64,"author":{"gitId":"chunweii"},"content":"    public abstract LocalDateTime getDateTime();","lastModifiedDate":"2021-08-22"},{"lineNumber":65,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":66,"author":{"gitId":"chunweii"},"content":"    @Override","lastModifiedDate":"2021-08-17"},{"lineNumber":67,"author":{"gitId":"chunweii"},"content":"    public boolean equals(Object o) {","lastModifiedDate":"2021-08-17"},{"lineNumber":68,"author":{"gitId":"chunweii"},"content":"        if (this \u003d\u003d o) return true;","lastModifiedDate":"2021-08-17"},{"lineNumber":69,"author":{"gitId":"chunweii"},"content":"        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) return false;","lastModifiedDate":"2021-08-17"},{"lineNumber":70,"author":{"gitId":"chunweii"},"content":"        Task task \u003d (Task) o;","lastModifiedDate":"2021-08-17"},{"lineNumber":71,"author":{"gitId":"chunweii"},"content":"        return isDone \u003d\u003d task.isDone \u0026\u0026 description.equals(task.description);","lastModifiedDate":"2021-08-17"},{"lineNumber":72,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":73,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":74,"author":{"gitId":"chunweii"},"content":"    @Override","lastModifiedDate":"2021-08-17"},{"lineNumber":75,"author":{"gitId":"chunweii"},"content":"    public int hashCode() {","lastModifiedDate":"2021-08-17"},{"lineNumber":76,"author":{"gitId":"chunweii"},"content":"        return Objects.hash(description, isDone);","lastModifiedDate":"2021-08-17"},{"lineNumber":77,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":78,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":79,"author":{"gitId":"chunweii"},"content":"    @Override","lastModifiedDate":"2021-08-17"},{"lineNumber":80,"author":{"gitId":"chunweii"},"content":"    public String toString() {","lastModifiedDate":"2021-08-17"},{"lineNumber":81,"author":{"gitId":"chunweii"},"content":"        return String.format(\"%s %s\", this.getStatus(), this.getDescription());","lastModifiedDate":"2021-08-17"},{"lineNumber":82,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":83,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":84,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":85,"author":{"gitId":"chunweii"},"content":"     * Gets the string that is to be appended in the dukedata.txt file.","lastModifiedDate":"2021-08-22"},{"lineNumber":86,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":87,"author":{"gitId":"chunweii"},"content":"     * @return The associated string","lastModifiedDate":"2021-08-22"},{"lineNumber":88,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":89,"author":{"gitId":"chunweii"},"content":"    public String getDataLine() {","lastModifiedDate":"2021-08-22"},{"lineNumber":90,"author":{"gitId":"chunweii"},"content":"        return String.format(\"%s | %d | %s\", taskType, isDone ? 1 : 0, description);","lastModifiedDate":"2021-08-22"},{"lineNumber":91,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":92,"author":{"gitId":"chunweii"},"content":"}","lastModifiedDate":"2021-08-17"}],"authorContributionMap":{"chunweii":92}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chunweii"},"content":"package duke.task;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"chunweii"},"content":"import duke.DukeException;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"chunweii"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"chunweii"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"chunweii"},"content":"import java.util.Collections;","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"chunweii"},"content":"import java.util.List;","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"chunweii"},"content":"import java.util.Map;","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"chunweii"},"content":"import java.util.TreeMap;","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"chunweii"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"chunweii"},"content":"import static java.util.AbstractMap.SimpleImmutableEntry;","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"chunweii"},"content":"/**","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"chunweii"},"content":" * Encapsulates a list of tasks that the user wants to keep track of.","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"chunweii"},"content":" */","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"chunweii"},"content":"public class TaskList {","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"chunweii"},"content":"    private final List\u003cTask\u003e tasks;","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"chunweii"},"content":"    private final int limit;","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":22,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"chunweii"},"content":"     * Creates the task list with the given limit.","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"chunweii"},"content":"     * @param limit the limit to the size of the list. The number of tasks cannot exceed this limit.","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"chunweii"},"content":"    public TaskList(int limit) {","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"chunweii"},"content":"        tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"chunweii"},"content":"        this.limit \u003d limit;","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"chunweii"},"content":"     * Adds the task into the list.","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"chunweii"},"content":"     * @param task The task to be added","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"chunweii"},"content":"     * @return true if the task is successfully added, or false if the task is not added as the list is full.","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"chunweii"},"content":"    public boolean addTask(Task task) {","lastModifiedDate":"2021-08-23"},{"lineNumber":39,"author":{"gitId":"chunweii"},"content":"        if (tasks.size() \u003e\u003d limit) {","lastModifiedDate":"2021-08-23"},{"lineNumber":40,"author":{"gitId":"chunweii"},"content":"            return false;","lastModifiedDate":"2021-08-23"},{"lineNumber":41,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":42,"author":{"gitId":"chunweii"},"content":"        tasks.add(task);","lastModifiedDate":"2021-08-23"},{"lineNumber":43,"author":{"gitId":"chunweii"},"content":"        return true;","lastModifiedDate":"2021-08-23"},{"lineNumber":44,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":45,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":46,"author":{"gitId":"chunweii"},"content":"    private boolean validTaskNumber(int taskNumber) {","lastModifiedDate":"2021-08-23"},{"lineNumber":47,"author":{"gitId":"chunweii"},"content":"        return taskNumber \u003c\u003d tasks.size() \u0026\u0026 taskNumber \u003e 0;","lastModifiedDate":"2021-08-23"},{"lineNumber":48,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":49,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":50,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":51,"author":{"gitId":"chunweii"},"content":"     * Removes the task according to the specified task number.","lastModifiedDate":"2021-08-23"},{"lineNumber":52,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":53,"author":{"gitId":"chunweii"},"content":"     * @param taskNumber The task number of the task to be removed. This is the number that the user sees.","lastModifiedDate":"2021-08-23"},{"lineNumber":54,"author":{"gitId":"chunweii"},"content":"     * @return the task that is being removed","lastModifiedDate":"2021-08-23"},{"lineNumber":55,"author":{"gitId":"chunweii"},"content":"     * @throws InvalidTaskNumberException when the task number given is invalid.","lastModifiedDate":"2021-08-23"},{"lineNumber":56,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":57,"author":{"gitId":"chunweii"},"content":"    public Task removeTask(int taskNumber) {","lastModifiedDate":"2021-08-23"},{"lineNumber":58,"author":{"gitId":"chunweii"},"content":"        if (validTaskNumber(taskNumber)) {","lastModifiedDate":"2021-08-23"},{"lineNumber":59,"author":{"gitId":"chunweii"},"content":"            return tasks.remove(taskNumber - 1);","lastModifiedDate":"2021-08-23"},{"lineNumber":60,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":61,"author":{"gitId":"chunweii"},"content":"        throw new InvalidTaskNumberException();","lastModifiedDate":"2021-08-23"},{"lineNumber":62,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":63,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":64,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":65,"author":{"gitId":"chunweii"},"content":"     * Gets the task associated with the task number.","lastModifiedDate":"2021-08-23"},{"lineNumber":66,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"chunweii"},"content":"     * @param taskNumber The task number of the task to be retrieved. This is the number that the user sees.","lastModifiedDate":"2021-08-23"},{"lineNumber":68,"author":{"gitId":"chunweii"},"content":"     * @return the relevant task","lastModifiedDate":"2021-08-23"},{"lineNumber":69,"author":{"gitId":"chunweii"},"content":"     * @throws InvalidTaskNumberException when the task number given is invalid.","lastModifiedDate":"2021-08-23"},{"lineNumber":70,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":71,"author":{"gitId":"chunweii"},"content":"    public Task getTask(int taskNumber) {","lastModifiedDate":"2021-08-23"},{"lineNumber":72,"author":{"gitId":"chunweii"},"content":"        if (!validTaskNumber(taskNumber)) {","lastModifiedDate":"2021-08-23"},{"lineNumber":73,"author":{"gitId":"chunweii"},"content":"            throw new InvalidTaskNumberException();","lastModifiedDate":"2021-08-23"},{"lineNumber":74,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":75,"author":{"gitId":"chunweii"},"content":"        return tasks.get(taskNumber - 1);","lastModifiedDate":"2021-08-23"},{"lineNumber":76,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":77,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":78,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":79,"author":{"gitId":"chunweii"},"content":"     * Gets all the tasks in the list.","lastModifiedDate":"2021-08-23"},{"lineNumber":80,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":81,"author":{"gitId":"chunweii"},"content":"     * @return the immutable list of tasks in this task list","lastModifiedDate":"2021-08-25"},{"lineNumber":82,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":83,"author":{"gitId":"chunweii"},"content":"    public List\u003cTask\u003e getTasks() {","lastModifiedDate":"2021-08-23"},{"lineNumber":84,"author":{"gitId":"chunweii"},"content":"        return Collections.unmodifiableList(tasks);","lastModifiedDate":"2021-08-23"},{"lineNumber":85,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":86,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":87,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":88,"author":{"gitId":"chunweii"},"content":"     * Gets the list of all upcoming tasks in the list, sorted chronologically.","lastModifiedDate":"2021-08-25"},{"lineNumber":89,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":90,"author":{"gitId":"chunweii"},"content":"     * @return the list of tasks, with their corresponding task number","lastModifiedDate":"2021-08-25"},{"lineNumber":91,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":92,"author":{"gitId":"chunweii"},"content":"    public List\u003cSimpleImmutableEntry\u003c? extends Task, Integer\u003e\u003e getUpcomingTasks() {","lastModifiedDate":"2021-08-25"},{"lineNumber":93,"author":{"gitId":"chunweii"},"content":"        Map\u003cTask, Integer\u003e upcomingTasks \u003d new TreeMap\u003c\u003e((task1, task2) -\u003e {","lastModifiedDate":"2021-08-25"},{"lineNumber":94,"author":{"gitId":"chunweii"},"content":"            LocalDateTime dateTime1 \u003d task1.getDateTime();","lastModifiedDate":"2021-08-25"},{"lineNumber":95,"author":{"gitId":"chunweii"},"content":"            LocalDateTime dateTime2 \u003d task2.getDateTime();","lastModifiedDate":"2021-08-25"},{"lineNumber":96,"author":{"gitId":"chunweii"},"content":"            // time can be null if task is to-do. By default, put all to-do to the last.","lastModifiedDate":"2021-08-25"},{"lineNumber":97,"author":{"gitId":"chunweii"},"content":"            return dateTime1 \u003d\u003d null","lastModifiedDate":"2021-08-25"},{"lineNumber":98,"author":{"gitId":"chunweii"},"content":"                    ? 1","lastModifiedDate":"2021-08-25"},{"lineNumber":99,"author":{"gitId":"chunweii"},"content":"                    : dateTime2 \u003d\u003d null","lastModifiedDate":"2021-08-25"},{"lineNumber":100,"author":{"gitId":"chunweii"},"content":"                    ? -1","lastModifiedDate":"2021-08-25"},{"lineNumber":101,"author":{"gitId":"chunweii"},"content":"                    : dateTime1.equals(dateTime2) // In this situation, we have to sort based on order in tasklist.","lastModifiedDate":"2021-08-25"},{"lineNumber":102,"author":{"gitId":"chunweii"},"content":"                    ? Integer.compare(tasks.indexOf(task1), tasks.indexOf(task2))","lastModifiedDate":"2021-08-25"},{"lineNumber":103,"author":{"gitId":"chunweii"},"content":"                    : dateTime1.compareTo(dateTime2);","lastModifiedDate":"2021-08-25"},{"lineNumber":104,"author":{"gitId":"chunweii"},"content":"        });","lastModifiedDate":"2021-08-25"},{"lineNumber":105,"author":{"gitId":"chunweii"},"content":"        for (int i \u003d 1; i \u003c\u003d tasks.size(); i++) {","lastModifiedDate":"2021-08-25"},{"lineNumber":106,"author":{"gitId":"chunweii"},"content":"            Task task \u003d tasks.get(i - 1);","lastModifiedDate":"2021-08-25"},{"lineNumber":107,"author":{"gitId":"chunweii"},"content":"            String type \u003d task.getTaskType();","lastModifiedDate":"2021-08-25"},{"lineNumber":108,"author":{"gitId":"chunweii"},"content":"            if (!task.isDone() \u0026\u0026 // Task is not done and it is either to-do or the date is later than now.","lastModifiedDate":"2021-08-25"},{"lineNumber":109,"author":{"gitId":"chunweii"},"content":"                    (type.equals(\"T\") || task.getDateTime().isAfter(LocalDateTime.now()))) {","lastModifiedDate":"2021-08-25"},{"lineNumber":110,"author":{"gitId":"chunweii"},"content":"                upcomingTasks.put(task, i);","lastModifiedDate":"2021-08-25"},{"lineNumber":111,"author":{"gitId":"chunweii"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":112,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":113,"author":{"gitId":"chunweii"},"content":"        return upcomingTasks.entrySet().stream().map(SimpleImmutableEntry::new)","lastModifiedDate":"2021-08-25"},{"lineNumber":114,"author":{"gitId":"chunweii"},"content":"                .collect(Collectors.toUnmodifiableList());","lastModifiedDate":"2021-08-25"},{"lineNumber":115,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":116,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":117,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":118,"author":{"gitId":"chunweii"},"content":"     * Gets all the tasks in the list, along with the task number.","lastModifiedDate":"2021-08-25"},{"lineNumber":119,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":120,"author":{"gitId":"chunweii"},"content":"     * @return the immutable list of tasks with task numbers in this task list","lastModifiedDate":"2021-08-25"},{"lineNumber":121,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":122,"author":{"gitId":"chunweii"},"content":"    public List\u003cSimpleImmutableEntry\u003c? extends Task, Integer\u003e\u003e getAllTasks() {","lastModifiedDate":"2021-08-25"},{"lineNumber":123,"author":{"gitId":"chunweii"},"content":"        List\u003cSimpleImmutableEntry\u003c? extends Task, Integer\u003e\u003e result \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-25"},{"lineNumber":124,"author":{"gitId":"chunweii"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2021-08-25"},{"lineNumber":125,"author":{"gitId":"chunweii"},"content":"            result.add(new SimpleImmutableEntry\u003c\u003e(tasks.get(i), i + 1));","lastModifiedDate":"2021-08-25"},{"lineNumber":126,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":127,"author":{"gitId":"chunweii"},"content":"        return Collections.unmodifiableList(result);","lastModifiedDate":"2021-08-25"},{"lineNumber":128,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":129,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":130,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":131,"author":{"gitId":"chunweii"},"content":"     * Gets all the tasks in the list containing the string in the description.","lastModifiedDate":"2021-08-25"},{"lineNumber":132,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":133,"author":{"gitId":"chunweii"},"content":"     * @param pattern the pattern to be matched with the task descriptions in the list","lastModifiedDate":"2021-08-25"},{"lineNumber":134,"author":{"gitId":"chunweii"},"content":"     * @return the immutable list of tasks containing str in the description, with their task numbers","lastModifiedDate":"2021-08-25"},{"lineNumber":135,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":136,"author":{"gitId":"chunweii"},"content":"    public List\u003cSimpleImmutableEntry\u003c? extends Task, Integer\u003e\u003e getTasksContaining(String pattern) {","lastModifiedDate":"2021-08-25"},{"lineNumber":137,"author":{"gitId":"chunweii"},"content":"        return getAllTasks().stream().filter(taskAndNumber -\u003e","lastModifiedDate":"2021-08-25"},{"lineNumber":138,"author":{"gitId":"chunweii"},"content":"                taskAndNumber.getKey().getDescription().toUpperCase()","lastModifiedDate":"2021-08-25"},{"lineNumber":139,"author":{"gitId":"chunweii"},"content":"                        .contains(pattern.toUpperCase()))","lastModifiedDate":"2021-08-25"},{"lineNumber":140,"author":{"gitId":"chunweii"},"content":"                .collect(Collectors.toUnmodifiableList());","lastModifiedDate":"2021-08-25"},{"lineNumber":141,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":142,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":143,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":144,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":145,"author":{"gitId":"chunweii"},"content":"     * Marks the selected task as done.","lastModifiedDate":"2021-08-23"},{"lineNumber":146,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":147,"author":{"gitId":"chunweii"},"content":"     * @param taskNumber the task number to be marked as done. This is the number that the user sees.","lastModifiedDate":"2021-08-23"},{"lineNumber":148,"author":{"gitId":"chunweii"},"content":"     * @return true if task is successfully marked, or false if task has been marked as done before.","lastModifiedDate":"2021-08-23"},{"lineNumber":149,"author":{"gitId":"chunweii"},"content":"     * @throws InvalidTaskNumberException when the task number given is invalid.","lastModifiedDate":"2021-08-23"},{"lineNumber":150,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":151,"author":{"gitId":"chunweii"},"content":"    public boolean markAsDone(int taskNumber) {","lastModifiedDate":"2021-08-23"},{"lineNumber":152,"author":{"gitId":"chunweii"},"content":"        return getTask(taskNumber).markAsDone();","lastModifiedDate":"2021-08-23"},{"lineNumber":153,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":154,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":155,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":156,"author":{"gitId":"chunweii"},"content":"     * Gets the size of the task list.","lastModifiedDate":"2021-08-25"},{"lineNumber":157,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":158,"author":{"gitId":"chunweii"},"content":"     * @return the size of the list as an integer.","lastModifiedDate":"2021-08-25"},{"lineNumber":159,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":160,"author":{"gitId":"chunweii"},"content":"    public int size() {","lastModifiedDate":"2021-08-23"},{"lineNumber":161,"author":{"gitId":"chunweii"},"content":"        return tasks.size();","lastModifiedDate":"2021-08-23"},{"lineNumber":162,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":163,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":164,"author":{"gitId":"chunweii"},"content":"    private class InvalidTaskNumberException extends DukeException {","lastModifiedDate":"2021-08-23"},{"lineNumber":165,"author":{"gitId":"chunweii"},"content":"        public InvalidTaskNumberException() {","lastModifiedDate":"2021-08-23"},{"lineNumber":166,"author":{"gitId":"chunweii"},"content":"            super(tasks.size() \u003e 1","lastModifiedDate":"2021-08-23"},{"lineNumber":167,"author":{"gitId":"chunweii"},"content":"                    ? \"Please input a value between 1 and \" + tasks.size()","lastModifiedDate":"2021-08-23"},{"lineNumber":168,"author":{"gitId":"chunweii"},"content":"                    : tasks.size() \u003d\u003d 1","lastModifiedDate":"2021-08-23"},{"lineNumber":169,"author":{"gitId":"chunweii"},"content":"                    ? \"You can only input the value 1\"","lastModifiedDate":"2021-08-23"},{"lineNumber":170,"author":{"gitId":"chunweii"},"content":"                    : \"There are no tasks so far\");","lastModifiedDate":"2021-08-23"},{"lineNumber":171,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":172,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":173,"author":{"gitId":"chunweii"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"chunweii":173}},{"path":"src/main/java/duke/task/TasksEnum.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chunweii"},"content":"package duke.task;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"chunweii"},"content":"import duke.DukeException;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"chunweii"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"chunweii"},"content":" * An enum of tasks that each have a method to create a new instance of the task.","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"chunweii"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"chunweii"},"content":"public enum TasksEnum {","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"chunweii"},"content":"    TODO () {","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"chunweii"},"content":"        @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"chunweii"},"content":"        public Task getTask(String input) {","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"chunweii"},"content":"            if (input \u003d\u003d null || input.equals(\"\")) {","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"chunweii"},"content":"                throw new DukeException(\"The description of this todo task cannot be empty.\");","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"chunweii"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"chunweii"},"content":"            return new Todo(input);","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"chunweii"},"content":"    },","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"chunweii"},"content":"    EVENT () {","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"chunweii"},"content":"        @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"chunweii"},"content":"        public Task getTask(String input) {","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"chunweii"},"content":"            if (input \u003d\u003d null || !input.contains(\" /at \")) {","lastModifiedDate":"2021-08-23"},{"lineNumber":22,"author":{"gitId":"chunweii"},"content":"                throw new DukeException(\"There should be a description followed by \\\"/at\\\" and\" +","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"chunweii"},"content":"                        \" then the date and time of the event.\");","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"chunweii"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"chunweii"},"content":"            String[] splitOtherInput \u003d input.split(\" /at \", 2);","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"chunweii"},"content":"            return new Event(splitOtherInput[0], splitOtherInput[1]);","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"chunweii"},"content":"    },","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"chunweii"},"content":"    DEADLINE () {","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"chunweii"},"content":"        @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"chunweii"},"content":"        public Task getTask(String input) {","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"chunweii"},"content":"            if (input \u003d\u003d null || !input.contains(\" /by \")) {","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"chunweii"},"content":"                throw new DukeException(\"There should be a description followed by \\\"/by\\\" and\" +","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"chunweii"},"content":"                        \" then the date and time of the deadline.\");","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"chunweii"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"chunweii"},"content":"            String[] splitOtherInput \u003d input.split(\" /by \", 2);","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"chunweii"},"content":"            return new Deadline(splitOtherInput[0], splitOtherInput[1]);","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":39,"author":{"gitId":"chunweii"},"content":"    };","lastModifiedDate":"2021-08-23"},{"lineNumber":40,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":41,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":42,"author":{"gitId":"chunweii"},"content":"     * Creates a new task based on the description and date/time.","lastModifiedDate":"2021-08-23"},{"lineNumber":43,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"chunweii"},"content":"     * @param input Contains the description and/or date/time of the task.","lastModifiedDate":"2021-08-23"},{"lineNumber":45,"author":{"gitId":"chunweii"},"content":"     * @return the new task","lastModifiedDate":"2021-08-23"},{"lineNumber":46,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":47,"author":{"gitId":"chunweii"},"content":"    public abstract Task getTask(String input) throws DukeException;","lastModifiedDate":"2021-08-23"},{"lineNumber":48,"author":{"gitId":"chunweii"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"chunweii":48}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chunweii"},"content":"package duke.task;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"chunweii"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"chunweii"},"content":"/**","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"chunweii"},"content":" * A simple task with no deadline","lastModifiedDate":"2021-08-21"},{"lineNumber":7,"author":{"gitId":"chunweii"},"content":" */","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"chunweii"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-08-17"},{"lineNumber":9,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"chunweii"},"content":"     * Creates a Todo object that does not have any dates.","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"chunweii"},"content":"     * @param description The description of the task to be done","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"chunweii"},"content":"    public Todo(String description) {","lastModifiedDate":"2021-08-17"},{"lineNumber":15,"author":{"gitId":"chunweii"},"content":"        super(description, \"T\");","lastModifiedDate":"2021-08-17"},{"lineNumber":16,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":17,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"chunweii"},"content":"     * Returns null.","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"chunweii"},"content":"     * This is because Todo does not have any associated date and time.","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"chunweii"},"content":"     * @return null","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"chunweii"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"chunweii"},"content":"    public LocalDateTime getDateTime() {","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"chunweii"},"content":"        return null;","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"chunweii"},"content":"    @Override","lastModifiedDate":"2021-08-17"},{"lineNumber":30,"author":{"gitId":"chunweii"},"content":"    public String toString() {","lastModifiedDate":"2021-08-17"},{"lineNumber":31,"author":{"gitId":"chunweii"},"content":"        return super.toString(); // No preposition","lastModifiedDate":"2021-08-17"},{"lineNumber":32,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":33,"author":{"gitId":"chunweii"},"content":"}","lastModifiedDate":"2021-08-17"}],"authorContributionMap":{"chunweii":33}},{"path":"src/main/java/duke/test/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chunweii"},"content":"package duke.test;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"chunweii"},"content":"import duke.DukeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"chunweii"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"chunweii"},"content":"import duke.task.TasksEnum;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"chunweii"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"chunweii"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"chunweii"},"content":"class TaskListTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"chunweii"},"content":"    TaskList taskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"chunweii"},"content":"    private static final int LIMIT \u003d 5;","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"chunweii"},"content":"    TaskListTest() {","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"chunweii"},"content":"        taskList \u003d new TaskList(LIMIT);","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"chunweii"},"content":"        for (int i \u003d 0; i \u003c 4; i++) {","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"chunweii"},"content":"            taskList.addTask(TasksEnum.TODO.getTask(\"Hello World\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"chunweii"},"content":"        taskList.markAsDone(1);","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"chunweii"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"chunweii"},"content":"    void testAddTask() {","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"chunweii"},"content":"        Assertions.assertEquals(4, taskList.size());","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"chunweii"},"content":"        Assertions.assertTrue(taskList.addTask(TasksEnum.DEADLINE.getTask(\"get a gf /by 9/12/2023\")));","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"chunweii"},"content":"        Assertions.assertFalse(taskList.addTask(TasksEnum.EVENT.getTask(\"hello /at 12:00\")),","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"chunweii"},"content":"                \"Task list exceeded hard limit\");","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"chunweii"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"chunweii"},"content":"    void testDoubleMarkedAsDone() {","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"chunweii"},"content":"        Assertions.assertFalse(taskList.markAsDone(1));","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"chunweii"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"chunweii"},"content":"    void testSuccessfulMarkedDone() {","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"chunweii"},"content":"        Assertions.assertTrue(taskList.getTask(1).isDone());","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"chunweii"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"chunweii"},"content":"    void testEmptyTaskList() {","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"chunweii"},"content":"        TaskList tl \u003d new TaskList(1);","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"chunweii"},"content":"        Assertions.assertThrows(DukeException.class, () -\u003e tl.removeTask(1));","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"chunweii"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"chunweii":43}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"chunweii"},"content":"Duke","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"chunweii"},"content":"todo Buy Milk","lastModifiedDate":"2021-08-17"},{"lineNumber":3,"author":{"gitId":"chunweii"},"content":"delete 1","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"chunweii"},"content":"delete 1","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"chunweii"},"content":"event Townhall /at 27/10/2021 15:00","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"chunweii"},"content":"todo Wash laundry","lastModifiedDate":"2021-08-17"},{"lineNumber":7,"author":{"gitId":"chunweii"},"content":"deadline CS2103T Project /by 19/8/2021","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"chunweii"},"content":"list","lastModifiedDate":"2021-08-17"},{"lineNumber":9,"author":{"gitId":"chunweii"},"content":"do this thing","lastModifiedDate":"2021-08-17"},{"lineNumber":10,"author":{"gitId":"chunweii"},"content":"todo","lastModifiedDate":"2021-08-17"},{"lineNumber":11,"author":{"gitId":"chunweii"},"content":"deadline Art Project","lastModifiedDate":"2021-08-17"},{"lineNumber":12,"author":{"gitId":"chunweii"},"content":"deadline /by 20","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"chunweii"},"content":"event Concert /by 19/2/2022","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"chunweii"},"content":"deadline hello","lastModifiedDate":"2021-08-17"},{"lineNumber":15,"author":{"gitId":"chunweii"},"content":"event Job Interview /at 15:00","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"chunweii"},"content":"deadline Write resume /by 2/11/2021 14:20","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"chunweii"},"content":"deadline Prepare presentation /by 21:30","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"chunweii"},"content":"event Mum\u0027s birthday /at 2/11/2021, 14:20","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"chunweii"},"content":"todo Get a life","lastModifiedDate":"2021-08-17"},{"lineNumber":20,"author":{"gitId":"chunweii"},"content":"todo Get a wife","lastModifiedDate":"2021-08-17"},{"lineNumber":21,"author":{"gitId":"chunweii"},"content":"todo Get 6 packs","lastModifiedDate":"2021-08-17"},{"lineNumber":22,"author":{"gitId":"chunweii"},"content":"event Sleep /at 2:00","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"chunweii"},"content":"deadline CS2100 homework /by 25/8/2021","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"chunweii"},"content":"todo Learn to do homework","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"chunweii"},"content":"todo Renew passport","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"chunweii"},"content":"upcoming","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"chunweii"},"content":"done 2","lastModifiedDate":"2021-08-17"},{"lineNumber":28,"author":{"gitId":"chunweii"},"content":"done 2","lastModifiedDate":"2021-08-18"},{"lineNumber":29,"author":{"gitId":"chunweii"},"content":"done 13","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"chunweii"},"content":"done","lastModifiedDate":"2021-08-18"},{"lineNumber":31,"author":{"gitId":"chunweii"},"content":"delete","lastModifiedDate":"2021-08-18"},{"lineNumber":32,"author":{"gitId":"chunweii"},"content":"list","lastModifiedDate":"2021-08-17"},{"lineNumber":33,"author":{"gitId":"chunweii"},"content":"help help","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"chunweii"},"content":"help something","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"chunweii"},"content":"find HOmework","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"chunweii"},"content":"bye","lastModifiedDate":"2021-08-17"}],"authorContributionMap":{"chunweii":36}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"chunweii"},"content":"REM obtain all .java files in relative path","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"chunweii"},"content":"dir ..\\src\\main\\java\\duke /s /b /a-d \u003e sources_raw.txt","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"chunweii"},"content":"javac -cp ..\\src\\main\\java\\duke -Xlint:none -d ..\\bin @sources_raw.txt","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"chunweii"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"chunweii":5,"-":19}}]

[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"chunweii"},"content":"# Duke","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"chunweii"},"content":"\u003e The key is not to prioritize whatâ€™s on your schedule, but to schedule your priorities. \u003e ~ Stephen Covey","lastModifiedDate":"2021-09-06"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"chunweii"},"content":"Duke is an awesome way to keep track of all your daily tasks.","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"chunweii"},"content":"Forgot what is coming up in your schedule? **Duke it**  ","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"chunweii"},"content":"Hard to remember all your appointments? **Duke it**  ","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"chunweii"},"content":"Find it difficult to manage your todo list? **Duke it**","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"chunweii"},"content":"Duke is:","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"chunweii"},"content":"1. `Text-based`  with GUI enabled :tada:","lastModifiedDate":"2021-09-06"},{"lineNumber":13,"author":{"gitId":"chunweii"},"content":"2. Easy-to-learn","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"chunweii"},"content":"3. _Blazing_ fast :fire:","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"chunweii"},"content":"4. **Free** :no_entry_sign::dollar:","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"chunweii"},"content":"## Setting up","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"chunweii"},"content":"Prerequisites: JDK 11, download [here](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html).","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"chunweii"},"content":"1. Download the Duke jar file [here](https://github.com/chunweii/ip/releases) (latest release is v0.2 as of 6 September 2021)","lastModifiedDate":"2021-09-06"},{"lineNumber":22,"author":{"gitId":"chunweii"},"content":"2. Open a terminal/command prompt and navigate to the directory of the jar file.","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"chunweii"},"content":"3. Run `java -jar ip.jar`","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"chunweii"},"content":"4. Add your tasks!","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"chunweii"},"content":"## Future features","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"chunweii"},"content":"- Reminders??","lastModifiedDate":"2021-09-06"},{"lineNumber":27,"author":{"gitId":"chunweii"},"content":"- Continuous Integration","lastModifiedDate":"2021-09-06"},{"lineNumber":28,"author":{"gitId":"chunweii"},"content":"- More to come!!","lastModifiedDate":"2021-09-06"},{"lineNumber":29,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"chunweii"},"content":"Do support us! If you are a Java programmer, consider improving the program and submitting a pull request! Here is our main method for the command line interface (old but usable):","lastModifiedDate":"2021-09-06"},{"lineNumber":31,"author":{"gitId":"chunweii"},"content":"```java  ","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"chunweii"},"content":"public static void main(String[] args) {  ","lastModifiedDate":"2021-08-29"},{"lineNumber":33,"author":{"gitId":"chunweii"},"content":" // new Duke(\u003cfile path\u003e, \u003climit\u003e).run(); ","lastModifiedDate":"2021-08-29"},{"lineNumber":34,"author":{"gitId":"chunweii"},"content":" new Duke(\"./dukedata.txt\", 100).run();}  ","lastModifiedDate":"2021-09-06"},{"lineNumber":35,"author":{"gitId":"chunweii"},"content":"```","lastModifiedDate":"2021-09-06"},{"lineNumber":36,"author":{"gitId":"chunweii"},"content":"**New**: Use the Launcher class:","lastModifiedDate":"2021-09-06"},{"lineNumber":37,"author":{"gitId":"chunweii"},"content":"```java","lastModifiedDate":"2021-09-06"},{"lineNumber":38,"author":{"gitId":"chunweii"},"content":"package duke;","lastModifiedDate":"2021-09-06"},{"lineNumber":39,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":40,"author":{"gitId":"chunweii"},"content":"import duke.ui.Main;  ","lastModifiedDate":"2021-09-06"},{"lineNumber":41,"author":{"gitId":"chunweii"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-09-06"},{"lineNumber":42,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":43,"author":{"gitId":"chunweii"},"content":"public class Launcher {  ","lastModifiedDate":"2021-09-06"},{"lineNumber":44,"author":{"gitId":"chunweii"},"content":"    public static void main(String[] args) {  ","lastModifiedDate":"2021-09-06"},{"lineNumber":45,"author":{"gitId":"chunweii"},"content":"        Application.launch(Main.class, args);  ","lastModifiedDate":"2021-09-06"},{"lineNumber":46,"author":{"gitId":"chunweii"},"content":"    }  ","lastModifiedDate":"2021-09-06"},{"lineNumber":47,"author":{"gitId":"chunweii"},"content":"}","lastModifiedDate":"2021-08-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"chunweii":43,"-":5}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"chunweii"},"content":"    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.9\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"chunweii"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.7.2\u0027","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"chunweii"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.7.2\u0027","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"chunweii"},"content":"}","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"chunweii"},"content":"jar {","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"chunweii"},"content":"    manifest {","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"chunweii"},"content":"        attributes(","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"chunweii"},"content":"                \u0027Main-Class\u0027: \u0027duke.Launcher\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":22,"author":{"gitId":"chunweii"},"content":"        )","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"chunweii"},"content":"    from {","lastModifiedDate":"2021-09-02"},{"lineNumber":25,"author":{"gitId":"chunweii"},"content":"        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }","lastModifiedDate":"2021-09-02"},{"lineNumber":26,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":27,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"chunweii"},"content":"    mainClassName \u003d \"duke.Launcher\"","lastModifiedDate":"2021-09-02"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"chunweii"},"content":"javafx {","lastModifiedDate":"2021-09-01"},{"lineNumber":57,"author":{"gitId":"chunweii"},"content":"    version \u003d \"11.0.2\"","lastModifiedDate":"2021-09-15"},{"lineNumber":58,"author":{"gitId":"chunweii"},"content":"    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]","lastModifiedDate":"2021-09-01"},{"lineNumber":59,"author":{"gitId":"chunweii"},"content":"}","lastModifiedDate":"2021-09-01"},{"lineNumber":60,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":61,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":63,"author":{"gitId":"chunweii"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2021-09-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"chunweii":21,"-":43}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"chunweii"},"content":"# Duke User Guide","lastModifiedDate":"2021-09-13"},{"lineNumber":2,"author":{"gitId":"chunweii"},"content":"Duke is an awesome way to save your tasks and interact with a bot.","lastModifiedDate":"2021-09-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2019-07-29"},{"lineNumber":4,"author":{"gitId":"chunweii"},"content":"### 3 different tasks: todo, event, deadline","lastModifiedDate":"2021-09-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":6,"author":{"gitId":"chunweii"},"content":"Duke can store to-dos, events and deadlines.","lastModifiedDate":"2021-09-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":8,"author":{"gitId":"chunweii"},"content":"### Search for tasks","lastModifiedDate":"2021-09-13"},{"lineNumber":9,"author":{"gitId":"chunweii"},"content":"Duke can search for your tasks when given a matching sub-word of the task.","lastModifiedDate":"2021-09-13"},{"lineNumber":10,"author":{"gitId":"chunweii"},"content":"### View upcoming tasks","lastModifiedDate":"2021-09-13"},{"lineNumber":11,"author":{"gitId":"chunweii"},"content":"Duke can list out all the tasks, including upcoming ones in sorted order.","lastModifiedDate":"2021-09-13"},{"lineNumber":12,"author":{"gitId":"chunweii"},"content":"## Getting started","lastModifiedDate":"2021-09-13"},{"lineNumber":13,"author":{"gitId":"chunweii"},"content":"Download Duke from [here](https://github.com/chunweii/ip/releases).","lastModifiedDate":"2021-09-13"},{"lineNumber":14,"author":{"gitId":"chunweii"},"content":"Ensure that you have [Java JDK 11](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) installed.","lastModifiedDate":"2021-09-13"},{"lineNumber":15,"author":{"gitId":"chunweii"},"content":"Open the program, enter your name and a file name for your data.","lastModifiedDate":"2021-09-13"},{"lineNumber":16,"author":{"gitId":"chunweii"},"content":"Start managing tasks!","lastModifiedDate":"2021-09-13"},{"lineNumber":17,"author":{"gitId":"chunweii"},"content":"Note: All your tasks are saved in the file that you entered when starting the chatbot.","lastModifiedDate":"2021-09-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"## Usage","lastModifiedDate":"2019-07-29"},{"lineNumber":20,"author":{"gitId":"chunweii"},"content":"Note: All date and time format should be in DD/MM/YYYY HH:mm, where either date or time is optional.","lastModifiedDate":"2021-09-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":22,"author":{"gitId":"chunweii"},"content":"### `todo` - Add a new todo task","lastModifiedDate":"2021-09-13"},{"lineNumber":23,"author":{"gitId":"chunweii"},"content":"`todo DESCRIPTION`","lastModifiedDate":"2021-09-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":25,"author":{"gitId":"chunweii"},"content":"Adds a new todo task to be saved by Duke","lastModifiedDate":"2021-09-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"Example of usage:","lastModifiedDate":"2019-07-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":29,"author":{"gitId":"chunweii"},"content":"`todo Buy Milk`","lastModifiedDate":"2021-09-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":31,"author":{"gitId":"chunweii"},"content":"Expected outcome:  A todo task with description \"Buy Milk\" will be added.","lastModifiedDate":"2021-09-13"},{"lineNumber":32,"author":{"gitId":"chunweii"},"content":"### `event` - Add a new event task","lastModifiedDate":"2021-09-13"},{"lineNumber":33,"author":{"gitId":"chunweii"},"content":"`event DESCRIPTION /from START_TIME [/to END_TIME]`","lastModifiedDate":"2021-09-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":35,"author":{"gitId":"chunweii"},"content":"Adds a new event task to be saved by Duke.","lastModifiedDate":"2021-09-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":37,"author":{"gitId":"chunweii"},"content":"Example of usage:","lastModifiedDate":"2021-09-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":39,"author":{"gitId":"chunweii"},"content":"`event Mid-Term /from 19/9/2021`","lastModifiedDate":"2021-09-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":41,"author":{"gitId":"chunweii"},"content":"Expected outcome:  An event task with description \"Mid-Term\" that starts on 19 September 2021 is added.","lastModifiedDate":"2021-09-13"},{"lineNumber":42,"author":{"gitId":"chunweii"},"content":"### `help` - View help list","lastModifiedDate":"2021-09-13"},{"lineNumber":43,"author":{"gitId":"chunweii"},"content":"`help COMMAND`","lastModifiedDate":"2021-09-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":45,"author":{"gitId":"chunweii"},"content":"Shows the help message for the command.","lastModifiedDate":"2021-09-13"},{"lineNumber":46,"author":{"gitId":"chunweii"},"content":"List of commands:","lastModifiedDate":"2021-09-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":48,"author":{"gitId":"chunweii"},"content":"- bye","lastModifiedDate":"2021-09-13"},{"lineNumber":49,"author":{"gitId":"chunweii"},"content":"- deadline","lastModifiedDate":"2021-09-13"},{"lineNumber":50,"author":{"gitId":"chunweii"},"content":"- delete","lastModifiedDate":"2021-09-13"},{"lineNumber":51,"author":{"gitId":"chunweii"},"content":"- done","lastModifiedDate":"2021-09-13"},{"lineNumber":52,"author":{"gitId":"chunweii"},"content":"- event","lastModifiedDate":"2021-09-13"},{"lineNumber":53,"author":{"gitId":"chunweii"},"content":"- find","lastModifiedDate":"2021-09-13"},{"lineNumber":54,"author":{"gitId":"chunweii"},"content":"- help","lastModifiedDate":"2021-09-13"},{"lineNumber":55,"author":{"gitId":"chunweii"},"content":"- list","lastModifiedDate":"2021-09-13"},{"lineNumber":56,"author":{"gitId":"chunweii"},"content":"- todo","lastModifiedDate":"2021-09-13"},{"lineNumber":57,"author":{"gitId":"chunweii"},"content":"- upcoming","lastModifiedDate":"2021-09-13"}],"authorContributionMap":{"chunweii":40,"-":17}},{"path":"settings.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"chunweii"},"content":"include \u0027test\u0027","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"chunweii":2}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chunweii"},"content":"package duke;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"chunweii"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"chunweii"},"content":"import duke.logic.Storage;","lastModifiedDate":"2021-09-03"},{"lineNumber":6,"author":{"gitId":"chunweii"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"chunweii"},"content":"import duke.ui.TextCliUi;","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":9,"author":{"gitId":"chunweii"},"content":"/**","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"chunweii"},"content":" * Duke is a personal assistant that allows users to keep track of events, deadlines and things to do.","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"chunweii"},"content":" * The main method will start the personal assistant in the console.","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"chunweii"},"content":" */","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":14,"author":{"gitId":"chunweii"},"content":"    private final TaskList taskList;","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"chunweii"},"content":"    private final Storage storage;","lastModifiedDate":"2021-09-03"},{"lineNumber":16,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"chunweii"},"content":"     * Creates a new instance of a duke chat-bot.","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"chunweii"},"content":"     * @param filePath the path where the data of the tasks will be saved","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"chunweii"},"content":"    public Duke(String filePath) throws IOException {","lastModifiedDate":"2021-09-03"},{"lineNumber":23,"author":{"gitId":"chunweii"},"content":"        taskList \u003d new TaskList();","lastModifiedDate":"2021-09-03"},{"lineNumber":24,"author":{"gitId":"chunweii"},"content":"        storage \u003d new Storage(filePath, taskList);","lastModifiedDate":"2021-09-03"},{"lineNumber":25,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":28,"author":{"gitId":"chunweii"},"content":"     * Creates a new instance of a duke chat-bot, with default filepath and limit.","lastModifiedDate":"2021-09-01"},{"lineNumber":29,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":30,"author":{"gitId":"chunweii"},"content":"    public Duke() throws IOException {","lastModifiedDate":"2021-09-01"},{"lineNumber":31,"author":{"gitId":"chunweii"},"content":"        taskList \u003d new TaskList(100);","lastModifiedDate":"2021-09-01"},{"lineNumber":32,"author":{"gitId":"chunweii"},"content":"        storage \u003d new Storage(\"./dukedata.txt\", taskList);","lastModifiedDate":"2021-09-03"},{"lineNumber":33,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":34,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":35,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":36,"author":{"gitId":"chunweii"},"content":"     * Runs the duke chat-bot on the command line with default filepath and limit.","lastModifiedDate":"2021-09-01"},{"lineNumber":37,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":38,"author":{"gitId":"chunweii"},"content":"     * @param args irrelevant for now","lastModifiedDate":"2021-08-29"},{"lineNumber":39,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":40,"author":{"gitId":"chunweii"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-29"},{"lineNumber":41,"author":{"gitId":"chunweii"},"content":"        try {","lastModifiedDate":"2021-09-01"},{"lineNumber":42,"author":{"gitId":"chunweii"},"content":"            new Duke().run();","lastModifiedDate":"2021-09-02"},{"lineNumber":43,"author":{"gitId":"chunweii"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-01"},{"lineNumber":44,"author":{"gitId":"chunweii"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-09-01"},{"lineNumber":45,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-09-01"},{"lineNumber":46,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":47,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":48,"author":{"gitId":"chunweii"},"content":"    public TaskList getTaskList() {","lastModifiedDate":"2021-09-01"},{"lineNumber":49,"author":{"gitId":"chunweii"},"content":"        return taskList;","lastModifiedDate":"2021-09-01"},{"lineNumber":50,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":51,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":52,"author":{"gitId":"chunweii"},"content":"    public Storage getStorage() {","lastModifiedDate":"2021-09-03"},{"lineNumber":53,"author":{"gitId":"chunweii"},"content":"        return storage;","lastModifiedDate":"2021-09-03"},{"lineNumber":54,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":55,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":56,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"chunweii"},"content":"     * Runs the duke chat-bot.","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"chunweii"},"content":"    public void run() {","lastModifiedDate":"2021-08-23"},{"lineNumber":60,"author":{"gitId":"chunweii"},"content":"        TextCliUi ui \u003d new TextCliUi();","lastModifiedDate":"2021-09-01"},{"lineNumber":61,"author":{"gitId":"chunweii"},"content":"        while (!ui.willExit()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"chunweii"},"content":"            ui.checkInput(taskList, storage);","lastModifiedDate":"2021-09-03"},{"lineNumber":63,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":64,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":65,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"chunweii":63,"-":2}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chunweii"},"content":"package duke;","lastModifiedDate":"2021-09-01"},{"lineNumber":2,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"chunweii"},"content":"import duke.ui.Main;","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"chunweii"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"chunweii"},"content":"/**","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"chunweii"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"chunweii"},"content":" */","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"chunweii"},"content":"public class Launcher {","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"chunweii"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"chunweii"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"chunweii"},"content":"}","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"chunweii":13}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chunweii"},"content":"package duke.exception;","lastModifiedDate":"2021-09-08"},{"lineNumber":2,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"chunweii"},"content":"/**","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"chunweii"},"content":" * DukeException is a runtime exception for exceptions generated due to invalid inputs or problems adding tasks.","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"chunweii"},"content":" */","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"chunweii"},"content":"public class DukeException extends RuntimeException {","lastModifiedDate":"2021-08-17"},{"lineNumber":7,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":9,"author":{"gitId":"chunweii"},"content":"     * Creates a new runtime exception when there is a problem with inputs or adding tasks.","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"chunweii"},"content":"     * @param message the description of the error","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"chunweii"},"content":"    public DukeException(String message) {","lastModifiedDate":"2021-08-17"},{"lineNumber":14,"author":{"gitId":"chunweii"},"content":"        super(message);","lastModifiedDate":"2021-08-17"},{"lineNumber":15,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":16,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":17,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"chunweii"},"content":"     * Creates a new runtime exception when there is a problem with inputs or adding tasks.","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"chunweii"},"content":"     * This constructor takes in a formatted string as the message just like","lastModifiedDate":"2021-09-05"},{"lineNumber":20,"author":{"gitId":"chunweii"},"content":"     * {@link java.lang.String#format(String, Object...)}.","lastModifiedDate":"2021-09-05"},{"lineNumber":21,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":22,"author":{"gitId":"chunweii"},"content":"     * @param formattedMessage a format string","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"chunweii"},"content":"     * @param args             the arguments to String::format","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"chunweii"},"content":"    public DukeException(String formattedMessage, Object... args) {","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"chunweii"},"content":"        this(String.format(formattedMessage, args));","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"chunweii"},"content":"    @Override","lastModifiedDate":"2021-08-17"},{"lineNumber":30,"author":{"gitId":"chunweii"},"content":"    public String getMessage() {","lastModifiedDate":"2021-08-17"},{"lineNumber":31,"author":{"gitId":"chunweii"},"content":"        return \":\u0027( OOPS!!! \" + super.getMessage();","lastModifiedDate":"2021-08-18"},{"lineNumber":32,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":33,"author":{"gitId":"chunweii"},"content":"}","lastModifiedDate":"2021-08-17"}],"authorContributionMap":{"chunweii":33}},{"path":"src/main/java/duke/exception/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chunweii"},"content":"package duke.exception;","lastModifiedDate":"2021-09-08"},{"lineNumber":2,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":3,"author":{"gitId":"chunweii"},"content":"/**","lastModifiedDate":"2021-09-08"},{"lineNumber":4,"author":{"gitId":"chunweii"},"content":" * A runtime exception that will be thrown if the user gives an incorrect command at the command parser.","lastModifiedDate":"2021-09-08"},{"lineNumber":5,"author":{"gitId":"chunweii"},"content":" */","lastModifiedDate":"2021-09-08"},{"lineNumber":6,"author":{"gitId":"chunweii"},"content":"public class InvalidCommandException extends DukeException {","lastModifiedDate":"2021-09-08"},{"lineNumber":7,"author":{"gitId":"chunweii"},"content":"    public InvalidCommandException(String message) {","lastModifiedDate":"2021-09-08"},{"lineNumber":8,"author":{"gitId":"chunweii"},"content":"        super(message);","lastModifiedDate":"2021-09-08"},{"lineNumber":9,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":10,"author":{"gitId":"chunweii"},"content":"}","lastModifiedDate":"2021-09-08"}],"authorContributionMap":{"chunweii":10}},{"path":"src/main/java/duke/exception/InvalidTaskNumberException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chunweii"},"content":"package duke.exception;","lastModifiedDate":"2021-09-08"},{"lineNumber":2,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":3,"author":{"gitId":"chunweii"},"content":"public class InvalidTaskNumberException extends DukeException {","lastModifiedDate":"2021-09-08"},{"lineNumber":4,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":5,"author":{"gitId":"chunweii"},"content":"     * Creates a new Invalid task number exception due to wrong input.","lastModifiedDate":"2021-09-08"},{"lineNumber":6,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":7,"author":{"gitId":"chunweii"},"content":"    public InvalidTaskNumberException(int size) {","lastModifiedDate":"2021-09-08"},{"lineNumber":8,"author":{"gitId":"chunweii"},"content":"        super(size \u003e 1","lastModifiedDate":"2021-09-08"},{"lineNumber":9,"author":{"gitId":"chunweii"},"content":"            ? \"Please input a value between 1 and \" + size","lastModifiedDate":"2021-09-08"},{"lineNumber":10,"author":{"gitId":"chunweii"},"content":"            : size \u003d\u003d 1","lastModifiedDate":"2021-09-08"},{"lineNumber":11,"author":{"gitId":"chunweii"},"content":"            ? \"You can only input the value 1\"","lastModifiedDate":"2021-09-08"},{"lineNumber":12,"author":{"gitId":"chunweii"},"content":"            : \"There are no tasks so far\");","lastModifiedDate":"2021-09-08"},{"lineNumber":13,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":14,"author":{"gitId":"chunweii"},"content":"}","lastModifiedDate":"2021-09-08"}],"authorContributionMap":{"chunweii":14}},{"path":"src/main/java/duke/logic/CommandParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chunweii"},"content":"package duke.logic;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"chunweii"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-03"},{"lineNumber":4,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":5,"author":{"gitId":"chunweii"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-09-08"},{"lineNumber":6,"author":{"gitId":"chunweii"},"content":"import duke.exception.InvalidCommandException;","lastModifiedDate":"2021-09-08"},{"lineNumber":7,"author":{"gitId":"chunweii"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"chunweii"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"chunweii"},"content":"import duke.task.TasksEnum;","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"chunweii"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"chunweii"},"content":"/**","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"chunweii"},"content":" * The logic for parsing commands typed by the user.","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"chunweii"},"content":" */","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"chunweii"},"content":"public class CommandParser {","lastModifiedDate":"2021-09-03"},{"lineNumber":16,"author":{"gitId":"chunweii"},"content":"    private static final String INVALID_COMMAND \u003d \"Invalid input. Type \\\"help\\\" for more information.\";","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"chunweii"},"content":"    private static final String EMPTY_INPUT_MESSAGE \u003d \"Input is empty. Type \\\"help\\\" for more information.\";","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"chunweii"},"content":"    private static final String TOO_LITTLE_ARGUMENTS_MESSAGE \u003d \"Too little arguments. Type \\\"help\\\" \"","lastModifiedDate":"2021-09-03"},{"lineNumber":19,"author":{"gitId":"chunweii"},"content":"        + \"followed by the command for more information.\";","lastModifiedDate":"2021-09-03"},{"lineNumber":20,"author":{"gitId":"chunweii"},"content":"    private static final String INVALID_NUMBER_MESSAGE \u003d \"Please input a valid task number after the command.\";","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"chunweii"},"content":"    private final String output;","lastModifiedDate":"2021-09-01"},{"lineNumber":22,"author":{"gitId":"chunweii"},"content":"    private boolean isExiting;","lastModifiedDate":"2021-09-15"},{"lineNumber":23,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"chunweii"},"content":"     * Creates a new command parser for the input.","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"chunweii"},"content":"     * @param input    The string input from the user.","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"chunweii"},"content":"     * @param storage  The storage logic that allows the command parser to write the task list data to it.","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"chunweii"},"content":"     * @param taskList The list of tasks.","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"chunweii"},"content":"     * @param ui       The user interface generating output messages.","lastModifiedDate":"2021-09-05"},{"lineNumber":31,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"chunweii"},"content":"    public CommandParser(String input, TaskList taskList, Storage storage, Ui ui) {","lastModifiedDate":"2021-09-03"},{"lineNumber":33,"author":{"gitId":"chunweii"},"content":"        if (input \u003d\u003d null || input.equals(\"\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"chunweii"},"content":"            throw new InvalidCommandException(EMPTY_INPUT_MESSAGE);","lastModifiedDate":"2021-09-08"},{"lineNumber":35,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"chunweii"},"content":"        String[] inputArr \u003d input.split(\" \", 2);","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"chunweii"},"content":"        CommandsEnum commandEnum;","lastModifiedDate":"2021-09-03"},{"lineNumber":38,"author":{"gitId":"chunweii"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"chunweii"},"content":"            commandEnum \u003d CommandsEnum.valueOf(inputArr[0].toUpperCase());","lastModifiedDate":"2021-09-03"},{"lineNumber":40,"author":{"gitId":"chunweii"},"content":"            this.isExiting \u003d false;","lastModifiedDate":"2021-09-15"},{"lineNumber":41,"author":{"gitId":"chunweii"},"content":"            switch (commandEnum) {","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"chunweii"},"content":"            // Single word commands","lastModifiedDate":"2021-09-05"},{"lineNumber":43,"author":{"gitId":"chunweii"},"content":"            case BYE:","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"chunweii"},"content":"                output \u003d ui.getGoodByeMessage();","lastModifiedDate":"2021-09-06"},{"lineNumber":45,"author":{"gitId":"chunweii"},"content":"                isExiting \u003d true;","lastModifiedDate":"2021-09-15"},{"lineNumber":46,"author":{"gitId":"chunweii"},"content":"                return;","lastModifiedDate":"2021-09-03"},{"lineNumber":47,"author":{"gitId":"chunweii"},"content":"            case LIST:","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"chunweii"},"content":"                output \u003d ui.getAllTasksMessage(taskList.getAllTasks(), taskList.size());","lastModifiedDate":"2021-09-06"},{"lineNumber":49,"author":{"gitId":"chunweii"},"content":"                return;","lastModifiedDate":"2021-09-03"},{"lineNumber":50,"author":{"gitId":"chunweii"},"content":"            case UPCOMING:","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"chunweii"},"content":"                output \u003d ui.getUpcomingTasksMessage(taskList.getUpcomingTasks(), taskList.size());","lastModifiedDate":"2021-09-06"},{"lineNumber":52,"author":{"gitId":"chunweii"},"content":"                return;","lastModifiedDate":"2021-09-03"},{"lineNumber":53,"author":{"gitId":"chunweii"},"content":"            case HELP:","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"chunweii"},"content":"                output \u003d ui.displayHelpMessage(","lastModifiedDate":"2021-09-01"},{"lineNumber":55,"author":{"gitId":"chunweii"},"content":"                    inputArr.length \u003d\u003d 1 ? null : CommandsEnum.valueOf(inputArr[1].toUpperCase()));","lastModifiedDate":"2021-09-03"},{"lineNumber":56,"author":{"gitId":"chunweii"},"content":"                return;","lastModifiedDate":"2021-09-03"},{"lineNumber":57,"author":{"gitId":"chunweii"},"content":"            default:","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"chunweii"},"content":"                if (inputArr.length \u003c 2) {","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"chunweii"},"content":"                    throw new InvalidCommandException(TOO_LITTLE_ARGUMENTS_MESSAGE);","lastModifiedDate":"2021-09-08"},{"lineNumber":60,"author":{"gitId":"chunweii"},"content":"                }","lastModifiedDate":"2021-08-23"},{"lineNumber":61,"author":{"gitId":"chunweii"},"content":"                output \u003d parseMultiWord(inputArr[1], commandEnum, taskList, ui);","lastModifiedDate":"2021-09-15"},{"lineNumber":62,"author":{"gitId":"chunweii"},"content":"            }","lastModifiedDate":"2021-09-05"},{"lineNumber":63,"author":{"gitId":"chunweii"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2021-09-05"},{"lineNumber":64,"author":{"gitId":"chunweii"},"content":"            throw new InvalidCommandException(INVALID_COMMAND);","lastModifiedDate":"2021-09-08"},{"lineNumber":65,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-09-05"},{"lineNumber":66,"author":{"gitId":"chunweii"},"content":"        try {","lastModifiedDate":"2021-09-05"},{"lineNumber":67,"author":{"gitId":"chunweii"},"content":"            storage.updateDukeTextFile();","lastModifiedDate":"2021-09-05"},{"lineNumber":68,"author":{"gitId":"chunweii"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-05"},{"lineNumber":69,"author":{"gitId":"chunweii"},"content":"            throw new DukeException(e.getMessage());","lastModifiedDate":"2021-09-05"},{"lineNumber":70,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-09-05"},{"lineNumber":71,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-09-05"},{"lineNumber":72,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":73,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-09-05"},{"lineNumber":74,"author":{"gitId":"chunweii"},"content":"     * Parses the input if it contains more than 1 word.","lastModifiedDate":"2021-09-05"},{"lineNumber":75,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-09-05"},{"lineNumber":76,"author":{"gitId":"chunweii"},"content":"     * @param inputWords   The input string without the command.","lastModifiedDate":"2021-09-05"},{"lineNumber":77,"author":{"gitId":"chunweii"},"content":"     * @param commandsEnum The enum representing the command.","lastModifiedDate":"2021-09-05"},{"lineNumber":78,"author":{"gitId":"chunweii"},"content":"     * @param taskList     The list of tasks to be interacted with.","lastModifiedDate":"2021-09-05"},{"lineNumber":79,"author":{"gitId":"chunweii"},"content":"     * @param ui           The user interface generating the output messages.","lastModifiedDate":"2021-09-05"},{"lineNumber":80,"author":{"gitId":"chunweii"},"content":"     * @return The output string from ui.","lastModifiedDate":"2021-09-05"},{"lineNumber":81,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-09-05"},{"lineNumber":82,"author":{"gitId":"chunweii"},"content":"    private static String parseMultiWord(String inputWords, CommandsEnum commandsEnum, TaskList taskList, Ui ui) {","lastModifiedDate":"2021-09-15"},{"lineNumber":83,"author":{"gitId":"chunweii"},"content":"        switch (commandsEnum) {","lastModifiedDate":"2021-09-05"},{"lineNumber":84,"author":{"gitId":"chunweii"},"content":"        case FIND:","lastModifiedDate":"2021-08-25"},{"lineNumber":85,"author":{"gitId":"chunweii"},"content":"            return ui.getTasksWithPatternMessage(inputWords,","lastModifiedDate":"2021-09-06"},{"lineNumber":86,"author":{"gitId":"chunweii"},"content":"                taskList.getTasksContaining(inputWords), taskList.size());","lastModifiedDate":"2021-09-05"},{"lineNumber":87,"author":{"gitId":"chunweii"},"content":"        case TODO: // fallthrough intended // From here on, there will be updates to the storage.","lastModifiedDate":"2021-09-03"},{"lineNumber":88,"author":{"gitId":"chunweii"},"content":"        case EVENT: // fallthrough intended","lastModifiedDate":"2021-08-25"},{"lineNumber":89,"author":{"gitId":"chunweii"},"content":"        case DEADLINE:","lastModifiedDate":"2021-08-25"},{"lineNumber":90,"author":{"gitId":"chunweii"},"content":"            return ui.addTaskMessage(addTask(commandsEnum.name(), inputWords, taskList), taskList.size());","lastModifiedDate":"2021-09-05"},{"lineNumber":91,"author":{"gitId":"chunweii"},"content":"        default:","lastModifiedDate":"2021-08-25"},{"lineNumber":92,"author":{"gitId":"chunweii"},"content":"            int taskNumber;","lastModifiedDate":"2021-08-23"},{"lineNumber":93,"author":{"gitId":"chunweii"},"content":"            try {","lastModifiedDate":"2021-08-23"},{"lineNumber":94,"author":{"gitId":"chunweii"},"content":"                taskNumber \u003d Integer.parseInt(inputWords);","lastModifiedDate":"2021-09-05"},{"lineNumber":95,"author":{"gitId":"chunweii"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":96,"author":{"gitId":"chunweii"},"content":"                throw new InvalidCommandException(INVALID_NUMBER_MESSAGE);","lastModifiedDate":"2021-09-08"},{"lineNumber":97,"author":{"gitId":"chunweii"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":98,"author":{"gitId":"chunweii"},"content":"            switch (commandsEnum) {","lastModifiedDate":"2021-09-05"},{"lineNumber":99,"author":{"gitId":"chunweii"},"content":"            case DONE:","lastModifiedDate":"2021-08-25"},{"lineNumber":100,"author":{"gitId":"chunweii"},"content":"                if (!taskList.markAsDone(taskNumber)) { // task already marked as done","lastModifiedDate":"2021-08-23"},{"lineNumber":101,"author":{"gitId":"chunweii"},"content":"                    throw new DukeException(\"You have already marked this task (%s) as done\",","lastModifiedDate":"2021-08-23"},{"lineNumber":102,"author":{"gitId":"chunweii"},"content":"                        taskList.getTask(taskNumber));","lastModifiedDate":"2021-08-23"},{"lineNumber":103,"author":{"gitId":"chunweii"},"content":"                }","lastModifiedDate":"2021-08-23"},{"lineNumber":104,"author":{"gitId":"chunweii"},"content":"                return ui.markAsDoneMessage(taskList.getTask(taskNumber));","lastModifiedDate":"2021-09-05"},{"lineNumber":105,"author":{"gitId":"chunweii"},"content":"            case DELETE:","lastModifiedDate":"2021-08-25"},{"lineNumber":106,"author":{"gitId":"chunweii"},"content":"                return ui.removeTaskMessage(taskList.removeTask(taskNumber), taskList.size());","lastModifiedDate":"2021-09-05"},{"lineNumber":107,"author":{"gitId":"chunweii"},"content":"            default:","lastModifiedDate":"2021-08-25"},{"lineNumber":108,"author":{"gitId":"chunweii"},"content":"                throw new InvalidCommandException(INVALID_COMMAND);","lastModifiedDate":"2021-09-08"},{"lineNumber":109,"author":{"gitId":"chunweii"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":110,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":111,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":112,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":113,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":114,"author":{"gitId":"chunweii"},"content":"     * Attempts to add the task to the tasklist based on the user command.","lastModifiedDate":"2021-08-23"},{"lineNumber":115,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":116,"author":{"gitId":"chunweii"},"content":"     * @param action     the action of either todo, event or deadline","lastModifiedDate":"2021-08-23"},{"lineNumber":117,"author":{"gitId":"chunweii"},"content":"     * @param otherInput the rest of the string without the action","lastModifiedDate":"2021-08-23"},{"lineNumber":118,"author":{"gitId":"chunweii"},"content":"     * @param taskList   the list of task to be added to","lastModifiedDate":"2021-08-23"},{"lineNumber":119,"author":{"gitId":"chunweii"},"content":"     * @return the task that is added.","lastModifiedDate":"2021-08-23"},{"lineNumber":120,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":121,"author":{"gitId":"chunweii"},"content":"    private static Task addTask(String action, String otherInput, TaskList taskList) {","lastModifiedDate":"2021-08-23"},{"lineNumber":122,"author":{"gitId":"chunweii"},"content":"        assert !action.isBlank() : \"action cannot be blank\";","lastModifiedDate":"2021-09-05"},{"lineNumber":123,"author":{"gitId":"chunweii"},"content":"        assert !otherInput.isBlank() : \"other input cannot be blank\";","lastModifiedDate":"2021-09-05"},{"lineNumber":124,"author":{"gitId":"chunweii"},"content":"        assert taskList !\u003d null : \"task list cannot be null\";","lastModifiedDate":"2021-09-05"},{"lineNumber":125,"author":{"gitId":"chunweii"},"content":"        TasksEnum tasksEnum \u003d TasksEnum.valueOf(action);","lastModifiedDate":"2021-08-25"},{"lineNumber":126,"author":{"gitId":"chunweii"},"content":"        Task result \u003d tasksEnum.getTask(otherInput);","lastModifiedDate":"2021-08-23"},{"lineNumber":127,"author":{"gitId":"chunweii"},"content":"        taskList.addTask(result);","lastModifiedDate":"2021-09-08"},{"lineNumber":128,"author":{"gitId":"chunweii"},"content":"        return result;","lastModifiedDate":"2021-08-23"},{"lineNumber":129,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":130,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":131,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":132,"author":{"gitId":"chunweii"},"content":"     * Gets the output after parsing the command.","lastModifiedDate":"2021-09-01"},{"lineNumber":133,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":134,"author":{"gitId":"chunweii"},"content":"     * @return the output string","lastModifiedDate":"2021-09-01"},{"lineNumber":135,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":136,"author":{"gitId":"chunweii"},"content":"    public String getOutput() {","lastModifiedDate":"2021-09-01"},{"lineNumber":137,"author":{"gitId":"chunweii"},"content":"        return output;","lastModifiedDate":"2021-09-01"},{"lineNumber":138,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":139,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":140,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":141,"author":{"gitId":"chunweii"},"content":"     * Checks if the command given by the user is to exit.","lastModifiedDate":"2021-08-29"},{"lineNumber":142,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":143,"author":{"gitId":"chunweii"},"content":"     * @return true if and only if the command is to exit","lastModifiedDate":"2021-08-29"},{"lineNumber":144,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":145,"author":{"gitId":"chunweii"},"content":"    public boolean willExit() {","lastModifiedDate":"2021-08-29"},{"lineNumber":146,"author":{"gitId":"chunweii"},"content":"        return isExiting;","lastModifiedDate":"2021-09-15"},{"lineNumber":147,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":148,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":149,"author":{"gitId":"chunweii"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"chunweii":149}},{"path":"src/main/java/duke/logic/CommandsEnum.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chunweii"},"content":"package duke.logic;","lastModifiedDate":"2021-09-03"},{"lineNumber":2,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":3,"author":{"gitId":"chunweii"},"content":"/**","lastModifiedDate":"2021-09-03"},{"lineNumber":4,"author":{"gitId":"chunweii"},"content":" * The enums of the commands available. Also contains the help messages of each command.","lastModifiedDate":"2021-09-03"},{"lineNumber":5,"author":{"gitId":"chunweii"},"content":" */","lastModifiedDate":"2021-09-03"},{"lineNumber":6,"author":{"gitId":"chunweii"},"content":"public enum CommandsEnum {","lastModifiedDate":"2021-09-03"},{"lineNumber":7,"author":{"gitId":"chunweii"},"content":"    BYE() {","lastModifiedDate":"2021-09-03"},{"lineNumber":8,"author":{"gitId":"chunweii"},"content":"        @Override","lastModifiedDate":"2021-09-03"},{"lineNumber":9,"author":{"gitId":"chunweii"},"content":"        public String helpMessage() {","lastModifiedDate":"2021-09-03"},{"lineNumber":10,"author":{"gitId":"chunweii"},"content":"            return \"Usage: bye\\n\"","lastModifiedDate":"2021-09-03"},{"lineNumber":11,"author":{"gitId":"chunweii"},"content":"                + \"This will quit the Duke chatbot.\";","lastModifiedDate":"2021-09-03"},{"lineNumber":12,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-09-03"},{"lineNumber":13,"author":{"gitId":"chunweii"},"content":"    }, DEADLINE() {","lastModifiedDate":"2021-09-03"},{"lineNumber":14,"author":{"gitId":"chunweii"},"content":"        @Override","lastModifiedDate":"2021-09-03"},{"lineNumber":15,"author":{"gitId":"chunweii"},"content":"        public String helpMessage() {","lastModifiedDate":"2021-09-03"},{"lineNumber":16,"author":{"gitId":"chunweii"},"content":"            return \"Usage: deadline \u003ctask description\u003e /by \u003cdate and/or time\u003e\"","lastModifiedDate":"2021-09-03"},{"lineNumber":17,"author":{"gitId":"chunweii"},"content":"                + \"Where date and time is in the format: D/M/YYYY hh:mm\\n\"","lastModifiedDate":"2021-09-03"},{"lineNumber":18,"author":{"gitId":"chunweii"},"content":"                + \"For example: deadline haircut /by 19:00\\n\"","lastModifiedDate":"2021-09-03"},{"lineNumber":19,"author":{"gitId":"chunweii"},"content":"                + \"This will add a deadline task \\\"haircut\\\" to the list,\"","lastModifiedDate":"2021-09-03"},{"lineNumber":20,"author":{"gitId":"chunweii"},"content":"                + \" with today\u0027s date (or tomorrow if it is past 19:00) and the time 19:00.\\n\"","lastModifiedDate":"2021-09-03"},{"lineNumber":21,"author":{"gitId":"chunweii"},"content":"                + \"             deadline give $1 million to charity /by 31/12/2090 12:00\\n\"","lastModifiedDate":"2021-09-03"},{"lineNumber":22,"author":{"gitId":"chunweii"},"content":"                + \"This will add a deadline task \\\"give $1 million to charity\\\" to the list,\"","lastModifiedDate":"2021-09-03"},{"lineNumber":23,"author":{"gitId":"chunweii"},"content":"                + \" with the date on 31 December 2090 on 12pm.\";","lastModifiedDate":"2021-09-03"},{"lineNumber":24,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-09-03"},{"lineNumber":25,"author":{"gitId":"chunweii"},"content":"    }, DELETE() {","lastModifiedDate":"2021-09-03"},{"lineNumber":26,"author":{"gitId":"chunweii"},"content":"        @Override","lastModifiedDate":"2021-09-03"},{"lineNumber":27,"author":{"gitId":"chunweii"},"content":"        public String helpMessage() {","lastModifiedDate":"2021-09-03"},{"lineNumber":28,"author":{"gitId":"chunweii"},"content":"            return \"Usage: delete \u003ctask number\u003e\\n\"","lastModifiedDate":"2021-09-03"},{"lineNumber":29,"author":{"gitId":"chunweii"},"content":"                + \"For example: delete 1\\n\"","lastModifiedDate":"2021-09-03"},{"lineNumber":30,"author":{"gitId":"chunweii"},"content":"                + \"This will delete the first task in the list.\";","lastModifiedDate":"2021-09-03"},{"lineNumber":31,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-09-03"},{"lineNumber":32,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":33,"author":{"gitId":"chunweii"},"content":"    }, DONE() {","lastModifiedDate":"2021-09-03"},{"lineNumber":34,"author":{"gitId":"chunweii"},"content":"        @Override","lastModifiedDate":"2021-09-03"},{"lineNumber":35,"author":{"gitId":"chunweii"},"content":"        public String helpMessage() {","lastModifiedDate":"2021-09-03"},{"lineNumber":36,"author":{"gitId":"chunweii"},"content":"            return \"Usage: done \u003ctask number\u003e\\n\"","lastModifiedDate":"2021-09-03"},{"lineNumber":37,"author":{"gitId":"chunweii"},"content":"                + \"For example: done 1\\n\"","lastModifiedDate":"2021-09-03"},{"lineNumber":38,"author":{"gitId":"chunweii"},"content":"                + \"This will mark the first task as done.\";","lastModifiedDate":"2021-09-03"},{"lineNumber":39,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-09-03"},{"lineNumber":40,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":41,"author":{"gitId":"chunweii"},"content":"    }, EVENT() {","lastModifiedDate":"2021-09-03"},{"lineNumber":42,"author":{"gitId":"chunweii"},"content":"        @Override","lastModifiedDate":"2021-09-03"},{"lineNumber":43,"author":{"gitId":"chunweii"},"content":"        public String helpMessage() {","lastModifiedDate":"2021-09-03"},{"lineNumber":44,"author":{"gitId":"chunweii"},"content":"            return \"Usage: event \u003ctask description\u003e /from \u003cdate and/or time\u003e [/to \u003cdate and/or time\u003e]\\n\"","lastModifiedDate":"2021-09-05"},{"lineNumber":45,"author":{"gitId":"chunweii"},"content":"                + \"Where date and time is in the format: D/M/YYYY hh:mm\\n\"","lastModifiedDate":"2021-09-03"},{"lineNumber":46,"author":{"gitId":"chunweii"},"content":"                + \"For example: event Shopee 21.7 sale /from 21/7/2021 00:00 /to 23:59\\n\"","lastModifiedDate":"2021-09-05"},{"lineNumber":47,"author":{"gitId":"chunweii"},"content":"                + \"This will add an event task \\\"Shopee 21.7 sale\\\" to the list,\"","lastModifiedDate":"2021-09-03"},{"lineNumber":48,"author":{"gitId":"chunweii"},"content":"                + \" with the duration on 21 July 2021 00:00 to 21 July 2021 23:59 by default.\\n\"","lastModifiedDate":"2021-09-05"},{"lineNumber":49,"author":{"gitId":"chunweii"},"content":"                + \"             event first date /from 31/12/2090 12:00\\n\"","lastModifiedDate":"2021-09-05"},{"lineNumber":50,"author":{"gitId":"chunweii"},"content":"                + \"This will add an event task \\\"first date\\\" to the list,\"","lastModifiedDate":"2021-09-03"},{"lineNumber":51,"author":{"gitId":"chunweii"},"content":"                + \" with the date on 31 December 2090 on 12pm to 31 December 2090 12pm.\";","lastModifiedDate":"2021-09-05"},{"lineNumber":52,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-09-03"},{"lineNumber":53,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":54,"author":{"gitId":"chunweii"},"content":"    }, FIND() {","lastModifiedDate":"2021-09-06"},{"lineNumber":55,"author":{"gitId":"chunweii"},"content":"        @Override","lastModifiedDate":"2021-09-06"},{"lineNumber":56,"author":{"gitId":"chunweii"},"content":"        public String helpMessage() {","lastModifiedDate":"2021-09-06"},{"lineNumber":57,"author":{"gitId":"chunweii"},"content":"            return \"Usage: find \u003citem\u003e\\n\"","lastModifiedDate":"2021-09-06"},{"lineNumber":58,"author":{"gitId":"chunweii"},"content":"                + \"For example: find book\\n\"","lastModifiedDate":"2021-09-06"},{"lineNumber":59,"author":{"gitId":"chunweii"},"content":"                + \"This will list every task that contains \\\"book\\\".\";","lastModifiedDate":"2021-09-06"},{"lineNumber":60,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-09-06"},{"lineNumber":61,"author":{"gitId":"chunweii"},"content":"    }, HELP() {","lastModifiedDate":"2021-09-03"},{"lineNumber":62,"author":{"gitId":"chunweii"},"content":"        @Override","lastModifiedDate":"2021-09-03"},{"lineNumber":63,"author":{"gitId":"chunweii"},"content":"        public String helpMessage() {","lastModifiedDate":"2021-09-03"},{"lineNumber":64,"author":{"gitId":"chunweii"},"content":"            return \"Hello! Duke is a chatbot for all your task management needs.\\n\"","lastModifiedDate":"2021-09-06"},{"lineNumber":65,"author":{"gitId":"chunweii"},"content":"                + \"With Duke, you can save todo items, events and deadlines all in one place!\\n\"","lastModifiedDate":"2021-09-06"},{"lineNumber":66,"author":{"gitId":"chunweii"},"content":"                + \"You can even share your data files with other users of Duke so that they have the same list.\\n\"","lastModifiedDate":"2021-09-06"},{"lineNumber":67,"author":{"gitId":"chunweii"},"content":"                + \"To get started, type \\\"help [command]\\\".\\n\"","lastModifiedDate":"2021-09-06"},{"lineNumber":68,"author":{"gitId":"chunweii"},"content":"                + \"Some available commands are:\\n\";","lastModifiedDate":"2021-09-06"},{"lineNumber":69,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-09-03"},{"lineNumber":70,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":71,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":72,"author":{"gitId":"chunweii"},"content":"    }, LIST() {","lastModifiedDate":"2021-09-03"},{"lineNumber":73,"author":{"gitId":"chunweii"},"content":"        @Override","lastModifiedDate":"2021-09-03"},{"lineNumber":74,"author":{"gitId":"chunweii"},"content":"        public String helpMessage() {","lastModifiedDate":"2021-09-03"},{"lineNumber":75,"author":{"gitId":"chunweii"},"content":"            return \"Usage: list\\n\"","lastModifiedDate":"2021-09-03"},{"lineNumber":76,"author":{"gitId":"chunweii"},"content":"                + \"This will display the list of tasks.\";","lastModifiedDate":"2021-09-03"},{"lineNumber":77,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-09-03"},{"lineNumber":78,"author":{"gitId":"chunweii"},"content":"    }, TODO() {","lastModifiedDate":"2021-09-03"},{"lineNumber":79,"author":{"gitId":"chunweii"},"content":"        @Override","lastModifiedDate":"2021-09-03"},{"lineNumber":80,"author":{"gitId":"chunweii"},"content":"        public String helpMessage() {","lastModifiedDate":"2021-09-03"},{"lineNumber":81,"author":{"gitId":"chunweii"},"content":"            return \"Usage: todo \u003ctask description\u003e\\n\"","lastModifiedDate":"2021-09-03"},{"lineNumber":82,"author":{"gitId":"chunweii"},"content":"                + \"For example: todo Quit smoking\\n\"","lastModifiedDate":"2021-09-03"},{"lineNumber":83,"author":{"gitId":"chunweii"},"content":"                + \"This will add a todo task \\\"Quit smoking\\\" to the list.\";","lastModifiedDate":"2021-09-03"},{"lineNumber":84,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-09-03"},{"lineNumber":85,"author":{"gitId":"chunweii"},"content":"    }, UPCOMING() {","lastModifiedDate":"2021-09-03"},{"lineNumber":86,"author":{"gitId":"chunweii"},"content":"        @Override","lastModifiedDate":"2021-09-03"},{"lineNumber":87,"author":{"gitId":"chunweii"},"content":"        public String helpMessage() {","lastModifiedDate":"2021-09-03"},{"lineNumber":88,"author":{"gitId":"chunweii"},"content":"            return \"Usage: upcoming\\n\"","lastModifiedDate":"2021-09-03"},{"lineNumber":89,"author":{"gitId":"chunweii"},"content":"                + \"This will display all the upcoming tasks, in chronological order.\";","lastModifiedDate":"2021-09-03"},{"lineNumber":90,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-09-03"},{"lineNumber":91,"author":{"gitId":"chunweii"},"content":"    };","lastModifiedDate":"2021-09-03"},{"lineNumber":92,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":93,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-09-03"},{"lineNumber":94,"author":{"gitId":"chunweii"},"content":"     * Gets the help message of the specific command.","lastModifiedDate":"2021-09-03"},{"lineNumber":95,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-09-03"},{"lineNumber":96,"author":{"gitId":"chunweii"},"content":"     * @return the associated string.","lastModifiedDate":"2021-09-03"},{"lineNumber":97,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-09-03"},{"lineNumber":98,"author":{"gitId":"chunweii"},"content":"    public abstract String helpMessage();","lastModifiedDate":"2021-09-03"},{"lineNumber":99,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":100,"author":{"gitId":"chunweii"},"content":"}","lastModifiedDate":"2021-09-03"}],"authorContributionMap":{"chunweii":100}},{"path":"src/main/java/duke/logic/DateTimeParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chunweii"},"content":"package duke.logic;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"chunweii"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"chunweii"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-03"},{"lineNumber":5,"author":{"gitId":"chunweii"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"chunweii"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"chunweii"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"chunweii"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"chunweii"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-09-08"},{"lineNumber":11,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"chunweii"},"content":"/**","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"chunweii"},"content":" * Enables simpler parsing of date and time for events and deadlines.","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"chunweii"},"content":" */","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"chunweii"},"content":"public class DateTimeParser {","lastModifiedDate":"2021-09-03"},{"lineNumber":17,"author":{"gitId":"chunweii"},"content":"    private final LocalTime time;","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"chunweii"},"content":"    private final LocalDate date;","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"chunweii"},"content":"     * Creates a new instance of a Date.","lastModifiedDate":"2021-09-05"},{"lineNumber":22,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"chunweii"},"content":"     * @param dateTime The string to be parsed","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"chunweii"},"content":"    public DateTimeParser(String dateTime) {","lastModifiedDate":"2021-09-03"},{"lineNumber":26,"author":{"gitId":"chunweii"},"content":"        this(dateTime, LocalDate.now(), LocalTime.now());","lastModifiedDate":"2021-09-05"},{"lineNumber":27,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-09-05"},{"lineNumber":28,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":29,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-09-05"},{"lineNumber":30,"author":{"gitId":"chunweii"},"content":"     * Creates a new instance of a Date. This is used when there is a different start date and time.","lastModifiedDate":"2021-09-05"},{"lineNumber":31,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-09-05"},{"lineNumber":32,"author":{"gitId":"chunweii"},"content":"     * @param dateTime          the string to be parsed","lastModifiedDate":"2021-09-05"},{"lineNumber":33,"author":{"gitId":"chunweii"},"content":"     * @param relativeStartDate the relative starting date of the task (by default now)","lastModifiedDate":"2021-09-05"},{"lineNumber":34,"author":{"gitId":"chunweii"},"content":"     * @param relativeStartTime the relative starting time of the task (by default now)","lastModifiedDate":"2021-09-05"},{"lineNumber":35,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-09-05"},{"lineNumber":36,"author":{"gitId":"chunweii"},"content":"    public DateTimeParser(String dateTime, LocalDate relativeStartDate, LocalTime relativeStartTime) {","lastModifiedDate":"2021-09-05"},{"lineNumber":37,"author":{"gitId":"chunweii"},"content":"        String[] dateAndTime \u003d Arrays.stream(dateTime.split(\"[ |,]\", 2))","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"chunweii"},"content":"            .map(String::trim).toArray(String[]::new);","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"chunweii"},"content":"        try {","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"chunweii"},"content":"            if (dateAndTime.length \u003d\u003d 1) {","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"chunweii"},"content":"                if (dateAndTime[0].contains(\"/\")) { // User entered date","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"chunweii"},"content":"                    time \u003d LocalTime.parse(\"23:59\");","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"chunweii"},"content":"                } else { // User likely entered time","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"chunweii"},"content":"                    time \u003d parseTime(dateAndTime[0]);","lastModifiedDate":"2021-09-05"},{"lineNumber":45,"author":{"gitId":"chunweii"},"content":"                    date \u003d time.isAfter(relativeStartTime) ? relativeStartDate : relativeStartDate.plusDays(1);","lastModifiedDate":"2021-09-05"},{"lineNumber":46,"author":{"gitId":"chunweii"},"content":"                    return;","lastModifiedDate":"2021-09-05"},{"lineNumber":47,"author":{"gitId":"chunweii"},"content":"                }","lastModifiedDate":"2021-08-22"},{"lineNumber":48,"author":{"gitId":"chunweii"},"content":"            } else {","lastModifiedDate":"2021-08-22"},{"lineNumber":49,"author":{"gitId":"chunweii"},"content":"                time \u003d parseTime(dateAndTime[1]);","lastModifiedDate":"2021-09-05"},{"lineNumber":50,"author":{"gitId":"chunweii"},"content":"            }","lastModifiedDate":"2021-08-22"},{"lineNumber":51,"author":{"gitId":"chunweii"},"content":"            date \u003d parseDate(dateAndTime[0]);","lastModifiedDate":"2021-09-05"},{"lineNumber":52,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":53,"author":{"gitId":"chunweii"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-22"},{"lineNumber":54,"author":{"gitId":"chunweii"},"content":"            throw new DukeException(\"Invalid date and time format. Please enter them in the format: d/M/YYYY H:m.\\n\"","lastModifiedDate":"2021-09-03"},{"lineNumber":55,"author":{"gitId":"chunweii"},"content":"                + \"For example: 23/8/2021 14:00\");","lastModifiedDate":"2021-09-03"},{"lineNumber":56,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":57,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":58,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":59,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-09-03"},{"lineNumber":60,"author":{"gitId":"chunweii"},"content":"     * Returns the LocalDateTime object associated with the date and time represented in the data string.","lastModifiedDate":"2021-09-03"},{"lineNumber":61,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-09-03"},{"lineNumber":62,"author":{"gitId":"chunweii"},"content":"     * @param data the string containing the date and time of the task. Format is \"yyyy-MM-dd HH:mm\".","lastModifiedDate":"2021-09-03"},{"lineNumber":63,"author":{"gitId":"chunweii"},"content":"     * @return the LocalDateTime object","lastModifiedDate":"2021-09-03"},{"lineNumber":64,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-09-03"},{"lineNumber":65,"author":{"gitId":"chunweii"},"content":"    public static LocalDateTime getDateTimeFromDataString(String data) {","lastModifiedDate":"2021-09-03"},{"lineNumber":66,"author":{"gitId":"chunweii"},"content":"        return LocalDateTime.parse(data, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));","lastModifiedDate":"2021-09-03"},{"lineNumber":67,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-09-03"},{"lineNumber":68,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":69,"author":{"gitId":"chunweii"},"content":"    private LocalDate parseDate(String date) {","lastModifiedDate":"2021-09-15"},{"lineNumber":70,"author":{"gitId":"chunweii"},"content":"        return LocalDate.parse(date, DateTimeFormatter.ofPattern(\"d/M/yyyy\"));","lastModifiedDate":"2021-09-15"},{"lineNumber":71,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":72,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":73,"author":{"gitId":"chunweii"},"content":"    private LocalTime parseTime(String time) {","lastModifiedDate":"2021-09-15"},{"lineNumber":74,"author":{"gitId":"chunweii"},"content":"        return LocalTime.parse(time, DateTimeFormatter.ofPattern(\"H:m\"));","lastModifiedDate":"2021-09-15"},{"lineNumber":75,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":76,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":77,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":78,"author":{"gitId":"chunweii"},"content":"     * Gets the date of this datetime.","lastModifiedDate":"2021-08-25"},{"lineNumber":79,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":80,"author":{"gitId":"chunweii"},"content":"     * @return the local date object.","lastModifiedDate":"2021-08-25"},{"lineNumber":81,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":82,"author":{"gitId":"chunweii"},"content":"    public LocalDate getDate() {","lastModifiedDate":"2021-08-22"},{"lineNumber":83,"author":{"gitId":"chunweii"},"content":"        return date;","lastModifiedDate":"2021-08-22"},{"lineNumber":84,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":85,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":86,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":87,"author":{"gitId":"chunweii"},"content":"     * Gets the time of this datetime.","lastModifiedDate":"2021-08-25"},{"lineNumber":88,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":89,"author":{"gitId":"chunweii"},"content":"     * @return the local time object.","lastModifiedDate":"2021-08-25"},{"lineNumber":90,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":91,"author":{"gitId":"chunweii"},"content":"    public LocalTime getTime() {","lastModifiedDate":"2021-08-22"},{"lineNumber":92,"author":{"gitId":"chunweii"},"content":"        return time;","lastModifiedDate":"2021-08-22"},{"lineNumber":93,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":94,"author":{"gitId":"chunweii"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"chunweii":94}},{"path":"src/main/java/duke/logic/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chunweii"},"content":"package duke.logic;","lastModifiedDate":"2021-09-03"},{"lineNumber":2,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":3,"author":{"gitId":"chunweii"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2021-09-03"},{"lineNumber":4,"author":{"gitId":"chunweii"},"content":"import java.io.BufferedWriter;","lastModifiedDate":"2021-09-03"},{"lineNumber":5,"author":{"gitId":"chunweii"},"content":"import java.io.File;","lastModifiedDate":"2021-09-03"},{"lineNumber":6,"author":{"gitId":"chunweii"},"content":"import java.io.FileReader;","lastModifiedDate":"2021-09-03"},{"lineNumber":7,"author":{"gitId":"chunweii"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-09-03"},{"lineNumber":8,"author":{"gitId":"chunweii"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-03"},{"lineNumber":9,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":10,"author":{"gitId":"chunweii"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-09-08"},{"lineNumber":11,"author":{"gitId":"chunweii"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-09-03"},{"lineNumber":12,"author":{"gitId":"chunweii"},"content":"import duke.task.Event;","lastModifiedDate":"2021-09-03"},{"lineNumber":13,"author":{"gitId":"chunweii"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-03"},{"lineNumber":14,"author":{"gitId":"chunweii"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-09-03"},{"lineNumber":15,"author":{"gitId":"chunweii"},"content":"import duke.task.Todo;","lastModifiedDate":"2021-09-03"},{"lineNumber":16,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":17,"author":{"gitId":"chunweii"},"content":"/**","lastModifiedDate":"2021-09-03"},{"lineNumber":18,"author":{"gitId":"chunweii"},"content":" * Deals with the logic of loading data from a file and writing to the","lastModifiedDate":"2021-09-03"},{"lineNumber":19,"author":{"gitId":"chunweii"},"content":" * file each time there is an update to the task list.","lastModifiedDate":"2021-09-03"},{"lineNumber":20,"author":{"gitId":"chunweii"},"content":" */","lastModifiedDate":"2021-09-03"},{"lineNumber":21,"author":{"gitId":"chunweii"},"content":"public class Storage {","lastModifiedDate":"2021-09-03"},{"lineNumber":22,"author":{"gitId":"chunweii"},"content":"    private final TaskList taskList;","lastModifiedDate":"2021-09-03"},{"lineNumber":23,"author":{"gitId":"chunweii"},"content":"    private final File textFile;","lastModifiedDate":"2021-09-03"},{"lineNumber":24,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":25,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-09-03"},{"lineNumber":26,"author":{"gitId":"chunweii"},"content":"     * Creates a new instance of a storage object that deals with saving the task list in Duke.","lastModifiedDate":"2021-09-03"},{"lineNumber":27,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-09-03"},{"lineNumber":28,"author":{"gitId":"chunweii"},"content":"     * @param filePath The string representing the path of the file that the data will be saved into.","lastModifiedDate":"2021-09-03"},{"lineNumber":29,"author":{"gitId":"chunweii"},"content":"     * @param taskList The list of task that will be saved into the file.","lastModifiedDate":"2021-09-03"},{"lineNumber":30,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-09-03"},{"lineNumber":31,"author":{"gitId":"chunweii"},"content":"    public Storage(String filePath, TaskList taskList) throws IOException {","lastModifiedDate":"2021-09-03"},{"lineNumber":32,"author":{"gitId":"chunweii"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2021-09-03"},{"lineNumber":33,"author":{"gitId":"chunweii"},"content":"        textFile \u003d new File(filePath);","lastModifiedDate":"2021-09-03"},{"lineNumber":34,"author":{"gitId":"chunweii"},"content":"        if (!textFile.exists()) {","lastModifiedDate":"2021-09-03"},{"lineNumber":35,"author":{"gitId":"chunweii"},"content":"            textFile.createNewFile();","lastModifiedDate":"2021-09-03"},{"lineNumber":36,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-09-03"},{"lineNumber":37,"author":{"gitId":"chunweii"},"content":"        if (!textFile.canWrite() || !textFile.canRead()) {","lastModifiedDate":"2021-09-03"},{"lineNumber":38,"author":{"gitId":"chunweii"},"content":"            throw new IOException(\"This file cannot be written or read by duke!\");","lastModifiedDate":"2021-09-03"},{"lineNumber":39,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-09-03"},{"lineNumber":40,"author":{"gitId":"chunweii"},"content":"        // Attempts to load file (even an empty one!)","lastModifiedDate":"2021-09-03"},{"lineNumber":41,"author":{"gitId":"chunweii"},"content":"        loadFileIntoTaskList(taskList, textFile);","lastModifiedDate":"2021-09-03"},{"lineNumber":42,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-09-03"},{"lineNumber":43,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":44,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-09-03"},{"lineNumber":45,"author":{"gitId":"chunweii"},"content":"     * Loads the data file into the task list of duke.","lastModifiedDate":"2021-09-03"},{"lineNumber":46,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-09-03"},{"lineNumber":47,"author":{"gitId":"chunweii"},"content":"     * @param list the task list in duke","lastModifiedDate":"2021-09-03"},{"lineNumber":48,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-09-03"},{"lineNumber":49,"author":{"gitId":"chunweii"},"content":"    private static void loadFileIntoTaskList(TaskList list, File textFile) {","lastModifiedDate":"2021-09-03"},{"lineNumber":50,"author":{"gitId":"chunweii"},"content":"        try {","lastModifiedDate":"2021-09-03"},{"lineNumber":51,"author":{"gitId":"chunweii"},"content":"            BufferedReader reader \u003d new BufferedReader(new FileReader(textFile));","lastModifiedDate":"2021-09-03"},{"lineNumber":52,"author":{"gitId":"chunweii"},"content":"            for (String lineOfData \u003d reader.readLine(); lineOfData !\u003d null; lineOfData \u003d reader.readLine()) {","lastModifiedDate":"2021-09-03"},{"lineNumber":53,"author":{"gitId":"chunweii"},"content":"                list.addTask(parseStringIntoTask(lineOfData));","lastModifiedDate":"2021-09-03"},{"lineNumber":54,"author":{"gitId":"chunweii"},"content":"            }","lastModifiedDate":"2021-09-03"},{"lineNumber":55,"author":{"gitId":"chunweii"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-03"},{"lineNumber":56,"author":{"gitId":"chunweii"},"content":"            System.out.printf(\"However an error occurred while writing to %s:\\n\", textFile.getAbsolutePath());","lastModifiedDate":"2021-09-03"},{"lineNumber":57,"author":{"gitId":"chunweii"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-09-03"},{"lineNumber":58,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-09-03"},{"lineNumber":59,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-09-03"},{"lineNumber":60,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":61,"author":{"gitId":"chunweii"},"content":"    private static Task parseStringIntoTask(String line) {","lastModifiedDate":"2021-09-03"},{"lineNumber":62,"author":{"gitId":"chunweii"},"content":"        String corruptFileMsg \u003d \"Storage file is corrupted. Please fix it or delete the file.\";","lastModifiedDate":"2021-09-03"},{"lineNumber":63,"author":{"gitId":"chunweii"},"content":"        char taskType \u003d line.charAt(0); //\u0027T\u0027 or \u0027D\u0027 or \u0027E\u0027","lastModifiedDate":"2021-09-03"},{"lineNumber":64,"author":{"gitId":"chunweii"},"content":"        boolean isDone \u003d Integer.parseInt(line.substring(4, 5)) \u003d\u003d 1; // 1 if isDone, 0 otherwise","lastModifiedDate":"2021-09-03"},{"lineNumber":65,"author":{"gitId":"chunweii"},"content":"        String[] descriptionAndDatetime \u003d line.substring(8).split(\" \\\\| \", 3);","lastModifiedDate":"2021-09-05"},{"lineNumber":66,"author":{"gitId":"chunweii"},"content":"        Task task;","lastModifiedDate":"2021-09-03"},{"lineNumber":67,"author":{"gitId":"chunweii"},"content":"        if (taskType \u003d\u003d \u0027T\u0027) {","lastModifiedDate":"2021-09-03"},{"lineNumber":68,"author":{"gitId":"chunweii"},"content":"            task \u003d new Todo(descriptionAndDatetime[0]);","lastModifiedDate":"2021-09-03"},{"lineNumber":69,"author":{"gitId":"chunweii"},"content":"        } else if (taskType \u003d\u003d \u0027D\u0027) {","lastModifiedDate":"2021-09-03"},{"lineNumber":70,"author":{"gitId":"chunweii"},"content":"            if (descriptionAndDatetime.length !\u003d 2) {","lastModifiedDate":"2021-09-05"},{"lineNumber":71,"author":{"gitId":"chunweii"},"content":"                throw new DukeException(corruptFileMsg);","lastModifiedDate":"2021-09-05"},{"lineNumber":72,"author":{"gitId":"chunweii"},"content":"            }","lastModifiedDate":"2021-09-05"},{"lineNumber":73,"author":{"gitId":"chunweii"},"content":"            task \u003d new Deadline(descriptionAndDatetime[0],","lastModifiedDate":"2021-09-03"},{"lineNumber":74,"author":{"gitId":"chunweii"},"content":"                DateTimeParser.getDateTimeFromDataString(descriptionAndDatetime[1]));","lastModifiedDate":"2021-09-03"},{"lineNumber":75,"author":{"gitId":"chunweii"},"content":"        } else if (taskType \u003d\u003d \u0027E\u0027) {","lastModifiedDate":"2021-09-03"},{"lineNumber":76,"author":{"gitId":"chunweii"},"content":"            if (descriptionAndDatetime.length !\u003d 3) { // includes start and end","lastModifiedDate":"2021-09-05"},{"lineNumber":77,"author":{"gitId":"chunweii"},"content":"                throw new DukeException(corruptFileMsg);","lastModifiedDate":"2021-09-05"},{"lineNumber":78,"author":{"gitId":"chunweii"},"content":"            }","lastModifiedDate":"2021-09-05"},{"lineNumber":79,"author":{"gitId":"chunweii"},"content":"            task \u003d new Event(descriptionAndDatetime[0],","lastModifiedDate":"2021-09-03"},{"lineNumber":80,"author":{"gitId":"chunweii"},"content":"                DateTimeParser.getDateTimeFromDataString(descriptionAndDatetime[1]),","lastModifiedDate":"2021-09-05"},{"lineNumber":81,"author":{"gitId":"chunweii"},"content":"                DateTimeParser.getDateTimeFromDataString(descriptionAndDatetime[2]));","lastModifiedDate":"2021-09-05"},{"lineNumber":82,"author":{"gitId":"chunweii"},"content":"        } else {","lastModifiedDate":"2021-09-03"},{"lineNumber":83,"author":{"gitId":"chunweii"},"content":"            throw new DukeException(corruptFileMsg);","lastModifiedDate":"2021-09-03"},{"lineNumber":84,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-09-03"},{"lineNumber":85,"author":{"gitId":"chunweii"},"content":"        if (isDone) {","lastModifiedDate":"2021-09-03"},{"lineNumber":86,"author":{"gitId":"chunweii"},"content":"            task.markAsDone();","lastModifiedDate":"2021-09-03"},{"lineNumber":87,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-09-03"},{"lineNumber":88,"author":{"gitId":"chunweii"},"content":"        return task;","lastModifiedDate":"2021-09-03"},{"lineNumber":89,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-09-03"},{"lineNumber":90,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":91,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-09-03"},{"lineNumber":92,"author":{"gitId":"chunweii"},"content":"     * Updates the text file with the latest task list.","lastModifiedDate":"2021-09-03"},{"lineNumber":93,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-09-03"},{"lineNumber":94,"author":{"gitId":"chunweii"},"content":"     * \u003cp\u003eCurrently the text file is overwritten each time it updates.","lastModifiedDate":"2021-09-03"},{"lineNumber":95,"author":{"gitId":"chunweii"},"content":"     * A more efficient method should be implemented.\u003c/p\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":96,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-09-03"},{"lineNumber":97,"author":{"gitId":"chunweii"},"content":"     * @throws IOException when the duke text file cannot be updated.","lastModifiedDate":"2021-09-03"},{"lineNumber":98,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-09-03"},{"lineNumber":99,"author":{"gitId":"chunweii"},"content":"    public void updateDukeTextFile() throws IOException {","lastModifiedDate":"2021-09-03"},{"lineNumber":100,"author":{"gitId":"chunweii"},"content":"        BufferedWriter writer \u003d new BufferedWriter(new FileWriter(textFile));","lastModifiedDate":"2021-09-03"},{"lineNumber":101,"author":{"gitId":"chunweii"},"content":"        writer.write(\"\"); // Overwrites everything","lastModifiedDate":"2021-09-03"},{"lineNumber":102,"author":{"gitId":"chunweii"},"content":"        for (Task task : taskList.getTasks()) {","lastModifiedDate":"2021-09-03"},{"lineNumber":103,"author":{"gitId":"chunweii"},"content":"            writer.append(task.getDataLine()).append(\"\\n\");","lastModifiedDate":"2021-09-03"},{"lineNumber":104,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-09-03"},{"lineNumber":105,"author":{"gitId":"chunweii"},"content":"        writer.close();","lastModifiedDate":"2021-09-03"},{"lineNumber":106,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-09-03"},{"lineNumber":107,"author":{"gitId":"chunweii"},"content":"}","lastModifiedDate":"2021-09-03"}],"authorContributionMap":{"chunweii":107}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chunweii"},"content":"package duke.task;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"chunweii"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"chunweii"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"chunweii"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"chunweii"},"content":"import duke.logic.DateTimeParser;","lastModifiedDate":"2021-09-03"},{"lineNumber":8,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"chunweii"},"content":"/**","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"chunweii"},"content":" * A deadline is a task that has a specific deadline.","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"chunweii"},"content":" */","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"chunweii"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"chunweii"},"content":"    private final LocalDate dateOfDeadline;","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"chunweii"},"content":"    private final LocalTime timeOfDeadline;","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"chunweii"},"content":"     * Creates a new deadline object that has the given description and due on the given date.","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"chunweii"},"content":"     * @param description          The description of the deadline","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"chunweii"},"content":"     * @param stringDateOfDeadline The due date/time string of the task","lastModifiedDate":"2021-09-03"},{"lineNumber":21,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"chunweii"},"content":"    public Deadline(String description, String stringDateOfDeadline) {","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"chunweii"},"content":"        super(description, \"D\");","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"chunweii"},"content":"        DateTimeParser logicDateTimeParser \u003d new DateTimeParser(stringDateOfDeadline);","lastModifiedDate":"2021-09-03"},{"lineNumber":25,"author":{"gitId":"chunweii"},"content":"        timeOfDeadline \u003d logicDateTimeParser.getTime();","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"chunweii"},"content":"        dateOfDeadline \u003d logicDateTimeParser.getDate();","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-09-03"},{"lineNumber":30,"author":{"gitId":"chunweii"},"content":"     * Creates a new deadline object that has the given description and due on the given date.","lastModifiedDate":"2021-09-03"},{"lineNumber":31,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-09-03"},{"lineNumber":32,"author":{"gitId":"chunweii"},"content":"     * @param description The description of the deadline","lastModifiedDate":"2021-09-03"},{"lineNumber":33,"author":{"gitId":"chunweii"},"content":"     * @param dateTime    The due date/time of the task","lastModifiedDate":"2021-09-03"},{"lineNumber":34,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-09-03"},{"lineNumber":35,"author":{"gitId":"chunweii"},"content":"    public Deadline(String description, LocalDateTime dateTime) {","lastModifiedDate":"2021-09-03"},{"lineNumber":36,"author":{"gitId":"chunweii"},"content":"        super(description, \"D\");","lastModifiedDate":"2021-09-03"},{"lineNumber":37,"author":{"gitId":"chunweii"},"content":"        dateOfDeadline \u003d dateTime.toLocalDate();","lastModifiedDate":"2021-09-03"},{"lineNumber":38,"author":{"gitId":"chunweii"},"content":"        timeOfDeadline \u003d dateTime.toLocalTime();","lastModifiedDate":"2021-09-03"},{"lineNumber":39,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-09-03"},{"lineNumber":40,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":41,"author":{"gitId":"chunweii"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"chunweii"},"content":"    public LocalDateTime getDateTime() {","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"chunweii"},"content":"        return LocalDateTime.of(dateOfDeadline, timeOfDeadline);","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"chunweii"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":47,"author":{"gitId":"chunweii"},"content":"    public String toString() {","lastModifiedDate":"2021-08-22"},{"lineNumber":48,"author":{"gitId":"chunweii"},"content":"        return super.toString() + String.format(\" (by: %s, %s)\", dateOfDeadline, timeOfDeadline); // No preposition","lastModifiedDate":"2021-08-22"},{"lineNumber":49,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":50,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":51,"author":{"gitId":"chunweii"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":52,"author":{"gitId":"chunweii"},"content":"    public String getDataLine() {","lastModifiedDate":"2021-08-22"},{"lineNumber":53,"author":{"gitId":"chunweii"},"content":"        return super.getDataLine() + \" | \" + dateOfDeadline + \" \" + timeOfDeadline;","lastModifiedDate":"2021-08-22"},{"lineNumber":54,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":55,"author":{"gitId":"chunweii"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"chunweii":55}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chunweii"},"content":"package duke.task;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"chunweii"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"chunweii"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"chunweii"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"chunweii"},"content":"import duke.logic.DateTimeParser;","lastModifiedDate":"2021-09-03"},{"lineNumber":8,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"chunweii"},"content":"/**","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"chunweii"},"content":" * An event is a task that has a date attached.","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"chunweii"},"content":" */","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"chunweii"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"chunweii"},"content":"    private final LocalDate startDateOfEvent;","lastModifiedDate":"2021-09-05"},{"lineNumber":14,"author":{"gitId":"chunweii"},"content":"    private final LocalTime startTimeOfEvent;","lastModifiedDate":"2021-09-05"},{"lineNumber":15,"author":{"gitId":"chunweii"},"content":"    private final LocalDate endDateOfEvent;","lastModifiedDate":"2021-09-05"},{"lineNumber":16,"author":{"gitId":"chunweii"},"content":"    private final LocalTime endTimeOfEvent;","lastModifiedDate":"2021-09-05"},{"lineNumber":17,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"chunweii"},"content":"     * Creates a new event with the given description on the given eventDate.","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"chunweii"},"content":"     * @param description        the description of the event","lastModifiedDate":"2021-09-05"},{"lineNumber":22,"author":{"gitId":"chunweii"},"content":"     * @param startEventDateTime the starting date and time of the event","lastModifiedDate":"2021-09-05"},{"lineNumber":23,"author":{"gitId":"chunweii"},"content":"     * @param endEventDateTime   the ending date and time of the event","lastModifiedDate":"2021-09-05"},{"lineNumber":24,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"chunweii"},"content":"    public Event(String description, String startEventDateTime, String endEventDateTime) {","lastModifiedDate":"2021-09-05"},{"lineNumber":26,"author":{"gitId":"chunweii"},"content":"        super(description, \"E\");","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"chunweii"},"content":"        DateTimeParser logicDateTimeParser \u003d new DateTimeParser(startEventDateTime); // to parse start","lastModifiedDate":"2021-09-05"},{"lineNumber":28,"author":{"gitId":"chunweii"},"content":"        startTimeOfEvent \u003d logicDateTimeParser.getTime();","lastModifiedDate":"2021-09-05"},{"lineNumber":29,"author":{"gitId":"chunweii"},"content":"        startDateOfEvent \u003d logicDateTimeParser.getDate();","lastModifiedDate":"2021-09-05"},{"lineNumber":30,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":31,"author":{"gitId":"chunweii"},"content":"        if (endEventDateTime \u003d\u003d null","lastModifiedDate":"2021-09-05"},{"lineNumber":32,"author":{"gitId":"chunweii"},"content":"            || endEventDateTime.trim().isEmpty()) {","lastModifiedDate":"2021-09-05"},{"lineNumber":33,"author":{"gitId":"chunweii"},"content":"            endDateOfEvent \u003d startDateOfEvent;","lastModifiedDate":"2021-09-05"},{"lineNumber":34,"author":{"gitId":"chunweii"},"content":"            endTimeOfEvent \u003d startTimeOfEvent;","lastModifiedDate":"2021-09-05"},{"lineNumber":35,"author":{"gitId":"chunweii"},"content":"        } else {","lastModifiedDate":"2021-09-05"},{"lineNumber":36,"author":{"gitId":"chunweii"},"content":"            logicDateTimeParser \u003d new DateTimeParser(endEventDateTime,","lastModifiedDate":"2021-09-05"},{"lineNumber":37,"author":{"gitId":"chunweii"},"content":"                startDateOfEvent, startTimeOfEvent); // to parse the end","lastModifiedDate":"2021-09-05"},{"lineNumber":38,"author":{"gitId":"chunweii"},"content":"            endDateOfEvent \u003d logicDateTimeParser.getDate();","lastModifiedDate":"2021-09-05"},{"lineNumber":39,"author":{"gitId":"chunweii"},"content":"            endTimeOfEvent \u003d logicDateTimeParser.getTime();","lastModifiedDate":"2021-09-05"},{"lineNumber":40,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-09-05"},{"lineNumber":41,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-09-03"},{"lineNumber":44,"author":{"gitId":"chunweii"},"content":"     * Creates a new event object that has the given description and due on the given date.","lastModifiedDate":"2021-09-03"},{"lineNumber":45,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-09-03"},{"lineNumber":46,"author":{"gitId":"chunweii"},"content":"     * @param description   the description of the event","lastModifiedDate":"2021-09-05"},{"lineNumber":47,"author":{"gitId":"chunweii"},"content":"     * @param startDateTime the start date/time of the event","lastModifiedDate":"2021-09-05"},{"lineNumber":48,"author":{"gitId":"chunweii"},"content":"     * @param endDateTime   the end date/time of the event","lastModifiedDate":"2021-09-05"},{"lineNumber":49,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-09-03"},{"lineNumber":50,"author":{"gitId":"chunweii"},"content":"    public Event(String description, LocalDateTime startDateTime, LocalDateTime endDateTime) {","lastModifiedDate":"2021-09-05"},{"lineNumber":51,"author":{"gitId":"chunweii"},"content":"        super(description, \"E\");","lastModifiedDate":"2021-09-03"},{"lineNumber":52,"author":{"gitId":"chunweii"},"content":"        startDateOfEvent \u003d startDateTime.toLocalDate();","lastModifiedDate":"2021-09-05"},{"lineNumber":53,"author":{"gitId":"chunweii"},"content":"        startTimeOfEvent \u003d startDateTime.toLocalTime();","lastModifiedDate":"2021-09-05"},{"lineNumber":54,"author":{"gitId":"chunweii"},"content":"        endDateOfEvent \u003d endDateTime.toLocalDate();","lastModifiedDate":"2021-09-05"},{"lineNumber":55,"author":{"gitId":"chunweii"},"content":"        endTimeOfEvent \u003d endDateTime.toLocalTime();","lastModifiedDate":"2021-09-05"},{"lineNumber":56,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-09-03"},{"lineNumber":57,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":58,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-09-05"},{"lineNumber":59,"author":{"gitId":"chunweii"},"content":"     * Gets the date and time of the task, or null if not applicable.","lastModifiedDate":"2021-09-05"},{"lineNumber":60,"author":{"gitId":"chunweii"},"content":"     * This is by default, the start date and time of the event.","lastModifiedDate":"2021-09-05"},{"lineNumber":61,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-09-05"},{"lineNumber":62,"author":{"gitId":"chunweii"},"content":"     * @return the associated LocalDateTime object","lastModifiedDate":"2021-09-05"},{"lineNumber":63,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-09-05"},{"lineNumber":64,"author":{"gitId":"chunweii"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":65,"author":{"gitId":"chunweii"},"content":"    public LocalDateTime getDateTime() {","lastModifiedDate":"2021-08-22"},{"lineNumber":66,"author":{"gitId":"chunweii"},"content":"        return LocalDateTime.of(startDateOfEvent, startTimeOfEvent);","lastModifiedDate":"2021-09-05"},{"lineNumber":67,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":68,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":69,"author":{"gitId":"chunweii"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":70,"author":{"gitId":"chunweii"},"content":"    public String toString() {","lastModifiedDate":"2021-08-22"},{"lineNumber":71,"author":{"gitId":"chunweii"},"content":"        return super.toString() + String.format(\" (from: %s, %s to: %s, %s)\",","lastModifiedDate":"2021-09-05"},{"lineNumber":72,"author":{"gitId":"chunweii"},"content":"            startDateOfEvent, startTimeOfEvent, endDateOfEvent, endTimeOfEvent); // No preposition","lastModifiedDate":"2021-09-05"},{"lineNumber":73,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":74,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":75,"author":{"gitId":"chunweii"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":76,"author":{"gitId":"chunweii"},"content":"    public String getDataLine() {","lastModifiedDate":"2021-08-22"},{"lineNumber":77,"author":{"gitId":"chunweii"},"content":"        return super.getDataLine() + \" | \" + startDateOfEvent + \" \"","lastModifiedDate":"2021-09-05"},{"lineNumber":78,"author":{"gitId":"chunweii"},"content":"            + startTimeOfEvent + \" | \" + endDateOfEvent + \" \" + endTimeOfEvent;","lastModifiedDate":"2021-09-05"},{"lineNumber":79,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":80,"author":{"gitId":"chunweii"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"chunweii":80}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chunweii"},"content":"package duke.task;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"chunweii"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"chunweii"},"content":"import java.util.Objects;","lastModifiedDate":"2021-08-17"},{"lineNumber":5,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":6,"author":{"gitId":"chunweii"},"content":"/**","lastModifiedDate":"2021-08-21"},{"lineNumber":7,"author":{"gitId":"chunweii"},"content":" * Task is a general class for any task that is to be saved by {@link duke.logic.Storage}.","lastModifiedDate":"2021-09-03"},{"lineNumber":8,"author":{"gitId":"chunweii"},"content":" */","lastModifiedDate":"2021-08-21"},{"lineNumber":9,"author":{"gitId":"chunweii"},"content":"public abstract class Task {","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"chunweii"},"content":"    private final String description;","lastModifiedDate":"2021-09-03"},{"lineNumber":11,"author":{"gitId":"chunweii"},"content":"    private final String taskType;","lastModifiedDate":"2021-09-03"},{"lineNumber":12,"author":{"gitId":"chunweii"},"content":"    private boolean isDone;","lastModifiedDate":"2021-08-17"},{"lineNumber":13,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":14,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"chunweii"},"content":"     * Creates a new task object with the description and type of task.","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"chunweii"},"content":"     * @param description The description of the task","lastModifiedDate":"2021-08-21"},{"lineNumber":18,"author":{"gitId":"chunweii"},"content":"     * @param taskType    The type of task (todo/event/deadline)","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":20,"author":{"gitId":"chunweii"},"content":"    public Task(String description, String taskType) {","lastModifiedDate":"2021-08-17"},{"lineNumber":21,"author":{"gitId":"chunweii"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-17"},{"lineNumber":22,"author":{"gitId":"chunweii"},"content":"        this.taskType \u003d taskType;","lastModifiedDate":"2021-08-17"},{"lineNumber":23,"author":{"gitId":"chunweii"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-17"},{"lineNumber":24,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":25,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":26,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-17"},{"lineNumber":27,"author":{"gitId":"chunweii"},"content":"     * Gets the status string \u003ccode\u003e[\u0026lt;taskType\u0026gt;][\u0026lt;isDone\u0026gt;]\u003c/code\u003e","lastModifiedDate":"2021-08-17"},{"lineNumber":28,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-17"},{"lineNumber":29,"author":{"gitId":"chunweii"},"content":"     * @return the associated string","lastModifiedDate":"2021-08-17"},{"lineNumber":30,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-17"},{"lineNumber":31,"author":{"gitId":"chunweii"},"content":"    public String getStatus() {","lastModifiedDate":"2021-08-17"},{"lineNumber":32,"author":{"gitId":"chunweii"},"content":"        return (isDone ? String.format(\"[%s][X]\", taskType)","lastModifiedDate":"2021-09-03"},{"lineNumber":33,"author":{"gitId":"chunweii"},"content":"            : String.format(\"[%s][ ]\", taskType)); // mark done task with X","lastModifiedDate":"2021-09-03"},{"lineNumber":34,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":35,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":36,"author":{"gitId":"chunweii"},"content":"    public boolean isDone() {","lastModifiedDate":"2021-08-17"},{"lineNumber":37,"author":{"gitId":"chunweii"},"content":"        return this.isDone;","lastModifiedDate":"2021-08-17"},{"lineNumber":38,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":39,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":40,"author":{"gitId":"chunweii"},"content":"    public String getDescription() {","lastModifiedDate":"2021-08-17"},{"lineNumber":41,"author":{"gitId":"chunweii"},"content":"        return this.description;","lastModifiedDate":"2021-08-17"},{"lineNumber":42,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":43,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":44,"author":{"gitId":"chunweii"},"content":"    public String getTaskType() {","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"chunweii"},"content":"        return taskType;","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":47,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":48,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":49,"author":{"gitId":"chunweii"},"content":"     * Marks the current task as done.","lastModifiedDate":"2021-08-23"},{"lineNumber":50,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"chunweii"},"content":"     * @return true if task is successfully marked, or false if task has been marked as done before.","lastModifiedDate":"2021-08-23"},{"lineNumber":52,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":53,"author":{"gitId":"chunweii"},"content":"    public boolean markAsDone() {","lastModifiedDate":"2021-08-17"},{"lineNumber":54,"author":{"gitId":"chunweii"},"content":"        if (this.isDone) {","lastModifiedDate":"2021-08-18"},{"lineNumber":55,"author":{"gitId":"chunweii"},"content":"            return false;","lastModifiedDate":"2021-08-18"},{"lineNumber":56,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":57,"author":{"gitId":"chunweii"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-08-17"},{"lineNumber":58,"author":{"gitId":"chunweii"},"content":"        return true;","lastModifiedDate":"2021-08-17"},{"lineNumber":59,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":60,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":61,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":62,"author":{"gitId":"chunweii"},"content":"     * Gets the date and time of the task, or null if not applicable.","lastModifiedDate":"2021-08-22"},{"lineNumber":63,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":64,"author":{"gitId":"chunweii"},"content":"     * @return the associated LocalDateTime object","lastModifiedDate":"2021-08-22"},{"lineNumber":65,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":66,"author":{"gitId":"chunweii"},"content":"    public abstract LocalDateTime getDateTime();","lastModifiedDate":"2021-08-22"},{"lineNumber":67,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":68,"author":{"gitId":"chunweii"},"content":"    @Override","lastModifiedDate":"2021-08-17"},{"lineNumber":69,"author":{"gitId":"chunweii"},"content":"    public boolean equals(Object o) {","lastModifiedDate":"2021-08-17"},{"lineNumber":70,"author":{"gitId":"chunweii"},"content":"        if (this \u003d\u003d o) {","lastModifiedDate":"2021-08-29"},{"lineNumber":71,"author":{"gitId":"chunweii"},"content":"            return true;","lastModifiedDate":"2021-08-29"},{"lineNumber":72,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":73,"author":{"gitId":"chunweii"},"content":"        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {","lastModifiedDate":"2021-08-29"},{"lineNumber":74,"author":{"gitId":"chunweii"},"content":"            return false;","lastModifiedDate":"2021-08-29"},{"lineNumber":75,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":76,"author":{"gitId":"chunweii"},"content":"        Task task \u003d (Task) o;","lastModifiedDate":"2021-08-17"},{"lineNumber":77,"author":{"gitId":"chunweii"},"content":"        return isDone \u003d\u003d task.isDone \u0026\u0026 description.equals(task.description);","lastModifiedDate":"2021-08-17"},{"lineNumber":78,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":79,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":80,"author":{"gitId":"chunweii"},"content":"    @Override","lastModifiedDate":"2021-08-17"},{"lineNumber":81,"author":{"gitId":"chunweii"},"content":"    public int hashCode() {","lastModifiedDate":"2021-08-17"},{"lineNumber":82,"author":{"gitId":"chunweii"},"content":"        return Objects.hash(description, isDone);","lastModifiedDate":"2021-08-17"},{"lineNumber":83,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":84,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":85,"author":{"gitId":"chunweii"},"content":"    @Override","lastModifiedDate":"2021-08-17"},{"lineNumber":86,"author":{"gitId":"chunweii"},"content":"    public String toString() {","lastModifiedDate":"2021-08-17"},{"lineNumber":87,"author":{"gitId":"chunweii"},"content":"        return String.format(\"%s %s\", this.getStatus(), this.getDescription());","lastModifiedDate":"2021-08-17"},{"lineNumber":88,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":89,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":90,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":91,"author":{"gitId":"chunweii"},"content":"     * Gets the string that is to be appended in the dukedata.txt file.","lastModifiedDate":"2021-08-22"},{"lineNumber":92,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":93,"author":{"gitId":"chunweii"},"content":"     * @return The associated string","lastModifiedDate":"2021-08-22"},{"lineNumber":94,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":95,"author":{"gitId":"chunweii"},"content":"    public String getDataLine() {","lastModifiedDate":"2021-08-22"},{"lineNumber":96,"author":{"gitId":"chunweii"},"content":"        return String.format(\"%s | %d | %s\", taskType, isDone ? 1 : 0, description);","lastModifiedDate":"2021-08-22"},{"lineNumber":97,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":98,"author":{"gitId":"chunweii"},"content":"}","lastModifiedDate":"2021-08-17"}],"authorContributionMap":{"chunweii":98}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chunweii"},"content":"package duke.task;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"chunweii"},"content":"import static java.util.AbstractMap.SimpleImmutableEntry;","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"chunweii"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"chunweii"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"chunweii"},"content":"import java.util.Collections;","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"chunweii"},"content":"import java.util.List;","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"chunweii"},"content":"import java.util.Map;","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"chunweii"},"content":"import java.util.TreeMap;","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"chunweii"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"chunweii"},"content":"import java.util.stream.IntStream;","lastModifiedDate":"2021-09-06"},{"lineNumber":13,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"chunweii"},"content":"import duke.exception.InvalidTaskNumberException;","lastModifiedDate":"2021-09-08"},{"lineNumber":15,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"chunweii"},"content":"/**","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"chunweii"},"content":" * Encapsulates a list of tasks that the user wants to keep track of.","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"chunweii"},"content":" */","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"chunweii"},"content":"public class TaskList {","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"chunweii"},"content":"    private final List\u003cTask\u003e tasks;","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"chunweii"},"content":"    private final int limit;","lastModifiedDate":"2021-08-23"},{"lineNumber":22,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"chunweii"},"content":"     * Creates the task list with the given limit.","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"chunweii"},"content":"     * @param limit the limit to the size of the list. The number of tasks cannot exceed this limit.","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"chunweii"},"content":"    public TaskList(int limit) {","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"chunweii"},"content":"        tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"chunweii"},"content":"        this.limit \u003d limit;","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-09-03"},{"lineNumber":34,"author":{"gitId":"chunweii"},"content":"     * Creates the task list with maximum limit of {@code Integer.MAX_VALUE}.","lastModifiedDate":"2021-09-03"},{"lineNumber":35,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-09-03"},{"lineNumber":36,"author":{"gitId":"chunweii"},"content":"    public TaskList() {","lastModifiedDate":"2021-09-03"},{"lineNumber":37,"author":{"gitId":"chunweii"},"content":"        this(Integer.MAX_VALUE);","lastModifiedDate":"2021-09-03"},{"lineNumber":38,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-09-03"},{"lineNumber":39,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":40,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":41,"author":{"gitId":"chunweii"},"content":"     * Adds the task into the list.","lastModifiedDate":"2021-08-23"},{"lineNumber":42,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":43,"author":{"gitId":"chunweii"},"content":"     * @param task The task to be added","lastModifiedDate":"2021-08-23"},{"lineNumber":44,"author":{"gitId":"chunweii"},"content":"     * @throws InvalidTaskNumberException when the task number given is invalid.","lastModifiedDate":"2021-09-08"},{"lineNumber":45,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":46,"author":{"gitId":"chunweii"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2021-09-08"},{"lineNumber":47,"author":{"gitId":"chunweii"},"content":"        if (tasks.size() \u003e\u003d limit) {","lastModifiedDate":"2021-08-23"},{"lineNumber":48,"author":{"gitId":"chunweii"},"content":"            throw new InvalidTaskNumberException(size());","lastModifiedDate":"2021-09-08"},{"lineNumber":49,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":50,"author":{"gitId":"chunweii"},"content":"        tasks.add(task);","lastModifiedDate":"2021-08-23"},{"lineNumber":51,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":52,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":53,"author":{"gitId":"chunweii"},"content":"    private boolean validTaskNumber(int taskNumber) {","lastModifiedDate":"2021-08-23"},{"lineNumber":54,"author":{"gitId":"chunweii"},"content":"        return taskNumber \u003c\u003d tasks.size() \u0026\u0026 taskNumber \u003e 0;","lastModifiedDate":"2021-08-23"},{"lineNumber":55,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":56,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":57,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":58,"author":{"gitId":"chunweii"},"content":"     * Removes the task according to the specified task number.","lastModifiedDate":"2021-08-23"},{"lineNumber":59,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":60,"author":{"gitId":"chunweii"},"content":"     * @param taskNumber The task number of the task to be removed. This is the number that the user sees.","lastModifiedDate":"2021-08-23"},{"lineNumber":61,"author":{"gitId":"chunweii"},"content":"     * @return the task that is being removed","lastModifiedDate":"2021-08-23"},{"lineNumber":62,"author":{"gitId":"chunweii"},"content":"     * @throws InvalidTaskNumberException when the task number given is invalid.","lastModifiedDate":"2021-08-23"},{"lineNumber":63,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":64,"author":{"gitId":"chunweii"},"content":"    public Task removeTask(int taskNumber) {","lastModifiedDate":"2021-08-23"},{"lineNumber":65,"author":{"gitId":"chunweii"},"content":"        if (validTaskNumber(taskNumber)) {","lastModifiedDate":"2021-08-23"},{"lineNumber":66,"author":{"gitId":"chunweii"},"content":"            return tasks.remove(taskNumber - 1);","lastModifiedDate":"2021-08-23"},{"lineNumber":67,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":68,"author":{"gitId":"chunweii"},"content":"        throw new InvalidTaskNumberException(size());","lastModifiedDate":"2021-09-08"},{"lineNumber":69,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":70,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":71,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":72,"author":{"gitId":"chunweii"},"content":"     * Gets the task associated with the task number.","lastModifiedDate":"2021-08-23"},{"lineNumber":73,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"chunweii"},"content":"     * @param taskNumber The task number of the task to be retrieved. This is the number that the user sees.","lastModifiedDate":"2021-08-23"},{"lineNumber":75,"author":{"gitId":"chunweii"},"content":"     * @return the relevant task","lastModifiedDate":"2021-08-23"},{"lineNumber":76,"author":{"gitId":"chunweii"},"content":"     * @throws InvalidTaskNumberException when the task number given is invalid.","lastModifiedDate":"2021-08-23"},{"lineNumber":77,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":78,"author":{"gitId":"chunweii"},"content":"    public Task getTask(int taskNumber) {","lastModifiedDate":"2021-08-23"},{"lineNumber":79,"author":{"gitId":"chunweii"},"content":"        if (!validTaskNumber(taskNumber)) {","lastModifiedDate":"2021-08-23"},{"lineNumber":80,"author":{"gitId":"chunweii"},"content":"            throw new InvalidTaskNumberException(size());","lastModifiedDate":"2021-09-08"},{"lineNumber":81,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":82,"author":{"gitId":"chunweii"},"content":"        return tasks.get(taskNumber - 1);","lastModifiedDate":"2021-08-23"},{"lineNumber":83,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":84,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":85,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":86,"author":{"gitId":"chunweii"},"content":"     * Gets all the tasks in the list.","lastModifiedDate":"2021-08-23"},{"lineNumber":87,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":88,"author":{"gitId":"chunweii"},"content":"     * @return the immutable list of tasks in this task list","lastModifiedDate":"2021-08-25"},{"lineNumber":89,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":90,"author":{"gitId":"chunweii"},"content":"    public List\u003cTask\u003e getTasks() {","lastModifiedDate":"2021-08-23"},{"lineNumber":91,"author":{"gitId":"chunweii"},"content":"        return Collections.unmodifiableList(tasks);","lastModifiedDate":"2021-08-23"},{"lineNumber":92,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":93,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":94,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":95,"author":{"gitId":"chunweii"},"content":"     * Gets the list of all upcoming tasks in the list, sorted chronologically.","lastModifiedDate":"2021-08-25"},{"lineNumber":96,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":97,"author":{"gitId":"chunweii"},"content":"     * @return the list of tasks, with their corresponding task number","lastModifiedDate":"2021-08-25"},{"lineNumber":98,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":99,"author":{"gitId":"chunweii"},"content":"    public List\u003cSimpleImmutableEntry\u003c? extends Task, Integer\u003e\u003e getUpcomingTasks() {","lastModifiedDate":"2021-08-25"},{"lineNumber":100,"author":{"gitId":"chunweii"},"content":"        Map\u003cTask, Integer\u003e upcomingTasks \u003d new TreeMap\u003c\u003e((task1, task2) -\u003e {","lastModifiedDate":"2021-08-25"},{"lineNumber":101,"author":{"gitId":"chunweii"},"content":"            LocalDateTime dateTime1 \u003d task1.getDateTime();","lastModifiedDate":"2021-08-25"},{"lineNumber":102,"author":{"gitId":"chunweii"},"content":"            LocalDateTime dateTime2 \u003d task2.getDateTime();","lastModifiedDate":"2021-08-25"},{"lineNumber":103,"author":{"gitId":"chunweii"},"content":"            // time can be null if task is to-do. By default, put all to-do to the last.","lastModifiedDate":"2021-08-25"},{"lineNumber":104,"author":{"gitId":"chunweii"},"content":"            return dateTime1 \u003d\u003d null","lastModifiedDate":"2021-08-25"},{"lineNumber":105,"author":{"gitId":"chunweii"},"content":"                ? 1","lastModifiedDate":"2021-08-25"},{"lineNumber":106,"author":{"gitId":"chunweii"},"content":"                : dateTime2 \u003d\u003d null","lastModifiedDate":"2021-08-25"},{"lineNumber":107,"author":{"gitId":"chunweii"},"content":"                ? -1","lastModifiedDate":"2021-08-25"},{"lineNumber":108,"author":{"gitId":"chunweii"},"content":"                : dateTime1.equals(dateTime2) // In this situation, we have to sort based on order in tasklist.","lastModifiedDate":"2021-08-25"},{"lineNumber":109,"author":{"gitId":"chunweii"},"content":"                ? Integer.compare(tasks.indexOf(task1), tasks.indexOf(task2))","lastModifiedDate":"2021-08-25"},{"lineNumber":110,"author":{"gitId":"chunweii"},"content":"                : dateTime1.compareTo(dateTime2);","lastModifiedDate":"2021-08-25"},{"lineNumber":111,"author":{"gitId":"chunweii"},"content":"        });","lastModifiedDate":"2021-08-25"},{"lineNumber":112,"author":{"gitId":"chunweii"},"content":"        IntStream.range(1, tasks.size() + 1).forEach(i -\u003e {","lastModifiedDate":"2021-09-06"},{"lineNumber":113,"author":{"gitId":"chunweii"},"content":"            Task task \u003d tasks.get(i - 1);","lastModifiedDate":"2021-08-25"},{"lineNumber":114,"author":{"gitId":"chunweii"},"content":"            String type \u003d task.getTaskType();","lastModifiedDate":"2021-08-25"},{"lineNumber":115,"author":{"gitId":"chunweii"},"content":"            if (!task.isDone() \u0026\u0026 (// Task is not done and it is either to-do or the date is later than now.","lastModifiedDate":"2021-08-29"},{"lineNumber":116,"author":{"gitId":"chunweii"},"content":"                type.equals(\"T\") || task.getDateTime().isAfter(LocalDateTime.now()))) {","lastModifiedDate":"2021-08-29"},{"lineNumber":117,"author":{"gitId":"chunweii"},"content":"                upcomingTasks.put(task, i);","lastModifiedDate":"2021-08-25"},{"lineNumber":118,"author":{"gitId":"chunweii"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":119,"author":{"gitId":"chunweii"},"content":"        });","lastModifiedDate":"2021-09-06"},{"lineNumber":120,"author":{"gitId":"chunweii"},"content":"        return upcomingTasks.entrySet().stream().map(SimpleImmutableEntry::new)","lastModifiedDate":"2021-08-25"},{"lineNumber":121,"author":{"gitId":"chunweii"},"content":"            .collect(Collectors.toUnmodifiableList());","lastModifiedDate":"2021-08-25"},{"lineNumber":122,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":123,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":124,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":125,"author":{"gitId":"chunweii"},"content":"     * Gets all the tasks in the list, along with the task number.","lastModifiedDate":"2021-08-25"},{"lineNumber":126,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":127,"author":{"gitId":"chunweii"},"content":"     * @return the immutable list of tasks with task numbers in this task list","lastModifiedDate":"2021-08-25"},{"lineNumber":128,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":129,"author":{"gitId":"chunweii"},"content":"    public List\u003cSimpleImmutableEntry\u003c? extends Task, Integer\u003e\u003e getAllTasks() {","lastModifiedDate":"2021-08-25"},{"lineNumber":130,"author":{"gitId":"chunweii"},"content":"        List\u003cSimpleImmutableEntry\u003c? extends Task, Integer\u003e\u003e result \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-25"},{"lineNumber":131,"author":{"gitId":"chunweii"},"content":"        IntStream.range(0, tasks.size()).forEach(i -\u003e result.add(new SimpleImmutableEntry\u003c\u003e(tasks.get(i), i + 1)));","lastModifiedDate":"2021-09-06"},{"lineNumber":132,"author":{"gitId":"chunweii"},"content":"        return Collections.unmodifiableList(result);","lastModifiedDate":"2021-08-25"},{"lineNumber":133,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":134,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":135,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":136,"author":{"gitId":"chunweii"},"content":"     * Gets all the tasks in the list containing the string in the description.","lastModifiedDate":"2021-08-25"},{"lineNumber":137,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":138,"author":{"gitId":"chunweii"},"content":"     * @param pattern the pattern to be matched with the task descriptions in the list","lastModifiedDate":"2021-08-25"},{"lineNumber":139,"author":{"gitId":"chunweii"},"content":"     * @return the immutable list of tasks containing str in the description, with their task numbers","lastModifiedDate":"2021-08-25"},{"lineNumber":140,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":141,"author":{"gitId":"chunweii"},"content":"    public List\u003cSimpleImmutableEntry\u003c? extends Task, Integer\u003e\u003e getTasksContaining(String pattern) {","lastModifiedDate":"2021-08-25"},{"lineNumber":142,"author":{"gitId":"chunweii"},"content":"        return getAllTasks().stream().filter(taskAndNumber -\u003e","lastModifiedDate":"2021-08-25"},{"lineNumber":143,"author":{"gitId":"chunweii"},"content":"                taskAndNumber.getKey().getDescription().toUpperCase()","lastModifiedDate":"2021-08-25"},{"lineNumber":144,"author":{"gitId":"chunweii"},"content":"                    .contains(pattern.toUpperCase()))","lastModifiedDate":"2021-08-25"},{"lineNumber":145,"author":{"gitId":"chunweii"},"content":"            .collect(Collectors.toUnmodifiableList());","lastModifiedDate":"2021-08-25"},{"lineNumber":146,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":147,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":148,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":149,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":150,"author":{"gitId":"chunweii"},"content":"     * Marks the selected task as done.","lastModifiedDate":"2021-08-23"},{"lineNumber":151,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":152,"author":{"gitId":"chunweii"},"content":"     * @param taskNumber the task number to be marked as done. This is the number that the user sees.","lastModifiedDate":"2021-08-23"},{"lineNumber":153,"author":{"gitId":"chunweii"},"content":"     * @return true if task is successfully marked, or false if task has been marked as done before.","lastModifiedDate":"2021-08-23"},{"lineNumber":154,"author":{"gitId":"chunweii"},"content":"     * @throws InvalidTaskNumberException when the task number given is invalid.","lastModifiedDate":"2021-08-23"},{"lineNumber":155,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":156,"author":{"gitId":"chunweii"},"content":"    public boolean markAsDone(int taskNumber) {","lastModifiedDate":"2021-08-23"},{"lineNumber":157,"author":{"gitId":"chunweii"},"content":"        return getTask(taskNumber).markAsDone();","lastModifiedDate":"2021-08-23"},{"lineNumber":158,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":159,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":160,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":161,"author":{"gitId":"chunweii"},"content":"     * Gets the size of the task list.","lastModifiedDate":"2021-08-25"},{"lineNumber":162,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":163,"author":{"gitId":"chunweii"},"content":"     * @return the size of the list as an integer.","lastModifiedDate":"2021-08-25"},{"lineNumber":164,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":165,"author":{"gitId":"chunweii"},"content":"    public int size() {","lastModifiedDate":"2021-08-23"},{"lineNumber":166,"author":{"gitId":"chunweii"},"content":"        return tasks.size();","lastModifiedDate":"2021-08-23"},{"lineNumber":167,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":168,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":169,"author":{"gitId":"chunweii"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"chunweii":169}},{"path":"src/main/java/duke/task/TasksEnum.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chunweii"},"content":"package duke.task;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"chunweii"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-09-08"},{"lineNumber":4,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"chunweii"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"chunweii"},"content":" * An enum of tasks that each have a method to create a new instance of the task.","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"chunweii"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"chunweii"},"content":"public enum TasksEnum {","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"chunweii"},"content":"    TODO() {","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"chunweii"},"content":"        @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"chunweii"},"content":"        public Task getTask(String input) {","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"chunweii"},"content":"            if (input \u003d\u003d null || input.equals(\"\")) {","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"chunweii"},"content":"                throw new DukeException(\"The description of this todo task cannot be empty.\");","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"chunweii"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"chunweii"},"content":"            return new Todo(input);","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"chunweii"},"content":"    },","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"chunweii"},"content":"    EVENT() {","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"chunweii"},"content":"        @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"chunweii"},"content":"        public Task getTask(String input) {","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"chunweii"},"content":"            if (input \u003d\u003d null || !input.contains(\" /from \")) {","lastModifiedDate":"2021-09-05"},{"lineNumber":22,"author":{"gitId":"chunweii"},"content":"                throw new DukeException(\"There should be a description followed by \\\"/from\\\" and\"","lastModifiedDate":"2021-09-05"},{"lineNumber":23,"author":{"gitId":"chunweii"},"content":"                    + \" then the starting date and time of the event. To specify end time, use \\\"/to\\\".\");","lastModifiedDate":"2021-09-05"},{"lineNumber":24,"author":{"gitId":"chunweii"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"chunweii"},"content":"            String[] splitOtherInput \u003d input.split(\" /from \", 2);","lastModifiedDate":"2021-09-05"},{"lineNumber":26,"author":{"gitId":"chunweii"},"content":"            String[] splitStartAndEnd \u003d splitOtherInput[1].split(\" /to \", 2);","lastModifiedDate":"2021-09-05"},{"lineNumber":27,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":28,"author":{"gitId":"chunweii"},"content":"            return splitStartAndEnd.length \u003c 2 // No end time","lastModifiedDate":"2021-09-05"},{"lineNumber":29,"author":{"gitId":"chunweii"},"content":"                ? new Event(splitOtherInput[0], splitOtherInput[1], splitOtherInput[1])","lastModifiedDate":"2021-09-05"},{"lineNumber":30,"author":{"gitId":"chunweii"},"content":"                : new Event(splitOtherInput[0], splitStartAndEnd[0], splitStartAndEnd[1]);","lastModifiedDate":"2021-09-05"},{"lineNumber":31,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"chunweii"},"content":"    },","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"chunweii"},"content":"    DEADLINE() {","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"chunweii"},"content":"        @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"chunweii"},"content":"        public Task getTask(String input) {","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"chunweii"},"content":"            if (input \u003d\u003d null || !input.contains(\" /by \")) {","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"chunweii"},"content":"                throw new DukeException(\"There should be a description followed by \\\"/by\\\" and\"","lastModifiedDate":"2021-09-03"},{"lineNumber":38,"author":{"gitId":"chunweii"},"content":"                    + \" then the date and time of the deadline.\");","lastModifiedDate":"2021-09-03"},{"lineNumber":39,"author":{"gitId":"chunweii"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":40,"author":{"gitId":"chunweii"},"content":"            String[] splitOtherInput \u003d input.split(\" /by \", 2);","lastModifiedDate":"2021-08-23"},{"lineNumber":41,"author":{"gitId":"chunweii"},"content":"            return new Deadline(splitOtherInput[0], splitOtherInput[1]);","lastModifiedDate":"2021-08-23"},{"lineNumber":42,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":43,"author":{"gitId":"chunweii"},"content":"    };","lastModifiedDate":"2021-08-23"},{"lineNumber":44,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":45,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":46,"author":{"gitId":"chunweii"},"content":"     * Creates a new task based on the description and date/time.","lastModifiedDate":"2021-08-23"},{"lineNumber":47,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"chunweii"},"content":"     * @param input Contains the description and/or date/time of the task.","lastModifiedDate":"2021-08-23"},{"lineNumber":49,"author":{"gitId":"chunweii"},"content":"     * @return the new task","lastModifiedDate":"2021-08-23"},{"lineNumber":50,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":51,"author":{"gitId":"chunweii"},"content":"    public abstract Task getTask(String input) throws DukeException;","lastModifiedDate":"2021-08-23"},{"lineNumber":52,"author":{"gitId":"chunweii"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"chunweii":52}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chunweii"},"content":"package duke.task;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"chunweii"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"chunweii"},"content":"/**","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"chunweii"},"content":" * A simple task with no deadline","lastModifiedDate":"2021-08-21"},{"lineNumber":7,"author":{"gitId":"chunweii"},"content":" */","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"chunweii"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-08-17"},{"lineNumber":9,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"chunweii"},"content":"     * Creates a Todo object that does not have any dates.","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"chunweii"},"content":"     * @param description The description of the task to be done","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"chunweii"},"content":"    public Todo(String description) {","lastModifiedDate":"2021-08-17"},{"lineNumber":15,"author":{"gitId":"chunweii"},"content":"        super(description, \"T\");","lastModifiedDate":"2021-08-17"},{"lineNumber":16,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":17,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"chunweii"},"content":"     * Returns null.","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"chunweii"},"content":"     * This is because Todo does not have any associated date and time.","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"chunweii"},"content":"     * @return null","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"chunweii"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"chunweii"},"content":"    public LocalDateTime getDateTime() {","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"chunweii"},"content":"        return null;","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"chunweii"},"content":"    @Override","lastModifiedDate":"2021-08-17"},{"lineNumber":30,"author":{"gitId":"chunweii"},"content":"    public String toString() {","lastModifiedDate":"2021-08-17"},{"lineNumber":31,"author":{"gitId":"chunweii"},"content":"        return super.toString(); // No preposition","lastModifiedDate":"2021-08-17"},{"lineNumber":32,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":33,"author":{"gitId":"chunweii"},"content":"}","lastModifiedDate":"2021-08-17"}],"authorContributionMap":{"chunweii":33}},{"path":"src/main/java/duke/ui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chunweii"},"content":"package duke.ui;","lastModifiedDate":"2021-09-01"},{"lineNumber":2,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"chunweii"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"chunweii"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"chunweii"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"chunweii"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"chunweii"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"chunweii"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"chunweii"},"content":"import javafx.geometry.Rectangle2D;","lastModifiedDate":"2021-09-14"},{"lineNumber":11,"author":{"gitId":"chunweii"},"content":"import javafx.scene.Node;","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"chunweii"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"chunweii"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"chunweii"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2021-09-14"},{"lineNumber":15,"author":{"gitId":"chunweii"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"chunweii"},"content":"import javafx.scene.shape.Circle;","lastModifiedDate":"2021-09-01"},{"lineNumber":17,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"chunweii"},"content":"/**","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"chunweii"},"content":" * The dialog box component for chat.","lastModifiedDate":"2021-09-01"},{"lineNumber":20,"author":{"gitId":"chunweii"},"content":" */","lastModifiedDate":"2021-09-01"},{"lineNumber":21,"author":{"gitId":"chunweii"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2021-09-01"},{"lineNumber":22,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":23,"author":{"gitId":"chunweii"},"content":"    @FXML","lastModifiedDate":"2021-09-02"},{"lineNumber":24,"author":{"gitId":"chunweii"},"content":"    private Label dialog;","lastModifiedDate":"2021-09-02"},{"lineNumber":25,"author":{"gitId":"chunweii"},"content":"    @FXML","lastModifiedDate":"2021-09-02"},{"lineNumber":26,"author":{"gitId":"chunweii"},"content":"    private ImageView circleDisplayPicture;","lastModifiedDate":"2021-09-14"},{"lineNumber":27,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":28,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":29,"author":{"gitId":"chunweii"},"content":"     * Creates a new dialog box ui that contains the message in l and the profile picture in image.","lastModifiedDate":"2021-09-14"},{"lineNumber":30,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":31,"author":{"gitId":"chunweii"},"content":"     * @param l     the message to be displayed","lastModifiedDate":"2021-09-01"},{"lineNumber":32,"author":{"gitId":"chunweii"},"content":"     * @param image the profile picture to be displayed","lastModifiedDate":"2021-09-14"},{"lineNumber":33,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":34,"author":{"gitId":"chunweii"},"content":"    public DialogBox(String l, Image image) {","lastModifiedDate":"2021-09-14"},{"lineNumber":35,"author":{"gitId":"chunweii"},"content":"        try {","lastModifiedDate":"2021-09-02"},{"lineNumber":36,"author":{"gitId":"chunweii"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2021-09-02"},{"lineNumber":37,"author":{"gitId":"chunweii"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2021-09-02"},{"lineNumber":38,"author":{"gitId":"chunweii"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2021-09-02"},{"lineNumber":39,"author":{"gitId":"chunweii"},"content":"            fxmlLoader.load();","lastModifiedDate":"2021-09-02"},{"lineNumber":40,"author":{"gitId":"chunweii"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-02"},{"lineNumber":41,"author":{"gitId":"chunweii"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-09-02"},{"lineNumber":42,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-09-02"},{"lineNumber":43,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":44,"author":{"gitId":"chunweii"},"content":"        dialog.setText(l + \"\\r\"); // Adds a new line to resolve truncation issues with javafx.","lastModifiedDate":"2021-09-15"},{"lineNumber":45,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":46,"author":{"gitId":"chunweii"},"content":"        dialog.setWrapText(true);","lastModifiedDate":"2021-09-02"},{"lineNumber":47,"author":{"gitId":"chunweii"},"content":"        circleDisplayPicture.setImage(image);","lastModifiedDate":"2021-09-14"},{"lineNumber":48,"author":{"gitId":"chunweii"},"content":"        resizeAndClip(circleDisplayPicture);","lastModifiedDate":"2021-09-14"},{"lineNumber":49,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":50,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":51,"author":{"gitId":"chunweii"},"content":"    private static void resizeAndClip(ImageView iv) {","lastModifiedDate":"2021-09-14"},{"lineNumber":52,"author":{"gitId":"chunweii"},"content":"        iv.setPreserveRatio(true);","lastModifiedDate":"2021-09-14"},{"lineNumber":53,"author":{"gitId":"chunweii"},"content":"        double aspectRatio \u003d iv.getImage().getWidth() / iv.getImage().getHeight();","lastModifiedDate":"2021-09-14"},{"lineNumber":54,"author":{"gitId":"chunweii"},"content":"        double tempWidthOrHeight \u003d Math.min(iv.getImage().getWidth(), iv.getImage().getHeight());","lastModifiedDate":"2021-09-14"},{"lineNumber":55,"author":{"gitId":"chunweii"},"content":"        iv.setViewport(new Rectangle2D((iv.getImage().getWidth() - tempWidthOrHeight) / 2, (","lastModifiedDate":"2021-09-14"},{"lineNumber":56,"author":{"gitId":"chunweii"},"content":"            iv.getImage().getHeight() - tempWidthOrHeight) / 2, tempWidthOrHeight, tempWidthOrHeight));","lastModifiedDate":"2021-09-14"},{"lineNumber":57,"author":{"gitId":"chunweii"},"content":"        if (aspectRatio \u003c 1) {","lastModifiedDate":"2021-09-14"},{"lineNumber":58,"author":{"gitId":"chunweii"},"content":"            iv.setFitWidth(60);","lastModifiedDate":"2021-09-14"},{"lineNumber":59,"author":{"gitId":"chunweii"},"content":"        } else {","lastModifiedDate":"2021-09-14"},{"lineNumber":60,"author":{"gitId":"chunweii"},"content":"            iv.setFitHeight(60);","lastModifiedDate":"2021-09-14"},{"lineNumber":61,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-09-14"},{"lineNumber":62,"author":{"gitId":"chunweii"},"content":"        iv.setClip(new Circle(30, 30, 30));","lastModifiedDate":"2021-09-14"},{"lineNumber":63,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":64,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":65,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":66,"author":{"gitId":"chunweii"},"content":"     * Gets the user dialog box with the user input and their profile picture.","lastModifiedDate":"2021-09-06"},{"lineNumber":67,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":68,"author":{"gitId":"chunweii"},"content":"     * @param userInput  the user input","lastModifiedDate":"2021-09-06"},{"lineNumber":69,"author":{"gitId":"chunweii"},"content":"     * @param profilePic the profile picture","lastModifiedDate":"2021-09-06"},{"lineNumber":70,"author":{"gitId":"chunweii"},"content":"     * @return the user dialog box","lastModifiedDate":"2021-09-06"},{"lineNumber":71,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":72,"author":{"gitId":"chunweii"},"content":"    public static DialogBox getUserDialog(String userInput, Image profilePic) {","lastModifiedDate":"2021-09-06"},{"lineNumber":73,"author":{"gitId":"chunweii"},"content":"        return new DialogBox(userInput, profilePic);","lastModifiedDate":"2021-09-06"},{"lineNumber":74,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":75,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":76,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":77,"author":{"gitId":"chunweii"},"content":"     * Gets the duke dialog box with the output and duke\u0027s profile picture. This is flipped from the user dialog box.","lastModifiedDate":"2021-09-06"},{"lineNumber":78,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":79,"author":{"gitId":"chunweii"},"content":"     * @param dukeOutput the output message by duke","lastModifiedDate":"2021-09-06"},{"lineNumber":80,"author":{"gitId":"chunweii"},"content":"     * @param dukePic    the profile picture","lastModifiedDate":"2021-09-06"},{"lineNumber":81,"author":{"gitId":"chunweii"},"content":"     * @return the duke dialog box","lastModifiedDate":"2021-09-06"},{"lineNumber":82,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":83,"author":{"gitId":"chunweii"},"content":"    public static DialogBox getDukeDialog(String dukeOutput, Image dukePic) {","lastModifiedDate":"2021-09-06"},{"lineNumber":84,"author":{"gitId":"chunweii"},"content":"        var db \u003d new DialogBox(dukeOutput, dukePic);","lastModifiedDate":"2021-09-06"},{"lineNumber":85,"author":{"gitId":"chunweii"},"content":"        db.flip();","lastModifiedDate":"2021-09-01"},{"lineNumber":86,"author":{"gitId":"chunweii"},"content":"        return db;","lastModifiedDate":"2021-09-01"},{"lineNumber":87,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":88,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":89,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":90,"author":{"gitId":"chunweii"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2021-09-01"},{"lineNumber":91,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":92,"author":{"gitId":"chunweii"},"content":"    private void flip() {","lastModifiedDate":"2021-09-01"},{"lineNumber":93,"author":{"gitId":"chunweii"},"content":"        this.setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2021-09-01"},{"lineNumber":94,"author":{"gitId":"chunweii"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2021-09-01"},{"lineNumber":95,"author":{"gitId":"chunweii"},"content":"        FXCollections.reverse(tmp);","lastModifiedDate":"2021-09-01"},{"lineNumber":96,"author":{"gitId":"chunweii"},"content":"        this.getChildren().setAll(tmp);","lastModifiedDate":"2021-09-01"},{"lineNumber":97,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":98,"author":{"gitId":"chunweii"},"content":"}","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"chunweii":98}},{"path":"src/main/java/duke/ui/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chunweii"},"content":"package duke.ui;","lastModifiedDate":"2021-09-02"},{"lineNumber":2,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"chunweii"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"chunweii"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"chunweii"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"chunweii"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"chunweii"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"chunweii"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"chunweii"},"content":"/**","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"chunweii"},"content":" * The main graphical user interface for the duke application.","lastModifiedDate":"2021-09-02"},{"lineNumber":13,"author":{"gitId":"chunweii"},"content":" */","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"chunweii"},"content":"public class Main extends Application {","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"chunweii"},"content":"    @Override","lastModifiedDate":"2021-09-02"},{"lineNumber":17,"author":{"gitId":"chunweii"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2021-09-02"},{"lineNumber":18,"author":{"gitId":"chunweii"},"content":"        try {","lastModifiedDate":"2021-09-02"},{"lineNumber":19,"author":{"gitId":"chunweii"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2021-09-02"},{"lineNumber":20,"author":{"gitId":"chunweii"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2021-09-02"},{"lineNumber":21,"author":{"gitId":"chunweii"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2021-09-02"},{"lineNumber":22,"author":{"gitId":"chunweii"},"content":"            stage.setScene(scene);","lastModifiedDate":"2021-09-02"},{"lineNumber":23,"author":{"gitId":"chunweii"},"content":"            stage.show();","lastModifiedDate":"2021-09-02"},{"lineNumber":24,"author":{"gitId":"chunweii"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-02"},{"lineNumber":25,"author":{"gitId":"chunweii"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-09-02"},{"lineNumber":26,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-09-02"},{"lineNumber":27,"author":{"gitId":"chunweii"},"content":"        stage.setTitle(\"Duke\");","lastModifiedDate":"2021-09-02"},{"lineNumber":28,"author":{"gitId":"chunweii"},"content":"        stage.setMinWidth(500);","lastModifiedDate":"2021-09-02"},{"lineNumber":29,"author":{"gitId":"chunweii"},"content":"        stage.setMinHeight(600);","lastModifiedDate":"2021-09-02"},{"lineNumber":30,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":31,"author":{"gitId":"chunweii"},"content":"}","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"chunweii":31}},{"path":"src/main/java/duke/ui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chunweii"},"content":"package duke.ui;","lastModifiedDate":"2021-09-02"},{"lineNumber":2,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"chunweii"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"chunweii"},"content":"import java.util.Objects;","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"chunweii"},"content":"import java.util.concurrent.CompletableFuture;","lastModifiedDate":"2021-09-14"},{"lineNumber":6,"author":{"gitId":"chunweii"},"content":"import java.util.concurrent.TimeUnit;","lastModifiedDate":"2021-09-14"},{"lineNumber":7,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"chunweii"},"content":"import duke.Duke;","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"chunweii"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-09-08"},{"lineNumber":10,"author":{"gitId":"chunweii"},"content":"import javafx.application.Platform;","lastModifiedDate":"2021-09-06"},{"lineNumber":11,"author":{"gitId":"chunweii"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"chunweii"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2021-09-02"},{"lineNumber":13,"author":{"gitId":"chunweii"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"chunweii"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"chunweii"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"chunweii"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-09-02"},{"lineNumber":17,"author":{"gitId":"chunweii"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2021-09-02"},{"lineNumber":18,"author":{"gitId":"chunweii"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2021-09-02"},{"lineNumber":19,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":20,"author":{"gitId":"chunweii"},"content":"/**","lastModifiedDate":"2021-09-02"},{"lineNumber":21,"author":{"gitId":"chunweii"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2021-09-02"},{"lineNumber":22,"author":{"gitId":"chunweii"},"content":" */","lastModifiedDate":"2021-09-02"},{"lineNumber":23,"author":{"gitId":"chunweii"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2021-09-02"},{"lineNumber":24,"author":{"gitId":"chunweii"},"content":"    @FXML","lastModifiedDate":"2021-09-02"},{"lineNumber":25,"author":{"gitId":"chunweii"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2021-09-02"},{"lineNumber":26,"author":{"gitId":"chunweii"},"content":"    @FXML","lastModifiedDate":"2021-09-02"},{"lineNumber":27,"author":{"gitId":"chunweii"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2021-09-02"},{"lineNumber":28,"author":{"gitId":"chunweii"},"content":"    @FXML","lastModifiedDate":"2021-09-02"},{"lineNumber":29,"author":{"gitId":"chunweii"},"content":"    private TextField userInput;","lastModifiedDate":"2021-09-02"},{"lineNumber":30,"author":{"gitId":"chunweii"},"content":"    @FXML","lastModifiedDate":"2021-09-02"},{"lineNumber":31,"author":{"gitId":"chunweii"},"content":"    private Button sendButton;","lastModifiedDate":"2021-09-02"},{"lineNumber":32,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":33,"author":{"gitId":"chunweii"},"content":"    private Image userImg \u003d new Image(","lastModifiedDate":"2021-09-02"},{"lineNumber":34,"author":{"gitId":"chunweii"},"content":"        Objects.requireNonNull(this.getClass().getResourceAsStream(\"/images/doge_circle.png\")));","lastModifiedDate":"2021-09-02"},{"lineNumber":35,"author":{"gitId":"chunweii"},"content":"    private Image dukeImg \u003d new Image(","lastModifiedDate":"2021-09-02"},{"lineNumber":36,"author":{"gitId":"chunweii"},"content":"        Objects.requireNonNull(this.getClass().getResourceAsStream(\"/images/gigachad.jpg\")));","lastModifiedDate":"2021-09-02"},{"lineNumber":37,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":38,"author":{"gitId":"chunweii"},"content":"    private Duke duke;","lastModifiedDate":"2021-09-02"},{"lineNumber":39,"author":{"gitId":"chunweii"},"content":"    private Ui ui; // For getting output messages","lastModifiedDate":"2021-09-02"},{"lineNumber":40,"author":{"gitId":"chunweii"},"content":"    // 0 -\u003e 1 (with name) -\u003e 2 (with file location)","lastModifiedDate":"2021-09-03"},{"lineNumber":41,"author":{"gitId":"chunweii"},"content":"    private int sequence \u003d 0; // Checks to see if the user inputs their name, file location, and task list size.","lastModifiedDate":"2021-09-02"},{"lineNumber":42,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":43,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-09-03"},{"lineNumber":44,"author":{"gitId":"chunweii"},"content":"     * Initializes the main window by setting some properties to scroll pane and the dialog container.","lastModifiedDate":"2021-09-03"},{"lineNumber":45,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-09-03"},{"lineNumber":46,"author":{"gitId":"chunweii"},"content":"    @FXML","lastModifiedDate":"2021-09-02"},{"lineNumber":47,"author":{"gitId":"chunweii"},"content":"    public void initialize() {","lastModifiedDate":"2021-09-02"},{"lineNumber":48,"author":{"gitId":"chunweii"},"content":"        assert sequence \u003d\u003d 0 : \"Starting sequence should be 0.\";","lastModifiedDate":"2021-09-05"},{"lineNumber":49,"author":{"gitId":"chunweii"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2021-09-02"},{"lineNumber":50,"author":{"gitId":"chunweii"},"content":"        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);","lastModifiedDate":"2021-09-02"},{"lineNumber":51,"author":{"gitId":"chunweii"},"content":"        // Gets the first dialog","lastModifiedDate":"2021-09-03"},{"lineNumber":52,"author":{"gitId":"chunweii"},"content":"        dialogContainer.getChildren().add(DialogBox.getDukeDialog(\"Hi, I am Duke, what is your name?\",","lastModifiedDate":"2021-09-03"},{"lineNumber":53,"author":{"gitId":"chunweii"},"content":"            new Image(Objects.requireNonNull(this.getClass().getResourceAsStream(\"/images/gigachad.jpg\")))));","lastModifiedDate":"2021-09-03"},{"lineNumber":54,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":55,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":56,"author":{"gitId":"chunweii"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2021-09-02"},{"lineNumber":57,"author":{"gitId":"chunweii"},"content":"        duke \u003d d;","lastModifiedDate":"2021-09-02"},{"lineNumber":58,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":59,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":60,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":61,"author":{"gitId":"chunweii"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2021-09-02"},{"lineNumber":62,"author":{"gitId":"chunweii"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2021-09-02"},{"lineNumber":63,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":64,"author":{"gitId":"chunweii"},"content":"    @FXML","lastModifiedDate":"2021-09-02"},{"lineNumber":65,"author":{"gitId":"chunweii"},"content":"    private void handleUserInput() {","lastModifiedDate":"2021-09-02"},{"lineNumber":66,"author":{"gitId":"chunweii"},"content":"        assert dialogContainer.getChildren().size() !\u003d 0 : \"Dialog container should always have at least 1 message.\";","lastModifiedDate":"2021-09-05"},{"lineNumber":67,"author":{"gitId":"chunweii"},"content":"        String dukeText;","lastModifiedDate":"2021-09-02"},{"lineNumber":68,"author":{"gitId":"chunweii"},"content":"        switch (sequence) {","lastModifiedDate":"2021-09-02"},{"lineNumber":69,"author":{"gitId":"chunweii"},"content":"        case 0: // start","lastModifiedDate":"2021-09-02"},{"lineNumber":70,"author":{"gitId":"chunweii"},"content":"            ui \u003d new Ui(userInput.getText());","lastModifiedDate":"2021-09-02"},{"lineNumber":71,"author":{"gitId":"chunweii"},"content":"            sequence++;","lastModifiedDate":"2021-09-02"},{"lineNumber":72,"author":{"gitId":"chunweii"},"content":"            dukeText \u003d","lastModifiedDate":"2021-09-02"},{"lineNumber":73,"author":{"gitId":"chunweii"},"content":"                String.format(\"Hi, %s! That is a nice name. Now, where would you want to store your duke data files?\",","lastModifiedDate":"2021-09-02"},{"lineNumber":74,"author":{"gitId":"chunweii"},"content":"                    userInput.getText());","lastModifiedDate":"2021-09-02"},{"lineNumber":75,"author":{"gitId":"chunweii"},"content":"            break;","lastModifiedDate":"2021-09-02"},{"lineNumber":76,"author":{"gitId":"chunweii"},"content":"        case 1: // get file location","lastModifiedDate":"2021-09-02"},{"lineNumber":77,"author":{"gitId":"chunweii"},"content":"            // To temporarily store the file path to create duke.","lastModifiedDate":"2021-09-03"},{"lineNumber":78,"author":{"gitId":"chunweii"},"content":"            String filePath \u003d userInput.getText();","lastModifiedDate":"2021-09-03"},{"lineNumber":79,"author":{"gitId":"chunweii"},"content":"            try {","lastModifiedDate":"2021-09-02"},{"lineNumber":80,"author":{"gitId":"chunweii"},"content":"                duke \u003d new Duke(filePath);","lastModifiedDate":"2021-09-03"},{"lineNumber":81,"author":{"gitId":"chunweii"},"content":"            } catch (IOException | DukeException e) {","lastModifiedDate":"2021-09-03"},{"lineNumber":82,"author":{"gitId":"chunweii"},"content":"                dukeText \u003d e.getMessage() + \" Please try entering your file name again!\";","lastModifiedDate":"2021-09-03"},{"lineNumber":83,"author":{"gitId":"chunweii"},"content":"                break;","lastModifiedDate":"2021-09-03"},{"lineNumber":84,"author":{"gitId":"chunweii"},"content":"            }","lastModifiedDate":"2021-09-02"},{"lineNumber":85,"author":{"gitId":"chunweii"},"content":"            sequence++;","lastModifiedDate":"2021-09-03"},{"lineNumber":86,"author":{"gitId":"chunweii"},"content":"            dukeText \u003d \"Great! You are all set! How can I help you today?\";","lastModifiedDate":"2021-09-03"},{"lineNumber":87,"author":{"gitId":"chunweii"},"content":"            break;","lastModifiedDate":"2021-09-02"},{"lineNumber":88,"author":{"gitId":"chunweii"},"content":"        case 2:","lastModifiedDate":"2021-09-03"},{"lineNumber":89,"author":{"gitId":"chunweii"},"content":"            try {","lastModifiedDate":"2021-09-02"},{"lineNumber":90,"author":{"gitId":"chunweii"},"content":"                dukeText \u003d getResponse(userInput.getText());","lastModifiedDate":"2021-09-02"},{"lineNumber":91,"author":{"gitId":"chunweii"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2021-09-02"},{"lineNumber":92,"author":{"gitId":"chunweii"},"content":"                dukeText \u003d e.getMessage();","lastModifiedDate":"2021-09-02"},{"lineNumber":93,"author":{"gitId":"chunweii"},"content":"            }","lastModifiedDate":"2021-09-02"},{"lineNumber":94,"author":{"gitId":"chunweii"},"content":"            break;","lastModifiedDate":"2021-09-02"},{"lineNumber":95,"author":{"gitId":"chunweii"},"content":"        default:","lastModifiedDate":"2021-09-02"},{"lineNumber":96,"author":{"gitId":"chunweii"},"content":"            assert false : \"Sequence not 0, 1 or 2.\";","lastModifiedDate":"2021-09-05"},{"lineNumber":97,"author":{"gitId":"chunweii"},"content":"            dukeText \u003d \"Something went very wrong!\";","lastModifiedDate":"2021-09-02"},{"lineNumber":98,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-09-02"},{"lineNumber":99,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":100,"author":{"gitId":"chunweii"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2021-09-02"},{"lineNumber":101,"author":{"gitId":"chunweii"},"content":"            DialogBox.getUserDialog(userInput.getText(), userImg),","lastModifiedDate":"2021-09-02"},{"lineNumber":102,"author":{"gitId":"chunweii"},"content":"            DialogBox.getDukeDialog(dukeText, dukeImg)","lastModifiedDate":"2021-09-02"},{"lineNumber":103,"author":{"gitId":"chunweii"},"content":"        );","lastModifiedDate":"2021-09-02"},{"lineNumber":104,"author":{"gitId":"chunweii"},"content":"        userInput.clear();","lastModifiedDate":"2021-09-02"},{"lineNumber":105,"author":{"gitId":"chunweii"},"content":"        CompletableFuture.delayedExecutor(2, TimeUnit.SECONDS).execute(() -\u003e {","lastModifiedDate":"2021-09-14"},{"lineNumber":106,"author":{"gitId":"chunweii"},"content":"            if (ui.willExit()) {","lastModifiedDate":"2021-09-02"},{"lineNumber":107,"author":{"gitId":"chunweii"},"content":"                try {","lastModifiedDate":"2021-09-02"},{"lineNumber":108,"author":{"gitId":"chunweii"},"content":"                    Platform.exit();","lastModifiedDate":"2021-09-06"},{"lineNumber":109,"author":{"gitId":"chunweii"},"content":"                } catch (Exception e) {","lastModifiedDate":"2021-09-02"},{"lineNumber":110,"author":{"gitId":"chunweii"},"content":"                    e.printStackTrace();","lastModifiedDate":"2021-09-02"},{"lineNumber":111,"author":{"gitId":"chunweii"},"content":"                }","lastModifiedDate":"2021-09-02"},{"lineNumber":112,"author":{"gitId":"chunweii"},"content":"            }","lastModifiedDate":"2021-09-02"},{"lineNumber":113,"author":{"gitId":"chunweii"},"content":"        });","lastModifiedDate":"2021-09-14"},{"lineNumber":114,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":115,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":116,"author":{"gitId":"chunweii"},"content":"    private String getResponse(String input) {","lastModifiedDate":"2021-09-02"},{"lineNumber":117,"author":{"gitId":"chunweii"},"content":"        assert input !\u003d null : \"User input can never be null.\";","lastModifiedDate":"2021-09-05"},{"lineNumber":118,"author":{"gitId":"chunweii"},"content":"        return ui.checkInput(input, duke);","lastModifiedDate":"2021-09-02"},{"lineNumber":119,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":120,"author":{"gitId":"chunweii"},"content":"}","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"chunweii":120}},{"path":"src/main/java/duke/ui/TextCliUi.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chunweii"},"content":"package duke.ui;","lastModifiedDate":"2021-09-01"},{"lineNumber":2,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"chunweii"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"chunweii"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-09-08"},{"lineNumber":6,"author":{"gitId":"chunweii"},"content":"import duke.logic.CommandParser;","lastModifiedDate":"2021-09-03"},{"lineNumber":7,"author":{"gitId":"chunweii"},"content":"import duke.logic.Storage;","lastModifiedDate":"2021-09-03"},{"lineNumber":8,"author":{"gitId":"chunweii"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"chunweii"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"chunweii"},"content":" * The command line user interface of Duke. Deals with printing messages to the console and reading user input.","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"chunweii"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"chunweii"},"content":"public class TextCliUi {","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"chunweii"},"content":"    private final Scanner sc;","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"chunweii"},"content":"    private final Ui ui;","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"chunweii"},"content":"    private boolean isExiting;","lastModifiedDate":"2021-09-15"},{"lineNumber":17,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"chunweii"},"content":"     * Creates a new instance of a user interface by creating a new scanner and","lastModifiedDate":"2021-09-15"},{"lineNumber":20,"author":{"gitId":"chunweii"},"content":"     * querying for the user\u0027s name.","lastModifiedDate":"2021-09-15"},{"lineNumber":21,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"chunweii"},"content":"    public TextCliUi() {","lastModifiedDate":"2021-09-01"},{"lineNumber":23,"author":{"gitId":"chunweii"},"content":"        sc \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"chunweii"},"content":"        String name \u003d \"\";","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"chunweii"},"content":"        isExiting \u003d false;","lastModifiedDate":"2021-09-15"},{"lineNumber":26,"author":{"gitId":"chunweii"},"content":"        String logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"chunweii"},"content":"            + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"chunweii"},"content":"            + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"chunweii"},"content":"            + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"chunweii"},"content":"            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"chunweii"},"content":"        System.out.println(\"Hello, I am\\n\" + logo);","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"chunweii"},"content":"        System.out.println(\"Please enter your name:\");","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"chunweii"},"content":"        while (name.equals(\"\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"chunweii"},"content":"            name \u003d sc.nextLine();","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"chunweii"},"content":"        this.ui \u003d new Ui(name);","lastModifiedDate":"2021-09-01"},{"lineNumber":37,"author":{"gitId":"chunweii"},"content":"        System.out.printf(\"%s, that is a nice name. What can I do for you today?\\n\", name);","lastModifiedDate":"2021-09-01"},{"lineNumber":38,"author":{"gitId":"chunweii"},"content":"        System.out.println(\"----------------------------\");","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"chunweii"},"content":"    public boolean willExit() {","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"chunweii"},"content":"        return isExiting;","lastModifiedDate":"2021-09-15"},{"lineNumber":44,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"chunweii"},"content":"     * Checks the user input from stdin.","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"chunweii"},"content":"     * @param taskList the task list that the user is using","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"chunweii"},"content":"     * @param storage  the storage that the user wants the data to be stored into","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"chunweii"},"content":"    public void checkInput(TaskList taskList, Storage storage) {","lastModifiedDate":"2021-09-03"},{"lineNumber":53,"author":{"gitId":"chunweii"},"content":"        String userInput \u003d sc.nextLine();","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"chunweii"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"chunweii"},"content":"            CommandParser cmdParser \u003d new CommandParser(userInput, taskList, storage, ui);","lastModifiedDate":"2021-09-03"},{"lineNumber":56,"author":{"gitId":"chunweii"},"content":"            isExiting \u003d cmdParser.willExit();","lastModifiedDate":"2021-09-15"},{"lineNumber":57,"author":{"gitId":"chunweii"},"content":"            System.out.println(cmdParser.getOutput());","lastModifiedDate":"2021-09-01"},{"lineNumber":58,"author":{"gitId":"chunweii"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"chunweii"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"chunweii"},"content":"        } finally {","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"chunweii"},"content":"            System.out.println(\"----------------------------\");","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"chunweii"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"chunweii":65}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chunweii"},"content":"package duke.ui;","lastModifiedDate":"2021-09-01"},{"lineNumber":2,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"chunweii"},"content":"import static java.util.AbstractMap.SimpleImmutableEntry;","lastModifiedDate":"2021-09-03"},{"lineNumber":4,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":5,"author":{"gitId":"chunweii"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-09-06"},{"lineNumber":6,"author":{"gitId":"chunweii"},"content":"import java.util.List;","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"chunweii"},"content":"import java.util.Optional;","lastModifiedDate":"2021-09-06"},{"lineNumber":8,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"chunweii"},"content":"import duke.Duke;","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"chunweii"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-09-08"},{"lineNumber":11,"author":{"gitId":"chunweii"},"content":"import duke.logic.CommandParser;","lastModifiedDate":"2021-09-03"},{"lineNumber":12,"author":{"gitId":"chunweii"},"content":"import duke.logic.CommandsEnum;","lastModifiedDate":"2021-09-03"},{"lineNumber":13,"author":{"gitId":"chunweii"},"content":"import duke.logic.Storage;","lastModifiedDate":"2021-09-03"},{"lineNumber":14,"author":{"gitId":"chunweii"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"chunweii"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":17,"author":{"gitId":"chunweii"},"content":"/**","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"chunweii"},"content":" * Returns all the output of the duke bot as Strings to be parsed by the GUI or CLI UI.","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"chunweii"},"content":" */","lastModifiedDate":"2021-09-01"},{"lineNumber":20,"author":{"gitId":"chunweii"},"content":"public class Ui {","lastModifiedDate":"2021-09-01"},{"lineNumber":21,"author":{"gitId":"chunweii"},"content":"    private final String name;","lastModifiedDate":"2021-09-01"},{"lineNumber":22,"author":{"gitId":"chunweii"},"content":"    private boolean isExiting \u003d false;","lastModifiedDate":"2021-09-15"},{"lineNumber":23,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":24,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":25,"author":{"gitId":"chunweii"},"content":"     * Creates a new instance of a user interface by creating a new scanner and querying for the user\u0027s name.","lastModifiedDate":"2021-09-01"},{"lineNumber":26,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":27,"author":{"gitId":"chunweii"},"content":"    public Ui(String name) {","lastModifiedDate":"2021-09-01"},{"lineNumber":28,"author":{"gitId":"chunweii"},"content":"        this.name \u003d name;","lastModifiedDate":"2021-09-01"},{"lineNumber":29,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":30,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":31,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":32,"author":{"gitId":"chunweii"},"content":"    public boolean willExit() {","lastModifiedDate":"2021-09-01"},{"lineNumber":33,"author":{"gitId":"chunweii"},"content":"        return isExiting;","lastModifiedDate":"2021-09-15"},{"lineNumber":34,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":35,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":36,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":37,"author":{"gitId":"chunweii"},"content":"     * Checks the user input from the source.","lastModifiedDate":"2021-09-01"},{"lineNumber":38,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":39,"author":{"gitId":"chunweii"},"content":"     * @param taskList the task list that the user is using","lastModifiedDate":"2021-09-01"},{"lineNumber":40,"author":{"gitId":"chunweii"},"content":"     * @param storage  the storage that the user wants the data to be stored into","lastModifiedDate":"2021-09-01"},{"lineNumber":41,"author":{"gitId":"chunweii"},"content":"     * @return the output string","lastModifiedDate":"2021-09-01"},{"lineNumber":42,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":43,"author":{"gitId":"chunweii"},"content":"    public String checkInput(String userInput, TaskList taskList, Storage storage) {","lastModifiedDate":"2021-09-03"},{"lineNumber":44,"author":{"gitId":"chunweii"},"content":"        String output \u003d \"\";","lastModifiedDate":"2021-09-01"},{"lineNumber":45,"author":{"gitId":"chunweii"},"content":"        CommandParser cmdParser;","lastModifiedDate":"2021-09-03"},{"lineNumber":46,"author":{"gitId":"chunweii"},"content":"        try {","lastModifiedDate":"2021-09-01"},{"lineNumber":47,"author":{"gitId":"chunweii"},"content":"            cmdParser \u003d new CommandParser(userInput, taskList, storage, this);","lastModifiedDate":"2021-09-03"},{"lineNumber":48,"author":{"gitId":"chunweii"},"content":"            isExiting \u003d cmdParser.willExit();","lastModifiedDate":"2021-09-15"},{"lineNumber":49,"author":{"gitId":"chunweii"},"content":"            output +\u003d cmdParser.getOutput() + \"\\n\";","lastModifiedDate":"2021-09-01"},{"lineNumber":50,"author":{"gitId":"chunweii"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-09-01"},{"lineNumber":51,"author":{"gitId":"chunweii"},"content":"            output +\u003d e.getMessage() + \"\\n\";","lastModifiedDate":"2021-09-01"},{"lineNumber":52,"author":{"gitId":"chunweii"},"content":"            return output;","lastModifiedDate":"2021-09-02"},{"lineNumber":53,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-09-01"},{"lineNumber":54,"author":{"gitId":"chunweii"},"content":"        return output;","lastModifiedDate":"2021-09-01"},{"lineNumber":55,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":56,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":57,"author":{"gitId":"chunweii"},"content":"    public String checkInput(String userInput, Duke duke) {","lastModifiedDate":"2021-09-01"},{"lineNumber":58,"author":{"gitId":"chunweii"},"content":"        return checkInput(userInput, duke.getTaskList(), duke.getStorage());","lastModifiedDate":"2021-09-03"},{"lineNumber":59,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":60,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":61,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":62,"author":{"gitId":"chunweii"},"content":"     * Returns the goodbye message. Called when the user wants to exit the program.","lastModifiedDate":"2021-09-15"},{"lineNumber":63,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":64,"author":{"gitId":"chunweii"},"content":"     * @return the output string","lastModifiedDate":"2021-09-01"},{"lineNumber":65,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":66,"author":{"gitId":"chunweii"},"content":"    public String getGoodByeMessage() {","lastModifiedDate":"2021-09-06"},{"lineNumber":67,"author":{"gitId":"chunweii"},"content":"        return \"Bye, \" + name + \"! Hope to see you again soon.\";","lastModifiedDate":"2021-09-15"},{"lineNumber":68,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":69,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":70,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":71,"author":{"gitId":"chunweii"},"content":"     * Returns the successful add task message.","lastModifiedDate":"2021-09-15"},{"lineNumber":72,"author":{"gitId":"chunweii"},"content":"     * Called when the user successfully adds the task to tasklist.","lastModifiedDate":"2021-09-01"},{"lineNumber":73,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":74,"author":{"gitId":"chunweii"},"content":"     * @param task       the task that is added","lastModifiedDate":"2021-09-01"},{"lineNumber":75,"author":{"gitId":"chunweii"},"content":"     * @param sizeOfList the number of tasks so far","lastModifiedDate":"2021-09-01"},{"lineNumber":76,"author":{"gitId":"chunweii"},"content":"     * @return the output string","lastModifiedDate":"2021-09-01"},{"lineNumber":77,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":78,"author":{"gitId":"chunweii"},"content":"    public String addTaskMessage(Task task, int sizeOfList) {","lastModifiedDate":"2021-09-01"},{"lineNumber":79,"author":{"gitId":"chunweii"},"content":"        return (\"Got it, \" + name + \". I have added this task:\\n\"","lastModifiedDate":"2021-09-01"},{"lineNumber":80,"author":{"gitId":"chunweii"},"content":"            + \"    \" + task + \"\\n\"","lastModifiedDate":"2021-09-01"},{"lineNumber":81,"author":{"gitId":"chunweii"},"content":"            + \"Now you have \" + sizeOfList + \" task\"","lastModifiedDate":"2021-09-01"},{"lineNumber":82,"author":{"gitId":"chunweii"},"content":"            + (sizeOfList \u003c\u003d 1 ? \" in the list\" : \"s in the list\"));","lastModifiedDate":"2021-09-01"},{"lineNumber":83,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":84,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":85,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":86,"author":{"gitId":"chunweii"},"content":"     * Returns the successful remove task message.","lastModifiedDate":"2021-09-15"},{"lineNumber":87,"author":{"gitId":"chunweii"},"content":"     * Called when the user removes a task from the task list.","lastModifiedDate":"2021-09-01"},{"lineNumber":88,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":89,"author":{"gitId":"chunweii"},"content":"     * @param task the task that is removed or deleted","lastModifiedDate":"2021-09-01"},{"lineNumber":90,"author":{"gitId":"chunweii"},"content":"     * @param size the final size of the task list","lastModifiedDate":"2021-09-01"},{"lineNumber":91,"author":{"gitId":"chunweii"},"content":"     * @return the output string","lastModifiedDate":"2021-09-01"},{"lineNumber":92,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":93,"author":{"gitId":"chunweii"},"content":"    public String removeTaskMessage(Task task, int size) {","lastModifiedDate":"2021-09-01"},{"lineNumber":94,"author":{"gitId":"chunweii"},"content":"        return String.format(\"Noted. I\u0027ve removed this task:\\n%s\\n%s\", displayTaskMessage(task),","lastModifiedDate":"2021-09-01"},{"lineNumber":95,"author":{"gitId":"chunweii"},"content":"            displayNumberOfTasks(size));","lastModifiedDate":"2021-09-01"},{"lineNumber":96,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":97,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":98,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":99,"author":{"gitId":"chunweii"},"content":"     * Displays the message when the task is done.","lastModifiedDate":"2021-09-01"},{"lineNumber":100,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":101,"author":{"gitId":"chunweii"},"content":"     * @param task the task that is done","lastModifiedDate":"2021-09-01"},{"lineNumber":102,"author":{"gitId":"chunweii"},"content":"     * @return the output string","lastModifiedDate":"2021-09-01"},{"lineNumber":103,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":104,"author":{"gitId":"chunweii"},"content":"    public String markAsDoneMessage(Task task) {","lastModifiedDate":"2021-09-01"},{"lineNumber":105,"author":{"gitId":"chunweii"},"content":"        return String.format(\"Nice! I\u0027ve marked this task as done:\\n%s\", displayTaskMessage(task));","lastModifiedDate":"2021-09-01"},{"lineNumber":106,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":107,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":108,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":109,"author":{"gitId":"chunweii"},"content":"     * Displays the help message that contains documentations of the commands.","lastModifiedDate":"2021-09-01"},{"lineNumber":110,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":111,"author":{"gitId":"chunweii"},"content":"     * @return the output string","lastModifiedDate":"2021-09-01"},{"lineNumber":112,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":113,"author":{"gitId":"chunweii"},"content":"    public String displayHelpMessage(CommandsEnum input) {","lastModifiedDate":"2021-09-03"},{"lineNumber":114,"author":{"gitId":"chunweii"},"content":"        CommandsEnum cleanedInput \u003d Optional.ofNullable(input).orElse(CommandsEnum.HELP);","lastModifiedDate":"2021-09-06"},{"lineNumber":115,"author":{"gitId":"chunweii"},"content":"        if (cleanedInput \u003d\u003d CommandsEnum.HELP) {","lastModifiedDate":"2021-09-06"},{"lineNumber":116,"author":{"gitId":"chunweii"},"content":"            StringBuilder helpMessageBuilder \u003d new StringBuilder();","lastModifiedDate":"2021-09-06"},{"lineNumber":117,"author":{"gitId":"chunweii"},"content":"            helpMessageBuilder.append(cleanedInput.helpMessage());","lastModifiedDate":"2021-09-06"},{"lineNumber":118,"author":{"gitId":"chunweii"},"content":"            Arrays.stream(CommandsEnum.values()).forEach(commandsEnum -\u003e","lastModifiedDate":"2021-09-06"},{"lineNumber":119,"author":{"gitId":"chunweii"},"content":"                helpMessageBuilder.append(commandsEnum.toString().toLowerCase()).append(\"\\n\"));","lastModifiedDate":"2021-09-06"},{"lineNumber":120,"author":{"gitId":"chunweii"},"content":"            return helpMessageBuilder.toString().trim();","lastModifiedDate":"2021-09-06"},{"lineNumber":121,"author":{"gitId":"chunweii"},"content":"        } else {","lastModifiedDate":"2021-09-01"},{"lineNumber":122,"author":{"gitId":"chunweii"},"content":"            return cleanedInput.helpMessage();","lastModifiedDate":"2021-09-06"},{"lineNumber":123,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-09-01"},{"lineNumber":124,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":125,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":126,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":127,"author":{"gitId":"chunweii"},"content":"     * Outputs all tasks from a list of tasks and task numbers.","lastModifiedDate":"2021-09-01"},{"lineNumber":128,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":129,"author":{"gitId":"chunweii"},"content":"     * @param tasksWithTaskNumbers the list of tasks and task numbers, each in a SimpleImmutableEntry","lastModifiedDate":"2021-09-01"},{"lineNumber":130,"author":{"gitId":"chunweii"},"content":"     * @param maxTaskNumber        the size of the task list. This will ensure proper padding of numbers.","lastModifiedDate":"2021-09-01"},{"lineNumber":131,"author":{"gitId":"chunweii"},"content":"     * @return the output string","lastModifiedDate":"2021-09-01"},{"lineNumber":132,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":133,"author":{"gitId":"chunweii"},"content":"    public String getAllTasksMessage(List\u003cSimpleImmutableEntry\u003c? extends Task, Integer\u003e\u003e tasksWithTaskNumbers,","lastModifiedDate":"2021-09-06"},{"lineNumber":134,"author":{"gitId":"chunweii"},"content":"                                     int maxTaskNumber) {","lastModifiedDate":"2021-09-01"},{"lineNumber":135,"author":{"gitId":"chunweii"},"content":"        return (String.format(\"Ok, %s. I am getting all your tasks:\\n%s\", name,","lastModifiedDate":"2021-09-01"},{"lineNumber":136,"author":{"gitId":"chunweii"},"content":"            getMultipleTasksMessage(tasksWithTaskNumbers, maxTaskNumber)));","lastModifiedDate":"2021-09-01"},{"lineNumber":137,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":138,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":139,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":140,"author":{"gitId":"chunweii"},"content":"     * Outputs all upcoming tasks from a list of tasks and task numbers.","lastModifiedDate":"2021-09-01"},{"lineNumber":141,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":142,"author":{"gitId":"chunweii"},"content":"     * @param tasksWithTaskNumbers the list of tasks and task numbers, each in a SimpleImmutableEntry","lastModifiedDate":"2021-09-01"},{"lineNumber":143,"author":{"gitId":"chunweii"},"content":"     * @param maxTaskNumber        the size of the task list. This will ensure proper padding of numbers.","lastModifiedDate":"2021-09-01"},{"lineNumber":144,"author":{"gitId":"chunweii"},"content":"     * @return the output string","lastModifiedDate":"2021-09-01"},{"lineNumber":145,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":146,"author":{"gitId":"chunweii"},"content":"    public String getUpcomingTasksMessage(","lastModifiedDate":"2021-09-06"},{"lineNumber":147,"author":{"gitId":"chunweii"},"content":"        List\u003cSimpleImmutableEntry\u003c? extends Task, Integer\u003e\u003e tasksWithTaskNumbers,","lastModifiedDate":"2021-09-03"},{"lineNumber":148,"author":{"gitId":"chunweii"},"content":"        int maxTaskNumber) {","lastModifiedDate":"2021-09-01"},{"lineNumber":149,"author":{"gitId":"chunweii"},"content":"        return String.format(\"Ok, %s. I am getting all your upcoming tasks:\\n%s\", name,","lastModifiedDate":"2021-09-01"},{"lineNumber":150,"author":{"gitId":"chunweii"},"content":"            getMultipleTasksMessage(tasksWithTaskNumbers, maxTaskNumber));","lastModifiedDate":"2021-09-01"},{"lineNumber":151,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":152,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":153,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":154,"author":{"gitId":"chunweii"},"content":"     * Outputs all tasks from a list of tasks and task numbers containing a pattern.","lastModifiedDate":"2021-09-01"},{"lineNumber":155,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":156,"author":{"gitId":"chunweii"},"content":"     * @param pattern              the string pattern that the user is searching for","lastModifiedDate":"2021-09-01"},{"lineNumber":157,"author":{"gitId":"chunweii"},"content":"     * @param tasksWithTaskNumbers the list of tasks and task numbers, each in a SimpleImmutableEntry","lastModifiedDate":"2021-09-01"},{"lineNumber":158,"author":{"gitId":"chunweii"},"content":"     * @param maxTaskNumber        the size of the task list. This will ensure proper padding of numbers.","lastModifiedDate":"2021-09-01"},{"lineNumber":159,"author":{"gitId":"chunweii"},"content":"     * @return the output string","lastModifiedDate":"2021-09-01"},{"lineNumber":160,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":161,"author":{"gitId":"chunweii"},"content":"    public String getTasksWithPatternMessage(String pattern,","lastModifiedDate":"2021-09-06"},{"lineNumber":162,"author":{"gitId":"chunweii"},"content":"                                             List\u003cSimpleImmutableEntry\u003c? extends Task, Integer\u003e\u003e tasksWithTaskNumbers,","lastModifiedDate":"2021-09-03"},{"lineNumber":163,"author":{"gitId":"chunweii"},"content":"                                             int maxTaskNumber) {","lastModifiedDate":"2021-09-01"},{"lineNumber":164,"author":{"gitId":"chunweii"},"content":"        return (String.format(\"Ok, %s. I am getting all tasks containing %s:\\n%s\", name, pattern,","lastModifiedDate":"2021-09-01"},{"lineNumber":165,"author":{"gitId":"chunweii"},"content":"            getMultipleTasksMessage(tasksWithTaskNumbers, maxTaskNumber)));","lastModifiedDate":"2021-09-01"},{"lineNumber":166,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":167,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":168,"author":{"gitId":"chunweii"},"content":"    private String getMultipleTasksMessage(","lastModifiedDate":"2021-09-01"},{"lineNumber":169,"author":{"gitId":"chunweii"},"content":"        List\u003cSimpleImmutableEntry\u003c? extends Task, Integer\u003e\u003e tasksWithTaskNumbers,","lastModifiedDate":"2021-09-03"},{"lineNumber":170,"author":{"gitId":"chunweii"},"content":"        int maxTaskNumber) {","lastModifiedDate":"2021-09-01"},{"lineNumber":171,"author":{"gitId":"chunweii"},"content":"        StringBuilder result \u003d new StringBuilder();","lastModifiedDate":"2021-09-01"},{"lineNumber":172,"author":{"gitId":"chunweii"},"content":"        for (SimpleImmutableEntry\u003c? extends Task, Integer\u003e task : tasksWithTaskNumbers) {","lastModifiedDate":"2021-09-03"},{"lineNumber":173,"author":{"gitId":"chunweii"},"content":"            result.append(getSingleTaskMessage(task.getKey(), task.getValue(), maxTaskNumber)).append(\"\\n\");","lastModifiedDate":"2021-09-01"},{"lineNumber":174,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-09-01"},{"lineNumber":175,"author":{"gitId":"chunweii"},"content":"        return result.toString().trim();","lastModifiedDate":"2021-09-01"},{"lineNumber":176,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":177,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":178,"author":{"gitId":"chunweii"},"content":"    private String getSingleTaskMessage(Task task, int number, int max) {","lastModifiedDate":"2021-09-01"},{"lineNumber":179,"author":{"gitId":"chunweii"},"content":"        String leadingSpace \u003d \" \".repeat((int) Math.log10(max) - (int) Math.log10(number));","lastModifiedDate":"2021-09-01"},{"lineNumber":180,"author":{"gitId":"chunweii"},"content":"        // For better formatting if numbers exceed 9","lastModifiedDate":"2021-09-01"},{"lineNumber":181,"author":{"gitId":"chunweii"},"content":"        return String.format(\"%s%d: %s\", leadingSpace, number, task);","lastModifiedDate":"2021-09-02"},{"lineNumber":182,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":183,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":184,"author":{"gitId":"chunweii"},"content":"    private String displayTaskMessage(Task task) {","lastModifiedDate":"2021-09-01"},{"lineNumber":185,"author":{"gitId":"chunweii"},"content":"        return (\"    \" + task);","lastModifiedDate":"2021-09-01"},{"lineNumber":186,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":187,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":188,"author":{"gitId":"chunweii"},"content":"    private String displayNumberOfTasks(int num) {","lastModifiedDate":"2021-09-01"},{"lineNumber":189,"author":{"gitId":"chunweii"},"content":"        return (\"Now you have \" + num + \" task\"","lastModifiedDate":"2021-09-01"},{"lineNumber":190,"author":{"gitId":"chunweii"},"content":"            + (num \u003c\u003d 1 ? \" in the list\" : \"s in the list\"));","lastModifiedDate":"2021-09-01"},{"lineNumber":191,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":192,"author":{"gitId":"chunweii"},"content":"}","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"chunweii":192}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"chunweii"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":2,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"chunweii"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"chunweii"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"chunweii"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2021-09-14"},{"lineNumber":6,"author":{"gitId":"chunweii"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-09-15"},{"lineNumber":7,"author":{"gitId":"chunweii"},"content":"\u003cfx:root xmlns:fx\u003d\"http://javafx.com/fxml/1\" alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\"","lastModifiedDate":"2021-09-05"},{"lineNumber":8,"author":{"gitId":"chunweii"},"content":"         maxWidth\u003d\"1.7976931348623157E308\"","lastModifiedDate":"2021-09-05"},{"lineNumber":9,"author":{"gitId":"chunweii"},"content":"         prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\"","lastModifiedDate":"2021-09-03"},{"lineNumber":10,"author":{"gitId":"chunweii"},"content":"         style\u003d\"-fx-background-color: linear-gradient(to right, silver, thistle); -fx-padding: 10px\" spacing\u003d\"20\"\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"chunweii"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"chunweii"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\"/\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":13,"author":{"gitId":"chunweii"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"chunweii"},"content":"    \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"","lastModifiedDate":"2021-09-14"},{"lineNumber":15,"author":{"gitId":"chunweii"},"content":"           style\u003d\"-fx-background-color: #594575;","lastModifiedDate":"2021-09-14"},{"lineNumber":16,"author":{"gitId":"chunweii"},"content":"            -fx-padding: 7px; -fx-border-radius: 3px;","lastModifiedDate":"2021-09-14"},{"lineNumber":17,"author":{"gitId":"chunweii"},"content":"             -fx-background-radius: 5px;","lastModifiedDate":"2021-09-14"},{"lineNumber":18,"author":{"gitId":"chunweii"},"content":"              -fx-background-insets: 0,1;","lastModifiedDate":"2021-09-14"},{"lineNumber":19,"author":{"gitId":"chunweii"},"content":"               -fx-font-family: \u0027Consolas\u0027, \u0027monospace\u0027;\"","lastModifiedDate":"2021-09-14"},{"lineNumber":20,"author":{"gitId":"chunweii"},"content":"           textFill\u003d\"#e1e0e0\"","lastModifiedDate":"2021-09-15"},{"lineNumber":21,"author":{"gitId":"chunweii"},"content":"           ellipsisString\u003d\"\"/\u003e","lastModifiedDate":"2021-09-15"},{"lineNumber":22,"author":{"gitId":"chunweii"},"content":"    \u003cImageView fx:id\u003d\"circleDisplayPicture\"/\u003e","lastModifiedDate":"2021-09-14"},{"lineNumber":23,"author":{"gitId":"chunweii"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"chunweii":23}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"chunweii"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":2,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"chunweii"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2021-09-05"},{"lineNumber":4,"author":{"gitId":"chunweii"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2021-09-05"},{"lineNumber":5,"author":{"gitId":"chunweii"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2021-09-05"},{"lineNumber":6,"author":{"gitId":"chunweii"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2021-09-05"},{"lineNumber":7,"author":{"gitId":"chunweii"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-09-05"},{"lineNumber":8,"author":{"gitId":"chunweii"},"content":"\u003cAnchorPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\"","lastModifiedDate":"2021-09-15"},{"lineNumber":9,"author":{"gitId":"chunweii"},"content":"            minWidth\u003d\"-Infinity\"","lastModifiedDate":"2021-09-15"},{"lineNumber":10,"author":{"gitId":"chunweii"},"content":"            prefHeight\u003d\"600.0\" prefWidth\u003d\"500.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.2\"","lastModifiedDate":"2021-09-05"},{"lineNumber":11,"author":{"gitId":"chunweii"},"content":"            fx:controller\u003d\"duke.ui.MainWindow\"\u003e","lastModifiedDate":"2021-09-05"},{"lineNumber":12,"author":{"gitId":"chunweii"},"content":"    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"42.0\"","lastModifiedDate":"2021-09-05"},{"lineNumber":13,"author":{"gitId":"chunweii"},"content":"               AnchorPane.bottomAnchor\u003d\"1.0\" AnchorPane.leftAnchor\u003d\"1.0\" AnchorPane.rightAnchor\u003d\"92.60000000000002\"/\u003e","lastModifiedDate":"2021-09-05"},{"lineNumber":14,"author":{"gitId":"chunweii"},"content":"    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\"","lastModifiedDate":"2021-09-05"},{"lineNumber":15,"author":{"gitId":"chunweii"},"content":"            prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" AnchorPane.bottomAnchor\u003d\"1.0\" AnchorPane.rightAnchor\u003d\"1.0\"/\u003e","lastModifiedDate":"2021-09-05"},{"lineNumber":16,"author":{"gitId":"chunweii"},"content":"    \u003cScrollPane fx:id\u003d\"scrollPane\" fitToWidth\u003d\"true\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" style\u003d\"-fx-font-size: 18px;\"","lastModifiedDate":"2021-09-05"},{"lineNumber":17,"author":{"gitId":"chunweii"},"content":"                vbarPolicy\u003d\"ALWAYS\" vvalue\u003d\"1.0\" AnchorPane.bottomAnchor\u003d\"45.0\" AnchorPane.leftAnchor\u003d\"0.0\"","lastModifiedDate":"2021-09-05"},{"lineNumber":18,"author":{"gitId":"chunweii"},"content":"                AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e","lastModifiedDate":"2021-09-05"},{"lineNumber":19,"author":{"gitId":"chunweii"},"content":"        \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" style\u003d\"-fx-font-size: 14px;\"/\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":20,"author":{"gitId":"chunweii"},"content":"    \u003c/ScrollPane\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":21,"author":{"gitId":"chunweii"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"chunweii":21}},{"path":"src/test/java/CommandParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chunweii"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-08"},{"lineNumber":2,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":3,"author":{"gitId":"chunweii"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2021-09-08"},{"lineNumber":4,"author":{"gitId":"chunweii"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-09-08"},{"lineNumber":5,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":6,"author":{"gitId":"chunweii"},"content":"import duke.Duke;","lastModifiedDate":"2021-09-08"},{"lineNumber":7,"author":{"gitId":"chunweii"},"content":"import duke.exception.InvalidCommandException;","lastModifiedDate":"2021-09-08"},{"lineNumber":8,"author":{"gitId":"chunweii"},"content":"import duke.exception.InvalidTaskNumberException;","lastModifiedDate":"2021-09-08"},{"lineNumber":9,"author":{"gitId":"chunweii"},"content":"import duke.logic.CommandParser;","lastModifiedDate":"2021-09-08"},{"lineNumber":10,"author":{"gitId":"chunweii"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-08"},{"lineNumber":11,"author":{"gitId":"chunweii"},"content":"import stub.DukeStub;","lastModifiedDate":"2021-09-08"},{"lineNumber":12,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":13,"author":{"gitId":"chunweii"},"content":"public class CommandParserTest {","lastModifiedDate":"2021-09-08"},{"lineNumber":14,"author":{"gitId":"chunweii"},"content":"    private final Duke duke;","lastModifiedDate":"2021-09-08"},{"lineNumber":15,"author":{"gitId":"chunweii"},"content":"    private final Ui ui;","lastModifiedDate":"2021-09-08"},{"lineNumber":16,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":17,"author":{"gitId":"chunweii"},"content":"    CommandParserTest() throws IOException {","lastModifiedDate":"2021-09-08"},{"lineNumber":18,"author":{"gitId":"chunweii"},"content":"        duke \u003d new DukeStub();","lastModifiedDate":"2021-09-08"},{"lineNumber":19,"author":{"gitId":"chunweii"},"content":"        ui \u003d new Ui(\"Test user\");","lastModifiedDate":"2021-09-08"},{"lineNumber":20,"author":{"gitId":"chunweii"},"content":"        ui.checkInput(\"todo hello\", duke);","lastModifiedDate":"2021-09-08"},{"lineNumber":21,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":22,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":23,"author":{"gitId":"chunweii"},"content":"    @Test","lastModifiedDate":"2021-09-08"},{"lineNumber":24,"author":{"gitId":"chunweii"},"content":"    void testInvalidCommand() {","lastModifiedDate":"2021-09-08"},{"lineNumber":25,"author":{"gitId":"chunweii"},"content":"        Assertions.assertThrows(InvalidCommandException.class, () -\u003e {","lastModifiedDate":"2021-09-08"},{"lineNumber":26,"author":{"gitId":"chunweii"},"content":"            CommandParser c \u003d new CommandParser(\"hello\", duke.getTaskList(), duke.getStorage(), ui);","lastModifiedDate":"2021-09-08"},{"lineNumber":27,"author":{"gitId":"chunweii"},"content":"        });","lastModifiedDate":"2021-09-08"},{"lineNumber":28,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":29,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":30,"author":{"gitId":"chunweii"},"content":"    @Test","lastModifiedDate":"2021-09-08"},{"lineNumber":31,"author":{"gitId":"chunweii"},"content":"    void testInvalidTaskCommand() {","lastModifiedDate":"2021-09-08"},{"lineNumber":32,"author":{"gitId":"chunweii"},"content":"        Assertions.assertThrows(InvalidCommandException.class, () -\u003e {","lastModifiedDate":"2021-09-08"},{"lineNumber":33,"author":{"gitId":"chunweii"},"content":"            CommandParser c \u003d new CommandParser(\"todo\", duke.getTaskList(), duke.getStorage(), ui);","lastModifiedDate":"2021-09-08"},{"lineNumber":34,"author":{"gitId":"chunweii"},"content":"        });","lastModifiedDate":"2021-09-08"},{"lineNumber":35,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":36,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":37,"author":{"gitId":"chunweii"},"content":"    @Test","lastModifiedDate":"2021-09-08"},{"lineNumber":38,"author":{"gitId":"chunweii"},"content":"    void testInvalidTasklistNumber() {","lastModifiedDate":"2021-09-08"},{"lineNumber":39,"author":{"gitId":"chunweii"},"content":"        Assertions.assertThrows(InvalidTaskNumberException.class, () -\u003e","lastModifiedDate":"2021-09-08"},{"lineNumber":40,"author":{"gitId":"chunweii"},"content":"            new CommandParser(\"done 3\", duke.getTaskList(), duke.getStorage(), ui));","lastModifiedDate":"2021-09-08"},{"lineNumber":41,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":42,"author":{"gitId":"chunweii"},"content":"}","lastModifiedDate":"2021-09-08"}],"authorContributionMap":{"chunweii":42}},{"path":"src/test/java/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chunweii"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-09-08"},{"lineNumber":2,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":3,"author":{"gitId":"chunweii"},"content":"import java.io.File;","lastModifiedDate":"2021-09-08"},{"lineNumber":4,"author":{"gitId":"chunweii"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-08"},{"lineNumber":5,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":6,"author":{"gitId":"chunweii"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-09-08"},{"lineNumber":7,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":8,"author":{"gitId":"chunweii"},"content":"import duke.Duke;","lastModifiedDate":"2021-09-08"},{"lineNumber":9,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":10,"author":{"gitId":"chunweii"},"content":"public class DukeTest {","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"chunweii"},"content":"    private final Duke duke;","lastModifiedDate":"2021-09-08"},{"lineNumber":12,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":13,"author":{"gitId":"chunweii"},"content":"    DukeTest() throws IOException {","lastModifiedDate":"2021-09-08"},{"lineNumber":14,"author":{"gitId":"chunweii"},"content":"        File file \u003d new File(\"testFile.db\");","lastModifiedDate":"2021-09-08"},{"lineNumber":15,"author":{"gitId":"chunweii"},"content":"        file.deleteOnExit();","lastModifiedDate":"2021-09-08"},{"lineNumber":16,"author":{"gitId":"chunweii"},"content":"        duke \u003d new Duke(\"testFile.db\");","lastModifiedDate":"2021-09-08"},{"lineNumber":17,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":18,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":19,"author":{"gitId":"chunweii"},"content":"    @Test","lastModifiedDate":"2021-09-08"},{"lineNumber":20,"author":{"gitId":"chunweii"},"content":"    void testNotNull() {","lastModifiedDate":"2021-09-08"},{"lineNumber":21,"author":{"gitId":"chunweii"},"content":"        assertNotEquals(null, duke.getStorage());","lastModifiedDate":"2021-09-08"},{"lineNumber":22,"author":{"gitId":"chunweii"},"content":"        assertNotEquals(null, duke.getTaskList());","lastModifiedDate":"2021-09-08"},{"lineNumber":23,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":24,"author":{"gitId":"chunweii"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"chunweii":24}},{"path":"src/test/java/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chunweii"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-09-08"},{"lineNumber":2,"author":{"gitId":"chunweii"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-09-08"},{"lineNumber":3,"author":{"gitId":"chunweii"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-09-08"},{"lineNumber":4,"author":{"gitId":"chunweii"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-09-08"},{"lineNumber":5,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":6,"author":{"gitId":"chunweii"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-08"},{"lineNumber":7,"author":{"gitId":"chunweii"},"content":"import java.util.AbstractMap;","lastModifiedDate":"2021-09-08"},{"lineNumber":8,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":9,"author":{"gitId":"chunweii"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"chunweii"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-09-08"},{"lineNumber":12,"author":{"gitId":"chunweii"},"content":"import duke.exception.InvalidTaskNumberException;","lastModifiedDate":"2021-09-08"},{"lineNumber":13,"author":{"gitId":"chunweii"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"chunweii"},"content":"import duke.task.TasksEnum;","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"chunweii"},"content":"import duke.task.Todo;","lastModifiedDate":"2021-09-08"},{"lineNumber":16,"author":{"gitId":"chunweii"},"content":"import stub.TaskStub;","lastModifiedDate":"2021-09-08"},{"lineNumber":17,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"chunweii"},"content":"class TaskListTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"chunweii"},"content":"    private static final int LIMIT \u003d 5;","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"chunweii"},"content":"    private final TaskList taskList;","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"chunweii"},"content":"    TaskListTest() {","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"chunweii"},"content":"        taskList \u003d new TaskList(LIMIT);","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"chunweii"},"content":"        for (int i \u003d 0; i \u003c 4; i++) {","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"chunweii"},"content":"            taskList.addTask(TasksEnum.TODO.getTask(\"Hello World\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"chunweii"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"chunweii"},"content":"        taskList.markAsDone(1);","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"chunweii"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"chunweii"},"content":"    void testAddTask() {","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"chunweii"},"content":"        assertEquals(4, taskList.size());","lastModifiedDate":"2021-09-08"},{"lineNumber":33,"author":{"gitId":"chunweii"},"content":"        taskList.addTask(new TaskStub(\"\", null));","lastModifiedDate":"2021-09-08"},{"lineNumber":34,"author":{"gitId":"chunweii"},"content":"        assertThrows(InvalidTaskNumberException.class, () -\u003e","lastModifiedDate":"2021-09-08"},{"lineNumber":35,"author":{"gitId":"chunweii"},"content":"                taskList.addTask(TasksEnum.DEADLINE.getTask(\"get a gf /by 9/12/2023\")),","lastModifiedDate":"2021-09-08"},{"lineNumber":36,"author":{"gitId":"chunweii"},"content":"            \"Task list exceeded hard limit\");","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"chunweii"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"chunweii"},"content":"    void testDoubleMarkedAsDone() {","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"chunweii"},"content":"        assertFalse(taskList.markAsDone(1));","lastModifiedDate":"2021-09-08"},{"lineNumber":42,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"chunweii"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"chunweii"},"content":"    void testSuccessfulMarkedDone() {","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"chunweii"},"content":"        assertTrue(taskList.getTask(1).isDone());","lastModifiedDate":"2021-09-08"},{"lineNumber":47,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"chunweii"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"chunweii"},"content":"    void testEmptyTaskList() {","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"chunweii"},"content":"        TaskList tl \u003d new TaskList(1);","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"chunweii"},"content":"        assertThrows(DukeException.class, () -\u003e tl.removeTask(1));","lastModifiedDate":"2021-09-08"},{"lineNumber":53,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":54,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":55,"author":{"gitId":"chunweii"},"content":"    @Test","lastModifiedDate":"2021-09-08"},{"lineNumber":56,"author":{"gitId":"chunweii"},"content":"    void testUpcomingExpired() {","lastModifiedDate":"2021-09-08"},{"lineNumber":57,"author":{"gitId":"chunweii"},"content":"        TaskList tl \u003d new TaskList(9);","lastModifiedDate":"2021-09-08"},{"lineNumber":58,"author":{"gitId":"chunweii"},"content":"        tl.addTask(new TaskStub(\"First\", LocalDateTime.of(2004, 12, 31, 19, 21)));","lastModifiedDate":"2021-09-08"},{"lineNumber":59,"author":{"gitId":"chunweii"},"content":"        tl.addTask(new TaskStub(\"Second\", LocalDateTime.of(2002, 12, 31, 19, 21)));","lastModifiedDate":"2021-09-08"},{"lineNumber":60,"author":{"gitId":"chunweii"},"content":"        tl.addTask(new TaskStub(\"Third\", LocalDateTime.of(2003, 11, 30, 19, 21)));","lastModifiedDate":"2021-09-08"},{"lineNumber":61,"author":{"gitId":"chunweii"},"content":"        tl.addTask(new TaskStub(\"Fourth\", LocalDateTime.of(2003, 12, 2, 19, 21)));","lastModifiedDate":"2021-09-08"},{"lineNumber":62,"author":{"gitId":"chunweii"},"content":"        tl.addTask(new TaskStub(\"Fifth\", LocalDateTime.of(2003, 12, 31, 19, 20)));","lastModifiedDate":"2021-09-08"},{"lineNumber":63,"author":{"gitId":"chunweii"},"content":"        tl.addTask(new TaskStub(\"Sixth\", LocalDateTime.of(2003, 12, 31, 19, 21)));","lastModifiedDate":"2021-09-08"},{"lineNumber":64,"author":{"gitId":"chunweii"},"content":"        tl.addTask(new TaskStub(\"Seventh\", LocalDateTime.of(2003, 10, 31, 19, 21)));","lastModifiedDate":"2021-09-08"},{"lineNumber":65,"author":{"gitId":"chunweii"},"content":"        tl.addTask(new TaskStub(\"Eighth\", LocalDateTime.of(2003, 12, 31, 19, 21)));","lastModifiedDate":"2021-09-08"},{"lineNumber":66,"author":{"gitId":"chunweii"},"content":"        assertEquals(0, tl.getUpcomingTasks().size());","lastModifiedDate":"2021-09-08"},{"lineNumber":67,"author":{"gitId":"chunweii"},"content":"        tl.addTask(new Todo(\"Zeroth\"));","lastModifiedDate":"2021-09-08"},{"lineNumber":68,"author":{"gitId":"chunweii"},"content":"        assertEquals(1, tl.getUpcomingTasks().size());","lastModifiedDate":"2021-09-08"},{"lineNumber":69,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":70,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":71,"author":{"gitId":"chunweii"},"content":"    @Test","lastModifiedDate":"2021-09-08"},{"lineNumber":72,"author":{"gitId":"chunweii"},"content":"    void testUpcomingDone() {","lastModifiedDate":"2021-09-08"},{"lineNumber":73,"author":{"gitId":"chunweii"},"content":"        TaskList tl \u003d new TaskList(9);","lastModifiedDate":"2021-09-08"},{"lineNumber":74,"author":{"gitId":"chunweii"},"content":"        tl.addTask(new Todo(\"Zeroth\")); // 8","lastModifiedDate":"2021-09-08"},{"lineNumber":75,"author":{"gitId":"chunweii"},"content":"        tl.addTask(new TaskStub(\"First\", LocalDateTime.of(2024, 12, 31, 19, 21))); // 7","lastModifiedDate":"2021-09-08"},{"lineNumber":76,"author":{"gitId":"chunweii"},"content":"        tl.addTask(new TaskStub(\"Second\", LocalDateTime.of(2022, 12, 31, 19, 21))); // 0","lastModifiedDate":"2021-09-08"},{"lineNumber":77,"author":{"gitId":"chunweii"},"content":"        tl.addTask(new TaskStub(\"Third\", LocalDateTime.of(2023, 11, 30, 19, 21))); // 2","lastModifiedDate":"2021-09-08"},{"lineNumber":78,"author":{"gitId":"chunweii"},"content":"        tl.addTask(new TaskStub(\"Fourth\", LocalDateTime.of(2023, 12, 2, 19, 21))); // 3","lastModifiedDate":"2021-09-08"},{"lineNumber":79,"author":{"gitId":"chunweii"},"content":"        tl.addTask(new TaskStub(\"Fifth\", LocalDateTime.of(2023, 12, 31, 19, 20))); // 4","lastModifiedDate":"2021-09-08"},{"lineNumber":80,"author":{"gitId":"chunweii"},"content":"        tl.addTask(new TaskStub(\"Sixth\", LocalDateTime.of(2023, 12, 31, 19, 21))); // 5","lastModifiedDate":"2021-09-08"},{"lineNumber":81,"author":{"gitId":"chunweii"},"content":"        tl.addTask(new TaskStub(\"Seventh\", LocalDateTime.of(2023, 10, 31, 19, 21))); // 1","lastModifiedDate":"2021-09-08"},{"lineNumber":82,"author":{"gitId":"chunweii"},"content":"        tl.addTask(new TaskStub(\"Eighth\", LocalDateTime.of(2023, 12, 31, 19, 21))); // 6","lastModifiedDate":"2021-09-08"},{"lineNumber":83,"author":{"gitId":"chunweii"},"content":"        tl.getTask(5).markAsDone();","lastModifiedDate":"2021-09-08"},{"lineNumber":84,"author":{"gitId":"chunweii"},"content":"        assertFalse(","lastModifiedDate":"2021-09-08"},{"lineNumber":85,"author":{"gitId":"chunweii"},"content":"            tl.getUpcomingTasks().stream().map(AbstractMap.SimpleImmutableEntry::getValue).anyMatch(x -\u003e x \u003d\u003d 5),","lastModifiedDate":"2021-09-08"},{"lineNumber":86,"author":{"gitId":"chunweii"},"content":"            \"Task 5 is still in the upcoming\");","lastModifiedDate":"2021-09-08"},{"lineNumber":87,"author":{"gitId":"chunweii"},"content":"        assertEquals(8, tl.getUpcomingTasks().size(), \"Wrong size of task.\");","lastModifiedDate":"2021-09-08"},{"lineNumber":88,"author":{"gitId":"chunweii"},"content":"        assertEquals(7, tl.getUpcomingTasks().get(4).getValue(), \"Task 7 should be in position 4\");","lastModifiedDate":"2021-09-08"},{"lineNumber":89,"author":{"gitId":"chunweii"},"content":"        assertEquals(1, tl.getUpcomingTasks().get(7).getValue(), \"Todo item must be last\");","lastModifiedDate":"2021-09-08"},{"lineNumber":90,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":91,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":92,"author":{"gitId":"chunweii"},"content":"    @Test","lastModifiedDate":"2021-09-08"},{"lineNumber":93,"author":{"gitId":"chunweii"},"content":"    void testTaskFinder() {","lastModifiedDate":"2021-09-08"},{"lineNumber":94,"author":{"gitId":"chunweii"},"content":"        TaskList tl \u003d new TaskList(5);","lastModifiedDate":"2021-09-08"},{"lineNumber":95,"author":{"gitId":"chunweii"},"content":"        tl.addTask(new Todo(\"One: hello 123\"));","lastModifiedDate":"2021-09-08"},{"lineNumber":96,"author":{"gitId":"chunweii"},"content":"        tl.addTask(new Todo(\"Two: bye 123\"));","lastModifiedDate":"2021-09-08"},{"lineNumber":97,"author":{"gitId":"chunweii"},"content":"        tl.addTask(new Todo(\"Three: hello bye 123\"));","lastModifiedDate":"2021-09-08"},{"lineNumber":98,"author":{"gitId":"chunweii"},"content":"        tl.addTask(new Todo(\"Four: lo bye\"));","lastModifiedDate":"2021-09-08"},{"lineNumber":99,"author":{"gitId":"chunweii"},"content":"        tl.addTask(new Todo(\"Five: hey\"));","lastModifiedDate":"2021-09-08"},{"lineNumber":100,"author":{"gitId":"chunweii"},"content":"        assertEquals(\"Two: bye 123\", tl.getTasksContaining(\"by\").get(0).getKey().getDescription());","lastModifiedDate":"2021-09-08"},{"lineNumber":101,"author":{"gitId":"chunweii"},"content":"        assertEquals(\"Five: hey\", tl.getTasksContaining(\" hEy\").get(0).getKey().getDescription());","lastModifiedDate":"2021-09-08"},{"lineNumber":102,"author":{"gitId":"chunweii"},"content":"        assertEquals(0, tl.getTasksContaining(\"ok\").size());","lastModifiedDate":"2021-09-08"},{"lineNumber":103,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":104,"author":{"gitId":"chunweii"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"chunweii":104}},{"path":"src/test/java/UiTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chunweii"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-08"},{"lineNumber":2,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":3,"author":{"gitId":"chunweii"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2021-09-08"},{"lineNumber":4,"author":{"gitId":"chunweii"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-09-08"},{"lineNumber":5,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":6,"author":{"gitId":"chunweii"},"content":"import duke.Duke;","lastModifiedDate":"2021-09-08"},{"lineNumber":7,"author":{"gitId":"chunweii"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-08"},{"lineNumber":8,"author":{"gitId":"chunweii"},"content":"import stub.DukeStub;","lastModifiedDate":"2021-09-08"},{"lineNumber":9,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":10,"author":{"gitId":"chunweii"},"content":"public class UiTest {","lastModifiedDate":"2021-09-08"},{"lineNumber":11,"author":{"gitId":"chunweii"},"content":"    private final Ui ui;","lastModifiedDate":"2021-09-08"},{"lineNumber":12,"author":{"gitId":"chunweii"},"content":"    private final Duke duke;","lastModifiedDate":"2021-09-08"},{"lineNumber":13,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":14,"author":{"gitId":"chunweii"},"content":"    UiTest() throws IOException {","lastModifiedDate":"2021-09-08"},{"lineNumber":15,"author":{"gitId":"chunweii"},"content":"        ui \u003d new Ui(\"Test user\");","lastModifiedDate":"2021-09-08"},{"lineNumber":16,"author":{"gitId":"chunweii"},"content":"        duke \u003d new DukeStub();","lastModifiedDate":"2021-09-08"},{"lineNumber":17,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":18,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":19,"author":{"gitId":"chunweii"},"content":"    @Test","lastModifiedDate":"2021-09-08"},{"lineNumber":20,"author":{"gitId":"chunweii"},"content":"    void testBye() {","lastModifiedDate":"2021-09-08"},{"lineNumber":21,"author":{"gitId":"chunweii"},"content":"        Ui ui \u003d new Ui(\"Test bye\");","lastModifiedDate":"2021-09-08"},{"lineNumber":22,"author":{"gitId":"chunweii"},"content":"        ui.checkInput(\"bye\", duke);","lastModifiedDate":"2021-09-08"},{"lineNumber":23,"author":{"gitId":"chunweii"},"content":"        Assertions.assertTrue(ui.willExit());","lastModifiedDate":"2021-09-08"},{"lineNumber":24,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":25,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":26,"author":{"gitId":"chunweii"},"content":"}","lastModifiedDate":"2021-09-08"}],"authorContributionMap":{"chunweii":26}},{"path":"src/test/java/stub/DukeStub.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chunweii"},"content":"package stub;","lastModifiedDate":"2021-09-08"},{"lineNumber":2,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":3,"author":{"gitId":"chunweii"},"content":"import java.io.File;","lastModifiedDate":"2021-09-08"},{"lineNumber":4,"author":{"gitId":"chunweii"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-08"},{"lineNumber":5,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":6,"author":{"gitId":"chunweii"},"content":"import duke.Duke;","lastModifiedDate":"2021-09-08"},{"lineNumber":7,"author":{"gitId":"chunweii"},"content":"import duke.logic.Storage;","lastModifiedDate":"2021-09-08"},{"lineNumber":8,"author":{"gitId":"chunweii"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-09-08"},{"lineNumber":9,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":10,"author":{"gitId":"chunweii"},"content":"/**","lastModifiedDate":"2021-09-08"},{"lineNumber":11,"author":{"gitId":"chunweii"},"content":" * A dummy class for Duke that does not support CLI.","lastModifiedDate":"2021-09-08"},{"lineNumber":12,"author":{"gitId":"chunweii"},"content":" */","lastModifiedDate":"2021-09-08"},{"lineNumber":13,"author":{"gitId":"chunweii"},"content":"public class DukeStub extends Duke {","lastModifiedDate":"2021-09-08"},{"lineNumber":14,"author":{"gitId":"chunweii"},"content":"    private final TaskList taskList;","lastModifiedDate":"2021-09-08"},{"lineNumber":15,"author":{"gitId":"chunweii"},"content":"    private final Storage storage;","lastModifiedDate":"2021-09-08"},{"lineNumber":16,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":17,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":18,"author":{"gitId":"chunweii"},"content":"     * Creates a new dummy Duke stub.","lastModifiedDate":"2021-09-08"},{"lineNumber":19,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-09-08"},{"lineNumber":20,"author":{"gitId":"chunweii"},"content":"     * @throws IOException when there is a problem creating the temporary test file.","lastModifiedDate":"2021-09-08"},{"lineNumber":21,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":22,"author":{"gitId":"chunweii"},"content":"    public DukeStub() throws IOException {","lastModifiedDate":"2021-09-08"},{"lineNumber":23,"author":{"gitId":"chunweii"},"content":"        super(\"testFile.db\");","lastModifiedDate":"2021-09-08"},{"lineNumber":24,"author":{"gitId":"chunweii"},"content":"        taskList \u003d new TaskList();","lastModifiedDate":"2021-09-08"},{"lineNumber":25,"author":{"gitId":"chunweii"},"content":"        storage \u003d new StorageStub();","lastModifiedDate":"2021-09-08"},{"lineNumber":26,"author":{"gitId":"chunweii"},"content":"        File file \u003d new File(\"testFile.db\");","lastModifiedDate":"2021-09-08"},{"lineNumber":27,"author":{"gitId":"chunweii"},"content":"        file.delete();","lastModifiedDate":"2021-09-08"},{"lineNumber":28,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":29,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":30,"author":{"gitId":"chunweii"},"content":"    public DukeStub(String filePath) throws IOException {","lastModifiedDate":"2021-09-08"},{"lineNumber":31,"author":{"gitId":"chunweii"},"content":"        this();","lastModifiedDate":"2021-09-08"},{"lineNumber":32,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":33,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":34,"author":{"gitId":"chunweii"},"content":"    @Override","lastModifiedDate":"2021-09-08"},{"lineNumber":35,"author":{"gitId":"chunweii"},"content":"    public TaskList getTaskList() {","lastModifiedDate":"2021-09-08"},{"lineNumber":36,"author":{"gitId":"chunweii"},"content":"        return taskList;","lastModifiedDate":"2021-09-08"},{"lineNumber":37,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":38,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":39,"author":{"gitId":"chunweii"},"content":"    @Override","lastModifiedDate":"2021-09-08"},{"lineNumber":40,"author":{"gitId":"chunweii"},"content":"    public Storage getStorage() {","lastModifiedDate":"2021-09-08"},{"lineNumber":41,"author":{"gitId":"chunweii"},"content":"        return storage;","lastModifiedDate":"2021-09-08"},{"lineNumber":42,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":43,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":44,"author":{"gitId":"chunweii"},"content":"    @Override","lastModifiedDate":"2021-09-08"},{"lineNumber":45,"author":{"gitId":"chunweii"},"content":"    public void run() {","lastModifiedDate":"2021-09-08"},{"lineNumber":46,"author":{"gitId":"chunweii"},"content":"        // Should not run","lastModifiedDate":"2021-09-08"},{"lineNumber":47,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":48,"author":{"gitId":"chunweii"},"content":"}","lastModifiedDate":"2021-09-08"}],"authorContributionMap":{"chunweii":48}},{"path":"src/test/java/stub/StorageStub.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chunweii"},"content":"package stub;","lastModifiedDate":"2021-09-08"},{"lineNumber":2,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":3,"author":{"gitId":"chunweii"},"content":"import java.io.File;","lastModifiedDate":"2021-09-08"},{"lineNumber":4,"author":{"gitId":"chunweii"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-08"},{"lineNumber":5,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":6,"author":{"gitId":"chunweii"},"content":"import duke.logic.Storage;","lastModifiedDate":"2021-09-08"},{"lineNumber":7,"author":{"gitId":"chunweii"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-09-08"},{"lineNumber":8,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":9,"author":{"gitId":"chunweii"},"content":"public class StorageStub extends Storage {","lastModifiedDate":"2021-09-08"},{"lineNumber":10,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":11,"author":{"gitId":"chunweii"},"content":"     * Creates a new instance of a storage stub that does not save anything.","lastModifiedDate":"2021-09-08"},{"lineNumber":12,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":13,"author":{"gitId":"chunweii"},"content":"    public StorageStub() throws IOException {","lastModifiedDate":"2021-09-08"},{"lineNumber":14,"author":{"gitId":"chunweii"},"content":"        super(\"testFile.db\", new TaskList());","lastModifiedDate":"2021-09-08"},{"lineNumber":15,"author":{"gitId":"chunweii"},"content":"        File file \u003d new File(\"testFile.db\");","lastModifiedDate":"2021-09-08"},{"lineNumber":16,"author":{"gitId":"chunweii"},"content":"        file.delete();","lastModifiedDate":"2021-09-08"},{"lineNumber":17,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":18,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":19,"author":{"gitId":"chunweii"},"content":"    @Override","lastModifiedDate":"2021-09-08"},{"lineNumber":20,"author":{"gitId":"chunweii"},"content":"    public void updateDukeTextFile() {","lastModifiedDate":"2021-09-08"},{"lineNumber":21,"author":{"gitId":"chunweii"},"content":"        // do nothing","lastModifiedDate":"2021-09-08"},{"lineNumber":22,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":23,"author":{"gitId":"chunweii"},"content":"}","lastModifiedDate":"2021-09-08"}],"authorContributionMap":{"chunweii":23}},{"path":"src/test/java/stub/TaskStub.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chunweii"},"content":"package stub;","lastModifiedDate":"2021-09-08"},{"lineNumber":2,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":3,"author":{"gitId":"chunweii"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-08"},{"lineNumber":4,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":5,"author":{"gitId":"chunweii"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-08"},{"lineNumber":6,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":7,"author":{"gitId":"chunweii"},"content":"/**","lastModifiedDate":"2021-09-08"},{"lineNumber":8,"author":{"gitId":"chunweii"},"content":" * A dummy class for Task.","lastModifiedDate":"2021-09-08"},{"lineNumber":9,"author":{"gitId":"chunweii"},"content":" */","lastModifiedDate":"2021-09-08"},{"lineNumber":10,"author":{"gitId":"chunweii"},"content":"public class TaskStub extends Task {","lastModifiedDate":"2021-09-08"},{"lineNumber":11,"author":{"gitId":"chunweii"},"content":"    private final LocalDateTime dateTime;","lastModifiedDate":"2021-09-08"},{"lineNumber":12,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":13,"author":{"gitId":"chunweii"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":14,"author":{"gitId":"chunweii"},"content":"     * Creates a new task object with the description and type of task.","lastModifiedDate":"2021-09-08"},{"lineNumber":15,"author":{"gitId":"chunweii"},"content":"     *","lastModifiedDate":"2021-09-08"},{"lineNumber":16,"author":{"gitId":"chunweii"},"content":"     * @param description The description of the task","lastModifiedDate":"2021-09-08"},{"lineNumber":17,"author":{"gitId":"chunweii"},"content":"     * @param dateTime    The date and time of this task","lastModifiedDate":"2021-09-08"},{"lineNumber":18,"author":{"gitId":"chunweii"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":19,"author":{"gitId":"chunweii"},"content":"    public TaskStub(String description, LocalDateTime dateTime) {","lastModifiedDate":"2021-09-08"},{"lineNumber":20,"author":{"gitId":"chunweii"},"content":"        super(description, \"S\");","lastModifiedDate":"2021-09-08"},{"lineNumber":21,"author":{"gitId":"chunweii"},"content":"        this.dateTime \u003d dateTime;","lastModifiedDate":"2021-09-08"},{"lineNumber":22,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":23,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":24,"author":{"gitId":"chunweii"},"content":"    @Override","lastModifiedDate":"2021-09-08"},{"lineNumber":25,"author":{"gitId":"chunweii"},"content":"    public LocalDateTime getDateTime() {","lastModifiedDate":"2021-09-08"},{"lineNumber":26,"author":{"gitId":"chunweii"},"content":"        return dateTime;","lastModifiedDate":"2021-09-08"},{"lineNumber":27,"author":{"gitId":"chunweii"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":28,"author":{"gitId":"chunweii"},"content":"}","lastModifiedDate":"2021-09-08"}],"authorContributionMap":{"chunweii":28}},{"path":"text-ui-test/in/input_1.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"chunweii"},"content":"Timothy","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"chunweii"},"content":"list","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"chunweii":2}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"chunweii"},"content":"Duke","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"chunweii"},"content":"todo Buy Milk","lastModifiedDate":"2021-08-17"},{"lineNumber":3,"author":{"gitId":"chunweii"},"content":"delete 1","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"chunweii"},"content":"delete 1","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"chunweii"},"content":"event Townhall /at 27/10/2021 15:00","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"chunweii"},"content":"todo Wash laundry","lastModifiedDate":"2021-08-17"},{"lineNumber":7,"author":{"gitId":"chunweii"},"content":"deadline CS2103T Project /by 19/8/2021","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"chunweii"},"content":"list","lastModifiedDate":"2021-08-17"},{"lineNumber":9,"author":{"gitId":"chunweii"},"content":"do this thing","lastModifiedDate":"2021-08-17"},{"lineNumber":10,"author":{"gitId":"chunweii"},"content":"todo","lastModifiedDate":"2021-08-17"},{"lineNumber":11,"author":{"gitId":"chunweii"},"content":"deadline Art Project","lastModifiedDate":"2021-08-17"},{"lineNumber":12,"author":{"gitId":"chunweii"},"content":"deadline /by 20","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"chunweii"},"content":"event Concert /by 19/2/2022","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"chunweii"},"content":"deadline hello","lastModifiedDate":"2021-08-17"},{"lineNumber":15,"author":{"gitId":"chunweii"},"content":"event Job Interview /at 15:00","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"chunweii"},"content":"deadline Write resume /by 2/11/2021 14:20","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"chunweii"},"content":"deadline Prepare presentation /by 21:30","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"chunweii"},"content":"event Mum\u0027s birthday /at 2/11/2021, 14:20","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"chunweii"},"content":"todo Get a life","lastModifiedDate":"2021-08-17"},{"lineNumber":20,"author":{"gitId":"chunweii"},"content":"todo Get a wife","lastModifiedDate":"2021-08-17"},{"lineNumber":21,"author":{"gitId":"chunweii"},"content":"todo Get 6 packs","lastModifiedDate":"2021-08-17"},{"lineNumber":22,"author":{"gitId":"chunweii"},"content":"event Sleep /at 2:00","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"chunweii"},"content":"deadline CS2100 homework /by 25/8/2021","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"chunweii"},"content":"todo Learn to do homework","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"chunweii"},"content":"todo Renew passport","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"chunweii"},"content":"upcoming","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"chunweii"},"content":"done 2","lastModifiedDate":"2021-08-17"},{"lineNumber":28,"author":{"gitId":"chunweii"},"content":"done 2","lastModifiedDate":"2021-08-18"},{"lineNumber":29,"author":{"gitId":"chunweii"},"content":"done 13","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"chunweii"},"content":"done","lastModifiedDate":"2021-08-18"},{"lineNumber":31,"author":{"gitId":"chunweii"},"content":"delete","lastModifiedDate":"2021-08-18"},{"lineNumber":32,"author":{"gitId":"chunweii"},"content":"list","lastModifiedDate":"2021-08-17"},{"lineNumber":33,"author":{"gitId":"chunweii"},"content":"help help","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"chunweii"},"content":"help something","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"chunweii"},"content":"find HOmework","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"chunweii"},"content":"bye","lastModifiedDate":"2021-08-17"}],"authorContributionMap":{"chunweii":36}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"chunweii"},"content":"REM obtain all .java files in relative path","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"chunweii"},"content":"dir ..\\src\\main\\java\\duke /s /b /a-d \u003e sources_raw.txt","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"chunweii"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"chunweii"},"content":"javac -cp ..\\src\\main\\java\\duke -Xlint:none -d ..\\bin @sources_raw.txt","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"chunweii"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"chunweii":5,"-":19}}]

[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Duke project template","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"BenjaminLHR"},"content":"2. Open the project into Intellij as follows:","lastModifiedDate":"2021-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"BenjaminLHR"},"content":"3. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"BenjaminLHR"},"content":"4. After that, locate the `src/main/java/core/Duke.java` file, right-click it, and choose `Run Duke.main()`(if the code editor is showing compile errors, try restarting the IDE). ","lastModifiedDate":"2021-09-24"},{"lineNumber":17,"author":{"gitId":"BenjaminLHR"},"content":"   If the setup is correct, you can try calling some basic commands, such as `list` or `todo history essay` to test if Duke works.","lastModifiedDate":"2021-09-24"},{"lineNumber":18,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-24"}],"authorContributionMap":{"BenjaminLHR":5,"-":13}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"BenjaminLHR"},"content":"    // The following lines are for JavaFX","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"BenjaminLHR"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":17,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":18,"author":{"gitId":"BenjaminLHR"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":19,"author":{"gitId":"BenjaminLHR"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":20,"author":{"gitId":"BenjaminLHR"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":21,"author":{"gitId":"BenjaminLHR"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":22,"author":{"gitId":"BenjaminLHR"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":23,"author":{"gitId":"BenjaminLHR"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":24,"author":{"gitId":"BenjaminLHR"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":25,"author":{"gitId":"BenjaminLHR"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":26,"author":{"gitId":"BenjaminLHR"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":27,"author":{"gitId":"BenjaminLHR"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":28,"author":{"gitId":"BenjaminLHR"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":29,"author":{"gitId":"BenjaminLHR"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"BenjaminLHR"},"content":"    mainClassName \u003d \"duke.gui.Launcher\"","lastModifiedDate":"2021-09-10"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"BenjaminLHR":16,"-":45}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2019-07-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Features ","lastModifiedDate":"2019-07-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":5,"author":{"gitId":"BenjaminLHR"},"content":"### Add tasks to Duke","lastModifiedDate":"2021-09-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":7,"author":{"gitId":"BenjaminLHR"},"content":"* `todo` represents a generic task that the user intends to do.","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"BenjaminLHR"},"content":"* `event` represents an event that occurs on a certain date or time.","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"BenjaminLHR"},"content":"*  `deadline` represents a task that the user has to complete by a deadline.","lastModifiedDate":"2021-09-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":11,"author":{"gitId":"BenjaminLHR"},"content":"### Update Tasks within the task list","lastModifiedDate":"2021-09-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":13,"author":{"gitId":"BenjaminLHR"},"content":"* `done \u003cindex\u003e` marks the task at `index` as complete.","lastModifiedDate":"2021-09-23"},{"lineNumber":14,"author":{"gitId":"BenjaminLHR"},"content":"* `delete \u003cindex\u003e` deletes the task at `index`.","lastModifiedDate":"2021-09-23"},{"lineNumber":15,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"BenjaminLHR"},"content":"### Display and search task list","lastModifiedDate":"2021-09-23"},{"lineNumber":17,"author":{"gitId":"BenjaminLHR"},"content":"* `list` displays to the user the list of all tasks currently in Duke. They are arranged in the order the user added them.","lastModifiedDate":"2021-09-23"},{"lineNumber":18,"author":{"gitId":"BenjaminLHR"},"content":"* `find \u003ckeyword\u003e` finds and displays tasks which contain the keyword.","lastModifiedDate":"2021-09-23"},{"lineNumber":19,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":20,"author":{"gitId":"BenjaminLHR"},"content":"### Exit from Duke","lastModifiedDate":"2021-09-23"},{"lineNumber":21,"author":{"gitId":"BenjaminLHR"},"content":"* `bye` exits from Duke.","lastModifiedDate":"2021-09-23"},{"lineNumber":22,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":23,"author":{"gitId":"BenjaminLHR"},"content":"### Save task list to local storage","lastModifiedDate":"2021-09-23"},{"lineNumber":24,"author":{"gitId":"BenjaminLHR"},"content":"* Each time the task list is updated, its contents will be stored in `./data/duke.txt`. The storage file and directory","lastModifiedDate":"2021-09-23"},{"lineNumber":25,"author":{"gitId":"BenjaminLHR"},"content":"will be automatically created if they do not exist.","lastModifiedDate":"2021-09-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"## Usage","lastModifiedDate":"2019-07-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":29,"author":{"gitId":"BenjaminLHR"},"content":"### `list` - Display task list","lastModifiedDate":"2021-09-23"},{"lineNumber":30,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":31,"author":{"gitId":"BenjaminLHR"},"content":"Displays the list of all tasks currently in Duke, arranged in the order the user added them.","lastModifiedDate":"2021-09-23"},{"lineNumber":32,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":33,"author":{"gitId":"BenjaminLHR"},"content":"Format of usage: `list`\u003cbr\u003e","lastModifiedDate":"2021-09-23"},{"lineNumber":34,"author":{"gitId":"BenjaminLHR"},"content":"Shortcut: `l`","lastModifiedDate":"2021-09-23"},{"lineNumber":35,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":36,"author":{"gitId":"BenjaminLHR"},"content":"Expected outcome:","lastModifiedDate":"2021-09-23"},{"lineNumber":37,"author":{"gitId":"BenjaminLHR"},"content":"```","lastModifiedDate":"2021-09-23"},{"lineNumber":38,"author":{"gitId":"BenjaminLHR"},"content":"Here are the tasks in your list:","lastModifiedDate":"2021-09-23"},{"lineNumber":39,"author":{"gitId":"BenjaminLHR"},"content":"1. [T][ ] iron clothes","lastModifiedDate":"2021-09-23"},{"lineNumber":40,"author":{"gitId":"BenjaminLHR"},"content":"2. [D][ ] complete CS2100 assignment (by: Sep 15 2021 12pm)","lastModifiedDate":"2021-09-23"},{"lineNumber":41,"author":{"gitId":"BenjaminLHR"},"content":"3. [T][ ] mop the floor","lastModifiedDate":"2021-09-23"},{"lineNumber":42,"author":{"gitId":"BenjaminLHR"},"content":"```","lastModifiedDate":"2021-09-23"},{"lineNumber":43,"author":{"gitId":"BenjaminLHR"},"content":"In this example, Duke contains 2 `todo` tasks and 1 `deadline` task.","lastModifiedDate":"2021-09-23"},{"lineNumber":44,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":45,"author":{"gitId":"BenjaminLHR"},"content":"### `todo` - Add a `todo` task","lastModifiedDate":"2021-09-23"},{"lineNumber":46,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":47,"author":{"gitId":"BenjaminLHR"},"content":"Adds a `todo` task to the task list.","lastModifiedDate":"2021-09-23"},{"lineNumber":48,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":49,"author":{"gitId":"BenjaminLHR"},"content":"Format: `todo \u003ctask description\u003e`","lastModifiedDate":"2021-09-23"},{"lineNumber":50,"author":{"gitId":"BenjaminLHR"},"content":"Suppose the current task list is:","lastModifiedDate":"2021-09-23"},{"lineNumber":51,"author":{"gitId":"BenjaminLHR"},"content":"```","lastModifiedDate":"2021-09-23"},{"lineNumber":52,"author":{"gitId":"BenjaminLHR"},"content":"1. [T][ ] iron clothes","lastModifiedDate":"2021-09-23"},{"lineNumber":53,"author":{"gitId":"BenjaminLHR"},"content":"2. [D][ ] complete CS2100 assignment (by: Sep 15 2021 12pm)","lastModifiedDate":"2021-09-23"},{"lineNumber":54,"author":{"gitId":"BenjaminLHR"},"content":"3. [T][ ] mop the floor","lastModifiedDate":"2021-09-23"},{"lineNumber":55,"author":{"gitId":"BenjaminLHR"},"content":"```","lastModifiedDate":"2021-09-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":57,"author":{"gitId":"BenjaminLHR"},"content":"Example of usage: `todo buy milk`\u003cbr\u003e","lastModifiedDate":"2021-09-23"},{"lineNumber":58,"author":{"gitId":"BenjaminLHR"},"content":"Shortcut: `t buy milk`","lastModifiedDate":"2021-09-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":60,"author":{"gitId":"BenjaminLHR"},"content":"Expected task list after command:","lastModifiedDate":"2021-09-23"},{"lineNumber":61,"author":{"gitId":"BenjaminLHR"},"content":"```","lastModifiedDate":"2021-09-23"},{"lineNumber":62,"author":{"gitId":"BenjaminLHR"},"content":"1. [T][ ] iron clothes","lastModifiedDate":"2021-09-23"},{"lineNumber":63,"author":{"gitId":"BenjaminLHR"},"content":"2. [D][ ] complete CS2100 assignment (by: Sep 15 2021 12pm)","lastModifiedDate":"2021-09-23"},{"lineNumber":64,"author":{"gitId":"BenjaminLHR"},"content":"3. [T][ ] mop the floor","lastModifiedDate":"2021-09-23"},{"lineNumber":65,"author":{"gitId":"BenjaminLHR"},"content":"4. [T][ ] buy milk","lastModifiedDate":"2021-09-23"},{"lineNumber":66,"author":{"gitId":"BenjaminLHR"},"content":"```","lastModifiedDate":"2021-09-23"},{"lineNumber":67,"author":{"gitId":"BenjaminLHR"},"content":"The `todo` has been successfully appended to task list.","lastModifiedDate":"2021-09-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":69,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":70,"author":{"gitId":"BenjaminLHR"},"content":"### `event` - Add an `event` task","lastModifiedDate":"2021-09-23"},{"lineNumber":71,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":72,"author":{"gitId":"BenjaminLHR"},"content":"Adds an `event` task to the task list.","lastModifiedDate":"2021-09-23"},{"lineNumber":73,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":74,"author":{"gitId":"BenjaminLHR"},"content":"Format: `event \u003ctask description\u003e /at \u003ctime\u003e`\u003cbr\u003e","lastModifiedDate":"2021-09-23"},{"lineNumber":75,"author":{"gitId":"BenjaminLHR"},"content":"Dates in `YYYY-MM-DD` format will be translated into `MMM DD YYYY` format.","lastModifiedDate":"2021-09-23"},{"lineNumber":76,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":77,"author":{"gitId":"BenjaminLHR"},"content":"Suppose the current task list is:","lastModifiedDate":"2021-09-23"},{"lineNumber":78,"author":{"gitId":"BenjaminLHR"},"content":"```","lastModifiedDate":"2021-09-23"},{"lineNumber":79,"author":{"gitId":"BenjaminLHR"},"content":"1. [T][ ] iron clothes","lastModifiedDate":"2021-09-23"},{"lineNumber":80,"author":{"gitId":"BenjaminLHR"},"content":"2. [D][ ] complete CS2100 assignment (by: Sep 15 2021 12pm)","lastModifiedDate":"2021-09-23"},{"lineNumber":81,"author":{"gitId":"BenjaminLHR"},"content":"3. [T][ ] mop the floor","lastModifiedDate":"2021-09-23"},{"lineNumber":82,"author":{"gitId":"BenjaminLHR"},"content":"```","lastModifiedDate":"2021-09-23"},{"lineNumber":83,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":84,"author":{"gitId":"BenjaminLHR"},"content":"Example of usage: `event David\u0027s birthday celebration /at 2022-01-15 6pm`\u003cbr\u003e","lastModifiedDate":"2021-09-23"},{"lineNumber":85,"author":{"gitId":"BenjaminLHR"},"content":"Shortcut: `e David\u0027s birthday celebration /at 2022-01-15 6pm`","lastModifiedDate":"2021-09-23"},{"lineNumber":86,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":87,"author":{"gitId":"BenjaminLHR"},"content":"Expected task list after command:","lastModifiedDate":"2021-09-23"},{"lineNumber":88,"author":{"gitId":"BenjaminLHR"},"content":"```","lastModifiedDate":"2021-09-23"},{"lineNumber":89,"author":{"gitId":"BenjaminLHR"},"content":"1. [T][ ] iron clothes","lastModifiedDate":"2021-09-23"},{"lineNumber":90,"author":{"gitId":"BenjaminLHR"},"content":"2. [D][ ] complete CS2100 assignment (by: Sep 15 2021 12pm)","lastModifiedDate":"2021-09-23"},{"lineNumber":91,"author":{"gitId":"BenjaminLHR"},"content":"3. [T][ ] mop the floor","lastModifiedDate":"2021-09-23"},{"lineNumber":92,"author":{"gitId":"BenjaminLHR"},"content":"4. [E][ ] David\u0027s birthday celebration (at: Jan 15 2022 6pm)","lastModifiedDate":"2021-09-23"},{"lineNumber":93,"author":{"gitId":"BenjaminLHR"},"content":"```","lastModifiedDate":"2021-09-23"},{"lineNumber":94,"author":{"gitId":"BenjaminLHR"},"content":"The `event` has been successfully appended to task list.","lastModifiedDate":"2021-09-23"},{"lineNumber":95,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":96,"author":{"gitId":"BenjaminLHR"},"content":"### `deadline` - Add a `deadline` task","lastModifiedDate":"2021-09-23"},{"lineNumber":97,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":98,"author":{"gitId":"BenjaminLHR"},"content":"Adds a `deadline` task to the task list.","lastModifiedDate":"2021-09-23"},{"lineNumber":99,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":100,"author":{"gitId":"BenjaminLHR"},"content":"Format: `deadline \u003ctask description\u003e /at \u003ctime\u003e`\u003cbr\u003e","lastModifiedDate":"2021-09-23"},{"lineNumber":101,"author":{"gitId":"BenjaminLHR"},"content":"Dates in `YYYY-MM-DD` format will be translated into `MMM DD YYYY` format.","lastModifiedDate":"2021-09-23"},{"lineNumber":102,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":103,"author":{"gitId":"BenjaminLHR"},"content":"Suppose the current task list is:","lastModifiedDate":"2021-09-23"},{"lineNumber":104,"author":{"gitId":"BenjaminLHR"},"content":"```","lastModifiedDate":"2021-09-23"},{"lineNumber":105,"author":{"gitId":"BenjaminLHR"},"content":"1. [T][ ] iron clothes","lastModifiedDate":"2021-09-23"},{"lineNumber":106,"author":{"gitId":"BenjaminLHR"},"content":"2. [D][ ] complete CS2100 assignment (by: Sep 15 2021 12pm)","lastModifiedDate":"2021-09-23"},{"lineNumber":107,"author":{"gitId":"BenjaminLHR"},"content":"3. [T][ ] mop the floor","lastModifiedDate":"2021-09-23"},{"lineNumber":108,"author":{"gitId":"BenjaminLHR"},"content":"```","lastModifiedDate":"2021-09-23"},{"lineNumber":109,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":110,"author":{"gitId":"BenjaminLHR"},"content":"Example of usage: `deadline submit MA1101R assignment /by 2020-10-20`","lastModifiedDate":"2021-09-23"},{"lineNumber":111,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":112,"author":{"gitId":"BenjaminLHR"},"content":"Expected task list after command:","lastModifiedDate":"2021-09-23"},{"lineNumber":113,"author":{"gitId":"BenjaminLHR"},"content":"```","lastModifiedDate":"2021-09-23"},{"lineNumber":114,"author":{"gitId":"BenjaminLHR"},"content":"1. [T][ ] iron clothes","lastModifiedDate":"2021-09-23"},{"lineNumber":115,"author":{"gitId":"BenjaminLHR"},"content":"2. [D][ ] complete CS2100 assignment (by: Sep 15 2021 12pm)","lastModifiedDate":"2021-09-23"},{"lineNumber":116,"author":{"gitId":"BenjaminLHR"},"content":"3. [T][ ] mop the floor","lastModifiedDate":"2021-09-23"},{"lineNumber":117,"author":{"gitId":"BenjaminLHR"},"content":"4. [D][ ] submit MA1101R assignment (by: Oct 20 2020)","lastModifiedDate":"2021-09-23"},{"lineNumber":118,"author":{"gitId":"BenjaminLHR"},"content":"```","lastModifiedDate":"2021-09-23"},{"lineNumber":119,"author":{"gitId":"BenjaminLHR"},"content":"The `deadline` has been successfully appended to task list.","lastModifiedDate":"2021-09-23"},{"lineNumber":120,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":121,"author":{"gitId":"BenjaminLHR"},"content":"### `find` - Find tasks that contain the keyword","lastModifiedDate":"2021-09-23"},{"lineNumber":122,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":123,"author":{"gitId":"BenjaminLHR"},"content":"Find all tasks that contain the keyword","lastModifiedDate":"2021-09-23"},{"lineNumber":124,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":125,"author":{"gitId":"BenjaminLHR"},"content":"Format: `find \u003ckeyword\u003e`","lastModifiedDate":"2021-09-23"},{"lineNumber":126,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":127,"author":{"gitId":"BenjaminLHR"},"content":"Suppose the current task list is:","lastModifiedDate":"2021-09-23"},{"lineNumber":128,"author":{"gitId":"BenjaminLHR"},"content":"```","lastModifiedDate":"2021-09-23"},{"lineNumber":129,"author":{"gitId":"BenjaminLHR"},"content":"1. [T][ ] iron clothes","lastModifiedDate":"2021-09-23"},{"lineNumber":130,"author":{"gitId":"BenjaminLHR"},"content":"2. [D][ ] complete CS2100 assignment (by: Sep 15 2021 12pm)","lastModifiedDate":"2021-09-23"},{"lineNumber":131,"author":{"gitId":"BenjaminLHR"},"content":"3. [T][ ] mop the floor","lastModifiedDate":"2021-09-23"},{"lineNumber":132,"author":{"gitId":"BenjaminLHR"},"content":"4. [D][ ] submit MA1101R assignment (by: Oct 20 2020)","lastModifiedDate":"2021-09-23"},{"lineNumber":133,"author":{"gitId":"BenjaminLHR"},"content":"```","lastModifiedDate":"2021-09-23"},{"lineNumber":134,"author":{"gitId":"BenjaminLHR"},"content":"Example of usage: `find assignment`\u003cbr\u003e","lastModifiedDate":"2021-09-23"},{"lineNumber":135,"author":{"gitId":"BenjaminLHR"},"content":"Shortcut: `f assignment`","lastModifiedDate":"2021-09-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":137,"author":{"gitId":"-"},"content":"Expected outcome:","lastModifiedDate":"2019-07-29"},{"lineNumber":138,"author":{"gitId":"BenjaminLHR"},"content":"```","lastModifiedDate":"2021-09-23"},{"lineNumber":139,"author":{"gitId":"BenjaminLHR"},"content":"Here are the matching tasks in your list:","lastModifiedDate":"2021-09-23"},{"lineNumber":140,"author":{"gitId":"BenjaminLHR"},"content":"2. [D][ ] complete CS2100 assignment (by: Sep 15 2021 12pm)","lastModifiedDate":"2021-09-23"},{"lineNumber":141,"author":{"gitId":"BenjaminLHR"},"content":"4. [D][ ] submit MA1101R assignment (by: Oct 20 2020)","lastModifiedDate":"2021-09-23"},{"lineNumber":142,"author":{"gitId":"BenjaminLHR"},"content":"```","lastModifiedDate":"2021-09-23"},{"lineNumber":143,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":144,"author":{"gitId":"BenjaminLHR"},"content":"### `done` - Mark a task as completed","lastModifiedDate":"2021-09-23"},{"lineNumber":145,"author":{"gitId":"BenjaminLHR"},"content":"Format: `done \u003cindex\u003e`","lastModifiedDate":"2021-09-23"},{"lineNumber":146,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":147,"author":{"gitId":"BenjaminLHR"},"content":"Suppose the current task list is:","lastModifiedDate":"2021-09-23"},{"lineNumber":148,"author":{"gitId":"BenjaminLHR"},"content":"```","lastModifiedDate":"2021-09-23"},{"lineNumber":149,"author":{"gitId":"BenjaminLHR"},"content":"1. [T][ ] iron clothes","lastModifiedDate":"2021-09-23"},{"lineNumber":150,"author":{"gitId":"BenjaminLHR"},"content":"2. [D][ ] complete CS2100 assignment (by: Sep 15 2021 12pm)","lastModifiedDate":"2021-09-23"},{"lineNumber":151,"author":{"gitId":"BenjaminLHR"},"content":"3. [T][ ] mop the floor","lastModifiedDate":"2021-09-23"},{"lineNumber":152,"author":{"gitId":"BenjaminLHR"},"content":"4. [D][ ] submit MA1101R assignment (by: Oct 20 2020)","lastModifiedDate":"2021-09-23"},{"lineNumber":153,"author":{"gitId":"BenjaminLHR"},"content":"```","lastModifiedDate":"2021-09-23"},{"lineNumber":154,"author":{"gitId":"BenjaminLHR"},"content":"Example of usage: `done 3`","lastModifiedDate":"2021-09-23"},{"lineNumber":155,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":156,"author":{"gitId":"BenjaminLHR"},"content":"Expected task list after command:","lastModifiedDate":"2021-09-23"},{"lineNumber":157,"author":{"gitId":"BenjaminLHR"},"content":"```","lastModifiedDate":"2021-09-23"},{"lineNumber":158,"author":{"gitId":"BenjaminLHR"},"content":"1. [T][ ] iron clothes","lastModifiedDate":"2021-09-23"},{"lineNumber":159,"author":{"gitId":"BenjaminLHR"},"content":"2. [D][ ] complete CS2100 assignment (by: Sep 15 2021 12pm)","lastModifiedDate":"2021-09-23"},{"lineNumber":160,"author":{"gitId":"BenjaminLHR"},"content":"3. [T][X] mop the floor","lastModifiedDate":"2021-09-23"},{"lineNumber":161,"author":{"gitId":"BenjaminLHR"},"content":"4. [D][ ] submit MA1101R assignment (by: Oct 20 2020)","lastModifiedDate":"2021-09-23"},{"lineNumber":162,"author":{"gitId":"BenjaminLHR"},"content":"```","lastModifiedDate":"2021-09-23"},{"lineNumber":163,"author":{"gitId":"BenjaminLHR"},"content":"The 3rd task in the list is marked as done.","lastModifiedDate":"2021-09-23"},{"lineNumber":164,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":165,"author":{"gitId":"BenjaminLHR"},"content":"### `delete` - Removes a task from the list","lastModifiedDate":"2021-09-23"},{"lineNumber":166,"author":{"gitId":"BenjaminLHR"},"content":"Format: `delete \u003cindex\u003e`","lastModifiedDate":"2021-09-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":168,"author":{"gitId":"BenjaminLHR"},"content":"Suppose the current task list is:","lastModifiedDate":"2021-09-23"},{"lineNumber":169,"author":{"gitId":"BenjaminLHR"},"content":"```","lastModifiedDate":"2021-09-23"},{"lineNumber":170,"author":{"gitId":"BenjaminLHR"},"content":"1. [T][ ] iron clothes","lastModifiedDate":"2021-09-23"},{"lineNumber":171,"author":{"gitId":"BenjaminLHR"},"content":"2. [D][ ] complete CS2100 assignment (by: Sep 15 2021 12pm)","lastModifiedDate":"2021-09-23"},{"lineNumber":172,"author":{"gitId":"BenjaminLHR"},"content":"3. [T][X] mop the floor","lastModifiedDate":"2021-09-23"},{"lineNumber":173,"author":{"gitId":"BenjaminLHR"},"content":"4. [D][ ] submit MA1101R assignment (by: Oct 20 2020)","lastModifiedDate":"2021-09-23"},{"lineNumber":174,"author":{"gitId":"BenjaminLHR"},"content":"```","lastModifiedDate":"2021-09-23"},{"lineNumber":175,"author":{"gitId":"BenjaminLHR"},"content":"Example of usage: `delete 3`","lastModifiedDate":"2021-09-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":177,"author":{"gitId":"BenjaminLHR"},"content":"Expected task list after command:","lastModifiedDate":"2021-09-23"},{"lineNumber":178,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":179,"author":{"gitId":"BenjaminLHR"},"content":"1. [T][ ] iron clothes","lastModifiedDate":"2021-09-23"},{"lineNumber":180,"author":{"gitId":"BenjaminLHR"},"content":"2. [D][ ] complete CS2100 assignment (by: Sep 15 2021 12pm)","lastModifiedDate":"2021-09-23"},{"lineNumber":181,"author":{"gitId":"BenjaminLHR"},"content":"3. [D][ ] submit MA1101R assignment (by: Oct 20 2020)","lastModifiedDate":"2021-09-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":183,"author":{"gitId":"BenjaminLHR"},"content":"The 3rd task on the list has been deleted.","lastModifiedDate":"2021-09-23"},{"lineNumber":184,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":185,"author":{"gitId":"BenjaminLHR"},"content":"Example of usage: `delete 6`","lastModifiedDate":"2021-09-23"},{"lineNumber":186,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":187,"author":{"gitId":"BenjaminLHR"},"content":"Expected outcome: `:( OOPS!!! Your index is out of range`","lastModifiedDate":"2021-09-23"},{"lineNumber":188,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":189,"author":{"gitId":"BenjaminLHR"},"content":"### `bye` - Exits from Duke","lastModifiedDate":"2021-09-23"},{"lineNumber":190,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":191,"author":{"gitId":"BenjaminLHR"},"content":"Example of usage: `bye`\u003cbr\u003e","lastModifiedDate":"2021-09-23"},{"lineNumber":192,"author":{"gitId":"BenjaminLHR"},"content":"Shortcut: `b`","lastModifiedDate":"2021-09-23"},{"lineNumber":193,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":194,"author":{"gitId":"BenjaminLHR"},"content":"Expected outcome: Duke terminates after the farewell message: `Bye. Hope to see you again soon!`","lastModifiedDate":"2021-09-23"},{"lineNumber":195,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":196,"author":{"gitId":"BenjaminLHR"},"content":"## Miscellaneous","lastModifiedDate":"2021-09-23"},{"lineNumber":197,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":198,"author":{"gitId":"BenjaminLHR"},"content":"### Summary of commands","lastModifiedDate":"2021-09-23"},{"lineNumber":199,"author":{"gitId":"BenjaminLHR"},"content":"| Command      | Example of Usage |","lastModifiedDate":"2021-09-23"},{"lineNumber":200,"author":{"gitId":"BenjaminLHR"},"content":"| ----------- | ----------- |","lastModifiedDate":"2021-09-23"},{"lineNumber":201,"author":{"gitId":"BenjaminLHR"},"content":"| `list`      | `list`                                                 |","lastModifiedDate":"2021-09-23"},{"lineNumber":202,"author":{"gitId":"BenjaminLHR"},"content":"| `todo`      | `todo buy milk`                                        |","lastModifiedDate":"2021-09-23"},{"lineNumber":203,"author":{"gitId":"BenjaminLHR"},"content":"| `event`     | `event David\u0027s birthday celebration /at 2022-01-15 6pm`|","lastModifiedDate":"2021-09-23"},{"lineNumber":204,"author":{"gitId":"BenjaminLHR"},"content":"| `deadline`  | `deadline submit MA1101R assignment /by 2020-10-20`    |","lastModifiedDate":"2021-09-23"},{"lineNumber":205,"author":{"gitId":"BenjaminLHR"},"content":"| `find`      | `find assignment`                                      |","lastModifiedDate":"2021-09-23"},{"lineNumber":206,"author":{"gitId":"BenjaminLHR"},"content":"| `done`      | `done 3`                                               |","lastModifiedDate":"2021-09-23"},{"lineNumber":207,"author":{"gitId":"BenjaminLHR"},"content":"| `delete`    | `delete 3`                                             |","lastModifiedDate":"2021-09-23"},{"lineNumber":208,"author":{"gitId":"BenjaminLHR"},"content":"| `bye`       | `bye`                                                  |","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"BenjaminLHR":189,"-":19}},{"path":"src/main/java/duke/command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenjaminLHR"},"content":"package duke.command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"BenjaminLHR"},"content":"import duke.core.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"BenjaminLHR"},"content":"import duke.core.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"BenjaminLHR"},"content":"import duke.gui.Ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"BenjaminLHR"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"BenjaminLHR"},"content":" * Encapsulates a command to terminate Duke.","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"BenjaminLHR"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"BenjaminLHR"},"content":"public class ByeCommand extends Command {","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"BenjaminLHR"},"content":"    public ByeCommand() {","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"BenjaminLHR"},"content":"        // Do nothing as there are no attributes to initialize","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"BenjaminLHR"},"content":"     * Returns a farewell message","lastModifiedDate":"2021-09-03"},{"lineNumber":17,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"BenjaminLHR"},"content":"     * @param taskList The TaskList object storing all the tasks.","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"BenjaminLHR"},"content":"     * @param storage The Storage object which was instantiated with the appropriate storage filepath.","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"BenjaminLHR"},"content":"     * @return The farewell message.","lastModifiedDate":"2021-09-03"},{"lineNumber":21,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"BenjaminLHR"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"BenjaminLHR"},"content":"    public String execute(TaskList taskList, Storage storage) {","lastModifiedDate":"2021-09-03"},{"lineNumber":24,"author":{"gitId":"BenjaminLHR"},"content":"        return Ui.farewellMessage();","lastModifiedDate":"2021-09-03"},{"lineNumber":25,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":26,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":27,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"BenjaminLHR"},"content":"     * Returns a boolean specifying whether Duke should terminate.","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"BenjaminLHR"},"content":"     * @return true","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"BenjaminLHR"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":33,"author":{"gitId":"BenjaminLHR"},"content":"    public boolean shouldExit() {","lastModifiedDate":"2021-08-18"},{"lineNumber":34,"author":{"gitId":"BenjaminLHR"},"content":"        return true;","lastModifiedDate":"2021-08-18"},{"lineNumber":35,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":36,"author":{"gitId":"BenjaminLHR"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"BenjaminLHR":36}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenjaminLHR"},"content":"package duke.command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"BenjaminLHR"},"content":"import duke.core.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"BenjaminLHR"},"content":"import duke.core.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"BenjaminLHR"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"BenjaminLHR"},"content":" * An abstract class encapsulating a command.","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"BenjaminLHR"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"BenjaminLHR"},"content":"public abstract class Command {","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"BenjaminLHR"},"content":"     * Performs the appropriate action to take depending on run-time type of the Command object and returns the output","lastModifiedDate":"2021-09-03"},{"lineNumber":12,"author":{"gitId":"BenjaminLHR"},"content":"     * to be displayed by Duke.","lastModifiedDate":"2021-09-03"},{"lineNumber":13,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"BenjaminLHR"},"content":"     * @param taskList The TaskList object storing all the tasks.","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"BenjaminLHR"},"content":"     * @param storage The Storage object which was instantiated with the appropriate storage filepath.","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"BenjaminLHR"},"content":"     * @return The output to be displayed by Duke.","lastModifiedDate":"2021-09-03"},{"lineNumber":17,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"BenjaminLHR"},"content":"    public abstract String execute(TaskList taskList, Storage storage);","lastModifiedDate":"2021-09-03"},{"lineNumber":19,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"BenjaminLHR"},"content":"     * Returns a boolean specifying whether Duke should terminate.","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"BenjaminLHR"},"content":"     * @return A boolean specifying whether Duke should terminate.","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"BenjaminLHR"},"content":"    public abstract boolean shouldExit();","lastModifiedDate":"2021-08-18"},{"lineNumber":26,"author":{"gitId":"BenjaminLHR"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"BenjaminLHR":26}},{"path":"src/main/java/duke/command/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenjaminLHR"},"content":"package duke.command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"BenjaminLHR"},"content":"import duke.core.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"BenjaminLHR"},"content":"import duke.core.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"BenjaminLHR"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"BenjaminLHR"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-03"},{"lineNumber":8,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":9,"author":{"gitId":"BenjaminLHR"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"BenjaminLHR"},"content":" * Encapsulates a command that handles the addition of deadline tasks into the task list.","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"BenjaminLHR"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"BenjaminLHR"},"content":"public class DeadlineCommand extends Command {","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"BenjaminLHR"},"content":"    private Deadline deadlineTask;","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"BenjaminLHR"},"content":"     * Constructs a DeadlineCommand object.","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"BenjaminLHR"},"content":"     * @param taskName Description of the deadline task.","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"BenjaminLHR"},"content":"     * @param time Deadline of the task.","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"BenjaminLHR"},"content":"    public DeadlineCommand(String taskName, String time) {","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"BenjaminLHR"},"content":"        deadlineTask \u003d new Deadline(taskName, time);","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":24,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":25,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"BenjaminLHR"},"content":"     * Adds the deadline task into the task list and storage file and returns the output to be displayed by Duke.","lastModifiedDate":"2021-09-03"},{"lineNumber":27,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"BenjaminLHR"},"content":"     * @param taskList The TaskList object storing all the tasks.","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"BenjaminLHR"},"content":"     * @param storage The Storage object which was instantiated with the appropriate storage filepath.","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"BenjaminLHR"},"content":"     * @return The output to be displayed by Duke.","lastModifiedDate":"2021-09-03"},{"lineNumber":31,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"BenjaminLHR"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":33,"author":{"gitId":"BenjaminLHR"},"content":"    public String execute(TaskList taskList, Storage storage) {","lastModifiedDate":"2021-09-03"},{"lineNumber":34,"author":{"gitId":"BenjaminLHR"},"content":"        String output \u003d taskList.addTask(deadlineTask);","lastModifiedDate":"2021-09-03"},{"lineNumber":35,"author":{"gitId":"BenjaminLHR"},"content":"        try {","lastModifiedDate":"2021-09-03"},{"lineNumber":36,"author":{"gitId":"BenjaminLHR"},"content":"            storage.saveTasksToFile(taskList);","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"BenjaminLHR"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-03"},{"lineNumber":38,"author":{"gitId":"BenjaminLHR"},"content":"            output \u003d String.format(\"%s\\n%s\", output, e.getMessage());","lastModifiedDate":"2021-09-03"},{"lineNumber":39,"author":{"gitId":"BenjaminLHR"},"content":"        }","lastModifiedDate":"2021-09-03"},{"lineNumber":40,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":41,"author":{"gitId":"BenjaminLHR"},"content":"        return output;","lastModifiedDate":"2021-09-03"},{"lineNumber":42,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":43,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":44,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"BenjaminLHR"},"content":"     * Returns a boolean specifying whether Duke should terminate.","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"BenjaminLHR"},"content":"     * @return false","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"BenjaminLHR"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":50,"author":{"gitId":"BenjaminLHR"},"content":"    public boolean shouldExit() {","lastModifiedDate":"2021-08-18"},{"lineNumber":51,"author":{"gitId":"BenjaminLHR"},"content":"        return false;","lastModifiedDate":"2021-08-18"},{"lineNumber":52,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":53,"author":{"gitId":"BenjaminLHR"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"BenjaminLHR":53}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenjaminLHR"},"content":"package duke.command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"BenjaminLHR"},"content":"import duke.core.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"BenjaminLHR"},"content":"import duke.core.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"BenjaminLHR"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-03"},{"lineNumber":7,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":8,"author":{"gitId":"BenjaminLHR"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"BenjaminLHR"},"content":" * Encapsulates a command to delete a task based on its index.","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"BenjaminLHR"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"BenjaminLHR"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"BenjaminLHR"},"content":"    private int indexToDelete;","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"BenjaminLHR"},"content":"     * Constructs a DeleteCommand object.","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"BenjaminLHR"},"content":"     * @param indexToDelete Index of the task to be deleted.","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"BenjaminLHR"},"content":"    public DeleteCommand(int indexToDelete) {","lastModifiedDate":"2021-08-19"},{"lineNumber":20,"author":{"gitId":"BenjaminLHR"},"content":"        assert indexToDelete \u003e 0: \"Index to delete should be at least 1\";","lastModifiedDate":"2021-09-10"},{"lineNumber":21,"author":{"gitId":"BenjaminLHR"},"content":"        this.indexToDelete \u003d indexToDelete;","lastModifiedDate":"2021-08-19"},{"lineNumber":22,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":23,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":24,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"BenjaminLHR"},"content":"     * Deletes the task from task list and storage file and returns the output to be displayed by Duke.","lastModifiedDate":"2021-09-03"},{"lineNumber":26,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"BenjaminLHR"},"content":"     * @param taskList The TaskList object storing all the tasks.","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"BenjaminLHR"},"content":"     * @param storage The Storage object which was instantiated with the appropriate storage filepath.","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"BenjaminLHR"},"content":"     * @return The output to be displayed by Duke.","lastModifiedDate":"2021-09-03"},{"lineNumber":30,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"BenjaminLHR"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":32,"author":{"gitId":"BenjaminLHR"},"content":"    public String execute(TaskList taskList, Storage storage) {","lastModifiedDate":"2021-09-03"},{"lineNumber":33,"author":{"gitId":"BenjaminLHR"},"content":"        String output \u003d taskList.delete(indexToDelete);","lastModifiedDate":"2021-09-03"},{"lineNumber":34,"author":{"gitId":"BenjaminLHR"},"content":"        try {","lastModifiedDate":"2021-09-03"},{"lineNumber":35,"author":{"gitId":"BenjaminLHR"},"content":"            storage.saveTasksToFile(taskList);","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"BenjaminLHR"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-03"},{"lineNumber":37,"author":{"gitId":"BenjaminLHR"},"content":"            output \u003d String.format(\"%s\\n%s\", output, e.getMessage());","lastModifiedDate":"2021-09-03"},{"lineNumber":38,"author":{"gitId":"BenjaminLHR"},"content":"        }","lastModifiedDate":"2021-09-03"},{"lineNumber":39,"author":{"gitId":"BenjaminLHR"},"content":"        return output;","lastModifiedDate":"2021-09-03"},{"lineNumber":40,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":41,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":42,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"BenjaminLHR"},"content":"     * Returns a boolean specifying whether Duke should terminate.","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"BenjaminLHR"},"content":"     * @return false","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"BenjaminLHR"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":48,"author":{"gitId":"BenjaminLHR"},"content":"    public boolean shouldExit() {","lastModifiedDate":"2021-08-19"},{"lineNumber":49,"author":{"gitId":"BenjaminLHR"},"content":"        return false;","lastModifiedDate":"2021-08-19"},{"lineNumber":50,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":51,"author":{"gitId":"BenjaminLHR"},"content":"}","lastModifiedDate":"2021-08-19"},{"lineNumber":52,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"BenjaminLHR":52}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenjaminLHR"},"content":"package duke.command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"BenjaminLHR"},"content":"import duke.core.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"BenjaminLHR"},"content":"import duke.core.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"BenjaminLHR"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-03"},{"lineNumber":7,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":8,"author":{"gitId":"BenjaminLHR"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"BenjaminLHR"},"content":" * Encapsulates a command to mark a task as completed based on index.","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"BenjaminLHR"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"BenjaminLHR"},"content":"public class DoneCommand extends Command {","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"BenjaminLHR"},"content":"    private int indexOfCompleted;","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"BenjaminLHR"},"content":"     * Constructs a DoneCommand object.","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"BenjaminLHR"},"content":"     * @param indexOfCompleted Index of the task that has been completed.","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"BenjaminLHR"},"content":"    public DoneCommand(int indexOfCompleted) {","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"BenjaminLHR"},"content":"        assert indexOfCompleted \u003e 0: \"Index of completed task should be at least 1\";","lastModifiedDate":"2021-09-10"},{"lineNumber":21,"author":{"gitId":"BenjaminLHR"},"content":"        this.indexOfCompleted \u003d indexOfCompleted;","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":24,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"BenjaminLHR"},"content":"     * Marks the task as done in the task list and storage file and returns the output to be displayed by Duke.","lastModifiedDate":"2021-09-03"},{"lineNumber":26,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"BenjaminLHR"},"content":"     * @param taskList The TaskList object storing all the tasks.","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"BenjaminLHR"},"content":"     * @param storage The Storage object which was instantiated with the appropriate storage filepath.","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"BenjaminLHR"},"content":"     * @return The output to be displayed by Duke.","lastModifiedDate":"2021-09-03"},{"lineNumber":30,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"BenjaminLHR"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":32,"author":{"gitId":"BenjaminLHR"},"content":"    public String execute(TaskList taskList, Storage storage) {","lastModifiedDate":"2021-09-03"},{"lineNumber":33,"author":{"gitId":"BenjaminLHR"},"content":"        String output \u003d taskList.markAsDone(indexOfCompleted);","lastModifiedDate":"2021-09-03"},{"lineNumber":34,"author":{"gitId":"BenjaminLHR"},"content":"        try {","lastModifiedDate":"2021-09-03"},{"lineNumber":35,"author":{"gitId":"BenjaminLHR"},"content":"            storage.saveTasksToFile(taskList);","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"BenjaminLHR"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-03"},{"lineNumber":37,"author":{"gitId":"BenjaminLHR"},"content":"            output \u003d String.format(\"%s\\n%s\", output, e.getMessage());","lastModifiedDate":"2021-09-03"},{"lineNumber":38,"author":{"gitId":"BenjaminLHR"},"content":"        }","lastModifiedDate":"2021-09-03"},{"lineNumber":39,"author":{"gitId":"BenjaminLHR"},"content":"        return output;","lastModifiedDate":"2021-09-03"},{"lineNumber":40,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":41,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":42,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"BenjaminLHR"},"content":"     * Returns a boolean specifying whether Duke should terminate.","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"BenjaminLHR"},"content":"     * @return false","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"BenjaminLHR"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":48,"author":{"gitId":"BenjaminLHR"},"content":"    public boolean shouldExit() {","lastModifiedDate":"2021-08-18"},{"lineNumber":49,"author":{"gitId":"BenjaminLHR"},"content":"        return false;","lastModifiedDate":"2021-08-18"},{"lineNumber":50,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":51,"author":{"gitId":"BenjaminLHR"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"BenjaminLHR":51}},{"path":"src/main/java/duke/command/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenjaminLHR"},"content":"package duke.command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"BenjaminLHR"},"content":"import duke.core.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"BenjaminLHR"},"content":"import duke.core.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"BenjaminLHR"},"content":"import duke.task.Event;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"BenjaminLHR"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-03"},{"lineNumber":8,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":9,"author":{"gitId":"BenjaminLHR"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"BenjaminLHR"},"content":" * Encapsulates a command that handles the addition of event tasks into the task list.","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"BenjaminLHR"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"BenjaminLHR"},"content":"public class EventCommand extends Command {","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"BenjaminLHR"},"content":"    private Event eventTask;","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"BenjaminLHR"},"content":"     * Constructs an EventCommand object.","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"BenjaminLHR"},"content":"     * @param taskName Description of the event.","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"BenjaminLHR"},"content":"     * @param time Time that the event takes place.","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"BenjaminLHR"},"content":"    public EventCommand(String taskName, String time) {","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"BenjaminLHR"},"content":"        eventTask \u003d new Event(taskName, time);","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":24,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":25,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"BenjaminLHR"},"content":"     * Adds the event task into the task list and storage file and returns the output to be displayed by Duke.","lastModifiedDate":"2021-09-03"},{"lineNumber":27,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"BenjaminLHR"},"content":"     * @param taskList The TaskList object storing all the tasks.","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"BenjaminLHR"},"content":"     * @param storage The Storage object which was instantiated with the appropriate storage filepath.","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"BenjaminLHR"},"content":"     * @return The output to be displayed by Duke.","lastModifiedDate":"2021-09-03"},{"lineNumber":31,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"BenjaminLHR"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":33,"author":{"gitId":"BenjaminLHR"},"content":"    public String execute(TaskList taskList, Storage storage) {","lastModifiedDate":"2021-09-03"},{"lineNumber":34,"author":{"gitId":"BenjaminLHR"},"content":"        String output \u003d taskList.addTask(eventTask);","lastModifiedDate":"2021-09-03"},{"lineNumber":35,"author":{"gitId":"BenjaminLHR"},"content":"        try {","lastModifiedDate":"2021-09-03"},{"lineNumber":36,"author":{"gitId":"BenjaminLHR"},"content":"            storage.saveTasksToFile(taskList);","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"BenjaminLHR"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-03"},{"lineNumber":38,"author":{"gitId":"BenjaminLHR"},"content":"            output \u003d String.format(\"%s\\n%s\", output, e.getMessage());","lastModifiedDate":"2021-09-03"},{"lineNumber":39,"author":{"gitId":"BenjaminLHR"},"content":"        }","lastModifiedDate":"2021-09-03"},{"lineNumber":40,"author":{"gitId":"BenjaminLHR"},"content":"        return output;","lastModifiedDate":"2021-09-03"},{"lineNumber":41,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":42,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":43,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"BenjaminLHR"},"content":"     * Returns a boolean specifying whether Duke should terminate.","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"BenjaminLHR"},"content":"     * @return false","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"BenjaminLHR"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":49,"author":{"gitId":"BenjaminLHR"},"content":"    public boolean shouldExit() {","lastModifiedDate":"2021-08-18"},{"lineNumber":50,"author":{"gitId":"BenjaminLHR"},"content":"        return false;","lastModifiedDate":"2021-08-18"},{"lineNumber":51,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":52,"author":{"gitId":"BenjaminLHR"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"BenjaminLHR":52}},{"path":"src/main/java/duke/command/ExceptionalCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenjaminLHR"},"content":"package duke.command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"BenjaminLHR"},"content":"import duke.core.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"BenjaminLHR"},"content":"import duke.core.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"BenjaminLHR"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"BenjaminLHR"},"content":" * Encapsulates a command to be returned by Parser.parse() when it encounters an exception while parsing.","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"BenjaminLHR"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"BenjaminLHR"},"content":"public class ExceptionalCommand extends Command {","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"BenjaminLHR"},"content":"    private Exception e;","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"BenjaminLHR"},"content":"     * Constructs an ExceptionalCommand object.","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"BenjaminLHR"},"content":"     * @param e The Exception encountered during parsing.","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"BenjaminLHR"},"content":"    public ExceptionalCommand(Exception e) {","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"BenjaminLHR"},"content":"        this.e \u003d e;","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":20,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":21,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"BenjaminLHR"},"content":"     * Returns the detailed message from the exception encountered.","lastModifiedDate":"2021-09-03"},{"lineNumber":23,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"BenjaminLHR"},"content":"     * @param taskList The TaskList object storing all the tasks.","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"BenjaminLHR"},"content":"     * @param storage The Storage object which was instantiated with the appropriate storage filepath.","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"BenjaminLHR"},"content":"     * @return The detailed message from the exception encountered.","lastModifiedDate":"2021-09-03"},{"lineNumber":27,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"BenjaminLHR"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":29,"author":{"gitId":"BenjaminLHR"},"content":"    public String execute(TaskList taskList, Storage storage) {","lastModifiedDate":"2021-09-03"},{"lineNumber":30,"author":{"gitId":"BenjaminLHR"},"content":"        return e.getMessage();","lastModifiedDate":"2021-09-03"},{"lineNumber":31,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":32,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":33,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"BenjaminLHR"},"content":"     * Returns a boolean specifying whether Duke should terminate.","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"BenjaminLHR"},"content":"     * @return false","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"BenjaminLHR"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":39,"author":{"gitId":"BenjaminLHR"},"content":"    public boolean shouldExit() {","lastModifiedDate":"2021-08-19"},{"lineNumber":40,"author":{"gitId":"BenjaminLHR"},"content":"        return false;","lastModifiedDate":"2021-08-19"},{"lineNumber":41,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":42,"author":{"gitId":"BenjaminLHR"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"BenjaminLHR":42}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenjaminLHR"},"content":"package duke.command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"BenjaminLHR"},"content":"import duke.core.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"BenjaminLHR"},"content":"import duke.core.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"BenjaminLHR"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"BenjaminLHR"},"content":"    private String keyword;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"BenjaminLHR"},"content":"    public FindCommand(String keyword) {","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"BenjaminLHR"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"BenjaminLHR"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"BenjaminLHR"},"content":"    public String execute(TaskList taskList, Storage storage) {","lastModifiedDate":"2021-09-03"},{"lineNumber":15,"author":{"gitId":"BenjaminLHR"},"content":"        String output \u003d taskList.findAndListTasks(keyword);","lastModifiedDate":"2021-09-10"},{"lineNumber":16,"author":{"gitId":"BenjaminLHR"},"content":"        return output;","lastModifiedDate":"2021-09-10"},{"lineNumber":17,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"BenjaminLHR"},"content":"    public boolean shouldExit() {","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"BenjaminLHR"},"content":"        return false;","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"BenjaminLHR"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"BenjaminLHR":22}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenjaminLHR"},"content":"package duke.command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"BenjaminLHR"},"content":"import duke.core.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"BenjaminLHR"},"content":"import duke.core.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"BenjaminLHR"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"BenjaminLHR"},"content":" * Encapsulates a command to list all the tasks present in the task list.","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"BenjaminLHR"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"BenjaminLHR"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"BenjaminLHR"},"content":"     * Displays the tasks present in the task list and returns the output to be displayed by Duke.","lastModifiedDate":"2021-09-03"},{"lineNumber":12,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"BenjaminLHR"},"content":"     * @param taskList The TaskList object storing all the tasks.","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"BenjaminLHR"},"content":"     * @param storage The Storage object which was instantiated with the appropriate storage filepath.","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"BenjaminLHR"},"content":"     * @return The output to be displayed by Duke.","lastModifiedDate":"2021-09-03"},{"lineNumber":16,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"BenjaminLHR"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"BenjaminLHR"},"content":"    public String execute(TaskList taskList, Storage storage) {","lastModifiedDate":"2021-09-03"},{"lineNumber":19,"author":{"gitId":"BenjaminLHR"},"content":"        return taskList.toString();","lastModifiedDate":"2021-09-03"},{"lineNumber":20,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"BenjaminLHR"},"content":"     * Returns a boolean specifying whether Duke should terminate.","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"BenjaminLHR"},"content":"     * @return false","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"BenjaminLHR"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":28,"author":{"gitId":"BenjaminLHR"},"content":"    public boolean shouldExit() {","lastModifiedDate":"2021-08-18"},{"lineNumber":29,"author":{"gitId":"BenjaminLHR"},"content":"        return false;","lastModifiedDate":"2021-08-18"},{"lineNumber":30,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":31,"author":{"gitId":"BenjaminLHR"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"BenjaminLHR":31}},{"path":"src/main/java/duke/command/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenjaminLHR"},"content":"package duke.command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"BenjaminLHR"},"content":"import duke.core.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"BenjaminLHR"},"content":"import duke.core.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"BenjaminLHR"},"content":"import duke.task.Todo;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"BenjaminLHR"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-03"},{"lineNumber":8,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":9,"author":{"gitId":"BenjaminLHR"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"BenjaminLHR"},"content":" * Encapsulates a command that handles the addition of todo tasks into the task list.","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"BenjaminLHR"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"BenjaminLHR"},"content":"public class TodoCommand extends Command {","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"BenjaminLHR"},"content":"    private Todo todoTask;","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"BenjaminLHR"},"content":"     * Constructs a TodoCommand object.","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"BenjaminLHR"},"content":"     * @param taskName Description of the todo task.","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"BenjaminLHR"},"content":"    public TodoCommand(String taskName) {","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"BenjaminLHR"},"content":"        todoTask \u003d new Todo(taskName);","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"BenjaminLHR"},"content":"     * Adds the todo task into the task list and storage file and returns the output to be displayed by Duke.","lastModifiedDate":"2021-09-03"},{"lineNumber":26,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"BenjaminLHR"},"content":"     * @param taskList The TaskList object storing all the tasks.","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"BenjaminLHR"},"content":"     * @param storage The Storage object which was instantiated with the appropriate storage filepath.","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"BenjaminLHR"},"content":"     * @return The output to be displayed by Duke.","lastModifiedDate":"2021-09-03"},{"lineNumber":30,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"BenjaminLHR"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":32,"author":{"gitId":"BenjaminLHR"},"content":"    public String execute(TaskList taskList, Storage storage) {","lastModifiedDate":"2021-09-03"},{"lineNumber":33,"author":{"gitId":"BenjaminLHR"},"content":"        String output \u003d taskList.addTask(todoTask);","lastModifiedDate":"2021-09-03"},{"lineNumber":34,"author":{"gitId":"BenjaminLHR"},"content":"        try {","lastModifiedDate":"2021-09-03"},{"lineNumber":35,"author":{"gitId":"BenjaminLHR"},"content":"            storage.saveTasksToFile(taskList);","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"BenjaminLHR"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-03"},{"lineNumber":37,"author":{"gitId":"BenjaminLHR"},"content":"            output \u003d String.format(\"%s\\n%s\", output, e.getMessage());","lastModifiedDate":"2021-09-03"},{"lineNumber":38,"author":{"gitId":"BenjaminLHR"},"content":"        }","lastModifiedDate":"2021-09-03"},{"lineNumber":39,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":40,"author":{"gitId":"BenjaminLHR"},"content":"        return output;","lastModifiedDate":"2021-09-03"},{"lineNumber":41,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":42,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":43,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"BenjaminLHR"},"content":"     * Returns a boolean specifying whether Duke should terminate.","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"BenjaminLHR"},"content":"     * @return false","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"BenjaminLHR"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":49,"author":{"gitId":"BenjaminLHR"},"content":"    public boolean shouldExit() {","lastModifiedDate":"2021-08-18"},{"lineNumber":50,"author":{"gitId":"BenjaminLHR"},"content":"        return false;","lastModifiedDate":"2021-08-18"},{"lineNumber":51,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":52,"author":{"gitId":"BenjaminLHR"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"BenjaminLHR":52}},{"path":"src/main/java/duke/core/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenjaminLHR"},"content":"package duke.core;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"BenjaminLHR"},"content":"import duke.command.Command;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"BenjaminLHR"},"content":"import duke.gui.Ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"BenjaminLHR"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"BenjaminLHR"},"content":" * Duke is a chat bot that helps you keep track of tasks. It recognizes specific commands as stated in the user guide.","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"BenjaminLHR"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":10,"author":{"gitId":"BenjaminLHR"},"content":"    private TaskList taskList;","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"BenjaminLHR"},"content":"    private Storage storage;","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"BenjaminLHR"},"content":"     * Constructs a Duke object.","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"BenjaminLHR"},"content":"     * @param filePath The relative filepath of the storage file.","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"BenjaminLHR"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"BenjaminLHR"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"BenjaminLHR"},"content":"        taskList \u003d new TaskList(storage.load());","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"BenjaminLHR"},"content":"    private void run() {","lastModifiedDate":"2021-08-18"},{"lineNumber":24,"author":{"gitId":"BenjaminLHR"},"content":"        boolean shouldExit \u003d false;","lastModifiedDate":"2021-08-18"},{"lineNumber":25,"author":{"gitId":"BenjaminLHR"},"content":"        Ui.greet();","lastModifiedDate":"2021-08-18"},{"lineNumber":26,"author":{"gitId":"BenjaminLHR"},"content":"        while (!shouldExit) {","lastModifiedDate":"2021-08-18"},{"lineNumber":27,"author":{"gitId":"BenjaminLHR"},"content":"            String input \u003d Ui.readInput();","lastModifiedDate":"2021-08-18"},{"lineNumber":28,"author":{"gitId":"BenjaminLHR"},"content":"            Command command \u003d Parser.parse(input, taskList);","lastModifiedDate":"2021-08-19"},{"lineNumber":29,"author":{"gitId":"BenjaminLHR"},"content":"            String output \u003d command.execute(taskList, storage);","lastModifiedDate":"2021-09-03"},{"lineNumber":30,"author":{"gitId":"BenjaminLHR"},"content":"            Ui.formatAndPrint(output);","lastModifiedDate":"2021-09-03"},{"lineNumber":31,"author":{"gitId":"BenjaminLHR"},"content":"            shouldExit \u003d command.shouldExit();","lastModifiedDate":"2021-08-18"},{"lineNumber":32,"author":{"gitId":"BenjaminLHR"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":33,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":34,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-09-03"},{"lineNumber":36,"author":{"gitId":"BenjaminLHR"},"content":"     * Returns a String array with two elements. The first element is Duke\u0027s response to a given user input, and the","lastModifiedDate":"2021-09-03"},{"lineNumber":37,"author":{"gitId":"BenjaminLHR"},"content":"     * second element indicates whether Duke should exit, with \"1\" indicating yes and \"0\" indicating no.","lastModifiedDate":"2021-09-03"},{"lineNumber":38,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-09-03"},{"lineNumber":39,"author":{"gitId":"BenjaminLHR"},"content":"     * @param input The user\u0027s input","lastModifiedDate":"2021-09-03"},{"lineNumber":40,"author":{"gitId":"BenjaminLHR"},"content":"     * @return A String array with two elements. The first element is Duke\u0027s response to a given user input, and the","lastModifiedDate":"2021-09-03"},{"lineNumber":41,"author":{"gitId":"BenjaminLHR"},"content":"     * second element indicates whether Duke should exit, with \"1\" indicating yes and \"0\" indicating no.","lastModifiedDate":"2021-09-03"},{"lineNumber":42,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-09-03"},{"lineNumber":43,"author":{"gitId":"BenjaminLHR"},"content":"    public String[] getResponseAndExitStatus(String input) {","lastModifiedDate":"2021-09-03"},{"lineNumber":44,"author":{"gitId":"BenjaminLHR"},"content":"        Command command \u003d Parser.parse(input, taskList);","lastModifiedDate":"2021-09-03"},{"lineNumber":45,"author":{"gitId":"BenjaminLHR"},"content":"        String response \u003d command.execute(taskList, storage);","lastModifiedDate":"2021-09-03"},{"lineNumber":46,"author":{"gitId":"BenjaminLHR"},"content":"        String exitStatus \u003d command.shouldExit() ? \"1\" : \"0\";","lastModifiedDate":"2021-09-03"},{"lineNumber":47,"author":{"gitId":"BenjaminLHR"},"content":"        return new String[] {response, exitStatus};","lastModifiedDate":"2021-09-03"},{"lineNumber":48,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-09-03"},{"lineNumber":49,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":51,"author":{"gitId":"BenjaminLHR"},"content":"        new Duke(\"data/duke.txt\").run();","lastModifiedDate":"2021-09-03"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"BenjaminLHR":49,"-":4}},{"path":"src/main/java/duke/core/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenjaminLHR"},"content":"package duke.core;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"BenjaminLHR"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"BenjaminLHR"},"content":" * DukeException encapsulates Exceptions specific to Duke.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"BenjaminLHR"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"BenjaminLHR"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"BenjaminLHR"},"content":"     * Constructs a DukeException object.","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"BenjaminLHR"},"content":"     * @param message The detailed message of the exception encountered.","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"BenjaminLHR"},"content":"    public DukeException(String message) {","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"BenjaminLHR"},"content":"        super(message);","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"BenjaminLHR"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"BenjaminLHR":15}},{"path":"src/main/java/duke/core/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenjaminLHR"},"content":"package duke.core;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"BenjaminLHR"},"content":"import duke.command.ByeCommand;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"BenjaminLHR"},"content":"import duke.command.Command;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"BenjaminLHR"},"content":"import duke.command.DeadlineCommand;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"BenjaminLHR"},"content":"import duke.command.DeleteCommand;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"BenjaminLHR"},"content":"import duke.command.DoneCommand;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"BenjaminLHR"},"content":"import duke.command.EventCommand;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"BenjaminLHR"},"content":"import duke.command.ExceptionalCommand;","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"BenjaminLHR"},"content":"import duke.command.FindCommand;","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"BenjaminLHR"},"content":"import duke.command.ListCommand;","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"BenjaminLHR"},"content":"import duke.command.TodoCommand;","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"BenjaminLHR"},"content":"import duke.helpful_functions.HelpfulFunctions;","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"BenjaminLHR"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":17,"author":{"gitId":"BenjaminLHR"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"BenjaminLHR"},"content":" * Parser is a class that provides useful method(s) to make sense of and translate user input into Command.","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"BenjaminLHR"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"BenjaminLHR"},"content":"public class Parser {","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"BenjaminLHR"},"content":"     * parse is a static method that makes sense of and translates user input into a Command.","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"BenjaminLHR"},"content":"     * @param input The user\u0027s input in String format.","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"BenjaminLHR"},"content":"     * @param taskList The TaskList object storing all the tasks.","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"BenjaminLHR"},"content":"     * @return A Command object that will be executed by Duke to carry out the instructions of the user.","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"BenjaminLHR"},"content":"    public static Command parse(String input, TaskList taskList) {","lastModifiedDate":"2021-08-19"},{"lineNumber":29,"author":{"gitId":"BenjaminLHR"},"content":"        try {","lastModifiedDate":"2021-08-19"},{"lineNumber":30,"author":{"gitId":"BenjaminLHR"},"content":"            // Check if storage regex is present in input","lastModifiedDate":"2021-09-24"},{"lineNumber":31,"author":{"gitId":"BenjaminLHR"},"content":"            checkPresenceOfStorageRegex(input);","lastModifiedDate":"2021-09-24"},{"lineNumber":32,"author":{"gitId":"BenjaminLHR"},"content":"            // Check if the input is in a valid format, and throw a DukeException if it is not","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"BenjaminLHR"},"content":"            checkValiditiy(input, taskList);","lastModifiedDate":"2021-08-19"},{"lineNumber":34,"author":{"gitId":"BenjaminLHR"},"content":"            // Return a Command based on the input type (determined by first word of input)","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"BenjaminLHR"},"content":"            final String REGEX \u003d \" \";","lastModifiedDate":"2021-09-10"},{"lineNumber":36,"author":{"gitId":"BenjaminLHR"},"content":"            String[] splittedInput \u003d input.split(REGEX);","lastModifiedDate":"2021-09-10"},{"lineNumber":37,"author":{"gitId":"BenjaminLHR"},"content":"            String commandType \u003d splittedInput[0];","lastModifiedDate":"2021-09-10"},{"lineNumber":38,"author":{"gitId":"BenjaminLHR"},"content":"            switch (commandType) {","lastModifiedDate":"2021-09-10"},{"lineNumber":39,"author":{"gitId":"BenjaminLHR"},"content":"            case \"l\":","lastModifiedDate":"2021-09-23"},{"lineNumber":40,"author":{"gitId":"BenjaminLHR"},"content":"            case \"list\":","lastModifiedDate":"2021-08-18"},{"lineNumber":41,"author":{"gitId":"BenjaminLHR"},"content":"                return new ListCommand();","lastModifiedDate":"2021-08-18"},{"lineNumber":42,"author":{"gitId":"BenjaminLHR"},"content":"            case \"done\":","lastModifiedDate":"2021-08-18"},{"lineNumber":43,"author":{"gitId":"BenjaminLHR"},"content":"                return new DoneCommand(Integer.valueOf(splittedInput[1]));","lastModifiedDate":"2021-08-18"},{"lineNumber":44,"author":{"gitId":"BenjaminLHR"},"content":"            case \"delete\":","lastModifiedDate":"2021-08-19"},{"lineNumber":45,"author":{"gitId":"BenjaminLHR"},"content":"                return new DeleteCommand(Integer.valueOf(splittedInput[1]));","lastModifiedDate":"2021-08-19"},{"lineNumber":46,"author":{"gitId":"BenjaminLHR"},"content":"            case \"f\":","lastModifiedDate":"2021-09-23"},{"lineNumber":47,"author":{"gitId":"BenjaminLHR"},"content":"            case \"find\":","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"BenjaminLHR"},"content":"                return new FindCommand(splittedInput[1]);","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"BenjaminLHR"},"content":"            case \"b\":","lastModifiedDate":"2021-09-23"},{"lineNumber":50,"author":{"gitId":"BenjaminLHR"},"content":"            case \"bye\":","lastModifiedDate":"2021-08-18"},{"lineNumber":51,"author":{"gitId":"BenjaminLHR"},"content":"                return new ByeCommand();","lastModifiedDate":"2021-08-18"},{"lineNumber":52,"author":{"gitId":"BenjaminLHR"},"content":"            case \"t\":","lastModifiedDate":"2021-09-23"},{"lineNumber":53,"author":{"gitId":"BenjaminLHR"},"content":"            case \"todo\":","lastModifiedDate":"2021-08-18"},{"lineNumber":54,"author":{"gitId":"BenjaminLHR"},"content":"                return validTodoHandler(input);","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"BenjaminLHR"},"content":"            case \"deadline\":","lastModifiedDate":"2021-08-18"},{"lineNumber":56,"author":{"gitId":"BenjaminLHR"},"content":"                return validDeadlineHandler(input);","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"BenjaminLHR"},"content":"            case \"e\":","lastModifiedDate":"2021-09-23"},{"lineNumber":58,"author":{"gitId":"BenjaminLHR"},"content":"            case \"event\":","lastModifiedDate":"2021-08-18"},{"lineNumber":59,"author":{"gitId":"BenjaminLHR"},"content":"                return validEventHandler(input);","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"BenjaminLHR"},"content":"            default:","lastModifiedDate":"2021-08-18"},{"lineNumber":61,"author":{"gitId":"BenjaminLHR"},"content":"                // This is for any other erroneous input we did not catch from checkValidity","lastModifiedDate":"2021-08-19"},{"lineNumber":62,"author":{"gitId":"BenjaminLHR"},"content":"                DukeException e \u003d new DukeException(\":( OOPS!!! I\u0027m sorry, but I don\u0027t know what that means\");","lastModifiedDate":"2021-09-22"},{"lineNumber":63,"author":{"gitId":"BenjaminLHR"},"content":"                return new ExceptionalCommand(e);","lastModifiedDate":"2021-08-19"},{"lineNumber":64,"author":{"gitId":"BenjaminLHR"},"content":"            }","lastModifiedDate":"2021-08-18"},{"lineNumber":65,"author":{"gitId":"BenjaminLHR"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-19"},{"lineNumber":66,"author":{"gitId":"BenjaminLHR"},"content":"            return new ExceptionalCommand(e);","lastModifiedDate":"2021-08-19"},{"lineNumber":67,"author":{"gitId":"BenjaminLHR"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":68,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":69,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":70,"author":{"gitId":"BenjaminLHR"},"content":"    private static void checkPresenceOfStorageRegex(String input) throws DukeException {","lastModifiedDate":"2021-09-24"},{"lineNumber":71,"author":{"gitId":"BenjaminLHR"},"content":"        if (input.contains(Storage.REGEX_FOR_STORAGE)) {","lastModifiedDate":"2021-09-24"},{"lineNumber":72,"author":{"gitId":"BenjaminLHR"},"content":"            throw new DukeException(","lastModifiedDate":"2021-09-24"},{"lineNumber":73,"author":{"gitId":"BenjaminLHR"},"content":"                    String.format(\"HA! Caught you trying to mess with storage. Please do not use %s in your input\",","lastModifiedDate":"2021-09-24"},{"lineNumber":74,"author":{"gitId":"BenjaminLHR"},"content":"                            Storage.REGEX_FOR_STORAGE));","lastModifiedDate":"2021-09-24"},{"lineNumber":75,"author":{"gitId":"BenjaminLHR"},"content":"        }","lastModifiedDate":"2021-09-24"},{"lineNumber":76,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-09-24"},{"lineNumber":77,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":78,"author":{"gitId":"BenjaminLHR"},"content":"    private static boolean checkValiditiy(String input, TaskList taskList) throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":79,"author":{"gitId":"BenjaminLHR"},"content":"        final String REGEX \u003d \" \";","lastModifiedDate":"2021-09-10"},{"lineNumber":80,"author":{"gitId":"BenjaminLHR"},"content":"        String[] splittedInput \u003d input.split(REGEX);","lastModifiedDate":"2021-09-10"},{"lineNumber":81,"author":{"gitId":"BenjaminLHR"},"content":"        if (input.strip().length() \u003d\u003d 0) {","lastModifiedDate":"2021-09-24"},{"lineNumber":82,"author":{"gitId":"BenjaminLHR"},"content":"            throw new DukeException(\":( OOPS!!! The input cannot be empty.\");","lastModifiedDate":"2021-09-03"},{"lineNumber":83,"author":{"gitId":"BenjaminLHR"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":84,"author":{"gitId":"BenjaminLHR"},"content":"        String commandType \u003d splittedInput[0];","lastModifiedDate":"2021-09-24"},{"lineNumber":85,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":86,"author":{"gitId":"BenjaminLHR"},"content":"        switch (commandType) {","lastModifiedDate":"2021-09-10"},{"lineNumber":87,"author":{"gitId":"BenjaminLHR"},"content":"        case \"t\":","lastModifiedDate":"2021-09-23"},{"lineNumber":88,"author":{"gitId":"BenjaminLHR"},"content":"        case \"todo\":","lastModifiedDate":"2021-08-19"},{"lineNumber":89,"author":{"gitId":"BenjaminLHR"},"content":"            checkValidityTodo(input);","lastModifiedDate":"2021-08-19"},{"lineNumber":90,"author":{"gitId":"BenjaminLHR"},"content":"            break;","lastModifiedDate":"2021-08-19"},{"lineNumber":91,"author":{"gitId":"BenjaminLHR"},"content":"        case \"deadline\":","lastModifiedDate":"2021-08-19"},{"lineNumber":92,"author":{"gitId":"BenjaminLHR"},"content":"            checkValidityDeadline(input);","lastModifiedDate":"2021-08-19"},{"lineNumber":93,"author":{"gitId":"BenjaminLHR"},"content":"            break;","lastModifiedDate":"2021-08-19"},{"lineNumber":94,"author":{"gitId":"BenjaminLHR"},"content":"        case \"e\":","lastModifiedDate":"2021-09-23"},{"lineNumber":95,"author":{"gitId":"BenjaminLHR"},"content":"        case \"event\":","lastModifiedDate":"2021-08-19"},{"lineNumber":96,"author":{"gitId":"BenjaminLHR"},"content":"            checkValidityEvent(input);","lastModifiedDate":"2021-08-19"},{"lineNumber":97,"author":{"gitId":"BenjaminLHR"},"content":"            break;","lastModifiedDate":"2021-08-19"},{"lineNumber":98,"author":{"gitId":"BenjaminLHR"},"content":"        case \"done\":","lastModifiedDate":"2021-08-19"},{"lineNumber":99,"author":{"gitId":"BenjaminLHR"},"content":"            checkValidityDoneOrDelete(input, taskList, \"done\");","lastModifiedDate":"2021-09-11"},{"lineNumber":100,"author":{"gitId":"BenjaminLHR"},"content":"            break;","lastModifiedDate":"2021-08-19"},{"lineNumber":101,"author":{"gitId":"BenjaminLHR"},"content":"        case \"delete\":","lastModifiedDate":"2021-08-19"},{"lineNumber":102,"author":{"gitId":"BenjaminLHR"},"content":"            checkValidityDoneOrDelete(input, taskList, \"delete\");","lastModifiedDate":"2021-09-11"},{"lineNumber":103,"author":{"gitId":"BenjaminLHR"},"content":"            break;","lastModifiedDate":"2021-08-19"},{"lineNumber":104,"author":{"gitId":"BenjaminLHR"},"content":"        case \"f\":","lastModifiedDate":"2021-09-23"},{"lineNumber":105,"author":{"gitId":"BenjaminLHR"},"content":"        case \"find\":","lastModifiedDate":"2021-09-11"},{"lineNumber":106,"author":{"gitId":"BenjaminLHR"},"content":"            checkValidityFind(input);","lastModifiedDate":"2021-09-11"},{"lineNumber":107,"author":{"gitId":"BenjaminLHR"},"content":"            break;","lastModifiedDate":"2021-09-11"},{"lineNumber":108,"author":{"gitId":"BenjaminLHR"},"content":"        default:","lastModifiedDate":"2021-09-11"},{"lineNumber":109,"author":{"gitId":"BenjaminLHR"},"content":"            // No action needed due to the default case in parse()","lastModifiedDate":"2021-09-11"},{"lineNumber":110,"author":{"gitId":"BenjaminLHR"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":111,"author":{"gitId":"BenjaminLHR"},"content":"        return true;","lastModifiedDate":"2021-08-19"},{"lineNumber":112,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":113,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":114,"author":{"gitId":"BenjaminLHR"},"content":"    private static int numOfComponentsExclCommand(String input, String regex) {","lastModifiedDate":"2021-09-23"},{"lineNumber":115,"author":{"gitId":"BenjaminLHR"},"content":"        String[] splittedInput \u003d input.split(\" \", 2);","lastModifiedDate":"2021-09-23"},{"lineNumber":116,"author":{"gitId":"BenjaminLHR"},"content":"        // This means input contains only one word, the command","lastModifiedDate":"2021-09-23"},{"lineNumber":117,"author":{"gitId":"BenjaminLHR"},"content":"        if (splittedInput.length \u003c 2) {","lastModifiedDate":"2021-09-23"},{"lineNumber":118,"author":{"gitId":"BenjaminLHR"},"content":"            return 0;","lastModifiedDate":"2021-09-23"},{"lineNumber":119,"author":{"gitId":"BenjaminLHR"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":120,"author":{"gitId":"BenjaminLHR"},"content":"        String inputWithoutCommand \u003d splittedInput[1];","lastModifiedDate":"2021-09-23"},{"lineNumber":121,"author":{"gitId":"BenjaminLHR"},"content":"        long numOfComponents","lastModifiedDate":"2021-09-23"},{"lineNumber":122,"author":{"gitId":"BenjaminLHR"},"content":"                \u003d Arrays.stream(inputWithoutCommand.strip().split(regex)).filter(e -\u003e e.length() \u003e 0).count();","lastModifiedDate":"2021-09-23"},{"lineNumber":123,"author":{"gitId":"BenjaminLHR"},"content":"        return (int) numOfComponents;","lastModifiedDate":"2021-09-23"},{"lineNumber":124,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":125,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":126,"author":{"gitId":"BenjaminLHR"},"content":"    private static void checkValidityTodo(String input) throws DukeException {","lastModifiedDate":"2021-09-11"},{"lineNumber":127,"author":{"gitId":"BenjaminLHR"},"content":"        final String REGEX \u003d \" \";","lastModifiedDate":"2021-09-23"},{"lineNumber":128,"author":{"gitId":"BenjaminLHR"},"content":"        if (numOfComponentsExclCommand(input, REGEX) \u003c 1) {","lastModifiedDate":"2021-09-23"},{"lineNumber":129,"author":{"gitId":"BenjaminLHR"},"content":"            throw new DukeException(\":( OOPS!!! Description of todo cannot be empty!\");","lastModifiedDate":"2021-09-23"},{"lineNumber":130,"author":{"gitId":"BenjaminLHR"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":131,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":132,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":133,"author":{"gitId":"BenjaminLHR"},"content":"    private static void checkValidityDeadline(String input) throws DukeException {","lastModifiedDate":"2021-09-11"},{"lineNumber":134,"author":{"gitId":"BenjaminLHR"},"content":"        final String REGEX_FOR_DATE \u003d \"/by\";","lastModifiedDate":"2021-09-11"},{"lineNumber":135,"author":{"gitId":"BenjaminLHR"},"content":"        if (numOfComponentsExclCommand(input, REGEX_FOR_DATE) \u003c 2) {","lastModifiedDate":"2021-09-23"},{"lineNumber":136,"author":{"gitId":"BenjaminLHR"},"content":"            throw new DukeException(\":( OOPS!!! A deadline task requires both name and date!\");","lastModifiedDate":"2021-09-23"},{"lineNumber":137,"author":{"gitId":"BenjaminLHR"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":138,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":139,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":140,"author":{"gitId":"BenjaminLHR"},"content":"    private static void checkValidityEvent(String input) throws DukeException {","lastModifiedDate":"2021-09-11"},{"lineNumber":141,"author":{"gitId":"BenjaminLHR"},"content":"        final String REGEX_FOR_DATE \u003d \"/at\";","lastModifiedDate":"2021-09-11"},{"lineNumber":142,"author":{"gitId":"BenjaminLHR"},"content":"        if (numOfComponentsExclCommand(input, REGEX_FOR_DATE) \u003c 2) {","lastModifiedDate":"2021-09-23"},{"lineNumber":143,"author":{"gitId":"BenjaminLHR"},"content":"            throw new DukeException(\":( OOPS!!! An event task requires both name and date!\");","lastModifiedDate":"2021-09-23"},{"lineNumber":144,"author":{"gitId":"BenjaminLHR"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":145,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":146,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":147,"author":{"gitId":"BenjaminLHR"},"content":"    private static void checkValidityFind(String input) throws DukeException {","lastModifiedDate":"2021-09-11"},{"lineNumber":148,"author":{"gitId":"BenjaminLHR"},"content":"        final String REGEX \u003d \" \";","lastModifiedDate":"2021-09-23"},{"lineNumber":149,"author":{"gitId":"BenjaminLHR"},"content":"        int numOfComponents \u003d numOfComponentsExclCommand(input, REGEX);","lastModifiedDate":"2021-09-23"},{"lineNumber":150,"author":{"gitId":"BenjaminLHR"},"content":"        if (numOfComponents \u003c 1) {","lastModifiedDate":"2021-09-23"},{"lineNumber":151,"author":{"gitId":"BenjaminLHR"},"content":"            throw new DukeException(\":( OOPS!!! Please specify what you want to find.\");","lastModifiedDate":"2021-09-23"},{"lineNumber":152,"author":{"gitId":"BenjaminLHR"},"content":"        } else if (numOfComponents \u003e 1) {","lastModifiedDate":"2021-09-23"},{"lineNumber":153,"author":{"gitId":"BenjaminLHR"},"content":"            throw new DukeException(\":( OOPS!!! Duke only supports finding by a single keyword.\");","lastModifiedDate":"2021-09-23"},{"lineNumber":154,"author":{"gitId":"BenjaminLHR"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":155,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":156,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":157,"author":{"gitId":"BenjaminLHR"},"content":"    private static void checkValidityDoneOrDelete(String input, TaskList taskList, String commandType)","lastModifiedDate":"2021-09-11"},{"lineNumber":158,"author":{"gitId":"BenjaminLHR"},"content":"            throws DukeException {","lastModifiedDate":"2021-09-11"},{"lineNumber":159,"author":{"gitId":"BenjaminLHR"},"content":"        final String REGEX \u003d \" \";","lastModifiedDate":"2021-09-11"},{"lineNumber":160,"author":{"gitId":"BenjaminLHR"},"content":"        if (numOfComponentsExclCommand(input, REGEX) !\u003d 1) {","lastModifiedDate":"2021-09-23"},{"lineNumber":161,"author":{"gitId":"BenjaminLHR"},"content":"            throw new DukeException(\":( OOPS!!! Please specify one and only one argument for \" + commandType);","lastModifiedDate":"2021-09-23"},{"lineNumber":162,"author":{"gitId":"BenjaminLHR"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":163,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":164,"author":{"gitId":"BenjaminLHR"},"content":"        String[] splittedInput \u003d input.split(REGEX);","lastModifiedDate":"2021-09-23"},{"lineNumber":165,"author":{"gitId":"BenjaminLHR"},"content":"        String indexArgument \u003d splittedInput[1];","lastModifiedDate":"2021-09-11"},{"lineNumber":166,"author":{"gitId":"BenjaminLHR"},"content":"        checkIndexArgument(indexArgument, taskList);","lastModifiedDate":"2021-09-11"},{"lineNumber":167,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":168,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":169,"author":{"gitId":"BenjaminLHR"},"content":"    private static void checkIndexArgument(String indexArgument, TaskList taskList) throws DukeException {","lastModifiedDate":"2021-09-11"},{"lineNumber":170,"author":{"gitId":"BenjaminLHR"},"content":"        if (HelpfulFunctions.isInteger(indexArgument)) {","lastModifiedDate":"2021-09-11"},{"lineNumber":171,"author":{"gitId":"BenjaminLHR"},"content":"            int index \u003d Integer.parseInt(indexArgument);","lastModifiedDate":"2021-09-11"},{"lineNumber":172,"author":{"gitId":"BenjaminLHR"},"content":"            if (index \u003c 1 || index \u003e taskList.getSize()) {","lastModifiedDate":"2021-08-19"},{"lineNumber":173,"author":{"gitId":"BenjaminLHR"},"content":"                throw new DukeException(\":( OOPS!!! Your index is out of range\");","lastModifiedDate":"2021-09-03"},{"lineNumber":174,"author":{"gitId":"BenjaminLHR"},"content":"            }","lastModifiedDate":"2021-08-19"},{"lineNumber":175,"author":{"gitId":"BenjaminLHR"},"content":"        } else {","lastModifiedDate":"2021-08-19"},{"lineNumber":176,"author":{"gitId":"BenjaminLHR"},"content":"            throw new DukeException(\":( OOPS!!! The index must be an integer\");","lastModifiedDate":"2021-09-23"},{"lineNumber":177,"author":{"gitId":"BenjaminLHR"},"content":"        }","lastModifiedDate":"2021-09-11"},{"lineNumber":178,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":179,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":180,"author":{"gitId":"BenjaminLHR"},"content":"    private static Command validTodoHandler(String input) {","lastModifiedDate":"2021-08-25"},{"lineNumber":181,"author":{"gitId":"BenjaminLHR"},"content":"        final String REGEX \u003d \" \";","lastModifiedDate":"2021-09-10"},{"lineNumber":182,"author":{"gitId":"BenjaminLHR"},"content":"        String[] splittedInput \u003d input.split(REGEX, 2);","lastModifiedDate":"2021-09-10"},{"lineNumber":183,"author":{"gitId":"BenjaminLHR"},"content":"        return new TodoCommand(splittedInput[1]);","lastModifiedDate":"2021-08-18"},{"lineNumber":184,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":185,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":186,"author":{"gitId":"BenjaminLHR"},"content":"    private static Command validDeadlineHandler(String input) {","lastModifiedDate":"2021-08-25"},{"lineNumber":187,"author":{"gitId":"BenjaminLHR"},"content":"        final String REGEX_FOR_INPUT \u003d \" \";","lastModifiedDate":"2021-09-10"},{"lineNumber":188,"author":{"gitId":"BenjaminLHR"},"content":"        String details \u003d input.split(REGEX_FOR_INPUT, 2)[1];","lastModifiedDate":"2021-09-10"},{"lineNumber":189,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":190,"author":{"gitId":"BenjaminLHR"},"content":"        final String REGEX_TO_SPLIT_DATE \u003d \"/by\";","lastModifiedDate":"2021-09-11"},{"lineNumber":191,"author":{"gitId":"BenjaminLHR"},"content":"        String splittedByDate[] \u003d details.split(REGEX_TO_SPLIT_DATE, 2);","lastModifiedDate":"2021-09-24"},{"lineNumber":192,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":193,"author":{"gitId":"BenjaminLHR"},"content":"        return new DeadlineCommand(splittedByDate[0].trim(), splittedByDate[1].trim());","lastModifiedDate":"2021-09-11"},{"lineNumber":194,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":195,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":196,"author":{"gitId":"BenjaminLHR"},"content":"    private static Command validEventHandler(String input) {","lastModifiedDate":"2021-08-25"},{"lineNumber":197,"author":{"gitId":"BenjaminLHR"},"content":"        final String REGEX_FOR_INPUT \u003d \" \";","lastModifiedDate":"2021-09-10"},{"lineNumber":198,"author":{"gitId":"BenjaminLHR"},"content":"        String details \u003d input.split(REGEX_FOR_INPUT, 2)[1];","lastModifiedDate":"2021-09-10"},{"lineNumber":199,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":200,"author":{"gitId":"BenjaminLHR"},"content":"        final String REGEX_TO_SPLIT_DATE \u003d \"/at\";","lastModifiedDate":"2021-09-11"},{"lineNumber":201,"author":{"gitId":"BenjaminLHR"},"content":"        String splittedByDate[] \u003d details.split(REGEX_TO_SPLIT_DATE, 2);","lastModifiedDate":"2021-09-24"},{"lineNumber":202,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":203,"author":{"gitId":"BenjaminLHR"},"content":"        return new EventCommand(splittedByDate[0].trim(), splittedByDate[1].trim());","lastModifiedDate":"2021-09-11"},{"lineNumber":204,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":205,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":206,"author":{"gitId":"BenjaminLHR"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"BenjaminLHR":206}},{"path":"src/main/java/duke/core/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenjaminLHR"},"content":"package duke.core;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"BenjaminLHR"},"content":"import duke.gui.Ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"BenjaminLHR"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"BenjaminLHR"},"content":"import duke.task.Event;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"BenjaminLHR"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"BenjaminLHR"},"content":"import duke.task.Todo;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"BenjaminLHR"},"content":"import java.io.File;","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"BenjaminLHR"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"BenjaminLHR"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-03"},{"lineNumber":12,"author":{"gitId":"BenjaminLHR"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"BenjaminLHR"},"content":"import java.util.List;","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"BenjaminLHR"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"BenjaminLHR"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"BenjaminLHR"},"content":" * Encapsulates a storage object that handles saving data into a file and loading data from the file.","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"BenjaminLHR"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"BenjaminLHR"},"content":"public class Storage {","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"BenjaminLHR"},"content":"    private File file;","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"BenjaminLHR"},"content":"    private static final int N_SEGMENTS_IN_DEADLINE \u003d 4;","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"BenjaminLHR"},"content":"    private static final int N_SEGMENTS_IN_EVENT \u003d 4;","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"BenjaminLHR"},"content":"    private static final int N_SEGMENTS_IN_TODO \u003d 3;","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"BenjaminLHR"},"content":"    protected static final String REGEX_FOR_STORAGE \u003d \"_/_,_/_\";","lastModifiedDate":"2021-09-24"},{"lineNumber":25,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"BenjaminLHR"},"content":"     * Constructs a Storage object.","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"BenjaminLHR"},"content":"     * @param filePath The relative filepath of the storage file.","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"BenjaminLHR"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"BenjaminLHR"},"content":"        file \u003d new File(filePath);","lastModifiedDate":"2021-09-03"},{"lineNumber":32,"author":{"gitId":"BenjaminLHR"},"content":"        // Create folder for the file if it does not exist","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"BenjaminLHR"},"content":"        if (!file.getParentFile().exists()) {","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"BenjaminLHR"},"content":"            file.getParentFile().mkdirs();","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"BenjaminLHR"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"BenjaminLHR"},"content":"     * Saves the tasks within the task list into the storage file.","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"BenjaminLHR"},"content":"     * @param taskList The TaskList object storing all the tasks.","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"BenjaminLHR"},"content":"     * @throws IOException If the storage filepath exists but is a directory rather than a regular file,","lastModifiedDate":"2021-09-03"},{"lineNumber":43,"author":{"gitId":"BenjaminLHR"},"content":"     *  does not exist but cannot be created, or cannot be opened for any other reason.","lastModifiedDate":"2021-09-03"},{"lineNumber":44,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"BenjaminLHR"},"content":"    public void saveTasksToFile(TaskList taskList) throws IOException {","lastModifiedDate":"2021-09-03"},{"lineNumber":46,"author":{"gitId":"BenjaminLHR"},"content":"        taskList.saveContents(file);","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"BenjaminLHR"},"content":"     * Loads the tasks from the storage file into an ArrayList.","lastModifiedDate":"2021-08-26"},{"lineNumber":51,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":52,"author":{"gitId":"BenjaminLHR"},"content":"     * @return An ArrayList of tasks.","lastModifiedDate":"2021-08-26"},{"lineNumber":53,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":54,"author":{"gitId":"BenjaminLHR"},"content":"    public ArrayList\u003cTask\u003e load() {","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"BenjaminLHR"},"content":"        ArrayList\u003cTask\u003e listOfTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"BenjaminLHR"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":57,"author":{"gitId":"BenjaminLHR"},"content":"            // Could throw a FileNotFoundException if the file is missing","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"BenjaminLHR"},"content":"            Scanner sc \u003d new Scanner(file);","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"BenjaminLHR"},"content":"            int lineNumber \u003d 0;","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"BenjaminLHR"},"content":"            while (sc.hasNext()) {","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"BenjaminLHR"},"content":"                lineNumber ++;","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"BenjaminLHR"},"content":"                String nextLine \u003d sc.nextLine();","lastModifiedDate":"2021-08-24"},{"lineNumber":64,"author":{"gitId":"BenjaminLHR"},"content":"                switch(nextLine.charAt(0)) {","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"BenjaminLHR"},"content":"                case \u0027T\u0027:","lastModifiedDate":"2021-08-24"},{"lineNumber":66,"author":{"gitId":"BenjaminLHR"},"content":"                    addTodoToList(nextLine, listOfTasks, lineNumber);","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"BenjaminLHR"},"content":"                    break;","lastModifiedDate":"2021-08-24"},{"lineNumber":68,"author":{"gitId":"BenjaminLHR"},"content":"                case \u0027D\u0027:","lastModifiedDate":"2021-08-24"},{"lineNumber":69,"author":{"gitId":"BenjaminLHR"},"content":"                    addDeadlineToList(nextLine, listOfTasks, lineNumber);","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"BenjaminLHR"},"content":"                    break;","lastModifiedDate":"2021-08-24"},{"lineNumber":71,"author":{"gitId":"BenjaminLHR"},"content":"                case \u0027E\u0027:","lastModifiedDate":"2021-08-24"},{"lineNumber":72,"author":{"gitId":"BenjaminLHR"},"content":"                    addEventToList(nextLine, listOfTasks, lineNumber);","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"BenjaminLHR"},"content":"                    break;","lastModifiedDate":"2021-08-24"},{"lineNumber":74,"author":{"gitId":"BenjaminLHR"},"content":"                default:","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"BenjaminLHR"},"content":"                    System.out.println(","lastModifiedDate":"2021-08-25"},{"lineNumber":76,"author":{"gitId":"BenjaminLHR"},"content":"                            String.format(\"Error in Line %s of storage: Line should begin with T, D or E\", lineNumber));","lastModifiedDate":"2021-08-25"},{"lineNumber":77,"author":{"gitId":"BenjaminLHR"},"content":"                }","lastModifiedDate":"2021-08-24"},{"lineNumber":78,"author":{"gitId":"BenjaminLHR"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":79,"author":{"gitId":"BenjaminLHR"},"content":"            return listOfTasks;","lastModifiedDate":"2021-08-25"},{"lineNumber":80,"author":{"gitId":"BenjaminLHR"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":81,"author":{"gitId":"BenjaminLHR"},"content":"            Ui.showStorageFileNotFoundError(e.getMessage());","lastModifiedDate":"2021-08-25"},{"lineNumber":82,"author":{"gitId":"BenjaminLHR"},"content":"            return listOfTasks;","lastModifiedDate":"2021-08-25"},{"lineNumber":83,"author":{"gitId":"BenjaminLHR"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":84,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":85,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":86,"author":{"gitId":"BenjaminLHR"},"content":"    private void addTodoToList(String line, List\u003cTask\u003e listOfTasks, int lineNumber) {","lastModifiedDate":"2021-08-25"},{"lineNumber":87,"author":{"gitId":"BenjaminLHR"},"content":"        String[] splittedLine \u003d line.split(REGEX_FOR_STORAGE);","lastModifiedDate":"2021-09-24"},{"lineNumber":88,"author":{"gitId":"BenjaminLHR"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":89,"author":{"gitId":"BenjaminLHR"},"content":"            checkStoredTodoValidity(splittedLine, lineNumber);","lastModifiedDate":"2021-08-25"},{"lineNumber":90,"author":{"gitId":"BenjaminLHR"},"content":"            Todo todo \u003d new Todo(splittedLine[2]);","lastModifiedDate":"2021-08-24"},{"lineNumber":91,"author":{"gitId":"BenjaminLHR"},"content":"            if (splittedLine[1].equals(\"1\")) {","lastModifiedDate":"2021-08-24"},{"lineNumber":92,"author":{"gitId":"BenjaminLHR"},"content":"                todo.setCompleted();","lastModifiedDate":"2021-08-24"},{"lineNumber":93,"author":{"gitId":"BenjaminLHR"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":94,"author":{"gitId":"BenjaminLHR"},"content":"            listOfTasks.add(todo);","lastModifiedDate":"2021-08-25"},{"lineNumber":95,"author":{"gitId":"BenjaminLHR"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":96,"author":{"gitId":"BenjaminLHR"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2021-08-25"},{"lineNumber":97,"author":{"gitId":"BenjaminLHR"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":98,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":99,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":100,"author":{"gitId":"BenjaminLHR"},"content":"    private void addEventToList(String line, List\u003cTask\u003e listOfTasks, int lineNumber) {","lastModifiedDate":"2021-08-25"},{"lineNumber":101,"author":{"gitId":"BenjaminLHR"},"content":"        String[] splittedLine \u003d line.split(REGEX_FOR_STORAGE);","lastModifiedDate":"2021-09-24"},{"lineNumber":102,"author":{"gitId":"BenjaminLHR"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":103,"author":{"gitId":"BenjaminLHR"},"content":"            checkStoredEventValidity(splittedLine, lineNumber);","lastModifiedDate":"2021-08-25"},{"lineNumber":104,"author":{"gitId":"BenjaminLHR"},"content":"            Event event \u003d new Event(splittedLine[2], splittedLine[3]);","lastModifiedDate":"2021-08-24"},{"lineNumber":105,"author":{"gitId":"BenjaminLHR"},"content":"            if (splittedLine[1].equals(\"1\")) {","lastModifiedDate":"2021-08-24"},{"lineNumber":106,"author":{"gitId":"BenjaminLHR"},"content":"                event.setCompleted();","lastModifiedDate":"2021-08-24"},{"lineNumber":107,"author":{"gitId":"BenjaminLHR"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":108,"author":{"gitId":"BenjaminLHR"},"content":"            listOfTasks.add(event);","lastModifiedDate":"2021-08-25"},{"lineNumber":109,"author":{"gitId":"BenjaminLHR"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":110,"author":{"gitId":"BenjaminLHR"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2021-08-25"},{"lineNumber":111,"author":{"gitId":"BenjaminLHR"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":112,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":113,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":114,"author":{"gitId":"BenjaminLHR"},"content":"    private void addDeadlineToList(String line, List\u003cTask\u003e listOfTasks, int lineNumber) {","lastModifiedDate":"2021-08-25"},{"lineNumber":115,"author":{"gitId":"BenjaminLHR"},"content":"        String[] splittedLine \u003d line.split(REGEX_FOR_STORAGE);","lastModifiedDate":"2021-09-24"},{"lineNumber":116,"author":{"gitId":"BenjaminLHR"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":117,"author":{"gitId":"BenjaminLHR"},"content":"            checkStoredDeadlineValidity(splittedLine, lineNumber);","lastModifiedDate":"2021-08-25"},{"lineNumber":118,"author":{"gitId":"BenjaminLHR"},"content":"            Deadline deadline \u003d new Deadline(splittedLine[2], splittedLine[3]);","lastModifiedDate":"2021-08-24"},{"lineNumber":119,"author":{"gitId":"BenjaminLHR"},"content":"            if (splittedLine[1].equals(\"1\")) {","lastModifiedDate":"2021-08-24"},{"lineNumber":120,"author":{"gitId":"BenjaminLHR"},"content":"                deadline.setCompleted();","lastModifiedDate":"2021-08-24"},{"lineNumber":121,"author":{"gitId":"BenjaminLHR"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":122,"author":{"gitId":"BenjaminLHR"},"content":"            listOfTasks.add(deadline);","lastModifiedDate":"2021-08-25"},{"lineNumber":123,"author":{"gitId":"BenjaminLHR"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":124,"author":{"gitId":"BenjaminLHR"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2021-08-25"},{"lineNumber":125,"author":{"gitId":"BenjaminLHR"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":126,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":127,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":128,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":129,"author":{"gitId":"BenjaminLHR"},"content":"     * Throws an exception if number of elements of splittedLine is less than expected. It will not throw an","lastModifiedDate":"2021-09-23"},{"lineNumber":130,"author":{"gitId":"BenjaminLHR"},"content":"     * exception if more components than expected was present, as the regex might be part of the task name as well.","lastModifiedDate":"2021-09-23"},{"lineNumber":131,"author":{"gitId":"BenjaminLHR"},"content":"     * @param splittedLine The result of the storage line splitted by regex.","lastModifiedDate":"2021-09-23"},{"lineNumber":132,"author":{"gitId":"BenjaminLHR"},"content":"     * @param lineNumber Line number of the storage line.","lastModifiedDate":"2021-09-23"},{"lineNumber":133,"author":{"gitId":"BenjaminLHR"},"content":"     * @param numSegments Number of elements of splittedLine one would normally expect.","lastModifiedDate":"2021-09-23"},{"lineNumber":134,"author":{"gitId":"BenjaminLHR"},"content":"     * @throws DukeException DukeException is thrown if there are less elements in splittedLine than expected.","lastModifiedDate":"2021-09-23"},{"lineNumber":135,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":136,"author":{"gitId":"BenjaminLHR"},"content":"    private static void checkSplittedLineLen(String[] splittedLine, int lineNumber, int numSegments) throws DukeException {","lastModifiedDate":"2021-09-23"},{"lineNumber":137,"author":{"gitId":"BenjaminLHR"},"content":"        String errorHeading \u003d String.format(\"Error in Line %s of storage file: \", lineNumber);","lastModifiedDate":"2021-08-25"},{"lineNumber":138,"author":{"gitId":"BenjaminLHR"},"content":"        String errorTail \u003d \"\\nLine will subsequently be removed.\";","lastModifiedDate":"2021-09-23"},{"lineNumber":139,"author":{"gitId":"BenjaminLHR"},"content":"        if (splittedLine.length \u003c numSegments) {","lastModifiedDate":"2021-09-23"},{"lineNumber":140,"author":{"gitId":"BenjaminLHR"},"content":"            throw new DukeException(errorHeading","lastModifiedDate":"2021-08-25"},{"lineNumber":141,"author":{"gitId":"BenjaminLHR"},"content":"                    + String.format(\"There should be %s segments in storage data\", N_SEGMENTS_IN_TODO)","lastModifiedDate":"2021-09-23"},{"lineNumber":142,"author":{"gitId":"BenjaminLHR"},"content":"                    + errorTail);","lastModifiedDate":"2021-09-23"},{"lineNumber":143,"author":{"gitId":"BenjaminLHR"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":144,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":145,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":146,"author":{"gitId":"BenjaminLHR"},"content":"    private static void checkCompletionStatusFormat(String[] splittedLine, int lineNumber) throws DukeException {","lastModifiedDate":"2021-09-23"},{"lineNumber":147,"author":{"gitId":"BenjaminLHR"},"content":"        String errorHeading \u003d String.format(\"Error in Line %s of storage file: \", lineNumber);","lastModifiedDate":"2021-09-23"},{"lineNumber":148,"author":{"gitId":"BenjaminLHR"},"content":"        String errorTail \u003d \"\\nLine will subsequently be removed.\";","lastModifiedDate":"2021-09-23"},{"lineNumber":149,"author":{"gitId":"BenjaminLHR"},"content":"        if (!(splittedLine[1].equals(\"0\") || splittedLine[1].equals(\"1\"))) {","lastModifiedDate":"2021-08-25"},{"lineNumber":150,"author":{"gitId":"BenjaminLHR"},"content":"            throw new DukeException(errorHeading + \"Completion status should be 0 or 1\" + errorTail);","lastModifiedDate":"2021-09-23"},{"lineNumber":151,"author":{"gitId":"BenjaminLHR"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":152,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":153,"author":{"gitId":"BenjaminLHR"},"content":"    private boolean checkStoredTodoValidity(String[] splittedLine, int lineNumber) throws DukeException {","lastModifiedDate":"2021-09-23"},{"lineNumber":154,"author":{"gitId":"BenjaminLHR"},"content":"        checkSplittedLineLen(splittedLine, lineNumber, N_SEGMENTS_IN_TODO);","lastModifiedDate":"2021-09-23"},{"lineNumber":155,"author":{"gitId":"BenjaminLHR"},"content":"        checkCompletionStatusFormat(splittedLine, lineNumber);","lastModifiedDate":"2021-09-23"},{"lineNumber":156,"author":{"gitId":"BenjaminLHR"},"content":"        return true;","lastModifiedDate":"2021-08-25"},{"lineNumber":157,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":158,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":159,"author":{"gitId":"BenjaminLHR"},"content":"    private boolean checkStoredEventValidity(String[] splittedLine, int lineNumber) throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":160,"author":{"gitId":"BenjaminLHR"},"content":"        checkSplittedLineLen(splittedLine, lineNumber, N_SEGMENTS_IN_EVENT);","lastModifiedDate":"2021-09-23"},{"lineNumber":161,"author":{"gitId":"BenjaminLHR"},"content":"        checkCompletionStatusFormat(splittedLine, lineNumber);","lastModifiedDate":"2021-09-23"},{"lineNumber":162,"author":{"gitId":"BenjaminLHR"},"content":"        return true;","lastModifiedDate":"2021-08-25"},{"lineNumber":163,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":164,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":165,"author":{"gitId":"BenjaminLHR"},"content":"    private boolean checkStoredDeadlineValidity(String[] splittedLine, int lineNumber) throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":166,"author":{"gitId":"BenjaminLHR"},"content":"        checkSplittedLineLen(splittedLine, lineNumber, N_SEGMENTS_IN_DEADLINE);","lastModifiedDate":"2021-09-23"},{"lineNumber":167,"author":{"gitId":"BenjaminLHR"},"content":"        checkCompletionStatusFormat(splittedLine, lineNumber);","lastModifiedDate":"2021-09-23"},{"lineNumber":168,"author":{"gitId":"BenjaminLHR"},"content":"        return true;","lastModifiedDate":"2021-08-25"},{"lineNumber":169,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":170,"author":{"gitId":"BenjaminLHR"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"BenjaminLHR":170}},{"path":"src/main/java/duke/core/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenjaminLHR"},"content":"package duke.core;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"BenjaminLHR"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"BenjaminLHR"},"content":"import java.io.File;","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"BenjaminLHR"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"BenjaminLHR"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"BenjaminLHR"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"BenjaminLHR"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"BenjaminLHR"},"content":" * Encapsulates a task list.","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"BenjaminLHR"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"BenjaminLHR"},"content":"public class TaskList {","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"BenjaminLHR"},"content":"    private ArrayList\u003cTask\u003e listOfTasks;","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"BenjaminLHR"},"content":"     * Constructs a TaskList object. Initializes an empty task list.","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"BenjaminLHR"},"content":"    public TaskList() {","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"BenjaminLHR"},"content":"        listOfTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-19"},{"lineNumber":21,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"BenjaminLHR"},"content":"     * Constructs a TaskList Object. Initializes the task list with the contents of the list of tasks passed in.","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"BenjaminLHR"},"content":"     * @param listOfTasks An ArrayList of tasks that the TaskList should contain upon instantiation.","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"BenjaminLHR"},"content":"    public TaskList(ArrayList\u003cTask\u003e listOfTasks) {","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"BenjaminLHR"},"content":"        this.listOfTasks \u003d listOfTasks;","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"BenjaminLHR"},"content":"     * Adds a task to the task list and returns the message to be displayed by Duke.","lastModifiedDate":"2021-09-03"},{"lineNumber":34,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"BenjaminLHR"},"content":"     * @param task The task to be added.","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"BenjaminLHR"},"content":"     * @return The message to be displayed by Duke.","lastModifiedDate":"2021-09-03"},{"lineNumber":37,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"BenjaminLHR"},"content":"    public String addTask(Task task) {","lastModifiedDate":"2021-09-03"},{"lineNumber":39,"author":{"gitId":"BenjaminLHR"},"content":"        listOfTasks.add(task);","lastModifiedDate":"2021-08-19"},{"lineNumber":40,"author":{"gitId":"BenjaminLHR"},"content":"        String outputLine1 \u003d String.format(\"Got it. I\u0027ve added this task:\\n%s\\n\", task);","lastModifiedDate":"2021-08-19"},{"lineNumber":41,"author":{"gitId":"BenjaminLHR"},"content":"        String outputLine2 \u003d String.format(\"Now you have %s tasks in the list.\", listOfTasks.size());","lastModifiedDate":"2021-08-19"},{"lineNumber":42,"author":{"gitId":"BenjaminLHR"},"content":"        String output \u003d outputLine1 + outputLine2;","lastModifiedDate":"2021-08-19"},{"lineNumber":43,"author":{"gitId":"BenjaminLHR"},"content":"        return output;","lastModifiedDate":"2021-09-03"},{"lineNumber":44,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":45,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":46,"author":{"gitId":"BenjaminLHR"},"content":"    public String findAndListTasks(String keyword) {","lastModifiedDate":"2021-09-10"},{"lineNumber":47,"author":{"gitId":"BenjaminLHR"},"content":"        StringBuilder sb \u003d new StringBuilder(\"Here are the matching tasks in your list:\\n\");","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"BenjaminLHR"},"content":"        int index \u003d 1;","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"BenjaminLHR"},"content":"        final String REGEX \u003d \" \";","lastModifiedDate":"2021-09-10"},{"lineNumber":50,"author":{"gitId":"BenjaminLHR"},"content":"        for (Task task : listOfTasks) {","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"BenjaminLHR"},"content":"            String[] splittedTaskString \u003d task.toString().split(REGEX);","lastModifiedDate":"2021-09-10"},{"lineNumber":52,"author":{"gitId":"BenjaminLHR"},"content":"            for (String s : splittedTaskString) {","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"BenjaminLHR"},"content":"                if (s.length() \u003d\u003d 0) {","lastModifiedDate":"2021-09-23"},{"lineNumber":54,"author":{"gitId":"BenjaminLHR"},"content":"                    continue;","lastModifiedDate":"2021-09-23"},{"lineNumber":55,"author":{"gitId":"BenjaminLHR"},"content":"                }","lastModifiedDate":"2021-09-23"},{"lineNumber":56,"author":{"gitId":"BenjaminLHR"},"content":"                // Check whether final character of string is \u0027)\u0027. If so, remove the \u0027)\u0027","lastModifiedDate":"2021-09-23"},{"lineNumber":57,"author":{"gitId":"BenjaminLHR"},"content":"                if (s.charAt(s.length() - 1) \u003d\u003d \u0027)\u0027) {","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"BenjaminLHR"},"content":"                    s \u003d s.substring(0, s.length() - 1);","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"BenjaminLHR"},"content":"                }","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"BenjaminLHR"},"content":"                if (s.equals(keyword)) {","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"BenjaminLHR"},"content":"                    sb.append(String.format(\"%s. %s\\n\", index, task));","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"BenjaminLHR"},"content":"                    break;","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"BenjaminLHR"},"content":"                }","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"BenjaminLHR"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"BenjaminLHR"},"content":"            index++;","lastModifiedDate":"2021-09-23"},{"lineNumber":66,"author":{"gitId":"BenjaminLHR"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":68,"author":{"gitId":"BenjaminLHR"},"content":"        // Remove the last \\n for a nicer output","lastModifiedDate":"2021-09-10"},{"lineNumber":69,"author":{"gitId":"BenjaminLHR"},"content":"        return sb.substring(0, sb.length() - 1);","lastModifiedDate":"2021-09-10"},{"lineNumber":70,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":73,"author":{"gitId":"BenjaminLHR"},"content":"     * Marks a task within the task list as completed based on the index provided and returns the message to be","lastModifiedDate":"2021-09-03"},{"lineNumber":74,"author":{"gitId":"BenjaminLHR"},"content":"     * diplayed by Duke.","lastModifiedDate":"2021-09-03"},{"lineNumber":75,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":76,"author":{"gitId":"BenjaminLHR"},"content":"     * @param index Index of the task to be marked as completed.","lastModifiedDate":"2021-08-26"},{"lineNumber":77,"author":{"gitId":"BenjaminLHR"},"content":"     * @return The message to be displayed by Duke.","lastModifiedDate":"2021-09-03"},{"lineNumber":78,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":79,"author":{"gitId":"BenjaminLHR"},"content":"    public String markAsDone(int index) {","lastModifiedDate":"2021-09-03"},{"lineNumber":80,"author":{"gitId":"BenjaminLHR"},"content":"        assert index \u003e 0: \"Index of completed task should be at least 1.\";","lastModifiedDate":"2021-09-10"},{"lineNumber":81,"author":{"gitId":"BenjaminLHR"},"content":"        Task taskToMark \u003d listOfTasks.get(index - 1);","lastModifiedDate":"2021-08-19"},{"lineNumber":82,"author":{"gitId":"BenjaminLHR"},"content":"        taskToMark.setCompleted();","lastModifiedDate":"2021-08-18"},{"lineNumber":83,"author":{"gitId":"BenjaminLHR"},"content":"        String outputLine1 \u003d \"Nice! I\u0027ve marked this task as done:\\n\";","lastModifiedDate":"2021-08-19"},{"lineNumber":84,"author":{"gitId":"BenjaminLHR"},"content":"        String output \u003d outputLine1 + taskToMark;","lastModifiedDate":"2021-08-19"},{"lineNumber":85,"author":{"gitId":"BenjaminLHR"},"content":"        return output;","lastModifiedDate":"2021-09-03"},{"lineNumber":86,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":87,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":88,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":89,"author":{"gitId":"BenjaminLHR"},"content":"     * Deletes a task within the task list based on the index provided and returns the message to be displayed by Duke.","lastModifiedDate":"2021-09-03"},{"lineNumber":90,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":91,"author":{"gitId":"BenjaminLHR"},"content":"     * @param index Index of the task to be deleted.","lastModifiedDate":"2021-08-26"},{"lineNumber":92,"author":{"gitId":"BenjaminLHR"},"content":"     * @return The message to be displayed by Duke.","lastModifiedDate":"2021-09-03"},{"lineNumber":93,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":94,"author":{"gitId":"BenjaminLHR"},"content":"    public String delete(int index) {","lastModifiedDate":"2021-09-03"},{"lineNumber":95,"author":{"gitId":"BenjaminLHR"},"content":"        assert index \u003e 0: \"Index of task to delete should be at least 1.\";","lastModifiedDate":"2021-09-10"},{"lineNumber":96,"author":{"gitId":"BenjaminLHR"},"content":"        Task taskToRemove \u003d listOfTasks.get(index - 1);","lastModifiedDate":"2021-08-19"},{"lineNumber":97,"author":{"gitId":"BenjaminLHR"},"content":"        listOfTasks.remove(index - 1);","lastModifiedDate":"2021-08-19"},{"lineNumber":98,"author":{"gitId":"BenjaminLHR"},"content":"        String outputLine1 \u003d \"Noted. I\u0027ve removed this task: \\n\";","lastModifiedDate":"2021-08-19"},{"lineNumber":99,"author":{"gitId":"BenjaminLHR"},"content":"        String outputLine2 \u003d taskToRemove.toString() + \"\\n\";","lastModifiedDate":"2021-08-19"},{"lineNumber":100,"author":{"gitId":"BenjaminLHR"},"content":"        String outputLine3 \u003d String.format(\"Now you have %s tasks in the list.\", listOfTasks.size());","lastModifiedDate":"2021-08-19"},{"lineNumber":101,"author":{"gitId":"BenjaminLHR"},"content":"        String output \u003d outputLine1 + outputLine2 + outputLine3;","lastModifiedDate":"2021-08-19"},{"lineNumber":102,"author":{"gitId":"BenjaminLHR"},"content":"        return output;","lastModifiedDate":"2021-09-03"},{"lineNumber":103,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":104,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":105,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":106,"author":{"gitId":"BenjaminLHR"},"content":"     * Returns the number of elements within the task list.","lastModifiedDate":"2021-08-26"},{"lineNumber":107,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":108,"author":{"gitId":"BenjaminLHR"},"content":"     * @return Number of elements within the task list.","lastModifiedDate":"2021-08-26"},{"lineNumber":109,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":110,"author":{"gitId":"BenjaminLHR"},"content":"    public int getSize() {","lastModifiedDate":"2021-08-19"},{"lineNumber":111,"author":{"gitId":"BenjaminLHR"},"content":"        return listOfTasks.size();","lastModifiedDate":"2021-08-19"},{"lineNumber":112,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":113,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":114,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":115,"author":{"gitId":"BenjaminLHR"},"content":"     * Saves the tasks within the task list in the storage file.","lastModifiedDate":"2021-08-26"},{"lineNumber":116,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":117,"author":{"gitId":"BenjaminLHR"},"content":"     * @param file A File object encapsulating the storage file.","lastModifiedDate":"2021-08-26"},{"lineNumber":118,"author":{"gitId":"BenjaminLHR"},"content":"     * @throws IOException If the storage filepath exists but is a directory rather than a regular file,","lastModifiedDate":"2021-09-03"},{"lineNumber":119,"author":{"gitId":"BenjaminLHR"},"content":"     *  does not exist but cannot be created, or cannot be opened for any other reason.","lastModifiedDate":"2021-09-03"},{"lineNumber":120,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":121,"author":{"gitId":"BenjaminLHR"},"content":"    public void saveContents(File file) throws IOException {","lastModifiedDate":"2021-09-03"},{"lineNumber":122,"author":{"gitId":"BenjaminLHR"},"content":"        FileWriter fw \u003d new FileWriter(file.getPath());","lastModifiedDate":"2021-08-24"},{"lineNumber":123,"author":{"gitId":"BenjaminLHR"},"content":"        for (Task task : listOfTasks) {","lastModifiedDate":"2021-08-24"},{"lineNumber":124,"author":{"gitId":"BenjaminLHR"},"content":"            fw.write(task.toStorageFormat() +\"\\n\");","lastModifiedDate":"2021-08-24"},{"lineNumber":125,"author":{"gitId":"BenjaminLHR"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":126,"author":{"gitId":"BenjaminLHR"},"content":"        fw.close();","lastModifiedDate":"2021-08-24"},{"lineNumber":127,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":128,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":129,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-09-03"},{"lineNumber":130,"author":{"gitId":"BenjaminLHR"},"content":"     * Returns a String representation of all the tasks within the task list.","lastModifiedDate":"2021-09-03"},{"lineNumber":131,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-09-03"},{"lineNumber":132,"author":{"gitId":"BenjaminLHR"},"content":"     * @return A String representation of all the tasks within the task list.","lastModifiedDate":"2021-09-03"},{"lineNumber":133,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-09-03"},{"lineNumber":134,"author":{"gitId":"BenjaminLHR"},"content":"    @Override","lastModifiedDate":"2021-09-03"},{"lineNumber":135,"author":{"gitId":"BenjaminLHR"},"content":"    public String toString() {","lastModifiedDate":"2021-09-03"},{"lineNumber":136,"author":{"gitId":"BenjaminLHR"},"content":"        StringBuilder sb \u003d new StringBuilder(\"Here are the tasks in your list:\\n\");","lastModifiedDate":"2021-09-03"},{"lineNumber":137,"author":{"gitId":"BenjaminLHR"},"content":"        int index \u003d 1;","lastModifiedDate":"2021-09-03"},{"lineNumber":138,"author":{"gitId":"BenjaminLHR"},"content":"        for (Task task : listOfTasks) {","lastModifiedDate":"2021-09-03"},{"lineNumber":139,"author":{"gitId":"BenjaminLHR"},"content":"            sb.append(String.format(\"%s. %s\\n\", index, task));","lastModifiedDate":"2021-09-03"},{"lineNumber":140,"author":{"gitId":"BenjaminLHR"},"content":"            index++;","lastModifiedDate":"2021-09-03"},{"lineNumber":141,"author":{"gitId":"BenjaminLHR"},"content":"        }","lastModifiedDate":"2021-09-03"},{"lineNumber":142,"author":{"gitId":"BenjaminLHR"},"content":"        // Removed the last \\n for nicer output","lastModifiedDate":"2021-09-03"},{"lineNumber":143,"author":{"gitId":"BenjaminLHR"},"content":"        return(sb.substring(0, sb.length() - 1));","lastModifiedDate":"2021-09-03"},{"lineNumber":144,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":145,"author":{"gitId":"BenjaminLHR"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"BenjaminLHR":145}},{"path":"src/main/java/duke/gui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenjaminLHR"},"content":"package duke.gui;","lastModifiedDate":"2021-09-02"},{"lineNumber":2,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"BenjaminLHR"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-22"},{"lineNumber":4,"author":{"gitId":"BenjaminLHR"},"content":"import java.util.Collections;","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":6,"author":{"gitId":"BenjaminLHR"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"BenjaminLHR"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"BenjaminLHR"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-09-22"},{"lineNumber":9,"author":{"gitId":"BenjaminLHR"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-09-22"},{"lineNumber":10,"author":{"gitId":"BenjaminLHR"},"content":"import javafx.geometry.Insets;","lastModifiedDate":"2021-09-22"},{"lineNumber":11,"author":{"gitId":"BenjaminLHR"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"BenjaminLHR"},"content":"import javafx.scene.Node;","lastModifiedDate":"2021-09-02"},{"lineNumber":13,"author":{"gitId":"BenjaminLHR"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"BenjaminLHR"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-09-22"},{"lineNumber":15,"author":{"gitId":"BenjaminLHR"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"BenjaminLHR"},"content":"import javafx.scene.layout.Background;","lastModifiedDate":"2021-09-22"},{"lineNumber":17,"author":{"gitId":"BenjaminLHR"},"content":"import javafx.scene.layout.BackgroundFill;","lastModifiedDate":"2021-09-22"},{"lineNumber":18,"author":{"gitId":"BenjaminLHR"},"content":"import javafx.scene.layout.CornerRadii;","lastModifiedDate":"2021-09-22"},{"lineNumber":19,"author":{"gitId":"BenjaminLHR"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2021-09-02"},{"lineNumber":20,"author":{"gitId":"BenjaminLHR"},"content":"import javafx.scene.paint.Color;","lastModifiedDate":"2021-09-22"},{"lineNumber":21,"author":{"gitId":"BenjaminLHR"},"content":"import javafx.scene.shape.Circle;","lastModifiedDate":"2021-09-22"},{"lineNumber":22,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":23,"author":{"gitId":"BenjaminLHR"},"content":"/**","lastModifiedDate":"2021-09-22"},{"lineNumber":24,"author":{"gitId":"BenjaminLHR"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2021-09-22"},{"lineNumber":25,"author":{"gitId":"BenjaminLHR"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2021-09-22"},{"lineNumber":26,"author":{"gitId":"BenjaminLHR"},"content":" * containing text from the speaker.","lastModifiedDate":"2021-09-22"},{"lineNumber":27,"author":{"gitId":"BenjaminLHR"},"content":" */","lastModifiedDate":"2021-09-22"},{"lineNumber":28,"author":{"gitId":"BenjaminLHR"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2021-09-02"},{"lineNumber":29,"author":{"gitId":"BenjaminLHR"},"content":"    @FXML","lastModifiedDate":"2021-09-22"},{"lineNumber":30,"author":{"gitId":"BenjaminLHR"},"content":"    private Label dialog;","lastModifiedDate":"2021-09-22"},{"lineNumber":31,"author":{"gitId":"BenjaminLHR"},"content":"    @FXML","lastModifiedDate":"2021-09-22"},{"lineNumber":32,"author":{"gitId":"BenjaminLHR"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2021-09-02"},{"lineNumber":33,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":34,"author":{"gitId":"BenjaminLHR"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2021-09-22"},{"lineNumber":35,"author":{"gitId":"BenjaminLHR"},"content":"        try {","lastModifiedDate":"2021-09-22"},{"lineNumber":36,"author":{"gitId":"BenjaminLHR"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2021-09-22"},{"lineNumber":37,"author":{"gitId":"BenjaminLHR"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2021-09-22"},{"lineNumber":38,"author":{"gitId":"BenjaminLHR"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2021-09-22"},{"lineNumber":39,"author":{"gitId":"BenjaminLHR"},"content":"            fxmlLoader.load();","lastModifiedDate":"2021-09-22"},{"lineNumber":40,"author":{"gitId":"BenjaminLHR"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-22"},{"lineNumber":41,"author":{"gitId":"BenjaminLHR"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-09-22"},{"lineNumber":42,"author":{"gitId":"BenjaminLHR"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":43,"author":{"gitId":"BenjaminLHR"},"content":"        Circle clip \u003d new Circle(50, 50, 40);","lastModifiedDate":"2021-09-22"},{"lineNumber":44,"author":{"gitId":"BenjaminLHR"},"content":"        dialog.setText(text);","lastModifiedDate":"2021-09-22"},{"lineNumber":45,"author":{"gitId":"BenjaminLHR"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2021-09-22"},{"lineNumber":46,"author":{"gitId":"BenjaminLHR"},"content":"        displayPicture.setClip(clip);","lastModifiedDate":"2021-09-22"},{"lineNumber":47,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":48,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":49,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":50,"author":{"gitId":"BenjaminLHR"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2021-09-02"},{"lineNumber":51,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":52,"author":{"gitId":"BenjaminLHR"},"content":"    private void flip() {","lastModifiedDate":"2021-09-02"},{"lineNumber":53,"author":{"gitId":"BenjaminLHR"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2021-09-02"},{"lineNumber":54,"author":{"gitId":"BenjaminLHR"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2021-09-22"},{"lineNumber":55,"author":{"gitId":"BenjaminLHR"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2021-09-22"},{"lineNumber":56,"author":{"gitId":"BenjaminLHR"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2021-09-22"},{"lineNumber":57,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":58,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":59,"author":{"gitId":"BenjaminLHR"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2021-09-22"},{"lineNumber":60,"author":{"gitId":"BenjaminLHR"},"content":"        DialogBox db \u003d new DialogBox(text, img);","lastModifiedDate":"2021-09-22"},{"lineNumber":61,"author":{"gitId":"BenjaminLHR"},"content":"        BackgroundFill backgroundFill \u003d new BackgroundFill(","lastModifiedDate":"2021-09-22"},{"lineNumber":62,"author":{"gitId":"BenjaminLHR"},"content":"                Color.web(\"#25D366\"),","lastModifiedDate":"2021-09-22"},{"lineNumber":63,"author":{"gitId":"BenjaminLHR"},"content":"                new CornerRadii(10),","lastModifiedDate":"2021-09-22"},{"lineNumber":64,"author":{"gitId":"BenjaminLHR"},"content":"                Insets.EMPTY","lastModifiedDate":"2021-09-22"},{"lineNumber":65,"author":{"gitId":"BenjaminLHR"},"content":"        );","lastModifiedDate":"2021-09-22"},{"lineNumber":66,"author":{"gitId":"BenjaminLHR"},"content":"        db.setBackground(new Background(backgroundFill));","lastModifiedDate":"2021-09-22"},{"lineNumber":67,"author":{"gitId":"BenjaminLHR"},"content":"        return db;","lastModifiedDate":"2021-09-22"},{"lineNumber":68,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":69,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":70,"author":{"gitId":"BenjaminLHR"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2021-09-22"},{"lineNumber":71,"author":{"gitId":"BenjaminLHR"},"content":"        DialogBox db \u003d new DialogBox(text, img);","lastModifiedDate":"2021-09-22"},{"lineNumber":72,"author":{"gitId":"BenjaminLHR"},"content":"        BackgroundFill backgroundFill \u003d new BackgroundFill(","lastModifiedDate":"2021-09-22"},{"lineNumber":73,"author":{"gitId":"BenjaminLHR"},"content":"                Color.web(\"#34B7F1\"),","lastModifiedDate":"2021-09-22"},{"lineNumber":74,"author":{"gitId":"BenjaminLHR"},"content":"                new CornerRadii(10),","lastModifiedDate":"2021-09-22"},{"lineNumber":75,"author":{"gitId":"BenjaminLHR"},"content":"                Insets.EMPTY","lastModifiedDate":"2021-09-22"},{"lineNumber":76,"author":{"gitId":"BenjaminLHR"},"content":"        );","lastModifiedDate":"2021-09-22"},{"lineNumber":77,"author":{"gitId":"BenjaminLHR"},"content":"        db.setBackground(new Background(backgroundFill));","lastModifiedDate":"2021-09-22"},{"lineNumber":78,"author":{"gitId":"BenjaminLHR"},"content":"        db.flip();","lastModifiedDate":"2021-09-02"},{"lineNumber":79,"author":{"gitId":"BenjaminLHR"},"content":"        return db;","lastModifiedDate":"2021-09-02"},{"lineNumber":80,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":81,"author":{"gitId":"BenjaminLHR"},"content":"}","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"BenjaminLHR":81}},{"path":"src/main/java/duke/gui/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenjaminLHR"},"content":"package duke.gui;","lastModifiedDate":"2021-09-02"},{"lineNumber":2,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"BenjaminLHR"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"BenjaminLHR"},"content":"/**","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"BenjaminLHR"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"BenjaminLHR"},"content":" */","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"BenjaminLHR"},"content":"public class Launcher {","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"BenjaminLHR"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"BenjaminLHR"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"BenjaminLHR"},"content":"}","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"BenjaminLHR":12}},{"path":"src/main/java/duke/gui/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenjaminLHR"},"content":"package duke.gui;","lastModifiedDate":"2021-09-02"},{"lineNumber":2,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"BenjaminLHR"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-22"},{"lineNumber":4,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"BenjaminLHR"},"content":"import duke.core.Duke;","lastModifiedDate":"2021-09-03"},{"lineNumber":6,"author":{"gitId":"BenjaminLHR"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"BenjaminLHR"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-09-22"},{"lineNumber":8,"author":{"gitId":"BenjaminLHR"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"BenjaminLHR"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"BenjaminLHR"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"BenjaminLHR"},"content":"/**","lastModifiedDate":"2021-09-22"},{"lineNumber":13,"author":{"gitId":"BenjaminLHR"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2021-09-22"},{"lineNumber":14,"author":{"gitId":"BenjaminLHR"},"content":" */","lastModifiedDate":"2021-09-22"},{"lineNumber":15,"author":{"gitId":"BenjaminLHR"},"content":"public class Main extends Application {","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"BenjaminLHR"},"content":"    private Duke duke \u003d new Duke(\"data/duke.txt\");","lastModifiedDate":"2021-09-22"},{"lineNumber":17,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":18,"author":{"gitId":"BenjaminLHR"},"content":"    @Override","lastModifiedDate":"2021-09-02"},{"lineNumber":19,"author":{"gitId":"BenjaminLHR"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2021-09-02"},{"lineNumber":20,"author":{"gitId":"BenjaminLHR"},"content":"        try {","lastModifiedDate":"2021-09-22"},{"lineNumber":21,"author":{"gitId":"BenjaminLHR"},"content":"            String mainWindowFileName \u003d \"/view/MainWindow.fxml\";","lastModifiedDate":"2021-09-22"},{"lineNumber":22,"author":{"gitId":"BenjaminLHR"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(mainWindowFileName));","lastModifiedDate":"2021-09-22"},{"lineNumber":23,"author":{"gitId":"BenjaminLHR"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2021-09-22"},{"lineNumber":24,"author":{"gitId":"BenjaminLHR"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2021-09-22"},{"lineNumber":25,"author":{"gitId":"BenjaminLHR"},"content":"            stage.setScene(scene);","lastModifiedDate":"2021-09-02"},{"lineNumber":26,"author":{"gitId":"BenjaminLHR"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2021-09-22"},{"lineNumber":27,"author":{"gitId":"BenjaminLHR"},"content":"            stage.setResizable(false);","lastModifiedDate":"2021-09-02"},{"lineNumber":28,"author":{"gitId":"BenjaminLHR"},"content":"            stage.show();","lastModifiedDate":"2021-09-22"},{"lineNumber":29,"author":{"gitId":"BenjaminLHR"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-22"},{"lineNumber":30,"author":{"gitId":"BenjaminLHR"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-09-22"},{"lineNumber":31,"author":{"gitId":"BenjaminLHR"},"content":"        }","lastModifiedDate":"2021-09-02"},{"lineNumber":32,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":33,"author":{"gitId":"BenjaminLHR"},"content":"}","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"BenjaminLHR":33}},{"path":"src/main/java/duke/gui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenjaminLHR"},"content":"package duke.gui;","lastModifiedDate":"2021-09-22"},{"lineNumber":2,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":3,"author":{"gitId":"BenjaminLHR"},"content":"import duke.core.Duke;","lastModifiedDate":"2021-09-22"},{"lineNumber":4,"author":{"gitId":"BenjaminLHR"},"content":"import javafx.animation.PauseTransition;","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"BenjaminLHR"},"content":"import javafx.application.Platform;","lastModifiedDate":"2021-09-22"},{"lineNumber":6,"author":{"gitId":"BenjaminLHR"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-09-22"},{"lineNumber":7,"author":{"gitId":"BenjaminLHR"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2021-09-22"},{"lineNumber":8,"author":{"gitId":"BenjaminLHR"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-09-22"},{"lineNumber":9,"author":{"gitId":"BenjaminLHR"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2021-09-22"},{"lineNumber":10,"author":{"gitId":"BenjaminLHR"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2021-09-22"},{"lineNumber":11,"author":{"gitId":"BenjaminLHR"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-09-22"},{"lineNumber":12,"author":{"gitId":"BenjaminLHR"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-09-22"},{"lineNumber":13,"author":{"gitId":"BenjaminLHR"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2021-09-22"},{"lineNumber":14,"author":{"gitId":"BenjaminLHR"},"content":"import javafx.util.Duration;","lastModifiedDate":"2021-09-22"},{"lineNumber":15,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":16,"author":{"gitId":"BenjaminLHR"},"content":"/**","lastModifiedDate":"2021-09-22"},{"lineNumber":17,"author":{"gitId":"BenjaminLHR"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2021-09-22"},{"lineNumber":18,"author":{"gitId":"BenjaminLHR"},"content":" */","lastModifiedDate":"2021-09-22"},{"lineNumber":19,"author":{"gitId":"BenjaminLHR"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2021-09-22"},{"lineNumber":20,"author":{"gitId":"BenjaminLHR"},"content":"    @FXML","lastModifiedDate":"2021-09-22"},{"lineNumber":21,"author":{"gitId":"BenjaminLHR"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2021-09-22"},{"lineNumber":22,"author":{"gitId":"BenjaminLHR"},"content":"    @FXML","lastModifiedDate":"2021-09-22"},{"lineNumber":23,"author":{"gitId":"BenjaminLHR"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2021-09-22"},{"lineNumber":24,"author":{"gitId":"BenjaminLHR"},"content":"    @FXML","lastModifiedDate":"2021-09-22"},{"lineNumber":25,"author":{"gitId":"BenjaminLHR"},"content":"    private TextField userInput;","lastModifiedDate":"2021-09-22"},{"lineNumber":26,"author":{"gitId":"BenjaminLHR"},"content":"    @FXML","lastModifiedDate":"2021-09-22"},{"lineNumber":27,"author":{"gitId":"BenjaminLHR"},"content":"    private Button sendButton;","lastModifiedDate":"2021-09-22"},{"lineNumber":28,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":29,"author":{"gitId":"BenjaminLHR"},"content":"    private Duke duke;","lastModifiedDate":"2021-09-22"},{"lineNumber":30,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":31,"author":{"gitId":"BenjaminLHR"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));","lastModifiedDate":"2021-09-22"},{"lineNumber":32,"author":{"gitId":"BenjaminLHR"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));","lastModifiedDate":"2021-09-22"},{"lineNumber":33,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":34,"author":{"gitId":"BenjaminLHR"},"content":"    @FXML","lastModifiedDate":"2021-09-22"},{"lineNumber":35,"author":{"gitId":"BenjaminLHR"},"content":"    public void initialize() {","lastModifiedDate":"2021-09-22"},{"lineNumber":36,"author":{"gitId":"BenjaminLHR"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2021-09-22"},{"lineNumber":37,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":38,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":39,"author":{"gitId":"BenjaminLHR"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2021-09-22"},{"lineNumber":40,"author":{"gitId":"BenjaminLHR"},"content":"        duke \u003d d;","lastModifiedDate":"2021-09-22"},{"lineNumber":41,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":42,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":43,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":44,"author":{"gitId":"BenjaminLHR"},"content":"     * Creates a dialog box containing Duke\u0027s reply and then appends it to the dialog container. Clears the user input","lastModifiedDate":"2021-09-22"},{"lineNumber":45,"author":{"gitId":"BenjaminLHR"},"content":"     * after processing.","lastModifiedDate":"2021-09-22"},{"lineNumber":46,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":47,"author":{"gitId":"BenjaminLHR"},"content":"    @FXML","lastModifiedDate":"2021-09-22"},{"lineNumber":48,"author":{"gitId":"BenjaminLHR"},"content":"    private void handleUserInput() {","lastModifiedDate":"2021-09-22"},{"lineNumber":49,"author":{"gitId":"BenjaminLHR"},"content":"        String userInputText \u003d userInput.getText();","lastModifiedDate":"2021-09-22"},{"lineNumber":50,"author":{"gitId":"BenjaminLHR"},"content":"        Label userInputLabel \u003d new Label(userInputText);","lastModifiedDate":"2021-09-22"},{"lineNumber":51,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":52,"author":{"gitId":"BenjaminLHR"},"content":"        String[] dukeResponseAndExitStatus \u003d duke.getResponseAndExitStatus(userInputText);","lastModifiedDate":"2021-09-22"},{"lineNumber":53,"author":{"gitId":"BenjaminLHR"},"content":"        String dukeResponseInString \u003d dukeResponseAndExitStatus[0];","lastModifiedDate":"2021-09-22"},{"lineNumber":54,"author":{"gitId":"BenjaminLHR"},"content":"        assert dukeResponseAndExitStatus[1] \u003d\u003d \"0\" || dukeResponseAndExitStatus[1] \u003d\u003d \"1\";","lastModifiedDate":"2021-09-23"},{"lineNumber":55,"author":{"gitId":"BenjaminLHR"},"content":"        boolean dukeShouldExit \u003d dukeResponseAndExitStatus[1] \u003d\u003d \"1\" ? true : false;","lastModifiedDate":"2021-09-22"},{"lineNumber":56,"author":{"gitId":"BenjaminLHR"},"content":"        Label dukeResponse \u003d new Label(dukeResponseInString);","lastModifiedDate":"2021-09-22"},{"lineNumber":57,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":58,"author":{"gitId":"BenjaminLHR"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2021-09-22"},{"lineNumber":59,"author":{"gitId":"BenjaminLHR"},"content":"                DialogBox.getUserDialog(userInputText, userImage),","lastModifiedDate":"2021-09-22"},{"lineNumber":60,"author":{"gitId":"BenjaminLHR"},"content":"                DialogBox.getDukeDialog(dukeResponseInString, dukeImage)","lastModifiedDate":"2021-09-22"},{"lineNumber":61,"author":{"gitId":"BenjaminLHR"},"content":"        );","lastModifiedDate":"2021-09-22"},{"lineNumber":62,"author":{"gitId":"BenjaminLHR"},"content":"        dialogContainer.setSpacing(10.0);","lastModifiedDate":"2021-09-22"},{"lineNumber":63,"author":{"gitId":"BenjaminLHR"},"content":"        userInput.clear();","lastModifiedDate":"2021-09-22"},{"lineNumber":64,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":65,"author":{"gitId":"BenjaminLHR"},"content":"        if (dukeShouldExit) {","lastModifiedDate":"2021-09-22"},{"lineNumber":66,"author":{"gitId":"BenjaminLHR"},"content":"            PauseTransition delay \u003d new PauseTransition(Duration.seconds(2));","lastModifiedDate":"2021-09-22"},{"lineNumber":67,"author":{"gitId":"BenjaminLHR"},"content":"            delay.setOnFinished(e -\u003e Platform.exit());","lastModifiedDate":"2021-09-22"},{"lineNumber":68,"author":{"gitId":"BenjaminLHR"},"content":"            delay.play();","lastModifiedDate":"2021-09-22"},{"lineNumber":69,"author":{"gitId":"BenjaminLHR"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":70,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":71,"author":{"gitId":"BenjaminLHR"},"content":"}","lastModifiedDate":"2021-09-22"}],"authorContributionMap":{"BenjaminLHR":71}},{"path":"src/main/java/duke/gui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenjaminLHR"},"content":"package duke.gui;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"BenjaminLHR"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"BenjaminLHR"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"BenjaminLHR"},"content":" * Ui is a class that provides useful methods for dealing with interactions with a user.","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"BenjaminLHR"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"BenjaminLHR"},"content":"public class Ui {","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"BenjaminLHR"},"content":"    private static Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"BenjaminLHR"},"content":"     * Greets the user.","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"BenjaminLHR"},"content":"    public static void greet() {","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"BenjaminLHR"},"content":"        System.out.println(\"Hello! I\u0027m Duke\\n\" + \"What can I do for you?\");","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"BenjaminLHR"},"content":"        Ui.displayLine();","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"BenjaminLHR"},"content":"     * Returns a string that bids farewell to the user.","lastModifiedDate":"2021-09-03"},{"lineNumber":21,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-09-03"},{"lineNumber":22,"author":{"gitId":"BenjaminLHR"},"content":"     * @return The farewell message.","lastModifiedDate":"2021-09-03"},{"lineNumber":23,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"BenjaminLHR"},"content":"    public static String farewellMessage() {","lastModifiedDate":"2021-09-03"},{"lineNumber":25,"author":{"gitId":"BenjaminLHR"},"content":"        return \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2021-09-03"},{"lineNumber":26,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":27,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":28,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"BenjaminLHR"},"content":"     * Formats the output to be displayed in a pleasant manner and displays it to the user.","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"BenjaminLHR"},"content":"     * @param output The output to be displayed to the user.","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"BenjaminLHR"},"content":"    public static void formatAndPrint(String output) {","lastModifiedDate":"2021-08-19"},{"lineNumber":34,"author":{"gitId":"BenjaminLHR"},"content":"        displayLine();","lastModifiedDate":"2021-08-19"},{"lineNumber":35,"author":{"gitId":"BenjaminLHR"},"content":"        System.out.println(output);","lastModifiedDate":"2021-08-19"},{"lineNumber":36,"author":{"gitId":"BenjaminLHR"},"content":"        displayLine();","lastModifiedDate":"2021-08-19"},{"lineNumber":37,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":38,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":39,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"BenjaminLHR"},"content":"     * Displays a horizontal line to the user.","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"BenjaminLHR"},"content":"    public static void displayLine() {","lastModifiedDate":"2021-08-18"},{"lineNumber":43,"author":{"gitId":"BenjaminLHR"},"content":"        System.out.println(\"____________________________________________________________\");","lastModifiedDate":"2021-08-18"},{"lineNumber":44,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":45,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":46,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"BenjaminLHR"},"content":"     * Reads input from the user.","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"BenjaminLHR"},"content":"     * @return The input from the user in a String format.","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":51,"author":{"gitId":"BenjaminLHR"},"content":"    public static String readInput() {","lastModifiedDate":"2021-08-18"},{"lineNumber":52,"author":{"gitId":"BenjaminLHR"},"content":"        return sc.nextLine();","lastModifiedDate":"2021-08-18"},{"lineNumber":53,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":54,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":55,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":56,"author":{"gitId":"BenjaminLHR"},"content":"     * Displays a message to inform user that the storage file was not found.","lastModifiedDate":"2021-08-26"},{"lineNumber":57,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"BenjaminLHR"},"content":"     * @param message Specific details of the error.","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"BenjaminLHR"},"content":"    public static void showStorageFileNotFoundError(String message) {","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"BenjaminLHR"},"content":"        System.out.println(\"Storage file not found: \" + message);","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"BenjaminLHR"},"content":"        System.out.println(\"Task List will be initialized to empty state.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"BenjaminLHR"},"content":"        System.out.println(\"Duke.txt will be created for you once you add tasks to the list.\\n\");","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"BenjaminLHR"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"BenjaminLHR":66}},{"path":"src/main/java/duke/helpful_functions/HelpfulFunctions.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenjaminLHR"},"content":"package duke.helpful_functions;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"BenjaminLHR"},"content":"public class HelpfulFunctions {","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"BenjaminLHR"},"content":"    public static boolean isInteger(String s) {","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"BenjaminLHR"},"content":"        try {","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"BenjaminLHR"},"content":"            Integer.parseInt(s);","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"BenjaminLHR"},"content":"            return true;","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"BenjaminLHR"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"BenjaminLHR"},"content":"            return false;","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"BenjaminLHR"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"BenjaminLHR"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"BenjaminLHR":12}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenjaminLHR"},"content":"package duke.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"BenjaminLHR"},"content":"/**","lastModifiedDate":"2021-09-23"},{"lineNumber":4,"author":{"gitId":"BenjaminLHR"},"content":" * Encapsulates a task with a deadline.","lastModifiedDate":"2021-09-23"},{"lineNumber":5,"author":{"gitId":"BenjaminLHR"},"content":" */","lastModifiedDate":"2021-09-23"},{"lineNumber":6,"author":{"gitId":"BenjaminLHR"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"BenjaminLHR"},"content":"    private String taskName;","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"BenjaminLHR"},"content":"    private String time;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"BenjaminLHR"},"content":"    private String taskSymbol \u003d \"D\";","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":12,"author":{"gitId":"BenjaminLHR"},"content":"     * Constructs a deadline object.","lastModifiedDate":"2021-09-23"},{"lineNumber":13,"author":{"gitId":"BenjaminLHR"},"content":"     * @param taskName Name of the deadline task.","lastModifiedDate":"2021-09-23"},{"lineNumber":14,"author":{"gitId":"BenjaminLHR"},"content":"     * @param time Deadline of the task.","lastModifiedDate":"2021-09-23"},{"lineNumber":15,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"BenjaminLHR"},"content":"    public Deadline(String taskName, String time) {","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"BenjaminLHR"},"content":"        this.taskName \u003d taskName;","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"BenjaminLHR"},"content":"        this.time \u003d time;","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"BenjaminLHR"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"BenjaminLHR"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"BenjaminLHR"},"content":"        String statusIcon \u003d getStatusIcon();","lastModifiedDate":"2021-08-18"},{"lineNumber":24,"author":{"gitId":"BenjaminLHR"},"content":"        return String.format(\"[%s][%s] %s (by: %s)\", taskSymbol, statusIcon, taskName, formatTime(time));","lastModifiedDate":"2021-09-10"},{"lineNumber":25,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":26,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":27,"author":{"gitId":"BenjaminLHR"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"BenjaminLHR"},"content":"    public String toStorageFormat() {","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"BenjaminLHR"},"content":"        return String.format(\"%s%s%s%s%s%s%s\", taskSymbol, REGEX_FOR_STORAGE, isCompleted(), REGEX_FOR_STORAGE,","lastModifiedDate":"2021-09-24"},{"lineNumber":30,"author":{"gitId":"BenjaminLHR"},"content":"                taskName, REGEX_FOR_STORAGE, time);","lastModifiedDate":"2021-09-24"},{"lineNumber":31,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"BenjaminLHR"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"BenjaminLHR":33}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenjaminLHR"},"content":"package duke.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"BenjaminLHR"},"content":"/**","lastModifiedDate":"2021-09-23"},{"lineNumber":4,"author":{"gitId":"BenjaminLHR"},"content":" * Encapsulates an event.","lastModifiedDate":"2021-09-23"},{"lineNumber":5,"author":{"gitId":"BenjaminLHR"},"content":" */","lastModifiedDate":"2021-09-23"},{"lineNumber":6,"author":{"gitId":"BenjaminLHR"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"BenjaminLHR"},"content":"    private String taskName;","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"BenjaminLHR"},"content":"    private String time;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"BenjaminLHR"},"content":"    private String taskSymbol \u003d \"E\";","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":12,"author":{"gitId":"BenjaminLHR"},"content":"     * Constructs an event object.","lastModifiedDate":"2021-09-23"},{"lineNumber":13,"author":{"gitId":"BenjaminLHR"},"content":"     * @param taskName Name of the task.","lastModifiedDate":"2021-09-23"},{"lineNumber":14,"author":{"gitId":"BenjaminLHR"},"content":"     * @param time The time that the event occurs.","lastModifiedDate":"2021-09-23"},{"lineNumber":15,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"BenjaminLHR"},"content":"    public Event(String taskName, String time) {","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"BenjaminLHR"},"content":"        this.taskName \u003d taskName;","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"BenjaminLHR"},"content":"        this.time \u003d time;","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"BenjaminLHR"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"BenjaminLHR"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"BenjaminLHR"},"content":"        String statusIcon \u003d getStatusIcon();","lastModifiedDate":"2021-08-18"},{"lineNumber":24,"author":{"gitId":"BenjaminLHR"},"content":"        return String.format(\"[%s][%s] %s (at: %s)\", taskSymbol, statusIcon, taskName, formatTime(time));","lastModifiedDate":"2021-09-10"},{"lineNumber":25,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":26,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"BenjaminLHR"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"BenjaminLHR"},"content":"    public String toStorageFormat() {","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"BenjaminLHR"},"content":"        return String.format(\"%s%s%s%s%s%s%s\", taskSymbol, REGEX_FOR_STORAGE, isCompleted(), REGEX_FOR_STORAGE,","lastModifiedDate":"2021-09-24"},{"lineNumber":30,"author":{"gitId":"BenjaminLHR"},"content":"                taskName, REGEX_FOR_STORAGE, time);","lastModifiedDate":"2021-09-24"},{"lineNumber":31,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"BenjaminLHR"},"content":"}","lastModifiedDate":"2021-08-18"},{"lineNumber":33,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"BenjaminLHR":34}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenjaminLHR"},"content":"package duke.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"BenjaminLHR"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-10"},{"lineNumber":4,"author":{"gitId":"BenjaminLHR"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-09-10"},{"lineNumber":5,"author":{"gitId":"BenjaminLHR"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-09-10"},{"lineNumber":6,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":7,"author":{"gitId":"BenjaminLHR"},"content":"/**","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"BenjaminLHR"},"content":" * An abstraction for Tasks.","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"BenjaminLHR"},"content":" */","lastModifiedDate":"2021-09-23"},{"lineNumber":10,"author":{"gitId":"BenjaminLHR"},"content":"public abstract class Task {","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"BenjaminLHR"},"content":"    private boolean completed;","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"BenjaminLHR"},"content":"    protected final String REGEX_FOR_STORAGE \u003d \"_/_,_/_\";","lastModifiedDate":"2021-09-24"},{"lineNumber":13,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"BenjaminLHR"},"content":"    public Task() {","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"BenjaminLHR"},"content":"        completed \u003d false;","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"BenjaminLHR"},"content":"    public void setCompleted() {","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"BenjaminLHR"},"content":"        completed \u003d true;","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":23,"author":{"gitId":"BenjaminLHR"},"content":"     * Retrieves the icon that marks whether a task is completed.","lastModifiedDate":"2021-09-23"},{"lineNumber":24,"author":{"gitId":"BenjaminLHR"},"content":"     * @return \"X\" if the task has been completed, else \" \".","lastModifiedDate":"2021-09-23"},{"lineNumber":25,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":26,"author":{"gitId":"BenjaminLHR"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-18"},{"lineNumber":27,"author":{"gitId":"BenjaminLHR"},"content":"        return completed ? \"X\" : \" \";","lastModifiedDate":"2021-08-18"},{"lineNumber":28,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":29,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":30,"author":{"gitId":"BenjaminLHR"},"content":"    public int isCompleted() {","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"BenjaminLHR"},"content":"        return completed ? 1 : 0;","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-09-10"},{"lineNumber":35,"author":{"gitId":"BenjaminLHR"},"content":"     * Looks through time and replaces occurrences of dates in the YYYY-MM-DD format with the MMM DD YYYY format","lastModifiedDate":"2021-09-10"},{"lineNumber":36,"author":{"gitId":"BenjaminLHR"},"content":"     * and returns the new String.","lastModifiedDate":"2021-09-10"},{"lineNumber":37,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-09-10"},{"lineNumber":38,"author":{"gitId":"BenjaminLHR"},"content":"     * @param time A String which possibly contains a date in the YYYY-MM-DD format.","lastModifiedDate":"2021-09-10"},{"lineNumber":39,"author":{"gitId":"BenjaminLHR"},"content":"     * @return The new String with dates in the YYYY-MM-DD format changed to MMM DD YYYY format.","lastModifiedDate":"2021-09-10"},{"lineNumber":40,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-09-10"},{"lineNumber":41,"author":{"gitId":"BenjaminLHR"},"content":"    public String formatTime(String time) {","lastModifiedDate":"2021-09-10"},{"lineNumber":42,"author":{"gitId":"BenjaminLHR"},"content":"        final String REGEX \u003d \" \";","lastModifiedDate":"2021-09-10"},{"lineNumber":43,"author":{"gitId":"BenjaminLHR"},"content":"        String[] splittedTime \u003d time.split(REGEX);","lastModifiedDate":"2021-09-10"},{"lineNumber":44,"author":{"gitId":"BenjaminLHR"},"content":"        // Loop through splittedTime and replace dates with the appropriate format","lastModifiedDate":"2021-09-10"},{"lineNumber":45,"author":{"gitId":"BenjaminLHR"},"content":"        for (int i \u003d 0; i \u003c splittedTime.length; i++) {","lastModifiedDate":"2021-09-10"},{"lineNumber":46,"author":{"gitId":"BenjaminLHR"},"content":"            try {","lastModifiedDate":"2021-09-10"},{"lineNumber":47,"author":{"gitId":"BenjaminLHR"},"content":"                LocalDate date \u003d LocalDate.parse(splittedTime[i]);","lastModifiedDate":"2021-09-10"},{"lineNumber":48,"author":{"gitId":"BenjaminLHR"},"content":"                splittedTime[i] \u003d date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2021-09-10"},{"lineNumber":49,"author":{"gitId":"BenjaminLHR"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2021-09-10"},{"lineNumber":50,"author":{"gitId":"BenjaminLHR"},"content":"                // splittedTime[i] is not in the date format, so do nothing","lastModifiedDate":"2021-09-10"},{"lineNumber":51,"author":{"gitId":"BenjaminLHR"},"content":"            }","lastModifiedDate":"2021-09-10"},{"lineNumber":52,"author":{"gitId":"BenjaminLHR"},"content":"        }","lastModifiedDate":"2021-09-10"},{"lineNumber":53,"author":{"gitId":"BenjaminLHR"},"content":"        return String.join(REGEX, splittedTime);","lastModifiedDate":"2021-09-10"},{"lineNumber":54,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-09-10"},{"lineNumber":55,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":56,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":57,"author":{"gitId":"BenjaminLHR"},"content":"     * Returns the storage format of the task.","lastModifiedDate":"2021-09-23"},{"lineNumber":58,"author":{"gitId":"BenjaminLHR"},"content":"     * @return The storage format of the task.","lastModifiedDate":"2021-09-23"},{"lineNumber":59,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":60,"author":{"gitId":"BenjaminLHR"},"content":"    public abstract String toStorageFormat();","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"BenjaminLHR"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"BenjaminLHR":62}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenjaminLHR"},"content":"package duke.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"BenjaminLHR"},"content":"/**","lastModifiedDate":"2021-09-23"},{"lineNumber":4,"author":{"gitId":"BenjaminLHR"},"content":" * Encapsulates a to-do task.","lastModifiedDate":"2021-09-23"},{"lineNumber":5,"author":{"gitId":"BenjaminLHR"},"content":" */","lastModifiedDate":"2021-09-23"},{"lineNumber":6,"author":{"gitId":"BenjaminLHR"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"BenjaminLHR"},"content":"    private String taskName;","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"BenjaminLHR"},"content":"    private String taskSymbol \u003d \"T\";","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":11,"author":{"gitId":"BenjaminLHR"},"content":"     * Constructs a Todo object.","lastModifiedDate":"2021-09-23"},{"lineNumber":12,"author":{"gitId":"BenjaminLHR"},"content":"     * @param taskName","lastModifiedDate":"2021-09-23"},{"lineNumber":13,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":14,"author":{"gitId":"BenjaminLHR"},"content":"    public Todo(String taskName) {","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"BenjaminLHR"},"content":"        this.taskName \u003d taskName;","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"BenjaminLHR"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"BenjaminLHR"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"BenjaminLHR"},"content":"        String statusIcon \u003d getStatusIcon();","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"BenjaminLHR"},"content":"        return String.format(\"[%s][%s] %s\", taskSymbol, statusIcon, taskName);","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"BenjaminLHR"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"BenjaminLHR"},"content":"    public String toStorageFormat() {","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"BenjaminLHR"},"content":"        return String.format(\"%s%s%s%s%s\", taskSymbol, REGEX_FOR_STORAGE, isCompleted(), REGEX_FOR_STORAGE, taskName);","lastModifiedDate":"2021-09-24"},{"lineNumber":27,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"BenjaminLHR"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"BenjaminLHR":28}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"BenjaminLHR"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-09-22"},{"lineNumber":2,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":3,"author":{"gitId":"BenjaminLHR"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2021-09-22"},{"lineNumber":4,"author":{"gitId":"BenjaminLHR"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"BenjaminLHR"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2021-09-22"},{"lineNumber":6,"author":{"gitId":"BenjaminLHR"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-09-22"},{"lineNumber":7,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":8,"author":{"gitId":"BenjaminLHR"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"Infinity\" maxWidth\u003d\"Infinity\" prefWidth\u003d\"400.0\" style\u003d\"-fx-border-insets: 5;\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-09-22"},{"lineNumber":9,"author":{"gitId":"BenjaminLHR"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2021-09-22"},{"lineNumber":10,"author":{"gitId":"BenjaminLHR"},"content":"        \u003cLabel fx:id\u003d\"dialog\" minHeight\u003d\"-Infinity\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e","lastModifiedDate":"2021-09-22"},{"lineNumber":11,"author":{"gitId":"BenjaminLHR"},"content":"         \u003cpadding\u003e","lastModifiedDate":"2021-09-22"},{"lineNumber":12,"author":{"gitId":"BenjaminLHR"},"content":"            \u003cInsets right\u003d\"5.0\" /\u003e","lastModifiedDate":"2021-09-22"},{"lineNumber":13,"author":{"gitId":"BenjaminLHR"},"content":"         \u003c/padding\u003e","lastModifiedDate":"2021-09-22"},{"lineNumber":14,"author":{"gitId":"BenjaminLHR"},"content":"        \u003c/Label\u003e","lastModifiedDate":"2021-09-22"},{"lineNumber":15,"author":{"gitId":"BenjaminLHR"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2021-09-22"},{"lineNumber":16,"author":{"gitId":"BenjaminLHR"},"content":"    \u003c/children\u003e","lastModifiedDate":"2021-09-22"},{"lineNumber":17,"author":{"gitId":"BenjaminLHR"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2021-09-22"},{"lineNumber":18,"author":{"gitId":"BenjaminLHR"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2021-09-22"},{"lineNumber":19,"author":{"gitId":"BenjaminLHR"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2021-09-22"},{"lineNumber":20,"author":{"gitId":"BenjaminLHR"},"content":"   \u003copaqueInsets\u003e","lastModifiedDate":"2021-09-22"},{"lineNumber":21,"author":{"gitId":"BenjaminLHR"},"content":"      \u003cInsets top\u003d\"111\"/\u003e","lastModifiedDate":"2021-09-22"},{"lineNumber":22,"author":{"gitId":"BenjaminLHR"},"content":"   \u003c/opaqueInsets\u003e","lastModifiedDate":"2021-09-22"},{"lineNumber":23,"author":{"gitId":"BenjaminLHR"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2021-09-22"}],"authorContributionMap":{"BenjaminLHR":23}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"BenjaminLHR"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-09-22"},{"lineNumber":2,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":3,"author":{"gitId":"BenjaminLHR"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2021-09-22"},{"lineNumber":4,"author":{"gitId":"BenjaminLHR"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"BenjaminLHR"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2021-09-22"},{"lineNumber":6,"author":{"gitId":"BenjaminLHR"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2021-09-22"},{"lineNumber":7,"author":{"gitId":"BenjaminLHR"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-09-22"},{"lineNumber":8,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":9,"author":{"gitId":"BenjaminLHR"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.gui.MainWindow\"\u003e","lastModifiedDate":"2021-09-22"},{"lineNumber":10,"author":{"gitId":"BenjaminLHR"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2021-09-22"},{"lineNumber":11,"author":{"gitId":"BenjaminLHR"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2021-09-22"},{"lineNumber":12,"author":{"gitId":"BenjaminLHR"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2021-09-22"},{"lineNumber":13,"author":{"gitId":"BenjaminLHR"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2021-09-22"},{"lineNumber":14,"author":{"gitId":"BenjaminLHR"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2021-09-22"},{"lineNumber":15,"author":{"gitId":"BenjaminLHR"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e","lastModifiedDate":"2021-09-22"},{"lineNumber":16,"author":{"gitId":"BenjaminLHR"},"content":"            \u003c/content\u003e","lastModifiedDate":"2021-09-22"},{"lineNumber":17,"author":{"gitId":"BenjaminLHR"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2021-09-22"},{"lineNumber":18,"author":{"gitId":"BenjaminLHR"},"content":"    \u003c/children\u003e","lastModifiedDate":"2021-09-22"},{"lineNumber":19,"author":{"gitId":"BenjaminLHR"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2021-09-22"}],"authorContributionMap":{"BenjaminLHR":19}},{"path":"src/test/java/duke/core/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenjaminLHR"},"content":"package duke.core;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"BenjaminLHR"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"BenjaminLHR"},"content":"import duke.task.Todo;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"BenjaminLHR"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"BenjaminLHR"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"BenjaminLHR"},"content":"public class TaskListTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"BenjaminLHR"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"BenjaminLHR"},"content":"    public void testGetSize() {","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"BenjaminLHR"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"BenjaminLHR"},"content":"        taskList.addTask(new Todo(\"Homework\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"BenjaminLHR"},"content":"        assertEquals(1, taskList.getSize());","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"BenjaminLHR"},"content":"        taskList.addTask(new Deadline(\"Project\", \"2020-11-11 6pm\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"BenjaminLHR"},"content":"        assertEquals(2, taskList.getSize());","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"BenjaminLHR"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"BenjaminLHR":18}},{"path":"src/test/java/duke/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenjaminLHR"},"content":"package duke.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"BenjaminLHR"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"BenjaminLHR"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"BenjaminLHR"},"content":"public class DeadlineTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"BenjaminLHR"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"BenjaminLHR"},"content":"    public void testStringConversion() {","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"BenjaminLHR"},"content":"        Deadline dummyDeadline \u003d new Deadline(\"Dummy deadline\", \"2020-10-10 6pm\");","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"BenjaminLHR"},"content":"        assertEquals(\"[D][ ] Dummy deadline (by: Oct 10 2020 6pm)\", dummyDeadline.toString());","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"BenjaminLHR"},"content":"        dummyDeadline.setCompleted();","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"BenjaminLHR"},"content":"        assertEquals(\"[D][X] Dummy deadline (by: Oct 10 2020 6pm)\", dummyDeadline.toString());","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"BenjaminLHR"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"BenjaminLHR"},"content":"    public void testStorageFormatConversion() {","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"BenjaminLHR"},"content":"        Deadline dummyDeadline \u003d new Deadline(\"Dummy deadline\", \"2020-10-10 6pm\");","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"BenjaminLHR"},"content":"        assertEquals(\"D/0/Dummy deadline/2020-10-10 6pm\", dummyDeadline.toStorageFormat());","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"BenjaminLHR"},"content":"        dummyDeadline.setCompleted();","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"BenjaminLHR"},"content":"        assertEquals(\"D/1/Dummy deadline/2020-10-10 6pm\", dummyDeadline.toStorageFormat());","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"BenjaminLHR"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"BenjaminLHR":23}},{"path":"src/test/java/duke/task/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenjaminLHR"},"content":"package duke.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"BenjaminLHR"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"BenjaminLHR"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"BenjaminLHR"},"content":"public class TodoTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"BenjaminLHR"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"BenjaminLHR"},"content":"    public void testStringConversion() {","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"BenjaminLHR"},"content":"        Todo dummyTodo \u003d new Todo(\"Dummy todo\");","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"BenjaminLHR"},"content":"        assertEquals(\"[T][ ] Dummy todo\", dummyTodo.toString());","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"BenjaminLHR"},"content":"        dummyTodo.setCompleted();","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"BenjaminLHR"},"content":"        assertEquals(\"[T][X] Dummy todo\", dummyTodo.toString());","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"BenjaminLHR"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"BenjaminLHR"},"content":"    public void testStorageFormatConversion() {","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"BenjaminLHR"},"content":"        Todo dummyTodo \u003d new Todo(\"Dummy todo\");","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"BenjaminLHR"},"content":"        assertEquals(\"T/0/Dummy todo\", dummyTodo.toStorageFormat());","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"BenjaminLHR"},"content":"        dummyTodo.setCompleted();","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"BenjaminLHR"},"content":"        assertEquals(\"T/1/Dummy todo\", dummyTodo.toStorageFormat());","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"BenjaminLHR"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"BenjaminLHR":23}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"BenjaminLHR"},"content":"todo borrow book","lastModifiedDate":"2021-08-19"},{"lineNumber":2,"author":{"gitId":"BenjaminLHR"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"BenjaminLHR"},"content":"deadline return book /by 01/01/2022","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"BenjaminLHR"},"content":"event project meeting /at Mon 2-4pm","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"BenjaminLHR"},"content":"done 1","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"BenjaminLHR"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"BenjaminLHR"},"content":"bye","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"BenjaminLHR":7}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"BenjaminLHR"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\core\\Duke.java","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"BenjaminLHR"},"content":"java -classpath ..\\bin core.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"BenjaminLHR":3,"-":19}}]

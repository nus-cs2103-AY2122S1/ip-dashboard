[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Duke project template","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"BenjaminLHR"},"content":"3. After that, locate the `src/main/java/core/Duke.java` file, right-click it, and choose `Run Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"BenjaminLHR":1,"-":23}},{"path":"src/main/java/duke/command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenjaminLHR"},"content":"package duke.command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"BenjaminLHR"},"content":"import duke.core.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"BenjaminLHR"},"content":"import duke.core.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"BenjaminLHR"},"content":"import duke.gui.Ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"BenjaminLHR"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"BenjaminLHR"},"content":" * Encapsulates a command to terminate Duke.","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"BenjaminLHR"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"BenjaminLHR"},"content":"public class ByeCommand extends Command {","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"BenjaminLHR"},"content":"    public ByeCommand() {","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"BenjaminLHR"},"content":"        // Do nothing as there are no attributes to initialize","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"BenjaminLHR"},"content":"     * Prints out a farewell message","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"BenjaminLHR"},"content":"     * @param taskList The TaskList object storing all the tasks.","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"BenjaminLHR"},"content":"     * @param storage The Storage object which was instantiated with the appropriate storage filepath.","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"BenjaminLHR"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"BenjaminLHR"},"content":"    public void execute(TaskList taskList, Storage storage) {","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"BenjaminLHR"},"content":"        Ui.sayBye();","lastModifiedDate":"2021-08-18"},{"lineNumber":24,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":25,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":26,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"BenjaminLHR"},"content":"     * Returns a boolean specifying whether Duke should terminate.","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"BenjaminLHR"},"content":"     * @return true","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"BenjaminLHR"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":32,"author":{"gitId":"BenjaminLHR"},"content":"    public boolean shouldExit() {","lastModifiedDate":"2021-08-18"},{"lineNumber":33,"author":{"gitId":"BenjaminLHR"},"content":"        return true;","lastModifiedDate":"2021-08-18"},{"lineNumber":34,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":35,"author":{"gitId":"BenjaminLHR"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"BenjaminLHR":35}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenjaminLHR"},"content":"package duke.command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"BenjaminLHR"},"content":"import duke.core.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"BenjaminLHR"},"content":"import duke.core.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"BenjaminLHR"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"BenjaminLHR"},"content":" * An abstract class encapsulating a command.","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"BenjaminLHR"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"BenjaminLHR"},"content":"public abstract class Command {","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"BenjaminLHR"},"content":"     * The appropriate action to take depending on run-time type of the Command object.","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"BenjaminLHR"},"content":"     * @param taskList The TaskList object storing all the tasks.","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"BenjaminLHR"},"content":"     * @param storage The Storage object which was instantiated with the appropriate storage filepath.","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"BenjaminLHR"},"content":"    public abstract void execute(TaskList taskList, Storage storage);","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"BenjaminLHR"},"content":"     * Returns a boolean specifying whether Duke should terminate.","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"BenjaminLHR"},"content":"     * @return A boolean specifying whether Duke should terminate.","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"BenjaminLHR"},"content":"    public abstract boolean shouldExit();","lastModifiedDate":"2021-08-18"},{"lineNumber":24,"author":{"gitId":"BenjaminLHR"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"BenjaminLHR":24}},{"path":"src/main/java/duke/command/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenjaminLHR"},"content":"package duke.command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"BenjaminLHR"},"content":"import duke.core.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"BenjaminLHR"},"content":"import duke.core.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"BenjaminLHR"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"BenjaminLHR"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"BenjaminLHR"},"content":" * Encapsulates a command that handles the addition of deadline tasks into the task list.","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"BenjaminLHR"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"BenjaminLHR"},"content":"public class DeadlineCommand extends Command {","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"BenjaminLHR"},"content":"    private Deadline deadlineTask;","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"BenjaminLHR"},"content":"     * Constructs a DeadlineCommand object.","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"BenjaminLHR"},"content":"     * @param taskName Description of the deadline task.","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"BenjaminLHR"},"content":"     * @param time Deadline of the task.","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"BenjaminLHR"},"content":"    public DeadlineCommand(String taskName, String time) {","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"BenjaminLHR"},"content":"        deadlineTask \u003d new Deadline(taskName, time);","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"BenjaminLHR"},"content":"     * Adds the deadline task into the task list and storage file.","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"BenjaminLHR"},"content":"     * @param taskList The TaskList object storing all the tasks.","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"BenjaminLHR"},"content":"     * @param storage The Storage object which was instantiated with the appropriate storage filepath.","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"BenjaminLHR"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":30,"author":{"gitId":"BenjaminLHR"},"content":"    public void execute(TaskList taskList, Storage storage) {","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"BenjaminLHR"},"content":"        taskList.addTask(deadlineTask);","lastModifiedDate":"2021-08-18"},{"lineNumber":32,"author":{"gitId":"BenjaminLHR"},"content":"        storage.saveTasksToFile(taskList);","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":34,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":35,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"BenjaminLHR"},"content":"     * Returns a boolean specifying whether Duke should terminate.","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"BenjaminLHR"},"content":"     * @return false","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"BenjaminLHR"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":41,"author":{"gitId":"BenjaminLHR"},"content":"    public boolean shouldExit() {","lastModifiedDate":"2021-08-18"},{"lineNumber":42,"author":{"gitId":"BenjaminLHR"},"content":"        return false;","lastModifiedDate":"2021-08-18"},{"lineNumber":43,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":44,"author":{"gitId":"BenjaminLHR"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"BenjaminLHR":44}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenjaminLHR"},"content":"package duke.command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"BenjaminLHR"},"content":"import duke.core.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"BenjaminLHR"},"content":"import duke.core.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"BenjaminLHR"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"BenjaminLHR"},"content":" * Encapsulates a command to delete a task based on its index.","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"BenjaminLHR"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"BenjaminLHR"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"BenjaminLHR"},"content":"    private int indexToDelete;","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"BenjaminLHR"},"content":"     * Constructs a DeleteCommand object.","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"BenjaminLHR"},"content":"     * @param indexToDelete Index of the task to be deleted.","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"BenjaminLHR"},"content":"    public DeleteCommand(int indexToDelete) {","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"BenjaminLHR"},"content":"        this.indexToDelete \u003d indexToDelete;","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":20,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":21,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"BenjaminLHR"},"content":"     * Delete the task from task list and storage file.","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"BenjaminLHR"},"content":"     * @param taskList The TaskList object storing all the tasks.","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"BenjaminLHR"},"content":"     * @param storage The Storage object which was instantiated with the appropriate storage filepath.","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"BenjaminLHR"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":28,"author":{"gitId":"BenjaminLHR"},"content":"    public void execute(TaskList taskList, Storage storage) {","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"BenjaminLHR"},"content":"        taskList.delete(indexToDelete);","lastModifiedDate":"2021-08-19"},{"lineNumber":30,"author":{"gitId":"BenjaminLHR"},"content":"        storage.saveTasksToFile(taskList);","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":32,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":33,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"BenjaminLHR"},"content":"     * Returns a boolean specifying whether Duke should terminate.","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"BenjaminLHR"},"content":"     * @return false","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"BenjaminLHR"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":39,"author":{"gitId":"BenjaminLHR"},"content":"    public boolean shouldExit() {","lastModifiedDate":"2021-08-19"},{"lineNumber":40,"author":{"gitId":"BenjaminLHR"},"content":"        return false;","lastModifiedDate":"2021-08-19"},{"lineNumber":41,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":42,"author":{"gitId":"BenjaminLHR"},"content":"}","lastModifiedDate":"2021-08-19"},{"lineNumber":43,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"BenjaminLHR":43}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenjaminLHR"},"content":"package duke.command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"BenjaminLHR"},"content":"import duke.core.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"BenjaminLHR"},"content":"import duke.core.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"BenjaminLHR"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"BenjaminLHR"},"content":" * Encapsulates a command to mark a task as completed based on index.","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"BenjaminLHR"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"BenjaminLHR"},"content":"public class DoneCommand extends Command {","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"BenjaminLHR"},"content":"    private int indexOfCompleted;","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"BenjaminLHR"},"content":"     * Constructs a DoneCommand object.","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"BenjaminLHR"},"content":"     * @param indexOfCompleted Index of the task that has been completed.","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"BenjaminLHR"},"content":"    public DoneCommand(int indexOfCompleted) {","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"BenjaminLHR"},"content":"        this.indexOfCompleted \u003d indexOfCompleted;","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"BenjaminLHR"},"content":"     * Mark the task as done in the task list and storage file.","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"BenjaminLHR"},"content":"     * @param taskList The TaskList object storing all the tasks.","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"BenjaminLHR"},"content":"     * @param storage The Storage object which was instantiated with the appropriate storage filepath.","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"BenjaminLHR"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":28,"author":{"gitId":"BenjaminLHR"},"content":"    public void execute(TaskList taskList, Storage storage) {","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"BenjaminLHR"},"content":"        taskList.markAsDone(indexOfCompleted);","lastModifiedDate":"2021-08-18"},{"lineNumber":30,"author":{"gitId":"BenjaminLHR"},"content":"        storage.saveTasksToFile(taskList);","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":32,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":33,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"BenjaminLHR"},"content":"     * Returns a boolean specifying whether Duke should terminate.","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"BenjaminLHR"},"content":"     * @return false","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"BenjaminLHR"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":39,"author":{"gitId":"BenjaminLHR"},"content":"    public boolean shouldExit() {","lastModifiedDate":"2021-08-18"},{"lineNumber":40,"author":{"gitId":"BenjaminLHR"},"content":"        return false;","lastModifiedDate":"2021-08-18"},{"lineNumber":41,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":42,"author":{"gitId":"BenjaminLHR"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"BenjaminLHR":42}},{"path":"src/main/java/duke/command/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenjaminLHR"},"content":"package duke.command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"BenjaminLHR"},"content":"import duke.core.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"BenjaminLHR"},"content":"import duke.core.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"BenjaminLHR"},"content":"import duke.task.Event;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"BenjaminLHR"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"BenjaminLHR"},"content":" * Encapsulates a command that handles the addition of event tasks into the task list.","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"BenjaminLHR"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"BenjaminLHR"},"content":"public class EventCommand extends Command {","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"BenjaminLHR"},"content":"    private Event eventTask;","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"BenjaminLHR"},"content":"     * Constructs an EventCommand object.","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"BenjaminLHR"},"content":"     * @param taskName Description of the event.","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"BenjaminLHR"},"content":"     * @param time Time that the event takes place.","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"BenjaminLHR"},"content":"    public EventCommand(String taskName, String time) {","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"BenjaminLHR"},"content":"        eventTask \u003d new Event(taskName, time);","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"BenjaminLHR"},"content":"     * Adds the event task into the task list and storage file.","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"BenjaminLHR"},"content":"     * @param taskList The TaskList object storing all the tasks.","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"BenjaminLHR"},"content":"     * @param storage The Storage object which was instantiated with the appropriate storage filepath.","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"BenjaminLHR"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":30,"author":{"gitId":"BenjaminLHR"},"content":"    public void execute(TaskList taskList, Storage storage) {","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"BenjaminLHR"},"content":"        taskList.addTask(eventTask);","lastModifiedDate":"2021-08-18"},{"lineNumber":32,"author":{"gitId":"BenjaminLHR"},"content":"        storage.saveTasksToFile(taskList);","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":34,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":35,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"BenjaminLHR"},"content":"     * Returns a boolean specifying whether Duke should terminate.","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"BenjaminLHR"},"content":"     * @return false","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"BenjaminLHR"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":41,"author":{"gitId":"BenjaminLHR"},"content":"    public boolean shouldExit() {","lastModifiedDate":"2021-08-18"},{"lineNumber":42,"author":{"gitId":"BenjaminLHR"},"content":"        return false;","lastModifiedDate":"2021-08-18"},{"lineNumber":43,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":44,"author":{"gitId":"BenjaminLHR"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"BenjaminLHR":44}},{"path":"src/main/java/duke/command/ExceptionalCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenjaminLHR"},"content":"package duke.command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"BenjaminLHR"},"content":"import duke.core.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"BenjaminLHR"},"content":"import duke.core.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"BenjaminLHR"},"content":"import duke.gui.Ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"BenjaminLHR"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"BenjaminLHR"},"content":" * Encapsulates a command to be returned by Parser.parse() when it encounters an exception while parsing.","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"BenjaminLHR"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"BenjaminLHR"},"content":"public class ExceptionalCommand extends Command {","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"BenjaminLHR"},"content":"    private Exception e;","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"BenjaminLHR"},"content":"     * Constructs an ExceptionalCommand object.","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"BenjaminLHR"},"content":"     * @param e The Exception encountered during parsing.","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"BenjaminLHR"},"content":"    public ExceptionalCommand(Exception e) {","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"BenjaminLHR"},"content":"        this.e \u003d e;","lastModifiedDate":"2021-08-19"},{"lineNumber":20,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":21,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":22,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"BenjaminLHR"},"content":"     * Prints the detailed message from the exception encountered.","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"BenjaminLHR"},"content":"     * @param taskList The TaskList object storing all the tasks.","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"BenjaminLHR"},"content":"     * @param storage The Storage object which was instantiated with the appropriate storage filepath.","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"BenjaminLHR"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":29,"author":{"gitId":"BenjaminLHR"},"content":"    public void execute(TaskList taskList, Storage storage) {","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"BenjaminLHR"},"content":"        String message \u003d e.getMessage();","lastModifiedDate":"2021-08-19"},{"lineNumber":31,"author":{"gitId":"BenjaminLHR"},"content":"        Ui.formatAndPrint(message);","lastModifiedDate":"2021-08-19"},{"lineNumber":32,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":33,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":34,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"BenjaminLHR"},"content":"     * Returns a boolean specifying whether Duke should terminate.","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"BenjaminLHR"},"content":"     * @return false","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"BenjaminLHR"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":40,"author":{"gitId":"BenjaminLHR"},"content":"    public boolean shouldExit() {","lastModifiedDate":"2021-08-19"},{"lineNumber":41,"author":{"gitId":"BenjaminLHR"},"content":"        return false;","lastModifiedDate":"2021-08-19"},{"lineNumber":42,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":43,"author":{"gitId":"BenjaminLHR"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"BenjaminLHR":43}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenjaminLHR"},"content":"package duke.command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"BenjaminLHR"},"content":"import duke.core.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"BenjaminLHR"},"content":"import duke.core.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"BenjaminLHR"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"BenjaminLHR"},"content":"    private String keyword;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"BenjaminLHR"},"content":"    public FindCommand(String keyword) {","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"BenjaminLHR"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"BenjaminLHR"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"BenjaminLHR"},"content":"    public void execute(TaskList taskList, Storage storage) {","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"BenjaminLHR"},"content":"        taskList.findAndListTasks(keyword);","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"BenjaminLHR"},"content":"    public boolean shouldExit() {","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"BenjaminLHR"},"content":"        return false;","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"BenjaminLHR"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"BenjaminLHR":21}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenjaminLHR"},"content":"package duke.command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"BenjaminLHR"},"content":"import duke.core.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"BenjaminLHR"},"content":"import duke.core.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"BenjaminLHR"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"BenjaminLHR"},"content":" * Encapsulates a command to list all the tasks present in the task list.","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"BenjaminLHR"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"BenjaminLHR"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"BenjaminLHR"},"content":"     * Displays the tasks present in the task list.","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"BenjaminLHR"},"content":"     * @param taskList The TaskList object storing all the tasks.","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"BenjaminLHR"},"content":"     * @param storage The Storage object which was instantiated with the appropriate storage filepath.","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"BenjaminLHR"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"BenjaminLHR"},"content":"    public void execute(TaskList taskList, Storage storage) {","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"BenjaminLHR"},"content":"        taskList.listTasks();","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"BenjaminLHR"},"content":"     * Returns a boolean specifying whether Duke should terminate.","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"BenjaminLHR"},"content":"     * @return false","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"BenjaminLHR"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":27,"author":{"gitId":"BenjaminLHR"},"content":"    public boolean shouldExit() {","lastModifiedDate":"2021-08-18"},{"lineNumber":28,"author":{"gitId":"BenjaminLHR"},"content":"        return false;","lastModifiedDate":"2021-08-18"},{"lineNumber":29,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":30,"author":{"gitId":"BenjaminLHR"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"BenjaminLHR":30}},{"path":"src/main/java/duke/command/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenjaminLHR"},"content":"package duke.command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"BenjaminLHR"},"content":"import duke.core.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"BenjaminLHR"},"content":"import duke.core.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"BenjaminLHR"},"content":"import duke.task.Todo;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"BenjaminLHR"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"BenjaminLHR"},"content":" * Encapsulates a command that handles the addition of todo tasks into the task list.","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"BenjaminLHR"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"BenjaminLHR"},"content":"public class TodoCommand extends Command {","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"BenjaminLHR"},"content":"    private Todo todoTask;","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"BenjaminLHR"},"content":"     * Constructs a TodoCommand object.","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"BenjaminLHR"},"content":"     * @param taskName Description of the todo task.","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"BenjaminLHR"},"content":"    public TodoCommand(String taskName) {","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"BenjaminLHR"},"content":"        todoTask \u003d new Todo(taskName);","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"BenjaminLHR"},"content":"     * Adds the todo task into the task list and storage file.","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"BenjaminLHR"},"content":"     * @param taskList The TaskList object storing all the tasks.","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"BenjaminLHR"},"content":"     * @param storage The Storage object which was instantiated with the appropriate storage filepath.","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"BenjaminLHR"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":29,"author":{"gitId":"BenjaminLHR"},"content":"    public void execute(TaskList taskList, Storage storage) {","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"BenjaminLHR"},"content":"        taskList.addTask(todoTask);","lastModifiedDate":"2021-08-18"},{"lineNumber":31,"author":{"gitId":"BenjaminLHR"},"content":"        storage.saveTasksToFile(taskList);","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":33,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":34,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"BenjaminLHR"},"content":"     * Returns a boolean specifying whether Duke should terminate.","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"BenjaminLHR"},"content":"     * @return false","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"BenjaminLHR"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":40,"author":{"gitId":"BenjaminLHR"},"content":"    public boolean shouldExit() {","lastModifiedDate":"2021-08-18"},{"lineNumber":41,"author":{"gitId":"BenjaminLHR"},"content":"        return false;","lastModifiedDate":"2021-08-18"},{"lineNumber":42,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":43,"author":{"gitId":"BenjaminLHR"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"BenjaminLHR":43}},{"path":"src/main/java/duke/core/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenjaminLHR"},"content":"package duke.core;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"BenjaminLHR"},"content":"import duke.command.Command;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"BenjaminLHR"},"content":"import duke.gui.Ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"BenjaminLHR"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"BenjaminLHR"},"content":" * Duke is a chat bot that helps you keep track of tasks. It recognizes specific commands as stated in the user guide.","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"BenjaminLHR"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":10,"author":{"gitId":"BenjaminLHR"},"content":"    private TaskList taskList;","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"BenjaminLHR"},"content":"    private Storage storage;","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"BenjaminLHR"},"content":"     * Constructs a Duke object.","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"BenjaminLHR"},"content":"     * @param filePath The relative filepath of the storage file.","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"BenjaminLHR"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"BenjaminLHR"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"BenjaminLHR"},"content":"        taskList \u003d new TaskList(storage.load());","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"BenjaminLHR"},"content":"    private void run() {","lastModifiedDate":"2021-08-18"},{"lineNumber":24,"author":{"gitId":"BenjaminLHR"},"content":"        boolean shouldExit \u003d false;","lastModifiedDate":"2021-08-18"},{"lineNumber":25,"author":{"gitId":"BenjaminLHR"},"content":"        Ui.greet();","lastModifiedDate":"2021-08-18"},{"lineNumber":26,"author":{"gitId":"BenjaminLHR"},"content":"        while (!shouldExit) {","lastModifiedDate":"2021-08-18"},{"lineNumber":27,"author":{"gitId":"BenjaminLHR"},"content":"            String input \u003d Ui.readInput();","lastModifiedDate":"2021-08-18"},{"lineNumber":28,"author":{"gitId":"BenjaminLHR"},"content":"            Command command \u003d Parser.parse(input, taskList);","lastModifiedDate":"2021-08-19"},{"lineNumber":29,"author":{"gitId":"BenjaminLHR"},"content":"            command.execute(taskList, storage);","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"BenjaminLHR"},"content":"            shouldExit \u003d command.shouldExit();","lastModifiedDate":"2021-08-18"},{"lineNumber":31,"author":{"gitId":"BenjaminLHR"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":32,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":33,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":35,"author":{"gitId":"BenjaminLHR"},"content":"        new Duke(\"data/Duke.txt\").run();","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":37,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"BenjaminLHR":33,"-":4}},{"path":"src/main/java/duke/core/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenjaminLHR"},"content":"package duke.core;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"BenjaminLHR"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"BenjaminLHR"},"content":" * DukeException encapsulates Exceptions specific to Duke.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"BenjaminLHR"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"BenjaminLHR"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"BenjaminLHR"},"content":"     * Constructs a DukeException object.","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"BenjaminLHR"},"content":"     * @param message The detailed message of the exception encountered.","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"BenjaminLHR"},"content":"    public DukeException(String message) {","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"BenjaminLHR"},"content":"        super(message);","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"BenjaminLHR"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"BenjaminLHR":15}},{"path":"src/main/java/duke/core/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenjaminLHR"},"content":"package duke.core;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"BenjaminLHR"},"content":"import duke.command.ByeCommand;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"BenjaminLHR"},"content":"import duke.command.Command;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"BenjaminLHR"},"content":"import duke.command.DeadlineCommand;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"BenjaminLHR"},"content":"import duke.command.DeleteCommand;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"BenjaminLHR"},"content":"import duke.command.DoneCommand;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"BenjaminLHR"},"content":"import duke.command.EventCommand;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"BenjaminLHR"},"content":"import duke.command.ExceptionalCommand;","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"BenjaminLHR"},"content":"import duke.command.FindCommand;","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"BenjaminLHR"},"content":"import duke.command.ListCommand;","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"BenjaminLHR"},"content":"import duke.command.TodoCommand;","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"BenjaminLHR"},"content":"import duke.helpful_functions.HelpfulFunctions;","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"BenjaminLHR"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"BenjaminLHR"},"content":" * Parser is a class that provides useful method(s) to make sense of and translate user input into Command.","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"BenjaminLHR"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"BenjaminLHR"},"content":"public class Parser {","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"BenjaminLHR"},"content":"     * parse is a static method that makes sense of and translates user input into a Command.","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"BenjaminLHR"},"content":"     * @param input The user\u0027s input in String format.","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"BenjaminLHR"},"content":"     * @param taskList The TaskList object storing all the tasks.","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"BenjaminLHR"},"content":"     * @return A Command object that will be executed by Duke to carry out the instructions of the user.","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"BenjaminLHR"},"content":"    public static Command parse(String input, TaskList taskList) {","lastModifiedDate":"2021-08-19"},{"lineNumber":27,"author":{"gitId":"BenjaminLHR"},"content":"        try {","lastModifiedDate":"2021-08-19"},{"lineNumber":28,"author":{"gitId":"BenjaminLHR"},"content":"            // Check if the input is in a valid format, and throw a DukeException if it is not","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"BenjaminLHR"},"content":"            checkValiditiy(input, taskList);","lastModifiedDate":"2021-08-19"},{"lineNumber":30,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"BenjaminLHR"},"content":"            // Return a Command based on the input type (determined by first word of input)","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"BenjaminLHR"},"content":"            String[] splittedInput \u003d input.split(\" \");","lastModifiedDate":"2021-08-18"},{"lineNumber":33,"author":{"gitId":"BenjaminLHR"},"content":"            switch (splittedInput[0]) {","lastModifiedDate":"2021-08-18"},{"lineNumber":34,"author":{"gitId":"BenjaminLHR"},"content":"            case \"list\":","lastModifiedDate":"2021-08-18"},{"lineNumber":35,"author":{"gitId":"BenjaminLHR"},"content":"                return new ListCommand();","lastModifiedDate":"2021-08-18"},{"lineNumber":36,"author":{"gitId":"BenjaminLHR"},"content":"            case \"done\":","lastModifiedDate":"2021-08-18"},{"lineNumber":37,"author":{"gitId":"BenjaminLHR"},"content":"                return new DoneCommand(Integer.valueOf(splittedInput[1]));","lastModifiedDate":"2021-08-18"},{"lineNumber":38,"author":{"gitId":"BenjaminLHR"},"content":"            case \"delete\":","lastModifiedDate":"2021-08-19"},{"lineNumber":39,"author":{"gitId":"BenjaminLHR"},"content":"                return new DeleteCommand(Integer.valueOf(splittedInput[1]));","lastModifiedDate":"2021-08-19"},{"lineNumber":40,"author":{"gitId":"BenjaminLHR"},"content":"            case \"find\":","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"BenjaminLHR"},"content":"                return new FindCommand(splittedInput[1]);","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"BenjaminLHR"},"content":"            case \"bye\":","lastModifiedDate":"2021-08-18"},{"lineNumber":43,"author":{"gitId":"BenjaminLHR"},"content":"                return new ByeCommand();","lastModifiedDate":"2021-08-18"},{"lineNumber":44,"author":{"gitId":"BenjaminLHR"},"content":"            case \"todo\":","lastModifiedDate":"2021-08-18"},{"lineNumber":45,"author":{"gitId":"BenjaminLHR"},"content":"                return validTodoHandler(input);","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"BenjaminLHR"},"content":"            case \"deadline\":","lastModifiedDate":"2021-08-18"},{"lineNumber":47,"author":{"gitId":"BenjaminLHR"},"content":"                return validDeadlineHandler(input);","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"BenjaminLHR"},"content":"            case \"event\":","lastModifiedDate":"2021-08-18"},{"lineNumber":49,"author":{"gitId":"BenjaminLHR"},"content":"                return validEventHandler(input);","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"BenjaminLHR"},"content":"            default:","lastModifiedDate":"2021-08-18"},{"lineNumber":51,"author":{"gitId":"BenjaminLHR"},"content":"                // This is for any other erroneous input we did not catch from checkValidity","lastModifiedDate":"2021-08-19"},{"lineNumber":52,"author":{"gitId":"BenjaminLHR"},"content":"                DukeException e \u003d new DukeException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2021-08-19"},{"lineNumber":53,"author":{"gitId":"BenjaminLHR"},"content":"                return new ExceptionalCommand(e);","lastModifiedDate":"2021-08-19"},{"lineNumber":54,"author":{"gitId":"BenjaminLHR"},"content":"            }","lastModifiedDate":"2021-08-18"},{"lineNumber":55,"author":{"gitId":"BenjaminLHR"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-19"},{"lineNumber":56,"author":{"gitId":"BenjaminLHR"},"content":"            return new ExceptionalCommand(e);","lastModifiedDate":"2021-08-19"},{"lineNumber":57,"author":{"gitId":"BenjaminLHR"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":58,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":59,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":60,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":61,"author":{"gitId":"BenjaminLHR"},"content":"    private static boolean checkValiditiy(String input, TaskList taskList) throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"BenjaminLHR"},"content":"        String[] splittedInput \u003d input.split(\" \");","lastModifiedDate":"2021-08-19"},{"lineNumber":63,"author":{"gitId":"BenjaminLHR"},"content":"        if (input.length() \u003d\u003d 0) {","lastModifiedDate":"2021-08-19"},{"lineNumber":64,"author":{"gitId":"BenjaminLHR"},"content":"            throw new DukeException(\"☹ OOPS!!! The input cannot be empty.\");","lastModifiedDate":"2021-08-19"},{"lineNumber":65,"author":{"gitId":"BenjaminLHR"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":66,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":67,"author":{"gitId":"BenjaminLHR"},"content":"        switch (splittedInput[0]) {","lastModifiedDate":"2021-08-19"},{"lineNumber":68,"author":{"gitId":"BenjaminLHR"},"content":"        case \"todo\":","lastModifiedDate":"2021-08-19"},{"lineNumber":69,"author":{"gitId":"BenjaminLHR"},"content":"            checkValidityTodo(input);","lastModifiedDate":"2021-08-19"},{"lineNumber":70,"author":{"gitId":"BenjaminLHR"},"content":"            break;","lastModifiedDate":"2021-08-19"},{"lineNumber":71,"author":{"gitId":"BenjaminLHR"},"content":"        case \"deadline\":","lastModifiedDate":"2021-08-19"},{"lineNumber":72,"author":{"gitId":"BenjaminLHR"},"content":"            checkValidityDeadline(input);","lastModifiedDate":"2021-08-19"},{"lineNumber":73,"author":{"gitId":"BenjaminLHR"},"content":"            break;","lastModifiedDate":"2021-08-19"},{"lineNumber":74,"author":{"gitId":"BenjaminLHR"},"content":"        case \"event\":","lastModifiedDate":"2021-08-19"},{"lineNumber":75,"author":{"gitId":"BenjaminLHR"},"content":"            checkValidityEvent(input);","lastModifiedDate":"2021-08-19"},{"lineNumber":76,"author":{"gitId":"BenjaminLHR"},"content":"            break;","lastModifiedDate":"2021-08-19"},{"lineNumber":77,"author":{"gitId":"BenjaminLHR"},"content":"        case \"done\":","lastModifiedDate":"2021-08-19"},{"lineNumber":78,"author":{"gitId":"BenjaminLHR"},"content":"            checkValidityDone(input, taskList);","lastModifiedDate":"2021-08-19"},{"lineNumber":79,"author":{"gitId":"BenjaminLHR"},"content":"            break;","lastModifiedDate":"2021-08-19"},{"lineNumber":80,"author":{"gitId":"BenjaminLHR"},"content":"        case \"delete\":","lastModifiedDate":"2021-08-19"},{"lineNumber":81,"author":{"gitId":"BenjaminLHR"},"content":"            checkValidityDelete(input, taskList);","lastModifiedDate":"2021-08-19"},{"lineNumber":82,"author":{"gitId":"BenjaminLHR"},"content":"            break;","lastModifiedDate":"2021-08-19"},{"lineNumber":83,"author":{"gitId":"BenjaminLHR"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":84,"author":{"gitId":"BenjaminLHR"},"content":"        return true;","lastModifiedDate":"2021-08-19"},{"lineNumber":85,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":86,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":87,"author":{"gitId":"BenjaminLHR"},"content":"    private static void checkValidityTodo(String input) throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":88,"author":{"gitId":"BenjaminLHR"},"content":"        String[] splittedInput \u003d input.split(\" \");","lastModifiedDate":"2021-08-19"},{"lineNumber":89,"author":{"gitId":"BenjaminLHR"},"content":"        if (splittedInput.length \u003d\u003d 1) {","lastModifiedDate":"2021-08-19"},{"lineNumber":90,"author":{"gitId":"BenjaminLHR"},"content":"            throw new DukeException(\"☹ OOPS!!! The description of a todo cannot be empty.\");","lastModifiedDate":"2021-08-19"},{"lineNumber":91,"author":{"gitId":"BenjaminLHR"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":92,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":93,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":94,"author":{"gitId":"BenjaminLHR"},"content":"    private static void checkValidityDeadline(String input) throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":95,"author":{"gitId":"BenjaminLHR"},"content":"        String[] splittedInput \u003d input.split(\" \");","lastModifiedDate":"2021-08-19"},{"lineNumber":96,"author":{"gitId":"BenjaminLHR"},"content":"        if (splittedInput.length \u003d\u003d 1) {","lastModifiedDate":"2021-08-19"},{"lineNumber":97,"author":{"gitId":"BenjaminLHR"},"content":"            throw new DukeException(\"☹ OOPS!!! The description of a deadline cannot be empty.\");","lastModifiedDate":"2021-08-19"},{"lineNumber":98,"author":{"gitId":"BenjaminLHR"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":99,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":100,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":101,"author":{"gitId":"BenjaminLHR"},"content":"    private static void checkValidityEvent(String input) throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":102,"author":{"gitId":"BenjaminLHR"},"content":"        String[] splittedInput \u003d input.split(\" \");","lastModifiedDate":"2021-08-19"},{"lineNumber":103,"author":{"gitId":"BenjaminLHR"},"content":"        if (splittedInput.length \u003d\u003d 1) {","lastModifiedDate":"2021-08-19"},{"lineNumber":104,"author":{"gitId":"BenjaminLHR"},"content":"            throw new DukeException(\"☹ OOPS!!! The description of an event cannot be empty.\");","lastModifiedDate":"2021-08-19"},{"lineNumber":105,"author":{"gitId":"BenjaminLHR"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":106,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":107,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":108,"author":{"gitId":"BenjaminLHR"},"content":"    private static void checkValidityDone(String input, TaskList taskList) throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":109,"author":{"gitId":"BenjaminLHR"},"content":"        String[] splittedInput \u003d input.split(\" \");","lastModifiedDate":"2021-08-19"},{"lineNumber":110,"author":{"gitId":"BenjaminLHR"},"content":"        if (splittedInput.length \u003d\u003d 1) {","lastModifiedDate":"2021-08-19"},{"lineNumber":111,"author":{"gitId":"BenjaminLHR"},"content":"            throw new DukeException(\"☹ OOPS!!! You must specify an index\");","lastModifiedDate":"2021-08-19"},{"lineNumber":112,"author":{"gitId":"BenjaminLHR"},"content":"        } else {","lastModifiedDate":"2021-08-19"},{"lineNumber":113,"author":{"gitId":"BenjaminLHR"},"content":"            if (HelpfulFunctions.isInteger(splittedInput[1])) {","lastModifiedDate":"2021-08-19"},{"lineNumber":114,"author":{"gitId":"BenjaminLHR"},"content":"                int index \u003d Integer.parseInt(splittedInput[1]);","lastModifiedDate":"2021-08-19"},{"lineNumber":115,"author":{"gitId":"BenjaminLHR"},"content":"                if (index \u003c 1 || index \u003e taskList.getSize()) {","lastModifiedDate":"2021-08-19"},{"lineNumber":116,"author":{"gitId":"BenjaminLHR"},"content":"                    throw new DukeException(\"☹ OOPS!!! Your index is out of range\");","lastModifiedDate":"2021-08-19"},{"lineNumber":117,"author":{"gitId":"BenjaminLHR"},"content":"                }","lastModifiedDate":"2021-08-19"},{"lineNumber":118,"author":{"gitId":"BenjaminLHR"},"content":"            } else {","lastModifiedDate":"2021-08-19"},{"lineNumber":119,"author":{"gitId":"BenjaminLHR"},"content":"                throw new DukeException(\"☹ OOPS!!! Your second argument must be an integer\");","lastModifiedDate":"2021-08-19"},{"lineNumber":120,"author":{"gitId":"BenjaminLHR"},"content":"            }","lastModifiedDate":"2021-08-19"},{"lineNumber":121,"author":{"gitId":"BenjaminLHR"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":122,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":123,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":124,"author":{"gitId":"BenjaminLHR"},"content":"    private static void checkValidityDelete(String input, TaskList taskList) throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":125,"author":{"gitId":"BenjaminLHR"},"content":"        String[] splittedInput \u003d input.split(\" \");","lastModifiedDate":"2021-08-19"},{"lineNumber":126,"author":{"gitId":"BenjaminLHR"},"content":"        if (splittedInput.length \u003d\u003d 1) {","lastModifiedDate":"2021-08-19"},{"lineNumber":127,"author":{"gitId":"BenjaminLHR"},"content":"            throw new DukeException(\"☹ OOPS!!! You must specify an index\");","lastModifiedDate":"2021-08-19"},{"lineNumber":128,"author":{"gitId":"BenjaminLHR"},"content":"        } else {","lastModifiedDate":"2021-08-19"},{"lineNumber":129,"author":{"gitId":"BenjaminLHR"},"content":"            if (HelpfulFunctions.isInteger(splittedInput[1])) {","lastModifiedDate":"2021-08-19"},{"lineNumber":130,"author":{"gitId":"BenjaminLHR"},"content":"                int index \u003d Integer.parseInt(splittedInput[1]);","lastModifiedDate":"2021-08-19"},{"lineNumber":131,"author":{"gitId":"BenjaminLHR"},"content":"                if (index \u003c 1 || index \u003e taskList.getSize()) {","lastModifiedDate":"2021-08-19"},{"lineNumber":132,"author":{"gitId":"BenjaminLHR"},"content":"                    throw new DukeException(\"☹ OOPS!!! Your index is out of range\");","lastModifiedDate":"2021-08-19"},{"lineNumber":133,"author":{"gitId":"BenjaminLHR"},"content":"                }","lastModifiedDate":"2021-08-19"},{"lineNumber":134,"author":{"gitId":"BenjaminLHR"},"content":"            } else {","lastModifiedDate":"2021-08-19"},{"lineNumber":135,"author":{"gitId":"BenjaminLHR"},"content":"                throw new DukeException(\"☹ OOPS!!! Your second argument must be an integer\");","lastModifiedDate":"2021-08-19"},{"lineNumber":136,"author":{"gitId":"BenjaminLHR"},"content":"            }","lastModifiedDate":"2021-08-19"},{"lineNumber":137,"author":{"gitId":"BenjaminLHR"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":138,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":139,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":140,"author":{"gitId":"BenjaminLHR"},"content":"    private static Command validTodoHandler(String input) {","lastModifiedDate":"2021-08-25"},{"lineNumber":141,"author":{"gitId":"BenjaminLHR"},"content":"        String[] splittedInput \u003d input.split(\" \", 2);","lastModifiedDate":"2021-08-18"},{"lineNumber":142,"author":{"gitId":"BenjaminLHR"},"content":"        return new TodoCommand(splittedInput[1]);","lastModifiedDate":"2021-08-18"},{"lineNumber":143,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":144,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":145,"author":{"gitId":"BenjaminLHR"},"content":"    private static Command validDeadlineHandler(String input) {","lastModifiedDate":"2021-08-25"},{"lineNumber":146,"author":{"gitId":"BenjaminLHR"},"content":"        String details \u003d input.split(\" \", 2)[1];","lastModifiedDate":"2021-08-18"},{"lineNumber":147,"author":{"gitId":"BenjaminLHR"},"content":"        String regexForDetails \u003d \"/by\";","lastModifiedDate":"2021-08-18"},{"lineNumber":148,"author":{"gitId":"BenjaminLHR"},"content":"        String splittedDetails[] \u003d details.split(regexForDetails);","lastModifiedDate":"2021-08-18"},{"lineNumber":149,"author":{"gitId":"BenjaminLHR"},"content":"        return new DeadlineCommand(splittedDetails[0].trim(), splittedDetails[1].trim());","lastModifiedDate":"2021-08-18"},{"lineNumber":150,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":151,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":152,"author":{"gitId":"BenjaminLHR"},"content":"    private static Command validEventHandler(String input) {","lastModifiedDate":"2021-08-25"},{"lineNumber":153,"author":{"gitId":"BenjaminLHR"},"content":"        String details \u003d input.split(\" \", 2)[1];","lastModifiedDate":"2021-08-18"},{"lineNumber":154,"author":{"gitId":"BenjaminLHR"},"content":"        String regexForDetails \u003d \"/at\";","lastModifiedDate":"2021-08-18"},{"lineNumber":155,"author":{"gitId":"BenjaminLHR"},"content":"        String splittedDetails[] \u003d details.split(regexForDetails);","lastModifiedDate":"2021-08-18"},{"lineNumber":156,"author":{"gitId":"BenjaminLHR"},"content":"        return new EventCommand(splittedDetails[0].trim(), splittedDetails[1].trim());","lastModifiedDate":"2021-08-18"},{"lineNumber":157,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":158,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":159,"author":{"gitId":"BenjaminLHR"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"BenjaminLHR":159}},{"path":"src/main/java/duke/core/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenjaminLHR"},"content":"package duke.core;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"BenjaminLHR"},"content":"import duke.gui.Ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"BenjaminLHR"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"BenjaminLHR"},"content":"import duke.task.Event;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"BenjaminLHR"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"BenjaminLHR"},"content":"import duke.task.Todo;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"BenjaminLHR"},"content":"import java.io.File;","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"BenjaminLHR"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"BenjaminLHR"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"BenjaminLHR"},"content":"import java.util.List;","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"BenjaminLHR"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"BenjaminLHR"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"BenjaminLHR"},"content":" * Encapsulates a storage object that handles saving data into a file and loading data from the file.","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"BenjaminLHR"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"BenjaminLHR"},"content":"public class Storage {","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"BenjaminLHR"},"content":"    private File file;","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"BenjaminLHR"},"content":"    private static final int N_SEGMENTS_IN_DEADLINE \u003d 4;","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"BenjaminLHR"},"content":"    private static final int N_SEGMENTS_IN_EVENT \u003d 4;","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"BenjaminLHR"},"content":"    private static final int N_SEGMENTS_IN_TODO \u003d 3;","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"BenjaminLHR"},"content":"     * Constructs a Storage object.","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"BenjaminLHR"},"content":"     * @param filePath The relative filepath of the storage file.","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"BenjaminLHR"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"BenjaminLHR"},"content":"        file \u003d new File(\"data/duke.txt\");","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"BenjaminLHR"},"content":"        // Create folder for the file if it does not exist","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"BenjaminLHR"},"content":"        if (!file.getParentFile().exists()) {","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"BenjaminLHR"},"content":"            file.getParentFile().mkdirs();","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"BenjaminLHR"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"BenjaminLHR"},"content":"     * Saves the tasks within the task list into the storage file.","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"BenjaminLHR"},"content":"     * @param taskList The TaskList object storing all the tasks.","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"BenjaminLHR"},"content":"    public void saveTasksToFile(TaskList taskList) {","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"BenjaminLHR"},"content":"        taskList.saveContents(file);","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"BenjaminLHR"},"content":"     * Loads the tasks from the storage file into an ArrayList.","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"BenjaminLHR"},"content":"     * @return An ArrayList of tasks.","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":51,"author":{"gitId":"BenjaminLHR"},"content":"    public ArrayList\u003cTask\u003e load() {","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"BenjaminLHR"},"content":"        ArrayList\u003cTask\u003e listOfTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"BenjaminLHR"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"BenjaminLHR"},"content":"            // Could throw a FileNotFoundException if the file is missing","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"BenjaminLHR"},"content":"            Scanner sc \u003d new Scanner(file);","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":57,"author":{"gitId":"BenjaminLHR"},"content":"            int lineNumber \u003d 0;","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"BenjaminLHR"},"content":"            while (sc.hasNext()) {","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"BenjaminLHR"},"content":"                lineNumber ++;","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"BenjaminLHR"},"content":"                String nextLine \u003d sc.nextLine();","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"BenjaminLHR"},"content":"                switch(nextLine.charAt(0)) {","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"BenjaminLHR"},"content":"                case \u0027T\u0027:","lastModifiedDate":"2021-08-24"},{"lineNumber":63,"author":{"gitId":"BenjaminLHR"},"content":"                    addTodoToList(nextLine, listOfTasks, lineNumber);","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"BenjaminLHR"},"content":"                    break;","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"BenjaminLHR"},"content":"                case \u0027D\u0027:","lastModifiedDate":"2021-08-24"},{"lineNumber":66,"author":{"gitId":"BenjaminLHR"},"content":"                    addDeadlineToList(nextLine, listOfTasks, lineNumber);","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"BenjaminLHR"},"content":"                    break;","lastModifiedDate":"2021-08-24"},{"lineNumber":68,"author":{"gitId":"BenjaminLHR"},"content":"                case \u0027E\u0027:","lastModifiedDate":"2021-08-24"},{"lineNumber":69,"author":{"gitId":"BenjaminLHR"},"content":"                    addEventToList(nextLine, listOfTasks, lineNumber);","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"BenjaminLHR"},"content":"                    break;","lastModifiedDate":"2021-08-24"},{"lineNumber":71,"author":{"gitId":"BenjaminLHR"},"content":"                default:","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"BenjaminLHR"},"content":"                    System.out.println(","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"BenjaminLHR"},"content":"                            String.format(\"Error in Line %s of storage: Line should begin with T, D or E\", lineNumber));","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"BenjaminLHR"},"content":"                }","lastModifiedDate":"2021-08-24"},{"lineNumber":75,"author":{"gitId":"BenjaminLHR"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":76,"author":{"gitId":"BenjaminLHR"},"content":"            return listOfTasks;","lastModifiedDate":"2021-08-25"},{"lineNumber":77,"author":{"gitId":"BenjaminLHR"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":78,"author":{"gitId":"BenjaminLHR"},"content":"            Ui.showStorageFileNotFoundError(e.getMessage());","lastModifiedDate":"2021-08-25"},{"lineNumber":79,"author":{"gitId":"BenjaminLHR"},"content":"            return listOfTasks;","lastModifiedDate":"2021-08-25"},{"lineNumber":80,"author":{"gitId":"BenjaminLHR"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":81,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":82,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":83,"author":{"gitId":"BenjaminLHR"},"content":"    private void addTodoToList(String line, List\u003cTask\u003e listOfTasks, int lineNumber) {","lastModifiedDate":"2021-08-25"},{"lineNumber":84,"author":{"gitId":"BenjaminLHR"},"content":"        String regex \u003d \"/\";","lastModifiedDate":"2021-08-24"},{"lineNumber":85,"author":{"gitId":"BenjaminLHR"},"content":"        String[] splittedLine \u003d line.split(regex);","lastModifiedDate":"2021-08-24"},{"lineNumber":86,"author":{"gitId":"BenjaminLHR"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":87,"author":{"gitId":"BenjaminLHR"},"content":"            checkStoredTodoValidity(splittedLine, lineNumber);","lastModifiedDate":"2021-08-25"},{"lineNumber":88,"author":{"gitId":"BenjaminLHR"},"content":"            Todo todo \u003d new Todo(splittedLine[2]);","lastModifiedDate":"2021-08-24"},{"lineNumber":89,"author":{"gitId":"BenjaminLHR"},"content":"            if (splittedLine[1].equals(\"1\")) {","lastModifiedDate":"2021-08-24"},{"lineNumber":90,"author":{"gitId":"BenjaminLHR"},"content":"                todo.setCompleted();","lastModifiedDate":"2021-08-24"},{"lineNumber":91,"author":{"gitId":"BenjaminLHR"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":92,"author":{"gitId":"BenjaminLHR"},"content":"            listOfTasks.add(todo);","lastModifiedDate":"2021-08-25"},{"lineNumber":93,"author":{"gitId":"BenjaminLHR"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":94,"author":{"gitId":"BenjaminLHR"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2021-08-25"},{"lineNumber":95,"author":{"gitId":"BenjaminLHR"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":96,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":97,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":98,"author":{"gitId":"BenjaminLHR"},"content":"    private void addEventToList(String line, List\u003cTask\u003e listOfTasks, int lineNumber) {","lastModifiedDate":"2021-08-25"},{"lineNumber":99,"author":{"gitId":"BenjaminLHR"},"content":"        String regex \u003d \"/\";","lastModifiedDate":"2021-08-24"},{"lineNumber":100,"author":{"gitId":"BenjaminLHR"},"content":"        String[] splittedLine \u003d line.split(regex);","lastModifiedDate":"2021-08-24"},{"lineNumber":101,"author":{"gitId":"BenjaminLHR"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":102,"author":{"gitId":"BenjaminLHR"},"content":"            checkStoredEventValidity(splittedLine, lineNumber);","lastModifiedDate":"2021-08-25"},{"lineNumber":103,"author":{"gitId":"BenjaminLHR"},"content":"            Event event \u003d new Event(splittedLine[2], splittedLine[3]);","lastModifiedDate":"2021-08-24"},{"lineNumber":104,"author":{"gitId":"BenjaminLHR"},"content":"            if (splittedLine[1].equals(\"1\")) {","lastModifiedDate":"2021-08-24"},{"lineNumber":105,"author":{"gitId":"BenjaminLHR"},"content":"                event.setCompleted();","lastModifiedDate":"2021-08-24"},{"lineNumber":106,"author":{"gitId":"BenjaminLHR"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":107,"author":{"gitId":"BenjaminLHR"},"content":"            listOfTasks.add(event);","lastModifiedDate":"2021-08-25"},{"lineNumber":108,"author":{"gitId":"BenjaminLHR"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":109,"author":{"gitId":"BenjaminLHR"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2021-08-25"},{"lineNumber":110,"author":{"gitId":"BenjaminLHR"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":111,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":112,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":113,"author":{"gitId":"BenjaminLHR"},"content":"    private void addDeadlineToList(String line, List\u003cTask\u003e listOfTasks, int lineNumber) {","lastModifiedDate":"2021-08-25"},{"lineNumber":114,"author":{"gitId":"BenjaminLHR"},"content":"        String regex \u003d \"/\";","lastModifiedDate":"2021-08-24"},{"lineNumber":115,"author":{"gitId":"BenjaminLHR"},"content":"        String[] splittedLine \u003d line.split(regex);","lastModifiedDate":"2021-08-24"},{"lineNumber":116,"author":{"gitId":"BenjaminLHR"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":117,"author":{"gitId":"BenjaminLHR"},"content":"            checkStoredDeadlineValidity(splittedLine, lineNumber);","lastModifiedDate":"2021-08-25"},{"lineNumber":118,"author":{"gitId":"BenjaminLHR"},"content":"            Deadline deadline \u003d new Deadline(splittedLine[2], splittedLine[3]);","lastModifiedDate":"2021-08-24"},{"lineNumber":119,"author":{"gitId":"BenjaminLHR"},"content":"            if (splittedLine[1].equals(\"1\")) {","lastModifiedDate":"2021-08-24"},{"lineNumber":120,"author":{"gitId":"BenjaminLHR"},"content":"                deadline.setCompleted();","lastModifiedDate":"2021-08-24"},{"lineNumber":121,"author":{"gitId":"BenjaminLHR"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":122,"author":{"gitId":"BenjaminLHR"},"content":"            listOfTasks.add(deadline);","lastModifiedDate":"2021-08-25"},{"lineNumber":123,"author":{"gitId":"BenjaminLHR"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":124,"author":{"gitId":"BenjaminLHR"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2021-08-25"},{"lineNumber":125,"author":{"gitId":"BenjaminLHR"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":126,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":127,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":128,"author":{"gitId":"BenjaminLHR"},"content":"    private boolean checkStoredTodoValidity(String[] splittedLine, int lineNumber) throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":129,"author":{"gitId":"BenjaminLHR"},"content":"        String errorHeading \u003d String.format(\"Error in Line %s of storage file: \", lineNumber);","lastModifiedDate":"2021-08-25"},{"lineNumber":130,"author":{"gitId":"BenjaminLHR"},"content":"        if (splittedLine.length !\u003d 3) {","lastModifiedDate":"2021-08-25"},{"lineNumber":131,"author":{"gitId":"BenjaminLHR"},"content":"            throw new DukeException(errorHeading","lastModifiedDate":"2021-08-25"},{"lineNumber":132,"author":{"gitId":"BenjaminLHR"},"content":"                    + String.format(\"There should be %s segments in storage data\", N_SEGMENTS_IN_TODO));","lastModifiedDate":"2021-08-25"},{"lineNumber":133,"author":{"gitId":"BenjaminLHR"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":134,"author":{"gitId":"BenjaminLHR"},"content":"        if (!(splittedLine[1].equals(\"0\") || splittedLine[1].equals(\"1\"))) {","lastModifiedDate":"2021-08-25"},{"lineNumber":135,"author":{"gitId":"BenjaminLHR"},"content":"            throw new DukeException(errorHeading + \"Completion status should be 0 or 1\");","lastModifiedDate":"2021-08-25"},{"lineNumber":136,"author":{"gitId":"BenjaminLHR"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":137,"author":{"gitId":"BenjaminLHR"},"content":"        return true;","lastModifiedDate":"2021-08-25"},{"lineNumber":138,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":139,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":140,"author":{"gitId":"BenjaminLHR"},"content":"    private boolean checkStoredEventValidity(String[] splittedLine, int lineNumber) throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":141,"author":{"gitId":"BenjaminLHR"},"content":"        String errorHeading \u003d String.format(\"Error in Line %s of storage file: \", lineNumber);","lastModifiedDate":"2021-08-25"},{"lineNumber":142,"author":{"gitId":"BenjaminLHR"},"content":"        if (splittedLine.length !\u003d N_SEGMENTS_IN_EVENT) {","lastModifiedDate":"2021-08-25"},{"lineNumber":143,"author":{"gitId":"BenjaminLHR"},"content":"            throw new DukeException(errorHeading","lastModifiedDate":"2021-08-25"},{"lineNumber":144,"author":{"gitId":"BenjaminLHR"},"content":"                    + String.format(\"There should be %s segments in storage data\", N_SEGMENTS_IN_EVENT));","lastModifiedDate":"2021-08-25"},{"lineNumber":145,"author":{"gitId":"BenjaminLHR"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":146,"author":{"gitId":"BenjaminLHR"},"content":"        if (!(splittedLine[1].equals(\"0\") || splittedLine[1].equals(\"1\"))) {","lastModifiedDate":"2021-08-25"},{"lineNumber":147,"author":{"gitId":"BenjaminLHR"},"content":"            throw new DukeException(errorHeading + \"Completion status should be 0 or 1\");","lastModifiedDate":"2021-08-25"},{"lineNumber":148,"author":{"gitId":"BenjaminLHR"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":149,"author":{"gitId":"BenjaminLHR"},"content":"        return true;","lastModifiedDate":"2021-08-25"},{"lineNumber":150,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":151,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":152,"author":{"gitId":"BenjaminLHR"},"content":"    private boolean checkStoredDeadlineValidity(String[] splittedLine, int lineNumber) throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":153,"author":{"gitId":"BenjaminLHR"},"content":"        String errorHeading \u003d String.format(\"Error in Line %s of storage file: \", lineNumber);","lastModifiedDate":"2021-08-25"},{"lineNumber":154,"author":{"gitId":"BenjaminLHR"},"content":"        if (splittedLine.length !\u003d N_SEGMENTS_IN_DEADLINE) {","lastModifiedDate":"2021-08-25"},{"lineNumber":155,"author":{"gitId":"BenjaminLHR"},"content":"            throw new DukeException(errorHeading","lastModifiedDate":"2021-08-25"},{"lineNumber":156,"author":{"gitId":"BenjaminLHR"},"content":"                    + String.format(\"There should be %s segments in storage data\", N_SEGMENTS_IN_DEADLINE));","lastModifiedDate":"2021-08-25"},{"lineNumber":157,"author":{"gitId":"BenjaminLHR"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":158,"author":{"gitId":"BenjaminLHR"},"content":"        if (!(splittedLine[1].equals(\"0\") || splittedLine[1].equals(\"1\"))) {","lastModifiedDate":"2021-08-25"},{"lineNumber":159,"author":{"gitId":"BenjaminLHR"},"content":"            throw new DukeException(errorHeading + \"Completion status should be 0 or 1\");","lastModifiedDate":"2021-08-25"},{"lineNumber":160,"author":{"gitId":"BenjaminLHR"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":161,"author":{"gitId":"BenjaminLHR"},"content":"        return true;","lastModifiedDate":"2021-08-25"},{"lineNumber":162,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":163,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":164,"author":{"gitId":"BenjaminLHR"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"BenjaminLHR":164}},{"path":"src/main/java/duke/core/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenjaminLHR"},"content":"package duke.core;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"BenjaminLHR"},"content":"import duke.gui.Ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"BenjaminLHR"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"BenjaminLHR"},"content":"import java.io.File;","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"BenjaminLHR"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"BenjaminLHR"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"BenjaminLHR"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"BenjaminLHR"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"BenjaminLHR"},"content":" * Encapsulates a task list.","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"BenjaminLHR"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"BenjaminLHR"},"content":"public class TaskList {","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"BenjaminLHR"},"content":"    private ArrayList\u003cTask\u003e listOfTasks;","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"BenjaminLHR"},"content":"     * Constructs a TaskList object. Initializes an empty task list.","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"BenjaminLHR"},"content":"    public TaskList() {","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"BenjaminLHR"},"content":"        listOfTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-19"},{"lineNumber":22,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":24,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"BenjaminLHR"},"content":"     * Constructs a TaskList Object. Initializes the task list with the contents of the list of tasks passed in.","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"BenjaminLHR"},"content":"     * @param listOfTasks An ArrayList of tasks that the TaskList should contain upon instantiation.","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"BenjaminLHR"},"content":"    public TaskList(ArrayList\u003cTask\u003e listOfTasks) {","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"BenjaminLHR"},"content":"        this.listOfTasks \u003d listOfTasks;","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"BenjaminLHR"},"content":"     * Adds a task to the task list.","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"BenjaminLHR"},"content":"     * @param task The task to be added.","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"BenjaminLHR"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2021-08-18"},{"lineNumber":39,"author":{"gitId":"BenjaminLHR"},"content":"        listOfTasks.add(task);","lastModifiedDate":"2021-08-19"},{"lineNumber":40,"author":{"gitId":"BenjaminLHR"},"content":"        String outputLine1 \u003d String.format(\"Got it. I\u0027ve added this task:\\n%s\\n\", task);","lastModifiedDate":"2021-08-19"},{"lineNumber":41,"author":{"gitId":"BenjaminLHR"},"content":"        String outputLine2 \u003d String.format(\"Now you have %s tasks in the list.\", listOfTasks.size());","lastModifiedDate":"2021-08-19"},{"lineNumber":42,"author":{"gitId":"BenjaminLHR"},"content":"        String output \u003d outputLine1 + outputLine2;","lastModifiedDate":"2021-08-19"},{"lineNumber":43,"author":{"gitId":"BenjaminLHR"},"content":"        Ui.formatAndPrint(output);","lastModifiedDate":"2021-08-19"},{"lineNumber":44,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":45,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":46,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"BenjaminLHR"},"content":"     * Lists the tasks within the task list.","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"BenjaminLHR"},"content":"    public void listTasks() {","lastModifiedDate":"2021-08-18"},{"lineNumber":50,"author":{"gitId":"BenjaminLHR"},"content":"        StringBuilder sb \u003d new StringBuilder(\"Here are the tasks in your list:\\n\");","lastModifiedDate":"2021-08-19"},{"lineNumber":51,"author":{"gitId":"BenjaminLHR"},"content":"        int index \u003d 1;","lastModifiedDate":"2021-08-18"},{"lineNumber":52,"author":{"gitId":"BenjaminLHR"},"content":"        for (Task task : listOfTasks) {","lastModifiedDate":"2021-08-19"},{"lineNumber":53,"author":{"gitId":"BenjaminLHR"},"content":"            sb.append(String.format(\"%s. %s\\n\", index, task));","lastModifiedDate":"2021-08-19"},{"lineNumber":54,"author":{"gitId":"BenjaminLHR"},"content":"            index++;","lastModifiedDate":"2021-08-18"},{"lineNumber":55,"author":{"gitId":"BenjaminLHR"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":56,"author":{"gitId":"BenjaminLHR"},"content":"        // Removed the last \\n for nicer output","lastModifiedDate":"2021-08-19"},{"lineNumber":57,"author":{"gitId":"BenjaminLHR"},"content":"        Ui.formatAndPrint(sb.substring(0, sb.length() - 1));","lastModifiedDate":"2021-08-19"},{"lineNumber":58,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":59,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":60,"author":{"gitId":"BenjaminLHR"},"content":"    public void findAndListTasks(String keyword) {","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"BenjaminLHR"},"content":"        StringBuilder sb \u003d new StringBuilder(\"Here are the matching tasks in your list:\\n\");","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"BenjaminLHR"},"content":"        int index \u003d 1;","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"BenjaminLHR"},"content":"        String regex \u003d \" \";","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"BenjaminLHR"},"content":"        for (Task task : listOfTasks) {","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"BenjaminLHR"},"content":"            String[] splittedTaskString \u003d task.toString().split(regex);","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"BenjaminLHR"},"content":"            for (String s : splittedTaskString) {","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"BenjaminLHR"},"content":"                // Check whether final character of string is \u0027)\u0027. If so, remove the \u0027)\u0027.","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"BenjaminLHR"},"content":"                if (s.charAt(s.length() - 1) \u003d\u003d \u0027)\u0027) {","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"BenjaminLHR"},"content":"                    s \u003d s.substring(0, s.length() - 1);","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"BenjaminLHR"},"content":"                }","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"BenjaminLHR"},"content":"                if (s.equals(keyword)) {","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"BenjaminLHR"},"content":"                    sb.append(String.format(\"%s. %s\\n\", index, task));","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"BenjaminLHR"},"content":"                    index++;","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"BenjaminLHR"},"content":"                    break;","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"BenjaminLHR"},"content":"                }","lastModifiedDate":"2021-08-25"},{"lineNumber":76,"author":{"gitId":"BenjaminLHR"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":77,"author":{"gitId":"BenjaminLHR"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":78,"author":{"gitId":"BenjaminLHR"},"content":"        Ui.formatAndPrint(sb.substring(0, sb.length() - 1));","lastModifiedDate":"2021-08-25"},{"lineNumber":79,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":80,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":81,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":82,"author":{"gitId":"BenjaminLHR"},"content":"     * Marks a task within the task list as completed based on the index provided.","lastModifiedDate":"2021-08-26"},{"lineNumber":83,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":84,"author":{"gitId":"BenjaminLHR"},"content":"     * @param index Index of the task to be marked as completed.","lastModifiedDate":"2021-08-26"},{"lineNumber":85,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":86,"author":{"gitId":"BenjaminLHR"},"content":"    public void markAsDone(int index) {","lastModifiedDate":"2021-08-18"},{"lineNumber":87,"author":{"gitId":"BenjaminLHR"},"content":"        Task taskToMark \u003d listOfTasks.get(index - 1);","lastModifiedDate":"2021-08-19"},{"lineNumber":88,"author":{"gitId":"BenjaminLHR"},"content":"        taskToMark.setCompleted();","lastModifiedDate":"2021-08-18"},{"lineNumber":89,"author":{"gitId":"BenjaminLHR"},"content":"        String outputLine1 \u003d \"Nice! I\u0027ve marked this task as done:\\n\";","lastModifiedDate":"2021-08-19"},{"lineNumber":90,"author":{"gitId":"BenjaminLHR"},"content":"        String output \u003d outputLine1 + taskToMark;","lastModifiedDate":"2021-08-19"},{"lineNumber":91,"author":{"gitId":"BenjaminLHR"},"content":"        Ui.formatAndPrint(output);","lastModifiedDate":"2021-08-19"},{"lineNumber":92,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":93,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":94,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":95,"author":{"gitId":"BenjaminLHR"},"content":"     * Deletes a task within the task list based on the index provided.","lastModifiedDate":"2021-08-26"},{"lineNumber":96,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":97,"author":{"gitId":"BenjaminLHR"},"content":"     * @param index Index of the task to be deleted.","lastModifiedDate":"2021-08-26"},{"lineNumber":98,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":99,"author":{"gitId":"BenjaminLHR"},"content":"    public void delete(int index) {","lastModifiedDate":"2021-08-19"},{"lineNumber":100,"author":{"gitId":"BenjaminLHR"},"content":"        Task taskToRemove \u003d listOfTasks.get(index - 1);","lastModifiedDate":"2021-08-19"},{"lineNumber":101,"author":{"gitId":"BenjaminLHR"},"content":"        listOfTasks.remove(index - 1);","lastModifiedDate":"2021-08-19"},{"lineNumber":102,"author":{"gitId":"BenjaminLHR"},"content":"        String outputLine1 \u003d \"Noted. I\u0027ve removed this task: \\n\";","lastModifiedDate":"2021-08-19"},{"lineNumber":103,"author":{"gitId":"BenjaminLHR"},"content":"        String outputLine2 \u003d taskToRemove.toString() + \"\\n\";","lastModifiedDate":"2021-08-19"},{"lineNumber":104,"author":{"gitId":"BenjaminLHR"},"content":"        String outputLine3 \u003d String.format(\"Now you have %s tasks in the list.\", listOfTasks.size());","lastModifiedDate":"2021-08-19"},{"lineNumber":105,"author":{"gitId":"BenjaminLHR"},"content":"        String output \u003d outputLine1 + outputLine2 + outputLine3;","lastModifiedDate":"2021-08-19"},{"lineNumber":106,"author":{"gitId":"BenjaminLHR"},"content":"        Ui.formatAndPrint(output);","lastModifiedDate":"2021-08-19"},{"lineNumber":107,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":108,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":109,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":110,"author":{"gitId":"BenjaminLHR"},"content":"     * Returns the number of elements within the task list.","lastModifiedDate":"2021-08-26"},{"lineNumber":111,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":112,"author":{"gitId":"BenjaminLHR"},"content":"     * @return Number of elements within the task list.","lastModifiedDate":"2021-08-26"},{"lineNumber":113,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":114,"author":{"gitId":"BenjaminLHR"},"content":"    public int getSize() {","lastModifiedDate":"2021-08-19"},{"lineNumber":115,"author":{"gitId":"BenjaminLHR"},"content":"        return listOfTasks.size();","lastModifiedDate":"2021-08-19"},{"lineNumber":116,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":117,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":118,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":119,"author":{"gitId":"BenjaminLHR"},"content":"     * Saves the tasks within the task list in the storage file.","lastModifiedDate":"2021-08-26"},{"lineNumber":120,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":121,"author":{"gitId":"BenjaminLHR"},"content":"     * @param file A File object encapsulating the storage file.","lastModifiedDate":"2021-08-26"},{"lineNumber":122,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":123,"author":{"gitId":"BenjaminLHR"},"content":"    public void saveContents(File file) {","lastModifiedDate":"2021-08-24"},{"lineNumber":124,"author":{"gitId":"BenjaminLHR"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":125,"author":{"gitId":"BenjaminLHR"},"content":"            FileWriter fw \u003d new FileWriter(file.getPath());","lastModifiedDate":"2021-08-24"},{"lineNumber":126,"author":{"gitId":"BenjaminLHR"},"content":"            for (Task task : listOfTasks) {","lastModifiedDate":"2021-08-24"},{"lineNumber":127,"author":{"gitId":"BenjaminLHR"},"content":"                fw.write(task.toStorageFormat() +\"\\n\");","lastModifiedDate":"2021-08-24"},{"lineNumber":128,"author":{"gitId":"BenjaminLHR"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":129,"author":{"gitId":"BenjaminLHR"},"content":"            fw.close();","lastModifiedDate":"2021-08-24"},{"lineNumber":130,"author":{"gitId":"BenjaminLHR"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":131,"author":{"gitId":"BenjaminLHR"},"content":"            System.out.println(\"Something went wrong: \" + e.getMessage());","lastModifiedDate":"2021-08-24"},{"lineNumber":132,"author":{"gitId":"BenjaminLHR"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":133,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":134,"author":{"gitId":"BenjaminLHR"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"BenjaminLHR":134}},{"path":"src/main/java/duke/gui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenjaminLHR"},"content":"package duke.gui;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"BenjaminLHR"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"BenjaminLHR"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"BenjaminLHR"},"content":" * Ui is a class that provides useful methods for dealing with interactions with a user.","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"BenjaminLHR"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"BenjaminLHR"},"content":"public class Ui {","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"BenjaminLHR"},"content":"    private static Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"BenjaminLHR"},"content":"     * Greets the user.","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"BenjaminLHR"},"content":"    public static void greet() {","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"BenjaminLHR"},"content":"        System.out.println(\"Hello! I\u0027m Duke\\n\" + \"What can I do for you?\");","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"BenjaminLHR"},"content":"        Ui.displayLine();","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"BenjaminLHR"},"content":"     * Bids farewell to the user.","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"BenjaminLHR"},"content":"    public static void sayBye() {","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"BenjaminLHR"},"content":"        displayLine();","lastModifiedDate":"2021-08-18"},{"lineNumber":24,"author":{"gitId":"BenjaminLHR"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2021-08-18"},{"lineNumber":25,"author":{"gitId":"BenjaminLHR"},"content":"        displayLine();","lastModifiedDate":"2021-08-18"},{"lineNumber":26,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":27,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":28,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"BenjaminLHR"},"content":"     * Formats the output to be displayed in a pleasant manner and displays it to the user.","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"BenjaminLHR"},"content":"     * @param output The output to be displayed to the user.","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"BenjaminLHR"},"content":"    public static void formatAndPrint(String output) {","lastModifiedDate":"2021-08-19"},{"lineNumber":34,"author":{"gitId":"BenjaminLHR"},"content":"        displayLine();","lastModifiedDate":"2021-08-19"},{"lineNumber":35,"author":{"gitId":"BenjaminLHR"},"content":"        System.out.println(output);","lastModifiedDate":"2021-08-19"},{"lineNumber":36,"author":{"gitId":"BenjaminLHR"},"content":"        displayLine();","lastModifiedDate":"2021-08-19"},{"lineNumber":37,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":38,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":39,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"BenjaminLHR"},"content":"     * Displays a horizontal line to the user.","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"BenjaminLHR"},"content":"    public static void displayLine() {","lastModifiedDate":"2021-08-18"},{"lineNumber":43,"author":{"gitId":"BenjaminLHR"},"content":"        System.out.println(\"____________________________________________________________\");","lastModifiedDate":"2021-08-18"},{"lineNumber":44,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":45,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":46,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"BenjaminLHR"},"content":"     * Reads input from the user.","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"BenjaminLHR"},"content":"     * @return The input from the user in a String format.","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":51,"author":{"gitId":"BenjaminLHR"},"content":"    public static String readInput() {","lastModifiedDate":"2021-08-18"},{"lineNumber":52,"author":{"gitId":"BenjaminLHR"},"content":"        return sc.nextLine();","lastModifiedDate":"2021-08-18"},{"lineNumber":53,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":54,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":55,"author":{"gitId":"BenjaminLHR"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":56,"author":{"gitId":"BenjaminLHR"},"content":"     * Displays a message to inform user that the storage file was not found.","lastModifiedDate":"2021-08-26"},{"lineNumber":57,"author":{"gitId":"BenjaminLHR"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"BenjaminLHR"},"content":"     * @param message Specific details of the error.","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"BenjaminLHR"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"BenjaminLHR"},"content":"    public static void showStorageFileNotFoundError(String message) {","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"BenjaminLHR"},"content":"        System.out.println(\"Storage file not found: \" + message);","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"BenjaminLHR"},"content":"        System.out.println(\"Task List will be initialized to empty state.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"BenjaminLHR"},"content":"        System.out.println(\"Duke.txt will be created for you once you add tasks to the list.\\n\");","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"BenjaminLHR"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"BenjaminLHR":66}},{"path":"src/main/java/duke/helpful_functions/HelpfulFunctions.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenjaminLHR"},"content":"package duke.helpful_functions;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"BenjaminLHR"},"content":"public class HelpfulFunctions {","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"BenjaminLHR"},"content":"    public static boolean isInteger(String s) {","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"BenjaminLHR"},"content":"        try {","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"BenjaminLHR"},"content":"            Integer.parseInt(s);","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"BenjaminLHR"},"content":"            return true;","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"BenjaminLHR"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"BenjaminLHR"},"content":"            return false;","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"BenjaminLHR"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"BenjaminLHR"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"BenjaminLHR":12}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenjaminLHR"},"content":"package duke.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"BenjaminLHR"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"BenjaminLHR"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"BenjaminLHR"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"BenjaminLHR"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"BenjaminLHR"},"content":"    private String taskName;","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"BenjaminLHR"},"content":"    private String time;","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"BenjaminLHR"},"content":"    private String taskSymbol \u003d \"D\";","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"BenjaminLHR"},"content":"    public Deadline(String taskName, String time) {","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"BenjaminLHR"},"content":"        this.taskName \u003d taskName;","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"BenjaminLHR"},"content":"        this.time \u003d time;","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"BenjaminLHR"},"content":"    public String timeToString() {","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"BenjaminLHR"},"content":"        String regex \u003d \" \";","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"BenjaminLHR"},"content":"        String[] splittedTime \u003d time.split(regex);","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"BenjaminLHR"},"content":"        // Loop through splittedTime and replace dates with the appropriate format","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"BenjaminLHR"},"content":"        for (int i \u003d 0; i \u003c splittedTime.length; i++) {","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"BenjaminLHR"},"content":"            try {","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"BenjaminLHR"},"content":"                LocalDate date \u003d LocalDate.parse(splittedTime[i]);","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"BenjaminLHR"},"content":"                splittedTime[i] \u003d date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"BenjaminLHR"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"BenjaminLHR"},"content":"                // splittedTime[i] is not in the date format, so do nothing","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"BenjaminLHR"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"BenjaminLHR"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"BenjaminLHR"},"content":"        return String.join(\" \", splittedTime);","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":31,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":32,"author":{"gitId":"BenjaminLHR"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":33,"author":{"gitId":"BenjaminLHR"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":34,"author":{"gitId":"BenjaminLHR"},"content":"        String statusIcon \u003d getStatusIcon();","lastModifiedDate":"2021-08-18"},{"lineNumber":35,"author":{"gitId":"BenjaminLHR"},"content":"        return String.format(\"[%s][%s] %s (by: %s)\", taskSymbol, statusIcon, taskName, timeToString());","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":37,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":38,"author":{"gitId":"BenjaminLHR"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"BenjaminLHR"},"content":"    public String toStorageFormat() {","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"BenjaminLHR"},"content":"        return String.format(\"%s/%s/%s/%s\", taskSymbol, isCompleted(), taskName, time);","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"BenjaminLHR"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"BenjaminLHR":43}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenjaminLHR"},"content":"package duke.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"BenjaminLHR"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"BenjaminLHR"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"BenjaminLHR"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"BenjaminLHR"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"BenjaminLHR"},"content":"    private String taskName;","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"BenjaminLHR"},"content":"    private String time;","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"BenjaminLHR"},"content":"    private String taskSymbol \u003d \"E\";","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"BenjaminLHR"},"content":"    public Event(String taskName, String time) {","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"BenjaminLHR"},"content":"        this.taskName \u003d taskName;","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"BenjaminLHR"},"content":"        this.time \u003d time;","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"BenjaminLHR"},"content":"    public String timeToString() {","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"BenjaminLHR"},"content":"        String regex \u003d \" \";","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"BenjaminLHR"},"content":"        String[] splittedTime \u003d time.split(regex);","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"BenjaminLHR"},"content":"        // Loop through splittedTime and replace dates with the appropriate format","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"BenjaminLHR"},"content":"        for (int i \u003d 0; i \u003c splittedTime.length; i++) {","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"BenjaminLHR"},"content":"            try {","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"BenjaminLHR"},"content":"                LocalDate date \u003d LocalDate.parse(splittedTime[i]);","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"BenjaminLHR"},"content":"                splittedTime[i] \u003d date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"BenjaminLHR"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"BenjaminLHR"},"content":"                // splittedTime[i] is not in the date format, so do nothing","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"BenjaminLHR"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"BenjaminLHR"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"BenjaminLHR"},"content":"        return String.join(\" \", splittedTime);","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":31,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":32,"author":{"gitId":"BenjaminLHR"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":33,"author":{"gitId":"BenjaminLHR"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":34,"author":{"gitId":"BenjaminLHR"},"content":"        String statusIcon \u003d getStatusIcon();","lastModifiedDate":"2021-08-18"},{"lineNumber":35,"author":{"gitId":"BenjaminLHR"},"content":"        return String.format(\"[%s][%s] %s (at: %s)\", taskSymbol, statusIcon, taskName, timeToString());","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":37,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"BenjaminLHR"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"BenjaminLHR"},"content":"    public String toStorageFormat() {","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"BenjaminLHR"},"content":"        return String.format(\"%s/%s/%s/%s\", taskSymbol, isCompleted(), taskName, time);","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"BenjaminLHR"},"content":"}","lastModifiedDate":"2021-08-18"},{"lineNumber":43,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"BenjaminLHR":44}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenjaminLHR"},"content":"package duke.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"BenjaminLHR"},"content":"public abstract class Task {","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"BenjaminLHR"},"content":"    private boolean completed;","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"BenjaminLHR"},"content":"    public Task() {","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"BenjaminLHR"},"content":"        completed \u003d false;","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"BenjaminLHR"},"content":"    public void setCompleted() {","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"BenjaminLHR"},"content":"        completed \u003d true;","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"BenjaminLHR"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"BenjaminLHR"},"content":"        return completed ? \"X\" : \" \";","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"BenjaminLHR"},"content":"    public int isCompleted() {","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"BenjaminLHR"},"content":"        return completed ? 1 : 0;","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"BenjaminLHR"},"content":"    public abstract String toStorageFormat();","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"BenjaminLHR"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"BenjaminLHR":24}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenjaminLHR"},"content":"package duke.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"BenjaminLHR"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"BenjaminLHR"},"content":"    private String taskName;","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"BenjaminLHR"},"content":"    private String taskSymbol \u003d \"T\";","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"BenjaminLHR"},"content":"    public Todo(String taskName) {","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"BenjaminLHR"},"content":"        this.taskName \u003d taskName;","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"BenjaminLHR"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"BenjaminLHR"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"BenjaminLHR"},"content":"        String statusIcon \u003d getStatusIcon();","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"BenjaminLHR"},"content":"        return String.format(\"[%s][%s] %s\", taskSymbol, statusIcon, taskName);","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"BenjaminLHR"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"BenjaminLHR"},"content":"    public String toStorageFormat() {","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"BenjaminLHR"},"content":"        return String.format(\"%s/%s/%s\", taskSymbol, isCompleted(), taskName);","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"BenjaminLHR"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"BenjaminLHR":21}},{"path":"src/test/java/duke/core/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenjaminLHR"},"content":"package duke.core;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"BenjaminLHR"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"BenjaminLHR"},"content":"import duke.task.Todo;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"BenjaminLHR"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"BenjaminLHR"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"BenjaminLHR"},"content":"public class TaskListTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"BenjaminLHR"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"BenjaminLHR"},"content":"    public void testGetSize() {","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"BenjaminLHR"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"BenjaminLHR"},"content":"        taskList.addTask(new Todo(\"Homework\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"BenjaminLHR"},"content":"        assertEquals(1, taskList.getSize());","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"BenjaminLHR"},"content":"        taskList.addTask(new Deadline(\"Project\", \"2020-11-11 6pm\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"BenjaminLHR"},"content":"        assertEquals(2, taskList.getSize());","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"BenjaminLHR"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"BenjaminLHR":18}},{"path":"src/test/java/duke/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenjaminLHR"},"content":"package duke.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"BenjaminLHR"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"BenjaminLHR"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"BenjaminLHR"},"content":"public class DeadlineTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"BenjaminLHR"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"BenjaminLHR"},"content":"    public void testStringConversion() {","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"BenjaminLHR"},"content":"        Deadline dummyDeadline \u003d new Deadline(\"Dummy deadline\", \"2020-10-10 6pm\");","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"BenjaminLHR"},"content":"        assertEquals(\"[D][ ] Dummy deadline (by: Oct 10 2020 6pm)\", dummyDeadline.toString());","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"BenjaminLHR"},"content":"        dummyDeadline.setCompleted();","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"BenjaminLHR"},"content":"        assertEquals(\"[D][X] Dummy deadline (by: Oct 10 2020 6pm)\", dummyDeadline.toString());","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"BenjaminLHR"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"BenjaminLHR"},"content":"    public void testStorageFormatConversion() {","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"BenjaminLHR"},"content":"        Deadline dummyDeadline \u003d new Deadline(\"Dummy deadline\", \"2020-10-10 6pm\");","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"BenjaminLHR"},"content":"        assertEquals(\"D/0/Dummy deadline/2020-10-10 6pm\", dummyDeadline.toStorageFormat());","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"BenjaminLHR"},"content":"        dummyDeadline.setCompleted();","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"BenjaminLHR"},"content":"        assertEquals(\"D/1/Dummy deadline/2020-10-10 6pm\", dummyDeadline.toStorageFormat());","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"BenjaminLHR"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"BenjaminLHR":23}},{"path":"src/test/java/duke/task/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenjaminLHR"},"content":"package duke.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"BenjaminLHR"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"BenjaminLHR"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"BenjaminLHR"},"content":"public class TodoTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"BenjaminLHR"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"BenjaminLHR"},"content":"    public void testStringConversion() {","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"BenjaminLHR"},"content":"        Todo dummyTodo \u003d new Todo(\"Dummy todo\");","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"BenjaminLHR"},"content":"        assertEquals(\"[T][ ] Dummy todo\", dummyTodo.toString());","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"BenjaminLHR"},"content":"        dummyTodo.setCompleted();","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"BenjaminLHR"},"content":"        assertEquals(\"[T][X] Dummy todo\", dummyTodo.toString());","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"BenjaminLHR"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"BenjaminLHR"},"content":"    public void testStorageFormatConversion() {","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"BenjaminLHR"},"content":"        Todo dummyTodo \u003d new Todo(\"Dummy todo\");","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"BenjaminLHR"},"content":"        assertEquals(\"T/0/Dummy todo\", dummyTodo.toStorageFormat());","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"BenjaminLHR"},"content":"        dummyTodo.setCompleted();","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"BenjaminLHR"},"content":"        assertEquals(\"T/1/Dummy todo\", dummyTodo.toStorageFormat());","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"BenjaminLHR"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"BenjaminLHR"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"BenjaminLHR":23}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"BenjaminLHR"},"content":"todo borrow book","lastModifiedDate":"2021-08-19"},{"lineNumber":2,"author":{"gitId":"BenjaminLHR"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"BenjaminLHR"},"content":"deadline return book /by 01/01/2022","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"BenjaminLHR"},"content":"event project meeting /at Mon 2-4pm","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"BenjaminLHR"},"content":"done 1","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"BenjaminLHR"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"BenjaminLHR"},"content":"bye","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"BenjaminLHR":7}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"BenjaminLHR"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\core\\Duke.java","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"BenjaminLHR"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"BenjaminLHR"},"content":"java -classpath ..\\bin core.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"BenjaminLHR":3,"-":19}}]

[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"chownces"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"chownces"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"chownces"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"chownces"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"chownces"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"chownces"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"chownces"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"chownces"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"chownces"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"chownces"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"chownces"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"chownces"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"chownces"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"chownces"},"content":"    mainClassName \u003d \"duke.Launcher\"","lastModifiedDate":"2021-08-30"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"chownces":15,"-":45}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chownces"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"chownces"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"chownces"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"chownces"},"content":"/**","lastModifiedDate":"2021-08-15"},{"lineNumber":7,"author":{"gitId":"chownces"},"content":" * This class encapsulates a deadline task in the Duke Application.","lastModifiedDate":"2021-08-15"},{"lineNumber":8,"author":{"gitId":"chownces"},"content":" */","lastModifiedDate":"2021-08-15"},{"lineNumber":9,"author":{"gitId":"chownces"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-14"},{"lineNumber":10,"author":{"gitId":"chownces"},"content":"    private final LocalDate by;","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":12,"author":{"gitId":"chownces"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"chownces"},"content":"     * Constructor for a new Deadline task.","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"chownces"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"chownces"},"content":"     * @param description The task description.","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"chownces"},"content":"     * @param by          The duedate of this task.","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"chownces"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"chownces"},"content":"    public Deadline(String description, LocalDate by) {","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"chownces"},"content":"        super(description);","lastModifiedDate":"2021-08-14"},{"lineNumber":20,"author":{"gitId":"chownces"},"content":"        this.by \u003d by;","lastModifiedDate":"2021-08-14"},{"lineNumber":21,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":22,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":23,"author":{"gitId":"chownces"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"chownces"},"content":"     * Constructor for a new Deadline task.","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"chownces"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"chownces"},"content":"     * @param description The task description.","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"chownces"},"content":"     * @param by          The duedate of this task.","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"chownces"},"content":"     * @param isDone      Whether this task is marked as done.","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"chownces"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"chownces"},"content":"    public Deadline(String description, LocalDate by, boolean isDone) {","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"chownces"},"content":"        super(description, isDone);","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"chownces"},"content":"        this.by \u003d by;","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"chownces"},"content":"    @Override","lastModifiedDate":"2021-08-14"},{"lineNumber":36,"author":{"gitId":"chownces"},"content":"    public String toString() {","lastModifiedDate":"2021-08-14"},{"lineNumber":37,"author":{"gitId":"chownces"},"content":"        return String.format(\"[D]%s (by: %s)\", super.toString(),","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"chownces"},"content":"                this.by.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")));","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":40,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"chownces"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"chownces"},"content":"    public String toSaveFormat() {","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"chownces"},"content":"        return String.format(\"D,%s,%s\", super.toSaveFormat(), this.by);","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"chownces"},"content":"}","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"chownces":45}},{"path":"src/main/java/duke/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chownces"},"content":"package duke;","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":3,"author":{"gitId":"chownces"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"chownces"},"content":"import java.util.Collections;","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"chownces"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"chownces"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"chownces"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"chownces"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"chownces"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"chownces"},"content":"import javafx.scene.Node;","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"chownces"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"chownces"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"chownces"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"chownces"},"content":"import javafx.scene.text.Text;","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"chownces"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"chownces"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"chownces"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"chownces"},"content":" * containing text from the speaker.","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"chownces"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"chownces"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"chownces"},"content":"    @FXML","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"chownces"},"content":"    private Text dialog;","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"chownces"},"content":"    @FXML","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"chownces"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"chownces"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"chownces"},"content":"        try {","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"chownces"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"chownces"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2021-08-30"},{"lineNumber":32,"author":{"gitId":"chownces"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"chownces"},"content":"            fxmlLoader.load();","lastModifiedDate":"2021-08-30"},{"lineNumber":34,"author":{"gitId":"chownces"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-30"},{"lineNumber":35,"author":{"gitId":"chownces"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-30"},{"lineNumber":36,"author":{"gitId":"chownces"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":37,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":38,"author":{"gitId":"chownces"},"content":"        dialog.setText(text);","lastModifiedDate":"2021-08-30"},{"lineNumber":39,"author":{"gitId":"chownces"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2021-08-30"},{"lineNumber":40,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":41,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":42,"author":{"gitId":"chownces"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":43,"author":{"gitId":"chownces"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2021-08-30"},{"lineNumber":44,"author":{"gitId":"chownces"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":45,"author":{"gitId":"chownces"},"content":"    private void flip() {","lastModifiedDate":"2021-08-30"},{"lineNumber":46,"author":{"gitId":"chownces"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2021-08-30"},{"lineNumber":47,"author":{"gitId":"chownces"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2021-08-30"},{"lineNumber":48,"author":{"gitId":"chownces"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2021-08-30"},{"lineNumber":49,"author":{"gitId":"chownces"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2021-08-30"},{"lineNumber":50,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":51,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":52,"author":{"gitId":"chownces"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2021-08-30"},{"lineNumber":53,"author":{"gitId":"chownces"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2021-08-30"},{"lineNumber":54,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":55,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":56,"author":{"gitId":"chownces"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2021-08-30"},{"lineNumber":57,"author":{"gitId":"chownces"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2021-08-30"},{"lineNumber":58,"author":{"gitId":"chownces"},"content":"        db.flip();","lastModifiedDate":"2021-08-30"},{"lineNumber":59,"author":{"gitId":"chownces"},"content":"        return db;","lastModifiedDate":"2021-08-30"},{"lineNumber":60,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":61,"author":{"gitId":"chownces"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"chownces":61}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chownces"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"chownces"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":5,"author":{"gitId":"chownces"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"chownces"},"content":" * This class encapsulates the Duke application.","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"chownces"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":9,"author":{"gitId":"chownces"},"content":"    private final Ui ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"chownces"},"content":"    private final Storage storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"chownces"},"content":"    private TaskList tasks;","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":13,"author":{"gitId":"chownces"},"content":"    /**","lastModifiedDate":"2021-08-15"},{"lineNumber":14,"author":{"gitId":"chownces"},"content":"     * Constructor loads the save file from the specified filepath.","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"chownces"},"content":"     *","lastModifiedDate":"2021-08-15"},{"lineNumber":16,"author":{"gitId":"chownces"},"content":"     * @param filepath The path to the save file (if any).","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"chownces"},"content":"     */","lastModifiedDate":"2021-08-15"},{"lineNumber":18,"author":{"gitId":"chownces"},"content":"    public Duke(String filepath) {","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"chownces"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"chownces"},"content":"        this.storage \u003d new Storage(filepath);","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"chownces"},"content":"        try {","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"chownces"},"content":"            tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"chownces"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"chownces"},"content":"            Ui.showLoadingError();","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"chownces"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"chownces"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"chownces"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"chownces"},"content":"     * Returns Duke\u0027s response to the input string.","lastModifiedDate":"2021-08-30"},{"lineNumber":32,"author":{"gitId":"chownces"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"chownces"},"content":"     * @param input The input into Duke.","lastModifiedDate":"2021-08-30"},{"lineNumber":34,"author":{"gitId":"chownces"},"content":"     * @return Duke\u0027s response.","lastModifiedDate":"2021-08-30"},{"lineNumber":35,"author":{"gitId":"chownces"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"chownces"},"content":"    public String handleInput(String input) {","lastModifiedDate":"2021-08-30"},{"lineNumber":37,"author":{"gitId":"chownces"},"content":"        String response;","lastModifiedDate":"2021-08-30"},{"lineNumber":38,"author":{"gitId":"chownces"},"content":"        try {","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"chownces"},"content":"            response \u003d Parser.parse(input).execute(tasks);","lastModifiedDate":"2021-08-30"},{"lineNumber":40,"author":{"gitId":"chownces"},"content":"            storage.save(tasks.toSaveFormat());","lastModifiedDate":"2021-08-30"},{"lineNumber":41,"author":{"gitId":"chownces"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"chownces"},"content":"            response \u003d e.getMessage() + \"\\n\";","lastModifiedDate":"2021-08-30"},{"lineNumber":43,"author":{"gitId":"chownces"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"chownces"},"content":"        return \"Duke\u0027s response:\\n\" + response;","lastModifiedDate":"2021-08-30"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":46,"author":{"gitId":"chownces"},"content":"}","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"chownces":44,"-":2}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chownces"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"chownces"},"content":"/**","lastModifiedDate":"2021-08-15"},{"lineNumber":4,"author":{"gitId":"chownces"},"content":" * This is the parent class for all Duke exceptions.","lastModifiedDate":"2021-08-15"},{"lineNumber":5,"author":{"gitId":"chownces"},"content":" */","lastModifiedDate":"2021-08-15"},{"lineNumber":6,"author":{"gitId":"chownces"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-08-15"},{"lineNumber":7,"author":{"gitId":"chownces"},"content":"    public DukeException(String message) {","lastModifiedDate":"2021-08-15"},{"lineNumber":8,"author":{"gitId":"chownces"},"content":"        super(\"☹ OOPS!!! \" + message);","lastModifiedDate":"2021-08-15"},{"lineNumber":9,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":10,"author":{"gitId":"chownces"},"content":"}","lastModifiedDate":"2021-08-15"},{"lineNumber":11,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":12,"author":{"gitId":"chownces"},"content":"/**","lastModifiedDate":"2021-08-15"},{"lineNumber":13,"author":{"gitId":"chownces"},"content":" * Thrown when the user inputs a todo command without a description.","lastModifiedDate":"2021-08-15"},{"lineNumber":14,"author":{"gitId":"chownces"},"content":" */","lastModifiedDate":"2021-08-15"},{"lineNumber":15,"author":{"gitId":"chownces"},"content":"class EmptyTodoDescriptionException extends DukeException {","lastModifiedDate":"2021-08-15"},{"lineNumber":16,"author":{"gitId":"chownces"},"content":"    public EmptyTodoDescriptionException() {","lastModifiedDate":"2021-08-15"},{"lineNumber":17,"author":{"gitId":"chownces"},"content":"        super(\"The description of a todo cannot be empty.\");","lastModifiedDate":"2021-08-15"},{"lineNumber":18,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":19,"author":{"gitId":"chownces"},"content":"}","lastModifiedDate":"2021-08-15"},{"lineNumber":20,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":21,"author":{"gitId":"chownces"},"content":"/**","lastModifiedDate":"2021-08-15"},{"lineNumber":22,"author":{"gitId":"chownces"},"content":" * Thrown when the user inputs an unknown command.","lastModifiedDate":"2021-08-15"},{"lineNumber":23,"author":{"gitId":"chownces"},"content":" */","lastModifiedDate":"2021-08-15"},{"lineNumber":24,"author":{"gitId":"chownces"},"content":"class UnknownCommandException extends DukeException {","lastModifiedDate":"2021-08-15"},{"lineNumber":25,"author":{"gitId":"chownces"},"content":"    public UnknownCommandException() {","lastModifiedDate":"2021-08-15"},{"lineNumber":26,"author":{"gitId":"chownces"},"content":"        super(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2021-08-15"},{"lineNumber":27,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":28,"author":{"gitId":"chownces"},"content":"}","lastModifiedDate":"2021-08-15"},{"lineNumber":29,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":30,"author":{"gitId":"chownces"},"content":"/**","lastModifiedDate":"2021-08-15"},{"lineNumber":31,"author":{"gitId":"chownces"},"content":" * Thrown when the user inputs a command in an invalid format.","lastModifiedDate":"2021-08-15"},{"lineNumber":32,"author":{"gitId":"chownces"},"content":" */","lastModifiedDate":"2021-08-15"},{"lineNumber":33,"author":{"gitId":"chownces"},"content":"class InvalidFormatException extends DukeException {","lastModifiedDate":"2021-08-15"},{"lineNumber":34,"author":{"gitId":"chownces"},"content":"    public InvalidFormatException(String format) {","lastModifiedDate":"2021-08-15"},{"lineNumber":35,"author":{"gitId":"chownces"},"content":"        super(\"Invalid format: \" + format);","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":37,"author":{"gitId":"chownces"},"content":"}","lastModifiedDate":"2021-08-15"},{"lineNumber":38,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":39,"author":{"gitId":"chownces"},"content":"/**","lastModifiedDate":"2021-08-15"},{"lineNumber":40,"author":{"gitId":"chownces"},"content":" * Thrown when the user tries to access an invalid task index.","lastModifiedDate":"2021-08-15"},{"lineNumber":41,"author":{"gitId":"chownces"},"content":" */","lastModifiedDate":"2021-08-15"},{"lineNumber":42,"author":{"gitId":"chownces"},"content":"class InvalidTaskIndexException extends DukeException {","lastModifiedDate":"2021-08-15"},{"lineNumber":43,"author":{"gitId":"chownces"},"content":"    public InvalidTaskIndexException() {","lastModifiedDate":"2021-08-15"},{"lineNumber":44,"author":{"gitId":"chownces"},"content":"        super(\"Invalid task index!\");","lastModifiedDate":"2021-08-15"},{"lineNumber":45,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":46,"author":{"gitId":"chownces"},"content":"}","lastModifiedDate":"2021-08-15"},{"lineNumber":47,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":48,"author":{"gitId":"chownces"},"content":"/**","lastModifiedDate":"2021-08-22"},{"lineNumber":49,"author":{"gitId":"chownces"},"content":" * Thrown when reading a file with invalid format.","lastModifiedDate":"2021-08-22"},{"lineNumber":50,"author":{"gitId":"chownces"},"content":" */","lastModifiedDate":"2021-08-22"},{"lineNumber":51,"author":{"gitId":"chownces"},"content":"class InvalidFileFormatException extends DukeException {","lastModifiedDate":"2021-08-22"},{"lineNumber":52,"author":{"gitId":"chownces"},"content":"    public InvalidFileFormatException() {","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"chownces"},"content":"        super(\"Invalid file format! Save file ignored!\");","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"chownces"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"chownces":55}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chownces"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"chownces"},"content":"/**","lastModifiedDate":"2021-08-15"},{"lineNumber":4,"author":{"gitId":"chownces"},"content":" * This class encapsulates an event task in the Duke Application.","lastModifiedDate":"2021-08-15"},{"lineNumber":5,"author":{"gitId":"chownces"},"content":" */","lastModifiedDate":"2021-08-15"},{"lineNumber":6,"author":{"gitId":"chownces"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-14"},{"lineNumber":7,"author":{"gitId":"chownces"},"content":"    private final String at;","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":9,"author":{"gitId":"chownces"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"chownces"},"content":"     * Constructor for a new Event task.","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"chownces"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"chownces"},"content":"     * @param description The task description.","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"chownces"},"content":"     * @param at          The time of this task.","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"chownces"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"chownces"},"content":"    public Event(String description, String at) {","lastModifiedDate":"2021-08-14"},{"lineNumber":16,"author":{"gitId":"chownces"},"content":"        super(description);","lastModifiedDate":"2021-08-14"},{"lineNumber":17,"author":{"gitId":"chownces"},"content":"        this.at \u003d at;","lastModifiedDate":"2021-08-14"},{"lineNumber":18,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":19,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":20,"author":{"gitId":"chownces"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"chownces"},"content":"     * Constructor for a new Event task.","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"chownces"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"chownces"},"content":"     * @param description The task description.","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"chownces"},"content":"     * @param at          The time of this task.","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"chownces"},"content":"     * @param isDone      Whether this task is marked as done.","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"chownces"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"chownces"},"content":"    public Event(String description, String at, boolean isDone) {","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"chownces"},"content":"        super(description, isDone);","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"chownces"},"content":"        this.at \u003d at;","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"chownces"},"content":"    @Override","lastModifiedDate":"2021-08-14"},{"lineNumber":33,"author":{"gitId":"chownces"},"content":"    public String toString() {","lastModifiedDate":"2021-08-14"},{"lineNumber":34,"author":{"gitId":"chownces"},"content":"        return String.format(\"[E]%s (at: %s)\", super.toString(), this.at);","lastModifiedDate":"2021-08-14"},{"lineNumber":35,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":36,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"chownces"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"chownces"},"content":"    public String toSaveFormat() {","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"chownces"},"content":"        return String.format(\"E,%s,%s\", super.toSaveFormat(), this.at);","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"chownces"},"content":"}","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"chownces":41}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chownces"},"content":"package duke;","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":3,"author":{"gitId":"chownces"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"chownces"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"chownces"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"chownces"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"chownces"},"content":"public class Launcher {","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"chownces"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"chownces"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"chownces"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"chownces":12}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chownces"},"content":"package duke;","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":3,"author":{"gitId":"chownces"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"chownces"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"chownces"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"chownces"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"chownces"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"chownces"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"chownces"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"chownces"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"chownces"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"chownces"},"content":"public class Main extends Application {","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"chownces"},"content":"    private final Duke duke \u003d new Duke(\"data/duke.txt\");","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"chownces"},"content":"    @Override","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"chownces"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"chownces"},"content":"        try {","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"chownces"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"chownces"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"chownces"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"chownces"},"content":"            stage.setScene(scene);","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"chownces"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"chownces"},"content":"            stage.show();","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"chownces"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"chownces"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"chownces"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"chownces"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"chownces":31}},{"path":"src/main/java/duke/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chownces"},"content":"package duke;","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":3,"author":{"gitId":"chownces"},"content":"import javafx.application.Platform;","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"chownces"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"chownces"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"chownces"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"chownces"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"chownces"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"chownces"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"chownces"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"chownces"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"chownces"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"chownces"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"chownces"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"chownces"},"content":"    @FXML","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"chownces"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"chownces"},"content":"    @FXML","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"chownces"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"chownces"},"content":"    @FXML","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"chownces"},"content":"    private TextField userInput;","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"chownces"},"content":"    @FXML","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"chownces"},"content":"    private Button sendButton;","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"chownces"},"content":"    private Duke duke;","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"chownces"},"content":"    private final Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.jpeg\"));","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"chownces"},"content":"    private final Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.jpeg\"));","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"chownces"},"content":"    @FXML","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"chownces"},"content":"    public void initialize() {","lastModifiedDate":"2021-08-30"},{"lineNumber":32,"author":{"gitId":"chownces"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":34,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":35,"author":{"gitId":"chownces"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2021-08-30"},{"lineNumber":36,"author":{"gitId":"chownces"},"content":"        duke \u003d d;","lastModifiedDate":"2021-08-30"},{"lineNumber":37,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":38,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":39,"author":{"gitId":"chownces"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":40,"author":{"gitId":"chownces"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2021-08-30"},{"lineNumber":41,"author":{"gitId":"chownces"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2021-08-30"},{"lineNumber":42,"author":{"gitId":"chownces"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":43,"author":{"gitId":"chownces"},"content":"    @FXML","lastModifiedDate":"2021-08-30"},{"lineNumber":44,"author":{"gitId":"chownces"},"content":"    private void handleUserInput() {","lastModifiedDate":"2021-08-30"},{"lineNumber":45,"author":{"gitId":"chownces"},"content":"        String input;","lastModifiedDate":"2021-08-30"},{"lineNumber":46,"author":{"gitId":"chownces"},"content":"        if ((input \u003d userInput.getText().trim()).equals(\"bye\")) {","lastModifiedDate":"2021-08-30"},{"lineNumber":47,"author":{"gitId":"chownces"},"content":"            Platform.exit();","lastModifiedDate":"2021-08-30"},{"lineNumber":48,"author":{"gitId":"chownces"},"content":"        } else {","lastModifiedDate":"2021-08-30"},{"lineNumber":49,"author":{"gitId":"chownces"},"content":"            String response \u003d duke.handleInput(input);","lastModifiedDate":"2021-08-30"},{"lineNumber":50,"author":{"gitId":"chownces"},"content":"            dialogContainer.getChildren().addAll(","lastModifiedDate":"2021-08-30"},{"lineNumber":51,"author":{"gitId":"chownces"},"content":"                    DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2021-08-30"},{"lineNumber":52,"author":{"gitId":"chownces"},"content":"                    DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2021-08-30"},{"lineNumber":53,"author":{"gitId":"chownces"},"content":"            );","lastModifiedDate":"2021-08-30"},{"lineNumber":54,"author":{"gitId":"chownces"},"content":"            userInput.clear();","lastModifiedDate":"2021-08-30"},{"lineNumber":55,"author":{"gitId":"chownces"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":56,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":57,"author":{"gitId":"chownces"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"chownces":57}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chownces"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"chownces"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"chownces"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"chownces"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"chownces"},"content":" * This class encapsulates the parsing logic for the application.","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"chownces"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"chownces"},"content":"public class Parser {","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"chownces"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"chownces"},"content":"     * Handles input commands to the Duke application.","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"chownces"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"chownces"},"content":"     * @param command The input command from the user.","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"chownces"},"content":"     * @return TaskExecution lambda which handles the corresponding command.","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"chownces"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"chownces"},"content":"    public static TaskExecution parse(String command) throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"chownces"},"content":"        if (command.equals(\"list\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"chownces"},"content":"            return TaskList::list;","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"chownces"},"content":"        } else if (command.matches(\"^done -?[0-9]+$\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"chownces"},"content":"            return tasks -\u003e tasks.done(command);","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"chownces"},"content":"        } else if (command.matches(\"^todo( .*)?\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"chownces"},"content":"            return tasks -\u003e tasks.todo(command);","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"chownces"},"content":"        } else if (command.matches(\"^deadline( .*)?\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"chownces"},"content":"            return tasks -\u003e tasks.deadline(command);","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"chownces"},"content":"        } else if (command.matches(\"^event( .*)?\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"chownces"},"content":"            return tasks -\u003e tasks.event(command);","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"chownces"},"content":"        } else if (command.matches(\"^delete -?[0-9]+$\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"chownces"},"content":"            return tasks -\u003e tasks.delete(command);","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"chownces"},"content":"        } else if (command.matches(\"^find( .*)?\")) {","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"chownces"},"content":"            return tasks -\u003e tasks.find(command);","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"chownces"},"content":"        } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"chownces"},"content":"            throw new UnknownCommandException();","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"chownces"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"chownces"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"chownces"},"content":"     * Gets the task index from the command, which is the second argument of the command.","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"chownces"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"chownces"},"content":"     * @param command The command inputted by the user.","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"chownces"},"content":"     * @return The task index in the command.","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"chownces"},"content":"     * @throws InvalidFormatException When the second argument in the command is not an integer.","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"chownces"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"chownces"},"content":"    public static int getIndexFromCommand(String command) throws InvalidFormatException {","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"chownces"},"content":"        String[] split \u003d command.split(\" \");","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"chownces"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"chownces"},"content":"            // Task index is the second argument of commands that require an index","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"chownces"},"content":"            return Integer.parseInt(split[1]);","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"chownces"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"chownces"},"content":"            throw new InvalidFormatException(\"Index must be an integer!\");","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"chownces"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"chownces"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"chownces"},"content":"     * Validates the given string against the provided regex. Also validates that the given string","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"chownces"},"content":"     * does not contain commas.","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"chownces"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"chownces"},"content":"     * @param str         The given string.","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"chownces"},"content":"     * @param regex       The given regex.","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"chownces"},"content":"     * @param validFormat The correct input format to be displayed to the user when this regex fails.","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"chownces"},"content":"     * @throws InvalidFormatException When the given string contains commas or when there are no matches.","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"chownces"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"chownces"},"content":"    public static String[] validateRegexAndMatch(String str, String regex, String validFormat)","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"chownces"},"content":"            throws InvalidFormatException {","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"chownces"},"content":"        if (str.contains(\",\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"chownces"},"content":"            throw new InvalidFormatException(\"Please do not include commas!\");","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"chownces"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"chownces"},"content":"        Pattern r \u003d Pattern.compile(regex);","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"chownces"},"content":"        Matcher m \u003d r.matcher(str);","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"chownces"},"content":"        if (m.find()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"chownces"},"content":"            int matchCount \u003d m.groupCount() + 1;","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"chownces"},"content":"            String[] groups \u003d new String[matchCount];","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"chownces"},"content":"            for (int i \u003d 0; i \u003c matchCount; i++) {","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"chownces"},"content":"                groups[i] \u003d m.group(i);","lastModifiedDate":"2021-08-25"},{"lineNumber":76,"author":{"gitId":"chownces"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":77,"author":{"gitId":"chownces"},"content":"            return groups;","lastModifiedDate":"2021-08-25"},{"lineNumber":78,"author":{"gitId":"chownces"},"content":"        } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":79,"author":{"gitId":"chownces"},"content":"            // No matches","lastModifiedDate":"2021-08-25"},{"lineNumber":80,"author":{"gitId":"chownces"},"content":"            throw new InvalidFormatException(validFormat);","lastModifiedDate":"2021-08-25"},{"lineNumber":81,"author":{"gitId":"chownces"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":82,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":83,"author":{"gitId":"chownces"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"chownces":83}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chownces"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"chownces"},"content":"import java.io.File;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"chownces"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"chownces"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"chownces"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"chownces"},"content":"import java.nio.charset.Charset;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"chownces"},"content":"import java.nio.file.Files;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"chownces"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"chownces"},"content":"import java.util.List;","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"chownces"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"chownces"},"content":" * This class encapsulates the logic for saving and writing to the hard disk.","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"chownces"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"chownces"},"content":"public class Storage {","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"chownces"},"content":"    private final String filePath;","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"chownces"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"chownces"},"content":"     * Constructor for a new Storage object.","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"chownces"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"chownces"},"content":"     * @param filePath The filepath to the save file for the application.","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"chownces"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"chownces"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"chownces"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"chownces"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"chownces"},"content":"     * Saves the input string to the instance file path.","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"chownces"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"chownces"},"content":"     * @param text The text to be saved.","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"chownces"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"chownces"},"content":"    public void save(String text) {","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"chownces"},"content":"        File file \u003d new File(this.filePath);","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"chownces"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"chownces"},"content":"            // Create parent directories if they do not exist","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"chownces"},"content":"            file.getParentFile().mkdirs();","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"chownces"},"content":"            FileWriter fw \u003d new FileWriter(this.filePath);","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"chownces"},"content":"            fw.write(text);","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"chownces"},"content":"            fw.close();","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"chownces"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"chownces"},"content":"            Ui.printMessage(String.format(\"An error occurred while saving to \u0027%s\u0027.\", this.filePath));","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"chownces"},"content":"        } catch (SecurityException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"chownces"},"content":"            Ui.printMessage(String.format(\"Unable to write to \u0027%s\u0027. Please check your directory and file permissions.\",","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"chownces"},"content":"                    this.filePath));","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"chownces"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"chownces"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"chownces"},"content":"     * Loads the file specified by the instance file path.","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"chownces"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"chownces"},"content":"     * @return The file contents as a BufferedReader","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"chownces"},"content":"     * @throws FileNotFoundException When file is not found at the specified path","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"chownces"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"chownces"},"content":"    public List\u003cString\u003e load() throws IOException {","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"chownces"},"content":"        return Files.readAllLines(Paths.get(this.filePath), Charset.defaultCharset());","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"chownces"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"chownces":60}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chownces"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"chownces"},"content":"/**","lastModifiedDate":"2021-08-15"},{"lineNumber":4,"author":{"gitId":"chownces"},"content":" * This class encapsulates a task in the Duke application.","lastModifiedDate":"2021-08-15"},{"lineNumber":5,"author":{"gitId":"chownces"},"content":" */","lastModifiedDate":"2021-08-15"},{"lineNumber":6,"author":{"gitId":"chownces"},"content":"public abstract class Task {","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"chownces"},"content":"    private final String description;","lastModifiedDate":"2021-08-14"},{"lineNumber":8,"author":{"gitId":"chownces"},"content":"    private boolean isDone;","lastModifiedDate":"2021-08-14"},{"lineNumber":9,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":10,"author":{"gitId":"chownces"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"chownces"},"content":"     * Constructor for a new Task, to be called by its subclasses.","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"chownces"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"chownces"},"content":"     * @param description The task description.","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"chownces"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"chownces"},"content":"    public Task(String description) {","lastModifiedDate":"2021-08-14"},{"lineNumber":16,"author":{"gitId":"chownces"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-14"},{"lineNumber":17,"author":{"gitId":"chownces"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-14"},{"lineNumber":18,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":19,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":20,"author":{"gitId":"chownces"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"chownces"},"content":"     * Constructor for a new Task, to be called by its subclasses.","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"chownces"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"chownces"},"content":"     * @param description The task description.","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"chownces"},"content":"     * @param isDone      Whether this task is marked as done.","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"chownces"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"chownces"},"content":"    public Task(String description, boolean isDone) {","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"chownces"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"chownces"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"chownces"},"content":"    /**","lastModifiedDate":"2021-08-15"},{"lineNumber":32,"author":{"gitId":"chownces"},"content":"     * Marks the Task instance as done.","lastModifiedDate":"2021-08-15"},{"lineNumber":33,"author":{"gitId":"chownces"},"content":"     */","lastModifiedDate":"2021-08-15"},{"lineNumber":34,"author":{"gitId":"chownces"},"content":"    public void markAsDone() {","lastModifiedDate":"2021-08-14"},{"lineNumber":35,"author":{"gitId":"chownces"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-08-14"},{"lineNumber":36,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":37,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":38,"author":{"gitId":"chownces"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"chownces"},"content":"     * Get the description of the task.","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"chownces"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"chownces"},"content":"     * @return The description of the task.","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"chownces"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"chownces"},"content":"    public String getDescription() {","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"chownces"},"content":"        return this.description;","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"chownces"},"content":"    @Override","lastModifiedDate":"2021-08-14"},{"lineNumber":48,"author":{"gitId":"chownces"},"content":"    public String toString() {","lastModifiedDate":"2021-08-14"},{"lineNumber":49,"author":{"gitId":"chownces"},"content":"        return String.format(\"[%s] %s\", isDone ? \"X\" : \" \", this.description);","lastModifiedDate":"2021-08-14"},{"lineNumber":50,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":51,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":52,"author":{"gitId":"chownces"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"chownces"},"content":"     * Converts the task to the save format.","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"chownces"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"chownces"},"content":"     * @return Task in the save format as a string.","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"chownces"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"chownces"},"content":"    public String toSaveFormat() {","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"chownces"},"content":"        return String.format(\"%s,%s\", isDone ? \"1\" : \"0\", this.description);","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"chownces"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"chownces"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"chownces"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"chownces"},"content":"            return true;","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"chownces"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"chownces"},"content":"        if (!(obj instanceof Task)) {","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"chownces"},"content":"            return false;","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"chownces"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"chownces"},"content":"        // obj is an instance of Task, so it is okay to typecast here","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"chownces"},"content":"        Task other \u003d (Task) obj;","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"chownces"},"content":"        return this.description.equals(other.description) \u0026\u0026 this.isDone \u003d\u003d other.isDone;","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":76,"author":{"gitId":"chownces"},"content":"}","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"chownces":76}},{"path":"src/main/java/duke/TaskExecution.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chownces"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"chownces"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"chownces"},"content":" * This functional interface takes in a TaskList, and performs operations on this TaskList.","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"chownces"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"chownces"},"content":"public interface TaskExecution {","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"chownces"},"content":"    String execute(TaskList task) throws DukeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"chownces"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"chownces":8}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chownces"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"chownces"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"chownces"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"chownces"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"chownces"},"content":"import java.util.List;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"chownces"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"chownces"},"content":" * This class encapsulates a list of Tasks.","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"chownces"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"chownces"},"content":"public class TaskList {","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"chownces"},"content":"    private ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"chownces"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"chownces"},"content":"     * Constructor which takes in no arguments.","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"chownces"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"chownces"},"content":"    public TaskList() {","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"chownces"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"chownces"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"chownces"},"content":"     * Constructor which takes in a List of strings.","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"chownces"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"chownces"},"content":"     * @param lines The lines from the application save file.","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"chownces"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"chownces"},"content":"    public TaskList(List\u003cString\u003e lines) {","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"chownces"},"content":"        ArrayList\u003cTask\u003e loadedTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"chownces"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"chownces"},"content":"            for (String line : lines) {","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"chownces"},"content":"                Task newTask;","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"chownces"},"content":"                String[] values \u003d line.split(\",\", -1);","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"chownces"},"content":"                // Checks to ensure correct line format","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"chownces"},"content":"                if (!((line.matches(\"T,[0,1],.*\") \u0026\u0026 values.length \u003d\u003d 3) || (","lastModifiedDate":"2021-08-29"},{"lineNumber":36,"author":{"gitId":"chownces"},"content":"                        line.matches(\"[D,E],[0,1],.*\") \u0026\u0026 values.length \u003d\u003d 4))) {","lastModifiedDate":"2021-08-29"},{"lineNumber":37,"author":{"gitId":"chownces"},"content":"                    throw new InvalidFileFormatException();","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"chownces"},"content":"                }","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"chownces"},"content":"                switch (values[0]) {","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"chownces"},"content":"                case \"T\": // Todo task","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"chownces"},"content":"                    newTask \u003d new Todo(values[2], values[1].equals(\"1\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"chownces"},"content":"                    break;","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"chownces"},"content":"                case \"D\": // Deadline task","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"chownces"},"content":"                    LocalDate date;","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"chownces"},"content":"                    try {","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"chownces"},"content":"                        date \u003d LocalDate.parse(values[3]);","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"chownces"},"content":"                    } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"chownces"},"content":"                        throw new InvalidFileFormatException();","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"chownces"},"content":"                    }","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"chownces"},"content":"                    newTask \u003d new Deadline(values[2], date, values[1].equals(\"1\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"chownces"},"content":"                    break;","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"chownces"},"content":"                case \"E\": // Event task","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"chownces"},"content":"                    newTask \u003d new Event(values[2], values[3], values[1].equals(\"1\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"chownces"},"content":"                    break;","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"chownces"},"content":"                default:","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"chownces"},"content":"                    // Should not reach this case due to regex check above","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"chownces"},"content":"                    throw new InvalidFileFormatException();","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"chownces"},"content":"                }","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"chownces"},"content":"                loadedTasks.add(newTask);","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"chownces"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"chownces"},"content":"            this.tasks \u003d loadedTasks;","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"chownces"},"content":"        } catch (InvalidFileFormatException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"chownces"},"content":"            Ui.printMessage(e.getMessage() + \"\\n\");","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"chownces"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"chownces"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"chownces"},"content":"     * Returns the formatted string for the \"list\" command.","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"chownces"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"chownces"},"content":"     * @return Formatted string of tasks.","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"chownces"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"chownces"},"content":"    public String list() {","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"chownces"},"content":"        StringBuilder str \u003d new StringBuilder(\"Here are the tasks in your list:\\n\");","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"chownces"},"content":"        for (int i \u003d 0; i \u003c this.tasks.size(); i++) {","lastModifiedDate":"2021-08-25"},{"lineNumber":76,"author":{"gitId":"chownces"},"content":"            str.append(i + 1).append(\".\").append(this.tasks.get(i)).append(\"\\n\");","lastModifiedDate":"2021-08-25"},{"lineNumber":77,"author":{"gitId":"chownces"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":78,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":79,"author":{"gitId":"chownces"},"content":"        return str.toString();","lastModifiedDate":"2021-08-25"},{"lineNumber":80,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":81,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":82,"author":{"gitId":"chownces"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":83,"author":{"gitId":"chownces"},"content":"     * Marks the task at the specified index as done.","lastModifiedDate":"2021-08-25"},{"lineNumber":84,"author":{"gitId":"chownces"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":85,"author":{"gitId":"chownces"},"content":"     * @param command The input command from the user.","lastModifiedDate":"2021-08-25"},{"lineNumber":86,"author":{"gitId":"chownces"},"content":"     * @return Formatted string containing the task marked as done, to be displayed to the user.","lastModifiedDate":"2021-08-25"},{"lineNumber":87,"author":{"gitId":"chownces"},"content":"     * @throws InvalidTaskIndexException When the index is out of bounds.","lastModifiedDate":"2021-08-25"},{"lineNumber":88,"author":{"gitId":"chownces"},"content":"     * @throws InvalidFormatException    When the input command is of the wrong format.","lastModifiedDate":"2021-08-25"},{"lineNumber":89,"author":{"gitId":"chownces"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":90,"author":{"gitId":"chownces"},"content":"    public String done(String command) throws InvalidTaskIndexException, InvalidFormatException {","lastModifiedDate":"2021-08-25"},{"lineNumber":91,"author":{"gitId":"chownces"},"content":"        int taskIdx \u003d Parser.getIndexFromCommand(command);","lastModifiedDate":"2021-08-25"},{"lineNumber":92,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":93,"author":{"gitId":"chownces"},"content":"        // Handle invalid index","lastModifiedDate":"2021-08-25"},{"lineNumber":94,"author":{"gitId":"chownces"},"content":"        if (taskIdx \u003e\u003d 1 \u0026\u0026 taskIdx \u003c\u003d tasks.size()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":95,"author":{"gitId":"chownces"},"content":"            Task t \u003d tasks.get(taskIdx - 1);","lastModifiedDate":"2021-08-25"},{"lineNumber":96,"author":{"gitId":"chownces"},"content":"            t.markAsDone();","lastModifiedDate":"2021-08-25"},{"lineNumber":97,"author":{"gitId":"chownces"},"content":"            return String.format(\"Nice! I\u0027ve marked this task as done:\\n  %s\\n\", t);","lastModifiedDate":"2021-08-25"},{"lineNumber":98,"author":{"gitId":"chownces"},"content":"        } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":99,"author":{"gitId":"chownces"},"content":"            throw new InvalidTaskIndexException();","lastModifiedDate":"2021-08-25"},{"lineNumber":100,"author":{"gitId":"chownces"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":101,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":102,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":103,"author":{"gitId":"chownces"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":104,"author":{"gitId":"chownces"},"content":"     * Adds a new todo task to the TaskList.","lastModifiedDate":"2021-08-25"},{"lineNumber":105,"author":{"gitId":"chownces"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":106,"author":{"gitId":"chownces"},"content":"     * @param command The input command from the user.","lastModifiedDate":"2021-08-25"},{"lineNumber":107,"author":{"gitId":"chownces"},"content":"     * @return Formatted string containing the added todo task, to be displayed to the user.","lastModifiedDate":"2021-08-25"},{"lineNumber":108,"author":{"gitId":"chownces"},"content":"     * @throws InvalidFormatException        When the input command is of the wrong format.","lastModifiedDate":"2021-08-25"},{"lineNumber":109,"author":{"gitId":"chownces"},"content":"     * @throws EmptyTodoDescriptionException When the description is empty.","lastModifiedDate":"2021-08-25"},{"lineNumber":110,"author":{"gitId":"chownces"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":111,"author":{"gitId":"chownces"},"content":"    public String todo(String command) throws InvalidFormatException, EmptyTodoDescriptionException {","lastModifiedDate":"2021-08-25"},{"lineNumber":112,"author":{"gitId":"chownces"},"content":"        String[] matches \u003d Parser.validateRegexAndMatch(command, \"^todo (.+)\", \"todo {description}\");","lastModifiedDate":"2021-08-25"},{"lineNumber":113,"author":{"gitId":"chownces"},"content":"        String description \u003d matches[1].trim();","lastModifiedDate":"2021-08-25"},{"lineNumber":114,"author":{"gitId":"chownces"},"content":"        if (description.equals(\"\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":115,"author":{"gitId":"chownces"},"content":"            throw new EmptyTodoDescriptionException();","lastModifiedDate":"2021-08-25"},{"lineNumber":116,"author":{"gitId":"chownces"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":117,"author":{"gitId":"chownces"},"content":"        Todo newTodo \u003d new Todo(description);","lastModifiedDate":"2021-08-25"},{"lineNumber":118,"author":{"gitId":"chownces"},"content":"        this.tasks.add(newTodo);","lastModifiedDate":"2021-08-25"},{"lineNumber":119,"author":{"gitId":"chownces"},"content":"        return this.formatAddTaskString(newTodo);","lastModifiedDate":"2021-08-25"},{"lineNumber":120,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":121,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":122,"author":{"gitId":"chownces"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":123,"author":{"gitId":"chownces"},"content":"     * Adds a new deadline task to the TaskList.","lastModifiedDate":"2021-08-25"},{"lineNumber":124,"author":{"gitId":"chownces"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":125,"author":{"gitId":"chownces"},"content":"     * @param command The input command from the user.","lastModifiedDate":"2021-08-25"},{"lineNumber":126,"author":{"gitId":"chownces"},"content":"     * @return Formatted string containing the added deadline task, to be displayed to the user.","lastModifiedDate":"2021-08-25"},{"lineNumber":127,"author":{"gitId":"chownces"},"content":"     * @throws InvalidFormatException When the input command is of the wrong format.","lastModifiedDate":"2021-08-25"},{"lineNumber":128,"author":{"gitId":"chownces"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":129,"author":{"gitId":"chownces"},"content":"    public String deadline(String command) throws InvalidFormatException {","lastModifiedDate":"2021-08-25"},{"lineNumber":130,"author":{"gitId":"chownces"},"content":"        String[] matches \u003d Parser.validateRegexAndMatch(command, \"^deadline (.+) /by (.+)\",","lastModifiedDate":"2021-08-25"},{"lineNumber":131,"author":{"gitId":"chownces"},"content":"                \"deadline {description} /by {date}\");","lastModifiedDate":"2021-08-25"},{"lineNumber":132,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":133,"author":{"gitId":"chownces"},"content":"        LocalDate date;","lastModifiedDate":"2021-08-25"},{"lineNumber":134,"author":{"gitId":"chownces"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":135,"author":{"gitId":"chownces"},"content":"            date \u003d LocalDate.parse(matches[2].trim());","lastModifiedDate":"2021-08-25"},{"lineNumber":136,"author":{"gitId":"chownces"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":137,"author":{"gitId":"chownces"},"content":"            throw new InvalidFormatException(\"Please ensure the date is in YYYY-MM-DD format!\");","lastModifiedDate":"2021-08-25"},{"lineNumber":138,"author":{"gitId":"chownces"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":139,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":140,"author":{"gitId":"chownces"},"content":"        Deadline newDeadline \u003d new Deadline(matches[1].trim(), date);","lastModifiedDate":"2021-08-25"},{"lineNumber":141,"author":{"gitId":"chownces"},"content":"        tasks.add(newDeadline);","lastModifiedDate":"2021-08-25"},{"lineNumber":142,"author":{"gitId":"chownces"},"content":"        return formatAddTaskString(newDeadline);","lastModifiedDate":"2021-08-25"},{"lineNumber":143,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":144,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":145,"author":{"gitId":"chownces"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":146,"author":{"gitId":"chownces"},"content":"     * Adds a new event task to the TaskList.","lastModifiedDate":"2021-08-25"},{"lineNumber":147,"author":{"gitId":"chownces"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":148,"author":{"gitId":"chownces"},"content":"     * @param command The input command from the user.","lastModifiedDate":"2021-08-25"},{"lineNumber":149,"author":{"gitId":"chownces"},"content":"     * @return Formatted string containing the added event task, to be displayed to the user.","lastModifiedDate":"2021-08-25"},{"lineNumber":150,"author":{"gitId":"chownces"},"content":"     * @throws InvalidFormatException When the input command is of the wrong format.","lastModifiedDate":"2021-08-25"},{"lineNumber":151,"author":{"gitId":"chownces"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":152,"author":{"gitId":"chownces"},"content":"    public String event(String command) throws InvalidFormatException {","lastModifiedDate":"2021-08-25"},{"lineNumber":153,"author":{"gitId":"chownces"},"content":"        String[] matches \u003d Parser.validateRegexAndMatch(command, \"^event (.+) /at (.+)\",","lastModifiedDate":"2021-08-25"},{"lineNumber":154,"author":{"gitId":"chownces"},"content":"                \"event {description} /at {time}\");","lastModifiedDate":"2021-08-25"},{"lineNumber":155,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":156,"author":{"gitId":"chownces"},"content":"        Event newEvent \u003d new Event(matches[1].trim(), matches[2].trim());","lastModifiedDate":"2021-08-25"},{"lineNumber":157,"author":{"gitId":"chownces"},"content":"        tasks.add(newEvent);","lastModifiedDate":"2021-08-25"},{"lineNumber":158,"author":{"gitId":"chownces"},"content":"        return formatAddTaskString(newEvent);","lastModifiedDate":"2021-08-25"},{"lineNumber":159,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":160,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":161,"author":{"gitId":"chownces"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":162,"author":{"gitId":"chownces"},"content":"     * Deletes the task at the specified index.","lastModifiedDate":"2021-08-25"},{"lineNumber":163,"author":{"gitId":"chownces"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":164,"author":{"gitId":"chownces"},"content":"     * @param command The input command from the user.","lastModifiedDate":"2021-08-25"},{"lineNumber":165,"author":{"gitId":"chownces"},"content":"     * @return Formatted string containing the task deleted, to be displayed to the user.","lastModifiedDate":"2021-08-25"},{"lineNumber":166,"author":{"gitId":"chownces"},"content":"     * @throws InvalidTaskIndexException When the index is out of bounds.","lastModifiedDate":"2021-08-25"},{"lineNumber":167,"author":{"gitId":"chownces"},"content":"     * @throws InvalidFormatException    When the input command is of the wrong format.","lastModifiedDate":"2021-08-25"},{"lineNumber":168,"author":{"gitId":"chownces"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":169,"author":{"gitId":"chownces"},"content":"    public String delete(String command) throws InvalidTaskIndexException, InvalidFormatException {","lastModifiedDate":"2021-08-25"},{"lineNumber":170,"author":{"gitId":"chownces"},"content":"        int taskIdx \u003d Parser.getIndexFromCommand(command);","lastModifiedDate":"2021-08-25"},{"lineNumber":171,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":172,"author":{"gitId":"chownces"},"content":"        // Handle invalid index","lastModifiedDate":"2021-08-25"},{"lineNumber":173,"author":{"gitId":"chownces"},"content":"        if (taskIdx \u003e\u003d 1 \u0026\u0026 taskIdx \u003c\u003d tasks.size()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":174,"author":{"gitId":"chownces"},"content":"            Task t \u003d tasks.get(taskIdx - 1);","lastModifiedDate":"2021-08-25"},{"lineNumber":175,"author":{"gitId":"chownces"},"content":"            tasks.remove(taskIdx - 1);","lastModifiedDate":"2021-08-25"},{"lineNumber":176,"author":{"gitId":"chownces"},"content":"            return String.format(\"Noted. I\u0027ve removed this task:\\n  %s\\n%s\\n\", t, formatNumTaskString());","lastModifiedDate":"2021-08-25"},{"lineNumber":177,"author":{"gitId":"chownces"},"content":"        } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":178,"author":{"gitId":"chownces"},"content":"            throw new InvalidTaskIndexException();","lastModifiedDate":"2021-08-25"},{"lineNumber":179,"author":{"gitId":"chownces"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":180,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":181,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":182,"author":{"gitId":"chownces"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":183,"author":{"gitId":"chownces"},"content":"     * Finds a task with the specified keyword(s).","lastModifiedDate":"2021-08-29"},{"lineNumber":184,"author":{"gitId":"chownces"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":185,"author":{"gitId":"chownces"},"content":"     * @param command The input command from the user.","lastModifiedDate":"2021-08-29"},{"lineNumber":186,"author":{"gitId":"chownces"},"content":"     * @return Formatted string containing the tasks found.","lastModifiedDate":"2021-08-29"},{"lineNumber":187,"author":{"gitId":"chownces"},"content":"     * @throws InvalidFormatException When the input command is of the wrong format.","lastModifiedDate":"2021-08-29"},{"lineNumber":188,"author":{"gitId":"chownces"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":189,"author":{"gitId":"chownces"},"content":"    public String find(String command) throws InvalidFormatException {","lastModifiedDate":"2021-08-26"},{"lineNumber":190,"author":{"gitId":"chownces"},"content":"        String[] matches \u003d Parser.validateRegexAndMatch(command, \"^find (.+)\",","lastModifiedDate":"2021-08-26"},{"lineNumber":191,"author":{"gitId":"chownces"},"content":"                \"find {search term}\");","lastModifiedDate":"2021-08-26"},{"lineNumber":192,"author":{"gitId":"chownces"},"content":"        String searchTerm \u003d matches[1];","lastModifiedDate":"2021-08-26"},{"lineNumber":193,"author":{"gitId":"chownces"},"content":"        StringBuilder str \u003d new StringBuilder(\"Here are the matching tasks in your list:\\n\");","lastModifiedDate":"2021-08-26"},{"lineNumber":194,"author":{"gitId":"chownces"},"content":"        int counter \u003d 1;","lastModifiedDate":"2021-08-26"},{"lineNumber":195,"author":{"gitId":"chownces"},"content":"        for (Task t : this.tasks) {","lastModifiedDate":"2021-08-26"},{"lineNumber":196,"author":{"gitId":"chownces"},"content":"            if (t.getDescription().contains(searchTerm)) {","lastModifiedDate":"2021-08-26"},{"lineNumber":197,"author":{"gitId":"chownces"},"content":"                str.append(counter).append(\".\").append(t).append(\"\\n\");","lastModifiedDate":"2021-08-26"},{"lineNumber":198,"author":{"gitId":"chownces"},"content":"                counter++;","lastModifiedDate":"2021-08-26"},{"lineNumber":199,"author":{"gitId":"chownces"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":200,"author":{"gitId":"chownces"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":201,"author":{"gitId":"chownces"},"content":"        return str.toString();","lastModifiedDate":"2021-08-26"},{"lineNumber":202,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":203,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":204,"author":{"gitId":"chownces"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":205,"author":{"gitId":"chownces"},"content":"     * Converts the TaskList to a string for saving.","lastModifiedDate":"2021-08-25"},{"lineNumber":206,"author":{"gitId":"chownces"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":207,"author":{"gitId":"chownces"},"content":"     * @return The formatted string for saving.","lastModifiedDate":"2021-08-25"},{"lineNumber":208,"author":{"gitId":"chownces"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":209,"author":{"gitId":"chownces"},"content":"    public String toSaveFormat() {","lastModifiedDate":"2021-08-25"},{"lineNumber":210,"author":{"gitId":"chownces"},"content":"        StringBuilder str \u003d new StringBuilder();","lastModifiedDate":"2021-08-25"},{"lineNumber":211,"author":{"gitId":"chownces"},"content":"        this.tasks.forEach(task -\u003e str.append(task.toSaveFormat()).append(\"\\n\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":212,"author":{"gitId":"chownces"},"content":"        return str.toString();","lastModifiedDate":"2021-08-25"},{"lineNumber":213,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":214,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":215,"author":{"gitId":"chownces"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":216,"author":{"gitId":"chownces"},"content":"     * Returns the list of tasks. To be used solely for testing purposes.","lastModifiedDate":"2021-08-25"},{"lineNumber":217,"author":{"gitId":"chownces"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":218,"author":{"gitId":"chownces"},"content":"     * @return The list of tasks in the instance of TaskList.","lastModifiedDate":"2021-08-25"},{"lineNumber":219,"author":{"gitId":"chownces"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":220,"author":{"gitId":"chownces"},"content":"    public ArrayList\u003cTask\u003e getTasks() {","lastModifiedDate":"2021-08-25"},{"lineNumber":221,"author":{"gitId":"chownces"},"content":"        return this.tasks;","lastModifiedDate":"2021-08-25"},{"lineNumber":222,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":223,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":224,"author":{"gitId":"chownces"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":225,"author":{"gitId":"chownces"},"content":"     * Formats the inputted task as a string to be displayed back to the user.","lastModifiedDate":"2021-08-25"},{"lineNumber":226,"author":{"gitId":"chownces"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":227,"author":{"gitId":"chownces"},"content":"     * @param task The Task created.","lastModifiedDate":"2021-08-25"},{"lineNumber":228,"author":{"gitId":"chownces"},"content":"     * @return The string to be displayed to the user during addition of a new task.","lastModifiedDate":"2021-08-25"},{"lineNumber":229,"author":{"gitId":"chownces"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":230,"author":{"gitId":"chownces"},"content":"    private String formatAddTaskString(Task task) {","lastModifiedDate":"2021-08-25"},{"lineNumber":231,"author":{"gitId":"chownces"},"content":"        return String.format(\"Got it. I\u0027ve added this task:\\n  %s\\n%s\\n\",","lastModifiedDate":"2021-08-25"},{"lineNumber":232,"author":{"gitId":"chownces"},"content":"                task, formatNumTaskString());","lastModifiedDate":"2021-08-25"},{"lineNumber":233,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":234,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":235,"author":{"gitId":"chownces"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":236,"author":{"gitId":"chownces"},"content":"     * Formats the number of tasks as a string that is to be displayed to the user.","lastModifiedDate":"2021-08-25"},{"lineNumber":237,"author":{"gitId":"chownces"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":238,"author":{"gitId":"chownces"},"content":"     * @return The formatted string containing number of tasks.","lastModifiedDate":"2021-08-25"},{"lineNumber":239,"author":{"gitId":"chownces"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":240,"author":{"gitId":"chownces"},"content":"    private String formatNumTaskString() {","lastModifiedDate":"2021-08-25"},{"lineNumber":241,"author":{"gitId":"chownces"},"content":"        return String.format(\"Now you have %d task%s in the list.\",","lastModifiedDate":"2021-08-25"},{"lineNumber":242,"author":{"gitId":"chownces"},"content":"                this.tasks.size(), this.tasks.size() \u003d\u003d 1 ? \"\" : \"s\");","lastModifiedDate":"2021-08-25"},{"lineNumber":243,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":244,"author":{"gitId":"chownces"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"chownces":244}},{"path":"src/main/java/duke/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chownces"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"chownces"},"content":"/**","lastModifiedDate":"2021-08-15"},{"lineNumber":4,"author":{"gitId":"chownces"},"content":" * This class encapsulates a todo task in the Duke Application.","lastModifiedDate":"2021-08-15"},{"lineNumber":5,"author":{"gitId":"chownces"},"content":" */","lastModifiedDate":"2021-08-15"},{"lineNumber":6,"author":{"gitId":"chownces"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-08-14"},{"lineNumber":7,"author":{"gitId":"chownces"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"chownces"},"content":"     * Constructor for a new Todo task.","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"chownces"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"chownces"},"content":"     * @param description The task description","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"chownces"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"chownces"},"content":"    public Todo(String description) {","lastModifiedDate":"2021-08-14"},{"lineNumber":13,"author":{"gitId":"chownces"},"content":"        super(description);","lastModifiedDate":"2021-08-14"},{"lineNumber":14,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":15,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":16,"author":{"gitId":"chownces"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"chownces"},"content":"     * Constructor for a new Todo task.","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"chownces"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"chownces"},"content":"     * @param description The task description.","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"chownces"},"content":"     * @param isDone      Whether this task is marked as done.","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"chownces"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"chownces"},"content":"    public Todo(String description, boolean isDone) {","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"chownces"},"content":"        super(description, isDone);","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"chownces"},"content":"    @Override","lastModifiedDate":"2021-08-14"},{"lineNumber":27,"author":{"gitId":"chownces"},"content":"    public String toString() {","lastModifiedDate":"2021-08-14"},{"lineNumber":28,"author":{"gitId":"chownces"},"content":"        return String.format(\"[T]%s\", super.toString());","lastModifiedDate":"2021-08-14"},{"lineNumber":29,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":30,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"chownces"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"chownces"},"content":"    public String toSaveFormat() {","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"chownces"},"content":"        return String.format(\"T,%s\", super.toSaveFormat());","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"chownces"},"content":"}","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"chownces":35}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chownces"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"chownces"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"chownces"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"chownces"},"content":" * This class encapsulates the UI logic for the application.","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"chownces"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"chownces"},"content":"public class Ui {","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"chownces"},"content":"    private static final String LOGO \u003d","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"chownces"},"content":"            \" ____        _        \\n\"","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"chownces"},"content":"                    + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"chownces"},"content":"                    + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"chownces"},"content":"                    + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"chownces"},"content":"                    + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"chownces"},"content":"    private static final String LINE \u003d \"-----------------------------------------------------------------------\\n\";","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"chownces"},"content":"    private final Scanner sc;","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"chownces"},"content":"    public Ui() {","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"chownces"},"content":"        this.sc \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"chownces"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"chownces"},"content":"     * Returns the next user inputted line.","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"chownces"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"chownces"},"content":"     * @return The user inputted line as a string.","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"chownces"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"chownces"},"content":"    public String readCommand() {","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"chownces"},"content":"        return this.sc.nextLine();","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"chownces"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"chownces"},"content":"     * Prints the message to the screen.","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"chownces"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"chownces"},"content":"     * @param msg The message to be printed.","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"chownces"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"chownces"},"content":"    public static void printMessage(String msg) {","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"chownces"},"content":"        System.out.println(LINE + msg + LINE);","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"chownces"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"chownces"},"content":"     * Displays the welcome text when first entering the application.","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"chownces"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"chownces"},"content":"    public static void showWelcomeText() {","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"chownces"},"content":"        Ui.printMessage(LOGO + \"\\nHello! I\u0027m Duke :)\\nWhat can I do for you?\\n\");","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"chownces"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"chownces"},"content":"     * Displays the ending text when exiting the application.","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"chownces"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"chownces"},"content":"    public static void showEndText() {","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"chownces"},"content":"        Ui.printMessage(\"Bye. Hope to see you again soon!\\n\");","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"chownces"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"chownces"},"content":"     * Displays an loading error message when the application save file is missing or non-existent.","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"chownces"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"chownces"},"content":"    public static void showLoadingError() {","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"chownces"},"content":"        Ui.printMessage(\"Seems like you do not have a previous save file. \"","lastModifiedDate":"2021-08-29"},{"lineNumber":59,"author":{"gitId":"chownces"},"content":"                + \"I will create one for you once you input a task!\\n\");","lastModifiedDate":"2021-08-29"},{"lineNumber":60,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"chownces"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"chownces":61}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"chownces"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":3,"author":{"gitId":"chownces"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"chownces"},"content":"\u003c?import javafx.scene.text.Font?\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"chownces"},"content":"\u003c?import javafx.scene.text.Text?\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"chownces"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"chownces"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"chownces"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"chownces"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"chownces"},"content":"        \u003cText fx:id\u003d\"dialog\" text\u003d\"Label\" wrappingWidth\u003d\"301\" \u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"chownces"},"content":"            \u003cfont\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"chownces"},"content":"                \u003cFont name\u003d\"Arial\" /\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"chownces"},"content":"            \u003c/font\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"chownces"},"content":"        \u003c/Text\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"chownces"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"chownces"},"content":"    \u003c/children\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"chownces"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"chownces"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"chownces"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"chownces"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"chownces":21}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"chownces"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":3,"author":{"gitId":"chownces"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"chownces"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"chownces"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"chownces"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"chownces"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"chownces"},"content":"\u003c?import javafx.scene.text.Font?\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"chownces"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"chownces"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"chownces"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\"\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"chownces"},"content":"            \u003cfont\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"chownces"},"content":"                \u003cFont name\u003d\"Arial\" /\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"chownces"},"content":"            \u003c/font\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"chownces"},"content":"        \u003c/TextField\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"chownces"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\"\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"chownces"},"content":"            \u003cfont\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"chownces"},"content":"                \u003cFont name\u003d\"Arial\" /\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"chownces"},"content":"            \u003c/font\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"chownces"},"content":"        \u003c/Button\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"chownces"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"chownces"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"chownces"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"chownces"},"content":"            \u003c/content\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"chownces"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"chownces"},"content":"    \u003c/children\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"chownces"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"chownces":28}},{"path":"src/test/java/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chownces"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"chownces"},"content":"import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"chownces"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"chownces"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"chownces"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"chownces"},"content":"public class ParserTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"chownces"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"chownces"},"content":"    void parse_validCommands_success() {","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"chownces"},"content":"        String[] commands \u003d {","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"chownces"},"content":"            \"list\",","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"chownces"},"content":"            \"done 1\",","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"chownces"},"content":"            \"todo something\",","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"chownces"},"content":"            \"deadline thing /by 2021-08-25\",","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"chownces"},"content":"            \"event somewhere /at 6pm\",","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"chownces"},"content":"            \"delete 1\",","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"chownces"},"content":"            \"find something\"","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"chownces"},"content":"        };","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"chownces"},"content":"        for (String command : commands) {","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"chownces"},"content":"            assertDoesNotThrow(() -\u003e Parser.parse(command));","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"chownces"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"chownces"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"chownces"},"content":"    void parse_unknownCommands_exceptionThrown() {","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"chownces"},"content":"        String[] commands \u003d {","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"chownces"},"content":"            \"done x\",","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"chownces"},"content":"            \"blah\",","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"chownces"},"content":"            \"invalid command\",","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"chownces"},"content":"            \"delete a\"","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"chownces"},"content":"        };","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"chownces"},"content":"        for (String command : commands) {","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"chownces"},"content":"            assertThrows(UnknownCommandException.class, () -\u003e Parser.parse(command));","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"chownces"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"chownces"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"chownces"},"content":"    void getIndexFromCommand_validCommands_success() {","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"chownces"},"content":"        String[] commands \u003d {","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"chownces"},"content":"            \"delete 2\",","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"chownces"},"content":"            \"done 100\",","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"chownces"},"content":"            \"done -1\"","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"chownces"},"content":"        };","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"chownces"},"content":"        int[] expected \u003d {2, 100, -1};","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"chownces"},"content":"        for (String command : commands) {","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"chownces"},"content":"            assertDoesNotThrow(() -\u003e Parser.getIndexFromCommand(command));","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"chownces"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"chownces"},"content":"        for (int i \u003d 0; i \u003c commands.length; i++) {","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"chownces"},"content":"            try {","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"chownces"},"content":"                assertEquals(expected[i], Parser.getIndexFromCommand(commands[i]));","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"chownces"},"content":"            } catch (InvalidFormatException ignored) {","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"chownces"},"content":"                // Empty. Already asserted that no error is thrown.","lastModifiedDate":"2021-08-29"},{"lineNumber":59,"author":{"gitId":"chownces"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"chownces"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"chownces"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"chownces"},"content":"    void getIndexFromCommand_nonIntegers_exceptionThrown() {","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"chownces"},"content":"        String[] commands \u003d {","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"chownces"},"content":"            \"delete x\",","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"chownces"},"content":"            \"delete 1.1\",","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"chownces"},"content":"            \"done y\",","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"chownces"},"content":"            \"done 0.0\"","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"chownces"},"content":"        };","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"chownces"},"content":"        for (String command : commands) {","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"chownces"},"content":"            assertThrows(InvalidFormatException.class, () -\u003e Parser.getIndexFromCommand(command));","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"chownces"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":76,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":77,"author":{"gitId":"chownces"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":78,"author":{"gitId":"chownces"},"content":"    void validateRegexAndMatch_validInputTodo_success() {","lastModifiedDate":"2021-08-25"},{"lineNumber":79,"author":{"gitId":"chownces"},"content":"        String command \u003d \"todo some description\";","lastModifiedDate":"2021-08-25"},{"lineNumber":80,"author":{"gitId":"chownces"},"content":"        String regex \u003d \"^todo (.+)\";","lastModifiedDate":"2021-08-25"},{"lineNumber":81,"author":{"gitId":"chownces"},"content":"        String validFormat \u003d \"todo {description}\";","lastModifiedDate":"2021-08-25"},{"lineNumber":82,"author":{"gitId":"chownces"},"content":"        String[] expected \u003d {\"todo some description\", \"some description\"};","lastModifiedDate":"2021-08-25"},{"lineNumber":83,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":84,"author":{"gitId":"chownces"},"content":"        assertDoesNotThrow(() -\u003e Parser.validateRegexAndMatch(command, regex, validFormat));","lastModifiedDate":"2021-08-25"},{"lineNumber":85,"author":{"gitId":"chownces"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":86,"author":{"gitId":"chownces"},"content":"            String[] matches \u003d Parser.validateRegexAndMatch(command, regex, validFormat);","lastModifiedDate":"2021-08-25"},{"lineNumber":87,"author":{"gitId":"chownces"},"content":"            for (int i \u003d 0; i \u003c expected.length; i++) {","lastModifiedDate":"2021-08-25"},{"lineNumber":88,"author":{"gitId":"chownces"},"content":"                assertEquals(expected[i], matches[i]);","lastModifiedDate":"2021-08-25"},{"lineNumber":89,"author":{"gitId":"chownces"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":90,"author":{"gitId":"chownces"},"content":"        } catch (InvalidFormatException ignored) {","lastModifiedDate":"2021-08-25"},{"lineNumber":91,"author":{"gitId":"chownces"},"content":"            // Empty. Already asserted that no error is thrown.","lastModifiedDate":"2021-08-29"},{"lineNumber":92,"author":{"gitId":"chownces"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":93,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":94,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":95,"author":{"gitId":"chownces"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":96,"author":{"gitId":"chownces"},"content":"    void validateRegexAndMatch_validInputDeadline_success() {","lastModifiedDate":"2021-08-25"},{"lineNumber":97,"author":{"gitId":"chownces"},"content":"        String command \u003d \"deadline something /by 2020-08-25\";","lastModifiedDate":"2021-08-25"},{"lineNumber":98,"author":{"gitId":"chownces"},"content":"        String regex \u003d \"^deadline (.+) /by (.+)\";","lastModifiedDate":"2021-08-25"},{"lineNumber":99,"author":{"gitId":"chownces"},"content":"        String validFormat \u003d \"deadline {description} /by {date}\";","lastModifiedDate":"2021-08-25"},{"lineNumber":100,"author":{"gitId":"chownces"},"content":"        String[] expected \u003d {\"deadline something /by 2020-08-25\", \"something\", \"2020-08-25\"};","lastModifiedDate":"2021-08-25"},{"lineNumber":101,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":102,"author":{"gitId":"chownces"},"content":"        assertDoesNotThrow(() -\u003e Parser.validateRegexAndMatch(command, regex, validFormat));","lastModifiedDate":"2021-08-25"},{"lineNumber":103,"author":{"gitId":"chownces"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":104,"author":{"gitId":"chownces"},"content":"            String[] matches \u003d Parser.validateRegexAndMatch(command, regex, validFormat);","lastModifiedDate":"2021-08-25"},{"lineNumber":105,"author":{"gitId":"chownces"},"content":"            for (int i \u003d 0; i \u003c expected.length; i++) {","lastModifiedDate":"2021-08-25"},{"lineNumber":106,"author":{"gitId":"chownces"},"content":"                assertEquals(expected[i], matches[i]);","lastModifiedDate":"2021-08-25"},{"lineNumber":107,"author":{"gitId":"chownces"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":108,"author":{"gitId":"chownces"},"content":"        } catch (InvalidFormatException ignored) {","lastModifiedDate":"2021-08-25"},{"lineNumber":109,"author":{"gitId":"chownces"},"content":"            // Empty. Already asserted that no error is thrown.","lastModifiedDate":"2021-08-29"},{"lineNumber":110,"author":{"gitId":"chownces"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":111,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":112,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":113,"author":{"gitId":"chownces"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":114,"author":{"gitId":"chownces"},"content":"    void validateRegexAndMatch_validInputEvent_success() {","lastModifiedDate":"2021-08-25"},{"lineNumber":115,"author":{"gitId":"chownces"},"content":"        String command \u003d \"event something /at sometime\";","lastModifiedDate":"2021-08-25"},{"lineNumber":116,"author":{"gitId":"chownces"},"content":"        String regex \u003d \"^event (.+) /at (.+)\";","lastModifiedDate":"2021-08-25"},{"lineNumber":117,"author":{"gitId":"chownces"},"content":"        String validFormat \u003d \"event {description} /at {time}\";","lastModifiedDate":"2021-08-25"},{"lineNumber":118,"author":{"gitId":"chownces"},"content":"        String[] expected \u003d {\"event something /at sometime\", \"something\", \"sometime\"};","lastModifiedDate":"2021-08-25"},{"lineNumber":119,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":120,"author":{"gitId":"chownces"},"content":"        assertDoesNotThrow(() -\u003e Parser.validateRegexAndMatch(command, regex, validFormat));","lastModifiedDate":"2021-08-25"},{"lineNumber":121,"author":{"gitId":"chownces"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":122,"author":{"gitId":"chownces"},"content":"            String[] matches \u003d Parser.validateRegexAndMatch(command, regex, validFormat);","lastModifiedDate":"2021-08-25"},{"lineNumber":123,"author":{"gitId":"chownces"},"content":"            for (int i \u003d 0; i \u003c expected.length; i++) {","lastModifiedDate":"2021-08-25"},{"lineNumber":124,"author":{"gitId":"chownces"},"content":"                assertEquals(expected[i], matches[i]);","lastModifiedDate":"2021-08-25"},{"lineNumber":125,"author":{"gitId":"chownces"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":126,"author":{"gitId":"chownces"},"content":"        } catch (InvalidFormatException ignored) {","lastModifiedDate":"2021-08-25"},{"lineNumber":127,"author":{"gitId":"chownces"},"content":"            // Empty. Already asserted that no error is thrown.","lastModifiedDate":"2021-08-29"},{"lineNumber":128,"author":{"gitId":"chownces"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":129,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":130,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":131,"author":{"gitId":"chownces"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":132,"author":{"gitId":"chownces"},"content":"    void validateRegexAndMatch_validInputFind_success() {","lastModifiedDate":"2021-08-26"},{"lineNumber":133,"author":{"gitId":"chownces"},"content":"        String command \u003d \"find something\";","lastModifiedDate":"2021-08-26"},{"lineNumber":134,"author":{"gitId":"chownces"},"content":"        String regex \u003d \"^find (.+)\";","lastModifiedDate":"2021-08-26"},{"lineNumber":135,"author":{"gitId":"chownces"},"content":"        String validFormat \u003d \"find {search term}\";","lastModifiedDate":"2021-08-26"},{"lineNumber":136,"author":{"gitId":"chownces"},"content":"        String[] expected \u003d {\"find something\", \"something\"};","lastModifiedDate":"2021-08-26"},{"lineNumber":137,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":138,"author":{"gitId":"chownces"},"content":"        assertDoesNotThrow(() -\u003e Parser.validateRegexAndMatch(command, regex, validFormat));","lastModifiedDate":"2021-08-26"},{"lineNumber":139,"author":{"gitId":"chownces"},"content":"        try {","lastModifiedDate":"2021-08-26"},{"lineNumber":140,"author":{"gitId":"chownces"},"content":"            String[] matches \u003d Parser.validateRegexAndMatch(command, regex, validFormat);","lastModifiedDate":"2021-08-26"},{"lineNumber":141,"author":{"gitId":"chownces"},"content":"            for (int i \u003d 0; i \u003c expected.length; i++) {","lastModifiedDate":"2021-08-26"},{"lineNumber":142,"author":{"gitId":"chownces"},"content":"                assertEquals(expected[i], matches[i]);","lastModifiedDate":"2021-08-26"},{"lineNumber":143,"author":{"gitId":"chownces"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":144,"author":{"gitId":"chownces"},"content":"        } catch (InvalidFormatException ignored) {","lastModifiedDate":"2021-08-26"},{"lineNumber":145,"author":{"gitId":"chownces"},"content":"            // Empty. Already asserted that no error is thrown.","lastModifiedDate":"2021-08-29"},{"lineNumber":146,"author":{"gitId":"chownces"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":147,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":148,"author":{"gitId":"chownces"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"chownces":148}},{"path":"src/test/java/duke/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chownces"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"chownces"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"chownces"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"chownces"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"chownces"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"chownces"},"content":"public class TaskListTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"chownces"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"chownces"},"content":"    void constructor_emptyInput_success() {","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"chownces"},"content":"        assertEquals(new ArrayList\u003c\u003e(), new TaskList().getTasks());","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"chownces"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"chownces"},"content":"    void constructor_listInput_success() {","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"chownces"},"content":"        ArrayList\u003cString\u003e inputList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"chownces"},"content":"        inputList.add(\"T,0,description\");","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"chownces"},"content":"        inputList.add(\"E,1,description,6pm\");","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"chownces"},"content":"        inputList.add(\"D,0,description,2020-08-25\");","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"chownces"},"content":"        ArrayList\u003cTask\u003e expected \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"chownces"},"content":"        expected.add(new Todo(\"description\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"chownces"},"content":"        Event doneEvent \u003d new Event(\"description\", \"6pm\");","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"chownces"},"content":"        doneEvent.markAsDone();","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"chownces"},"content":"        expected.add(doneEvent);","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"chownces"},"content":"        expected.add(new Deadline(\"description\", LocalDate.parse(\"2020-08-25\")));","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"chownces"},"content":"        assertEquals(expected, new TaskList(inputList).getTasks());","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"chownces"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"chownces"},"content":"    void list_emptyTaskList_success() {","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"chownces"},"content":"        String expected \u003d \"Here are the tasks in your list:\\n\";","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"chownces"},"content":"        assertEquals(expected, new TaskList().list());","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"chownces"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"chownces"},"content":"    void list_nonEmptyTaskList_success() {","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"chownces"},"content":"        ArrayList\u003cString\u003e inputList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"chownces"},"content":"        inputList.add(\"T,0,description\");","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"chownces"},"content":"        inputList.add(\"E,1,description,6pm\");","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"chownces"},"content":"        inputList.add(\"D,0,description,2020-08-25\");","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"chownces"},"content":"        String expected \u003d \"Here are the tasks in your list:\\n\"","lastModifiedDate":"2021-08-29"},{"lineNumber":47,"author":{"gitId":"chownces"},"content":"                + \"1.[T][ ] description\\n\"","lastModifiedDate":"2021-08-29"},{"lineNumber":48,"author":{"gitId":"chownces"},"content":"                + \"2.[E][X] description (at: 6pm)\\n\"","lastModifiedDate":"2021-08-29"},{"lineNumber":49,"author":{"gitId":"chownces"},"content":"                + \"3.[D][ ] description (by: Aug 25 2020)\\n\";","lastModifiedDate":"2021-08-29"},{"lineNumber":50,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"chownces"},"content":"        TaskList list \u003d new TaskList(inputList);","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"chownces"},"content":"        assertEquals(expected, list.list());","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"chownces"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"chownces"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"chownces":54}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"chownces"},"content":"list","lastModifiedDate":"2021-08-14"},{"lineNumber":2,"author":{"gitId":"chownces"},"content":"todo do homework","lastModifiedDate":"2021-08-14"},{"lineNumber":3,"author":{"gitId":"chownces"},"content":"deadline assignment /by 2021-12-01","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"chownces"},"content":"event dinner /at 6pm","lastModifiedDate":"2021-08-14"},{"lineNumber":5,"author":{"gitId":"chownces"},"content":"deadline submission /by 2021-08-21","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"chownces"},"content":"event @something /at today","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"chownces"},"content":"done 1","lastModifiedDate":"2021-08-14"},{"lineNumber":8,"author":{"gitId":"chownces"},"content":"done 4","lastModifiedDate":"2021-08-14"},{"lineNumber":9,"author":{"gitId":"chownces"},"content":"delete 2","lastModifiedDate":"2021-08-15"},{"lineNumber":10,"author":{"gitId":"chownces"},"content":"list","lastModifiedDate":"2021-08-14"},{"lineNumber":11,"author":{"gitId":"chownces"},"content":"invalid command","lastModifiedDate":"2021-08-14"},{"lineNumber":12,"author":{"gitId":"chownces"},"content":"blah","lastModifiedDate":"2021-08-15"},{"lineNumber":13,"author":{"gitId":"chownces"},"content":"todo","lastModifiedDate":"2021-08-14"},{"lineNumber":14,"author":{"gitId":"chownces"},"content":"deadline","lastModifiedDate":"2021-08-14"},{"lineNumber":15,"author":{"gitId":"chownces"},"content":"deadline nowhitespace /by","lastModifiedDate":"2021-08-15"},{"lineNumber":16,"author":{"gitId":"chownces"},"content":"deadline whitespace /by","lastModifiedDate":"2021-08-15"},{"lineNumber":17,"author":{"gitId":"chownces"},"content":"deadline something /by invalidDate","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"chownces"},"content":"deadline  /by 2021-08-21","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"chownces"},"content":"deadline some,comma /by sometime","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"chownces"},"content":"deadline something /at 2021-08-21","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"chownces"},"content":"event","lastModifiedDate":"2021-08-14"},{"lineNumber":22,"author":{"gitId":"chownces"},"content":"event nowhitespace /at","lastModifiedDate":"2021-08-15"},{"lineNumber":23,"author":{"gitId":"chownces"},"content":"event whitespace /at","lastModifiedDate":"2021-08-15"},{"lineNumber":24,"author":{"gitId":"chownces"},"content":"event  /at tonight","lastModifiedDate":"2021-08-15"},{"lineNumber":25,"author":{"gitId":"chownces"},"content":"event some,comma /at today","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"chownces"},"content":"event something /by sometime","lastModifiedDate":"2021-08-15"},{"lineNumber":27,"author":{"gitId":"chownces"},"content":"done 1000","lastModifiedDate":"2021-08-14"},{"lineNumber":28,"author":{"gitId":"chownces"},"content":"done 0","lastModifiedDate":"2021-08-14"},{"lineNumber":29,"author":{"gitId":"chownces"},"content":"done -1","lastModifiedDate":"2021-08-15"},{"lineNumber":30,"author":{"gitId":"chownces"},"content":"delete 1000","lastModifiedDate":"2021-08-15"},{"lineNumber":31,"author":{"gitId":"chownces"},"content":"delete 0","lastModifiedDate":"2021-08-15"},{"lineNumber":32,"author":{"gitId":"chownces"},"content":"delete -1","lastModifiedDate":"2021-08-15"},{"lineNumber":33,"author":{"gitId":"chownces"},"content":"bye","lastModifiedDate":"2021-08-15"}],"authorContributionMap":{"chownces":33}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"chownces"},"content":"# delete saved data file from previous test runs","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"chownces"},"content":"if [ -d \"./data\" ]","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"chownces"},"content":"then","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"chownces"},"content":"  rm -rf ./data","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"chownces"},"content":"fi","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"chownces"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"chownces"},"content":"if ! javac -cp ../src/main/java/duke -Xlint:none -d ../bin ../src/main/java/duke/*.java","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"chownces":7,"-":37}}]

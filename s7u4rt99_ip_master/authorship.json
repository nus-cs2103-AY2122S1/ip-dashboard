[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"# duke.Duke project template","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"s7u4rt99":2,"-":22}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":17,"author":{"gitId":"s7u4rt99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":18,"author":{"gitId":"s7u4rt99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":19,"author":{"gitId":"s7u4rt99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":20,"author":{"gitId":"s7u4rt99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":21,"author":{"gitId":"s7u4rt99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":22,"author":{"gitId":"s7u4rt99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":23,"author":{"gitId":"s7u4rt99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":24,"author":{"gitId":"s7u4rt99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":25,"author":{"gitId":"s7u4rt99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":26,"author":{"gitId":"s7u4rt99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"s7u4rt99"},"content":"    mainClassName \u003d \"duke.gui.Launcher\"","lastModifiedDate":"2021-09-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"s7u4rt99":15,"-":45}},{"path":"src/main/java/duke/ArchiveList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke;","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-07"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-07"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"/**","lastModifiedDate":"2021-09-07"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":" * Represents ArchiveList for Duke.","lastModifiedDate":"2021-09-07"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":" */","lastModifiedDate":"2021-09-07"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"public class ArchiveList extends DukeList {","lastModifiedDate":"2021-09-07"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"     * Constructor for ArchiveList.","lastModifiedDate":"2021-09-07"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"    public ArchiveList() {","lastModifiedDate":"2021-09-07"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"        super();","lastModifiedDate":"2021-09-07"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":17,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":18,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":19,"author":{"gitId":"s7u4rt99"},"content":"     * Constructor for ArchiveList, setting taskArrayList","lastModifiedDate":"2021-09-07"},{"lineNumber":20,"author":{"gitId":"s7u4rt99"},"content":"     * to a given list.","lastModifiedDate":"2021-09-07"},{"lineNumber":21,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":22,"author":{"gitId":"s7u4rt99"},"content":"     * @param list List to be assigned to taskArrayList.","lastModifiedDate":"2021-09-07"},{"lineNumber":23,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":24,"author":{"gitId":"s7u4rt99"},"content":"    public ArchiveList(ArrayList\u003cTask\u003e list) {","lastModifiedDate":"2021-09-07"},{"lineNumber":25,"author":{"gitId":"s7u4rt99"},"content":"        super(list);","lastModifiedDate":"2021-09-07"},{"lineNumber":26,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":27,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":28,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":29,"author":{"gitId":"s7u4rt99"},"content":"     * Getter for archived tasks.","lastModifiedDate":"2021-09-07"},{"lineNumber":30,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":31,"author":{"gitId":"s7u4rt99"},"content":"     * @return Archived tasks.","lastModifiedDate":"2021-09-07"},{"lineNumber":32,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":33,"author":{"gitId":"s7u4rt99"},"content":"    public ArrayList\u003cTask\u003e getArchivedTasks() {","lastModifiedDate":"2021-09-07"},{"lineNumber":34,"author":{"gitId":"s7u4rt99"},"content":"        return super.getTaskArrayList();","lastModifiedDate":"2021-09-07"},{"lineNumber":35,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":36,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":37,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":38,"author":{"gitId":"s7u4rt99"},"content":"     * Gets the type of list.","lastModifiedDate":"2021-09-07"},{"lineNumber":39,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":40,"author":{"gitId":"s7u4rt99"},"content":"     * @return \"archived list\"","lastModifiedDate":"2021-09-07"},{"lineNumber":41,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":42,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-09-07"},{"lineNumber":43,"author":{"gitId":"s7u4rt99"},"content":"    public String type() {","lastModifiedDate":"2021-09-07"},{"lineNumber":44,"author":{"gitId":"s7u4rt99"},"content":"        return \"archived list\";","lastModifiedDate":"2021-09-07"},{"lineNumber":45,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":46,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":47,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-09-07"}],"authorContributionMap":{"s7u4rt99":47}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"import duke.command.Command;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":" * Represents a program called Duke. A \u003ccode\u003e Duke \u003c/code\u003e is a software which","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":" * acts as a todolist.","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"public class Duke {","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"    private final Ui ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"    private final Storage storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"    private final TaskList taskList;","lastModifiedDate":"2021-09-06"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"    private final ArchiveList archiveList;","lastModifiedDate":"2021-09-07"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"s7u4rt99"},"content":"     * Constructor for Duke. Initialises Ui, Storage and TaskList objects.","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"s7u4rt99"},"content":"    public Duke() {","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"s7u4rt99"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"s7u4rt99"},"content":"        this.storage \u003d new Storage();","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"s7u4rt99"},"content":"        this.taskList \u003d new TaskList(storage.initialise());","lastModifiedDate":"2021-09-06"},{"lineNumber":23,"author":{"gitId":"s7u4rt99"},"content":"        this.archiveList \u003d new ArchiveList(storage.initialiseArchive());","lastModifiedDate":"2021-09-07"},{"lineNumber":24,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"s7u4rt99"},"content":"     * Runs the duke program.","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"s7u4rt99"},"content":"    public void run() {","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"s7u4rt99"},"content":"        ui.welcome();","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"s7u4rt99"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"s7u4rt99"},"content":"        while (!isExit) {","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"s7u4rt99"},"content":"            try {","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"s7u4rt99"},"content":"                String userInput \u003d ui.readInput();","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"s7u4rt99"},"content":"                Command c \u003d Parser.parse(userInput, ui, taskList, archiveList);","lastModifiedDate":"2021-09-07"},{"lineNumber":36,"author":{"gitId":"s7u4rt99"},"content":"                c.execute(taskList, archiveList, ui, storage);","lastModifiedDate":"2021-09-07"},{"lineNumber":37,"author":{"gitId":"s7u4rt99"},"content":"                isExit \u003d c.isExit();","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"s7u4rt99"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2021-08-18"},{"lineNumber":39,"author":{"gitId":"s7u4rt99"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2021-08-18"},{"lineNumber":40,"author":{"gitId":"s7u4rt99"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":42,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":43,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":45,"author":{"gitId":"s7u4rt99"},"content":"     * Processes the input string and returns a string to be displayed to","lastModifiedDate":"2021-09-02"},{"lineNumber":46,"author":{"gitId":"s7u4rt99"},"content":"     * the user on the GUI.","lastModifiedDate":"2021-09-02"},{"lineNumber":47,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":48,"author":{"gitId":"s7u4rt99"},"content":"     * @param input String input to be processed.","lastModifiedDate":"2021-09-02"},{"lineNumber":49,"author":{"gitId":"s7u4rt99"},"content":"     * @return String to be displayed to the user on the GUI.","lastModifiedDate":"2021-09-02"},{"lineNumber":50,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":51,"author":{"gitId":"s7u4rt99"},"content":"    public String processInput(String input) {","lastModifiedDate":"2021-09-02"},{"lineNumber":52,"author":{"gitId":"s7u4rt99"},"content":"        try {","lastModifiedDate":"2021-09-02"},{"lineNumber":53,"author":{"gitId":"s7u4rt99"},"content":"            Command c \u003d Parser.parse(input, ui, taskList, archiveList);","lastModifiedDate":"2021-09-07"},{"lineNumber":54,"author":{"gitId":"s7u4rt99"},"content":"            return c.formatExecutedString(taskList, archiveList, ui, storage);","lastModifiedDate":"2021-09-07"},{"lineNumber":55,"author":{"gitId":"s7u4rt99"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-09-02"},{"lineNumber":56,"author":{"gitId":"s7u4rt99"},"content":"            return e.getMessage();","lastModifiedDate":"2021-09-02"},{"lineNumber":57,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-02"},{"lineNumber":58,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":59,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":60,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"s7u4rt99"},"content":"     * Main method for Duke program.","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":63,"author":{"gitId":"s7u4rt99"},"content":"     * @param args Arguments for main method.","lastModifiedDate":"2021-08-26"},{"lineNumber":64,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":65,"author":{"gitId":"s7u4rt99"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"s7u4rt99"},"content":"        new Duke().run();","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":68,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"s7u4rt99":67,"-":2}},{"path":"src/main/java/duke/DukeList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke;","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-07"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-07"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"/**","lastModifiedDate":"2021-09-07"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":" * Represents Tasks for Duke.","lastModifiedDate":"2021-09-07"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":" */","lastModifiedDate":"2021-09-07"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"public abstract class DukeList {","lastModifiedDate":"2021-09-07"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"    private final ArrayList\u003cTask\u003e taskArrayList;","lastModifiedDate":"2021-09-07"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"     * Constructor for DukeList.","lastModifiedDate":"2021-09-07"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":"    public DukeList() {","lastModifiedDate":"2021-09-07"},{"lineNumber":17,"author":{"gitId":"s7u4rt99"},"content":"        this.taskArrayList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-07"},{"lineNumber":18,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":19,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":20,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":21,"author":{"gitId":"s7u4rt99"},"content":"     * Constructor for DukeList, which assigns the taskArrayList to a","lastModifiedDate":"2021-09-07"},{"lineNumber":22,"author":{"gitId":"s7u4rt99"},"content":"     * specific ArrayList.","lastModifiedDate":"2021-09-07"},{"lineNumber":23,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":24,"author":{"gitId":"s7u4rt99"},"content":"     * @param taskArrayList ArrayList to be assigned to taskArrayList.","lastModifiedDate":"2021-09-07"},{"lineNumber":25,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":26,"author":{"gitId":"s7u4rt99"},"content":"    public DukeList(ArrayList\u003cTask\u003e taskArrayList) {","lastModifiedDate":"2021-09-07"},{"lineNumber":27,"author":{"gitId":"s7u4rt99"},"content":"        this.taskArrayList \u003d taskArrayList;","lastModifiedDate":"2021-09-07"},{"lineNumber":28,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":29,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":30,"author":{"gitId":"s7u4rt99"},"content":"    public abstract String type();","lastModifiedDate":"2021-09-07"},{"lineNumber":31,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":32,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":33,"author":{"gitId":"s7u4rt99"},"content":"     * Adds a new Task to taskArrayList.","lastModifiedDate":"2021-09-07"},{"lineNumber":34,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":35,"author":{"gitId":"s7u4rt99"},"content":"     * @param toAdd Task to add to tasks.","lastModifiedDate":"2021-09-07"},{"lineNumber":36,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":37,"author":{"gitId":"s7u4rt99"},"content":"    public void add(Task toAdd) {","lastModifiedDate":"2021-09-07"},{"lineNumber":38,"author":{"gitId":"s7u4rt99"},"content":"        this.taskArrayList.add(toAdd);","lastModifiedDate":"2021-09-07"},{"lineNumber":39,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":40,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":41,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":42,"author":{"gitId":"s7u4rt99"},"content":"     * Getter for taskArrayList.","lastModifiedDate":"2021-09-07"},{"lineNumber":43,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":44,"author":{"gitId":"s7u4rt99"},"content":"     * @return tasks.","lastModifiedDate":"2021-09-07"},{"lineNumber":45,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":46,"author":{"gitId":"s7u4rt99"},"content":"    public ArrayList\u003cTask\u003e getTaskArrayList() {","lastModifiedDate":"2021-09-07"},{"lineNumber":47,"author":{"gitId":"s7u4rt99"},"content":"        return this.taskArrayList;","lastModifiedDate":"2021-09-07"},{"lineNumber":48,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":49,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":50,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":51,"author":{"gitId":"s7u4rt99"},"content":"     * Removes Task from given index from taskArrayList.","lastModifiedDate":"2021-09-07"},{"lineNumber":52,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":53,"author":{"gitId":"s7u4rt99"},"content":"     * @param index Index of Task to remove from taskArrayList.","lastModifiedDate":"2021-09-07"},{"lineNumber":54,"author":{"gitId":"s7u4rt99"},"content":"     * @return The removed Task.","lastModifiedDate":"2021-09-07"},{"lineNumber":55,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":56,"author":{"gitId":"s7u4rt99"},"content":"    public Task remove(int index) {","lastModifiedDate":"2021-09-07"},{"lineNumber":57,"author":{"gitId":"s7u4rt99"},"content":"        return this.taskArrayList.remove(index);","lastModifiedDate":"2021-09-07"},{"lineNumber":58,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":59,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":60,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":61,"author":{"gitId":"s7u4rt99"},"content":"     * Gets the size of taskArrayList.","lastModifiedDate":"2021-09-07"},{"lineNumber":62,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":63,"author":{"gitId":"s7u4rt99"},"content":"     * @return Size of tasks.","lastModifiedDate":"2021-09-07"},{"lineNumber":64,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":65,"author":{"gitId":"s7u4rt99"},"content":"    public int getSize() {","lastModifiedDate":"2021-09-07"},{"lineNumber":66,"author":{"gitId":"s7u4rt99"},"content":"        return this.taskArrayList.size();","lastModifiedDate":"2021-09-07"},{"lineNumber":67,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":68,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":69,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":70,"author":{"gitId":"s7u4rt99"},"content":"     * Converts Task of a given index in tasks into its String representation.","lastModifiedDate":"2021-09-07"},{"lineNumber":71,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":72,"author":{"gitId":"s7u4rt99"},"content":"     * @param index Index of Task to get the String representation.","lastModifiedDate":"2021-09-07"},{"lineNumber":73,"author":{"gitId":"s7u4rt99"},"content":"     * @return String representation of Task in tasks with given index.","lastModifiedDate":"2021-09-07"},{"lineNumber":74,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":75,"author":{"gitId":"s7u4rt99"},"content":"    public String taskToString(int index) {","lastModifiedDate":"2021-09-07"},{"lineNumber":76,"author":{"gitId":"s7u4rt99"},"content":"        return this.taskArrayList.get(index).toString();","lastModifiedDate":"2021-09-07"},{"lineNumber":77,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":78,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":79,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":80,"author":{"gitId":"s7u4rt99"},"content":"     * Converts Task of a given index in tasks to its String representation to save.","lastModifiedDate":"2021-09-07"},{"lineNumber":81,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":82,"author":{"gitId":"s7u4rt99"},"content":"     * @param index Index of Task to get the String representation to save.","lastModifiedDate":"2021-09-07"},{"lineNumber":83,"author":{"gitId":"s7u4rt99"},"content":"     * @return String representation of Task in tasks with given index.","lastModifiedDate":"2021-09-07"},{"lineNumber":84,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":85,"author":{"gitId":"s7u4rt99"},"content":"    public String taskSaveToString(int index) {","lastModifiedDate":"2021-09-07"},{"lineNumber":86,"author":{"gitId":"s7u4rt99"},"content":"        return this.taskArrayList.get(index).convertToString();","lastModifiedDate":"2021-09-07"},{"lineNumber":87,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":88,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":89,"author":{"gitId":"s7u4rt99"},"content":"    public Task get(int index) {","lastModifiedDate":"2021-09-07"},{"lineNumber":90,"author":{"gitId":"s7u4rt99"},"content":"        return this.taskArrayList.get(index);","lastModifiedDate":"2021-09-07"},{"lineNumber":91,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":92,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":93,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":94,"author":{"gitId":"s7u4rt99"},"content":"     * Converts DukeList object into its String representation.","lastModifiedDate":"2021-09-07"},{"lineNumber":95,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":96,"author":{"gitId":"s7u4rt99"},"content":"     * @return String representation of TaskList object.","lastModifiedDate":"2021-09-07"},{"lineNumber":97,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":98,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-09-07"},{"lineNumber":99,"author":{"gitId":"s7u4rt99"},"content":"    public String toString() {","lastModifiedDate":"2021-09-07"},{"lineNumber":100,"author":{"gitId":"s7u4rt99"},"content":"        return taskArrayList.toString();","lastModifiedDate":"2021-09-07"},{"lineNumber":101,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":102,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-09-07"}],"authorContributionMap":{"s7u4rt99":102}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"import duke.command.AddCommand;","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":"import duke.command.ArchiveCommand;","lastModifiedDate":"2021-09-07"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":"import duke.command.Command;","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"import duke.command.DoneCommand;","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"import duke.command.ExitCommand;","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"import duke.command.FindCommand;","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":"import duke.command.ListArchiveCommand;","lastModifiedDate":"2021-09-07"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"import duke.command.ListCommand;","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"import duke.command.RemoveArchiveCommand;","lastModifiedDate":"2021-09-07"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"import duke.command.RemoveCommand;","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"import duke.exception.*;","lastModifiedDate":"2021-09-07"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"import duke.task.Event;","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":"import duke.task.ToDo;","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"s7u4rt99"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"s7u4rt99"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"s7u4rt99"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"s7u4rt99"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"s7u4rt99"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"s7u4rt99"},"content":" * Represents a parser which parses the input given by users of Duke.","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"s7u4rt99"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"s7u4rt99"},"content":"public class Parser {","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"s7u4rt99"},"content":"        private static final String SPACE \u003d \" \";","lastModifiedDate":"2021-09-06"},{"lineNumber":28,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":29,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"s7u4rt99"},"content":"     * Checks if dateString is in a valid date form depicted by dateFormatter.","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"s7u4rt99"},"content":"     * @param dateString String which contains a date.","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"s7u4rt99"},"content":"     * @param dateFormatter Format which you want to check if dateString is in.","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"s7u4rt99"},"content":"     * @return true if dateString is in valid form, else otherwise.","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"s7u4rt99"},"content":"    public static boolean isValidDate(String dateString, DateTimeFormatter dateFormatter) {","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"s7u4rt99"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"s7u4rt99"},"content":"            LocalDate.parse(dateString, dateFormatter);","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"s7u4rt99"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"s7u4rt99"},"content":"            return false;","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"s7u4rt99"},"content":"        return true;","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"s7u4rt99"},"content":"     * Checks if timeString is in a valid date form depicted by timeFormatter.","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"s7u4rt99"},"content":"     * @param timeString String which contains a time.","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"s7u4rt99"},"content":"     * @param timeFormatter Format which you want to check if timeString is in.","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"s7u4rt99"},"content":"     * @return true if timeString is in valid form, else otherwise.","lastModifiedDate":"2021-08-26"},{"lineNumber":51,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":52,"author":{"gitId":"s7u4rt99"},"content":"    public static boolean isValidTime(String timeString, DateTimeFormatter timeFormatter) {","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"s7u4rt99"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"s7u4rt99"},"content":"            LocalTime.parse(timeString, timeFormatter);","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"s7u4rt99"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"s7u4rt99"},"content":"            return false;","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"s7u4rt99"},"content":"        return true;","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"s7u4rt99"},"content":"     * Checks if input is a remove command.","lastModifiedDate":"2021-08-26"},{"lineNumber":63,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":64,"author":{"gitId":"s7u4rt99"},"content":"     * @param input Input which is being checked.","lastModifiedDate":"2021-08-26"},{"lineNumber":65,"author":{"gitId":"s7u4rt99"},"content":"     * @return true if input is a remove command.","lastModifiedDate":"2021-08-26"},{"lineNumber":66,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":67,"author":{"gitId":"s7u4rt99"},"content":"    public static boolean isRemove(String input) {","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"s7u4rt99"},"content":"        String[] separated \u003d input.split(SPACE);","lastModifiedDate":"2021-09-06"},{"lineNumber":69,"author":{"gitId":"s7u4rt99"},"content":"        return separated[0].equals(\"remove\");","lastModifiedDate":"2021-09-06"},{"lineNumber":70,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":73,"author":{"gitId":"s7u4rt99"},"content":"     * Checks if input is a done command.","lastModifiedDate":"2021-08-26"},{"lineNumber":74,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":75,"author":{"gitId":"s7u4rt99"},"content":"     * @param input Input which is being checked.","lastModifiedDate":"2021-08-26"},{"lineNumber":76,"author":{"gitId":"s7u4rt99"},"content":"     * @return true if input is a done command.","lastModifiedDate":"2021-08-26"},{"lineNumber":77,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":78,"author":{"gitId":"s7u4rt99"},"content":"    public static boolean isDone(String input) {","lastModifiedDate":"2021-08-26"},{"lineNumber":79,"author":{"gitId":"s7u4rt99"},"content":"        String[] separated \u003d input.split(SPACE);","lastModifiedDate":"2021-09-06"},{"lineNumber":80,"author":{"gitId":"s7u4rt99"},"content":"        return separated[0].equals(\"done\");","lastModifiedDate":"2021-09-06"},{"lineNumber":81,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":82,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":83,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":84,"author":{"gitId":"s7u4rt99"},"content":"     * Checks if user input is a find command.","lastModifiedDate":"2021-08-26"},{"lineNumber":85,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":86,"author":{"gitId":"s7u4rt99"},"content":"     * @param input User input to check if it is a find command.","lastModifiedDate":"2021-08-26"},{"lineNumber":87,"author":{"gitId":"s7u4rt99"},"content":"     * @return true if it is a find command, else false.","lastModifiedDate":"2021-08-26"},{"lineNumber":88,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":89,"author":{"gitId":"s7u4rt99"},"content":"    public static boolean isFind(String input) {","lastModifiedDate":"2021-08-26"},{"lineNumber":90,"author":{"gitId":"s7u4rt99"},"content":"        String[] separated \u003d input.split(SPACE);","lastModifiedDate":"2021-09-06"},{"lineNumber":91,"author":{"gitId":"s7u4rt99"},"content":"        return separated[0].equals(\"find\");","lastModifiedDate":"2021-09-06"},{"lineNumber":92,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":93,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":94,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":95,"author":{"gitId":"s7u4rt99"},"content":"     * Checks if input is a list or list archive command.","lastModifiedDate":"2021-09-07"},{"lineNumber":96,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":97,"author":{"gitId":"s7u4rt99"},"content":"     * @param input Input which is being checked.","lastModifiedDate":"2021-09-06"},{"lineNumber":98,"author":{"gitId":"s7u4rt99"},"content":"     * @return true if input is a list command.","lastModifiedDate":"2021-09-06"},{"lineNumber":99,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":100,"author":{"gitId":"s7u4rt99"},"content":"    private static boolean isListOrListArchive(String input) {","lastModifiedDate":"2021-09-07"},{"lineNumber":101,"author":{"gitId":"s7u4rt99"},"content":"        return isList(input) || isListArchive(input);","lastModifiedDate":"2021-09-07"},{"lineNumber":102,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":103,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":104,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":105,"author":{"gitId":"s7u4rt99"},"content":"     * Checks if userInput is a list command.","lastModifiedDate":"2021-09-07"},{"lineNumber":106,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":107,"author":{"gitId":"s7u4rt99"},"content":"     * @param userInput Input to be checked.","lastModifiedDate":"2021-09-07"},{"lineNumber":108,"author":{"gitId":"s7u4rt99"},"content":"     * @return true if it is a list command.","lastModifiedDate":"2021-09-07"},{"lineNumber":109,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":110,"author":{"gitId":"s7u4rt99"},"content":"    private static boolean isList(String userInput) {","lastModifiedDate":"2021-09-07"},{"lineNumber":111,"author":{"gitId":"s7u4rt99"},"content":"        String[] separated \u003d userInput.split(\" \");","lastModifiedDate":"2021-09-07"},{"lineNumber":112,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":113,"author":{"gitId":"s7u4rt99"},"content":"        return separated.length \u003d\u003d 1 \u0026\u0026 separated[0].equals(\"list\");","lastModifiedDate":"2021-09-07"},{"lineNumber":114,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":115,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":116,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":117,"author":{"gitId":"s7u4rt99"},"content":"     * Checks if userInput is a list archive command.","lastModifiedDate":"2021-09-07"},{"lineNumber":118,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":119,"author":{"gitId":"s7u4rt99"},"content":"     * @param userInput Input to be checked.","lastModifiedDate":"2021-09-07"},{"lineNumber":120,"author":{"gitId":"s7u4rt99"},"content":"     * @return true if it is a list archive command.","lastModifiedDate":"2021-09-07"},{"lineNumber":121,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":122,"author":{"gitId":"s7u4rt99"},"content":"    private static boolean isListArchive(String userInput) {","lastModifiedDate":"2021-09-07"},{"lineNumber":123,"author":{"gitId":"s7u4rt99"},"content":"        String[] separated \u003d userInput.split(\" \");","lastModifiedDate":"2021-09-07"},{"lineNumber":124,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":125,"author":{"gitId":"s7u4rt99"},"content":"        return separated.length \u003d\u003d 2 \u0026\u0026 separated[1].equals(\"archive\") \u0026\u0026 isList(separated[0]);","lastModifiedDate":"2021-09-07"},{"lineNumber":126,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":127,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":128,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":129,"author":{"gitId":"s7u4rt99"},"content":"     * Checks if input is an event command.","lastModifiedDate":"2021-09-06"},{"lineNumber":130,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":131,"author":{"gitId":"s7u4rt99"},"content":"     * @param input Input which is being checked.","lastModifiedDate":"2021-09-06"},{"lineNumber":132,"author":{"gitId":"s7u4rt99"},"content":"     * @return true if input is a event command.","lastModifiedDate":"2021-09-06"},{"lineNumber":133,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":134,"author":{"gitId":"s7u4rt99"},"content":"    private static boolean isEvent(String input) {","lastModifiedDate":"2021-09-06"},{"lineNumber":135,"author":{"gitId":"s7u4rt99"},"content":"        String[] separated \u003d input.split(SPACE);","lastModifiedDate":"2021-09-06"},{"lineNumber":136,"author":{"gitId":"s7u4rt99"},"content":"        return separated[0].equals(\"event\");","lastModifiedDate":"2021-09-06"},{"lineNumber":137,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":138,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":139,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":140,"author":{"gitId":"s7u4rt99"},"content":"     * Checks if input is a deadline command.","lastModifiedDate":"2021-09-06"},{"lineNumber":141,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":142,"author":{"gitId":"s7u4rt99"},"content":"     * @param input Input which is being checked.","lastModifiedDate":"2021-09-06"},{"lineNumber":143,"author":{"gitId":"s7u4rt99"},"content":"     * @return true if input is a deadline command.","lastModifiedDate":"2021-09-06"},{"lineNumber":144,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":145,"author":{"gitId":"s7u4rt99"},"content":"    private static boolean isDeadline(String input) {","lastModifiedDate":"2021-09-06"},{"lineNumber":146,"author":{"gitId":"s7u4rt99"},"content":"        String[] separated \u003d input.split(SPACE);","lastModifiedDate":"2021-09-06"},{"lineNumber":147,"author":{"gitId":"s7u4rt99"},"content":"        return separated[0].equals(\"deadline\");","lastModifiedDate":"2021-09-06"},{"lineNumber":148,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":149,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":150,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":151,"author":{"gitId":"s7u4rt99"},"content":"     * Checks if input is a todo command.","lastModifiedDate":"2021-09-06"},{"lineNumber":152,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":153,"author":{"gitId":"s7u4rt99"},"content":"     * @param input Input which is being checked.","lastModifiedDate":"2021-09-06"},{"lineNumber":154,"author":{"gitId":"s7u4rt99"},"content":"     * @return true if input is a todo command.","lastModifiedDate":"2021-09-06"},{"lineNumber":155,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":156,"author":{"gitId":"s7u4rt99"},"content":"    private static boolean isTodo(String input) {","lastModifiedDate":"2021-09-06"},{"lineNumber":157,"author":{"gitId":"s7u4rt99"},"content":"        String[] separated \u003d input.split(SPACE);","lastModifiedDate":"2021-09-06"},{"lineNumber":158,"author":{"gitId":"s7u4rt99"},"content":"        return separated[0].equals(\"todo\");","lastModifiedDate":"2021-09-06"},{"lineNumber":159,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":160,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":161,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":162,"author":{"gitId":"s7u4rt99"},"content":"     * Checks if input is an archive command.","lastModifiedDate":"2021-09-07"},{"lineNumber":163,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":164,"author":{"gitId":"s7u4rt99"},"content":"     * @param input Input which is being checked.","lastModifiedDate":"2021-09-07"},{"lineNumber":165,"author":{"gitId":"s7u4rt99"},"content":"     * @return true if input is an archive command.","lastModifiedDate":"2021-09-07"},{"lineNumber":166,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":167,"author":{"gitId":"s7u4rt99"},"content":"    private static boolean isArchive(String input) {","lastModifiedDate":"2021-09-07"},{"lineNumber":168,"author":{"gitId":"s7u4rt99"},"content":"        String[] separated \u003d input.split(\" \");","lastModifiedDate":"2021-09-07"},{"lineNumber":169,"author":{"gitId":"s7u4rt99"},"content":"        return separated[0].equals(\"archive\");","lastModifiedDate":"2021-09-07"},{"lineNumber":170,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":171,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":172,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":173,"author":{"gitId":"s7u4rt99"},"content":"     * Checks if input is a bye command.","lastModifiedDate":"2021-09-06"},{"lineNumber":174,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":175,"author":{"gitId":"s7u4rt99"},"content":"     * @param input Input which is being checked.","lastModifiedDate":"2021-09-06"},{"lineNumber":176,"author":{"gitId":"s7u4rt99"},"content":"     * @return true if input is a bye command.","lastModifiedDate":"2021-09-06"},{"lineNumber":177,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":178,"author":{"gitId":"s7u4rt99"},"content":"    private static boolean isBye(String input) {","lastModifiedDate":"2021-09-06"},{"lineNumber":179,"author":{"gitId":"s7u4rt99"},"content":"        return input.equals(\"bye\");","lastModifiedDate":"2021-09-06"},{"lineNumber":180,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":181,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":182,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":183,"author":{"gitId":"s7u4rt99"},"content":"     * Checks if String is an Integer or \"all\" word.","lastModifiedDate":"2021-09-07"},{"lineNumber":184,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":185,"author":{"gitId":"s7u4rt99"},"content":"     * @param s String to check.","lastModifiedDate":"2021-09-07"},{"lineNumber":186,"author":{"gitId":"s7u4rt99"},"content":"     * @return true if it is an Integer or \"all\" word, else false.","lastModifiedDate":"2021-09-07"},{"lineNumber":187,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":188,"author":{"gitId":"s7u4rt99"},"content":"    private static boolean isIntegerOrAll(String s) {","lastModifiedDate":"2021-09-07"},{"lineNumber":189,"author":{"gitId":"s7u4rt99"},"content":"        return isPositiveInteger(s) || isAll(s);","lastModifiedDate":"2021-09-07"},{"lineNumber":190,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":191,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":192,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":193,"author":{"gitId":"s7u4rt99"},"content":"     * Checks if String is \"all\" word.","lastModifiedDate":"2021-09-07"},{"lineNumber":194,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":195,"author":{"gitId":"s7u4rt99"},"content":"     * @param s String to check.","lastModifiedDate":"2021-09-07"},{"lineNumber":196,"author":{"gitId":"s7u4rt99"},"content":"     * @return true if it is an \"all\" word.","lastModifiedDate":"2021-09-07"},{"lineNumber":197,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":198,"author":{"gitId":"s7u4rt99"},"content":"    private static boolean isAll(String s) {","lastModifiedDate":"2021-09-07"},{"lineNumber":199,"author":{"gitId":"s7u4rt99"},"content":"        return s.equals(\"all\");","lastModifiedDate":"2021-09-07"},{"lineNumber":200,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":201,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":202,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":203,"author":{"gitId":"s7u4rt99"},"content":"     * Checks if String is an Integer.","lastModifiedDate":"2021-09-07"},{"lineNumber":204,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":205,"author":{"gitId":"s7u4rt99"},"content":"     * @param s String to check.","lastModifiedDate":"2021-09-07"},{"lineNumber":206,"author":{"gitId":"s7u4rt99"},"content":"     * @return true if it is an Integer.","lastModifiedDate":"2021-09-07"},{"lineNumber":207,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":208,"author":{"gitId":"s7u4rt99"},"content":"    private static boolean isPositiveInteger(String s) {","lastModifiedDate":"2021-09-07"},{"lineNumber":209,"author":{"gitId":"s7u4rt99"},"content":"        return s.matches(\"\\\\d+\");","lastModifiedDate":"2021-09-07"},{"lineNumber":210,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":211,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":212,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":213,"author":{"gitId":"s7u4rt99"},"content":"     * Checks if string is within range of given taskList.","lastModifiedDate":"2021-09-07"},{"lineNumber":214,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":215,"author":{"gitId":"s7u4rt99"},"content":"     * @param dukeList taskList to see if index s is within.","lastModifiedDate":"2021-09-07"},{"lineNumber":216,"author":{"gitId":"s7u4rt99"},"content":"     * @param s String to check if is within range of taskList.","lastModifiedDate":"2021-09-07"},{"lineNumber":217,"author":{"gitId":"s7u4rt99"},"content":"     * @return true if String is within the range of the taskList, else false.","lastModifiedDate":"2021-09-07"},{"lineNumber":218,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":219,"author":{"gitId":"s7u4rt99"},"content":"    private static boolean isOutOfRange(DukeList dukeList, String s) {","lastModifiedDate":"2021-09-07"},{"lineNumber":220,"author":{"gitId":"s7u4rt99"},"content":"        return !isAll(s) \u0026\u0026 (isExceedLength(dukeList, s) || isLessThanOne(s));","lastModifiedDate":"2021-09-07"},{"lineNumber":221,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":222,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":223,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":224,"author":{"gitId":"s7u4rt99"},"content":"     * Checks if integer value of s is less than 1.","lastModifiedDate":"2021-09-07"},{"lineNumber":225,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":226,"author":{"gitId":"s7u4rt99"},"content":"     * @param s String which is to be converted intp integer value.","lastModifiedDate":"2021-09-07"},{"lineNumber":227,"author":{"gitId":"s7u4rt99"},"content":"     * @return true if integer value of s is less than 1, false otherwise.","lastModifiedDate":"2021-09-07"},{"lineNumber":228,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":229,"author":{"gitId":"s7u4rt99"},"content":"    private static boolean isLessThanOne(String s) {","lastModifiedDate":"2021-09-07"},{"lineNumber":230,"author":{"gitId":"s7u4rt99"},"content":"        return Integer.valueOf(s) \u003c 1;","lastModifiedDate":"2021-09-07"},{"lineNumber":231,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":232,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":233,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":234,"author":{"gitId":"s7u4rt99"},"content":"     * Checks if integer value of s exceeds the length of dukeList.","lastModifiedDate":"2021-09-07"},{"lineNumber":235,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":236,"author":{"gitId":"s7u4rt99"},"content":"     * @param dukeList DukeList to check if integer value of s exceeds.","lastModifiedDate":"2021-09-07"},{"lineNumber":237,"author":{"gitId":"s7u4rt99"},"content":"     * @param s String which is to be converted into integer value.","lastModifiedDate":"2021-09-07"},{"lineNumber":238,"author":{"gitId":"s7u4rt99"},"content":"     * @return true if integer value of s does not exceed length of dukeList,","lastModifiedDate":"2021-09-07"},{"lineNumber":239,"author":{"gitId":"s7u4rt99"},"content":"     * false otherwise.","lastModifiedDate":"2021-09-07"},{"lineNumber":240,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":241,"author":{"gitId":"s7u4rt99"},"content":"    private static boolean isExceedLength(DukeList dukeList, String s) {","lastModifiedDate":"2021-09-07"},{"lineNumber":242,"author":{"gitId":"s7u4rt99"},"content":"        return Integer.valueOf(s) \u003e dukeList.getSize();","lastModifiedDate":"2021-09-07"},{"lineNumber":243,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":244,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":245,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":246,"author":{"gitId":"s7u4rt99"},"content":"     * Splits string which contains a description and possibly a deadline of Task Objects.","lastModifiedDate":"2021-08-26"},{"lineNumber":247,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":248,"author":{"gitId":"s7u4rt99"},"content":"     * @param input Input which contains a description and possibly a deadline.","lastModifiedDate":"2021-08-26"},{"lineNumber":249,"author":{"gitId":"s7u4rt99"},"content":"     * @param type Type of Task information the input contains.","lastModifiedDate":"2021-08-26"},{"lineNumber":250,"author":{"gitId":"s7u4rt99"},"content":"     * @return String[] containing the description at index 0 and the deadline (if any) at index 1.","lastModifiedDate":"2021-08-26"},{"lineNumber":251,"author":{"gitId":"s7u4rt99"},"content":"     * @throws DukeException If no deadline or description for respective Task objects.","lastModifiedDate":"2021-08-26"},{"lineNumber":252,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":253,"author":{"gitId":"s7u4rt99"},"content":"    public static String[] splitInput(String input, String type) throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":254,"author":{"gitId":"s7u4rt99"},"content":"        if (Parser.isDeadline(type) || Parser.isEvent(type)) {","lastModifiedDate":"2021-09-06"},{"lineNumber":255,"author":{"gitId":"s7u4rt99"},"content":"            String[] str \u003d input.split(\"/\");","lastModifiedDate":"2021-08-25"},{"lineNumber":256,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":257,"author":{"gitId":"s7u4rt99"},"content":"            if (str.length \u003d\u003d 1) {","lastModifiedDate":"2021-08-25"},{"lineNumber":258,"author":{"gitId":"s7u4rt99"},"content":"                if (type.equals(\"deadline\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":259,"author":{"gitId":"s7u4rt99"},"content":"                    throw new IncompleteDeadlineException();","lastModifiedDate":"2021-08-25"},{"lineNumber":260,"author":{"gitId":"s7u4rt99"},"content":"                } else if (type.equals(\"event\")) {","lastModifiedDate":"2021-09-06"},{"lineNumber":261,"author":{"gitId":"s7u4rt99"},"content":"                    throw new IncompleteEventException();","lastModifiedDate":"2021-08-25"},{"lineNumber":262,"author":{"gitId":"s7u4rt99"},"content":"                } else {","lastModifiedDate":"2021-09-06"},{"lineNumber":263,"author":{"gitId":"s7u4rt99"},"content":"                    throw new InvalidCommandException();","lastModifiedDate":"2021-09-06"},{"lineNumber":264,"author":{"gitId":"s7u4rt99"},"content":"                }","lastModifiedDate":"2021-08-25"},{"lineNumber":265,"author":{"gitId":"s7u4rt99"},"content":"            } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":266,"author":{"gitId":"s7u4rt99"},"content":"                String[] first \u003d str[0].split(SPACE);","lastModifiedDate":"2021-09-06"},{"lineNumber":267,"author":{"gitId":"s7u4rt99"},"content":"                String[] second \u003d str[1].split(SPACE);","lastModifiedDate":"2021-09-06"},{"lineNumber":268,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":269,"author":{"gitId":"s7u4rt99"},"content":"                String description \u003d getDescription(first);","lastModifiedDate":"2021-09-06"},{"lineNumber":270,"author":{"gitId":"s7u4rt99"},"content":"                String deadline \u003d getDeadline(second);","lastModifiedDate":"2021-09-06"},{"lineNumber":271,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":272,"author":{"gitId":"s7u4rt99"},"content":"                return new String[]{description, deadline};","lastModifiedDate":"2021-09-06"},{"lineNumber":273,"author":{"gitId":"s7u4rt99"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":274,"author":{"gitId":"s7u4rt99"},"content":"        } else if (Parser.isTodo(type)) {","lastModifiedDate":"2021-09-06"},{"lineNumber":275,"author":{"gitId":"s7u4rt99"},"content":"            String[] str \u003d input.split(SPACE);","lastModifiedDate":"2021-09-06"},{"lineNumber":276,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":277,"author":{"gitId":"s7u4rt99"},"content":"            if (str.length \u003d\u003d 1) {","lastModifiedDate":"2021-09-06"},{"lineNumber":278,"author":{"gitId":"s7u4rt99"},"content":"                throw new IncompleteToDoException();","lastModifiedDate":"2021-09-06"},{"lineNumber":279,"author":{"gitId":"s7u4rt99"},"content":"            } else {","lastModifiedDate":"2021-09-06"},{"lineNumber":280,"author":{"gitId":"s7u4rt99"},"content":"                String description \u003d getDescription(str);","lastModifiedDate":"2021-09-06"},{"lineNumber":281,"author":{"gitId":"s7u4rt99"},"content":"                return new String[]{description};","lastModifiedDate":"2021-09-06"},{"lineNumber":282,"author":{"gitId":"s7u4rt99"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":283,"author":{"gitId":"s7u4rt99"},"content":"        } else {","lastModifiedDate":"2021-09-06"},{"lineNumber":284,"author":{"gitId":"s7u4rt99"},"content":"            throw new InvalidCommandException();","lastModifiedDate":"2021-09-06"},{"lineNumber":285,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-06"},{"lineNumber":286,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":287,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":288,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":289,"author":{"gitId":"s7u4rt99"},"content":"     * Gets the deadline from an array of string.","lastModifiedDate":"2021-09-06"},{"lineNumber":290,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":291,"author":{"gitId":"s7u4rt99"},"content":"     * @param strings Array which deadline will be derived from.","lastModifiedDate":"2021-09-06"},{"lineNumber":292,"author":{"gitId":"s7u4rt99"},"content":"     * @return The deadline.","lastModifiedDate":"2021-09-06"},{"lineNumber":293,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":294,"author":{"gitId":"s7u4rt99"},"content":"    private static String getDeadline(String[] strings) {","lastModifiedDate":"2021-09-06"},{"lineNumber":295,"author":{"gitId":"s7u4rt99"},"content":"        String deadline \u003d \"\";","lastModifiedDate":"2021-09-06"},{"lineNumber":296,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":297,"author":{"gitId":"s7u4rt99"},"content":"        for (int i \u003d 1; i \u003c strings.length; i++) {","lastModifiedDate":"2021-09-06"},{"lineNumber":298,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":299,"author":{"gitId":"s7u4rt99"},"content":"            if (i \u003d\u003d 1 \u0026\u0026 (strings[i].equals(\"by\") || strings[i].equals(\"at\")) \u0026\u0026","lastModifiedDate":"2021-09-07"},{"lineNumber":300,"author":{"gitId":"s7u4rt99"},"content":"                    !(strings[0].equals(\"by\") || strings[0].equals(\"at\"))) {","lastModifiedDate":"2021-09-07"},{"lineNumber":301,"author":{"gitId":"s7u4rt99"},"content":"                // handle the case where user formatted command wrongly (include a space after \"/\")","lastModifiedDate":"2021-08-25"},{"lineNumber":302,"author":{"gitId":"s7u4rt99"},"content":"                continue;","lastModifiedDate":"2021-08-25"},{"lineNumber":303,"author":{"gitId":"s7u4rt99"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":304,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":305,"author":{"gitId":"s7u4rt99"},"content":"            if (Parser.isValidDate(strings[i], DateTimeFormatter.ISO_LOCAL_DATE)) {","lastModifiedDate":"2021-09-06"},{"lineNumber":306,"author":{"gitId":"s7u4rt99"},"content":"                deadline +\u003d LocalDate.parse(strings[i], DateTimeFormatter.ISO_LOCAL_DATE)","lastModifiedDate":"2021-09-06"},{"lineNumber":307,"author":{"gitId":"s7u4rt99"},"content":"                        .format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2021-08-26"},{"lineNumber":308,"author":{"gitId":"s7u4rt99"},"content":"            } else if (Parser.isValidTime(strings[i], DateTimeFormatter.ISO_LOCAL_TIME)) {","lastModifiedDate":"2021-09-06"},{"lineNumber":309,"author":{"gitId":"s7u4rt99"},"content":"                deadline +\u003d LocalTime.parse(strings[i], DateTimeFormatter.ISO_LOCAL_TIME)","lastModifiedDate":"2021-09-06"},{"lineNumber":310,"author":{"gitId":"s7u4rt99"},"content":"                        .format(DateTimeFormatter.ofPattern(\"hh:mm a\"));","lastModifiedDate":"2021-08-26"},{"lineNumber":311,"author":{"gitId":"s7u4rt99"},"content":"            } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":312,"author":{"gitId":"s7u4rt99"},"content":"                deadline +\u003d strings[i];","lastModifiedDate":"2021-09-06"},{"lineNumber":313,"author":{"gitId":"s7u4rt99"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":314,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":315,"author":{"gitId":"s7u4rt99"},"content":"            if (i !\u003d strings.length - 1) {","lastModifiedDate":"2021-09-06"},{"lineNumber":316,"author":{"gitId":"s7u4rt99"},"content":"                deadline +\u003d SPACE;","lastModifiedDate":"2021-09-06"},{"lineNumber":317,"author":{"gitId":"s7u4rt99"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":318,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":319,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":320,"author":{"gitId":"s7u4rt99"},"content":"        if (deadline.equals(\"\")) {","lastModifiedDate":"2021-09-07"},{"lineNumber":321,"author":{"gitId":"s7u4rt99"},"content":"            deadline +\u003d \" \";","lastModifiedDate":"2021-09-07"},{"lineNumber":322,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":323,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":324,"author":{"gitId":"s7u4rt99"},"content":"        return deadline;","lastModifiedDate":"2021-09-06"},{"lineNumber":325,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":326,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":327,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":328,"author":{"gitId":"s7u4rt99"},"content":"     * Gets the description from an array of strings.","lastModifiedDate":"2021-09-06"},{"lineNumber":329,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":330,"author":{"gitId":"s7u4rt99"},"content":"     * @param strings Array which description would be derived from.","lastModifiedDate":"2021-09-06"},{"lineNumber":331,"author":{"gitId":"s7u4rt99"},"content":"     * @return The description.","lastModifiedDate":"2021-09-06"},{"lineNumber":332,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":333,"author":{"gitId":"s7u4rt99"},"content":"    private static String getDescription(String[] strings) {","lastModifiedDate":"2021-09-06"},{"lineNumber":334,"author":{"gitId":"s7u4rt99"},"content":"        String description \u003d \"\";","lastModifiedDate":"2021-08-25"},{"lineNumber":335,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":336,"author":{"gitId":"s7u4rt99"},"content":"        for (int i \u003d 1; i \u003c strings.length; i++) {","lastModifiedDate":"2021-09-06"},{"lineNumber":337,"author":{"gitId":"s7u4rt99"},"content":"            description +\u003d strings[i];","lastModifiedDate":"2021-09-06"},{"lineNumber":338,"author":{"gitId":"s7u4rt99"},"content":"            if (i !\u003d strings.length - 1) {","lastModifiedDate":"2021-09-06"},{"lineNumber":339,"author":{"gitId":"s7u4rt99"},"content":"                description +\u003d SPACE;","lastModifiedDate":"2021-09-06"},{"lineNumber":340,"author":{"gitId":"s7u4rt99"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":341,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":342,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":343,"author":{"gitId":"s7u4rt99"},"content":"        return description;","lastModifiedDate":"2021-09-06"},{"lineNumber":344,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":345,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":346,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":347,"author":{"gitId":"s7u4rt99"},"content":"     * Parses the input string and returns a command for Duke to execute.","lastModifiedDate":"2021-08-26"},{"lineNumber":348,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":349,"author":{"gitId":"s7u4rt99"},"content":"     * @param userInput Input which needs to be parsed.","lastModifiedDate":"2021-08-26"},{"lineNumber":350,"author":{"gitId":"s7u4rt99"},"content":"     * @param ui Ui object from Duke class.","lastModifiedDate":"2021-08-26"},{"lineNumber":351,"author":{"gitId":"s7u4rt99"},"content":"     * @param taskList TaskList object from Duke class.","lastModifiedDate":"2021-09-06"},{"lineNumber":352,"author":{"gitId":"s7u4rt99"},"content":"     * @param archiveList ArchiveList object from Duke class.","lastModifiedDate":"2021-09-07"},{"lineNumber":353,"author":{"gitId":"s7u4rt99"},"content":"     * @return Command to execute.","lastModifiedDate":"2021-08-26"},{"lineNumber":354,"author":{"gitId":"s7u4rt99"},"content":"     * @throws DukeException If incorrect values are passed for remove or done commands.","lastModifiedDate":"2021-08-26"},{"lineNumber":355,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":356,"author":{"gitId":"s7u4rt99"},"content":"    public static Command parse(","lastModifiedDate":"2021-09-07"},{"lineNumber":357,"author":{"gitId":"s7u4rt99"},"content":"            String userInput, Ui ui, TaskList taskList, ArchiveList archiveList) throws DukeException {","lastModifiedDate":"2021-09-07"},{"lineNumber":358,"author":{"gitId":"s7u4rt99"},"content":"        if (Parser.isListOrListArchive(userInput)) {","lastModifiedDate":"2021-09-07"},{"lineNumber":359,"author":{"gitId":"s7u4rt99"},"content":"            return parseListCommand(userInput);","lastModifiedDate":"2021-09-07"},{"lineNumber":360,"author":{"gitId":"s7u4rt99"},"content":"        } else if (Parser.isDone(userInput)) {","lastModifiedDate":"2021-08-26"},{"lineNumber":361,"author":{"gitId":"s7u4rt99"},"content":"            return parseDoneCommand(userInput, taskList);","lastModifiedDate":"2021-09-06"},{"lineNumber":362,"author":{"gitId":"s7u4rt99"},"content":"        } else if (Parser.isRemove(userInput)) {","lastModifiedDate":"2021-08-25"},{"lineNumber":363,"author":{"gitId":"s7u4rt99"},"content":"            return parseRemoveCommand(userInput, taskList, archiveList);","lastModifiedDate":"2021-09-07"},{"lineNumber":364,"author":{"gitId":"s7u4rt99"},"content":"        } else if (Parser.isBye(userInput)) {","lastModifiedDate":"2021-09-06"},{"lineNumber":365,"author":{"gitId":"s7u4rt99"},"content":"            return new ExitCommand();","lastModifiedDate":"2021-08-25"},{"lineNumber":366,"author":{"gitId":"s7u4rt99"},"content":"        } else if (Parser.isFind(userInput)) {","lastModifiedDate":"2021-08-26"},{"lineNumber":367,"author":{"gitId":"s7u4rt99"},"content":"            return parseFindCommand(userInput);","lastModifiedDate":"2021-09-06"},{"lineNumber":368,"author":{"gitId":"s7u4rt99"},"content":"        } else if (Parser.isTodo(userInput)) {","lastModifiedDate":"2021-09-06"},{"lineNumber":369,"author":{"gitId":"s7u4rt99"},"content":"            return parseToDoCommand(userInput);","lastModifiedDate":"2021-09-06"},{"lineNumber":370,"author":{"gitId":"s7u4rt99"},"content":"        } else if (Parser.isDeadline(userInput)) {","lastModifiedDate":"2021-09-06"},{"lineNumber":371,"author":{"gitId":"s7u4rt99"},"content":"            return parseDeadlineCommand(userInput);","lastModifiedDate":"2021-09-06"},{"lineNumber":372,"author":{"gitId":"s7u4rt99"},"content":"        } else if (Parser.isEvent(userInput)) {","lastModifiedDate":"2021-09-06"},{"lineNumber":373,"author":{"gitId":"s7u4rt99"},"content":"            return parseEventCommand(userInput);","lastModifiedDate":"2021-09-06"},{"lineNumber":374,"author":{"gitId":"s7u4rt99"},"content":"        } else if (Parser.isArchive(userInput)) {","lastModifiedDate":"2021-09-07"},{"lineNumber":375,"author":{"gitId":"s7u4rt99"},"content":"            return parseArchiveCommand(userInput, taskList);","lastModifiedDate":"2021-09-07"},{"lineNumber":376,"author":{"gitId":"s7u4rt99"},"content":"        } else {","lastModifiedDate":"2021-09-07"},{"lineNumber":377,"author":{"gitId":"s7u4rt99"},"content":"            throw new InvalidCommandException();","lastModifiedDate":"2021-09-07"},{"lineNumber":378,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":379,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":380,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":381,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":382,"author":{"gitId":"s7u4rt99"},"content":"     * Parses the command string into an ListCommand which lists tasks.","lastModifiedDate":"2021-09-07"},{"lineNumber":383,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":384,"author":{"gitId":"s7u4rt99"},"content":"     * @param userInput Command which user entered.","lastModifiedDate":"2021-09-07"},{"lineNumber":385,"author":{"gitId":"s7u4rt99"},"content":"     * @return An ListCommand which lists tasks.","lastModifiedDate":"2021-09-07"},{"lineNumber":386,"author":{"gitId":"s7u4rt99"},"content":"     * @throws InvalidCommandException If incorrect values are passed in.","lastModifiedDate":"2021-09-07"},{"lineNumber":387,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":388,"author":{"gitId":"s7u4rt99"},"content":"    private static ListCommand parseListCommand(String userInput) throws InvalidCommandException {","lastModifiedDate":"2021-09-07"},{"lineNumber":389,"author":{"gitId":"s7u4rt99"},"content":"        if (isListArchive(userInput)) {","lastModifiedDate":"2021-09-07"},{"lineNumber":390,"author":{"gitId":"s7u4rt99"},"content":"            return new ListArchiveCommand();","lastModifiedDate":"2021-09-07"},{"lineNumber":391,"author":{"gitId":"s7u4rt99"},"content":"        } else if (isList(userInput)) {","lastModifiedDate":"2021-09-07"},{"lineNumber":392,"author":{"gitId":"s7u4rt99"},"content":"            return new ListCommand();","lastModifiedDate":"2021-09-07"},{"lineNumber":393,"author":{"gitId":"s7u4rt99"},"content":"        } else {","lastModifiedDate":"2021-09-06"},{"lineNumber":394,"author":{"gitId":"s7u4rt99"},"content":"            throw new InvalidCommandException();","lastModifiedDate":"2021-09-06"},{"lineNumber":395,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-06"},{"lineNumber":396,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":397,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":398,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":399,"author":{"gitId":"s7u4rt99"},"content":"     * Parses the command string into an ArchiveCommand which archives a task.","lastModifiedDate":"2021-09-07"},{"lineNumber":400,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":401,"author":{"gitId":"s7u4rt99"},"content":"     * @param userInput Command which user entered.","lastModifiedDate":"2021-09-07"},{"lineNumber":402,"author":{"gitId":"s7u4rt99"},"content":"     * @param taskList list which Task would be archived.","lastModifiedDate":"2021-09-07"},{"lineNumber":403,"author":{"gitId":"s7u4rt99"},"content":"     * @return An ArchiveCommand which archives a task.","lastModifiedDate":"2021-09-07"},{"lineNumber":404,"author":{"gitId":"s7u4rt99"},"content":"     * @throws DukeException If insufficient or invalid values are passed in.","lastModifiedDate":"2021-09-07"},{"lineNumber":405,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":406,"author":{"gitId":"s7u4rt99"},"content":"    private static ArchiveCommand parseArchiveCommand(String userInput, TaskList taskList) throws DukeException {","lastModifiedDate":"2021-09-07"},{"lineNumber":407,"author":{"gitId":"s7u4rt99"},"content":"        String[] separated \u003d userInput.split(\" \");","lastModifiedDate":"2021-09-07"},{"lineNumber":408,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":409,"author":{"gitId":"s7u4rt99"},"content":"        if (separated.length \u003d\u003d 1) {","lastModifiedDate":"2021-09-07"},{"lineNumber":410,"author":{"gitId":"s7u4rt99"},"content":"            throw new IncompleteArchiveException();","lastModifiedDate":"2021-09-07"},{"lineNumber":411,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":412,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":413,"author":{"gitId":"s7u4rt99"},"content":"        if (isPositiveInteger(separated[1]) \u0026\u0026 !isOutOfRange(taskList, separated[1])) {","lastModifiedDate":"2021-09-07"},{"lineNumber":414,"author":{"gitId":"s7u4rt99"},"content":"            return new ArchiveCommand(Integer.valueOf(separated[1]) - 1);","lastModifiedDate":"2021-09-07"},{"lineNumber":415,"author":{"gitId":"s7u4rt99"},"content":"        } else if (isAll(separated[1])) {","lastModifiedDate":"2021-09-07"},{"lineNumber":416,"author":{"gitId":"s7u4rt99"},"content":"            return new ArchiveCommand(-1);","lastModifiedDate":"2021-09-07"},{"lineNumber":417,"author":{"gitId":"s7u4rt99"},"content":"        } else {","lastModifiedDate":"2021-09-07"},{"lineNumber":418,"author":{"gitId":"s7u4rt99"},"content":"            throw new IncompleteArchiveException();","lastModifiedDate":"2021-09-07"},{"lineNumber":419,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":420,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":421,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":422,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":423,"author":{"gitId":"s7u4rt99"},"content":"     * Parses the command string into an AddCommand which adds an","lastModifiedDate":"2021-09-06"},{"lineNumber":424,"author":{"gitId":"s7u4rt99"},"content":"     * Event object.","lastModifiedDate":"2021-09-06"},{"lineNumber":425,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":426,"author":{"gitId":"s7u4rt99"},"content":"     * @param userInput Command which user entered.","lastModifiedDate":"2021-09-06"},{"lineNumber":427,"author":{"gitId":"s7u4rt99"},"content":"     * @return An AddCommand which adds the new Event object.","lastModifiedDate":"2021-09-06"},{"lineNumber":428,"author":{"gitId":"s7u4rt99"},"content":"     * @throws DukeException If insufficient values are passed in.","lastModifiedDate":"2021-09-06"},{"lineNumber":429,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":430,"author":{"gitId":"s7u4rt99"},"content":"    private static AddCommand parseEventCommand(String userInput) throws DukeException {","lastModifiedDate":"2021-09-06"},{"lineNumber":431,"author":{"gitId":"s7u4rt99"},"content":"        String[] separated \u003d userInput.split(SPACE);","lastModifiedDate":"2021-09-06"},{"lineNumber":432,"author":{"gitId":"s7u4rt99"},"content":"        String[] str \u003d Parser.splitInput(userInput, separated[0]);","lastModifiedDate":"2021-09-06"},{"lineNumber":433,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":434,"author":{"gitId":"s7u4rt99"},"content":"        assert str.length \u003d\u003d 2;","lastModifiedDate":"2021-09-06"},{"lineNumber":435,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":436,"author":{"gitId":"s7u4rt99"},"content":"        Event add \u003d new Event(str[0], str[1]);","lastModifiedDate":"2021-09-06"},{"lineNumber":437,"author":{"gitId":"s7u4rt99"},"content":"        return new AddCommand(add);","lastModifiedDate":"2021-09-06"},{"lineNumber":438,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":439,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":440,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":441,"author":{"gitId":"s7u4rt99"},"content":"     * Parses the command string into an AddCommand which adds an","lastModifiedDate":"2021-09-06"},{"lineNumber":442,"author":{"gitId":"s7u4rt99"},"content":"     * deadline object.","lastModifiedDate":"2021-09-06"},{"lineNumber":443,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":444,"author":{"gitId":"s7u4rt99"},"content":"     * @param userInput Command which user entered.","lastModifiedDate":"2021-09-06"},{"lineNumber":445,"author":{"gitId":"s7u4rt99"},"content":"     * @return An AddCommand which adds the new Deadline object.","lastModifiedDate":"2021-09-06"},{"lineNumber":446,"author":{"gitId":"s7u4rt99"},"content":"     * @throws DukeException If insufficient values are passed in.","lastModifiedDate":"2021-09-06"},{"lineNumber":447,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":448,"author":{"gitId":"s7u4rt99"},"content":"    private static AddCommand parseDeadlineCommand(String userInput) throws DukeException {","lastModifiedDate":"2021-09-06"},{"lineNumber":449,"author":{"gitId":"s7u4rt99"},"content":"        String[] separated \u003d userInput.split(SPACE);","lastModifiedDate":"2021-09-06"},{"lineNumber":450,"author":{"gitId":"s7u4rt99"},"content":"        String[] str \u003d Parser.splitInput(userInput, separated[0]);","lastModifiedDate":"2021-09-06"},{"lineNumber":451,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":452,"author":{"gitId":"s7u4rt99"},"content":"        assert str.length \u003d\u003d 2;","lastModifiedDate":"2021-09-06"},{"lineNumber":453,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":454,"author":{"gitId":"s7u4rt99"},"content":"        Deadline add \u003d new Deadline(str[0], str[1]);","lastModifiedDate":"2021-08-25"},{"lineNumber":455,"author":{"gitId":"s7u4rt99"},"content":"        return new AddCommand(add);","lastModifiedDate":"2021-08-25"},{"lineNumber":456,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":457,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":458,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":459,"author":{"gitId":"s7u4rt99"},"content":"     * Parses the command string into an AddCommand which adds an","lastModifiedDate":"2021-09-06"},{"lineNumber":460,"author":{"gitId":"s7u4rt99"},"content":"     * Todo object.","lastModifiedDate":"2021-09-06"},{"lineNumber":461,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":462,"author":{"gitId":"s7u4rt99"},"content":"     * @param userInput Command which user entered.","lastModifiedDate":"2021-09-06"},{"lineNumber":463,"author":{"gitId":"s7u4rt99"},"content":"     * @return An AddCommand which adds the new Todo object.","lastModifiedDate":"2021-09-06"},{"lineNumber":464,"author":{"gitId":"s7u4rt99"},"content":"     * @throws DukeException If insufficient values are passed in.","lastModifiedDate":"2021-09-06"},{"lineNumber":465,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":466,"author":{"gitId":"s7u4rt99"},"content":"    private static AddCommand parseToDoCommand(String userInput) throws DukeException {","lastModifiedDate":"2021-09-06"},{"lineNumber":467,"author":{"gitId":"s7u4rt99"},"content":"        String[] separated \u003d userInput.split(SPACE);","lastModifiedDate":"2021-09-06"},{"lineNumber":468,"author":{"gitId":"s7u4rt99"},"content":"        String[] str \u003d Parser.splitInput(userInput, separated[0]);","lastModifiedDate":"2021-09-06"},{"lineNumber":469,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":470,"author":{"gitId":"s7u4rt99"},"content":"        assert str.length \u003d\u003d 1;","lastModifiedDate":"2021-09-06"},{"lineNumber":471,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":472,"author":{"gitId":"s7u4rt99"},"content":"        ToDo add \u003d new ToDo(str[0]);","lastModifiedDate":"2021-09-06"},{"lineNumber":473,"author":{"gitId":"s7u4rt99"},"content":"        return new AddCommand(add);","lastModifiedDate":"2021-08-25"},{"lineNumber":474,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":475,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":476,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":477,"author":{"gitId":"s7u4rt99"},"content":"     * Parses the command string into a FindCommand.","lastModifiedDate":"2021-09-06"},{"lineNumber":478,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":479,"author":{"gitId":"s7u4rt99"},"content":"     * @param userInput Command which user entered.","lastModifiedDate":"2021-09-06"},{"lineNumber":480,"author":{"gitId":"s7u4rt99"},"content":"     * @return A FindCommand with a keyword to find.","lastModifiedDate":"2021-09-06"},{"lineNumber":481,"author":{"gitId":"s7u4rt99"},"content":"     * @throws IncompleteFindException If insufficient values are passed in.","lastModifiedDate":"2021-09-06"},{"lineNumber":482,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":483,"author":{"gitId":"s7u4rt99"},"content":"    private static FindCommand parseFindCommand(String userInput) throws IncompleteFindException {","lastModifiedDate":"2021-09-06"},{"lineNumber":484,"author":{"gitId":"s7u4rt99"},"content":"        String[] separated \u003d userInput.split(SPACE);","lastModifiedDate":"2021-09-06"},{"lineNumber":485,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":486,"author":{"gitId":"s7u4rt99"},"content":"        if (separated.length \u003d\u003d 1) {","lastModifiedDate":"2021-09-06"},{"lineNumber":487,"author":{"gitId":"s7u4rt99"},"content":"            throw new IncompleteFindException();","lastModifiedDate":"2021-09-06"},{"lineNumber":488,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-06"},{"lineNumber":489,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":490,"author":{"gitId":"s7u4rt99"},"content":"        String keyword \u003d separated[1];","lastModifiedDate":"2021-09-06"},{"lineNumber":491,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":492,"author":{"gitId":"s7u4rt99"},"content":"        return new FindCommand(keyword);","lastModifiedDate":"2021-09-06"},{"lineNumber":493,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":494,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":495,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":496,"author":{"gitId":"s7u4rt99"},"content":"     * Parses the command string into a RemoveCommand.","lastModifiedDate":"2021-09-06"},{"lineNumber":497,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":498,"author":{"gitId":"s7u4rt99"},"content":"     * @param userInput Command which user entered.","lastModifiedDate":"2021-09-06"},{"lineNumber":499,"author":{"gitId":"s7u4rt99"},"content":"     * @param taskList taskList which stores tasks.","lastModifiedDate":"2021-09-07"},{"lineNumber":500,"author":{"gitId":"s7u4rt99"},"content":"     * @param archiveList archiveList which stores archived tasks.","lastModifiedDate":"2021-09-07"},{"lineNumber":501,"author":{"gitId":"s7u4rt99"},"content":"     * @return A RemoveCommand with index to remove.","lastModifiedDate":"2021-09-06"},{"lineNumber":502,"author":{"gitId":"s7u4rt99"},"content":"     * @throws DukeException If insufficient values are passed in.","lastModifiedDate":"2021-09-06"},{"lineNumber":503,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":504,"author":{"gitId":"s7u4rt99"},"content":"    private static RemoveCommand parseRemoveCommand(","lastModifiedDate":"2021-09-06"},{"lineNumber":505,"author":{"gitId":"s7u4rt99"},"content":"            String userInput, TaskList taskList, ArchiveList archiveList) throws DukeException {","lastModifiedDate":"2021-09-07"},{"lineNumber":506,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":507,"author":{"gitId":"s7u4rt99"},"content":"        String[] separated \u003d userInput.split(SPACE);","lastModifiedDate":"2021-09-06"},{"lineNumber":508,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":509,"author":{"gitId":"s7u4rt99"},"content":"        boolean isRemoveArchive \u003d separated.length \u003e 2 \u0026\u0026 separated[1].equals(\"archive\");","lastModifiedDate":"2021-09-07"},{"lineNumber":510,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":511,"author":{"gitId":"s7u4rt99"},"content":"        if (isRemoveArchive) {","lastModifiedDate":"2021-09-07"},{"lineNumber":512,"author":{"gitId":"s7u4rt99"},"content":"            return handleRemoveArchive(archiveList, separated);","lastModifiedDate":"2021-09-07"},{"lineNumber":513,"author":{"gitId":"s7u4rt99"},"content":"        } else {","lastModifiedDate":"2021-09-07"},{"lineNumber":514,"author":{"gitId":"s7u4rt99"},"content":"            return handleRemove(taskList, separated);","lastModifiedDate":"2021-09-07"},{"lineNumber":515,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":516,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":517,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":518,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":519,"author":{"gitId":"s7u4rt99"},"content":"     * Parses the command string into a DoneCommand.","lastModifiedDate":"2021-09-06"},{"lineNumber":520,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":521,"author":{"gitId":"s7u4rt99"},"content":"     * @param userInput Command which user entered.","lastModifiedDate":"2021-09-06"},{"lineNumber":522,"author":{"gitId":"s7u4rt99"},"content":"     * @param taskList taskList which DoneCommand marks as done from.","lastModifiedDate":"2021-09-06"},{"lineNumber":523,"author":{"gitId":"s7u4rt99"},"content":"     * @return A DoneCommand with index to mark as done.","lastModifiedDate":"2021-09-06"},{"lineNumber":524,"author":{"gitId":"s7u4rt99"},"content":"     * @throws DukeException If insufficient values are passed in.","lastModifiedDate":"2021-09-06"},{"lineNumber":525,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":526,"author":{"gitId":"s7u4rt99"},"content":"    private static DoneCommand parseDoneCommand(","lastModifiedDate":"2021-09-06"},{"lineNumber":527,"author":{"gitId":"s7u4rt99"},"content":"            String userInput, TaskList taskList) throws DukeException {","lastModifiedDate":"2021-09-06"},{"lineNumber":528,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":529,"author":{"gitId":"s7u4rt99"},"content":"        String[] separated \u003d userInput.split(SPACE);","lastModifiedDate":"2021-09-06"},{"lineNumber":530,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":531,"author":{"gitId":"s7u4rt99"},"content":"        boolean lengthLessThanTwo \u003d separated.length \u003c 2;","lastModifiedDate":"2021-09-07"},{"lineNumber":532,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":533,"author":{"gitId":"s7u4rt99"},"content":"        if (lengthLessThanTwo || !isIntegerOrAll(separated[1])","lastModifiedDate":"2021-09-07"},{"lineNumber":534,"author":{"gitId":"s7u4rt99"},"content":"                || isOutOfRange(taskList, separated[1])) {","lastModifiedDate":"2021-09-07"},{"lineNumber":535,"author":{"gitId":"s7u4rt99"},"content":"            throw new IncompleteDoneException();","lastModifiedDate":"2021-09-07"},{"lineNumber":536,"author":{"gitId":"s7u4rt99"},"content":"        } else if (isPositiveInteger(separated[1])) {","lastModifiedDate":"2021-09-07"},{"lineNumber":537,"author":{"gitId":"s7u4rt99"},"content":"            int index \u003d Integer.valueOf(separated[1]) - 1;","lastModifiedDate":"2021-09-06"},{"lineNumber":538,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":539,"author":{"gitId":"s7u4rt99"},"content":"            assert index \u003e\u003d 0 \u0026\u0026 index \u003c taskList.getSize();","lastModifiedDate":"2021-09-06"},{"lineNumber":540,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":541,"author":{"gitId":"s7u4rt99"},"content":"            return new DoneCommand(index);","lastModifiedDate":"2021-09-06"},{"lineNumber":542,"author":{"gitId":"s7u4rt99"},"content":"        } else if (isAll(separated[1])) {","lastModifiedDate":"2021-09-07"},{"lineNumber":543,"author":{"gitId":"s7u4rt99"},"content":"            return new DoneCommand(-1);","lastModifiedDate":"2021-09-07"},{"lineNumber":544,"author":{"gitId":"s7u4rt99"},"content":"        } else {","lastModifiedDate":"2021-09-07"},{"lineNumber":545,"author":{"gitId":"s7u4rt99"},"content":"            throw new InvalidCommandException();","lastModifiedDate":"2021-09-07"},{"lineNumber":546,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":547,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":548,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":549,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":550,"author":{"gitId":"s7u4rt99"},"content":"     * Handles the case where it is a RemoveArchiveCommand and parses it.","lastModifiedDate":"2021-09-07"},{"lineNumber":551,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":552,"author":{"gitId":"s7u4rt99"},"content":"     * @param archiveList archiveList to be removed from.","lastModifiedDate":"2021-09-07"},{"lineNumber":553,"author":{"gitId":"s7u4rt99"},"content":"     * @param separated separated form of the string, split by space.","lastModifiedDate":"2021-09-07"},{"lineNumber":554,"author":{"gitId":"s7u4rt99"},"content":"     * @return RemoveArchiveCommand to be executed.","lastModifiedDate":"2021-09-07"},{"lineNumber":555,"author":{"gitId":"s7u4rt99"},"content":"     * @throws DukeException if it has an invalid index to remove.","lastModifiedDate":"2021-09-07"},{"lineNumber":556,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":557,"author":{"gitId":"s7u4rt99"},"content":"    private static RemoveArchiveCommand handleRemoveArchive(","lastModifiedDate":"2021-09-07"},{"lineNumber":558,"author":{"gitId":"s7u4rt99"},"content":"            ArchiveList archiveList, String[] separated) throws DukeException {","lastModifiedDate":"2021-09-07"},{"lineNumber":559,"author":{"gitId":"s7u4rt99"},"content":"        if (!isIntegerOrAll(separated[2]) || isOutOfRange(archiveList, separated[2])) {","lastModifiedDate":"2021-09-07"},{"lineNumber":560,"author":{"gitId":"s7u4rt99"},"content":"            throw new IncompleteRemoveException();","lastModifiedDate":"2021-09-07"},{"lineNumber":561,"author":{"gitId":"s7u4rt99"},"content":"        } else if (isPositiveInteger(separated[2])) {","lastModifiedDate":"2021-09-07"},{"lineNumber":562,"author":{"gitId":"s7u4rt99"},"content":"            return new RemoveArchiveCommand(Integer.valueOf(separated[2]) - 1);","lastModifiedDate":"2021-09-07"},{"lineNumber":563,"author":{"gitId":"s7u4rt99"},"content":"        } else if (isAll(separated[2])) {","lastModifiedDate":"2021-09-07"},{"lineNumber":564,"author":{"gitId":"s7u4rt99"},"content":"            return new RemoveArchiveCommand(-1);","lastModifiedDate":"2021-09-07"},{"lineNumber":565,"author":{"gitId":"s7u4rt99"},"content":"        } else {","lastModifiedDate":"2021-09-07"},{"lineNumber":566,"author":{"gitId":"s7u4rt99"},"content":"            throw new InvalidCommandException();","lastModifiedDate":"2021-09-07"},{"lineNumber":567,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":568,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":569,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":570,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":571,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":572,"author":{"gitId":"s7u4rt99"},"content":"     * Handles the case where it is a RemoveCommand and parses it.","lastModifiedDate":"2021-09-07"},{"lineNumber":573,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":574,"author":{"gitId":"s7u4rt99"},"content":"     * @param taskList taskList to be removed from.","lastModifiedDate":"2021-09-07"},{"lineNumber":575,"author":{"gitId":"s7u4rt99"},"content":"     * @param separated separated form of the string, split by space.","lastModifiedDate":"2021-09-07"},{"lineNumber":576,"author":{"gitId":"s7u4rt99"},"content":"     * @return RemoveCommand to be executed.","lastModifiedDate":"2021-09-07"},{"lineNumber":577,"author":{"gitId":"s7u4rt99"},"content":"     * @throws DukeException if it has an invalid index to remove.","lastModifiedDate":"2021-09-07"},{"lineNumber":578,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":579,"author":{"gitId":"s7u4rt99"},"content":"    private static RemoveCommand handleRemove(TaskList taskList, String[] separated) throws DukeException {","lastModifiedDate":"2021-09-07"},{"lineNumber":580,"author":{"gitId":"s7u4rt99"},"content":"        boolean lengthLessThanTwo \u003d separated.length \u003c 2;","lastModifiedDate":"2021-09-07"},{"lineNumber":581,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":582,"author":{"gitId":"s7u4rt99"},"content":"        if (lengthLessThanTwo || !isIntegerOrAll(separated[1])","lastModifiedDate":"2021-09-07"},{"lineNumber":583,"author":{"gitId":"s7u4rt99"},"content":"                || isOutOfRange(taskList, separated[1])) {","lastModifiedDate":"2021-09-07"},{"lineNumber":584,"author":{"gitId":"s7u4rt99"},"content":"            throw new IncompleteRemoveException();","lastModifiedDate":"2021-09-07"},{"lineNumber":585,"author":{"gitId":"s7u4rt99"},"content":"        } else if (isPositiveInteger(separated[1])) {","lastModifiedDate":"2021-09-07"},{"lineNumber":586,"author":{"gitId":"s7u4rt99"},"content":"            return new RemoveCommand(Integer.valueOf(separated[1]) - 1);","lastModifiedDate":"2021-09-07"},{"lineNumber":587,"author":{"gitId":"s7u4rt99"},"content":"        } else if (isAll(separated[1])) {","lastModifiedDate":"2021-09-07"},{"lineNumber":588,"author":{"gitId":"s7u4rt99"},"content":"            return new RemoveCommand(-1);","lastModifiedDate":"2021-09-07"},{"lineNumber":589,"author":{"gitId":"s7u4rt99"},"content":"        } else {","lastModifiedDate":"2021-09-07"},{"lineNumber":590,"author":{"gitId":"s7u4rt99"},"content":"            throw new InvalidCommandException();","lastModifiedDate":"2021-09-07"},{"lineNumber":591,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":592,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":593,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"s7u4rt99":593}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":"import duke.task.Event;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"import duke.task.ToDo;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"import java.io.File;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":" * Stores and retrieves information of the tasklist for Duke.","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"s7u4rt99"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"s7u4rt99"},"content":"public class Storage {","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"s7u4rt99"},"content":"    private final String TASKLIST_FILE_PATH;","lastModifiedDate":"2021-09-07"},{"lineNumber":20,"author":{"gitId":"s7u4rt99"},"content":"    private final String DIR_PATH;","lastModifiedDate":"2021-09-06"},{"lineNumber":21,"author":{"gitId":"s7u4rt99"},"content":"    private final String ARCHIVELIST_FILE_PATH;","lastModifiedDate":"2021-09-07"},{"lineNumber":22,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"s7u4rt99"},"content":"     * Constructor for Storage.","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"s7u4rt99"},"content":"    public Storage() {","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"s7u4rt99"},"content":"        this.TASKLIST_FILE_PATH \u003d \"data\" + File.separator + \"history.txt\";","lastModifiedDate":"2021-09-07"},{"lineNumber":28,"author":{"gitId":"s7u4rt99"},"content":"        this.DIR_PATH \u003d \"data\";","lastModifiedDate":"2021-09-06"},{"lineNumber":29,"author":{"gitId":"s7u4rt99"},"content":"        this.ARCHIVELIST_FILE_PATH \u003d \"data\" + File.separator + \"archive.txt\";","lastModifiedDate":"2021-09-07"},{"lineNumber":30,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"s7u4rt99"},"content":"     * Initialises the initial ArrayList for Duke.","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"s7u4rt99"},"content":"     * @return ArrayList to be passed into TaskList for Duke.","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"s7u4rt99"},"content":"    public ArrayList\u003cTask\u003e initialise() {","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"s7u4rt99"},"content":"        //read from the data/history.text and return an ArrayList of Tasks","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"s7u4rt99"},"content":"        File file \u003d new File(TASKLIST_FILE_PATH);","lastModifiedDate":"2021-09-07"},{"lineNumber":40,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":41,"author":{"gitId":"s7u4rt99"},"content":"        try {","lastModifiedDate":"2021-09-07"},{"lineNumber":42,"author":{"gitId":"s7u4rt99"},"content":"            Scanner s \u003d new Scanner(file);","lastModifiedDate":"2021-09-07"},{"lineNumber":43,"author":{"gitId":"s7u4rt99"},"content":"            ArrayList\u003cTask\u003e output \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-07"},{"lineNumber":44,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":45,"author":{"gitId":"s7u4rt99"},"content":"            while (s.hasNext()) {","lastModifiedDate":"2021-09-07"},{"lineNumber":46,"author":{"gitId":"s7u4rt99"},"content":"                String task \u003d s.nextLine();","lastModifiedDate":"2021-09-07"},{"lineNumber":47,"author":{"gitId":"s7u4rt99"},"content":"                String[] splitTask \u003d task.split(\"\\\\|\");","lastModifiedDate":"2021-09-07"},{"lineNumber":48,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":49,"author":{"gitId":"s7u4rt99"},"content":"                if (splitTask[0].equals(\"T\")) {","lastModifiedDate":"2021-09-07"},{"lineNumber":50,"author":{"gitId":"s7u4rt99"},"content":"                    // it is todotask","lastModifiedDate":"2021-09-07"},{"lineNumber":51,"author":{"gitId":"s7u4rt99"},"content":"                    initialiseToDo(output, splitTask);","lastModifiedDate":"2021-09-07"},{"lineNumber":52,"author":{"gitId":"s7u4rt99"},"content":"                } else if (splitTask[0].equals(\"E\")) {","lastModifiedDate":"2021-09-07"},{"lineNumber":53,"author":{"gitId":"s7u4rt99"},"content":"                    // event","lastModifiedDate":"2021-09-07"},{"lineNumber":54,"author":{"gitId":"s7u4rt99"},"content":"                    initialiseEvent(output, splitTask);","lastModifiedDate":"2021-09-07"},{"lineNumber":55,"author":{"gitId":"s7u4rt99"},"content":"                } else if (splitTask[0].equals(\"D\")) {","lastModifiedDate":"2021-09-07"},{"lineNumber":56,"author":{"gitId":"s7u4rt99"},"content":"                    // deadline","lastModifiedDate":"2021-09-07"},{"lineNumber":57,"author":{"gitId":"s7u4rt99"},"content":"                    initialiseDeadline(output, splitTask);","lastModifiedDate":"2021-09-07"},{"lineNumber":58,"author":{"gitId":"s7u4rt99"},"content":"                }","lastModifiedDate":"2021-09-07"},{"lineNumber":59,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":60,"author":{"gitId":"s7u4rt99"},"content":"            }","lastModifiedDate":"2021-09-07"},{"lineNumber":61,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":62,"author":{"gitId":"s7u4rt99"},"content":"            return output;","lastModifiedDate":"2021-09-07"},{"lineNumber":63,"author":{"gitId":"s7u4rt99"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-09-07"},{"lineNumber":64,"author":{"gitId":"s7u4rt99"},"content":"            return new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-07"},{"lineNumber":65,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":66,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":67,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":68,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":69,"author":{"gitId":"s7u4rt99"},"content":"     * Initialises the ArrayList for the archiveList of Duke.","lastModifiedDate":"2021-09-07"},{"lineNumber":70,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":71,"author":{"gitId":"s7u4rt99"},"content":"     * @return ArrayList of the archiveList.","lastModifiedDate":"2021-09-07"},{"lineNumber":72,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":73,"author":{"gitId":"s7u4rt99"},"content":"    public ArrayList\u003cTask\u003e initialiseArchive() {","lastModifiedDate":"2021-09-07"},{"lineNumber":74,"author":{"gitId":"s7u4rt99"},"content":"        //read from the data/history.text and return an ArrayList of Tasks","lastModifiedDate":"2021-09-07"},{"lineNumber":75,"author":{"gitId":"s7u4rt99"},"content":"        File file \u003d new File(ARCHIVELIST_FILE_PATH);","lastModifiedDate":"2021-09-07"},{"lineNumber":76,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":77,"author":{"gitId":"s7u4rt99"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":78,"author":{"gitId":"s7u4rt99"},"content":"            Scanner s \u003d new Scanner(file);","lastModifiedDate":"2021-08-25"},{"lineNumber":79,"author":{"gitId":"s7u4rt99"},"content":"            ArrayList\u003cTask\u003e output \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-25"},{"lineNumber":80,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":81,"author":{"gitId":"s7u4rt99"},"content":"            while (s.hasNext()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":82,"author":{"gitId":"s7u4rt99"},"content":"                String task \u003d s.nextLine();","lastModifiedDate":"2021-08-25"},{"lineNumber":83,"author":{"gitId":"s7u4rt99"},"content":"                String[] splitTask \u003d task.split(\"\\\\|\");","lastModifiedDate":"2021-08-25"},{"lineNumber":84,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":85,"author":{"gitId":"s7u4rt99"},"content":"                if (splitTask[0].equals(\"T\")) {","lastModifiedDate":"2021-09-06"},{"lineNumber":86,"author":{"gitId":"s7u4rt99"},"content":"                    // it is todotask","lastModifiedDate":"2021-08-25"},{"lineNumber":87,"author":{"gitId":"s7u4rt99"},"content":"                    initialiseToDo(output, splitTask);","lastModifiedDate":"2021-09-06"},{"lineNumber":88,"author":{"gitId":"s7u4rt99"},"content":"                } else if (splitTask[0].equals(\"E\")) {","lastModifiedDate":"2021-09-06"},{"lineNumber":89,"author":{"gitId":"s7u4rt99"},"content":"                    // event","lastModifiedDate":"2021-09-06"},{"lineNumber":90,"author":{"gitId":"s7u4rt99"},"content":"                    initialiseEvent(output, splitTask);","lastModifiedDate":"2021-09-06"},{"lineNumber":91,"author":{"gitId":"s7u4rt99"},"content":"                } else if (splitTask[0].equals(\"D\")) {","lastModifiedDate":"2021-09-06"},{"lineNumber":92,"author":{"gitId":"s7u4rt99"},"content":"                    // deadline","lastModifiedDate":"2021-09-06"},{"lineNumber":93,"author":{"gitId":"s7u4rt99"},"content":"                    initialiseDeadline(output, splitTask);","lastModifiedDate":"2021-09-06"},{"lineNumber":94,"author":{"gitId":"s7u4rt99"},"content":"                }","lastModifiedDate":"2021-08-25"},{"lineNumber":95,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":96,"author":{"gitId":"s7u4rt99"},"content":"            }","lastModifiedDate":"2021-09-06"},{"lineNumber":97,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":98,"author":{"gitId":"s7u4rt99"},"content":"            return output;","lastModifiedDate":"2021-09-06"},{"lineNumber":99,"author":{"gitId":"s7u4rt99"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-09-06"},{"lineNumber":100,"author":{"gitId":"s7u4rt99"},"content":"            return new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-06"},{"lineNumber":101,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-06"},{"lineNumber":102,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":103,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":104,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":105,"author":{"gitId":"s7u4rt99"},"content":"     * Initialises a Deadline Object and adds it to an ArrayList.","lastModifiedDate":"2021-09-06"},{"lineNumber":106,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":107,"author":{"gitId":"s7u4rt99"},"content":"     * @param tasks ArrayList for the Deadline Object to be added to.","lastModifiedDate":"2021-09-06"},{"lineNumber":108,"author":{"gitId":"s7u4rt99"},"content":"     * @param splitTask Details of the Deadline Object stored in an array.","lastModifiedDate":"2021-09-06"},{"lineNumber":109,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":110,"author":{"gitId":"s7u4rt99"},"content":"    private void initialiseDeadline(ArrayList\u003cTask\u003e tasks, String[] splitTask) {","lastModifiedDate":"2021-09-06"},{"lineNumber":111,"author":{"gitId":"s7u4rt99"},"content":"        Task toAdd \u003d new Deadline(splitTask[2], splitTask[3]);","lastModifiedDate":"2021-08-25"},{"lineNumber":112,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":113,"author":{"gitId":"s7u4rt99"},"content":"        if (splitTask[1].equals(\"1\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":114,"author":{"gitId":"s7u4rt99"},"content":"            toAdd.markAsDone();","lastModifiedDate":"2021-08-25"},{"lineNumber":115,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":116,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":117,"author":{"gitId":"s7u4rt99"},"content":"        tasks.add(toAdd);","lastModifiedDate":"2021-09-06"},{"lineNumber":118,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":119,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":120,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":121,"author":{"gitId":"s7u4rt99"},"content":"     * Initialises an Event Object and adds it to an ArrayList.","lastModifiedDate":"2021-09-06"},{"lineNumber":122,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":123,"author":{"gitId":"s7u4rt99"},"content":"     * @param tasks ArrayList for the Event Object to be added to.","lastModifiedDate":"2021-09-06"},{"lineNumber":124,"author":{"gitId":"s7u4rt99"},"content":"     * @param splitTask Details of the Event Object stored in an array.","lastModifiedDate":"2021-09-06"},{"lineNumber":125,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":126,"author":{"gitId":"s7u4rt99"},"content":"    private void initialiseEvent(ArrayList\u003cTask\u003e tasks, String[] splitTask) {","lastModifiedDate":"2021-09-06"},{"lineNumber":127,"author":{"gitId":"s7u4rt99"},"content":"        Task toAdd \u003d new Event(splitTask[2], splitTask[3]);","lastModifiedDate":"2021-09-06"},{"lineNumber":128,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":129,"author":{"gitId":"s7u4rt99"},"content":"        if (splitTask[1].equals(\"1\")) {","lastModifiedDate":"2021-09-06"},{"lineNumber":130,"author":{"gitId":"s7u4rt99"},"content":"            toAdd.markAsDone();","lastModifiedDate":"2021-09-06"},{"lineNumber":131,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":132,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":133,"author":{"gitId":"s7u4rt99"},"content":"        tasks.add(toAdd);","lastModifiedDate":"2021-09-06"},{"lineNumber":134,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":135,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":136,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":137,"author":{"gitId":"s7u4rt99"},"content":"     * Initialises a ToDo Object and adds it to an ArrayList.","lastModifiedDate":"2021-09-06"},{"lineNumber":138,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":139,"author":{"gitId":"s7u4rt99"},"content":"     * @param tasks ArrayList for the ToDo Object to be added to.","lastModifiedDate":"2021-09-06"},{"lineNumber":140,"author":{"gitId":"s7u4rt99"},"content":"     * @param splitTask Details of the ToDo Object stored in an array.","lastModifiedDate":"2021-09-06"},{"lineNumber":141,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":142,"author":{"gitId":"s7u4rt99"},"content":"    private void initialiseToDo(ArrayList\u003cTask\u003e tasks, String[] splitTask) {","lastModifiedDate":"2021-09-06"},{"lineNumber":143,"author":{"gitId":"s7u4rt99"},"content":"        Task toAdd \u003d new ToDo(splitTask[2]);","lastModifiedDate":"2021-09-06"},{"lineNumber":144,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":145,"author":{"gitId":"s7u4rt99"},"content":"        if (splitTask[1].equals(\"1\")) {","lastModifiedDate":"2021-09-06"},{"lineNumber":146,"author":{"gitId":"s7u4rt99"},"content":"            toAdd.markAsDone();","lastModifiedDate":"2021-09-06"},{"lineNumber":147,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":148,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":149,"author":{"gitId":"s7u4rt99"},"content":"        tasks.add(toAdd);","lastModifiedDate":"2021-09-06"},{"lineNumber":150,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":151,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":152,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":153,"author":{"gitId":"s7u4rt99"},"content":"     * Saves the taskList given by Duke into user\u0027s computer.","lastModifiedDate":"2021-08-26"},{"lineNumber":154,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":155,"author":{"gitId":"s7u4rt99"},"content":"     * @param taskList taskList which is being saved into user\u0027s computer.","lastModifiedDate":"2021-09-06"},{"lineNumber":156,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":157,"author":{"gitId":"s7u4rt99"},"content":"    public void saveFile(TaskList taskList) {","lastModifiedDate":"2021-09-06"},{"lineNumber":158,"author":{"gitId":"s7u4rt99"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":159,"author":{"gitId":"s7u4rt99"},"content":"            FileWriter fw \u003d new FileWriter(TASKLIST_FILE_PATH);","lastModifiedDate":"2021-09-07"},{"lineNumber":160,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":161,"author":{"gitId":"s7u4rt99"},"content":"            String textToAdd \u003d convertTaskListToSaveForm(taskList);","lastModifiedDate":"2021-09-06"},{"lineNumber":162,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":163,"author":{"gitId":"s7u4rt99"},"content":"            fw.write(textToAdd);","lastModifiedDate":"2021-08-25"},{"lineNumber":164,"author":{"gitId":"s7u4rt99"},"content":"            fw.close();","lastModifiedDate":"2021-08-25"},{"lineNumber":165,"author":{"gitId":"s7u4rt99"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":166,"author":{"gitId":"s7u4rt99"},"content":"            File file \u003d new File(DIR_PATH);","lastModifiedDate":"2021-09-06"},{"lineNumber":167,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":168,"author":{"gitId":"s7u4rt99"},"content":"            if (file.mkdir()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":169,"author":{"gitId":"s7u4rt99"},"content":"                saveFile(taskList);","lastModifiedDate":"2021-09-06"},{"lineNumber":170,"author":{"gitId":"s7u4rt99"},"content":"            } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":171,"author":{"gitId":"s7u4rt99"},"content":"                System.out.println(\"Failed to create file\");","lastModifiedDate":"2021-08-25"},{"lineNumber":172,"author":{"gitId":"s7u4rt99"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":173,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":174,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":175,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":176,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":177,"author":{"gitId":"s7u4rt99"},"content":"     * Saves the archiveList given by Duke into user\u0027s computer.","lastModifiedDate":"2021-09-07"},{"lineNumber":178,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":179,"author":{"gitId":"s7u4rt99"},"content":"     * @param archiveList ArchiveList to be saved into user\u0027s computer.","lastModifiedDate":"2021-09-07"},{"lineNumber":180,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":181,"author":{"gitId":"s7u4rt99"},"content":"    public void saveArchive(ArchiveList archiveList) {","lastModifiedDate":"2021-09-07"},{"lineNumber":182,"author":{"gitId":"s7u4rt99"},"content":"        try {","lastModifiedDate":"2021-09-07"},{"lineNumber":183,"author":{"gitId":"s7u4rt99"},"content":"            FileWriter fw \u003d new FileWriter(ARCHIVELIST_FILE_PATH);","lastModifiedDate":"2021-09-07"},{"lineNumber":184,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":185,"author":{"gitId":"s7u4rt99"},"content":"            String textToAdd \u003d convertTaskListToSaveForm(archiveList);","lastModifiedDate":"2021-09-07"},{"lineNumber":186,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":187,"author":{"gitId":"s7u4rt99"},"content":"            fw.write(textToAdd);","lastModifiedDate":"2021-09-07"},{"lineNumber":188,"author":{"gitId":"s7u4rt99"},"content":"            fw.close();","lastModifiedDate":"2021-09-07"},{"lineNumber":189,"author":{"gitId":"s7u4rt99"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-07"},{"lineNumber":190,"author":{"gitId":"s7u4rt99"},"content":"            File file \u003d new File(DIR_PATH);","lastModifiedDate":"2021-09-07"},{"lineNumber":191,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":192,"author":{"gitId":"s7u4rt99"},"content":"            if (file.mkdir()) {","lastModifiedDate":"2021-09-07"},{"lineNumber":193,"author":{"gitId":"s7u4rt99"},"content":"                saveArchive(archiveList);","lastModifiedDate":"2021-09-07"},{"lineNumber":194,"author":{"gitId":"s7u4rt99"},"content":"            } else {","lastModifiedDate":"2021-09-07"},{"lineNumber":195,"author":{"gitId":"s7u4rt99"},"content":"                System.out.println(\"Failed to create file\");","lastModifiedDate":"2021-09-07"},{"lineNumber":196,"author":{"gitId":"s7u4rt99"},"content":"            }","lastModifiedDate":"2021-09-07"},{"lineNumber":197,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":198,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":199,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":200,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":201,"author":{"gitId":"s7u4rt99"},"content":"     * Converts dukeList into a text form which can be saved.","lastModifiedDate":"2021-09-07"},{"lineNumber":202,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":203,"author":{"gitId":"s7u4rt99"},"content":"     * @param dukeList dukeList to be saved.","lastModifiedDate":"2021-09-07"},{"lineNumber":204,"author":{"gitId":"s7u4rt99"},"content":"     * @return Text form of dukeList to be saved.","lastModifiedDate":"2021-09-07"},{"lineNumber":205,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":206,"author":{"gitId":"s7u4rt99"},"content":"    private String convertTaskListToSaveForm(DukeList dukeList) {","lastModifiedDate":"2021-09-07"},{"lineNumber":207,"author":{"gitId":"s7u4rt99"},"content":"        String textToAdd \u003d \"\";","lastModifiedDate":"2021-09-06"},{"lineNumber":208,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":209,"author":{"gitId":"s7u4rt99"},"content":"        for (int i \u003d 0; i \u003c dukeList.getSize(); i++) {","lastModifiedDate":"2021-09-07"},{"lineNumber":210,"author":{"gitId":"s7u4rt99"},"content":"            if (i \u003d\u003d 0) {","lastModifiedDate":"2021-09-06"},{"lineNumber":211,"author":{"gitId":"s7u4rt99"},"content":"                textToAdd +\u003d dukeList.taskSaveToString(i);","lastModifiedDate":"2021-09-07"},{"lineNumber":212,"author":{"gitId":"s7u4rt99"},"content":"            } else {","lastModifiedDate":"2021-09-06"},{"lineNumber":213,"author":{"gitId":"s7u4rt99"},"content":"                textToAdd +\u003d \"\\n\" + dukeList.taskSaveToString(i);","lastModifiedDate":"2021-09-07"},{"lineNumber":214,"author":{"gitId":"s7u4rt99"},"content":"            }","lastModifiedDate":"2021-09-06"},{"lineNumber":215,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-06"},{"lineNumber":216,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":217,"author":{"gitId":"s7u4rt99"},"content":"        return textToAdd;","lastModifiedDate":"2021-09-06"},{"lineNumber":218,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":219,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"s7u4rt99":219}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":" * Represents the list of Tasks for Duke.","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"public class TaskList extends DukeList {","lastModifiedDate":"2021-09-07"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"     * Constructor for TaskList.","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"    public TaskList() {","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"        super();","lastModifiedDate":"2021-09-07"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"s7u4rt99"},"content":"     * Constructor for TaskList.","lastModifiedDate":"2021-09-07"},{"lineNumber":20,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"s7u4rt99"},"content":"     * @param list List to be assigned to taskArrayList in DukeList.","lastModifiedDate":"2021-09-07"},{"lineNumber":22,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"s7u4rt99"},"content":"    public TaskList(ArrayList\u003cTask\u003e list) {","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"s7u4rt99"},"content":"        super(list);","lastModifiedDate":"2021-09-07"},{"lineNumber":25,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"s7u4rt99"},"content":"     * Getter for taskArrayList.","lastModifiedDate":"2021-09-07"},{"lineNumber":29,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"s7u4rt99"},"content":"     * @return tasks.","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"s7u4rt99"},"content":"    public ArrayList\u003cTask\u003e getTasks() {","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"s7u4rt99"},"content":"        return super.getTaskArrayList();","lastModifiedDate":"2021-09-07"},{"lineNumber":34,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"s7u4rt99"},"content":"     * Marks Task at given index in taskArrayList as done.","lastModifiedDate":"2021-09-07"},{"lineNumber":38,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"s7u4rt99"},"content":"     * @param index Index of Task to mark as done.","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"s7u4rt99"},"content":"    public void markAsDone(int index) {","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"s7u4rt99"},"content":"        super.get(index).markAsDone();","lastModifiedDate":"2021-09-07"},{"lineNumber":43,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":46,"author":{"gitId":"s7u4rt99"},"content":"     * Marks all the Tasks in taskArrayList as done.","lastModifiedDate":"2021-09-07"},{"lineNumber":47,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":48,"author":{"gitId":"s7u4rt99"},"content":"    public void markAllAsDone() {","lastModifiedDate":"2021-09-07"},{"lineNumber":49,"author":{"gitId":"s7u4rt99"},"content":"        for (int i \u003d 0; i \u003c this.getSize(); i++) {","lastModifiedDate":"2021-09-07"},{"lineNumber":50,"author":{"gitId":"s7u4rt99"},"content":"            markAsDone(i);","lastModifiedDate":"2021-09-07"},{"lineNumber":51,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":52,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":53,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":54,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"s7u4rt99"},"content":"     * Finds tasks with given keyword in taskArrayList.","lastModifiedDate":"2021-09-07"},{"lineNumber":56,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":57,"author":{"gitId":"s7u4rt99"},"content":"     * @param keyword Keyword of tasks we want to find.","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"s7u4rt99"},"content":"     * @return TaskList of Tasks with given keyword.","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"s7u4rt99"},"content":"    public TaskList findTasksWithKeyword(String keyword) {","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"s7u4rt99"},"content":"        ArrayList\u003cTask\u003e tasksWithKeyword \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":63,"author":{"gitId":"s7u4rt99"},"content":"        for (int i \u003d 0; i \u003c super.getSize(); i++) {","lastModifiedDate":"2021-09-07"},{"lineNumber":64,"author":{"gitId":"s7u4rt99"},"content":"            if (super.get(i).hasKeyword(keyword)) {","lastModifiedDate":"2021-09-07"},{"lineNumber":65,"author":{"gitId":"s7u4rt99"},"content":"                tasksWithKeyword.add(super.get(i));","lastModifiedDate":"2021-09-07"},{"lineNumber":66,"author":{"gitId":"s7u4rt99"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":67,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":68,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":69,"author":{"gitId":"s7u4rt99"},"content":"        return new TaskList(tasksWithKeyword);","lastModifiedDate":"2021-08-26"},{"lineNumber":70,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":71,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":72,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":73,"author":{"gitId":"s7u4rt99"},"content":"     * Archives Task at given index of taskArrayList.","lastModifiedDate":"2021-09-07"},{"lineNumber":74,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":75,"author":{"gitId":"s7u4rt99"},"content":"     * @param index Index of Task to be archived.","lastModifiedDate":"2021-09-07"},{"lineNumber":76,"author":{"gitId":"s7u4rt99"},"content":"     * @param archiveList ArchiveList to add the Task to.","lastModifiedDate":"2021-09-07"},{"lineNumber":77,"author":{"gitId":"s7u4rt99"},"content":"     * @return Task which was archived.","lastModifiedDate":"2021-09-07"},{"lineNumber":78,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":79,"author":{"gitId":"s7u4rt99"},"content":"    public Task archive(int index, ArchiveList archiveList) {","lastModifiedDate":"2021-09-07"},{"lineNumber":80,"author":{"gitId":"s7u4rt99"},"content":"        Task toArchive \u003d this.remove(index);","lastModifiedDate":"2021-09-07"},{"lineNumber":81,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":82,"author":{"gitId":"s7u4rt99"},"content":"        archiveList.add(toArchive);","lastModifiedDate":"2021-09-07"},{"lineNumber":83,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":84,"author":{"gitId":"s7u4rt99"},"content":"        return toArchive;","lastModifiedDate":"2021-09-07"},{"lineNumber":85,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":86,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":87,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":88,"author":{"gitId":"s7u4rt99"},"content":"     * Gets the type of list.","lastModifiedDate":"2021-09-07"},{"lineNumber":89,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":90,"author":{"gitId":"s7u4rt99"},"content":"     * @return \"list\".","lastModifiedDate":"2021-09-07"},{"lineNumber":91,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":92,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":93,"author":{"gitId":"s7u4rt99"},"content":"    public String type() {","lastModifiedDate":"2021-09-07"},{"lineNumber":94,"author":{"gitId":"s7u4rt99"},"content":"        return \"list\";","lastModifiedDate":"2021-09-07"},{"lineNumber":95,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":96,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"s7u4rt99":96}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":" * Represents the Ui of Duke.","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"public class Ui {","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"    public static final String LINE \u003d \"____________________________________________________________\";","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"    private final Scanner sc;","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"     * Constructor of Ui.","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"s7u4rt99"},"content":"    public Ui() {","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"s7u4rt99"},"content":"        this.sc \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"s7u4rt99"},"content":"     * Prints message in same style as other outputs of Duke.","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"s7u4rt99"},"content":"     * @param message Message to be printed in the same style as other","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"s7u4rt99"},"content":"     *                outputs of Duke.","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"s7u4rt99"},"content":"    public void print(String message) {","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"s7u4rt99"},"content":"        System.out.println(LINE);","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"s7u4rt99"},"content":"        System.out.println(message);","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"s7u4rt99"},"content":"        System.out.println(LINE);","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"s7u4rt99"},"content":"     * Prints out TaskList in a form of a list for users to see.","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"s7u4rt99"},"content":"     * @param dukeList DukeList to be printed.","lastModifiedDate":"2021-09-07"},{"lineNumber":37,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"s7u4rt99"},"content":"    public void print(DukeList dukeList) {","lastModifiedDate":"2021-09-07"},{"lineNumber":39,"author":{"gitId":"s7u4rt99"},"content":"        System.out.println(LINE);","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"s7u4rt99"},"content":"        System.out.println(\"Here are the tasks in your \" + dukeList.type() + \":\");","lastModifiedDate":"2021-09-07"},{"lineNumber":41,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"s7u4rt99"},"content":"        for (int i \u003d 0; i \u003c dukeList.getSize(); i++) {","lastModifiedDate":"2021-09-07"},{"lineNumber":43,"author":{"gitId":"s7u4rt99"},"content":"            System.out.println((i + 1) + \".\" + dukeList.taskToString(i));","lastModifiedDate":"2021-09-07"},{"lineNumber":44,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"s7u4rt99"},"content":"        System.out.println(LINE);","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":50,"author":{"gitId":"s7u4rt99"},"content":"     * Gets String representation of what is printed out when print is called.","lastModifiedDate":"2021-09-06"},{"lineNumber":51,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":52,"author":{"gitId":"s7u4rt99"},"content":"     * @param dukeList DukeList to be printed.","lastModifiedDate":"2021-09-07"},{"lineNumber":53,"author":{"gitId":"s7u4rt99"},"content":"     * @return String representation of what gets printed out of print method.","lastModifiedDate":"2021-09-06"},{"lineNumber":54,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":55,"author":{"gitId":"s7u4rt99"},"content":"    public String formatPrintString(DukeList dukeList) {","lastModifiedDate":"2021-09-07"},{"lineNumber":56,"author":{"gitId":"s7u4rt99"},"content":"        String output \u003d \"Here are the tasks in your \" + dukeList.type() + \":\";","lastModifiedDate":"2021-09-07"},{"lineNumber":57,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":58,"author":{"gitId":"s7u4rt99"},"content":"        for (int i \u003d 0; i \u003c dukeList.getSize(); i++) {","lastModifiedDate":"2021-09-07"},{"lineNumber":59,"author":{"gitId":"s7u4rt99"},"content":"            output +\u003d \"\\n\" + (i + 1) + \".\" + dukeList.taskToString(i);","lastModifiedDate":"2021-09-07"},{"lineNumber":60,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-02"},{"lineNumber":61,"author":{"gitId":"s7u4rt99"},"content":"        return output;","lastModifiedDate":"2021-09-02"},{"lineNumber":62,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":63,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":64,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":65,"author":{"gitId":"s7u4rt99"},"content":"     * Prints add message in same style as other outputs of Duke whenever","lastModifiedDate":"2021-08-31"},{"lineNumber":66,"author":{"gitId":"s7u4rt99"},"content":"     * a new Task has been added.","lastModifiedDate":"2021-08-31"},{"lineNumber":67,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":68,"author":{"gitId":"s7u4rt99"},"content":"     * @param toAdd Task to be added.","lastModifiedDate":"2021-08-31"},{"lineNumber":69,"author":{"gitId":"s7u4rt99"},"content":"     * @param size Size of TaskList.","lastModifiedDate":"2021-08-31"},{"lineNumber":70,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":71,"author":{"gitId":"s7u4rt99"},"content":"    public void printAdd(Task toAdd, int size) {","lastModifiedDate":"2021-08-31"},{"lineNumber":72,"author":{"gitId":"s7u4rt99"},"content":"        String message \u003d \"Got it. I\u0027ve added this task:\\n\" + \"  \" + toAdd","lastModifiedDate":"2021-08-31"},{"lineNumber":73,"author":{"gitId":"s7u4rt99"},"content":"                + \"\\nNow you have \" + size + \" tasks in the list.\";","lastModifiedDate":"2021-08-31"},{"lineNumber":74,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":75,"author":{"gitId":"s7u4rt99"},"content":"        print(message);","lastModifiedDate":"2021-08-31"},{"lineNumber":76,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":77,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":78,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":79,"author":{"gitId":"s7u4rt99"},"content":"     * Gets String representation of what is printed when printAdd is called.","lastModifiedDate":"2021-09-06"},{"lineNumber":80,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":81,"author":{"gitId":"s7u4rt99"},"content":"     * @param toAdd Task to be added.","lastModifiedDate":"2021-09-06"},{"lineNumber":82,"author":{"gitId":"s7u4rt99"},"content":"     * @param size Size of TaskList.","lastModifiedDate":"2021-09-06"},{"lineNumber":83,"author":{"gitId":"s7u4rt99"},"content":"     * @return String representation of what is printed from printAdd.","lastModifiedDate":"2021-09-06"},{"lineNumber":84,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":85,"author":{"gitId":"s7u4rt99"},"content":"    public String formatPrintAddString(Task toAdd, int size) {","lastModifiedDate":"2021-09-06"},{"lineNumber":86,"author":{"gitId":"s7u4rt99"},"content":"        return \"Got it. I\u0027ve added this task:\\n\" + \"  \" + toAdd","lastModifiedDate":"2021-09-02"},{"lineNumber":87,"author":{"gitId":"s7u4rt99"},"content":"                + \"\\nNow you have \" + size + \" tasks in the list.\";","lastModifiedDate":"2021-09-02"},{"lineNumber":88,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":89,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":90,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":91,"author":{"gitId":"s7u4rt99"},"content":"     * Builds message in same form as other outputs of Duke.","lastModifiedDate":"2021-08-26"},{"lineNumber":92,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":93,"author":{"gitId":"s7u4rt99"},"content":"     * @param message Message to be built in the same form as other outputs.","lastModifiedDate":"2021-08-26"},{"lineNumber":94,"author":{"gitId":"s7u4rt99"},"content":"     * @return Message which has been built in the same form as other outputs.","lastModifiedDate":"2021-08-26"},{"lineNumber":95,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":96,"author":{"gitId":"s7u4rt99"},"content":"    public String buildMessage(String message) {","lastModifiedDate":"2021-08-25"},{"lineNumber":97,"author":{"gitId":"s7u4rt99"},"content":"        // to build error messages","lastModifiedDate":"2021-08-25"},{"lineNumber":98,"author":{"gitId":"s7u4rt99"},"content":"        return LINE + \"\\n\" + message + \"\\n\" + LINE;","lastModifiedDate":"2021-08-25"},{"lineNumber":99,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":100,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":101,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":102,"author":{"gitId":"s7u4rt99"},"content":"     * Reads next line of user\u0027s input.","lastModifiedDate":"2021-08-26"},{"lineNumber":103,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":104,"author":{"gitId":"s7u4rt99"},"content":"     * @return String representation of user\u0027s input.","lastModifiedDate":"2021-08-26"},{"lineNumber":105,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":106,"author":{"gitId":"s7u4rt99"},"content":"    public String readInput() {","lastModifiedDate":"2021-08-25"},{"lineNumber":107,"author":{"gitId":"s7u4rt99"},"content":"        return sc.nextLine();","lastModifiedDate":"2021-08-25"},{"lineNumber":108,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":109,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":110,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":111,"author":{"gitId":"s7u4rt99"},"content":"     * Welcomes user to Duke.","lastModifiedDate":"2021-08-26"},{"lineNumber":112,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":113,"author":{"gitId":"s7u4rt99"},"content":"    public void welcome() {","lastModifiedDate":"2021-08-25"},{"lineNumber":114,"author":{"gitId":"s7u4rt99"},"content":"        print(\"Hello! I\u0027m duke.Duke\\n\"","lastModifiedDate":"2021-08-25"},{"lineNumber":115,"author":{"gitId":"s7u4rt99"},"content":"                + \" ____        _        \\n\"","lastModifiedDate":"2021-08-25"},{"lineNumber":116,"author":{"gitId":"s7u4rt99"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2021-08-25"},{"lineNumber":117,"author":{"gitId":"s7u4rt99"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2021-08-25"},{"lineNumber":118,"author":{"gitId":"s7u4rt99"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2021-08-25"},{"lineNumber":119,"author":{"gitId":"s7u4rt99"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\"","lastModifiedDate":"2021-08-25"},{"lineNumber":120,"author":{"gitId":"s7u4rt99"},"content":"                + \"What can I do for you?\");","lastModifiedDate":"2021-08-25"},{"lineNumber":121,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":122,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":123,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":124,"author":{"gitId":"s7u4rt99"},"content":"     * Prints out TaskList of tasks with given keyword for users to see.","lastModifiedDate":"2021-08-26"},{"lineNumber":125,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":126,"author":{"gitId":"s7u4rt99"},"content":"     * @param tasksWithKeyword TaskList of tasks with given keyword.","lastModifiedDate":"2021-08-26"},{"lineNumber":127,"author":{"gitId":"s7u4rt99"},"content":"     * @param keyword Keyword which tasks in tasksWithKeyword contains.","lastModifiedDate":"2021-08-26"},{"lineNumber":128,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":129,"author":{"gitId":"s7u4rt99"},"content":"    public void printKeywordTasks(TaskList tasksWithKeyword, String keyword) {","lastModifiedDate":"2021-08-26"},{"lineNumber":130,"author":{"gitId":"s7u4rt99"},"content":"        if (tasksWithKeyword.getSize() \u003e 0) {","lastModifiedDate":"2021-08-26"},{"lineNumber":131,"author":{"gitId":"s7u4rt99"},"content":"            System.out.println(LINE);","lastModifiedDate":"2021-08-26"},{"lineNumber":132,"author":{"gitId":"s7u4rt99"},"content":"            System.out.println(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2021-08-26"},{"lineNumber":133,"author":{"gitId":"s7u4rt99"},"content":"            for (int i \u003d 0; i \u003c tasksWithKeyword.getSize(); i++) {","lastModifiedDate":"2021-08-26"},{"lineNumber":134,"author":{"gitId":"s7u4rt99"},"content":"                System.out.println((i + 1) + \".\" + tasksWithKeyword.taskToString(i));","lastModifiedDate":"2021-08-26"},{"lineNumber":135,"author":{"gitId":"s7u4rt99"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":136,"author":{"gitId":"s7u4rt99"},"content":"            System.out.println(LINE);","lastModifiedDate":"2021-08-26"},{"lineNumber":137,"author":{"gitId":"s7u4rt99"},"content":"        } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":138,"author":{"gitId":"s7u4rt99"},"content":"            print(\"You do not have any tasks with keyword: \" + keyword + \".\");","lastModifiedDate":"2021-08-26"},{"lineNumber":139,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":140,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":141,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":142,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":143,"author":{"gitId":"s7u4rt99"},"content":"     * Gets String representation of what is printed out when printKeywordTasks is called.","lastModifiedDate":"2021-09-06"},{"lineNumber":144,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":145,"author":{"gitId":"s7u4rt99"},"content":"     * @param tasksWithKeyword TaskList of tasks with given keyword.","lastModifiedDate":"2021-09-06"},{"lineNumber":146,"author":{"gitId":"s7u4rt99"},"content":"     * @param keyword Keyword which tasks in tasksWithKeyword contains.","lastModifiedDate":"2021-09-06"},{"lineNumber":147,"author":{"gitId":"s7u4rt99"},"content":"     * @return String representation of what is printed out from printKeywordTasks.","lastModifiedDate":"2021-09-06"},{"lineNumber":148,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":149,"author":{"gitId":"s7u4rt99"},"content":"    public String formatPrintKeywordTasksString(TaskList tasksWithKeyword, String keyword) {","lastModifiedDate":"2021-09-06"},{"lineNumber":150,"author":{"gitId":"s7u4rt99"},"content":"        if (tasksWithKeyword.getSize() \u003e 0) {","lastModifiedDate":"2021-09-02"},{"lineNumber":151,"author":{"gitId":"s7u4rt99"},"content":"            String output \u003d \"Here are the matching tasks in your list:\";","lastModifiedDate":"2021-09-02"},{"lineNumber":152,"author":{"gitId":"s7u4rt99"},"content":"            for (int i \u003d 0; i \u003c tasksWithKeyword.getSize(); i++) {","lastModifiedDate":"2021-09-02"},{"lineNumber":153,"author":{"gitId":"s7u4rt99"},"content":"                output +\u003d \"\\n\" + (i + 1) + \".\" + tasksWithKeyword.taskToString(i);","lastModifiedDate":"2021-09-02"},{"lineNumber":154,"author":{"gitId":"s7u4rt99"},"content":"            }","lastModifiedDate":"2021-09-02"},{"lineNumber":155,"author":{"gitId":"s7u4rt99"},"content":"            return output;","lastModifiedDate":"2021-09-02"},{"lineNumber":156,"author":{"gitId":"s7u4rt99"},"content":"        } else {","lastModifiedDate":"2021-09-02"},{"lineNumber":157,"author":{"gitId":"s7u4rt99"},"content":"            return \"You do not have any tasks with keyword: \" + keyword + \".\";","lastModifiedDate":"2021-09-02"},{"lineNumber":158,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-02"},{"lineNumber":159,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":160,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":161,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":162,"author":{"gitId":"s7u4rt99"},"content":"     * Says bye to user and closes scanner.","lastModifiedDate":"2021-08-26"},{"lineNumber":163,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":164,"author":{"gitId":"s7u4rt99"},"content":"    public void exit() {","lastModifiedDate":"2021-08-25"},{"lineNumber":165,"author":{"gitId":"s7u4rt99"},"content":"        print(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2021-08-25"},{"lineNumber":166,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":167,"author":{"gitId":"s7u4rt99"},"content":"        sc.close();","lastModifiedDate":"2021-08-25"},{"lineNumber":168,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":169,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":170,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":171,"author":{"gitId":"s7u4rt99"},"content":"     * Gets String representation of what gets printed out when exit is called.","lastModifiedDate":"2021-09-06"},{"lineNumber":172,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":173,"author":{"gitId":"s7u4rt99"},"content":"     * @return String representation of what gets printed out when exit is called.","lastModifiedDate":"2021-09-06"},{"lineNumber":174,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":175,"author":{"gitId":"s7u4rt99"},"content":"    public String formatExitString() {","lastModifiedDate":"2021-09-06"},{"lineNumber":176,"author":{"gitId":"s7u4rt99"},"content":"        return \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2021-09-02"},{"lineNumber":177,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":178,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":179,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"s7u4rt99":179}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke.command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"import duke.ArchiveList;","lastModifiedDate":"2021-09-07"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":" * Representation for the add command of Duke.","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"    private final Task toAdd;","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":"     * Constructor for AddCommand.","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"s7u4rt99"},"content":"     * @param toAdd Task to add to taskList.","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"s7u4rt99"},"content":"    public AddCommand(Task toAdd) {","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"s7u4rt99"},"content":"        this.toAdd \u003d toAdd;","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"s7u4rt99"},"content":"     * Checks if AddCommand is an exit command.","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"s7u4rt99"},"content":"     * @return false.","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"s7u4rt99"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"s7u4rt99"},"content":"        return false;","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"s7u4rt99"},"content":"     * Executes the AddCommand.","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"s7u4rt99"},"content":"     * @param taskList TaskList object to add toAdd to.","lastModifiedDate":"2021-09-06"},{"lineNumber":38,"author":{"gitId":"s7u4rt99"},"content":"     * @param archiveList ArchiveList to store archived tasks.","lastModifiedDate":"2021-09-07"},{"lineNumber":39,"author":{"gitId":"s7u4rt99"},"content":"     * @param ui Ui Object to print to user.","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"s7u4rt99"},"content":"     * @param storage Storage object which saves and loads the taskList.","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"s7u4rt99"},"content":"    public void execute(TaskList taskList, ArchiveList archiveList, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-07"},{"lineNumber":44,"author":{"gitId":"s7u4rt99"},"content":"        taskList.add(this.toAdd);","lastModifiedDate":"2021-09-06"},{"lineNumber":45,"author":{"gitId":"s7u4rt99"},"content":"        ui.printAdd(this.toAdd, taskList.getSize());","lastModifiedDate":"2021-09-06"},{"lineNumber":46,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":48,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":49,"author":{"gitId":"s7u4rt99"},"content":"     * Gets the String representation of the things printed in the","lastModifiedDate":"2021-09-06"},{"lineNumber":50,"author":{"gitId":"s7u4rt99"},"content":"     * execute method as well as execute the adding of the task.","lastModifiedDate":"2021-09-06"},{"lineNumber":51,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":52,"author":{"gitId":"s7u4rt99"},"content":"     * @param taskList TaskList object to add toAdd to.","lastModifiedDate":"2021-09-06"},{"lineNumber":53,"author":{"gitId":"s7u4rt99"},"content":"     * @param archiveList ArchiveList to store archived tasks.","lastModifiedDate":"2021-09-07"},{"lineNumber":54,"author":{"gitId":"s7u4rt99"},"content":"     * @param ui Ui Object to get the String representation from.","lastModifiedDate":"2021-09-06"},{"lineNumber":55,"author":{"gitId":"s7u4rt99"},"content":"     * @param storage Storage object which saves and loads the taskList.","lastModifiedDate":"2021-09-06"},{"lineNumber":56,"author":{"gitId":"s7u4rt99"},"content":"     * @return String representation of the things printed in the execute method.","lastModifiedDate":"2021-09-06"},{"lineNumber":57,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":58,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-09-02"},{"lineNumber":59,"author":{"gitId":"s7u4rt99"},"content":"    public String formatExecutedString(TaskList taskList, ArchiveList archiveList, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-07"},{"lineNumber":60,"author":{"gitId":"s7u4rt99"},"content":"        taskList.add(this.toAdd);","lastModifiedDate":"2021-09-06"},{"lineNumber":61,"author":{"gitId":"s7u4rt99"},"content":"        return ui.formatPrintAddString(this.toAdd, taskList.getSize());","lastModifiedDate":"2021-09-06"},{"lineNumber":62,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":63,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"s7u4rt99":63}},{"path":"src/main/java/duke/command/ArchiveCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke.command;","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"import duke.ArchiveList;","lastModifiedDate":"2021-09-07"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":"import duke.Storage;","lastModifiedDate":"2021-09-07"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":"import duke.TaskList;","lastModifiedDate":"2021-09-07"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"import duke.Ui;","lastModifiedDate":"2021-09-07"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-07"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":"public class ArchiveCommand extends Command {","lastModifiedDate":"2021-09-07"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"    private final int indexToArchive;","lastModifiedDate":"2021-09-07"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"    private final boolean isArchiveAll;","lastModifiedDate":"2021-09-07"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"     * Constructor for ArchiveCommand.","lastModifiedDate":"2021-09-07"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":"     * @param indexToArchive index of task to be archived.","lastModifiedDate":"2021-09-07"},{"lineNumber":17,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":18,"author":{"gitId":"s7u4rt99"},"content":"    public ArchiveCommand(int indexToArchive) {","lastModifiedDate":"2021-09-07"},{"lineNumber":19,"author":{"gitId":"s7u4rt99"},"content":"        this.indexToArchive \u003d indexToArchive;","lastModifiedDate":"2021-09-07"},{"lineNumber":20,"author":{"gitId":"s7u4rt99"},"content":"        this.isArchiveAll \u003d indexToArchive \u003d\u003d -1;","lastModifiedDate":"2021-09-07"},{"lineNumber":21,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":22,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":23,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":24,"author":{"gitId":"s7u4rt99"},"content":"     * Checks if this is an exit command.","lastModifiedDate":"2021-09-07"},{"lineNumber":25,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":26,"author":{"gitId":"s7u4rt99"},"content":"     * @return false.","lastModifiedDate":"2021-09-07"},{"lineNumber":27,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":28,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-09-07"},{"lineNumber":29,"author":{"gitId":"s7u4rt99"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-09-07"},{"lineNumber":30,"author":{"gitId":"s7u4rt99"},"content":"        return false;","lastModifiedDate":"2021-09-07"},{"lineNumber":31,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":32,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":33,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":34,"author":{"gitId":"s7u4rt99"},"content":"     * Executes the Archive Command.","lastModifiedDate":"2021-09-07"},{"lineNumber":35,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":36,"author":{"gitId":"s7u4rt99"},"content":"     * @param taskList taskList which task at indexToArchive would be archived.","lastModifiedDate":"2021-09-07"},{"lineNumber":37,"author":{"gitId":"s7u4rt99"},"content":"     * @param archiveList archiveList to store the archived task.","lastModifiedDate":"2021-09-07"},{"lineNumber":38,"author":{"gitId":"s7u4rt99"},"content":"     * @param ui Ui to get the String representation of the text printed.","lastModifiedDate":"2021-09-07"},{"lineNumber":39,"author":{"gitId":"s7u4rt99"},"content":"     * @param storage Storage to save and load TaskList for Duke.","lastModifiedDate":"2021-09-07"},{"lineNumber":40,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":41,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-09-07"},{"lineNumber":42,"author":{"gitId":"s7u4rt99"},"content":"    public void execute(TaskList taskList, ArchiveList archiveList, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-07"},{"lineNumber":43,"author":{"gitId":"s7u4rt99"},"content":"        String message;","lastModifiedDate":"2021-09-07"},{"lineNumber":44,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":45,"author":{"gitId":"s7u4rt99"},"content":"        if (this.isArchiveAll) {","lastModifiedDate":"2021-09-07"},{"lineNumber":46,"author":{"gitId":"s7u4rt99"},"content":"            message \u003d formatAndArchiveAll(taskList, archiveList);","lastModifiedDate":"2021-09-07"},{"lineNumber":47,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":48,"author":{"gitId":"s7u4rt99"},"content":"        } else {","lastModifiedDate":"2021-09-07"},{"lineNumber":49,"author":{"gitId":"s7u4rt99"},"content":"            message \u003d formatAndArchiveIndex(taskList, archiveList);","lastModifiedDate":"2021-09-07"},{"lineNumber":50,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":51,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":52,"author":{"gitId":"s7u4rt99"},"content":"        ui.print(message);","lastModifiedDate":"2021-09-07"},{"lineNumber":53,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":54,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":55,"author":{"gitId":"s7u4rt99"},"content":"     * Gets the String representation of the things printed in the","lastModifiedDate":"2021-09-07"},{"lineNumber":56,"author":{"gitId":"s7u4rt99"},"content":"     * execute method as well as execute the archiving of the task at","lastModifiedDate":"2021-09-07"},{"lineNumber":57,"author":{"gitId":"s7u4rt99"},"content":"     * indexToBeArchived.","lastModifiedDate":"2021-09-07"},{"lineNumber":58,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":59,"author":{"gitId":"s7u4rt99"},"content":"     * @param taskList taskList which task at indexToArchive would be archived.","lastModifiedDate":"2021-09-07"},{"lineNumber":60,"author":{"gitId":"s7u4rt99"},"content":"     * @param archiveList archiveList to store the archived task.","lastModifiedDate":"2021-09-07"},{"lineNumber":61,"author":{"gitId":"s7u4rt99"},"content":"     * @param ui Ui to get the String representation of the text printed.","lastModifiedDate":"2021-09-07"},{"lineNumber":62,"author":{"gitId":"s7u4rt99"},"content":"     * @param storage Storage to save and load TaskList for Duke.","lastModifiedDate":"2021-09-07"},{"lineNumber":63,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":64,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-09-07"},{"lineNumber":65,"author":{"gitId":"s7u4rt99"},"content":"    public String formatExecutedString(TaskList taskList, ArchiveList archiveList, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-07"},{"lineNumber":66,"author":{"gitId":"s7u4rt99"},"content":"        String message;","lastModifiedDate":"2021-09-07"},{"lineNumber":67,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":68,"author":{"gitId":"s7u4rt99"},"content":"        if (this.isArchiveAll) {","lastModifiedDate":"2021-09-07"},{"lineNumber":69,"author":{"gitId":"s7u4rt99"},"content":"            message \u003d formatAndArchiveAll(taskList, archiveList);","lastModifiedDate":"2021-09-07"},{"lineNumber":70,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":71,"author":{"gitId":"s7u4rt99"},"content":"        } else {","lastModifiedDate":"2021-09-07"},{"lineNumber":72,"author":{"gitId":"s7u4rt99"},"content":"            message \u003d formatAndArchiveIndex(taskList, archiveList);","lastModifiedDate":"2021-09-07"},{"lineNumber":73,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":74,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":75,"author":{"gitId":"s7u4rt99"},"content":"        return message;","lastModifiedDate":"2021-09-07"},{"lineNumber":76,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":77,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":78,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":79,"author":{"gitId":"s7u4rt99"},"content":"     * Formats and archive task at indexToArchive in taskList.","lastModifiedDate":"2021-09-07"},{"lineNumber":80,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":81,"author":{"gitId":"s7u4rt99"},"content":"     * @param taskList taskList to archive task at indexToArchive.","lastModifiedDate":"2021-09-07"},{"lineNumber":82,"author":{"gitId":"s7u4rt99"},"content":"     * @param archiveList archiveList to add the archived task to.","lastModifiedDate":"2021-09-07"},{"lineNumber":83,"author":{"gitId":"s7u4rt99"},"content":"     * @return Returns formatted String to be printed to the user.","lastModifiedDate":"2021-09-07"},{"lineNumber":84,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":85,"author":{"gitId":"s7u4rt99"},"content":"    private String formatAndArchiveIndex(TaskList taskList, ArchiveList archiveList) {","lastModifiedDate":"2021-09-07"},{"lineNumber":86,"author":{"gitId":"s7u4rt99"},"content":"        Task toArchive \u003d taskList.archive(indexToArchive, archiveList);","lastModifiedDate":"2021-09-07"},{"lineNumber":87,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":88,"author":{"gitId":"s7u4rt99"},"content":"        return \"Noted. I\u0027ve archived this task:\\n\" + toArchive + \"\\nNow you have \"","lastModifiedDate":"2021-09-07"},{"lineNumber":89,"author":{"gitId":"s7u4rt99"},"content":"                + taskList.getSize() + \" tasks in the list\";","lastModifiedDate":"2021-09-07"},{"lineNumber":90,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":91,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":92,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":93,"author":{"gitId":"s7u4rt99"},"content":"     * Formats and archive all tasks in taskList.","lastModifiedDate":"2021-09-07"},{"lineNumber":94,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":95,"author":{"gitId":"s7u4rt99"},"content":"     * @param taskList taskList to archive all tasks.","lastModifiedDate":"2021-09-07"},{"lineNumber":96,"author":{"gitId":"s7u4rt99"},"content":"     * @param archiveList archiveList to add the archived task to.","lastModifiedDate":"2021-09-07"},{"lineNumber":97,"author":{"gitId":"s7u4rt99"},"content":"     * @return Returns formatted String to be printed to the user.","lastModifiedDate":"2021-09-07"},{"lineNumber":98,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":99,"author":{"gitId":"s7u4rt99"},"content":"    private String formatAndArchiveAll(TaskList taskList, ArchiveList archiveList) {","lastModifiedDate":"2021-09-07"},{"lineNumber":100,"author":{"gitId":"s7u4rt99"},"content":"        String message \u003d \"Noted. I\u0027ve archived these tasks:\\n\";","lastModifiedDate":"2021-09-07"},{"lineNumber":101,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":102,"author":{"gitId":"s7u4rt99"},"content":"        int counter \u003d 0;","lastModifiedDate":"2021-09-07"},{"lineNumber":103,"author":{"gitId":"s7u4rt99"},"content":"        int size \u003d taskList.getSize();","lastModifiedDate":"2021-09-07"},{"lineNumber":104,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":105,"author":{"gitId":"s7u4rt99"},"content":"        for (int i \u003d 0; i \u003c size; i++) {","lastModifiedDate":"2021-09-07"},{"lineNumber":106,"author":{"gitId":"s7u4rt99"},"content":"            Task toArchive \u003d taskList.archive(0, archiveList);","lastModifiedDate":"2021-09-07"},{"lineNumber":107,"author":{"gitId":"s7u4rt99"},"content":"            counter++;","lastModifiedDate":"2021-09-07"},{"lineNumber":108,"author":{"gitId":"s7u4rt99"},"content":"            message +\u003d counter + \".\" + toArchive + \"\\n\";","lastModifiedDate":"2021-09-07"},{"lineNumber":109,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":110,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":111,"author":{"gitId":"s7u4rt99"},"content":"        message +\u003d \"Now you have 0 tasks in the list\";","lastModifiedDate":"2021-09-07"},{"lineNumber":112,"author":{"gitId":"s7u4rt99"},"content":"        return message;","lastModifiedDate":"2021-09-07"},{"lineNumber":113,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":114,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-09-07"}],"authorContributionMap":{"s7u4rt99":114}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke.command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"import duke.ArchiveList;","lastModifiedDate":"2021-09-07"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":" * Abstract class for Commands.","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"public abstract class Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"    public abstract void execute(TaskList taskList, ArchiveList archiveList, Ui ui, Storage storage);","lastModifiedDate":"2021-09-07"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"    public abstract boolean isExit();","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"    public abstract String formatExecutedString(TaskList taskList, ArchiveList archiveList, Ui ui, Storage storage);","lastModifiedDate":"2021-09-07"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"s7u4rt99":15}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke.command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"import duke.ArchiveList;","lastModifiedDate":"2021-09-07"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":" * Representation for the done command of Duke.","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"public class DoneCommand extends Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"    private final int indexToMarkAsDone;","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"    private final boolean isMarkAll;","lastModifiedDate":"2021-09-07"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":"     * Constructor for DoneCommand.","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"s7u4rt99"},"content":"     * @param indexToMarkAsDone Index of taskList to mark as done.","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"s7u4rt99"},"content":"    public DoneCommand(int indexToMarkAsDone) {","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"s7u4rt99"},"content":"        this.indexToMarkAsDone \u003d indexToMarkAsDone;","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"s7u4rt99"},"content":"        this.isMarkAll \u003d indexToMarkAsDone \u003d\u003d -1;","lastModifiedDate":"2021-09-07"},{"lineNumber":23,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"s7u4rt99"},"content":"     * Checks if this is an exit command.","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"s7u4rt99"},"content":"     * @return false.","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"s7u4rt99"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"s7u4rt99"},"content":"        return false;","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"s7u4rt99"},"content":"     * Executes the DoneCommand.","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"s7u4rt99"},"content":"     * @param taskList TaskList to mark Task at index indexToMarkAsDone as Done.","lastModifiedDate":"2021-09-06"},{"lineNumber":39,"author":{"gitId":"s7u4rt99"},"content":"     * @param archiveList ArchiveList to store archived tasks.","lastModifiedDate":"2021-09-07"},{"lineNumber":40,"author":{"gitId":"s7u4rt99"},"content":"     * @param ui Ui to print to users of Duke.","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"s7u4rt99"},"content":"     * @param storage Storage to save and load TaskList for Duke.","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"s7u4rt99"},"content":"    public void execute(TaskList taskList, ArchiveList archiveList, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-07"},{"lineNumber":45,"author":{"gitId":"s7u4rt99"},"content":"        String message;","lastModifiedDate":"2021-09-07"},{"lineNumber":46,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":47,"author":{"gitId":"s7u4rt99"},"content":"        if (this.isMarkAll) {","lastModifiedDate":"2021-09-07"},{"lineNumber":48,"author":{"gitId":"s7u4rt99"},"content":"            message \u003d formatAndMarkAllAsDone(taskList);","lastModifiedDate":"2021-09-07"},{"lineNumber":49,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":50,"author":{"gitId":"s7u4rt99"},"content":"        } else {","lastModifiedDate":"2021-09-07"},{"lineNumber":51,"author":{"gitId":"s7u4rt99"},"content":"            message \u003d formatAndMarkDoneAtIndex(taskList);","lastModifiedDate":"2021-09-07"},{"lineNumber":52,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":53,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":54,"author":{"gitId":"s7u4rt99"},"content":"        ui.print(message);","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":57,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":58,"author":{"gitId":"s7u4rt99"},"content":"     * Gets the String representation of the things printed in the","lastModifiedDate":"2021-09-06"},{"lineNumber":59,"author":{"gitId":"s7u4rt99"},"content":"     * execute method as well as execute the marking of the task as done.","lastModifiedDate":"2021-09-06"},{"lineNumber":60,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":61,"author":{"gitId":"s7u4rt99"},"content":"     * @param taskList TaskList to mark Task at index indexToMarkAsDone as Done.","lastModifiedDate":"2021-09-06"},{"lineNumber":62,"author":{"gitId":"s7u4rt99"},"content":"     * @param archiveList ArchiveList to store archived tasks.","lastModifiedDate":"2021-09-07"},{"lineNumber":63,"author":{"gitId":"s7u4rt99"},"content":"     * @param ui Ui to get the String representation of the text printed.","lastModifiedDate":"2021-09-06"},{"lineNumber":64,"author":{"gitId":"s7u4rt99"},"content":"     * @param storage Storage to save and load TaskList for Duke.","lastModifiedDate":"2021-09-06"},{"lineNumber":65,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":66,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-09-02"},{"lineNumber":67,"author":{"gitId":"s7u4rt99"},"content":"    public String formatExecutedString(TaskList taskList, ArchiveList archiveList, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-07"},{"lineNumber":68,"author":{"gitId":"s7u4rt99"},"content":"        String message;","lastModifiedDate":"2021-09-07"},{"lineNumber":69,"author":{"gitId":"s7u4rt99"},"content":"        if (this.isMarkAll) {","lastModifiedDate":"2021-09-07"},{"lineNumber":70,"author":{"gitId":"s7u4rt99"},"content":"            message \u003d formatAndMarkAllAsDone(taskList);","lastModifiedDate":"2021-09-07"},{"lineNumber":71,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":72,"author":{"gitId":"s7u4rt99"},"content":"        } else {","lastModifiedDate":"2021-09-07"},{"lineNumber":73,"author":{"gitId":"s7u4rt99"},"content":"            message \u003d formatAndMarkDoneAtIndex(taskList);","lastModifiedDate":"2021-09-07"},{"lineNumber":74,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":75,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":76,"author":{"gitId":"s7u4rt99"},"content":"        return message;","lastModifiedDate":"2021-09-07"},{"lineNumber":77,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":78,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":79,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":80,"author":{"gitId":"s7u4rt99"},"content":"     * Formats and marks task at indexToMarkAsDone done in given taskList.","lastModifiedDate":"2021-09-07"},{"lineNumber":81,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":82,"author":{"gitId":"s7u4rt99"},"content":"     * @param taskList taskList to mark task at indexToMarkAsDone done.","lastModifiedDate":"2021-09-07"},{"lineNumber":83,"author":{"gitId":"s7u4rt99"},"content":"     * @return Returns formatted String to be printed to the user.","lastModifiedDate":"2021-09-07"},{"lineNumber":84,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":85,"author":{"gitId":"s7u4rt99"},"content":"    private String formatAndMarkDoneAtIndex(TaskList taskList) {","lastModifiedDate":"2021-09-07"},{"lineNumber":86,"author":{"gitId":"s7u4rt99"},"content":"        taskList.markAsDone(this.indexToMarkAsDone);","lastModifiedDate":"2021-09-06"},{"lineNumber":87,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":88,"author":{"gitId":"s7u4rt99"},"content":"        return \"Nice! I\u0027ve marked this task as done:\\n\" + \"  \"","lastModifiedDate":"2021-09-02"},{"lineNumber":89,"author":{"gitId":"s7u4rt99"},"content":"                + taskList.taskToString(this.indexToMarkAsDone);","lastModifiedDate":"2021-09-06"},{"lineNumber":90,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":91,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":92,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":93,"author":{"gitId":"s7u4rt99"},"content":"     * Formats and marks all tasks as done in given taskList.","lastModifiedDate":"2021-09-07"},{"lineNumber":94,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":95,"author":{"gitId":"s7u4rt99"},"content":"     * @param taskList taskList to mark all tasks as done.","lastModifiedDate":"2021-09-07"},{"lineNumber":96,"author":{"gitId":"s7u4rt99"},"content":"     * @return Returns formatted String to be printed to the user.","lastModifiedDate":"2021-09-07"},{"lineNumber":97,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":98,"author":{"gitId":"s7u4rt99"},"content":"    private String formatAndMarkAllAsDone(TaskList taskList) {","lastModifiedDate":"2021-09-07"},{"lineNumber":99,"author":{"gitId":"s7u4rt99"},"content":"        String message \u003d \"Noted. I\u0027ve marked these tasks as done:\\n\";","lastModifiedDate":"2021-09-07"},{"lineNumber":100,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":101,"author":{"gitId":"s7u4rt99"},"content":"        taskList.markAllAsDone();","lastModifiedDate":"2021-09-07"},{"lineNumber":102,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":103,"author":{"gitId":"s7u4rt99"},"content":"        for (int i \u003d 0; i \u003c taskList.getSize(); i++) {","lastModifiedDate":"2021-09-07"},{"lineNumber":104,"author":{"gitId":"s7u4rt99"},"content":"            if (i \u003d\u003d taskList.getSize() - 1) {","lastModifiedDate":"2021-09-07"},{"lineNumber":105,"author":{"gitId":"s7u4rt99"},"content":"                message +\u003d i + 1 + \".\" + taskList.taskToString(i);","lastModifiedDate":"2021-09-07"},{"lineNumber":106,"author":{"gitId":"s7u4rt99"},"content":"            } else {","lastModifiedDate":"2021-09-07"},{"lineNumber":107,"author":{"gitId":"s7u4rt99"},"content":"                message +\u003d i + 1 + \".\" + taskList.taskToString(i) + \"\\n\";","lastModifiedDate":"2021-09-07"},{"lineNumber":108,"author":{"gitId":"s7u4rt99"},"content":"            }","lastModifiedDate":"2021-09-07"},{"lineNumber":109,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":110,"author":{"gitId":"s7u4rt99"},"content":"        return message;","lastModifiedDate":"2021-09-07"},{"lineNumber":111,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":112,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"s7u4rt99":112}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke.command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"import duke.ArchiveList;","lastModifiedDate":"2021-09-07"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":" * Representation for exit command of Duke.","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"     * Checks if this is an exit command.","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":"     * @return true.","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"s7u4rt99"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"s7u4rt99"},"content":"        return true;","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"s7u4rt99"},"content":"     * Executes the Exit Command.","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"s7u4rt99"},"content":"     * @param taskList TaskList of Tasks.","lastModifiedDate":"2021-09-06"},{"lineNumber":27,"author":{"gitId":"s7u4rt99"},"content":"     * @param archiveList ArchiveList to store archived tasks.","lastModifiedDate":"2021-09-07"},{"lineNumber":28,"author":{"gitId":"s7u4rt99"},"content":"     * @param ui Ui to print to users of Duke.","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"s7u4rt99"},"content":"     * @param storage Storage to save and load TaskList of Duke.","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"s7u4rt99"},"content":"    public void execute(TaskList taskList, ArchiveList archiveList, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-07"},{"lineNumber":33,"author":{"gitId":"s7u4rt99"},"content":"        storage.saveFile(taskList);","lastModifiedDate":"2021-09-06"},{"lineNumber":34,"author":{"gitId":"s7u4rt99"},"content":"        storage.saveArchive(archiveList);","lastModifiedDate":"2021-09-07"},{"lineNumber":35,"author":{"gitId":"s7u4rt99"},"content":"        ui.exit();","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":38,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":39,"author":{"gitId":"s7u4rt99"},"content":"     * Gets the String representation of the things printed in the","lastModifiedDate":"2021-09-06"},{"lineNumber":40,"author":{"gitId":"s7u4rt99"},"content":"     * execute method as well as execute exiting of the gui.","lastModifiedDate":"2021-09-06"},{"lineNumber":41,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":42,"author":{"gitId":"s7u4rt99"},"content":"     * @param taskList TaskList of Tasks.","lastModifiedDate":"2021-09-06"},{"lineNumber":43,"author":{"gitId":"s7u4rt99"},"content":"     * @param archiveList ArchiveList to store archived tasks.","lastModifiedDate":"2021-09-07"},{"lineNumber":44,"author":{"gitId":"s7u4rt99"},"content":"     * @param ui Ui to get String representation of the text printed.","lastModifiedDate":"2021-09-06"},{"lineNumber":45,"author":{"gitId":"s7u4rt99"},"content":"     * @param storage Storage to save and load TaskList of Duke.","lastModifiedDate":"2021-09-06"},{"lineNumber":46,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":47,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-09-02"},{"lineNumber":48,"author":{"gitId":"s7u4rt99"},"content":"    public String formatExecutedString(TaskList taskList, ArchiveList archiveList, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-07"},{"lineNumber":49,"author":{"gitId":"s7u4rt99"},"content":"        storage.saveFile(taskList);","lastModifiedDate":"2021-09-06"},{"lineNumber":50,"author":{"gitId":"s7u4rt99"},"content":"        storage.saveArchive(archiveList);","lastModifiedDate":"2021-09-07"},{"lineNumber":51,"author":{"gitId":"s7u4rt99"},"content":"        return ui.formatExitString();","lastModifiedDate":"2021-09-06"},{"lineNumber":52,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":53,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"s7u4rt99":53}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke.command;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"import duke.ArchiveList;","lastModifiedDate":"2021-09-07"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":" * Representation for the find command of Duke.","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"    private final String keyword;","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":"     * Constructor for FindCommand.","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"s7u4rt99"},"content":"     * @param keyword Keyword to search for in TaskList.","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"s7u4rt99"},"content":"    public FindCommand(String keyword) {","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"s7u4rt99"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"s7u4rt99"},"content":"     * Checks if FindCommand is an exit command.","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"s7u4rt99"},"content":"     * @return false.","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"s7u4rt99"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"s7u4rt99"},"content":"        return false;","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"s7u4rt99"},"content":"     * Executes the FindCommand.","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"s7u4rt99"},"content":"     * @param taskList TaskList object to find keyword from.","lastModifiedDate":"2021-09-06"},{"lineNumber":38,"author":{"gitId":"s7u4rt99"},"content":"     * @param archiveList ArchiveList to store archived tasks.","lastModifiedDate":"2021-09-07"},{"lineNumber":39,"author":{"gitId":"s7u4rt99"},"content":"     * @param ui Ui Object to print to user.","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"s7u4rt99"},"content":"     * @param storage Storage object which saves and loads the tasklist.","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"s7u4rt99"},"content":"    public void execute(TaskList taskList, ArchiveList archiveList, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-07"},{"lineNumber":44,"author":{"gitId":"s7u4rt99"},"content":"        TaskList keywordTasks \u003d taskList.findTasksWithKeyword(this.keyword);","lastModifiedDate":"2021-09-06"},{"lineNumber":45,"author":{"gitId":"s7u4rt99"},"content":"        ui.printKeywordTasks(keywordTasks, this.keyword);","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":48,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":49,"author":{"gitId":"s7u4rt99"},"content":"     * Gets the String representation of the things printed in the","lastModifiedDate":"2021-09-06"},{"lineNumber":50,"author":{"gitId":"s7u4rt99"},"content":"     * execute method as well as execute the finding of the keyword.","lastModifiedDate":"2021-09-06"},{"lineNumber":51,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":52,"author":{"gitId":"s7u4rt99"},"content":"     * @param taskList TaskList object to find keyword from.","lastModifiedDate":"2021-09-06"},{"lineNumber":53,"author":{"gitId":"s7u4rt99"},"content":"     * @param archiveList ArchiveList to store archived tasks.","lastModifiedDate":"2021-09-07"},{"lineNumber":54,"author":{"gitId":"s7u4rt99"},"content":"     * @param ui Ui Object to get the String representation of the text printed.","lastModifiedDate":"2021-09-06"},{"lineNumber":55,"author":{"gitId":"s7u4rt99"},"content":"     * @param storage Storage object which saves and loads the tasklist.","lastModifiedDate":"2021-09-06"},{"lineNumber":56,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":57,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-09-02"},{"lineNumber":58,"author":{"gitId":"s7u4rt99"},"content":"    public String formatExecutedString(TaskList taskList, ArchiveList archiveList, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-07"},{"lineNumber":59,"author":{"gitId":"s7u4rt99"},"content":"        TaskList keywordTasks \u003d taskList.findTasksWithKeyword(this.keyword);","lastModifiedDate":"2021-09-06"},{"lineNumber":60,"author":{"gitId":"s7u4rt99"},"content":"        return ui.formatPrintKeywordTasksString(keywordTasks, this.keyword);","lastModifiedDate":"2021-09-06"},{"lineNumber":61,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":62,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"s7u4rt99":62}},{"path":"src/main/java/duke/command/ListArchiveCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke.command;","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"import duke.ArchiveList;","lastModifiedDate":"2021-09-07"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":"import duke.Storage;","lastModifiedDate":"2021-09-07"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":"import duke.TaskList;","lastModifiedDate":"2021-09-07"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"import duke.Ui;","lastModifiedDate":"2021-09-07"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"public class ListArchiveCommand extends ListCommand {","lastModifiedDate":"2021-09-07"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"     * Executes the ListArchiveCommand.","lastModifiedDate":"2021-09-07"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"     * @param taskList TaskList of Tasks which are unarchived.","lastModifiedDate":"2021-09-07"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"     * @param archiveList ArchiveList of Tasks to be listed.","lastModifiedDate":"2021-09-07"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"     * @param ui Ui to print to users of Duke.","lastModifiedDate":"2021-09-07"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"     * @param storage Storage to save and load TaskList of Duke.","lastModifiedDate":"2021-09-07"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":17,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-09-07"},{"lineNumber":18,"author":{"gitId":"s7u4rt99"},"content":"    public void execute(TaskList taskList, ArchiveList archiveList, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-07"},{"lineNumber":19,"author":{"gitId":"s7u4rt99"},"content":"        ui.print(archiveList);","lastModifiedDate":"2021-09-07"},{"lineNumber":20,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":21,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":22,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":23,"author":{"gitId":"s7u4rt99"},"content":"     * Gets the String representation of the things printed in the","lastModifiedDate":"2021-09-07"},{"lineNumber":24,"author":{"gitId":"s7u4rt99"},"content":"     * execute method as well as execute list archive command.","lastModifiedDate":"2021-09-07"},{"lineNumber":25,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":26,"author":{"gitId":"s7u4rt99"},"content":"     * @param taskList TaskList of Tasks which are unarchived.","lastModifiedDate":"2021-09-07"},{"lineNumber":27,"author":{"gitId":"s7u4rt99"},"content":"     * @param archiveList ArchiveList of Tasks to be listed.","lastModifiedDate":"2021-09-07"},{"lineNumber":28,"author":{"gitId":"s7u4rt99"},"content":"     * @param ui Ui to get the String representation of the text printed.","lastModifiedDate":"2021-09-07"},{"lineNumber":29,"author":{"gitId":"s7u4rt99"},"content":"     * @param storage Storage to save and load TaskList of Duke.","lastModifiedDate":"2021-09-07"},{"lineNumber":30,"author":{"gitId":"s7u4rt99"},"content":"     * @return","lastModifiedDate":"2021-09-07"},{"lineNumber":31,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":32,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-09-07"},{"lineNumber":33,"author":{"gitId":"s7u4rt99"},"content":"    public String formatExecutedString(TaskList taskList, ArchiveList archiveList, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-07"},{"lineNumber":34,"author":{"gitId":"s7u4rt99"},"content":"        return ui.formatPrintString(archiveList);","lastModifiedDate":"2021-09-07"},{"lineNumber":35,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":36,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-09-07"}],"authorContributionMap":{"s7u4rt99":36}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke.command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"import duke.ArchiveList;","lastModifiedDate":"2021-09-07"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":" * Representation of the list command of Duke.","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"     * Checks if this is an exit command.","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":"     * @return false.","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"s7u4rt99"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"s7u4rt99"},"content":"        return false;","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"s7u4rt99"},"content":"     * Executes the ListCommand.","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"s7u4rt99"},"content":"     * @param taskList TaskList of Tasks to be listed.","lastModifiedDate":"2021-09-06"},{"lineNumber":27,"author":{"gitId":"s7u4rt99"},"content":"     * @param archiveList ArchiveList to store archived tasks.","lastModifiedDate":"2021-09-07"},{"lineNumber":28,"author":{"gitId":"s7u4rt99"},"content":"     * @param ui Ui to print to users of Duke.","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"s7u4rt99"},"content":"     * @param storage Storage to save and load TaskList of Duke.","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"s7u4rt99"},"content":"    public void execute(TaskList taskList, ArchiveList archiveList, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-07"},{"lineNumber":33,"author":{"gitId":"s7u4rt99"},"content":"        ui.print(taskList);","lastModifiedDate":"2021-09-06"},{"lineNumber":34,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":36,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":37,"author":{"gitId":"s7u4rt99"},"content":"     * Gets the String representation of the things printed in the","lastModifiedDate":"2021-09-06"},{"lineNumber":38,"author":{"gitId":"s7u4rt99"},"content":"     * execute method as well as execute list command.","lastModifiedDate":"2021-09-06"},{"lineNumber":39,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":40,"author":{"gitId":"s7u4rt99"},"content":"     * @param taskList TaskList of Tasks to be listed.","lastModifiedDate":"2021-09-06"},{"lineNumber":41,"author":{"gitId":"s7u4rt99"},"content":"     * @param archiveList ArchiveList to store archived tasks.","lastModifiedDate":"2021-09-07"},{"lineNumber":42,"author":{"gitId":"s7u4rt99"},"content":"     * @param ui Ui to get the String representation of the text printed.","lastModifiedDate":"2021-09-06"},{"lineNumber":43,"author":{"gitId":"s7u4rt99"},"content":"     * @param storage Storage to save and load TaskList of Duke.","lastModifiedDate":"2021-09-06"},{"lineNumber":44,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":45,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-09-02"},{"lineNumber":46,"author":{"gitId":"s7u4rt99"},"content":"    public String formatExecutedString(TaskList taskList, ArchiveList archiveList, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-07"},{"lineNumber":47,"author":{"gitId":"s7u4rt99"},"content":"        return ui.formatPrintString(taskList);","lastModifiedDate":"2021-09-06"},{"lineNumber":48,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":49,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"s7u4rt99":49}},{"path":"src/main/java/duke/command/RemoveArchiveCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke.command;","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"import duke.ArchiveList;","lastModifiedDate":"2021-09-07"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":"import duke.Storage;","lastModifiedDate":"2021-09-07"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":"import duke.TaskList;","lastModifiedDate":"2021-09-07"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"import duke.Ui;","lastModifiedDate":"2021-09-07"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"public class RemoveArchiveCommand extends RemoveCommand {","lastModifiedDate":"2021-09-07"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"     * Constructor for RemoveArchiveCommand.","lastModifiedDate":"2021-09-07"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"     * @param indexToRemove index to be archived from taskList.","lastModifiedDate":"2021-09-07"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"    public RemoveArchiveCommand(int indexToRemove) {","lastModifiedDate":"2021-09-07"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":"        super(indexToRemove);","lastModifiedDate":"2021-09-07"},{"lineNumber":17,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":18,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":19,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":20,"author":{"gitId":"s7u4rt99"},"content":"     * Executes the RemoveCommand.","lastModifiedDate":"2021-09-07"},{"lineNumber":21,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":22,"author":{"gitId":"s7u4rt99"},"content":"     * @param taskList TaskList which stores the unarchived tasks.","lastModifiedDate":"2021-09-07"},{"lineNumber":23,"author":{"gitId":"s7u4rt99"},"content":"     * @param archiveList ArchiveList to remove at indexToRemove.","lastModifiedDate":"2021-09-07"},{"lineNumber":24,"author":{"gitId":"s7u4rt99"},"content":"     * @param ui Ui to print to users of Duke.","lastModifiedDate":"2021-09-07"},{"lineNumber":25,"author":{"gitId":"s7u4rt99"},"content":"     * @param storage Storage to save and load TaskList of Duke.","lastModifiedDate":"2021-09-07"},{"lineNumber":26,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":27,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-09-07"},{"lineNumber":28,"author":{"gitId":"s7u4rt99"},"content":"    public void execute(TaskList taskList, ArchiveList archiveList, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-07"},{"lineNumber":29,"author":{"gitId":"s7u4rt99"},"content":"        String message;","lastModifiedDate":"2021-09-07"},{"lineNumber":30,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":31,"author":{"gitId":"s7u4rt99"},"content":"        if (super.isRemoveAll()) {","lastModifiedDate":"2021-09-07"},{"lineNumber":32,"author":{"gitId":"s7u4rt99"},"content":"            message \u003d formatAndRemoveAll(archiveList);","lastModifiedDate":"2021-09-07"},{"lineNumber":33,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":34,"author":{"gitId":"s7u4rt99"},"content":"        } else {","lastModifiedDate":"2021-09-07"},{"lineNumber":35,"author":{"gitId":"s7u4rt99"},"content":"            message \u003d formatAndRemoveIndexToRemove(archiveList);","lastModifiedDate":"2021-09-07"},{"lineNumber":36,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":37,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":38,"author":{"gitId":"s7u4rt99"},"content":"        ui.print(message);","lastModifiedDate":"2021-09-07"},{"lineNumber":39,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":40,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":41,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":42,"author":{"gitId":"s7u4rt99"},"content":"     * Gets the String representation of the things printed in the","lastModifiedDate":"2021-09-07"},{"lineNumber":43,"author":{"gitId":"s7u4rt99"},"content":"     * execute method as well as execute the removal of the index from the","lastModifiedDate":"2021-09-07"},{"lineNumber":44,"author":{"gitId":"s7u4rt99"},"content":"     * archiveList.","lastModifiedDate":"2021-09-07"},{"lineNumber":45,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":46,"author":{"gitId":"s7u4rt99"},"content":"     * @param taskList TaskList which stores the unarchived tasks.","lastModifiedDate":"2021-09-07"},{"lineNumber":47,"author":{"gitId":"s7u4rt99"},"content":"     * @param archiveList ArchiveList to remove the task at indexToRemove.","lastModifiedDate":"2021-09-07"},{"lineNumber":48,"author":{"gitId":"s7u4rt99"},"content":"     * @param ui Ui to get the String representation of the text printed.","lastModifiedDate":"2021-09-07"},{"lineNumber":49,"author":{"gitId":"s7u4rt99"},"content":"     * @param storage Storage to save and load TaskList of Duke.","lastModifiedDate":"2021-09-07"},{"lineNumber":50,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":51,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-09-07"},{"lineNumber":52,"author":{"gitId":"s7u4rt99"},"content":"    public String formatExecutedString(TaskList taskList, ArchiveList archiveList, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-07"},{"lineNumber":53,"author":{"gitId":"s7u4rt99"},"content":"        String message;","lastModifiedDate":"2021-09-07"},{"lineNumber":54,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":55,"author":{"gitId":"s7u4rt99"},"content":"        if (super.isRemoveAll()) {","lastModifiedDate":"2021-09-07"},{"lineNumber":56,"author":{"gitId":"s7u4rt99"},"content":"            message \u003d super.formatAndRemoveAll(archiveList);","lastModifiedDate":"2021-09-07"},{"lineNumber":57,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":58,"author":{"gitId":"s7u4rt99"},"content":"        } else {","lastModifiedDate":"2021-09-07"},{"lineNumber":59,"author":{"gitId":"s7u4rt99"},"content":"            message \u003d super.formatAndRemoveIndexToRemove(archiveList);","lastModifiedDate":"2021-09-07"},{"lineNumber":60,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":61,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":62,"author":{"gitId":"s7u4rt99"},"content":"        return message;","lastModifiedDate":"2021-09-07"},{"lineNumber":63,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":64,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-09-07"}],"authorContributionMap":{"s7u4rt99":64}},{"path":"src/main/java/duke/command/RemoveCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke.command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"import duke.ArchiveList;","lastModifiedDate":"2021-09-07"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":"import duke.DukeList;","lastModifiedDate":"2021-09-07"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-07"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":" * Representation of remove command of Duke.","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"public class RemoveCommand extends Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"    private final int indexToRemove;","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"s7u4rt99"},"content":"    private final boolean isRemoveAll;","lastModifiedDate":"2021-09-07"},{"lineNumber":18,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":19,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"s7u4rt99"},"content":"     * Constructor for RemoveCommand.","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"s7u4rt99"},"content":"     * @param indexToRemove Index of TaskList to be removed.","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"s7u4rt99"},"content":"    public RemoveCommand(int indexToRemove) {","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"s7u4rt99"},"content":"        this.indexToRemove \u003d indexToRemove;","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"s7u4rt99"},"content":"        this.isRemoveAll \u003d indexToRemove \u003d\u003d -1;","lastModifiedDate":"2021-09-07"},{"lineNumber":27,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"s7u4rt99"},"content":"     * Checks if this is an exit command.","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"s7u4rt99"},"content":"     * @return false.","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"s7u4rt99"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"s7u4rt99"},"content":"        return false;","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"s7u4rt99"},"content":"     * Executes the RemoveCommand.","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"s7u4rt99"},"content":"     * @param taskList TaskList to remove command at index indexToRemove from.","lastModifiedDate":"2021-09-06"},{"lineNumber":43,"author":{"gitId":"s7u4rt99"},"content":"     * @param archiveList ArchiveList to add the archived tasks to.","lastModifiedDate":"2021-09-07"},{"lineNumber":44,"author":{"gitId":"s7u4rt99"},"content":"     * @param ui Ui to print to users of Duke.","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"s7u4rt99"},"content":"     * @param storage Storage to save and load TaskList of Duke.","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"s7u4rt99"},"content":"    public void execute(TaskList taskList, ArchiveList archiveList, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-07"},{"lineNumber":48,"author":{"gitId":"s7u4rt99"},"content":"        String message;","lastModifiedDate":"2021-09-07"},{"lineNumber":49,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":50,"author":{"gitId":"s7u4rt99"},"content":"        if (this.isRemoveAll) {","lastModifiedDate":"2021-09-07"},{"lineNumber":51,"author":{"gitId":"s7u4rt99"},"content":"            message \u003d formatAndRemoveAll(taskList);","lastModifiedDate":"2021-09-07"},{"lineNumber":52,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":53,"author":{"gitId":"s7u4rt99"},"content":"        } else {","lastModifiedDate":"2021-09-07"},{"lineNumber":54,"author":{"gitId":"s7u4rt99"},"content":"            message \u003d formatAndRemoveIndexToRemove(taskList);","lastModifiedDate":"2021-09-07"},{"lineNumber":55,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":56,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":57,"author":{"gitId":"s7u4rt99"},"content":"        ui.print(message);","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":60,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":61,"author":{"gitId":"s7u4rt99"},"content":"     * Gets the String representation of the things printed in the","lastModifiedDate":"2021-09-06"},{"lineNumber":62,"author":{"gitId":"s7u4rt99"},"content":"     * execute method as well as execute the removal of the index.","lastModifiedDate":"2021-09-06"},{"lineNumber":63,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":64,"author":{"gitId":"s7u4rt99"},"content":"     * @param taskList TaskList to remove command at index indexToRemove from.","lastModifiedDate":"2021-09-06"},{"lineNumber":65,"author":{"gitId":"s7u4rt99"},"content":"     * @param archiveList ArchiveList to add the archived tasks to.","lastModifiedDate":"2021-09-07"},{"lineNumber":66,"author":{"gitId":"s7u4rt99"},"content":"     * @param ui Ui to get the String representation of the text printed.","lastModifiedDate":"2021-09-06"},{"lineNumber":67,"author":{"gitId":"s7u4rt99"},"content":"     * @param storage Storage to save and load TaskList of Duke.","lastModifiedDate":"2021-09-06"},{"lineNumber":68,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":69,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-09-02"},{"lineNumber":70,"author":{"gitId":"s7u4rt99"},"content":"    public String formatExecutedString(TaskList taskList, ArchiveList archiveList, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-07"},{"lineNumber":71,"author":{"gitId":"s7u4rt99"},"content":"        String message;","lastModifiedDate":"2021-09-07"},{"lineNumber":72,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":73,"author":{"gitId":"s7u4rt99"},"content":"        if (this.isRemoveAll) {","lastModifiedDate":"2021-09-07"},{"lineNumber":74,"author":{"gitId":"s7u4rt99"},"content":"            message \u003d formatAndRemoveAll(taskList);","lastModifiedDate":"2021-09-07"},{"lineNumber":75,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":76,"author":{"gitId":"s7u4rt99"},"content":"        } else {","lastModifiedDate":"2021-09-07"},{"lineNumber":77,"author":{"gitId":"s7u4rt99"},"content":"            message \u003d formatAndRemoveIndexToRemove(taskList);","lastModifiedDate":"2021-09-07"},{"lineNumber":78,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":79,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":80,"author":{"gitId":"s7u4rt99"},"content":"        return message;","lastModifiedDate":"2021-09-07"},{"lineNumber":81,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":82,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":83,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":84,"author":{"gitId":"s7u4rt99"},"content":"     * Formats and removes all the items from dukeList.","lastModifiedDate":"2021-09-07"},{"lineNumber":85,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":86,"author":{"gitId":"s7u4rt99"},"content":"     * @param dukeList dukeList to remove all the tasks from.","lastModifiedDate":"2021-09-07"},{"lineNumber":87,"author":{"gitId":"s7u4rt99"},"content":"     * @return Returns the formatted string to be printed to the user.","lastModifiedDate":"2021-09-07"},{"lineNumber":88,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":89,"author":{"gitId":"s7u4rt99"},"content":"    public String formatAndRemoveAll(DukeList dukeList) {","lastModifiedDate":"2021-09-07"},{"lineNumber":90,"author":{"gitId":"s7u4rt99"},"content":"        String message \u003d \"Noted. I\u0027ve removed these tasks from the \" + dukeList.type() + \":\\n\";","lastModifiedDate":"2021-09-07"},{"lineNumber":91,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":92,"author":{"gitId":"s7u4rt99"},"content":"        int counter \u003d 0;","lastModifiedDate":"2021-09-07"},{"lineNumber":93,"author":{"gitId":"s7u4rt99"},"content":"        int size \u003d dukeList.getSize();","lastModifiedDate":"2021-09-07"},{"lineNumber":94,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":95,"author":{"gitId":"s7u4rt99"},"content":"        for (int i \u003d 0; i \u003c size; i++) {","lastModifiedDate":"2021-09-07"},{"lineNumber":96,"author":{"gitId":"s7u4rt99"},"content":"            Task toRemove \u003d dukeList.remove(0);","lastModifiedDate":"2021-09-07"},{"lineNumber":97,"author":{"gitId":"s7u4rt99"},"content":"            counter++;","lastModifiedDate":"2021-09-07"},{"lineNumber":98,"author":{"gitId":"s7u4rt99"},"content":"            message +\u003d counter + \".\" + toRemove + \"\\n\";","lastModifiedDate":"2021-09-07"},{"lineNumber":99,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-02"},{"lineNumber":100,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":101,"author":{"gitId":"s7u4rt99"},"content":"        message +\u003d \"Now you have 0 tasks in the \" + dukeList.type() + \".\";","lastModifiedDate":"2021-09-07"},{"lineNumber":102,"author":{"gitId":"s7u4rt99"},"content":"        return message;","lastModifiedDate":"2021-09-07"},{"lineNumber":103,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":104,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":105,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":106,"author":{"gitId":"s7u4rt99"},"content":"     * Formats and removes task at indexToRemove from dukeList.","lastModifiedDate":"2021-09-07"},{"lineNumber":107,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":108,"author":{"gitId":"s7u4rt99"},"content":"     * @param dukeList dukeList to remove task at indexToRemove.","lastModifiedDate":"2021-09-07"},{"lineNumber":109,"author":{"gitId":"s7u4rt99"},"content":"     * @return Returns the formatted string to be printed to the user.","lastModifiedDate":"2021-09-07"},{"lineNumber":110,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":111,"author":{"gitId":"s7u4rt99"},"content":"    public String formatAndRemoveIndexToRemove(DukeList dukeList) {","lastModifiedDate":"2021-09-07"},{"lineNumber":112,"author":{"gitId":"s7u4rt99"},"content":"        Task toRemove \u003d dukeList.remove(this.indexToRemove);","lastModifiedDate":"2021-09-07"},{"lineNumber":113,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":114,"author":{"gitId":"s7u4rt99"},"content":"        return \"Noted. I\u0027ve removed this task from the \" + dukeList.type() + \":\\n\" + toRemove + \"\\nNow you have \"","lastModifiedDate":"2021-09-07"},{"lineNumber":115,"author":{"gitId":"s7u4rt99"},"content":"                + dukeList.getSize() + \" tasks in the \" + dukeList.type() + \".\";","lastModifiedDate":"2021-09-07"},{"lineNumber":116,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":117,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":118,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":119,"author":{"gitId":"s7u4rt99"},"content":"     * Gets isRemoveAll value which checks if the RemoveCommand","lastModifiedDate":"2021-09-07"},{"lineNumber":120,"author":{"gitId":"s7u4rt99"},"content":"     * removes all the tasks.","lastModifiedDate":"2021-09-07"},{"lineNumber":121,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":122,"author":{"gitId":"s7u4rt99"},"content":"     * @return isRemoveAll value.","lastModifiedDate":"2021-09-07"},{"lineNumber":123,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":124,"author":{"gitId":"s7u4rt99"},"content":"    public boolean isRemoveAll() {","lastModifiedDate":"2021-09-07"},{"lineNumber":125,"author":{"gitId":"s7u4rt99"},"content":"        return this.isRemoveAll;","lastModifiedDate":"2021-09-07"},{"lineNumber":126,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":127,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":128,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":129,"author":{"gitId":"s7u4rt99"},"content":"     * Gets the index to be removed.","lastModifiedDate":"2021-09-07"},{"lineNumber":130,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":131,"author":{"gitId":"s7u4rt99"},"content":"     * @return Index to be removed.","lastModifiedDate":"2021-09-07"},{"lineNumber":132,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":133,"author":{"gitId":"s7u4rt99"},"content":"    public int getIndexToRemove() {","lastModifiedDate":"2021-09-07"},{"lineNumber":134,"author":{"gitId":"s7u4rt99"},"content":"        return this.indexToRemove;","lastModifiedDate":"2021-09-07"},{"lineNumber":135,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":136,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-09-07"},{"lineNumber":137,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"}],"authorContributionMap":{"s7u4rt99":137}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke.exception;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":" * Represents an exception of Duke.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":"     * Constructor for DukeException.","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"     * @param message Error message.","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"    public DukeException(String message) {","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"        super(message);","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"s7u4rt99":16}},{"path":"src/main/java/duke/exception/IncompleteArchiveException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke.exception;","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"/**","lastModifiedDate":"2021-09-07"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":" * Represents exception where archive command has missing fields.","lastModifiedDate":"2021-09-07"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":" */","lastModifiedDate":"2021-09-07"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"public class IncompleteArchiveException extends DukeException {","lastModifiedDate":"2021-09-07"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"    private static String MESSAGE \u003d \"Please key in valid index to archive.\";","lastModifiedDate":"2021-09-07"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"     * Constructor for IncompleteDeadlineException.","lastModifiedDate":"2021-09-07"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"    public IncompleteArchiveException() {","lastModifiedDate":"2021-09-07"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"        super(MESSAGE);","lastModifiedDate":"2021-09-07"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-09-07"}],"authorContributionMap":{"s7u4rt99":15}},{"path":"src/main/java/duke/exception/IncompleteDeadlineException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke.exception;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":" * Representation for incomplete fields of Deadline exception.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"public class IncompleteDeadlineException extends DukeException {","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"    private static String MESSAGE \u003d \"OOPS!!! The description or date of a deadline cannot be empty.\";","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"     * Constructor for IncompleteDeadlineException.","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"    public IncompleteDeadlineException() {","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"        super(MESSAGE);","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"s7u4rt99":16}},{"path":"src/main/java/duke/exception/IncompleteDoneException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke.exception;","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"/**","lastModifiedDate":"2021-09-07"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":" * Representation for incomplete fields of Done exception.","lastModifiedDate":"2021-09-07"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":" */","lastModifiedDate":"2021-09-07"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"public class IncompleteDoneException extends DukeException {","lastModifiedDate":"2021-09-07"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"    private static String MESSAGE \u003d \"Please key in valid number to mark as done.\";","lastModifiedDate":"2021-09-07"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"     * Constructor for IncompleteDoneException.","lastModifiedDate":"2021-09-07"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"    public IncompleteDoneException() {","lastModifiedDate":"2021-09-07"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"        super(MESSAGE);","lastModifiedDate":"2021-09-07"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-09-07"}],"authorContributionMap":{"s7u4rt99":15}},{"path":"src/main/java/duke/exception/IncompleteEventException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke.exception;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":" * Representation for incomplete fields of Event exception.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"public class IncompleteEventException extends DukeException {","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"    private static String MESSAGE \u003d \"OOPS!!! The description or date of an event cannot be empty.\";","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"     * Constructor for IncompleteEventException.","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"    public IncompleteEventException() {","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"        super(MESSAGE);","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"s7u4rt99":15}},{"path":"src/main/java/duke/exception/IncompleteFindException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke.exception;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":" * Representation for incomplete keyword for FindCommand exception.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"public class IncompleteFindException extends DukeException {","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"    private static String message \u003d \"OOPS!!! Please remember to key in keyword to find!\";","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"     * Constructor for IncompleteFindException.","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"    public IncompleteFindException() {","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"        super(message);","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"s7u4rt99":15}},{"path":"src/main/java/duke/exception/IncompleteRemoveException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke.exception;","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"/**","lastModifiedDate":"2021-09-07"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":" * Representation for incomplete fields of remove exception.","lastModifiedDate":"2021-09-07"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":" */","lastModifiedDate":"2021-09-07"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"public class IncompleteRemoveException extends DukeException {","lastModifiedDate":"2021-09-07"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"    private static String MESSAGE \u003d \"Please key in valid number to remove.\";","lastModifiedDate":"2021-09-07"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"     * Constructor for IncompleteRemoveException.","lastModifiedDate":"2021-09-07"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"    public IncompleteRemoveException() {","lastModifiedDate":"2021-09-07"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"        super(MESSAGE);","lastModifiedDate":"2021-09-07"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-09-07"}],"authorContributionMap":{"s7u4rt99":16}},{"path":"src/main/java/duke/exception/IncompleteToDoException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke.exception;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":" * Representation for incomplete fields of ToDoObject exception.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"public class IncompleteToDoException extends DukeException {","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"    private static String MESSAGE \u003d \"OOPS!!! The description of a todo cannot be empty.\";","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"     * Constructor for IncompleteToDoException.","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"    public IncompleteToDoException() {","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"        super(MESSAGE);","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"s7u4rt99":15}},{"path":"src/main/java/duke/exception/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke.exception;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":" * Representation for the invalid command exception.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"public class InvalidCommandException extends DukeException {","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"    private static String MESSAGE \u003d \"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"     * Constructor for InvalidCommandException.","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"    public InvalidCommandException() {","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"        super(MESSAGE);","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"s7u4rt99":15}},{"path":"src/main/java/duke/gui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke.gui;","lastModifiedDate":"2021-09-02"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":"import java.util.Collections;","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"import javafx.scene.Node;","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-09-02"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":"import javafx.scene.shape.Circle;","lastModifiedDate":"2021-09-02"},{"lineNumber":17,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":18,"author":{"gitId":"s7u4rt99"},"content":"/**","lastModifiedDate":"2021-09-02"},{"lineNumber":19,"author":{"gitId":"s7u4rt99"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2021-09-02"},{"lineNumber":20,"author":{"gitId":"s7u4rt99"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2021-09-02"},{"lineNumber":21,"author":{"gitId":"s7u4rt99"},"content":" * containing text from the speaker.","lastModifiedDate":"2021-09-02"},{"lineNumber":22,"author":{"gitId":"s7u4rt99"},"content":" */","lastModifiedDate":"2021-09-02"},{"lineNumber":23,"author":{"gitId":"s7u4rt99"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2021-09-02"},{"lineNumber":24,"author":{"gitId":"s7u4rt99"},"content":"    @FXML","lastModifiedDate":"2021-09-02"},{"lineNumber":25,"author":{"gitId":"s7u4rt99"},"content":"    private Label dialog;","lastModifiedDate":"2021-09-02"},{"lineNumber":26,"author":{"gitId":"s7u4rt99"},"content":"    @FXML","lastModifiedDate":"2021-09-02"},{"lineNumber":27,"author":{"gitId":"s7u4rt99"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2021-09-02"},{"lineNumber":28,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":29,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":30,"author":{"gitId":"s7u4rt99"},"content":"     * Constructor for DialogBox, assigns the text to the Label and the image to be","lastModifiedDate":"2021-09-02"},{"lineNumber":31,"author":{"gitId":"s7u4rt99"},"content":"     * the display picture.","lastModifiedDate":"2021-09-02"},{"lineNumber":32,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":33,"author":{"gitId":"s7u4rt99"},"content":"     * @param text Text to be assigned to the Label.","lastModifiedDate":"2021-09-02"},{"lineNumber":34,"author":{"gitId":"s7u4rt99"},"content":"     * @param img Display Picture to be assigned to the Dialog Box.","lastModifiedDate":"2021-09-02"},{"lineNumber":35,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":36,"author":{"gitId":"s7u4rt99"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2021-09-02"},{"lineNumber":37,"author":{"gitId":"s7u4rt99"},"content":"        try {","lastModifiedDate":"2021-09-02"},{"lineNumber":38,"author":{"gitId":"s7u4rt99"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2021-09-02"},{"lineNumber":39,"author":{"gitId":"s7u4rt99"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2021-09-02"},{"lineNumber":40,"author":{"gitId":"s7u4rt99"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2021-09-02"},{"lineNumber":41,"author":{"gitId":"s7u4rt99"},"content":"            fxmlLoader.load();","lastModifiedDate":"2021-09-02"},{"lineNumber":42,"author":{"gitId":"s7u4rt99"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-02"},{"lineNumber":43,"author":{"gitId":"s7u4rt99"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-09-02"},{"lineNumber":44,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-02"},{"lineNumber":45,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":46,"author":{"gitId":"s7u4rt99"},"content":"        dialog.setText(text);","lastModifiedDate":"2021-09-02"},{"lineNumber":47,"author":{"gitId":"s7u4rt99"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2021-09-02"},{"lineNumber":48,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":49,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":50,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":51,"author":{"gitId":"s7u4rt99"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2021-09-02"},{"lineNumber":52,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":53,"author":{"gitId":"s7u4rt99"},"content":"    private void flip() {","lastModifiedDate":"2021-09-02"},{"lineNumber":54,"author":{"gitId":"s7u4rt99"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2021-09-02"},{"lineNumber":55,"author":{"gitId":"s7u4rt99"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2021-09-02"},{"lineNumber":56,"author":{"gitId":"s7u4rt99"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2021-09-02"},{"lineNumber":57,"author":{"gitId":"s7u4rt99"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2021-09-02"},{"lineNumber":58,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":59,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":60,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":61,"author":{"gitId":"s7u4rt99"},"content":"     * Sets the Dimensions of the Circle for the Profile Picture.","lastModifiedDate":"2021-09-02"},{"lineNumber":62,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":63,"author":{"gitId":"s7u4rt99"},"content":"     * @param centreX x coordinate of the centre.","lastModifiedDate":"2021-09-02"},{"lineNumber":64,"author":{"gitId":"s7u4rt99"},"content":"     * @param centreY y coordinate of the centre.","lastModifiedDate":"2021-09-02"},{"lineNumber":65,"author":{"gitId":"s7u4rt99"},"content":"     * @param radius radius of the circle.","lastModifiedDate":"2021-09-02"},{"lineNumber":66,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":67,"author":{"gitId":"s7u4rt99"},"content":"    public void setPictureDimensions(int centreX, int centreY, int radius) {","lastModifiedDate":"2021-09-02"},{"lineNumber":68,"author":{"gitId":"s7u4rt99"},"content":"        displayPicture.setClip(new Circle(centreX, centreY, radius));","lastModifiedDate":"2021-09-02"},{"lineNumber":69,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":70,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":71,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":72,"author":{"gitId":"s7u4rt99"},"content":"     * Creates a DialogBox for the User.","lastModifiedDate":"2021-09-02"},{"lineNumber":73,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":74,"author":{"gitId":"s7u4rt99"},"content":"     * @param text Text to be displayed by the User.","lastModifiedDate":"2021-09-02"},{"lineNumber":75,"author":{"gitId":"s7u4rt99"},"content":"     * @param img Display picture of the User.","lastModifiedDate":"2021-09-02"},{"lineNumber":76,"author":{"gitId":"s7u4rt99"},"content":"     * @return Dialog Box object for the User.","lastModifiedDate":"2021-09-02"},{"lineNumber":77,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":78,"author":{"gitId":"s7u4rt99"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2021-09-02"},{"lineNumber":79,"author":{"gitId":"s7u4rt99"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2021-09-02"},{"lineNumber":80,"author":{"gitId":"s7u4rt99"},"content":"        db.setPictureDimensions(42, 35, 30);","lastModifiedDate":"2021-09-02"},{"lineNumber":81,"author":{"gitId":"s7u4rt99"},"content":"        db.setStyle(\"-fx-background-color: #FFFFFF;\");","lastModifiedDate":"2021-09-02"},{"lineNumber":82,"author":{"gitId":"s7u4rt99"},"content":"        return db;","lastModifiedDate":"2021-09-02"},{"lineNumber":83,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":84,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":85,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":86,"author":{"gitId":"s7u4rt99"},"content":"     * Creates a Dialog Box for Duke.","lastModifiedDate":"2021-09-02"},{"lineNumber":87,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":88,"author":{"gitId":"s7u4rt99"},"content":"     * @param text Text to be displayed by Duke.","lastModifiedDate":"2021-09-02"},{"lineNumber":89,"author":{"gitId":"s7u4rt99"},"content":"     * @param img Display picture of Duke.","lastModifiedDate":"2021-09-02"},{"lineNumber":90,"author":{"gitId":"s7u4rt99"},"content":"     * @return DialogBox object for Duke.","lastModifiedDate":"2021-09-02"},{"lineNumber":91,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":92,"author":{"gitId":"s7u4rt99"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2021-09-02"},{"lineNumber":93,"author":{"gitId":"s7u4rt99"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2021-09-02"},{"lineNumber":94,"author":{"gitId":"s7u4rt99"},"content":"        db.flip();","lastModifiedDate":"2021-09-02"},{"lineNumber":95,"author":{"gitId":"s7u4rt99"},"content":"        db.setPictureDimensions(57, 30, 30);","lastModifiedDate":"2021-09-02"},{"lineNumber":96,"author":{"gitId":"s7u4rt99"},"content":"        return db;","lastModifiedDate":"2021-09-02"},{"lineNumber":97,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":98,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"s7u4rt99":98}},{"path":"src/main/java/duke/gui/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke.gui;","lastModifiedDate":"2021-09-02"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":"/**","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":" * Represents the Launcher for the GUI.","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":" */","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"public class Launcher {","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"     * Main method to launch the GUI.","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"     * @param args Args for the main method.","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2021-09-02"},{"lineNumber":17,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":18,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"s7u4rt99":18}},{"path":"src/main/java/duke/gui/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke.gui;","lastModifiedDate":"2021-09-02"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":"import duke.Duke;","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"/**","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":" */","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":"public class Main extends Application {","lastModifiedDate":"2021-09-02"},{"lineNumber":17,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":18,"author":{"gitId":"s7u4rt99"},"content":"    private Duke duke \u003d new Duke();","lastModifiedDate":"2021-09-02"},{"lineNumber":19,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":20,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":21,"author":{"gitId":"s7u4rt99"},"content":"     * Starts the GUI","lastModifiedDate":"2021-09-02"},{"lineNumber":22,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":23,"author":{"gitId":"s7u4rt99"},"content":"     * @param stage Stage which we want to set the scene on.","lastModifiedDate":"2021-09-02"},{"lineNumber":24,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":25,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-09-02"},{"lineNumber":26,"author":{"gitId":"s7u4rt99"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2021-09-02"},{"lineNumber":27,"author":{"gitId":"s7u4rt99"},"content":"        try {","lastModifiedDate":"2021-09-02"},{"lineNumber":28,"author":{"gitId":"s7u4rt99"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2021-09-02"},{"lineNumber":29,"author":{"gitId":"s7u4rt99"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2021-09-02"},{"lineNumber":30,"author":{"gitId":"s7u4rt99"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2021-09-02"},{"lineNumber":31,"author":{"gitId":"s7u4rt99"},"content":"            stage.setScene(scene);","lastModifiedDate":"2021-09-02"},{"lineNumber":32,"author":{"gitId":"s7u4rt99"},"content":"            scene.getRoot().setStyle(\"-fx-font-family: \u0027Arial\u0027\"); //fix","lastModifiedDate":"2021-09-02"},{"lineNumber":33,"author":{"gitId":"s7u4rt99"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2021-09-02"},{"lineNumber":34,"author":{"gitId":"s7u4rt99"},"content":"            stage.show();","lastModifiedDate":"2021-09-02"},{"lineNumber":35,"author":{"gitId":"s7u4rt99"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-02"},{"lineNumber":36,"author":{"gitId":"s7u4rt99"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-09-02"},{"lineNumber":37,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-02"},{"lineNumber":38,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":39,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"s7u4rt99":39}},{"path":"src/main/java/duke/gui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke.gui;","lastModifiedDate":"2021-09-02"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"import duke.Duke;","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":"import javafx.application.Platform;","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2021-09-02"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"/**","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":" */","lastModifiedDate":"2021-09-02"},{"lineNumber":17,"author":{"gitId":"s7u4rt99"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2021-09-02"},{"lineNumber":18,"author":{"gitId":"s7u4rt99"},"content":"    @FXML","lastModifiedDate":"2021-09-02"},{"lineNumber":19,"author":{"gitId":"s7u4rt99"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2021-09-02"},{"lineNumber":20,"author":{"gitId":"s7u4rt99"},"content":"    @FXML","lastModifiedDate":"2021-09-02"},{"lineNumber":21,"author":{"gitId":"s7u4rt99"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2021-09-02"},{"lineNumber":22,"author":{"gitId":"s7u4rt99"},"content":"    @FXML","lastModifiedDate":"2021-09-02"},{"lineNumber":23,"author":{"gitId":"s7u4rt99"},"content":"    private TextField userInput;","lastModifiedDate":"2021-09-02"},{"lineNumber":24,"author":{"gitId":"s7u4rt99"},"content":"    @FXML","lastModifiedDate":"2021-09-02"},{"lineNumber":25,"author":{"gitId":"s7u4rt99"},"content":"    private Button sendButton;","lastModifiedDate":"2021-09-02"},{"lineNumber":26,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":27,"author":{"gitId":"s7u4rt99"},"content":"    private Duke duke;","lastModifiedDate":"2021-09-02"},{"lineNumber":28,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":29,"author":{"gitId":"s7u4rt99"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/goat.png\"));","lastModifiedDate":"2021-09-02"},{"lineNumber":30,"author":{"gitId":"s7u4rt99"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/messi.png\"));","lastModifiedDate":"2021-09-02"},{"lineNumber":31,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":32,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":33,"author":{"gitId":"s7u4rt99"},"content":"    @FXML","lastModifiedDate":"2021-09-02"},{"lineNumber":34,"author":{"gitId":"s7u4rt99"},"content":"    public void initialize() {","lastModifiedDate":"2021-09-02"},{"lineNumber":35,"author":{"gitId":"s7u4rt99"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2021-09-02"},{"lineNumber":36,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":37,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":38,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":39,"author":{"gitId":"s7u4rt99"},"content":"     * Opens up the Duke object on the GUI.","lastModifiedDate":"2021-09-02"},{"lineNumber":40,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":41,"author":{"gitId":"s7u4rt99"},"content":"     * @param d Duke object opened on the GUI.","lastModifiedDate":"2021-09-02"},{"lineNumber":42,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":43,"author":{"gitId":"s7u4rt99"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2021-09-02"},{"lineNumber":44,"author":{"gitId":"s7u4rt99"},"content":"        duke \u003d d;","lastModifiedDate":"2021-09-02"},{"lineNumber":45,"author":{"gitId":"s7u4rt99"},"content":"        dialogContainer.getChildren().add(","lastModifiedDate":"2021-09-02"},{"lineNumber":46,"author":{"gitId":"s7u4rt99"},"content":"                DialogBox.getDukeDialog(\"Hello! I\u0027m Duke\\n\"","lastModifiedDate":"2021-09-02"},{"lineNumber":47,"author":{"gitId":"s7u4rt99"},"content":"                        + \"What can I do for you?\", dukeImage)","lastModifiedDate":"2021-09-02"},{"lineNumber":48,"author":{"gitId":"s7u4rt99"},"content":"        );","lastModifiedDate":"2021-09-02"},{"lineNumber":49,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":50,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":51,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":52,"author":{"gitId":"s7u4rt99"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2021-09-02"},{"lineNumber":53,"author":{"gitId":"s7u4rt99"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2021-09-02"},{"lineNumber":54,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":55,"author":{"gitId":"s7u4rt99"},"content":"    @FXML","lastModifiedDate":"2021-09-02"},{"lineNumber":56,"author":{"gitId":"s7u4rt99"},"content":"    private void handleUserInput() {","lastModifiedDate":"2021-09-02"},{"lineNumber":57,"author":{"gitId":"s7u4rt99"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2021-09-02"},{"lineNumber":58,"author":{"gitId":"s7u4rt99"},"content":"        String response \u003d duke.processInput(input);","lastModifiedDate":"2021-09-02"},{"lineNumber":59,"author":{"gitId":"s7u4rt99"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2021-09-02"},{"lineNumber":60,"author":{"gitId":"s7u4rt99"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2021-09-02"},{"lineNumber":61,"author":{"gitId":"s7u4rt99"},"content":"                DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2021-09-02"},{"lineNumber":62,"author":{"gitId":"s7u4rt99"},"content":"        );","lastModifiedDate":"2021-09-02"},{"lineNumber":63,"author":{"gitId":"s7u4rt99"},"content":"        if (input.equals(\"bye\")) {","lastModifiedDate":"2021-09-02"},{"lineNumber":64,"author":{"gitId":"s7u4rt99"},"content":"            Platform.exit();","lastModifiedDate":"2021-09-02"},{"lineNumber":65,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-02"},{"lineNumber":66,"author":{"gitId":"s7u4rt99"},"content":"        userInput.clear();","lastModifiedDate":"2021-09-02"},{"lineNumber":67,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":68,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-09-02"},{"lineNumber":69,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"s7u4rt99":69}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":" * Type of Task which has a deadline.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"    private String by;","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"     * Constructor for Deadline.","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"     * @param description Description of task.","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"     * @param by Deadline of task.","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":"        super(description);","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"s7u4rt99"},"content":"        this.by \u003d by;","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"s7u4rt99"},"content":"     * Converts Deadline object into String form to save.","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"s7u4rt99"},"content":"     * @return String form of Deadline object to save.","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"s7u4rt99"},"content":"    public String convertToString() {","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"s7u4rt99"},"content":"        return \"D|\" + super.convertToString() + \"|\" + by;","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"s7u4rt99"},"content":"     * Converts Deadline object to its String representation.","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"s7u4rt99"},"content":"     * @return String representation of Deadline object.","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":36,"author":{"gitId":"s7u4rt99"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":37,"author":{"gitId":"s7u4rt99"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";","lastModifiedDate":"2021-08-18"},{"lineNumber":38,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":39,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":40,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"s7u4rt99":40}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":" * Type of Task which is an Event.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"    private String duration;","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"     * Constructor for Event.","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"     * @param description Description of Event.","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"     * @param duration Duration of Event.","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"    public Event(String description, String duration) {","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":"        super(description);","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"s7u4rt99"},"content":"        this.duration \u003d duration;","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"s7u4rt99"},"content":"     * Converts Event object into String form to save.","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"s7u4rt99"},"content":"     * @return String form of Event object to save.","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"s7u4rt99"},"content":"    public String convertToString() {","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"s7u4rt99"},"content":"        return \"E|\" + super.convertToString() + \"|\" + duration;","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"s7u4rt99"},"content":"     * Converts Event object into its String representation.","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"s7u4rt99"},"content":"     * @return String representation of Event object.","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":36,"author":{"gitId":"s7u4rt99"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":37,"author":{"gitId":"s7u4rt99"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + duration + \")\";","lastModifiedDate":"2021-08-18"},{"lineNumber":38,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":39,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"s7u4rt99":39}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":" * Representation of Task to be done.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"public class Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"    private String description;","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"    private boolean isDone;","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"     * Constructor for Task.","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"     * @param description Description of Task.","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"    public Task(String description) {","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"s7u4rt99"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"s7u4rt99"},"content":"     * Gets the status icon of the Task.","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"s7u4rt99"},"content":"     * @return \"X\" if done, else \" \".","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"s7u4rt99"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-18"},{"lineNumber":26,"author":{"gitId":"s7u4rt99"},"content":"        return (isDone ? \"X\" : \" \");","lastModifiedDate":"2021-08-18"},{"lineNumber":27,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":28,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":29,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"s7u4rt99"},"content":"     * Marks the Task as done.","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"s7u4rt99"},"content":"    public void markAsDone() {","lastModifiedDate":"2021-08-18"},{"lineNumber":33,"author":{"gitId":"s7u4rt99"},"content":"        isDone \u003d true;","lastModifiedDate":"2021-08-18"},{"lineNumber":34,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":35,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":36,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"s7u4rt99"},"content":"     * Gets the status icon of the Task in a format suitable to save.","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"s7u4rt99"},"content":"     * @return \"1\" if done, else \"0\".","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"s7u4rt99"},"content":"    public String printStatusIcon() {","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"s7u4rt99"},"content":"        return (isDone) ? \"1\" : \"0\";","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"s7u4rt99"},"content":"     * Converts Task object into String form to save.","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"s7u4rt99"},"content":"     * @return {StatusIcon}|{description}.","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"s7u4rt99"},"content":"    public String convertToString() {","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"s7u4rt99"},"content":"        return printStatusIcon() + \"|\" + description;","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"s7u4rt99"},"content":"     * Checks if description of Task has given keyword.","lastModifiedDate":"2021-08-26"},{"lineNumber":56,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":57,"author":{"gitId":"s7u4rt99"},"content":"     * @param keyword Keyword to check if description of Task contains.","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"s7u4rt99"},"content":"     * @return true if Task contains keyword, else false.","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"s7u4rt99"},"content":"    public boolean hasKeyword(String keyword) {","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"s7u4rt99"},"content":"        String[] deconstructedDescription \u003d description.split(\" \");","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":63,"author":{"gitId":"s7u4rt99"},"content":"        for (int i \u003d 0; i \u003c deconstructedDescription.length; i++) {","lastModifiedDate":"2021-08-26"},{"lineNumber":64,"author":{"gitId":"s7u4rt99"},"content":"            if (deconstructedDescription[i].equals(keyword)) {","lastModifiedDate":"2021-08-26"},{"lineNumber":65,"author":{"gitId":"s7u4rt99"},"content":"                return true;","lastModifiedDate":"2021-08-26"},{"lineNumber":66,"author":{"gitId":"s7u4rt99"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":67,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":68,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":69,"author":{"gitId":"s7u4rt99"},"content":"        return false;","lastModifiedDate":"2021-08-26"},{"lineNumber":70,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":71,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":72,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":73,"author":{"gitId":"s7u4rt99"},"content":"     * Converts Task object into its String representation.","lastModifiedDate":"2021-08-26"},{"lineNumber":74,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":75,"author":{"gitId":"s7u4rt99"},"content":"     * @return String representation of Task object.","lastModifiedDate":"2021-08-26"},{"lineNumber":76,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":77,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":78,"author":{"gitId":"s7u4rt99"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":79,"author":{"gitId":"s7u4rt99"},"content":"        return \"[\" + getStatusIcon() + \"] \" + description;","lastModifiedDate":"2021-08-18"},{"lineNumber":80,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":81,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"s7u4rt99":81}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":" * Type of Task which is an Event.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"public class ToDo extends Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":"     * Constructor for ToDoObject.","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"     * @param description Description of ToDoObject.","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"    public ToDo(String description) {","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"        super(description);","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"s7u4rt99"},"content":"     * Converts ToDoObject into String form to save.","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"s7u4rt99"},"content":"     * @return String form of ToDoObject to save.","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"s7u4rt99"},"content":"    public String convertToString() {","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"s7u4rt99"},"content":"        return \"T|\" + super.convertToString();","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"s7u4rt99"},"content":"     * Converts ToDoObject into its String representation.","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"s7u4rt99"},"content":"     * @return String representation of ToDoObject.","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":33,"author":{"gitId":"s7u4rt99"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":34,"author":{"gitId":"s7u4rt99"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2021-08-18"},{"lineNumber":35,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":36,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"s7u4rt99":36}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-color: #DCDCDC;\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/16\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"    \u003c/children\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"s7u4rt99":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/16\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.gui.MainWindow\"\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" promptText\u003d\"Type your message here...\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefWidth\u003d\"388.0\" maxHeight\u003d\"-Infinity\"/\u003e","lastModifiedDate":"2021-09-07"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":"            \u003c/content\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":17,"author":{"gitId":"s7u4rt99"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":18,"author":{"gitId":"s7u4rt99"},"content":"    \u003c/children\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":19,"author":{"gitId":"s7u4rt99"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"s7u4rt99":19}},{"path":"src/test/java/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"class ParserTest {","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"    void isValidDate_validDate_true() {","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"        assertTrue(Parser.isValidDate(\"1999-03-29\", DateTimeFormatter.ISO_LOCAL_DATE));","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"s7u4rt99"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"s7u4rt99"},"content":"    void isValidDate_invalidDate_false() {","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"s7u4rt99"},"content":"        assertFalse(Parser.isValidDate(\"1999/03/29\", DateTimeFormatter.ISO_LOCAL_DATE));","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"s7u4rt99"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"s7u4rt99"},"content":"    void isValidTime_validTime_true() {","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"s7u4rt99"},"content":"        assertTrue(Parser.isValidTime(\"23:59\", DateTimeFormatter.ISO_LOCAL_TIME));","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"s7u4rt99"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"s7u4rt99"},"content":"    void isValidTime_invalidTime_false() {","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"s7u4rt99"},"content":"        assertFalse(Parser.isValidTime(\"2359\", DateTimeFormatter.ISO_LOCAL_TIME));","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"s7u4rt99"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"s7u4rt99"},"content":"    void isRemove_correctForm_true() {","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"s7u4rt99"},"content":"        assertTrue(Parser.isRemove(\"remove 2\"));","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"s7u4rt99"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"s7u4rt99"},"content":"    void isRemove_incorrectForm_false() {","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"s7u4rt99"},"content":"        assertFalse(Parser.isRemove(\"remove2\"));","lastModifiedDate":"2021-09-06"},{"lineNumber":41,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"s7u4rt99"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"s7u4rt99"},"content":"    void isDone_correctFormAndLength_true() {","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"s7u4rt99"},"content":"        assertTrue(Parser.isDone(\"done \"));","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"s7u4rt99"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"s7u4rt99"},"content":"    void isDone_incorrectForm_false() {","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"s7u4rt99"},"content":"        assertFalse(Parser.isDone(\"done2\"));","lastModifiedDate":"2021-09-06"},{"lineNumber":51,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":52,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"s7u4rt99":52}},{"path":"src/test/java/duke/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"class TaskListTest {","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"    void testGetSizeOfOne() {","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":"        tasks.add(new Task(\"taskTest\"));","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"s7u4rt99"},"content":"        assertEquals(1, new TaskList(tasks).getSize());","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"s7u4rt99"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"s7u4rt99"},"content":"    void testGetSizeOfZero() {","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"s7u4rt99"},"content":"        assertEquals(0, new TaskList().getSize());","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"s7u4rt99":24}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"todo borrow book","lastModifiedDate":"2021-08-18"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"deadline return book /by Sunday","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"event project meeting /at Mon 2-4pm","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":"done 2","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"done 1","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":"done 3","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"bye","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"s7u4rt99":11}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"s7u4rt99"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"s7u4rt99":1,"-":20}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":"find ../src/main/java/*/*/*.java  \u003e sources.txt","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"s7u4rt99"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin @sources.txt","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"s7u4rt99"},"content":"#if ! javac -cp ../src/main/java/duke/*/*.java -Xlint:none -d ../bin ../src/main/java/duke/*/*.java","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"s7u4rt99"},"content":"#then","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"s7u4rt99"},"content":"#    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"s7u4rt99"},"content":"#    exit 1","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"s7u4rt99"},"content":"#fi","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"s7u4rt99"},"content":"java -classpath ../bin duke/Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-08-31"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"s7u4rt99":9,"-":36}}]

[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"# duke.Duke project template","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"s7u4rt99":2,"-":22}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":17,"author":{"gitId":"s7u4rt99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":18,"author":{"gitId":"s7u4rt99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":19,"author":{"gitId":"s7u4rt99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":20,"author":{"gitId":"s7u4rt99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":21,"author":{"gitId":"s7u4rt99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":22,"author":{"gitId":"s7u4rt99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":23,"author":{"gitId":"s7u4rt99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":24,"author":{"gitId":"s7u4rt99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":25,"author":{"gitId":"s7u4rt99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":26,"author":{"gitId":"s7u4rt99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"s7u4rt99"},"content":"    mainClassName \u003d \"duke.gui.Launcher\"","lastModifiedDate":"2021-09-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"s7u4rt99":15,"-":45}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2019-07-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"## Features of StuDo","lastModifiedDate":"2021-09-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":"### 1. Add tasks","lastModifiedDate":"2021-09-13"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"StuDo can add your tasks to its list of tasks which you need to do for you.","lastModifiedDate":"2021-09-13"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"These tasks come in different","lastModifiedDate":"2021-09-13"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"types:","lastModifiedDate":"2021-09-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"1. **todo** - a general task to do.","lastModifiedDate":"2021-09-13"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"2. **event** - an event task which happens at a certain time or date.","lastModifiedDate":"2021-09-13"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"3. **deadline** - a deadline task which has a deadline to complete by.","lastModifiedDate":"2021-09-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"### 2. Mark as done","lastModifiedDate":"2021-09-13"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"StuDo is able to mark your tasks as done once you complete them.","lastModifiedDate":"2021-09-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":17,"author":{"gitId":"s7u4rt99"},"content":"### 3. Remove tasks","lastModifiedDate":"2021-09-13"},{"lineNumber":18,"author":{"gitId":"s7u4rt99"},"content":"StuDo is able to remove tasks from your list anytime.","lastModifiedDate":"2021-09-13"},{"lineNumber":19,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":20,"author":{"gitId":"s7u4rt99"},"content":"### 4. Find tasks","lastModifiedDate":"2021-09-13"},{"lineNumber":21,"author":{"gitId":"s7u4rt99"},"content":"StuDo is able to find your tasks with a given keyword for you from your list when you cannot find them.","lastModifiedDate":"2021-09-13"},{"lineNumber":22,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":23,"author":{"gitId":"s7u4rt99"},"content":"### 5. List tasks","lastModifiedDate":"2021-09-13"},{"lineNumber":24,"author":{"gitId":"s7u4rt99"},"content":"StuDo is able to show you your list of tasks and their details, such as the type of task and if they are complete or not.","lastModifiedDate":"2021-09-13"},{"lineNumber":25,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":26,"author":{"gitId":"s7u4rt99"},"content":"### 6. Archive tasks","lastModifiedDate":"2021-09-13"},{"lineNumber":27,"author":{"gitId":"s7u4rt99"},"content":"StuDo is able to archive your tasks if you do not want to show them on your list and also do not want to delete them.","lastModifiedDate":"2021-09-13"},{"lineNumber":28,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":29,"author":{"gitId":"s7u4rt99"},"content":"### 7. Unarchive tasks","lastModifiedDate":"2021-09-13"},{"lineNumber":30,"author":{"gitId":"s7u4rt99"},"content":"StuDo is able to unarchive your tasks if you want to move them back from your archive into your list of tasks.","lastModifiedDate":"2021-09-13"},{"lineNumber":31,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":32,"author":{"gitId":"s7u4rt99"},"content":"### 8. List archived tasks","lastModifiedDate":"2021-09-13"},{"lineNumber":33,"author":{"gitId":"s7u4rt99"},"content":"StuDo is able to show you the tasks you have archived.","lastModifiedDate":"2021-09-13"},{"lineNumber":34,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":35,"author":{"gitId":"s7u4rt99"},"content":"### 9. Remove archived tasks","lastModifiedDate":"2021-09-13"},{"lineNumber":36,"author":{"gitId":"s7u4rt99"},"content":"StuDo is able to remove tasks from your list of archived tasks anytime.","lastModifiedDate":"2021-09-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"## Usage","lastModifiedDate":"2019-07-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":40,"author":{"gitId":"s7u4rt99"},"content":"### 1. `list` - displays the list of tasks","lastModifiedDate":"2021-09-13"},{"lineNumber":41,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":42,"author":{"gitId":"s7u4rt99"},"content":"The `list` command displays the list of tasks to the user.","lastModifiedDate":"2021-09-13"},{"lineNumber":43,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":44,"author":{"gitId":"s7u4rt99"},"content":"Example of usage:","lastModifiedDate":"2021-09-13"},{"lineNumber":45,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":46,"author":{"gitId":"s7u4rt99"},"content":"`list`","lastModifiedDate":"2021-09-13"},{"lineNumber":47,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":48,"author":{"gitId":"s7u4rt99"},"content":"Expected outcome:","lastModifiedDate":"2021-09-13"},{"lineNumber":49,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":50,"author":{"gitId":"s7u4rt99"},"content":"Shows the list of tasks to the user.","lastModifiedDate":"2021-09-13"},{"lineNumber":51,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":52,"author":{"gitId":"s7u4rt99"},"content":"\u003cimg src\u003d\"userGuideDemo/list.png\" width\u003d\"495\" height\u003d\"300\"\u003e","lastModifiedDate":"2021-09-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":54,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":55,"author":{"gitId":"s7u4rt99"},"content":"### 2. `todo \u003ctask name\u003e` - adds a todo task","lastModifiedDate":"2021-09-13"},{"lineNumber":56,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":57,"author":{"gitId":"s7u4rt99"},"content":"Adds a todo task to StuDo\u0027s list of tasks.","lastModifiedDate":"2021-09-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"Example of usage: ","lastModifiedDate":"2021-09-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":61,"author":{"gitId":"s7u4rt99"},"content":"`todo sleep`","lastModifiedDate":"2021-09-13"},{"lineNumber":62,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":63,"author":{"gitId":"s7u4rt99"},"content":"Expected outcome:","lastModifiedDate":"2021-09-13"},{"lineNumber":64,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":65,"author":{"gitId":"s7u4rt99"},"content":"Adds a todo task called `sleep` to the list of task.","lastModifiedDate":"2021-09-13"},{"lineNumber":66,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":67,"author":{"gitId":"s7u4rt99"},"content":"\u003cimg src\u003d\"userGuideDemo/todo.png\" width\u003d\"491\" height\u003d\"250\"\u003e","lastModifiedDate":"2021-09-14"},{"lineNumber":68,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":69,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":70,"author":{"gitId":"s7u4rt99"},"content":"### 3. `event \u003ctask name\u003e /at \u003cdate/time\u003e` - adds an event task","lastModifiedDate":"2021-09-13"},{"lineNumber":71,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":72,"author":{"gitId":"s7u4rt99"},"content":"Adds an event task to StuDo\u0027s list of tasks.","lastModifiedDate":"2021-09-13"},{"lineNumber":73,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":74,"author":{"gitId":"s7u4rt99"},"content":"Example of usage:","lastModifiedDate":"2021-09-13"},{"lineNumber":75,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":76,"author":{"gitId":"s7u4rt99"},"content":"`event Manchester Derby /at 2021-11-06 23:00`","lastModifiedDate":"2021-09-13"},{"lineNumber":77,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":78,"author":{"gitId":"s7u4rt99"},"content":"Expected outcome:","lastModifiedDate":"2021-09-13"},{"lineNumber":79,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":80,"author":{"gitId":"s7u4rt99"},"content":"Adds an event task called `Manchester Derby (at: Nov 6 2021 11:00 PM)` to the list of task.","lastModifiedDate":"2021-09-13"},{"lineNumber":81,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":82,"author":{"gitId":"s7u4rt99"},"content":"\u003cimg src\u003d\"userGuideDemo/event.png\" width\u003d\"482\" height\u003d\"250\"\u003e","lastModifiedDate":"2021-09-14"},{"lineNumber":83,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":84,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":85,"author":{"gitId":"s7u4rt99"},"content":"### 4. `deadline \u003ctask name\u003e /by \u003cdate/time\u003e` - adds a deadline task","lastModifiedDate":"2021-09-13"},{"lineNumber":86,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":87,"author":{"gitId":"s7u4rt99"},"content":"Adds a deadline task to StuDo\u0027s list of tasks.","lastModifiedDate":"2021-09-13"},{"lineNumber":88,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":89,"author":{"gitId":"s7u4rt99"},"content":"Example of usage:","lastModifiedDate":"2021-09-13"},{"lineNumber":90,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":91,"author":{"gitId":"s7u4rt99"},"content":"`deadline Buy ronaldo jersey /by 2021-11-06 23:00`","lastModifiedDate":"2021-09-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"Expected outcome:","lastModifiedDate":"2021-09-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":95,"author":{"gitId":"s7u4rt99"},"content":"Adds a deadline task called `Buy ronaldo jersey (by: Nov 6 2021 11:00 PM)` to the list of task.","lastModifiedDate":"2021-09-13"},{"lineNumber":96,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":97,"author":{"gitId":"s7u4rt99"},"content":"\u003cimg src\u003d\"userGuideDemo/deadline.png\" width\u003d\"488\" height\u003d\"250\"\u003e","lastModifiedDate":"2021-09-14"},{"lineNumber":98,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":99,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":100,"author":{"gitId":"s7u4rt99"},"content":"### 5. `find \u003ckeyword\u003e` - finds a task with specified keyword","lastModifiedDate":"2021-09-13"},{"lineNumber":101,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":102,"author":{"gitId":"s7u4rt99"},"content":"Finds task with specified keyword from StuDo\u0027s list of tasks.","lastModifiedDate":"2021-09-13"},{"lineNumber":103,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":104,"author":{"gitId":"s7u4rt99"},"content":"Example of usage:","lastModifiedDate":"2021-09-13"},{"lineNumber":105,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":106,"author":{"gitId":"s7u4rt99"},"content":"`find eat`","lastModifiedDate":"2021-09-13"},{"lineNumber":107,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":108,"author":{"gitId":"s7u4rt99"},"content":"Expected outcome:","lastModifiedDate":"2021-09-13"},{"lineNumber":109,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":110,"author":{"gitId":"s7u4rt99"},"content":"Find tasks with keyword `eat` from StuDo\u0027s list of tasks.","lastModifiedDate":"2021-09-13"},{"lineNumber":111,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":112,"author":{"gitId":"s7u4rt99"},"content":"\u003cimg src\u003d\"userGuideDemo/find.png\" width\u003d\"296\" height\u003d\"400\"\u003e","lastModifiedDate":"2021-09-14"},{"lineNumber":113,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":114,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":115,"author":{"gitId":"s7u4rt99"},"content":"### 6. `done \u003ctask index number\u003e` - marks task at given index number as done","lastModifiedDate":"2021-09-13"},{"lineNumber":116,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":117,"author":{"gitId":"s7u4rt99"},"content":"Marks task at given index number as done from StuDo\u0027s list of tasks.","lastModifiedDate":"2021-09-13"},{"lineNumber":118,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":119,"author":{"gitId":"s7u4rt99"},"content":"Example of usage:","lastModifiedDate":"2021-09-13"},{"lineNumber":120,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":121,"author":{"gitId":"s7u4rt99"},"content":"`done 1`","lastModifiedDate":"2021-09-13"},{"lineNumber":122,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":123,"author":{"gitId":"s7u4rt99"},"content":"Expected outcome:","lastModifiedDate":"2021-09-13"},{"lineNumber":124,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":125,"author":{"gitId":"s7u4rt99"},"content":"Marks task at index `1` as done from StuDo\u0027s list of tasks.","lastModifiedDate":"2021-09-13"},{"lineNumber":126,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":127,"author":{"gitId":"s7u4rt99"},"content":"\u003cimg src\u003d\"userGuideDemo/done.png\" width\u003d\"307\" height\u003d\"400\"\u003e","lastModifiedDate":"2021-09-14"},{"lineNumber":128,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":129,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":130,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":131,"author":{"gitId":"s7u4rt99"},"content":"### 7. `remove \u003ctask index number\u003e` - removes task at given index number","lastModifiedDate":"2021-09-13"},{"lineNumber":132,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":133,"author":{"gitId":"s7u4rt99"},"content":"Removes task at given index number from StuDo\u0027s list of tasks.","lastModifiedDate":"2021-09-13"},{"lineNumber":134,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":135,"author":{"gitId":"s7u4rt99"},"content":"Example of usage:","lastModifiedDate":"2021-09-13"},{"lineNumber":136,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":137,"author":{"gitId":"s7u4rt99"},"content":"`remove 1`","lastModifiedDate":"2021-09-13"},{"lineNumber":138,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":139,"author":{"gitId":"s7u4rt99"},"content":"Expected outcome:","lastModifiedDate":"2021-09-13"},{"lineNumber":140,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":141,"author":{"gitId":"s7u4rt99"},"content":"Removes task at index `1` from StuDo\u0027s list of tasks.","lastModifiedDate":"2021-09-13"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":143,"author":{"gitId":"s7u4rt99"},"content":"\u003cimg src\u003d\"userGuideDemo/remove.png\" width\u003d\"317\" height\u003d\"400\"\u003e","lastModifiedDate":"2021-09-14"},{"lineNumber":144,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":145,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":146,"author":{"gitId":"s7u4rt99"},"content":"### 8. `archive \u003ctask index number\u003e` - archives task at given index number","lastModifiedDate":"2021-09-13"},{"lineNumber":147,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":148,"author":{"gitId":"s7u4rt99"},"content":"Archives task at given index number from StuDo\u0027s list of tasks.","lastModifiedDate":"2021-09-13"},{"lineNumber":149,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":150,"author":{"gitId":"s7u4rt99"},"content":"Example of usage:","lastModifiedDate":"2021-09-13"},{"lineNumber":151,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":152,"author":{"gitId":"s7u4rt99"},"content":"`archive 1`","lastModifiedDate":"2021-09-13"},{"lineNumber":153,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":154,"author":{"gitId":"s7u4rt99"},"content":"Expected outcome:","lastModifiedDate":"2021-09-13"},{"lineNumber":155,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":156,"author":{"gitId":"s7u4rt99"},"content":"Archives task at index `1` from StuDo\u0027s list of tasks.","lastModifiedDate":"2021-09-13"},{"lineNumber":157,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":158,"author":{"gitId":"s7u4rt99"},"content":"\u003cimg src\u003d\"userGuideDemo/archive.png\" width\u003d\"341\" height\u003d\"400\"\u003e","lastModifiedDate":"2021-09-14"},{"lineNumber":159,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":160,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":161,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":162,"author":{"gitId":"s7u4rt99"},"content":"### 9. `unarchive \u003ctask index number\u003e` - unarchives task at given index number","lastModifiedDate":"2021-09-14"},{"lineNumber":163,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":164,"author":{"gitId":"s7u4rt99"},"content":"Unarchives task at given index number from StuDo\u0027s list of archived tasks, adding it back to StuDo\u0027s list of tasks.","lastModifiedDate":"2021-09-14"},{"lineNumber":165,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":166,"author":{"gitId":"s7u4rt99"},"content":"Example of usage:","lastModifiedDate":"2021-09-14"},{"lineNumber":167,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":168,"author":{"gitId":"s7u4rt99"},"content":"`unarchive 1`","lastModifiedDate":"2021-09-14"},{"lineNumber":169,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":170,"author":{"gitId":"s7u4rt99"},"content":"Expected outcome:","lastModifiedDate":"2021-09-14"},{"lineNumber":171,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":172,"author":{"gitId":"s7u4rt99"},"content":"Unarchives task at index `1` from StuDo\u0027s list of archived tasks, adding back to StuDo\u0027s list of tasks.","lastModifiedDate":"2021-09-14"},{"lineNumber":173,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":174,"author":{"gitId":"s7u4rt99"},"content":"\u003cimg src\u003d\"userGuideDemo/unarchive.png\" width\u003d\"343\" height\u003d\"350\"\u003e","lastModifiedDate":"2021-09-14"},{"lineNumber":175,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":176,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":177,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":178,"author":{"gitId":"s7u4rt99"},"content":"### 10. `list archive` - displays the list of archived tasks","lastModifiedDate":"2021-09-14"},{"lineNumber":179,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":180,"author":{"gitId":"s7u4rt99"},"content":"The `list archive` command displays the list of archived tasks to the user.","lastModifiedDate":"2021-09-13"},{"lineNumber":181,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":182,"author":{"gitId":"s7u4rt99"},"content":"Example of usage:","lastModifiedDate":"2021-09-13"},{"lineNumber":183,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":184,"author":{"gitId":"s7u4rt99"},"content":"`list archive`","lastModifiedDate":"2021-09-13"},{"lineNumber":185,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":186,"author":{"gitId":"s7u4rt99"},"content":"Expected outcome:","lastModifiedDate":"2021-09-13"},{"lineNumber":187,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":188,"author":{"gitId":"s7u4rt99"},"content":"Shows the list of archived tasks to the user.","lastModifiedDate":"2021-09-13"},{"lineNumber":189,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":190,"author":{"gitId":"s7u4rt99"},"content":"\u003cimg src\u003d\"userGuideDemo/listArchive.png\" width\u003d\"487\" height\u003d\"250\"\u003e","lastModifiedDate":"2021-09-14"},{"lineNumber":191,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":192,"author":{"gitId":"s7u4rt99"},"content":"### 11. `remove archive \u003ctask index number\u003e` - removes task at task index number from list of archived tasks","lastModifiedDate":"2021-09-14"},{"lineNumber":193,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":194,"author":{"gitId":"s7u4rt99"},"content":"Removes task at task index number from StuDo\u0027s list of archived tasks.","lastModifiedDate":"2021-09-14"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":196,"author":{"gitId":"-"},"content":"Example of usage:","lastModifiedDate":"2019-07-29"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":198,"author":{"gitId":"s7u4rt99"},"content":"`remove archive 1`","lastModifiedDate":"2021-09-14"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":200,"author":{"gitId":"-"},"content":"Expected outcome:","lastModifiedDate":"2019-07-29"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":202,"author":{"gitId":"s7u4rt99"},"content":"List of archived tasks does not contain the task which we removed.","lastModifiedDate":"2021-09-14"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":204,"author":{"gitId":"s7u4rt99"},"content":"\u003cimg src\u003d\"userGuideDemo/removeArchive.png\" width\u003d\"323\" height\u003d\"350\"\u003e","lastModifiedDate":"2021-09-14"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-14"}],"authorContributionMap":{"s7u4rt99":180,"-":25}},{"path":"src/main/java/duke/ArchiveList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke;","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-07"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-07"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"/**","lastModifiedDate":"2021-09-07"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":" * Represents ArchiveList for Duke.","lastModifiedDate":"2021-09-07"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":" */","lastModifiedDate":"2021-09-07"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"public class ArchiveList extends DukeList {","lastModifiedDate":"2021-09-07"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"     * Constructor for ArchiveList.","lastModifiedDate":"2021-09-07"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"    public ArchiveList() {","lastModifiedDate":"2021-09-07"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"        super();","lastModifiedDate":"2021-09-07"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":17,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":18,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":19,"author":{"gitId":"s7u4rt99"},"content":"     * Constructor for ArchiveList, setting taskArrayList","lastModifiedDate":"2021-09-07"},{"lineNumber":20,"author":{"gitId":"s7u4rt99"},"content":"     * to a given list.","lastModifiedDate":"2021-09-07"},{"lineNumber":21,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":22,"author":{"gitId":"s7u4rt99"},"content":"     * @param list List to be assigned to taskArrayList.","lastModifiedDate":"2021-09-07"},{"lineNumber":23,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":24,"author":{"gitId":"s7u4rt99"},"content":"    public ArchiveList(ArrayList\u003cTask\u003e list) {","lastModifiedDate":"2021-09-07"},{"lineNumber":25,"author":{"gitId":"s7u4rt99"},"content":"        super(list);","lastModifiedDate":"2021-09-07"},{"lineNumber":26,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":27,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":28,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":29,"author":{"gitId":"s7u4rt99"},"content":"     * Getter for archived tasks.","lastModifiedDate":"2021-09-07"},{"lineNumber":30,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":31,"author":{"gitId":"s7u4rt99"},"content":"     * @return Archived tasks.","lastModifiedDate":"2021-09-07"},{"lineNumber":32,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":33,"author":{"gitId":"s7u4rt99"},"content":"    public ArrayList\u003cTask\u003e getArchivedTasks() {","lastModifiedDate":"2021-09-07"},{"lineNumber":34,"author":{"gitId":"s7u4rt99"},"content":"        return super.getTaskArrayList();","lastModifiedDate":"2021-09-07"},{"lineNumber":35,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":36,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":37,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":38,"author":{"gitId":"s7u4rt99"},"content":"     * Gets the type of list.","lastModifiedDate":"2021-09-07"},{"lineNumber":39,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":40,"author":{"gitId":"s7u4rt99"},"content":"     * @return \"archived list\"","lastModifiedDate":"2021-09-07"},{"lineNumber":41,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":42,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-09-07"},{"lineNumber":43,"author":{"gitId":"s7u4rt99"},"content":"    public String type() {","lastModifiedDate":"2021-09-07"},{"lineNumber":44,"author":{"gitId":"s7u4rt99"},"content":"        return \"archived list\";","lastModifiedDate":"2021-09-07"},{"lineNumber":45,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":46,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":47,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":48,"author":{"gitId":"s7u4rt99"},"content":"     * Unarchives Task at given index of taskArrayList.","lastModifiedDate":"2021-09-08"},{"lineNumber":49,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-08"},{"lineNumber":50,"author":{"gitId":"s7u4rt99"},"content":"     * @param indexToUnarchive Index of Task to be unarchived.","lastModifiedDate":"2021-09-08"},{"lineNumber":51,"author":{"gitId":"s7u4rt99"},"content":"     * @param taskList taskList to add the Task to.","lastModifiedDate":"2021-09-08"},{"lineNumber":52,"author":{"gitId":"s7u4rt99"},"content":"     * @return Task which was unarchived.","lastModifiedDate":"2021-09-08"},{"lineNumber":53,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":54,"author":{"gitId":"s7u4rt99"},"content":"    public Task unarchive(int indexToUnarchive, TaskList taskList) {","lastModifiedDate":"2021-09-08"},{"lineNumber":55,"author":{"gitId":"s7u4rt99"},"content":"        Task toUnarchive \u003d this.remove(indexToUnarchive);","lastModifiedDate":"2021-09-08"},{"lineNumber":56,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":57,"author":{"gitId":"s7u4rt99"},"content":"        taskList.add(toUnarchive);","lastModifiedDate":"2021-09-08"},{"lineNumber":58,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":59,"author":{"gitId":"s7u4rt99"},"content":"        return toUnarchive;","lastModifiedDate":"2021-09-08"},{"lineNumber":60,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":61,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":62,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-09-07"}],"authorContributionMap":{"s7u4rt99":62}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"import duke.command.Command;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":" * Represents a program called Duke. A \u003ccode\u003e Duke \u003c/code\u003e is a software which","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":" * acts as a todolist.","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"public class Duke {","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"    private final Ui ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"    private final Storage storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"    private final TaskList taskList;","lastModifiedDate":"2021-09-06"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"    private final ArchiveList archiveList;","lastModifiedDate":"2021-09-07"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"s7u4rt99"},"content":"     * Constructor for Duke. Initialises Ui, Storage, TaskList and ArchiveList objects.","lastModifiedDate":"2021-09-16"},{"lineNumber":18,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"s7u4rt99"},"content":"    public Duke() {","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"s7u4rt99"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"s7u4rt99"},"content":"        this.storage \u003d new Storage();","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"s7u4rt99"},"content":"        this.taskList \u003d new TaskList(storage.initialise());","lastModifiedDate":"2021-09-06"},{"lineNumber":23,"author":{"gitId":"s7u4rt99"},"content":"        this.archiveList \u003d new ArchiveList(storage.initialiseArchive());","lastModifiedDate":"2021-09-07"},{"lineNumber":24,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"s7u4rt99"},"content":"     * Runs the duke program.","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"s7u4rt99"},"content":"    public void run() {","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"s7u4rt99"},"content":"        ui.welcome();","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"s7u4rt99"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"s7u4rt99"},"content":"        while (!isExit) {","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"s7u4rt99"},"content":"            try {","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"s7u4rt99"},"content":"                String userInput \u003d ui.readInput();","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"s7u4rt99"},"content":"                Command c \u003d Parser.parse(userInput, ui, taskList, archiveList);","lastModifiedDate":"2021-09-07"},{"lineNumber":36,"author":{"gitId":"s7u4rt99"},"content":"                c.execute(taskList, archiveList, ui, storage);","lastModifiedDate":"2021-09-07"},{"lineNumber":37,"author":{"gitId":"s7u4rt99"},"content":"                isExit \u003d c.isExit();","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"s7u4rt99"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2021-08-18"},{"lineNumber":39,"author":{"gitId":"s7u4rt99"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2021-08-18"},{"lineNumber":40,"author":{"gitId":"s7u4rt99"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":42,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":43,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":45,"author":{"gitId":"s7u4rt99"},"content":"     * Processes the input string and returns a string to be displayed to","lastModifiedDate":"2021-09-02"},{"lineNumber":46,"author":{"gitId":"s7u4rt99"},"content":"     * the user on the GUI.","lastModifiedDate":"2021-09-02"},{"lineNumber":47,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":48,"author":{"gitId":"s7u4rt99"},"content":"     * @param input String input to be processed.","lastModifiedDate":"2021-09-02"},{"lineNumber":49,"author":{"gitId":"s7u4rt99"},"content":"     * @return String to be displayed to the user on the GUI.","lastModifiedDate":"2021-09-02"},{"lineNumber":50,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":51,"author":{"gitId":"s7u4rt99"},"content":"    public String processInput(String input) {","lastModifiedDate":"2021-09-02"},{"lineNumber":52,"author":{"gitId":"s7u4rt99"},"content":"        try {","lastModifiedDate":"2021-09-02"},{"lineNumber":53,"author":{"gitId":"s7u4rt99"},"content":"            Command c \u003d Parser.parse(input, ui, taskList, archiveList);","lastModifiedDate":"2021-09-07"},{"lineNumber":54,"author":{"gitId":"s7u4rt99"},"content":"            return c.formatExecutedString(taskList, archiveList, ui, storage);","lastModifiedDate":"2021-09-07"},{"lineNumber":55,"author":{"gitId":"s7u4rt99"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-09-02"},{"lineNumber":56,"author":{"gitId":"s7u4rt99"},"content":"            return e.getMessage();","lastModifiedDate":"2021-09-02"},{"lineNumber":57,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-02"},{"lineNumber":58,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":59,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":60,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"s7u4rt99"},"content":"     * Executes the main method for Duke program.","lastModifiedDate":"2021-09-14"},{"lineNumber":62,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":63,"author":{"gitId":"s7u4rt99"},"content":"     * @param args Arguments for main method.","lastModifiedDate":"2021-08-26"},{"lineNumber":64,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":65,"author":{"gitId":"s7u4rt99"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"s7u4rt99"},"content":"        new Duke().run();","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":68,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"s7u4rt99":67,"-":2}},{"path":"src/main/java/duke/DukeList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke;","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-07"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-07"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"/**","lastModifiedDate":"2021-09-07"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":" * Represents Tasks for Duke.","lastModifiedDate":"2021-09-07"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":" */","lastModifiedDate":"2021-09-07"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"public abstract class DukeList {","lastModifiedDate":"2021-09-07"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"    private final ArrayList\u003cTask\u003e taskArrayList;","lastModifiedDate":"2021-09-07"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"     * Constructor for DukeList.","lastModifiedDate":"2021-09-07"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":"    public DukeList() {","lastModifiedDate":"2021-09-07"},{"lineNumber":17,"author":{"gitId":"s7u4rt99"},"content":"        this.taskArrayList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-07"},{"lineNumber":18,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":19,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":20,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":21,"author":{"gitId":"s7u4rt99"},"content":"     * Constructor for DukeList, which assigns the taskArrayList to a","lastModifiedDate":"2021-09-07"},{"lineNumber":22,"author":{"gitId":"s7u4rt99"},"content":"     * specific ArrayList.","lastModifiedDate":"2021-09-07"},{"lineNumber":23,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":24,"author":{"gitId":"s7u4rt99"},"content":"     * @param taskArrayList ArrayList to be assigned to taskArrayList.","lastModifiedDate":"2021-09-07"},{"lineNumber":25,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":26,"author":{"gitId":"s7u4rt99"},"content":"    public DukeList(ArrayList\u003cTask\u003e taskArrayList) {","lastModifiedDate":"2021-09-07"},{"lineNumber":27,"author":{"gitId":"s7u4rt99"},"content":"        this.taskArrayList \u003d taskArrayList;","lastModifiedDate":"2021-09-07"},{"lineNumber":28,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":29,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":30,"author":{"gitId":"s7u4rt99"},"content":"    public abstract String type();","lastModifiedDate":"2021-09-07"},{"lineNumber":31,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":32,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":33,"author":{"gitId":"s7u4rt99"},"content":"     * Adds a new Task to taskArrayList.","lastModifiedDate":"2021-09-07"},{"lineNumber":34,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":35,"author":{"gitId":"s7u4rt99"},"content":"     * @param toAdd Task to add to tasks.","lastModifiedDate":"2021-09-07"},{"lineNumber":36,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":37,"author":{"gitId":"s7u4rt99"},"content":"    public void add(Task toAdd) {","lastModifiedDate":"2021-09-07"},{"lineNumber":38,"author":{"gitId":"s7u4rt99"},"content":"        this.taskArrayList.add(toAdd);","lastModifiedDate":"2021-09-07"},{"lineNumber":39,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":40,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":41,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":42,"author":{"gitId":"s7u4rt99"},"content":"     * Getter for taskArrayList.","lastModifiedDate":"2021-09-07"},{"lineNumber":43,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":44,"author":{"gitId":"s7u4rt99"},"content":"     * @return ArrayList of tasks.","lastModifiedDate":"2021-09-16"},{"lineNumber":45,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":46,"author":{"gitId":"s7u4rt99"},"content":"    public ArrayList\u003cTask\u003e getTaskArrayList() {","lastModifiedDate":"2021-09-07"},{"lineNumber":47,"author":{"gitId":"s7u4rt99"},"content":"        return this.taskArrayList;","lastModifiedDate":"2021-09-07"},{"lineNumber":48,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":49,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":50,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":51,"author":{"gitId":"s7u4rt99"},"content":"     * Removes Task from given index from taskArrayList.","lastModifiedDate":"2021-09-07"},{"lineNumber":52,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":53,"author":{"gitId":"s7u4rt99"},"content":"     * @param index Index of Task to remove from taskArrayList.","lastModifiedDate":"2021-09-07"},{"lineNumber":54,"author":{"gitId":"s7u4rt99"},"content":"     * @return The removed Task.","lastModifiedDate":"2021-09-07"},{"lineNumber":55,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":56,"author":{"gitId":"s7u4rt99"},"content":"    public Task remove(int index) {","lastModifiedDate":"2021-09-07"},{"lineNumber":57,"author":{"gitId":"s7u4rt99"},"content":"        return this.taskArrayList.remove(index);","lastModifiedDate":"2021-09-07"},{"lineNumber":58,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":59,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":60,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":61,"author":{"gitId":"s7u4rt99"},"content":"     * Gets the size of taskArrayList.","lastModifiedDate":"2021-09-07"},{"lineNumber":62,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":63,"author":{"gitId":"s7u4rt99"},"content":"     * @return Size of tasks.","lastModifiedDate":"2021-09-07"},{"lineNumber":64,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":65,"author":{"gitId":"s7u4rt99"},"content":"    public int getSize() {","lastModifiedDate":"2021-09-07"},{"lineNumber":66,"author":{"gitId":"s7u4rt99"},"content":"        return this.taskArrayList.size();","lastModifiedDate":"2021-09-07"},{"lineNumber":67,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":68,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":69,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":70,"author":{"gitId":"s7u4rt99"},"content":"     * Converts Task of a given index in tasks into its String representation.","lastModifiedDate":"2021-09-07"},{"lineNumber":71,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":72,"author":{"gitId":"s7u4rt99"},"content":"     * @param index Index of Task to get the String representation.","lastModifiedDate":"2021-09-07"},{"lineNumber":73,"author":{"gitId":"s7u4rt99"},"content":"     * @return String representation of Task in tasks with given index.","lastModifiedDate":"2021-09-07"},{"lineNumber":74,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":75,"author":{"gitId":"s7u4rt99"},"content":"    public String taskToString(int index) {","lastModifiedDate":"2021-09-07"},{"lineNumber":76,"author":{"gitId":"s7u4rt99"},"content":"        return this.taskArrayList.get(index).toString();","lastModifiedDate":"2021-09-07"},{"lineNumber":77,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":78,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":79,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":80,"author":{"gitId":"s7u4rt99"},"content":"     * Converts Task of a given index in tasks to its String representation to save.","lastModifiedDate":"2021-09-07"},{"lineNumber":81,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":82,"author":{"gitId":"s7u4rt99"},"content":"     * @param index Index of Task to get the String representation to save.","lastModifiedDate":"2021-09-07"},{"lineNumber":83,"author":{"gitId":"s7u4rt99"},"content":"     * @return String representation of Task in tasks with given index.","lastModifiedDate":"2021-09-07"},{"lineNumber":84,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":85,"author":{"gitId":"s7u4rt99"},"content":"    public String taskSaveToString(int index) {","lastModifiedDate":"2021-09-07"},{"lineNumber":86,"author":{"gitId":"s7u4rt99"},"content":"        return this.taskArrayList.get(index).convertToString();","lastModifiedDate":"2021-09-07"},{"lineNumber":87,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":88,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":89,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-16"},{"lineNumber":90,"author":{"gitId":"s7u4rt99"},"content":"     * Gets the task at given index of the DukeList.","lastModifiedDate":"2021-09-16"},{"lineNumber":91,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-16"},{"lineNumber":92,"author":{"gitId":"s7u4rt99"},"content":"     * @param index index which task is at in DukeList.","lastModifiedDate":"2021-09-16"},{"lineNumber":93,"author":{"gitId":"s7u4rt99"},"content":"     * @return Task at index.","lastModifiedDate":"2021-09-16"},{"lineNumber":94,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-16"},{"lineNumber":95,"author":{"gitId":"s7u4rt99"},"content":"    public Task get(int index) {","lastModifiedDate":"2021-09-07"},{"lineNumber":96,"author":{"gitId":"s7u4rt99"},"content":"        return this.taskArrayList.get(index);","lastModifiedDate":"2021-09-07"},{"lineNumber":97,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":98,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":99,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":100,"author":{"gitId":"s7u4rt99"},"content":"     * Converts DukeList object into its String representation.","lastModifiedDate":"2021-09-07"},{"lineNumber":101,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":102,"author":{"gitId":"s7u4rt99"},"content":"     * @return String representation of TaskList object.","lastModifiedDate":"2021-09-07"},{"lineNumber":103,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":104,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-09-07"},{"lineNumber":105,"author":{"gitId":"s7u4rt99"},"content":"    public String toString() {","lastModifiedDate":"2021-09-07"},{"lineNumber":106,"author":{"gitId":"s7u4rt99"},"content":"        return taskArrayList.toString();","lastModifiedDate":"2021-09-07"},{"lineNumber":107,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":108,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-09-07"}],"authorContributionMap":{"s7u4rt99":108}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"import duke.command.AddDeadlineCommand;","lastModifiedDate":"2021-09-14"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":"import duke.command.AddEventCommand;","lastModifiedDate":"2021-09-14"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":"import duke.command.AddToDoCommand;","lastModifiedDate":"2021-09-14"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"import duke.command.ArchiveCommand;","lastModifiedDate":"2021-09-07"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"import duke.command.Command;","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"import duke.command.DoneCommand;","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":"import duke.command.ExitCommand;","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"import duke.command.FindCommand;","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"import duke.command.ListArchiveCommand;","lastModifiedDate":"2021-09-07"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"import duke.command.ListCommand;","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"import duke.command.DeleteArchiveCommand;","lastModifiedDate":"2021-09-16"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"import duke.command.DeleteCommand;","lastModifiedDate":"2021-09-16"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"import duke.command.UnarchiveCommand;","lastModifiedDate":"2021-09-08"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":17,"author":{"gitId":"s7u4rt99"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-09-08"},{"lineNumber":18,"author":{"gitId":"s7u4rt99"},"content":"import duke.exception.InvalidCommandException;","lastModifiedDate":"2021-09-08"},{"lineNumber":19,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"s7u4rt99"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"s7u4rt99"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"s7u4rt99"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"s7u4rt99"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"s7u4rt99"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"s7u4rt99"},"content":" * Represents a parser which parses the input given by users of Duke.","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"s7u4rt99"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"s7u4rt99"},"content":"public class Parser {","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"s7u4rt99"},"content":"    private static final String SPACE \u003d \" \";","lastModifiedDate":"2021-09-06"},{"lineNumber":30,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":31,"author":{"gitId":"s7u4rt99"},"content":"    // Checks for command types.","lastModifiedDate":"2021-09-14"},{"lineNumber":32,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"s7u4rt99"},"content":"     * Checks if userInput is a delete command.","lastModifiedDate":"2021-09-16"},{"lineNumber":34,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"s7u4rt99"},"content":"     * @param userInput Input which is being checked.","lastModifiedDate":"2021-09-16"},{"lineNumber":36,"author":{"gitId":"s7u4rt99"},"content":"     * @return true if userInput is a delete command.","lastModifiedDate":"2021-09-16"},{"lineNumber":37,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"s7u4rt99"},"content":"    public static boolean isDelete(String userInput) {","lastModifiedDate":"2021-09-16"},{"lineNumber":39,"author":{"gitId":"s7u4rt99"},"content":"        String[] separated \u003d userInput.split(SPACE);","lastModifiedDate":"2021-09-16"},{"lineNumber":40,"author":{"gitId":"s7u4rt99"},"content":"        return separated[0].equals(\"delete\") \u0026\u0026 separated.length \u003e 1;","lastModifiedDate":"2021-09-16"},{"lineNumber":41,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"s7u4rt99"},"content":"     * Checks if userInput is a remove delete command.","lastModifiedDate":"2021-09-16"},{"lineNumber":45,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"s7u4rt99"},"content":"     * @param userInput Input which is being checked.","lastModifiedDate":"2021-09-16"},{"lineNumber":47,"author":{"gitId":"s7u4rt99"},"content":"     * @return true if userInput is a delete archive command.","lastModifiedDate":"2021-09-16"},{"lineNumber":48,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"s7u4rt99"},"content":"    public static boolean isDeleteArchive(String userInput) {","lastModifiedDate":"2021-09-16"},{"lineNumber":50,"author":{"gitId":"s7u4rt99"},"content":"        String[] separated \u003d userInput.split(SPACE);","lastModifiedDate":"2021-09-16"},{"lineNumber":51,"author":{"gitId":"s7u4rt99"},"content":"        return separated.length \u003e 2 \u0026\u0026 separated[0].equals(\"delete\") \u0026\u0026 separated[1].equals(\"archive\");","lastModifiedDate":"2021-09-16"},{"lineNumber":52,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"s7u4rt99"},"content":"     * Checks if userInput is a done command.","lastModifiedDate":"2021-09-16"},{"lineNumber":56,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":57,"author":{"gitId":"s7u4rt99"},"content":"     * @param userInput Input which is being checked.","lastModifiedDate":"2021-09-16"},{"lineNumber":58,"author":{"gitId":"s7u4rt99"},"content":"     * @return true if userInput is a done command.","lastModifiedDate":"2021-09-16"},{"lineNumber":59,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"s7u4rt99"},"content":"    public static boolean isDone(String userInput) {","lastModifiedDate":"2021-09-16"},{"lineNumber":61,"author":{"gitId":"s7u4rt99"},"content":"        String[] separated \u003d userInput.split(SPACE);","lastModifiedDate":"2021-09-16"},{"lineNumber":62,"author":{"gitId":"s7u4rt99"},"content":"        return separated[0].equals(\"done\");","lastModifiedDate":"2021-09-06"},{"lineNumber":63,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":66,"author":{"gitId":"s7u4rt99"},"content":"     * Checks if user userInput is a find command.","lastModifiedDate":"2021-09-16"},{"lineNumber":67,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":68,"author":{"gitId":"s7u4rt99"},"content":"     * @param userInput User input to check if it is a find command.","lastModifiedDate":"2021-09-16"},{"lineNumber":69,"author":{"gitId":"s7u4rt99"},"content":"     * @return true if it is a find command, else false.","lastModifiedDate":"2021-08-26"},{"lineNumber":70,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":71,"author":{"gitId":"s7u4rt99"},"content":"    public static boolean isFind(String userInput) {","lastModifiedDate":"2021-09-16"},{"lineNumber":72,"author":{"gitId":"s7u4rt99"},"content":"        String[] separated \u003d userInput.split(SPACE);","lastModifiedDate":"2021-09-16"},{"lineNumber":73,"author":{"gitId":"s7u4rt99"},"content":"        return separated[0].equals(\"find\");","lastModifiedDate":"2021-09-06"},{"lineNumber":74,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":75,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":76,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":77,"author":{"gitId":"s7u4rt99"},"content":"     * Checks if userInput is a list command.","lastModifiedDate":"2021-09-07"},{"lineNumber":78,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":79,"author":{"gitId":"s7u4rt99"},"content":"     * @param userInput Input to be checked.","lastModifiedDate":"2021-09-07"},{"lineNumber":80,"author":{"gitId":"s7u4rt99"},"content":"     * @return true if it is a list command.","lastModifiedDate":"2021-09-07"},{"lineNumber":81,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":82,"author":{"gitId":"s7u4rt99"},"content":"    private static boolean isList(String userInput) {","lastModifiedDate":"2021-09-07"},{"lineNumber":83,"author":{"gitId":"s7u4rt99"},"content":"        String[] separated \u003d userInput.split(\" \");","lastModifiedDate":"2021-09-07"},{"lineNumber":84,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":85,"author":{"gitId":"s7u4rt99"},"content":"        return separated.length \u003d\u003d 1 \u0026\u0026 separated[0].equals(\"list\");","lastModifiedDate":"2021-09-07"},{"lineNumber":86,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":87,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":88,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":89,"author":{"gitId":"s7u4rt99"},"content":"     * Checks if userInput is a list archive command.","lastModifiedDate":"2021-09-07"},{"lineNumber":90,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":91,"author":{"gitId":"s7u4rt99"},"content":"     * @param userInput Input to be checked.","lastModifiedDate":"2021-09-07"},{"lineNumber":92,"author":{"gitId":"s7u4rt99"},"content":"     * @return true if it is a list archive command.","lastModifiedDate":"2021-09-07"},{"lineNumber":93,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":94,"author":{"gitId":"s7u4rt99"},"content":"    private static boolean isListArchive(String userInput) {","lastModifiedDate":"2021-09-07"},{"lineNumber":95,"author":{"gitId":"s7u4rt99"},"content":"        String[] separated \u003d userInput.split(\" \");","lastModifiedDate":"2021-09-07"},{"lineNumber":96,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":97,"author":{"gitId":"s7u4rt99"},"content":"        return separated.length \u003d\u003d 2 \u0026\u0026 separated[1].equals(\"archive\") \u0026\u0026 isList(separated[0]);","lastModifiedDate":"2021-09-07"},{"lineNumber":98,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":99,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":100,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":101,"author":{"gitId":"s7u4rt99"},"content":"     * Checks if userInput is an event command.","lastModifiedDate":"2021-09-16"},{"lineNumber":102,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":103,"author":{"gitId":"s7u4rt99"},"content":"     * @param userInput Input which is being checked.","lastModifiedDate":"2021-09-16"},{"lineNumber":104,"author":{"gitId":"s7u4rt99"},"content":"     * @return true if userInput is a event command.","lastModifiedDate":"2021-09-16"},{"lineNumber":105,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":106,"author":{"gitId":"s7u4rt99"},"content":"    private static boolean isEvent(String userInput) {","lastModifiedDate":"2021-09-16"},{"lineNumber":107,"author":{"gitId":"s7u4rt99"},"content":"        String[] separated \u003d userInput.split(SPACE);","lastModifiedDate":"2021-09-16"},{"lineNumber":108,"author":{"gitId":"s7u4rt99"},"content":"        return separated[0].equals(\"event\");","lastModifiedDate":"2021-09-06"},{"lineNumber":109,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":110,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":111,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":112,"author":{"gitId":"s7u4rt99"},"content":"     * Checks if userInput is a deadline command.","lastModifiedDate":"2021-09-16"},{"lineNumber":113,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":114,"author":{"gitId":"s7u4rt99"},"content":"     * @param userInput Input which is being checked.","lastModifiedDate":"2021-09-16"},{"lineNumber":115,"author":{"gitId":"s7u4rt99"},"content":"     * @return true if userInput is a deadline command.","lastModifiedDate":"2021-09-16"},{"lineNumber":116,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":117,"author":{"gitId":"s7u4rt99"},"content":"    private static boolean isDeadline(String userInput) {","lastModifiedDate":"2021-09-16"},{"lineNumber":118,"author":{"gitId":"s7u4rt99"},"content":"        String[] separated \u003d userInput.split(SPACE);","lastModifiedDate":"2021-09-16"},{"lineNumber":119,"author":{"gitId":"s7u4rt99"},"content":"        return separated[0].equals(\"deadline\");","lastModifiedDate":"2021-09-06"},{"lineNumber":120,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":121,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":122,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":123,"author":{"gitId":"s7u4rt99"},"content":"     * Checks if userInput is a todo command.","lastModifiedDate":"2021-09-16"},{"lineNumber":124,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":125,"author":{"gitId":"s7u4rt99"},"content":"     * @param userInput Input which is being checked.","lastModifiedDate":"2021-09-16"},{"lineNumber":126,"author":{"gitId":"s7u4rt99"},"content":"     * @return true if userInput is a todo command.","lastModifiedDate":"2021-09-16"},{"lineNumber":127,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":128,"author":{"gitId":"s7u4rt99"},"content":"    private static boolean isTodo(String userInput) {","lastModifiedDate":"2021-09-16"},{"lineNumber":129,"author":{"gitId":"s7u4rt99"},"content":"        String[] separated \u003d userInput.split(SPACE);","lastModifiedDate":"2021-09-16"},{"lineNumber":130,"author":{"gitId":"s7u4rt99"},"content":"        return separated[0].equals(\"todo\");","lastModifiedDate":"2021-09-06"},{"lineNumber":131,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":132,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":133,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":134,"author":{"gitId":"s7u4rt99"},"content":"     * Checks if userInput is an archive command.","lastModifiedDate":"2021-09-16"},{"lineNumber":135,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":136,"author":{"gitId":"s7u4rt99"},"content":"     * @param userInput Input which is being checked.","lastModifiedDate":"2021-09-16"},{"lineNumber":137,"author":{"gitId":"s7u4rt99"},"content":"     * @return true if userInput is an archive command.","lastModifiedDate":"2021-09-16"},{"lineNumber":138,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":139,"author":{"gitId":"s7u4rt99"},"content":"    private static boolean isArchive(String userInput) {","lastModifiedDate":"2021-09-16"},{"lineNumber":140,"author":{"gitId":"s7u4rt99"},"content":"        String[] separated \u003d userInput.split(\" \");","lastModifiedDate":"2021-09-16"},{"lineNumber":141,"author":{"gitId":"s7u4rt99"},"content":"        return separated[0].equals(\"archive\");","lastModifiedDate":"2021-09-07"},{"lineNumber":142,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":143,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":144,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":145,"author":{"gitId":"s7u4rt99"},"content":"     * Checks if userInput is an unarchive command.","lastModifiedDate":"2021-09-16"},{"lineNumber":146,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-08"},{"lineNumber":147,"author":{"gitId":"s7u4rt99"},"content":"     * @param userInput Input which is being checked.","lastModifiedDate":"2021-09-16"},{"lineNumber":148,"author":{"gitId":"s7u4rt99"},"content":"     * @return true if userInput is an unarchive command.","lastModifiedDate":"2021-09-16"},{"lineNumber":149,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":150,"author":{"gitId":"s7u4rt99"},"content":"    private static boolean isUnarchive(String userInput) {","lastModifiedDate":"2021-09-16"},{"lineNumber":151,"author":{"gitId":"s7u4rt99"},"content":"        String[] separated \u003d userInput.split(\" \");","lastModifiedDate":"2021-09-16"},{"lineNumber":152,"author":{"gitId":"s7u4rt99"},"content":"        return separated[0].equals(\"unarchive\");","lastModifiedDate":"2021-09-08"},{"lineNumber":153,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":154,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":155,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":156,"author":{"gitId":"s7u4rt99"},"content":"     * Checks if userInput is a bye command.","lastModifiedDate":"2021-09-16"},{"lineNumber":157,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":158,"author":{"gitId":"s7u4rt99"},"content":"     * @param userInput Input which is being checked.","lastModifiedDate":"2021-09-16"},{"lineNumber":159,"author":{"gitId":"s7u4rt99"},"content":"     * @return true if userInput is a bye command.","lastModifiedDate":"2021-09-16"},{"lineNumber":160,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":161,"author":{"gitId":"s7u4rt99"},"content":"    private static boolean isBye(String userInput) {","lastModifiedDate":"2021-09-16"},{"lineNumber":162,"author":{"gitId":"s7u4rt99"},"content":"        return userInput.equals(\"bye\");","lastModifiedDate":"2021-09-16"},{"lineNumber":163,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":164,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":165,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":166,"author":{"gitId":"s7u4rt99"},"content":"    // Checks for conditions.","lastModifiedDate":"2021-09-14"},{"lineNumber":167,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":168,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-14"},{"lineNumber":169,"author":{"gitId":"s7u4rt99"},"content":"     * Checks if dateString is in a valid date form depicted by dateFormatter.","lastModifiedDate":"2021-09-14"},{"lineNumber":170,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-14"},{"lineNumber":171,"author":{"gitId":"s7u4rt99"},"content":"     * @param dateString String which contains a date.","lastModifiedDate":"2021-09-14"},{"lineNumber":172,"author":{"gitId":"s7u4rt99"},"content":"     * @param dateFormatter Format which you want to check if dateString is in.","lastModifiedDate":"2021-09-14"},{"lineNumber":173,"author":{"gitId":"s7u4rt99"},"content":"     * @return true if dateString is in valid form, else otherwise.","lastModifiedDate":"2021-09-14"},{"lineNumber":174,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-14"},{"lineNumber":175,"author":{"gitId":"s7u4rt99"},"content":"    public static boolean isValidDate(String dateString, DateTimeFormatter dateFormatter) {","lastModifiedDate":"2021-09-14"},{"lineNumber":176,"author":{"gitId":"s7u4rt99"},"content":"        try {","lastModifiedDate":"2021-09-14"},{"lineNumber":177,"author":{"gitId":"s7u4rt99"},"content":"            LocalDate.parse(dateString, dateFormatter);","lastModifiedDate":"2021-09-14"},{"lineNumber":178,"author":{"gitId":"s7u4rt99"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-09-14"},{"lineNumber":179,"author":{"gitId":"s7u4rt99"},"content":"            return false;","lastModifiedDate":"2021-09-14"},{"lineNumber":180,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-14"},{"lineNumber":181,"author":{"gitId":"s7u4rt99"},"content":"        return true;","lastModifiedDate":"2021-09-14"},{"lineNumber":182,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":183,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":184,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-14"},{"lineNumber":185,"author":{"gitId":"s7u4rt99"},"content":"     * Checks if timeString is in a valid date form depicted by timeFormatter.","lastModifiedDate":"2021-09-14"},{"lineNumber":186,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-14"},{"lineNumber":187,"author":{"gitId":"s7u4rt99"},"content":"     * @param timeString String which contains a time.","lastModifiedDate":"2021-09-14"},{"lineNumber":188,"author":{"gitId":"s7u4rt99"},"content":"     * @param timeFormatter Format which you want to check if timeString is in.","lastModifiedDate":"2021-09-14"},{"lineNumber":189,"author":{"gitId":"s7u4rt99"},"content":"     * @return true if timeString is in valid form, else otherwise.","lastModifiedDate":"2021-09-14"},{"lineNumber":190,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-14"},{"lineNumber":191,"author":{"gitId":"s7u4rt99"},"content":"    public static boolean isValidTime(String timeString, DateTimeFormatter timeFormatter) {","lastModifiedDate":"2021-09-14"},{"lineNumber":192,"author":{"gitId":"s7u4rt99"},"content":"        try {","lastModifiedDate":"2021-09-14"},{"lineNumber":193,"author":{"gitId":"s7u4rt99"},"content":"            LocalTime.parse(timeString, timeFormatter);","lastModifiedDate":"2021-09-14"},{"lineNumber":194,"author":{"gitId":"s7u4rt99"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-09-14"},{"lineNumber":195,"author":{"gitId":"s7u4rt99"},"content":"            return false;","lastModifiedDate":"2021-09-14"},{"lineNumber":196,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-14"},{"lineNumber":197,"author":{"gitId":"s7u4rt99"},"content":"        return true;","lastModifiedDate":"2021-09-14"},{"lineNumber":198,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":199,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":200,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":201,"author":{"gitId":"s7u4rt99"},"content":"     * Checks if String is an Integer or \"all\" word.","lastModifiedDate":"2021-09-07"},{"lineNumber":202,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":203,"author":{"gitId":"s7u4rt99"},"content":"     * @param userInput String to check.","lastModifiedDate":"2021-09-16"},{"lineNumber":204,"author":{"gitId":"s7u4rt99"},"content":"     * @return true if it is an Integer or \"all\" word, else false.","lastModifiedDate":"2021-09-07"},{"lineNumber":205,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":206,"author":{"gitId":"s7u4rt99"},"content":"    public static boolean isIntegerOrAll(String userInput) {","lastModifiedDate":"2021-09-16"},{"lineNumber":207,"author":{"gitId":"s7u4rt99"},"content":"        return isPositiveInteger(userInput) || isAll(userInput);","lastModifiedDate":"2021-09-16"},{"lineNumber":208,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":209,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":210,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":211,"author":{"gitId":"s7u4rt99"},"content":"     * Checks if String is \"all\" word.","lastModifiedDate":"2021-09-07"},{"lineNumber":212,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":213,"author":{"gitId":"s7u4rt99"},"content":"     * @param userInput String to check.","lastModifiedDate":"2021-09-16"},{"lineNumber":214,"author":{"gitId":"s7u4rt99"},"content":"     * @return true if it is an \"all\" word.","lastModifiedDate":"2021-09-07"},{"lineNumber":215,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":216,"author":{"gitId":"s7u4rt99"},"content":"    public static boolean isAll(String userInput) {","lastModifiedDate":"2021-09-16"},{"lineNumber":217,"author":{"gitId":"s7u4rt99"},"content":"        return userInput.equals(\"all\");","lastModifiedDate":"2021-09-16"},{"lineNumber":218,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":219,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":220,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":221,"author":{"gitId":"s7u4rt99"},"content":"     * Checks if String is an Integer.","lastModifiedDate":"2021-09-07"},{"lineNumber":222,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":223,"author":{"gitId":"s7u4rt99"},"content":"     * @param userInput String to check.","lastModifiedDate":"2021-09-16"},{"lineNumber":224,"author":{"gitId":"s7u4rt99"},"content":"     * @return true if it is an Integer.","lastModifiedDate":"2021-09-07"},{"lineNumber":225,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":226,"author":{"gitId":"s7u4rt99"},"content":"    public static boolean isPositiveInteger(String userInput) {","lastModifiedDate":"2021-09-16"},{"lineNumber":227,"author":{"gitId":"s7u4rt99"},"content":"        return userInput.matches(\"\\\\d+\");","lastModifiedDate":"2021-09-16"},{"lineNumber":228,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":229,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":230,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":231,"author":{"gitId":"s7u4rt99"},"content":"     * Checks if string is within range of given taskList.","lastModifiedDate":"2021-09-07"},{"lineNumber":232,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":233,"author":{"gitId":"s7u4rt99"},"content":"     * @param dukeList taskList to see if index s is within.","lastModifiedDate":"2021-09-07"},{"lineNumber":234,"author":{"gitId":"s7u4rt99"},"content":"     * @param userInput String to check if is within range of taskList.","lastModifiedDate":"2021-09-16"},{"lineNumber":235,"author":{"gitId":"s7u4rt99"},"content":"     * @return true if String is within the range of the taskList, else false.","lastModifiedDate":"2021-09-07"},{"lineNumber":236,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":237,"author":{"gitId":"s7u4rt99"},"content":"    public static boolean isOutOfRange(DukeList dukeList, String userInput) {","lastModifiedDate":"2021-09-16"},{"lineNumber":238,"author":{"gitId":"s7u4rt99"},"content":"        return !isAll(userInput) \u0026\u0026 (isExceedLength(dukeList, userInput) || isLessThanOne(userInput));","lastModifiedDate":"2021-09-16"},{"lineNumber":239,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":240,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":241,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":242,"author":{"gitId":"s7u4rt99"},"content":"     * Checks if integer value of s is less than 1.","lastModifiedDate":"2021-09-07"},{"lineNumber":243,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":244,"author":{"gitId":"s7u4rt99"},"content":"     * @param userInput String which is to be converted into integer value.","lastModifiedDate":"2021-09-16"},{"lineNumber":245,"author":{"gitId":"s7u4rt99"},"content":"     * @return true if integer value of s is less than 1, false otherwise.","lastModifiedDate":"2021-09-07"},{"lineNumber":246,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":247,"author":{"gitId":"s7u4rt99"},"content":"    private static boolean isLessThanOne(String userInput) {","lastModifiedDate":"2021-09-16"},{"lineNumber":248,"author":{"gitId":"s7u4rt99"},"content":"        return Integer.valueOf(userInput) \u003c 1;","lastModifiedDate":"2021-09-16"},{"lineNumber":249,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":250,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":251,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-14"},{"lineNumber":252,"author":{"gitId":"s7u4rt99"},"content":"     * Checks if length of words array is less than two.","lastModifiedDate":"2021-09-14"},{"lineNumber":253,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-14"},{"lineNumber":254,"author":{"gitId":"s7u4rt99"},"content":"     * @param words Words array to check.","lastModifiedDate":"2021-09-14"},{"lineNumber":255,"author":{"gitId":"s7u4rt99"},"content":"     * @return true if length of words array is less than two, else false.","lastModifiedDate":"2021-09-14"},{"lineNumber":256,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-14"},{"lineNumber":257,"author":{"gitId":"s7u4rt99"},"content":"    public static boolean isLengthLessThanTwo(String[] words) {","lastModifiedDate":"2021-09-14"},{"lineNumber":258,"author":{"gitId":"s7u4rt99"},"content":"        return words.length \u003c 2;","lastModifiedDate":"2021-09-14"},{"lineNumber":259,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":260,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":261,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":262,"author":{"gitId":"s7u4rt99"},"content":"     * Checks if integer value of s exceeds the length of dukeList.","lastModifiedDate":"2021-09-07"},{"lineNumber":263,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":264,"author":{"gitId":"s7u4rt99"},"content":"     * @param dukeList DukeList to check if integer value of s exceeds.","lastModifiedDate":"2021-09-07"},{"lineNumber":265,"author":{"gitId":"s7u4rt99"},"content":"     * @param userInput String which is to be converted into integer value.","lastModifiedDate":"2021-09-16"},{"lineNumber":266,"author":{"gitId":"s7u4rt99"},"content":"     * @return true if integer value of s does not exceed length of dukeList,","lastModifiedDate":"2021-09-07"},{"lineNumber":267,"author":{"gitId":"s7u4rt99"},"content":"     * false otherwise.","lastModifiedDate":"2021-09-07"},{"lineNumber":268,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":269,"author":{"gitId":"s7u4rt99"},"content":"    private static boolean isExceedLength(DukeList dukeList, String userInput) {","lastModifiedDate":"2021-09-16"},{"lineNumber":270,"author":{"gitId":"s7u4rt99"},"content":"        return Integer.valueOf(userInput) \u003e dukeList.getSize();","lastModifiedDate":"2021-09-16"},{"lineNumber":271,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":272,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":273,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":274,"author":{"gitId":"s7u4rt99"},"content":"     * Parses the input string and returns a command for Duke to execute.","lastModifiedDate":"2021-08-26"},{"lineNumber":275,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":276,"author":{"gitId":"s7u4rt99"},"content":"     * @param userInput Input which needs to be parsed.","lastModifiedDate":"2021-08-26"},{"lineNumber":277,"author":{"gitId":"s7u4rt99"},"content":"     * @param ui Ui object from Duke class.","lastModifiedDate":"2021-08-26"},{"lineNumber":278,"author":{"gitId":"s7u4rt99"},"content":"     * @param taskList TaskList object from Duke class.","lastModifiedDate":"2021-09-06"},{"lineNumber":279,"author":{"gitId":"s7u4rt99"},"content":"     * @param archiveList ArchiveList object from Duke class.","lastModifiedDate":"2021-09-07"},{"lineNumber":280,"author":{"gitId":"s7u4rt99"},"content":"     * @return Command to execute.","lastModifiedDate":"2021-08-26"},{"lineNumber":281,"author":{"gitId":"s7u4rt99"},"content":"     * @throws DukeException If invalid commands or incomplete commands are entered by the user.","lastModifiedDate":"2021-09-14"},{"lineNumber":282,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":283,"author":{"gitId":"s7u4rt99"},"content":"    public static Command parse(","lastModifiedDate":"2021-09-07"},{"lineNumber":284,"author":{"gitId":"s7u4rt99"},"content":"            String userInput, Ui ui, TaskList taskList, ArchiveList archiveList) throws DukeException {","lastModifiedDate":"2021-09-07"},{"lineNumber":285,"author":{"gitId":"s7u4rt99"},"content":"        if (Parser.isList(userInput)) {","lastModifiedDate":"2021-09-14"},{"lineNumber":286,"author":{"gitId":"s7u4rt99"},"content":"            return ListCommand.generateCommand();","lastModifiedDate":"2021-09-16"},{"lineNumber":287,"author":{"gitId":"s7u4rt99"},"content":"        } else if (Parser.isListArchive(userInput)) {","lastModifiedDate":"2021-09-14"},{"lineNumber":288,"author":{"gitId":"s7u4rt99"},"content":"            return ListArchiveCommand.generateCommand();","lastModifiedDate":"2021-09-16"},{"lineNumber":289,"author":{"gitId":"s7u4rt99"},"content":"        } else if (Parser.isDone(userInput)) {","lastModifiedDate":"2021-08-26"},{"lineNumber":290,"author":{"gitId":"s7u4rt99"},"content":"            return DoneCommand.generateCommand(userInput, taskList);","lastModifiedDate":"2021-09-16"},{"lineNumber":291,"author":{"gitId":"s7u4rt99"},"content":"        } else if (Parser.isDeleteArchive(userInput)) {","lastModifiedDate":"2021-09-16"},{"lineNumber":292,"author":{"gitId":"s7u4rt99"},"content":"            return DeleteArchiveCommand.generateCommand(userInput, archiveList);","lastModifiedDate":"2021-09-16"},{"lineNumber":293,"author":{"gitId":"s7u4rt99"},"content":"        } else if (Parser.isDelete(userInput)) {","lastModifiedDate":"2021-09-16"},{"lineNumber":294,"author":{"gitId":"s7u4rt99"},"content":"            return DeleteCommand.generateCommand(userInput, taskList);","lastModifiedDate":"2021-09-16"},{"lineNumber":295,"author":{"gitId":"s7u4rt99"},"content":"        } else if (Parser.isBye(userInput)) {","lastModifiedDate":"2021-09-06"},{"lineNumber":296,"author":{"gitId":"s7u4rt99"},"content":"            return ExitCommand.generateCommand();","lastModifiedDate":"2021-09-16"},{"lineNumber":297,"author":{"gitId":"s7u4rt99"},"content":"        } else if (Parser.isFind(userInput)) {","lastModifiedDate":"2021-08-26"},{"lineNumber":298,"author":{"gitId":"s7u4rt99"},"content":"            return FindCommand.generateCommand(userInput);","lastModifiedDate":"2021-09-16"},{"lineNumber":299,"author":{"gitId":"s7u4rt99"},"content":"        } else if (Parser.isTodo(userInput)) {","lastModifiedDate":"2021-09-06"},{"lineNumber":300,"author":{"gitId":"s7u4rt99"},"content":"            return AddToDoCommand.generateCommand(userInput);","lastModifiedDate":"2021-09-16"},{"lineNumber":301,"author":{"gitId":"s7u4rt99"},"content":"        } else if (Parser.isDeadline(userInput)) {","lastModifiedDate":"2021-09-06"},{"lineNumber":302,"author":{"gitId":"s7u4rt99"},"content":"            return AddDeadlineCommand.generateCommand(userInput);","lastModifiedDate":"2021-09-16"},{"lineNumber":303,"author":{"gitId":"s7u4rt99"},"content":"        } else if (Parser.isEvent(userInput)) {","lastModifiedDate":"2021-09-06"},{"lineNumber":304,"author":{"gitId":"s7u4rt99"},"content":"            return AddEventCommand.generateCommand(userInput);","lastModifiedDate":"2021-09-16"},{"lineNumber":305,"author":{"gitId":"s7u4rt99"},"content":"        } else if (Parser.isArchive(userInput)) {","lastModifiedDate":"2021-09-07"},{"lineNumber":306,"author":{"gitId":"s7u4rt99"},"content":"            return ArchiveCommand.generateCommand(userInput, taskList);","lastModifiedDate":"2021-09-16"},{"lineNumber":307,"author":{"gitId":"s7u4rt99"},"content":"        } else if (Parser.isUnarchive(userInput)) {","lastModifiedDate":"2021-09-08"},{"lineNumber":308,"author":{"gitId":"s7u4rt99"},"content":"            return UnarchiveCommand.generateCommand(userInput, archiveList);","lastModifiedDate":"2021-09-16"},{"lineNumber":309,"author":{"gitId":"s7u4rt99"},"content":"        } else {","lastModifiedDate":"2021-09-07"},{"lineNumber":310,"author":{"gitId":"s7u4rt99"},"content":"            throw new InvalidCommandException();","lastModifiedDate":"2021-09-07"},{"lineNumber":311,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":312,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":313,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"s7u4rt99":313}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":"import duke.task.Event;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"import duke.task.ToDo;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"import java.io.File;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":" * Stores and retrieves information of the tasklist for Duke.","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"s7u4rt99"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"s7u4rt99"},"content":"public class Storage {","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"s7u4rt99"},"content":"    private final String TASKLIST_FILE_PATH;","lastModifiedDate":"2021-09-07"},{"lineNumber":20,"author":{"gitId":"s7u4rt99"},"content":"    private final String DIR_PATH;","lastModifiedDate":"2021-09-06"},{"lineNumber":21,"author":{"gitId":"s7u4rt99"},"content":"    private final String ARCHIVELIST_FILE_PATH;","lastModifiedDate":"2021-09-07"},{"lineNumber":22,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"s7u4rt99"},"content":"     * Constructor for Storage.","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"s7u4rt99"},"content":"    public Storage() {","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"s7u4rt99"},"content":"        this.TASKLIST_FILE_PATH \u003d \"data\" + File.separator + \"history.txt\";","lastModifiedDate":"2021-09-07"},{"lineNumber":28,"author":{"gitId":"s7u4rt99"},"content":"        this.DIR_PATH \u003d \"data\";","lastModifiedDate":"2021-09-06"},{"lineNumber":29,"author":{"gitId":"s7u4rt99"},"content":"        this.ARCHIVELIST_FILE_PATH \u003d \"data\" + File.separator + \"archive.txt\";","lastModifiedDate":"2021-09-07"},{"lineNumber":30,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"s7u4rt99"},"content":"     * Initialises the initial ArrayList for Duke.","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"s7u4rt99"},"content":"     * @return ArrayList to be passed into TaskList for Duke.","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"s7u4rt99"},"content":"    public ArrayList\u003cTask\u003e initialise() {","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"s7u4rt99"},"content":"        //read from the data/history.text and return an ArrayList of Tasks","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"s7u4rt99"},"content":"        File file \u003d new File(TASKLIST_FILE_PATH);","lastModifiedDate":"2021-09-07"},{"lineNumber":40,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":41,"author":{"gitId":"s7u4rt99"},"content":"        return readArrayList(file);","lastModifiedDate":"2021-09-16"},{"lineNumber":42,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":43,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":44,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":45,"author":{"gitId":"s7u4rt99"},"content":"     * Initialises the ArrayList for the archiveList of Duke.","lastModifiedDate":"2021-09-07"},{"lineNumber":46,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":47,"author":{"gitId":"s7u4rt99"},"content":"     * @return ArrayList to be passed into ArchiveList for Duke.","lastModifiedDate":"2021-09-16"},{"lineNumber":48,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":49,"author":{"gitId":"s7u4rt99"},"content":"    public ArrayList\u003cTask\u003e initialiseArchive() {","lastModifiedDate":"2021-09-07"},{"lineNumber":50,"author":{"gitId":"s7u4rt99"},"content":"        //read from the data/archive.text and return an ArrayList of Tasks","lastModifiedDate":"2021-09-16"},{"lineNumber":51,"author":{"gitId":"s7u4rt99"},"content":"        File file \u003d new File(ARCHIVELIST_FILE_PATH);","lastModifiedDate":"2021-09-07"},{"lineNumber":52,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":53,"author":{"gitId":"s7u4rt99"},"content":"        return readArrayList(file);","lastModifiedDate":"2021-09-16"},{"lineNumber":54,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-16"},{"lineNumber":55,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":56,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-16"},{"lineNumber":57,"author":{"gitId":"s7u4rt99"},"content":"     * Reads the given file and generates an array list with the tasks from the file.","lastModifiedDate":"2021-09-16"},{"lineNumber":58,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-16"},{"lineNumber":59,"author":{"gitId":"s7u4rt99"},"content":"     * @param file File to be read from.","lastModifiedDate":"2021-09-16"},{"lineNumber":60,"author":{"gitId":"s7u4rt99"},"content":"     * @return ArrayList with tasks read from the file.","lastModifiedDate":"2021-09-16"},{"lineNumber":61,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-16"},{"lineNumber":62,"author":{"gitId":"s7u4rt99"},"content":"    private ArrayList\u003cTask\u003e readArrayList(File file) {","lastModifiedDate":"2021-09-16"},{"lineNumber":63,"author":{"gitId":"s7u4rt99"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"s7u4rt99"},"content":"            Scanner s \u003d new Scanner(file);","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"s7u4rt99"},"content":"            ArrayList\u003cTask\u003e output \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":67,"author":{"gitId":"s7u4rt99"},"content":"            while (s.hasNext()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"s7u4rt99"},"content":"                String task \u003d s.nextLine();","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"s7u4rt99"},"content":"                String[] splitTask \u003d task.split(\"\\\\|\");","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":71,"author":{"gitId":"s7u4rt99"},"content":"                switch (splitTask[0]) {","lastModifiedDate":"2021-09-16"},{"lineNumber":72,"author":{"gitId":"s7u4rt99"},"content":"                case \"T\":","lastModifiedDate":"2021-09-16"},{"lineNumber":73,"author":{"gitId":"s7u4rt99"},"content":"                    // it is todotask","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"s7u4rt99"},"content":"                    initialiseToDo(output, splitTask);","lastModifiedDate":"2021-09-06"},{"lineNumber":75,"author":{"gitId":"s7u4rt99"},"content":"                    break;","lastModifiedDate":"2021-09-16"},{"lineNumber":76,"author":{"gitId":"s7u4rt99"},"content":"                case \"E\":","lastModifiedDate":"2021-09-16"},{"lineNumber":77,"author":{"gitId":"s7u4rt99"},"content":"                    // event","lastModifiedDate":"2021-09-06"},{"lineNumber":78,"author":{"gitId":"s7u4rt99"},"content":"                    initialiseEvent(output, splitTask);","lastModifiedDate":"2021-09-06"},{"lineNumber":79,"author":{"gitId":"s7u4rt99"},"content":"                    break;","lastModifiedDate":"2021-09-16"},{"lineNumber":80,"author":{"gitId":"s7u4rt99"},"content":"                case \"D\":","lastModifiedDate":"2021-09-16"},{"lineNumber":81,"author":{"gitId":"s7u4rt99"},"content":"                    // deadline","lastModifiedDate":"2021-09-06"},{"lineNumber":82,"author":{"gitId":"s7u4rt99"},"content":"                    initialiseDeadline(output, splitTask);","lastModifiedDate":"2021-09-06"},{"lineNumber":83,"author":{"gitId":"s7u4rt99"},"content":"                    break;","lastModifiedDate":"2021-09-16"},{"lineNumber":84,"author":{"gitId":"s7u4rt99"},"content":"                default:","lastModifiedDate":"2021-09-16"},{"lineNumber":85,"author":{"gitId":"s7u4rt99"},"content":"                    assert false;","lastModifiedDate":"2021-09-16"},{"lineNumber":86,"author":{"gitId":"s7u4rt99"},"content":"                }","lastModifiedDate":"2021-08-25"},{"lineNumber":87,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":88,"author":{"gitId":"s7u4rt99"},"content":"            }","lastModifiedDate":"2021-09-06"},{"lineNumber":89,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":90,"author":{"gitId":"s7u4rt99"},"content":"            return output;","lastModifiedDate":"2021-09-06"},{"lineNumber":91,"author":{"gitId":"s7u4rt99"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-09-06"},{"lineNumber":92,"author":{"gitId":"s7u4rt99"},"content":"            return new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-06"},{"lineNumber":93,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-06"},{"lineNumber":94,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":95,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":96,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":97,"author":{"gitId":"s7u4rt99"},"content":"     * Initialises a Deadline Object and adds it to an ArrayList.","lastModifiedDate":"2021-09-06"},{"lineNumber":98,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":99,"author":{"gitId":"s7u4rt99"},"content":"     * @param tasks ArrayList for the Deadline Object to be added to.","lastModifiedDate":"2021-09-06"},{"lineNumber":100,"author":{"gitId":"s7u4rt99"},"content":"     * @param splitTask Details of the Deadline Object stored in an array.","lastModifiedDate":"2021-09-06"},{"lineNumber":101,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":102,"author":{"gitId":"s7u4rt99"},"content":"    private void initialiseDeadline(ArrayList\u003cTask\u003e tasks, String[] splitTask) {","lastModifiedDate":"2021-09-06"},{"lineNumber":103,"author":{"gitId":"s7u4rt99"},"content":"        Task toAdd \u003d new Deadline(splitTask[2], splitTask[3]);","lastModifiedDate":"2021-08-25"},{"lineNumber":104,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":105,"author":{"gitId":"s7u4rt99"},"content":"        if (splitTask[1].equals(\"1\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":106,"author":{"gitId":"s7u4rt99"},"content":"            toAdd.markAsDone();","lastModifiedDate":"2021-08-25"},{"lineNumber":107,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":108,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":109,"author":{"gitId":"s7u4rt99"},"content":"        tasks.add(toAdd);","lastModifiedDate":"2021-09-06"},{"lineNumber":110,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":111,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":112,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":113,"author":{"gitId":"s7u4rt99"},"content":"     * Initialises an Event Object and adds it to an ArrayList.","lastModifiedDate":"2021-09-06"},{"lineNumber":114,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":115,"author":{"gitId":"s7u4rt99"},"content":"     * @param tasks ArrayList for the Event Object to be added to.","lastModifiedDate":"2021-09-06"},{"lineNumber":116,"author":{"gitId":"s7u4rt99"},"content":"     * @param splitTask Details of the Event Object stored in an array.","lastModifiedDate":"2021-09-06"},{"lineNumber":117,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":118,"author":{"gitId":"s7u4rt99"},"content":"    private void initialiseEvent(ArrayList\u003cTask\u003e tasks, String[] splitTask) {","lastModifiedDate":"2021-09-06"},{"lineNumber":119,"author":{"gitId":"s7u4rt99"},"content":"        Task toAdd \u003d new Event(splitTask[2], splitTask[3]);","lastModifiedDate":"2021-09-06"},{"lineNumber":120,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":121,"author":{"gitId":"s7u4rt99"},"content":"        if (splitTask[1].equals(\"1\")) {","lastModifiedDate":"2021-09-06"},{"lineNumber":122,"author":{"gitId":"s7u4rt99"},"content":"            toAdd.markAsDone();","lastModifiedDate":"2021-09-06"},{"lineNumber":123,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":124,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":125,"author":{"gitId":"s7u4rt99"},"content":"        tasks.add(toAdd);","lastModifiedDate":"2021-09-06"},{"lineNumber":126,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":127,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":128,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":129,"author":{"gitId":"s7u4rt99"},"content":"     * Initialises a ToDo Object and adds it to an ArrayList.","lastModifiedDate":"2021-09-06"},{"lineNumber":130,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":131,"author":{"gitId":"s7u4rt99"},"content":"     * @param tasks ArrayList for the ToDo Object to be added to.","lastModifiedDate":"2021-09-06"},{"lineNumber":132,"author":{"gitId":"s7u4rt99"},"content":"     * @param splitTask Details of the ToDo Object stored in an array.","lastModifiedDate":"2021-09-06"},{"lineNumber":133,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":134,"author":{"gitId":"s7u4rt99"},"content":"    private void initialiseToDo(ArrayList\u003cTask\u003e tasks, String[] splitTask) {","lastModifiedDate":"2021-09-06"},{"lineNumber":135,"author":{"gitId":"s7u4rt99"},"content":"        Task toAdd \u003d new ToDo(splitTask[2]);","lastModifiedDate":"2021-09-06"},{"lineNumber":136,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":137,"author":{"gitId":"s7u4rt99"},"content":"        if (splitTask[1].equals(\"1\")) {","lastModifiedDate":"2021-09-06"},{"lineNumber":138,"author":{"gitId":"s7u4rt99"},"content":"            toAdd.markAsDone();","lastModifiedDate":"2021-09-06"},{"lineNumber":139,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":140,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":141,"author":{"gitId":"s7u4rt99"},"content":"        tasks.add(toAdd);","lastModifiedDate":"2021-09-06"},{"lineNumber":142,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":143,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":144,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":145,"author":{"gitId":"s7u4rt99"},"content":"     * Saves the taskList given by Duke into user\u0027s computer.","lastModifiedDate":"2021-08-26"},{"lineNumber":146,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":147,"author":{"gitId":"s7u4rt99"},"content":"     * @param taskList taskList which is being saved into user\u0027s computer.","lastModifiedDate":"2021-09-06"},{"lineNumber":148,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":149,"author":{"gitId":"s7u4rt99"},"content":"    public void saveTaskList(TaskList taskList) {","lastModifiedDate":"2021-09-16"},{"lineNumber":150,"author":{"gitId":"s7u4rt99"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":151,"author":{"gitId":"s7u4rt99"},"content":"            FileWriter fw \u003d new FileWriter(TASKLIST_FILE_PATH);","lastModifiedDate":"2021-09-07"},{"lineNumber":152,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":153,"author":{"gitId":"s7u4rt99"},"content":"            String textToAdd \u003d convertTaskListToSaveForm(taskList);","lastModifiedDate":"2021-09-06"},{"lineNumber":154,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":155,"author":{"gitId":"s7u4rt99"},"content":"            fw.write(textToAdd);","lastModifiedDate":"2021-08-25"},{"lineNumber":156,"author":{"gitId":"s7u4rt99"},"content":"            fw.close();","lastModifiedDate":"2021-08-25"},{"lineNumber":157,"author":{"gitId":"s7u4rt99"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":158,"author":{"gitId":"s7u4rt99"},"content":"            File file \u003d new File(DIR_PATH);","lastModifiedDate":"2021-09-06"},{"lineNumber":159,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":160,"author":{"gitId":"s7u4rt99"},"content":"            if (file.mkdir()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":161,"author":{"gitId":"s7u4rt99"},"content":"                saveTaskList(taskList);","lastModifiedDate":"2021-09-16"},{"lineNumber":162,"author":{"gitId":"s7u4rt99"},"content":"            } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":163,"author":{"gitId":"s7u4rt99"},"content":"                System.out.println(\"Failed to create file\");","lastModifiedDate":"2021-08-25"},{"lineNumber":164,"author":{"gitId":"s7u4rt99"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":165,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":166,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":167,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":168,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":169,"author":{"gitId":"s7u4rt99"},"content":"     * Saves the archiveList given by Duke into user\u0027s computer.","lastModifiedDate":"2021-09-07"},{"lineNumber":170,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":171,"author":{"gitId":"s7u4rt99"},"content":"     * @param archiveList ArchiveList to be saved into user\u0027s computer.","lastModifiedDate":"2021-09-07"},{"lineNumber":172,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":173,"author":{"gitId":"s7u4rt99"},"content":"    public void saveArchive(ArchiveList archiveList) {","lastModifiedDate":"2021-09-07"},{"lineNumber":174,"author":{"gitId":"s7u4rt99"},"content":"        try {","lastModifiedDate":"2021-09-07"},{"lineNumber":175,"author":{"gitId":"s7u4rt99"},"content":"            FileWriter fw \u003d new FileWriter(ARCHIVELIST_FILE_PATH);","lastModifiedDate":"2021-09-07"},{"lineNumber":176,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":177,"author":{"gitId":"s7u4rt99"},"content":"            String textToAdd \u003d convertTaskListToSaveForm(archiveList);","lastModifiedDate":"2021-09-07"},{"lineNumber":178,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":179,"author":{"gitId":"s7u4rt99"},"content":"            fw.write(textToAdd);","lastModifiedDate":"2021-09-07"},{"lineNumber":180,"author":{"gitId":"s7u4rt99"},"content":"            fw.close();","lastModifiedDate":"2021-09-07"},{"lineNumber":181,"author":{"gitId":"s7u4rt99"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-07"},{"lineNumber":182,"author":{"gitId":"s7u4rt99"},"content":"            File file \u003d new File(DIR_PATH);","lastModifiedDate":"2021-09-07"},{"lineNumber":183,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":184,"author":{"gitId":"s7u4rt99"},"content":"            if (file.mkdir()) {","lastModifiedDate":"2021-09-07"},{"lineNumber":185,"author":{"gitId":"s7u4rt99"},"content":"                saveArchive(archiveList);","lastModifiedDate":"2021-09-07"},{"lineNumber":186,"author":{"gitId":"s7u4rt99"},"content":"            } else {","lastModifiedDate":"2021-09-07"},{"lineNumber":187,"author":{"gitId":"s7u4rt99"},"content":"                System.out.println(\"Failed to create file\");","lastModifiedDate":"2021-09-07"},{"lineNumber":188,"author":{"gitId":"s7u4rt99"},"content":"            }","lastModifiedDate":"2021-09-07"},{"lineNumber":189,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":190,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":191,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":192,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":193,"author":{"gitId":"s7u4rt99"},"content":"     * Converts dukeList into a text form which can be saved.","lastModifiedDate":"2021-09-07"},{"lineNumber":194,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":195,"author":{"gitId":"s7u4rt99"},"content":"     * @param dukeList dukeList to be saved.","lastModifiedDate":"2021-09-07"},{"lineNumber":196,"author":{"gitId":"s7u4rt99"},"content":"     * @return Text form of dukeList to be saved.","lastModifiedDate":"2021-09-07"},{"lineNumber":197,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":198,"author":{"gitId":"s7u4rt99"},"content":"    private String convertTaskListToSaveForm(DukeList dukeList) {","lastModifiedDate":"2021-09-07"},{"lineNumber":199,"author":{"gitId":"s7u4rt99"},"content":"        String textToAdd \u003d \"\";","lastModifiedDate":"2021-09-06"},{"lineNumber":200,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":201,"author":{"gitId":"s7u4rt99"},"content":"        for (int i \u003d 0; i \u003c dukeList.getSize(); i++) {","lastModifiedDate":"2021-09-07"},{"lineNumber":202,"author":{"gitId":"s7u4rt99"},"content":"            if (i \u003d\u003d 0) {","lastModifiedDate":"2021-09-06"},{"lineNumber":203,"author":{"gitId":"s7u4rt99"},"content":"                textToAdd +\u003d dukeList.taskSaveToString(i);","lastModifiedDate":"2021-09-07"},{"lineNumber":204,"author":{"gitId":"s7u4rt99"},"content":"            } else {","lastModifiedDate":"2021-09-06"},{"lineNumber":205,"author":{"gitId":"s7u4rt99"},"content":"                textToAdd +\u003d \"\\n\" + dukeList.taskSaveToString(i);","lastModifiedDate":"2021-09-07"},{"lineNumber":206,"author":{"gitId":"s7u4rt99"},"content":"            }","lastModifiedDate":"2021-09-06"},{"lineNumber":207,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-06"},{"lineNumber":208,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":209,"author":{"gitId":"s7u4rt99"},"content":"        return textToAdd;","lastModifiedDate":"2021-09-06"},{"lineNumber":210,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":211,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"s7u4rt99":211}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":" * Represents the list of Tasks for Duke.","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"public class TaskList extends DukeList {","lastModifiedDate":"2021-09-07"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"     * Constructor for TaskList.","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"    public TaskList() {","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"        super();","lastModifiedDate":"2021-09-07"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"s7u4rt99"},"content":"     * Constructor for TaskList.","lastModifiedDate":"2021-09-07"},{"lineNumber":20,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"s7u4rt99"},"content":"     * @param list List to be assigned to taskArrayList in DukeList.","lastModifiedDate":"2021-09-07"},{"lineNumber":22,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"s7u4rt99"},"content":"    public TaskList(ArrayList\u003cTask\u003e list) {","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"s7u4rt99"},"content":"        super(list);","lastModifiedDate":"2021-09-07"},{"lineNumber":25,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"s7u4rt99"},"content":"     * Getter for taskArrayList.","lastModifiedDate":"2021-09-07"},{"lineNumber":29,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"s7u4rt99"},"content":"     * @return tasks.","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"s7u4rt99"},"content":"    public ArrayList\u003cTask\u003e getTasks() {","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"s7u4rt99"},"content":"        return super.getTaskArrayList();","lastModifiedDate":"2021-09-07"},{"lineNumber":34,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"s7u4rt99"},"content":"     * Marks Task at given index in taskArrayList as done.","lastModifiedDate":"2021-09-07"},{"lineNumber":38,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"s7u4rt99"},"content":"     * @param index Index of Task to mark as done.","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"s7u4rt99"},"content":"    public void markAsDone(int index) {","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"s7u4rt99"},"content":"        super.get(index).markAsDone();","lastModifiedDate":"2021-09-07"},{"lineNumber":43,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":46,"author":{"gitId":"s7u4rt99"},"content":"     * Marks all the Tasks in taskArrayList as done.","lastModifiedDate":"2021-09-07"},{"lineNumber":47,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":48,"author":{"gitId":"s7u4rt99"},"content":"    public void markAllAsDone() {","lastModifiedDate":"2021-09-07"},{"lineNumber":49,"author":{"gitId":"s7u4rt99"},"content":"        for (int i \u003d 0; i \u003c this.getSize(); i++) {","lastModifiedDate":"2021-09-07"},{"lineNumber":50,"author":{"gitId":"s7u4rt99"},"content":"            markAsDone(i);","lastModifiedDate":"2021-09-07"},{"lineNumber":51,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":52,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":53,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":54,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"s7u4rt99"},"content":"     * Finds tasks with given keyword in taskArrayList.","lastModifiedDate":"2021-09-07"},{"lineNumber":56,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":57,"author":{"gitId":"s7u4rt99"},"content":"     * @param keyword Keyword of tasks we want to find.","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"s7u4rt99"},"content":"     * @return TaskList of Tasks with given keyword.","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"s7u4rt99"},"content":"    public TaskList findTasksWithKeyword(String keyword) {","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"s7u4rt99"},"content":"        ArrayList\u003cTask\u003e tasksWithKeyword \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":63,"author":{"gitId":"s7u4rt99"},"content":"        for (int i \u003d 0; i \u003c super.getSize(); i++) {","lastModifiedDate":"2021-09-07"},{"lineNumber":64,"author":{"gitId":"s7u4rt99"},"content":"            if (super.get(i).hasKeyword(keyword)) {","lastModifiedDate":"2021-09-07"},{"lineNumber":65,"author":{"gitId":"s7u4rt99"},"content":"                tasksWithKeyword.add(super.get(i));","lastModifiedDate":"2021-09-07"},{"lineNumber":66,"author":{"gitId":"s7u4rt99"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":67,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":68,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":69,"author":{"gitId":"s7u4rt99"},"content":"        return new TaskList(tasksWithKeyword);","lastModifiedDate":"2021-08-26"},{"lineNumber":70,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":71,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":72,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":73,"author":{"gitId":"s7u4rt99"},"content":"     * Archives Task at given index of taskArrayList.","lastModifiedDate":"2021-09-07"},{"lineNumber":74,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":75,"author":{"gitId":"s7u4rt99"},"content":"     * @param index Index of Task to be archived.","lastModifiedDate":"2021-09-07"},{"lineNumber":76,"author":{"gitId":"s7u4rt99"},"content":"     * @param archiveList ArchiveList to add the Task to.","lastModifiedDate":"2021-09-07"},{"lineNumber":77,"author":{"gitId":"s7u4rt99"},"content":"     * @return Task which was archived.","lastModifiedDate":"2021-09-07"},{"lineNumber":78,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":79,"author":{"gitId":"s7u4rt99"},"content":"    public Task archive(int index, ArchiveList archiveList) {","lastModifiedDate":"2021-09-07"},{"lineNumber":80,"author":{"gitId":"s7u4rt99"},"content":"        Task toArchive \u003d this.remove(index);","lastModifiedDate":"2021-09-07"},{"lineNumber":81,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":82,"author":{"gitId":"s7u4rt99"},"content":"        archiveList.add(toArchive);","lastModifiedDate":"2021-09-07"},{"lineNumber":83,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":84,"author":{"gitId":"s7u4rt99"},"content":"        return toArchive;","lastModifiedDate":"2021-09-07"},{"lineNumber":85,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":86,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":87,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":88,"author":{"gitId":"s7u4rt99"},"content":"     * Gets the type of list.","lastModifiedDate":"2021-09-07"},{"lineNumber":89,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":90,"author":{"gitId":"s7u4rt99"},"content":"     * @return \"list\".","lastModifiedDate":"2021-09-07"},{"lineNumber":91,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":92,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":93,"author":{"gitId":"s7u4rt99"},"content":"    public String type() {","lastModifiedDate":"2021-09-07"},{"lineNumber":94,"author":{"gitId":"s7u4rt99"},"content":"        return \"list\";","lastModifiedDate":"2021-09-07"},{"lineNumber":95,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":96,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"s7u4rt99":96}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":" * Represents the Ui of Duke.","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"public class Ui {","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"    public static final String LINE \u003d \"____________________________________________________________\";","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"    private final Scanner sc;","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"     * Constructor of Ui.","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"s7u4rt99"},"content":"    public Ui() {","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"s7u4rt99"},"content":"        this.sc \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"s7u4rt99"},"content":"     * Prints message in same style as other outputs of Duke.","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"s7u4rt99"},"content":"     * @param message Message to be printed in the same style as other","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"s7u4rt99"},"content":"     *                outputs of Duke.","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"s7u4rt99"},"content":"    public void print(String message) {","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"s7u4rt99"},"content":"        System.out.println(LINE);","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"s7u4rt99"},"content":"        System.out.println(message);","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"s7u4rt99"},"content":"        System.out.println(LINE);","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"s7u4rt99"},"content":"     * Prints out TaskList in a form of a list for users to see.","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"s7u4rt99"},"content":"     * @param dukeList DukeList to be printed.","lastModifiedDate":"2021-09-07"},{"lineNumber":37,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"s7u4rt99"},"content":"    public void print(DukeList dukeList) {","lastModifiedDate":"2021-09-07"},{"lineNumber":39,"author":{"gitId":"s7u4rt99"},"content":"        System.out.println(LINE);","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"s7u4rt99"},"content":"        System.out.println(\"Here are the tasks in your \" + dukeList.type() + \":\");","lastModifiedDate":"2021-09-07"},{"lineNumber":41,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"s7u4rt99"},"content":"        for (int i \u003d 0; i \u003c dukeList.getSize(); i++) {","lastModifiedDate":"2021-09-07"},{"lineNumber":43,"author":{"gitId":"s7u4rt99"},"content":"            System.out.println((i + 1) + \".\" + dukeList.taskToString(i));","lastModifiedDate":"2021-09-07"},{"lineNumber":44,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"s7u4rt99"},"content":"        System.out.println(LINE);","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":50,"author":{"gitId":"s7u4rt99"},"content":"     * Gets String representation of what is printed out when print is called.","lastModifiedDate":"2021-09-06"},{"lineNumber":51,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":52,"author":{"gitId":"s7u4rt99"},"content":"     * @param dukeList DukeList to be printed.","lastModifiedDate":"2021-09-07"},{"lineNumber":53,"author":{"gitId":"s7u4rt99"},"content":"     * @return String representation of what gets printed out of print method.","lastModifiedDate":"2021-09-06"},{"lineNumber":54,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":55,"author":{"gitId":"s7u4rt99"},"content":"    public String formatPrintString(DukeList dukeList) {","lastModifiedDate":"2021-09-07"},{"lineNumber":56,"author":{"gitId":"s7u4rt99"},"content":"        if (dukeList.getSize() \u003d\u003d 0) {","lastModifiedDate":"2021-09-14"},{"lineNumber":57,"author":{"gitId":"s7u4rt99"},"content":"            return \"You do not have any tasks in your \" + dukeList.type() + \".\";","lastModifiedDate":"2021-09-14"},{"lineNumber":58,"author":{"gitId":"s7u4rt99"},"content":"        } else {","lastModifiedDate":"2021-09-14"},{"lineNumber":59,"author":{"gitId":"s7u4rt99"},"content":"            String output \u003d \"Here are the tasks in your \" + dukeList.type() + \":\";","lastModifiedDate":"2021-09-07"},{"lineNumber":60,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":61,"author":{"gitId":"s7u4rt99"},"content":"            for (int i \u003d 0; i \u003c dukeList.getSize(); i++) {","lastModifiedDate":"2021-09-07"},{"lineNumber":62,"author":{"gitId":"s7u4rt99"},"content":"                output +\u003d \"\\n\" + (i + 1) + \".\" + dukeList.taskToString(i);","lastModifiedDate":"2021-09-07"},{"lineNumber":63,"author":{"gitId":"s7u4rt99"},"content":"            }","lastModifiedDate":"2021-09-02"},{"lineNumber":64,"author":{"gitId":"s7u4rt99"},"content":"            return output;","lastModifiedDate":"2021-09-02"},{"lineNumber":65,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-02"},{"lineNumber":66,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":67,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":68,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":69,"author":{"gitId":"s7u4rt99"},"content":"     * Prints add message in same style as other outputs of Duke whenever","lastModifiedDate":"2021-08-31"},{"lineNumber":70,"author":{"gitId":"s7u4rt99"},"content":"     * a new Task has been added.","lastModifiedDate":"2021-08-31"},{"lineNumber":71,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":72,"author":{"gitId":"s7u4rt99"},"content":"     * @param toAdd Task to be added.","lastModifiedDate":"2021-08-31"},{"lineNumber":73,"author":{"gitId":"s7u4rt99"},"content":"     * @param size Size of TaskList.","lastModifiedDate":"2021-08-31"},{"lineNumber":74,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":75,"author":{"gitId":"s7u4rt99"},"content":"    public void printAdd(Task toAdd, int size) {","lastModifiedDate":"2021-08-31"},{"lineNumber":76,"author":{"gitId":"s7u4rt99"},"content":"        String message \u003d \"Got it. I\u0027ve added this task:\\n\" + \"  \" + toAdd","lastModifiedDate":"2021-08-31"},{"lineNumber":77,"author":{"gitId":"s7u4rt99"},"content":"                + \"\\nNow you have \" + size + \" tasks in the list.\";","lastModifiedDate":"2021-08-31"},{"lineNumber":78,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":79,"author":{"gitId":"s7u4rt99"},"content":"        print(message);","lastModifiedDate":"2021-08-31"},{"lineNumber":80,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":81,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":82,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":83,"author":{"gitId":"s7u4rt99"},"content":"     * Gets String representation of what is printed when printAdd is called.","lastModifiedDate":"2021-09-06"},{"lineNumber":84,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":85,"author":{"gitId":"s7u4rt99"},"content":"     * @param toAdd Task to be added.","lastModifiedDate":"2021-09-06"},{"lineNumber":86,"author":{"gitId":"s7u4rt99"},"content":"     * @param size Size of TaskList.","lastModifiedDate":"2021-09-06"},{"lineNumber":87,"author":{"gitId":"s7u4rt99"},"content":"     * @return String representation of what is printed from printAdd.","lastModifiedDate":"2021-09-06"},{"lineNumber":88,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":89,"author":{"gitId":"s7u4rt99"},"content":"    public String formatPrintAddString(Task toAdd, int size) {","lastModifiedDate":"2021-09-06"},{"lineNumber":90,"author":{"gitId":"s7u4rt99"},"content":"        return \"Got it. I\u0027ve added this task:\\n\" + \"  \" + toAdd","lastModifiedDate":"2021-09-02"},{"lineNumber":91,"author":{"gitId":"s7u4rt99"},"content":"                + \"\\nNow you have \" + size + \" tasks in the list.\";","lastModifiedDate":"2021-09-02"},{"lineNumber":92,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":93,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":94,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":95,"author":{"gitId":"s7u4rt99"},"content":"     * Builds message in same form as other outputs of Duke.","lastModifiedDate":"2021-08-26"},{"lineNumber":96,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":97,"author":{"gitId":"s7u4rt99"},"content":"     * @param message Message to be built in the same form as other outputs.","lastModifiedDate":"2021-08-26"},{"lineNumber":98,"author":{"gitId":"s7u4rt99"},"content":"     * @return Message which has been built in the same form as other outputs.","lastModifiedDate":"2021-08-26"},{"lineNumber":99,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":100,"author":{"gitId":"s7u4rt99"},"content":"    public String buildMessage(String message) {","lastModifiedDate":"2021-08-25"},{"lineNumber":101,"author":{"gitId":"s7u4rt99"},"content":"        // to build error messages","lastModifiedDate":"2021-08-25"},{"lineNumber":102,"author":{"gitId":"s7u4rt99"},"content":"        return LINE + \"\\n\" + message + \"\\n\" + LINE;","lastModifiedDate":"2021-08-25"},{"lineNumber":103,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":104,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":105,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":106,"author":{"gitId":"s7u4rt99"},"content":"     * Reads next line of user\u0027s input.","lastModifiedDate":"2021-08-26"},{"lineNumber":107,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":108,"author":{"gitId":"s7u4rt99"},"content":"     * @return String representation of user\u0027s input.","lastModifiedDate":"2021-08-26"},{"lineNumber":109,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":110,"author":{"gitId":"s7u4rt99"},"content":"    public String readInput() {","lastModifiedDate":"2021-08-25"},{"lineNumber":111,"author":{"gitId":"s7u4rt99"},"content":"        return sc.nextLine();","lastModifiedDate":"2021-08-25"},{"lineNumber":112,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":113,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":114,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":115,"author":{"gitId":"s7u4rt99"},"content":"     * Welcomes user to Duke.","lastModifiedDate":"2021-08-26"},{"lineNumber":116,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":117,"author":{"gitId":"s7u4rt99"},"content":"    public void welcome() {","lastModifiedDate":"2021-08-25"},{"lineNumber":118,"author":{"gitId":"s7u4rt99"},"content":"        print(\"Hello! I\u0027m duke.Duke\\n\"","lastModifiedDate":"2021-08-25"},{"lineNumber":119,"author":{"gitId":"s7u4rt99"},"content":"                + \" ____        _        \\n\"","lastModifiedDate":"2021-08-25"},{"lineNumber":120,"author":{"gitId":"s7u4rt99"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2021-08-25"},{"lineNumber":121,"author":{"gitId":"s7u4rt99"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2021-08-25"},{"lineNumber":122,"author":{"gitId":"s7u4rt99"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2021-08-25"},{"lineNumber":123,"author":{"gitId":"s7u4rt99"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\"","lastModifiedDate":"2021-08-25"},{"lineNumber":124,"author":{"gitId":"s7u4rt99"},"content":"                + \"What can I do for you?\");","lastModifiedDate":"2021-08-25"},{"lineNumber":125,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":126,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":127,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":128,"author":{"gitId":"s7u4rt99"},"content":"     * Prints out TaskList of tasks with given keyword for users to see.","lastModifiedDate":"2021-08-26"},{"lineNumber":129,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":130,"author":{"gitId":"s7u4rt99"},"content":"     * @param tasksWithKeyword TaskList of tasks with given keyword.","lastModifiedDate":"2021-08-26"},{"lineNumber":131,"author":{"gitId":"s7u4rt99"},"content":"     * @param keyword Keyword which tasks in tasksWithKeyword contains.","lastModifiedDate":"2021-08-26"},{"lineNumber":132,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":133,"author":{"gitId":"s7u4rt99"},"content":"    public void printKeywordTasks(TaskList tasksWithKeyword, String keyword) {","lastModifiedDate":"2021-08-26"},{"lineNumber":134,"author":{"gitId":"s7u4rt99"},"content":"        if (tasksWithKeyword.getSize() \u003e 0) {","lastModifiedDate":"2021-08-26"},{"lineNumber":135,"author":{"gitId":"s7u4rt99"},"content":"            System.out.println(LINE);","lastModifiedDate":"2021-08-26"},{"lineNumber":136,"author":{"gitId":"s7u4rt99"},"content":"            System.out.println(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2021-08-26"},{"lineNumber":137,"author":{"gitId":"s7u4rt99"},"content":"            for (int i \u003d 0; i \u003c tasksWithKeyword.getSize(); i++) {","lastModifiedDate":"2021-08-26"},{"lineNumber":138,"author":{"gitId":"s7u4rt99"},"content":"                System.out.println((i + 1) + \".\" + tasksWithKeyword.taskToString(i));","lastModifiedDate":"2021-08-26"},{"lineNumber":139,"author":{"gitId":"s7u4rt99"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":140,"author":{"gitId":"s7u4rt99"},"content":"            System.out.println(LINE);","lastModifiedDate":"2021-08-26"},{"lineNumber":141,"author":{"gitId":"s7u4rt99"},"content":"        } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":142,"author":{"gitId":"s7u4rt99"},"content":"            print(\"You do not have any tasks with keyword: \" + keyword + \".\");","lastModifiedDate":"2021-08-26"},{"lineNumber":143,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":144,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":145,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":146,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":147,"author":{"gitId":"s7u4rt99"},"content":"     * Gets String representation of what is printed out when printKeywordTasks is called.","lastModifiedDate":"2021-09-06"},{"lineNumber":148,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":149,"author":{"gitId":"s7u4rt99"},"content":"     * @param tasksWithKeyword TaskList of tasks with given keyword.","lastModifiedDate":"2021-09-06"},{"lineNumber":150,"author":{"gitId":"s7u4rt99"},"content":"     * @param keyword Keyword which tasks in tasksWithKeyword contains.","lastModifiedDate":"2021-09-06"},{"lineNumber":151,"author":{"gitId":"s7u4rt99"},"content":"     * @return String representation of what is printed out from printKeywordTasks.","lastModifiedDate":"2021-09-06"},{"lineNumber":152,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":153,"author":{"gitId":"s7u4rt99"},"content":"    public String formatPrintKeywordTasksString(TaskList tasksWithKeyword, String keyword) {","lastModifiedDate":"2021-09-06"},{"lineNumber":154,"author":{"gitId":"s7u4rt99"},"content":"        if (tasksWithKeyword.getSize() \u003e 0) {","lastModifiedDate":"2021-09-02"},{"lineNumber":155,"author":{"gitId":"s7u4rt99"},"content":"            String output \u003d \"Here are the matching tasks in your list:\";","lastModifiedDate":"2021-09-02"},{"lineNumber":156,"author":{"gitId":"s7u4rt99"},"content":"            for (int i \u003d 0; i \u003c tasksWithKeyword.getSize(); i++) {","lastModifiedDate":"2021-09-02"},{"lineNumber":157,"author":{"gitId":"s7u4rt99"},"content":"                output +\u003d \"\\n\" + (i + 1) + \".\" + tasksWithKeyword.taskToString(i);","lastModifiedDate":"2021-09-02"},{"lineNumber":158,"author":{"gitId":"s7u4rt99"},"content":"            }","lastModifiedDate":"2021-09-02"},{"lineNumber":159,"author":{"gitId":"s7u4rt99"},"content":"            return output;","lastModifiedDate":"2021-09-02"},{"lineNumber":160,"author":{"gitId":"s7u4rt99"},"content":"        } else {","lastModifiedDate":"2021-09-02"},{"lineNumber":161,"author":{"gitId":"s7u4rt99"},"content":"            return \"You do not have any tasks with keyword: \" + keyword + \".\";","lastModifiedDate":"2021-09-02"},{"lineNumber":162,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-02"},{"lineNumber":163,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":164,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":165,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":166,"author":{"gitId":"s7u4rt99"},"content":"     * Says bye to user and closes scanner.","lastModifiedDate":"2021-08-26"},{"lineNumber":167,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":168,"author":{"gitId":"s7u4rt99"},"content":"    public void exit() {","lastModifiedDate":"2021-08-25"},{"lineNumber":169,"author":{"gitId":"s7u4rt99"},"content":"        print(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2021-08-25"},{"lineNumber":170,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":171,"author":{"gitId":"s7u4rt99"},"content":"        sc.close();","lastModifiedDate":"2021-08-25"},{"lineNumber":172,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":173,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":174,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":175,"author":{"gitId":"s7u4rt99"},"content":"     * Gets String representation of what gets printed out when exit is called.","lastModifiedDate":"2021-09-06"},{"lineNumber":176,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":177,"author":{"gitId":"s7u4rt99"},"content":"     * @return String representation of what gets printed out when exit is called.","lastModifiedDate":"2021-09-06"},{"lineNumber":178,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":179,"author":{"gitId":"s7u4rt99"},"content":"    public String formatExitString() {","lastModifiedDate":"2021-09-06"},{"lineNumber":180,"author":{"gitId":"s7u4rt99"},"content":"        return \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2021-09-02"},{"lineNumber":181,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":182,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":183,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"s7u4rt99":183}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke.command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"import duke.ArchiveList;","lastModifiedDate":"2021-09-07"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":"import duke.Parser;","lastModifiedDate":"2021-09-14"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-14"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-14"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-09-14"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-09-14"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":" * Representation for the add command of Duke.","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"s7u4rt99"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"s7u4rt99"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":20,"author":{"gitId":"s7u4rt99"},"content":"    private final Task toAdd;","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"s7u4rt99"},"content":"     * Constructor for AddCommand.","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"s7u4rt99"},"content":"     * @param toAdd Task to add to taskList.","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"s7u4rt99"},"content":"    public AddCommand(Task toAdd) {","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"s7u4rt99"},"content":"        this.toAdd \u003d toAdd;","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"s7u4rt99"},"content":"     * Checks if AddCommand is an exit command.","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"s7u4rt99"},"content":"     * @return false.","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"s7u4rt99"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"s7u4rt99"},"content":"        return false;","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"s7u4rt99"},"content":"     * Executes the AddCommand.","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"s7u4rt99"},"content":"     * @param taskList TaskList object to add toAdd to.","lastModifiedDate":"2021-09-06"},{"lineNumber":45,"author":{"gitId":"s7u4rt99"},"content":"     * @param archiveList ArchiveList to store archived tasks.","lastModifiedDate":"2021-09-07"},{"lineNumber":46,"author":{"gitId":"s7u4rt99"},"content":"     * @param ui Ui Object to print to user.","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"s7u4rt99"},"content":"     * @param storage Storage object which saves and loads the taskList.","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"s7u4rt99"},"content":"    public void execute(TaskList taskList, ArchiveList archiveList, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-07"},{"lineNumber":51,"author":{"gitId":"s7u4rt99"},"content":"        taskList.add(this.toAdd);","lastModifiedDate":"2021-09-06"},{"lineNumber":52,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":53,"author":{"gitId":"s7u4rt99"},"content":"        storage.saveTaskList(taskList);","lastModifiedDate":"2021-09-16"},{"lineNumber":54,"author":{"gitId":"s7u4rt99"},"content":"        storage.saveArchive(archiveList);","lastModifiedDate":"2021-09-16"},{"lineNumber":55,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":56,"author":{"gitId":"s7u4rt99"},"content":"        ui.printAdd(this.toAdd, taskList.getSize());","lastModifiedDate":"2021-09-06"},{"lineNumber":57,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":59,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":60,"author":{"gitId":"s7u4rt99"},"content":"     * Gets the String representation of the things printed in the","lastModifiedDate":"2021-09-06"},{"lineNumber":61,"author":{"gitId":"s7u4rt99"},"content":"     * execute method as well as execute the adding of the task.","lastModifiedDate":"2021-09-06"},{"lineNumber":62,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":63,"author":{"gitId":"s7u4rt99"},"content":"     * @param taskList TaskList object to add toAdd to.","lastModifiedDate":"2021-09-06"},{"lineNumber":64,"author":{"gitId":"s7u4rt99"},"content":"     * @param archiveList ArchiveList to store archived tasks.","lastModifiedDate":"2021-09-07"},{"lineNumber":65,"author":{"gitId":"s7u4rt99"},"content":"     * @param ui Ui Object to get the String representation from.","lastModifiedDate":"2021-09-06"},{"lineNumber":66,"author":{"gitId":"s7u4rt99"},"content":"     * @param storage Storage object which saves and loads the taskList.","lastModifiedDate":"2021-09-06"},{"lineNumber":67,"author":{"gitId":"s7u4rt99"},"content":"     * @return String representation of the things printed in the execute method.","lastModifiedDate":"2021-09-06"},{"lineNumber":68,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":69,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-09-02"},{"lineNumber":70,"author":{"gitId":"s7u4rt99"},"content":"    public String formatExecutedString(TaskList taskList, ArchiveList archiveList, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-07"},{"lineNumber":71,"author":{"gitId":"s7u4rt99"},"content":"        taskList.add(this.toAdd);","lastModifiedDate":"2021-09-06"},{"lineNumber":72,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":73,"author":{"gitId":"s7u4rt99"},"content":"        storage.saveTaskList(taskList);","lastModifiedDate":"2021-09-16"},{"lineNumber":74,"author":{"gitId":"s7u4rt99"},"content":"        storage.saveArchive(archiveList);","lastModifiedDate":"2021-09-16"},{"lineNumber":75,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":76,"author":{"gitId":"s7u4rt99"},"content":"        return ui.formatPrintAddString(this.toAdd, taskList.getSize());","lastModifiedDate":"2021-09-06"},{"lineNumber":77,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":78,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":79,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-14"},{"lineNumber":80,"author":{"gitId":"s7u4rt99"},"content":"     * Gets the deadline from an array of words.","lastModifiedDate":"2021-09-14"},{"lineNumber":81,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-14"},{"lineNumber":82,"author":{"gitId":"s7u4rt99"},"content":"     * @param words Array which deadline will be derived from.","lastModifiedDate":"2021-09-14"},{"lineNumber":83,"author":{"gitId":"s7u4rt99"},"content":"     * @return The deadline.","lastModifiedDate":"2021-09-14"},{"lineNumber":84,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-14"},{"lineNumber":85,"author":{"gitId":"s7u4rt99"},"content":"    public static String getDeadline(String[] words) {","lastModifiedDate":"2021-09-14"},{"lineNumber":86,"author":{"gitId":"s7u4rt99"},"content":"        String deadline \u003d \"\";","lastModifiedDate":"2021-09-14"},{"lineNumber":87,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":88,"author":{"gitId":"s7u4rt99"},"content":"        for (int i \u003d 0; i \u003c words.length; i++) {","lastModifiedDate":"2021-09-14"},{"lineNumber":89,"author":{"gitId":"s7u4rt99"},"content":"            if (Parser.isValidDate(words[i], DateTimeFormatter.ISO_LOCAL_DATE)) {","lastModifiedDate":"2021-09-14"},{"lineNumber":90,"author":{"gitId":"s7u4rt99"},"content":"                deadline +\u003d LocalDate.parse(words[i], DateTimeFormatter.ISO_LOCAL_DATE)","lastModifiedDate":"2021-09-14"},{"lineNumber":91,"author":{"gitId":"s7u4rt99"},"content":"                        .format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2021-09-14"},{"lineNumber":92,"author":{"gitId":"s7u4rt99"},"content":"            } else if (Parser.isValidTime(words[i], DateTimeFormatter.ISO_LOCAL_TIME)) {","lastModifiedDate":"2021-09-14"},{"lineNumber":93,"author":{"gitId":"s7u4rt99"},"content":"                deadline +\u003d LocalTime.parse(words[i], DateTimeFormatter.ISO_LOCAL_TIME)","lastModifiedDate":"2021-09-14"},{"lineNumber":94,"author":{"gitId":"s7u4rt99"},"content":"                        .format(DateTimeFormatter.ofPattern(\"hh:mm a\"));","lastModifiedDate":"2021-09-14"},{"lineNumber":95,"author":{"gitId":"s7u4rt99"},"content":"            } else {","lastModifiedDate":"2021-09-14"},{"lineNumber":96,"author":{"gitId":"s7u4rt99"},"content":"                deadline +\u003d words[i];","lastModifiedDate":"2021-09-14"},{"lineNumber":97,"author":{"gitId":"s7u4rt99"},"content":"            }","lastModifiedDate":"2021-09-14"},{"lineNumber":98,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":99,"author":{"gitId":"s7u4rt99"},"content":"            if (!(i \u003d\u003d 0 \u0026\u0026 words[i].equals(\"\")) \u0026\u0026 i !\u003d words.length - 1) {","lastModifiedDate":"2021-09-14"},{"lineNumber":100,"author":{"gitId":"s7u4rt99"},"content":"                deadline +\u003d SPACE;","lastModifiedDate":"2021-09-14"},{"lineNumber":101,"author":{"gitId":"s7u4rt99"},"content":"            }","lastModifiedDate":"2021-09-14"},{"lineNumber":102,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-14"},{"lineNumber":103,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":104,"author":{"gitId":"s7u4rt99"},"content":"        if (deadline.equals(\"\")) {","lastModifiedDate":"2021-09-14"},{"lineNumber":105,"author":{"gitId":"s7u4rt99"},"content":"            deadline +\u003d \" \";","lastModifiedDate":"2021-09-14"},{"lineNumber":106,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-14"},{"lineNumber":107,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":108,"author":{"gitId":"s7u4rt99"},"content":"        return deadline;","lastModifiedDate":"2021-09-14"},{"lineNumber":109,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":110,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":111,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-14"},{"lineNumber":112,"author":{"gitId":"s7u4rt99"},"content":"     * Gets the description from an array of strings.","lastModifiedDate":"2021-09-14"},{"lineNumber":113,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-14"},{"lineNumber":114,"author":{"gitId":"s7u4rt99"},"content":"     * @param words Array which description would be derived from.","lastModifiedDate":"2021-09-14"},{"lineNumber":115,"author":{"gitId":"s7u4rt99"},"content":"     * @return The description.","lastModifiedDate":"2021-09-14"},{"lineNumber":116,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-14"},{"lineNumber":117,"author":{"gitId":"s7u4rt99"},"content":"    public static String getDescription(String[] words) {","lastModifiedDate":"2021-09-14"},{"lineNumber":118,"author":{"gitId":"s7u4rt99"},"content":"        String description \u003d \"\";","lastModifiedDate":"2021-09-14"},{"lineNumber":119,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":120,"author":{"gitId":"s7u4rt99"},"content":"        for (int i \u003d 1; i \u003c words.length; i++) {","lastModifiedDate":"2021-09-14"},{"lineNumber":121,"author":{"gitId":"s7u4rt99"},"content":"            description +\u003d words[i];","lastModifiedDate":"2021-09-14"},{"lineNumber":122,"author":{"gitId":"s7u4rt99"},"content":"            if (i !\u003d words.length - 1) {","lastModifiedDate":"2021-09-14"},{"lineNumber":123,"author":{"gitId":"s7u4rt99"},"content":"                description +\u003d SPACE;","lastModifiedDate":"2021-09-14"},{"lineNumber":124,"author":{"gitId":"s7u4rt99"},"content":"            }","lastModifiedDate":"2021-09-14"},{"lineNumber":125,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-14"},{"lineNumber":126,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":127,"author":{"gitId":"s7u4rt99"},"content":"        return description;","lastModifiedDate":"2021-09-14"},{"lineNumber":128,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":129,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"s7u4rt99":129}},{"path":"src/main/java/duke/command/AddDeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke.command;","lastModifiedDate":"2021-09-14"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"import duke.exception.IncompleteDeadlineException;","lastModifiedDate":"2021-09-14"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-09-14"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-14"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"/**","lastModifiedDate":"2021-09-14"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":" * Representation for the add deadline command of Duke.","lastModifiedDate":"2021-09-14"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":" */","lastModifiedDate":"2021-09-14"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"public class AddDeadlineCommand extends AddCommand {","lastModifiedDate":"2021-09-14"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"    private static final String DELIMITER \u003d \"/by\";","lastModifiedDate":"2021-09-14"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-14"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":"     * Constructor for AddDeadlineCommand.","lastModifiedDate":"2021-09-14"},{"lineNumber":17,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-14"},{"lineNumber":18,"author":{"gitId":"s7u4rt99"},"content":"     * @param toAdd Task to add to taskList.","lastModifiedDate":"2021-09-14"},{"lineNumber":19,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-14"},{"lineNumber":20,"author":{"gitId":"s7u4rt99"},"content":"    public AddDeadlineCommand(Task toAdd) {","lastModifiedDate":"2021-09-14"},{"lineNumber":21,"author":{"gitId":"s7u4rt99"},"content":"        super(toAdd);","lastModifiedDate":"2021-09-14"},{"lineNumber":22,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":23,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":24,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-14"},{"lineNumber":25,"author":{"gitId":"s7u4rt99"},"content":"     * Factory method which generates the AddDeadlineCommand from the userInput.","lastModifiedDate":"2021-09-14"},{"lineNumber":26,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-14"},{"lineNumber":27,"author":{"gitId":"s7u4rt99"},"content":"     * @param userInput User Input which is used to generate the AddDeadlineCommand.","lastModifiedDate":"2021-09-14"},{"lineNumber":28,"author":{"gitId":"s7u4rt99"},"content":"     * @return AddDeadLineCommand to be executed.","lastModifiedDate":"2021-09-14"},{"lineNumber":29,"author":{"gitId":"s7u4rt99"},"content":"     * @throws IncompleteDeadlineException if insufficient values are passed in.","lastModifiedDate":"2021-09-14"},{"lineNumber":30,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-14"},{"lineNumber":31,"author":{"gitId":"s7u4rt99"},"content":"    public static AddDeadlineCommand generateCommand(String userInput) throws IncompleteDeadlineException {","lastModifiedDate":"2021-09-16"},{"lineNumber":32,"author":{"gitId":"s7u4rt99"},"content":"        String[] str \u003d splitDeadlineInput(userInput);","lastModifiedDate":"2021-09-14"},{"lineNumber":33,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":34,"author":{"gitId":"s7u4rt99"},"content":"        assert str.length \u003d\u003d 2;","lastModifiedDate":"2021-09-14"},{"lineNumber":35,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":36,"author":{"gitId":"s7u4rt99"},"content":"        Deadline add \u003d new Deadline(str[0], str[1]);","lastModifiedDate":"2021-09-14"},{"lineNumber":37,"author":{"gitId":"s7u4rt99"},"content":"        return new AddDeadlineCommand(add);","lastModifiedDate":"2021-09-14"},{"lineNumber":38,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":39,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":40,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-14"},{"lineNumber":41,"author":{"gitId":"s7u4rt99"},"content":"     * Splits string which contains a description and a deadline for Deadline Objects.","lastModifiedDate":"2021-09-14"},{"lineNumber":42,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-14"},{"lineNumber":43,"author":{"gitId":"s7u4rt99"},"content":"     * @param userInput Input which contains a description and a deadline.","lastModifiedDate":"2021-09-14"},{"lineNumber":44,"author":{"gitId":"s7u4rt99"},"content":"     * @return String[] containing the description at index 0 and the deadline at index 1.","lastModifiedDate":"2021-09-14"},{"lineNumber":45,"author":{"gitId":"s7u4rt99"},"content":"     * @throws IncompleteDeadlineException If no deadline, description, or insufficient fields given.","lastModifiedDate":"2021-09-14"},{"lineNumber":46,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-14"},{"lineNumber":47,"author":{"gitId":"s7u4rt99"},"content":"    public static String[] splitDeadlineInput(String userInput) throws IncompleteDeadlineException {","lastModifiedDate":"2021-09-14"},{"lineNumber":48,"author":{"gitId":"s7u4rt99"},"content":"        String[] str \u003d userInput.split(DELIMITER);","lastModifiedDate":"2021-09-14"},{"lineNumber":49,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":50,"author":{"gitId":"s7u4rt99"},"content":"        if (str.length \u003d\u003d 1) {","lastModifiedDate":"2021-09-14"},{"lineNumber":51,"author":{"gitId":"s7u4rt99"},"content":"            throw new IncompleteDeadlineException();","lastModifiedDate":"2021-09-14"},{"lineNumber":52,"author":{"gitId":"s7u4rt99"},"content":"        } else {","lastModifiedDate":"2021-09-14"},{"lineNumber":53,"author":{"gitId":"s7u4rt99"},"content":"            String[] first \u003d str[0].split(SPACE);","lastModifiedDate":"2021-09-14"},{"lineNumber":54,"author":{"gitId":"s7u4rt99"},"content":"            String[] second \u003d str[1].split(SPACE);","lastModifiedDate":"2021-09-14"},{"lineNumber":55,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":56,"author":{"gitId":"s7u4rt99"},"content":"            String description \u003d getDescription(first);","lastModifiedDate":"2021-09-14"},{"lineNumber":57,"author":{"gitId":"s7u4rt99"},"content":"            String deadline \u003d getDeadline(second);","lastModifiedDate":"2021-09-14"},{"lineNumber":58,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":59,"author":{"gitId":"s7u4rt99"},"content":"            return new String[]{description, deadline};","lastModifiedDate":"2021-09-14"},{"lineNumber":60,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-14"},{"lineNumber":61,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":62,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-09-14"}],"authorContributionMap":{"s7u4rt99":62}},{"path":"src/main/java/duke/command/AddEventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke.command;","lastModifiedDate":"2021-09-14"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"import duke.exception.IncompleteEventException;","lastModifiedDate":"2021-09-14"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":"import duke.task.Event;","lastModifiedDate":"2021-09-14"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-14"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"/**","lastModifiedDate":"2021-09-14"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":" * Representation for the add event command of Duke.","lastModifiedDate":"2021-09-14"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":" */","lastModifiedDate":"2021-09-14"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"public class AddEventCommand extends AddCommand {","lastModifiedDate":"2021-09-14"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"    private static final String DELIMITER \u003d \"/at\";","lastModifiedDate":"2021-09-14"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-14"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"     * Constructor for AddEventCommand.","lastModifiedDate":"2021-09-16"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-14"},{"lineNumber":17,"author":{"gitId":"s7u4rt99"},"content":"     * @param toAdd Task to add to taskList.","lastModifiedDate":"2021-09-14"},{"lineNumber":18,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-14"},{"lineNumber":19,"author":{"gitId":"s7u4rt99"},"content":"    public AddEventCommand(Task toAdd) {","lastModifiedDate":"2021-09-14"},{"lineNumber":20,"author":{"gitId":"s7u4rt99"},"content":"        super(toAdd);","lastModifiedDate":"2021-09-14"},{"lineNumber":21,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":22,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":23,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-14"},{"lineNumber":24,"author":{"gitId":"s7u4rt99"},"content":"     * Factory method which generates the AddEventCommand from the userInput.","lastModifiedDate":"2021-09-14"},{"lineNumber":25,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-14"},{"lineNumber":26,"author":{"gitId":"s7u4rt99"},"content":"     * @param userInput User Input which is used to generate the AddEventCommand.","lastModifiedDate":"2021-09-14"},{"lineNumber":27,"author":{"gitId":"s7u4rt99"},"content":"     * @return AddEventCommand to be executed.","lastModifiedDate":"2021-09-14"},{"lineNumber":28,"author":{"gitId":"s7u4rt99"},"content":"     * @throws IncompleteEventException if insufficient values are passed in.","lastModifiedDate":"2021-09-14"},{"lineNumber":29,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-14"},{"lineNumber":30,"author":{"gitId":"s7u4rt99"},"content":"    public static AddEventCommand generateCommand(String userInput) throws IncompleteEventException {","lastModifiedDate":"2021-09-16"},{"lineNumber":31,"author":{"gitId":"s7u4rt99"},"content":"        String[] str \u003d splitEventInput(userInput);","lastModifiedDate":"2021-09-14"},{"lineNumber":32,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":33,"author":{"gitId":"s7u4rt99"},"content":"        assert str.length \u003d\u003d 2;","lastModifiedDate":"2021-09-14"},{"lineNumber":34,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":35,"author":{"gitId":"s7u4rt99"},"content":"        Event add \u003d new Event(str[0], str[1]);","lastModifiedDate":"2021-09-14"},{"lineNumber":36,"author":{"gitId":"s7u4rt99"},"content":"        return new AddEventCommand(add);","lastModifiedDate":"2021-09-14"},{"lineNumber":37,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":38,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":39,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-14"},{"lineNumber":40,"author":{"gitId":"s7u4rt99"},"content":"     * Splits string which contains a description and a deadline for Event Objects.","lastModifiedDate":"2021-09-14"},{"lineNumber":41,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-14"},{"lineNumber":42,"author":{"gitId":"s7u4rt99"},"content":"     * @param userInput Input which contains a description and a deadline.","lastModifiedDate":"2021-09-14"},{"lineNumber":43,"author":{"gitId":"s7u4rt99"},"content":"     * @return String[] containing the description at index 0 and the deadline at index 1.","lastModifiedDate":"2021-09-14"},{"lineNumber":44,"author":{"gitId":"s7u4rt99"},"content":"     * @throws IncompleteEventException If no deadline, description, or insufficient fields given.","lastModifiedDate":"2021-09-14"},{"lineNumber":45,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-14"},{"lineNumber":46,"author":{"gitId":"s7u4rt99"},"content":"    private static String[] splitEventInput(String userInput) throws IncompleteEventException {","lastModifiedDate":"2021-09-14"},{"lineNumber":47,"author":{"gitId":"s7u4rt99"},"content":"        String[] str \u003d userInput.split(DELIMITER);","lastModifiedDate":"2021-09-14"},{"lineNumber":48,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":49,"author":{"gitId":"s7u4rt99"},"content":"        if (str.length \u003d\u003d 1) {","lastModifiedDate":"2021-09-14"},{"lineNumber":50,"author":{"gitId":"s7u4rt99"},"content":"            throw new IncompleteEventException();","lastModifiedDate":"2021-09-14"},{"lineNumber":51,"author":{"gitId":"s7u4rt99"},"content":"        } else {","lastModifiedDate":"2021-09-14"},{"lineNumber":52,"author":{"gitId":"s7u4rt99"},"content":"            String[] first \u003d str[0].split(SPACE);","lastModifiedDate":"2021-09-14"},{"lineNumber":53,"author":{"gitId":"s7u4rt99"},"content":"            String[] second \u003d str[1].split(SPACE);","lastModifiedDate":"2021-09-14"},{"lineNumber":54,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":55,"author":{"gitId":"s7u4rt99"},"content":"            String description \u003d getDescription(first);","lastModifiedDate":"2021-09-14"},{"lineNumber":56,"author":{"gitId":"s7u4rt99"},"content":"            String deadline \u003d getDeadline(second);","lastModifiedDate":"2021-09-14"},{"lineNumber":57,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":58,"author":{"gitId":"s7u4rt99"},"content":"            return new String[]{description, deadline};","lastModifiedDate":"2021-09-14"},{"lineNumber":59,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-14"},{"lineNumber":60,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":61,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":62,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-09-14"}],"authorContributionMap":{"s7u4rt99":62}},{"path":"src/main/java/duke/command/AddToDoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke.command;","lastModifiedDate":"2021-09-14"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"import duke.exception.IncompleteToDoException;","lastModifiedDate":"2021-09-14"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-14"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":"import duke.task.ToDo;","lastModifiedDate":"2021-09-14"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"/**","lastModifiedDate":"2021-09-14"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":" * Representation for the AddToDoCommand of Duke.","lastModifiedDate":"2021-09-14"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":" */","lastModifiedDate":"2021-09-14"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"public class AddToDoCommand extends AddCommand {","lastModifiedDate":"2021-09-14"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-14"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"     * Constructor for AddToDoCommand.","lastModifiedDate":"2021-09-16"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-14"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"     * @param toAdd Task to add to taskList.","lastModifiedDate":"2021-09-14"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-14"},{"lineNumber":17,"author":{"gitId":"s7u4rt99"},"content":"    public AddToDoCommand(Task toAdd) {","lastModifiedDate":"2021-09-14"},{"lineNumber":18,"author":{"gitId":"s7u4rt99"},"content":"        super(toAdd);","lastModifiedDate":"2021-09-14"},{"lineNumber":19,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":20,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":21,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-14"},{"lineNumber":22,"author":{"gitId":"s7u4rt99"},"content":"     * Factory method which generates the AddToDoCommand from the userInput.","lastModifiedDate":"2021-09-14"},{"lineNumber":23,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-14"},{"lineNumber":24,"author":{"gitId":"s7u4rt99"},"content":"     * @param userInput User Input which is used to generate the AddToDoCommand.","lastModifiedDate":"2021-09-14"},{"lineNumber":25,"author":{"gitId":"s7u4rt99"},"content":"     * @return AddToDoCommand to be executed.","lastModifiedDate":"2021-09-14"},{"lineNumber":26,"author":{"gitId":"s7u4rt99"},"content":"     * @throws IncompleteToDoException if insufficient values are passed in.","lastModifiedDate":"2021-09-14"},{"lineNumber":27,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-14"},{"lineNumber":28,"author":{"gitId":"s7u4rt99"},"content":"    public static AddToDoCommand generateCommand(String userInput) throws IncompleteToDoException {","lastModifiedDate":"2021-09-16"},{"lineNumber":29,"author":{"gitId":"s7u4rt99"},"content":"        String[] str \u003d splitToDoInput(userInput);","lastModifiedDate":"2021-09-14"},{"lineNumber":30,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":31,"author":{"gitId":"s7u4rt99"},"content":"        assert str.length \u003d\u003d 1;","lastModifiedDate":"2021-09-14"},{"lineNumber":32,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":33,"author":{"gitId":"s7u4rt99"},"content":"        ToDo add \u003d new ToDo(str[0]);","lastModifiedDate":"2021-09-14"},{"lineNumber":34,"author":{"gitId":"s7u4rt99"},"content":"        return new AddToDoCommand(add);","lastModifiedDate":"2021-09-14"},{"lineNumber":35,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":36,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":37,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-14"},{"lineNumber":38,"author":{"gitId":"s7u4rt99"},"content":"     * Splits string which contains a description for the ToDo object.","lastModifiedDate":"2021-09-14"},{"lineNumber":39,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-14"},{"lineNumber":40,"author":{"gitId":"s7u4rt99"},"content":"     * @param input Input which contains a description of the ToDo Object","lastModifiedDate":"2021-09-14"},{"lineNumber":41,"author":{"gitId":"s7u4rt99"},"content":"     * @return String[] containing the description at index 0.","lastModifiedDate":"2021-09-14"},{"lineNumber":42,"author":{"gitId":"s7u4rt99"},"content":"     * @throws IncompleteToDoException If no description for ToDo objects.","lastModifiedDate":"2021-09-14"},{"lineNumber":43,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-14"},{"lineNumber":44,"author":{"gitId":"s7u4rt99"},"content":"    public static String[] splitToDoInput(String input) throws IncompleteToDoException {","lastModifiedDate":"2021-09-14"},{"lineNumber":45,"author":{"gitId":"s7u4rt99"},"content":"        String[] str \u003d input.split(SPACE);","lastModifiedDate":"2021-09-14"},{"lineNumber":46,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":47,"author":{"gitId":"s7u4rt99"},"content":"        if (str.length \u003d\u003d 1) {","lastModifiedDate":"2021-09-14"},{"lineNumber":48,"author":{"gitId":"s7u4rt99"},"content":"            throw new IncompleteToDoException();","lastModifiedDate":"2021-09-14"},{"lineNumber":49,"author":{"gitId":"s7u4rt99"},"content":"        } else {","lastModifiedDate":"2021-09-14"},{"lineNumber":50,"author":{"gitId":"s7u4rt99"},"content":"            String description \u003d getDescription(str);","lastModifiedDate":"2021-09-14"},{"lineNumber":51,"author":{"gitId":"s7u4rt99"},"content":"            return new String[]{description};","lastModifiedDate":"2021-09-14"},{"lineNumber":52,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-14"},{"lineNumber":53,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":54,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":55,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-09-14"}],"authorContributionMap":{"s7u4rt99":55}},{"path":"src/main/java/duke/command/ArchiveCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke.command;","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"import duke.ArchiveList;","lastModifiedDate":"2021-09-07"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":"import duke.Parser;","lastModifiedDate":"2021-09-14"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":"import duke.Storage;","lastModifiedDate":"2021-09-07"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"import duke.TaskList;","lastModifiedDate":"2021-09-07"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"import duke.Ui;","lastModifiedDate":"2021-09-07"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"import duke.exception.IncompleteArchiveException;","lastModifiedDate":"2021-09-14"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-07"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"/**","lastModifiedDate":"2021-09-08"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":" * Representation for the Archive Command of Duke.","lastModifiedDate":"2021-09-08"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":" */","lastModifiedDate":"2021-09-08"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"public class ArchiveCommand extends Command {","lastModifiedDate":"2021-09-07"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":"    private final int indexToArchive;","lastModifiedDate":"2021-09-07"},{"lineNumber":17,"author":{"gitId":"s7u4rt99"},"content":"    private final boolean isArchiveAll;","lastModifiedDate":"2021-09-07"},{"lineNumber":18,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":19,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":20,"author":{"gitId":"s7u4rt99"},"content":"     * Constructor for ArchiveCommand.","lastModifiedDate":"2021-09-07"},{"lineNumber":21,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":22,"author":{"gitId":"s7u4rt99"},"content":"     * @param indexToArchive index of task to be archived.","lastModifiedDate":"2021-09-07"},{"lineNumber":23,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":24,"author":{"gitId":"s7u4rt99"},"content":"    public ArchiveCommand(int indexToArchive) {","lastModifiedDate":"2021-09-07"},{"lineNumber":25,"author":{"gitId":"s7u4rt99"},"content":"        this.indexToArchive \u003d indexToArchive;","lastModifiedDate":"2021-09-07"},{"lineNumber":26,"author":{"gitId":"s7u4rt99"},"content":"        this.isArchiveAll \u003d indexToArchive \u003d\u003d ALL;","lastModifiedDate":"2021-09-14"},{"lineNumber":27,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":28,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":29,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-14"},{"lineNumber":30,"author":{"gitId":"s7u4rt99"},"content":"     * Factory method which generates the ArchiveCommand from the userInput.","lastModifiedDate":"2021-09-14"},{"lineNumber":31,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-14"},{"lineNumber":32,"author":{"gitId":"s7u4rt99"},"content":"     * @param userInput User Input which is used to generate the ArchiveCommand.","lastModifiedDate":"2021-09-14"},{"lineNumber":33,"author":{"gitId":"s7u4rt99"},"content":"     * @param taskList taskList of duke.","lastModifiedDate":"2021-09-14"},{"lineNumber":34,"author":{"gitId":"s7u4rt99"},"content":"     * @return ArchiveCommand to be executed.","lastModifiedDate":"2021-09-14"},{"lineNumber":35,"author":{"gitId":"s7u4rt99"},"content":"     * @throws IncompleteArchiveException if insufficient values are passed in.","lastModifiedDate":"2021-09-14"},{"lineNumber":36,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-14"},{"lineNumber":37,"author":{"gitId":"s7u4rt99"},"content":"    public static ArchiveCommand generateCommand(","lastModifiedDate":"2021-09-14"},{"lineNumber":38,"author":{"gitId":"s7u4rt99"},"content":"            String userInput, TaskList taskList) throws IncompleteArchiveException {","lastModifiedDate":"2021-09-16"},{"lineNumber":39,"author":{"gitId":"s7u4rt99"},"content":"        String[] separated \u003d userInput.split(\" \");","lastModifiedDate":"2021-09-14"},{"lineNumber":40,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":41,"author":{"gitId":"s7u4rt99"},"content":"        if (separated.length \u003d\u003d 1) {","lastModifiedDate":"2021-09-14"},{"lineNumber":42,"author":{"gitId":"s7u4rt99"},"content":"            throw new IncompleteArchiveException();","lastModifiedDate":"2021-09-14"},{"lineNumber":43,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-14"},{"lineNumber":44,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":45,"author":{"gitId":"s7u4rt99"},"content":"        if (Parser.isPositiveInteger(separated[1]) \u0026\u0026 !Parser.isOutOfRange(taskList, separated[1])) {","lastModifiedDate":"2021-09-14"},{"lineNumber":46,"author":{"gitId":"s7u4rt99"},"content":"            return new ArchiveCommand(Integer.valueOf(separated[1]) - 1);","lastModifiedDate":"2021-09-14"},{"lineNumber":47,"author":{"gitId":"s7u4rt99"},"content":"        } else if (Parser.isAll(separated[1])) {","lastModifiedDate":"2021-09-14"},{"lineNumber":48,"author":{"gitId":"s7u4rt99"},"content":"            return new ArchiveCommand(ALL);","lastModifiedDate":"2021-09-14"},{"lineNumber":49,"author":{"gitId":"s7u4rt99"},"content":"        } else {","lastModifiedDate":"2021-09-14"},{"lineNumber":50,"author":{"gitId":"s7u4rt99"},"content":"            throw new IncompleteArchiveException();","lastModifiedDate":"2021-09-14"},{"lineNumber":51,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-14"},{"lineNumber":52,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":53,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":54,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":55,"author":{"gitId":"s7u4rt99"},"content":"     * Checks if this is an exit command.","lastModifiedDate":"2021-09-07"},{"lineNumber":56,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":57,"author":{"gitId":"s7u4rt99"},"content":"     * @return false.","lastModifiedDate":"2021-09-07"},{"lineNumber":58,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":59,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-09-07"},{"lineNumber":60,"author":{"gitId":"s7u4rt99"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-09-07"},{"lineNumber":61,"author":{"gitId":"s7u4rt99"},"content":"        return false;","lastModifiedDate":"2021-09-07"},{"lineNumber":62,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":63,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":64,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":65,"author":{"gitId":"s7u4rt99"},"content":"     * Executes the Archive Command.","lastModifiedDate":"2021-09-07"},{"lineNumber":66,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":67,"author":{"gitId":"s7u4rt99"},"content":"     * @param taskList taskList which task at indexToArchive would be archived.","lastModifiedDate":"2021-09-07"},{"lineNumber":68,"author":{"gitId":"s7u4rt99"},"content":"     * @param archiveList archiveList to store the archived task.","lastModifiedDate":"2021-09-07"},{"lineNumber":69,"author":{"gitId":"s7u4rt99"},"content":"     * @param ui Ui to get the String representation of the text printed.","lastModifiedDate":"2021-09-07"},{"lineNumber":70,"author":{"gitId":"s7u4rt99"},"content":"     * @param storage Storage to save and load TaskList for Duke.","lastModifiedDate":"2021-09-07"},{"lineNumber":71,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":72,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-09-07"},{"lineNumber":73,"author":{"gitId":"s7u4rt99"},"content":"    public void execute(TaskList taskList, ArchiveList archiveList, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-07"},{"lineNumber":74,"author":{"gitId":"s7u4rt99"},"content":"        String message;","lastModifiedDate":"2021-09-07"},{"lineNumber":75,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":76,"author":{"gitId":"s7u4rt99"},"content":"        if (this.isArchiveAll) {","lastModifiedDate":"2021-09-07"},{"lineNumber":77,"author":{"gitId":"s7u4rt99"},"content":"            message \u003d formatAndArchiveAll(taskList, archiveList);","lastModifiedDate":"2021-09-07"},{"lineNumber":78,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":79,"author":{"gitId":"s7u4rt99"},"content":"        } else {","lastModifiedDate":"2021-09-07"},{"lineNumber":80,"author":{"gitId":"s7u4rt99"},"content":"            message \u003d formatAndArchiveIndex(taskList, archiveList);","lastModifiedDate":"2021-09-07"},{"lineNumber":81,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":82,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":83,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":84,"author":{"gitId":"s7u4rt99"},"content":"        storage.saveTaskList(taskList);","lastModifiedDate":"2021-09-16"},{"lineNumber":85,"author":{"gitId":"s7u4rt99"},"content":"        storage.saveArchive(archiveList);","lastModifiedDate":"2021-09-16"},{"lineNumber":86,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":87,"author":{"gitId":"s7u4rt99"},"content":"        ui.print(message);","lastModifiedDate":"2021-09-07"},{"lineNumber":88,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":89,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":90,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":91,"author":{"gitId":"s7u4rt99"},"content":"     * Gets the String representation of the things printed in the","lastModifiedDate":"2021-09-07"},{"lineNumber":92,"author":{"gitId":"s7u4rt99"},"content":"     * execute method as well as execute the archiving of the task at","lastModifiedDate":"2021-09-07"},{"lineNumber":93,"author":{"gitId":"s7u4rt99"},"content":"     * indexToBeArchived.","lastModifiedDate":"2021-09-07"},{"lineNumber":94,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":95,"author":{"gitId":"s7u4rt99"},"content":"     * @param taskList taskList which task at indexToArchive would be archived.","lastModifiedDate":"2021-09-07"},{"lineNumber":96,"author":{"gitId":"s7u4rt99"},"content":"     * @param archiveList archiveList to store the archived task.","lastModifiedDate":"2021-09-07"},{"lineNumber":97,"author":{"gitId":"s7u4rt99"},"content":"     * @param ui Ui to get the String representation of the text printed.","lastModifiedDate":"2021-09-07"},{"lineNumber":98,"author":{"gitId":"s7u4rt99"},"content":"     * @param storage Storage to save and load TaskList for Duke.","lastModifiedDate":"2021-09-07"},{"lineNumber":99,"author":{"gitId":"s7u4rt99"},"content":"     * @return String representation of the things printed in the execute method.","lastModifiedDate":"2021-09-16"},{"lineNumber":100,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":101,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-09-07"},{"lineNumber":102,"author":{"gitId":"s7u4rt99"},"content":"    public String formatExecutedString(TaskList taskList, ArchiveList archiveList, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-07"},{"lineNumber":103,"author":{"gitId":"s7u4rt99"},"content":"        String message;","lastModifiedDate":"2021-09-07"},{"lineNumber":104,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":105,"author":{"gitId":"s7u4rt99"},"content":"        if (this.isArchiveAll) {","lastModifiedDate":"2021-09-07"},{"lineNumber":106,"author":{"gitId":"s7u4rt99"},"content":"            message \u003d formatAndArchiveAll(taskList, archiveList);","lastModifiedDate":"2021-09-07"},{"lineNumber":107,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":108,"author":{"gitId":"s7u4rt99"},"content":"        } else {","lastModifiedDate":"2021-09-07"},{"lineNumber":109,"author":{"gitId":"s7u4rt99"},"content":"            message \u003d formatAndArchiveIndex(taskList, archiveList);","lastModifiedDate":"2021-09-07"},{"lineNumber":110,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":111,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":112,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":113,"author":{"gitId":"s7u4rt99"},"content":"        storage.saveTaskList(taskList);","lastModifiedDate":"2021-09-16"},{"lineNumber":114,"author":{"gitId":"s7u4rt99"},"content":"        storage.saveArchive(archiveList);","lastModifiedDate":"2021-09-16"},{"lineNumber":115,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":116,"author":{"gitId":"s7u4rt99"},"content":"        return message;","lastModifiedDate":"2021-09-07"},{"lineNumber":117,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":118,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":119,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":120,"author":{"gitId":"s7u4rt99"},"content":"     * Formats and archives task at indexToArchive in taskList.","lastModifiedDate":"2021-09-08"},{"lineNumber":121,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":122,"author":{"gitId":"s7u4rt99"},"content":"     * @param taskList taskList to archive task at indexToArchive.","lastModifiedDate":"2021-09-07"},{"lineNumber":123,"author":{"gitId":"s7u4rt99"},"content":"     * @param archiveList archiveList to add the archived task to.","lastModifiedDate":"2021-09-07"},{"lineNumber":124,"author":{"gitId":"s7u4rt99"},"content":"     * @return Returns formatted String to be printed to the user.","lastModifiedDate":"2021-09-07"},{"lineNumber":125,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":126,"author":{"gitId":"s7u4rt99"},"content":"    private String formatAndArchiveIndex(TaskList taskList, ArchiveList archiveList) {","lastModifiedDate":"2021-09-07"},{"lineNumber":127,"author":{"gitId":"s7u4rt99"},"content":"        Task toArchive \u003d taskList.archive(indexToArchive, archiveList);","lastModifiedDate":"2021-09-07"},{"lineNumber":128,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":129,"author":{"gitId":"s7u4rt99"},"content":"        return \"Noted. I\u0027ve archived this task:\\n\" + toArchive + \"\\nNow you have \"","lastModifiedDate":"2021-09-07"},{"lineNumber":130,"author":{"gitId":"s7u4rt99"},"content":"                + taskList.getSize() + \" tasks in the list\";","lastModifiedDate":"2021-09-07"},{"lineNumber":131,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":132,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":133,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":134,"author":{"gitId":"s7u4rt99"},"content":"     * Formats and archives all tasks in taskList.","lastModifiedDate":"2021-09-08"},{"lineNumber":135,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":136,"author":{"gitId":"s7u4rt99"},"content":"     * @param taskList taskList to archive all tasks.","lastModifiedDate":"2021-09-07"},{"lineNumber":137,"author":{"gitId":"s7u4rt99"},"content":"     * @param archiveList archiveList to add the archived task to.","lastModifiedDate":"2021-09-07"},{"lineNumber":138,"author":{"gitId":"s7u4rt99"},"content":"     * @return Returns formatted String to be printed to the user.","lastModifiedDate":"2021-09-07"},{"lineNumber":139,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":140,"author":{"gitId":"s7u4rt99"},"content":"    private String formatAndArchiveAll(TaskList taskList, ArchiveList archiveList) {","lastModifiedDate":"2021-09-07"},{"lineNumber":141,"author":{"gitId":"s7u4rt99"},"content":"        String message \u003d \"Noted. I\u0027ve archived these tasks:\\n\";","lastModifiedDate":"2021-09-07"},{"lineNumber":142,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":143,"author":{"gitId":"s7u4rt99"},"content":"        int counter \u003d 0;","lastModifiedDate":"2021-09-07"},{"lineNumber":144,"author":{"gitId":"s7u4rt99"},"content":"        int size \u003d taskList.getSize();","lastModifiedDate":"2021-09-07"},{"lineNumber":145,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":146,"author":{"gitId":"s7u4rt99"},"content":"        for (int i \u003d 0; i \u003c size; i++) {","lastModifiedDate":"2021-09-07"},{"lineNumber":147,"author":{"gitId":"s7u4rt99"},"content":"            Task toArchive \u003d taskList.archive(0, archiveList);","lastModifiedDate":"2021-09-07"},{"lineNumber":148,"author":{"gitId":"s7u4rt99"},"content":"            counter++;","lastModifiedDate":"2021-09-07"},{"lineNumber":149,"author":{"gitId":"s7u4rt99"},"content":"            message +\u003d counter + \".\" + toArchive + \"\\n\";","lastModifiedDate":"2021-09-07"},{"lineNumber":150,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":151,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":152,"author":{"gitId":"s7u4rt99"},"content":"        message +\u003d \"Now you have 0 tasks in the list\";","lastModifiedDate":"2021-09-07"},{"lineNumber":153,"author":{"gitId":"s7u4rt99"},"content":"        return message;","lastModifiedDate":"2021-09-07"},{"lineNumber":154,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":155,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-09-07"}],"authorContributionMap":{"s7u4rt99":155}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke.command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"import duke.ArchiveList;","lastModifiedDate":"2021-09-07"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":" * Abstract class for Commands.","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"public abstract class Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"    public static final String SPACE \u003d \" \";","lastModifiedDate":"2021-09-14"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"    public static final int ALL \u003d -1;","lastModifiedDate":"2021-09-14"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"    public abstract void execute(TaskList taskList, ArchiveList archiveList, Ui ui, Storage storage);","lastModifiedDate":"2021-09-07"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":"    public abstract boolean isExit();","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"s7u4rt99"},"content":"    public abstract String formatExecutedString(TaskList taskList, ArchiveList archiveList, Ui ui, Storage storage);","lastModifiedDate":"2021-09-07"},{"lineNumber":18,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"s7u4rt99":18}},{"path":"src/main/java/duke/command/DeleteArchiveCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke.command;","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"import duke.ArchiveList;","lastModifiedDate":"2021-09-07"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":"import duke.Parser;","lastModifiedDate":"2021-09-14"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":"import duke.Storage;","lastModifiedDate":"2021-09-07"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"import duke.TaskList;","lastModifiedDate":"2021-09-07"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"import duke.Ui;","lastModifiedDate":"2021-09-07"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"import duke.exception.IncompleteDeleteException;","lastModifiedDate":"2021-09-16"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":"import duke.exception.InvalidCommandException;","lastModifiedDate":"2021-09-14"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"/**","lastModifiedDate":"2021-09-08"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":" * Representation for the delete archive command on duke.","lastModifiedDate":"2021-09-16"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":" */","lastModifiedDate":"2021-09-08"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"public class DeleteArchiveCommand extends DeleteCommand {","lastModifiedDate":"2021-09-16"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":17,"author":{"gitId":"s7u4rt99"},"content":"     * Constructor for DeleteArchiveCommand.","lastModifiedDate":"2021-09-16"},{"lineNumber":18,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":19,"author":{"gitId":"s7u4rt99"},"content":"     * @param indexToDelete index to be archived from taskList.","lastModifiedDate":"2021-09-16"},{"lineNumber":20,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":21,"author":{"gitId":"s7u4rt99"},"content":"    public DeleteArchiveCommand(int indexToDelete) {","lastModifiedDate":"2021-09-16"},{"lineNumber":22,"author":{"gitId":"s7u4rt99"},"content":"        super(indexToDelete);","lastModifiedDate":"2021-09-16"},{"lineNumber":23,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":24,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":25,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-14"},{"lineNumber":26,"author":{"gitId":"s7u4rt99"},"content":"     * Factory method which generates the DeleteArchiveCommand from the userInput.","lastModifiedDate":"2021-09-16"},{"lineNumber":27,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-14"},{"lineNumber":28,"author":{"gitId":"s7u4rt99"},"content":"     * @param userInput User Input which is used to generate the DeleteArchiveCommand.","lastModifiedDate":"2021-09-16"},{"lineNumber":29,"author":{"gitId":"s7u4rt99"},"content":"     * @param archiveList archiveList of duke.","lastModifiedDate":"2021-09-14"},{"lineNumber":30,"author":{"gitId":"s7u4rt99"},"content":"     * @return DeleteArchiveCommand to be executed.","lastModifiedDate":"2021-09-16"},{"lineNumber":31,"author":{"gitId":"s7u4rt99"},"content":"     * @throws IncompleteDeleteException if insufficient values are passed in.","lastModifiedDate":"2021-09-16"},{"lineNumber":32,"author":{"gitId":"s7u4rt99"},"content":"     * @throws InvalidCommandException if invalid command passed in.","lastModifiedDate":"2021-09-14"},{"lineNumber":33,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-14"},{"lineNumber":34,"author":{"gitId":"s7u4rt99"},"content":"    public static DeleteArchiveCommand generateCommand(String userInput, ArchiveList archiveList)","lastModifiedDate":"2021-09-16"},{"lineNumber":35,"author":{"gitId":"s7u4rt99"},"content":"            throws IncompleteDeleteException, InvalidCommandException {","lastModifiedDate":"2021-09-16"},{"lineNumber":36,"author":{"gitId":"s7u4rt99"},"content":"        String[] separated \u003d userInput.split(SPACE);","lastModifiedDate":"2021-09-14"},{"lineNumber":37,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":38,"author":{"gitId":"s7u4rt99"},"content":"        if (!Parser.isIntegerOrAll(separated[2]) || Parser.isOutOfRange(archiveList, separated[2])) {","lastModifiedDate":"2021-09-14"},{"lineNumber":39,"author":{"gitId":"s7u4rt99"},"content":"            throw new IncompleteDeleteException();","lastModifiedDate":"2021-09-16"},{"lineNumber":40,"author":{"gitId":"s7u4rt99"},"content":"        } else if (Parser.isPositiveInteger(separated[2])) {","lastModifiedDate":"2021-09-14"},{"lineNumber":41,"author":{"gitId":"s7u4rt99"},"content":"            return new DeleteArchiveCommand(Integer.valueOf(separated[2]) - 1);","lastModifiedDate":"2021-09-16"},{"lineNumber":42,"author":{"gitId":"s7u4rt99"},"content":"        } else if (Parser.isAll(separated[2])) {","lastModifiedDate":"2021-09-14"},{"lineNumber":43,"author":{"gitId":"s7u4rt99"},"content":"            return new DeleteArchiveCommand(ALL);","lastModifiedDate":"2021-09-16"},{"lineNumber":44,"author":{"gitId":"s7u4rt99"},"content":"        } else {","lastModifiedDate":"2021-09-14"},{"lineNumber":45,"author":{"gitId":"s7u4rt99"},"content":"            throw new InvalidCommandException();","lastModifiedDate":"2021-09-14"},{"lineNumber":46,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-14"},{"lineNumber":47,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":48,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":49,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":50,"author":{"gitId":"s7u4rt99"},"content":"     * Executes the DeleteCommand.","lastModifiedDate":"2021-09-16"},{"lineNumber":51,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":52,"author":{"gitId":"s7u4rt99"},"content":"     * @param taskList TaskList which stores the unarchived tasks.","lastModifiedDate":"2021-09-07"},{"lineNumber":53,"author":{"gitId":"s7u4rt99"},"content":"     * @param archiveList ArchiveList to delete at indexToDelete.","lastModifiedDate":"2021-09-16"},{"lineNumber":54,"author":{"gitId":"s7u4rt99"},"content":"     * @param ui Ui to print to users of Duke.","lastModifiedDate":"2021-09-07"},{"lineNumber":55,"author":{"gitId":"s7u4rt99"},"content":"     * @param storage Storage to save and load TaskList of Duke.","lastModifiedDate":"2021-09-07"},{"lineNumber":56,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":57,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-09-07"},{"lineNumber":58,"author":{"gitId":"s7u4rt99"},"content":"    public void execute(TaskList taskList, ArchiveList archiveList, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-07"},{"lineNumber":59,"author":{"gitId":"s7u4rt99"},"content":"        String message;","lastModifiedDate":"2021-09-07"},{"lineNumber":60,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":61,"author":{"gitId":"s7u4rt99"},"content":"        if (super.isDeleteAll()) {","lastModifiedDate":"2021-09-16"},{"lineNumber":62,"author":{"gitId":"s7u4rt99"},"content":"            message \u003d formatAndDeleteAll(archiveList);","lastModifiedDate":"2021-09-16"},{"lineNumber":63,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":64,"author":{"gitId":"s7u4rt99"},"content":"        } else {","lastModifiedDate":"2021-09-07"},{"lineNumber":65,"author":{"gitId":"s7u4rt99"},"content":"            message \u003d formatAndDeleteIndexToDelete(archiveList);","lastModifiedDate":"2021-09-16"},{"lineNumber":66,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":67,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":68,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":69,"author":{"gitId":"s7u4rt99"},"content":"        storage.saveTaskList(taskList);","lastModifiedDate":"2021-09-16"},{"lineNumber":70,"author":{"gitId":"s7u4rt99"},"content":"        storage.saveArchive(archiveList);","lastModifiedDate":"2021-09-16"},{"lineNumber":71,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":72,"author":{"gitId":"s7u4rt99"},"content":"        ui.print(message);","lastModifiedDate":"2021-09-07"},{"lineNumber":73,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":74,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":75,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":76,"author":{"gitId":"s7u4rt99"},"content":"     * Gets the String representation of the things printed in the","lastModifiedDate":"2021-09-07"},{"lineNumber":77,"author":{"gitId":"s7u4rt99"},"content":"     * execute method as well as execute the removal of the index from the","lastModifiedDate":"2021-09-07"},{"lineNumber":78,"author":{"gitId":"s7u4rt99"},"content":"     * archiveList.","lastModifiedDate":"2021-09-07"},{"lineNumber":79,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":80,"author":{"gitId":"s7u4rt99"},"content":"     * @param taskList TaskList which stores the unarchived tasks.","lastModifiedDate":"2021-09-07"},{"lineNumber":81,"author":{"gitId":"s7u4rt99"},"content":"     * @param archiveList ArchiveList to delete the task at indexToDelete.","lastModifiedDate":"2021-09-16"},{"lineNumber":82,"author":{"gitId":"s7u4rt99"},"content":"     * @param ui Ui to get the String representation of the text printed.","lastModifiedDate":"2021-09-07"},{"lineNumber":83,"author":{"gitId":"s7u4rt99"},"content":"     * @param storage Storage to save and load TaskList of Duke.","lastModifiedDate":"2021-09-07"},{"lineNumber":84,"author":{"gitId":"s7u4rt99"},"content":"     * @return String representation of the things printed in the execute method.","lastModifiedDate":"2021-09-16"},{"lineNumber":85,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":86,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-09-07"},{"lineNumber":87,"author":{"gitId":"s7u4rt99"},"content":"    public String formatExecutedString(TaskList taskList, ArchiveList archiveList, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-07"},{"lineNumber":88,"author":{"gitId":"s7u4rt99"},"content":"        String message;","lastModifiedDate":"2021-09-07"},{"lineNumber":89,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":90,"author":{"gitId":"s7u4rt99"},"content":"        if (super.isDeleteAll()) {","lastModifiedDate":"2021-09-16"},{"lineNumber":91,"author":{"gitId":"s7u4rt99"},"content":"            message \u003d super.formatAndDeleteAll(archiveList);","lastModifiedDate":"2021-09-16"},{"lineNumber":92,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":93,"author":{"gitId":"s7u4rt99"},"content":"        } else {","lastModifiedDate":"2021-09-07"},{"lineNumber":94,"author":{"gitId":"s7u4rt99"},"content":"            message \u003d super.formatAndDeleteIndexToDelete(archiveList);","lastModifiedDate":"2021-09-16"},{"lineNumber":95,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":96,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":97,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":98,"author":{"gitId":"s7u4rt99"},"content":"        storage.saveTaskList(taskList);","lastModifiedDate":"2021-09-16"},{"lineNumber":99,"author":{"gitId":"s7u4rt99"},"content":"        storage.saveArchive(archiveList);","lastModifiedDate":"2021-09-16"},{"lineNumber":100,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":101,"author":{"gitId":"s7u4rt99"},"content":"        return message;","lastModifiedDate":"2021-09-07"},{"lineNumber":102,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":103,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-09-07"}],"authorContributionMap":{"s7u4rt99":103}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke.command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"import duke.ArchiveList;","lastModifiedDate":"2021-09-07"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":"import duke.DukeList;","lastModifiedDate":"2021-09-07"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":"import duke.Parser;","lastModifiedDate":"2021-09-14"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":"import duke.exception.IncompleteDeleteException;","lastModifiedDate":"2021-09-16"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"import duke.exception.InvalidCommandException;","lastModifiedDate":"2021-09-14"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-07"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":" * Representation for the delete command of Duke.","lastModifiedDate":"2021-09-16"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2021-09-16"},{"lineNumber":17,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":18,"author":{"gitId":"s7u4rt99"},"content":"    private final int indexToDelete;","lastModifiedDate":"2021-09-16"},{"lineNumber":19,"author":{"gitId":"s7u4rt99"},"content":"    private final boolean isDeleteAll;","lastModifiedDate":"2021-09-16"},{"lineNumber":20,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":21,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"s7u4rt99"},"content":"     * Constructor for DeleteCommand.","lastModifiedDate":"2021-09-16"},{"lineNumber":23,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"s7u4rt99"},"content":"     * @param indexToDelete Index of TaskList to be deleted.","lastModifiedDate":"2021-09-16"},{"lineNumber":25,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"s7u4rt99"},"content":"    public DeleteCommand(int indexToDelete) {","lastModifiedDate":"2021-09-16"},{"lineNumber":27,"author":{"gitId":"s7u4rt99"},"content":"        this.indexToDelete \u003d indexToDelete;","lastModifiedDate":"2021-09-16"},{"lineNumber":28,"author":{"gitId":"s7u4rt99"},"content":"        this.isDeleteAll \u003d indexToDelete \u003d\u003d ALL;","lastModifiedDate":"2021-09-16"},{"lineNumber":29,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":30,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":31,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-14"},{"lineNumber":32,"author":{"gitId":"s7u4rt99"},"content":"     * Factory method which generates the DeleteCommand from the userInput.","lastModifiedDate":"2021-09-16"},{"lineNumber":33,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-14"},{"lineNumber":34,"author":{"gitId":"s7u4rt99"},"content":"     * @param userInput User Input which is used to generate the DeleteCommand.","lastModifiedDate":"2021-09-16"},{"lineNumber":35,"author":{"gitId":"s7u4rt99"},"content":"     * @param taskList taskList of duke.","lastModifiedDate":"2021-09-14"},{"lineNumber":36,"author":{"gitId":"s7u4rt99"},"content":"     * @return DeleteCommand to be executed.","lastModifiedDate":"2021-09-16"},{"lineNumber":37,"author":{"gitId":"s7u4rt99"},"content":"     * @throws IncompleteDeleteException if insufficient values are passed in.","lastModifiedDate":"2021-09-16"},{"lineNumber":38,"author":{"gitId":"s7u4rt99"},"content":"     * @throws InvalidCommandException if invalid command passed in.","lastModifiedDate":"2021-09-14"},{"lineNumber":39,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-14"},{"lineNumber":40,"author":{"gitId":"s7u4rt99"},"content":"    public static DeleteCommand generateCommand(String userInput, TaskList taskList)","lastModifiedDate":"2021-09-16"},{"lineNumber":41,"author":{"gitId":"s7u4rt99"},"content":"            throws IncompleteDeleteException, InvalidCommandException {","lastModifiedDate":"2021-09-16"},{"lineNumber":42,"author":{"gitId":"s7u4rt99"},"content":"        String[] separated \u003d userInput.split(SPACE);","lastModifiedDate":"2021-09-14"},{"lineNumber":43,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":44,"author":{"gitId":"s7u4rt99"},"content":"        if (Parser.isLengthLessThanTwo(separated) || !Parser.isIntegerOrAll(separated[1])","lastModifiedDate":"2021-09-14"},{"lineNumber":45,"author":{"gitId":"s7u4rt99"},"content":"                || Parser.isOutOfRange(taskList, separated[1])) {","lastModifiedDate":"2021-09-14"},{"lineNumber":46,"author":{"gitId":"s7u4rt99"},"content":"            throw new IncompleteDeleteException();","lastModifiedDate":"2021-09-16"},{"lineNumber":47,"author":{"gitId":"s7u4rt99"},"content":"        } else if (Parser.isPositiveInteger(separated[1])) {","lastModifiedDate":"2021-09-14"},{"lineNumber":48,"author":{"gitId":"s7u4rt99"},"content":"            return new DeleteCommand(Integer.valueOf(separated[1]) - 1);","lastModifiedDate":"2021-09-16"},{"lineNumber":49,"author":{"gitId":"s7u4rt99"},"content":"        } else if (Parser.isAll(separated[1])) {","lastModifiedDate":"2021-09-14"},{"lineNumber":50,"author":{"gitId":"s7u4rt99"},"content":"            return new DeleteCommand(ALL);","lastModifiedDate":"2021-09-16"},{"lineNumber":51,"author":{"gitId":"s7u4rt99"},"content":"        } else {","lastModifiedDate":"2021-09-14"},{"lineNumber":52,"author":{"gitId":"s7u4rt99"},"content":"            throw new InvalidCommandException();","lastModifiedDate":"2021-09-14"},{"lineNumber":53,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-14"},{"lineNumber":54,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":56,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":57,"author":{"gitId":"s7u4rt99"},"content":"     * Checks if this is an exit command.","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"s7u4rt99"},"content":"     * @return false.","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"s7u4rt99"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"s7u4rt99"},"content":"        return false;","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":67,"author":{"gitId":"s7u4rt99"},"content":"     * Executes the DeleteCommand.","lastModifiedDate":"2021-09-16"},{"lineNumber":68,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":69,"author":{"gitId":"s7u4rt99"},"content":"     * @param taskList TaskList to delete command at index indexToDelete from.","lastModifiedDate":"2021-09-16"},{"lineNumber":70,"author":{"gitId":"s7u4rt99"},"content":"     * @param archiveList ArchiveList to add the archived tasks to.","lastModifiedDate":"2021-09-07"},{"lineNumber":71,"author":{"gitId":"s7u4rt99"},"content":"     * @param ui Ui to print to users of Duke.","lastModifiedDate":"2021-08-26"},{"lineNumber":72,"author":{"gitId":"s7u4rt99"},"content":"     * @param storage Storage to save and load TaskList of Duke.","lastModifiedDate":"2021-08-26"},{"lineNumber":73,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":74,"author":{"gitId":"s7u4rt99"},"content":"    public void execute(TaskList taskList, ArchiveList archiveList, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-07"},{"lineNumber":75,"author":{"gitId":"s7u4rt99"},"content":"        String message;","lastModifiedDate":"2021-09-07"},{"lineNumber":76,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":77,"author":{"gitId":"s7u4rt99"},"content":"        if (this.isDeleteAll) {","lastModifiedDate":"2021-09-16"},{"lineNumber":78,"author":{"gitId":"s7u4rt99"},"content":"            message \u003d formatAndDeleteAll(taskList);","lastModifiedDate":"2021-09-16"},{"lineNumber":79,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":80,"author":{"gitId":"s7u4rt99"},"content":"        } else {","lastModifiedDate":"2021-09-07"},{"lineNumber":81,"author":{"gitId":"s7u4rt99"},"content":"            message \u003d formatAndDeleteIndexToDelete(taskList);","lastModifiedDate":"2021-09-16"},{"lineNumber":82,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":83,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":84,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":85,"author":{"gitId":"s7u4rt99"},"content":"        storage.saveTaskList(taskList);","lastModifiedDate":"2021-09-16"},{"lineNumber":86,"author":{"gitId":"s7u4rt99"},"content":"        storage.saveArchive(archiveList);","lastModifiedDate":"2021-09-16"},{"lineNumber":87,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":88,"author":{"gitId":"s7u4rt99"},"content":"        ui.print(message);","lastModifiedDate":"2021-08-25"},{"lineNumber":89,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":90,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":91,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":92,"author":{"gitId":"s7u4rt99"},"content":"     * Gets the String representation of the things printed in the","lastModifiedDate":"2021-09-06"},{"lineNumber":93,"author":{"gitId":"s7u4rt99"},"content":"     * execute method as well as execute the removal of the index.","lastModifiedDate":"2021-09-06"},{"lineNumber":94,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":95,"author":{"gitId":"s7u4rt99"},"content":"     * @param taskList TaskList to delete command at index indexToDelete from.","lastModifiedDate":"2021-09-16"},{"lineNumber":96,"author":{"gitId":"s7u4rt99"},"content":"     * @param archiveList ArchiveList to add the archived tasks to.","lastModifiedDate":"2021-09-07"},{"lineNumber":97,"author":{"gitId":"s7u4rt99"},"content":"     * @param ui Ui to get the String representation of the text printed.","lastModifiedDate":"2021-09-06"},{"lineNumber":98,"author":{"gitId":"s7u4rt99"},"content":"     * @param storage Storage to save and load TaskList of Duke.","lastModifiedDate":"2021-09-06"},{"lineNumber":99,"author":{"gitId":"s7u4rt99"},"content":"     * @return String representation of the things printed in the execute method.","lastModifiedDate":"2021-09-16"},{"lineNumber":100,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":101,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-09-02"},{"lineNumber":102,"author":{"gitId":"s7u4rt99"},"content":"    public String formatExecutedString(TaskList taskList, ArchiveList archiveList, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-07"},{"lineNumber":103,"author":{"gitId":"s7u4rt99"},"content":"        String message;","lastModifiedDate":"2021-09-07"},{"lineNumber":104,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":105,"author":{"gitId":"s7u4rt99"},"content":"        if (this.isDeleteAll) {","lastModifiedDate":"2021-09-16"},{"lineNumber":106,"author":{"gitId":"s7u4rt99"},"content":"            message \u003d formatAndDeleteAll(taskList);","lastModifiedDate":"2021-09-16"},{"lineNumber":107,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":108,"author":{"gitId":"s7u4rt99"},"content":"        } else {","lastModifiedDate":"2021-09-07"},{"lineNumber":109,"author":{"gitId":"s7u4rt99"},"content":"            message \u003d formatAndDeleteIndexToDelete(taskList);","lastModifiedDate":"2021-09-16"},{"lineNumber":110,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":111,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":112,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":113,"author":{"gitId":"s7u4rt99"},"content":"        storage.saveTaskList(taskList);","lastModifiedDate":"2021-09-16"},{"lineNumber":114,"author":{"gitId":"s7u4rt99"},"content":"        storage.saveArchive(archiveList);","lastModifiedDate":"2021-09-16"},{"lineNumber":115,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":116,"author":{"gitId":"s7u4rt99"},"content":"        return message;","lastModifiedDate":"2021-09-07"},{"lineNumber":117,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":118,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":119,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":120,"author":{"gitId":"s7u4rt99"},"content":"     * Formats and deletes all the items from dukeList.","lastModifiedDate":"2021-09-16"},{"lineNumber":121,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":122,"author":{"gitId":"s7u4rt99"},"content":"     * @param dukeList dukeList to delete all the tasks from.","lastModifiedDate":"2021-09-16"},{"lineNumber":123,"author":{"gitId":"s7u4rt99"},"content":"     * @return Returns the formatted string to be printed to the user.","lastModifiedDate":"2021-09-07"},{"lineNumber":124,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":125,"author":{"gitId":"s7u4rt99"},"content":"    public String formatAndDeleteAll(DukeList dukeList) {","lastModifiedDate":"2021-09-16"},{"lineNumber":126,"author":{"gitId":"s7u4rt99"},"content":"        String message \u003d \"Noted. I\u0027ve removed these tasks from the \" + dukeList.type() + \":\\n\";","lastModifiedDate":"2021-09-07"},{"lineNumber":127,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":128,"author":{"gitId":"s7u4rt99"},"content":"        int counter \u003d 0;","lastModifiedDate":"2021-09-07"},{"lineNumber":129,"author":{"gitId":"s7u4rt99"},"content":"        int size \u003d dukeList.getSize();","lastModifiedDate":"2021-09-07"},{"lineNumber":130,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":131,"author":{"gitId":"s7u4rt99"},"content":"        for (int i \u003d 0; i \u003c size; i++) {","lastModifiedDate":"2021-09-07"},{"lineNumber":132,"author":{"gitId":"s7u4rt99"},"content":"            Task toDelete \u003d dukeList.remove(0);","lastModifiedDate":"2021-09-16"},{"lineNumber":133,"author":{"gitId":"s7u4rt99"},"content":"            counter++;","lastModifiedDate":"2021-09-07"},{"lineNumber":134,"author":{"gitId":"s7u4rt99"},"content":"            message +\u003d counter + \".\" + toDelete + \"\\n\";","lastModifiedDate":"2021-09-16"},{"lineNumber":135,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-02"},{"lineNumber":136,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":137,"author":{"gitId":"s7u4rt99"},"content":"        message +\u003d \"Now you have 0 tasks in the \" + dukeList.type() + \".\";","lastModifiedDate":"2021-09-07"},{"lineNumber":138,"author":{"gitId":"s7u4rt99"},"content":"        return message;","lastModifiedDate":"2021-09-07"},{"lineNumber":139,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":140,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":141,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":142,"author":{"gitId":"s7u4rt99"},"content":"     * Formats and deletes task at indexToDelete from dukeList.","lastModifiedDate":"2021-09-16"},{"lineNumber":143,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":144,"author":{"gitId":"s7u4rt99"},"content":"     * @param dukeList dukeList to delete task at indexToDelete.","lastModifiedDate":"2021-09-16"},{"lineNumber":145,"author":{"gitId":"s7u4rt99"},"content":"     * @return Returns the formatted string to be printed to the user.","lastModifiedDate":"2021-09-07"},{"lineNumber":146,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":147,"author":{"gitId":"s7u4rt99"},"content":"    public String formatAndDeleteIndexToDelete(DukeList dukeList) {","lastModifiedDate":"2021-09-16"},{"lineNumber":148,"author":{"gitId":"s7u4rt99"},"content":"        Task toDelete \u003d dukeList.remove(this.indexToDelete);","lastModifiedDate":"2021-09-16"},{"lineNumber":149,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":150,"author":{"gitId":"s7u4rt99"},"content":"        return \"Noted. I\u0027ve removed this task from the \" + dukeList.type() + \":\\n\" + toDelete + \"\\nNow you have \"","lastModifiedDate":"2021-09-16"},{"lineNumber":151,"author":{"gitId":"s7u4rt99"},"content":"                + dukeList.getSize() + \" tasks in the \" + dukeList.type() + \".\";","lastModifiedDate":"2021-09-07"},{"lineNumber":152,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":153,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":154,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":155,"author":{"gitId":"s7u4rt99"},"content":"     * Gets isDeleteAll value which checks if the DeleteCommand","lastModifiedDate":"2021-09-16"},{"lineNumber":156,"author":{"gitId":"s7u4rt99"},"content":"     * deletes all the tasks.","lastModifiedDate":"2021-09-16"},{"lineNumber":157,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":158,"author":{"gitId":"s7u4rt99"},"content":"     * @return isDeleteAll value.","lastModifiedDate":"2021-09-16"},{"lineNumber":159,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":160,"author":{"gitId":"s7u4rt99"},"content":"    public boolean isDeleteAll() {","lastModifiedDate":"2021-09-16"},{"lineNumber":161,"author":{"gitId":"s7u4rt99"},"content":"        return this.isDeleteAll;","lastModifiedDate":"2021-09-16"},{"lineNumber":162,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":163,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":164,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":165,"author":{"gitId":"s7u4rt99"},"content":"     * Gets the index to be deleted.","lastModifiedDate":"2021-09-16"},{"lineNumber":166,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":167,"author":{"gitId":"s7u4rt99"},"content":"     * @return Index to be deleted.","lastModifiedDate":"2021-09-16"},{"lineNumber":168,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":169,"author":{"gitId":"s7u4rt99"},"content":"    public int getIndexToDelete() {","lastModifiedDate":"2021-09-16"},{"lineNumber":170,"author":{"gitId":"s7u4rt99"},"content":"        return this.indexToDelete;","lastModifiedDate":"2021-09-16"},{"lineNumber":171,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":172,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-09-07"},{"lineNumber":173,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"}],"authorContributionMap":{"s7u4rt99":173}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke.command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"import duke.ArchiveList;","lastModifiedDate":"2021-09-07"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":"import duke.Parser;","lastModifiedDate":"2021-09-14"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"import duke.exception.IncompleteDoneException;","lastModifiedDate":"2021-09-14"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":"import duke.exception.InvalidCommandException;","lastModifiedDate":"2021-09-14"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":" * Representation for the done command of Duke.","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"public class DoneCommand extends Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":"    private final int indexToMarkAsDone;","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"s7u4rt99"},"content":"    private final boolean isMarkAll;","lastModifiedDate":"2021-09-07"},{"lineNumber":18,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"s7u4rt99"},"content":"     * Constructor for DoneCommand.","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"s7u4rt99"},"content":"     * @param indexToMarkAsDone Index of taskList to mark as done.","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"s7u4rt99"},"content":"    public DoneCommand(int indexToMarkAsDone) {","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"s7u4rt99"},"content":"        this.indexToMarkAsDone \u003d indexToMarkAsDone;","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"s7u4rt99"},"content":"        this.isMarkAll \u003d indexToMarkAsDone \u003d\u003d ALL;","lastModifiedDate":"2021-09-14"},{"lineNumber":27,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":28,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":29,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-14"},{"lineNumber":30,"author":{"gitId":"s7u4rt99"},"content":"     * Factory method which generates the DoneCommand from the userInput.","lastModifiedDate":"2021-09-14"},{"lineNumber":31,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-14"},{"lineNumber":32,"author":{"gitId":"s7u4rt99"},"content":"     * @param userInput User Input which is used to generate the DoneCommand.","lastModifiedDate":"2021-09-14"},{"lineNumber":33,"author":{"gitId":"s7u4rt99"},"content":"     * @param taskList taskList of duke.","lastModifiedDate":"2021-09-14"},{"lineNumber":34,"author":{"gitId":"s7u4rt99"},"content":"     * @return DoneCommand to be executed.","lastModifiedDate":"2021-09-14"},{"lineNumber":35,"author":{"gitId":"s7u4rt99"},"content":"     * @throws IncompleteDoneException if insufficient values are passed in.","lastModifiedDate":"2021-09-14"},{"lineNumber":36,"author":{"gitId":"s7u4rt99"},"content":"     * @throws InvalidCommandException if invalid command passed in.","lastModifiedDate":"2021-09-14"},{"lineNumber":37,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-14"},{"lineNumber":38,"author":{"gitId":"s7u4rt99"},"content":"    public static DoneCommand generateCommand(String userInput, TaskList taskList)","lastModifiedDate":"2021-09-16"},{"lineNumber":39,"author":{"gitId":"s7u4rt99"},"content":"            throws IncompleteDoneException, InvalidCommandException {","lastModifiedDate":"2021-09-14"},{"lineNumber":40,"author":{"gitId":"s7u4rt99"},"content":"        String[] separated \u003d userInput.split(SPACE);","lastModifiedDate":"2021-09-14"},{"lineNumber":41,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":42,"author":{"gitId":"s7u4rt99"},"content":"        if (Parser.isLengthLessThanTwo(separated) || !Parser.isIntegerOrAll(separated[1])","lastModifiedDate":"2021-09-14"},{"lineNumber":43,"author":{"gitId":"s7u4rt99"},"content":"                || Parser.isOutOfRange(taskList, separated[1])) {","lastModifiedDate":"2021-09-14"},{"lineNumber":44,"author":{"gitId":"s7u4rt99"},"content":"            throw new IncompleteDoneException();","lastModifiedDate":"2021-09-14"},{"lineNumber":45,"author":{"gitId":"s7u4rt99"},"content":"        } else if (Parser.isPositiveInteger(separated[1])) {","lastModifiedDate":"2021-09-14"},{"lineNumber":46,"author":{"gitId":"s7u4rt99"},"content":"            int index \u003d Integer.valueOf(separated[1]) - 1;","lastModifiedDate":"2021-09-14"},{"lineNumber":47,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":48,"author":{"gitId":"s7u4rt99"},"content":"            assert index \u003e\u003d 0 \u0026\u0026 index \u003c taskList.getSize();","lastModifiedDate":"2021-09-14"},{"lineNumber":49,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":50,"author":{"gitId":"s7u4rt99"},"content":"            return new DoneCommand(index);","lastModifiedDate":"2021-09-14"},{"lineNumber":51,"author":{"gitId":"s7u4rt99"},"content":"        } else if (Parser.isAll(separated[1])) {","lastModifiedDate":"2021-09-14"},{"lineNumber":52,"author":{"gitId":"s7u4rt99"},"content":"            return new DoneCommand(ALL);","lastModifiedDate":"2021-09-14"},{"lineNumber":53,"author":{"gitId":"s7u4rt99"},"content":"        } else {","lastModifiedDate":"2021-09-14"},{"lineNumber":54,"author":{"gitId":"s7u4rt99"},"content":"            throw new InvalidCommandException();","lastModifiedDate":"2021-09-14"},{"lineNumber":55,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-14"},{"lineNumber":56,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"s7u4rt99"},"content":"     * Checks if this is an exit command.","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"s7u4rt99"},"content":"     * @return false.","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":63,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"s7u4rt99"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"s7u4rt99"},"content":"        return false;","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":69,"author":{"gitId":"s7u4rt99"},"content":"     * Executes the DoneCommand.","lastModifiedDate":"2021-08-26"},{"lineNumber":70,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":71,"author":{"gitId":"s7u4rt99"},"content":"     * @param taskList TaskList to mark Task at index indexToMarkAsDone as Done.","lastModifiedDate":"2021-09-06"},{"lineNumber":72,"author":{"gitId":"s7u4rt99"},"content":"     * @param archiveList ArchiveList to store archived tasks.","lastModifiedDate":"2021-09-07"},{"lineNumber":73,"author":{"gitId":"s7u4rt99"},"content":"     * @param ui Ui to print to users of Duke.","lastModifiedDate":"2021-08-26"},{"lineNumber":74,"author":{"gitId":"s7u4rt99"},"content":"     * @param storage Storage to save and load TaskList for Duke.","lastModifiedDate":"2021-08-26"},{"lineNumber":75,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":76,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":77,"author":{"gitId":"s7u4rt99"},"content":"    public void execute(TaskList taskList, ArchiveList archiveList, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-07"},{"lineNumber":78,"author":{"gitId":"s7u4rt99"},"content":"        String message;","lastModifiedDate":"2021-09-07"},{"lineNumber":79,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":80,"author":{"gitId":"s7u4rt99"},"content":"        if (this.isMarkAll) {","lastModifiedDate":"2021-09-07"},{"lineNumber":81,"author":{"gitId":"s7u4rt99"},"content":"            message \u003d formatAndMarkAllAsDone(taskList);","lastModifiedDate":"2021-09-07"},{"lineNumber":82,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":83,"author":{"gitId":"s7u4rt99"},"content":"        } else {","lastModifiedDate":"2021-09-07"},{"lineNumber":84,"author":{"gitId":"s7u4rt99"},"content":"            message \u003d formatAndMarkDoneAtIndex(taskList);","lastModifiedDate":"2021-09-07"},{"lineNumber":85,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":86,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":87,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":88,"author":{"gitId":"s7u4rt99"},"content":"        storage.saveTaskList(taskList);","lastModifiedDate":"2021-09-16"},{"lineNumber":89,"author":{"gitId":"s7u4rt99"},"content":"        storage.saveArchive(archiveList);","lastModifiedDate":"2021-09-16"},{"lineNumber":90,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":91,"author":{"gitId":"s7u4rt99"},"content":"        ui.print(message);","lastModifiedDate":"2021-08-25"},{"lineNumber":92,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":93,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":94,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":95,"author":{"gitId":"s7u4rt99"},"content":"     * Gets the String representation of the things printed in the","lastModifiedDate":"2021-09-06"},{"lineNumber":96,"author":{"gitId":"s7u4rt99"},"content":"     * execute method as well as execute the marking of the task as done.","lastModifiedDate":"2021-09-06"},{"lineNumber":97,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":98,"author":{"gitId":"s7u4rt99"},"content":"     * @param taskList TaskList to mark Task at index indexToMarkAsDone as Done.","lastModifiedDate":"2021-09-06"},{"lineNumber":99,"author":{"gitId":"s7u4rt99"},"content":"     * @param archiveList ArchiveList to store archived tasks.","lastModifiedDate":"2021-09-07"},{"lineNumber":100,"author":{"gitId":"s7u4rt99"},"content":"     * @param ui Ui to get the String representation of the text printed.","lastModifiedDate":"2021-09-06"},{"lineNumber":101,"author":{"gitId":"s7u4rt99"},"content":"     * @param storage Storage to save and load TaskList for Duke.","lastModifiedDate":"2021-09-06"},{"lineNumber":102,"author":{"gitId":"s7u4rt99"},"content":"     * @return String representation of the things printed in the execute method.","lastModifiedDate":"2021-09-16"},{"lineNumber":103,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":104,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-09-02"},{"lineNumber":105,"author":{"gitId":"s7u4rt99"},"content":"    public String formatExecutedString(TaskList taskList, ArchiveList archiveList, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-07"},{"lineNumber":106,"author":{"gitId":"s7u4rt99"},"content":"        String message;","lastModifiedDate":"2021-09-07"},{"lineNumber":107,"author":{"gitId":"s7u4rt99"},"content":"        if (this.isMarkAll) {","lastModifiedDate":"2021-09-07"},{"lineNumber":108,"author":{"gitId":"s7u4rt99"},"content":"            message \u003d formatAndMarkAllAsDone(taskList);","lastModifiedDate":"2021-09-07"},{"lineNumber":109,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":110,"author":{"gitId":"s7u4rt99"},"content":"        } else {","lastModifiedDate":"2021-09-07"},{"lineNumber":111,"author":{"gitId":"s7u4rt99"},"content":"            message \u003d formatAndMarkDoneAtIndex(taskList);","lastModifiedDate":"2021-09-07"},{"lineNumber":112,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":113,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":114,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":115,"author":{"gitId":"s7u4rt99"},"content":"        storage.saveTaskList(taskList);","lastModifiedDate":"2021-09-16"},{"lineNumber":116,"author":{"gitId":"s7u4rt99"},"content":"        storage.saveArchive(archiveList);","lastModifiedDate":"2021-09-16"},{"lineNumber":117,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":118,"author":{"gitId":"s7u4rt99"},"content":"        return message;","lastModifiedDate":"2021-09-07"},{"lineNumber":119,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":120,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":121,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":122,"author":{"gitId":"s7u4rt99"},"content":"     * Formats and marks task at indexToMarkAsDone done in given taskList.","lastModifiedDate":"2021-09-07"},{"lineNumber":123,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":124,"author":{"gitId":"s7u4rt99"},"content":"     * @param taskList taskList to mark task at indexToMarkAsDone done.","lastModifiedDate":"2021-09-07"},{"lineNumber":125,"author":{"gitId":"s7u4rt99"},"content":"     * @return Returns formatted String to be printed to the user.","lastModifiedDate":"2021-09-07"},{"lineNumber":126,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":127,"author":{"gitId":"s7u4rt99"},"content":"    private String formatAndMarkDoneAtIndex(TaskList taskList) {","lastModifiedDate":"2021-09-07"},{"lineNumber":128,"author":{"gitId":"s7u4rt99"},"content":"        taskList.markAsDone(this.indexToMarkAsDone);","lastModifiedDate":"2021-09-06"},{"lineNumber":129,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":130,"author":{"gitId":"s7u4rt99"},"content":"        return \"Nice! I\u0027ve marked this task as done:\\n\" + \"  \"","lastModifiedDate":"2021-09-02"},{"lineNumber":131,"author":{"gitId":"s7u4rt99"},"content":"                + taskList.taskToString(this.indexToMarkAsDone);","lastModifiedDate":"2021-09-06"},{"lineNumber":132,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":133,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":134,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":135,"author":{"gitId":"s7u4rt99"},"content":"     * Formats and marks all tasks as done in given taskList.","lastModifiedDate":"2021-09-07"},{"lineNumber":136,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":137,"author":{"gitId":"s7u4rt99"},"content":"     * @param taskList taskList to mark all tasks as done.","lastModifiedDate":"2021-09-07"},{"lineNumber":138,"author":{"gitId":"s7u4rt99"},"content":"     * @return Returns formatted String to be printed to the user.","lastModifiedDate":"2021-09-07"},{"lineNumber":139,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":140,"author":{"gitId":"s7u4rt99"},"content":"    private String formatAndMarkAllAsDone(TaskList taskList) {","lastModifiedDate":"2021-09-07"},{"lineNumber":141,"author":{"gitId":"s7u4rt99"},"content":"        String message \u003d \"Noted. I\u0027ve marked these tasks as done:\\n\";","lastModifiedDate":"2021-09-07"},{"lineNumber":142,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":143,"author":{"gitId":"s7u4rt99"},"content":"        taskList.markAllAsDone();","lastModifiedDate":"2021-09-07"},{"lineNumber":144,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":145,"author":{"gitId":"s7u4rt99"},"content":"        for (int i \u003d 0; i \u003c taskList.getSize(); i++) {","lastModifiedDate":"2021-09-07"},{"lineNumber":146,"author":{"gitId":"s7u4rt99"},"content":"            if (i \u003d\u003d taskList.getSize() - 1) {","lastModifiedDate":"2021-09-07"},{"lineNumber":147,"author":{"gitId":"s7u4rt99"},"content":"                message +\u003d i + 1 + \".\" + taskList.taskToString(i);","lastModifiedDate":"2021-09-07"},{"lineNumber":148,"author":{"gitId":"s7u4rt99"},"content":"            } else {","lastModifiedDate":"2021-09-07"},{"lineNumber":149,"author":{"gitId":"s7u4rt99"},"content":"                message +\u003d i + 1 + \".\" + taskList.taskToString(i) + \"\\n\";","lastModifiedDate":"2021-09-07"},{"lineNumber":150,"author":{"gitId":"s7u4rt99"},"content":"            }","lastModifiedDate":"2021-09-07"},{"lineNumber":151,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":152,"author":{"gitId":"s7u4rt99"},"content":"        return message;","lastModifiedDate":"2021-09-07"},{"lineNumber":153,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":154,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"s7u4rt99":154}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke.command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"import duke.ArchiveList;","lastModifiedDate":"2021-09-07"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":" * Representation for exit command of Duke.","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-14"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"     * Factory method which generates the ExitCommand from the userInput.","lastModifiedDate":"2021-09-14"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-14"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":"     * @return ExitCommand to be executed.","lastModifiedDate":"2021-09-14"},{"lineNumber":17,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-14"},{"lineNumber":18,"author":{"gitId":"s7u4rt99"},"content":"    public static ExitCommand generateCommand() {","lastModifiedDate":"2021-09-16"},{"lineNumber":19,"author":{"gitId":"s7u4rt99"},"content":"        return new ExitCommand();","lastModifiedDate":"2021-09-14"},{"lineNumber":20,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":21,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":22,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"s7u4rt99"},"content":"     * Checks if this is an exit command.","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"s7u4rt99"},"content":"     * @return true.","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"s7u4rt99"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"s7u4rt99"},"content":"        return true;","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"s7u4rt99"},"content":"     * Executes the Exit Command.","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"s7u4rt99"},"content":"     * @param taskList TaskList of Tasks.","lastModifiedDate":"2021-09-06"},{"lineNumber":36,"author":{"gitId":"s7u4rt99"},"content":"     * @param archiveList ArchiveList to store archived tasks.","lastModifiedDate":"2021-09-07"},{"lineNumber":37,"author":{"gitId":"s7u4rt99"},"content":"     * @param ui Ui to print to users of Duke.","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"s7u4rt99"},"content":"     * @param storage Storage to save and load TaskList of Duke.","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"s7u4rt99"},"content":"    public void execute(TaskList taskList, ArchiveList archiveList, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-07"},{"lineNumber":42,"author":{"gitId":"s7u4rt99"},"content":"        storage.saveTaskList(taskList);","lastModifiedDate":"2021-09-16"},{"lineNumber":43,"author":{"gitId":"s7u4rt99"},"content":"        storage.saveArchive(archiveList);","lastModifiedDate":"2021-09-07"},{"lineNumber":44,"author":{"gitId":"s7u4rt99"},"content":"        ui.exit();","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":47,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":48,"author":{"gitId":"s7u4rt99"},"content":"     * Gets the String representation of the things printed in the","lastModifiedDate":"2021-09-06"},{"lineNumber":49,"author":{"gitId":"s7u4rt99"},"content":"     * execute method as well as execute exiting of the gui.","lastModifiedDate":"2021-09-06"},{"lineNumber":50,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":51,"author":{"gitId":"s7u4rt99"},"content":"     * @param taskList TaskList of Tasks.","lastModifiedDate":"2021-09-06"},{"lineNumber":52,"author":{"gitId":"s7u4rt99"},"content":"     * @param archiveList ArchiveList to store archived tasks.","lastModifiedDate":"2021-09-07"},{"lineNumber":53,"author":{"gitId":"s7u4rt99"},"content":"     * @param ui Ui to get String representation of the text printed.","lastModifiedDate":"2021-09-06"},{"lineNumber":54,"author":{"gitId":"s7u4rt99"},"content":"     * @param storage Storage to save and load TaskList of Duke.","lastModifiedDate":"2021-09-06"},{"lineNumber":55,"author":{"gitId":"s7u4rt99"},"content":"     * @return String representation of the things printed in the execute method.","lastModifiedDate":"2021-09-16"},{"lineNumber":56,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":57,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-09-02"},{"lineNumber":58,"author":{"gitId":"s7u4rt99"},"content":"    public String formatExecutedString(TaskList taskList, ArchiveList archiveList, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-07"},{"lineNumber":59,"author":{"gitId":"s7u4rt99"},"content":"        storage.saveTaskList(taskList);","lastModifiedDate":"2021-09-16"},{"lineNumber":60,"author":{"gitId":"s7u4rt99"},"content":"        storage.saveArchive(archiveList);","lastModifiedDate":"2021-09-07"},{"lineNumber":61,"author":{"gitId":"s7u4rt99"},"content":"        return ui.formatExitString();","lastModifiedDate":"2021-09-06"},{"lineNumber":62,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":63,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"s7u4rt99":63}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke.command;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"import duke.ArchiveList;","lastModifiedDate":"2021-09-07"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"import duke.exception.IncompleteFindException;","lastModifiedDate":"2021-09-14"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":" * Representation for the find command of Duke.","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"    private final String keyword;","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"s7u4rt99"},"content":"     * Constructor for FindCommand.","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"s7u4rt99"},"content":"     * @param keyword Keyword to search for in TaskList.","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"s7u4rt99"},"content":"    public FindCommand(String keyword) {","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"s7u4rt99"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-14"},{"lineNumber":26,"author":{"gitId":"s7u4rt99"},"content":"     * Factory method which generates the FindCommand from the userInput.","lastModifiedDate":"2021-09-14"},{"lineNumber":27,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-14"},{"lineNumber":28,"author":{"gitId":"s7u4rt99"},"content":"     * @param userInput User Input which is used to generate the FindCommand.","lastModifiedDate":"2021-09-14"},{"lineNumber":29,"author":{"gitId":"s7u4rt99"},"content":"     * @return FindCommand to be executed.","lastModifiedDate":"2021-09-14"},{"lineNumber":30,"author":{"gitId":"s7u4rt99"},"content":"     * @throws IncompleteFindException if insufficient values are passed in.","lastModifiedDate":"2021-09-14"},{"lineNumber":31,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-14"},{"lineNumber":32,"author":{"gitId":"s7u4rt99"},"content":"    public static FindCommand generateCommand(String userInput) throws IncompleteFindException {","lastModifiedDate":"2021-09-16"},{"lineNumber":33,"author":{"gitId":"s7u4rt99"},"content":"        String[] separated \u003d userInput.split(SPACE);","lastModifiedDate":"2021-09-14"},{"lineNumber":34,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":35,"author":{"gitId":"s7u4rt99"},"content":"        if (separated.length \u003d\u003d 1) {","lastModifiedDate":"2021-09-14"},{"lineNumber":36,"author":{"gitId":"s7u4rt99"},"content":"            throw new IncompleteFindException();","lastModifiedDate":"2021-09-14"},{"lineNumber":37,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-14"},{"lineNumber":38,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":39,"author":{"gitId":"s7u4rt99"},"content":"        String keyword \u003d separated[1];","lastModifiedDate":"2021-09-14"},{"lineNumber":40,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":41,"author":{"gitId":"s7u4rt99"},"content":"        return new FindCommand(keyword);","lastModifiedDate":"2021-09-14"},{"lineNumber":42,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":43,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":44,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"s7u4rt99"},"content":"     * Checks if FindCommand is an exit command.","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"s7u4rt99"},"content":"     * @return false.","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"s7u4rt99"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-26"},{"lineNumber":51,"author":{"gitId":"s7u4rt99"},"content":"        return false;","lastModifiedDate":"2021-08-26"},{"lineNumber":52,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":53,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":54,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"s7u4rt99"},"content":"     * Executes the FindCommand.","lastModifiedDate":"2021-08-26"},{"lineNumber":56,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":57,"author":{"gitId":"s7u4rt99"},"content":"     * @param taskList TaskList object to find keyword from.","lastModifiedDate":"2021-09-06"},{"lineNumber":58,"author":{"gitId":"s7u4rt99"},"content":"     * @param archiveList ArchiveList to store archived tasks.","lastModifiedDate":"2021-09-07"},{"lineNumber":59,"author":{"gitId":"s7u4rt99"},"content":"     * @param ui Ui Object to print to user.","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"s7u4rt99"},"content":"     * @param storage Storage object which saves and loads the tasklist.","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-08-26"},{"lineNumber":63,"author":{"gitId":"s7u4rt99"},"content":"    public void execute(TaskList taskList, ArchiveList archiveList, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-07"},{"lineNumber":64,"author":{"gitId":"s7u4rt99"},"content":"        TaskList keywordTasks \u003d taskList.findTasksWithKeyword(this.keyword);","lastModifiedDate":"2021-09-06"},{"lineNumber":65,"author":{"gitId":"s7u4rt99"},"content":"        ui.printKeywordTasks(keywordTasks, this.keyword);","lastModifiedDate":"2021-08-26"},{"lineNumber":66,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":67,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":68,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":69,"author":{"gitId":"s7u4rt99"},"content":"     * Gets the String representation of the things printed in the","lastModifiedDate":"2021-09-06"},{"lineNumber":70,"author":{"gitId":"s7u4rt99"},"content":"     * execute method as well as execute the finding of the keyword.","lastModifiedDate":"2021-09-06"},{"lineNumber":71,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":72,"author":{"gitId":"s7u4rt99"},"content":"     * @param taskList TaskList object to find keyword from.","lastModifiedDate":"2021-09-06"},{"lineNumber":73,"author":{"gitId":"s7u4rt99"},"content":"     * @param archiveList ArchiveList to store archived tasks.","lastModifiedDate":"2021-09-07"},{"lineNumber":74,"author":{"gitId":"s7u4rt99"},"content":"     * @param ui Ui Object to get the String representation of the text printed.","lastModifiedDate":"2021-09-06"},{"lineNumber":75,"author":{"gitId":"s7u4rt99"},"content":"     * @param storage Storage object which saves and loads the tasklist.","lastModifiedDate":"2021-09-06"},{"lineNumber":76,"author":{"gitId":"s7u4rt99"},"content":"     * @return String representation of the things printed in the execute method.","lastModifiedDate":"2021-09-16"},{"lineNumber":77,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":78,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-09-02"},{"lineNumber":79,"author":{"gitId":"s7u4rt99"},"content":"    public String formatExecutedString(TaskList taskList, ArchiveList archiveList, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-07"},{"lineNumber":80,"author":{"gitId":"s7u4rt99"},"content":"        TaskList keywordTasks \u003d taskList.findTasksWithKeyword(this.keyword);","lastModifiedDate":"2021-09-06"},{"lineNumber":81,"author":{"gitId":"s7u4rt99"},"content":"        return ui.formatPrintKeywordTasksString(keywordTasks, this.keyword);","lastModifiedDate":"2021-09-06"},{"lineNumber":82,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":83,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"s7u4rt99":83}},{"path":"src/main/java/duke/command/ListArchiveCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke.command;","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"import duke.ArchiveList;","lastModifiedDate":"2021-09-07"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":"import duke.Storage;","lastModifiedDate":"2021-09-07"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":"import duke.TaskList;","lastModifiedDate":"2021-09-07"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"import duke.Ui;","lastModifiedDate":"2021-09-07"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"/**","lastModifiedDate":"2021-09-08"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":" * Representation for the list archive command on duke.","lastModifiedDate":"2021-09-08"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":" */","lastModifiedDate":"2021-09-08"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"public class ListArchiveCommand extends ListCommand {","lastModifiedDate":"2021-09-07"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-14"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"     * Factory method which generates the ListArchiveCommand from the userInput.","lastModifiedDate":"2021-09-14"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-14"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":"     * @return ListArchiveCommand to be executed.","lastModifiedDate":"2021-09-14"},{"lineNumber":17,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-14"},{"lineNumber":18,"author":{"gitId":"s7u4rt99"},"content":"    public static ListArchiveCommand generateCommand() {","lastModifiedDate":"2021-09-16"},{"lineNumber":19,"author":{"gitId":"s7u4rt99"},"content":"        return new ListArchiveCommand();","lastModifiedDate":"2021-09-14"},{"lineNumber":20,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":21,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":22,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":23,"author":{"gitId":"s7u4rt99"},"content":"     * Executes the ListArchiveCommand.","lastModifiedDate":"2021-09-07"},{"lineNumber":24,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":25,"author":{"gitId":"s7u4rt99"},"content":"     * @param taskList TaskList of Tasks which are unarchived.","lastModifiedDate":"2021-09-07"},{"lineNumber":26,"author":{"gitId":"s7u4rt99"},"content":"     * @param archiveList ArchiveList of Tasks to be listed.","lastModifiedDate":"2021-09-07"},{"lineNumber":27,"author":{"gitId":"s7u4rt99"},"content":"     * @param ui Ui to print to users of Duke.","lastModifiedDate":"2021-09-07"},{"lineNumber":28,"author":{"gitId":"s7u4rt99"},"content":"     * @param storage Storage to save and load TaskList of Duke.","lastModifiedDate":"2021-09-07"},{"lineNumber":29,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":30,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-09-07"},{"lineNumber":31,"author":{"gitId":"s7u4rt99"},"content":"    public void execute(TaskList taskList, ArchiveList archiveList, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-07"},{"lineNumber":32,"author":{"gitId":"s7u4rt99"},"content":"        ui.print(archiveList);","lastModifiedDate":"2021-09-07"},{"lineNumber":33,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":34,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":35,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":36,"author":{"gitId":"s7u4rt99"},"content":"     * Gets the String representation of the things printed in the","lastModifiedDate":"2021-09-07"},{"lineNumber":37,"author":{"gitId":"s7u4rt99"},"content":"     * execute method as well as execute list archive command.","lastModifiedDate":"2021-09-07"},{"lineNumber":38,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":39,"author":{"gitId":"s7u4rt99"},"content":"     * @param taskList TaskList of Tasks which are unarchived.","lastModifiedDate":"2021-09-07"},{"lineNumber":40,"author":{"gitId":"s7u4rt99"},"content":"     * @param archiveList ArchiveList of Tasks to be listed.","lastModifiedDate":"2021-09-07"},{"lineNumber":41,"author":{"gitId":"s7u4rt99"},"content":"     * @param ui Ui to get the String representation of the text printed.","lastModifiedDate":"2021-09-07"},{"lineNumber":42,"author":{"gitId":"s7u4rt99"},"content":"     * @param storage Storage to save and load TaskList of Duke.","lastModifiedDate":"2021-09-07"},{"lineNumber":43,"author":{"gitId":"s7u4rt99"},"content":"     * @return String representation of the things printed in the execute method.","lastModifiedDate":"2021-09-16"},{"lineNumber":44,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":45,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-09-07"},{"lineNumber":46,"author":{"gitId":"s7u4rt99"},"content":"    public String formatExecutedString(TaskList taskList, ArchiveList archiveList, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-07"},{"lineNumber":47,"author":{"gitId":"s7u4rt99"},"content":"        return ui.formatPrintString(archiveList);","lastModifiedDate":"2021-09-07"},{"lineNumber":48,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":49,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-09-07"}],"authorContributionMap":{"s7u4rt99":49}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke.command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"import duke.ArchiveList;","lastModifiedDate":"2021-09-07"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":" * Representation for the list command of Duke.","lastModifiedDate":"2021-09-08"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-14"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"     * Factory method which generates the ListCommand from the userInput.","lastModifiedDate":"2021-09-14"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-14"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":"     * @return ListCommand to be executed.","lastModifiedDate":"2021-09-14"},{"lineNumber":17,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-14"},{"lineNumber":18,"author":{"gitId":"s7u4rt99"},"content":"    public static ListCommand generateCommand() {","lastModifiedDate":"2021-09-16"},{"lineNumber":19,"author":{"gitId":"s7u4rt99"},"content":"        return new ListCommand();","lastModifiedDate":"2021-09-14"},{"lineNumber":20,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":21,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":22,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"s7u4rt99"},"content":"     * Checks if this is an exit command.","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"s7u4rt99"},"content":"     * @return false.","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"s7u4rt99"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"s7u4rt99"},"content":"        return false;","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"s7u4rt99"},"content":"     * Executes the ListCommand.","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"s7u4rt99"},"content":"     * @param taskList TaskList of Tasks to be listed.","lastModifiedDate":"2021-09-06"},{"lineNumber":36,"author":{"gitId":"s7u4rt99"},"content":"     * @param archiveList ArchiveList to store archived tasks.","lastModifiedDate":"2021-09-07"},{"lineNumber":37,"author":{"gitId":"s7u4rt99"},"content":"     * @param ui Ui to print to users of Duke.","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"s7u4rt99"},"content":"     * @param storage Storage to save and load TaskList of Duke.","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"s7u4rt99"},"content":"    public void execute(TaskList taskList, ArchiveList archiveList, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-07"},{"lineNumber":42,"author":{"gitId":"s7u4rt99"},"content":"        ui.print(taskList);","lastModifiedDate":"2021-09-06"},{"lineNumber":43,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":45,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":46,"author":{"gitId":"s7u4rt99"},"content":"     * Gets the String representation of the things printed in the","lastModifiedDate":"2021-09-06"},{"lineNumber":47,"author":{"gitId":"s7u4rt99"},"content":"     * execute method as well as execute list command.","lastModifiedDate":"2021-09-06"},{"lineNumber":48,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":49,"author":{"gitId":"s7u4rt99"},"content":"     * @param taskList TaskList of Tasks to be listed.","lastModifiedDate":"2021-09-06"},{"lineNumber":50,"author":{"gitId":"s7u4rt99"},"content":"     * @param archiveList ArchiveList to store archived tasks.","lastModifiedDate":"2021-09-07"},{"lineNumber":51,"author":{"gitId":"s7u4rt99"},"content":"     * @param ui Ui to get the String representation of the text printed.","lastModifiedDate":"2021-09-06"},{"lineNumber":52,"author":{"gitId":"s7u4rt99"},"content":"     * @param storage Storage to save and load TaskList of Duke.","lastModifiedDate":"2021-09-06"},{"lineNumber":53,"author":{"gitId":"s7u4rt99"},"content":"     * @return String representation of the things printed in the execute method.","lastModifiedDate":"2021-09-16"},{"lineNumber":54,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":55,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-09-02"},{"lineNumber":56,"author":{"gitId":"s7u4rt99"},"content":"    public String formatExecutedString(TaskList taskList, ArchiveList archiveList, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-07"},{"lineNumber":57,"author":{"gitId":"s7u4rt99"},"content":"        return ui.formatPrintString(taskList);","lastModifiedDate":"2021-09-06"},{"lineNumber":58,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":59,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"s7u4rt99":59}},{"path":"src/main/java/duke/command/UnarchiveCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke.command;","lastModifiedDate":"2021-09-08"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"import duke.ArchiveList;","lastModifiedDate":"2021-09-08"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":"import duke.Parser;","lastModifiedDate":"2021-09-14"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":"import duke.Storage;","lastModifiedDate":"2021-09-08"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"import duke.TaskList;","lastModifiedDate":"2021-09-08"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"import duke.Ui;","lastModifiedDate":"2021-09-08"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"import duke.exception.IncompleteUnarchiveException;","lastModifiedDate":"2021-09-14"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-08"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"/**","lastModifiedDate":"2021-09-08"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":" * Representation for the unarchive command on duke.","lastModifiedDate":"2021-09-08"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":" */","lastModifiedDate":"2021-09-08"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"public class UnarchiveCommand extends Command {","lastModifiedDate":"2021-09-08"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":"    private final int indexToUnarchive;","lastModifiedDate":"2021-09-08"},{"lineNumber":17,"author":{"gitId":"s7u4rt99"},"content":"    private final boolean isUnarchiveAll;","lastModifiedDate":"2021-09-08"},{"lineNumber":18,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":19,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":20,"author":{"gitId":"s7u4rt99"},"content":"     * Constructor for UnarchiveCommand.","lastModifiedDate":"2021-09-08"},{"lineNumber":21,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-08"},{"lineNumber":22,"author":{"gitId":"s7u4rt99"},"content":"     * @param indexToUnarchive index of task to be unarchived.","lastModifiedDate":"2021-09-08"},{"lineNumber":23,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":24,"author":{"gitId":"s7u4rt99"},"content":"    public UnarchiveCommand(int indexToUnarchive) {","lastModifiedDate":"2021-09-08"},{"lineNumber":25,"author":{"gitId":"s7u4rt99"},"content":"        this.indexToUnarchive \u003d indexToUnarchive;","lastModifiedDate":"2021-09-08"},{"lineNumber":26,"author":{"gitId":"s7u4rt99"},"content":"        this.isUnarchiveAll \u003d indexToUnarchive \u003d\u003d ALL;","lastModifiedDate":"2021-09-14"},{"lineNumber":27,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":28,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":29,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-14"},{"lineNumber":30,"author":{"gitId":"s7u4rt99"},"content":"     * Factory method which generates the UnarchiveCommand from the userInput.","lastModifiedDate":"2021-09-14"},{"lineNumber":31,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-14"},{"lineNumber":32,"author":{"gitId":"s7u4rt99"},"content":"     * @param userInput User Input which is used to generate the UnarchiveCommand.","lastModifiedDate":"2021-09-14"},{"lineNumber":33,"author":{"gitId":"s7u4rt99"},"content":"     * @param archiveList archiveList of duke.","lastModifiedDate":"2021-09-14"},{"lineNumber":34,"author":{"gitId":"s7u4rt99"},"content":"     * @return UnarchiveCommand to be executed.","lastModifiedDate":"2021-09-14"},{"lineNumber":35,"author":{"gitId":"s7u4rt99"},"content":"     * @throws IncompleteUnarchiveException if insufficient values are passed in.","lastModifiedDate":"2021-09-14"},{"lineNumber":36,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-14"},{"lineNumber":37,"author":{"gitId":"s7u4rt99"},"content":"    public static UnarchiveCommand generateCommand(","lastModifiedDate":"2021-09-14"},{"lineNumber":38,"author":{"gitId":"s7u4rt99"},"content":"            String userInput, ArchiveList archiveList) throws IncompleteUnarchiveException {","lastModifiedDate":"2021-09-16"},{"lineNumber":39,"author":{"gitId":"s7u4rt99"},"content":"        String[] separated \u003d userInput.split(\" \");","lastModifiedDate":"2021-09-14"},{"lineNumber":40,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":41,"author":{"gitId":"s7u4rt99"},"content":"        if (separated.length \u003d\u003d 1) {","lastModifiedDate":"2021-09-14"},{"lineNumber":42,"author":{"gitId":"s7u4rt99"},"content":"            throw new IncompleteUnarchiveException();","lastModifiedDate":"2021-09-14"},{"lineNumber":43,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-14"},{"lineNumber":44,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":45,"author":{"gitId":"s7u4rt99"},"content":"        if (Parser.isPositiveInteger(separated[1]) \u0026\u0026 !Parser.isOutOfRange(archiveList, separated[1])) {","lastModifiedDate":"2021-09-14"},{"lineNumber":46,"author":{"gitId":"s7u4rt99"},"content":"            return new UnarchiveCommand(Integer.valueOf(separated[1]) - 1);","lastModifiedDate":"2021-09-14"},{"lineNumber":47,"author":{"gitId":"s7u4rt99"},"content":"        } else if (Parser.isAll(separated[1])) {","lastModifiedDate":"2021-09-14"},{"lineNumber":48,"author":{"gitId":"s7u4rt99"},"content":"            return new UnarchiveCommand(ALL);","lastModifiedDate":"2021-09-14"},{"lineNumber":49,"author":{"gitId":"s7u4rt99"},"content":"        } else {","lastModifiedDate":"2021-09-14"},{"lineNumber":50,"author":{"gitId":"s7u4rt99"},"content":"            throw new IncompleteUnarchiveException();","lastModifiedDate":"2021-09-14"},{"lineNumber":51,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-14"},{"lineNumber":52,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":53,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":54,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":55,"author":{"gitId":"s7u4rt99"},"content":"     * Checks if this is an exit command.","lastModifiedDate":"2021-09-08"},{"lineNumber":56,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-08"},{"lineNumber":57,"author":{"gitId":"s7u4rt99"},"content":"     * @return false.","lastModifiedDate":"2021-09-08"},{"lineNumber":58,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":59,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-09-08"},{"lineNumber":60,"author":{"gitId":"s7u4rt99"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-09-08"},{"lineNumber":61,"author":{"gitId":"s7u4rt99"},"content":"        return false;","lastModifiedDate":"2021-09-08"},{"lineNumber":62,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":63,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":64,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":65,"author":{"gitId":"s7u4rt99"},"content":"     * Executes the Unarchive Command.","lastModifiedDate":"2021-09-08"},{"lineNumber":66,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-08"},{"lineNumber":67,"author":{"gitId":"s7u4rt99"},"content":"     * @param taskList taskList to store the unarchived task.","lastModifiedDate":"2021-09-08"},{"lineNumber":68,"author":{"gitId":"s7u4rt99"},"content":"     * @param archiveList archiveList which task at indexToUnarchive would be unarchived.","lastModifiedDate":"2021-09-08"},{"lineNumber":69,"author":{"gitId":"s7u4rt99"},"content":"     * @param ui Ui to get the String representation of the text printed.","lastModifiedDate":"2021-09-08"},{"lineNumber":70,"author":{"gitId":"s7u4rt99"},"content":"     * @param storage Storage to save and load TaskList for Duke.","lastModifiedDate":"2021-09-08"},{"lineNumber":71,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":72,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-09-08"},{"lineNumber":73,"author":{"gitId":"s7u4rt99"},"content":"    public void execute(TaskList taskList, ArchiveList archiveList, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-08"},{"lineNumber":74,"author":{"gitId":"s7u4rt99"},"content":"        String message;","lastModifiedDate":"2021-09-08"},{"lineNumber":75,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":76,"author":{"gitId":"s7u4rt99"},"content":"        if (this.isUnarchiveAll) {","lastModifiedDate":"2021-09-08"},{"lineNumber":77,"author":{"gitId":"s7u4rt99"},"content":"            message \u003d formatAndUnarchiveAll(taskList, archiveList);","lastModifiedDate":"2021-09-08"},{"lineNumber":78,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":79,"author":{"gitId":"s7u4rt99"},"content":"        } else {","lastModifiedDate":"2021-09-08"},{"lineNumber":80,"author":{"gitId":"s7u4rt99"},"content":"            message \u003d formatAndUnarchiveIndex(taskList, archiveList);","lastModifiedDate":"2021-09-08"},{"lineNumber":81,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":82,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-08"},{"lineNumber":83,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":84,"author":{"gitId":"s7u4rt99"},"content":"        storage.saveTaskList(taskList);","lastModifiedDate":"2021-09-16"},{"lineNumber":85,"author":{"gitId":"s7u4rt99"},"content":"        storage.saveArchive(archiveList);","lastModifiedDate":"2021-09-16"},{"lineNumber":86,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":87,"author":{"gitId":"s7u4rt99"},"content":"        ui.print(message);","lastModifiedDate":"2021-09-08"},{"lineNumber":88,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":89,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":90,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":91,"author":{"gitId":"s7u4rt99"},"content":"     * Gets the String representation of the things printed in the","lastModifiedDate":"2021-09-08"},{"lineNumber":92,"author":{"gitId":"s7u4rt99"},"content":"     * execute method as well as execute the unarchiving of the task at","lastModifiedDate":"2021-09-08"},{"lineNumber":93,"author":{"gitId":"s7u4rt99"},"content":"     * indexToBeUnarchived.","lastModifiedDate":"2021-09-08"},{"lineNumber":94,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-08"},{"lineNumber":95,"author":{"gitId":"s7u4rt99"},"content":"     * @param taskList taskList to store the unarchived task.","lastModifiedDate":"2021-09-08"},{"lineNumber":96,"author":{"gitId":"s7u4rt99"},"content":"     * @param archiveList archiveList which task at indexToUnarchive would be unarchived.","lastModifiedDate":"2021-09-08"},{"lineNumber":97,"author":{"gitId":"s7u4rt99"},"content":"     * @param ui Ui to get the String representation of the text printed.","lastModifiedDate":"2021-09-08"},{"lineNumber":98,"author":{"gitId":"s7u4rt99"},"content":"     * @param storage Storage to save and load TaskList for Duke.","lastModifiedDate":"2021-09-08"},{"lineNumber":99,"author":{"gitId":"s7u4rt99"},"content":"     * @return String representation of the things printed in the execute method.","lastModifiedDate":"2021-09-16"},{"lineNumber":100,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":101,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-09-08"},{"lineNumber":102,"author":{"gitId":"s7u4rt99"},"content":"    public String formatExecutedString(TaskList taskList, ArchiveList archiveList, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-08"},{"lineNumber":103,"author":{"gitId":"s7u4rt99"},"content":"        String message;","lastModifiedDate":"2021-09-08"},{"lineNumber":104,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":105,"author":{"gitId":"s7u4rt99"},"content":"        if (this.isUnarchiveAll) {","lastModifiedDate":"2021-09-08"},{"lineNumber":106,"author":{"gitId":"s7u4rt99"},"content":"            message \u003d formatAndUnarchiveAll(taskList, archiveList);","lastModifiedDate":"2021-09-08"},{"lineNumber":107,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":108,"author":{"gitId":"s7u4rt99"},"content":"        } else {","lastModifiedDate":"2021-09-08"},{"lineNumber":109,"author":{"gitId":"s7u4rt99"},"content":"            message \u003d formatAndUnarchiveIndex(taskList, archiveList);","lastModifiedDate":"2021-09-08"},{"lineNumber":110,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":111,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-08"},{"lineNumber":112,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":113,"author":{"gitId":"s7u4rt99"},"content":"        storage.saveTaskList(taskList);","lastModifiedDate":"2021-09-16"},{"lineNumber":114,"author":{"gitId":"s7u4rt99"},"content":"        storage.saveArchive(archiveList);","lastModifiedDate":"2021-09-16"},{"lineNumber":115,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":116,"author":{"gitId":"s7u4rt99"},"content":"        return message;","lastModifiedDate":"2021-09-08"},{"lineNumber":117,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":118,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":119,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":120,"author":{"gitId":"s7u4rt99"},"content":"     * Formats and unarchives task at indexToUnarchive in archiveList.","lastModifiedDate":"2021-09-08"},{"lineNumber":121,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-08"},{"lineNumber":122,"author":{"gitId":"s7u4rt99"},"content":"     * @param taskList taskList to add the unarchived task to.","lastModifiedDate":"2021-09-08"},{"lineNumber":123,"author":{"gitId":"s7u4rt99"},"content":"     * @param archiveList archiveList to unarchive the task.","lastModifiedDate":"2021-09-08"},{"lineNumber":124,"author":{"gitId":"s7u4rt99"},"content":"     * @return Returns formatted String to be printed to the user.","lastModifiedDate":"2021-09-08"},{"lineNumber":125,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":126,"author":{"gitId":"s7u4rt99"},"content":"    private String formatAndUnarchiveIndex(TaskList taskList, ArchiveList archiveList) {","lastModifiedDate":"2021-09-08"},{"lineNumber":127,"author":{"gitId":"s7u4rt99"},"content":"        Task toUnarchive \u003d archiveList.unarchive(indexToUnarchive, taskList);","lastModifiedDate":"2021-09-08"},{"lineNumber":128,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":129,"author":{"gitId":"s7u4rt99"},"content":"        return \"Noted. I\u0027ve unarchived this task:\\n\" + toUnarchive + \"\\nNow you have \"","lastModifiedDate":"2021-09-08"},{"lineNumber":130,"author":{"gitId":"s7u4rt99"},"content":"                + archiveList.getSize() + \" tasks in the archive list.\";","lastModifiedDate":"2021-09-08"},{"lineNumber":131,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":132,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":133,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":134,"author":{"gitId":"s7u4rt99"},"content":"     * Formats and unarchives all tasks in taskList.","lastModifiedDate":"2021-09-08"},{"lineNumber":135,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-08"},{"lineNumber":136,"author":{"gitId":"s7u4rt99"},"content":"     * @param taskList taskList to add all unarchived tasks to.","lastModifiedDate":"2021-09-08"},{"lineNumber":137,"author":{"gitId":"s7u4rt99"},"content":"     * @param archiveList archiveList to unarchive all the tasks.","lastModifiedDate":"2021-09-08"},{"lineNumber":138,"author":{"gitId":"s7u4rt99"},"content":"     * @return Returns formatted String to be printed to the user.","lastModifiedDate":"2021-09-08"},{"lineNumber":139,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":140,"author":{"gitId":"s7u4rt99"},"content":"    private String formatAndUnarchiveAll(TaskList taskList, ArchiveList archiveList) {","lastModifiedDate":"2021-09-08"},{"lineNumber":141,"author":{"gitId":"s7u4rt99"},"content":"        String message \u003d \"Noted. I\u0027ve unarchived these tasks:\\n\";","lastModifiedDate":"2021-09-08"},{"lineNumber":142,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":143,"author":{"gitId":"s7u4rt99"},"content":"        int counter \u003d 0;","lastModifiedDate":"2021-09-08"},{"lineNumber":144,"author":{"gitId":"s7u4rt99"},"content":"        int size \u003d archiveList.getSize();","lastModifiedDate":"2021-09-08"},{"lineNumber":145,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":146,"author":{"gitId":"s7u4rt99"},"content":"        for (int i \u003d 0; i \u003c size; i++) {","lastModifiedDate":"2021-09-08"},{"lineNumber":147,"author":{"gitId":"s7u4rt99"},"content":"            Task toUnarchive \u003d archiveList.unarchive(0, taskList);","lastModifiedDate":"2021-09-08"},{"lineNumber":148,"author":{"gitId":"s7u4rt99"},"content":"            counter++;","lastModifiedDate":"2021-09-08"},{"lineNumber":149,"author":{"gitId":"s7u4rt99"},"content":"            message +\u003d counter + \".\" + toUnarchive + \"\\n\";","lastModifiedDate":"2021-09-08"},{"lineNumber":150,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-08"},{"lineNumber":151,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":152,"author":{"gitId":"s7u4rt99"},"content":"        message +\u003d \"Now you have 0 tasks in the archive list.\";","lastModifiedDate":"2021-09-08"},{"lineNumber":153,"author":{"gitId":"s7u4rt99"},"content":"        return message;","lastModifiedDate":"2021-09-08"},{"lineNumber":154,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":155,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-09-08"}],"authorContributionMap":{"s7u4rt99":155}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke.exception;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":" * Represents an exception of Duke.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":"     * Constructor for DukeException.","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"     * @param message Error message.","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"    public DukeException(String message) {","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"        super(message);","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"s7u4rt99":16}},{"path":"src/main/java/duke/exception/IncompleteArchiveException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke.exception;","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"/**","lastModifiedDate":"2021-09-07"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":" * Represents exception where archive command has missing fields.","lastModifiedDate":"2021-09-07"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":" */","lastModifiedDate":"2021-09-07"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"public class IncompleteArchiveException extends DukeException {","lastModifiedDate":"2021-09-07"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"    private static String MESSAGE \u003d \"Please key in valid index to archive.\";","lastModifiedDate":"2021-09-07"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"     * Constructor for IncompleteDeadlineException.","lastModifiedDate":"2021-09-07"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"    public IncompleteArchiveException() {","lastModifiedDate":"2021-09-07"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"        super(MESSAGE);","lastModifiedDate":"2021-09-07"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-09-07"}],"authorContributionMap":{"s7u4rt99":15}},{"path":"src/main/java/duke/exception/IncompleteDeadlineException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke.exception;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":" * Representation for incomplete fields of Deadline exception.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"public class IncompleteDeadlineException extends DukeException {","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"    private static String MESSAGE \u003d \"OOPS!!! The description or date of a deadline is invalid or cannot be read.\";","lastModifiedDate":"2021-09-14"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"     * Constructor for IncompleteDeadlineException.","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"    public IncompleteDeadlineException() {","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"        super(MESSAGE);","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"s7u4rt99":16}},{"path":"src/main/java/duke/exception/IncompleteDeleteException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke.exception;","lastModifiedDate":"2021-09-16"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"/**","lastModifiedDate":"2021-09-16"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":" * Representation for incomplete fields of delete exception.","lastModifiedDate":"2021-09-16"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":" */","lastModifiedDate":"2021-09-16"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"public class IncompleteDeleteException extends DukeException {","lastModifiedDate":"2021-09-16"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"    private static String MESSAGE \u003d \"Please key in valid number to delete.\";","lastModifiedDate":"2021-09-16"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-16"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"     * Constructor for IncompleteDeleteException.","lastModifiedDate":"2021-09-16"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-16"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"    public IncompleteDeleteException() {","lastModifiedDate":"2021-09-16"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"        super(MESSAGE);","lastModifiedDate":"2021-09-16"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-16"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-09-16"}],"authorContributionMap":{"s7u4rt99":16}},{"path":"src/main/java/duke/exception/IncompleteDoneException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke.exception;","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"/**","lastModifiedDate":"2021-09-07"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":" * Representation for incomplete fields of Done exception.","lastModifiedDate":"2021-09-07"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":" */","lastModifiedDate":"2021-09-07"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"public class IncompleteDoneException extends DukeException {","lastModifiedDate":"2021-09-07"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"    private static String MESSAGE \u003d \"Please key in valid number to mark as done.\";","lastModifiedDate":"2021-09-07"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"     * Constructor for IncompleteDoneException.","lastModifiedDate":"2021-09-07"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"    public IncompleteDoneException() {","lastModifiedDate":"2021-09-07"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"        super(MESSAGE);","lastModifiedDate":"2021-09-07"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-09-07"}],"authorContributionMap":{"s7u4rt99":15}},{"path":"src/main/java/duke/exception/IncompleteEventException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke.exception;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":" * Representation for incomplete fields of Event exception.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"public class IncompleteEventException extends DukeException {","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"    private static String MESSAGE \u003d \"OOPS!!! The description or date of an event is invalid or cannot be read.\";","lastModifiedDate":"2021-09-14"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"     * Constructor for IncompleteEventException.","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"    public IncompleteEventException() {","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"        super(MESSAGE);","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"s7u4rt99":15}},{"path":"src/main/java/duke/exception/IncompleteFindException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke.exception;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":" * Representation for incomplete keyword for FindCommand exception.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"public class IncompleteFindException extends DukeException {","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"    private static String MESSAGE \u003d \"OOPS!!! Please remember to key in keyword to find!\";","lastModifiedDate":"2021-09-16"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"     * Constructor for IncompleteFindException.","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"    public IncompleteFindException() {","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"        super(MESSAGE);","lastModifiedDate":"2021-09-16"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"s7u4rt99":15}},{"path":"src/main/java/duke/exception/IncompleteToDoException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke.exception;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":" * Representation for incomplete fields of ToDoObject exception.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"public class IncompleteToDoException extends DukeException {","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"    private static String MESSAGE \u003d \"OOPS!!! The description of a todo cannot be empty.\";","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"     * Constructor for IncompleteToDoException.","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"    public IncompleteToDoException() {","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"        super(MESSAGE);","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"s7u4rt99":15}},{"path":"src/main/java/duke/exception/IncompleteUnarchiveException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke.exception;","lastModifiedDate":"2021-09-08"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"/**","lastModifiedDate":"2021-09-08"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":" * Represents exception where Unarchive command has missing fields.","lastModifiedDate":"2021-09-08"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":" */","lastModifiedDate":"2021-09-08"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":"public class IncompleteUnarchiveException extends DukeException {","lastModifiedDate":"2021-09-08"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"    private static String MESSAGE \u003d \"Please key in valid index to unarchive.\";","lastModifiedDate":"2021-09-08"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":"     * Constructor for IncompleteDeadlineException.","lastModifiedDate":"2021-09-08"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"    public IncompleteUnarchiveException() {","lastModifiedDate":"2021-09-08"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"        super(MESSAGE);","lastModifiedDate":"2021-09-08"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-09-08"}],"authorContributionMap":{"s7u4rt99":14}},{"path":"src/main/java/duke/exception/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke.exception;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":" * Representation for the invalid command exception.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"public class InvalidCommandException extends DukeException {","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"    private static String MESSAGE \u003d \"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"     * Constructor for InvalidCommandException.","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"    public InvalidCommandException() {","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"        super(MESSAGE);","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"s7u4rt99":15}},{"path":"src/main/java/duke/gui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke.gui;","lastModifiedDate":"2021-09-02"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":"import java.util.Collections;","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"import javafx.geometry.Insets;","lastModifiedDate":"2021-09-13"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"import javafx.scene.Node;","lastModifiedDate":"2021-09-02"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2021-09-02"},{"lineNumber":17,"author":{"gitId":"s7u4rt99"},"content":"import javafx.scene.shape.Circle;","lastModifiedDate":"2021-09-02"},{"lineNumber":18,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":19,"author":{"gitId":"s7u4rt99"},"content":"/**","lastModifiedDate":"2021-09-02"},{"lineNumber":20,"author":{"gitId":"s7u4rt99"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2021-09-02"},{"lineNumber":21,"author":{"gitId":"s7u4rt99"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2021-09-02"},{"lineNumber":22,"author":{"gitId":"s7u4rt99"},"content":" * containing text from the speaker.","lastModifiedDate":"2021-09-02"},{"lineNumber":23,"author":{"gitId":"s7u4rt99"},"content":" */","lastModifiedDate":"2021-09-02"},{"lineNumber":24,"author":{"gitId":"s7u4rt99"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2021-09-02"},{"lineNumber":25,"author":{"gitId":"s7u4rt99"},"content":"    @FXML","lastModifiedDate":"2021-09-02"},{"lineNumber":26,"author":{"gitId":"s7u4rt99"},"content":"    private Label dialog;","lastModifiedDate":"2021-09-02"},{"lineNumber":27,"author":{"gitId":"s7u4rt99"},"content":"    @FXML","lastModifiedDate":"2021-09-02"},{"lineNumber":28,"author":{"gitId":"s7u4rt99"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2021-09-02"},{"lineNumber":29,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":30,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":31,"author":{"gitId":"s7u4rt99"},"content":"     * Constructor for DialogBox, assigns the text to the Label and the image to be","lastModifiedDate":"2021-09-02"},{"lineNumber":32,"author":{"gitId":"s7u4rt99"},"content":"     * the display picture.","lastModifiedDate":"2021-09-02"},{"lineNumber":33,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":34,"author":{"gitId":"s7u4rt99"},"content":"     * @param text Text to be assigned to the Label.","lastModifiedDate":"2021-09-02"},{"lineNumber":35,"author":{"gitId":"s7u4rt99"},"content":"     * @param img Display Picture to be assigned to the Dialog Box.","lastModifiedDate":"2021-09-02"},{"lineNumber":36,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":37,"author":{"gitId":"s7u4rt99"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2021-09-02"},{"lineNumber":38,"author":{"gitId":"s7u4rt99"},"content":"        try {","lastModifiedDate":"2021-09-02"},{"lineNumber":39,"author":{"gitId":"s7u4rt99"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2021-09-02"},{"lineNumber":40,"author":{"gitId":"s7u4rt99"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2021-09-02"},{"lineNumber":41,"author":{"gitId":"s7u4rt99"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2021-09-02"},{"lineNumber":42,"author":{"gitId":"s7u4rt99"},"content":"            fxmlLoader.load();","lastModifiedDate":"2021-09-02"},{"lineNumber":43,"author":{"gitId":"s7u4rt99"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-02"},{"lineNumber":44,"author":{"gitId":"s7u4rt99"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-09-02"},{"lineNumber":45,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-02"},{"lineNumber":46,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":47,"author":{"gitId":"s7u4rt99"},"content":"        dialog.setText(text);","lastModifiedDate":"2021-09-02"},{"lineNumber":48,"author":{"gitId":"s7u4rt99"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2021-09-02"},{"lineNumber":49,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":50,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":51,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":52,"author":{"gitId":"s7u4rt99"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2021-09-02"},{"lineNumber":53,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":54,"author":{"gitId":"s7u4rt99"},"content":"    private void flip() {","lastModifiedDate":"2021-09-02"},{"lineNumber":55,"author":{"gitId":"s7u4rt99"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2021-09-02"},{"lineNumber":56,"author":{"gitId":"s7u4rt99"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2021-09-02"},{"lineNumber":57,"author":{"gitId":"s7u4rt99"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2021-09-02"},{"lineNumber":58,"author":{"gitId":"s7u4rt99"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2021-09-02"},{"lineNumber":59,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":60,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":61,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":62,"author":{"gitId":"s7u4rt99"},"content":"     * Sets the Dimensions of the Circle for the Profile Picture.","lastModifiedDate":"2021-09-02"},{"lineNumber":63,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":64,"author":{"gitId":"s7u4rt99"},"content":"     * @param centreX x coordinate of the centre.","lastModifiedDate":"2021-09-02"},{"lineNumber":65,"author":{"gitId":"s7u4rt99"},"content":"     * @param centreY y coordinate of the centre.","lastModifiedDate":"2021-09-02"},{"lineNumber":66,"author":{"gitId":"s7u4rt99"},"content":"     * @param radius radius of the circle.","lastModifiedDate":"2021-09-02"},{"lineNumber":67,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":68,"author":{"gitId":"s7u4rt99"},"content":"    public void setPictureDimensions(int centreX, int centreY, int radius) {","lastModifiedDate":"2021-09-02"},{"lineNumber":69,"author":{"gitId":"s7u4rt99"},"content":"        displayPicture.setClip(new Circle(centreX, centreY, radius));","lastModifiedDate":"2021-09-02"},{"lineNumber":70,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":71,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":72,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":73,"author":{"gitId":"s7u4rt99"},"content":"     * Creates a DialogBox for the User.","lastModifiedDate":"2021-09-02"},{"lineNumber":74,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":75,"author":{"gitId":"s7u4rt99"},"content":"     * @param text Text to be displayed by the User.","lastModifiedDate":"2021-09-02"},{"lineNumber":76,"author":{"gitId":"s7u4rt99"},"content":"     * @param img Display picture of the User.","lastModifiedDate":"2021-09-02"},{"lineNumber":77,"author":{"gitId":"s7u4rt99"},"content":"     * @return Dialog Box object for the User.","lastModifiedDate":"2021-09-02"},{"lineNumber":78,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":79,"author":{"gitId":"s7u4rt99"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2021-09-02"},{"lineNumber":80,"author":{"gitId":"s7u4rt99"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2021-09-02"},{"lineNumber":81,"author":{"gitId":"s7u4rt99"},"content":"        db.setPictureDimensions(48, 32, 30);","lastModifiedDate":"2021-09-13"},{"lineNumber":82,"author":{"gitId":"s7u4rt99"},"content":"        db.setStyle(\"-fx-background-color: #FFFFFF;\");","lastModifiedDate":"2021-09-02"},{"lineNumber":83,"author":{"gitId":"s7u4rt99"},"content":"        db.setLabelPadding(new Insets(0, 0, 0, 25));","lastModifiedDate":"2021-09-13"},{"lineNumber":84,"author":{"gitId":"s7u4rt99"},"content":"        return db;","lastModifiedDate":"2021-09-02"},{"lineNumber":85,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":86,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":87,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-14"},{"lineNumber":88,"author":{"gitId":"s7u4rt99"},"content":"     * Sets padding of Label.","lastModifiedDate":"2021-09-14"},{"lineNumber":89,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-14"},{"lineNumber":90,"author":{"gitId":"s7u4rt99"},"content":"     * @param insets Amount of padding to set for label.","lastModifiedDate":"2021-09-14"},{"lineNumber":91,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-14"},{"lineNumber":92,"author":{"gitId":"s7u4rt99"},"content":"    private void setLabelPadding(Insets insets) {","lastModifiedDate":"2021-09-13"},{"lineNumber":93,"author":{"gitId":"s7u4rt99"},"content":"        dialog.setPadding(insets);","lastModifiedDate":"2021-09-13"},{"lineNumber":94,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":95,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":96,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":97,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":98,"author":{"gitId":"s7u4rt99"},"content":"     * Creates a Dialog Box for Duke.","lastModifiedDate":"2021-09-02"},{"lineNumber":99,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":100,"author":{"gitId":"s7u4rt99"},"content":"     * @param text Text to be displayed by Duke.","lastModifiedDate":"2021-09-02"},{"lineNumber":101,"author":{"gitId":"s7u4rt99"},"content":"     * @param img Display picture of Duke.","lastModifiedDate":"2021-09-02"},{"lineNumber":102,"author":{"gitId":"s7u4rt99"},"content":"     * @return DialogBox object for Duke.","lastModifiedDate":"2021-09-02"},{"lineNumber":103,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":104,"author":{"gitId":"s7u4rt99"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2021-09-02"},{"lineNumber":105,"author":{"gitId":"s7u4rt99"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2021-09-02"},{"lineNumber":106,"author":{"gitId":"s7u4rt99"},"content":"        db.flip();","lastModifiedDate":"2021-09-02"},{"lineNumber":107,"author":{"gitId":"s7u4rt99"},"content":"        db.setPictureDimensions(57, 30, 30);","lastModifiedDate":"2021-09-02"},{"lineNumber":108,"author":{"gitId":"s7u4rt99"},"content":"        return db;","lastModifiedDate":"2021-09-02"},{"lineNumber":109,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":110,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"s7u4rt99":110}},{"path":"src/main/java/duke/gui/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke.gui;","lastModifiedDate":"2021-09-02"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":"/**","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":" * Represents the Launcher for the GUI.","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":" */","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"public class Launcher {","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"     * Executes the main method to launch the GUI.","lastModifiedDate":"2021-09-14"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"     * @param args Args for the main method.","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2021-09-02"},{"lineNumber":17,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":18,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"s7u4rt99":18}},{"path":"src/main/java/duke/gui/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke.gui;","lastModifiedDate":"2021-09-02"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":"import duke.Duke;","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"/**","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":" */","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":"public class Main extends Application {","lastModifiedDate":"2021-09-02"},{"lineNumber":17,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":18,"author":{"gitId":"s7u4rt99"},"content":"    private Duke duke \u003d new Duke();","lastModifiedDate":"2021-09-02"},{"lineNumber":19,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":20,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":21,"author":{"gitId":"s7u4rt99"},"content":"     * Starts the GUI","lastModifiedDate":"2021-09-02"},{"lineNumber":22,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":23,"author":{"gitId":"s7u4rt99"},"content":"     * @param stage Stage which we want to set the scene on.","lastModifiedDate":"2021-09-02"},{"lineNumber":24,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":25,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-09-02"},{"lineNumber":26,"author":{"gitId":"s7u4rt99"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2021-09-02"},{"lineNumber":27,"author":{"gitId":"s7u4rt99"},"content":"        try {","lastModifiedDate":"2021-09-02"},{"lineNumber":28,"author":{"gitId":"s7u4rt99"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2021-09-02"},{"lineNumber":29,"author":{"gitId":"s7u4rt99"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2021-09-02"},{"lineNumber":30,"author":{"gitId":"s7u4rt99"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2021-09-02"},{"lineNumber":31,"author":{"gitId":"s7u4rt99"},"content":"            stage.setScene(scene);","lastModifiedDate":"2021-09-02"},{"lineNumber":32,"author":{"gitId":"s7u4rt99"},"content":"            scene.getRoot().setStyle(\"-fx-font-family: \u0027Arial\u0027\"); //fix","lastModifiedDate":"2021-09-02"},{"lineNumber":33,"author":{"gitId":"s7u4rt99"},"content":"            stage.setTitle(\"StuDo\");","lastModifiedDate":"2021-09-13"},{"lineNumber":34,"author":{"gitId":"s7u4rt99"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2021-09-02"},{"lineNumber":35,"author":{"gitId":"s7u4rt99"},"content":"            stage.show();","lastModifiedDate":"2021-09-02"},{"lineNumber":36,"author":{"gitId":"s7u4rt99"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-02"},{"lineNumber":37,"author":{"gitId":"s7u4rt99"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-09-02"},{"lineNumber":38,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-02"},{"lineNumber":39,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":40,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"s7u4rt99":40}},{"path":"src/main/java/duke/gui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke.gui;","lastModifiedDate":"2021-09-02"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"import duke.Duke;","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":"import javafx.application.Platform;","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2021-09-02"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"/**","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":" */","lastModifiedDate":"2021-09-02"},{"lineNumber":17,"author":{"gitId":"s7u4rt99"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2021-09-02"},{"lineNumber":18,"author":{"gitId":"s7u4rt99"},"content":"    @FXML","lastModifiedDate":"2021-09-02"},{"lineNumber":19,"author":{"gitId":"s7u4rt99"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2021-09-02"},{"lineNumber":20,"author":{"gitId":"s7u4rt99"},"content":"    @FXML","lastModifiedDate":"2021-09-02"},{"lineNumber":21,"author":{"gitId":"s7u4rt99"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2021-09-02"},{"lineNumber":22,"author":{"gitId":"s7u4rt99"},"content":"    @FXML","lastModifiedDate":"2021-09-02"},{"lineNumber":23,"author":{"gitId":"s7u4rt99"},"content":"    private TextField userInput;","lastModifiedDate":"2021-09-02"},{"lineNumber":24,"author":{"gitId":"s7u4rt99"},"content":"    @FXML","lastModifiedDate":"2021-09-02"},{"lineNumber":25,"author":{"gitId":"s7u4rt99"},"content":"    private Button sendButton;","lastModifiedDate":"2021-09-02"},{"lineNumber":26,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":27,"author":{"gitId":"s7u4rt99"},"content":"    private Duke duke;","lastModifiedDate":"2021-09-02"},{"lineNumber":28,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":29,"author":{"gitId":"s7u4rt99"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/goat.png\"));","lastModifiedDate":"2021-09-02"},{"lineNumber":30,"author":{"gitId":"s7u4rt99"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/messi.png\"));","lastModifiedDate":"2021-09-02"},{"lineNumber":31,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":32,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":33,"author":{"gitId":"s7u4rt99"},"content":"    @FXML","lastModifiedDate":"2021-09-02"},{"lineNumber":34,"author":{"gitId":"s7u4rt99"},"content":"    public void initialize() {","lastModifiedDate":"2021-09-02"},{"lineNumber":35,"author":{"gitId":"s7u4rt99"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2021-09-02"},{"lineNumber":36,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":37,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":38,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":39,"author":{"gitId":"s7u4rt99"},"content":"     * Opens up the Duke object on the GUI.","lastModifiedDate":"2021-09-02"},{"lineNumber":40,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":41,"author":{"gitId":"s7u4rt99"},"content":"     * @param d Duke object opened on the GUI.","lastModifiedDate":"2021-09-02"},{"lineNumber":42,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":43,"author":{"gitId":"s7u4rt99"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2021-09-02"},{"lineNumber":44,"author":{"gitId":"s7u4rt99"},"content":"        duke \u003d d;","lastModifiedDate":"2021-09-02"},{"lineNumber":45,"author":{"gitId":"s7u4rt99"},"content":"        dialogContainer.getChildren().add(","lastModifiedDate":"2021-09-02"},{"lineNumber":46,"author":{"gitId":"s7u4rt99"},"content":"                DialogBox.getDukeDialog(\"Hello! I\u0027m StuDo!\\n\"","lastModifiedDate":"2021-09-13"},{"lineNumber":47,"author":{"gitId":"s7u4rt99"},"content":"                        + \"What can I do for you?\", dukeImage)","lastModifiedDate":"2021-09-02"},{"lineNumber":48,"author":{"gitId":"s7u4rt99"},"content":"        );","lastModifiedDate":"2021-09-02"},{"lineNumber":49,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":50,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":51,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":52,"author":{"gitId":"s7u4rt99"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2021-09-02"},{"lineNumber":53,"author":{"gitId":"s7u4rt99"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2021-09-02"},{"lineNumber":54,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":55,"author":{"gitId":"s7u4rt99"},"content":"    @FXML","lastModifiedDate":"2021-09-02"},{"lineNumber":56,"author":{"gitId":"s7u4rt99"},"content":"    private void handleUserInput() {","lastModifiedDate":"2021-09-02"},{"lineNumber":57,"author":{"gitId":"s7u4rt99"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2021-09-02"},{"lineNumber":58,"author":{"gitId":"s7u4rt99"},"content":"        String response \u003d duke.processInput(input);","lastModifiedDate":"2021-09-02"},{"lineNumber":59,"author":{"gitId":"s7u4rt99"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2021-09-02"},{"lineNumber":60,"author":{"gitId":"s7u4rt99"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2021-09-02"},{"lineNumber":61,"author":{"gitId":"s7u4rt99"},"content":"                DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2021-09-02"},{"lineNumber":62,"author":{"gitId":"s7u4rt99"},"content":"        );","lastModifiedDate":"2021-09-02"},{"lineNumber":63,"author":{"gitId":"s7u4rt99"},"content":"        if (input.equals(\"bye\")) {","lastModifiedDate":"2021-09-02"},{"lineNumber":64,"author":{"gitId":"s7u4rt99"},"content":"            Platform.exit();","lastModifiedDate":"2021-09-02"},{"lineNumber":65,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-09-02"},{"lineNumber":66,"author":{"gitId":"s7u4rt99"},"content":"        userInput.clear();","lastModifiedDate":"2021-09-02"},{"lineNumber":67,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":68,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-09-02"},{"lineNumber":69,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"s7u4rt99":69}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":" * Type of Task which has a deadline.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"    private String by;","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"     * Constructor for Deadline.","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"     * @param description Description of task.","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"     * @param by Deadline of task.","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":"        super(description);","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"s7u4rt99"},"content":"        this.by \u003d by;","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"s7u4rt99"},"content":"     * Converts Deadline object into String form to save.","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"s7u4rt99"},"content":"     * @return String form of Deadline object to save.","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"s7u4rt99"},"content":"    public String convertToString() {","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"s7u4rt99"},"content":"        return \"D|\" + super.convertToString() + \"|\" + by;","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"s7u4rt99"},"content":"     * Converts Deadline object to its String representation.","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"s7u4rt99"},"content":"     * @return String representation of Deadline object.","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":36,"author":{"gitId":"s7u4rt99"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":37,"author":{"gitId":"s7u4rt99"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";","lastModifiedDate":"2021-08-18"},{"lineNumber":38,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":39,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":40,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"s7u4rt99":40}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":" * Type of Task which is an Event.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"    private String duration;","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"     * Constructor for Event.","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"     * @param description Description of Event.","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"     * @param duration Duration of Event.","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"    public Event(String description, String duration) {","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":"        super(description);","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"s7u4rt99"},"content":"        this.duration \u003d duration;","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"s7u4rt99"},"content":"     * Converts Event object into String form to save.","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"s7u4rt99"},"content":"     * @return String form of Event object to save.","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"s7u4rt99"},"content":"    public String convertToString() {","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"s7u4rt99"},"content":"        return \"E|\" + super.convertToString() + \"|\" + duration;","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"s7u4rt99"},"content":"     * Converts Event object into its String representation.","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"s7u4rt99"},"content":"     * @return String representation of Event object.","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":36,"author":{"gitId":"s7u4rt99"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":37,"author":{"gitId":"s7u4rt99"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + duration + \")\";","lastModifiedDate":"2021-08-18"},{"lineNumber":38,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":39,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"s7u4rt99":39}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":" * Representation of Task to be done.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"public class Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"    private String description;","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"    private boolean isDone;","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"     * Constructor for Task.","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"     * @param description Description of Task.","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"    public Task(String description) {","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"s7u4rt99"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"s7u4rt99"},"content":"     * Gets the status icon of the Task.","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"s7u4rt99"},"content":"     * @return \"X\" if done, else \" \".","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"s7u4rt99"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-18"},{"lineNumber":26,"author":{"gitId":"s7u4rt99"},"content":"        return (isDone ? \"X\" : \" \");","lastModifiedDate":"2021-08-18"},{"lineNumber":27,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":28,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":29,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"s7u4rt99"},"content":"     * Marks the Task as done.","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"s7u4rt99"},"content":"    public void markAsDone() {","lastModifiedDate":"2021-08-18"},{"lineNumber":33,"author":{"gitId":"s7u4rt99"},"content":"        isDone \u003d true;","lastModifiedDate":"2021-08-18"},{"lineNumber":34,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":35,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":36,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"s7u4rt99"},"content":"     * Gets the status icon of the Task in a format suitable to save.","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"s7u4rt99"},"content":"     * @return \"1\" if done, else \"0\".","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"s7u4rt99"},"content":"    public String printStatusIcon() {","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"s7u4rt99"},"content":"        return (isDone) ? \"1\" : \"0\";","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"s7u4rt99"},"content":"     * Converts Task object into String form to save.","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"s7u4rt99"},"content":"     * @return {StatusIcon}|{description}.","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"s7u4rt99"},"content":"    public String convertToString() {","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"s7u4rt99"},"content":"        return printStatusIcon() + \"|\" + description;","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"s7u4rt99"},"content":"     * Checks if description of Task has given keyword.","lastModifiedDate":"2021-08-26"},{"lineNumber":56,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":57,"author":{"gitId":"s7u4rt99"},"content":"     * @param keyword Keyword to check if description of Task contains.","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"s7u4rt99"},"content":"     * @return true if Task contains keyword, else false.","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"s7u4rt99"},"content":"    public boolean hasKeyword(String keyword) {","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"s7u4rt99"},"content":"        String[] deconstructedDescription \u003d description.split(\" \");","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":63,"author":{"gitId":"s7u4rt99"},"content":"        for (int i \u003d 0; i \u003c deconstructedDescription.length; i++) {","lastModifiedDate":"2021-08-26"},{"lineNumber":64,"author":{"gitId":"s7u4rt99"},"content":"            if (deconstructedDescription[i].equals(keyword)) {","lastModifiedDate":"2021-08-26"},{"lineNumber":65,"author":{"gitId":"s7u4rt99"},"content":"                return true;","lastModifiedDate":"2021-08-26"},{"lineNumber":66,"author":{"gitId":"s7u4rt99"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":67,"author":{"gitId":"s7u4rt99"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":68,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":69,"author":{"gitId":"s7u4rt99"},"content":"        return false;","lastModifiedDate":"2021-08-26"},{"lineNumber":70,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":71,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":72,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":73,"author":{"gitId":"s7u4rt99"},"content":"     * Converts Task object into its String representation.","lastModifiedDate":"2021-08-26"},{"lineNumber":74,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":75,"author":{"gitId":"s7u4rt99"},"content":"     * @return String representation of Task object.","lastModifiedDate":"2021-08-26"},{"lineNumber":76,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":77,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":78,"author":{"gitId":"s7u4rt99"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":79,"author":{"gitId":"s7u4rt99"},"content":"        return \"[\" + getStatusIcon() + \"] \" + description;","lastModifiedDate":"2021-08-18"},{"lineNumber":80,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":81,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"s7u4rt99":81}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":" * Type of Task which is an Event.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"public class ToDo extends Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":"     * Constructor for ToDoObject.","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"     * @param description Description of ToDoObject.","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"    public ToDo(String description) {","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"        super(description);","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"s7u4rt99"},"content":"     * Converts ToDoObject into String form to save.","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"s7u4rt99"},"content":"     * @return String form of ToDoObject to save.","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"s7u4rt99"},"content":"    public String convertToString() {","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"s7u4rt99"},"content":"        return \"T|\" + super.convertToString();","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"s7u4rt99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"s7u4rt99"},"content":"     * Converts ToDoObject into its String representation.","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"s7u4rt99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"s7u4rt99"},"content":"     * @return String representation of ToDoObject.","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"s7u4rt99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"s7u4rt99"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":33,"author":{"gitId":"s7u4rt99"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":34,"author":{"gitId":"s7u4rt99"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2021-08-18"},{"lineNumber":35,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":36,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"s7u4rt99":36}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-color: #DCDCDC;\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/16\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e","lastModifiedDate":"2021-09-13"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"        \u003c/Label\u003e","lastModifiedDate":"2021-09-13"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"    \u003c/children\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":17,"author":{"gitId":"s7u4rt99"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"s7u4rt99":17}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/16\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.gui.MainWindow\"\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" promptText\u003d\"Type your message here...\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefWidth\u003d\"388.0\" maxHeight\u003d\"-Infinity\"/\u003e","lastModifiedDate":"2021-09-07"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":"            \u003c/content\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":17,"author":{"gitId":"s7u4rt99"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":18,"author":{"gitId":"s7u4rt99"},"content":"    \u003c/children\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":19,"author":{"gitId":"s7u4rt99"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"s7u4rt99":19}},{"path":"src/test/java/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"class ParserTest {","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"    void isValidDate_validDate_true() {","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"        assertTrue(Parser.isValidDate(\"1999-03-29\", DateTimeFormatter.ISO_LOCAL_DATE));","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"s7u4rt99"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"s7u4rt99"},"content":"    void isValidDate_invalidDate_false() {","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"s7u4rt99"},"content":"        assertFalse(Parser.isValidDate(\"1999/03/29\", DateTimeFormatter.ISO_LOCAL_DATE));","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"s7u4rt99"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"s7u4rt99"},"content":"    void isValidTime_validTime_true() {","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"s7u4rt99"},"content":"        assertTrue(Parser.isValidTime(\"23:59\", DateTimeFormatter.ISO_LOCAL_TIME));","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"s7u4rt99"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"s7u4rt99"},"content":"    void isValidTime_invalidTime_false() {","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"s7u4rt99"},"content":"        assertFalse(Parser.isValidTime(\"2359\", DateTimeFormatter.ISO_LOCAL_TIME));","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"s7u4rt99"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"s7u4rt99"},"content":"    void isDelete_correctForm_true() {","lastModifiedDate":"2021-09-16"},{"lineNumber":35,"author":{"gitId":"s7u4rt99"},"content":"        assertTrue(Parser.isDelete(\"delete 2\"));","lastModifiedDate":"2021-09-16"},{"lineNumber":36,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"s7u4rt99"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"s7u4rt99"},"content":"    void isDelete_incorrectForm_false() {","lastModifiedDate":"2021-09-16"},{"lineNumber":40,"author":{"gitId":"s7u4rt99"},"content":"        assertFalse(Parser.isDelete(\"delete2\"));","lastModifiedDate":"2021-09-16"},{"lineNumber":41,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"s7u4rt99"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"s7u4rt99"},"content":"    void isDone_correctFormAndLength_true() {","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"s7u4rt99"},"content":"        assertTrue(Parser.isDone(\"done \"));","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"s7u4rt99"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"s7u4rt99"},"content":"    void isDone_incorrectForm_false() {","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"s7u4rt99"},"content":"        assertFalse(Parser.isDone(\"done2\"));","lastModifiedDate":"2021-09-06"},{"lineNumber":51,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":52,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"s7u4rt99":52}},{"path":"src/test/java/duke/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"class TaskListTest {","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"s7u4rt99"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"s7u4rt99"},"content":"    void testGetSizeOfOne() {","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"s7u4rt99"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":"        tasks.add(new Task(\"taskTest\"));","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"s7u4rt99"},"content":"        assertEquals(1, new TaskList(tasks).getSize());","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"s7u4rt99"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"s7u4rt99"},"content":"    void testGetSizeOfZero() {","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"s7u4rt99"},"content":"        assertEquals(0, new TaskList().getSize());","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"s7u4rt99"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"s7u4rt99"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"s7u4rt99":24}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"s7u4rt99"},"content":"todo borrow book","lastModifiedDate":"2021-08-18"},{"lineNumber":2,"author":{"gitId":"s7u4rt99"},"content":"deadline return book /by Sunday","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"s7u4rt99"},"content":"event project meeting /at Mon 2-4pm","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"s7u4rt99"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"s7u4rt99"},"content":"done 2","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"s7u4rt99"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"s7u4rt99"},"content":"done 1","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"s7u4rt99"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"s7u4rt99"},"content":"done 3","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"s7u4rt99"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"s7u4rt99"},"content":"bye","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"s7u4rt99":11}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"s7u4rt99"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"s7u4rt99":1,"-":20}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"s7u4rt99"},"content":"find ../src/main/java/*/*/*.java  \u003e sources.txt","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"s7u4rt99"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"s7u4rt99"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin @sources.txt","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"s7u4rt99"},"content":"#if ! javac -cp ../src/main/java/duke/*/*.java -Xlint:none -d ../bin ../src/main/java/duke/*/*.java","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"s7u4rt99"},"content":"#then","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"s7u4rt99"},"content":"#    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"s7u4rt99"},"content":"#    exit 1","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"s7u4rt99"},"content":"#fi","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"s7u4rt99"},"content":"java -classpath ../bin duke/Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-08-31"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"s7u4rt99":9,"-":36}}]

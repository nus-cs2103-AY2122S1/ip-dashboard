{"authorDailyContributionsMap":{"pattan9955":[{"date":"2021-08-16","commitResults":[{"hash":"6b7b6fc58496389b3560725d4ae806423512ea04","messageTitle":"Implemented skeletal version of Duke with echo and exit functionality.","messageBody":"Added a Response class to deal with string formatting for responses.\n","tags":["Level-1"],"fileTypesAndContributionMap":{"java":{"insertions":60,"deletions":6}}},{"hash":"be6f3ab5b51d235dfbfded0b83d7d651c12d65c1","messageTitle":"Implemented adding of items to list. Implemented listing of stored items.","messageBody":"","tags":["Level-2"],"fileTypesAndContributionMap":{"java":{"insertions":30,"deletions":11}}}]},{"date":"2021-08-17","commitResults":[{"hash":"b0605cf5cac96475d15f04d294792867315adf42","messageTitle":"1) Implemented marking of tasks as completed. 2) Added a Task class to represent an individual Task. 3) Added a Tasklist class to handle the storing of Tasks in a list. 4) Edited Response.java to handle the printing of formatted strings as well.","messageBody":"","tags":["Level-3"],"fileTypesAndContributionMap":{"java":{"insertions":117,"deletions":24}}},{"hash":"c271fad8272fbdf284727744ccfc3845674999fb","messageTitle":"Added tracking for ToDo, Event and Deadline tasks. 1) Implemented counting of total tasks in list on addition of task. 2) Added individual classes for each task type to handle individual behaviour.","messageBody":"","tags":["Level-4"],"fileTypesAndContributionMap":{"java":{"insertions":126,"deletions":9}}},{"hash":"24859c0502b16a3cb9a4b79811cccd0bbd0ae9be","messageTitle":"Performed semi-automated testing of text UI 1) Tested basic functionality (startup text, event, todo, deadline, list, done, bye) 2) Fixed a bug where created events\u0027 descriptions would appear twice in the UI, stray print statement in code.","messageBody":"","tags":["A-TextUiTesting"],"fileTypesAndContributionMap":{"txt":{"insertions":11,"deletions":0},"java":{"insertions":0,"deletions":1}}}]},{"date":"2021-08-18","commitResults":[{"hash":"56e3d7b0948dd7307f97437eb203b0639a9bc2e4","messageTitle":"Added error handling for multiple edge cases. 1) Handled cases where the input to \"done\" is not a number or out of range. 2) Handled cases where \"todo\" is called without a valid description. 3) Handled cases where \"deadline\" is called without a valid description or due date. 4) Handled cases where \"event\" is called without a valid description or event date.","messageBody":"","tags":["Level-5"],"fileTypesAndContributionMap":{"java":{"insertions":99,"deletions":31}}},{"hash":"4c2951f0dcb35d3a1982bd0bcc0ef2761b857775","messageTitle":"Implemented delete functionality for tasks. 1) Fixed error handling for \"done\" when no argument was given.","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":68,"deletions":11}}}]},{"date":"2021-08-19","commitResults":[{"hash":"a5180b3fa7e27a2da9df0993bee92ffcd4d6052a","messageTitle":"Implemented bug fix for parsing 1) Split by \" /at \" and \" /by \" for events and deadlines respectively instead of \"/at\" and \"/by\".","messageBody":"","tags":["Level-6"],"fileTypesAndContributionMap":{"java":{"insertions":4,"deletions":4}}}]},{"date":"2021-08-24","commitResults":[{"hash":"c9e914c270185c5232e100f66dfd13137e138856","messageTitle":"Add persistent storage functionality to Duke The Duke application does not have any persistent storage ability, which means that tasks created during the lifespan of a single run of the application persists only until the user calls the \"bye\" command.","messageBody":"Creating a text file that acts as a form of storage for Duke will help to rectify this.\n\nLet\u0027s implement the persistent storage in a class called PersistentStorage that deals with both loading tasks from and saving tasks to said text file.\n","fileTypesAndContributionMap":{"txt":{"insertions":3,"deletions":0},"java":{"insertions":165,"deletions":2}}},{"hash":"8f43cf4b7b7c9a4454e30c90c9ccf534499bd1b1","messageTitle":"Add DateTime parsing for Deadlines and Events Due dates and event date times are stored as Strings which does not allow for searches by date or time.","messageBody":"Changing the internal representation of Deadline and Event objects to use Java DateTimes will allow us to rectify this.\n\nLet\u0027s change the constructors for Deadline and Event objects to accept a Java DateTime instead, which will be stored as an instance variable.\n","fileTypesAndContributionMap":{"java":{"insertions":34,"deletions":10}}}]},{"date":"2021-08-25","commitResults":[{"hash":"015f45af10f42c9911da180d1323d1bf5da362bf","messageTitle":"Update Persistent Storage to be compatible with use of Java DateTimes.","messageBody":"","tags":["Level-8"],"fileTypesAndContributionMap":{"txt":{"insertions":3,"deletions":3},"java":{"insertions":12,"deletions":6}}},{"hash":"5614bd9ced0af1199ed9eb56ec139787223d4b58","messageTitle":"Refactor code to improve abstraction and code design","messageBody":"Parsing, reading and execution of commands were all done in the main body of Duke.java which led to poor readability.\n\nAbstracting each function(parsing, reading, UI, persistence etc) improves the quality of the code and the readability.\n\nLet\u0027s abstract each function into its own class, and include additional classes for individual commands.\n","tags":["A-MoreOOP"],"fileTypesAndContributionMap":{"txt":{"insertions":1,"deletions":3},"java":{"insertions":447,"deletions":276}}},{"hash":"7c4ca56a05d2ff7a12750b93f9aa8d38e9e44049","messageTitle":"Organize classes into packages for easy navigation","messageBody":"Having all the classes in the main /java directory makes the application disorganized and hard to navigate.\n\nDividing the classes into folders based on their logical groupings (e.g. commands, tasks) makes the project easier to navigate and organize.\n\nLet\u0027s group the Command related classes (e.g. DeadlineCommand.java) and the Task related classes (e.g. ToDo.java) into their own packages.\n","tags":["A-Packages"],"fileTypesAndContributionMap":{"java":{"insertions":83,"deletions":0}}},{"hash":"706729f99f4ce58076653aae8c0126d13ba07eb3","messageTitle":"Add JUnit tests","messageBody":"There is a need for validation of the various Duke classes.\n\nIn order to achieve this, JUnit tests that focus on testing the Duke commands and tasks classes are required.\n\nLet\u0027s do so by adding JUnit tests that test the aforementioned classes.\n","tags":["A-JUnit"],"fileTypesAndContributionMap":{"java":{"insertions":62,"deletions":0}}}]},{"date":"2021-08-26","commitResults":[{"hash":"73590bb56e6cb77c2224880bf40d44bacc927d8a","messageTitle":"Add JavaDocs for all classes in Duke","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":547,"deletions":88}}},{"hash":"b51cb026e4c282627e482c649d18117d28227362","messageTitle":"Tweak code to comply with coding standard","messageBody":"Some classes currently do not fully comply with the coding standard, with examples being wildcard imports in some classes.\n\nTweaking the code to comply with the coding standard improves the readability of the code.\n\nLet\u0027s ensure the codebase follows this coding standard by making necessary edits to code style.\n","fileTypesAndContributionMap":{"java":{"insertions":37,"deletions":46}}},{"hash":"9d9dc57a077745fe8179f347e2851d2c3705e8dd","messageTitle":"Implement find functionality","messageBody":"Duke did not have a search functionality which made it hard for users to find previously made tasks.\n\nThe introduction of this command will help improve user friendliness of Duke.\n\nLet\u0027s implement find functionality as a Command type and update the UI and Tasklistss classes to be able to accommodate this functionality.\n","fileTypesAndContributionMap":{"txt":{"insertions":3,"deletions":0},"java":{"insertions":111,"deletions":0}}},{"hash":"ae0901b1c2bc5f22d872263c004180ed79b21676","messageTitle":"Fix for minor typo in JavaDoc","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":1,"deletions":1}}},{"hash":"9d7db543af25e13e9e05485e60b30e89b06598d8","messageTitle":"Fix FindCommand import in Parser.java","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":1,"deletions":0}}}]},{"date":"2021-09-03","commitResults":[{"hash":"a0cb20725366207d2af11e5af6cadb9fe07cd1ab","messageTitle":"Add CheckStyle checking functionality and fix coding standard violations There is a need to ensure code adheres to a coding standard in order to maintain its readability.","messageBody":"Adding CheckStyle functionality that can be used together with Gradle can help to ensure a fixed coding standard throughout the project.\n\nLet\u0027s add the configuration files for the CheckStyle functionality and fix any coding standard violations found by CheckStyle.\n","fileTypesAndContributionMap":{"txt":{"insertions":3,"deletions":1},"java":{"insertions":87,"deletions":115}}},{"hash":"a4b62091568ffb19bb6d8d3d9fe19fb899f67adc","messageTitle":"Fix more coding standard violations in test classes","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":21,"deletions":19}}}]},{"date":"2021-09-05","commitResults":[{"hash":"740a2b02cb2999ad2a0b802cefd3191dfc77f396","messageTitle":"Add GUI for Duke Interaction with the Duke application is done completely through the command line interface.","messageBody":"Adding a GUI will help to improve the overall user experience and make it more approachable to new users.\n\nTo that end, let\u0027s implement the GUI using JavaFX and remove the existing command line interface.\n","fileTypesAndContributionMap":{"gradle":{"insertions":16,"deletions":0},"txt":{"insertions":1,"deletions":2},"fxml":{"insertions":35,"deletions":0},"java":{"insertions":455,"deletions":368}}}]},{"date":"2021-09-11","commitResults":[{"hash":"4771d92ad8c4f29470a1dc71911b8243944610c8","messageTitle":"Add assertions to main codebase","messageBody":"A good number of functions and methods in Duke utilize some form of user input which is prone to errors.\nThis is particularly true for methods that deal with parsing of user data.\n\nEnsuring certain assumptions about the code holds will help with ensuring the correctness of the code now\nand in future.\n\nAs a step towards such an assurance, let\u0027s add assertions to the codebase, in particular the Parser and Tasklist\nclasses, in particular for methods that utilize user input. Doing so will help ensure the correctness of the code.\n","fileTypesAndContributionMap":{"gradle":{"insertions":5,"deletions":1},"java":{"insertions":41,"deletions":0}}}]},{"date":"2021-09-12","commitResults":[{"hash":"95c993122a415ffdd7c8e9e23afb6f01c1c9250b","messageTitle":"Fix codebase\u0027s code quality","messageBody":"There are several methods in Duke that do not obey best practices\nfor coding quality, with several lengthy methods, particularly in\nParser.\n\nRefactoring the relevant portions makes for more readable and\nbetter documented code, that improves the ease of future\ndevelopment.\n\nTo this end, let\u0027s refactor the code base by abstracting repeated\nportions of code into separate methods, and shortening the lengthy\n\"parse\" method using switch statements and enums. This will help\nimprove the quality of the code overall.\n","tags":["A-FullCommitMessage"],"fileTypesAndContributionMap":{"txt":{"insertions":3,"deletions":1},"java":{"insertions":254,"deletions":205}}}]},{"date":"2021-09-13","commitResults":[{"hash":"a126c0c8421d3150d7ca2360a8380af001c74640","messageTitle":"Add support for DoAfter tasks","messageBody":"Support already exists for a variety of task types, including\nToDos, Deadlines and Events, with the ability to add datetime\ninformation for relevant task types.\n\nAdding support for DoAfter tasks provides end-users with more\nflexibility in task management when using the app.\n\nTo this end, let\u0027s implement support for a \"doafter\" command which\nallows users to create a DoAfter task by\n* Updating the Parser to parse \"doafter\" commands\n* Updating PersistentStorage to read/write DoAfter tasks to file\n* Adding a new DoAfterCommand type\n","fileTypesAndContributionMap":{"txt":{"insertions":2,"deletions":2},"java":{"insertions":186,"deletions":40}}}]},{"date":"2021-09-16","commitResults":[{"hash":"585c4d1625c6ce2e73c007f5d6b8278d85d53f87","messageTitle":"Improve GUI of Duke","messageBody":"The GUI of Duke needs to add value to the program, with one such way\nbeing added readability.\n\nAdding visual elements to the GUI that help with the readability would\nhelp with the overall user experience.\n\nTo this end, let\u0027s demarcate the different dialog boxes used (by Duke vs\nthe user) through the use of different colours, and clip the profile\npictures into a circle for aesthetics.\n","fileTypesAndContributionMap":{"txt":{"insertions":2,"deletions":2},"fxml":{"insertions":2,"deletions":2},"java":{"insertions":49,"deletions":9}}}]}]},"authorFileTypeContributionMap":{"pattan9955":{"java":1849,"md":0,"fxml":35,"sh":0,"bat":0,"gradle":21,"txt":18}},"authorContributionVariance":{"pattan9955":58242.277},"authorDisplayNameMap":{"pattan9955":"CS2103T-W11-1 PATR..EONG"}}

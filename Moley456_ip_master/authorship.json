[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"Moley456"},"content":"# duke.Duke project template","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"Moley456"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Moley456":2,"-":22}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"Moley456"},"content":"    mainClassName \u003d \"duke.Duke\"","lastModifiedDate":"2021-08-31"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Moley456":1,"-":45}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Moley456"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"Moley456"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"Moley456"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"Moley456"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"Moley456"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"Moley456"},"content":" * The class for the chat bot, Duke","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"Moley456"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":13,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"Moley456"},"content":"    /** Storage object to save to and load from the data file */","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"Moley456"},"content":"    private Storage storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"Moley456"},"content":"    /** List of all the Tasks */","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"Moley456"},"content":"    private TaskList tasks;","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"Moley456"},"content":"    /** Ui object to handle the UI output to the user */","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"Moley456"},"content":"    private Ui ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"Moley456"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"Moley456"},"content":"     * Constructor for Duke class.","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"Moley456"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"Moley456"},"content":"     * @param filePath The specified filepath to save and load the data file.","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"Moley456"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"Moley456"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"Moley456"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"Moley456"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"Moley456"},"content":"        tasks \u003d storage.load();","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"Moley456"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"Moley456"},"content":"    private void run() {","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"Moley456"},"content":"        //Welcome message","lastModifiedDate":"2021-08-19"},{"lineNumber":34,"author":{"gitId":"Moley456"},"content":"        ui.printWelcomeMessage();","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":36,"author":{"gitId":"Moley456"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-19"},{"lineNumber":37,"author":{"gitId":"Moley456"},"content":"        Parser parser \u003d new Parser(tasks);","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"Moley456"},"content":"        boolean end \u003d false;","lastModifiedDate":"2021-08-19"},{"lineNumber":39,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":40,"author":{"gitId":"Moley456"},"content":"        //Main functionality of duke.Duke","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"Moley456"},"content":"        while (!end) {","lastModifiedDate":"2021-08-19"},{"lineNumber":42,"author":{"gitId":"Moley456"},"content":"            String command \u003d \"\";","lastModifiedDate":"2021-08-19"},{"lineNumber":43,"author":{"gitId":"Moley456"},"content":"            if (sc.hasNextLine()) {","lastModifiedDate":"2021-08-19"},{"lineNumber":44,"author":{"gitId":"Moley456"},"content":"                command \u003d sc.nextLine().trim();","lastModifiedDate":"2021-08-19"},{"lineNumber":45,"author":{"gitId":"Moley456"},"content":"            }","lastModifiedDate":"2021-08-19"},{"lineNumber":46,"author":{"gitId":"Moley456"},"content":"            try {","lastModifiedDate":"2021-08-19"},{"lineNumber":47,"author":{"gitId":"Moley456"},"content":"                if (parser.parse(command) \u003d\u003d 1) {","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"Moley456"},"content":"                    end \u003d true;","lastModifiedDate":"2021-08-19"},{"lineNumber":49,"author":{"gitId":"Moley456"},"content":"                    ui.printGoodbyeMessage();","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"Moley456"},"content":"                    storage.save(tasks);","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"Moley456"},"content":"                }","lastModifiedDate":"2021-08-19"},{"lineNumber":52,"author":{"gitId":"Moley456"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2021-08-19"},{"lineNumber":53,"author":{"gitId":"Moley456"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2021-08-19"},{"lineNumber":54,"author":{"gitId":"Moley456"},"content":"            }","lastModifiedDate":"2021-08-19"},{"lineNumber":55,"author":{"gitId":"Moley456"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":56,"author":{"gitId":"Moley456"},"content":"        sc.close();","lastModifiedDate":"2021-08-19"},{"lineNumber":57,"author":{"gitId":"Moley456"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":58,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":59,"author":{"gitId":"Moley456"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-19"},{"lineNumber":60,"author":{"gitId":"Moley456"},"content":"        new Duke(\"data/duke.txt\").run();","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"Moley456":59,"-":3}},{"path":"src/main/java/duke/Exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Moley456"},"content":"package duke.exception;","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"Moley456"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"Moley456"},"content":" * A class that represents exceptions thrown when using Duke.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"Moley456"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"Moley456"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"Moley456"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"Moley456"},"content":"     * Constructs a DukeException with the given error message.","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"Moley456"},"content":"     * @param message The given error message.","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"Moley456"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"Moley456"},"content":"    public DukeException(String message) {","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"Moley456"},"content":"        super(message);","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"Moley456"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"Moley456"},"content":"}","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"Moley456":15}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Moley456"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"Moley456"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"Moley456"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"Moley456"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"Moley456"},"content":"import duke.task.Event;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"Moley456"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"Moley456"},"content":"import duke.task.ToDo;","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"Moley456"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"Moley456"},"content":" * Handles the user commands to Duke and executes commands accordingly.","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"Moley456"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"Moley456"},"content":"public class Parser {","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"Moley456"},"content":"    /** The task list to execute the commands to. */","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"Moley456"},"content":"    private TaskList tasks;","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"Moley456"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"Moley456"},"content":"     * Constructs a Parser object that will handles user commands and execute","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"Moley456"},"content":"     * them accordingly.","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"Moley456"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"Moley456"},"content":"     * @param tasks The TaskList that the commands will affect.","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"Moley456"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"Moley456"},"content":"    public Parser(TaskList tasks) {","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"Moley456"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"Moley456"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"Moley456"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"Moley456"},"content":"     * Reads the user commands and executes the commands accordingly.","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"Moley456"},"content":"     * Messages will be printed if the user enters invalid commands.","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"Moley456"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"Moley456"},"content":"     * @param command The user command to be read.","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"Moley456"},"content":"     * @return If the user does not exit the program, the integer 0 will be returned.","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"Moley456"},"content":"     * Else if the user does exit the program, the integer 1 will be returned.","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"Moley456"},"content":"     * @throws DukeException If the user enters an invalid input command, a DukeException","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"Moley456"},"content":"     * will be thrown.","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"Moley456"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"Moley456"},"content":"    public int parse(String command) throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"Moley456"},"content":"        String[] commandSplit \u003d command.split(\" \", 2);","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"Moley456"},"content":"        String commandWord \u003d commandSplit[0].toLowerCase();","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"Moley456"},"content":"        String commandDesc \u003d \"\";","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"Moley456"},"content":"        if (commandSplit.length \u003d\u003d 2) {","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"Moley456"},"content":"            commandDesc \u003d commandSplit[1];","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"Moley456"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"Moley456"},"content":"        switch (commandWord) {","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"Moley456"},"content":"        case \"done\":","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"Moley456"},"content":"            if (commandDesc.equals(\"\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"Moley456"},"content":"                throw new DukeException(\"\\tOOPS!!! Please specify the task number for the task \"","lastModifiedDate":"2021-08-31"},{"lineNumber":51,"author":{"gitId":"Moley456"},"content":"                        + \"you want to complete.\");","lastModifiedDate":"2021-08-31"},{"lineNumber":52,"author":{"gitId":"Moley456"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"Moley456"},"content":"            try {","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"Moley456"},"content":"                int taskNumber \u003d Integer.parseInt(commandDesc);","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"Moley456"},"content":"                this.tasks.markDone(taskNumber - 1);","lastModifiedDate":"2021-08-26"},{"lineNumber":56,"author":{"gitId":"Moley456"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"Moley456"},"content":"                System.out.println(\"\\tOOPS!!! Please input a task number instead.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"Moley456"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"Moley456"},"content":"            break;","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"Moley456"},"content":"        case \"list\":","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"Moley456"},"content":"            this.tasks.listTasks();","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"Moley456"},"content":"            break;","lastModifiedDate":"2021-08-26"},{"lineNumber":65,"author":{"gitId":"Moley456"},"content":"        case \"todo\":","lastModifiedDate":"2021-08-26"},{"lineNumber":66,"author":{"gitId":"Moley456"},"content":"            if (commandDesc.equals(\"\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"Moley456"},"content":"                throw new DukeException(\"\\tOOPS!!! The description of a todo cannot be empty.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"Moley456"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"Moley456"},"content":"            this.tasks.addTask(new ToDo(commandDesc));","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"Moley456"},"content":"            break;","lastModifiedDate":"2021-08-26"},{"lineNumber":72,"author":{"gitId":"Moley456"},"content":"        case \"deadline\":","lastModifiedDate":"2021-08-26"},{"lineNumber":73,"author":{"gitId":"Moley456"},"content":"            if (commandDesc.equals(\"\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"Moley456"},"content":"                throw new DukeException(\"\\tOOPS!!! The description of a deadline cannot be empty.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"Moley456"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":76,"author":{"gitId":"Moley456"},"content":"            try {","lastModifiedDate":"2021-08-25"},{"lineNumber":77,"author":{"gitId":"Moley456"},"content":"                String[] commandDescSplit \u003d commandDesc.split(\"/by\");","lastModifiedDate":"2021-08-25"},{"lineNumber":78,"author":{"gitId":"Moley456"},"content":"                String dateAndTime \u003d commandDescSplit[1].trim();","lastModifiedDate":"2021-08-25"},{"lineNumber":79,"author":{"gitId":"Moley456"},"content":"                String[] dateAndTimeSplit \u003d dateAndTime.split(\" \");","lastModifiedDate":"2021-08-25"},{"lineNumber":80,"author":{"gitId":"Moley456"},"content":"                String date \u003d dateAndTimeSplit[0];","lastModifiedDate":"2021-08-25"},{"lineNumber":81,"author":{"gitId":"Moley456"},"content":"                String time \u003d dateAndTimeSplit[1];","lastModifiedDate":"2021-08-25"},{"lineNumber":82,"author":{"gitId":"Moley456"},"content":"                this.tasks.addTask(new Deadline(commandDescSplit[0].trim(), date, time));","lastModifiedDate":"2021-08-25"},{"lineNumber":83,"author":{"gitId":"Moley456"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":84,"author":{"gitId":"Moley456"},"content":"                throw new DukeException(\"You\u0027ve entered a date or time in an invalid format! \"","lastModifiedDate":"2021-08-31"},{"lineNumber":85,"author":{"gitId":"Moley456"},"content":"                        + \"\\nIt should be in the form: yyyy-mm-dd hrs:mins\");","lastModifiedDate":"2021-08-31"},{"lineNumber":86,"author":{"gitId":"Moley456"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":87,"author":{"gitId":"Moley456"},"content":"            break;","lastModifiedDate":"2021-08-26"},{"lineNumber":88,"author":{"gitId":"Moley456"},"content":"        case \"event\":","lastModifiedDate":"2021-08-26"},{"lineNumber":89,"author":{"gitId":"Moley456"},"content":"            if (commandDesc.equals(\"\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":90,"author":{"gitId":"Moley456"},"content":"                throw new DukeException(\"\\tOOPS!!! The description of a event cannot be empty.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":91,"author":{"gitId":"Moley456"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":92,"author":{"gitId":"Moley456"},"content":"            String[] commandDescSplit \u003d commandDesc.split(\"/at\");","lastModifiedDate":"2021-08-25"},{"lineNumber":93,"author":{"gitId":"Moley456"},"content":"            this.tasks.addTask(new Event(commandDescSplit[0].trim(), commandDescSplit[1].trim()));","lastModifiedDate":"2021-08-25"},{"lineNumber":94,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":95,"author":{"gitId":"Moley456"},"content":"            break;","lastModifiedDate":"2021-08-26"},{"lineNumber":96,"author":{"gitId":"Moley456"},"content":"        case \"delete\":","lastModifiedDate":"2021-08-26"},{"lineNumber":97,"author":{"gitId":"Moley456"},"content":"            if (commandDesc.equals(\"\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":98,"author":{"gitId":"Moley456"},"content":"                throw new DukeException(\"\\tOOPS!!! Please specify the task number for the task \"","lastModifiedDate":"2021-08-31"},{"lineNumber":99,"author":{"gitId":"Moley456"},"content":"                        + \"you want to delete.\");","lastModifiedDate":"2021-08-31"},{"lineNumber":100,"author":{"gitId":"Moley456"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":101,"author":{"gitId":"Moley456"},"content":"            try {","lastModifiedDate":"2021-08-25"},{"lineNumber":102,"author":{"gitId":"Moley456"},"content":"                int taskNumber \u003d Integer.parseInt(commandDesc);","lastModifiedDate":"2021-08-25"},{"lineNumber":103,"author":{"gitId":"Moley456"},"content":"                this.tasks.deleteTask(taskNumber - 1);","lastModifiedDate":"2021-08-26"},{"lineNumber":104,"author":{"gitId":"Moley456"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":105,"author":{"gitId":"Moley456"},"content":"                System.out.println(\"\\tOOPS!!! Please input a task number instead.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":106,"author":{"gitId":"Moley456"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":107,"author":{"gitId":"Moley456"},"content":"            break;","lastModifiedDate":"2021-08-26"},{"lineNumber":108,"author":{"gitId":"Moley456"},"content":"        case \"find\":","lastModifiedDate":"2021-08-26"},{"lineNumber":109,"author":{"gitId":"Moley456"},"content":"            if (commandDesc.equals(\"\")) {","lastModifiedDate":"2021-08-26"},{"lineNumber":110,"author":{"gitId":"Moley456"},"content":"                throw new DukeException(\"\\tOOPS!!! The description of a event cannot be empty.\");","lastModifiedDate":"2021-08-26"},{"lineNumber":111,"author":{"gitId":"Moley456"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":112,"author":{"gitId":"Moley456"},"content":"            this.tasks.findTask(commandDesc.toLowerCase());","lastModifiedDate":"2021-08-26"},{"lineNumber":113,"author":{"gitId":"Moley456"},"content":"            break;","lastModifiedDate":"2021-08-26"},{"lineNumber":114,"author":{"gitId":"Moley456"},"content":"        case \"bye\":","lastModifiedDate":"2021-08-26"},{"lineNumber":115,"author":{"gitId":"Moley456"},"content":"            return 1;","lastModifiedDate":"2021-08-25"},{"lineNumber":116,"author":{"gitId":"Moley456"},"content":"        default:","lastModifiedDate":"2021-08-26"},{"lineNumber":117,"author":{"gitId":"Moley456"},"content":"            throw new DukeException(\"\\tOOPS!!! You have entered an invalid command, please try again!\");","lastModifiedDate":"2021-08-25"},{"lineNumber":118,"author":{"gitId":"Moley456"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":119,"author":{"gitId":"Moley456"},"content":"        return 0;","lastModifiedDate":"2021-08-25"},{"lineNumber":120,"author":{"gitId":"Moley456"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":121,"author":{"gitId":"Moley456"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"Moley456":121}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Moley456"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"Moley456"},"content":"import java.io.File;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"Moley456"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"Moley456"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"Moley456"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"Moley456"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"Moley456"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"Moley456"},"content":"import duke.task.Event;","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"Moley456"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"Moley456"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"Moley456"},"content":"import duke.task.ToDo;","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"Moley456"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"Moley456"},"content":" * Handles the interactions with the data file.","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"Moley456"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"Moley456"},"content":"public class Storage {","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"Moley456"},"content":"    /** The relative file path of the data file. */","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"Moley456"},"content":"    private String filepath;","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"Moley456"},"content":"    /** Constructs a Storage object to handle the interactions with the data file. */","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"Moley456"},"content":"    public Storage(String filepath) {","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"Moley456"},"content":"        this.filepath \u003d filepath;","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"Moley456"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"Moley456"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"Moley456"},"content":"     * Saves the user\u0027s TaskList to the data file when the user exits the program.","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"Moley456"},"content":"     * If the data file does not exist the the file path, a new data file is created","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"Moley456"},"content":"     * for the user.","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"Moley456"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"Moley456"},"content":"     * @param tasks The user\u0027s TaskList to be saved.","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"Moley456"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"Moley456"},"content":"    public void save(TaskList tasks) {","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"Moley456"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"Moley456"},"content":"            // Initialize a File object using the data file path.","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"Moley456"},"content":"            File file \u003d new File(filepath);","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"Moley456"},"content":"            // If data file does not exist, create a new data file.","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"Moley456"},"content":"            if (!file.exists()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"Moley456"},"content":"                file.createNewFile();","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"Moley456"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"Moley456"},"content":"            // Initialize new writer for the data file.","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"Moley456"},"content":"            FileWriter writer \u003d new FileWriter(filepath);","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"Moley456"},"content":"            // Initialize the String that will be used to save to the data file.","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"Moley456"},"content":"            String toSave \u003d \"\";","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":51,"author":{"gitId":"Moley456"},"content":"            // Format the String to how the task list should be saved in the data file.","lastModifiedDate":"2021-08-26"},{"lineNumber":52,"author":{"gitId":"Moley456"},"content":"            for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"Moley456"},"content":"                Task currentTask \u003d tasks.getTask(i);","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"Moley456"},"content":"                toSave \u003d toSave.concat(currentTask.taskType()","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"Moley456"},"content":"                        + \" | \"","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"Moley456"},"content":"                        + currentTask.isDoneToInt()","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"Moley456"},"content":"                        + \" | \"","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"Moley456"},"content":"                        + currentTask.getTaskDetails() + \"\\n\");","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"Moley456"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"Moley456"},"content":"            // Write to the data file.","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"Moley456"},"content":"            writer.write(toSave);","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":63,"author":{"gitId":"Moley456"},"content":"            // Close the writer when done writing.","lastModifiedDate":"2021-08-26"},{"lineNumber":64,"author":{"gitId":"Moley456"},"content":"            writer.close();","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"Moley456"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"Moley456"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"Moley456"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"Moley456"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"Moley456"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":71,"author":{"gitId":"Moley456"},"content":"     * Loads the data from the data file and returns the TaskList from when the user last ran Duke.","lastModifiedDate":"2021-08-26"},{"lineNumber":72,"author":{"gitId":"Moley456"},"content":"     * If the data file does not exist in the file path, an empty TaskList will be returned.","lastModifiedDate":"2021-08-26"},{"lineNumber":73,"author":{"gitId":"Moley456"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":74,"author":{"gitId":"Moley456"},"content":"     * @return If the data files exists in the file path, returns the TaskList that is loaded.","lastModifiedDate":"2021-08-26"},{"lineNumber":75,"author":{"gitId":"Moley456"},"content":"     * If not, returns an empty TaskList.","lastModifiedDate":"2021-08-26"},{"lineNumber":76,"author":{"gitId":"Moley456"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":77,"author":{"gitId":"Moley456"},"content":"    public TaskList load() {","lastModifiedDate":"2021-08-25"},{"lineNumber":78,"author":{"gitId":"Moley456"},"content":"        // ArrayList that will be used to initialize the returned TaskList.","lastModifiedDate":"2021-08-26"},{"lineNumber":79,"author":{"gitId":"Moley456"},"content":"        ArrayList\u003cTask\u003e loadedTaskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-25"},{"lineNumber":80,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":81,"author":{"gitId":"Moley456"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":82,"author":{"gitId":"Moley456"},"content":"            // Initialize a File object using the data file path.","lastModifiedDate":"2021-08-26"},{"lineNumber":83,"author":{"gitId":"Moley456"},"content":"            File file \u003d new File(filepath);","lastModifiedDate":"2021-08-25"},{"lineNumber":84,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":85,"author":{"gitId":"Moley456"},"content":"            // If data file does not exist, create a new data file","lastModifiedDate":"2021-08-26"},{"lineNumber":86,"author":{"gitId":"Moley456"},"content":"            // and return empty TaskList","lastModifiedDate":"2021-08-26"},{"lineNumber":87,"author":{"gitId":"Moley456"},"content":"            if (file.createNewFile()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":88,"author":{"gitId":"Moley456"},"content":"                return new TaskList();","lastModifiedDate":"2021-08-25"},{"lineNumber":89,"author":{"gitId":"Moley456"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":90,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":91,"author":{"gitId":"Moley456"},"content":"            // Initialize a scanner object for the data file","lastModifiedDate":"2021-08-26"},{"lineNumber":92,"author":{"gitId":"Moley456"},"content":"            Scanner s \u003d new Scanner(file);","lastModifiedDate":"2021-08-25"},{"lineNumber":93,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":94,"author":{"gitId":"Moley456"},"content":"            // Scan the data file and add each of the different tasks.","lastModifiedDate":"2021-08-26"},{"lineNumber":95,"author":{"gitId":"Moley456"},"content":"            while (s.hasNext()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":96,"author":{"gitId":"Moley456"},"content":"                String[] lineSplit \u003d s.nextLine().split(\" \\\\| \", 5);","lastModifiedDate":"2021-08-25"},{"lineNumber":97,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":98,"author":{"gitId":"Moley456"},"content":"                switch (lineSplit[0]) {","lastModifiedDate":"2021-08-26"},{"lineNumber":99,"author":{"gitId":"Moley456"},"content":"                case \"T\":","lastModifiedDate":"2021-08-26"},{"lineNumber":100,"author":{"gitId":"Moley456"},"content":"                    loadedTaskList.add(new ToDo(lineSplit[2]));","lastModifiedDate":"2021-08-25"},{"lineNumber":101,"author":{"gitId":"Moley456"},"content":"                    break;","lastModifiedDate":"2021-08-26"},{"lineNumber":102,"author":{"gitId":"Moley456"},"content":"                case \"D\":","lastModifiedDate":"2021-08-26"},{"lineNumber":103,"author":{"gitId":"Moley456"},"content":"                    loadedTaskList.add(new Deadline(lineSplit[2], lineSplit[3], lineSplit[4]));","lastModifiedDate":"2021-08-25"},{"lineNumber":104,"author":{"gitId":"Moley456"},"content":"                    break;","lastModifiedDate":"2021-08-26"},{"lineNumber":105,"author":{"gitId":"Moley456"},"content":"                case \"E\":","lastModifiedDate":"2021-08-26"},{"lineNumber":106,"author":{"gitId":"Moley456"},"content":"                    loadedTaskList.add(new Event(lineSplit[2], lineSplit[3]));","lastModifiedDate":"2021-08-25"},{"lineNumber":107,"author":{"gitId":"Moley456"},"content":"                    break;","lastModifiedDate":"2021-08-26"},{"lineNumber":108,"author":{"gitId":"Moley456"},"content":"                default:","lastModifiedDate":"2021-08-31"},{"lineNumber":109,"author":{"gitId":"Moley456"},"content":"                    break;","lastModifiedDate":"2021-08-31"},{"lineNumber":110,"author":{"gitId":"Moley456"},"content":"                }","lastModifiedDate":"2021-08-25"},{"lineNumber":111,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":112,"author":{"gitId":"Moley456"},"content":"                if (lineSplit[1].equals(\"0\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":113,"author":{"gitId":"Moley456"},"content":"                    loadedTaskList.get(loadedTaskList.size() - 1).markDone();","lastModifiedDate":"2021-08-25"},{"lineNumber":114,"author":{"gitId":"Moley456"},"content":"                }","lastModifiedDate":"2021-08-25"},{"lineNumber":115,"author":{"gitId":"Moley456"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":116,"author":{"gitId":"Moley456"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":117,"author":{"gitId":"Moley456"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2021-08-25"},{"lineNumber":118,"author":{"gitId":"Moley456"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":119,"author":{"gitId":"Moley456"},"content":"        return new TaskList(loadedTaskList);","lastModifiedDate":"2021-08-25"},{"lineNumber":120,"author":{"gitId":"Moley456"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":121,"author":{"gitId":"Moley456"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"Moley456":121}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Moley456"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"Moley456"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"Moley456"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"Moley456"},"content":" * Ui class that handles UI and Outputs to the user.","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"Moley456"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"Moley456"},"content":"public class Ui {","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"Moley456"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"Moley456"},"content":"     * Prints a horizontal line that separates user inputs from Duke\u0027s outputs.","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"Moley456"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"Moley456"},"content":"    public static void printLine() {","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"Moley456"},"content":"        System.out.println(\"____________________________________________\");","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"Moley456"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"Moley456"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"Moley456"},"content":"     * Prints the welcome message when Duke is ran.","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"Moley456"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"Moley456"},"content":"    public void printWelcomeMessage() {","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"Moley456"},"content":"        printLine();","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"Moley456"},"content":"        System.out.println(\"Hello I\u0027m duke\\nWhat can I do for you?\");","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"Moley456"},"content":"        printLine();","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"Moley456"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"Moley456"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"Moley456"},"content":"     * Prints the goodbye message when the user exits the program.","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"Moley456"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"Moley456"},"content":"    public void printGoodbyeMessage() {","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"Moley456"},"content":"        printLine();","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"Moley456"},"content":"        System.out.println(\"\\tBye. Hope to see you again soon!\");","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"Moley456"},"content":"        printLine();","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"Moley456"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"Moley456"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"Moley456"},"content":"     * Prints a message that informs the user which task has been marked as done.","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"Moley456"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"Moley456"},"content":"     * @param task The task that the user has marked as done.","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"Moley456"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"Moley456"},"content":"    public static void printDoneMessage(Task task) {","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"Moley456"},"content":"        printLine();","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"Moley456"},"content":"        System.out.println(\"\\tNice! I\u0027ve marked this done:\\n\\t  \" + task);","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"Moley456"},"content":"        printLine();","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"Moley456"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"Moley456"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"Moley456"},"content":"     * Prints a message that informs the user which task has been deleted.","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"Moley456"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"Moley456"},"content":"     * @param task The task that the user deletes from the task list.","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"Moley456"},"content":"     * @param taskCount The number of tasks left in the task list.","lastModifiedDate":"2021-08-26"},{"lineNumber":51,"author":{"gitId":"Moley456"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":52,"author":{"gitId":"Moley456"},"content":"    public static void printDeleteMessage(Task task, int taskCount) {","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"Moley456"},"content":"        printLine();","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"Moley456"},"content":"        System.out.println(\"\\tNoted. I\u0027ve removed this task:\\n\\t  \" + task);","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"Moley456"},"content":"        printTaskCount(taskCount);","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"Moley456"},"content":"        printLine();","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"Moley456"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"Moley456"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"Moley456"},"content":"     * Prints a message that informs the user which task has been added.","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"Moley456"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"Moley456"},"content":"     * @param task The task that the user adds to the task list.","lastModifiedDate":"2021-08-26"},{"lineNumber":63,"author":{"gitId":"Moley456"},"content":"     * @param taskCount The number of tasks in the list after adding.","lastModifiedDate":"2021-08-26"},{"lineNumber":64,"author":{"gitId":"Moley456"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":65,"author":{"gitId":"Moley456"},"content":"    public static void printAddedMessage(Task task, int taskCount) {","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"Moley456"},"content":"        printLine();","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"Moley456"},"content":"        System.out.println(\"\\tGot it. I\u0027ve added this task:\\n\" + \"\\t  \" + task);","lastModifiedDate":"2021-08-26"},{"lineNumber":68,"author":{"gitId":"Moley456"},"content":"        printTaskCount(taskCount);","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"Moley456"},"content":"        printLine();","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"Moley456"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"Moley456"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":73,"author":{"gitId":"Moley456"},"content":"     * Prints a message that informs user how many tasks they have in the task list","lastModifiedDate":"2021-08-26"},{"lineNumber":74,"author":{"gitId":"Moley456"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":75,"author":{"gitId":"Moley456"},"content":"     * @param taskCount The number of tasks in the task list.","lastModifiedDate":"2021-08-26"},{"lineNumber":76,"author":{"gitId":"Moley456"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":77,"author":{"gitId":"Moley456"},"content":"    private static void printTaskCount(int taskCount) {","lastModifiedDate":"2021-08-25"},{"lineNumber":78,"author":{"gitId":"Moley456"},"content":"        System.out.println(\"\\tNow you have \" + taskCount + \" tasks in the list.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":79,"author":{"gitId":"Moley456"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":80,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":81,"author":{"gitId":"Moley456"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"Moley456":81}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Moley456"},"content":"package duke.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"Moley456"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"Moley456"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"Moley456"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"Moley456"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"Moley456"},"content":" * Represents a deadline Task.","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"Moley456"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"Moley456"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"Moley456"},"content":"    /** The date of the deadline */","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"Moley456"},"content":"    private LocalDate byDate;","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"Moley456"},"content":"    /** The time of the deadline */","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"Moley456"},"content":"    private LocalTime byTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":17,"author":{"gitId":"Moley456"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"Moley456"},"content":"     * Constructs a Deadline task using given details, date and time.","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"Moley456"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"Moley456"},"content":"     * @param taskDetails The details of the deadline.","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"Moley456"},"content":"     * @param byDate The date of the deadline.","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"Moley456"},"content":"     * @param byTime The time of the deadline.","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"Moley456"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"Moley456"},"content":"    public Deadline (String taskDetails, String byDate, String byTime) {","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"Moley456"},"content":"        super(taskDetails);","lastModifiedDate":"2021-08-19"},{"lineNumber":26,"author":{"gitId":"Moley456"},"content":"        this.byDate \u003d LocalDate.parse(byDate);","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"Moley456"},"content":"        this.byTime \u003d LocalTime.parse(byTime);","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"Moley456"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"Moley456"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"Moley456"},"content":"     * Returns a letter as a String that represents the task type.","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"Moley456"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"Moley456"},"content":"     * @return The letter \"D\" that represents a Deadline.","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"Moley456"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"Moley456"},"content":"    public String taskType() {","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"Moley456"},"content":"        return \"D\";","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"Moley456"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"Moley456"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"Moley456"},"content":"     * Returns the String representation of the task details, date and time of the Deadline.","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"Moley456"},"content":"     * This String will be used to save to the data file.","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"Moley456"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"Moley456"},"content":"     * @return The String representation of the task details, date and time.","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"Moley456"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"Moley456"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"Moley456"},"content":"    public String getTaskDetails() {","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"Moley456"},"content":"        return super.getTaskDetails() + \" | \" + byDate + \" | \" + byTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"Moley456"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":49,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":50,"author":{"gitId":"Moley456"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":51,"author":{"gitId":"Moley456"},"content":"     * Returns the String representation of the Deadline which will be used as the output","lastModifiedDate":"2021-08-26"},{"lineNumber":52,"author":{"gitId":"Moley456"},"content":"     * to the user.","lastModifiedDate":"2021-08-26"},{"lineNumber":53,"author":{"gitId":"Moley456"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":54,"author":{"gitId":"Moley456"},"content":"     * @return The String representation of the Deadline object.","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"Moley456"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":56,"author":{"gitId":"Moley456"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":57,"author":{"gitId":"Moley456"},"content":"    public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":58,"author":{"gitId":"Moley456"},"content":"        return \"[D]\" + super.toString() + \" (by: \"","lastModifiedDate":"2021-08-31"},{"lineNumber":59,"author":{"gitId":"Moley456"},"content":"                + byDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \" \"","lastModifiedDate":"2021-08-31"},{"lineNumber":60,"author":{"gitId":"Moley456"},"content":"                + byTime + \")\";","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"Moley456"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":62,"author":{"gitId":"Moley456"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"Moley456":62}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Moley456"},"content":"package duke.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"Moley456"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"Moley456"},"content":" * A class representing an Event task.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"Moley456"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"Moley456"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"Moley456"},"content":"    /** the timing of the Event as a String. */","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"Moley456"},"content":"    private String at;","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"Moley456"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"Moley456"},"content":"     * Constructs an Event object using the given task details and timing of the event.","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"Moley456"},"content":"     * @param taskDetails The given task details.","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"Moley456"},"content":"     * @param at the timing of the event as a String.","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"Moley456"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"Moley456"},"content":"    public Event (String taskDetails, String at) {","lastModifiedDate":"2021-08-19"},{"lineNumber":17,"author":{"gitId":"Moley456"},"content":"        super(taskDetails);","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"Moley456"},"content":"        this.at \u003d at;","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"Moley456"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":20,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":21,"author":{"gitId":"Moley456"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"Moley456"},"content":"     * Returns a letter as a String that represents the task type.","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"Moley456"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"Moley456"},"content":"     * @return The letter \"E\" that represents an Event.","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"Moley456"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"Moley456"},"content":"    public String taskType() {","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"Moley456"},"content":"        return \"E\";","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"Moley456"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"Moley456"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"Moley456"},"content":"     * Returns the String representation of the task details and timing of the Event.","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"Moley456"},"content":"     * This String will be used to save to the data file.","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"Moley456"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"Moley456"},"content":"     * @return The String representation of the task details and timing of the Event.","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"Moley456"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"Moley456"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"Moley456"},"content":"    public String getTaskDetails() {","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"Moley456"},"content":"        return super.getTaskDetails() + \" | \" + at;","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"Moley456"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"Moley456"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"Moley456"},"content":"     * Returns the String representation of the Event.","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"Moley456"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"Moley456"},"content":"     * @return String representation of the Event.","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"Moley456"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"Moley456"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":47,"author":{"gitId":"Moley456"},"content":"    public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":48,"author":{"gitId":"Moley456"},"content":"        return \"[E]\" + super.toString() + \" (at :\" + at + \")\";","lastModifiedDate":"2021-08-19"},{"lineNumber":49,"author":{"gitId":"Moley456"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":50,"author":{"gitId":"Moley456"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"Moley456":50}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Moley456"},"content":"package duke.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"Moley456"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"Moley456"},"content":" * A class representing a Task.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"Moley456"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"Moley456"},"content":"public abstract class Task {","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"Moley456"},"content":"    /** Boolean representing if the Task is done */","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"Moley456"},"content":"    private boolean isDone;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"Moley456"},"content":"    /** The details of the task */","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"Moley456"},"content":"    private String taskDetails;","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"Moley456"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"Moley456"},"content":"     * Constructs a Task object that is not done and has empty task details.","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"Moley456"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"Moley456"},"content":"    public Task() {","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"Moley456"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"Moley456"},"content":"        this.taskDetails \u003d \"\";","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"Moley456"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":20,"author":{"gitId":"Moley456"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"Moley456"},"content":"     * Constructs a Task object that is not done with the given task details.","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"Moley456"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"Moley456"},"content":"    public Task(String taskDetails) {","lastModifiedDate":"2021-08-19"},{"lineNumber":24,"author":{"gitId":"Moley456"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"Moley456"},"content":"        this.taskDetails \u003d taskDetails;","lastModifiedDate":"2021-08-19"},{"lineNumber":26,"author":{"gitId":"Moley456"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":27,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":28,"author":{"gitId":"Moley456"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"Moley456"},"content":"     * Marks the task as done.","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"Moley456"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"Moley456"},"content":"    public void markDone() {","lastModifiedDate":"2021-08-19"},{"lineNumber":32,"author":{"gitId":"Moley456"},"content":"        isDone \u003d true;","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"Moley456"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":34,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":35,"author":{"gitId":"Moley456"},"content":"    public String getTaskDetails() {","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"Moley456"},"content":"        return taskDetails;","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"Moley456"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"Moley456"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"Moley456"},"content":"     * Returns an integer depending on if the task is done.","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"Moley456"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"Moley456"},"content":"     * @return integer 0 if the task is done and integer 1 if the task is not done.","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"Moley456"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"Moley456"},"content":"    public int isDoneToInt() {","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"Moley456"},"content":"        return isDone ? 0 : 1;","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"Moley456"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"Moley456"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"Moley456"},"content":"     * Returns a letter as a String that represents the task type.","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"Moley456"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":51,"author":{"gitId":"Moley456"},"content":"     * @return A letter as a String that represents the task type.","lastModifiedDate":"2021-08-26"},{"lineNumber":52,"author":{"gitId":"Moley456"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":53,"author":{"gitId":"Moley456"},"content":"    public abstract String taskType();","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"Moley456"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":56,"author":{"gitId":"Moley456"},"content":"     * Returns the String representation of the task.","lastModifiedDate":"2021-08-26"},{"lineNumber":57,"author":{"gitId":"Moley456"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"Moley456"},"content":"     * @return String representation of the task.","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"Moley456"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"Moley456"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":61,"author":{"gitId":"Moley456"},"content":"    public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":62,"author":{"gitId":"Moley456"},"content":"        if (isDone) {","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"Moley456"},"content":"            return \"[X] \" + taskDetails;","lastModifiedDate":"2021-08-19"},{"lineNumber":64,"author":{"gitId":"Moley456"},"content":"        } else {","lastModifiedDate":"2021-08-19"},{"lineNumber":65,"author":{"gitId":"Moley456"},"content":"            return \"[ ] \" + taskDetails;","lastModifiedDate":"2021-08-19"},{"lineNumber":66,"author":{"gitId":"Moley456"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":67,"author":{"gitId":"Moley456"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":68,"author":{"gitId":"Moley456"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"Moley456":68}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Moley456"},"content":"package duke.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"Moley456"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"Moley456"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"Moley456"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"Moley456"},"content":" * Class that contains the task list and operations on the task list.","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"Moley456"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"Moley456"},"content":"public class TaskList {","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"Moley456"},"content":"    /** The ArrayList that represents the list of Tasks */","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"Moley456"},"content":"    private ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"Moley456"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"Moley456"},"content":"     * Constructs an empty TaskList","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"Moley456"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"Moley456"},"content":"    public TaskList() {","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"Moley456"},"content":"        this.tasks \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"Moley456"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"Moley456"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"Moley456"},"content":"     * Constructs a TaskList using a given ArrayList","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"Moley456"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"Moley456"},"content":"     * @param tasks The Arraylist used to construct the TaskList.","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"Moley456"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"Moley456"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"Moley456"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"Moley456"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"Moley456"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"Moley456"},"content":"     * Marks a specified task in the TaskList as done.","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"Moley456"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"Moley456"},"content":"     * @param taskNumber The task number that is used to specify which task to mark as done.","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"Moley456"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"Moley456"},"content":"    public void markDone(int taskNumber) {","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"Moley456"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"Moley456"},"content":"            Task completedTask \u003d this.tasks.get(taskNumber);","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"Moley456"},"content":"            completedTask.markDone();","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"Moley456"},"content":"            Ui.printDoneMessage(completedTask);","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"Moley456"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"Moley456"},"content":"            System.out.println(\"\\tOOPS!!! This is not a valid task number.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"Moley456"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"Moley456"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"Moley456"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"Moley456"},"content":"     * Prints the entire TaskList if the TaskList is not empty. If the TaskList is empty,","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"Moley456"},"content":"     * a message that informs the user that they do not have any tasks is printed.","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"Moley456"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":51,"author":{"gitId":"Moley456"},"content":"    public void listTasks() {","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"Moley456"},"content":"        if (!this.tasks.isEmpty()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"Moley456"},"content":"            Ui.printLine();","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"Moley456"},"content":"            System.out.println(\"\\tHere are the tasks in your list:\");","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"Moley456"},"content":"            for (int i \u003d 0; i \u003c this.tasks.size(); i++) {","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"Moley456"},"content":"                System.out.println(\"\\t\" + (i + 1) + \". \" + this.tasks.get(i));","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"Moley456"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"Moley456"},"content":"            Ui.printLine();","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"Moley456"},"content":"        } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"Moley456"},"content":"            System.out.println(\"\\tYou don\u0027t have any tasks in your list!\");","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"Moley456"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"Moley456"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"Moley456"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":65,"author":{"gitId":"Moley456"},"content":"     * Adds a specified Task into the TaskList.","lastModifiedDate":"2021-08-26"},{"lineNumber":66,"author":{"gitId":"Moley456"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":67,"author":{"gitId":"Moley456"},"content":"     * @param task The specified Task to add into the TaskList.","lastModifiedDate":"2021-08-26"},{"lineNumber":68,"author":{"gitId":"Moley456"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":69,"author":{"gitId":"Moley456"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"Moley456"},"content":"        this.tasks.add(task);","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"Moley456"},"content":"        Ui.printAddedMessage(task, this.tasks.size());","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"Moley456"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"Moley456"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":75,"author":{"gitId":"Moley456"},"content":"     * Deletes a specified Task from the TaskList.","lastModifiedDate":"2021-08-26"},{"lineNumber":76,"author":{"gitId":"Moley456"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":77,"author":{"gitId":"Moley456"},"content":"     * @param taskNumber The task number of the Task that is to be deleted.","lastModifiedDate":"2021-08-26"},{"lineNumber":78,"author":{"gitId":"Moley456"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":79,"author":{"gitId":"Moley456"},"content":"    public void deleteTask(int taskNumber) {","lastModifiedDate":"2021-08-25"},{"lineNumber":80,"author":{"gitId":"Moley456"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":81,"author":{"gitId":"Moley456"},"content":"            Task removedTask \u003d this.tasks.get(taskNumber);","lastModifiedDate":"2021-08-25"},{"lineNumber":82,"author":{"gitId":"Moley456"},"content":"            this.tasks.remove(taskNumber);","lastModifiedDate":"2021-08-25"},{"lineNumber":83,"author":{"gitId":"Moley456"},"content":"            Ui.printDeleteMessage(removedTask, this.tasks.size());","lastModifiedDate":"2021-08-25"},{"lineNumber":84,"author":{"gitId":"Moley456"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":85,"author":{"gitId":"Moley456"},"content":"            System.out.println(\"\\tOOPS!!! This is not a valid task number.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":86,"author":{"gitId":"Moley456"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":87,"author":{"gitId":"Moley456"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":88,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":89,"author":{"gitId":"Moley456"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":90,"author":{"gitId":"Moley456"},"content":"     * Prints all the Tasks in the taskList that contain the specified keyword.","lastModifiedDate":"2021-08-26"},{"lineNumber":91,"author":{"gitId":"Moley456"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":92,"author":{"gitId":"Moley456"},"content":"     * @param keyword The keyword specified by the user to search for.","lastModifiedDate":"2021-08-26"},{"lineNumber":93,"author":{"gitId":"Moley456"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":94,"author":{"gitId":"Moley456"},"content":"    public void findTask(String keyword) {","lastModifiedDate":"2021-08-26"},{"lineNumber":95,"author":{"gitId":"Moley456"},"content":"        boolean canFindMatch \u003d false;","lastModifiedDate":"2021-08-26"},{"lineNumber":96,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":97,"author":{"gitId":"Moley456"},"content":"        Ui.printLine();","lastModifiedDate":"2021-08-26"},{"lineNumber":98,"author":{"gitId":"Moley456"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2021-08-26"},{"lineNumber":99,"author":{"gitId":"Moley456"},"content":"            String currentTask \u003d tasks.get(i).toString();","lastModifiedDate":"2021-08-26"},{"lineNumber":100,"author":{"gitId":"Moley456"},"content":"            if (currentTask.substring(7).matches(\"(?i)(.*)\" + keyword + \"(.*)\")) {","lastModifiedDate":"2021-08-26"},{"lineNumber":101,"author":{"gitId":"Moley456"},"content":"                if (!canFindMatch) {","lastModifiedDate":"2021-08-26"},{"lineNumber":102,"author":{"gitId":"Moley456"},"content":"                    canFindMatch \u003d true;","lastModifiedDate":"2021-08-26"},{"lineNumber":103,"author":{"gitId":"Moley456"},"content":"                    System.out.println(\"\\tHere are the matching tasks in your list:\");","lastModifiedDate":"2021-08-26"},{"lineNumber":104,"author":{"gitId":"Moley456"},"content":"                }","lastModifiedDate":"2021-08-26"},{"lineNumber":105,"author":{"gitId":"Moley456"},"content":"                System.out.println(\"\\t\" + (i + 1) + \". \" + currentTask);","lastModifiedDate":"2021-08-26"},{"lineNumber":106,"author":{"gitId":"Moley456"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":107,"author":{"gitId":"Moley456"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":108,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":109,"author":{"gitId":"Moley456"},"content":"        if (!canFindMatch) {","lastModifiedDate":"2021-08-26"},{"lineNumber":110,"author":{"gitId":"Moley456"},"content":"            System.out.println(\"\\tSorry!, I couldn\u0027t find any tasks with that keyword.\");","lastModifiedDate":"2021-08-26"},{"lineNumber":111,"author":{"gitId":"Moley456"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":112,"author":{"gitId":"Moley456"},"content":"        Ui.printLine();","lastModifiedDate":"2021-08-26"},{"lineNumber":113,"author":{"gitId":"Moley456"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":114,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":115,"author":{"gitId":"Moley456"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":116,"author":{"gitId":"Moley456"},"content":"     * Retrieves a specified Task from the TaskList.","lastModifiedDate":"2021-08-26"},{"lineNumber":117,"author":{"gitId":"Moley456"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":118,"author":{"gitId":"Moley456"},"content":"     * @param taskNumber The task number of the specified Task.","lastModifiedDate":"2021-08-26"},{"lineNumber":119,"author":{"gitId":"Moley456"},"content":"     * @return The specified Task.","lastModifiedDate":"2021-08-26"},{"lineNumber":120,"author":{"gitId":"Moley456"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":121,"author":{"gitId":"Moley456"},"content":"    public Task getTask(int taskNumber) {","lastModifiedDate":"2021-08-25"},{"lineNumber":122,"author":{"gitId":"Moley456"},"content":"        return tasks.get(taskNumber);","lastModifiedDate":"2021-08-25"},{"lineNumber":123,"author":{"gitId":"Moley456"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":124,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":125,"author":{"gitId":"Moley456"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":126,"author":{"gitId":"Moley456"},"content":"     * Returns the number of Tasks in the TaskList.","lastModifiedDate":"2021-08-26"},{"lineNumber":127,"author":{"gitId":"Moley456"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":128,"author":{"gitId":"Moley456"},"content":"     * @return The number of Tasks in the TaskList.","lastModifiedDate":"2021-08-26"},{"lineNumber":129,"author":{"gitId":"Moley456"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":130,"author":{"gitId":"Moley456"},"content":"    public int size() {","lastModifiedDate":"2021-08-25"},{"lineNumber":131,"author":{"gitId":"Moley456"},"content":"        return this.tasks.size();","lastModifiedDate":"2021-08-25"},{"lineNumber":132,"author":{"gitId":"Moley456"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":133,"author":{"gitId":"Moley456"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"Moley456":133}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Moley456"},"content":"package duke.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"Moley456"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"Moley456"},"content":" * A class representing a ToDo task.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"Moley456"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"Moley456"},"content":"public class ToDo extends Task {","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"Moley456"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"Moley456"},"content":"     * Constructs a Todo object using then given task details.","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"Moley456"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"Moley456"},"content":"     * @param taskDetails The given task details.","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"Moley456"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"Moley456"},"content":"    public ToDo (String taskDetails) {","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"Moley456"},"content":"        super(taskDetails);","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"Moley456"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"Moley456"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"Moley456"},"content":"     * Returns a letter as a String that represents the task type.","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"Moley456"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"Moley456"},"content":"     * @return The letter \"T\" that represents a ToDo.","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"Moley456"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"Moley456"},"content":"    public String taskType() {","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"Moley456"},"content":"        return \"T\";","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"Moley456"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"Moley456"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"Moley456"},"content":"     * Returns the String representation of the ToDo.","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"Moley456"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"Moley456"},"content":"     * @return String representation of the ToDo.","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"Moley456"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"Moley456"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":31,"author":{"gitId":"Moley456"},"content":"    public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":32,"author":{"gitId":"Moley456"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2021-08-19"},{"lineNumber":33,"author":{"gitId":"Moley456"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":34,"author":{"gitId":"Moley456"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"Moley456":34}},{"path":"src/test/java/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Moley456"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"Moley456"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"Moley456"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"Moley456"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"Moley456"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"Moley456"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"Moley456"},"content":"public class ParserTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"Moley456"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"Moley456"},"content":"    public void parse_invalidCommand_dukeExceptionThrown() {","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"Moley456"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"Moley456"},"content":"        Parser parser \u003d new Parser(tasks);","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"Moley456"},"content":"        DukeException thrown \u003d assertThrows(DukeException.class, () -\u003e parser.parse(\"abcde\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"Moley456"},"content":"        assertEquals(\"\\tOOPS!!! You have entered an invalid command, please try again!\",","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"Moley456"},"content":"                thrown.getMessage());","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"Moley456"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"Moley456"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"Moley456"},"content":"    public void parse_doneTaskEmptyNumber_dukeExceptionThrown() {","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"Moley456"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"Moley456"},"content":"        Parser parser \u003d new Parser(tasks);","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"Moley456"},"content":"        DukeException thrown \u003d assertThrows(DukeException.class, () -\u003e parser.parse(\"done \"));","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"Moley456"},"content":"        assertEquals(\"\\tOOPS!!! Please specify the task number for the task you want to complete.\",","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"Moley456"},"content":"                thrown.getMessage());","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"Moley456"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"Moley456"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"Moley456":34}},{"path":"src/test/java/duke/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Moley456"},"content":"package duke.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"Moley456"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"Moley456"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"Moley456"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"Moley456"},"content":"public class DeadlineTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"Moley456"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"Moley456"},"content":"    public void toStringTest() {","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"Moley456"},"content":"        Task testDeadline \u003d new Deadline(\"run\", \"2021-10-10\", \"18:00\");","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"Moley456"},"content":"        assertEquals(\"[D][ ] run (by: Oct 10 2021 18:00)\", testDeadline.toString());","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"Moley456"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"Moley456"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"Moley456":14}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Moley456"},"content":"todo borrow book","lastModifiedDate":"2021-08-19"},{"lineNumber":2,"author":{"gitId":"Moley456"},"content":"todo read book","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"Moley456"},"content":"todo buy food","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"Moley456"},"content":"deadline do homework /by Monday","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"Moley456"},"content":"event birthday party /at Tuesday 2pm","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"Moley456"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"Moley456"},"content":"done 1","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"Moley456"},"content":"done 2","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"Moley456"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"Moley456"},"content":"delete 1","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"Moley456"},"content":"delete 1","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"Moley456"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"Moley456"},"content":"blah","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"Moley456"},"content":"done","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"Moley456"},"content":"done 1000","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"Moley456"},"content":"bye","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"Moley456":16}}]

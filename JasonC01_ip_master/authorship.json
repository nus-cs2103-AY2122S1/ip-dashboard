[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"JasonC01"},"content":"# duke.Duke project template","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"JasonC01"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":22,"JasonC01":2}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"JasonC01"},"content":"T|1|hello","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"JasonC01"},"content":"T|0|hi","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"JasonC01"},"content":"T|0|hello","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"JasonC01"},"content":"E|0|hellllo|Sep 30 2020 6pm","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"JasonC01"},"content":"E|0|party|Oct 10 2010 9pm","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"JasonC01"},"content":"T|1|procrastinate","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"JasonC01":6}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JasonC01"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"JasonC01"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"JasonC01"},"content":"    private String deadline;","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"JasonC01"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"JasonC01"},"content":"     * Constructor for a Deadline object (Only takes in content as deadline is included in content).","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"JasonC01"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"JasonC01"},"content":"     * @param taskContent Content to be stored in the Deadline object.","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"JasonC01"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"JasonC01"},"content":"    public Deadline(String taskContent) {","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"JasonC01"},"content":"        super(taskContent.split(\" /by \")[0], \"D\");","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"JasonC01"},"content":"        deadline \u003d Parser.parseTiming(taskContent.split(\" /by \")[1]);","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"JasonC01"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"JasonC01"},"content":"     * Constructor for a Deadline object.","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"JasonC01"},"content":"     * Takes in content and deadline separately.","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"JasonC01"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"JasonC01"},"content":"     * @param taskContent Content to be stored in the Deadline object.","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"JasonC01"},"content":"     * @param deadline Deadline of the Deadline object.","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"JasonC01"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"JasonC01"},"content":"    public Deadline(String taskContent, String deadline) {","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"JasonC01"},"content":"        super(taskContent, \"D\");","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"JasonC01"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":28,"author":{"gitId":"JasonC01"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":29,"author":{"gitId":"JasonC01"},"content":"     * Returns the deadline of this Deadline object.","lastModifiedDate":"2021-08-28"},{"lineNumber":30,"author":{"gitId":"JasonC01"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":31,"author":{"gitId":"JasonC01"},"content":"     * @return deadline","lastModifiedDate":"2021-08-28"},{"lineNumber":32,"author":{"gitId":"JasonC01"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":33,"author":{"gitId":"JasonC01"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"JasonC01"},"content":"    public String getTiming() {","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"JasonC01"},"content":"        return deadline;","lastModifiedDate":"2021-08-28"},{"lineNumber":36,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":37,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":38,"author":{"gitId":"JasonC01"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":39,"author":{"gitId":"JasonC01"},"content":"     * Returns the string representation of this Deadline object.","lastModifiedDate":"2021-08-28"},{"lineNumber":40,"author":{"gitId":"JasonC01"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":41,"author":{"gitId":"JasonC01"},"content":"     * @return String representation of Deadline object.","lastModifiedDate":"2021-08-28"},{"lineNumber":42,"author":{"gitId":"JasonC01"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":43,"author":{"gitId":"JasonC01"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":44,"author":{"gitId":"JasonC01"},"content":"    public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":45,"author":{"gitId":"JasonC01"},"content":"        if(super.isCompleted()) {","lastModifiedDate":"2021-08-19"},{"lineNumber":46,"author":{"gitId":"JasonC01"},"content":"            return \"[D][X] \" + super.getTaskContent() + \" \" + \"(by: \" + deadline + \")\";","lastModifiedDate":"2021-08-28"},{"lineNumber":47,"author":{"gitId":"JasonC01"},"content":"        }else {","lastModifiedDate":"2021-08-19"},{"lineNumber":48,"author":{"gitId":"JasonC01"},"content":"            return \"[D][ ] \" + super.getTaskContent() + \" \" + \"(by: \" + deadline + \")\";","lastModifiedDate":"2021-08-28"},{"lineNumber":49,"author":{"gitId":"JasonC01"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":50,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":51,"author":{"gitId":"JasonC01"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"JasonC01":51}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JasonC01"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"JasonC01"},"content":"public class Duke {","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"JasonC01"},"content":"    private TaskList taskList;","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"JasonC01"},"content":"    private Storage storage;","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"JasonC01"},"content":"    private Ui ui;","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"JasonC01"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"JasonC01"},"content":"     * Constructor for a new Duke object.","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"JasonC01"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"JasonC01"},"content":"     * @param filePath File path for the storage file.","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"JasonC01"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"JasonC01"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"JasonC01"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"JasonC01"},"content":"        taskList \u003d storage.loadTask();","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"JasonC01"},"content":"        ui \u003d new Ui(storage, taskList);","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"JasonC01"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"JasonC01"},"content":"     * Executes the Duke object.","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"JasonC01"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"JasonC01"},"content":"    public void run() {","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"JasonC01"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"JasonC01"},"content":"        ui.greet();","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"JasonC01"},"content":"        taskList.printTask();","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"JasonC01"},"content":"        while (!isExit) {","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"JasonC01"},"content":"            String input \u003d ui.readLine();","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"JasonC01"},"content":"            ui.handleInput(input);","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"JasonC01"},"content":"            ui.showLine();","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"JasonC01"},"content":"            isExit \u003d ui.handleExit();","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"JasonC01"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":35,"author":{"gitId":"JasonC01"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":36,"author":{"gitId":"JasonC01"},"content":"     * Creates new Dukc object and runs it.","lastModifiedDate":"2021-08-28"},{"lineNumber":37,"author":{"gitId":"JasonC01"},"content":"     * @param args","lastModifiedDate":"2021-08-28"},{"lineNumber":38,"author":{"gitId":"JasonC01"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":39,"author":{"gitId":"JasonC01"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"JasonC01"},"content":"        new Duke(\"data/duke.txt\").run();","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"JasonC01"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"JasonC01":42}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JasonC01"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"JasonC01"},"content":"/**","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"JasonC01"},"content":" * Contains exceptions specialised to Duke.","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"JasonC01"},"content":" */","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"JasonC01"},"content":"public abstract class DukeException extends Exception{","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"JasonC01"},"content":"    abstract void exceptionMessage();","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"JasonC01"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"JasonC01"},"content":"     * Exception thrown when the user tries to create a new ToDo object without a description.","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"JasonC01"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"JasonC01"},"content":"    public static class emptyToDoDescriptionException extends DukeException {","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"JasonC01"},"content":"        @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"JasonC01"},"content":"        void exceptionMessage() {","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"JasonC01"},"content":"            System.out.println(\"☹ OOPS!!! The description of a todo cannot be empty.\");","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"JasonC01"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":17,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"JasonC01"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"JasonC01"},"content":"     * Exception thrown when the user tries to create a new Event object without a description.","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"JasonC01"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"JasonC01"},"content":"    public static class emptyEventDescriptionException extends DukeException {","lastModifiedDate":"2021-08-19"},{"lineNumber":23,"author":{"gitId":"JasonC01"},"content":"        @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":24,"author":{"gitId":"JasonC01"},"content":"        void exceptionMessage() {","lastModifiedDate":"2021-08-19"},{"lineNumber":25,"author":{"gitId":"JasonC01"},"content":"            System.out.println(\"☹ OOPS!!! The description of an event cannot be empty.\");","lastModifiedDate":"2021-08-19"},{"lineNumber":26,"author":{"gitId":"JasonC01"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":27,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":28,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":29,"author":{"gitId":"JasonC01"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":30,"author":{"gitId":"JasonC01"},"content":"     * Exception thrown when the user tries to create a new Deadline object without a description.","lastModifiedDate":"2021-08-28"},{"lineNumber":31,"author":{"gitId":"JasonC01"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":32,"author":{"gitId":"JasonC01"},"content":"    public static class emptyDeadlineDescriptionException extends DukeException {","lastModifiedDate":"2021-08-19"},{"lineNumber":33,"author":{"gitId":"JasonC01"},"content":"        @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":34,"author":{"gitId":"JasonC01"},"content":"        void exceptionMessage() {","lastModifiedDate":"2021-08-19"},{"lineNumber":35,"author":{"gitId":"JasonC01"},"content":"            System.out.println(\"☹ OOPS!!! The description of a deadline cannot be empty.\");","lastModifiedDate":"2021-08-19"},{"lineNumber":36,"author":{"gitId":"JasonC01"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":37,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":38,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":39,"author":{"gitId":"JasonC01"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":40,"author":{"gitId":"JasonC01"},"content":"     * Exception thrown when a user types in an invalid input.","lastModifiedDate":"2021-08-28"},{"lineNumber":41,"author":{"gitId":"JasonC01"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":42,"author":{"gitId":"JasonC01"},"content":"    public static class invalidInputException extends DukeException {","lastModifiedDate":"2021-08-19"},{"lineNumber":43,"author":{"gitId":"JasonC01"},"content":"        @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":44,"author":{"gitId":"JasonC01"},"content":"        void exceptionMessage() {","lastModifiedDate":"2021-08-19"},{"lineNumber":45,"author":{"gitId":"JasonC01"},"content":"            System.out.println(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2021-08-19"},{"lineNumber":46,"author":{"gitId":"JasonC01"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":47,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":48,"author":{"gitId":"JasonC01"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"JasonC01":48}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JasonC01"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"JasonC01"},"content":"public class Event extends Task{","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"JasonC01"},"content":"    private String eventTime;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"JasonC01"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"JasonC01"},"content":"     * Constructor for a Event object (Only takes in content as event time is included in content).","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"JasonC01"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"JasonC01"},"content":"     * @param taskContent Content to be stored in the Event object.","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"JasonC01"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"JasonC01"},"content":"    public Event(String taskContent) {","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"JasonC01"},"content":"        super(taskContent.split(\" /at \")[0], \"E\");","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"JasonC01"},"content":"        eventTime \u003d Parser.parseTiming(taskContent.split(\" /at \")[1]);","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"JasonC01"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"JasonC01"},"content":"     * Constructor for a Event object.","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"JasonC01"},"content":"     * Takes in content and event time separately.","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"JasonC01"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"JasonC01"},"content":"     * @param taskContent Content to be stored in the Event object.","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"JasonC01"},"content":"     * @param eventTime Event time of the Event object.","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"JasonC01"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"JasonC01"},"content":"    public Event(String taskContent, String eventTime) {","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"JasonC01"},"content":"        super(taskContent, \"E\");","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"JasonC01"},"content":"        this.eventTime \u003d eventTime;","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"JasonC01"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":28,"author":{"gitId":"JasonC01"},"content":"     * Returns the event time of this Event object.","lastModifiedDate":"2021-08-28"},{"lineNumber":29,"author":{"gitId":"JasonC01"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":30,"author":{"gitId":"JasonC01"},"content":"     * @return event time","lastModifiedDate":"2021-08-28"},{"lineNumber":31,"author":{"gitId":"JasonC01"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":32,"author":{"gitId":"JasonC01"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"JasonC01"},"content":"    public String getTiming() {","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"JasonC01"},"content":"        return eventTime;","lastModifiedDate":"2021-08-28"},{"lineNumber":35,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":36,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":37,"author":{"gitId":"JasonC01"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":38,"author":{"gitId":"JasonC01"},"content":"     * Returns the string representation of this Event object.","lastModifiedDate":"2021-08-28"},{"lineNumber":39,"author":{"gitId":"JasonC01"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":40,"author":{"gitId":"JasonC01"},"content":"     * @return String representation of Event object.","lastModifiedDate":"2021-08-28"},{"lineNumber":41,"author":{"gitId":"JasonC01"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":42,"author":{"gitId":"JasonC01"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":43,"author":{"gitId":"JasonC01"},"content":"    public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":44,"author":{"gitId":"JasonC01"},"content":"        if(super.isCompleted()) {","lastModifiedDate":"2021-08-19"},{"lineNumber":45,"author":{"gitId":"JasonC01"},"content":"            return \"[E][X] \" + super.getTaskContent() + \" \" + \"(at: \" + eventTime + \")\";","lastModifiedDate":"2021-08-28"},{"lineNumber":46,"author":{"gitId":"JasonC01"},"content":"        }else {","lastModifiedDate":"2021-08-19"},{"lineNumber":47,"author":{"gitId":"JasonC01"},"content":"            return \"[E][ ] \" + super.getTaskContent() + \" \" + \"(at: \" + eventTime + \")\";","lastModifiedDate":"2021-08-28"},{"lineNumber":48,"author":{"gitId":"JasonC01"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":49,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":50,"author":{"gitId":"JasonC01"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"JasonC01":50}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JasonC01"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"JasonC01"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"JasonC01"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"JasonC01"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"JasonC01"},"content":"public class Parser {","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"JasonC01"},"content":"    public static Integer parseDelete(String input) {","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"JasonC01"},"content":"        return Integer.parseInt(input.split(\" \")[1]);","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"JasonC01"},"content":"    public static Integer parseDone(String input) {","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"JasonC01"},"content":"        return Integer.parseInt(input.split(\" \")[1]);","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"JasonC01"},"content":"    public static String parseEvent(String input) {","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"JasonC01"},"content":"        return input.split(\"event \")[1];","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"JasonC01"},"content":"    public static String parseTodo(String input) {","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"JasonC01"},"content":"        return input.split(\"todo \")[1];","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"JasonC01"},"content":"    public static String parseDeadline(String input) {","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"JasonC01"},"content":"        return input.split(\"deadline \")[1];","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"JasonC01"},"content":"    public static String parseTiming(String timing) {","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"JasonC01"},"content":"        String formattedDateTime \u003d \"\";","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"JasonC01"},"content":"        String date\u003d timing.split(\" \")[0];","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"JasonC01"},"content":"        String time \u003d timing.split(\" \")[1];","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"JasonC01"},"content":"        int hour \u003d Integer.parseInt(time.substring(0, 2));","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"JasonC01"},"content":"        int minute \u003d Integer.parseInt(time.substring(2, 4));","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"JasonC01"},"content":"        LocalDate formattedDate \u003d LocalDate.parse(date);","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"JasonC01"},"content":"        LocalTime formattedTime \u003d LocalTime.of(hour, minute);","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"JasonC01"},"content":"        formattedDateTime +\u003d formattedDate.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")) + \" \";","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"JasonC01"},"content":"        formattedDateTime +\u003d formattedTime.format(DateTimeFormatter.ofPattern(\"ha\"));","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"JasonC01"},"content":"        return formattedDateTime;","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"JasonC01"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"JasonC01":35}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JasonC01"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"JasonC01"},"content":"import java.io.File;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"JasonC01"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"JasonC01"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"JasonC01"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"JasonC01"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"JasonC01"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"JasonC01"},"content":"public class Storage {","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"JasonC01"},"content":"    private Path filePath \u003d null;","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"JasonC01"},"content":"    private Path directoryPath \u003d null;","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"JasonC01"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"JasonC01"},"content":"     * Constructor for a new Storage object.","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"JasonC01"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"JasonC01"},"content":"     * @param path Path for the new storage object.","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"JasonC01"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"JasonC01"},"content":"    public Storage(String path) {","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"JasonC01"},"content":"        String home \u003d System.getProperty(\"user.home\");","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"JasonC01"},"content":"        this.filePath \u003d java.nio.file.Paths.get(home, \"iP\", path.split(\"/\")[0], path.split(\"/\")[1]);","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"JasonC01"},"content":"        this.directoryPath \u003d java.nio.file.Paths.get(home, \"iP\", path.split(\"/\")[0]);","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"JasonC01"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"JasonC01"},"content":"     * Converts Task object to a text format suitable for saving in a storage.","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"JasonC01"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":28,"author":{"gitId":"JasonC01"},"content":"     * @param task Task object to be converted to text.","lastModifiedDate":"2021-08-28"},{"lineNumber":29,"author":{"gitId":"JasonC01"},"content":"     * @return String representation of the given task.","lastModifiedDate":"2021-08-28"},{"lineNumber":30,"author":{"gitId":"JasonC01"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":31,"author":{"gitId":"JasonC01"},"content":"    public String convertTaskToText(Task task) {","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"JasonC01"},"content":"        String result \u003d task.getType() + \"|\";","lastModifiedDate":"2021-08-28"},{"lineNumber":33,"author":{"gitId":"JasonC01"},"content":"        if (task.isCompleted()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"JasonC01"},"content":"            result +\u003d \"1|\";","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"JasonC01"},"content":"        } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"JasonC01"},"content":"            result +\u003d \"0|\";","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"JasonC01"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"JasonC01"},"content":"        result +\u003d task.getTaskContent();","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"JasonC01"},"content":"        if (task.getType().equals(\"D\") || task.getType().equals(\"E\")) {","lastModifiedDate":"2021-08-28"},{"lineNumber":40,"author":{"gitId":"JasonC01"},"content":"            result +\u003d \"|\" + task.getTiming();","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"JasonC01"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"JasonC01"},"content":"        return result;","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":45,"author":{"gitId":"JasonC01"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":46,"author":{"gitId":"JasonC01"},"content":"     * Converts text version of a task to an actual Task object.","lastModifiedDate":"2021-08-28"},{"lineNumber":47,"author":{"gitId":"JasonC01"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":48,"author":{"gitId":"JasonC01"},"content":"     * @param text Text representation of a task to be converted to actual Task object.","lastModifiedDate":"2021-08-28"},{"lineNumber":49,"author":{"gitId":"JasonC01"},"content":"     * @return Task object corresponding to the given text.","lastModifiedDate":"2021-08-28"},{"lineNumber":50,"author":{"gitId":"JasonC01"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":51,"author":{"gitId":"JasonC01"},"content":"    public Task convertTextToTask(String text) {","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"JasonC01"},"content":"        String[] str \u003d text.split(\"\\\\|\");","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"JasonC01"},"content":"        Task newTask;","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"JasonC01"},"content":"        if (str[0].equals(\"T\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"JasonC01"},"content":"            newTask \u003d new ToDo(str[2]);","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"JasonC01"},"content":"        } else if(str[0].equals(\"D\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"JasonC01"},"content":"            newTask \u003d new Deadline(str[2], str[3]);","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"JasonC01"},"content":"        } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"JasonC01"},"content":"            newTask \u003d new Event(str[2], str[3]);","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"JasonC01"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"JasonC01"},"content":"        if (str[1].equals(\"1\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"JasonC01"},"content":"            newTask.markCompleted();","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"JasonC01"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"JasonC01"},"content":"        return newTask;","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":67,"author":{"gitId":"JasonC01"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":68,"author":{"gitId":"JasonC01"},"content":"     * Writes data to the storage.","lastModifiedDate":"2021-08-28"},{"lineNumber":69,"author":{"gitId":"JasonC01"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":70,"author":{"gitId":"JasonC01"},"content":"     * @param taskList List of task to be written to the storage.","lastModifiedDate":"2021-08-28"},{"lineNumber":71,"author":{"gitId":"JasonC01"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":72,"author":{"gitId":"JasonC01"},"content":"    public void writeToFile(TaskList taskList) {","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"JasonC01"},"content":"        StringBuilder combinedTask \u003d new StringBuilder();","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"JasonC01"},"content":"        for (int i \u003d 0; i \u003c taskList.length(); i++) {","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"JasonC01"},"content":"            combinedTask.append(convertTaskToText(taskList.get(i))).append(\"\\n\");","lastModifiedDate":"2021-08-25"},{"lineNumber":76,"author":{"gitId":"JasonC01"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":77,"author":{"gitId":"JasonC01"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":78,"author":{"gitId":"JasonC01"},"content":"            FileWriter writer \u003d new FileWriter(String.valueOf(filePath), false);","lastModifiedDate":"2021-08-25"},{"lineNumber":79,"author":{"gitId":"JasonC01"},"content":"            writer.write(combinedTask.toString());","lastModifiedDate":"2021-08-25"},{"lineNumber":80,"author":{"gitId":"JasonC01"},"content":"            writer.close();","lastModifiedDate":"2021-08-25"},{"lineNumber":81,"author":{"gitId":"JasonC01"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":82,"author":{"gitId":"JasonC01"},"content":"            System.out.println(\"error occurred 2\");","lastModifiedDate":"2021-08-25"},{"lineNumber":83,"author":{"gitId":"JasonC01"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":84,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":85,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":86,"author":{"gitId":"JasonC01"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":87,"author":{"gitId":"JasonC01"},"content":"     * Creates a new storage file if it is not present.","lastModifiedDate":"2021-08-28"},{"lineNumber":88,"author":{"gitId":"JasonC01"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":89,"author":{"gitId":"JasonC01"},"content":"    public void createFile() {","lastModifiedDate":"2021-08-25"},{"lineNumber":90,"author":{"gitId":"JasonC01"},"content":"        File newDirectory \u003d new File(String.valueOf(directoryPath));","lastModifiedDate":"2021-08-25"},{"lineNumber":91,"author":{"gitId":"JasonC01"},"content":"        File newFile \u003d new File(String.valueOf(filePath));","lastModifiedDate":"2021-08-25"},{"lineNumber":92,"author":{"gitId":"JasonC01"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":93,"author":{"gitId":"JasonC01"},"content":"            newDirectory.mkdir();","lastModifiedDate":"2021-08-25"},{"lineNumber":94,"author":{"gitId":"JasonC01"},"content":"            newFile.createNewFile();","lastModifiedDate":"2021-08-25"},{"lineNumber":95,"author":{"gitId":"JasonC01"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":96,"author":{"gitId":"JasonC01"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-25"},{"lineNumber":97,"author":{"gitId":"JasonC01"},"content":"            System.out.println(\"error occurred 1\");","lastModifiedDate":"2021-08-25"},{"lineNumber":98,"author":{"gitId":"JasonC01"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":99,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":100,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":101,"author":{"gitId":"JasonC01"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":102,"author":{"gitId":"JasonC01"},"content":"     * Writes new data to the storage file if it exists, if not create the file before writing.","lastModifiedDate":"2021-08-28"},{"lineNumber":103,"author":{"gitId":"JasonC01"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":104,"author":{"gitId":"JasonC01"},"content":"     * @param taskList List of task to be saved.","lastModifiedDate":"2021-08-28"},{"lineNumber":105,"author":{"gitId":"JasonC01"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":106,"author":{"gitId":"JasonC01"},"content":"    public void saveTask(TaskList taskList) {","lastModifiedDate":"2021-08-25"},{"lineNumber":107,"author":{"gitId":"JasonC01"},"content":"        boolean directoryExists \u003d java.nio.file.Files.exists(filePath);","lastModifiedDate":"2021-08-25"},{"lineNumber":108,"author":{"gitId":"JasonC01"},"content":"        if (!directoryExists) {","lastModifiedDate":"2021-08-25"},{"lineNumber":109,"author":{"gitId":"JasonC01"},"content":"            createFile();","lastModifiedDate":"2021-08-25"},{"lineNumber":110,"author":{"gitId":"JasonC01"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":111,"author":{"gitId":"JasonC01"},"content":"        writeToFile(taskList);","lastModifiedDate":"2021-08-25"},{"lineNumber":112,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":113,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":114,"author":{"gitId":"JasonC01"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":115,"author":{"gitId":"JasonC01"},"content":"     * Returns tasks stored in the storage.","lastModifiedDate":"2021-08-28"},{"lineNumber":116,"author":{"gitId":"JasonC01"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":117,"author":{"gitId":"JasonC01"},"content":"     * @return TaskList containing all the work stored in the storage.","lastModifiedDate":"2021-08-28"},{"lineNumber":118,"author":{"gitId":"JasonC01"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":119,"author":{"gitId":"JasonC01"},"content":"    public TaskList loadTask() {","lastModifiedDate":"2021-08-25"},{"lineNumber":120,"author":{"gitId":"JasonC01"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2021-08-25"},{"lineNumber":121,"author":{"gitId":"JasonC01"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":122,"author":{"gitId":"JasonC01"},"content":"            File myObj \u003d new File(String.valueOf(filePath));","lastModifiedDate":"2021-08-25"},{"lineNumber":123,"author":{"gitId":"JasonC01"},"content":"            Scanner myReader \u003d new Scanner(myObj);","lastModifiedDate":"2021-08-25"},{"lineNumber":124,"author":{"gitId":"JasonC01"},"content":"            while (myReader.hasNextLine()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":125,"author":{"gitId":"JasonC01"},"content":"                String data \u003d myReader.nextLine();","lastModifiedDate":"2021-08-25"},{"lineNumber":126,"author":{"gitId":"JasonC01"},"content":"                taskList.addTask(convertTextToTask(data));","lastModifiedDate":"2021-08-25"},{"lineNumber":127,"author":{"gitId":"JasonC01"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":128,"author":{"gitId":"JasonC01"},"content":"            myReader.close();","lastModifiedDate":"2021-08-25"},{"lineNumber":129,"author":{"gitId":"JasonC01"},"content":"            return taskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":130,"author":{"gitId":"JasonC01"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":131,"author":{"gitId":"JasonC01"},"content":"            System.out.println(\"An error occurred.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":132,"author":{"gitId":"JasonC01"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-25"},{"lineNumber":133,"author":{"gitId":"JasonC01"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":134,"author":{"gitId":"JasonC01"},"content":"        return taskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":135,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":136,"author":{"gitId":"JasonC01"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"JasonC01":136}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JasonC01"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"JasonC01"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"JasonC01"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"JasonC01"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"JasonC01"},"content":"public class Task {","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"JasonC01"},"content":"    private final String taskContent;","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"JasonC01"},"content":"    private final String type;","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"JasonC01"},"content":"    private boolean completed \u003d false;","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"JasonC01"},"content":"    public Task(String taskContent, String type) {","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"JasonC01"},"content":"        this.taskContent \u003d taskContent;","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"JasonC01"},"content":"        this.type \u003d type;","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"JasonC01"},"content":"    public void markCompleted() {","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"JasonC01"},"content":"        completed \u003d true;","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"JasonC01"},"content":"    public String getTaskContent() {","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"JasonC01"},"content":"        return taskContent;","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":21,"author":{"gitId":"JasonC01"},"content":"    public boolean isCompleted() {","lastModifiedDate":"2021-08-19"},{"lineNumber":22,"author":{"gitId":"JasonC01"},"content":"        return completed;","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"JasonC01"},"content":"    public String getType() {","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"JasonC01"},"content":"        return type;","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":27,"author":{"gitId":"JasonC01"},"content":"    public String getTiming() {","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"JasonC01"},"content":"        return \"\";","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"JasonC01"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"JasonC01":30}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JasonC01"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"JasonC01"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"JasonC01"},"content":"import java.util.function.Consumer;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"JasonC01"},"content":"public class TaskList {","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"JasonC01"},"content":"    private ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"JasonC01"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"JasonC01"},"content":"        taskList.add(task);","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"JasonC01"},"content":"    public void deleteTask(int taskIndex) {","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"JasonC01"},"content":"        taskList.remove(taskIndex);","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"JasonC01"},"content":"    public int length() {","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"JasonC01"},"content":"        return taskList.size();","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"JasonC01"},"content":"    public void printTask() {","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"JasonC01"},"content":"        System.out.println(\"Here are your tasks: \");","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"JasonC01"},"content":"        taskList.forEach(task -\u003e {","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"JasonC01"},"content":"            System.out.println(task.toString());","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"JasonC01"},"content":"        });","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"JasonC01"},"content":"    public Task get(int taskIndex) {","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"JasonC01"},"content":"        return taskList.get(taskIndex);","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"JasonC01"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"JasonC01":26}},{"path":"src/main/java/duke/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JasonC01"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"JasonC01"},"content":"public class ToDo extends Task{","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"JasonC01"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"JasonC01"},"content":"     * Constructor for a ToDo object.","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"JasonC01"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"JasonC01"},"content":"     * @param taskContent Content to be stored in the ToDo object.","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"JasonC01"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"JasonC01"},"content":"    public ToDo(String taskContent) {","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"JasonC01"},"content":"        super(taskContent, \"T\");","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"JasonC01"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"JasonC01"},"content":"     * Returns the string representation of this ToDo object.","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"JasonC01"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"JasonC01"},"content":"     * @return String representation of ToDo object.","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"JasonC01"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"JasonC01"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":20,"author":{"gitId":"JasonC01"},"content":"    public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":21,"author":{"gitId":"JasonC01"},"content":"        if (super.isCompleted()) {","lastModifiedDate":"2021-08-19"},{"lineNumber":22,"author":{"gitId":"JasonC01"},"content":"            return \"[T][X] \" + super.getTaskContent();","lastModifiedDate":"2021-08-19"},{"lineNumber":23,"author":{"gitId":"JasonC01"},"content":"        } else {","lastModifiedDate":"2021-08-19"},{"lineNumber":24,"author":{"gitId":"JasonC01"},"content":"            return \"[T][ ] \" + super.getTaskContent();","lastModifiedDate":"2021-08-19"},{"lineNumber":25,"author":{"gitId":"JasonC01"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":26,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":27,"author":{"gitId":"JasonC01"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"JasonC01":27}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JasonC01"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"JasonC01"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"JasonC01"},"content":"public class Ui {","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"JasonC01"},"content":"    private Storage storage;","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"JasonC01"},"content":"    private TaskList taskList;","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"JasonC01"},"content":"    boolean isExit \u003d false;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"JasonC01"},"content":"    private final Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"JasonC01"},"content":"    public Ui(Storage storage, TaskList taskList) {","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"JasonC01"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"JasonC01"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"JasonC01"},"content":"    private final Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"JasonC01"},"content":"    public void showLine() {","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"JasonC01"},"content":"        System.out.println(\"______________________________________________\");","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"JasonC01"},"content":"    public void greet() {","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"JasonC01"},"content":"        System.out.println(\"Hello! I\u0027m duke.Duke\\n\" +","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"JasonC01"},"content":"                \"What can I do for you?\");","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"JasonC01"},"content":"    public String readLine() {","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"JasonC01"},"content":"        return scanner.nextLine();","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"JasonC01"},"content":"    public void handleInput(String input) {","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"JasonC01"},"content":"        if (input.equals(\"bye\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"JasonC01"},"content":"            System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"JasonC01"},"content":"            isExit \u003d true;","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"JasonC01"},"content":"        } else if(input.split(\" \")[0].equals(\"delete\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"JasonC01"},"content":"            Task taskToBeDeleted \u003d taskList.get(Parser.parseDelete(input) - 1);","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"JasonC01"},"content":"            taskList.deleteTask(Parser.parseDelete(input) - 1);","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"JasonC01"},"content":"            System.out.println(\"Noted. I\u0027ve removed this task: \\n\"","lastModifiedDate":"2021-08-28"},{"lineNumber":33,"author":{"gitId":"JasonC01"},"content":"                    + \"  \" + taskToBeDeleted.toString() +\"\\n\" +","lastModifiedDate":"2021-08-28"},{"lineNumber":34,"author":{"gitId":"JasonC01"},"content":"                    \"Now you have \" + taskList.length() + \" tasks in the list.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"JasonC01"},"content":"            storage.saveTask(taskList);","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"JasonC01"},"content":"        } else if (input.equals(\"list\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"JasonC01"},"content":"            System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"JasonC01"},"content":"            for (int i \u003d 0; i \u003c taskList.length(); i++) {","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"JasonC01"},"content":"                System.out.println((i + 1) + \". \" + taskList.get(i).toString());","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"JasonC01"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"JasonC01"},"content":"        } else if (input.split(\" \")[0].equals(\"find\")) {","lastModifiedDate":"2021-08-28"},{"lineNumber":42,"author":{"gitId":"JasonC01"},"content":"            String wordToFind \u003d input.split(\" \")[1];","lastModifiedDate":"2021-08-28"},{"lineNumber":43,"author":{"gitId":"JasonC01"},"content":"            System.out.println(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2021-08-28"},{"lineNumber":44,"author":{"gitId":"JasonC01"},"content":"            for(int i \u003d 0; i \u003c taskList.length(); i++) {","lastModifiedDate":"2021-08-28"},{"lineNumber":45,"author":{"gitId":"JasonC01"},"content":"                if(taskList.get(i).getTaskContent().contains(wordToFind)) {","lastModifiedDate":"2021-08-28"},{"lineNumber":46,"author":{"gitId":"JasonC01"},"content":"                    System.out.println((i + 1) + \". \" +taskList.get(i).toString());","lastModifiedDate":"2021-08-28"},{"lineNumber":47,"author":{"gitId":"JasonC01"},"content":"                }","lastModifiedDate":"2021-08-28"},{"lineNumber":48,"author":{"gitId":"JasonC01"},"content":"            }","lastModifiedDate":"2021-08-28"},{"lineNumber":49,"author":{"gitId":"JasonC01"},"content":"        } else if (input.split(\" \")[0].equals(\"done\")){","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"JasonC01"},"content":"            int taskIndex \u003d Parser.parseDone(input);","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"JasonC01"},"content":"            taskList.get(taskIndex - 1).markCompleted();","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"JasonC01"},"content":"            System.out.println(\"Nice! I\u0027ve marked this task as done:\\n\" + taskList.get(taskIndex - 1).toString());","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"JasonC01"},"content":"            storage.saveTask(taskList);","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"JasonC01"},"content":"        } else if (input.split(\"todo\").length \u003d\u003d 0) {","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"JasonC01"},"content":"            try {","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"JasonC01"},"content":"                throw new DukeException.emptyToDoDescriptionException();","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"JasonC01"},"content":"            } catch (DukeException.emptyToDoDescriptionException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"JasonC01"},"content":"                e.exceptionMessage();","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"JasonC01"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"JasonC01"},"content":"        } else if(input.split(\"deadline\").length \u003d\u003d 0) {","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"JasonC01"},"content":"            try {","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"JasonC01"},"content":"                throw new DukeException.emptyDeadlineDescriptionException();","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"JasonC01"},"content":"            } catch (DukeException.emptyDeadlineDescriptionException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"JasonC01"},"content":"                e.exceptionMessage();","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"JasonC01"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"JasonC01"},"content":"        } else if (input.split(\"event\").length \u003d\u003d 0) {","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"JasonC01"},"content":"            try {","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"JasonC01"},"content":"                throw new DukeException.emptyEventDescriptionException();","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"JasonC01"},"content":"            } catch (DukeException.emptyEventDescriptionException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"JasonC01"},"content":"                e.exceptionMessage();","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"JasonC01"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"JasonC01"},"content":"        } else if (input.split(\"event\")[0].equals(\"\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"JasonC01"},"content":"            String taskContent \u003d Parser.parseEvent(input);","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"JasonC01"},"content":"            Task newEvent \u003d new Event(taskContent);","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"JasonC01"},"content":"            taskList.addTask(newEvent);","lastModifiedDate":"2021-08-25"},{"lineNumber":76,"author":{"gitId":"JasonC01"},"content":"            System.out.println(\"Got it. I\u0027ve added this task: \\n\"","lastModifiedDate":"2021-08-28"},{"lineNumber":77,"author":{"gitId":"JasonC01"},"content":"                    + \"  \" + newEvent.toString() + \"\\n\" +","lastModifiedDate":"2021-08-28"},{"lineNumber":78,"author":{"gitId":"JasonC01"},"content":"                    \"Now you have \" + taskList.length() + \" tasks in the list.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":79,"author":{"gitId":"JasonC01"},"content":"            storage.saveTask(taskList);","lastModifiedDate":"2021-08-25"},{"lineNumber":80,"author":{"gitId":"JasonC01"},"content":"        } else if (input.split(\"deadline\")[0].equals(\"\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":81,"author":{"gitId":"JasonC01"},"content":"            String taskContent \u003d Parser.parseDeadline(input);","lastModifiedDate":"2021-08-25"},{"lineNumber":82,"author":{"gitId":"JasonC01"},"content":"            Task newEvent \u003d new Deadline(taskContent);","lastModifiedDate":"2021-08-25"},{"lineNumber":83,"author":{"gitId":"JasonC01"},"content":"            taskList.addTask(newEvent);","lastModifiedDate":"2021-08-25"},{"lineNumber":84,"author":{"gitId":"JasonC01"},"content":"            System.out.println(\" Got it. I\u0027ve added this task: \\n\"","lastModifiedDate":"2021-08-28"},{"lineNumber":85,"author":{"gitId":"JasonC01"},"content":"                    + \"  \" + newEvent.toString() + \"\\n\" +","lastModifiedDate":"2021-08-28"},{"lineNumber":86,"author":{"gitId":"JasonC01"},"content":"                    \"Now you have \" + taskList.length() + \" tasks in the list.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":87,"author":{"gitId":"JasonC01"},"content":"            storage.saveTask(taskList);","lastModifiedDate":"2021-08-25"},{"lineNumber":88,"author":{"gitId":"JasonC01"},"content":"        } else if (input.split(\"todo\")[0].equals(\"\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":89,"author":{"gitId":"JasonC01"},"content":"            String taskContent \u003d Parser.parseTodo(input);","lastModifiedDate":"2021-08-25"},{"lineNumber":90,"author":{"gitId":"JasonC01"},"content":"            Task newEvent \u003d new ToDo(taskContent);","lastModifiedDate":"2021-08-25"},{"lineNumber":91,"author":{"gitId":"JasonC01"},"content":"            taskList.addTask(newEvent);","lastModifiedDate":"2021-08-25"},{"lineNumber":92,"author":{"gitId":"JasonC01"},"content":"            System.out.println(\"Got it. I\u0027ve added this task: \\n\"","lastModifiedDate":"2021-08-28"},{"lineNumber":93,"author":{"gitId":"JasonC01"},"content":"                    + \"  \" + newEvent.toString() + \"\\n\" +","lastModifiedDate":"2021-08-28"},{"lineNumber":94,"author":{"gitId":"JasonC01"},"content":"                    \"Now you have \" + taskList.length() + \" tasks in the list.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":95,"author":{"gitId":"JasonC01"},"content":"            storage.saveTask(taskList);","lastModifiedDate":"2021-08-25"},{"lineNumber":96,"author":{"gitId":"JasonC01"},"content":"        } else {","lastModifiedDate":"2021-08-28"},{"lineNumber":97,"author":{"gitId":"JasonC01"},"content":"            try{","lastModifiedDate":"2021-08-25"},{"lineNumber":98,"author":{"gitId":"JasonC01"},"content":"                throw new DukeException.invalidInputException();","lastModifiedDate":"2021-08-25"},{"lineNumber":99,"author":{"gitId":"JasonC01"},"content":"            } catch (DukeException.invalidInputException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":100,"author":{"gitId":"JasonC01"},"content":"                e.exceptionMessage();","lastModifiedDate":"2021-08-25"},{"lineNumber":101,"author":{"gitId":"JasonC01"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":102,"author":{"gitId":"JasonC01"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":103,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":104,"author":{"gitId":"JasonC01"},"content":"    public boolean handleExit() {","lastModifiedDate":"2021-08-25"},{"lineNumber":105,"author":{"gitId":"JasonC01"},"content":"        return isExit;","lastModifiedDate":"2021-08-25"},{"lineNumber":106,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":107,"author":{"gitId":"JasonC01"},"content":"}","lastModifiedDate":"2021-08-25"},{"lineNumber":108,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"JasonC01":108}},{"path":"src/test/java/duke/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JasonC01"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"JasonC01"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"JasonC01"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"JasonC01"},"content":"public class DukeTest {","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"JasonC01"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"JasonC01"},"content":"    public void formatTimingTest(){","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"JasonC01"},"content":"        String formattedDate \u003d Parser.parseTiming(\"2020-09-30 1800\");","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"JasonC01"},"content":"        assertEquals(\"Sep 30 2020 6pm\", formattedDate);","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"JasonC01"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"JasonC01"},"content":"    public void deadlineTaskTest() {","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"JasonC01"},"content":"        Deadline deadline \u003d new Deadline(\"do homework /by 2020-09-30 1900\");","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"JasonC01"},"content":"        assertEquals(\"[D][ ] do homework (by: Sep 30 2020 7pm)\", deadline.toString());","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"JasonC01"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"JasonC01":19}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"JasonC01"},"content":"todo h","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"JasonC01":1}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"JasonC01"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":20,"JasonC01":1}}]

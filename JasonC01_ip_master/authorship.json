[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"JasonC01"},"content":"# duke.Duke project template","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"JasonC01"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":22,"JasonC01":2}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"JasonC01"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2021-09-04"},{"lineNumber":16,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":17,"author":{"gitId":"JasonC01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-04"},{"lineNumber":18,"author":{"gitId":"JasonC01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-04"},{"lineNumber":19,"author":{"gitId":"JasonC01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-04"},{"lineNumber":20,"author":{"gitId":"JasonC01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-04"},{"lineNumber":21,"author":{"gitId":"JasonC01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-04"},{"lineNumber":22,"author":{"gitId":"JasonC01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-04"},{"lineNumber":23,"author":{"gitId":"JasonC01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-04"},{"lineNumber":24,"author":{"gitId":"JasonC01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-04"},{"lineNumber":25,"author":{"gitId":"JasonC01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-04"},{"lineNumber":26,"author":{"gitId":"JasonC01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-04"},{"lineNumber":27,"author":{"gitId":"JasonC01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-04"},{"lineNumber":28,"author":{"gitId":"JasonC01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-04"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    mainClassName \u003d \"seedu.duke.Duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":46,"JasonC01":14}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"JasonC01"},"content":"T|1|hello","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"JasonC01"},"content":"T|1|hi","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"JasonC01"},"content":"D|1|myDeadline|Sep 15 2021 6pm","lastModifiedDate":"2021-09-15"},{"lineNumber":4,"author":{"gitId":"JasonC01"},"content":"E|0|myEvent|Sep 15 2021 12pm","lastModifiedDate":"2021-09-15"},{"lineNumber":5,"author":{"gitId":"JasonC01"},"content":"T|0|myTodo","lastModifiedDate":"2021-09-15"}],"authorContributionMap":{"JasonC01":5}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2019-07-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"JasonC01"},"content":"## Features list","lastModifiedDate":"2021-09-15"},{"lineNumber":4,"author":{"gitId":"JasonC01"},"content":"1. Add/Delete Todos, Events and Deadlines","lastModifiedDate":"2021-09-15"},{"lineNumber":5,"author":{"gitId":"JasonC01"},"content":"2. View lists anytime","lastModifiedDate":"2021-09-15"},{"lineNumber":6,"author":{"gitId":"JasonC01"},"content":"3. Mark your completed tasks","lastModifiedDate":"2021-09-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":9,"author":{"gitId":"JasonC01"},"content":"### 1. Add/Delete Todos, Events and Deadlines","lastModifiedDate":"2021-09-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":11,"author":{"gitId":"JasonC01"},"content":"- Add or delete 3 types of tasks; Todos, Deadlines and Events.","lastModifiedDate":"2021-09-15"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":13,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":14,"author":{"gitId":"JasonC01"},"content":"### 2. View lists anytime","lastModifiedDate":"2021-09-15"},{"lineNumber":15,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":16,"author":{"gitId":"JasonC01"},"content":"- Use the **_list_** command to view the tasks stored in your list!","lastModifiedDate":"2021-09-15"},{"lineNumber":17,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":18,"author":{"gitId":"JasonC01"},"content":"### 3. Mark your completed tasks","lastModifiedDate":"2021-09-15"},{"lineNumber":19,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":20,"author":{"gitId":"JasonC01"},"content":"- Mark your tasks as done when you have completed them!","lastModifiedDate":"2021-09-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"## Usage","lastModifiedDate":"2019-07-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":24,"author":{"gitId":"JasonC01"},"content":"### `list` - list out all your added tasks","lastModifiedDate":"2021-09-15"},{"lineNumber":25,"author":{"gitId":"JasonC01"},"content":"####Example of usage:","lastModifiedDate":"2021-09-15"},{"lineNumber":26,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":27,"author":{"gitId":"JasonC01"},"content":"`list`","lastModifiedDate":"2021-09-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":29,"author":{"gitId":"JasonC01"},"content":"####Expected outcome:","lastModifiedDate":"2021-09-15"},{"lineNumber":30,"author":{"gitId":"JasonC01"},"content":"```","lastModifiedDate":"2021-09-15"},{"lineNumber":31,"author":{"gitId":"JasonC01"},"content":"Here are the tasks in your list:","lastModifiedDate":"2021-09-15"},{"lineNumber":32,"author":{"gitId":"JasonC01"},"content":"1. [T][X] hello","lastModifiedDate":"2021-09-15"},{"lineNumber":33,"author":{"gitId":"JasonC01"},"content":"2. [T][X] hi","lastModifiedDate":"2021-09-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"Describe the action and its outcome.","lastModifiedDate":"2021-07-17"},{"lineNumber":35,"author":{"gitId":"JasonC01"},"content":"```","lastModifiedDate":"2021-09-15"},{"lineNumber":36,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":37,"author":{"gitId":"JasonC01"},"content":"### `todo \u003ctaskDescription\u003e` - Adds todo task to your list","lastModifiedDate":"2021-09-15"},{"lineNumber":38,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":39,"author":{"gitId":"JasonC01"},"content":"####Example of usage: ","lastModifiedDate":"2021-09-15"},{"lineNumber":40,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":41,"author":{"gitId":"JasonC01"},"content":"`todo myTodo`","lastModifiedDate":"2021-09-15"},{"lineNumber":42,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":43,"author":{"gitId":"JasonC01"},"content":"####Expected outcome:","lastModifiedDate":"2021-09-15"},{"lineNumber":44,"author":{"gitId":"JasonC01"},"content":"```","lastModifiedDate":"2021-09-15"},{"lineNumber":45,"author":{"gitId":"JasonC01"},"content":"Got it. I\u0027ve added this task:","lastModifiedDate":"2021-09-15"},{"lineNumber":46,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":47,"author":{"gitId":"JasonC01"},"content":"[T][ ] myTodo","lastModifiedDate":"2021-09-15"},{"lineNumber":48,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":49,"author":{"gitId":"JasonC01"},"content":"Now you have 3 tasks in the list.","lastModifiedDate":"2021-09-15"},{"lineNumber":50,"author":{"gitId":"JasonC01"},"content":"```","lastModifiedDate":"2021-09-15"},{"lineNumber":51,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":52,"author":{"gitId":"JasonC01"},"content":"### `deadline \u003cdeadlineDescription\u003e /by \u003cyyyy-mm-dd\u003e \u003chhmm\u003e`- Adds deadline task to your list","lastModifiedDate":"2021-09-15"},{"lineNumber":53,"author":{"gitId":"JasonC01"},"content":"####Example of usage:","lastModifiedDate":"2021-09-15"},{"lineNumber":54,"author":{"gitId":"JasonC01"},"content":"`deadline myDeadline /by 2021-09-15 1800`","lastModifiedDate":"2021-09-15"},{"lineNumber":55,"author":{"gitId":"JasonC01"},"content":" ","lastModifiedDate":"2021-09-15"},{"lineNumber":56,"author":{"gitId":"JasonC01"},"content":"####Expected outcome:","lastModifiedDate":"2021-09-15"},{"lineNumber":57,"author":{"gitId":"JasonC01"},"content":"```","lastModifiedDate":"2021-09-15"},{"lineNumber":58,"author":{"gitId":"JasonC01"},"content":"Got it. I\u0027ve added this task:","lastModifiedDate":"2021-09-15"},{"lineNumber":59,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":60,"author":{"gitId":"JasonC01"},"content":"[D][ ] myDeadline (by: Sep 15 2021 6pm)","lastModifiedDate":"2021-09-15"},{"lineNumber":61,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":62,"author":{"gitId":"JasonC01"},"content":"Now you have 4 tasks in the list.","lastModifiedDate":"2021-09-15"},{"lineNumber":63,"author":{"gitId":"JasonC01"},"content":"```","lastModifiedDate":"2021-09-15"},{"lineNumber":64,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":65,"author":{"gitId":"JasonC01"},"content":"###`event \u003ctaskDescription\u003e /at \u003cyyyy-mm-dd\u003e \u003chhmm\u003e` - Adds event task to your list ","lastModifiedDate":"2021-09-15"},{"lineNumber":66,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":67,"author":{"gitId":"JasonC01"},"content":"####Example of usage:","lastModifiedDate":"2021-09-15"},{"lineNumber":68,"author":{"gitId":"JasonC01"},"content":"`event myEvent /at 2021-09-15 1200`","lastModifiedDate":"2021-09-15"},{"lineNumber":69,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":70,"author":{"gitId":"JasonC01"},"content":"####Expected outcome:","lastModifiedDate":"2021-09-15"},{"lineNumber":71,"author":{"gitId":"JasonC01"},"content":"```","lastModifiedDate":"2021-09-15"},{"lineNumber":72,"author":{"gitId":"JasonC01"},"content":"Got it. I\u0027ve added this task:","lastModifiedDate":"2021-09-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":74,"author":{"gitId":"JasonC01"},"content":"[E][ ] myEvent (at: Sep 15 2021 12pm)","lastModifiedDate":"2021-09-15"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":76,"author":{"gitId":"JasonC01"},"content":"Now you have 5 tasks in the list.","lastModifiedDate":"2021-09-15"},{"lineNumber":77,"author":{"gitId":"JasonC01"},"content":"```","lastModifiedDate":"2021-09-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":79,"author":{"gitId":"JasonC01"},"content":"###`delete \u003ctaskIndex\u003e` - Deletes task at the given index in the list","lastModifiedDate":"2021-09-15"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":81,"author":{"gitId":"JasonC01"},"content":"####Example of usage:","lastModifiedDate":"2021-09-15"},{"lineNumber":82,"author":{"gitId":"JasonC01"},"content":"`delete 3`","lastModifiedDate":"2021-09-15"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":84,"author":{"gitId":"JasonC01"},"content":"###Expected outcome:","lastModifiedDate":"2021-09-15"},{"lineNumber":85,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-09-15"},{"lineNumber":86,"author":{"gitId":"JasonC01"},"content":"Noted. I\u0027ve removed this task:","lastModifiedDate":"2021-09-15"},{"lineNumber":87,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":88,"author":{"gitId":"JasonC01"},"content":"[T][ ] myTodo","lastModifiedDate":"2021-09-15"},{"lineNumber":89,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":90,"author":{"gitId":"JasonC01"},"content":"Now you have 4 tasks in the list.","lastModifiedDate":"2021-09-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-09-15"},{"lineNumber":92,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":93,"author":{"gitId":"JasonC01"},"content":"###`undo` - Undo the most recent action if it is undo-able","lastModifiedDate":"2021-09-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":95,"author":{"gitId":"JasonC01"},"content":"####Example of usage:","lastModifiedDate":"2021-09-15"},{"lineNumber":96,"author":{"gitId":"JasonC01"},"content":"`undo`","lastModifiedDate":"2021-09-15"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":98,"author":{"gitId":"JasonC01"},"content":"####Expected outcome:","lastModifiedDate":"2021-09-15"},{"lineNumber":99,"author":{"gitId":"JasonC01"},"content":"```","lastModifiedDate":"2021-09-15"},{"lineNumber":100,"author":{"gitId":"JasonC01"},"content":"Got it. I\u0027ve added this task:","lastModifiedDate":"2021-09-15"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":102,"author":{"gitId":"JasonC01"},"content":"[T][ ] myTodo","lastModifiedDate":"2021-09-15"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":104,"author":{"gitId":"JasonC01"},"content":"Now you have 5 tasks in the list.","lastModifiedDate":"2021-09-15"},{"lineNumber":105,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":106,"author":{"gitId":"JasonC01"},"content":"###`done \u003ctaskIndex\u003e` - Marks the task with the given taskIndex as done","lastModifiedDate":"2021-09-15"},{"lineNumber":107,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":108,"author":{"gitId":"JasonC01"},"content":"####Example of usage:","lastModifiedDate":"2021-09-15"},{"lineNumber":109,"author":{"gitId":"JasonC01"},"content":"`done 3`","lastModifiedDate":"2021-09-15"},{"lineNumber":110,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":111,"author":{"gitId":"JasonC01"},"content":"####Expected outcome:","lastModifiedDate":"2021-09-15"},{"lineNumber":112,"author":{"gitId":"JasonC01"},"content":"```","lastModifiedDate":"2021-09-15"},{"lineNumber":113,"author":{"gitId":"JasonC01"},"content":"Nice! I\u0027ve marked this task as done:","lastModifiedDate":"2021-09-15"},{"lineNumber":114,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":115,"author":{"gitId":"JasonC01"},"content":"[D][X] myDeadline (by: Sep 15 2021 6pm)","lastModifiedDate":"2021-09-15"},{"lineNumber":116,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"}],"authorContributionMap":{"-":24,"JasonC01":92}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JasonC01"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"JasonC01"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"JasonC01"},"content":"    private String deadline;","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"JasonC01"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"JasonC01"},"content":"     * Constructor for a Deadline object (Only takes in content as deadline is included in content).","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"JasonC01"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"JasonC01"},"content":"     * @param taskContent Content to be stored in the Deadline object.","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"JasonC01"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"JasonC01"},"content":"    public Deadline(String taskContent) {","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"JasonC01"},"content":"        super(taskContent.split(\" /by \")[0], \"D\");","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"JasonC01"},"content":"        deadline \u003d Parser.parseTiming(taskContent.split(\" /by \")[1]);","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"JasonC01"},"content":"        assert this.getType().equals(\"D\") : \"Wrong type\";","lastModifiedDate":"2021-09-07"},{"lineNumber":15,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"JasonC01"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"JasonC01"},"content":"     * Constructor for a Deadline object.","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"JasonC01"},"content":"     * Takes in content and deadline separately.","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"JasonC01"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"JasonC01"},"content":"     * @param taskContent Content to be stored in the Deadline object.","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"JasonC01"},"content":"     * @param deadline Deadline of the Deadline object.","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"JasonC01"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"JasonC01"},"content":"    public Deadline(String taskContent, String deadline) {","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"JasonC01"},"content":"        super(taskContent, \"D\");","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"JasonC01"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"JasonC01"},"content":"        assert this.getType().equals(\"D\") : \"Wrong type\";","lastModifiedDate":"2021-09-07"},{"lineNumber":28,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":30,"author":{"gitId":"JasonC01"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":31,"author":{"gitId":"JasonC01"},"content":"     * Returns the deadline of this Deadline object.","lastModifiedDate":"2021-08-28"},{"lineNumber":32,"author":{"gitId":"JasonC01"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":33,"author":{"gitId":"JasonC01"},"content":"     * @return deadline","lastModifiedDate":"2021-08-28"},{"lineNumber":34,"author":{"gitId":"JasonC01"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":35,"author":{"gitId":"JasonC01"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"JasonC01"},"content":"    public String getTiming() {","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"JasonC01"},"content":"        assert deadline !\u003d null: \"Deadline cannot be null\";","lastModifiedDate":"2021-09-07"},{"lineNumber":38,"author":{"gitId":"JasonC01"},"content":"        return deadline;","lastModifiedDate":"2021-08-28"},{"lineNumber":39,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":40,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":41,"author":{"gitId":"JasonC01"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":42,"author":{"gitId":"JasonC01"},"content":"     * Returns the string representation of this Deadline object.","lastModifiedDate":"2021-08-28"},{"lineNumber":43,"author":{"gitId":"JasonC01"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":44,"author":{"gitId":"JasonC01"},"content":"     * @return String representation of Deadline object.","lastModifiedDate":"2021-08-28"},{"lineNumber":45,"author":{"gitId":"JasonC01"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":46,"author":{"gitId":"JasonC01"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":47,"author":{"gitId":"JasonC01"},"content":"    public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":48,"author":{"gitId":"JasonC01"},"content":"        if(super.isCompleted()) {","lastModifiedDate":"2021-08-19"},{"lineNumber":49,"author":{"gitId":"JasonC01"},"content":"            return \"[D][X] \" + super.getTaskContent() + \" \" + \"(by: \" + deadline + \")\";","lastModifiedDate":"2021-08-28"},{"lineNumber":50,"author":{"gitId":"JasonC01"},"content":"        }else {","lastModifiedDate":"2021-08-19"},{"lineNumber":51,"author":{"gitId":"JasonC01"},"content":"            return \"[D][ ] \" + super.getTaskContent() + \" \" + \"(by: \" + deadline + \")\";","lastModifiedDate":"2021-08-28"},{"lineNumber":52,"author":{"gitId":"JasonC01"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":53,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":54,"author":{"gitId":"JasonC01"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"JasonC01":54}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JasonC01"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"JasonC01"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-09-04"},{"lineNumber":3,"author":{"gitId":"JasonC01"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2021-09-04"},{"lineNumber":4,"author":{"gitId":"JasonC01"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2021-09-04"},{"lineNumber":5,"author":{"gitId":"JasonC01"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2021-09-04"},{"lineNumber":6,"author":{"gitId":"JasonC01"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-09-04"},{"lineNumber":7,"author":{"gitId":"JasonC01"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2021-09-04"},{"lineNumber":8,"author":{"gitId":"JasonC01"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2021-09-04"},{"lineNumber":9,"author":{"gitId":"JasonC01"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-09-04"},{"lineNumber":10,"author":{"gitId":"JasonC01"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2021-09-04"},{"lineNumber":11,"author":{"gitId":"JasonC01"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2021-09-04"},{"lineNumber":12,"author":{"gitId":"JasonC01"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2021-09-04"},{"lineNumber":13,"author":{"gitId":"JasonC01"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2021-09-04"},{"lineNumber":14,"author":{"gitId":"JasonC01"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-09-04"},{"lineNumber":15,"author":{"gitId":"JasonC01"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2021-09-04"},{"lineNumber":16,"author":{"gitId":"JasonC01"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-09-04"},{"lineNumber":17,"author":{"gitId":"JasonC01"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-09-04"},{"lineNumber":18,"author":{"gitId":"JasonC01"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2021-09-04"},{"lineNumber":19,"author":{"gitId":"JasonC01"},"content":"import javafx.scene.Node;","lastModifiedDate":"2021-09-04"},{"lineNumber":20,"author":{"gitId":"JasonC01"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-09-04"},{"lineNumber":21,"author":{"gitId":"JasonC01"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2021-09-04"},{"lineNumber":22,"author":{"gitId":"JasonC01"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2021-09-04"},{"lineNumber":23,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":24,"author":{"gitId":"JasonC01"},"content":"import static java.lang.Thread.sleep;","lastModifiedDate":"2021-09-04"},{"lineNumber":25,"author":{"gitId":"JasonC01"},"content":"import static javafx.application.Platform.exit;","lastModifiedDate":"2021-09-04"},{"lineNumber":26,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"JasonC01"},"content":"public class Duke{","lastModifiedDate":"2021-09-04"},{"lineNumber":29,"author":{"gitId":"JasonC01"},"content":"    private TaskList taskList;","lastModifiedDate":"2021-08-28"},{"lineNumber":30,"author":{"gitId":"JasonC01"},"content":"    private Storage storage;","lastModifiedDate":"2021-08-28"},{"lineNumber":31,"author":{"gitId":"JasonC01"},"content":"    private Ui ui;","lastModifiedDate":"2021-08-28"},{"lineNumber":32,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"JasonC01"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":34,"author":{"gitId":"JasonC01"},"content":"     * Constructor for a new Duke object.","lastModifiedDate":"2021-08-28"},{"lineNumber":35,"author":{"gitId":"JasonC01"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":36,"author":{"gitId":"JasonC01"},"content":"     * @param filePath File path for the storage file.","lastModifiedDate":"2021-08-28"},{"lineNumber":37,"author":{"gitId":"JasonC01"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":38,"author":{"gitId":"JasonC01"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"JasonC01"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"JasonC01"},"content":"        taskList \u003d storage.loadTask();","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"JasonC01"},"content":"        ui \u003d new Ui(storage, taskList);","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"JasonC01"},"content":"    public Duke() {","lastModifiedDate":"2021-09-04"},{"lineNumber":45,"author":{"gitId":"JasonC01"},"content":"        new Duke(\"data/duke.txt\");","lastModifiedDate":"2021-09-04"},{"lineNumber":46,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":47,"author":{"gitId":"JasonC01"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":48,"author":{"gitId":"JasonC01"},"content":"     * Executes the Duke object.","lastModifiedDate":"2021-08-28"},{"lineNumber":49,"author":{"gitId":"JasonC01"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":50,"author":{"gitId":"JasonC01"},"content":"    public void run() {","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"JasonC01"},"content":"        System.out.println(returnOutput(\"hehehe\"));","lastModifiedDate":"2021-09-04"},{"lineNumber":52,"author":{"gitId":"JasonC01"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"JasonC01"},"content":"        ui.greet();","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"JasonC01"},"content":"        taskList.printTask();","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"JasonC01"},"content":"        while (!isExit) {","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"JasonC01"},"content":"            String input \u003d ui.readLine();","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"JasonC01"},"content":"            ui.handleInput(input);","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"JasonC01"},"content":"            ui.showLine();","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"JasonC01"},"content":"            isExit \u003d ui.handleExit();","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"JasonC01"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"JasonC01"},"content":"    public String turnOn() {","lastModifiedDate":"2021-09-04"},{"lineNumber":63,"author":{"gitId":"JasonC01"},"content":"        return ui.greet() + taskList.printTask();","lastModifiedDate":"2021-09-04"},{"lineNumber":64,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":65,"author":{"gitId":"JasonC01"},"content":"    public String returnOutput(String input) {","lastModifiedDate":"2021-09-04"},{"lineNumber":66,"author":{"gitId":"JasonC01"},"content":"//        System.out.println(ui.handleInput(input));","lastModifiedDate":"2021-09-04"},{"lineNumber":67,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":68,"author":{"gitId":"JasonC01"},"content":"        return ui.handleInput(input);","lastModifiedDate":"2021-09-04"},{"lineNumber":69,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":70,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":71,"author":{"gitId":"JasonC01"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":72,"author":{"gitId":"JasonC01"},"content":"     * Creates new Dukc object and runs it.","lastModifiedDate":"2021-08-28"},{"lineNumber":73,"author":{"gitId":"JasonC01"},"content":"     * @param args","lastModifiedDate":"2021-08-28"},{"lineNumber":74,"author":{"gitId":"JasonC01"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":75,"author":{"gitId":"JasonC01"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-25"},{"lineNumber":76,"author":{"gitId":"JasonC01"},"content":"        new Duke(\"data/duke.txt\").run();","lastModifiedDate":"2021-08-25"},{"lineNumber":77,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":78,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":79,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":80,"author":{"gitId":"JasonC01"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"JasonC01":80}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JasonC01"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"JasonC01"},"content":"/**","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"JasonC01"},"content":" * Contains exceptions specialised to Duke.","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"JasonC01"},"content":" */","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"JasonC01"},"content":"public abstract class DukeException extends Exception{","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"JasonC01"},"content":"    abstract void exceptionMessage();","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"JasonC01"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"JasonC01"},"content":"     * Exception thrown when the user tries to create a new ToDo object without a description.","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"JasonC01"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"JasonC01"},"content":"    public static class emptyToDoDescriptionException extends DukeException {","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"JasonC01"},"content":"        @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"JasonC01"},"content":"        void exceptionMessage() {","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"JasonC01"},"content":"            System.out.println(\"☹ OOPS!!! The description of a todo cannot be empty.\");","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"JasonC01"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":17,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":18,"author":{"gitId":"JasonC01"},"content":"        String stringExceptionMessage() {","lastModifiedDate":"2021-09-04"},{"lineNumber":19,"author":{"gitId":"JasonC01"},"content":"            return \"☹ OOPS!!! The description of a todo cannot be empty.\";","lastModifiedDate":"2021-09-04"},{"lineNumber":20,"author":{"gitId":"JasonC01"},"content":"        }","lastModifiedDate":"2021-09-04"},{"lineNumber":21,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":22,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":23,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"JasonC01"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"JasonC01"},"content":"     * Exception thrown when the user tries to create a new Event object without a description.","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"JasonC01"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"JasonC01"},"content":"    public static class emptyEventDescriptionException extends DukeException {","lastModifiedDate":"2021-08-19"},{"lineNumber":28,"author":{"gitId":"JasonC01"},"content":"        @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":29,"author":{"gitId":"JasonC01"},"content":"        void exceptionMessage() {","lastModifiedDate":"2021-08-19"},{"lineNumber":30,"author":{"gitId":"JasonC01"},"content":"            System.out.println(\"☹ OOPS!!! The description of an event cannot be empty.\");","lastModifiedDate":"2021-08-19"},{"lineNumber":31,"author":{"gitId":"JasonC01"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":32,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":33,"author":{"gitId":"JasonC01"},"content":"        String stringExceptionMessage() {","lastModifiedDate":"2021-09-04"},{"lineNumber":34,"author":{"gitId":"JasonC01"},"content":"            return \"☹ OOPS!!! The description of an event cannot be empty.\";","lastModifiedDate":"2021-09-04"},{"lineNumber":35,"author":{"gitId":"JasonC01"},"content":"        }","lastModifiedDate":"2021-09-04"},{"lineNumber":36,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":37,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":38,"author":{"gitId":"JasonC01"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":39,"author":{"gitId":"JasonC01"},"content":"     * Exception thrown when the user tries to create a new Deadline object without a description.","lastModifiedDate":"2021-08-28"},{"lineNumber":40,"author":{"gitId":"JasonC01"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":41,"author":{"gitId":"JasonC01"},"content":"    public static class emptyDeadlineDescriptionException extends DukeException {","lastModifiedDate":"2021-08-19"},{"lineNumber":42,"author":{"gitId":"JasonC01"},"content":"        @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":43,"author":{"gitId":"JasonC01"},"content":"        void exceptionMessage() {","lastModifiedDate":"2021-08-19"},{"lineNumber":44,"author":{"gitId":"JasonC01"},"content":"            System.out.println(\"☹ OOPS!!! The description of a deadline cannot be empty.\");","lastModifiedDate":"2021-08-19"},{"lineNumber":45,"author":{"gitId":"JasonC01"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":46,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":47,"author":{"gitId":"JasonC01"},"content":"        String stringExceptionMessage() {","lastModifiedDate":"2021-09-04"},{"lineNumber":48,"author":{"gitId":"JasonC01"},"content":"            return\"☹ OOPS!!! The description of a deadline cannot be empty.\";","lastModifiedDate":"2021-09-04"},{"lineNumber":49,"author":{"gitId":"JasonC01"},"content":"        }","lastModifiedDate":"2021-09-04"},{"lineNumber":50,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":51,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":52,"author":{"gitId":"JasonC01"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":53,"author":{"gitId":"JasonC01"},"content":"     * Exception thrown when a user types in an invalid input.","lastModifiedDate":"2021-08-28"},{"lineNumber":54,"author":{"gitId":"JasonC01"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":55,"author":{"gitId":"JasonC01"},"content":"    public static class invalidInputException extends DukeException {","lastModifiedDate":"2021-08-19"},{"lineNumber":56,"author":{"gitId":"JasonC01"},"content":"        @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":57,"author":{"gitId":"JasonC01"},"content":"        void exceptionMessage() {","lastModifiedDate":"2021-08-19"},{"lineNumber":58,"author":{"gitId":"JasonC01"},"content":"            System.out.println(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2021-08-19"},{"lineNumber":59,"author":{"gitId":"JasonC01"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":60,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":61,"author":{"gitId":"JasonC01"},"content":"        String stringExceptionMessage() {","lastModifiedDate":"2021-09-04"},{"lineNumber":62,"author":{"gitId":"JasonC01"},"content":"            return \"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";","lastModifiedDate":"2021-09-04"},{"lineNumber":63,"author":{"gitId":"JasonC01"},"content":"        }","lastModifiedDate":"2021-09-04"},{"lineNumber":64,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":65,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":66,"author":{"gitId":"JasonC01"},"content":"    public static class cannotUndoException extends DukeException {","lastModifiedDate":"2021-09-09"},{"lineNumber":67,"author":{"gitId":"JasonC01"},"content":"        @Override","lastModifiedDate":"2021-09-09"},{"lineNumber":68,"author":{"gitId":"JasonC01"},"content":"        void exceptionMessage() {","lastModifiedDate":"2021-09-09"},{"lineNumber":69,"author":{"gitId":"JasonC01"},"content":"            System.out.println(\"☹ OOPS!!! I\u0027m sorry, but there is no command to undo :-(\");","lastModifiedDate":"2021-09-09"},{"lineNumber":70,"author":{"gitId":"JasonC01"},"content":"        }","lastModifiedDate":"2021-09-09"},{"lineNumber":71,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":72,"author":{"gitId":"JasonC01"},"content":"        String stringExceptionMessage() {","lastModifiedDate":"2021-09-09"},{"lineNumber":73,"author":{"gitId":"JasonC01"},"content":"            return \"☹ OOPS!!! I\u0027m sorry, but there is no command to undo :-(\";","lastModifiedDate":"2021-09-09"},{"lineNumber":74,"author":{"gitId":"JasonC01"},"content":"        }","lastModifiedDate":"2021-09-09"},{"lineNumber":75,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-09-09"},{"lineNumber":76,"author":{"gitId":"JasonC01"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"JasonC01":76}},{"path":"src/main/java/duke/DukeLauncher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JasonC01"},"content":"package duke;","lastModifiedDate":"2021-09-04"},{"lineNumber":2,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":3,"author":{"gitId":"JasonC01"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-09-04"},{"lineNumber":4,"author":{"gitId":"JasonC01"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2021-09-04"},{"lineNumber":5,"author":{"gitId":"JasonC01"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2021-09-04"},{"lineNumber":6,"author":{"gitId":"JasonC01"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2021-09-04"},{"lineNumber":7,"author":{"gitId":"JasonC01"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-09-04"},{"lineNumber":8,"author":{"gitId":"JasonC01"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2021-09-04"},{"lineNumber":9,"author":{"gitId":"JasonC01"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2021-09-04"},{"lineNumber":10,"author":{"gitId":"JasonC01"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-09-04"},{"lineNumber":11,"author":{"gitId":"JasonC01"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2021-09-04"},{"lineNumber":12,"author":{"gitId":"JasonC01"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2021-09-04"},{"lineNumber":13,"author":{"gitId":"JasonC01"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2021-09-04"},{"lineNumber":14,"author":{"gitId":"JasonC01"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2021-09-04"},{"lineNumber":15,"author":{"gitId":"JasonC01"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-09-04"},{"lineNumber":16,"author":{"gitId":"JasonC01"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2021-09-04"},{"lineNumber":17,"author":{"gitId":"JasonC01"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-09-04"},{"lineNumber":18,"author":{"gitId":"JasonC01"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-09-04"},{"lineNumber":19,"author":{"gitId":"JasonC01"},"content":"import javafx.scene.Node;","lastModifiedDate":"2021-09-04"},{"lineNumber":20,"author":{"gitId":"JasonC01"},"content":"import static javafx.application.Platform.exit;","lastModifiedDate":"2021-09-04"},{"lineNumber":21,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":22,"author":{"gitId":"JasonC01"},"content":"public class DukeLauncher extends Application {","lastModifiedDate":"2021-09-04"},{"lineNumber":23,"author":{"gitId":"JasonC01"},"content":"    Duke dukeObject \u003d new Duke(\"data/duke.txt\");","lastModifiedDate":"2021-09-04"},{"lineNumber":24,"author":{"gitId":"JasonC01"},"content":"    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));","lastModifiedDate":"2021-09-04"},{"lineNumber":25,"author":{"gitId":"JasonC01"},"content":"    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));","lastModifiedDate":"2021-09-04"},{"lineNumber":26,"author":{"gitId":"JasonC01"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2021-09-04"},{"lineNumber":27,"author":{"gitId":"JasonC01"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2021-09-04"},{"lineNumber":28,"author":{"gitId":"JasonC01"},"content":"    private TextField userInput;","lastModifiedDate":"2021-09-04"},{"lineNumber":29,"author":{"gitId":"JasonC01"},"content":"    private Button sendButton;","lastModifiedDate":"2021-09-04"},{"lineNumber":30,"author":{"gitId":"JasonC01"},"content":"    private Scene scene;","lastModifiedDate":"2021-09-04"},{"lineNumber":31,"author":{"gitId":"JasonC01"},"content":"    private boolean isExit \u003d false;","lastModifiedDate":"2021-09-04"},{"lineNumber":32,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":33,"author":{"gitId":"JasonC01"},"content":"    public DukeLauncher() {","lastModifiedDate":"2021-09-04"},{"lineNumber":34,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":35,"author":{"gitId":"JasonC01"},"content":"    @Override","lastModifiedDate":"2021-09-04"},{"lineNumber":36,"author":{"gitId":"JasonC01"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2021-09-04"},{"lineNumber":37,"author":{"gitId":"JasonC01"},"content":"        scrollPane \u003d new ScrollPane();","lastModifiedDate":"2021-09-04"},{"lineNumber":38,"author":{"gitId":"JasonC01"},"content":"        dialogContainer \u003d new VBox();","lastModifiedDate":"2021-09-04"},{"lineNumber":39,"author":{"gitId":"JasonC01"},"content":"        scrollPane.setContent(dialogContainer);","lastModifiedDate":"2021-09-04"},{"lineNumber":40,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":41,"author":{"gitId":"JasonC01"},"content":"        userInput \u003d new TextField();","lastModifiedDate":"2021-09-04"},{"lineNumber":42,"author":{"gitId":"JasonC01"},"content":"        sendButton \u003d new Button(\"Send\");","lastModifiedDate":"2021-09-04"},{"lineNumber":43,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":44,"author":{"gitId":"JasonC01"},"content":"        AnchorPane mainLayout \u003d new AnchorPane();","lastModifiedDate":"2021-09-04"},{"lineNumber":45,"author":{"gitId":"JasonC01"},"content":"        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);","lastModifiedDate":"2021-09-04"},{"lineNumber":46,"author":{"gitId":"JasonC01"},"content":"        dialogContainer.getChildren().add(DukeLauncher.DialogBox.getDukeDialog(new Label(dukeObject.turnOn()), new ImageView(this.duke)));","lastModifiedDate":"2021-09-04"},{"lineNumber":47,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":48,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":49,"author":{"gitId":"JasonC01"},"content":"        stage.setTitle(\"Duke\");","lastModifiedDate":"2021-09-04"},{"lineNumber":50,"author":{"gitId":"JasonC01"},"content":"        stage.setResizable(false);","lastModifiedDate":"2021-09-04"},{"lineNumber":51,"author":{"gitId":"JasonC01"},"content":"        stage.setMinHeight(600.0);","lastModifiedDate":"2021-09-04"},{"lineNumber":52,"author":{"gitId":"JasonC01"},"content":"        stage.setMinWidth(400.0);","lastModifiedDate":"2021-09-04"},{"lineNumber":53,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":54,"author":{"gitId":"JasonC01"},"content":"        mainLayout.setPrefSize(400.0, 600.0);","lastModifiedDate":"2021-09-04"},{"lineNumber":55,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":56,"author":{"gitId":"JasonC01"},"content":"        scrollPane.setPrefSize(385, 535);","lastModifiedDate":"2021-09-04"},{"lineNumber":57,"author":{"gitId":"JasonC01"},"content":"        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);","lastModifiedDate":"2021-09-04"},{"lineNumber":58,"author":{"gitId":"JasonC01"},"content":"        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);","lastModifiedDate":"2021-09-04"},{"lineNumber":59,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":60,"author":{"gitId":"JasonC01"},"content":"        scrollPane.setVvalue(1.0);","lastModifiedDate":"2021-09-04"},{"lineNumber":61,"author":{"gitId":"JasonC01"},"content":"        scrollPane.setFitToWidth(true);","lastModifiedDate":"2021-09-04"},{"lineNumber":62,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":63,"author":{"gitId":"JasonC01"},"content":"        // You will need to import `javafx.scene.layout.Region` for this.","lastModifiedDate":"2021-09-04"},{"lineNumber":64,"author":{"gitId":"JasonC01"},"content":"        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);","lastModifiedDate":"2021-09-04"},{"lineNumber":65,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":66,"author":{"gitId":"JasonC01"},"content":"        userInput.setPrefWidth(325.0);","lastModifiedDate":"2021-09-04"},{"lineNumber":67,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":68,"author":{"gitId":"JasonC01"},"content":"        sendButton.setPrefWidth(55.0);","lastModifiedDate":"2021-09-04"},{"lineNumber":69,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":70,"author":{"gitId":"JasonC01"},"content":"        AnchorPane.setTopAnchor(scrollPane, 1.0);","lastModifiedDate":"2021-09-04"},{"lineNumber":71,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":72,"author":{"gitId":"JasonC01"},"content":"        AnchorPane.setBottomAnchor(sendButton, 1.0);","lastModifiedDate":"2021-09-04"},{"lineNumber":73,"author":{"gitId":"JasonC01"},"content":"        AnchorPane.setRightAnchor(sendButton, 1.0);","lastModifiedDate":"2021-09-04"},{"lineNumber":74,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":75,"author":{"gitId":"JasonC01"},"content":"        AnchorPane.setLeftAnchor(userInput , 1.0);","lastModifiedDate":"2021-09-04"},{"lineNumber":76,"author":{"gitId":"JasonC01"},"content":"        AnchorPane.setBottomAnchor(userInput, 1.0);","lastModifiedDate":"2021-09-04"},{"lineNumber":77,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":78,"author":{"gitId":"JasonC01"},"content":"        scene \u003d new Scene(mainLayout);","lastModifiedDate":"2021-09-04"},{"lineNumber":79,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":80,"author":{"gitId":"JasonC01"},"content":"        stage.setScene(scene);","lastModifiedDate":"2021-09-04"},{"lineNumber":81,"author":{"gitId":"JasonC01"},"content":"        stage.show();","lastModifiedDate":"2021-09-04"},{"lineNumber":82,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":83,"author":{"gitId":"JasonC01"},"content":"        sendButton.setOnMouseClicked((event) -\u003e {","lastModifiedDate":"2021-09-04"},{"lineNumber":84,"author":{"gitId":"JasonC01"},"content":"            dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));","lastModifiedDate":"2021-09-04"},{"lineNumber":85,"author":{"gitId":"JasonC01"},"content":"            userInput.clear();","lastModifiedDate":"2021-09-04"},{"lineNumber":86,"author":{"gitId":"JasonC01"},"content":"        });","lastModifiedDate":"2021-09-04"},{"lineNumber":87,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":88,"author":{"gitId":"JasonC01"},"content":"        userInput.setOnAction((event) -\u003e {","lastModifiedDate":"2021-09-04"},{"lineNumber":89,"author":{"gitId":"JasonC01"},"content":"            dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));","lastModifiedDate":"2021-09-04"},{"lineNumber":90,"author":{"gitId":"JasonC01"},"content":"            userInput.clear();","lastModifiedDate":"2021-09-04"},{"lineNumber":91,"author":{"gitId":"JasonC01"},"content":"        });","lastModifiedDate":"2021-09-04"},{"lineNumber":92,"author":{"gitId":"JasonC01"},"content":"        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));","lastModifiedDate":"2021-09-04"},{"lineNumber":93,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":94,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":95,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":96,"author":{"gitId":"JasonC01"},"content":"        sendButton.setOnMouseClicked((event) -\u003e {","lastModifiedDate":"2021-09-04"},{"lineNumber":97,"author":{"gitId":"JasonC01"},"content":"            handleUserInput();","lastModifiedDate":"2021-09-04"},{"lineNumber":98,"author":{"gitId":"JasonC01"},"content":"        });","lastModifiedDate":"2021-09-04"},{"lineNumber":99,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":100,"author":{"gitId":"JasonC01"},"content":"        userInput.setOnAction((event) -\u003e {","lastModifiedDate":"2021-09-04"},{"lineNumber":101,"author":{"gitId":"JasonC01"},"content":"            handleUserInput();","lastModifiedDate":"2021-09-04"},{"lineNumber":102,"author":{"gitId":"JasonC01"},"content":"        });","lastModifiedDate":"2021-09-04"},{"lineNumber":103,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":104,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":105,"author":{"gitId":"JasonC01"},"content":"    /**","lastModifiedDate":"2021-09-04"},{"lineNumber":106,"author":{"gitId":"JasonC01"},"content":"     * Iteration 2:","lastModifiedDate":"2021-09-04"},{"lineNumber":107,"author":{"gitId":"JasonC01"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2021-09-04"},{"lineNumber":108,"author":{"gitId":"JasonC01"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2021-09-04"},{"lineNumber":109,"author":{"gitId":"JasonC01"},"content":"     */","lastModifiedDate":"2021-09-04"},{"lineNumber":110,"author":{"gitId":"JasonC01"},"content":"    private void handleUserInput() {","lastModifiedDate":"2021-09-04"},{"lineNumber":111,"author":{"gitId":"JasonC01"},"content":"        Label userText \u003d new Label(userInput.getText());","lastModifiedDate":"2021-09-04"},{"lineNumber":112,"author":{"gitId":"JasonC01"},"content":"        Label dukeText \u003d new Label(getResponse(userInput.getText()));","lastModifiedDate":"2021-09-04"},{"lineNumber":113,"author":{"gitId":"JasonC01"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2021-09-04"},{"lineNumber":114,"author":{"gitId":"JasonC01"},"content":"                DukeLauncher.DialogBox.getUserDialog(userText, new ImageView(user)),","lastModifiedDate":"2021-09-04"},{"lineNumber":115,"author":{"gitId":"JasonC01"},"content":"                DukeLauncher.DialogBox.getDukeDialog(dukeText, new ImageView(duke))","lastModifiedDate":"2021-09-04"},{"lineNumber":116,"author":{"gitId":"JasonC01"},"content":"        );","lastModifiedDate":"2021-09-04"},{"lineNumber":117,"author":{"gitId":"JasonC01"},"content":"        if(userInput.getText().equals(\"bye\")) {","lastModifiedDate":"2021-09-04"},{"lineNumber":118,"author":{"gitId":"JasonC01"},"content":"            exit();","lastModifiedDate":"2021-09-04"},{"lineNumber":119,"author":{"gitId":"JasonC01"},"content":"        }","lastModifiedDate":"2021-09-04"},{"lineNumber":120,"author":{"gitId":"JasonC01"},"content":"        userInput.clear();","lastModifiedDate":"2021-09-04"},{"lineNumber":121,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":122,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":123,"author":{"gitId":"JasonC01"},"content":"    /**","lastModifiedDate":"2021-09-04"},{"lineNumber":124,"author":{"gitId":"JasonC01"},"content":"     * You should have your own function to generate a response to user input.","lastModifiedDate":"2021-09-04"},{"lineNumber":125,"author":{"gitId":"JasonC01"},"content":"     * Replace this stub with your completed method.","lastModifiedDate":"2021-09-04"},{"lineNumber":126,"author":{"gitId":"JasonC01"},"content":"     */","lastModifiedDate":"2021-09-04"},{"lineNumber":127,"author":{"gitId":"JasonC01"},"content":"    private String getResponse(String input) {","lastModifiedDate":"2021-09-04"},{"lineNumber":128,"author":{"gitId":"JasonC01"},"content":"        System.out.println(\"hihi\");","lastModifiedDate":"2021-09-04"},{"lineNumber":129,"author":{"gitId":"JasonC01"},"content":"        return dukeObject.returnOutput(input);","lastModifiedDate":"2021-09-04"},{"lineNumber":130,"author":{"gitId":"JasonC01"},"content":"//        return \"hi\";","lastModifiedDate":"2021-09-04"},{"lineNumber":131,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":132,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":133,"author":{"gitId":"JasonC01"},"content":"    /**","lastModifiedDate":"2021-09-04"},{"lineNumber":134,"author":{"gitId":"JasonC01"},"content":"     * Iteration 1:","lastModifiedDate":"2021-09-04"},{"lineNumber":135,"author":{"gitId":"JasonC01"},"content":"     * Creates a label with the specified text and adds it to the dialog container.","lastModifiedDate":"2021-09-04"},{"lineNumber":136,"author":{"gitId":"JasonC01"},"content":"     * @param text String containing text to add","lastModifiedDate":"2021-09-04"},{"lineNumber":137,"author":{"gitId":"JasonC01"},"content":"     * @return a label with the specified text that has word wrap enabled.","lastModifiedDate":"2021-09-04"},{"lineNumber":138,"author":{"gitId":"JasonC01"},"content":"     */","lastModifiedDate":"2021-09-04"},{"lineNumber":139,"author":{"gitId":"JasonC01"},"content":"    private Label getDialogLabel(String text) {","lastModifiedDate":"2021-09-04"},{"lineNumber":140,"author":{"gitId":"JasonC01"},"content":"        // You will need to import `javafx.scene.control.Label`.","lastModifiedDate":"2021-09-04"},{"lineNumber":141,"author":{"gitId":"JasonC01"},"content":"        Label textToAdd \u003d new Label(text);","lastModifiedDate":"2021-09-04"},{"lineNumber":142,"author":{"gitId":"JasonC01"},"content":"        textToAdd.setWrapText(true);","lastModifiedDate":"2021-09-04"},{"lineNumber":143,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":144,"author":{"gitId":"JasonC01"},"content":"        return textToAdd;","lastModifiedDate":"2021-09-04"},{"lineNumber":145,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":146,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":147,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":148,"author":{"gitId":"JasonC01"},"content":"    public static class DialogBox extends HBox {","lastModifiedDate":"2021-09-04"},{"lineNumber":149,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":150,"author":{"gitId":"JasonC01"},"content":"        private Label text;","lastModifiedDate":"2021-09-04"},{"lineNumber":151,"author":{"gitId":"JasonC01"},"content":"        private ImageView displayPicture;","lastModifiedDate":"2021-09-04"},{"lineNumber":152,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":153,"author":{"gitId":"JasonC01"},"content":"        public DialogBox(Label l, ImageView iv) {","lastModifiedDate":"2021-09-04"},{"lineNumber":154,"author":{"gitId":"JasonC01"},"content":"            text \u003d l;","lastModifiedDate":"2021-09-04"},{"lineNumber":155,"author":{"gitId":"JasonC01"},"content":"            displayPicture \u003d iv;","lastModifiedDate":"2021-09-04"},{"lineNumber":156,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":157,"author":{"gitId":"JasonC01"},"content":"            text.setWrapText(true);","lastModifiedDate":"2021-09-04"},{"lineNumber":158,"author":{"gitId":"JasonC01"},"content":"            displayPicture.setFitWidth(100.0);","lastModifiedDate":"2021-09-04"},{"lineNumber":159,"author":{"gitId":"JasonC01"},"content":"            displayPicture.setFitHeight(100.0);","lastModifiedDate":"2021-09-04"},{"lineNumber":160,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":161,"author":{"gitId":"JasonC01"},"content":"            this.setAlignment(Pos.TOP_RIGHT);","lastModifiedDate":"2021-09-04"},{"lineNumber":162,"author":{"gitId":"JasonC01"},"content":"            this.getChildren().addAll(text, displayPicture);","lastModifiedDate":"2021-09-04"},{"lineNumber":163,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":164,"author":{"gitId":"JasonC01"},"content":"        }","lastModifiedDate":"2021-09-04"},{"lineNumber":165,"author":{"gitId":"JasonC01"},"content":"        /**","lastModifiedDate":"2021-09-04"},{"lineNumber":166,"author":{"gitId":"JasonC01"},"content":"         * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2021-09-04"},{"lineNumber":167,"author":{"gitId":"JasonC01"},"content":"         */","lastModifiedDate":"2021-09-04"},{"lineNumber":168,"author":{"gitId":"JasonC01"},"content":"        private void flip() {","lastModifiedDate":"2021-09-04"},{"lineNumber":169,"author":{"gitId":"JasonC01"},"content":"            this.setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2021-09-04"},{"lineNumber":170,"author":{"gitId":"JasonC01"},"content":"            ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2021-09-04"},{"lineNumber":171,"author":{"gitId":"JasonC01"},"content":"            FXCollections.reverse(tmp);","lastModifiedDate":"2021-09-04"},{"lineNumber":172,"author":{"gitId":"JasonC01"},"content":"            this.getChildren().setAll(tmp);","lastModifiedDate":"2021-09-04"},{"lineNumber":173,"author":{"gitId":"JasonC01"},"content":"        }","lastModifiedDate":"2021-09-04"},{"lineNumber":174,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":175,"author":{"gitId":"JasonC01"},"content":"        public static DukeLauncher.DialogBox getUserDialog(Label l, ImageView iv) {","lastModifiedDate":"2021-09-04"},{"lineNumber":176,"author":{"gitId":"JasonC01"},"content":"            return new DukeLauncher.DialogBox(l, iv);","lastModifiedDate":"2021-09-04"},{"lineNumber":177,"author":{"gitId":"JasonC01"},"content":"        }","lastModifiedDate":"2021-09-04"},{"lineNumber":178,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":179,"author":{"gitId":"JasonC01"},"content":"        public static DukeLauncher.DialogBox getDukeDialog(Label l, ImageView iv) {","lastModifiedDate":"2021-09-04"},{"lineNumber":180,"author":{"gitId":"JasonC01"},"content":"            var db \u003d new DukeLauncher.DialogBox(l, iv);","lastModifiedDate":"2021-09-04"},{"lineNumber":181,"author":{"gitId":"JasonC01"},"content":"            db.flip();","lastModifiedDate":"2021-09-04"},{"lineNumber":182,"author":{"gitId":"JasonC01"},"content":"            return db;","lastModifiedDate":"2021-09-04"},{"lineNumber":183,"author":{"gitId":"JasonC01"},"content":"        }","lastModifiedDate":"2021-09-04"},{"lineNumber":184,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":185,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":186,"author":{"gitId":"JasonC01"},"content":"}","lastModifiedDate":"2021-09-04"}],"authorContributionMap":{"JasonC01":186}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JasonC01"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"JasonC01"},"content":"public class Event extends Task{","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"JasonC01"},"content":"    private String eventTime;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"JasonC01"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"JasonC01"},"content":"     * Constructor for a Event object (Only takes in content as event time is included in content).","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"JasonC01"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"JasonC01"},"content":"     * @param taskContent Content to be stored in the Event object.","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"JasonC01"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"JasonC01"},"content":"    public Event(String taskContent) {","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"JasonC01"},"content":"        super(taskContent.split(\" /at \")[0], \"E\");","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"JasonC01"},"content":"        eventTime \u003d Parser.parseTiming(taskContent.split(\" /at \")[1]);","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"JasonC01"},"content":"        assert this.getType().equals(\"E\") : \"Wrong type\";","lastModifiedDate":"2021-09-07"},{"lineNumber":14,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"JasonC01"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"JasonC01"},"content":"     * Constructor for a Event object.","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"JasonC01"},"content":"     * Takes in content and event time separately.","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"JasonC01"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"JasonC01"},"content":"     * @param taskContent Content to be stored in the Event object.","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"JasonC01"},"content":"     * @param eventTime Event time of the Event object.","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"JasonC01"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"JasonC01"},"content":"    public Event(String taskContent, String eventTime) {","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"JasonC01"},"content":"        super(taskContent, \"E\");","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"JasonC01"},"content":"        this.eventTime \u003d eventTime;","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"JasonC01"},"content":"        assert this.getType().equals(\"E\") : \"Wrong type\";","lastModifiedDate":"2021-09-07"},{"lineNumber":27,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":29,"author":{"gitId":"JasonC01"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":30,"author":{"gitId":"JasonC01"},"content":"     * Returns the event time of this Event object.","lastModifiedDate":"2021-08-28"},{"lineNumber":31,"author":{"gitId":"JasonC01"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":32,"author":{"gitId":"JasonC01"},"content":"     * @return event time","lastModifiedDate":"2021-08-28"},{"lineNumber":33,"author":{"gitId":"JasonC01"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":34,"author":{"gitId":"JasonC01"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"JasonC01"},"content":"    public String getTiming() {","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"JasonC01"},"content":"        assert eventTime !\u003d null: \"Event time cannot be null\";","lastModifiedDate":"2021-09-07"},{"lineNumber":37,"author":{"gitId":"JasonC01"},"content":"        return eventTime;","lastModifiedDate":"2021-08-28"},{"lineNumber":38,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":39,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":40,"author":{"gitId":"JasonC01"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":41,"author":{"gitId":"JasonC01"},"content":"     * Returns the string representation of this Event object.","lastModifiedDate":"2021-08-28"},{"lineNumber":42,"author":{"gitId":"JasonC01"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":43,"author":{"gitId":"JasonC01"},"content":"     * @return String representation of Event object.","lastModifiedDate":"2021-08-28"},{"lineNumber":44,"author":{"gitId":"JasonC01"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":45,"author":{"gitId":"JasonC01"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":46,"author":{"gitId":"JasonC01"},"content":"    public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":47,"author":{"gitId":"JasonC01"},"content":"        if(super.isCompleted()) {","lastModifiedDate":"2021-08-19"},{"lineNumber":48,"author":{"gitId":"JasonC01"},"content":"            return \"[E][X] \" + super.getTaskContent() + \" \" + \"(at: \" + eventTime + \")\";","lastModifiedDate":"2021-08-28"},{"lineNumber":49,"author":{"gitId":"JasonC01"},"content":"        }else {","lastModifiedDate":"2021-08-19"},{"lineNumber":50,"author":{"gitId":"JasonC01"},"content":"            return \"[E][ ] \" + super.getTaskContent() + \" \" + \"(at: \" + eventTime + \")\";","lastModifiedDate":"2021-08-28"},{"lineNumber":51,"author":{"gitId":"JasonC01"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":52,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":53,"author":{"gitId":"JasonC01"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"JasonC01":53}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JasonC01"},"content":"package duke;","lastModifiedDate":"2021-09-04"},{"lineNumber":2,"author":{"gitId":"JasonC01"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-09-04"},{"lineNumber":3,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":4,"author":{"gitId":"JasonC01"},"content":"public class Launcher {","lastModifiedDate":"2021-09-04"},{"lineNumber":5,"author":{"gitId":"JasonC01"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-09-04"},{"lineNumber":6,"author":{"gitId":"JasonC01"},"content":"        Application.launch(DukeLauncher.class, args);","lastModifiedDate":"2021-09-04"},{"lineNumber":7,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":8,"author":{"gitId":"JasonC01"},"content":"}","lastModifiedDate":"2021-09-04"}],"authorContributionMap":{"JasonC01":8}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JasonC01"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"JasonC01"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"JasonC01"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"JasonC01"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"JasonC01"},"content":"public class Parser {","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"JasonC01"},"content":"    public static Integer parseDelete(String input) {","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"JasonC01"},"content":"        return Integer.parseInt(input.split(\" \")[1]);","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"JasonC01"},"content":"    public static Integer parseDone(String input) {","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"JasonC01"},"content":"        return Integer.parseInt(input.split(\" \")[1]);","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"JasonC01"},"content":"    public static String parseEvent(String input) {","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"JasonC01"},"content":"        return input.split(\"event \")[1];","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"JasonC01"},"content":"    public static String parseTodo(String input) {","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"JasonC01"},"content":"        return input.split(\"todo \")[1];","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"JasonC01"},"content":"    public static String parseDeadline(String input) {","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"JasonC01"},"content":"        return input.split(\"deadline \")[1];","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"JasonC01"},"content":"    public static String parseTiming(String timing) {","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"JasonC01"},"content":"        String formattedDateTime \u003d \"\";","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"JasonC01"},"content":"        String date\u003d timing.split(\" \")[0];","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"JasonC01"},"content":"        String time \u003d timing.split(\" \")[1];","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"JasonC01"},"content":"        int hour \u003d Integer.parseInt(time.substring(0, 2));","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"JasonC01"},"content":"        int minute \u003d Integer.parseInt(time.substring(2, 4));","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"JasonC01"},"content":"        LocalDate formattedDate \u003d LocalDate.parse(date);","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"JasonC01"},"content":"        LocalTime formattedTime \u003d LocalTime.of(hour, minute);","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"JasonC01"},"content":"        formattedDateTime +\u003d formattedDate.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")) + \" \";","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"JasonC01"},"content":"        formattedDateTime +\u003d formattedTime.format(DateTimeFormatter.ofPattern(\"ha\"));","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"JasonC01"},"content":"        return formattedDateTime;","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"JasonC01"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"JasonC01":35}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JasonC01"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"JasonC01"},"content":"import java.io.File;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"JasonC01"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"JasonC01"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"JasonC01"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"JasonC01"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"JasonC01"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"JasonC01"},"content":"public class Storage {","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"JasonC01"},"content":"    private Path filePath \u003d null;","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"JasonC01"},"content":"    private Path directoryPath \u003d null;","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"JasonC01"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"JasonC01"},"content":"     * Constructor for a new Storage object.","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"JasonC01"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"JasonC01"},"content":"     * @param path Path for the new storage object.","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"JasonC01"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"JasonC01"},"content":"    public Storage(String path) {","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"JasonC01"},"content":"        String home \u003d System.getProperty(\"user.home\");","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"JasonC01"},"content":"        this.filePath \u003d java.nio.file.Paths.get(home, \"iP\", path.split(\"/\")[0], path.split(\"/\")[1]);","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"JasonC01"},"content":"        this.directoryPath \u003d java.nio.file.Paths.get(home, \"iP\", path.split(\"/\")[0]);","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"JasonC01"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"JasonC01"},"content":"     * Converts Task object to a text format suitable for saving in a storage.","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"JasonC01"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":28,"author":{"gitId":"JasonC01"},"content":"     * @param task Task object to be converted to text.","lastModifiedDate":"2021-08-28"},{"lineNumber":29,"author":{"gitId":"JasonC01"},"content":"     * @return String representation of the given task.","lastModifiedDate":"2021-08-28"},{"lineNumber":30,"author":{"gitId":"JasonC01"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":31,"author":{"gitId":"JasonC01"},"content":"    public String convertTaskToText(Task task) {","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"JasonC01"},"content":"        String result \u003d task.getType() + \"|\";","lastModifiedDate":"2021-08-28"},{"lineNumber":33,"author":{"gitId":"JasonC01"},"content":"        if (task.isCompleted()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"JasonC01"},"content":"            result +\u003d \"1|\";","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"JasonC01"},"content":"        } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"JasonC01"},"content":"            result +\u003d \"0|\";","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"JasonC01"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"JasonC01"},"content":"        result +\u003d task.getTaskContent();","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"JasonC01"},"content":"        if (task.getType().equals(\"D\") || task.getType().equals(\"E\")) {","lastModifiedDate":"2021-08-28"},{"lineNumber":40,"author":{"gitId":"JasonC01"},"content":"            result +\u003d \"|\" + task.getTiming();","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"JasonC01"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"JasonC01"},"content":"        return result;","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":45,"author":{"gitId":"JasonC01"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":46,"author":{"gitId":"JasonC01"},"content":"     * Converts text version of a task to an actual Task object.","lastModifiedDate":"2021-08-28"},{"lineNumber":47,"author":{"gitId":"JasonC01"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":48,"author":{"gitId":"JasonC01"},"content":"     * @param text Text representation of a task to be converted to actual Task object.","lastModifiedDate":"2021-08-28"},{"lineNumber":49,"author":{"gitId":"JasonC01"},"content":"     * @return Task object corresponding to the given text.","lastModifiedDate":"2021-08-28"},{"lineNumber":50,"author":{"gitId":"JasonC01"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":51,"author":{"gitId":"JasonC01"},"content":"    public Task convertTextToTask(String text) {","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"JasonC01"},"content":"        String[] str \u003d text.split(\"\\\\|\");","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"JasonC01"},"content":"        Task newTask;","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"JasonC01"},"content":"        if (str[0].equals(\"T\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"JasonC01"},"content":"            newTask \u003d new ToDo(str[2]);","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"JasonC01"},"content":"        } else if(str[0].equals(\"D\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"JasonC01"},"content":"            newTask \u003d new Deadline(str[2], str[3]);","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"JasonC01"},"content":"        } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"JasonC01"},"content":"            newTask \u003d new Event(str[2], str[3]);","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"JasonC01"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"JasonC01"},"content":"        if (str[1].equals(\"1\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"JasonC01"},"content":"            newTask.markCompleted();","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"JasonC01"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"JasonC01"},"content":"        return newTask;","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":67,"author":{"gitId":"JasonC01"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":68,"author":{"gitId":"JasonC01"},"content":"     * Writes data to the storage.","lastModifiedDate":"2021-08-28"},{"lineNumber":69,"author":{"gitId":"JasonC01"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":70,"author":{"gitId":"JasonC01"},"content":"     * @param taskList List of task to be written to the storage.","lastModifiedDate":"2021-08-28"},{"lineNumber":71,"author":{"gitId":"JasonC01"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":72,"author":{"gitId":"JasonC01"},"content":"    public void writeToFile(TaskList taskList) {","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"JasonC01"},"content":"        StringBuilder combinedTask \u003d new StringBuilder();","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"JasonC01"},"content":"        for (int i \u003d 0; i \u003c taskList.length(); i++) {","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"JasonC01"},"content":"            combinedTask.append(convertTaskToText(taskList.get(i))).append(\"\\n\");","lastModifiedDate":"2021-08-25"},{"lineNumber":76,"author":{"gitId":"JasonC01"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":77,"author":{"gitId":"JasonC01"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":78,"author":{"gitId":"JasonC01"},"content":"            FileWriter writer \u003d new FileWriter(String.valueOf(filePath), false);","lastModifiedDate":"2021-08-25"},{"lineNumber":79,"author":{"gitId":"JasonC01"},"content":"            writer.write(combinedTask.toString());","lastModifiedDate":"2021-08-25"},{"lineNumber":80,"author":{"gitId":"JasonC01"},"content":"            writer.close();","lastModifiedDate":"2021-08-25"},{"lineNumber":81,"author":{"gitId":"JasonC01"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":82,"author":{"gitId":"JasonC01"},"content":"            System.out.println(\"error occurred 2\");","lastModifiedDate":"2021-08-25"},{"lineNumber":83,"author":{"gitId":"JasonC01"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":84,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":85,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":86,"author":{"gitId":"JasonC01"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":87,"author":{"gitId":"JasonC01"},"content":"     * Creates a new storage file if it is not present.","lastModifiedDate":"2021-08-28"},{"lineNumber":88,"author":{"gitId":"JasonC01"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":89,"author":{"gitId":"JasonC01"},"content":"    public void createFile() {","lastModifiedDate":"2021-08-25"},{"lineNumber":90,"author":{"gitId":"JasonC01"},"content":"        File newDirectory \u003d new File(String.valueOf(directoryPath));","lastModifiedDate":"2021-08-25"},{"lineNumber":91,"author":{"gitId":"JasonC01"},"content":"        File newFile \u003d new File(String.valueOf(filePath));","lastModifiedDate":"2021-08-25"},{"lineNumber":92,"author":{"gitId":"JasonC01"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":93,"author":{"gitId":"JasonC01"},"content":"            newDirectory.mkdir();","lastModifiedDate":"2021-08-25"},{"lineNumber":94,"author":{"gitId":"JasonC01"},"content":"            newFile.createNewFile();","lastModifiedDate":"2021-08-25"},{"lineNumber":95,"author":{"gitId":"JasonC01"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":96,"author":{"gitId":"JasonC01"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-25"},{"lineNumber":97,"author":{"gitId":"JasonC01"},"content":"            System.out.println(\"error occurred 1\");","lastModifiedDate":"2021-08-25"},{"lineNumber":98,"author":{"gitId":"JasonC01"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":99,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":100,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":101,"author":{"gitId":"JasonC01"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":102,"author":{"gitId":"JasonC01"},"content":"     * Writes new data to the storage file if it exists, if not create the file before writing.","lastModifiedDate":"2021-08-28"},{"lineNumber":103,"author":{"gitId":"JasonC01"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":104,"author":{"gitId":"JasonC01"},"content":"     * @param taskList List of task to be saved.","lastModifiedDate":"2021-08-28"},{"lineNumber":105,"author":{"gitId":"JasonC01"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":106,"author":{"gitId":"JasonC01"},"content":"    public void saveTask(TaskList taskList) {","lastModifiedDate":"2021-08-25"},{"lineNumber":107,"author":{"gitId":"JasonC01"},"content":"        boolean directoryExists \u003d java.nio.file.Files.exists(filePath);","lastModifiedDate":"2021-08-25"},{"lineNumber":108,"author":{"gitId":"JasonC01"},"content":"        if (!directoryExists) {","lastModifiedDate":"2021-08-25"},{"lineNumber":109,"author":{"gitId":"JasonC01"},"content":"            createFile();","lastModifiedDate":"2021-08-25"},{"lineNumber":110,"author":{"gitId":"JasonC01"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":111,"author":{"gitId":"JasonC01"},"content":"        writeToFile(taskList);","lastModifiedDate":"2021-08-25"},{"lineNumber":112,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":113,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":114,"author":{"gitId":"JasonC01"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":115,"author":{"gitId":"JasonC01"},"content":"     * Returns tasks stored in the storage.","lastModifiedDate":"2021-08-28"},{"lineNumber":116,"author":{"gitId":"JasonC01"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":117,"author":{"gitId":"JasonC01"},"content":"     * @return TaskList containing all the work stored in the storage.","lastModifiedDate":"2021-08-28"},{"lineNumber":118,"author":{"gitId":"JasonC01"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":119,"author":{"gitId":"JasonC01"},"content":"    public TaskList loadTask() {","lastModifiedDate":"2021-08-25"},{"lineNumber":120,"author":{"gitId":"JasonC01"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2021-08-25"},{"lineNumber":121,"author":{"gitId":"JasonC01"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":122,"author":{"gitId":"JasonC01"},"content":"            File myObj \u003d new File(String.valueOf(filePath));","lastModifiedDate":"2021-08-25"},{"lineNumber":123,"author":{"gitId":"JasonC01"},"content":"            Scanner myReader \u003d new Scanner(myObj);","lastModifiedDate":"2021-08-25"},{"lineNumber":124,"author":{"gitId":"JasonC01"},"content":"            while (myReader.hasNextLine()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":125,"author":{"gitId":"JasonC01"},"content":"                String data \u003d myReader.nextLine();","lastModifiedDate":"2021-08-25"},{"lineNumber":126,"author":{"gitId":"JasonC01"},"content":"                taskList.addTask(convertTextToTask(data));","lastModifiedDate":"2021-08-25"},{"lineNumber":127,"author":{"gitId":"JasonC01"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":128,"author":{"gitId":"JasonC01"},"content":"            myReader.close();","lastModifiedDate":"2021-08-25"},{"lineNumber":129,"author":{"gitId":"JasonC01"},"content":"            return taskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":130,"author":{"gitId":"JasonC01"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":131,"author":{"gitId":"JasonC01"},"content":"            System.out.println(\"An error occurred.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":132,"author":{"gitId":"JasonC01"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-25"},{"lineNumber":133,"author":{"gitId":"JasonC01"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":134,"author":{"gitId":"JasonC01"},"content":"        return taskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":135,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":136,"author":{"gitId":"JasonC01"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"JasonC01":136}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JasonC01"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"JasonC01"},"content":"public class Task {","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"JasonC01"},"content":"    private final String taskContent;","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"JasonC01"},"content":"    private final String type;","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"JasonC01"},"content":"    private boolean completed \u003d false;","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"JasonC01"},"content":"    public Task(String taskContent, String type) {","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"JasonC01"},"content":"        this.taskContent \u003d taskContent;","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"JasonC01"},"content":"        this.type \u003d type;","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"JasonC01"},"content":"    public void markCompleted() {","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"JasonC01"},"content":"        completed \u003d true;","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"JasonC01"},"content":"    public void markIncomplete() {","lastModifiedDate":"2021-09-09"},{"lineNumber":15,"author":{"gitId":"JasonC01"},"content":"        completed \u003d false;","lastModifiedDate":"2021-09-09"},{"lineNumber":16,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-09-09"},{"lineNumber":17,"author":{"gitId":"JasonC01"},"content":"    public String getTaskContent() {","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"JasonC01"},"content":"        return taskContent;","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":20,"author":{"gitId":"JasonC01"},"content":"    public boolean isCompleted() {","lastModifiedDate":"2021-08-19"},{"lineNumber":21,"author":{"gitId":"JasonC01"},"content":"        return completed;","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"JasonC01"},"content":"    public String getType() {","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"JasonC01"},"content":"        return type;","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":26,"author":{"gitId":"JasonC01"},"content":"    public String getTiming() {","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"JasonC01"},"content":"        return \"\";","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"JasonC01"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"JasonC01":29}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JasonC01"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"JasonC01"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"JasonC01"},"content":"import java.util.concurrent.atomic.AtomicReference;","lastModifiedDate":"2021-09-04"},{"lineNumber":5,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"JasonC01"},"content":"public class TaskList {","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"JasonC01"},"content":"    private ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"JasonC01"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"JasonC01"},"content":"        int sizeBeforeAddition \u003d taskList.size();","lastModifiedDate":"2021-09-07"},{"lineNumber":10,"author":{"gitId":"JasonC01"},"content":"        taskList.add(task);","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"JasonC01"},"content":"        int sizeAfterAddition \u003d taskList.size();","lastModifiedDate":"2021-09-07"},{"lineNumber":12,"author":{"gitId":"JasonC01"},"content":"        assert sizeAfterAddition - sizeBeforeAddition \u003d\u003d 1: \"Error while task addition\";","lastModifiedDate":"2021-09-07"},{"lineNumber":13,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"JasonC01"},"content":"    public void deleteTask(int taskIndex) {","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"JasonC01"},"content":"        int sizeBeforeDeletion \u003d taskList.size();","lastModifiedDate":"2021-09-07"},{"lineNumber":16,"author":{"gitId":"JasonC01"},"content":"        taskList.remove(taskIndex);","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"JasonC01"},"content":"        int sizeAfterDeletion \u003d taskList.size();","lastModifiedDate":"2021-09-07"},{"lineNumber":18,"author":{"gitId":"JasonC01"},"content":"        assert sizeBeforeDeletion - sizeAfterDeletion \u003d\u003d 1: \"Error while task deletion\";","lastModifiedDate":"2021-09-07"},{"lineNumber":19,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"JasonC01"},"content":"    public int length() {","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"JasonC01"},"content":"        return taskList.size();","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"JasonC01"},"content":"    public String printTask() {","lastModifiedDate":"2021-09-04"},{"lineNumber":24,"author":{"gitId":"JasonC01"},"content":"        AtomicReference\u003cString\u003e output \u003d new AtomicReference\u003c\u003e(\"Here are your tasks: \\n\");","lastModifiedDate":"2021-09-04"},{"lineNumber":25,"author":{"gitId":"JasonC01"},"content":"        System.out.println(\"Here are your tasks: \");","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"JasonC01"},"content":"        taskList.forEach(task -\u003e {","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"JasonC01"},"content":"            output.set(output + task.toString() + \"\\n\");","lastModifiedDate":"2021-09-04"},{"lineNumber":28,"author":{"gitId":"JasonC01"},"content":"            System.out.println(task.toString());","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"JasonC01"},"content":"        });","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"JasonC01"},"content":"        return output.toString();","lastModifiedDate":"2021-09-04"},{"lineNumber":31,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"JasonC01"},"content":"    public Task get(int taskIndex) {","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"JasonC01"},"content":"        return taskList.get(taskIndex);","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"JasonC01"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"JasonC01":35}},{"path":"src/main/java/duke/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JasonC01"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"JasonC01"},"content":"public class ToDo extends Task{","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"JasonC01"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"JasonC01"},"content":"     * Constructor for a ToDo object.","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"JasonC01"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"JasonC01"},"content":"     * @param taskContent Content to be stored in the ToDo object.","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"JasonC01"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"JasonC01"},"content":"    public ToDo(String taskContent) {","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"JasonC01"},"content":"        super(taskContent, \"T\");","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"JasonC01"},"content":"        assert this.getType().equals(\"T\") : \"Wrong type\";","lastModifiedDate":"2021-09-07"},{"lineNumber":13,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"JasonC01"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"JasonC01"},"content":"     * Returns the string representation of this ToDo object.","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"JasonC01"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"JasonC01"},"content":"     * @return String representation of ToDo object.","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"JasonC01"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"JasonC01"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":21,"author":{"gitId":"JasonC01"},"content":"    public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":22,"author":{"gitId":"JasonC01"},"content":"        if (super.isCompleted()) {","lastModifiedDate":"2021-08-19"},{"lineNumber":23,"author":{"gitId":"JasonC01"},"content":"            return \"[T][X] \" + super.getTaskContent();","lastModifiedDate":"2021-08-19"},{"lineNumber":24,"author":{"gitId":"JasonC01"},"content":"        } else {","lastModifiedDate":"2021-08-19"},{"lineNumber":25,"author":{"gitId":"JasonC01"},"content":"            return \"[T][ ] \" + super.getTaskContent();","lastModifiedDate":"2021-08-19"},{"lineNumber":26,"author":{"gitId":"JasonC01"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":27,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":28,"author":{"gitId":"JasonC01"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"JasonC01":28}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JasonC01"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"JasonC01"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"JasonC01"},"content":"public class Ui {","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"JasonC01"},"content":"    private Storage storage;","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"JasonC01"},"content":"    private TaskList taskList;","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"JasonC01"},"content":"    boolean isExit \u003d false;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"JasonC01"},"content":"    private Task recentlyModifiedTask \u003d new Task(\"\", null);","lastModifiedDate":"2021-09-09"},{"lineNumber":10,"author":{"gitId":"JasonC01"},"content":"    private int previousTaskIndex \u003d -1;","lastModifiedDate":"2021-09-09"},{"lineNumber":11,"author":{"gitId":"JasonC01"},"content":"    private Type previousCommand \u003d Type.NONE;","lastModifiedDate":"2021-09-09"},{"lineNumber":12,"author":{"gitId":"JasonC01"},"content":"    private final Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"JasonC01"},"content":"    public Ui(Storage storage, TaskList taskList) {","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"JasonC01"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"JasonC01"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":18,"author":{"gitId":"JasonC01"},"content":"    enum Type {","lastModifiedDate":"2021-09-09"},{"lineNumber":19,"author":{"gitId":"JasonC01"},"content":"        BYEUSER,","lastModifiedDate":"2021-09-09"},{"lineNumber":20,"author":{"gitId":"JasonC01"},"content":"        DELETETASK,","lastModifiedDate":"2021-09-09"},{"lineNumber":21,"author":{"gitId":"JasonC01"},"content":"        VIEWLIST,","lastModifiedDate":"2021-09-09"},{"lineNumber":22,"author":{"gitId":"JasonC01"},"content":"        FINDTASK,","lastModifiedDate":"2021-09-09"},{"lineNumber":23,"author":{"gitId":"JasonC01"},"content":"        MARKDONE,","lastModifiedDate":"2021-09-09"},{"lineNumber":24,"author":{"gitId":"JasonC01"},"content":"        ADDEVENT,","lastModifiedDate":"2021-09-09"},{"lineNumber":25,"author":{"gitId":"JasonC01"},"content":"        ADDTODO,","lastModifiedDate":"2021-09-09"},{"lineNumber":26,"author":{"gitId":"JasonC01"},"content":"        ADDDEADLINE,","lastModifiedDate":"2021-09-09"},{"lineNumber":27,"author":{"gitId":"JasonC01"},"content":"        ADD,","lastModifiedDate":"2021-09-09"},{"lineNumber":28,"author":{"gitId":"JasonC01"},"content":"        DELETE,","lastModifiedDate":"2021-09-09"},{"lineNumber":29,"author":{"gitId":"JasonC01"},"content":"        UNDO,","lastModifiedDate":"2021-09-09"},{"lineNumber":30,"author":{"gitId":"JasonC01"},"content":"        NONE,","lastModifiedDate":"2021-09-09"},{"lineNumber":31,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-09-09"},{"lineNumber":32,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":33,"author":{"gitId":"JasonC01"},"content":"    public void showLine() {","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"JasonC01"},"content":"        System.out.println(\"______________________________________________\");","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"JasonC01"},"content":"    public String greet() {","lastModifiedDate":"2021-09-04"},{"lineNumber":37,"author":{"gitId":"JasonC01"},"content":"        System.out.println(\"Hello! I\u0027m Duke\\n\" +","lastModifiedDate":"2021-09-04"},{"lineNumber":38,"author":{"gitId":"JasonC01"},"content":"                \"What can I do for you?\");","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"JasonC01"},"content":"        return \"Hello! I\u0027m Duke\\n\" +","lastModifiedDate":"2021-09-04"},{"lineNumber":40,"author":{"gitId":"JasonC01"},"content":"                \"What can I do for you?\";","lastModifiedDate":"2021-09-04"},{"lineNumber":41,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"JasonC01"},"content":"    public String byeUser(String input) {","lastModifiedDate":"2021-09-09"},{"lineNumber":43,"author":{"gitId":"JasonC01"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"JasonC01"},"content":"        isExit \u003d true;","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"JasonC01"},"content":"        return \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2021-09-04"},{"lineNumber":46,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-09-09"},{"lineNumber":47,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":48,"author":{"gitId":"JasonC01"},"content":"    public String deleteTask(String input) {","lastModifiedDate":"2021-09-09"},{"lineNumber":49,"author":{"gitId":"JasonC01"},"content":"        Task taskToBeDeleted \u003d taskList.get(Parser.parseDelete(input) - 1);","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"JasonC01"},"content":"        taskList.deleteTask(Parser.parseDelete(input) - 1);","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"JasonC01"},"content":"        previousCommand \u003d Type.DELETE;","lastModifiedDate":"2021-09-09"},{"lineNumber":52,"author":{"gitId":"JasonC01"},"content":"        recentlyModifiedTask \u003d taskToBeDeleted;","lastModifiedDate":"2021-09-09"},{"lineNumber":53,"author":{"gitId":"JasonC01"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task: \\n\"","lastModifiedDate":"2021-08-28"},{"lineNumber":54,"author":{"gitId":"JasonC01"},"content":"                + \"  \" + taskToBeDeleted.toString() +\"\\n\" +","lastModifiedDate":"2021-08-28"},{"lineNumber":55,"author":{"gitId":"JasonC01"},"content":"                \"Now you have \" + taskList.length() + \" tasks in the list.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"JasonC01"},"content":"        storage.saveTask(taskList);","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"JasonC01"},"content":"        return \"Noted. I\u0027ve removed this task: \\n\"","lastModifiedDate":"2021-09-04"},{"lineNumber":58,"author":{"gitId":"JasonC01"},"content":"                + \"  \" + taskToBeDeleted.toString() +\"\\n\" +","lastModifiedDate":"2021-09-04"},{"lineNumber":59,"author":{"gitId":"JasonC01"},"content":"                \"Now you have \" + taskList.length() + \" tasks in the list.\";","lastModifiedDate":"2021-09-04"},{"lineNumber":60,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-09-09"},{"lineNumber":61,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":62,"author":{"gitId":"JasonC01"},"content":"    public String viewList() {","lastModifiedDate":"2021-09-09"},{"lineNumber":63,"author":{"gitId":"JasonC01"},"content":"        String output \u003d \"Here are the tasks in your list:\\n\";","lastModifiedDate":"2021-09-04"},{"lineNumber":64,"author":{"gitId":"JasonC01"},"content":"        System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"JasonC01"},"content":"        for (int i \u003d 0; i \u003c taskList.length(); i++) {","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"JasonC01"},"content":"            output \u003d output + (i + 1) + \". \" + taskList.get(i).toString() + \"\\n\";","lastModifiedDate":"2021-09-04"},{"lineNumber":67,"author":{"gitId":"JasonC01"},"content":"            System.out.println((i + 1) + \". \" + taskList.get(i).toString());","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"JasonC01"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"JasonC01"},"content":"        return output;","lastModifiedDate":"2021-09-04"},{"lineNumber":70,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-09-09"},{"lineNumber":71,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":72,"author":{"gitId":"JasonC01"},"content":"    public String findTask(String input) {","lastModifiedDate":"2021-09-09"},{"lineNumber":73,"author":{"gitId":"JasonC01"},"content":"        String wordToFind \u003d input.split(\" \")[1];","lastModifiedDate":"2021-08-28"},{"lineNumber":74,"author":{"gitId":"JasonC01"},"content":"        System.out.println(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2021-08-28"},{"lineNumber":75,"author":{"gitId":"JasonC01"},"content":"        String output \u003d \"Here are the matching tasks in your list:\\n\";","lastModifiedDate":"2021-09-04"},{"lineNumber":76,"author":{"gitId":"JasonC01"},"content":"        for(int i \u003d 0; i \u003c taskList.length(); i++) {","lastModifiedDate":"2021-08-28"},{"lineNumber":77,"author":{"gitId":"JasonC01"},"content":"            if(taskList.get(i).getTaskContent().contains(wordToFind)) {","lastModifiedDate":"2021-08-28"},{"lineNumber":78,"author":{"gitId":"JasonC01"},"content":"                System.out.println((i + 1) + \". \" +taskList.get(i).toString());","lastModifiedDate":"2021-08-28"},{"lineNumber":79,"author":{"gitId":"JasonC01"},"content":"                output \u003d output + (i + 1) + \". \" + taskList.get(i).toString() + \"\\n\";","lastModifiedDate":"2021-09-04"},{"lineNumber":80,"author":{"gitId":"JasonC01"},"content":"            }","lastModifiedDate":"2021-08-28"},{"lineNumber":81,"author":{"gitId":"JasonC01"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":82,"author":{"gitId":"JasonC01"},"content":"        return output;","lastModifiedDate":"2021-09-04"},{"lineNumber":83,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-09-09"},{"lineNumber":84,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":85,"author":{"gitId":"JasonC01"},"content":"    public String markTaskAsDone(String input) {","lastModifiedDate":"2021-09-09"},{"lineNumber":86,"author":{"gitId":"JasonC01"},"content":"        int taskIndex \u003d Parser.parseDone(input);","lastModifiedDate":"2021-08-25"},{"lineNumber":87,"author":{"gitId":"JasonC01"},"content":"        previousTaskIndex \u003d taskIndex;","lastModifiedDate":"2021-09-09"},{"lineNumber":88,"author":{"gitId":"JasonC01"},"content":"        taskList.get(taskIndex - 1).markCompleted();","lastModifiedDate":"2021-08-25"},{"lineNumber":89,"author":{"gitId":"JasonC01"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\\n\" + taskList.get(taskIndex - 1).toString());","lastModifiedDate":"2021-08-25"},{"lineNumber":90,"author":{"gitId":"JasonC01"},"content":"        storage.saveTask(taskList);","lastModifiedDate":"2021-08-25"},{"lineNumber":91,"author":{"gitId":"JasonC01"},"content":"        return \"Nice! I\u0027ve marked this task as done:\\n\" + taskList.get(taskIndex - 1).toString();","lastModifiedDate":"2021-09-04"},{"lineNumber":92,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":93,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":94,"author":{"gitId":"JasonC01"},"content":"    public String addEvent(String input) {","lastModifiedDate":"2021-09-09"},{"lineNumber":95,"author":{"gitId":"JasonC01"},"content":"        String error \u003d Validators.validateEventDescription(input);","lastModifiedDate":"2021-09-09"},{"lineNumber":96,"author":{"gitId":"JasonC01"},"content":"        if (error !\u003d null) {","lastModifiedDate":"2021-09-09"},{"lineNumber":97,"author":{"gitId":"JasonC01"},"content":"            return error;","lastModifiedDate":"2021-09-09"},{"lineNumber":98,"author":{"gitId":"JasonC01"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":99,"author":{"gitId":"JasonC01"},"content":"        String taskContent \u003d Parser.parseEvent(input);","lastModifiedDate":"2021-08-25"},{"lineNumber":100,"author":{"gitId":"JasonC01"},"content":"        Task newEvent \u003d new Event(taskContent);","lastModifiedDate":"2021-08-25"},{"lineNumber":101,"author":{"gitId":"JasonC01"},"content":"        taskList.addTask(newEvent);","lastModifiedDate":"2021-08-25"},{"lineNumber":102,"author":{"gitId":"JasonC01"},"content":"        previousCommand \u003d Type.ADD;","lastModifiedDate":"2021-09-09"},{"lineNumber":103,"author":{"gitId":"JasonC01"},"content":"        previousTaskIndex \u003d taskList.length();","lastModifiedDate":"2021-09-09"},{"lineNumber":104,"author":{"gitId":"JasonC01"},"content":"        System.out.println(\"Got it. I\u0027ve added this task: \\n\"","lastModifiedDate":"2021-08-28"},{"lineNumber":105,"author":{"gitId":"JasonC01"},"content":"                + \"  \" + newEvent.toString() + \"\\n\" +","lastModifiedDate":"2021-08-28"},{"lineNumber":106,"author":{"gitId":"JasonC01"},"content":"                \"Now you have \" + taskList.length() + \" tasks in the list.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":107,"author":{"gitId":"JasonC01"},"content":"        storage.saveTask(taskList);","lastModifiedDate":"2021-08-25"},{"lineNumber":108,"author":{"gitId":"JasonC01"},"content":"        return \"Got it. I\u0027ve added this task: \\n\"","lastModifiedDate":"2021-09-04"},{"lineNumber":109,"author":{"gitId":"JasonC01"},"content":"                + \"  \" + newEvent.toString() + \"\\n\" +","lastModifiedDate":"2021-09-04"},{"lineNumber":110,"author":{"gitId":"JasonC01"},"content":"                \"Now you have \" + taskList.length() + \" tasks in the list.\";","lastModifiedDate":"2021-09-04"},{"lineNumber":111,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-09-09"},{"lineNumber":112,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":113,"author":{"gitId":"JasonC01"},"content":"    public String addDeadline(String input) {","lastModifiedDate":"2021-09-09"},{"lineNumber":114,"author":{"gitId":"JasonC01"},"content":"        String error \u003d Validators.validateDeadlineDescription(input);","lastModifiedDate":"2021-09-09"},{"lineNumber":115,"author":{"gitId":"JasonC01"},"content":"        if (error !\u003d null) {","lastModifiedDate":"2021-09-09"},{"lineNumber":116,"author":{"gitId":"JasonC01"},"content":"            return error;","lastModifiedDate":"2021-09-09"},{"lineNumber":117,"author":{"gitId":"JasonC01"},"content":"        }","lastModifiedDate":"2021-09-09"},{"lineNumber":118,"author":{"gitId":"JasonC01"},"content":"        String taskContent \u003d Parser.parseDeadline(input);","lastModifiedDate":"2021-08-25"},{"lineNumber":119,"author":{"gitId":"JasonC01"},"content":"        Task newEvent \u003d new Deadline(taskContent);","lastModifiedDate":"2021-08-25"},{"lineNumber":120,"author":{"gitId":"JasonC01"},"content":"        taskList.addTask(newEvent);","lastModifiedDate":"2021-08-25"},{"lineNumber":121,"author":{"gitId":"JasonC01"},"content":"        previousCommand \u003d Type.ADD;","lastModifiedDate":"2021-09-09"},{"lineNumber":122,"author":{"gitId":"JasonC01"},"content":"        previousTaskIndex \u003d taskList.length();","lastModifiedDate":"2021-09-09"},{"lineNumber":123,"author":{"gitId":"JasonC01"},"content":"        System.out.println(\"Got it. I\u0027ve added this task: \\n\"","lastModifiedDate":"2021-08-28"},{"lineNumber":124,"author":{"gitId":"JasonC01"},"content":"                + \"  \" + newEvent.toString() + \"\\n\" +","lastModifiedDate":"2021-08-28"},{"lineNumber":125,"author":{"gitId":"JasonC01"},"content":"                \"Now you have \" + taskList.length() + \" tasks in the list.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":126,"author":{"gitId":"JasonC01"},"content":"        storage.saveTask(taskList);","lastModifiedDate":"2021-08-25"},{"lineNumber":127,"author":{"gitId":"JasonC01"},"content":"        return \"Got it. I\u0027ve added this task: \\n\"","lastModifiedDate":"2021-09-04"},{"lineNumber":128,"author":{"gitId":"JasonC01"},"content":"                + \"  \" + newEvent.toString() + \"\\n\" +","lastModifiedDate":"2021-09-04"},{"lineNumber":129,"author":{"gitId":"JasonC01"},"content":"                \"Now you have \" + taskList.length() + \" tasks in the list.\";","lastModifiedDate":"2021-09-04"},{"lineNumber":130,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-09-09"},{"lineNumber":131,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":132,"author":{"gitId":"JasonC01"},"content":"    public String addTodo(String input) {","lastModifiedDate":"2021-09-09"},{"lineNumber":133,"author":{"gitId":"JasonC01"},"content":"        String error \u003d Validators.validateTodoDescription(input);","lastModifiedDate":"2021-09-09"},{"lineNumber":134,"author":{"gitId":"JasonC01"},"content":"        if (error !\u003d null) {","lastModifiedDate":"2021-09-09"},{"lineNumber":135,"author":{"gitId":"JasonC01"},"content":"            return error;","lastModifiedDate":"2021-09-09"},{"lineNumber":136,"author":{"gitId":"JasonC01"},"content":"        }","lastModifiedDate":"2021-09-09"},{"lineNumber":137,"author":{"gitId":"JasonC01"},"content":"        String taskContent \u003d Parser.parseTodo(input);","lastModifiedDate":"2021-08-25"},{"lineNumber":138,"author":{"gitId":"JasonC01"},"content":"        Task newTodo \u003d new ToDo(taskContent);","lastModifiedDate":"2021-09-09"},{"lineNumber":139,"author":{"gitId":"JasonC01"},"content":"        taskList.addTask(newTodo);","lastModifiedDate":"2021-09-09"},{"lineNumber":140,"author":{"gitId":"JasonC01"},"content":"        previousCommand \u003d Type.ADD;","lastModifiedDate":"2021-09-09"},{"lineNumber":141,"author":{"gitId":"JasonC01"},"content":"        previousTaskIndex \u003d taskList.length();","lastModifiedDate":"2021-09-09"},{"lineNumber":142,"author":{"gitId":"JasonC01"},"content":"        System.out.println(\"Got it. I\u0027ve added this task: \\n\"","lastModifiedDate":"2021-08-28"},{"lineNumber":143,"author":{"gitId":"JasonC01"},"content":"                + \"  \" + newTodo.toString() + \"\\n\" +","lastModifiedDate":"2021-09-09"},{"lineNumber":144,"author":{"gitId":"JasonC01"},"content":"                \"Now you have \" + taskList.length() + \" tasks in the list.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":145,"author":{"gitId":"JasonC01"},"content":"        storage.saveTask(taskList);","lastModifiedDate":"2021-08-25"},{"lineNumber":146,"author":{"gitId":"JasonC01"},"content":"        return \"Got it. I\u0027ve added this task: \\n\"","lastModifiedDate":"2021-09-04"},{"lineNumber":147,"author":{"gitId":"JasonC01"},"content":"                + \"  \" + newTodo.toString() + \"\\n\" +","lastModifiedDate":"2021-09-09"},{"lineNumber":148,"author":{"gitId":"JasonC01"},"content":"                \"Now you have \" + taskList.length() + \" tasks in the list.\";","lastModifiedDate":"2021-09-04"},{"lineNumber":149,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-09-09"},{"lineNumber":150,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":151,"author":{"gitId":"JasonC01"},"content":"    public String handleInvalidInput() {","lastModifiedDate":"2021-09-09"},{"lineNumber":152,"author":{"gitId":"JasonC01"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":153,"author":{"gitId":"JasonC01"},"content":"            throw new DukeException.invalidInputException();","lastModifiedDate":"2021-08-25"},{"lineNumber":154,"author":{"gitId":"JasonC01"},"content":"        } catch (DukeException.invalidInputException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":155,"author":{"gitId":"JasonC01"},"content":"            e.exceptionMessage();","lastModifiedDate":"2021-08-25"},{"lineNumber":156,"author":{"gitId":"JasonC01"},"content":"            return e.stringExceptionMessage();","lastModifiedDate":"2021-09-04"},{"lineNumber":157,"author":{"gitId":"JasonC01"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":158,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":159,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":160,"author":{"gitId":"JasonC01"},"content":"    public String unableToUndo() {","lastModifiedDate":"2021-09-09"},{"lineNumber":161,"author":{"gitId":"JasonC01"},"content":"        try {","lastModifiedDate":"2021-09-09"},{"lineNumber":162,"author":{"gitId":"JasonC01"},"content":"            throw new DukeException.cannotUndoException();","lastModifiedDate":"2021-09-09"},{"lineNumber":163,"author":{"gitId":"JasonC01"},"content":"        } catch (DukeException.cannotUndoException e) {","lastModifiedDate":"2021-09-09"},{"lineNumber":164,"author":{"gitId":"JasonC01"},"content":"            e.exceptionMessage();","lastModifiedDate":"2021-09-09"},{"lineNumber":165,"author":{"gitId":"JasonC01"},"content":"            return e.stringExceptionMessage();","lastModifiedDate":"2021-09-09"},{"lineNumber":166,"author":{"gitId":"JasonC01"},"content":"        }","lastModifiedDate":"2021-09-09"},{"lineNumber":167,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-09-09"},{"lineNumber":168,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":169,"author":{"gitId":"JasonC01"},"content":"    public String markTaskUndone() {","lastModifiedDate":"2021-09-09"},{"lineNumber":170,"author":{"gitId":"JasonC01"},"content":"        taskList.get(previousTaskIndex - 1).markIncomplete();","lastModifiedDate":"2021-09-09"},{"lineNumber":171,"author":{"gitId":"JasonC01"},"content":"        System.out.println(\"Okay! I\u0027ve marked this task as incomplete:\\n\" + taskList.get(previousTaskIndex - 1).toString());","lastModifiedDate":"2021-09-09"},{"lineNumber":172,"author":{"gitId":"JasonC01"},"content":"        storage.saveTask(taskList);","lastModifiedDate":"2021-09-09"},{"lineNumber":173,"author":{"gitId":"JasonC01"},"content":"        resetUndo();","lastModifiedDate":"2021-09-09"},{"lineNumber":174,"author":{"gitId":"JasonC01"},"content":"        return \"Okay! I\u0027ve marked this task as incomplete:\\n\" + taskList.get(previousTaskIndex - 1).toString();","lastModifiedDate":"2021-09-09"},{"lineNumber":175,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-09-09"},{"lineNumber":176,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":177,"author":{"gitId":"JasonC01"},"content":"    public String undoAddTask() {","lastModifiedDate":"2021-09-09"},{"lineNumber":178,"author":{"gitId":"JasonC01"},"content":"        Task taskToBeDeleted \u003d taskList.get(previousTaskIndex - 1);","lastModifiedDate":"2021-09-09"},{"lineNumber":179,"author":{"gitId":"JasonC01"},"content":"        taskList.deleteTask(previousTaskIndex - 1);","lastModifiedDate":"2021-09-09"},{"lineNumber":180,"author":{"gitId":"JasonC01"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task: \\n\"","lastModifiedDate":"2021-09-09"},{"lineNumber":181,"author":{"gitId":"JasonC01"},"content":"                + \"  \" + taskToBeDeleted.toString() +\"\\n\" +","lastModifiedDate":"2021-09-09"},{"lineNumber":182,"author":{"gitId":"JasonC01"},"content":"                \"Now you have \" + taskList.length() + \" tasks in the list.\");","lastModifiedDate":"2021-09-09"},{"lineNumber":183,"author":{"gitId":"JasonC01"},"content":"        storage.saveTask(taskList);","lastModifiedDate":"2021-09-09"},{"lineNumber":184,"author":{"gitId":"JasonC01"},"content":"        resetUndo();","lastModifiedDate":"2021-09-09"},{"lineNumber":185,"author":{"gitId":"JasonC01"},"content":"        return \"Noted. I\u0027ve removed this task: \\n\"","lastModifiedDate":"2021-09-09"},{"lineNumber":186,"author":{"gitId":"JasonC01"},"content":"                + \"  \" + taskToBeDeleted.toString() +\"\\n\" +","lastModifiedDate":"2021-09-09"},{"lineNumber":187,"author":{"gitId":"JasonC01"},"content":"                \"Now you have \" + taskList.length() + \" tasks in the list.\";","lastModifiedDate":"2021-09-09"},{"lineNumber":188,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-09-09"},{"lineNumber":189,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":190,"author":{"gitId":"JasonC01"},"content":"    public String undoDeleteTask() {","lastModifiedDate":"2021-09-09"},{"lineNumber":191,"author":{"gitId":"JasonC01"},"content":"        Task task \u003d recentlyModifiedTask;","lastModifiedDate":"2021-09-09"},{"lineNumber":192,"author":{"gitId":"JasonC01"},"content":"        taskList.addTask(task);","lastModifiedDate":"2021-09-09"},{"lineNumber":193,"author":{"gitId":"JasonC01"},"content":"        System.out.println(\"Got it. I\u0027ve added this task: \\n\"","lastModifiedDate":"2021-09-09"},{"lineNumber":194,"author":{"gitId":"JasonC01"},"content":"                + \"  \" + task.toString() + \"\\n\" +","lastModifiedDate":"2021-09-09"},{"lineNumber":195,"author":{"gitId":"JasonC01"},"content":"                \"Now you have \" + taskList.length() + \" tasks in the list.\");","lastModifiedDate":"2021-09-09"},{"lineNumber":196,"author":{"gitId":"JasonC01"},"content":"        storage.saveTask(taskList);","lastModifiedDate":"2021-09-09"},{"lineNumber":197,"author":{"gitId":"JasonC01"},"content":"        resetUndo();","lastModifiedDate":"2021-09-09"},{"lineNumber":198,"author":{"gitId":"JasonC01"},"content":"        return \"Got it. I\u0027ve added this task: \\n\"","lastModifiedDate":"2021-09-09"},{"lineNumber":199,"author":{"gitId":"JasonC01"},"content":"                + \"  \" + task.toString() + \"\\n\" +","lastModifiedDate":"2021-09-09"},{"lineNumber":200,"author":{"gitId":"JasonC01"},"content":"                \"Now you have \" + taskList.length() + \" tasks in the list.\";","lastModifiedDate":"2021-09-09"},{"lineNumber":201,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-09-09"},{"lineNumber":202,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":203,"author":{"gitId":"JasonC01"},"content":"    public void resetUndo() {","lastModifiedDate":"2021-09-09"},{"lineNumber":204,"author":{"gitId":"JasonC01"},"content":"        recentlyModifiedTask \u003d new Task(\"\", null);","lastModifiedDate":"2021-09-09"},{"lineNumber":205,"author":{"gitId":"JasonC01"},"content":"        previousTaskIndex \u003d -1;","lastModifiedDate":"2021-09-09"},{"lineNumber":206,"author":{"gitId":"JasonC01"},"content":"        previousCommand \u003d Type.NONE;","lastModifiedDate":"2021-09-09"},{"lineNumber":207,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-09-09"},{"lineNumber":208,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":209,"author":{"gitId":"JasonC01"},"content":"    public String undo() {","lastModifiedDate":"2021-09-09"},{"lineNumber":210,"author":{"gitId":"JasonC01"},"content":"        switch (previousCommand) {","lastModifiedDate":"2021-09-09"},{"lineNumber":211,"author":{"gitId":"JasonC01"},"content":"            case MARKDONE:","lastModifiedDate":"2021-09-09"},{"lineNumber":212,"author":{"gitId":"JasonC01"},"content":"                return markTaskUndone();","lastModifiedDate":"2021-09-09"},{"lineNumber":213,"author":{"gitId":"JasonC01"},"content":"            case ADD:","lastModifiedDate":"2021-09-09"},{"lineNumber":214,"author":{"gitId":"JasonC01"},"content":"                return undoAddTask();","lastModifiedDate":"2021-09-09"},{"lineNumber":215,"author":{"gitId":"JasonC01"},"content":"            case DELETE:","lastModifiedDate":"2021-09-09"},{"lineNumber":216,"author":{"gitId":"JasonC01"},"content":"                return undoDeleteTask();","lastModifiedDate":"2021-09-09"},{"lineNumber":217,"author":{"gitId":"JasonC01"},"content":"            default:","lastModifiedDate":"2021-09-09"},{"lineNumber":218,"author":{"gitId":"JasonC01"},"content":"                return unableToUndo();","lastModifiedDate":"2021-09-09"},{"lineNumber":219,"author":{"gitId":"JasonC01"},"content":"        }","lastModifiedDate":"2021-09-09"},{"lineNumber":220,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-09-09"},{"lineNumber":221,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":222,"author":{"gitId":"JasonC01"},"content":"    public String processInput(Type input, String actualInput) {","lastModifiedDate":"2021-09-09"},{"lineNumber":223,"author":{"gitId":"JasonC01"},"content":"        switch (input) {","lastModifiedDate":"2021-09-09"},{"lineNumber":224,"author":{"gitId":"JasonC01"},"content":"            case BYEUSER:","lastModifiedDate":"2021-09-09"},{"lineNumber":225,"author":{"gitId":"JasonC01"},"content":"                return byeUser(actualInput);","lastModifiedDate":"2021-09-09"},{"lineNumber":226,"author":{"gitId":"JasonC01"},"content":"            case DELETETASK:","lastModifiedDate":"2021-09-09"},{"lineNumber":227,"author":{"gitId":"JasonC01"},"content":"                return deleteTask(actualInput);","lastModifiedDate":"2021-09-09"},{"lineNumber":228,"author":{"gitId":"JasonC01"},"content":"            case VIEWLIST:","lastModifiedDate":"2021-09-09"},{"lineNumber":229,"author":{"gitId":"JasonC01"},"content":"                return viewList();","lastModifiedDate":"2021-09-09"},{"lineNumber":230,"author":{"gitId":"JasonC01"},"content":"            case FINDTASK:","lastModifiedDate":"2021-09-09"},{"lineNumber":231,"author":{"gitId":"JasonC01"},"content":"                return findTask(actualInput);","lastModifiedDate":"2021-09-09"},{"lineNumber":232,"author":{"gitId":"JasonC01"},"content":"            case MARKDONE:","lastModifiedDate":"2021-09-09"},{"lineNumber":233,"author":{"gitId":"JasonC01"},"content":"                return markTaskAsDone(actualInput);","lastModifiedDate":"2021-09-09"},{"lineNumber":234,"author":{"gitId":"JasonC01"},"content":"            case ADDEVENT:","lastModifiedDate":"2021-09-09"},{"lineNumber":235,"author":{"gitId":"JasonC01"},"content":"                return addEvent(actualInput);","lastModifiedDate":"2021-09-09"},{"lineNumber":236,"author":{"gitId":"JasonC01"},"content":"            case ADDTODO:","lastModifiedDate":"2021-09-09"},{"lineNumber":237,"author":{"gitId":"JasonC01"},"content":"                return addTodo(actualInput);","lastModifiedDate":"2021-09-09"},{"lineNumber":238,"author":{"gitId":"JasonC01"},"content":"            case ADDDEADLINE:","lastModifiedDate":"2021-09-09"},{"lineNumber":239,"author":{"gitId":"JasonC01"},"content":"                return addDeadline(actualInput);","lastModifiedDate":"2021-09-09"},{"lineNumber":240,"author":{"gitId":"JasonC01"},"content":"            case UNDO:","lastModifiedDate":"2021-09-09"},{"lineNumber":241,"author":{"gitId":"JasonC01"},"content":"                return undo();","lastModifiedDate":"2021-09-09"},{"lineNumber":242,"author":{"gitId":"JasonC01"},"content":"            default:","lastModifiedDate":"2021-09-09"},{"lineNumber":243,"author":{"gitId":"JasonC01"},"content":"                return handleInvalidInput();","lastModifiedDate":"2021-09-09"},{"lineNumber":244,"author":{"gitId":"JasonC01"},"content":"        }","lastModifiedDate":"2021-09-09"},{"lineNumber":245,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":246,"author":{"gitId":"JasonC01"},"content":"    public String readLine() {","lastModifiedDate":"2021-09-09"},{"lineNumber":247,"author":{"gitId":"JasonC01"},"content":"        return scanner.nextLine();","lastModifiedDate":"2021-09-09"},{"lineNumber":248,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-09-09"},{"lineNumber":249,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":250,"author":{"gitId":"JasonC01"},"content":"    public String handleInput(String input) {","lastModifiedDate":"2021-09-09"},{"lineNumber":251,"author":{"gitId":"JasonC01"},"content":"        Type action;","lastModifiedDate":"2021-09-09"},{"lineNumber":252,"author":{"gitId":"JasonC01"},"content":"        if (input.equals(\"bye\")) {","lastModifiedDate":"2021-09-09"},{"lineNumber":253,"author":{"gitId":"JasonC01"},"content":"            action \u003d Type.BYEUSER;","lastModifiedDate":"2021-09-09"},{"lineNumber":254,"author":{"gitId":"JasonC01"},"content":"        } else if(input.split(\" \")[0].equals(\"delete\")) {","lastModifiedDate":"2021-09-09"},{"lineNumber":255,"author":{"gitId":"JasonC01"},"content":"            action \u003d Type.DELETETASK;","lastModifiedDate":"2021-09-09"},{"lineNumber":256,"author":{"gitId":"JasonC01"},"content":"        } else if (input.equals(\"list\")) {","lastModifiedDate":"2021-09-09"},{"lineNumber":257,"author":{"gitId":"JasonC01"},"content":"            action \u003d Type.VIEWLIST;","lastModifiedDate":"2021-09-09"},{"lineNumber":258,"author":{"gitId":"JasonC01"},"content":"        } else if (input.equals(\"undo\")) {","lastModifiedDate":"2021-09-09"},{"lineNumber":259,"author":{"gitId":"JasonC01"},"content":"            action \u003d Type.UNDO;","lastModifiedDate":"2021-09-09"},{"lineNumber":260,"author":{"gitId":"JasonC01"},"content":"        } else if (input.split(\" \")[0].equals(\"find\")) {","lastModifiedDate":"2021-09-09"},{"lineNumber":261,"author":{"gitId":"JasonC01"},"content":"            action \u003d Type.FINDTASK;","lastModifiedDate":"2021-09-09"},{"lineNumber":262,"author":{"gitId":"JasonC01"},"content":"        } else if (input.split(\" \")[0].equals(\"done\")){","lastModifiedDate":"2021-09-09"},{"lineNumber":263,"author":{"gitId":"JasonC01"},"content":"            action \u003d Type.MARKDONE;","lastModifiedDate":"2021-09-09"},{"lineNumber":264,"author":{"gitId":"JasonC01"},"content":"        } else if (input.split(\"event\")[0].equals(\"\")) {","lastModifiedDate":"2021-09-09"},{"lineNumber":265,"author":{"gitId":"JasonC01"},"content":"            action \u003d Type.ADDEVENT;","lastModifiedDate":"2021-09-09"},{"lineNumber":266,"author":{"gitId":"JasonC01"},"content":"        } else if (input.split(\"deadline\")[0].equals(\"\")) {","lastModifiedDate":"2021-09-09"},{"lineNumber":267,"author":{"gitId":"JasonC01"},"content":"            action \u003d Type.ADDDEADLINE;","lastModifiedDate":"2021-09-09"},{"lineNumber":268,"author":{"gitId":"JasonC01"},"content":"        } else if (input.split(\"todo\")[0].equals(\"\")) {","lastModifiedDate":"2021-09-09"},{"lineNumber":269,"author":{"gitId":"JasonC01"},"content":"            action \u003d Type.ADDTODO;","lastModifiedDate":"2021-09-09"},{"lineNumber":270,"author":{"gitId":"JasonC01"},"content":"        } else {","lastModifiedDate":"2021-09-09"},{"lineNumber":271,"author":{"gitId":"JasonC01"},"content":"            action \u003d Type.NONE;","lastModifiedDate":"2021-09-09"},{"lineNumber":272,"author":{"gitId":"JasonC01"},"content":"        }","lastModifiedDate":"2021-09-09"},{"lineNumber":273,"author":{"gitId":"JasonC01"},"content":"        return processInput(action, input);","lastModifiedDate":"2021-09-09"},{"lineNumber":274,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-09-09"},{"lineNumber":275,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":276,"author":{"gitId":"JasonC01"},"content":"    public boolean handleExit() {","lastModifiedDate":"2021-08-25"},{"lineNumber":277,"author":{"gitId":"JasonC01"},"content":"        return isExit;","lastModifiedDate":"2021-08-25"},{"lineNumber":278,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":279,"author":{"gitId":"JasonC01"},"content":"}","lastModifiedDate":"2021-08-25"},{"lineNumber":280,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"JasonC01":280}},{"path":"src/main/java/duke/Validators.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JasonC01"},"content":"package duke;","lastModifiedDate":"2021-09-09"},{"lineNumber":2,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":3,"author":{"gitId":"JasonC01"},"content":"public class Validators {","lastModifiedDate":"2021-09-09"},{"lineNumber":4,"author":{"gitId":"JasonC01"},"content":"    public static String validateTodoDescription(String input) {","lastModifiedDate":"2021-09-09"},{"lineNumber":5,"author":{"gitId":"JasonC01"},"content":"        if (input.split(\"todo\").length \u003d\u003d 0) {","lastModifiedDate":"2021-09-09"},{"lineNumber":6,"author":{"gitId":"JasonC01"},"content":"            try {","lastModifiedDate":"2021-09-09"},{"lineNumber":7,"author":{"gitId":"JasonC01"},"content":"                throw new DukeException.emptyToDoDescriptionException();","lastModifiedDate":"2021-09-09"},{"lineNumber":8,"author":{"gitId":"JasonC01"},"content":"            } catch (DukeException.emptyToDoDescriptionException e) {","lastModifiedDate":"2021-09-09"},{"lineNumber":9,"author":{"gitId":"JasonC01"},"content":"                e.exceptionMessage();","lastModifiedDate":"2021-09-09"},{"lineNumber":10,"author":{"gitId":"JasonC01"},"content":"                return e.stringExceptionMessage();","lastModifiedDate":"2021-09-09"},{"lineNumber":11,"author":{"gitId":"JasonC01"},"content":"            }","lastModifiedDate":"2021-09-09"},{"lineNumber":12,"author":{"gitId":"JasonC01"},"content":"        } else {","lastModifiedDate":"2021-09-09"},{"lineNumber":13,"author":{"gitId":"JasonC01"},"content":"            return null;","lastModifiedDate":"2021-09-09"},{"lineNumber":14,"author":{"gitId":"JasonC01"},"content":"        }","lastModifiedDate":"2021-09-09"},{"lineNumber":15,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-09-09"},{"lineNumber":16,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":17,"author":{"gitId":"JasonC01"},"content":"    public static String validateEventDescription(String input) {","lastModifiedDate":"2021-09-09"},{"lineNumber":18,"author":{"gitId":"JasonC01"},"content":"        if (input.split(\"event\").length \u003d\u003d 0) {","lastModifiedDate":"2021-09-09"},{"lineNumber":19,"author":{"gitId":"JasonC01"},"content":"            try {","lastModifiedDate":"2021-09-09"},{"lineNumber":20,"author":{"gitId":"JasonC01"},"content":"                throw new DukeException.emptyEventDescriptionException();","lastModifiedDate":"2021-09-09"},{"lineNumber":21,"author":{"gitId":"JasonC01"},"content":"            } catch (DukeException.emptyEventDescriptionException e) {","lastModifiedDate":"2021-09-09"},{"lineNumber":22,"author":{"gitId":"JasonC01"},"content":"                e.exceptionMessage();","lastModifiedDate":"2021-09-09"},{"lineNumber":23,"author":{"gitId":"JasonC01"},"content":"                return e.stringExceptionMessage();","lastModifiedDate":"2021-09-09"},{"lineNumber":24,"author":{"gitId":"JasonC01"},"content":"            }","lastModifiedDate":"2021-09-09"},{"lineNumber":25,"author":{"gitId":"JasonC01"},"content":"        } else {","lastModifiedDate":"2021-09-09"},{"lineNumber":26,"author":{"gitId":"JasonC01"},"content":"            return null;","lastModifiedDate":"2021-09-09"},{"lineNumber":27,"author":{"gitId":"JasonC01"},"content":"        }","lastModifiedDate":"2021-09-09"},{"lineNumber":28,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-09-09"},{"lineNumber":29,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":30,"author":{"gitId":"JasonC01"},"content":"    public static String validateDeadlineDescription(String input) {","lastModifiedDate":"2021-09-09"},{"lineNumber":31,"author":{"gitId":"JasonC01"},"content":"        if (input.split(\"deadline\").length \u003d\u003d 0) {","lastModifiedDate":"2021-09-09"},{"lineNumber":32,"author":{"gitId":"JasonC01"},"content":"            try {","lastModifiedDate":"2021-09-09"},{"lineNumber":33,"author":{"gitId":"JasonC01"},"content":"                throw new DukeException.emptyDeadlineDescriptionException();","lastModifiedDate":"2021-09-09"},{"lineNumber":34,"author":{"gitId":"JasonC01"},"content":"            } catch (DukeException.emptyDeadlineDescriptionException e) {","lastModifiedDate":"2021-09-09"},{"lineNumber":35,"author":{"gitId":"JasonC01"},"content":"                e.exceptionMessage();","lastModifiedDate":"2021-09-09"},{"lineNumber":36,"author":{"gitId":"JasonC01"},"content":"                return e.stringExceptionMessage();","lastModifiedDate":"2021-09-09"},{"lineNumber":37,"author":{"gitId":"JasonC01"},"content":"            }","lastModifiedDate":"2021-09-09"},{"lineNumber":38,"author":{"gitId":"JasonC01"},"content":"        } else {","lastModifiedDate":"2021-09-09"},{"lineNumber":39,"author":{"gitId":"JasonC01"},"content":"            return null;","lastModifiedDate":"2021-09-09"},{"lineNumber":40,"author":{"gitId":"JasonC01"},"content":"        }","lastModifiedDate":"2021-09-09"},{"lineNumber":41,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-09-09"},{"lineNumber":42,"author":{"gitId":"JasonC01"},"content":"}","lastModifiedDate":"2021-09-09"}],"authorContributionMap":{"JasonC01":42}},{"path":"src/test/java/duke/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JasonC01"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"JasonC01"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"JasonC01"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"JasonC01"},"content":"public class DukeTest {","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"JasonC01"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"JasonC01"},"content":"    public void formatTimingTest(){","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"JasonC01"},"content":"        String formattedDate \u003d Parser.parseTiming(\"2020-09-30 1800\");","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"JasonC01"},"content":"        assertEquals(\"Sep 30 2020 6pm\", formattedDate);","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"JasonC01"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"JasonC01"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"JasonC01"},"content":"    public void deadlineTaskTest() {","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"JasonC01"},"content":"        Deadline deadline \u003d new Deadline(\"do homework /by 2020-09-30 1900\");","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"JasonC01"},"content":"        assertEquals(\"[D][ ] do homework (by: Sep 30 2020 7pm)\", deadline.toString());","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"JasonC01"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"JasonC01"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"JasonC01":19}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"JasonC01"},"content":"todo h","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"JasonC01":1}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"JasonC01"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":20,"JasonC01":1}}]

[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"itzblim"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"itzblim"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"itzblim"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":17,"author":{"gitId":"itzblim"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"itzblim"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"itzblim"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":20,"author":{"gitId":"itzblim"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":21,"author":{"gitId":"itzblim"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":22,"author":{"gitId":"itzblim"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":23,"author":{"gitId":"itzblim"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":24,"author":{"gitId":"itzblim"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":25,"author":{"gitId":"itzblim"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":26,"author":{"gitId":"itzblim"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"itzblim"},"content":"    mainClassName \u003d \"duke.Launcher\"","lastModifiedDate":"2021-09-01"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"itzblim":15,"-":45}},{"path":"data/cache.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"itzblim"},"content":"todo Try listing all tasks using \"list\"","lastModifiedDate":"2021-09-01"},{"lineNumber":2,"author":{"gitId":"itzblim"},"content":"todo Try adding a todo task using \"todo [description]\"","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"itzblim"},"content":"todo Try adding an event using \"event [description] /at YYYY-MM-DD\"","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"itzblim"},"content":"todo Try adding a deadline using \"deadline [description] /by YYYY-MM-DD\"","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"itzblim"},"content":"todo Try marking a task as completed using \"done [task number]\"","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"itzblim"},"content":"todo Try deleting a task as completed using \"delete [task number]\"","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"itzblim"},"content":"todo Try finding a task using \"find [search query]\"","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"itzblim"},"content":"todo Try getting a date\u0027s schedule using \"schedule YYYY-MM-DD\"","lastModifiedDate":"2021-09-06"},{"lineNumber":9,"author":{"gitId":"itzblim"},"content":"todo Try exiting Duke using \"bye\"","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"itzblim":9}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"itzblim"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"itzblim"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"itzblim"},"content":"/**","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"itzblim"},"content":" * Class for deadline tasks.","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"itzblim"},"content":" */","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"itzblim"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"itzblim"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"itzblim"},"content":"     * Constructs a deadline task.","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"itzblim"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"itzblim"},"content":"     * @param description String describing the task.","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"itzblim"},"content":"     * @param time Deadline for the task.","lastModifiedDate":"2021-09-06"},{"lineNumber":14,"author":{"gitId":"itzblim"},"content":"     * @throws DukeException Thrown if time could not be parsed.","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"itzblim"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"itzblim"},"content":"    public Deadline(String description, LocalDate time) throws DukeException {","lastModifiedDate":"2021-09-06"},{"lineNumber":17,"author":{"gitId":"itzblim"},"content":"        super(description, time);","lastModifiedDate":"2021-09-06"},{"lineNumber":18,"author":{"gitId":"itzblim"},"content":"        category \u003d TaskType.deadline;","lastModifiedDate":"2021-09-06"},{"lineNumber":19,"author":{"gitId":"itzblim"},"content":"        assert description !\u003d null : \"description should not be null\";","lastModifiedDate":"2021-09-06"},{"lineNumber":20,"author":{"gitId":"itzblim"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"itzblim"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"itzblim"},"content":"     * Returns string representation of a deadline task.","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"itzblim"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":25,"author":{"gitId":"itzblim"},"content":"     * @return String describing the deadline task.","lastModifiedDate":"2021-08-18"},{"lineNumber":26,"author":{"gitId":"itzblim"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":27,"author":{"gitId":"itzblim"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":28,"author":{"gitId":"itzblim"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":29,"author":{"gitId":"itzblim"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + getTimeString() + \")\";","lastModifiedDate":"2021-09-06"},{"lineNumber":30,"author":{"gitId":"itzblim"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":31,"author":{"gitId":"itzblim"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"itzblim":31}},{"path":"src/main/java/duke/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"itzblim"},"content":"package duke;","lastModifiedDate":"2021-09-01"},{"lineNumber":2,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"itzblim"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"itzblim"},"content":"import java.util.Collections;","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"itzblim"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"itzblim"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"itzblim"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"itzblim"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"itzblim"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"itzblim"},"content":"import javafx.scene.Node;","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"itzblim"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"itzblim"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"itzblim"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"itzblim"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":17,"author":{"gitId":"itzblim"},"content":"/**","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"itzblim"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"itzblim"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2021-09-01"},{"lineNumber":20,"author":{"gitId":"itzblim"},"content":" * containing text from the speaker.","lastModifiedDate":"2021-09-01"},{"lineNumber":21,"author":{"gitId":"itzblim"},"content":" */","lastModifiedDate":"2021-09-01"},{"lineNumber":22,"author":{"gitId":"itzblim"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2021-09-01"},{"lineNumber":23,"author":{"gitId":"itzblim"},"content":"    @FXML","lastModifiedDate":"2021-09-01"},{"lineNumber":24,"author":{"gitId":"itzblim"},"content":"    private Label dialog;","lastModifiedDate":"2021-09-01"},{"lineNumber":25,"author":{"gitId":"itzblim"},"content":"    @FXML","lastModifiedDate":"2021-09-01"},{"lineNumber":26,"author":{"gitId":"itzblim"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2021-09-01"},{"lineNumber":27,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":28,"author":{"gitId":"itzblim"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2021-09-01"},{"lineNumber":29,"author":{"gitId":"itzblim"},"content":"        try {","lastModifiedDate":"2021-09-01"},{"lineNumber":30,"author":{"gitId":"itzblim"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2021-09-01"},{"lineNumber":31,"author":{"gitId":"itzblim"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2021-09-01"},{"lineNumber":32,"author":{"gitId":"itzblim"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2021-09-01"},{"lineNumber":33,"author":{"gitId":"itzblim"},"content":"            fxmlLoader.load();","lastModifiedDate":"2021-09-01"},{"lineNumber":34,"author":{"gitId":"itzblim"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-01"},{"lineNumber":35,"author":{"gitId":"itzblim"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-09-01"},{"lineNumber":36,"author":{"gitId":"itzblim"},"content":"        }","lastModifiedDate":"2021-09-01"},{"lineNumber":37,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":38,"author":{"gitId":"itzblim"},"content":"        dialog.setText(text);","lastModifiedDate":"2021-09-01"},{"lineNumber":39,"author":{"gitId":"itzblim"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2021-09-01"},{"lineNumber":40,"author":{"gitId":"itzblim"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":41,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":42,"author":{"gitId":"itzblim"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":43,"author":{"gitId":"itzblim"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2021-09-01"},{"lineNumber":44,"author":{"gitId":"itzblim"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":45,"author":{"gitId":"itzblim"},"content":"    private void flip() {","lastModifiedDate":"2021-09-01"},{"lineNumber":46,"author":{"gitId":"itzblim"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2021-09-01"},{"lineNumber":47,"author":{"gitId":"itzblim"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2021-09-01"},{"lineNumber":48,"author":{"gitId":"itzblim"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2021-09-01"},{"lineNumber":49,"author":{"gitId":"itzblim"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2021-09-01"},{"lineNumber":50,"author":{"gitId":"itzblim"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":51,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":52,"author":{"gitId":"itzblim"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":53,"author":{"gitId":"itzblim"},"content":"     * Gets a user dialog box, image aligned to the right.","lastModifiedDate":"2021-09-01"},{"lineNumber":54,"author":{"gitId":"itzblim"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":55,"author":{"gitId":"itzblim"},"content":"     * @param text Message to be included.","lastModifiedDate":"2021-09-01"},{"lineNumber":56,"author":{"gitId":"itzblim"},"content":"     * @param img Image to be included.","lastModifiedDate":"2021-09-01"},{"lineNumber":57,"author":{"gitId":"itzblim"},"content":"     * @return A dialog box with the message and the image.","lastModifiedDate":"2021-09-01"},{"lineNumber":58,"author":{"gitId":"itzblim"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":59,"author":{"gitId":"itzblim"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2021-09-01"},{"lineNumber":60,"author":{"gitId":"itzblim"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2021-09-01"},{"lineNumber":61,"author":{"gitId":"itzblim"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":62,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":63,"author":{"gitId":"itzblim"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":64,"author":{"gitId":"itzblim"},"content":"     * Gets a duke dialog box, image aligned to the left.","lastModifiedDate":"2021-09-01"},{"lineNumber":65,"author":{"gitId":"itzblim"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":66,"author":{"gitId":"itzblim"},"content":"     * @param text Message to be included.","lastModifiedDate":"2021-09-01"},{"lineNumber":67,"author":{"gitId":"itzblim"},"content":"     * @param img Image to be included.","lastModifiedDate":"2021-09-01"},{"lineNumber":68,"author":{"gitId":"itzblim"},"content":"     * @return A dialog box with the message and the image.","lastModifiedDate":"2021-09-01"},{"lineNumber":69,"author":{"gitId":"itzblim"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":70,"author":{"gitId":"itzblim"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2021-09-01"},{"lineNumber":71,"author":{"gitId":"itzblim"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2021-09-01"},{"lineNumber":72,"author":{"gitId":"itzblim"},"content":"        db.flip();","lastModifiedDate":"2021-09-01"},{"lineNumber":73,"author":{"gitId":"itzblim"},"content":"        return db;","lastModifiedDate":"2021-09-01"},{"lineNumber":74,"author":{"gitId":"itzblim"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":75,"author":{"gitId":"itzblim"},"content":"}","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"itzblim":75}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"itzblim"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"itzblim"},"content":"/**","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"itzblim"},"content":" * Main class for Duke, scans for inputs and responds to user.","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"itzblim"},"content":" */","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":7,"author":{"gitId":"itzblim"},"content":"    private final String filePath;","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"itzblim"},"content":"    private Ui ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"itzblim"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"itzblim"},"content":"     * Constructs a Duke program.","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"itzblim"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"itzblim"},"content":"     * @param filePath Relative path of cache as string.","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"itzblim"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"itzblim"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"itzblim"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2021-09-01"},{"lineNumber":17,"author":{"gitId":"itzblim"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"itzblim"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":20,"author":{"gitId":"itzblim"},"content":"     * Initialize the Duke program","lastModifiedDate":"2021-09-01"},{"lineNumber":21,"author":{"gitId":"itzblim"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":22,"author":{"gitId":"itzblim"},"content":"     * @return A string describing the response.","lastModifiedDate":"2021-09-01"},{"lineNumber":23,"author":{"gitId":"itzblim"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":24,"author":{"gitId":"itzblim"},"content":"    public String initialize() {","lastModifiedDate":"2021-09-01"},{"lineNumber":25,"author":{"gitId":"itzblim"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"itzblim"},"content":"            Storage storage \u003d new Storage(filePath);","lastModifiedDate":"2021-09-06"},{"lineNumber":27,"author":{"gitId":"itzblim"},"content":"            TaskList tasks \u003d storage.load();","lastModifiedDate":"2021-09-06"},{"lineNumber":28,"author":{"gitId":"itzblim"},"content":"            ui \u003d new Ui(tasks, storage);","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"itzblim"},"content":"            // Return the response from the ui initialization.","lastModifiedDate":"2021-09-06"},{"lineNumber":30,"author":{"gitId":"itzblim"},"content":"            return ui.initialize();","lastModifiedDate":"2021-09-01"},{"lineNumber":31,"author":{"gitId":"itzblim"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"itzblim"},"content":"            return e.getMessage();","lastModifiedDate":"2021-09-01"},{"lineNumber":33,"author":{"gitId":"itzblim"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":34,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":36,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":37,"author":{"gitId":"itzblim"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":38,"author":{"gitId":"itzblim"},"content":"     * Processes an input from the user.","lastModifiedDate":"2021-09-01"},{"lineNumber":39,"author":{"gitId":"itzblim"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":40,"author":{"gitId":"itzblim"},"content":"     * @param message String received from the user.","lastModifiedDate":"2021-09-01"},{"lineNumber":41,"author":{"gitId":"itzblim"},"content":"     * @return A response to be displayed to the user.","lastModifiedDate":"2021-09-01"},{"lineNumber":42,"author":{"gitId":"itzblim"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":43,"author":{"gitId":"itzblim"},"content":"    public String getResponse(String message) {","lastModifiedDate":"2021-09-01"},{"lineNumber":44,"author":{"gitId":"itzblim"},"content":"        String response \u003d ui.respond(message);","lastModifiedDate":"2021-09-06"},{"lineNumber":45,"author":{"gitId":"itzblim"},"content":"        assert !response.isEmpty() : \"response should not be empty\";","lastModifiedDate":"2021-09-06"},{"lineNumber":46,"author":{"gitId":"itzblim"},"content":"        return response;","lastModifiedDate":"2021-09-06"},{"lineNumber":47,"author":{"gitId":"itzblim"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"itzblim":45,"-":3}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"itzblim"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"itzblim"},"content":"/**","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"itzblim"},"content":" * Class for exceptions related to Duke.","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"itzblim"},"content":" */","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"itzblim"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"itzblim"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"itzblim"},"content":"     * Constructs an exception related to Duke.","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"itzblim"},"content":"     *","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"itzblim"},"content":"     * @param errorMsg String describing error.","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"itzblim"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"itzblim"},"content":"    public DukeException(String errorMsg) {","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"itzblim"},"content":"        super(\"OOPS!!! \" + errorMsg);","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"itzblim"},"content":"        assert !errorMsg.isEmpty() : \"errorMsg should not be empty\";","lastModifiedDate":"2021-09-06"},{"lineNumber":16,"author":{"gitId":"itzblim"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":17,"author":{"gitId":"itzblim"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"itzblim":17}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"itzblim"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"itzblim"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"itzblim"},"content":"/**","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"itzblim"},"content":" * Class for event tasks.","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"itzblim"},"content":" */","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"itzblim"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"itzblim"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"itzblim"},"content":"     * Constructs an event task.","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"itzblim"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"itzblim"},"content":"     * @param description String describing the event task.","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"itzblim"},"content":"     * @param time Time of the event.","lastModifiedDate":"2021-09-06"},{"lineNumber":14,"author":{"gitId":"itzblim"},"content":"     * @throws DukeException Thrown if time could not be parsed.","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"itzblim"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"itzblim"},"content":"    public Event(String description, LocalDate time) throws DukeException {","lastModifiedDate":"2021-09-06"},{"lineNumber":17,"author":{"gitId":"itzblim"},"content":"        super(description, time);","lastModifiedDate":"2021-09-06"},{"lineNumber":18,"author":{"gitId":"itzblim"},"content":"        category \u003d TaskType.event;","lastModifiedDate":"2021-09-06"},{"lineNumber":19,"author":{"gitId":"itzblim"},"content":"        assert description !\u003d null : \"description should not be null\";","lastModifiedDate":"2021-09-06"},{"lineNumber":20,"author":{"gitId":"itzblim"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"itzblim"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"itzblim"},"content":"     * Gets string representation of event task.","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"itzblim"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":25,"author":{"gitId":"itzblim"},"content":"     * @return String describing the event.","lastModifiedDate":"2021-08-18"},{"lineNumber":26,"author":{"gitId":"itzblim"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":27,"author":{"gitId":"itzblim"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":28,"author":{"gitId":"itzblim"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":29,"author":{"gitId":"itzblim"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + getTimeString() + \")\";","lastModifiedDate":"2021-09-06"},{"lineNumber":30,"author":{"gitId":"itzblim"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":31,"author":{"gitId":"itzblim"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"itzblim":31}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"itzblim"},"content":"package duke;","lastModifiedDate":"2021-09-01"},{"lineNumber":2,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"itzblim"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"itzblim"},"content":"/**","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"itzblim"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"itzblim"},"content":" */","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"itzblim"},"content":"public class Launcher {","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"itzblim"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"itzblim"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"itzblim"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"itzblim"},"content":"}","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"itzblim":12}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"itzblim"},"content":"package duke;","lastModifiedDate":"2021-09-01"},{"lineNumber":2,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"itzblim"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"itzblim"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"itzblim"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"itzblim"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"itzblim"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"itzblim"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"itzblim"},"content":"/**","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"itzblim"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"itzblim"},"content":" */","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"itzblim"},"content":"public class Main extends Application {","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"itzblim"},"content":"    private static final String CACHE_PATH \u003d \"data/cache.txt\";","lastModifiedDate":"2021-09-01"},{"lineNumber":17,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"itzblim"},"content":"    private final Duke duke \u003d new Duke(CACHE_PATH);","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":20,"author":{"gitId":"itzblim"},"content":"    @Override","lastModifiedDate":"2021-09-01"},{"lineNumber":21,"author":{"gitId":"itzblim"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2021-09-01"},{"lineNumber":22,"author":{"gitId":"itzblim"},"content":"        try {","lastModifiedDate":"2021-09-01"},{"lineNumber":23,"author":{"gitId":"itzblim"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2021-09-01"},{"lineNumber":24,"author":{"gitId":"itzblim"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2021-09-01"},{"lineNumber":25,"author":{"gitId":"itzblim"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2021-09-01"},{"lineNumber":26,"author":{"gitId":"itzblim"},"content":"            stage.setScene(scene);","lastModifiedDate":"2021-09-01"},{"lineNumber":27,"author":{"gitId":"itzblim"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2021-09-01"},{"lineNumber":28,"author":{"gitId":"itzblim"},"content":"            stage.show();","lastModifiedDate":"2021-09-01"},{"lineNumber":29,"author":{"gitId":"itzblim"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-01"},{"lineNumber":30,"author":{"gitId":"itzblim"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-09-01"},{"lineNumber":31,"author":{"gitId":"itzblim"},"content":"        }","lastModifiedDate":"2021-09-01"},{"lineNumber":32,"author":{"gitId":"itzblim"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":33,"author":{"gitId":"itzblim"},"content":"}","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"itzblim":33}},{"path":"src/main/java/duke/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"itzblim"},"content":"package duke;","lastModifiedDate":"2021-09-01"},{"lineNumber":2,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"itzblim"},"content":"import javafx.application.Platform;","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"itzblim"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"itzblim"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"itzblim"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"itzblim"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"itzblim"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"itzblim"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"itzblim"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"itzblim"},"content":"/**","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"itzblim"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"itzblim"},"content":" */","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"itzblim"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"itzblim"},"content":"    @FXML","lastModifiedDate":"2021-09-01"},{"lineNumber":17,"author":{"gitId":"itzblim"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"itzblim"},"content":"    @FXML","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"itzblim"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2021-09-01"},{"lineNumber":20,"author":{"gitId":"itzblim"},"content":"    @FXML","lastModifiedDate":"2021-09-01"},{"lineNumber":21,"author":{"gitId":"itzblim"},"content":"    private TextField userInput;","lastModifiedDate":"2021-09-01"},{"lineNumber":22,"author":{"gitId":"itzblim"},"content":"    @FXML","lastModifiedDate":"2021-09-01"},{"lineNumber":23,"author":{"gitId":"itzblim"},"content":"    private Button sendButton;","lastModifiedDate":"2021-09-01"},{"lineNumber":24,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":25,"author":{"gitId":"itzblim"},"content":"    private Duke duke;","lastModifiedDate":"2021-09-01"},{"lineNumber":26,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":27,"author":{"gitId":"itzblim"},"content":"    private final Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/clown.png\"));","lastModifiedDate":"2021-09-06"},{"lineNumber":28,"author":{"gitId":"itzblim"},"content":"    private final Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/pepeok.png\"));","lastModifiedDate":"2021-09-06"},{"lineNumber":29,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":30,"author":{"gitId":"itzblim"},"content":"    @FXML","lastModifiedDate":"2021-09-01"},{"lineNumber":31,"author":{"gitId":"itzblim"},"content":"    public void initialize() {","lastModifiedDate":"2021-09-01"},{"lineNumber":32,"author":{"gitId":"itzblim"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2021-09-01"},{"lineNumber":33,"author":{"gitId":"itzblim"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":34,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":35,"author":{"gitId":"itzblim"},"content":"    @FXML","lastModifiedDate":"2021-09-01"},{"lineNumber":36,"author":{"gitId":"itzblim"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2021-09-01"},{"lineNumber":37,"author":{"gitId":"itzblim"},"content":"        duke \u003d d;","lastModifiedDate":"2021-09-01"},{"lineNumber":38,"author":{"gitId":"itzblim"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2021-09-01"},{"lineNumber":39,"author":{"gitId":"itzblim"},"content":"                DialogBox.getDukeDialog(duke.initialize(), dukeImage)","lastModifiedDate":"2021-09-01"},{"lineNumber":40,"author":{"gitId":"itzblim"},"content":"        );","lastModifiedDate":"2021-09-01"},{"lineNumber":41,"author":{"gitId":"itzblim"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":42,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":43,"author":{"gitId":"itzblim"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":44,"author":{"gitId":"itzblim"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2021-09-01"},{"lineNumber":45,"author":{"gitId":"itzblim"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2021-09-01"},{"lineNumber":46,"author":{"gitId":"itzblim"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":47,"author":{"gitId":"itzblim"},"content":"    @FXML","lastModifiedDate":"2021-09-01"},{"lineNumber":48,"author":{"gitId":"itzblim"},"content":"    private void handleUserInput() {","lastModifiedDate":"2021-09-01"},{"lineNumber":49,"author":{"gitId":"itzblim"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2021-09-01"},{"lineNumber":50,"author":{"gitId":"itzblim"},"content":"        String response \u003d duke.getResponse(input);","lastModifiedDate":"2021-09-01"},{"lineNumber":51,"author":{"gitId":"itzblim"},"content":"        assert !response.isEmpty() : \"response should not be empty\";","lastModifiedDate":"2021-09-06"},{"lineNumber":52,"author":{"gitId":"itzblim"},"content":"        if (Ui.isByeMsg(response)) {","lastModifiedDate":"2021-09-01"},{"lineNumber":53,"author":{"gitId":"itzblim"},"content":"            // Exit the program if bye command is used.","lastModifiedDate":"2021-09-06"},{"lineNumber":54,"author":{"gitId":"itzblim"},"content":"            assert input.equals(\"bye\") : \"input should be bye if exit is to occur\";","lastModifiedDate":"2021-09-06"},{"lineNumber":55,"author":{"gitId":"itzblim"},"content":"            Platform.exit();","lastModifiedDate":"2021-09-01"},{"lineNumber":56,"author":{"gitId":"itzblim"},"content":"        }","lastModifiedDate":"2021-09-01"},{"lineNumber":57,"author":{"gitId":"itzblim"},"content":"        // Otherwise, add new dialog boxes.","lastModifiedDate":"2021-09-06"},{"lineNumber":58,"author":{"gitId":"itzblim"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2021-09-01"},{"lineNumber":59,"author":{"gitId":"itzblim"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2021-09-01"},{"lineNumber":60,"author":{"gitId":"itzblim"},"content":"                DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2021-09-01"},{"lineNumber":61,"author":{"gitId":"itzblim"},"content":"        );","lastModifiedDate":"2021-09-01"},{"lineNumber":62,"author":{"gitId":"itzblim"},"content":"        userInput.clear();","lastModifiedDate":"2021-09-01"},{"lineNumber":63,"author":{"gitId":"itzblim"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":64,"author":{"gitId":"itzblim"},"content":"}","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"itzblim":64}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"itzblim"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"itzblim"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-06"},{"lineNumber":4,"author":{"gitId":"itzblim"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-09-06"},{"lineNumber":5,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":6,"author":{"gitId":"itzblim"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"itzblim"},"content":" * Encapsulates a Parser class. Parses user input into commands.","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"itzblim"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"itzblim"},"content":"public class Parser {","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"itzblim"},"content":"    private final TaskList tasks;","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"itzblim"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"itzblim"},"content":"     * Constructs a Parser.","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"itzblim"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"itzblim"},"content":"     * @param tasks TaskList to send commands to.","lastModifiedDate":"2021-09-06"},{"lineNumber":16,"author":{"gitId":"itzblim"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"itzblim"},"content":"    public Parser(TaskList tasks) {","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"itzblim"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"itzblim"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"itzblim"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"itzblim"},"content":"     * Parses a command and manipulates the TaskList accordingly.","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"itzblim"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"itzblim"},"content":"     * @param command String representation of command.","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"itzblim"},"content":"     * @return An array of message strings.","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"itzblim"},"content":"     * @throws DukeException Thrown when an invalid command is given.","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"itzblim"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"itzblim"},"content":"    public String[] parseCommand(String command) throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"itzblim"},"content":"        if (command.equals(\"bye\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"itzblim"},"content":"            return parseByeCommand();","lastModifiedDate":"2021-09-06"},{"lineNumber":31,"author":{"gitId":"itzblim"},"content":"        } else if (command.equals(\"list\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"itzblim"},"content":"            return parseListCommand();","lastModifiedDate":"2021-09-06"},{"lineNumber":33,"author":{"gitId":"itzblim"},"content":"        } else if (command.startsWith(\"find \")) {","lastModifiedDate":"2021-08-30"},{"lineNumber":34,"author":{"gitId":"itzblim"},"content":"            return parseFindCommand(command);","lastModifiedDate":"2021-09-06"},{"lineNumber":35,"author":{"gitId":"itzblim"},"content":"        } else if (command.startsWith(\"schedule \")) {","lastModifiedDate":"2021-09-06"},{"lineNumber":36,"author":{"gitId":"itzblim"},"content":"            return parseScheduleCommand(command);","lastModifiedDate":"2021-09-06"},{"lineNumber":37,"author":{"gitId":"itzblim"},"content":"        } else if (command.startsWith(\"done \")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"itzblim"},"content":"            return parseDoneCommand(command);","lastModifiedDate":"2021-09-06"},{"lineNumber":39,"author":{"gitId":"itzblim"},"content":"        } else if (command.startsWith(\"delete \")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"itzblim"},"content":"            return parseDeleteCommand(command);","lastModifiedDate":"2021-09-06"},{"lineNumber":41,"author":{"gitId":"itzblim"},"content":"        } else if (command.startsWith(\"todo\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"itzblim"},"content":"            return parseTodoCommand(command);","lastModifiedDate":"2021-09-06"},{"lineNumber":43,"author":{"gitId":"itzblim"},"content":"        } else if (command.startsWith(\"deadline\")) {","lastModifiedDate":"2021-09-06"},{"lineNumber":44,"author":{"gitId":"itzblim"},"content":"            return parseDeadlineCommand(command);","lastModifiedDate":"2021-09-06"},{"lineNumber":45,"author":{"gitId":"itzblim"},"content":"        } else if (command.startsWith(\"event\")) {","lastModifiedDate":"2021-09-06"},{"lineNumber":46,"author":{"gitId":"itzblim"},"content":"            return parseEventCommand(command);","lastModifiedDate":"2021-09-06"},{"lineNumber":47,"author":{"gitId":"itzblim"},"content":"        } else {","lastModifiedDate":"2021-09-06"},{"lineNumber":48,"author":{"gitId":"itzblim"},"content":"            return parseUnknownCommand();","lastModifiedDate":"2021-09-06"},{"lineNumber":49,"author":{"gitId":"itzblim"},"content":"        }","lastModifiedDate":"2021-09-06"},{"lineNumber":50,"author":{"gitId":"itzblim"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":51,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":52,"author":{"gitId":"itzblim"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":53,"author":{"gitId":"itzblim"},"content":"     * Parses a bye command.","lastModifiedDate":"2021-09-06"},{"lineNumber":54,"author":{"gitId":"itzblim"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":55,"author":{"gitId":"itzblim"},"content":"     * @return A bye message which will terminate the program.","lastModifiedDate":"2021-09-06"},{"lineNumber":56,"author":{"gitId":"itzblim"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":57,"author":{"gitId":"itzblim"},"content":"    private String[] parseByeCommand() {","lastModifiedDate":"2021-09-06"},{"lineNumber":58,"author":{"gitId":"itzblim"},"content":"        return new String[] {Ui.BYE_MSG};","lastModifiedDate":"2021-09-06"},{"lineNumber":59,"author":{"gitId":"itzblim"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":60,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":61,"author":{"gitId":"itzblim"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":62,"author":{"gitId":"itzblim"},"content":"     * Parses a list command.","lastModifiedDate":"2021-09-06"},{"lineNumber":63,"author":{"gitId":"itzblim"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":64,"author":{"gitId":"itzblim"},"content":"     * @return String array of task list.","lastModifiedDate":"2021-09-06"},{"lineNumber":65,"author":{"gitId":"itzblim"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":66,"author":{"gitId":"itzblim"},"content":"    private String[] parseListCommand() {","lastModifiedDate":"2021-09-06"},{"lineNumber":67,"author":{"gitId":"itzblim"},"content":"        return tasks.getTaskStrings();","lastModifiedDate":"2021-09-06"},{"lineNumber":68,"author":{"gitId":"itzblim"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":69,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":70,"author":{"gitId":"itzblim"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":71,"author":{"gitId":"itzblim"},"content":"     * Parses a find command.","lastModifiedDate":"2021-09-06"},{"lineNumber":72,"author":{"gitId":"itzblim"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":73,"author":{"gitId":"itzblim"},"content":"     * @param command Input from user.","lastModifiedDate":"2021-09-06"},{"lineNumber":74,"author":{"gitId":"itzblim"},"content":"     * @return String array of matching tasks.","lastModifiedDate":"2021-09-06"},{"lineNumber":75,"author":{"gitId":"itzblim"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":76,"author":{"gitId":"itzblim"},"content":"    private String[] parseFindCommand(String command) {","lastModifiedDate":"2021-09-06"},{"lineNumber":77,"author":{"gitId":"itzblim"},"content":"        int cutOffIndex \u003d \"find \".length();","lastModifiedDate":"2021-09-06"},{"lineNumber":78,"author":{"gitId":"itzblim"},"content":"        return tasks.findMatchingTasks(command.substring(cutOffIndex));","lastModifiedDate":"2021-09-06"},{"lineNumber":79,"author":{"gitId":"itzblim"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":80,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":81,"author":{"gitId":"itzblim"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":82,"author":{"gitId":"itzblim"},"content":"     * Parses a schedule command.","lastModifiedDate":"2021-09-06"},{"lineNumber":83,"author":{"gitId":"itzblim"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":84,"author":{"gitId":"itzblim"},"content":"     * @param command Input from user.","lastModifiedDate":"2021-09-06"},{"lineNumber":85,"author":{"gitId":"itzblim"},"content":"     * @return String array of matching tasks.","lastModifiedDate":"2021-09-06"},{"lineNumber":86,"author":{"gitId":"itzblim"},"content":"     * @throws DukeException if date cannot be parsed.","lastModifiedDate":"2021-09-06"},{"lineNumber":87,"author":{"gitId":"itzblim"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":88,"author":{"gitId":"itzblim"},"content":"    private String[] parseScheduleCommand(String command) throws DukeException {","lastModifiedDate":"2021-09-06"},{"lineNumber":89,"author":{"gitId":"itzblim"},"content":"        int cutOffIndex \u003d \"schedule \".length();","lastModifiedDate":"2021-09-06"},{"lineNumber":90,"author":{"gitId":"itzblim"},"content":"        return tasks.getSchedule(parseTimeString(command.substring(cutOffIndex)));","lastModifiedDate":"2021-09-06"},{"lineNumber":91,"author":{"gitId":"itzblim"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":92,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":93,"author":{"gitId":"itzblim"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":94,"author":{"gitId":"itzblim"},"content":"     * Parses a done command.","lastModifiedDate":"2021-09-06"},{"lineNumber":95,"author":{"gitId":"itzblim"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":96,"author":{"gitId":"itzblim"},"content":"     * @param command Input from user.","lastModifiedDate":"2021-09-06"},{"lineNumber":97,"author":{"gitId":"itzblim"},"content":"     * @return Affirmation of completion of task.","lastModifiedDate":"2021-09-06"},{"lineNumber":98,"author":{"gitId":"itzblim"},"content":"     * @throws DukeException If index out of range.","lastModifiedDate":"2021-09-06"},{"lineNumber":99,"author":{"gitId":"itzblim"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":100,"author":{"gitId":"itzblim"},"content":"    private String[] parseDoneCommand(String command) throws DukeException {","lastModifiedDate":"2021-09-06"},{"lineNumber":101,"author":{"gitId":"itzblim"},"content":"        int cutOffIndex \u003d \"done \".length();","lastModifiedDate":"2021-09-06"},{"lineNumber":102,"author":{"gitId":"itzblim"},"content":"        return tasks.markTask(Integer.parseInt(command.substring(cutOffIndex)) - 1);","lastModifiedDate":"2021-09-06"},{"lineNumber":103,"author":{"gitId":"itzblim"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":104,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":105,"author":{"gitId":"itzblim"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":106,"author":{"gitId":"itzblim"},"content":"     * Parses a delete command.","lastModifiedDate":"2021-09-06"},{"lineNumber":107,"author":{"gitId":"itzblim"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":108,"author":{"gitId":"itzblim"},"content":"     * @param command Input from user.","lastModifiedDate":"2021-09-06"},{"lineNumber":109,"author":{"gitId":"itzblim"},"content":"     * @return Affirmation of deletion of task.","lastModifiedDate":"2021-09-06"},{"lineNumber":110,"author":{"gitId":"itzblim"},"content":"     * @throws DukeException If index out of range.","lastModifiedDate":"2021-09-06"},{"lineNumber":111,"author":{"gitId":"itzblim"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":112,"author":{"gitId":"itzblim"},"content":"    private String[] parseDeleteCommand(String command) throws DukeException {","lastModifiedDate":"2021-09-06"},{"lineNumber":113,"author":{"gitId":"itzblim"},"content":"        int cutOffIndex \u003d \"delete \".length();","lastModifiedDate":"2021-09-06"},{"lineNumber":114,"author":{"gitId":"itzblim"},"content":"        return tasks.deleteTask(Integer.parseInt(command.substring(cutOffIndex)) - 1);","lastModifiedDate":"2021-09-06"},{"lineNumber":115,"author":{"gitId":"itzblim"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":116,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":117,"author":{"gitId":"itzblim"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":118,"author":{"gitId":"itzblim"},"content":"     * Parses a todo command.","lastModifiedDate":"2021-09-06"},{"lineNumber":119,"author":{"gitId":"itzblim"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":120,"author":{"gitId":"itzblim"},"content":"     * @param command Input from user.","lastModifiedDate":"2021-09-06"},{"lineNumber":121,"author":{"gitId":"itzblim"},"content":"     * @return Affirmation of todo created.","lastModifiedDate":"2021-09-06"},{"lineNumber":122,"author":{"gitId":"itzblim"},"content":"     * @throws DukeException if invalid description.","lastModifiedDate":"2021-09-06"},{"lineNumber":123,"author":{"gitId":"itzblim"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":124,"author":{"gitId":"itzblim"},"content":"    private String[] parseTodoCommand(String command) throws DukeException {","lastModifiedDate":"2021-09-06"},{"lineNumber":125,"author":{"gitId":"itzblim"},"content":"        int cutOffIndex \u003d \"todo \".length();","lastModifiedDate":"2021-09-06"},{"lineNumber":126,"author":{"gitId":"itzblim"},"content":"        if (command.length() \u003c\u003d cutOffIndex) {","lastModifiedDate":"2021-09-06"},{"lineNumber":127,"author":{"gitId":"itzblim"},"content":"            throw new DukeException(\"Don\u0027t give me an empty todo!\");","lastModifiedDate":"2021-09-01"},{"lineNumber":128,"author":{"gitId":"itzblim"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":129,"author":{"gitId":"itzblim"},"content":"        return tasks.addTask(new Todo(command.substring(cutOffIndex)));","lastModifiedDate":"2021-09-06"},{"lineNumber":130,"author":{"gitId":"itzblim"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":131,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":132,"author":{"gitId":"itzblim"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":133,"author":{"gitId":"itzblim"},"content":"     * Parses a deadline command.","lastModifiedDate":"2021-09-06"},{"lineNumber":134,"author":{"gitId":"itzblim"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":135,"author":{"gitId":"itzblim"},"content":"     * @param command Input from user.","lastModifiedDate":"2021-09-06"},{"lineNumber":136,"author":{"gitId":"itzblim"},"content":"     * @return Affirmation of deadline created.","lastModifiedDate":"2021-09-06"},{"lineNumber":137,"author":{"gitId":"itzblim"},"content":"     * @throws DukeException if invalid description or time.","lastModifiedDate":"2021-09-06"},{"lineNumber":138,"author":{"gitId":"itzblim"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":139,"author":{"gitId":"itzblim"},"content":"    private String[] parseDeadlineCommand(String command) throws DukeException {","lastModifiedDate":"2021-09-06"},{"lineNumber":140,"author":{"gitId":"itzblim"},"content":"        int cutOffIndex \u003d \"deadline \".length();","lastModifiedDate":"2021-09-06"},{"lineNumber":141,"author":{"gitId":"itzblim"},"content":"        if (command.length() \u003c\u003d cutOffIndex) {","lastModifiedDate":"2021-09-06"},{"lineNumber":142,"author":{"gitId":"itzblim"},"content":"            throw new DukeException(\"Don\u0027t give me an empty deadline!\");","lastModifiedDate":"2021-09-01"},{"lineNumber":143,"author":{"gitId":"itzblim"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":144,"author":{"gitId":"itzblim"},"content":"        int byIndex \u003d command.indexOf(\" /by\");","lastModifiedDate":"2021-08-25"},{"lineNumber":145,"author":{"gitId":"itzblim"},"content":"        if (byIndex \u003d\u003d -1) {","lastModifiedDate":"2021-08-25"},{"lineNumber":146,"author":{"gitId":"itzblim"},"content":"            throw new DukeException(\"/by not found.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":147,"author":{"gitId":"itzblim"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":148,"author":{"gitId":"itzblim"},"content":"        int timeIndex \u003d byIndex + \" /by \".length();","lastModifiedDate":"2021-09-06"},{"lineNumber":149,"author":{"gitId":"itzblim"},"content":"        return tasks.addTask(new Deadline(","lastModifiedDate":"2021-08-25"},{"lineNumber":150,"author":{"gitId":"itzblim"},"content":"                command.substring(cutOffIndex, byIndex),","lastModifiedDate":"2021-09-06"},{"lineNumber":151,"author":{"gitId":"itzblim"},"content":"                parseTimeString(command.substring(timeIndex))));","lastModifiedDate":"2021-09-06"},{"lineNumber":152,"author":{"gitId":"itzblim"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":153,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":154,"author":{"gitId":"itzblim"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":155,"author":{"gitId":"itzblim"},"content":"     * Parses an event command.","lastModifiedDate":"2021-09-06"},{"lineNumber":156,"author":{"gitId":"itzblim"},"content":"     * @param command Input from user.","lastModifiedDate":"2021-09-06"},{"lineNumber":157,"author":{"gitId":"itzblim"},"content":"     * @return Affirmation of event created.","lastModifiedDate":"2021-09-06"},{"lineNumber":158,"author":{"gitId":"itzblim"},"content":"     * @throws DukeException if invalid description or time.","lastModifiedDate":"2021-09-06"},{"lineNumber":159,"author":{"gitId":"itzblim"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":160,"author":{"gitId":"itzblim"},"content":"    private String[] parseEventCommand(String command) throws DukeException {","lastModifiedDate":"2021-09-06"},{"lineNumber":161,"author":{"gitId":"itzblim"},"content":"        int cutOffIndex \u003d \"event \".length();","lastModifiedDate":"2021-09-06"},{"lineNumber":162,"author":{"gitId":"itzblim"},"content":"        if (command.length() \u003c\u003d cutOffIndex) {","lastModifiedDate":"2021-09-06"},{"lineNumber":163,"author":{"gitId":"itzblim"},"content":"            throw new DukeException(\"Don\u0027t give me an empty event!\");","lastModifiedDate":"2021-09-01"},{"lineNumber":164,"author":{"gitId":"itzblim"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":165,"author":{"gitId":"itzblim"},"content":"        int atIndex \u003d command.indexOf(\" /at\");","lastModifiedDate":"2021-08-25"},{"lineNumber":166,"author":{"gitId":"itzblim"},"content":"        if (atIndex \u003d\u003d -1) {","lastModifiedDate":"2021-08-25"},{"lineNumber":167,"author":{"gitId":"itzblim"},"content":"            throw new DukeException(\"/at not found.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":168,"author":{"gitId":"itzblim"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":169,"author":{"gitId":"itzblim"},"content":"        int timeIndex \u003d atIndex + \" /at \".length();","lastModifiedDate":"2021-09-06"},{"lineNumber":170,"author":{"gitId":"itzblim"},"content":"        return tasks.addTask(new Event(","lastModifiedDate":"2021-08-25"},{"lineNumber":171,"author":{"gitId":"itzblim"},"content":"                command.substring(cutOffIndex, atIndex),","lastModifiedDate":"2021-09-06"},{"lineNumber":172,"author":{"gitId":"itzblim"},"content":"                parseTimeString(command.substring(timeIndex))));","lastModifiedDate":"2021-09-06"},{"lineNumber":173,"author":{"gitId":"itzblim"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":174,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":175,"author":{"gitId":"itzblim"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":176,"author":{"gitId":"itzblim"},"content":"     * Parses a time string into LocalDate time.","lastModifiedDate":"2021-09-06"},{"lineNumber":177,"author":{"gitId":"itzblim"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":178,"author":{"gitId":"itzblim"},"content":"     * @param timeString String describing a date.","lastModifiedDate":"2021-09-06"},{"lineNumber":179,"author":{"gitId":"itzblim"},"content":"     * @return LocalDate representation of time.","lastModifiedDate":"2021-09-06"},{"lineNumber":180,"author":{"gitId":"itzblim"},"content":"     * @throws DukeException if time cannot be parsed.","lastModifiedDate":"2021-09-06"},{"lineNumber":181,"author":{"gitId":"itzblim"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":182,"author":{"gitId":"itzblim"},"content":"    private LocalDate parseTimeString(String timeString) throws DukeException {","lastModifiedDate":"2021-09-06"},{"lineNumber":183,"author":{"gitId":"itzblim"},"content":"        try {","lastModifiedDate":"2021-09-06"},{"lineNumber":184,"author":{"gitId":"itzblim"},"content":"            return LocalDate.parse(timeString);","lastModifiedDate":"2021-09-06"},{"lineNumber":185,"author":{"gitId":"itzblim"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-09-06"},{"lineNumber":186,"author":{"gitId":"itzblim"},"content":"            throw new DukeException(\"Cannot parse time input. Try using YYYY-MM-DD!\");","lastModifiedDate":"2021-09-06"},{"lineNumber":187,"author":{"gitId":"itzblim"},"content":"        }","lastModifiedDate":"2021-09-06"},{"lineNumber":188,"author":{"gitId":"itzblim"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":189,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":190,"author":{"gitId":"itzblim"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":191,"author":{"gitId":"itzblim"},"content":"     * Parses an unknown command.","lastModifiedDate":"2021-09-06"},{"lineNumber":192,"author":{"gitId":"itzblim"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":193,"author":{"gitId":"itzblim"},"content":"     * @return Does not return any valid response.","lastModifiedDate":"2021-09-06"},{"lineNumber":194,"author":{"gitId":"itzblim"},"content":"     * @throws DukeException whenever an unknown command is detected.","lastModifiedDate":"2021-09-06"},{"lineNumber":195,"author":{"gitId":"itzblim"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":196,"author":{"gitId":"itzblim"},"content":"    private String[] parseUnknownCommand() throws DukeException {","lastModifiedDate":"2021-09-06"},{"lineNumber":197,"author":{"gitId":"itzblim"},"content":"        throw new DukeException(\"What on earth does that mean? Are you okay?\");","lastModifiedDate":"2021-09-06"},{"lineNumber":198,"author":{"gitId":"itzblim"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":199,"author":{"gitId":"itzblim"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"itzblim":199}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"itzblim"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"itzblim"},"content":"import java.io.File;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"itzblim"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"itzblim"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"itzblim"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"itzblim"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"itzblim"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"itzblim"},"content":" * Encapsulates the storage for a Duke program.","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"itzblim"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"itzblim"},"content":"public class Storage {","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"itzblim"},"content":"    private final File cache;","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"itzblim"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"itzblim"},"content":"     * Constructs a Storage object.","lastModifiedDate":"2021-09-01"},{"lineNumber":17,"author":{"gitId":"itzblim"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"itzblim"},"content":"     * @param filePath Path where cache is stored.","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"itzblim"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"itzblim"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"itzblim"},"content":"        cache \u003d new File(filePath);","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"itzblim"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"itzblim"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"itzblim"},"content":"     * Loads the cache and reads any previous tasks, if cache exists.","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"itzblim"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"itzblim"},"content":"     * @return TaskList with any previous tasks.","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"itzblim"},"content":"     * @throws DukeException Thrown if cache cannot load properly.","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"itzblim"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"itzblim"},"content":"    public TaskList load() throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"itzblim"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"itzblim"},"content":"        if (cache.exists()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"itzblim"},"content":"            scanCacheIntoTasks(cache, tasks);","lastModifiedDate":"2021-09-06"},{"lineNumber":34,"author":{"gitId":"itzblim"},"content":"        } else {","lastModifiedDate":"2021-09-06"},{"lineNumber":35,"author":{"gitId":"itzblim"},"content":"            createCacheDirectory(cache);","lastModifiedDate":"2021-09-06"},{"lineNumber":36,"author":{"gitId":"itzblim"},"content":"            createCacheFile(cache);","lastModifiedDate":"2021-09-06"},{"lineNumber":37,"author":{"gitId":"itzblim"},"content":"        }","lastModifiedDate":"2021-09-06"},{"lineNumber":38,"author":{"gitId":"itzblim"},"content":"        return tasks;","lastModifiedDate":"2021-09-06"},{"lineNumber":39,"author":{"gitId":"itzblim"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":40,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":41,"author":{"gitId":"itzblim"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":42,"author":{"gitId":"itzblim"},"content":"     * Scans and parses commands to edit a TaskList.","lastModifiedDate":"2021-09-06"},{"lineNumber":43,"author":{"gitId":"itzblim"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":44,"author":{"gitId":"itzblim"},"content":"     * @param scanner Source of commands.","lastModifiedDate":"2021-09-06"},{"lineNumber":45,"author":{"gitId":"itzblim"},"content":"     * @param tasks TaskList to be edited.","lastModifiedDate":"2021-09-06"},{"lineNumber":46,"author":{"gitId":"itzblim"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":47,"author":{"gitId":"itzblim"},"content":"    private void scanIntoTasks(Scanner scanner, TaskList tasks) {","lastModifiedDate":"2021-09-06"},{"lineNumber":48,"author":{"gitId":"itzblim"},"content":"        Parser parser \u003d new Parser(tasks);","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"itzblim"},"content":"        while (scanner.hasNextLine()) {","lastModifiedDate":"2021-09-06"},{"lineNumber":50,"author":{"gitId":"itzblim"},"content":"            try {","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"itzblim"},"content":"                String nextInput \u003d scanner.nextLine();","lastModifiedDate":"2021-08-30"},{"lineNumber":52,"author":{"gitId":"itzblim"},"content":"                parser.parseCommand(nextInput);","lastModifiedDate":"2021-09-01"},{"lineNumber":53,"author":{"gitId":"itzblim"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"itzblim"},"content":"                // Skip invalid statements, continue adding tasks.","lastModifiedDate":"2021-09-01"},{"lineNumber":55,"author":{"gitId":"itzblim"},"content":"                // Bad commands from previous caches are not relevant to the user.","lastModifiedDate":"2021-09-06"},{"lineNumber":56,"author":{"gitId":"itzblim"},"content":"            }","lastModifiedDate":"2021-09-06"},{"lineNumber":57,"author":{"gitId":"itzblim"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"itzblim"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":60,"author":{"gitId":"itzblim"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":61,"author":{"gitId":"itzblim"},"content":"     * Scan and parse commands from cache to edit a TaskList.","lastModifiedDate":"2021-09-06"},{"lineNumber":62,"author":{"gitId":"itzblim"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":63,"author":{"gitId":"itzblim"},"content":"     * @param cache File containing previous commands.","lastModifiedDate":"2021-09-06"},{"lineNumber":64,"author":{"gitId":"itzblim"},"content":"     * @param tasks TaskList to be edited.","lastModifiedDate":"2021-09-06"},{"lineNumber":65,"author":{"gitId":"itzblim"},"content":"     * @throws DukeException if scanner fails to load from cache.","lastModifiedDate":"2021-09-06"},{"lineNumber":66,"author":{"gitId":"itzblim"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":67,"author":{"gitId":"itzblim"},"content":"    private void scanCacheIntoTasks(File cache, TaskList tasks) throws DukeException {","lastModifiedDate":"2021-09-06"},{"lineNumber":68,"author":{"gitId":"itzblim"},"content":"        try {","lastModifiedDate":"2021-09-06"},{"lineNumber":69,"author":{"gitId":"itzblim"},"content":"            Scanner scanner \u003d new Scanner(cache);","lastModifiedDate":"2021-09-06"},{"lineNumber":70,"author":{"gitId":"itzblim"},"content":"            scanIntoTasks(scanner, tasks);","lastModifiedDate":"2021-09-06"},{"lineNumber":71,"author":{"gitId":"itzblim"},"content":"            scanner.close();","lastModifiedDate":"2021-08-30"},{"lineNumber":72,"author":{"gitId":"itzblim"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"itzblim"},"content":"            throw new DukeException(\"Could not load from cache.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"itzblim"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"itzblim"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":76,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":77,"author":{"gitId":"itzblim"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":78,"author":{"gitId":"itzblim"},"content":"     * Creates a directory for the cache, if it doesn\u0027t yet exist.","lastModifiedDate":"2021-09-06"},{"lineNumber":79,"author":{"gitId":"itzblim"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":80,"author":{"gitId":"itzblim"},"content":"     * @param cache Path where cache will be stored.","lastModifiedDate":"2021-09-06"},{"lineNumber":81,"author":{"gitId":"itzblim"},"content":"     * @throws DukeException if directory cannot be created.","lastModifiedDate":"2021-09-06"},{"lineNumber":82,"author":{"gitId":"itzblim"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":83,"author":{"gitId":"itzblim"},"content":"    private void createCacheDirectory(File cache) throws DukeException {","lastModifiedDate":"2021-09-06"},{"lineNumber":84,"author":{"gitId":"itzblim"},"content":"        File dir \u003d cache.getParentFile();","lastModifiedDate":"2021-08-25"},{"lineNumber":85,"author":{"gitId":"itzblim"},"content":"        if (!dir.exists() \u0026\u0026 !dir.mkdirs()) {","lastModifiedDate":"2021-09-06"},{"lineNumber":86,"author":{"gitId":"itzblim"},"content":"            throw new DukeException(\"Failed to create required directory.\");","lastModifiedDate":"2021-09-06"},{"lineNumber":87,"author":{"gitId":"itzblim"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":88,"author":{"gitId":"itzblim"},"content":"        assert dir.exists() : \"Directory for cache should exist after creation.\";","lastModifiedDate":"2021-09-06"},{"lineNumber":89,"author":{"gitId":"itzblim"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":90,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":91,"author":{"gitId":"itzblim"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":92,"author":{"gitId":"itzblim"},"content":"     * Create the file for the cache.","lastModifiedDate":"2021-09-06"},{"lineNumber":93,"author":{"gitId":"itzblim"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":94,"author":{"gitId":"itzblim"},"content":"     * @param cache Path where cache will be stored.","lastModifiedDate":"2021-09-06"},{"lineNumber":95,"author":{"gitId":"itzblim"},"content":"     * @throws DukeException if cache file cannot be created.","lastModifiedDate":"2021-09-06"},{"lineNumber":96,"author":{"gitId":"itzblim"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":97,"author":{"gitId":"itzblim"},"content":"    private void createCacheFile(File cache) throws DukeException {","lastModifiedDate":"2021-09-06"},{"lineNumber":98,"author":{"gitId":"itzblim"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":99,"author":{"gitId":"itzblim"},"content":"            if (!cache.createNewFile()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":100,"author":{"gitId":"itzblim"},"content":"                throw new DukeException(\"Failed to create required cache.\");","lastModifiedDate":"2021-09-06"},{"lineNumber":101,"author":{"gitId":"itzblim"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":102,"author":{"gitId":"itzblim"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":103,"author":{"gitId":"itzblim"},"content":"            throw new DukeException(\"Failed to create required cache.\");","lastModifiedDate":"2021-09-06"},{"lineNumber":104,"author":{"gitId":"itzblim"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":105,"author":{"gitId":"itzblim"},"content":"        assert cache.exists() : \"Cache file should exist after creation.\";","lastModifiedDate":"2021-09-06"},{"lineNumber":106,"author":{"gitId":"itzblim"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":107,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":108,"author":{"gitId":"itzblim"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":109,"author":{"gitId":"itzblim"},"content":"     * Write a command to the cache.","lastModifiedDate":"2021-09-06"},{"lineNumber":110,"author":{"gitId":"itzblim"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":111,"author":{"gitId":"itzblim"},"content":"     * @param command String representation of a command.","lastModifiedDate":"2021-08-25"},{"lineNumber":112,"author":{"gitId":"itzblim"},"content":"     * @throws DukeException if FileWriter fails to append to cache.","lastModifiedDate":"2021-09-06"},{"lineNumber":113,"author":{"gitId":"itzblim"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":114,"author":{"gitId":"itzblim"},"content":"    public void writeCommand(String command) throws DukeException {","lastModifiedDate":"2021-09-06"},{"lineNumber":115,"author":{"gitId":"itzblim"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":116,"author":{"gitId":"itzblim"},"content":"            FileWriter fw \u003d new FileWriter(cache, true);","lastModifiedDate":"2021-08-25"},{"lineNumber":117,"author":{"gitId":"itzblim"},"content":"            fw.write(command + \"\\n\");","lastModifiedDate":"2021-08-25"},{"lineNumber":118,"author":{"gitId":"itzblim"},"content":"            fw.close();","lastModifiedDate":"2021-08-25"},{"lineNumber":119,"author":{"gitId":"itzblim"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":120,"author":{"gitId":"itzblim"},"content":"            throw new DukeException(\"Failed to write to cache.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":121,"author":{"gitId":"itzblim"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":122,"author":{"gitId":"itzblim"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":123,"author":{"gitId":"itzblim"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"itzblim":123}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"itzblim"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"itzblim"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-06"},{"lineNumber":4,"author":{"gitId":"itzblim"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-09-06"},{"lineNumber":5,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":6,"author":{"gitId":"itzblim"},"content":"/**","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"itzblim"},"content":" * Encapsulates a task in a task list.","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"itzblim"},"content":" */","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"itzblim"},"content":"public class Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"itzblim"},"content":"    protected enum TaskType {","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"itzblim"},"content":"        todo, deadline, event","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"itzblim"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"itzblim"},"content":"    protected TaskType category;","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"itzblim"},"content":"    private final String description;","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"itzblim"},"content":"    private final LocalDate time;","lastModifiedDate":"2021-09-06"},{"lineNumber":17,"author":{"gitId":"itzblim"},"content":"    private boolean completed;","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"itzblim"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"itzblim"},"content":"     * Constructs a Task with a specified time.","lastModifiedDate":"2021-09-06"},{"lineNumber":21,"author":{"gitId":"itzblim"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"itzblim"},"content":"     * @param description String description of task.","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"itzblim"},"content":"     * @param time Time scheduled for task.","lastModifiedDate":"2021-09-06"},{"lineNumber":24,"author":{"gitId":"itzblim"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":25,"author":{"gitId":"itzblim"},"content":"    public Task(String description, LocalDate time) {","lastModifiedDate":"2021-09-06"},{"lineNumber":26,"author":{"gitId":"itzblim"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-18"},{"lineNumber":27,"author":{"gitId":"itzblim"},"content":"        this.time \u003d time;","lastModifiedDate":"2021-09-06"},{"lineNumber":28,"author":{"gitId":"itzblim"},"content":"        completed \u003d false;","lastModifiedDate":"2021-09-06"},{"lineNumber":29,"author":{"gitId":"itzblim"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":30,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":31,"author":{"gitId":"itzblim"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"itzblim"},"content":"     * Marks a task as completed.","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"itzblim"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"itzblim"},"content":"    public void setCompleted() {","lastModifiedDate":"2021-08-30"},{"lineNumber":35,"author":{"gitId":"itzblim"},"content":"        completed \u003d true;","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"itzblim"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"itzblim"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":39,"author":{"gitId":"itzblim"},"content":"     * Gets the status of a task as a checkbox.","lastModifiedDate":"2021-08-18"},{"lineNumber":40,"author":{"gitId":"itzblim"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":41,"author":{"gitId":"itzblim"},"content":"     * @return A string representing status of task.","lastModifiedDate":"2021-08-18"},{"lineNumber":42,"author":{"gitId":"itzblim"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":43,"author":{"gitId":"itzblim"},"content":"    private String getStatus() {","lastModifiedDate":"2021-08-18"},{"lineNumber":44,"author":{"gitId":"itzblim"},"content":"        return \"[\" + (completed ? \"X\" : \" \") + \"]\";","lastModifiedDate":"2021-08-18"},{"lineNumber":45,"author":{"gitId":"itzblim"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":46,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":47,"author":{"gitId":"itzblim"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":48,"author":{"gitId":"itzblim"},"content":"     * Gets a string representation of the time of the task.","lastModifiedDate":"2021-09-06"},{"lineNumber":49,"author":{"gitId":"itzblim"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":50,"author":{"gitId":"itzblim"},"content":"     * @return String representing time of task.","lastModifiedDate":"2021-09-06"},{"lineNumber":51,"author":{"gitId":"itzblim"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":52,"author":{"gitId":"itzblim"},"content":"    protected String getTimeString() {","lastModifiedDate":"2021-09-06"},{"lineNumber":53,"author":{"gitId":"itzblim"},"content":"        return time.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2021-09-06"},{"lineNumber":54,"author":{"gitId":"itzblim"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":55,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":56,"author":{"gitId":"itzblim"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":57,"author":{"gitId":"itzblim"},"content":"     * Checks if a task is scheduled for a certain date.","lastModifiedDate":"2021-09-06"},{"lineNumber":58,"author":{"gitId":"itzblim"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":59,"author":{"gitId":"itzblim"},"content":"     * @param time Date to be checked for.","lastModifiedDate":"2021-09-06"},{"lineNumber":60,"author":{"gitId":"itzblim"},"content":"     * @return Boolean describing if task is scheduled for that date.","lastModifiedDate":"2021-09-06"},{"lineNumber":61,"author":{"gitId":"itzblim"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":62,"author":{"gitId":"itzblim"},"content":"    public boolean isScheduledFor(LocalDate time) {","lastModifiedDate":"2021-09-06"},{"lineNumber":63,"author":{"gitId":"itzblim"},"content":"        return this.time.equals(time);","lastModifiedDate":"2021-09-06"},{"lineNumber":64,"author":{"gitId":"itzblim"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":65,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":66,"author":{"gitId":"itzblim"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":67,"author":{"gitId":"itzblim"},"content":"     * Returns string representation of task.","lastModifiedDate":"2021-08-30"},{"lineNumber":68,"author":{"gitId":"itzblim"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":69,"author":{"gitId":"itzblim"},"content":"     * @return String representing task.","lastModifiedDate":"2021-08-18"},{"lineNumber":70,"author":{"gitId":"itzblim"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":71,"author":{"gitId":"itzblim"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":72,"author":{"gitId":"itzblim"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":73,"author":{"gitId":"itzblim"},"content":"        return getStatus() + \" \" + description;","lastModifiedDate":"2021-08-18"},{"lineNumber":74,"author":{"gitId":"itzblim"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":75,"author":{"gitId":"itzblim"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"itzblim":75}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"itzblim"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"itzblim"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-06"},{"lineNumber":4,"author":{"gitId":"itzblim"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"itzblim"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"itzblim"},"content":" * Encapsulates a TaskList. Stores an array of tasks.","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"itzblim"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"itzblim"},"content":"public class TaskList {","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"itzblim"},"content":"    private final ArrayList\u003cTask\u003e taskArray;","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"itzblim"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"itzblim"},"content":"     * Constructs a TaskList.","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"itzblim"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"itzblim"},"content":"    public TaskList() {","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"itzblim"},"content":"        taskArray \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"itzblim"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"itzblim"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"itzblim"},"content":"     * Adds a task to the task list.","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"itzblim"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"itzblim"},"content":"     * @param t Task to be added","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"itzblim"},"content":"     * @return String notifying the task added.","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"itzblim"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"itzblim"},"content":"    public String[] addTask(Task t) {","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"itzblim"},"content":"        taskArray.add(t);","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"itzblim"},"content":"        return new String[] {","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"itzblim"},"content":"            \"Got it. I\u0027ve added this task:\",","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"itzblim"},"content":"            t.toString(),","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"itzblim"},"content":"            \"Now you have \"","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"itzblim"},"content":"                    + taskArray.size()","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"itzblim"},"content":"                    + \" tasks in the list.\"","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"itzblim"},"content":"        };","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"itzblim"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"itzblim"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"itzblim"},"content":"     * Marks a task as completed.","lastModifiedDate":"2021-08-30"},{"lineNumber":37,"author":{"gitId":"itzblim"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"itzblim"},"content":"     * @param index Numerical index of task completed.","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"itzblim"},"content":"     * @return String reporting that task is marked done.","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"itzblim"},"content":"     * @throws DukeException Thrown if index out of range.","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"itzblim"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"itzblim"},"content":"    public String[] markTask(int index) throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"itzblim"},"content":"        if (isInvalidID(index)) {","lastModifiedDate":"2021-08-30"},{"lineNumber":44,"author":{"gitId":"itzblim"},"content":"            throw new DukeException(\"Task ID out of range!\");","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"itzblim"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"itzblim"},"content":"        Task t \u003d taskArray.get(index);","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"itzblim"},"content":"        t.setCompleted();","lastModifiedDate":"2021-08-30"},{"lineNumber":48,"author":{"gitId":"itzblim"},"content":"        assert t.toString().contains(\"[X]\") : \"Task t should be marked as completed\";","lastModifiedDate":"2021-09-06"},{"lineNumber":49,"author":{"gitId":"itzblim"},"content":"        return new String[] {","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"itzblim"},"content":"            \"Nice! I\u0027ve marked this task as done:\",","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"itzblim"},"content":"            t.toString()","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"itzblim"},"content":"        };","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"itzblim"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"itzblim"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"itzblim"},"content":"     * Deletes a task from the list.","lastModifiedDate":"2021-08-30"},{"lineNumber":57,"author":{"gitId":"itzblim"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"itzblim"},"content":"     * @param index Numerical index of task to be removed","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"itzblim"},"content":"     * @return String reporting that task is removed.","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"itzblim"},"content":"     * @throws DukeException Thrown if index out of range.","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"itzblim"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"itzblim"},"content":"    public String[] deleteTask(int index) throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"itzblim"},"content":"        if (isInvalidID(index)) {","lastModifiedDate":"2021-08-30"},{"lineNumber":64,"author":{"gitId":"itzblim"},"content":"            throw new DukeException(\"Task ID out of range!\");","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"itzblim"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"itzblim"},"content":"        Task t \u003d taskArray.remove(index);","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"itzblim"},"content":"        return new String[] {","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"itzblim"},"content":"            \"Noted. I\u0027ve removed this task:\",","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"itzblim"},"content":"            t.toString(),","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"itzblim"},"content":"            \"Now you have \"","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"itzblim"},"content":"                    + taskArray.size()","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"itzblim"},"content":"                    + \" tasks in the list.\"","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"itzblim"},"content":"        };","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"itzblim"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":76,"author":{"gitId":"itzblim"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":77,"author":{"gitId":"itzblim"},"content":"     * Finds tasks which match a query.","lastModifiedDate":"2021-08-30"},{"lineNumber":78,"author":{"gitId":"itzblim"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":79,"author":{"gitId":"itzblim"},"content":"     * @param query String to check for in tasks.","lastModifiedDate":"2021-08-30"},{"lineNumber":80,"author":{"gitId":"itzblim"},"content":"     * @return An array of strings with numbered tasks.","lastModifiedDate":"2021-08-30"},{"lineNumber":81,"author":{"gitId":"itzblim"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":82,"author":{"gitId":"itzblim"},"content":"    public String[] findMatchingTasks(String query) {","lastModifiedDate":"2021-08-30"},{"lineNumber":83,"author":{"gitId":"itzblim"},"content":"        ArrayList\u003cTask\u003e matchingTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-30"},{"lineNumber":84,"author":{"gitId":"itzblim"},"content":"        for (Task task : taskArray) {","lastModifiedDate":"2021-08-31"},{"lineNumber":85,"author":{"gitId":"itzblim"},"content":"            if (task.toString().contains(query)) {","lastModifiedDate":"2021-08-31"},{"lineNumber":86,"author":{"gitId":"itzblim"},"content":"                matchingTasks.add(task);","lastModifiedDate":"2021-08-31"},{"lineNumber":87,"author":{"gitId":"itzblim"},"content":"            }","lastModifiedDate":"2021-08-30"},{"lineNumber":88,"author":{"gitId":"itzblim"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":89,"author":{"gitId":"itzblim"},"content":"        String[] taskStrings \u003d new String[matchingTasks.size() + 1];","lastModifiedDate":"2021-08-30"},{"lineNumber":90,"author":{"gitId":"itzblim"},"content":"        taskStrings[0] \u003d \"Here are the matching tasks in your list:\";","lastModifiedDate":"2021-08-30"},{"lineNumber":91,"author":{"gitId":"itzblim"},"content":"        for (int i \u003d 0; i \u003c matchingTasks.size(); i++) {","lastModifiedDate":"2021-08-30"},{"lineNumber":92,"author":{"gitId":"itzblim"},"content":"            taskStrings[i + 1] \u003d (i + 1) + \".\" + matchingTasks.get(i).toString();","lastModifiedDate":"2021-08-30"},{"lineNumber":93,"author":{"gitId":"itzblim"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":94,"author":{"gitId":"itzblim"},"content":"        return taskStrings;","lastModifiedDate":"2021-08-30"},{"lineNumber":95,"author":{"gitId":"itzblim"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":96,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":97,"author":{"gitId":"itzblim"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":98,"author":{"gitId":"itzblim"},"content":"     * Gets tasks for a given date.","lastModifiedDate":"2021-09-06"},{"lineNumber":99,"author":{"gitId":"itzblim"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":100,"author":{"gitId":"itzblim"},"content":"     * @param time Date to find tasks for.","lastModifiedDate":"2021-09-06"},{"lineNumber":101,"author":{"gitId":"itzblim"},"content":"     * @return An array of strings with matching tasks.","lastModifiedDate":"2021-09-06"},{"lineNumber":102,"author":{"gitId":"itzblim"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":103,"author":{"gitId":"itzblim"},"content":"    public String[] getSchedule(LocalDate time) {","lastModifiedDate":"2021-09-06"},{"lineNumber":104,"author":{"gitId":"itzblim"},"content":"        ArrayList\u003cTask\u003e matchingTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-06"},{"lineNumber":105,"author":{"gitId":"itzblim"},"content":"        for (Task task : taskArray) {","lastModifiedDate":"2021-09-06"},{"lineNumber":106,"author":{"gitId":"itzblim"},"content":"            if (task.isScheduledFor(time)) {","lastModifiedDate":"2021-09-06"},{"lineNumber":107,"author":{"gitId":"itzblim"},"content":"                matchingTasks.add(task);","lastModifiedDate":"2021-09-06"},{"lineNumber":108,"author":{"gitId":"itzblim"},"content":"            }","lastModifiedDate":"2021-09-06"},{"lineNumber":109,"author":{"gitId":"itzblim"},"content":"        }","lastModifiedDate":"2021-09-06"},{"lineNumber":110,"author":{"gitId":"itzblim"},"content":"        String[] taskStrings \u003d new String[matchingTasks.size() + 1];","lastModifiedDate":"2021-09-06"},{"lineNumber":111,"author":{"gitId":"itzblim"},"content":"        taskStrings[0] \u003d \"Here are tasks scheduled for this date:\";","lastModifiedDate":"2021-09-06"},{"lineNumber":112,"author":{"gitId":"itzblim"},"content":"        for (int i \u003d 0; i \u003c matchingTasks.size(); i++) {","lastModifiedDate":"2021-09-06"},{"lineNumber":113,"author":{"gitId":"itzblim"},"content":"            taskStrings[i + 1] \u003d (i + 1) + \".\" + matchingTasks.get(i).toString();","lastModifiedDate":"2021-09-06"},{"lineNumber":114,"author":{"gitId":"itzblim"},"content":"        }","lastModifiedDate":"2021-09-06"},{"lineNumber":115,"author":{"gitId":"itzblim"},"content":"        return taskStrings;","lastModifiedDate":"2021-09-06"},{"lineNumber":116,"author":{"gitId":"itzblim"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":117,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":118,"author":{"gitId":"itzblim"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":119,"author":{"gitId":"itzblim"},"content":"     * Gets an array of strings with tasks numbered.","lastModifiedDate":"2021-08-30"},{"lineNumber":120,"author":{"gitId":"itzblim"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":121,"author":{"gitId":"itzblim"},"content":"     * @return A String array with numbered tasks.","lastModifiedDate":"2021-08-25"},{"lineNumber":122,"author":{"gitId":"itzblim"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":123,"author":{"gitId":"itzblim"},"content":"    public String[] getTaskStrings() {","lastModifiedDate":"2021-08-25"},{"lineNumber":124,"author":{"gitId":"itzblim"},"content":"        String[] taskStrings \u003d new String[taskArray.size() + 1];","lastModifiedDate":"2021-08-25"},{"lineNumber":125,"author":{"gitId":"itzblim"},"content":"        taskStrings[0] \u003d \"Here are the tasks in your list:\";","lastModifiedDate":"2021-08-25"},{"lineNumber":126,"author":{"gitId":"itzblim"},"content":"        for (int i \u003d 0; i \u003c taskArray.size(); i++) {","lastModifiedDate":"2021-08-25"},{"lineNumber":127,"author":{"gitId":"itzblim"},"content":"            taskStrings[i + 1] \u003d (i + 1) + \".\" + taskArray.get(i).toString();","lastModifiedDate":"2021-08-25"},{"lineNumber":128,"author":{"gitId":"itzblim"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":129,"author":{"gitId":"itzblim"},"content":"        return taskStrings;","lastModifiedDate":"2021-08-25"},{"lineNumber":130,"author":{"gitId":"itzblim"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":131,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":132,"author":{"gitId":"itzblim"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":133,"author":{"gitId":"itzblim"},"content":"     * Checks if an ID is an invalid index for the task list.","lastModifiedDate":"2021-08-30"},{"lineNumber":134,"author":{"gitId":"itzblim"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":135,"author":{"gitId":"itzblim"},"content":"     * @param id Integer index of the task.","lastModifiedDate":"2021-08-31"},{"lineNumber":136,"author":{"gitId":"itzblim"},"content":"     * @return Boolean representing validity of ID.","lastModifiedDate":"2021-08-25"},{"lineNumber":137,"author":{"gitId":"itzblim"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":138,"author":{"gitId":"itzblim"},"content":"    private boolean isInvalidID(int id) {","lastModifiedDate":"2021-08-31"},{"lineNumber":139,"author":{"gitId":"itzblim"},"content":"        return id \u003c 0 || id \u003e\u003d taskArray.size();","lastModifiedDate":"2021-08-31"},{"lineNumber":140,"author":{"gitId":"itzblim"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":141,"author":{"gitId":"itzblim"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"itzblim":141}},{"path":"src/main/java/duke/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"itzblim"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"itzblim"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-06"},{"lineNumber":4,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":5,"author":{"gitId":"itzblim"},"content":"/**","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"itzblim"},"content":" * Class for todo tasks.","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"itzblim"},"content":" */","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"itzblim"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"itzblim"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"itzblim"},"content":"     * Constructs a todo task scheduled at the current date.","lastModifiedDate":"2021-09-06"},{"lineNumber":12,"author":{"gitId":"itzblim"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"itzblim"},"content":"     * @param description String describing the todo.","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"itzblim"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"itzblim"},"content":"    public Todo(String description) {","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"itzblim"},"content":"        super(description, LocalDate.now());","lastModifiedDate":"2021-09-06"},{"lineNumber":17,"author":{"gitId":"itzblim"},"content":"        this.category \u003d TaskType.todo;","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"itzblim"},"content":"        assert description !\u003d null : \"description should not be null\";","lastModifiedDate":"2021-09-06"},{"lineNumber":19,"author":{"gitId":"itzblim"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"itzblim"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"itzblim"},"content":"     * Gets string representation of a todo task.","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"itzblim"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":24,"author":{"gitId":"itzblim"},"content":"     * @return String describing the todo task.","lastModifiedDate":"2021-08-18"},{"lineNumber":25,"author":{"gitId":"itzblim"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":26,"author":{"gitId":"itzblim"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":27,"author":{"gitId":"itzblim"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":28,"author":{"gitId":"itzblim"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2021-08-18"},{"lineNumber":29,"author":{"gitId":"itzblim"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":30,"author":{"gitId":"itzblim"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"itzblim":30}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"itzblim"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"itzblim"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"itzblim"},"content":" * Encapsulates the user interface. Scans for input and responds to user.","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"itzblim"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"itzblim"},"content":"public class Ui {","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"itzblim"},"content":"    public static final String WELCOME_MSG \u003d \"What\u0027s up, I\u0027m duke!\";","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"itzblim"},"content":"    public static final String BYE_MSG \u003d \"Bye mate!\";","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"itzblim"},"content":"    private final TaskList tasks;","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"itzblim"},"content":"    private final Storage storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"itzblim"},"content":"    private Parser parser;","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"itzblim"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"itzblim"},"content":"     * Constructs a user interface.","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"itzblim"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"itzblim"},"content":"     * @param tasks TaskList to record tasks.","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"itzblim"},"content":"     * @param storage Storage to store tasks.","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"itzblim"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"itzblim"},"content":"    public Ui(TaskList tasks, Storage storage) {","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"itzblim"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"itzblim"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"itzblim"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"itzblim"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"itzblim"},"content":"     * Initializes the user interface.","lastModifiedDate":"2021-09-06"},{"lineNumber":27,"author":{"gitId":"itzblim"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":28,"author":{"gitId":"itzblim"},"content":"     * @return Response as string.","lastModifiedDate":"2021-09-01"},{"lineNumber":29,"author":{"gitId":"itzblim"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"itzblim"},"content":"    public String initialize() {","lastModifiedDate":"2021-09-06"},{"lineNumber":31,"author":{"gitId":"itzblim"},"content":"        parser \u003d new Parser(tasks);","lastModifiedDate":"2021-09-01"},{"lineNumber":32,"author":{"gitId":"itzblim"},"content":"        return WELCOME_MSG;","lastModifiedDate":"2021-09-01"},{"lineNumber":33,"author":{"gitId":"itzblim"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"itzblim"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":36,"author":{"gitId":"itzblim"},"content":"     * Responds to a user input.","lastModifiedDate":"2021-09-06"},{"lineNumber":37,"author":{"gitId":"itzblim"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":38,"author":{"gitId":"itzblim"},"content":"     * @param message User input.","lastModifiedDate":"2021-09-06"},{"lineNumber":39,"author":{"gitId":"itzblim"},"content":"     * @return A message formatted as a string.","lastModifiedDate":"2021-09-06"},{"lineNumber":40,"author":{"gitId":"itzblim"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":41,"author":{"gitId":"itzblim"},"content":"    public String respond(String message) {","lastModifiedDate":"2021-09-06"},{"lineNumber":42,"author":{"gitId":"itzblim"},"content":"        try {","lastModifiedDate":"2021-09-01"},{"lineNumber":43,"author":{"gitId":"itzblim"},"content":"            storage.writeCommand(message);","lastModifiedDate":"2021-09-06"},{"lineNumber":44,"author":{"gitId":"itzblim"},"content":"            return formatResponse(parser.parseCommand(message));","lastModifiedDate":"2021-09-01"},{"lineNumber":45,"author":{"gitId":"itzblim"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-09-01"},{"lineNumber":46,"author":{"gitId":"itzblim"},"content":"            return e.getMessage();","lastModifiedDate":"2021-09-01"},{"lineNumber":47,"author":{"gitId":"itzblim"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"itzblim"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"itzblim"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":51,"author":{"gitId":"itzblim"},"content":"     * Formats a response into a single string.","lastModifiedDate":"2021-09-06"},{"lineNumber":52,"author":{"gitId":"itzblim"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":53,"author":{"gitId":"itzblim"},"content":"     * @param messages Strings to be formatted.","lastModifiedDate":"2021-09-06"},{"lineNumber":54,"author":{"gitId":"itzblim"},"content":"     * @return A single string combining all messages.","lastModifiedDate":"2021-09-06"},{"lineNumber":55,"author":{"gitId":"itzblim"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":56,"author":{"gitId":"itzblim"},"content":"    private static String formatResponse(String... messages) {","lastModifiedDate":"2021-09-06"},{"lineNumber":57,"author":{"gitId":"itzblim"},"content":"        StringBuilder response \u003d new StringBuilder();","lastModifiedDate":"2021-09-06"},{"lineNumber":58,"author":{"gitId":"itzblim"},"content":"        for (int i \u003d 0; i \u003c messages.length; i++) {","lastModifiedDate":"2021-09-01"},{"lineNumber":59,"author":{"gitId":"itzblim"},"content":"            assert !messages[i].isEmpty() : \"message should not be empty\";","lastModifiedDate":"2021-09-06"},{"lineNumber":60,"author":{"gitId":"itzblim"},"content":"            response.append(messages[i]);","lastModifiedDate":"2021-09-06"},{"lineNumber":61,"author":{"gitId":"itzblim"},"content":"            if (i \u003c messages.length - 1) {","lastModifiedDate":"2021-09-01"},{"lineNumber":62,"author":{"gitId":"itzblim"},"content":"                response.append(\"\\n\");","lastModifiedDate":"2021-09-06"},{"lineNumber":63,"author":{"gitId":"itzblim"},"content":"            }","lastModifiedDate":"2021-09-01"},{"lineNumber":64,"author":{"gitId":"itzblim"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"itzblim"},"content":"        return response.toString();","lastModifiedDate":"2021-09-06"},{"lineNumber":66,"author":{"gitId":"itzblim"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"itzblim"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"itzblim"},"content":"     * Checks if a message is a terminating message.","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"itzblim"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"itzblim"},"content":"     * @param message Message string to be checked.","lastModifiedDate":"2021-09-01"},{"lineNumber":72,"author":{"gitId":"itzblim"},"content":"     * @return Boolean describing if the message is terminal.","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"itzblim"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"itzblim"},"content":"    public static boolean isByeMsg(String message) {","lastModifiedDate":"2021-09-01"},{"lineNumber":75,"author":{"gitId":"itzblim"},"content":"        return message.equals(BYE_MSG);","lastModifiedDate":"2021-09-01"},{"lineNumber":76,"author":{"gitId":"itzblim"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":77,"author":{"gitId":"itzblim"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"itzblim":77}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"itzblim"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":2,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"itzblim"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"itzblim"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"itzblim"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"itzblim"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"itzblim"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"itzblim"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"itzblim"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"itzblim"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"itzblim"},"content":"    \u003c/children\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"itzblim"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"itzblim"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"itzblim"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"itzblim"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"itzblim":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"itzblim"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":2,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"itzblim"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"itzblim"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"itzblim"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"itzblim"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"itzblim"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"itzblim"},"content":"\u003c?import javafx.scene.text.Font?\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"itzblim"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"itzblim"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"itzblim"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"itzblim"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" style\u003d\"-fx-background-color: blue;\" text\u003d\"Send\" textFill\u003d\"WHITE\"\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"itzblim"},"content":"         \u003cfont\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"itzblim"},"content":"            \u003cFont name\u003d\"System Bold\" size\u003d\"15.0\" /\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"itzblim"},"content":"         \u003c/font\u003e\u003c/Button\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":17,"author":{"gitId":"itzblim"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"itzblim"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"itzblim"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":20,"author":{"gitId":"itzblim"},"content":"            \u003c/content\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":21,"author":{"gitId":"itzblim"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":22,"author":{"gitId":"itzblim"},"content":"    \u003c/children\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":23,"author":{"gitId":"itzblim"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"itzblim":23}},{"path":"src/test/java/duke/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"itzblim"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"itzblim"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"itzblim"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-06"},{"lineNumber":6,"author":{"gitId":"itzblim"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-09-06"},{"lineNumber":7,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":8,"author":{"gitId":"itzblim"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"itzblim"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"itzblim"},"content":" * Class to test deadline objects.","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"itzblim"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"itzblim"},"content":"public class DeadlineTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"itzblim"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"itzblim"},"content":"     * Checks if completed deadlines are handled appropriately.","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"itzblim"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"itzblim"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"itzblim"},"content":"    public void completedDeadlineTest() {","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"itzblim"},"content":"        try {","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"itzblim"},"content":"            Deadline deadline \u003d new Deadline(\"completed deadline\", LocalDate.now());","lastModifiedDate":"2021-09-06"},{"lineNumber":22,"author":{"gitId":"itzblim"},"content":"            deadline.setCompleted();","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"itzblim"},"content":"            String currentDate \u003d LocalDate.now().format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2021-09-06"},{"lineNumber":24,"author":{"gitId":"itzblim"},"content":"            assertEquals(\"[D][X] completed deadline (by: \" + currentDate + \")\", deadline.toString());","lastModifiedDate":"2021-09-06"},{"lineNumber":25,"author":{"gitId":"itzblim"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"itzblim"},"content":"            System.out.println(e);","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"itzblim"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"itzblim"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"itzblim"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"itzblim"},"content":"     * Checks if incomplete deadlines are handled appropriately.","lastModifiedDate":"2021-08-30"},{"lineNumber":32,"author":{"gitId":"itzblim"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"itzblim"},"content":"    @Test","lastModifiedDate":"2021-08-30"},{"lineNumber":34,"author":{"gitId":"itzblim"},"content":"    public void incompleteDeadlineTest() {","lastModifiedDate":"2021-08-30"},{"lineNumber":35,"author":{"gitId":"itzblim"},"content":"        try {","lastModifiedDate":"2021-08-30"},{"lineNumber":36,"author":{"gitId":"itzblim"},"content":"            Deadline deadline \u003d new Deadline(\"incomplete deadline\", LocalDate.now());","lastModifiedDate":"2021-09-06"},{"lineNumber":37,"author":{"gitId":"itzblim"},"content":"            String currentDate \u003d LocalDate.now().format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2021-09-06"},{"lineNumber":38,"author":{"gitId":"itzblim"},"content":"            assertEquals(\"[D][ ] incomplete deadline (by: \" + currentDate + \")\", deadline.toString());","lastModifiedDate":"2021-09-06"},{"lineNumber":39,"author":{"gitId":"itzblim"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-30"},{"lineNumber":40,"author":{"gitId":"itzblim"},"content":"            System.out.println(e);","lastModifiedDate":"2021-08-31"},{"lineNumber":41,"author":{"gitId":"itzblim"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":42,"author":{"gitId":"itzblim"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"itzblim"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"itzblim":43}},{"path":"src/test/java/duke/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"itzblim"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"itzblim"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"itzblim"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-06"},{"lineNumber":6,"author":{"gitId":"itzblim"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-09-06"},{"lineNumber":7,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":8,"author":{"gitId":"itzblim"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"itzblim"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"itzblim"},"content":" * Class to test event objects.","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"itzblim"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"itzblim"},"content":"public class EventTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"itzblim"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"itzblim"},"content":"     * Checks if completed deadlines are handled appropriately.","lastModifiedDate":"2021-09-06"},{"lineNumber":17,"author":{"gitId":"itzblim"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"itzblim"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"itzblim"},"content":"    public void completedEventTest() {","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"itzblim"},"content":"        try {","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"itzblim"},"content":"            Event event \u003d new Event(\"completed event\", LocalDate.now());","lastModifiedDate":"2021-09-06"},{"lineNumber":22,"author":{"gitId":"itzblim"},"content":"            event.setCompleted();","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"itzblim"},"content":"            String currentDate \u003d LocalDate.now().format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2021-09-06"},{"lineNumber":24,"author":{"gitId":"itzblim"},"content":"            assertEquals(\"[E][X] completed event (at: \" + currentDate + \")\", event.toString());","lastModifiedDate":"2021-09-06"},{"lineNumber":25,"author":{"gitId":"itzblim"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"itzblim"},"content":"            System.out.println(e);","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"itzblim"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"itzblim"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"itzblim"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"itzblim"},"content":"     * Checks if incomplete deadlines are handled appropriately.","lastModifiedDate":"2021-09-06"},{"lineNumber":32,"author":{"gitId":"itzblim"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"itzblim"},"content":"    @Test","lastModifiedDate":"2021-08-30"},{"lineNumber":34,"author":{"gitId":"itzblim"},"content":"    public void incompleteEventTest() {","lastModifiedDate":"2021-08-30"},{"lineNumber":35,"author":{"gitId":"itzblim"},"content":"        try {","lastModifiedDate":"2021-08-30"},{"lineNumber":36,"author":{"gitId":"itzblim"},"content":"            Event event \u003d new Event(\"incomplete event\", LocalDate.now());","lastModifiedDate":"2021-09-06"},{"lineNumber":37,"author":{"gitId":"itzblim"},"content":"            String currentDate \u003d LocalDate.now().format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2021-09-06"},{"lineNumber":38,"author":{"gitId":"itzblim"},"content":"            assertEquals(\"[E][ ] incomplete event (at: \" + currentDate + \")\", event.toString());","lastModifiedDate":"2021-09-06"},{"lineNumber":39,"author":{"gitId":"itzblim"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-30"},{"lineNumber":40,"author":{"gitId":"itzblim"},"content":"            System.out.println(e);","lastModifiedDate":"2021-08-31"},{"lineNumber":41,"author":{"gitId":"itzblim"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":42,"author":{"gitId":"itzblim"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"itzblim"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"itzblim":43}},{"path":"src/test/java/duke/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"itzblim"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"itzblim"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"itzblim"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"itzblim"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"itzblim"},"content":" * Class to test todo objects.","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"itzblim"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"itzblim"},"content":"public class TodoTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"itzblim"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"itzblim"},"content":"     * Checks if completed todos are handled appropriately.","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"itzblim"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"itzblim"},"content":"    @Test","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"itzblim"},"content":"    public void completedTodoTest() {","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"itzblim"},"content":"        Todo todo \u003d new Todo(\"completed task\");","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"itzblim"},"content":"        todo.setCompleted();","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"itzblim"},"content":"        assertEquals(\"[T][X] completed task\", todo.toString());","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"itzblim"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"itzblim"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"itzblim"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"itzblim"},"content":"     * Checks if incomplete todos are handled appropriately.","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"itzblim"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"itzblim"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"itzblim"},"content":"    public void incompleteTodoTest() {","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"itzblim"},"content":"        Todo todo \u003d new Todo(\"incomplete task\");","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"itzblim"},"content":"        assertEquals(\"[T][ ] incomplete task\", todo.toString());","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"itzblim"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"itzblim"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"itzblim":30}}]

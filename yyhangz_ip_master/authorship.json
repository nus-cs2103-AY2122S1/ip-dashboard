[{"path":"CONTRIBUTORS.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Contributors","lastModifiedDate":"2019-07-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"-"},"content":"Display | Name | Github Profile | Homepage","lastModifiedDate":"2019-07-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---|:---:|:---:|:---:","lastModifiedDate":"2019-07-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"![](https://avatars0.githubusercontent.com/u/22460123?s\u003d100) | Jeffry Lum | [Github](https://github.com/j-lum/) | [Homepage](https://se.kasugano.moe)","lastModifiedDate":"2019-08-06"},{"lineNumber":6,"author":{"gitId":"-"},"content":"![](https://avatars0.githubusercontent.com/u/1673303?s\u003d100) | Damith C. Rajapakse | [Github](https://github.com/damithc/) | [Homepage](https://www.comp.nus.edu.sg/~damithch/)","lastModifiedDate":"2019-08-06"},{"lineNumber":7,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"# I would like to join this list. How can I help the project","lastModifiedDate":"2019-07-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"For more information, please refer to our [contributor\u0027s guide](https://oss-generic.github.io/process/).","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"yyhangz":1,"-":9}},{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Duke project template","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"yyhangz"},"content":"instructions on how to use it.","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"yyhangz"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"yyhangz"},"content":"   first)","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"yyhangz"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"yyhangz"},"content":"   in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":19,"author":{"gitId":"yyhangz"},"content":"3. After that, locate the `src/main/java/Duke.java` file, right-click it, and choose `Run Duke.main()` (if the code","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"yyhangz"},"content":"   editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"yyhangz"},"content":"   below as the output:","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"yyhangz":9,"-":20}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"yyhangz"},"content":"T | 0 | read book","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"yyhangz"},"content":"D | 1 | assignment 1 | 2021-09-23","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"E | 0 | team meeting | 2021-08-23","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"yyhangz":3}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yyhangz"},"content":"import java.time.DateTimeException;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"yyhangz"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"yyhangz"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"yyhangz"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-15"},{"lineNumber":7,"author":{"gitId":"yyhangz"},"content":"    protected LocalDate finishDate;","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":9,"author":{"gitId":"yyhangz"},"content":"    public Deadline(String taskDescription, String dateString) throws InvalidDukeCommandException {","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"yyhangz"},"content":"        super(taskDescription);","lastModifiedDate":"2021-08-15"},{"lineNumber":11,"author":{"gitId":"yyhangz"},"content":"        try {","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"yyhangz"},"content":"            int[] dateArgs \u003d Arrays.stream(dateString.split(\"-\")).mapToInt(Integer::valueOf).toArray();","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"yyhangz"},"content":"            this.finishDate \u003d LocalDate.of(dateArgs[0], dateArgs[1], dateArgs[2]);","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"yyhangz"},"content":"        } catch (NumberFormatException | DateTimeException | ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"yyhangz"},"content":"            throw new InvalidDukeCommandException(\"Deadline date has to be declared in the format yyyy-mm-dd.\");","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":18,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":19,"author":{"gitId":"yyhangz"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"yyhangz"},"content":"    public String toDukeStoreFormat() {","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"yyhangz"},"content":"        return String.format(\"D | %s | %s\", super.toDukeStoreFormat(), finishDate);","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"yyhangz"},"content":"    @Override","lastModifiedDate":"2021-08-15"},{"lineNumber":25,"author":{"gitId":"yyhangz"},"content":"    public String toString() {","lastModifiedDate":"2021-08-15"},{"lineNumber":26,"author":{"gitId":"yyhangz"},"content":"        return String.format(\"[D] %s (by: %s)\", super.toString(), this.finishDate.format(DateTimeFormatter","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"yyhangz"},"content":"                .ofPattern(\"dd MMM yyyy\")));","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":29,"author":{"gitId":"yyhangz"},"content":"}","lastModifiedDate":"2021-08-15"}],"authorContributionMap":{"yyhangz":29}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yyhangz"},"content":"import java.io.File;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"yyhangz"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"yyhangz"},"content":"import java.nio.file.Files;","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"yyhangz"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"yyhangz"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"yyhangz"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-14"},{"lineNumber":8,"author":{"gitId":"yyhangz"},"content":"import java.util.concurrent.atomic.AtomicInteger;","lastModifiedDate":"2021-08-15"},{"lineNumber":9,"author":{"gitId":"yyhangz"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-15"},{"lineNumber":10,"author":{"gitId":"yyhangz"},"content":"import java.util.List;","lastModifiedDate":"2021-08-15"},{"lineNumber":11,"author":{"gitId":"yyhangz"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-08-15"},{"lineNumber":12,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":14,"author":{"gitId":"yyhangz"},"content":"    // Constant declarations","lastModifiedDate":"2021-08-15"},{"lineNumber":15,"author":{"gitId":"yyhangz"},"content":"    private final static String LINE_BREAK \u003d \"--------------------------\\n\";","lastModifiedDate":"2021-08-15"},{"lineNumber":16,"author":{"gitId":"yyhangz"},"content":"    private final static Path DATA_PATH \u003d Paths.get(System.getProperty(\"user.dir\"), \"data/duke.txt\");","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":18,"author":{"gitId":"yyhangz"},"content":"    // Class static attributes","lastModifiedDate":"2021-08-15"},{"lineNumber":19,"author":{"gitId":"yyhangz"},"content":"    private static List\u003cTask\u003e taskList;","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"yyhangz"},"content":"    private static DukeParser dukeParser;","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":22,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-08-14"},{"lineNumber":23,"author":{"gitId":"yyhangz"},"content":"     * Wraps a string between 2 line breaks.","lastModifiedDate":"2021-08-16"},{"lineNumber":24,"author":{"gitId":"yyhangz"},"content":"     *","lastModifiedDate":"2021-08-15"},{"lineNumber":25,"author":{"gitId":"yyhangz"},"content":"     * @param s String to be wrapped.","lastModifiedDate":"2021-08-15"},{"lineNumber":26,"author":{"gitId":"yyhangz"},"content":"     * @return New string between 2 line breaks.","lastModifiedDate":"2021-08-15"},{"lineNumber":27,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-08-14"},{"lineNumber":28,"author":{"gitId":"yyhangz"},"content":"    private static String wrapBetweenLines(String s) {","lastModifiedDate":"2021-08-15"},{"lineNumber":29,"author":{"gitId":"yyhangz"},"content":"        return LINE_BREAK + s + \"\\n\" + LINE_BREAK;","lastModifiedDate":"2021-08-14"},{"lineNumber":30,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":31,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":32,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":33,"author":{"gitId":"yyhangz"},"content":"     * Prints the specified message in a standardized format.","lastModifiedDate":"2021-08-16"},{"lineNumber":34,"author":{"gitId":"yyhangz"},"content":"     *","lastModifiedDate":"2021-08-16"},{"lineNumber":35,"author":{"gitId":"yyhangz"},"content":"     * @param s The message to be printed.","lastModifiedDate":"2021-08-16"},{"lineNumber":36,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":37,"author":{"gitId":"yyhangz"},"content":"    private static void dukePrint(String s) {","lastModifiedDate":"2021-08-16"},{"lineNumber":38,"author":{"gitId":"yyhangz"},"content":"        System.out.println(wrapBetweenLines(s));","lastModifiedDate":"2021-08-16"},{"lineNumber":39,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":40,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":41,"author":{"gitId":"yyhangz"},"content":"    private static void todoHandler(String args) throws InvalidDukeCommandException {","lastModifiedDate":"2021-08-16"},{"lineNumber":42,"author":{"gitId":"yyhangz"},"content":"        if (args.equals(\"\")) {","lastModifiedDate":"2021-08-16"},{"lineNumber":43,"author":{"gitId":"yyhangz"},"content":"            throw new InvalidDukeCommandException(\"The description of a todo cannot be empty.\");","lastModifiedDate":"2021-08-16"},{"lineNumber":44,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-08-16"},{"lineNumber":45,"author":{"gitId":"yyhangz"},"content":"        taskList.add(new Todo(args));","lastModifiedDate":"2021-08-15"},{"lineNumber":46,"author":{"gitId":"yyhangz"},"content":"        String returnMessage \u003d String.format(\"Got it. I\u0027ve added this task:\\n%s\\nNow you have %d task%s in the list.\",","lastModifiedDate":"2021-08-15"},{"lineNumber":47,"author":{"gitId":"yyhangz"},"content":"                args, taskList.size(), taskList.size() \u003e 1 ? \"s\" : \"\");","lastModifiedDate":"2021-08-15"},{"lineNumber":48,"author":{"gitId":"yyhangz"},"content":"        dukePrint(returnMessage);","lastModifiedDate":"2021-08-16"},{"lineNumber":49,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":50,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":51,"author":{"gitId":"yyhangz"},"content":"    private static void eventHandler(String args) throws InvalidDukeCommandException {","lastModifiedDate":"2021-08-16"},{"lineNumber":52,"author":{"gitId":"yyhangz"},"content":"        if (args.equals(\"\")) {","lastModifiedDate":"2021-08-16"},{"lineNumber":53,"author":{"gitId":"yyhangz"},"content":"            throw new InvalidDukeCommandException(\"The description of an event cannot be empty.\");","lastModifiedDate":"2021-08-16"},{"lineNumber":54,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-08-16"},{"lineNumber":55,"author":{"gitId":"yyhangz"},"content":"        String taskDescription \u003d args.split(\" /at \")[0];","lastModifiedDate":"2021-08-15"},{"lineNumber":56,"author":{"gitId":"yyhangz"},"content":"        String eventTime;","lastModifiedDate":"2021-08-16"},{"lineNumber":57,"author":{"gitId":"yyhangz"},"content":"        try {","lastModifiedDate":"2021-08-16"},{"lineNumber":58,"author":{"gitId":"yyhangz"},"content":"            eventTime \u003d args.split(\" /at \")[1];","lastModifiedDate":"2021-08-16"},{"lineNumber":59,"author":{"gitId":"yyhangz"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-16"},{"lineNumber":60,"author":{"gitId":"yyhangz"},"content":"            throw new InvalidDukeCommandException(","lastModifiedDate":"2021-08-16"},{"lineNumber":61,"author":{"gitId":"yyhangz"},"content":"                    \"Incorrect description format. Description should follow this pattern: *description* /at *time*\");","lastModifiedDate":"2021-08-16"},{"lineNumber":62,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-08-16"},{"lineNumber":63,"author":{"gitId":"yyhangz"},"content":"        taskList.add(new Event(taskDescription, eventTime));","lastModifiedDate":"2021-08-15"},{"lineNumber":64,"author":{"gitId":"yyhangz"},"content":"        String returnMessage \u003d String.format(\"Got it. I\u0027ve added this task:\\n%s\\nNow you have %d task%s in the list.\",","lastModifiedDate":"2021-08-15"},{"lineNumber":65,"author":{"gitId":"yyhangz"},"content":"                taskDescription, taskList.size(), taskList.size() \u003e 1 ? \"s\" : \"\");","lastModifiedDate":"2021-08-15"},{"lineNumber":66,"author":{"gitId":"yyhangz"},"content":"        dukePrint(returnMessage);","lastModifiedDate":"2021-08-16"},{"lineNumber":67,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":68,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":69,"author":{"gitId":"yyhangz"},"content":"    private static void deadlineHandler(String args) throws InvalidDukeCommandException {","lastModifiedDate":"2021-08-16"},{"lineNumber":70,"author":{"gitId":"yyhangz"},"content":"        if (args.equals(\"\")) {","lastModifiedDate":"2021-08-16"},{"lineNumber":71,"author":{"gitId":"yyhangz"},"content":"            throw new InvalidDukeCommandException(\"The description of a deadline cannot be empty.\");","lastModifiedDate":"2021-08-16"},{"lineNumber":72,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-08-16"},{"lineNumber":73,"author":{"gitId":"yyhangz"},"content":"        String taskDescription \u003d args.split(\" /by \")[0];","lastModifiedDate":"2021-08-15"},{"lineNumber":74,"author":{"gitId":"yyhangz"},"content":"        String finishDate;","lastModifiedDate":"2021-08-16"},{"lineNumber":75,"author":{"gitId":"yyhangz"},"content":"        try {","lastModifiedDate":"2021-08-16"},{"lineNumber":76,"author":{"gitId":"yyhangz"},"content":"            finishDate \u003d args.split(\" /by \")[1];","lastModifiedDate":"2021-08-16"},{"lineNumber":77,"author":{"gitId":"yyhangz"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-16"},{"lineNumber":78,"author":{"gitId":"yyhangz"},"content":"            throw new InvalidDukeCommandException(","lastModifiedDate":"2021-08-16"},{"lineNumber":79,"author":{"gitId":"yyhangz"},"content":"                    \"Incorrect description format. Description should follow this pattern: *description* /by *time*\");","lastModifiedDate":"2021-08-16"},{"lineNumber":80,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-08-16"},{"lineNumber":81,"author":{"gitId":"yyhangz"},"content":"        taskList.add(new Deadline(taskDescription, finishDate));","lastModifiedDate":"2021-08-16"},{"lineNumber":82,"author":{"gitId":"yyhangz"},"content":"        String returnMessage \u003d String.format(\"Got it. I\u0027ve added this task:\\n%s\\nNow you have %d task%s in the list.\",","lastModifiedDate":"2021-08-15"},{"lineNumber":83,"author":{"gitId":"yyhangz"},"content":"                taskDescription, taskList.size(), taskList.size() \u003e 1 ? \"s\" : \"\");","lastModifiedDate":"2021-08-15"},{"lineNumber":84,"author":{"gitId":"yyhangz"},"content":"        dukePrint(returnMessage);","lastModifiedDate":"2021-08-16"},{"lineNumber":85,"author":{"gitId":"yyhangz"},"content":"        ;","lastModifiedDate":"2021-08-16"},{"lineNumber":86,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":87,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":88,"author":{"gitId":"yyhangz"},"content":"    private static void listHandler() {","lastModifiedDate":"2021-08-15"},{"lineNumber":89,"author":{"gitId":"yyhangz"},"content":"        AtomicInteger idx \u003d new AtomicInteger(1);","lastModifiedDate":"2021-08-15"},{"lineNumber":90,"author":{"gitId":"yyhangz"},"content":"        String outputList \u003d taskList.stream().map(task -\u003e Integer.toString(idx.getAndIncrement()) + \". \" + task + \"\\n\")","lastModifiedDate":"2021-08-15"},{"lineNumber":91,"author":{"gitId":"yyhangz"},"content":"                .collect(Collectors.joining());","lastModifiedDate":"2021-08-15"},{"lineNumber":92,"author":{"gitId":"yyhangz"},"content":"        // Remove last newline for prettier formatting","lastModifiedDate":"2021-08-15"},{"lineNumber":93,"author":{"gitId":"yyhangz"},"content":"        if (outputList.length() \u003e 0) {","lastModifiedDate":"2021-08-22"},{"lineNumber":94,"author":{"gitId":"yyhangz"},"content":"            outputList \u003d outputList.substring(0, outputList.length() - 1);","lastModifiedDate":"2021-08-15"},{"lineNumber":95,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":96,"author":{"gitId":"yyhangz"},"content":"        dukePrint(outputList);","lastModifiedDate":"2021-08-16"},{"lineNumber":97,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":98,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":99,"author":{"gitId":"yyhangz"},"content":"    private static void doneHandler(String args) throws InvalidDukeCommandException {","lastModifiedDate":"2021-08-16"},{"lineNumber":100,"author":{"gitId":"yyhangz"},"content":"        if (args.equals(\"\")) {","lastModifiedDate":"2021-08-16"},{"lineNumber":101,"author":{"gitId":"yyhangz"},"content":"            throw new InvalidDukeCommandException(","lastModifiedDate":"2021-08-16"},{"lineNumber":102,"author":{"gitId":"yyhangz"},"content":"                    \"The done command expects an integer argument indicating the index of a task.\");","lastModifiedDate":"2021-08-16"},{"lineNumber":103,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-08-16"},{"lineNumber":104,"author":{"gitId":"yyhangz"},"content":"        Task task;","lastModifiedDate":"2021-08-16"},{"lineNumber":105,"author":{"gitId":"yyhangz"},"content":"        try {","lastModifiedDate":"2021-08-16"},{"lineNumber":106,"author":{"gitId":"yyhangz"},"content":"            task \u003d taskList.get(Integer.valueOf(args) - 1);","lastModifiedDate":"2021-08-16"},{"lineNumber":107,"author":{"gitId":"yyhangz"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-08-16"},{"lineNumber":108,"author":{"gitId":"yyhangz"},"content":"            throw new InvalidDukeCommandException(\"Invalid argument for done command. Argument should be an integer.\");","lastModifiedDate":"2021-08-16"},{"lineNumber":109,"author":{"gitId":"yyhangz"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-16"},{"lineNumber":110,"author":{"gitId":"yyhangz"},"content":"            throw new InvalidDukeCommandException(\"Invalid integer. Integer should match the index of a task.\"","lastModifiedDate":"2021-08-16"},{"lineNumber":111,"author":{"gitId":"yyhangz"},"content":"                    + \" Run list to look at the list of tasks and their corresponding indices.\");","lastModifiedDate":"2021-08-16"},{"lineNumber":112,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-08-16"},{"lineNumber":113,"author":{"gitId":"yyhangz"},"content":"        String acknowledgementMessage \u003d \"Nice! I\u0027ve marked this task as done:\\n\";","lastModifiedDate":"2021-08-15"},{"lineNumber":114,"author":{"gitId":"yyhangz"},"content":"        task.markAsDone();","lastModifiedDate":"2021-08-15"},{"lineNumber":115,"author":{"gitId":"yyhangz"},"content":"        dukePrint(acknowledgementMessage + task);","lastModifiedDate":"2021-08-16"},{"lineNumber":116,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":117,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":118,"author":{"gitId":"yyhangz"},"content":"    private static void deleteHandler(String args) throws InvalidDukeCommandException {","lastModifiedDate":"2021-08-16"},{"lineNumber":119,"author":{"gitId":"yyhangz"},"content":"        if (args.equals(\"\")) {","lastModifiedDate":"2021-08-16"},{"lineNumber":120,"author":{"gitId":"yyhangz"},"content":"            throw new InvalidDukeCommandException(","lastModifiedDate":"2021-08-16"},{"lineNumber":121,"author":{"gitId":"yyhangz"},"content":"                    \"The delete command expects an integer argument indicating the index of a task.\");","lastModifiedDate":"2021-08-16"},{"lineNumber":122,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-08-16"},{"lineNumber":123,"author":{"gitId":"yyhangz"},"content":"        Task task;","lastModifiedDate":"2021-08-16"},{"lineNumber":124,"author":{"gitId":"yyhangz"},"content":"        try {","lastModifiedDate":"2021-08-16"},{"lineNumber":125,"author":{"gitId":"yyhangz"},"content":"            task \u003d taskList.remove(Integer.valueOf(args) - 1);","lastModifiedDate":"2021-08-16"},{"lineNumber":126,"author":{"gitId":"yyhangz"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-08-16"},{"lineNumber":127,"author":{"gitId":"yyhangz"},"content":"            throw new InvalidDukeCommandException(","lastModifiedDate":"2021-08-16"},{"lineNumber":128,"author":{"gitId":"yyhangz"},"content":"                    \"Invalid argument for delete command. Argument should be an integer.\");","lastModifiedDate":"2021-08-16"},{"lineNumber":129,"author":{"gitId":"yyhangz"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-16"},{"lineNumber":130,"author":{"gitId":"yyhangz"},"content":"            throw new InvalidDukeCommandException(\"Invalid integer. Integer should match the index of a task.\"","lastModifiedDate":"2021-08-16"},{"lineNumber":131,"author":{"gitId":"yyhangz"},"content":"                    + \" Run list to look at the list of tasks and their corresponding indices.\");","lastModifiedDate":"2021-08-16"},{"lineNumber":132,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-08-16"},{"lineNumber":133,"author":{"gitId":"yyhangz"},"content":"        String returnMessage \u003d String.format(\"Noted. I\u0027ve removed this task:\\n%s\\nNow you have %d task%s in the list.\",","lastModifiedDate":"2021-08-16"},{"lineNumber":134,"author":{"gitId":"yyhangz"},"content":"                task, taskList.size(), taskList.size() \u003e 1 ? \"s\" : \"\");","lastModifiedDate":"2021-08-16"},{"lineNumber":135,"author":{"gitId":"yyhangz"},"content":"        dukePrint(returnMessage);","lastModifiedDate":"2021-08-16"},{"lineNumber":136,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":137,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":138,"author":{"gitId":"yyhangz"},"content":"    private static void byeHandler() {","lastModifiedDate":"2021-08-15"},{"lineNumber":139,"author":{"gitId":"yyhangz"},"content":"        dukePrint(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2021-08-16"},{"lineNumber":140,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":141,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":142,"author":{"gitId":"yyhangz"},"content":"    private static void defaultHandler() throws InvalidDukeCommandException {","lastModifiedDate":"2021-08-16"},{"lineNumber":143,"author":{"gitId":"yyhangz"},"content":"        throw new InvalidDukeCommandException(\"Invalid command detected\");","lastModifiedDate":"2021-08-16"},{"lineNumber":144,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":145,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":146,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-08-15"},{"lineNumber":147,"author":{"gitId":"yyhangz"},"content":"     * Run tasks based on the corresponding commands given by the user.","lastModifiedDate":"2021-08-16"},{"lineNumber":148,"author":{"gitId":"yyhangz"},"content":"     *","lastModifiedDate":"2021-08-15"},{"lineNumber":149,"author":{"gitId":"yyhangz"},"content":"     * @param s Command input of user","lastModifiedDate":"2021-08-15"},{"lineNumber":150,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-08-15"},{"lineNumber":151,"author":{"gitId":"yyhangz"},"content":"    private static void handleInput(String s) {","lastModifiedDate":"2021-08-15"},{"lineNumber":152,"author":{"gitId":"yyhangz"},"content":"        String[] inputTokens \u003d s.split(\" \", 2);","lastModifiedDate":"2021-08-15"},{"lineNumber":153,"author":{"gitId":"yyhangz"},"content":"        String command \u003d inputTokens[0];","lastModifiedDate":"2021-08-15"},{"lineNumber":154,"author":{"gitId":"yyhangz"},"content":"        String args \u003d inputTokens.length \u003e 1 ? inputTokens[1] : \"\";","lastModifiedDate":"2021-08-15"},{"lineNumber":155,"author":{"gitId":"yyhangz"},"content":"        try {","lastModifiedDate":"2021-08-16"},{"lineNumber":156,"author":{"gitId":"yyhangz"},"content":"            switch (command) {","lastModifiedDate":"2021-08-15"},{"lineNumber":157,"author":{"gitId":"yyhangz"},"content":"            case \"done\":","lastModifiedDate":"2021-08-15"},{"lineNumber":158,"author":{"gitId":"yyhangz"},"content":"                doneHandler(args);","lastModifiedDate":"2021-08-15"},{"lineNumber":159,"author":{"gitId":"yyhangz"},"content":"                break;","lastModifiedDate":"2021-08-15"},{"lineNumber":160,"author":{"gitId":"yyhangz"},"content":"            case \"bye\":","lastModifiedDate":"2021-08-15"},{"lineNumber":161,"author":{"gitId":"yyhangz"},"content":"                byeHandler();","lastModifiedDate":"2021-08-15"},{"lineNumber":162,"author":{"gitId":"yyhangz"},"content":"                break;","lastModifiedDate":"2021-08-15"},{"lineNumber":163,"author":{"gitId":"yyhangz"},"content":"            case \"list\":","lastModifiedDate":"2021-08-15"},{"lineNumber":164,"author":{"gitId":"yyhangz"},"content":"                listHandler();","lastModifiedDate":"2021-08-15"},{"lineNumber":165,"author":{"gitId":"yyhangz"},"content":"                break;","lastModifiedDate":"2021-08-15"},{"lineNumber":166,"author":{"gitId":"yyhangz"},"content":"            case \"todo\":","lastModifiedDate":"2021-08-15"},{"lineNumber":167,"author":{"gitId":"yyhangz"},"content":"                todoHandler(args);","lastModifiedDate":"2021-08-15"},{"lineNumber":168,"author":{"gitId":"yyhangz"},"content":"                break;","lastModifiedDate":"2021-08-15"},{"lineNumber":169,"author":{"gitId":"yyhangz"},"content":"            case \"event\":","lastModifiedDate":"2021-08-15"},{"lineNumber":170,"author":{"gitId":"yyhangz"},"content":"                eventHandler(args);","lastModifiedDate":"2021-08-15"},{"lineNumber":171,"author":{"gitId":"yyhangz"},"content":"                break;","lastModifiedDate":"2021-08-15"},{"lineNumber":172,"author":{"gitId":"yyhangz"},"content":"            case \"deadline\":","lastModifiedDate":"2021-08-15"},{"lineNumber":173,"author":{"gitId":"yyhangz"},"content":"                deadlineHandler(args);","lastModifiedDate":"2021-08-15"},{"lineNumber":174,"author":{"gitId":"yyhangz"},"content":"                break;","lastModifiedDate":"2021-08-15"},{"lineNumber":175,"author":{"gitId":"yyhangz"},"content":"            case \"delete\":","lastModifiedDate":"2021-08-16"},{"lineNumber":176,"author":{"gitId":"yyhangz"},"content":"                deleteHandler(args);","lastModifiedDate":"2021-08-16"},{"lineNumber":177,"author":{"gitId":"yyhangz"},"content":"                break;","lastModifiedDate":"2021-08-16"},{"lineNumber":178,"author":{"gitId":"yyhangz"},"content":"            default:","lastModifiedDate":"2021-08-15"},{"lineNumber":179,"author":{"gitId":"yyhangz"},"content":"                defaultHandler();","lastModifiedDate":"2021-08-15"},{"lineNumber":180,"author":{"gitId":"yyhangz"},"content":"            }","lastModifiedDate":"2021-08-16"},{"lineNumber":181,"author":{"gitId":"yyhangz"},"content":"            dukeParser.writeTasksToFile(taskList);","lastModifiedDate":"2021-08-22"},{"lineNumber":182,"author":{"gitId":"yyhangz"},"content":"        } catch (InvalidDukeCommandException e) {","lastModifiedDate":"2021-08-16"},{"lineNumber":183,"author":{"gitId":"yyhangz"},"content":"            dukePrint(e.getMessage());","lastModifiedDate":"2021-08-16"},{"lineNumber":184,"author":{"gitId":"yyhangz"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-22"},{"lineNumber":185,"author":{"gitId":"yyhangz"},"content":"            System.out.println(\"Error occurred while storing tasks in data file.\");","lastModifiedDate":"2021-08-22"},{"lineNumber":186,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-08-15"},{"lineNumber":187,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":188,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":189,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-08-14"},{"lineNumber":190,"author":{"gitId":"yyhangz"},"content":"     * Prompts users to input their commands to Duke","lastModifiedDate":"2021-08-14"},{"lineNumber":191,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-08-14"},{"lineNumber":192,"author":{"gitId":"yyhangz"},"content":"    private static void promptUserCommands() {","lastModifiedDate":"2021-08-14"},{"lineNumber":193,"author":{"gitId":"yyhangz"},"content":"        String introduction \u003d \"Hello! I\u0027m Duke\\nWhat can I do for you?\";","lastModifiedDate":"2021-08-16"},{"lineNumber":194,"author":{"gitId":"yyhangz"},"content":"        dukePrint(introduction);","lastModifiedDate":"2021-08-16"},{"lineNumber":195,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":196,"author":{"gitId":"yyhangz"},"content":"        String TERMINATE_COMMAND \u003d \"bye\";","lastModifiedDate":"2021-08-14"},{"lineNumber":197,"author":{"gitId":"yyhangz"},"content":"        String userInput \u003d \"\";","lastModifiedDate":"2021-08-14"},{"lineNumber":198,"author":{"gitId":"yyhangz"},"content":"        Scanner reader \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-14"},{"lineNumber":199,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":200,"author":{"gitId":"yyhangz"},"content":"        while (true) {","lastModifiedDate":"2021-08-14"},{"lineNumber":201,"author":{"gitId":"yyhangz"},"content":"            userInput \u003d reader.nextLine();","lastModifiedDate":"2021-08-14"},{"lineNumber":202,"author":{"gitId":"yyhangz"},"content":"            handleInput(userInput);","lastModifiedDate":"2021-08-15"},{"lineNumber":203,"author":{"gitId":"yyhangz"},"content":"            if (userInput.equals(TERMINATE_COMMAND)) {","lastModifiedDate":"2021-08-14"},{"lineNumber":204,"author":{"gitId":"yyhangz"},"content":"                break;","lastModifiedDate":"2021-08-14"},{"lineNumber":205,"author":{"gitId":"yyhangz"},"content":"            }","lastModifiedDate":"2021-08-14"},{"lineNumber":206,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-08-14"},{"lineNumber":207,"author":{"gitId":"yyhangz"},"content":"        reader.close();","lastModifiedDate":"2021-08-14"},{"lineNumber":208,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":209,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":211,"author":{"gitId":"yyhangz"},"content":"        try {","lastModifiedDate":"2021-08-22"},{"lineNumber":212,"author":{"gitId":"yyhangz"},"content":"            // create storage directories and files if it does not exist","lastModifiedDate":"2021-08-22"},{"lineNumber":213,"author":{"gitId":"yyhangz"},"content":"            if (Files.notExists(DATA_PATH)) {","lastModifiedDate":"2021-08-22"},{"lineNumber":214,"author":{"gitId":"yyhangz"},"content":"                File f \u003d new File(DATA_PATH.toString());","lastModifiedDate":"2021-08-22"},{"lineNumber":215,"author":{"gitId":"yyhangz"},"content":"                f.getParentFile().mkdirs();","lastModifiedDate":"2021-08-22"},{"lineNumber":216,"author":{"gitId":"yyhangz"},"content":"                f.createNewFile();","lastModifiedDate":"2021-08-22"},{"lineNumber":217,"author":{"gitId":"yyhangz"},"content":"            }","lastModifiedDate":"2021-08-22"},{"lineNumber":218,"author":{"gitId":"yyhangz"},"content":"            dukeParser \u003d new DukeParser(DATA_PATH.toString());","lastModifiedDate":"2021-08-22"},{"lineNumber":219,"author":{"gitId":"yyhangz"},"content":"            taskList \u003d dukeParser.loadTasksFromData();","lastModifiedDate":"2021-08-22"},{"lineNumber":220,"author":{"gitId":"yyhangz"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-22"},{"lineNumber":221,"author":{"gitId":"yyhangz"},"content":"            System.out.println(\"Error occurred while handling data files. \" +","lastModifiedDate":"2021-08-22"},{"lineNumber":222,"author":{"gitId":"yyhangz"},"content":"                    \"Try re-running Duke or create Duke.txt file in the /data directory.\");","lastModifiedDate":"2021-08-22"},{"lineNumber":223,"author":{"gitId":"yyhangz"},"content":"            return;","lastModifiedDate":"2021-08-22"},{"lineNumber":224,"author":{"gitId":"yyhangz"},"content":"        } catch (InvalidDukeCommandException e) {","lastModifiedDate":"2021-08-22"},{"lineNumber":225,"author":{"gitId":"yyhangz"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2021-08-22"},{"lineNumber":226,"author":{"gitId":"yyhangz"},"content":"            return;","lastModifiedDate":"2021-08-22"},{"lineNumber":227,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":228,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":229,"author":{"gitId":"yyhangz"},"content":"        String logo \u003d \" ____        _        \\n\" + \"|  _ \\\\ _   _| | _____ \\n\" + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2021-08-15"},{"lineNumber":230,"author":{"gitId":"yyhangz"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\" + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2021-08-15"},{"lineNumber":231,"author":{"gitId":"-"},"content":"        System.out.println(\"Hello from\\n\" + logo);","lastModifiedDate":"2019-07-29"},{"lineNumber":232,"author":{"gitId":"yyhangz"},"content":"        promptUserCommands();","lastModifiedDate":"2021-08-14"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":234,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"yyhangz":229,"-":5}},{"path":"src/main/java/DukeParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yyhangz"},"content":"import java.io.File;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"yyhangz"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"yyhangz"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"yyhangz"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"yyhangz"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"yyhangz"},"content":"import java.util.List;","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"yyhangz"},"content":"public class DukeParser {","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"yyhangz"},"content":"    private final String dataPath;","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"yyhangz"},"content":"    public DukeParser(String dataPath) {","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"yyhangz"},"content":"        this.dataPath \u003d dataPath;","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"yyhangz"},"content":"    private Task parseTaskFromLine(String line) throws InvalidDukeCommandException {","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"yyhangz"},"content":"        String[] lineArgs \u003d line.split(\" \\\\| \");","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"yyhangz"},"content":"        String taskType \u003d lineArgs[0];","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"yyhangz"},"content":"        boolean isDone \u003d lineArgs[1].equals(\"1\");","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"yyhangz"},"content":"        String taskDescription \u003d lineArgs[2];","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"yyhangz"},"content":"        String date \u003d lineArgs.length \u003e 3 ? lineArgs[3] : \"\";","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"yyhangz"},"content":"        Task task;","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"yyhangz"},"content":"        switch (taskType) {","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"yyhangz"},"content":"        case \"T\":","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"yyhangz"},"content":"            task \u003d new Todo(taskDescription);","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"yyhangz"},"content":"            break;","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"yyhangz"},"content":"        case \"D\":","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"yyhangz"},"content":"            task \u003d new Deadline(taskDescription, date);","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"yyhangz"},"content":"            break;","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"yyhangz"},"content":"        case \"E\":","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"yyhangz"},"content":"            task \u003d new Event(taskDescription, date);","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"yyhangz"},"content":"            break;","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"yyhangz"},"content":"        default:","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"yyhangz"},"content":"            throw new InvalidDukeCommandException(\"Invalid data read from file while loading tasks\");","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"yyhangz"},"content":"        if (isDone) {","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"yyhangz"},"content":"            task.markAsDone();","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"yyhangz"},"content":"        return task;","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"yyhangz"},"content":"     * Returns a list of task based on the data given by specified file in the constructor.","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"yyhangz"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"yyhangz"},"content":"     * @return List of Tasks from file","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"yyhangz"},"content":"     * @throws FileNotFoundException       If source is not found","lastModifiedDate":"2021-08-22"},{"lineNumber":47,"author":{"gitId":"yyhangz"},"content":"     * @throws InvalidDukeCommandException If data from the file does not follow specifications","lastModifiedDate":"2021-08-22"},{"lineNumber":48,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":49,"author":{"gitId":"yyhangz"},"content":"    public List\u003cTask\u003e loadTasksFromData() throws FileNotFoundException, InvalidDukeCommandException {","lastModifiedDate":"2021-08-22"},{"lineNumber":50,"author":{"gitId":"yyhangz"},"content":"        File dataFile \u003d new File(dataPath);","lastModifiedDate":"2021-08-22"},{"lineNumber":51,"author":{"gitId":"yyhangz"},"content":"        Scanner scanner \u003d new Scanner(dataFile);","lastModifiedDate":"2021-08-22"},{"lineNumber":52,"author":{"gitId":"yyhangz"},"content":"        List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-22"},{"lineNumber":53,"author":{"gitId":"yyhangz"},"content":"        while (scanner.hasNext()) {","lastModifiedDate":"2021-08-22"},{"lineNumber":54,"author":{"gitId":"yyhangz"},"content":"            try {","lastModifiedDate":"2021-08-22"},{"lineNumber":55,"author":{"gitId":"yyhangz"},"content":"                Task task \u003d parseTaskFromLine(scanner.nextLine());","lastModifiedDate":"2021-08-22"},{"lineNumber":56,"author":{"gitId":"yyhangz"},"content":"                taskList.add(task);","lastModifiedDate":"2021-08-22"},{"lineNumber":57,"author":{"gitId":"yyhangz"},"content":"            } catch (InvalidDukeCommandException e) {","lastModifiedDate":"2021-08-22"},{"lineNumber":58,"author":{"gitId":"yyhangz"},"content":"                throw e;","lastModifiedDate":"2021-08-22"},{"lineNumber":59,"author":{"gitId":"yyhangz"},"content":"            }","lastModifiedDate":"2021-08-22"},{"lineNumber":60,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":61,"author":{"gitId":"yyhangz"},"content":"        return taskList;","lastModifiedDate":"2021-08-22"},{"lineNumber":62,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":63,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":64,"author":{"gitId":"yyhangz"},"content":"    public void writeTasksToFile(List\u003cTask\u003e taskList) throws IOException {","lastModifiedDate":"2021-08-22"},{"lineNumber":65,"author":{"gitId":"yyhangz"},"content":"        FileWriter fileWriter \u003d new FileWriter(dataPath);","lastModifiedDate":"2021-08-22"},{"lineNumber":66,"author":{"gitId":"yyhangz"},"content":"        StringBuilder outputBuilder \u003d new StringBuilder();","lastModifiedDate":"2021-08-22"},{"lineNumber":67,"author":{"gitId":"yyhangz"},"content":"        taskList.forEach(task -\u003e {","lastModifiedDate":"2021-08-22"},{"lineNumber":68,"author":{"gitId":"yyhangz"},"content":"            outputBuilder.append(task.toDukeStoreFormat());","lastModifiedDate":"2021-08-22"},{"lineNumber":69,"author":{"gitId":"yyhangz"},"content":"            outputBuilder.append(\"\\n\");","lastModifiedDate":"2021-08-22"},{"lineNumber":70,"author":{"gitId":"yyhangz"},"content":"        });","lastModifiedDate":"2021-08-22"},{"lineNumber":71,"author":{"gitId":"yyhangz"},"content":"        fileWriter.write(outputBuilder.toString());","lastModifiedDate":"2021-08-22"},{"lineNumber":72,"author":{"gitId":"yyhangz"},"content":"        fileWriter.close();","lastModifiedDate":"2021-08-22"},{"lineNumber":73,"author":{"gitId":"yyhangz"},"content":"        return;","lastModifiedDate":"2021-08-22"},{"lineNumber":74,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":75,"author":{"gitId":"yyhangz"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"yyhangz":75}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yyhangz"},"content":"import java.time.DateTimeException;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"yyhangz"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"yyhangz"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"yyhangz"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-15"},{"lineNumber":7,"author":{"gitId":"yyhangz"},"content":"    protected LocalDate eventTime;","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":9,"author":{"gitId":"yyhangz"},"content":"    public Event(String taskDescription, String dateString) {","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"yyhangz"},"content":"        super(taskDescription);","lastModifiedDate":"2021-08-15"},{"lineNumber":11,"author":{"gitId":"yyhangz"},"content":"        try {","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"yyhangz"},"content":"            int[] dateArgs \u003d Arrays.stream(dateString.split(\"-\")).mapToInt(Integer::valueOf).toArray();","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"yyhangz"},"content":"            this.eventTime \u003d LocalDate.of(dateArgs[0], dateArgs[1], dateArgs[2]);","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"yyhangz"},"content":"        } catch (NumberFormatException | DateTimeException | ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"yyhangz"},"content":"            throw new InvalidDukeCommandException(\"Event date has to be declared in the format yyyy-mm-dd.\");","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":18,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":19,"author":{"gitId":"yyhangz"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"yyhangz"},"content":"    public String toDukeStoreFormat() {","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"yyhangz"},"content":"        return String.format(\"E | %s | %s\", super.toDukeStoreFormat(), eventTime);","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"yyhangz"},"content":"    @Override","lastModifiedDate":"2021-08-15"},{"lineNumber":25,"author":{"gitId":"yyhangz"},"content":"    public String toString() {","lastModifiedDate":"2021-08-15"},{"lineNumber":26,"author":{"gitId":"yyhangz"},"content":"        return String.format(\"[E] %s (at: %s)\", super.toString(), this.eventTime.format(DateTimeFormatter","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"yyhangz"},"content":"                .ofPattern(\"dd MMM yyyy\")));","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":29,"author":{"gitId":"yyhangz"},"content":"}","lastModifiedDate":"2021-08-15"}],"authorContributionMap":{"yyhangz":29}},{"path":"src/main/java/InvalidDukeCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yyhangz"},"content":"public class InvalidDukeCommandException extends RuntimeException {","lastModifiedDate":"2021-08-16"},{"lineNumber":2,"author":{"gitId":"yyhangz"},"content":"    private static final String preMessage \u003d \"ERROR: \";","lastModifiedDate":"2021-08-16"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":4,"author":{"gitId":"yyhangz"},"content":"    public InvalidDukeCommandException(String message) {","lastModifiedDate":"2021-08-16"},{"lineNumber":5,"author":{"gitId":"yyhangz"},"content":"        super(preMessage + message);","lastModifiedDate":"2021-08-16"},{"lineNumber":6,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":7,"author":{"gitId":"yyhangz"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"yyhangz":7}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yyhangz"},"content":"public class Task {","lastModifiedDate":"2021-08-15"},{"lineNumber":2,"author":{"gitId":"yyhangz"},"content":"    protected final String taskDescription;","lastModifiedDate":"2021-08-16"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-15"},{"lineNumber":4,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":5,"author":{"gitId":"yyhangz"},"content":"    public Task(String taskDescription) {","lastModifiedDate":"2021-08-15"},{"lineNumber":6,"author":{"gitId":"yyhangz"},"content":"        this.taskDescription \u003d taskDescription;","lastModifiedDate":"2021-08-15"},{"lineNumber":7,"author":{"gitId":"yyhangz"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-15"},{"lineNumber":8,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":9,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":10,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-08-15"},{"lineNumber":11,"author":{"gitId":"yyhangz"},"content":"     * Indicate that this task has been completed","lastModifiedDate":"2021-08-15"},{"lineNumber":12,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-08-15"},{"lineNumber":13,"author":{"gitId":"yyhangz"},"content":"    public void markAsDone() {","lastModifiedDate":"2021-08-15"},{"lineNumber":14,"author":{"gitId":"yyhangz"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-08-15"},{"lineNumber":15,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":16,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":17,"author":{"gitId":"yyhangz"},"content":"    public String toDukeStoreFormat() {","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"yyhangz"},"content":"        return String.format(\"%s | %s\", this.isDone ? \"1\" : \"0\", this.taskDescription);","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"yyhangz"},"content":"    @Override","lastModifiedDate":"2021-08-15"},{"lineNumber":22,"author":{"gitId":"yyhangz"},"content":"    public String toString() {","lastModifiedDate":"2021-08-15"},{"lineNumber":23,"author":{"gitId":"yyhangz"},"content":"        return String.format(\"[%c] %s\", isDone ? \u0027X\u0027 : \u0027 \u0027, taskDescription);","lastModifiedDate":"2021-08-15"},{"lineNumber":24,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":25,"author":{"gitId":"yyhangz"},"content":"}","lastModifiedDate":"2021-08-15"}],"authorContributionMap":{"yyhangz":25}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yyhangz"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-08-15"},{"lineNumber":2,"author":{"gitId":"yyhangz"},"content":"    public Todo(String taskDescription) {","lastModifiedDate":"2021-08-15"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"        super(taskDescription);","lastModifiedDate":"2021-08-15"},{"lineNumber":4,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":5,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":6,"author":{"gitId":"yyhangz"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"yyhangz"},"content":"    public String toDukeStoreFormat() {","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"yyhangz"},"content":"        return String.format(\"T | %s\", super.toDukeStoreFormat());","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"yyhangz"},"content":"    @Override","lastModifiedDate":"2021-08-15"},{"lineNumber":12,"author":{"gitId":"yyhangz"},"content":"    public String toString() {","lastModifiedDate":"2021-08-15"},{"lineNumber":13,"author":{"gitId":"yyhangz"},"content":"        return String.format(\"[T] %s\", super.toString());","lastModifiedDate":"2021-08-15"},{"lineNumber":14,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":15,"author":{"gitId":"yyhangz"},"content":"}","lastModifiedDate":"2021-08-15"}],"authorContributionMap":{"yyhangz":15}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"yyhangz"},"content":"todo read book","lastModifiedDate":"2021-08-16"},{"lineNumber":2,"author":{"gitId":"yyhangz"},"content":"event team meeting /at Monday 6pm","lastModifiedDate":"2021-08-16"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"deadline assignment 1 /by Tuesday 2359","lastModifiedDate":"2021-08-16"},{"lineNumber":4,"author":{"gitId":"yyhangz"},"content":"done 2","lastModifiedDate":"2021-08-16"},{"lineNumber":5,"author":{"gitId":"yyhangz"},"content":"list","lastModifiedDate":"2021-08-16"},{"lineNumber":6,"author":{"gitId":"yyhangz"},"content":"add watch movie","lastModifiedDate":"2021-08-16"},{"lineNumber":7,"author":{"gitId":"yyhangz"},"content":"todo","lastModifiedDate":"2021-08-16"},{"lineNumber":8,"author":{"gitId":"yyhangz"},"content":"event","lastModifiedDate":"2021-08-16"},{"lineNumber":9,"author":{"gitId":"yyhangz"},"content":"event team meeting","lastModifiedDate":"2021-08-16"},{"lineNumber":10,"author":{"gitId":"yyhangz"},"content":"event team meeting /at","lastModifiedDate":"2021-08-16"},{"lineNumber":11,"author":{"gitId":"yyhangz"},"content":"deadline","lastModifiedDate":"2021-08-16"},{"lineNumber":12,"author":{"gitId":"yyhangz"},"content":"deadline assignment 1","lastModifiedDate":"2021-08-16"},{"lineNumber":13,"author":{"gitId":"yyhangz"},"content":"deadline assignment 1 /by","lastModifiedDate":"2021-08-16"},{"lineNumber":14,"author":{"gitId":"yyhangz"},"content":"done","lastModifiedDate":"2021-08-16"},{"lineNumber":15,"author":{"gitId":"yyhangz"},"content":"done -1","lastModifiedDate":"2021-08-16"},{"lineNumber":16,"author":{"gitId":"yyhangz"},"content":"done foo","lastModifiedDate":"2021-08-16"},{"lineNumber":17,"author":{"gitId":"yyhangz"},"content":"delete 1","lastModifiedDate":"2021-08-16"},{"lineNumber":18,"author":{"gitId":"yyhangz"},"content":"delete","lastModifiedDate":"2021-08-16"},{"lineNumber":19,"author":{"gitId":"yyhangz"},"content":"delete -1","lastModifiedDate":"2021-08-16"},{"lineNumber":20,"author":{"gitId":"yyhangz"},"content":"delete bar","lastModifiedDate":"2021-08-16"},{"lineNumber":21,"author":{"gitId":"yyhangz"},"content":"bye","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"yyhangz":21}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"# cd to text-ui-test if in */ip","lastModifiedDate":"2021-08-16"},{"lineNumber":4,"author":{"gitId":"yyhangz"},"content":"if [[ \"$PWD/\" \u003d */ip/ ]];","lastModifiedDate":"2021-08-16"},{"lineNumber":5,"author":{"gitId":"yyhangz"},"content":"then","lastModifiedDate":"2021-08-16"},{"lineNumber":6,"author":{"gitId":"yyhangz"},"content":"    cd text-ui-test","lastModifiedDate":"2021-08-16"},{"lineNumber":7,"author":{"gitId":"yyhangz"},"content":"fi","lastModifiedDate":"2021-08-16"},{"lineNumber":8,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"yyhangz":6,"-":38}}]

[{"path":"CONTRIBUTORS.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Contributors","lastModifiedDate":"2019-07-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"-"},"content":"Display | Name | Github Profile | Homepage","lastModifiedDate":"2019-07-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---|:---:|:---:|:---:","lastModifiedDate":"2019-07-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"![](https://avatars0.githubusercontent.com/u/22460123?s\u003d100) | Jeffry Lum | [Github](https://github.com/j-lum/) | [Homepage](https://se.kasugano.moe)","lastModifiedDate":"2019-08-06"},{"lineNumber":6,"author":{"gitId":"-"},"content":"![](https://avatars0.githubusercontent.com/u/1673303?s\u003d100) | Damith C. Rajapakse | [Github](https://github.com/damithc/) | [Homepage](https://www.comp.nus.edu.sg/~damithch/)","lastModifiedDate":"2019-08-06"},{"lineNumber":7,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"# I would like to join this list. How can I help the project","lastModifiedDate":"2019-07-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"For more information, please refer to our [contributor\u0027s guide](https://oss-generic.github.io/process/).","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"yyhangz":1,"-":9}},{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Duke project template","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"yyhangz"},"content":"instructions on how to use it.","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"yyhangz"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"yyhangz"},"content":"   first)","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"yyhangz"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"yyhangz"},"content":"   in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":19,"author":{"gitId":"yyhangz"},"content":"3. After that, locate the `src/main/java/Duke.java` file, right-click it, and choose `Run Duke.main()` (if the code","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"yyhangz"},"content":"   editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"yyhangz"},"content":"   below as the output:","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"yyhangz":9,"-":20}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    mainClassName \u003d \"seedu.duke.Duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"yyhangz"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2021-08-30"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"yyhangz":1,"-":46}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"yyhangz"},"content":"E | 1 | team meeting | 2021-09-21","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"yyhangz"},"content":"T | 1 | read book","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"D | 0 | assignment 1 | 2021-09-21","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"yyhangz"},"content":"E | 1 | party | 2021-07-04","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"yyhangz"},"content":"T | 0 | read weekly readings","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"yyhangz"},"content":"T | 0 | help","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"yyhangz":6}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yyhangz"},"content":"package duke;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"import java.time.DateTimeException;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"yyhangz"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"yyhangz"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"yyhangz"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"yyhangz"},"content":"import duke.exception.InvalidDukeCommandException;","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"yyhangz"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"yyhangz"},"content":" * A class that extends Task, that allows for information about the due date of the task to be stored as well.","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"yyhangz"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"yyhangz"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-15"},{"lineNumber":14,"author":{"gitId":"yyhangz"},"content":"    protected LocalDate finishDate;","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":16,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"yyhangz"},"content":"     * Constructs a new instance of a Deadline with the given description of the task and the string literal of the due","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"yyhangz"},"content":"     * date. If the date specified is invalid, an InvalidDukeCommandException is thrown instead.","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"yyhangz"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"yyhangz"},"content":"     * @param taskDescription a brief description of the task.","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"yyhangz"},"content":"     * @param dateString      a string literal of the due date, in the yyyy-mm-dd format.","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"yyhangz"},"content":"     * @throws InvalidDukeCommandException if the string literal dateString given does not follow the yyyy-mm-dd format.","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"yyhangz"},"content":"    public Deadline(String taskDescription, String dateString) throws InvalidDukeCommandException {","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"yyhangz"},"content":"        super(taskDescription);","lastModifiedDate":"2021-08-15"},{"lineNumber":26,"author":{"gitId":"yyhangz"},"content":"        try {","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"yyhangz"},"content":"            int[] dateArgs \u003d Arrays.stream(dateString.split(\"-\")).mapToInt(Integer::valueOf).toArray();","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"yyhangz"},"content":"            this.finishDate \u003d LocalDate.of(dateArgs[0], dateArgs[1], dateArgs[2]);","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"yyhangz"},"content":"        } catch (NumberFormatException | DateTimeException | ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"yyhangz"},"content":"            throw new InvalidDukeCommandException(\"duke.Deadline date has to be declared in the format yyyy-mm-dd.\");","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":33,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":34,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"yyhangz"},"content":"     * Returns a string that represents a serialized store format of the task that is specific to Duke.","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"yyhangz"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":37,"author":{"gitId":"yyhangz"},"content":"     * @return a string of serialized format.","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"yyhangz"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"yyhangz"},"content":"    public String toDukeStoreFormat() {","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"yyhangz"},"content":"        return String.format(\"D | %s | %s\", super.toDukeStoreFormat(), finishDate);","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"yyhangz"},"content":"     * Returns a string that shows the details of the task in a standardized format.","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"yyhangz"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":47,"author":{"gitId":"yyhangz"},"content":"     * @return a string of task details.","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"yyhangz"},"content":"    @Override","lastModifiedDate":"2021-08-15"},{"lineNumber":50,"author":{"gitId":"yyhangz"},"content":"    public String toString() {","lastModifiedDate":"2021-08-15"},{"lineNumber":51,"author":{"gitId":"yyhangz"},"content":"        return String.format(\"[D] %s (by: %s)\", super.toString(), this.finishDate.format(DateTimeFormatter","lastModifiedDate":"2021-08-23"},{"lineNumber":52,"author":{"gitId":"yyhangz"},"content":"                .ofPattern(\"dd MMM yyyy\")));","lastModifiedDate":"2021-08-23"},{"lineNumber":53,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":54,"author":{"gitId":"yyhangz"},"content":"}","lastModifiedDate":"2021-08-15"}],"authorContributionMap":{"yyhangz":54}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yyhangz"},"content":"package duke;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"yyhangz"},"content":"import java.util.Optional;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"yyhangz"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-14"},{"lineNumber":6,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":7,"author":{"gitId":"yyhangz"},"content":"import duke.exception.DukeFileSystemException;","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"yyhangz"},"content":"import duke.exception.InvalidDukeCommandException;","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"yyhangz"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"yyhangz"},"content":" * A class that provides functionalities for users to run a command-line-interface task tracker.","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"yyhangz"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":14,"author":{"gitId":"yyhangz"},"content":"    // Constant declarations","lastModifiedDate":"2021-08-15"},{"lineNumber":15,"author":{"gitId":"yyhangz"},"content":"    private final Ui ui;","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"yyhangz"},"content":"    private final DukeParser parser;","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"yyhangz"},"content":"    private Optional\u003cStorage\u003e storage;","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"yyhangz"},"content":"    private TaskList taskList;","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":20,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"yyhangz"},"content":"     * Constructs a new instance of Duke, the task manager. If the file path specified, which is used to store and load","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"yyhangz"},"content":"     * previously added tasks, is invalid, Duke will default to a new empty task list instead, and executing Duke.run","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"yyhangz"},"content":"     * () will not cache the tasks added or deleted for that particular session.","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"yyhangz"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"yyhangz"},"content":"     * @param filePath the file path to store and load previously added tasks","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"yyhangz"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"yyhangz"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"yyhangz"},"content":"        this.parser \u003d new DukeParser();","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"yyhangz"},"content":"        try {","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"yyhangz"},"content":"            this.storage \u003d Optional.of(new Storage(filePath));","lastModifiedDate":"2021-08-30"},{"lineNumber":32,"author":{"gitId":"yyhangz"},"content":"            this.taskList \u003d this.storage.map(value -\u003e new TaskList(value.load())).orElseGet(TaskList::new);","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"yyhangz"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-30"},{"lineNumber":34,"author":{"gitId":"yyhangz"},"content":"            ui.dukeShowError(\"The file path \" + filePath + \" is invalid. This session will not be stored.\");","lastModifiedDate":"2021-08-30"},{"lineNumber":35,"author":{"gitId":"yyhangz"},"content":"            this.storage \u003d Optional.empty();","lastModifiedDate":"2021-08-30"},{"lineNumber":36,"author":{"gitId":"yyhangz"},"content":"            this.taskList \u003d new TaskList();","lastModifiedDate":"2021-08-30"},{"lineNumber":37,"author":{"gitId":"yyhangz"},"content":"        } catch (DukeFileSystemException e) {","lastModifiedDate":"2021-08-30"},{"lineNumber":38,"author":{"gitId":"yyhangz"},"content":"            ui.dukePrint(e.getMessage());","lastModifiedDate":"2021-08-30"},{"lineNumber":39,"author":{"gitId":"yyhangz"},"content":"            this.taskList \u003d new TaskList();","lastModifiedDate":"2021-08-30"},{"lineNumber":40,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":41,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":42,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":43,"author":{"gitId":"yyhangz"},"content":"    private void todoHandler(String args) throws InvalidDukeCommandException {","lastModifiedDate":"2021-08-23"},{"lineNumber":44,"author":{"gitId":"yyhangz"},"content":"        if (args.equals(\"\")) {","lastModifiedDate":"2021-08-16"},{"lineNumber":45,"author":{"gitId":"yyhangz"},"content":"            throw new InvalidDukeCommandException(\"The description of a todo cannot be empty.\");","lastModifiedDate":"2021-08-16"},{"lineNumber":46,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-08-16"},{"lineNumber":47,"author":{"gitId":"yyhangz"},"content":"        taskList.appendTask(new Todo(args));","lastModifiedDate":"2021-08-23"},{"lineNumber":48,"author":{"gitId":"yyhangz"},"content":"        String returnMessage \u003d String.format(\"Got it. I\u0027ve added this task:\\n%s\\nNow you have %d task%s in the list.\",","lastModifiedDate":"2021-08-15"},{"lineNumber":49,"author":{"gitId":"yyhangz"},"content":"                args, taskList.size(), taskList.size() \u003e 1 ? \"s\" : \"\");","lastModifiedDate":"2021-08-15"},{"lineNumber":50,"author":{"gitId":"yyhangz"},"content":"        ui.dukePrint(returnMessage);","lastModifiedDate":"2021-08-23"},{"lineNumber":51,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":52,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":53,"author":{"gitId":"yyhangz"},"content":"    private void eventHandler(String args) throws InvalidDukeCommandException {","lastModifiedDate":"2021-08-23"},{"lineNumber":54,"author":{"gitId":"yyhangz"},"content":"        if (args.equals(\"\")) {","lastModifiedDate":"2021-08-16"},{"lineNumber":55,"author":{"gitId":"yyhangz"},"content":"            throw new InvalidDukeCommandException(\"The description of an event cannot be empty.\");","lastModifiedDate":"2021-08-16"},{"lineNumber":56,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-08-16"},{"lineNumber":57,"author":{"gitId":"yyhangz"},"content":"        String taskDescription \u003d args.split(\" /at \")[0];","lastModifiedDate":"2021-08-15"},{"lineNumber":58,"author":{"gitId":"yyhangz"},"content":"        String eventTime;","lastModifiedDate":"2021-08-16"},{"lineNumber":59,"author":{"gitId":"yyhangz"},"content":"        try {","lastModifiedDate":"2021-08-16"},{"lineNumber":60,"author":{"gitId":"yyhangz"},"content":"            eventTime \u003d args.split(\" /at \")[1];","lastModifiedDate":"2021-08-16"},{"lineNumber":61,"author":{"gitId":"yyhangz"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-16"},{"lineNumber":62,"author":{"gitId":"yyhangz"},"content":"            throw new InvalidDukeCommandException(","lastModifiedDate":"2021-08-16"},{"lineNumber":63,"author":{"gitId":"yyhangz"},"content":"                    \"Incorrect description format. Description should follow this pattern: *description* /at *time*\");","lastModifiedDate":"2021-08-16"},{"lineNumber":64,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-08-16"},{"lineNumber":65,"author":{"gitId":"yyhangz"},"content":"        taskList.appendTask(new Event(taskDescription, eventTime));","lastModifiedDate":"2021-08-23"},{"lineNumber":66,"author":{"gitId":"yyhangz"},"content":"        String returnMessage \u003d String.format(\"Got it. I\u0027ve added this task:\\n%s\\nNow you have %d task%s in the list.\",","lastModifiedDate":"2021-08-15"},{"lineNumber":67,"author":{"gitId":"yyhangz"},"content":"                taskDescription, taskList.size(), taskList.size() \u003e 1 ? \"s\" : \"\");","lastModifiedDate":"2021-08-15"},{"lineNumber":68,"author":{"gitId":"yyhangz"},"content":"        ui.dukePrint(returnMessage);","lastModifiedDate":"2021-08-23"},{"lineNumber":69,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":70,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":71,"author":{"gitId":"yyhangz"},"content":"    private void deadlineHandler(String args) throws InvalidDukeCommandException {","lastModifiedDate":"2021-08-23"},{"lineNumber":72,"author":{"gitId":"yyhangz"},"content":"        if (args.equals(\"\")) {","lastModifiedDate":"2021-08-16"},{"lineNumber":73,"author":{"gitId":"yyhangz"},"content":"            throw new InvalidDukeCommandException(\"The description of a deadline cannot be empty.\");","lastModifiedDate":"2021-08-16"},{"lineNumber":74,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-08-16"},{"lineNumber":75,"author":{"gitId":"yyhangz"},"content":"        String taskDescription \u003d args.split(\" /by \")[0];","lastModifiedDate":"2021-08-15"},{"lineNumber":76,"author":{"gitId":"yyhangz"},"content":"        String finishDate;","lastModifiedDate":"2021-08-16"},{"lineNumber":77,"author":{"gitId":"yyhangz"},"content":"        try {","lastModifiedDate":"2021-08-16"},{"lineNumber":78,"author":{"gitId":"yyhangz"},"content":"            finishDate \u003d args.split(\" /by \")[1];","lastModifiedDate":"2021-08-16"},{"lineNumber":79,"author":{"gitId":"yyhangz"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-16"},{"lineNumber":80,"author":{"gitId":"yyhangz"},"content":"            throw new InvalidDukeCommandException(","lastModifiedDate":"2021-08-16"},{"lineNumber":81,"author":{"gitId":"yyhangz"},"content":"                    \"Incorrect description format. Description should follow this pattern: *description* /by *time*\");","lastModifiedDate":"2021-08-16"},{"lineNumber":82,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-08-16"},{"lineNumber":83,"author":{"gitId":"yyhangz"},"content":"        taskList.appendTask(new Deadline(taskDescription, finishDate));","lastModifiedDate":"2021-08-23"},{"lineNumber":84,"author":{"gitId":"yyhangz"},"content":"        String returnMessage \u003d String.format(\"Got it. I\u0027ve added this task:\\n%s\\nNow you have %d task%s in the list.\",","lastModifiedDate":"2021-08-15"},{"lineNumber":85,"author":{"gitId":"yyhangz"},"content":"                taskDescription, taskList.size(), taskList.size() \u003e 1 ? \"s\" : \"\");","lastModifiedDate":"2021-08-15"},{"lineNumber":86,"author":{"gitId":"yyhangz"},"content":"        ui.dukePrint(returnMessage);","lastModifiedDate":"2021-08-23"},{"lineNumber":87,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":88,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":89,"author":{"gitId":"yyhangz"},"content":"    private void listHandler() {","lastModifiedDate":"2021-08-23"},{"lineNumber":90,"author":{"gitId":"yyhangz"},"content":"        ui.dukePrint(taskList.toString());","lastModifiedDate":"2021-08-23"},{"lineNumber":91,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":92,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":93,"author":{"gitId":"yyhangz"},"content":"    private void doneHandler(String args) throws InvalidDukeCommandException {","lastModifiedDate":"2021-08-23"},{"lineNumber":94,"author":{"gitId":"yyhangz"},"content":"        if (args.equals(\"\")) {","lastModifiedDate":"2021-08-16"},{"lineNumber":95,"author":{"gitId":"yyhangz"},"content":"            throw new InvalidDukeCommandException(","lastModifiedDate":"2021-08-16"},{"lineNumber":96,"author":{"gitId":"yyhangz"},"content":"                    \"The done command expects an integer argument indicating the index of a task.\");","lastModifiedDate":"2021-08-16"},{"lineNumber":97,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-08-16"},{"lineNumber":98,"author":{"gitId":"yyhangz"},"content":"        Task task;","lastModifiedDate":"2021-08-16"},{"lineNumber":99,"author":{"gitId":"yyhangz"},"content":"        try {","lastModifiedDate":"2021-08-16"},{"lineNumber":100,"author":{"gitId":"yyhangz"},"content":"            task \u003d taskList.getTask(Integer.parseInt(args));","lastModifiedDate":"2021-08-23"},{"lineNumber":101,"author":{"gitId":"yyhangz"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-08-16"},{"lineNumber":102,"author":{"gitId":"yyhangz"},"content":"            throw new InvalidDukeCommandException(\"Invalid argument for done command. Argument should be an integer.\");","lastModifiedDate":"2021-08-16"},{"lineNumber":103,"author":{"gitId":"yyhangz"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-16"},{"lineNumber":104,"author":{"gitId":"yyhangz"},"content":"            throw new InvalidDukeCommandException(\"Invalid integer. Integer should match the index of a task.\"","lastModifiedDate":"2021-08-16"},{"lineNumber":105,"author":{"gitId":"yyhangz"},"content":"                    + \" Run list to look at the list of tasks and their corresponding indices.\");","lastModifiedDate":"2021-08-16"},{"lineNumber":106,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-08-16"},{"lineNumber":107,"author":{"gitId":"yyhangz"},"content":"        String acknowledgementMessage \u003d \"Nice! I\u0027ve marked this task as done:\\n\";","lastModifiedDate":"2021-08-15"},{"lineNumber":108,"author":{"gitId":"yyhangz"},"content":"        task.markAsDone();","lastModifiedDate":"2021-08-15"},{"lineNumber":109,"author":{"gitId":"yyhangz"},"content":"        ui.dukePrint(acknowledgementMessage + task);","lastModifiedDate":"2021-08-23"},{"lineNumber":110,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":111,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":112,"author":{"gitId":"yyhangz"},"content":"    private void deleteHandler(String args) throws InvalidDukeCommandException {","lastModifiedDate":"2021-08-23"},{"lineNumber":113,"author":{"gitId":"yyhangz"},"content":"        if (args.equals(\"\")) {","lastModifiedDate":"2021-08-16"},{"lineNumber":114,"author":{"gitId":"yyhangz"},"content":"            throw new InvalidDukeCommandException(","lastModifiedDate":"2021-08-16"},{"lineNumber":115,"author":{"gitId":"yyhangz"},"content":"                    \"The delete command expects an integer argument indicating the index of a task.\");","lastModifiedDate":"2021-08-16"},{"lineNumber":116,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-08-16"},{"lineNumber":117,"author":{"gitId":"yyhangz"},"content":"        Task task;","lastModifiedDate":"2021-08-16"},{"lineNumber":118,"author":{"gitId":"yyhangz"},"content":"        try {","lastModifiedDate":"2021-08-16"},{"lineNumber":119,"author":{"gitId":"yyhangz"},"content":"            task \u003d taskList.deleteTask(Integer.parseInt(args));","lastModifiedDate":"2021-08-23"},{"lineNumber":120,"author":{"gitId":"yyhangz"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-08-16"},{"lineNumber":121,"author":{"gitId":"yyhangz"},"content":"            throw new InvalidDukeCommandException(","lastModifiedDate":"2021-08-16"},{"lineNumber":122,"author":{"gitId":"yyhangz"},"content":"                    \"Invalid argument for delete command. Argument should be an integer.\");","lastModifiedDate":"2021-08-16"},{"lineNumber":123,"author":{"gitId":"yyhangz"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-16"},{"lineNumber":124,"author":{"gitId":"yyhangz"},"content":"            throw new InvalidDukeCommandException(\"Invalid integer. Integer should match the index of a task.\"","lastModifiedDate":"2021-08-16"},{"lineNumber":125,"author":{"gitId":"yyhangz"},"content":"                    + \" Run list to look at the list of tasks and their corresponding indices.\");","lastModifiedDate":"2021-08-16"},{"lineNumber":126,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-08-16"},{"lineNumber":127,"author":{"gitId":"yyhangz"},"content":"        String returnMessage \u003d String.format(\"Noted. I\u0027ve removed this task:\\n%s\\nNow you have %d task%s in the list.\",","lastModifiedDate":"2021-08-16"},{"lineNumber":128,"author":{"gitId":"yyhangz"},"content":"                task, taskList.size(), taskList.size() \u003e 1 ? \"s\" : \"\");","lastModifiedDate":"2021-08-16"},{"lineNumber":129,"author":{"gitId":"yyhangz"},"content":"        ui.dukePrint(returnMessage);","lastModifiedDate":"2021-08-23"},{"lineNumber":130,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":131,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":132,"author":{"gitId":"yyhangz"},"content":"    private void findHandler(String args) {","lastModifiedDate":"2021-08-25"},{"lineNumber":133,"author":{"gitId":"yyhangz"},"content":"        TaskList filteredList \u003d this.taskList.findTasks(args);","lastModifiedDate":"2021-08-25"},{"lineNumber":134,"author":{"gitId":"yyhangz"},"content":"        if (filteredList.size() \u003e 0) {","lastModifiedDate":"2021-08-25"},{"lineNumber":135,"author":{"gitId":"yyhangz"},"content":"            this.ui.dukePrint(\"Here are the matching tasks in your list:\\n\" + filteredList);","lastModifiedDate":"2021-08-25"},{"lineNumber":136,"author":{"gitId":"yyhangz"},"content":"        } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":137,"author":{"gitId":"yyhangz"},"content":"            this.ui.dukePrint((\"We did not find any tasks that matched your query pattern.\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":138,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":139,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":140,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":141,"author":{"gitId":"yyhangz"},"content":"    private void byeHandler() {","lastModifiedDate":"2021-08-23"},{"lineNumber":142,"author":{"gitId":"yyhangz"},"content":"        ui.dukePrint(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2021-08-23"},{"lineNumber":143,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":144,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":145,"author":{"gitId":"yyhangz"},"content":"    private void defaultHandler() throws InvalidDukeCommandException {","lastModifiedDate":"2021-08-23"},{"lineNumber":146,"author":{"gitId":"yyhangz"},"content":"        throw new InvalidDukeCommandException(\"Invalid command detected\");","lastModifiedDate":"2021-08-16"},{"lineNumber":147,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":148,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":149,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-08-15"},{"lineNumber":150,"author":{"gitId":"yyhangz"},"content":"     * Designates the job to the appropriate handler based on the duke command and args","lastModifiedDate":"2021-08-23"},{"lineNumber":151,"author":{"gitId":"yyhangz"},"content":"     *","lastModifiedDate":"2021-08-15"},{"lineNumber":152,"author":{"gitId":"yyhangz"},"content":"     * @param command     the Duke command read by the parser.","lastModifiedDate":"2021-08-25"},{"lineNumber":153,"author":{"gitId":"yyhangz"},"content":"     * @param argsLiteral the arguments read by the parser.","lastModifiedDate":"2021-08-23"},{"lineNumber":154,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-08-15"},{"lineNumber":155,"author":{"gitId":"yyhangz"},"content":"    private void handleInput(DukeCommand command, String argsLiteral) {","lastModifiedDate":"2021-08-23"},{"lineNumber":156,"author":{"gitId":"yyhangz"},"content":"        try {","lastModifiedDate":"2021-08-16"},{"lineNumber":157,"author":{"gitId":"yyhangz"},"content":"            switch (command) {","lastModifiedDate":"2021-08-15"},{"lineNumber":158,"author":{"gitId":"yyhangz"},"content":"            case FIND:","lastModifiedDate":"2021-08-25"},{"lineNumber":159,"author":{"gitId":"yyhangz"},"content":"                findHandler(argsLiteral);","lastModifiedDate":"2021-08-25"},{"lineNumber":160,"author":{"gitId":"yyhangz"},"content":"                break;","lastModifiedDate":"2021-08-25"},{"lineNumber":161,"author":{"gitId":"yyhangz"},"content":"            case DONE:","lastModifiedDate":"2021-08-23"},{"lineNumber":162,"author":{"gitId":"yyhangz"},"content":"                doneHandler(argsLiteral);","lastModifiedDate":"2021-08-23"},{"lineNumber":163,"author":{"gitId":"yyhangz"},"content":"                break;","lastModifiedDate":"2021-08-15"},{"lineNumber":164,"author":{"gitId":"yyhangz"},"content":"            case BYE:","lastModifiedDate":"2021-08-23"},{"lineNumber":165,"author":{"gitId":"yyhangz"},"content":"                byeHandler();","lastModifiedDate":"2021-08-15"},{"lineNumber":166,"author":{"gitId":"yyhangz"},"content":"                break;","lastModifiedDate":"2021-08-15"},{"lineNumber":167,"author":{"gitId":"yyhangz"},"content":"            case LIST:","lastModifiedDate":"2021-08-23"},{"lineNumber":168,"author":{"gitId":"yyhangz"},"content":"                listHandler();","lastModifiedDate":"2021-08-15"},{"lineNumber":169,"author":{"gitId":"yyhangz"},"content":"                break;","lastModifiedDate":"2021-08-15"},{"lineNumber":170,"author":{"gitId":"yyhangz"},"content":"            case TODO:","lastModifiedDate":"2021-08-23"},{"lineNumber":171,"author":{"gitId":"yyhangz"},"content":"                todoHandler(argsLiteral);","lastModifiedDate":"2021-08-23"},{"lineNumber":172,"author":{"gitId":"yyhangz"},"content":"                break;","lastModifiedDate":"2021-08-15"},{"lineNumber":173,"author":{"gitId":"yyhangz"},"content":"            case EVENT:","lastModifiedDate":"2021-08-23"},{"lineNumber":174,"author":{"gitId":"yyhangz"},"content":"                eventHandler(argsLiteral);","lastModifiedDate":"2021-08-23"},{"lineNumber":175,"author":{"gitId":"yyhangz"},"content":"                break;","lastModifiedDate":"2021-08-15"},{"lineNumber":176,"author":{"gitId":"yyhangz"},"content":"            case DEADLINE:","lastModifiedDate":"2021-08-23"},{"lineNumber":177,"author":{"gitId":"yyhangz"},"content":"                deadlineHandler(argsLiteral);","lastModifiedDate":"2021-08-23"},{"lineNumber":178,"author":{"gitId":"yyhangz"},"content":"                break;","lastModifiedDate":"2021-08-15"},{"lineNumber":179,"author":{"gitId":"yyhangz"},"content":"            case DELETE:","lastModifiedDate":"2021-08-23"},{"lineNumber":180,"author":{"gitId":"yyhangz"},"content":"                deleteHandler(argsLiteral);","lastModifiedDate":"2021-08-23"},{"lineNumber":181,"author":{"gitId":"yyhangz"},"content":"                break;","lastModifiedDate":"2021-08-16"},{"lineNumber":182,"author":{"gitId":"yyhangz"},"content":"            case INVALID:","lastModifiedDate":"2021-08-23"},{"lineNumber":183,"author":{"gitId":"yyhangz"},"content":"                defaultHandler();","lastModifiedDate":"2021-08-30"},{"lineNumber":184,"author":{"gitId":"yyhangz"},"content":"                break;","lastModifiedDate":"2021-08-30"},{"lineNumber":185,"author":{"gitId":"yyhangz"},"content":"            default:","lastModifiedDate":"2021-08-30"},{"lineNumber":186,"author":{"gitId":"yyhangz"},"content":"                defaultHandler();","lastModifiedDate":"2021-08-15"},{"lineNumber":187,"author":{"gitId":"yyhangz"},"content":"                // Fallthrough","lastModifiedDate":"2021-08-25"},{"lineNumber":188,"author":{"gitId":"yyhangz"},"content":"            }","lastModifiedDate":"2021-08-16"},{"lineNumber":189,"author":{"gitId":"yyhangz"},"content":"            if (storage.isPresent()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":190,"author":{"gitId":"yyhangz"},"content":"                storage.get().writeTasksToFile(this.taskList);","lastModifiedDate":"2021-08-23"},{"lineNumber":191,"author":{"gitId":"yyhangz"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":192,"author":{"gitId":"yyhangz"},"content":"        } catch (InvalidDukeCommandException e) {","lastModifiedDate":"2021-08-16"},{"lineNumber":193,"author":{"gitId":"yyhangz"},"content":"            ui.dukePrint(e.getMessage());","lastModifiedDate":"2021-08-23"},{"lineNumber":194,"author":{"gitId":"yyhangz"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-22"},{"lineNumber":195,"author":{"gitId":"yyhangz"},"content":"            ui.dukeShowError(\"Error occurred while storing tasks in data file.\");","lastModifiedDate":"2021-08-23"},{"lineNumber":196,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-08-15"},{"lineNumber":197,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":198,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":199,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-08-14"},{"lineNumber":200,"author":{"gitId":"yyhangz"},"content":"     * Prompts users to input their commands to Duke","lastModifiedDate":"2021-08-25"},{"lineNumber":201,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-08-14"},{"lineNumber":202,"author":{"gitId":"yyhangz"},"content":"    private void promptUserCommands() {","lastModifiedDate":"2021-08-23"},{"lineNumber":203,"author":{"gitId":"yyhangz"},"content":"        String introduction \u003d \"Hello! I\u0027m Duke\\nWhat can I do for you?\";","lastModifiedDate":"2021-08-25"},{"lineNumber":204,"author":{"gitId":"yyhangz"},"content":"        ui.dukePrint(introduction);","lastModifiedDate":"2021-08-23"},{"lineNumber":205,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":206,"author":{"gitId":"yyhangz"},"content":"        String userInput;","lastModifiedDate":"2021-08-23"},{"lineNumber":207,"author":{"gitId":"yyhangz"},"content":"        Scanner reader \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-14"},{"lineNumber":208,"author":{"gitId":"yyhangz"},"content":"        while (true) {","lastModifiedDate":"2021-08-14"},{"lineNumber":209,"author":{"gitId":"yyhangz"},"content":"            userInput \u003d reader.nextLine();","lastModifiedDate":"2021-08-14"},{"lineNumber":210,"author":{"gitId":"yyhangz"},"content":"            DukeCommand command \u003d parser.getCommandType(userInput);","lastModifiedDate":"2021-08-23"},{"lineNumber":211,"author":{"gitId":"yyhangz"},"content":"            String argsLiteral \u003d parser.getArgsLiteral(userInput);","lastModifiedDate":"2021-08-23"},{"lineNumber":212,"author":{"gitId":"yyhangz"},"content":"            handleInput(command, argsLiteral);","lastModifiedDate":"2021-08-23"},{"lineNumber":213,"author":{"gitId":"yyhangz"},"content":"            if (command \u003d\u003d DukeCommand.BYE) {","lastModifiedDate":"2021-08-23"},{"lineNumber":214,"author":{"gitId":"yyhangz"},"content":"                break;","lastModifiedDate":"2021-08-14"},{"lineNumber":215,"author":{"gitId":"yyhangz"},"content":"            }","lastModifiedDate":"2021-08-14"},{"lineNumber":216,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-08-14"},{"lineNumber":217,"author":{"gitId":"yyhangz"},"content":"        reader.close();","lastModifiedDate":"2021-08-14"},{"lineNumber":218,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":219,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":220,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":221,"author":{"gitId":"yyhangz"},"content":"     * Starts the execution of a new session of the Duke task manager CLI.","lastModifiedDate":"2021-08-25"},{"lineNumber":222,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":223,"author":{"gitId":"yyhangz"},"content":"    public void run() {","lastModifiedDate":"2021-08-23"},{"lineNumber":224,"author":{"gitId":"yyhangz"},"content":"        String logo \u003d \" ____        _        \\n\" + \"|  _ \\\\ _   _| | _____ \\n\" + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2021-08-15"},{"lineNumber":225,"author":{"gitId":"yyhangz"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\" + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2021-08-15"},{"lineNumber":226,"author":{"gitId":"-"},"content":"        System.out.println(\"Hello from\\n\" + logo);","lastModifiedDate":"2019-07-29"},{"lineNumber":227,"author":{"gitId":"yyhangz"},"content":"        promptUserCommands();","lastModifiedDate":"2021-08-14"},{"lineNumber":228,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":229,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":230,"author":{"gitId":"yyhangz"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-23"},{"lineNumber":231,"author":{"gitId":"yyhangz"},"content":"        new Duke(\"data/duke.txt\").run();","lastModifiedDate":"2021-08-23"},{"lineNumber":232,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"yyhangz":229,"-":4}},{"path":"src/main/java/duke/DukeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yyhangz"},"content":"package duke;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"yyhangz"},"content":" * A enum of the various Duke commands that are handled by Duke.","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"yyhangz"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"yyhangz"},"content":"public enum DukeCommand {","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"yyhangz"},"content":"    BYE, LIST, DONE, DELETE, TODO, DEADLINE, EVENT, INVALID, FIND","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"yyhangz"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"yyhangz":8}},{"path":"src/main/java/duke/DukeParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yyhangz"},"content":"package duke;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"import duke.exception.DukeFileSystemException;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"yyhangz"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"yyhangz"},"content":" * A class that handles anything related to the parsing of information for Duke.","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"yyhangz"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"yyhangz"},"content":"public class DukeParser {","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"yyhangz"},"content":"     * Constructs a new instance of the DukeParser. No arguments are expected.","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"yyhangz"},"content":"    public DukeParser() {","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"yyhangz"},"content":"     * Provides a task based on data read from line.","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"yyhangz"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"yyhangz"},"content":"     * @param line line that data is read from.","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"yyhangz"},"content":"     * @return a task matching the information from the line of data.","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"yyhangz"},"content":"     * @throws DukeFileSystemException if the line provided does not conform to the Duke storing format.","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"yyhangz"},"content":"    public Task parseTaskFromLine(String line) throws DukeFileSystemException {","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"yyhangz"},"content":"        String[] lineArgs \u003d line.split(\" \\\\| \");","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"yyhangz"},"content":"        String taskType \u003d lineArgs[0];","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"yyhangz"},"content":"        boolean isDone \u003d lineArgs[1].equals(\"1\");","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"yyhangz"},"content":"        String taskDescription \u003d lineArgs[2];","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"yyhangz"},"content":"        String date \u003d lineArgs.length \u003e 3 ? lineArgs[3] : \"\";","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"yyhangz"},"content":"        Task task;","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"yyhangz"},"content":"        switch (taskType) {","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"yyhangz"},"content":"        case \"T\":","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"yyhangz"},"content":"            task \u003d new Todo(taskDescription);","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"yyhangz"},"content":"            break;","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"yyhangz"},"content":"        case \"D\":","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"yyhangz"},"content":"            task \u003d new Deadline(taskDescription, date);","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"yyhangz"},"content":"            break;","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"yyhangz"},"content":"        case \"E\":","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"yyhangz"},"content":"            task \u003d new Event(taskDescription, date);","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"yyhangz"},"content":"            break;","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"yyhangz"},"content":"        default:","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"yyhangz"},"content":"            throw new DukeFileSystemException(\"Invalid data read from file while loading tasks. A new list will \"","lastModifiedDate":"2021-08-30"},{"lineNumber":42,"author":{"gitId":"yyhangz"},"content":"                    + \"be used for this session.\");","lastModifiedDate":"2021-08-30"},{"lineNumber":43,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"yyhangz"},"content":"        if (isDone) {","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"yyhangz"},"content":"            task.markAsDone();","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":47,"author":{"gitId":"yyhangz"},"content":"        return task;","lastModifiedDate":"2021-08-22"},{"lineNumber":48,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":49,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":50,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":51,"author":{"gitId":"yyhangz"},"content":"     * Gets the type of Duke command of a given input string.","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"yyhangz"},"content":"     * The Duke command of an input string is given by the first argument provided in the string.","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"yyhangz"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":54,"author":{"gitId":"yyhangz"},"content":"     * @param inputString the string literal of the input.","lastModifiedDate":"2021-08-23"},{"lineNumber":55,"author":{"gitId":"yyhangz"},"content":"     * @return a corresponding Duke command type based on the input string.","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":57,"author":{"gitId":"yyhangz"},"content":"    public DukeCommand getCommandType(String inputString) {","lastModifiedDate":"2021-08-23"},{"lineNumber":58,"author":{"gitId":"yyhangz"},"content":"        DukeCommand inputCommand;","lastModifiedDate":"2021-08-23"},{"lineNumber":59,"author":{"gitId":"yyhangz"},"content":"        String command \u003d inputString.split(\" \", 2)[0];","lastModifiedDate":"2021-08-23"},{"lineNumber":60,"author":{"gitId":"yyhangz"},"content":"        switch (command) {","lastModifiedDate":"2021-08-23"},{"lineNumber":61,"author":{"gitId":"yyhangz"},"content":"        case \"find\":","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"yyhangz"},"content":"            inputCommand \u003d DukeCommand.FIND;","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"yyhangz"},"content":"            break;","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"yyhangz"},"content":"        case \"done\":","lastModifiedDate":"2021-08-23"},{"lineNumber":65,"author":{"gitId":"yyhangz"},"content":"            inputCommand \u003d DukeCommand.DONE;","lastModifiedDate":"2021-08-23"},{"lineNumber":66,"author":{"gitId":"yyhangz"},"content":"            break;","lastModifiedDate":"2021-08-23"},{"lineNumber":67,"author":{"gitId":"yyhangz"},"content":"        case \"bye\":","lastModifiedDate":"2021-08-23"},{"lineNumber":68,"author":{"gitId":"yyhangz"},"content":"            inputCommand \u003d DukeCommand.BYE;","lastModifiedDate":"2021-08-23"},{"lineNumber":69,"author":{"gitId":"yyhangz"},"content":"            break;","lastModifiedDate":"2021-08-23"},{"lineNumber":70,"author":{"gitId":"yyhangz"},"content":"        case \"list\":","lastModifiedDate":"2021-08-23"},{"lineNumber":71,"author":{"gitId":"yyhangz"},"content":"            inputCommand \u003d DukeCommand.LIST;","lastModifiedDate":"2021-08-23"},{"lineNumber":72,"author":{"gitId":"yyhangz"},"content":"            break;","lastModifiedDate":"2021-08-23"},{"lineNumber":73,"author":{"gitId":"yyhangz"},"content":"        case \"todo\":","lastModifiedDate":"2021-08-23"},{"lineNumber":74,"author":{"gitId":"yyhangz"},"content":"            inputCommand \u003d DukeCommand.TODO;","lastModifiedDate":"2021-08-23"},{"lineNumber":75,"author":{"gitId":"yyhangz"},"content":"            break;","lastModifiedDate":"2021-08-23"},{"lineNumber":76,"author":{"gitId":"yyhangz"},"content":"        case \"event\":","lastModifiedDate":"2021-08-23"},{"lineNumber":77,"author":{"gitId":"yyhangz"},"content":"            inputCommand \u003d DukeCommand.EVENT;","lastModifiedDate":"2021-08-23"},{"lineNumber":78,"author":{"gitId":"yyhangz"},"content":"            break;","lastModifiedDate":"2021-08-23"},{"lineNumber":79,"author":{"gitId":"yyhangz"},"content":"        case \"deadline\":","lastModifiedDate":"2021-08-23"},{"lineNumber":80,"author":{"gitId":"yyhangz"},"content":"            inputCommand \u003d DukeCommand.DEADLINE;","lastModifiedDate":"2021-08-23"},{"lineNumber":81,"author":{"gitId":"yyhangz"},"content":"            break;","lastModifiedDate":"2021-08-23"},{"lineNumber":82,"author":{"gitId":"yyhangz"},"content":"        case \"delete\":","lastModifiedDate":"2021-08-23"},{"lineNumber":83,"author":{"gitId":"yyhangz"},"content":"            inputCommand \u003d DukeCommand.DELETE;","lastModifiedDate":"2021-08-23"},{"lineNumber":84,"author":{"gitId":"yyhangz"},"content":"            break;","lastModifiedDate":"2021-08-23"},{"lineNumber":85,"author":{"gitId":"yyhangz"},"content":"        default:","lastModifiedDate":"2021-08-23"},{"lineNumber":86,"author":{"gitId":"yyhangz"},"content":"            inputCommand \u003d DukeCommand.INVALID;","lastModifiedDate":"2021-08-23"},{"lineNumber":87,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":88,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":89,"author":{"gitId":"yyhangz"},"content":"        return inputCommand;","lastModifiedDate":"2021-08-23"},{"lineNumber":90,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":91,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":92,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":93,"author":{"gitId":"yyhangz"},"content":"     * Gets the string literal of the arguments provided in a duke command.","lastModifiedDate":"2021-08-23"},{"lineNumber":94,"author":{"gitId":"yyhangz"},"content":"     * This refers to the entire string literal after the first word provided in the input.","lastModifiedDate":"2021-08-23"},{"lineNumber":95,"author":{"gitId":"yyhangz"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":96,"author":{"gitId":"yyhangz"},"content":"     * @param inputString the string literal of the input.","lastModifiedDate":"2021-08-23"},{"lineNumber":97,"author":{"gitId":"yyhangz"},"content":"     * @return a string literal of the input after the first word. If there is only one word, an empty string is","lastModifiedDate":"2021-08-23"},{"lineNumber":98,"author":{"gitId":"yyhangz"},"content":"     * returned instead.","lastModifiedDate":"2021-08-23"},{"lineNumber":99,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":100,"author":{"gitId":"yyhangz"},"content":"    public String getArgsLiteral(String inputString) {","lastModifiedDate":"2021-08-23"},{"lineNumber":101,"author":{"gitId":"yyhangz"},"content":"        String[] args \u003d inputString.split(\" \", 2);","lastModifiedDate":"2021-08-23"},{"lineNumber":102,"author":{"gitId":"yyhangz"},"content":"        return args.length \u003e 1 ? args[1] : \"\";","lastModifiedDate":"2021-08-23"},{"lineNumber":103,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":104,"author":{"gitId":"yyhangz"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"yyhangz":104}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yyhangz"},"content":"package duke;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"import java.time.DateTimeException;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"yyhangz"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"yyhangz"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"yyhangz"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"yyhangz"},"content":"import duke.exception.InvalidDukeCommandException;","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"yyhangz"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"yyhangz"},"content":" * A class that extends Task, that allows for information about the date of occurrence of the task to be stored as well.","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"yyhangz"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"yyhangz"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-15"},{"lineNumber":14,"author":{"gitId":"yyhangz"},"content":"    protected LocalDate eventTime;","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":16,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"yyhangz"},"content":"     * Constructs a new instance of an Event with the given description of the task and the string literal of the event","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"yyhangz"},"content":"     * date. If the date specified is invalid, an InvalidDukeCommandException is thrown instead.","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"yyhangz"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"yyhangz"},"content":"     * @param taskDescription a brief description of the task.","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"yyhangz"},"content":"     * @param dateString a string literal of the due date, in the yyyy-mm-dd format.","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"yyhangz"},"content":"     * @throws InvalidDukeCommandException if the string literal dateString given does not follow the yyyy-mm-dd format.","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"yyhangz"},"content":"    public Event(String taskDescription, String dateString) throws InvalidDukeCommandException {","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"yyhangz"},"content":"        super(taskDescription);","lastModifiedDate":"2021-08-15"},{"lineNumber":26,"author":{"gitId":"yyhangz"},"content":"        try {","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"yyhangz"},"content":"            int[] dateArgs \u003d Arrays.stream(dateString.split(\"-\")).mapToInt(Integer::valueOf).toArray();","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"yyhangz"},"content":"            this.eventTime \u003d LocalDate.of(dateArgs[0], dateArgs[1], dateArgs[2]);","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"yyhangz"},"content":"        } catch (NumberFormatException | DateTimeException | ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"yyhangz"},"content":"            throw new InvalidDukeCommandException(\"duke.Event date has to be declared in the format yyyy-mm-dd.\");","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":33,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":34,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"yyhangz"},"content":"     * Returns a string that represents a serialized store format of the task that is specific to Duke.","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"yyhangz"},"content":"     * @return a string of serialized format.","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"yyhangz"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"yyhangz"},"content":"    public String toDukeStoreFormat() {","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"yyhangz"},"content":"        return String.format(\"E | %s | %s\", super.toDukeStoreFormat(), eventTime);","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"yyhangz"},"content":"     * Returns a string that shows the details of the task in a standardized format.","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"yyhangz"},"content":"     * @return a string of task details.","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"yyhangz"},"content":"    @Override","lastModifiedDate":"2021-08-15"},{"lineNumber":48,"author":{"gitId":"yyhangz"},"content":"    public String toString() {","lastModifiedDate":"2021-08-15"},{"lineNumber":49,"author":{"gitId":"yyhangz"},"content":"        return String.format(\"[E] %s (at: %s)\", super.toString(), this.eventTime.format(DateTimeFormatter","lastModifiedDate":"2021-08-23"},{"lineNumber":50,"author":{"gitId":"yyhangz"},"content":"                .ofPattern(\"dd MMM yyyy\")));","lastModifiedDate":"2021-08-23"},{"lineNumber":51,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":52,"author":{"gitId":"yyhangz"},"content":"}","lastModifiedDate":"2021-08-15"}],"authorContributionMap":{"yyhangz":52}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yyhangz"},"content":"package duke;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"import java.io.File;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"yyhangz"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"yyhangz"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"yyhangz"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"yyhangz"},"content":"import java.nio.file.Files;","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"yyhangz"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"yyhangz"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"yyhangz"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"yyhangz"},"content":"import java.util.List;","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"yyhangz"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"yyhangz"},"content":"import duke.exception.DukeFileSystemException;","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"yyhangz"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"yyhangz"},"content":" * A class that handles anything related to the storing and loading of information from memory for Duke.","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"yyhangz"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"yyhangz"},"content":"public class Storage {","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"yyhangz"},"content":"    private final Path filePath;","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"yyhangz"},"content":"    private final DukeParser parser;","lastModifiedDate":"2021-08-23"},{"lineNumber":22,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"yyhangz"},"content":"     * Constructs a new instance of Storage that loads and stores data into the file path that is specified.","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"yyhangz"},"content":"     * @param filePath a string literal of the file path where the information is accessed from.","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"yyhangz"},"content":"     * @throws IOException if the file path is not found and cannot be created automatically by Storage.","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"yyhangz"},"content":"    public Storage(String filePath) throws IOException {","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"yyhangz"},"content":"        this.filePath \u003d Paths.get(System.getProperty(\"user.dir\"), filePath);","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"yyhangz"},"content":"        createDirectoriesAndFiles();","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"yyhangz"},"content":"        this.parser \u003d new DukeParser();","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"yyhangz"},"content":"    private void createDirectoriesAndFiles() throws IOException {","lastModifiedDate":"2021-08-30"},{"lineNumber":35,"author":{"gitId":"yyhangz"},"content":"        // create storage directories and files if it does not exist","lastModifiedDate":"2021-08-30"},{"lineNumber":36,"author":{"gitId":"yyhangz"},"content":"        if (Files.notExists(filePath)) {","lastModifiedDate":"2021-08-30"},{"lineNumber":37,"author":{"gitId":"yyhangz"},"content":"            File f \u003d new File(filePath.toString());","lastModifiedDate":"2021-08-30"},{"lineNumber":38,"author":{"gitId":"yyhangz"},"content":"            f.getParentFile().mkdirs();","lastModifiedDate":"2021-08-30"},{"lineNumber":39,"author":{"gitId":"yyhangz"},"content":"            f.createNewFile();","lastModifiedDate":"2021-08-30"},{"lineNumber":40,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":41,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":42,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":43,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":44,"author":{"gitId":"yyhangz"},"content":"     * Returns a list of tasks based on the specified data file path.","lastModifiedDate":"2021-08-23"},{"lineNumber":45,"author":{"gitId":"yyhangz"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":46,"author":{"gitId":"yyhangz"},"content":"     * @return a list of tasks from storage.","lastModifiedDate":"2021-08-23"},{"lineNumber":47,"author":{"gitId":"yyhangz"},"content":"     * @throws DukeFileSystemException if the file that was read is of an invalid format.","lastModifiedDate":"2021-08-23"},{"lineNumber":48,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":49,"author":{"gitId":"yyhangz"},"content":"    public List\u003cTask\u003e load() throws DukeFileSystemException {","lastModifiedDate":"2021-08-23"},{"lineNumber":50,"author":{"gitId":"yyhangz"},"content":"        File dataFile \u003d new File(this.filePath.toString());","lastModifiedDate":"2021-08-23"},{"lineNumber":51,"author":{"gitId":"yyhangz"},"content":"        List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-23"},{"lineNumber":52,"author":{"gitId":"yyhangz"},"content":"        try {","lastModifiedDate":"2021-08-23"},{"lineNumber":53,"author":{"gitId":"yyhangz"},"content":"            Scanner scanner \u003d new Scanner(dataFile);","lastModifiedDate":"2021-08-23"},{"lineNumber":54,"author":{"gitId":"yyhangz"},"content":"            while (scanner.hasNext()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":55,"author":{"gitId":"yyhangz"},"content":"                taskList.add(parser.parseTaskFromLine(scanner.nextLine()));","lastModifiedDate":"2021-08-23"},{"lineNumber":56,"author":{"gitId":"yyhangz"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":57,"author":{"gitId":"yyhangz"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":58,"author":{"gitId":"yyhangz"},"content":"            throw new DukeFileSystemException(\"Unable to load previous tasks. \"","lastModifiedDate":"2021-08-30"},{"lineNumber":59,"author":{"gitId":"yyhangz"},"content":"                    + \"A new list will be used for this session. Ensure that \" + filePath + \" exists.\");","lastModifiedDate":"2021-08-30"},{"lineNumber":60,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":61,"author":{"gitId":"yyhangz"},"content":"        return taskList;","lastModifiedDate":"2021-08-23"},{"lineNumber":62,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":63,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":64,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":65,"author":{"gitId":"yyhangz"},"content":"     * Stores the tasks in duke format to specified file path in the constructor to be cached.","lastModifiedDate":"2021-08-23"},{"lineNumber":66,"author":{"gitId":"yyhangz"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":67,"author":{"gitId":"yyhangz"},"content":"     * @param taskList a list of tasks to be converted and stored.","lastModifiedDate":"2021-08-23"},{"lineNumber":68,"author":{"gitId":"yyhangz"},"content":"     * @throws IOException if the file path specified is invalid.","lastModifiedDate":"2021-08-23"},{"lineNumber":69,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":70,"author":{"gitId":"yyhangz"},"content":"    public void writeTasksToFile(TaskList taskList) throws IOException {","lastModifiedDate":"2021-08-23"},{"lineNumber":71,"author":{"gitId":"yyhangz"},"content":"        FileWriter fileWriter \u003d new FileWriter(this.filePath.toString());","lastModifiedDate":"2021-08-23"},{"lineNumber":72,"author":{"gitId":"yyhangz"},"content":"        fileWriter.write(taskList.toDukeStoreFormat());","lastModifiedDate":"2021-08-23"},{"lineNumber":73,"author":{"gitId":"yyhangz"},"content":"        fileWriter.close();","lastModifiedDate":"2021-08-23"},{"lineNumber":74,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":75,"author":{"gitId":"yyhangz"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"yyhangz":75}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yyhangz"},"content":"package duke;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"yyhangz"},"content":" * A class represents a task that is created by a user through Duke. It contains information about the details of the","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"yyhangz"},"content":" * task.","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"yyhangz"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"yyhangz"},"content":"public class Task {","lastModifiedDate":"2021-08-15"},{"lineNumber":8,"author":{"gitId":"yyhangz"},"content":"    protected final String taskDescription;","lastModifiedDate":"2021-08-16"},{"lineNumber":9,"author":{"gitId":"yyhangz"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-15"},{"lineNumber":10,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":11,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"yyhangz"},"content":"     * Constructs an instance of a task with the given description of the task","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"yyhangz"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"yyhangz"},"content":"     * @param taskDescription a string literal of the description of the task.","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"yyhangz"},"content":"    public Task(String taskDescription) {","lastModifiedDate":"2021-08-15"},{"lineNumber":17,"author":{"gitId":"yyhangz"},"content":"        this.taskDescription \u003d taskDescription;","lastModifiedDate":"2021-08-15"},{"lineNumber":18,"author":{"gitId":"yyhangz"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-15"},{"lineNumber":19,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":20,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":21,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-08-15"},{"lineNumber":22,"author":{"gitId":"yyhangz"},"content":"     * Indicates that this task has been completed.","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-08-15"},{"lineNumber":24,"author":{"gitId":"yyhangz"},"content":"    public void markAsDone() {","lastModifiedDate":"2021-08-15"},{"lineNumber":25,"author":{"gitId":"yyhangz"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-08-15"},{"lineNumber":26,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":27,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":28,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"yyhangz"},"content":"     * Returns true if the description of the task contains a specified pattern within it, and false otherwise.","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"yyhangz"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"yyhangz"},"content":"     * @param pattern a string of the keyword to be checked against the description.","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"yyhangz"},"content":"     * @return true if pattern is contained within task description.","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"yyhangz"},"content":"    public boolean hasKeyWord(String pattern) {","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"yyhangz"},"content":"        return this.taskDescription.contains(pattern);","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"yyhangz"},"content":"     * Returns a string that represents a serialized store format of the task that is specific to Duke.","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"yyhangz"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"yyhangz"},"content":"     * @return a string of serialized format.","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"yyhangz"},"content":"    public String toDukeStoreFormat() {","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"yyhangz"},"content":"        return String.format(\"%s | %s\", this.isDone ? \"1\" : \"0\", this.taskDescription);","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":47,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":48,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"yyhangz"},"content":"     * Returns a string that shows the details of the task in a standardized format.","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"yyhangz"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"yyhangz"},"content":"     * @return a string of task details.","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"yyhangz"},"content":"    @Override","lastModifiedDate":"2021-08-15"},{"lineNumber":54,"author":{"gitId":"yyhangz"},"content":"    public String toString() {","lastModifiedDate":"2021-08-15"},{"lineNumber":55,"author":{"gitId":"yyhangz"},"content":"        return String.format(\"[%c] %s\", isDone ? \u0027X\u0027 : \u0027 \u0027, taskDescription);","lastModifiedDate":"2021-08-15"},{"lineNumber":56,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":57,"author":{"gitId":"yyhangz"},"content":"}","lastModifiedDate":"2021-08-15"}],"authorContributionMap":{"yyhangz":57}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yyhangz"},"content":"package duke;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"yyhangz"},"content":"import java.util.List;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"yyhangz"},"content":"import java.util.concurrent.atomic.AtomicInteger;","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"yyhangz"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"yyhangz"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"yyhangz"},"content":" * A class that represents a list of tasks.","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"yyhangz"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"yyhangz"},"content":"public class TaskList {","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"yyhangz"},"content":"    private final List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"yyhangz"},"content":"     * Constructs an instance of task list from a List of Tasks.","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"yyhangz"},"content":"     * @param taskList a List of Tasks.","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"yyhangz"},"content":"    public TaskList(List\u003cTask\u003e taskList) {","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"yyhangz"},"content":"        for (Task task : taskList) {","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"yyhangz"},"content":"            this.taskList.add(task);","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":22,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"yyhangz"},"content":"     * Constructs an instance of task list that is empty.","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"yyhangz"},"content":"    public TaskList() {","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"yyhangz"},"content":"     * Gets the number of tasks in the list.","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"yyhangz"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"yyhangz"},"content":"     * @return a int of the number of tasks.","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"yyhangz"},"content":"    public int size() {","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"yyhangz"},"content":"        return taskList.size();","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":39,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":40,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":41,"author":{"gitId":"yyhangz"},"content":"     * Gets the i-th task from the task list, using 1-based indexing.","lastModifiedDate":"2021-08-23"},{"lineNumber":42,"author":{"gitId":"yyhangz"},"content":"     * This means that getTask(1) removes the first task in the list.","lastModifiedDate":"2021-08-23"},{"lineNumber":43,"author":{"gitId":"yyhangz"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":44,"author":{"gitId":"yyhangz"},"content":"     * @param i The index of the task to be returned based on 1-based indexing.","lastModifiedDate":"2021-08-23"},{"lineNumber":45,"author":{"gitId":"yyhangz"},"content":"     * @return the task that corresponds to the index based on 1-based indexing.","lastModifiedDate":"2021-08-23"},{"lineNumber":46,"author":{"gitId":"yyhangz"},"content":"     * @throws IndexOutOfBoundsException if the task index specified is less than 1 or more than the size of the list.","lastModifiedDate":"2021-08-23"},{"lineNumber":47,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":48,"author":{"gitId":"yyhangz"},"content":"    public Task getTask(int i) throws IndexOutOfBoundsException {","lastModifiedDate":"2021-08-23"},{"lineNumber":49,"author":{"gitId":"yyhangz"},"content":"        int idx \u003d i - 1;","lastModifiedDate":"2021-08-23"},{"lineNumber":50,"author":{"gitId":"yyhangz"},"content":"        return taskList.get(idx);","lastModifiedDate":"2021-08-23"},{"lineNumber":51,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":52,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":53,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":54,"author":{"gitId":"yyhangz"},"content":"     * Deletes the i-th task from the task list, using 1-based indexing.","lastModifiedDate":"2021-08-23"},{"lineNumber":55,"author":{"gitId":"yyhangz"},"content":"     * This means that deleteTask(1) removes the first task in the list.","lastModifiedDate":"2021-08-23"},{"lineNumber":56,"author":{"gitId":"yyhangz"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":57,"author":{"gitId":"yyhangz"},"content":"     * @param i The index of the task to be removed based on 1-based indexing.","lastModifiedDate":"2021-08-23"},{"lineNumber":58,"author":{"gitId":"yyhangz"},"content":"     * @return the task that is removed.","lastModifiedDate":"2021-08-23"},{"lineNumber":59,"author":{"gitId":"yyhangz"},"content":"     * @throws IndexOutOfBoundsException if the task index specified is less than 1 or more than the size of the list.","lastModifiedDate":"2021-08-23"},{"lineNumber":60,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":61,"author":{"gitId":"yyhangz"},"content":"    public Task deleteTask(int i) throws IndexOutOfBoundsException {","lastModifiedDate":"2021-08-23"},{"lineNumber":62,"author":{"gitId":"yyhangz"},"content":"        int idx \u003d i - 1;","lastModifiedDate":"2021-08-23"},{"lineNumber":63,"author":{"gitId":"yyhangz"},"content":"        return taskList.remove(idx);","lastModifiedDate":"2021-08-23"},{"lineNumber":64,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":65,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":66,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":67,"author":{"gitId":"yyhangz"},"content":"     * Appends a task to the list of existing tasks.","lastModifiedDate":"2021-08-23"},{"lineNumber":68,"author":{"gitId":"yyhangz"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":69,"author":{"gitId":"yyhangz"},"content":"     * @param task duke.Task to be added to list.","lastModifiedDate":"2021-08-23"},{"lineNumber":70,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":71,"author":{"gitId":"yyhangz"},"content":"    public void appendTask(Task task) {","lastModifiedDate":"2021-08-23"},{"lineNumber":72,"author":{"gitId":"yyhangz"},"content":"        taskList.add(task);","lastModifiedDate":"2021-08-23"},{"lineNumber":73,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":74,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":75,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":76,"author":{"gitId":"yyhangz"},"content":"     * Returns a list of tasks whose descriptions contains a specified pattern.","lastModifiedDate":"2021-08-25"},{"lineNumber":77,"author":{"gitId":"yyhangz"},"content":"     * @param pattern a string of the pattern to be matched.","lastModifiedDate":"2021-08-25"},{"lineNumber":78,"author":{"gitId":"yyhangz"},"content":"     * @return a list of matching tasks.","lastModifiedDate":"2021-08-25"},{"lineNumber":79,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":80,"author":{"gitId":"yyhangz"},"content":"    public TaskList findTasks(String pattern) {","lastModifiedDate":"2021-08-25"},{"lineNumber":81,"author":{"gitId":"yyhangz"},"content":"        TaskList filteredList \u003d new TaskList();","lastModifiedDate":"2021-08-25"},{"lineNumber":82,"author":{"gitId":"yyhangz"},"content":"        for (Task task : this.taskList) {","lastModifiedDate":"2021-08-25"},{"lineNumber":83,"author":{"gitId":"yyhangz"},"content":"            if (task.hasKeyWord(pattern)) {","lastModifiedDate":"2021-08-25"},{"lineNumber":84,"author":{"gitId":"yyhangz"},"content":"                filteredList.appendTask(task);","lastModifiedDate":"2021-08-25"},{"lineNumber":85,"author":{"gitId":"yyhangz"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":86,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":87,"author":{"gitId":"yyhangz"},"content":"        return filteredList;","lastModifiedDate":"2021-08-25"},{"lineNumber":88,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":89,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":90,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":91,"author":{"gitId":"yyhangz"},"content":"     * Produces a string representing the store format of the list of tasks for Duke.","lastModifiedDate":"2021-08-25"},{"lineNumber":92,"author":{"gitId":"yyhangz"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":93,"author":{"gitId":"yyhangz"},"content":"     * @return a String of the list of tasks in Duke store format.","lastModifiedDate":"2021-08-25"},{"lineNumber":94,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":95,"author":{"gitId":"yyhangz"},"content":"    public String toDukeStoreFormat() {","lastModifiedDate":"2021-08-23"},{"lineNumber":96,"author":{"gitId":"yyhangz"},"content":"        String outputString \u003d","lastModifiedDate":"2021-08-23"},{"lineNumber":97,"author":{"gitId":"yyhangz"},"content":"                this.taskList.stream().map(task -\u003e task.toDukeStoreFormat() + \"\\n\").collect(Collectors.joining());","lastModifiedDate":"2021-08-23"},{"lineNumber":98,"author":{"gitId":"yyhangz"},"content":"        return outputString;","lastModifiedDate":"2021-08-23"},{"lineNumber":99,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":100,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":101,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":102,"author":{"gitId":"yyhangz"},"content":"     * Returns a string that shows the details of the list of tasks.","lastModifiedDate":"2021-08-25"},{"lineNumber":103,"author":{"gitId":"yyhangz"},"content":"     * @return a string of the tasks\u0027 details.","lastModifiedDate":"2021-08-25"},{"lineNumber":104,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":105,"author":{"gitId":"yyhangz"},"content":"    @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":106,"author":{"gitId":"yyhangz"},"content":"    public String toString() {","lastModifiedDate":"2021-08-23"},{"lineNumber":107,"author":{"gitId":"yyhangz"},"content":"        AtomicInteger idx \u003d new AtomicInteger(1);","lastModifiedDate":"2021-08-23"},{"lineNumber":108,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":109,"author":{"gitId":"yyhangz"},"content":"        String outputList \u003d taskList.stream().map(task -\u003e Integer.toString(idx.getAndIncrement()) + \". \" + task + \"\\n\")","lastModifiedDate":"2021-08-23"},{"lineNumber":110,"author":{"gitId":"yyhangz"},"content":"                .collect(Collectors.joining());","lastModifiedDate":"2021-08-23"},{"lineNumber":111,"author":{"gitId":"yyhangz"},"content":"        // Remove last newline for prettier formatting","lastModifiedDate":"2021-08-23"},{"lineNumber":112,"author":{"gitId":"yyhangz"},"content":"        if (outputList.length() \u003e 0) {","lastModifiedDate":"2021-08-23"},{"lineNumber":113,"author":{"gitId":"yyhangz"},"content":"            outputList \u003d outputList.substring(0, outputList.length() - 1);","lastModifiedDate":"2021-08-23"},{"lineNumber":114,"author":{"gitId":"yyhangz"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":115,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":116,"author":{"gitId":"yyhangz"},"content":"        return outputList;","lastModifiedDate":"2021-08-23"},{"lineNumber":117,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":118,"author":{"gitId":"yyhangz"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"yyhangz":118}},{"path":"src/main/java/duke/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yyhangz"},"content":"package duke;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"yyhangz"},"content":" * A class that extends Task, that represents a task that has no dates associated with it.","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"yyhangz"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"yyhangz"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-08-15"},{"lineNumber":7,"author":{"gitId":"yyhangz"},"content":"    public Todo(String taskDescription) {","lastModifiedDate":"2021-08-15"},{"lineNumber":8,"author":{"gitId":"yyhangz"},"content":"        super(taskDescription);","lastModifiedDate":"2021-08-15"},{"lineNumber":9,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":10,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":11,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"yyhangz"},"content":"     * Returns a string that represents a serialized store format of the task that is specific to Duke.","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"yyhangz"},"content":"     * @return a string of serialized format.","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"yyhangz"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"yyhangz"},"content":"    public String toDukeStoreFormat() {","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"yyhangz"},"content":"        return String.format(\"T | %s\", super.toDukeStoreFormat());","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"yyhangz"},"content":"     * Returns a string that shows the details of the task in a standardized format.","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"yyhangz"},"content":"     * @return a string of task details.","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"yyhangz"},"content":"    @Override","lastModifiedDate":"2021-08-15"},{"lineNumber":25,"author":{"gitId":"yyhangz"},"content":"    public String toString() {","lastModifiedDate":"2021-08-15"},{"lineNumber":26,"author":{"gitId":"yyhangz"},"content":"        return String.format(\"[T] %s\", super.toString());","lastModifiedDate":"2021-08-15"},{"lineNumber":27,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":28,"author":{"gitId":"yyhangz"},"content":"}","lastModifiedDate":"2021-08-15"}],"authorContributionMap":{"yyhangz":28}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yyhangz"},"content":"package duke;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"import duke.exception.InvalidDukeCommandException;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"yyhangz"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"yyhangz"},"content":" * A class that handles anything related to the display of Duke.","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"yyhangz"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"yyhangz"},"content":"public class Ui {","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"yyhangz"},"content":"    private static final String LINE_BREAK \u003d \"--------------------------\\n\";","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"yyhangz"},"content":"     * Constructs a new instance of Ui. No arguments are expected.","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"yyhangz"},"content":"    public Ui() {","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"yyhangz"},"content":"     * Wraps a string between 2 line breaks.","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"yyhangz"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"yyhangz"},"content":"     * @param s String to be wrapped.","lastModifiedDate":"2021-08-23"},{"lineNumber":22,"author":{"gitId":"yyhangz"},"content":"     * @return New string between 2 line breaks.","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"yyhangz"},"content":"    private static String wrapBetweenLines(String s) {","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"yyhangz"},"content":"        return LINE_BREAK + s + \"\\n\" + LINE_BREAK;","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"yyhangz"},"content":"     * Prints the specified message in a standardized format.","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"yyhangz"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"yyhangz"},"content":"     * @param s The message to be printed.","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"yyhangz"},"content":"    public void dukePrint(String s) {","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"yyhangz"},"content":"        System.out.println(wrapBetweenLines(s));","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"yyhangz"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"yyhangz"},"content":"     * Prints the specified message in the Duke error message format.","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"yyhangz"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":40,"author":{"gitId":"yyhangz"},"content":"     * @param s The error message to be printed.","lastModifiedDate":"2021-08-23"},{"lineNumber":41,"author":{"gitId":"yyhangz"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":42,"author":{"gitId":"yyhangz"},"content":"    public void dukeShowError(String s) {","lastModifiedDate":"2021-08-23"},{"lineNumber":43,"author":{"gitId":"yyhangz"},"content":"        Exception e \u003d new InvalidDukeCommandException(s);","lastModifiedDate":"2021-08-23"},{"lineNumber":44,"author":{"gitId":"yyhangz"},"content":"        dukePrint(e.getMessage());","lastModifiedDate":"2021-08-23"},{"lineNumber":45,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":46,"author":{"gitId":"yyhangz"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"yyhangz":46}},{"path":"src/main/java/duke/exception/DukeFileSystemException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yyhangz"},"content":"package duke.exception;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"public class DukeFileSystemException extends RuntimeException {","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"yyhangz"},"content":"    private static final String preMessage \u003d \"ERROR: \";","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"yyhangz"},"content":"    public DukeFileSystemException(String message) {","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"yyhangz"},"content":"        super(preMessage + message);","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"yyhangz"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"yyhangz":9}},{"path":"src/main/java/duke/exception/InvalidDukeCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yyhangz"},"content":"package duke.exception;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"public class InvalidDukeCommandException extends RuntimeException {","lastModifiedDate":"2021-08-16"},{"lineNumber":4,"author":{"gitId":"yyhangz"},"content":"    private static final String preMessage \u003d \"ERROR: \";","lastModifiedDate":"2021-08-16"},{"lineNumber":5,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":6,"author":{"gitId":"yyhangz"},"content":"    public InvalidDukeCommandException(String message) {","lastModifiedDate":"2021-08-16"},{"lineNumber":7,"author":{"gitId":"yyhangz"},"content":"        super(preMessage + message);","lastModifiedDate":"2021-08-16"},{"lineNumber":8,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":9,"author":{"gitId":"yyhangz"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"yyhangz":9}},{"path":"src/test/java/duke/DukeParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yyhangz"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"yyhangz"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"yyhangz"},"content":"public class DukeParserTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"yyhangz"},"content":"    public void getCommandType_invalidCommand_invalidCommandTypeReturned() {","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"yyhangz"},"content":"        assertEquals(DukeCommand.INVALID, new DukeParser().getCommandType(\"this is an invalid command\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"yyhangz"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"yyhangz":12}},{"path":"src/test/java/duke/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yyhangz"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"yyhangz"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"yyhangz"},"content":"public class TodoTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"yyhangz"},"content":"    public void todoToString_readBookTaskDone_correctStringFormatReturned() {","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"yyhangz"},"content":"        Todo task \u003d new Todo(\"read book\");","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"yyhangz"},"content":"        task.markAsDone();","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"yyhangz"},"content":"        String expectedOutput \u003d \"[T] [X] read book\";","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"yyhangz"},"content":"        String actualOutput \u003d task.toString();","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"yyhangz"},"content":"        assertEquals(expectedOutput, actualOutput);","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"yyhangz"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"yyhangz"},"content":"    public void todoToDukeStoreFormat_doLaundryTask_correctStringFormatRerturned() {","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"yyhangz"},"content":"        Todo task \u003d new Todo(\"do laundry\");","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"yyhangz"},"content":"        String expectedOutput \u003d \"T | 0 | do laundry\";","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"yyhangz"},"content":"        String actualOutput \u003d task.toDukeStoreFormat();","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"yyhangz"},"content":"        assertEquals(expectedOutput, actualOutput);","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"yyhangz"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"yyhangz"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"yyhangz":24}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"yyhangz"},"content":"todo read book","lastModifiedDate":"2021-08-16"},{"lineNumber":2,"author":{"gitId":"yyhangz"},"content":"event team meeting /at Monday 6pm","lastModifiedDate":"2021-08-16"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"deadline assignment 1 /by Tuesday 2359","lastModifiedDate":"2021-08-16"},{"lineNumber":4,"author":{"gitId":"yyhangz"},"content":"done 2","lastModifiedDate":"2021-08-16"},{"lineNumber":5,"author":{"gitId":"yyhangz"},"content":"list","lastModifiedDate":"2021-08-16"},{"lineNumber":6,"author":{"gitId":"yyhangz"},"content":"add watch movie","lastModifiedDate":"2021-08-16"},{"lineNumber":7,"author":{"gitId":"yyhangz"},"content":"todo","lastModifiedDate":"2021-08-16"},{"lineNumber":8,"author":{"gitId":"yyhangz"},"content":"event","lastModifiedDate":"2021-08-16"},{"lineNumber":9,"author":{"gitId":"yyhangz"},"content":"event team meeting","lastModifiedDate":"2021-08-16"},{"lineNumber":10,"author":{"gitId":"yyhangz"},"content":"event team meeting /at","lastModifiedDate":"2021-08-16"},{"lineNumber":11,"author":{"gitId":"yyhangz"},"content":"deadline","lastModifiedDate":"2021-08-16"},{"lineNumber":12,"author":{"gitId":"yyhangz"},"content":"deadline assignment 1","lastModifiedDate":"2021-08-16"},{"lineNumber":13,"author":{"gitId":"yyhangz"},"content":"deadline assignment 1 /by","lastModifiedDate":"2021-08-16"},{"lineNumber":14,"author":{"gitId":"yyhangz"},"content":"done","lastModifiedDate":"2021-08-16"},{"lineNumber":15,"author":{"gitId":"yyhangz"},"content":"done -1","lastModifiedDate":"2021-08-16"},{"lineNumber":16,"author":{"gitId":"yyhangz"},"content":"done foo","lastModifiedDate":"2021-08-16"},{"lineNumber":17,"author":{"gitId":"yyhangz"},"content":"delete 1","lastModifiedDate":"2021-08-16"},{"lineNumber":18,"author":{"gitId":"yyhangz"},"content":"delete","lastModifiedDate":"2021-08-16"},{"lineNumber":19,"author":{"gitId":"yyhangz"},"content":"delete -1","lastModifiedDate":"2021-08-16"},{"lineNumber":20,"author":{"gitId":"yyhangz"},"content":"delete bar","lastModifiedDate":"2021-08-16"},{"lineNumber":21,"author":{"gitId":"yyhangz"},"content":"bye","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"yyhangz":21}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"yyhangz"},"content":"# cd to text-ui-test if in */ip","lastModifiedDate":"2021-08-16"},{"lineNumber":4,"author":{"gitId":"yyhangz"},"content":"if [[ \"$PWD/\" \u003d */ip/ ]];","lastModifiedDate":"2021-08-16"},{"lineNumber":5,"author":{"gitId":"yyhangz"},"content":"then","lastModifiedDate":"2021-08-16"},{"lineNumber":6,"author":{"gitId":"yyhangz"},"content":"    cd text-ui-test","lastModifiedDate":"2021-08-16"},{"lineNumber":7,"author":{"gitId":"yyhangz"},"content":"fi","lastModifiedDate":"2021-08-16"},{"lineNumber":8,"author":{"gitId":"yyhangz"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"yyhangz":6,"-":38}}]

[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"# duke.Duke project template","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2021-08-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"twothicc":2,"-":22}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"import duke.Ui.Commands;","lastModifiedDate":"2021-08-21"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"import duke.command.Command;","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"/**","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":" * Handles initialization of storage and tasks and running of Duke chatbot.","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":" */","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"    private static final String SAVE_FILENAME \u003d \"dukeSave.txt\";","lastModifiedDate":"2021-08-20"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"    private Storage storage;","lastModifiedDate":"2021-08-20"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"    private TaskList tasks;","lastModifiedDate":"2021-08-20"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"    private Ui ui;","lastModifiedDate":"2021-08-20"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"     * Constructor for Duke.","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":"     * Creates a Duke with a Storage and an Ui.","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":"     * Storage will read tasks from specified file to TaskList.","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"twothicc"},"content":"     * If there are errors reading file, TaskList will be empty by default.","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"twothicc"},"content":"     * @param fileName Filename that Storage will save tasks to and read tasks from.","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"twothicc"},"content":"    public Duke(String fileName) {","lastModifiedDate":"2021-08-20"},{"lineNumber":26,"author":{"gitId":"twothicc"},"content":"        storage \u003d new Storage(fileName);","lastModifiedDate":"2021-08-20"},{"lineNumber":27,"author":{"gitId":"twothicc"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2021-08-20"},{"lineNumber":28,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":29,"author":{"gitId":"twothicc"},"content":"        // Read tasks from save file.","lastModifiedDate":"2021-08-20"},{"lineNumber":30,"author":{"gitId":"twothicc"},"content":"        try {","lastModifiedDate":"2021-08-20"},{"lineNumber":31,"author":{"gitId":"twothicc"},"content":"            tasks \u003d storage.readTasksFromData();","lastModifiedDate":"2021-08-21"},{"lineNumber":32,"author":{"gitId":"twothicc"},"content":"        } catch (DukeException dukeException) {","lastModifiedDate":"2021-08-20"},{"lineNumber":33,"author":{"gitId":"twothicc"},"content":"            System.out.println(dukeException);","lastModifiedDate":"2021-08-20"},{"lineNumber":34,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":35,"author":{"gitId":"twothicc"},"content":"            // If failed to read tasks from save, initialize a new duke.task.Task ArrayList.","lastModifiedDate":"2021-08-21"},{"lineNumber":36,"author":{"gitId":"twothicc"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2021-08-21"},{"lineNumber":37,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-14"},{"lineNumber":38,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":39,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":40,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"twothicc"},"content":"     * Runs Duke chatbot.","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"twothicc"},"content":"     * Takes in user input and prints the corresponding output to the user.","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"twothicc"},"content":"     * Also manages the user\u0027s tasks by saving to and reading from a specified file.","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"twothicc"},"content":"    public void run() {","lastModifiedDate":"2021-08-20"},{"lineNumber":46,"author":{"gitId":"twothicc"},"content":"        // Initialize scanner object.","lastModifiedDate":"2021-08-19"},{"lineNumber":47,"author":{"gitId":"twothicc"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-14"},{"lineNumber":48,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":49,"author":{"gitId":"twothicc"},"content":"        // Prints greeting to user.","lastModifiedDate":"2021-08-19"},{"lineNumber":50,"author":{"gitId":"twothicc"},"content":"        this.ui.showWelcome();","lastModifiedDate":"2021-08-20"},{"lineNumber":51,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":52,"author":{"gitId":"twothicc"},"content":"        // Scans user inputs and prints corresponding outputs until a \"Bye\" input is received.","lastModifiedDate":"2021-08-19"},{"lineNumber":53,"author":{"gitId":"twothicc"},"content":"        String userInput \u003d sc.nextLine();","lastModifiedDate":"2021-08-19"},{"lineNumber":54,"author":{"gitId":"twothicc"},"content":"        // Only exactly \"bye\" is read as exit command.","lastModifiedDate":"2021-08-22"},{"lineNumber":55,"author":{"gitId":"twothicc"},"content":"        while (!userInput.equals(Commands.BYE.getCommand())) {","lastModifiedDate":"2021-08-21"},{"lineNumber":56,"author":{"gitId":"twothicc"},"content":"            Command command \u003d Parser.parse(userInput);","lastModifiedDate":"2021-08-21"},{"lineNumber":57,"author":{"gitId":"twothicc"},"content":"            command.execute(this.tasks, this.ui, this.storage);","lastModifiedDate":"2021-08-21"},{"lineNumber":58,"author":{"gitId":"twothicc"},"content":"            userInput \u003d sc.nextLine();","lastModifiedDate":"2021-08-19"},{"lineNumber":59,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-14"},{"lineNumber":60,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":61,"author":{"gitId":"twothicc"},"content":"        // Prints goodbye message to user.","lastModifiedDate":"2021-08-20"},{"lineNumber":62,"author":{"gitId":"twothicc"},"content":"        this.ui.showGoodbye();","lastModifiedDate":"2021-08-20"},{"lineNumber":63,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":64,"author":{"gitId":"twothicc"},"content":"        // Closes scanner object.","lastModifiedDate":"2021-08-19"},{"lineNumber":65,"author":{"gitId":"twothicc"},"content":"        sc.close();","lastModifiedDate":"2021-08-19"},{"lineNumber":66,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":67,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":68,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-20"},{"lineNumber":69,"author":{"gitId":"twothicc"},"content":"     * The main method runs the duke.Duke chatbot.","lastModifiedDate":"2021-08-22"},{"lineNumber":70,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-20"},{"lineNumber":71,"author":{"gitId":"twothicc"},"content":"     * @param args Commandline arguments.","lastModifiedDate":"2021-08-22"},{"lineNumber":72,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-20"},{"lineNumber":73,"author":{"gitId":"twothicc"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-20"},{"lineNumber":74,"author":{"gitId":"twothicc"},"content":"        Duke duke \u003d new Duke(SAVE_FILENAME);","lastModifiedDate":"2021-08-20"},{"lineNumber":75,"author":{"gitId":"twothicc"},"content":"        duke.run();","lastModifiedDate":"2021-08-20"},{"lineNumber":76,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":77,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"twothicc":76,"-":2}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"/**","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":" * Represents errors specific to Duke chatbot.","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":" */","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-08-14"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"    private final String errorMessage;","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"     * Constructor for DukeException.","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"     * Creates a DukeException with an error message.","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"     * @param errorMessage Message that describes the error represented by this DukeException.","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"    public DukeException(String errorMessage) {","lastModifiedDate":"2021-08-14"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"        super(errorMessage);","lastModifiedDate":"2021-08-14"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"        this.errorMessage \u003d errorMessage;","lastModifiedDate":"2021-08-14"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"twothicc"},"content":"     * Returns error message that describes the error represented by this DukeException.","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"twothicc"},"content":"     * @return Error message.","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"twothicc"},"content":"    public String getErrorMessage() {","lastModifiedDate":"2021-08-21"},{"lineNumber":26,"author":{"gitId":"twothicc"},"content":"        return errorMessage;","lastModifiedDate":"2021-08-21"},{"lineNumber":27,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":28,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":29,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"twothicc"},"content":"     * Returns a formatted error message.","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"twothicc"},"content":"     * @return Formatted error message.","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"twothicc"},"content":"    @Override","lastModifiedDate":"2021-08-14"},{"lineNumber":35,"author":{"gitId":"twothicc"},"content":"    public String toString() {","lastModifiedDate":"2021-08-14"},{"lineNumber":36,"author":{"gitId":"twothicc"},"content":"        return \"\\uD83D\\uDE41 OOPS!!! \" + this.errorMessage;","lastModifiedDate":"2021-08-14"},{"lineNumber":37,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":38,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"twothicc":38}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"import duke.Ui.Commands;","lastModifiedDate":"2021-08-21"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"import duke.Ui.Descriptors;","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"import duke.command.AddCommand;","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"import duke.command.Command;","lastModifiedDate":"2021-08-21"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"import duke.command.DateCommand;","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"import duke.command.DeleteCommand;","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"import duke.command.FindCommand;","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"import duke.command.ListCommand;","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"import duke.command.MarkCommand;","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"import java.time.DateTimeException;","lastModifiedDate":"2021-08-20"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-20"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-20"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-08-20"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"/**","lastModifiedDate":"2021-08-20"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":" * Deals with making sense of user commands and inputs.","lastModifiedDate":"2021-08-20"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":" */","lastModifiedDate":"2021-08-20"},{"lineNumber":21,"author":{"gitId":"twothicc"},"content":"public class Parser {","lastModifiedDate":"2021-08-20"},{"lineNumber":22,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":23,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"twothicc"},"content":"     * Reads user input and returns the corresponding Command.","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"twothicc"},"content":"     * @param userInput User\u0027s input into Duke chatbot.","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"twothicc"},"content":"     * @return Command that can be executed to perform a set of actions.","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"twothicc"},"content":"    public static Command parse(String userInput) {","lastModifiedDate":"2021-08-21"},{"lineNumber":30,"author":{"gitId":"twothicc"},"content":"        // Only exactly \"list\" will be accepted for ListCommand.","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"twothicc"},"content":"        if (userInput.equals(Commands.LIST.getCommand())) {","lastModifiedDate":"2021-08-21"},{"lineNumber":32,"author":{"gitId":"twothicc"},"content":"            // Print tasks","lastModifiedDate":"2021-08-21"},{"lineNumber":33,"author":{"gitId":"twothicc"},"content":"            return new ListCommand(userInput);","lastModifiedDate":"2021-08-21"},{"lineNumber":34,"author":{"gitId":"twothicc"},"content":"        } else {","lastModifiedDate":"2021-08-21"},{"lineNumber":35,"author":{"gitId":"twothicc"},"content":"            if (userInput.startsWith(Commands.DONE.getCommand())) {","lastModifiedDate":"2021-08-21"},{"lineNumber":36,"author":{"gitId":"twothicc"},"content":"                // Mark task as done.","lastModifiedDate":"2021-08-21"},{"lineNumber":37,"author":{"gitId":"twothicc"},"content":"                return new MarkCommand(userInput);","lastModifiedDate":"2021-08-21"},{"lineNumber":38,"author":{"gitId":"twothicc"},"content":"            } else if (userInput.startsWith(Commands.DELETE.getCommand())) {","lastModifiedDate":"2021-08-21"},{"lineNumber":39,"author":{"gitId":"twothicc"},"content":"                // Delete a task.","lastModifiedDate":"2021-08-21"},{"lineNumber":40,"author":{"gitId":"twothicc"},"content":"                return new DeleteCommand(userInput);","lastModifiedDate":"2021-08-21"},{"lineNumber":41,"author":{"gitId":"twothicc"},"content":"            } else if (userInput.startsWith(Commands.DATE.getCommand())) {","lastModifiedDate":"2021-08-21"},{"lineNumber":42,"author":{"gitId":"twothicc"},"content":"                // Print tasks that fall on given date.","lastModifiedDate":"2021-08-21"},{"lineNumber":43,"author":{"gitId":"twothicc"},"content":"                return new DateCommand(userInput);","lastModifiedDate":"2021-08-21"},{"lineNumber":44,"author":{"gitId":"twothicc"},"content":"            } else if (userInput.startsWith(Commands.FIND.getCommand())) {","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"twothicc"},"content":"                // Print tasks with descriptions that contain search input.","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"twothicc"},"content":"                return new FindCommand(userInput);","lastModifiedDate":"2021-08-22"},{"lineNumber":47,"author":{"gitId":"twothicc"},"content":"            } else {","lastModifiedDate":"2021-08-21"},{"lineNumber":48,"author":{"gitId":"twothicc"},"content":"                // Add a task to tasks.","lastModifiedDate":"2021-08-21"},{"lineNumber":49,"author":{"gitId":"twothicc"},"content":"                return new AddCommand(userInput);","lastModifiedDate":"2021-08-21"},{"lineNumber":50,"author":{"gitId":"twothicc"},"content":"            }","lastModifiedDate":"2021-08-21"},{"lineNumber":51,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":52,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":53,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":54,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":55,"author":{"gitId":"twothicc"},"content":"     * Checks user input for missing spaces and invalid commands.","lastModifiedDate":"2021-08-22"},{"lineNumber":56,"author":{"gitId":"twothicc"},"content":"     * This only checks for missing spaces in initial command and if the initial command is invalid.","lastModifiedDate":"2021-08-22"},{"lineNumber":57,"author":{"gitId":"twothicc"},"content":"     * For instance, in \"event task description/at 1/1/2020\", it only checks if there is a space following","lastModifiedDate":"2021-08-22"},{"lineNumber":58,"author":{"gitId":"twothicc"},"content":"     * the initial command \"event\" and if the initial command \"event\" is a valid command.","lastModifiedDate":"2021-08-22"},{"lineNumber":59,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":60,"author":{"gitId":"twothicc"},"content":"     * @param userInput User\u0027s input into Duke chatbot.","lastModifiedDate":"2021-08-22"},{"lineNumber":61,"author":{"gitId":"twothicc"},"content":"     * @param command The starting command of user\u0027s input.","lastModifiedDate":"2021-08-22"},{"lineNumber":62,"author":{"gitId":"twothicc"},"content":"     * @param exceptionMessage Error message to be printed when user input is invalid.","lastModifiedDate":"2021-08-22"},{"lineNumber":63,"author":{"gitId":"twothicc"},"content":"     * @throws DukeException If user command is invalid.","lastModifiedDate":"2021-08-22"},{"lineNumber":64,"author":{"gitId":"twothicc"},"content":"     * @throws DukeException If user input contains missing spaces.","lastModifiedDate":"2021-08-22"},{"lineNumber":65,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":66,"author":{"gitId":"twothicc"},"content":"    public static void checkInputValidity(String userInput, String command,","lastModifiedDate":"2021-08-22"},{"lineNumber":67,"author":{"gitId":"twothicc"},"content":"            String exceptionMessage) throws DukeException {","lastModifiedDate":"2021-08-22"},{"lineNumber":68,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":69,"author":{"gitId":"twothicc"},"content":"        // If userInput is \u003c\u003d command length, it definitely does not contain desired inputs.","lastModifiedDate":"2021-08-22"},{"lineNumber":70,"author":{"gitId":"twothicc"},"content":"        if (userInput.length() \u003c\u003d command.length()) {","lastModifiedDate":"2021-08-22"},{"lineNumber":71,"author":{"gitId":"twothicc"},"content":"            throw new DukeException(exceptionMessage);","lastModifiedDate":"2021-08-22"},{"lineNumber":72,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":73,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":74,"author":{"gitId":"twothicc"},"content":"        // If userInput after command is not space, tell users that they are missing space.","lastModifiedDate":"2021-08-22"},{"lineNumber":75,"author":{"gitId":"twothicc"},"content":"        if (userInput.charAt(command.length()) !\u003d \u0027 \u0027) {","lastModifiedDate":"2021-08-22"},{"lineNumber":76,"author":{"gitId":"twothicc"},"content":"            throw new DukeException(Ui.exceptionMissingSpaceAfterCommand(command));","lastModifiedDate":"2021-08-22"},{"lineNumber":77,"author":{"gitId":"twothicc"},"content":"        } else {","lastModifiedDate":"2021-08-22"},{"lineNumber":78,"author":{"gitId":"twothicc"},"content":"            // If user input is like so \"command \", it also does not contain desired inputs, despite having space.","lastModifiedDate":"2021-08-22"},{"lineNumber":79,"author":{"gitId":"twothicc"},"content":"            if (userInput.length() \u003d\u003d (command.length() + 1)) {","lastModifiedDate":"2021-08-22"},{"lineNumber":80,"author":{"gitId":"twothicc"},"content":"                throw new DukeException(exceptionMessage);","lastModifiedDate":"2021-08-22"},{"lineNumber":81,"author":{"gitId":"twothicc"},"content":"            }","lastModifiedDate":"2021-08-22"},{"lineNumber":82,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":83,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":84,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":85,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":86,"author":{"gitId":"twothicc"},"content":"     * Prepends zeroes to the string till a desired length of the output string.","lastModifiedDate":"2021-08-22"},{"lineNumber":87,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":88,"author":{"gitId":"twothicc"},"content":"     * @param original String to prepend zeroes to.","lastModifiedDate":"2021-08-22"},{"lineNumber":89,"author":{"gitId":"twothicc"},"content":"     * @param expected Length of output string.","lastModifiedDate":"2021-08-22"},{"lineNumber":90,"author":{"gitId":"twothicc"},"content":"     * @return String prepended with zeroes till desired length.","lastModifiedDate":"2021-08-22"},{"lineNumber":91,"author":{"gitId":"twothicc"},"content":"     * @throws DukeException If string input is larger than expected length of output string.","lastModifiedDate":"2021-08-22"},{"lineNumber":92,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":93,"author":{"gitId":"twothicc"},"content":"    private static String padZeros(String original, int expected) throws DukeException {","lastModifiedDate":"2021-08-20"},{"lineNumber":94,"author":{"gitId":"twothicc"},"content":"        String output \u003d original;","lastModifiedDate":"2021-08-20"},{"lineNumber":95,"author":{"gitId":"twothicc"},"content":"        if (original.length() \u003c expected) {","lastModifiedDate":"2021-08-20"},{"lineNumber":96,"author":{"gitId":"twothicc"},"content":"            for (int i \u003d 0; i \u003c (expected - original.length()); i++) {","lastModifiedDate":"2021-08-20"},{"lineNumber":97,"author":{"gitId":"twothicc"},"content":"                output \u003d \"0\" + original;","lastModifiedDate":"2021-08-20"},{"lineNumber":98,"author":{"gitId":"twothicc"},"content":"            }","lastModifiedDate":"2021-08-20"},{"lineNumber":99,"author":{"gitId":"twothicc"},"content":"        } else if (original.length() \u003e expected) {","lastModifiedDate":"2021-08-20"},{"lineNumber":100,"author":{"gitId":"twothicc"},"content":"            throw new DukeException(Ui.exceptionInvalidDateTimeFormat());","lastModifiedDate":"2021-08-21"},{"lineNumber":101,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":102,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":103,"author":{"gitId":"twothicc"},"content":"        return output;","lastModifiedDate":"2021-08-20"},{"lineNumber":104,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":105,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":106,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":107,"author":{"gitId":"twothicc"},"content":"     * Parses a LocalDate into a string format \"d MMMM yyyy\" to be printed to the user.","lastModifiedDate":"2021-08-22"},{"lineNumber":108,"author":{"gitId":"twothicc"},"content":"     * For instance, the LocalDate equivalent of 2020-01-01 will be parsed into \"1 January 2020\".","lastModifiedDate":"2021-08-22"},{"lineNumber":109,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":110,"author":{"gitId":"twothicc"},"content":"     * @param localDate LocalDate to be parsed.","lastModifiedDate":"2021-08-22"},{"lineNumber":111,"author":{"gitId":"twothicc"},"content":"     * @return Formatted string representing the date of LocalDate in d MMMM yyyy format.","lastModifiedDate":"2021-08-22"},{"lineNumber":112,"author":{"gitId":"twothicc"},"content":"     * @throws DukeException","lastModifiedDate":"2021-08-22"},{"lineNumber":113,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":114,"author":{"gitId":"twothicc"},"content":"    public static String parseLocalDate(LocalDate localDate) throws DukeException {","lastModifiedDate":"2021-08-20"},{"lineNumber":115,"author":{"gitId":"twothicc"},"content":"        try {","lastModifiedDate":"2021-08-20"},{"lineNumber":116,"author":{"gitId":"twothicc"},"content":"            return localDate.format(DateTimeFormatter.ofPattern(\"d MMMM yyyy\"));","lastModifiedDate":"2021-08-20"},{"lineNumber":117,"author":{"gitId":"twothicc"},"content":"        } catch (DateTimeException dateTimeException) {","lastModifiedDate":"2021-08-20"},{"lineNumber":118,"author":{"gitId":"twothicc"},"content":"            throw new DukeException(Ui.exceptionInvalidLocalDate());","lastModifiedDate":"2021-08-21"},{"lineNumber":119,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":120,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":121,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":122,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":123,"author":{"gitId":"twothicc"},"content":"     * Parses a formatted string into LocalDate.","lastModifiedDate":"2021-08-22"},{"lineNumber":124,"author":{"gitId":"twothicc"},"content":"     * The formatted string must be of the format \"dd/mm/yyyy\".","lastModifiedDate":"2021-08-22"},{"lineNumber":125,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":126,"author":{"gitId":"twothicc"},"content":"     * @param dateString Formatted string to be parsed.","lastModifiedDate":"2021-08-22"},{"lineNumber":127,"author":{"gitId":"twothicc"},"content":"     * @return LocalDate equivalent of the date represented by dateString.","lastModifiedDate":"2021-08-22"},{"lineNumber":128,"author":{"gitId":"twothicc"},"content":"     * @throws DukeException If dateString is of an invalid date format.","lastModifiedDate":"2021-08-22"},{"lineNumber":129,"author":{"gitId":"twothicc"},"content":"     * @throws DukeException If dateString represents a date later than \"+999999999-12-31\" or","lastModifiedDate":"2021-08-22"},{"lineNumber":130,"author":{"gitId":"twothicc"},"content":"     *                       earlier than \"-999999999-01-01\".","lastModifiedDate":"2021-08-22"},{"lineNumber":131,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":132,"author":{"gitId":"twothicc"},"content":"    public static LocalDate toLocalDate(String dateString) throws DukeException {","lastModifiedDate":"2021-08-20"},{"lineNumber":133,"author":{"gitId":"twothicc"},"content":"        String[] split \u003d dateString.split(\"[/\\\\s]\");","lastModifiedDate":"2021-08-20"},{"lineNumber":134,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":135,"author":{"gitId":"twothicc"},"content":"        // Check if split has 3 elements. If not, this is already an invalid date format.","lastModifiedDate":"2021-08-21"},{"lineNumber":136,"author":{"gitId":"twothicc"},"content":"        if (split.length !\u003d 3) {","lastModifiedDate":"2021-08-21"},{"lineNumber":137,"author":{"gitId":"twothicc"},"content":"            throw new DukeException(Ui.exceptionInvalidDateTimeFormat());","lastModifiedDate":"2021-08-21"},{"lineNumber":138,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":139,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":140,"author":{"gitId":"twothicc"},"content":"        String date \u003d padZeros(split[0], 2);","lastModifiedDate":"2021-08-20"},{"lineNumber":141,"author":{"gitId":"twothicc"},"content":"        String month \u003d padZeros(split[1], 2);","lastModifiedDate":"2021-08-20"},{"lineNumber":142,"author":{"gitId":"twothicc"},"content":"        String year \u003d padZeros(split[2], 4);","lastModifiedDate":"2021-08-20"},{"lineNumber":143,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":144,"author":{"gitId":"twothicc"},"content":"        StringBuilder stringBuilder \u003d new StringBuilder();","lastModifiedDate":"2021-08-20"},{"lineNumber":145,"author":{"gitId":"twothicc"},"content":"        stringBuilder.append(year).append(\"-\");","lastModifiedDate":"2021-08-20"},{"lineNumber":146,"author":{"gitId":"twothicc"},"content":"        stringBuilder.append(month).append(\"-\");","lastModifiedDate":"2021-08-20"},{"lineNumber":147,"author":{"gitId":"twothicc"},"content":"        stringBuilder.append(date);","lastModifiedDate":"2021-08-20"},{"lineNumber":148,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":149,"author":{"gitId":"twothicc"},"content":"        LocalDate localDate;","lastModifiedDate":"2021-08-20"},{"lineNumber":150,"author":{"gitId":"twothicc"},"content":"        try {","lastModifiedDate":"2021-08-20"},{"lineNumber":151,"author":{"gitId":"twothicc"},"content":"            localDate \u003d LocalDate.parse(stringBuilder.toString());","lastModifiedDate":"2021-08-20"},{"lineNumber":152,"author":{"gitId":"twothicc"},"content":"        } catch (DateTimeParseException dateTimeParseException) {","lastModifiedDate":"2021-08-20"},{"lineNumber":153,"author":{"gitId":"twothicc"},"content":"            throw new DukeException(Ui.exceptionInvalidDateTimeFormat());","lastModifiedDate":"2021-08-21"},{"lineNumber":154,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":155,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":156,"author":{"gitId":"twothicc"},"content":"        return localDate;","lastModifiedDate":"2021-08-20"},{"lineNumber":157,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":158,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":159,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":160,"author":{"gitId":"twothicc"},"content":"     * Parses index provided in user input into an int.","lastModifiedDate":"2021-08-22"},{"lineNumber":161,"author":{"gitId":"twothicc"},"content":"     * For instance, when user inputs \"done 1\", calling parseUserNumInput on this input will return 1.","lastModifiedDate":"2021-08-22"},{"lineNumber":162,"author":{"gitId":"twothicc"},"content":"     * In this case, the input\u0027s identifying command is \"done\".","lastModifiedDate":"2021-08-22"},{"lineNumber":163,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":164,"author":{"gitId":"twothicc"},"content":"     * @param userInput User\u0027s input into Duke chatbot.","lastModifiedDate":"2021-08-22"},{"lineNumber":165,"author":{"gitId":"twothicc"},"content":"     * @param command The identifying command in user input.","lastModifiedDate":"2021-08-22"},{"lineNumber":166,"author":{"gitId":"twothicc"},"content":"     * @return An int representing an index.","lastModifiedDate":"2021-08-22"},{"lineNumber":167,"author":{"gitId":"twothicc"},"content":"     * @throws DukeException","lastModifiedDate":"2021-08-22"},{"lineNumber":168,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":169,"author":{"gitId":"twothicc"},"content":"    public static int parseUserNumInput(String userInput, Commands command) throws DukeException {","lastModifiedDate":"2021-08-21"},{"lineNumber":170,"author":{"gitId":"twothicc"},"content":"        // Parses integer in user input. Invalid user input could throw NumberFormatException.","lastModifiedDate":"2021-08-20"},{"lineNumber":171,"author":{"gitId":"twothicc"},"content":"        try {","lastModifiedDate":"2021-08-20"},{"lineNumber":172,"author":{"gitId":"twothicc"},"content":"            // Add 1 as user\u0027s number input is separated from command by 1 space.","lastModifiedDate":"2021-08-20"},{"lineNumber":173,"author":{"gitId":"twothicc"},"content":"            return Integer.parseInt(userInput.substring(command.getLength() + 1));","lastModifiedDate":"2021-08-20"},{"lineNumber":174,"author":{"gitId":"twothicc"},"content":"        } catch (NumberFormatException nfe) {","lastModifiedDate":"2021-08-20"},{"lineNumber":175,"author":{"gitId":"twothicc"},"content":"            // Invalid user input cannot be parsed into Integer.","lastModifiedDate":"2021-08-20"},{"lineNumber":176,"author":{"gitId":"twothicc"},"content":"            throw new DukeException(Ui.exceptionInvalidNumberInput(command));","lastModifiedDate":"2021-08-21"},{"lineNumber":177,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":178,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":179,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":180,"author":{"gitId":"twothicc"},"content":"    private static int findIndex(String s, Character c) {","lastModifiedDate":"2021-08-20"},{"lineNumber":181,"author":{"gitId":"twothicc"},"content":"        for (int i \u003d 0; i \u003c s.length(); i++) {","lastModifiedDate":"2021-08-20"},{"lineNumber":182,"author":{"gitId":"twothicc"},"content":"            if (s.charAt(i) \u003d\u003d c) {","lastModifiedDate":"2021-08-20"},{"lineNumber":183,"author":{"gitId":"twothicc"},"content":"                return i;","lastModifiedDate":"2021-08-20"},{"lineNumber":184,"author":{"gitId":"twothicc"},"content":"            }","lastModifiedDate":"2021-08-20"},{"lineNumber":185,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":186,"author":{"gitId":"twothicc"},"content":"        return -1;","lastModifiedDate":"2021-08-20"},{"lineNumber":187,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":188,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":189,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":190,"author":{"gitId":"twothicc"},"content":"     * Parses user description into description and time based on initial command and descriptor used.","lastModifiedDate":"2021-08-22"},{"lineNumber":191,"author":{"gitId":"twothicc"},"content":"     * User description is defined to be the part of user\u0027s input following the initial command.","lastModifiedDate":"2021-08-22"},{"lineNumber":192,"author":{"gitId":"twothicc"},"content":"     * For instance, the user description of \"event task description /at 1/1/2020\" is","lastModifiedDate":"2021-08-22"},{"lineNumber":193,"author":{"gitId":"twothicc"},"content":"     * \"task description /at 1/1/2020\", where the initial command \"event\" and the space after it is removed.","lastModifiedDate":"2021-08-22"},{"lineNumber":194,"author":{"gitId":"twothicc"},"content":"     * An Event would require descriptor \"at\" whereas a Deadline would require descriptor \"by\".","lastModifiedDate":"2021-08-22"},{"lineNumber":195,"author":{"gitId":"twothicc"},"content":"     * The separator is a char that comes before the descriptor.","lastModifiedDate":"2021-08-22"},{"lineNumber":196,"author":{"gitId":"twothicc"},"content":"     * For instance, \u0027/\u0027 is the separator in \"/at\".","lastModifiedDate":"2021-08-22"},{"lineNumber":197,"author":{"gitId":"twothicc"},"content":"     * Calling parseUserDescriptionInput on the example description will give a String array","lastModifiedDate":"2021-08-22"},{"lineNumber":198,"author":{"gitId":"twothicc"},"content":"     * of 2 elements [\"task description\", \"1/1/2020\"].","lastModifiedDate":"2021-08-22"},{"lineNumber":199,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":200,"author":{"gitId":"twothicc"},"content":"     * @param userDescription User\u0027s input into Duke chatbot.","lastModifiedDate":"2021-08-22"},{"lineNumber":201,"author":{"gitId":"twothicc"},"content":"     * @param descriptor Descriptor to separate description and time with.","lastModifiedDate":"2021-08-22"},{"lineNumber":202,"author":{"gitId":"twothicc"},"content":"     * @param separator char that comes before the descriptor.","lastModifiedDate":"2021-08-22"},{"lineNumber":203,"author":{"gitId":"twothicc"},"content":"     * @param command The initial command in user\u0027s input.","lastModifiedDate":"2021-08-22"},{"lineNumber":204,"author":{"gitId":"twothicc"},"content":"     * @return String array of 2 elements with the task description at index 0 and time at index 1.","lastModifiedDate":"2021-08-22"},{"lineNumber":205,"author":{"gitId":"twothicc"},"content":"     * @throws DukeException If user input is missing the expected descriptor or a time input.","lastModifiedDate":"2021-08-22"},{"lineNumber":206,"author":{"gitId":"twothicc"},"content":"     * @throws DukeException If user input is missing a task description.","lastModifiedDate":"2021-08-22"},{"lineNumber":207,"author":{"gitId":"twothicc"},"content":"     * @throws DukeException If user input is using the wrong descriptor.","lastModifiedDate":"2021-08-22"},{"lineNumber":208,"author":{"gitId":"twothicc"},"content":"     * @throws DukeException If user input has missing spaces.","lastModifiedDate":"2021-08-22"},{"lineNumber":209,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":210,"author":{"gitId":"twothicc"},"content":"    public static String[] parseUserDescriptionInput(String userDescription, Descriptors descriptor,","lastModifiedDate":"2021-08-21"},{"lineNumber":211,"author":{"gitId":"twothicc"},"content":"                                                      char separator, Commands command) throws DukeException {","lastModifiedDate":"2021-08-22"},{"lineNumber":212,"author":{"gitId":"twothicc"},"content":"        // Index of separator in userDescription.","lastModifiedDate":"2021-08-20"},{"lineNumber":213,"author":{"gitId":"twothicc"},"content":"        int separatorIdx \u003d findIndex(userDescription, separator);","lastModifiedDate":"2021-08-20"},{"lineNumber":214,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":215,"author":{"gitId":"twothicc"},"content":"        // Index of space after descriptor","lastModifiedDate":"2021-08-20"},{"lineNumber":216,"author":{"gitId":"twothicc"},"content":"        int indexDescriptorSpace \u003d separatorIdx + descriptor.getLength() + 1;","lastModifiedDate":"2021-08-20"},{"lineNumber":217,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":218,"author":{"gitId":"twothicc"},"content":"        // Check if separator exists. Then check if there could be time input after descriptor.","lastModifiedDate":"2021-08-22"},{"lineNumber":219,"author":{"gitId":"twothicc"},"content":"        if ((separatorIdx \u003d\u003d -1) || (userDescription.length() \u003c\u003d indexDescriptorSpace)) {","lastModifiedDate":"2021-08-20"},{"lineNumber":220,"author":{"gitId":"twothicc"},"content":"            throw new DukeException(Ui.exceptionMissingDescriptor(descriptor, command));","lastModifiedDate":"2021-08-21"},{"lineNumber":221,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":222,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":223,"author":{"gitId":"twothicc"},"content":"        // Events and duke.task.Deadline could have empty tasks but taken as they do due to their descriptors and time.","lastModifiedDate":"2021-08-21"},{"lineNumber":224,"author":{"gitId":"twothicc"},"content":"        // Need to run another check on whether their task descriptions are empty.","lastModifiedDate":"2021-08-21"},{"lineNumber":225,"author":{"gitId":"twothicc"},"content":"        if (separatorIdx \u003d\u003d 0) {","lastModifiedDate":"2021-08-21"},{"lineNumber":226,"author":{"gitId":"twothicc"},"content":"            throw new DukeException(Ui.exceptionMissingTaskDescription(command.getCommand()));","lastModifiedDate":"2021-08-21"},{"lineNumber":227,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":228,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":229,"author":{"gitId":"twothicc"},"content":"        // Index of first character following space after descriptor.","lastModifiedDate":"2021-08-22"},{"lineNumber":230,"author":{"gitId":"twothicc"},"content":"        int indexAfterDescriptorSpace \u003d separatorIdx + descriptor.getLength() + 2;","lastModifiedDate":"2021-08-22"},{"lineNumber":231,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":232,"author":{"gitId":"twothicc"},"content":"        // Check if descriptor matches descriptor parameter.","lastModifiedDate":"2021-08-22"},{"lineNumber":233,"author":{"gitId":"twothicc"},"content":"        String actualDescriptor \u003d userDescription.substring(separatorIdx + 1, indexAfterDescriptorSpace - 1);","lastModifiedDate":"2021-08-22"},{"lineNumber":234,"author":{"gitId":"twothicc"},"content":"        boolean isDescriptorIncorrect \u003d false;","lastModifiedDate":"2021-08-22"},{"lineNumber":235,"author":{"gitId":"twothicc"},"content":"        if (!actualDescriptor.equals(descriptor.getDescriptor())) {","lastModifiedDate":"2021-08-22"},{"lineNumber":236,"author":{"gitId":"twothicc"},"content":"            isDescriptorIncorrect \u003d true;","lastModifiedDate":"2021-08-22"},{"lineNumber":237,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":238,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":239,"author":{"gitId":"twothicc"},"content":"        // Check whether the front of separatorIdx is an empty space.","lastModifiedDate":"2021-08-21"},{"lineNumber":240,"author":{"gitId":"twothicc"},"content":"        boolean isNoSpaceBeforeSeparator \u003d false;","lastModifiedDate":"2021-08-22"},{"lineNumber":241,"author":{"gitId":"twothicc"},"content":"        if (userDescription.charAt(separatorIdx - 1) !\u003d \u0027 \u0027) {","lastModifiedDate":"2021-08-21"},{"lineNumber":242,"author":{"gitId":"twothicc"},"content":"            isNoSpaceBeforeSeparator \u003d true;","lastModifiedDate":"2021-08-22"},{"lineNumber":243,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":244,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":245,"author":{"gitId":"twothicc"},"content":"        // If descriptor wrong and no space before separator, it is likely that user did not provide descriptor.","lastModifiedDate":"2021-08-22"},{"lineNumber":246,"author":{"gitId":"twothicc"},"content":"        if (isDescriptorIncorrect \u0026\u0026 isNoSpaceBeforeSeparator) {","lastModifiedDate":"2021-08-22"},{"lineNumber":247,"author":{"gitId":"twothicc"},"content":"            throw new DukeException(Ui.exceptionMissingDescriptor(descriptor, command));","lastModifiedDate":"2021-08-22"},{"lineNumber":248,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":249,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":250,"author":{"gitId":"twothicc"},"content":"        // If only descriptor wrong, user gave wrong descriptor.","lastModifiedDate":"2021-08-22"},{"lineNumber":251,"author":{"gitId":"twothicc"},"content":"        if (isDescriptorIncorrect) {","lastModifiedDate":"2021-08-22"},{"lineNumber":252,"author":{"gitId":"twothicc"},"content":"            throw new DukeException(Ui.exceptionWrongDescriptor(command, descriptor));","lastModifiedDate":"2021-08-22"},{"lineNumber":253,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":254,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":255,"author":{"gitId":"twothicc"},"content":"        // If only no space, user did not include space before separator.","lastModifiedDate":"2021-08-22"},{"lineNumber":256,"author":{"gitId":"twothicc"},"content":"        if (isNoSpaceBeforeSeparator) {","lastModifiedDate":"2021-08-22"},{"lineNumber":257,"author":{"gitId":"twothicc"},"content":"            throw new DukeException(Ui.exceptionMissingSpaceBeforeDescriptor(descriptor));","lastModifiedDate":"2021-08-22"},{"lineNumber":258,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":259,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":260,"author":{"gitId":"twothicc"},"content":"        // Check whether the back of descriptor is followed by a space.","lastModifiedDate":"2021-08-21"},{"lineNumber":261,"author":{"gitId":"twothicc"},"content":"        if (userDescription.charAt(indexAfterDescriptorSpace - 1) !\u003d \u0027 \u0027) {","lastModifiedDate":"2021-08-21"},{"lineNumber":262,"author":{"gitId":"twothicc"},"content":"            throw new DukeException(Ui.exceptionMissingSpaceAfterDescriptor(descriptor));","lastModifiedDate":"2021-08-21"},{"lineNumber":263,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":264,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":265,"author":{"gitId":"twothicc"},"content":"        // User\u0027s time input.","lastModifiedDate":"2021-08-20"},{"lineNumber":266,"author":{"gitId":"twothicc"},"content":"        String time \u003d userDescription.substring(indexAfterDescriptorSpace);","lastModifiedDate":"2021-08-20"},{"lineNumber":267,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":268,"author":{"gitId":"twothicc"},"content":"        // User\u0027s task description. Decrement by 1 as there is a space between task description and separator","lastModifiedDate":"2021-08-20"},{"lineNumber":269,"author":{"gitId":"twothicc"},"content":"        String commandDescription \u003d userDescription.substring(0, separatorIdx - 1);","lastModifiedDate":"2021-08-20"},{"lineNumber":270,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":271,"author":{"gitId":"twothicc"},"content":"        // Returns a String array with the task description and user input after descriptor.","lastModifiedDate":"2021-08-20"},{"lineNumber":272,"author":{"gitId":"twothicc"},"content":"        return new String[] {commandDescription, time};","lastModifiedDate":"2021-08-20"},{"lineNumber":273,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":274,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-08-20"}],"authorContributionMap":{"twothicc":274}},{"path":"src/main/java/duke/Storable.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"/**","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":" * The Storable interface ensures that any class that implements it will have the methods","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":" * readTasksFromData and saveTasksToData.","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":" */","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"public interface Storable {","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"     * Reads tasks from a specified file.","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"     * @return TaskList containing the tasks read from specified file.","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"     * @throws DukeException If task cannot be read from specified file.","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"    TaskList readTasksFromData() throws DukeException;","lastModifiedDate":"2021-08-21"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"     * Saves tasks to a specified file.","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":"     * @param taskList TaskList containing the tasks to be saved to specified file.","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"twothicc"},"content":"     * @throws DukeException If task cannot be saved to specified file.","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"twothicc"},"content":"    void saveTasksToData(TaskList taskList) throws DukeException;","lastModifiedDate":"2021-08-21"},{"lineNumber":24,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"twothicc":24}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-08-21"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"import duke.task.Event;","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"import duke.task.Todo;","lastModifiedDate":"2021-08-21"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-20"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"import java.nio.file.Files;","lastModifiedDate":"2021-08-20"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-08-20"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2021-08-20"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"import java.time.DateTimeException;","lastModifiedDate":"2021-08-20"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-20"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-20"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-20"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"import java.util.List;","lastModifiedDate":"2021-08-20"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"/**","lastModifiedDate":"2021-08-20"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":" * Deals with loading tasks from save file and saving tasks in the file.","lastModifiedDate":"2021-08-20"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":" */","lastModifiedDate":"2021-08-20"},{"lineNumber":21,"author":{"gitId":"twothicc"},"content":"public class Storage implements Storable {","lastModifiedDate":"2021-08-21"},{"lineNumber":22,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":23,"author":{"gitId":"twothicc"},"content":"    /** Filename of file to be saved to */","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"twothicc"},"content":"    private final String SAVE_FILENAME;","lastModifiedDate":"2021-08-20"},{"lineNumber":25,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":26,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"twothicc"},"content":"     * Constructor for Storage.","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"twothicc"},"content":"     * Creates a Storage with a specified filename as the target file for save and read operations.","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"twothicc"},"content":"     * @param fileName filename of file to be saved to and read from.","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"twothicc"},"content":"    public Storage(String fileName) {","lastModifiedDate":"2021-08-20"},{"lineNumber":33,"author":{"gitId":"twothicc"},"content":"        this.SAVE_FILENAME \u003d fileName;","lastModifiedDate":"2021-08-20"},{"lineNumber":34,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":35,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":36,"author":{"gitId":"twothicc"},"content":"    /** Tasks saved are separated by SAVE_SEPARATOR */","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"twothicc"},"content":"    private static final String SAVE_SEPARATOR \u003d \" ~ \";","lastModifiedDate":"2021-08-20"},{"lineNumber":38,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":39,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"twothicc"},"content":"     * Converts LocalDate into \"dd/MM/yyyy\" string format for saving.","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"twothicc"},"content":"     * @param localDate LocalDate to be converted.","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"twothicc"},"content":"     * @return Formatted String suitable for saving.","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"twothicc"},"content":"     * @throws DukeException If localDate cannot be parsed into save format.","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"twothicc"},"content":"    private static String toSaveDateFormat(LocalDate localDate) throws DukeException {","lastModifiedDate":"2021-08-20"},{"lineNumber":47,"author":{"gitId":"twothicc"},"content":"        try {","lastModifiedDate":"2021-08-20"},{"lineNumber":48,"author":{"gitId":"twothicc"},"content":"            return localDate.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"));","lastModifiedDate":"2021-08-20"},{"lineNumber":49,"author":{"gitId":"twothicc"},"content":"        } catch (DateTimeException dateTimeException) {","lastModifiedDate":"2021-08-20"},{"lineNumber":50,"author":{"gitId":"twothicc"},"content":"            throw new DukeException(Ui.exceptionInvalidLocalDate());","lastModifiedDate":"2021-08-21"},{"lineNumber":51,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":52,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":53,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":54,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":55,"author":{"gitId":"twothicc"},"content":"     * Converts a Task into a formatted string suitable for saving.","lastModifiedDate":"2021-08-22"},{"lineNumber":56,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":57,"author":{"gitId":"twothicc"},"content":"     * @param task Task to be converted.","lastModifiedDate":"2021-08-22"},{"lineNumber":58,"author":{"gitId":"twothicc"},"content":"     * @return Formatted String suitable for saving.","lastModifiedDate":"2021-08-22"},{"lineNumber":59,"author":{"gitId":"twothicc"},"content":"     * @throws DukeException If date cannot be parsed to save format.","lastModifiedDate":"2021-08-22"},{"lineNumber":60,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":61,"author":{"gitId":"twothicc"},"content":"    private static String toSaveFormat(Task task) throws DukeException {","lastModifiedDate":"2021-08-20"},{"lineNumber":62,"author":{"gitId":"twothicc"},"content":"        // Initialize StringBuilder.","lastModifiedDate":"2021-08-20"},{"lineNumber":63,"author":{"gitId":"twothicc"},"content":"        StringBuilder stringBuilder \u003d new StringBuilder();","lastModifiedDate":"2021-08-20"},{"lineNumber":64,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":65,"author":{"gitId":"twothicc"},"content":"        // Get task type, done status of task.","lastModifiedDate":"2021-08-20"},{"lineNumber":66,"author":{"gitId":"twothicc"},"content":"        String taskType \u003d task.getTaskType();","lastModifiedDate":"2021-08-20"},{"lineNumber":67,"author":{"gitId":"twothicc"},"content":"        int done \u003d task.getIsDone() ? 1 : 0;","lastModifiedDate":"2021-08-21"},{"lineNumber":68,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":69,"author":{"gitId":"twothicc"},"content":"        // Build corresponding save string from task.","lastModifiedDate":"2021-08-20"},{"lineNumber":70,"author":{"gitId":"twothicc"},"content":"        stringBuilder.append(taskType).append(SAVE_SEPARATOR);","lastModifiedDate":"2021-08-20"},{"lineNumber":71,"author":{"gitId":"twothicc"},"content":"        stringBuilder.append(done).append(SAVE_SEPARATOR);","lastModifiedDate":"2021-08-20"},{"lineNumber":72,"author":{"gitId":"twothicc"},"content":"        stringBuilder.append(task.getDescription());","lastModifiedDate":"2021-08-21"},{"lineNumber":73,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":74,"author":{"gitId":"twothicc"},"content":"        // duke.task.Deadline tasks have time, so it is obtained and appended via stringBuilder.","lastModifiedDate":"2021-08-21"},{"lineNumber":75,"author":{"gitId":"twothicc"},"content":"        if (taskType.equals(\"D\")) {","lastModifiedDate":"2021-08-20"},{"lineNumber":76,"author":{"gitId":"twothicc"},"content":"            Deadline deadline \u003d (Deadline) task;","lastModifiedDate":"2021-08-20"},{"lineNumber":77,"author":{"gitId":"twothicc"},"content":"            LocalDate localDate \u003d deadline.getTime();","lastModifiedDate":"2021-08-20"},{"lineNumber":78,"author":{"gitId":"twothicc"},"content":"            String time \u003d toSaveDateFormat(localDate);","lastModifiedDate":"2021-08-20"},{"lineNumber":79,"author":{"gitId":"twothicc"},"content":"            stringBuilder.append(SAVE_SEPARATOR).append(time);","lastModifiedDate":"2021-08-20"},{"lineNumber":80,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":81,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":82,"author":{"gitId":"twothicc"},"content":"        // duke.task.Event tasks have time, so it is obtained and appended via stringBuilder.","lastModifiedDate":"2021-08-21"},{"lineNumber":83,"author":{"gitId":"twothicc"},"content":"        if (taskType.equals(\"E\")) {","lastModifiedDate":"2021-08-20"},{"lineNumber":84,"author":{"gitId":"twothicc"},"content":"            Event event \u003d (Event) task;","lastModifiedDate":"2021-08-20"},{"lineNumber":85,"author":{"gitId":"twothicc"},"content":"            LocalDate localDate \u003d event.getTime();","lastModifiedDate":"2021-08-20"},{"lineNumber":86,"author":{"gitId":"twothicc"},"content":"            String time \u003d toSaveDateFormat(localDate);","lastModifiedDate":"2021-08-20"},{"lineNumber":87,"author":{"gitId":"twothicc"},"content":"            stringBuilder.append(SAVE_SEPARATOR).append(time);","lastModifiedDate":"2021-08-20"},{"lineNumber":88,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":89,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":90,"author":{"gitId":"twothicc"},"content":"        return stringBuilder.toString();","lastModifiedDate":"2021-08-20"},{"lineNumber":91,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":92,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":93,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":94,"author":{"gitId":"twothicc"},"content":"     * Converts string read from specified file into corresponding tasks based on the string identifier.","lastModifiedDate":"2021-08-22"},{"lineNumber":95,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":96,"author":{"gitId":"twothicc"},"content":"     * @param save The read string.","lastModifiedDate":"2021-08-22"},{"lineNumber":97,"author":{"gitId":"twothicc"},"content":"     * @return Task corresponding to the read string.","lastModifiedDate":"2021-08-22"},{"lineNumber":98,"author":{"gitId":"twothicc"},"content":"     * @throws DukeException if string cannot be parsed to date.","lastModifiedDate":"2021-08-22"},{"lineNumber":99,"author":{"gitId":"twothicc"},"content":"     * @throws DukeException if string cannot be parsed to integer.","lastModifiedDate":"2021-08-22"},{"lineNumber":100,"author":{"gitId":"twothicc"},"content":"     * @throws DukeException if string does not have sufficient parts for the task it represents.","lastModifiedDate":"2021-08-22"},{"lineNumber":101,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":102,"author":{"gitId":"twothicc"},"content":"    private static Task parseSaveFormat(String save) throws DukeException {","lastModifiedDate":"2021-08-20"},{"lineNumber":103,"author":{"gitId":"twothicc"},"content":"        // Split save string by the save separator.","lastModifiedDate":"2021-08-20"},{"lineNumber":104,"author":{"gitId":"twothicc"},"content":"        String[] saveSplit \u003d save.split(SAVE_SEPARATOR);","lastModifiedDate":"2021-08-20"},{"lineNumber":105,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":106,"author":{"gitId":"twothicc"},"content":"        try {","lastModifiedDate":"2021-08-20"},{"lineNumber":107,"author":{"gitId":"twothicc"},"content":"            // Get the task type, done status, description of task from saveSplit.","lastModifiedDate":"2021-08-20"},{"lineNumber":108,"author":{"gitId":"twothicc"},"content":"            String taskType \u003d saveSplit[0];","lastModifiedDate":"2021-08-20"},{"lineNumber":109,"author":{"gitId":"twothicc"},"content":"            // Save would be corrupt if done status cannot be parsed to int.","lastModifiedDate":"2021-08-20"},{"lineNumber":110,"author":{"gitId":"twothicc"},"content":"            int isDone \u003d Integer.parseInt(saveSplit[1]);","lastModifiedDate":"2021-08-20"},{"lineNumber":111,"author":{"gitId":"twothicc"},"content":"            String description \u003d saveSplit[2];","lastModifiedDate":"2021-08-20"},{"lineNumber":112,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":113,"author":{"gitId":"twothicc"},"content":"            // Create corresponding duke.task.Task object.","lastModifiedDate":"2021-08-21"},{"lineNumber":114,"author":{"gitId":"twothicc"},"content":"            // Save would be corrupt if duke.task.Deadline and duke.task.Event tasks do not have time.","lastModifiedDate":"2021-08-21"},{"lineNumber":115,"author":{"gitId":"twothicc"},"content":"            Task task;","lastModifiedDate":"2021-08-20"},{"lineNumber":116,"author":{"gitId":"twothicc"},"content":"            switch (taskType) {","lastModifiedDate":"2021-08-20"},{"lineNumber":117,"author":{"gitId":"twothicc"},"content":"            case \"T\":","lastModifiedDate":"2021-08-20"},{"lineNumber":118,"author":{"gitId":"twothicc"},"content":"                task \u003d new Todo(description);","lastModifiedDate":"2021-08-20"},{"lineNumber":119,"author":{"gitId":"twothicc"},"content":"                break;","lastModifiedDate":"2021-08-20"},{"lineNumber":120,"author":{"gitId":"twothicc"},"content":"            case \"D\":","lastModifiedDate":"2021-08-20"},{"lineNumber":121,"author":{"gitId":"twothicc"},"content":"                LocalDate by \u003d Parser.toLocalDate(saveSplit[3]);","lastModifiedDate":"2021-08-20"},{"lineNumber":122,"author":{"gitId":"twothicc"},"content":"                task \u003d new Deadline(description, by);","lastModifiedDate":"2021-08-20"},{"lineNumber":123,"author":{"gitId":"twothicc"},"content":"                break;","lastModifiedDate":"2021-08-20"},{"lineNumber":124,"author":{"gitId":"twothicc"},"content":"            case \"E\":","lastModifiedDate":"2021-08-20"},{"lineNumber":125,"author":{"gitId":"twothicc"},"content":"                LocalDate at \u003d Parser.toLocalDate(saveSplit[3]);","lastModifiedDate":"2021-08-20"},{"lineNumber":126,"author":{"gitId":"twothicc"},"content":"                task \u003d new Event(description, at);","lastModifiedDate":"2021-08-20"},{"lineNumber":127,"author":{"gitId":"twothicc"},"content":"                break;","lastModifiedDate":"2021-08-20"},{"lineNumber":128,"author":{"gitId":"twothicc"},"content":"            default:","lastModifiedDate":"2021-08-20"},{"lineNumber":129,"author":{"gitId":"twothicc"},"content":"                throw new DukeException(Ui.exceptionCorruptSaveFile());","lastModifiedDate":"2021-08-21"},{"lineNumber":130,"author":{"gitId":"twothicc"},"content":"            }","lastModifiedDate":"2021-08-20"},{"lineNumber":131,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":132,"author":{"gitId":"twothicc"},"content":"            if (isDone \u003d\u003d 1) {","lastModifiedDate":"2021-08-20"},{"lineNumber":133,"author":{"gitId":"twothicc"},"content":"                task.markAsDone();","lastModifiedDate":"2021-08-20"},{"lineNumber":134,"author":{"gitId":"twothicc"},"content":"            }","lastModifiedDate":"2021-08-20"},{"lineNumber":135,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":136,"author":{"gitId":"twothicc"},"content":"            return task;","lastModifiedDate":"2021-08-20"},{"lineNumber":137,"author":{"gitId":"twothicc"},"content":"        } catch (NumberFormatException | IndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-20"},{"lineNumber":138,"author":{"gitId":"twothicc"},"content":"            throw new DukeException(Ui.exceptionCorruptSaveFile());","lastModifiedDate":"2021-08-21"},{"lineNumber":139,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":140,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":141,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":142,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":143,"author":{"gitId":"twothicc"},"content":"     * Reads tasks from specified file and returns a TaskList containing the retrieved tasks.","lastModifiedDate":"2021-08-22"},{"lineNumber":144,"author":{"gitId":"twothicc"},"content":"     * Doubles down as an initializer for the save file if the data directory and the save file are missing.","lastModifiedDate":"2021-08-22"},{"lineNumber":145,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":146,"author":{"gitId":"twothicc"},"content":"     * @return TaskList containing retrieved tasks.","lastModifiedDate":"2021-08-22"},{"lineNumber":147,"author":{"gitId":"twothicc"},"content":"     * @throws DukeException If there are errors reading the file.","lastModifiedDate":"2021-08-22"},{"lineNumber":148,"author":{"gitId":"twothicc"},"content":"     * @throws DukeException If there tasks cannot be parsed.","lastModifiedDate":"2021-08-22"},{"lineNumber":149,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":150,"author":{"gitId":"twothicc"},"content":"    public TaskList readTasksFromData() throws DukeException {","lastModifiedDate":"2021-08-21"},{"lineNumber":151,"author":{"gitId":"twothicc"},"content":"        // Initialize an ArrayList for duke.task.Task objects.","lastModifiedDate":"2021-08-21"},{"lineNumber":152,"author":{"gitId":"twothicc"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-20"},{"lineNumber":153,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":154,"author":{"gitId":"twothicc"},"content":"        // Get absolute path to save file.","lastModifiedDate":"2021-08-20"},{"lineNumber":155,"author":{"gitId":"twothicc"},"content":"        String cwd \u003d System.getProperty(\"user.dir\");","lastModifiedDate":"2021-08-20"},{"lineNumber":156,"author":{"gitId":"twothicc"},"content":"        Path absolutePathToSaveFile \u003d Paths.get(cwd, \"data\", this.SAVE_FILENAME);","lastModifiedDate":"2021-08-20"},{"lineNumber":157,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":158,"author":{"gitId":"twothicc"},"content":"        // Check if save file exists.","lastModifiedDate":"2021-08-20"},{"lineNumber":159,"author":{"gitId":"twothicc"},"content":"        boolean isSaveFileExist \u003d Files.exists(absolutePathToSaveFile);","lastModifiedDate":"2021-08-20"},{"lineNumber":160,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":161,"author":{"gitId":"twothicc"},"content":"        try {","lastModifiedDate":"2021-08-20"},{"lineNumber":162,"author":{"gitId":"twothicc"},"content":"            // If save file does not exist, create save file;","lastModifiedDate":"2021-08-20"},{"lineNumber":163,"author":{"gitId":"twothicc"},"content":"            if (!isSaveFileExist) {","lastModifiedDate":"2021-08-20"},{"lineNumber":164,"author":{"gitId":"twothicc"},"content":"                saveTasksToData(new TaskList(tasks));","lastModifiedDate":"2021-08-21"},{"lineNumber":165,"author":{"gitId":"twothicc"},"content":"            }","lastModifiedDate":"2021-08-20"},{"lineNumber":166,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":167,"author":{"gitId":"twothicc"},"content":"            // Read from save file.","lastModifiedDate":"2021-08-20"},{"lineNumber":168,"author":{"gitId":"twothicc"},"content":"            List\u003cString\u003e rawTasks \u003d Files.readAllLines(absolutePathToSaveFile);","lastModifiedDate":"2021-08-20"},{"lineNumber":169,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":170,"author":{"gitId":"twothicc"},"content":"            // Parse each line into a duke.task.Task object and save to tasks.","lastModifiedDate":"2021-08-21"},{"lineNumber":171,"author":{"gitId":"twothicc"},"content":"            for (int i \u003d 0; i \u003c rawTasks.size(); i++) {","lastModifiedDate":"2021-08-20"},{"lineNumber":172,"author":{"gitId":"twothicc"},"content":"                Task task \u003d parseSaveFormat(rawTasks.get(i));","lastModifiedDate":"2021-08-20"},{"lineNumber":173,"author":{"gitId":"twothicc"},"content":"                tasks.add(task);","lastModifiedDate":"2021-08-20"},{"lineNumber":174,"author":{"gitId":"twothicc"},"content":"            }","lastModifiedDate":"2021-08-20"},{"lineNumber":175,"author":{"gitId":"twothicc"},"content":"        } catch (IOException ioException) {","lastModifiedDate":"2021-08-20"},{"lineNumber":176,"author":{"gitId":"twothicc"},"content":"            // Failure to read from save file.","lastModifiedDate":"2021-08-20"},{"lineNumber":177,"author":{"gitId":"twothicc"},"content":"            throw new DukeException(Ui.exceptionCannotReadFile());","lastModifiedDate":"2021-08-21"},{"lineNumber":178,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":179,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":180,"author":{"gitId":"twothicc"},"content":"        return new TaskList(tasks);","lastModifiedDate":"2021-08-21"},{"lineNumber":181,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":182,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":183,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":184,"author":{"gitId":"twothicc"},"content":"     * Saves tasks to specified file.","lastModifiedDate":"2021-08-22"},{"lineNumber":185,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":186,"author":{"gitId":"twothicc"},"content":"     * @param taskList TaskList containing the tasks to be saved to specified file.","lastModifiedDate":"2021-08-22"},{"lineNumber":187,"author":{"gitId":"twothicc"},"content":"     * @throws DukeException If tasks cannot be written to save file.","lastModifiedDate":"2021-08-22"},{"lineNumber":188,"author":{"gitId":"twothicc"},"content":"     * @throws DukeException If tasks cannot be converted into their corresponding save formats.","lastModifiedDate":"2021-08-22"},{"lineNumber":189,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":190,"author":{"gitId":"twothicc"},"content":"    public void saveTasksToData(TaskList taskList) throws DukeException {","lastModifiedDate":"2021-08-20"},{"lineNumber":191,"author":{"gitId":"twothicc"},"content":"        // Extracts ArrayList from duke.TaskList object.","lastModifiedDate":"2021-08-21"},{"lineNumber":192,"author":{"gitId":"twothicc"},"content":"        ArrayList\u003cTask\u003e tasks \u003d taskList.getTasks();","lastModifiedDate":"2021-08-20"},{"lineNumber":193,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":194,"author":{"gitId":"twothicc"},"content":"        // Get the absolute path to data subdirectory of project directory.","lastModifiedDate":"2021-08-20"},{"lineNumber":195,"author":{"gitId":"twothicc"},"content":"        String cwd \u003d System.getProperty(\"user.dir\");","lastModifiedDate":"2021-08-20"},{"lineNumber":196,"author":{"gitId":"twothicc"},"content":"        Path absolutePathToDataDir \u003d Paths.get(cwd, \"data\");","lastModifiedDate":"2021-08-20"},{"lineNumber":197,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":198,"author":{"gitId":"twothicc"},"content":"        // Check if data directory exists.","lastModifiedDate":"2021-08-20"},{"lineNumber":199,"author":{"gitId":"twothicc"},"content":"        boolean isDirectoryExist \u003d Files.exists(absolutePathToDataDir);","lastModifiedDate":"2021-08-20"},{"lineNumber":200,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":201,"author":{"gitId":"twothicc"},"content":"        try {","lastModifiedDate":"2021-08-20"},{"lineNumber":202,"author":{"gitId":"twothicc"},"content":"            // If data directory does not exist, create one.","lastModifiedDate":"2021-08-20"},{"lineNumber":203,"author":{"gitId":"twothicc"},"content":"            if (!isDirectoryExist) {","lastModifiedDate":"2021-08-20"},{"lineNumber":204,"author":{"gitId":"twothicc"},"content":"                Files.createDirectory(absolutePathToDataDir);","lastModifiedDate":"2021-08-20"},{"lineNumber":205,"author":{"gitId":"twothicc"},"content":"            }","lastModifiedDate":"2021-08-20"},{"lineNumber":206,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":207,"author":{"gitId":"twothicc"},"content":"            // Get absolute path to save file.","lastModifiedDate":"2021-08-20"},{"lineNumber":208,"author":{"gitId":"twothicc"},"content":"            Path absolutePathToSaveFile \u003d Paths.get(absolutePathToDataDir.toString(), this.SAVE_FILENAME);","lastModifiedDate":"2021-08-20"},{"lineNumber":209,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":210,"author":{"gitId":"twothicc"},"content":"            // Check if file exists.","lastModifiedDate":"2021-08-20"},{"lineNumber":211,"author":{"gitId":"twothicc"},"content":"            boolean isSaveFileExist \u003d Files.exists(absolutePathToSaveFile);","lastModifiedDate":"2021-08-20"},{"lineNumber":212,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":213,"author":{"gitId":"twothicc"},"content":"            // If file does not exist, create it.","lastModifiedDate":"2021-08-20"},{"lineNumber":214,"author":{"gitId":"twothicc"},"content":"            if (!isSaveFileExist) {","lastModifiedDate":"2021-08-20"},{"lineNumber":215,"author":{"gitId":"twothicc"},"content":"                Files.createFile(absolutePathToSaveFile);","lastModifiedDate":"2021-08-20"},{"lineNumber":216,"author":{"gitId":"twothicc"},"content":"            }","lastModifiedDate":"2021-08-20"},{"lineNumber":217,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":218,"author":{"gitId":"twothicc"},"content":"            // Stop if there are no tasks to be saved.","lastModifiedDate":"2021-08-20"},{"lineNumber":219,"author":{"gitId":"twothicc"},"content":"            if (tasks.size() \u003d\u003d 0) {","lastModifiedDate":"2021-08-20"},{"lineNumber":220,"author":{"gitId":"twothicc"},"content":"                return;","lastModifiedDate":"2021-08-20"},{"lineNumber":221,"author":{"gitId":"twothicc"},"content":"            }","lastModifiedDate":"2021-08-20"},{"lineNumber":222,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":223,"author":{"gitId":"twothicc"},"content":"            // Generate string to be saved to save file.","lastModifiedDate":"2021-08-20"},{"lineNumber":224,"author":{"gitId":"twothicc"},"content":"            StringBuilder stringBuilder \u003d new StringBuilder();","lastModifiedDate":"2021-08-20"},{"lineNumber":225,"author":{"gitId":"twothicc"},"content":"            for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2021-08-20"},{"lineNumber":226,"author":{"gitId":"twothicc"},"content":"                String save \u003d toSaveFormat(tasks.get(i));","lastModifiedDate":"2021-08-20"},{"lineNumber":227,"author":{"gitId":"twothicc"},"content":"                stringBuilder.append(save);","lastModifiedDate":"2021-08-20"},{"lineNumber":228,"author":{"gitId":"twothicc"},"content":"                // If last task in tasks, no need to append newline.","lastModifiedDate":"2021-08-20"},{"lineNumber":229,"author":{"gitId":"twothicc"},"content":"                if (i \u003c (tasks.size() - 1)) {","lastModifiedDate":"2021-08-20"},{"lineNumber":230,"author":{"gitId":"twothicc"},"content":"                    stringBuilder.append(\"\\n\");","lastModifiedDate":"2021-08-20"},{"lineNumber":231,"author":{"gitId":"twothicc"},"content":"                    ;","lastModifiedDate":"2021-08-20"},{"lineNumber":232,"author":{"gitId":"twothicc"},"content":"                }","lastModifiedDate":"2021-08-20"},{"lineNumber":233,"author":{"gitId":"twothicc"},"content":"            }","lastModifiedDate":"2021-08-20"},{"lineNumber":234,"author":{"gitId":"twothicc"},"content":"            String textToSave \u003d stringBuilder.toString();","lastModifiedDate":"2021-08-20"},{"lineNumber":235,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":236,"author":{"gitId":"twothicc"},"content":"            // Write to save file.","lastModifiedDate":"2021-08-20"},{"lineNumber":237,"author":{"gitId":"twothicc"},"content":"            byte[] textToSaveToBytes \u003d textToSave.getBytes();","lastModifiedDate":"2021-08-20"},{"lineNumber":238,"author":{"gitId":"twothicc"},"content":"            Files.write(absolutePathToSaveFile, textToSaveToBytes);","lastModifiedDate":"2021-08-20"},{"lineNumber":239,"author":{"gitId":"twothicc"},"content":"        } catch (IOException ioException) {","lastModifiedDate":"2021-08-20"},{"lineNumber":240,"author":{"gitId":"twothicc"},"content":"            throw new DukeException(Ui.exceptionCannotSaveFile());","lastModifiedDate":"2021-08-21"},{"lineNumber":241,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":242,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":243,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-08-20"}],"authorContributionMap":{"twothicc":243}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-21"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-20"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"/**","lastModifiedDate":"2021-08-20"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":" * Represent storage for tasks.","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":" */","lastModifiedDate":"2021-08-20"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"public class TaskList {","lastModifiedDate":"2021-08-20"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"    private ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2021-08-20"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"     * Constructor for TaskList.","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"     * Creates a TaskList with an empty ArrayList of Tasks.","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"    public TaskList() {","lastModifiedDate":"2021-08-21"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-20"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":21,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"twothicc"},"content":"     * Constructor for TaskList.","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"twothicc"},"content":"     * Creates a TaskList containing the tasks input.","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"twothicc"},"content":"     * @param tasks ArrayList of Tasks to initialize TaskList with.","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"twothicc"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2021-08-21"},{"lineNumber":28,"author":{"gitId":"twothicc"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2021-08-20"},{"lineNumber":29,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":30,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":31,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"twothicc"},"content":"     * Returns the count of Tasks stored.","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"twothicc"},"content":"     * @return count of Tasks stored.","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"twothicc"},"content":"    public int size() {","lastModifiedDate":"2021-08-21"},{"lineNumber":37,"author":{"gitId":"twothicc"},"content":"        return this.tasks.size();","lastModifiedDate":"2021-08-21"},{"lineNumber":38,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":39,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":40,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"twothicc"},"content":"     * Returns Task at index.","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"twothicc"},"content":"     * Index is 0-based.","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"twothicc"},"content":"     * @param idx Index of Task to be returned.","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"twothicc"},"content":"     * @return Task stored at index.","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":47,"author":{"gitId":"twothicc"},"content":"    public Task get(int idx) {","lastModifiedDate":"2021-08-21"},{"lineNumber":48,"author":{"gitId":"twothicc"},"content":"        return this.tasks.get(idx);","lastModifiedDate":"2021-08-21"},{"lineNumber":49,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":50,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":51,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":52,"author":{"gitId":"twothicc"},"content":"     * Adds Task to TaskList.","lastModifiedDate":"2021-08-22"},{"lineNumber":53,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":54,"author":{"gitId":"twothicc"},"content":"     * @param task Task to be added.","lastModifiedDate":"2021-08-22"},{"lineNumber":55,"author":{"gitId":"twothicc"},"content":"     * @return The added Task.","lastModifiedDate":"2021-08-22"},{"lineNumber":56,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":57,"author":{"gitId":"twothicc"},"content":"    public Task add(Task task) {","lastModifiedDate":"2021-08-21"},{"lineNumber":58,"author":{"gitId":"twothicc"},"content":"        this.tasks.add(task);","lastModifiedDate":"2021-08-21"},{"lineNumber":59,"author":{"gitId":"twothicc"},"content":"        return task;","lastModifiedDate":"2021-08-21"},{"lineNumber":60,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":61,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":62,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":63,"author":{"gitId":"twothicc"},"content":"     * Removes Task from TaskList.","lastModifiedDate":"2021-08-22"},{"lineNumber":64,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":65,"author":{"gitId":"twothicc"},"content":"     * @param idx Index of Task to be removed.","lastModifiedDate":"2021-08-22"},{"lineNumber":66,"author":{"gitId":"twothicc"},"content":"     * @return The removed Task.","lastModifiedDate":"2021-08-22"},{"lineNumber":67,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":68,"author":{"gitId":"twothicc"},"content":"    public Task remove(int idx) {","lastModifiedDate":"2021-08-21"},{"lineNumber":69,"author":{"gitId":"twothicc"},"content":"        Task tempTask \u003d this.tasks.get(idx);","lastModifiedDate":"2021-08-20"},{"lineNumber":70,"author":{"gitId":"twothicc"},"content":"        this.tasks.remove(idx);","lastModifiedDate":"2021-08-20"},{"lineNumber":71,"author":{"gitId":"twothicc"},"content":"        return tempTask;","lastModifiedDate":"2021-08-21"},{"lineNumber":72,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":73,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":74,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":75,"author":{"gitId":"twothicc"},"content":"     * Indicates whether another object is equals to this TaskList.","lastModifiedDate":"2021-08-22"},{"lineNumber":76,"author":{"gitId":"twothicc"},"content":"     * Two TaskList are only equal if they are of the same length and if the elements of both TaskList","lastModifiedDate":"2021-08-22"},{"lineNumber":77,"author":{"gitId":"twothicc"},"content":"     * at every index are equal to each other.","lastModifiedDate":"2021-08-22"},{"lineNumber":78,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":79,"author":{"gitId":"twothicc"},"content":"     * @param other Other object to be compared to.","lastModifiedDate":"2021-08-22"},{"lineNumber":80,"author":{"gitId":"twothicc"},"content":"     * @return A boolean indicating whether the other object is equal to this TaskList.","lastModifiedDate":"2021-08-22"},{"lineNumber":81,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":82,"author":{"gitId":"twothicc"},"content":"    public boolean equals(TaskList other) {","lastModifiedDate":"2021-08-21"},{"lineNumber":83,"author":{"gitId":"twothicc"},"content":"        return this.tasks.equals(other.getTasks());","lastModifiedDate":"2021-08-21"},{"lineNumber":84,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":85,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":86,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":87,"author":{"gitId":"twothicc"},"content":"     * Returns the ArrayList of Tasks contained by this TaskList.","lastModifiedDate":"2021-08-22"},{"lineNumber":88,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":89,"author":{"gitId":"twothicc"},"content":"     * @return ArrayList of Tasks contained by this TaskList.","lastModifiedDate":"2021-08-22"},{"lineNumber":90,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":91,"author":{"gitId":"twothicc"},"content":"    public ArrayList\u003cTask\u003e getTasks() {","lastModifiedDate":"2021-08-21"},{"lineNumber":92,"author":{"gitId":"twothicc"},"content":"        return this.tasks;","lastModifiedDate":"2021-08-21"},{"lineNumber":93,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":94,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-08-20"}],"authorContributionMap":{"twothicc":94}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-21"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"/**","lastModifiedDate":"2021-08-20"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":" * Stores commands, descriptors, responses and error messages used by duke.Duke chatbot.","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":" */","lastModifiedDate":"2021-08-20"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"public class Ui {","lastModifiedDate":"2021-08-20"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"    /** Enums for Duke chatbot descriptors */","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"    public enum Descriptors {","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"        AT(\"at\"),","lastModifiedDate":"2021-08-20"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"        BY(\"by\");","lastModifiedDate":"2021-08-20"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"        private final String DESCRIPTOR;","lastModifiedDate":"2021-08-20"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"        public String getDescriptor() {","lastModifiedDate":"2021-08-20"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"            return this.DESCRIPTOR;","lastModifiedDate":"2021-08-20"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":"        public int getLength() {","lastModifiedDate":"2021-08-20"},{"lineNumber":21,"author":{"gitId":"twothicc"},"content":"            return this.DESCRIPTOR.length();","lastModifiedDate":"2021-08-20"},{"lineNumber":22,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":23,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":24,"author":{"gitId":"twothicc"},"content":"        Descriptors(String descriptor) {","lastModifiedDate":"2021-08-20"},{"lineNumber":25,"author":{"gitId":"twothicc"},"content":"            this.DESCRIPTOR \u003d descriptor;","lastModifiedDate":"2021-08-20"},{"lineNumber":26,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":27,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":28,"author":{"gitId":"twothicc"},"content":"        @Override","lastModifiedDate":"2021-08-20"},{"lineNumber":29,"author":{"gitId":"twothicc"},"content":"        public String toString() {","lastModifiedDate":"2021-08-20"},{"lineNumber":30,"author":{"gitId":"twothicc"},"content":"            return this.DESCRIPTOR;","lastModifiedDate":"2021-08-20"},{"lineNumber":31,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":32,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":33,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":34,"author":{"gitId":"twothicc"},"content":"    /** Enums for Duke chatbot commands */","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"twothicc"},"content":"    public enum Commands {","lastModifiedDate":"2021-08-21"},{"lineNumber":36,"author":{"gitId":"twothicc"},"content":"        TODO(\"todo\"),","lastModifiedDate":"2021-08-20"},{"lineNumber":37,"author":{"gitId":"twothicc"},"content":"        DEADLINE(\"deadline\"),","lastModifiedDate":"2021-08-20"},{"lineNumber":38,"author":{"gitId":"twothicc"},"content":"        EVENT(\"event\"),","lastModifiedDate":"2021-08-20"},{"lineNumber":39,"author":{"gitId":"twothicc"},"content":"        DONE(\"done\"),","lastModifiedDate":"2021-08-20"},{"lineNumber":40,"author":{"gitId":"twothicc"},"content":"        DELETE(\"delete\"),","lastModifiedDate":"2021-08-20"},{"lineNumber":41,"author":{"gitId":"twothicc"},"content":"        LIST(\"list\"),","lastModifiedDate":"2021-08-20"},{"lineNumber":42,"author":{"gitId":"twothicc"},"content":"        DATE(\"date\"),","lastModifiedDate":"2021-08-20"},{"lineNumber":43,"author":{"gitId":"twothicc"},"content":"        FIND(\"find\"),","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"twothicc"},"content":"        BYE(\"bye\");","lastModifiedDate":"2021-08-20"},{"lineNumber":45,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":46,"author":{"gitId":"twothicc"},"content":"        private final String COMMAND;","lastModifiedDate":"2021-08-20"},{"lineNumber":47,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":48,"author":{"gitId":"twothicc"},"content":"        public String getCommand() {","lastModifiedDate":"2021-08-20"},{"lineNumber":49,"author":{"gitId":"twothicc"},"content":"            return this.COMMAND;","lastModifiedDate":"2021-08-20"},{"lineNumber":50,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":51,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":52,"author":{"gitId":"twothicc"},"content":"        public int getLength() {","lastModifiedDate":"2021-08-20"},{"lineNumber":53,"author":{"gitId":"twothicc"},"content":"            return this.COMMAND.length();","lastModifiedDate":"2021-08-20"},{"lineNumber":54,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":55,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":56,"author":{"gitId":"twothicc"},"content":"        Commands(String command) {","lastModifiedDate":"2021-08-20"},{"lineNumber":57,"author":{"gitId":"twothicc"},"content":"            this.COMMAND \u003d command;","lastModifiedDate":"2021-08-20"},{"lineNumber":58,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":59,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":60,"author":{"gitId":"twothicc"},"content":"        @Override","lastModifiedDate":"2021-08-20"},{"lineNumber":61,"author":{"gitId":"twothicc"},"content":"        public String toString() {","lastModifiedDate":"2021-08-20"},{"lineNumber":62,"author":{"gitId":"twothicc"},"content":"            return this.COMMAND;","lastModifiedDate":"2021-08-20"},{"lineNumber":63,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":64,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":65,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":66,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":67,"author":{"gitId":"twothicc"},"content":"     * Prints the standard welcome response.","lastModifiedDate":"2021-08-22"},{"lineNumber":68,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":69,"author":{"gitId":"twothicc"},"content":"    public void showWelcome() {","lastModifiedDate":"2021-08-20"},{"lineNumber":70,"author":{"gitId":"twothicc"},"content":"        System.out.println(\"Hello! I\u0027m Duke\\nWhat can I do for you?\");","lastModifiedDate":"2021-08-20"},{"lineNumber":71,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":72,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":73,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":74,"author":{"gitId":"twothicc"},"content":"     * Prints the standard goodbye response.","lastModifiedDate":"2021-08-22"},{"lineNumber":75,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":76,"author":{"gitId":"twothicc"},"content":"    public void showGoodbye() {","lastModifiedDate":"2021-08-20"},{"lineNumber":77,"author":{"gitId":"twothicc"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2021-08-20"},{"lineNumber":78,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":79,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":80,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":81,"author":{"gitId":"twothicc"},"content":"     * Prints the standard response for mark success and the marked task.","lastModifiedDate":"2021-08-22"},{"lineNumber":82,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":83,"author":{"gitId":"twothicc"},"content":"     * @param task Task marked as done.","lastModifiedDate":"2021-08-22"},{"lineNumber":84,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":85,"author":{"gitId":"twothicc"},"content":"    public void showMarkSuccess(Task task) {","lastModifiedDate":"2021-08-20"},{"lineNumber":86,"author":{"gitId":"twothicc"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2021-08-20"},{"lineNumber":87,"author":{"gitId":"twothicc"},"content":"        System.out.println(task.toString());","lastModifiedDate":"2021-08-20"},{"lineNumber":88,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":89,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":90,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":91,"author":{"gitId":"twothicc"},"content":"     * Prints the standard response for delete success, followed by the","lastModifiedDate":"2021-08-22"},{"lineNumber":92,"author":{"gitId":"twothicc"},"content":"     * deleted task and the new total count of tasks.","lastModifiedDate":"2021-08-22"},{"lineNumber":93,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":94,"author":{"gitId":"twothicc"},"content":"     * @param task The deleted task.","lastModifiedDate":"2021-08-22"},{"lineNumber":95,"author":{"gitId":"twothicc"},"content":"     * @param size The new total count of tasks.","lastModifiedDate":"2021-08-22"},{"lineNumber":96,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":97,"author":{"gitId":"twothicc"},"content":"    public void showDeleteSuccess(Task task, int size) {","lastModifiedDate":"2021-08-20"},{"lineNumber":98,"author":{"gitId":"twothicc"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2021-08-20"},{"lineNumber":99,"author":{"gitId":"twothicc"},"content":"        System.out.println(task.toString());","lastModifiedDate":"2021-08-20"},{"lineNumber":100,"author":{"gitId":"twothicc"},"content":"        System.out.println(\"Now you have \" + size + \" tasks in the list.\");","lastModifiedDate":"2021-08-20"},{"lineNumber":101,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":102,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":103,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":104,"author":{"gitId":"twothicc"},"content":"     * Prints the standard response for add success, followed by the","lastModifiedDate":"2021-08-22"},{"lineNumber":105,"author":{"gitId":"twothicc"},"content":"     * task added and the new total count of tasks.","lastModifiedDate":"2021-08-22"},{"lineNumber":106,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":107,"author":{"gitId":"twothicc"},"content":"     * @param task The added task.","lastModifiedDate":"2021-08-22"},{"lineNumber":108,"author":{"gitId":"twothicc"},"content":"     * @param size The new total count of tasks.","lastModifiedDate":"2021-08-22"},{"lineNumber":109,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":110,"author":{"gitId":"twothicc"},"content":"    public void showAddSuccess(Task task, int size) {","lastModifiedDate":"2021-08-20"},{"lineNumber":111,"author":{"gitId":"twothicc"},"content":"        System.out.println(\"Got it. I have added this task:\");","lastModifiedDate":"2021-08-20"},{"lineNumber":112,"author":{"gitId":"twothicc"},"content":"        System.out.println(task.toString());","lastModifiedDate":"2021-08-20"},{"lineNumber":113,"author":{"gitId":"twothicc"},"content":"        System.out.println(\"Now you have \" + size + \" tasks in the list.\");","lastModifiedDate":"2021-08-20"},{"lineNumber":114,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":115,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":116,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":117,"author":{"gitId":"twothicc"},"content":"     * Prints the standard response for listing tasks.","lastModifiedDate":"2021-08-22"},{"lineNumber":118,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":119,"author":{"gitId":"twothicc"},"content":"    public void showListSuccess() {","lastModifiedDate":"2021-08-20"},{"lineNumber":120,"author":{"gitId":"twothicc"},"content":"        System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2021-08-20"},{"lineNumber":121,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":122,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":123,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":124,"author":{"gitId":"twothicc"},"content":"     * Prints the standard response for finding tasks by date.","lastModifiedDate":"2021-08-22"},{"lineNumber":125,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":126,"author":{"gitId":"twothicc"},"content":"     * @param formattedDateString Date being searched for.","lastModifiedDate":"2021-08-22"},{"lineNumber":127,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":128,"author":{"gitId":"twothicc"},"content":"    public void showDateListSuccess(String formattedDateString) {","lastModifiedDate":"2021-08-20"},{"lineNumber":129,"author":{"gitId":"twothicc"},"content":"        System.out.println(\"Here are the Deadlines or Events that fall on \" + formattedDateString + \":\");","lastModifiedDate":"2021-08-20"},{"lineNumber":130,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":131,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":132,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":133,"author":{"gitId":"twothicc"},"content":"     * Prints the standard response for success in finding tasks by date.","lastModifiedDate":"2021-08-22"},{"lineNumber":134,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":135,"author":{"gitId":"twothicc"},"content":"     * @param formattedDateString Date being searched for.","lastModifiedDate":"2021-08-22"},{"lineNumber":136,"author":{"gitId":"twothicc"},"content":"     * @param counter Total count of tasks found to fall on date being searched for.","lastModifiedDate":"2021-08-22"},{"lineNumber":137,"author":{"gitId":"twothicc"},"content":"     * @param deadlines Total count of Deadlines found to fall on date being searched for.","lastModifiedDate":"2021-08-22"},{"lineNumber":138,"author":{"gitId":"twothicc"},"content":"     * @param events Total count of Events found to fall on date being searched for.","lastModifiedDate":"2021-08-22"},{"lineNumber":139,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":140,"author":{"gitId":"twothicc"},"content":"    public void showDateListSummary(String formattedDateString, int counter, int deadlines, int events) {","lastModifiedDate":"2021-08-20"},{"lineNumber":141,"author":{"gitId":"twothicc"},"content":"        System.out.println(\"A total of \" + counter + \" events (\" + deadlines + \" deadlines and \" +","lastModifiedDate":"2021-08-20"},{"lineNumber":142,"author":{"gitId":"twothicc"},"content":"                events + \" events) fall on \" + formattedDateString);","lastModifiedDate":"2021-08-20"},{"lineNumber":143,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":144,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":145,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":146,"author":{"gitId":"twothicc"},"content":"     * Prints the standard response for beginning search for tasks matching a keyword.","lastModifiedDate":"2021-08-22"},{"lineNumber":147,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":148,"author":{"gitId":"twothicc"},"content":"    public void showFindBegin() {","lastModifiedDate":"2021-08-22"},{"lineNumber":149,"author":{"gitId":"twothicc"},"content":"        System.out.println(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2021-08-22"},{"lineNumber":150,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":151,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":152,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":153,"author":{"gitId":"twothicc"},"content":"     * Prints the standard response for success in finding tasks that match a search keyword.","lastModifiedDate":"2021-08-22"},{"lineNumber":154,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":155,"author":{"gitId":"twothicc"},"content":"     * @param counter Total count of tasks found to match the search keyword.","lastModifiedDate":"2021-08-22"},{"lineNumber":156,"author":{"gitId":"twothicc"},"content":"     * @param keyword Search keyword being searched for.","lastModifiedDate":"2021-08-22"},{"lineNumber":157,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":158,"author":{"gitId":"twothicc"},"content":"    public void showFindSuccess(int counter, String keyword) {","lastModifiedDate":"2021-08-22"},{"lineNumber":159,"author":{"gitId":"twothicc"},"content":"        System.out.println(\"A total of \" + counter","lastModifiedDate":"2021-08-22"},{"lineNumber":160,"author":{"gitId":"twothicc"},"content":"                + \" tasks in your list match your search keyword, \" + keyword + \".\");","lastModifiedDate":"2021-08-22"},{"lineNumber":161,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":162,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":163,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":164,"author":{"gitId":"twothicc"},"content":"     * Returns the standard error message for invalid user command.","lastModifiedDate":"2021-08-22"},{"lineNumber":165,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":166,"author":{"gitId":"twothicc"},"content":"     * @return Standard error message for invalid user command.","lastModifiedDate":"2021-08-22"},{"lineNumber":167,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":168,"author":{"gitId":"twothicc"},"content":"    public static String exceptionInvalidUserCommand() {","lastModifiedDate":"2021-08-21"},{"lineNumber":169,"author":{"gitId":"twothicc"},"content":"        return \"I\u0027m sorry, but I don\u0027t know what that means :-(\";","lastModifiedDate":"2021-08-21"},{"lineNumber":170,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":171,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":172,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":173,"author":{"gitId":"twothicc"},"content":"     * Returns the standard error message for missing task description.","lastModifiedDate":"2021-08-22"},{"lineNumber":174,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":175,"author":{"gitId":"twothicc"},"content":"     * @param userCommand The initial command of the user input which has the missing task description.","lastModifiedDate":"2021-08-22"},{"lineNumber":176,"author":{"gitId":"twothicc"},"content":"     * @return Standard error message for missing task description.","lastModifiedDate":"2021-08-22"},{"lineNumber":177,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":178,"author":{"gitId":"twothicc"},"content":"    public static String exceptionMissingTaskDescription(String userCommand) {","lastModifiedDate":"2021-08-21"},{"lineNumber":179,"author":{"gitId":"twothicc"},"content":"        return \"The description of \" + userCommand + \" cannot be empty.\";","lastModifiedDate":"2021-08-21"},{"lineNumber":180,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":181,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":182,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":183,"author":{"gitId":"twothicc"},"content":"     * Returns the standard error message for missing date.","lastModifiedDate":"2021-08-22"},{"lineNumber":184,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":185,"author":{"gitId":"twothicc"},"content":"     * @return Standard error message for missing date.","lastModifiedDate":"2021-08-22"},{"lineNumber":186,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":187,"author":{"gitId":"twothicc"},"content":"    public static String exceptionMissingDate() {","lastModifiedDate":"2021-08-21"},{"lineNumber":188,"author":{"gitId":"twothicc"},"content":"        return \"No date is provided to search for.\";","lastModifiedDate":"2021-08-21"},{"lineNumber":189,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":190,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":191,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":192,"author":{"gitId":"twothicc"},"content":"     * Returns the standard error message for missing index for deletion.","lastModifiedDate":"2021-08-22"},{"lineNumber":193,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":194,"author":{"gitId":"twothicc"},"content":"     * @return Standard error message for missing index for deletion.","lastModifiedDate":"2021-08-22"},{"lineNumber":195,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":196,"author":{"gitId":"twothicc"},"content":"    public static String exceptionMissingIndexForDelete() {","lastModifiedDate":"2021-08-21"},{"lineNumber":197,"author":{"gitId":"twothicc"},"content":"        return \"An index must be provided to delete task at index.\";","lastModifiedDate":"2021-08-21"},{"lineNumber":198,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":199,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":200,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":201,"author":{"gitId":"twothicc"},"content":"     * Returns the standard error message for invalid index for deletion.","lastModifiedDate":"2021-08-22"},{"lineNumber":202,"author":{"gitId":"twothicc"},"content":"     * An index for deletion is invalid if it exceeds (size of TaskList - 1) or is less than 0.","lastModifiedDate":"2021-08-22"},{"lineNumber":203,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":204,"author":{"gitId":"twothicc"},"content":"     * @return Standard error message for invalid index for deletion.","lastModifiedDate":"2021-08-22"},{"lineNumber":205,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":206,"author":{"gitId":"twothicc"},"content":"    public static String exceptionInvalidIndexForDelete() {","lastModifiedDate":"2021-08-21"},{"lineNumber":207,"author":{"gitId":"twothicc"},"content":"        return \"Index provided for delete is either less than 1 or exceeds the length of the list, hence invalid.\";","lastModifiedDate":"2021-08-21"},{"lineNumber":208,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":209,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":210,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":211,"author":{"gitId":"twothicc"},"content":"     * Returns the standard error message for missing index for marking a task as done.","lastModifiedDate":"2021-08-22"},{"lineNumber":212,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":213,"author":{"gitId":"twothicc"},"content":"     * @return Standard error message for missing index for marking.","lastModifiedDate":"2021-08-22"},{"lineNumber":214,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":215,"author":{"gitId":"twothicc"},"content":"    public static String exceptionMissingIndexForMarking() {","lastModifiedDate":"2021-08-21"},{"lineNumber":216,"author":{"gitId":"twothicc"},"content":"        return \"An index must be provided to mark task at the index as done.\";","lastModifiedDate":"2021-08-21"},{"lineNumber":217,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":218,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":219,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":220,"author":{"gitId":"twothicc"},"content":"     * Returns the standard error message for invalid index for marking a task as done.","lastModifiedDate":"2021-08-22"},{"lineNumber":221,"author":{"gitId":"twothicc"},"content":"     * An index for marking is invalid if it exceeds (size of TaskList - 1) or is less than 0.","lastModifiedDate":"2021-08-22"},{"lineNumber":222,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":223,"author":{"gitId":"twothicc"},"content":"     * @return Standard error message for invalid index for marking.","lastModifiedDate":"2021-08-22"},{"lineNumber":224,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":225,"author":{"gitId":"twothicc"},"content":"    public static String exceptionInvalidIndexForMarking() {","lastModifiedDate":"2021-08-21"},{"lineNumber":226,"author":{"gitId":"twothicc"},"content":"        return \"Index provided for done is either less than 1 or exceeds the length of the list, hence invalid.\";","lastModifiedDate":"2021-08-21"},{"lineNumber":227,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":228,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":229,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":230,"author":{"gitId":"twothicc"},"content":"     * Returns the standard error message for invalid date format.","lastModifiedDate":"2021-08-22"},{"lineNumber":231,"author":{"gitId":"twothicc"},"content":"     * This error message is meant for all errors related to parsing user input to LocalDate.","lastModifiedDate":"2021-08-22"},{"lineNumber":232,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":233,"author":{"gitId":"twothicc"},"content":"     * @return Standard error message for invalid date format.","lastModifiedDate":"2021-08-22"},{"lineNumber":234,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":235,"author":{"gitId":"twothicc"},"content":"    public static String exceptionInvalidDateTimeFormat() {","lastModifiedDate":"2021-08-21"},{"lineNumber":236,"author":{"gitId":"twothicc"},"content":"        return \"Cannot read invalid datetime format.\";","lastModifiedDate":"2021-08-21"},{"lineNumber":237,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":238,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":239,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":240,"author":{"gitId":"twothicc"},"content":"     * Returns the standard error message for invalid LocalDate.","lastModifiedDate":"2021-08-22"},{"lineNumber":241,"author":{"gitId":"twothicc"},"content":"     * This error message is meant for all errors related to converting LocalDate into string formats.","lastModifiedDate":"2021-08-22"},{"lineNumber":242,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":243,"author":{"gitId":"twothicc"},"content":"     * @return Standard error message for invalid LocalDate.","lastModifiedDate":"2021-08-22"},{"lineNumber":244,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":245,"author":{"gitId":"twothicc"},"content":"    public static String exceptionInvalidLocalDate() {","lastModifiedDate":"2021-08-21"},{"lineNumber":246,"author":{"gitId":"twothicc"},"content":"        return \"Stored date is corrupt and cannot be read.\";","lastModifiedDate":"2021-08-21"},{"lineNumber":247,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":248,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":249,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":250,"author":{"gitId":"twothicc"},"content":"     * Returns the standard error message for invalid number input.","lastModifiedDate":"2021-08-22"},{"lineNumber":251,"author":{"gitId":"twothicc"},"content":"     * This error message is meant for all errors related to failure to parse a string to int.","lastModifiedDate":"2021-08-22"},{"lineNumber":252,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":253,"author":{"gitId":"twothicc"},"content":"     * @param command The initial command of user input that contains the invalid number input.","lastModifiedDate":"2021-08-22"},{"lineNumber":254,"author":{"gitId":"twothicc"},"content":"     * @return Standard error message for invalid number input.","lastModifiedDate":"2021-08-22"},{"lineNumber":255,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":256,"author":{"gitId":"twothicc"},"content":"    public static String exceptionInvalidNumberInput(Commands command) {","lastModifiedDate":"2021-08-21"},{"lineNumber":257,"author":{"gitId":"twothicc"},"content":"        return \"Index for \" + command.getCommand() + \" must be an integer.\";","lastModifiedDate":"2021-08-21"},{"lineNumber":258,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":259,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":260,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":261,"author":{"gitId":"twothicc"},"content":"     * Returns the standard error message for missing descriptor in user input.","lastModifiedDate":"2021-08-22"},{"lineNumber":262,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":263,"author":{"gitId":"twothicc"},"content":"     * @param descriptor The descriptor that should be used.","lastModifiedDate":"2021-08-22"},{"lineNumber":264,"author":{"gitId":"twothicc"},"content":"     * @param command The command that is used in tandem with descriptor.","lastModifiedDate":"2021-08-22"},{"lineNumber":265,"author":{"gitId":"twothicc"},"content":"     * @return Standard error message for missing descriptor.","lastModifiedDate":"2021-08-22"},{"lineNumber":266,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":267,"author":{"gitId":"twothicc"},"content":"    public static String exceptionMissingDescriptor(Descriptors descriptor, Commands command) {","lastModifiedDate":"2021-08-21"},{"lineNumber":268,"author":{"gitId":"twothicc"},"content":"        return \"/\" + descriptor.getDescriptor() +","lastModifiedDate":"2021-08-21"},{"lineNumber":269,"author":{"gitId":"twothicc"},"content":"                \" must be provided and not empty for \" + command.getCommand() + \".\";","lastModifiedDate":"2021-08-21"},{"lineNumber":270,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":271,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":272,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":273,"author":{"gitId":"twothicc"},"content":"     * Returns the standard error message for missing space after command in user input.","lastModifiedDate":"2021-08-22"},{"lineNumber":274,"author":{"gitId":"twothicc"},"content":"     * This error message is to warn users that they may have just missed a space in their input,","lastModifiedDate":"2021-08-22"},{"lineNumber":275,"author":{"gitId":"twothicc"},"content":"     * which allows for quick fixes.","lastModifiedDate":"2021-08-22"},{"lineNumber":276,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":277,"author":{"gitId":"twothicc"},"content":"     * @param userCommand The command with missing space after it.","lastModifiedDate":"2021-08-22"},{"lineNumber":278,"author":{"gitId":"twothicc"},"content":"     * @return Standard error message for missing space after command.","lastModifiedDate":"2021-08-22"},{"lineNumber":279,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":280,"author":{"gitId":"twothicc"},"content":"    public static String exceptionMissingSpaceAfterCommand(String userCommand) {","lastModifiedDate":"2021-08-21"},{"lineNumber":281,"author":{"gitId":"twothicc"},"content":"        return \"There is a missing space after \" + userCommand + \".\";","lastModifiedDate":"2021-08-21"},{"lineNumber":282,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":283,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":284,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":285,"author":{"gitId":"twothicc"},"content":"     * Returns the standard error message for wrong descriptor used for a command in user input.","lastModifiedDate":"2021-08-22"},{"lineNumber":286,"author":{"gitId":"twothicc"},"content":"     * This error message is meant to warn users that they have used the wrong descriptor in tandem with","lastModifiedDate":"2021-08-22"},{"lineNumber":287,"author":{"gitId":"twothicc"},"content":"     * a certain command.","lastModifiedDate":"2021-08-22"},{"lineNumber":288,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":289,"author":{"gitId":"twothicc"},"content":"     * @param command The command for which the wrong descriptor was used.","lastModifiedDate":"2021-08-22"},{"lineNumber":290,"author":{"gitId":"twothicc"},"content":"     * @param descriptors The correct descriptor.","lastModifiedDate":"2021-08-22"},{"lineNumber":291,"author":{"gitId":"twothicc"},"content":"     * @return Standard error message for wrong descriptor.","lastModifiedDate":"2021-08-22"},{"lineNumber":292,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":293,"author":{"gitId":"twothicc"},"content":"    public static String exceptionWrongDescriptor(Commands command, Descriptors descriptors) {","lastModifiedDate":"2021-08-22"},{"lineNumber":294,"author":{"gitId":"twothicc"},"content":"        return \"Wrong descriptor used. Descriptor for \" + command.getCommand()","lastModifiedDate":"2021-08-22"},{"lineNumber":295,"author":{"gitId":"twothicc"},"content":"                + \" should be \" + descriptors.getDescriptor() + \".\";","lastModifiedDate":"2021-08-22"},{"lineNumber":296,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":297,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":298,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":299,"author":{"gitId":"twothicc"},"content":"     * Returns the standard error message for missing space before descriptor.","lastModifiedDate":"2021-08-22"},{"lineNumber":300,"author":{"gitId":"twothicc"},"content":"     * This error message is meant to warn users of specifically a missing space before a descriptor","lastModifiedDate":"2021-08-22"},{"lineNumber":301,"author":{"gitId":"twothicc"},"content":"     * to allow for quick fixes.","lastModifiedDate":"2021-08-22"},{"lineNumber":302,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":303,"author":{"gitId":"twothicc"},"content":"     * @param descriptor descriptor for which there is a missing space before it.","lastModifiedDate":"2021-08-22"},{"lineNumber":304,"author":{"gitId":"twothicc"},"content":"     * @return Standard error message for missing space before descriptor.","lastModifiedDate":"2021-08-22"},{"lineNumber":305,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":306,"author":{"gitId":"twothicc"},"content":"    public static String exceptionMissingSpaceBeforeDescriptor(Descriptors descriptor) {","lastModifiedDate":"2021-08-21"},{"lineNumber":307,"author":{"gitId":"twothicc"},"content":"        return \"There is a missing space before the descriptor \" + descriptor.getDescriptor() + \".\";","lastModifiedDate":"2021-08-21"},{"lineNumber":308,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":309,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":310,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":311,"author":{"gitId":"twothicc"},"content":"     * Returns the standard error message for missing space after descriptor.","lastModifiedDate":"2021-08-22"},{"lineNumber":312,"author":{"gitId":"twothicc"},"content":"     * This error message is meant to warn users of specifically a missing space after a descriptor","lastModifiedDate":"2021-08-22"},{"lineNumber":313,"author":{"gitId":"twothicc"},"content":"     * to allow for quick fixes.","lastModifiedDate":"2021-08-22"},{"lineNumber":314,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":315,"author":{"gitId":"twothicc"},"content":"     * @param descriptor descriptor for which there is a missing space after it.","lastModifiedDate":"2021-08-22"},{"lineNumber":316,"author":{"gitId":"twothicc"},"content":"     * @return Standard error message for missing space after descriptor.","lastModifiedDate":"2021-08-22"},{"lineNumber":317,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":318,"author":{"gitId":"twothicc"},"content":"    public static String exceptionMissingSpaceAfterDescriptor(Descriptors descriptor) {","lastModifiedDate":"2021-08-21"},{"lineNumber":319,"author":{"gitId":"twothicc"},"content":"        return \"There is a missing space after the descriptor \" + descriptor.getDescriptor() + \".\";","lastModifiedDate":"2021-08-21"},{"lineNumber":320,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":321,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":322,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":323,"author":{"gitId":"twothicc"},"content":"     * Returns the standard error message for failure to convert save formats to corresponding tasks.","lastModifiedDate":"2021-08-22"},{"lineNumber":324,"author":{"gitId":"twothicc"},"content":"     * This error message is meant for failure to parse any read strings after reading the save file.","lastModifiedDate":"2021-08-22"},{"lineNumber":325,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":326,"author":{"gitId":"twothicc"},"content":"     * @return Standard error message for failure to convert save formats to corresponding tasks.","lastModifiedDate":"2021-08-22"},{"lineNumber":327,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":328,"author":{"gitId":"twothicc"},"content":"    public static String exceptionCorruptSaveFile() {","lastModifiedDate":"2021-08-21"},{"lineNumber":329,"author":{"gitId":"twothicc"},"content":"        return \"Save files corrupted. Failed to read tasks from save file.\";","lastModifiedDate":"2021-08-21"},{"lineNumber":330,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":331,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":332,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":333,"author":{"gitId":"twothicc"},"content":"     * Returns the standard error message for failure to read save file.","lastModifiedDate":"2021-08-22"},{"lineNumber":334,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":335,"author":{"gitId":"twothicc"},"content":"     * @return Standard error message for failure to read save file.","lastModifiedDate":"2021-08-22"},{"lineNumber":336,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":337,"author":{"gitId":"twothicc"},"content":"    public static String exceptionCannotReadFile() {","lastModifiedDate":"2021-08-21"},{"lineNumber":338,"author":{"gitId":"twothicc"},"content":"        return \"Failed to read tasks from save file.\";","lastModifiedDate":"2021-08-21"},{"lineNumber":339,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":340,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":341,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":342,"author":{"gitId":"twothicc"},"content":"     * Returns the standard error message for failure to write to save file.","lastModifiedDate":"2021-08-22"},{"lineNumber":343,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":344,"author":{"gitId":"twothicc"},"content":"     * @return Standard error message for failure to write to save file.","lastModifiedDate":"2021-08-22"},{"lineNumber":345,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":346,"author":{"gitId":"twothicc"},"content":"    public static String exceptionCannotSaveFile() {","lastModifiedDate":"2021-08-21"},{"lineNumber":347,"author":{"gitId":"twothicc"},"content":"        return \"Failed to save tasks.\";","lastModifiedDate":"2021-08-21"},{"lineNumber":348,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":349,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":350,"author":{"gitId":"twothicc"},"content":"    public static String exceptionMissingSearchInput() {","lastModifiedDate":"2021-08-22"},{"lineNumber":351,"author":{"gitId":"twothicc"},"content":"        return \"Cannot perform search. Search keyword must be provided\";","lastModifiedDate":"2021-08-22"},{"lineNumber":352,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":353,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-08-20"}],"authorContributionMap":{"twothicc":353}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke.command;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"import duke.DukeException;","lastModifiedDate":"2021-08-21"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"import duke.Parser;","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"import duke.Storable;","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"import duke.Ui.Commands;","lastModifiedDate":"2021-08-21"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"import duke.Ui.Descriptors;","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"import duke.task.Event;","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"import duke.task.Todo;","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"/**","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":" * Represents a command that can be executed to add a task based on user input,","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":" * print task added and new total count of tasks, then save tasks to storage.","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":" */","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2021-08-21"},{"lineNumber":21,"author":{"gitId":"twothicc"},"content":"    private final String userInput;","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":23,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"twothicc"},"content":"     * Constructor for AddCommand.","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"twothicc"},"content":"     * Creates an AddCommand containing user input.","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"twothicc"},"content":"     * @param userInput User\u0027s input into Duke chatbot.","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"twothicc"},"content":"    public AddCommand(String userInput) {","lastModifiedDate":"2021-08-21"},{"lineNumber":30,"author":{"gitId":"twothicc"},"content":"        this.userInput \u003d userInput;","lastModifiedDate":"2021-08-21"},{"lineNumber":31,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":32,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":33,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"twothicc"},"content":"     * Adds task based on user input into tasks, then prints task added and new total count of tasks.","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"twothicc"},"content":"     * Event is added for user inputs of the form \"event task-descr /at dd/mm/yyyy\".","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"twothicc"},"content":"     * Deadline is added for user inputs of the form \"deadline task-descr /by dd/mm/yyyy\".","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"twothicc"},"content":"     * Todo is added for user inputs of the form \"todo task-descr\".","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"twothicc"},"content":"     * @param tasks TaskList to add task to.","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"twothicc"},"content":"     * @param ui Ui to get enums, response messages and exception messages from.","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"twothicc"},"content":"     * @param separator char separator used to separate task description and time in Event and Deadline.","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"twothicc"},"content":"     * @throws DukeException If user command is invalid.","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"twothicc"},"content":"     * @throws DukeException If user input does not provide task description.","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"twothicc"},"content":"     * @throws DukeException If user input has missing spaces.","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"twothicc"},"content":"     * @throws DukeException If user input for time is in invalid date format.","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"twothicc"},"content":"     * @throws DukeException If user input does not contain descriptors by or at for Deadline and Event respectively.","lastModifiedDate":"2021-08-22"},{"lineNumber":47,"author":{"gitId":"twothicc"},"content":"     * @throws DukeException If user input is missing time input for Deadline and Event.","lastModifiedDate":"2021-08-22"},{"lineNumber":48,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":49,"author":{"gitId":"twothicc"},"content":"    private void addTask(TaskList tasks, Ui ui, char separator) throws DukeException {","lastModifiedDate":"2021-08-22"},{"lineNumber":50,"author":{"gitId":"twothicc"},"content":"        // Checks for command given in user input.","lastModifiedDate":"2021-08-21"},{"lineNumber":51,"author":{"gitId":"twothicc"},"content":"        String userCommand;","lastModifiedDate":"2021-08-21"},{"lineNumber":52,"author":{"gitId":"twothicc"},"content":"        if (this.userInput.startsWith(Commands.TODO.getCommand())) {","lastModifiedDate":"2021-08-21"},{"lineNumber":53,"author":{"gitId":"twothicc"},"content":"            userCommand \u003d Commands.TODO.getCommand();","lastModifiedDate":"2021-08-21"},{"lineNumber":54,"author":{"gitId":"twothicc"},"content":"        } else if (this.userInput.startsWith(Commands.DEADLINE.getCommand())) {","lastModifiedDate":"2021-08-21"},{"lineNumber":55,"author":{"gitId":"twothicc"},"content":"            userCommand \u003d Commands.DEADLINE.getCommand();","lastModifiedDate":"2021-08-21"},{"lineNumber":56,"author":{"gitId":"twothicc"},"content":"        } else if (this.userInput.startsWith(Commands.EVENT.getCommand())) {","lastModifiedDate":"2021-08-21"},{"lineNumber":57,"author":{"gitId":"twothicc"},"content":"            userCommand \u003d Commands.EVENT.getCommand();","lastModifiedDate":"2021-08-21"},{"lineNumber":58,"author":{"gitId":"twothicc"},"content":"        } else {","lastModifiedDate":"2021-08-21"},{"lineNumber":59,"author":{"gitId":"twothicc"},"content":"            throw new DukeException(Ui.exceptionInvalidUserCommand());","lastModifiedDate":"2021-08-21"},{"lineNumber":60,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":61,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":62,"author":{"gitId":"twothicc"},"content":"        // Preliminary check for any input following command.","lastModifiedDate":"2021-08-22"},{"lineNumber":63,"author":{"gitId":"twothicc"},"content":"        Parser.checkInputValidity(this.userInput, userCommand,","lastModifiedDate":"2021-08-22"},{"lineNumber":64,"author":{"gitId":"twothicc"},"content":"                Ui.exceptionMissingTaskDescription(userCommand));","lastModifiedDate":"2021-08-22"},{"lineNumber":65,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":66,"author":{"gitId":"twothicc"},"content":"        // Extracts task description.","lastModifiedDate":"2021-08-21"},{"lineNumber":67,"author":{"gitId":"twothicc"},"content":"        String description \u003d this.userInput.substring(userCommand.length() + 1);","lastModifiedDate":"2021-08-21"},{"lineNumber":68,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":69,"author":{"gitId":"twothicc"},"content":"        // Parses description and adds the corresponding task to tasks.","lastModifiedDate":"2021-08-21"},{"lineNumber":70,"author":{"gitId":"twothicc"},"content":"        if (userCommand.equals(Commands.TODO.getCommand())) {","lastModifiedDate":"2021-08-21"},{"lineNumber":71,"author":{"gitId":"twothicc"},"content":"            // Adds to-do task to tasks.","lastModifiedDate":"2021-08-21"},{"lineNumber":72,"author":{"gitId":"twothicc"},"content":"            tasks.add(new Todo(description));","lastModifiedDate":"2021-08-21"},{"lineNumber":73,"author":{"gitId":"twothicc"},"content":"        } else if (userCommand.equals(Commands.DEADLINE.getCommand())) {","lastModifiedDate":"2021-08-21"},{"lineNumber":74,"author":{"gitId":"twothicc"},"content":"            // Parses description into task description and time.","lastModifiedDate":"2021-08-21"},{"lineNumber":75,"author":{"gitId":"twothicc"},"content":"            String[] descriptions \u003d","lastModifiedDate":"2021-08-21"},{"lineNumber":76,"author":{"gitId":"twothicc"},"content":"                    Parser.parseUserDescriptionInput(description, Descriptors.BY, separator, Commands.DEADLINE);","lastModifiedDate":"2021-08-21"},{"lineNumber":77,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":78,"author":{"gitId":"twothicc"},"content":"            // Convert time to LocalDate.","lastModifiedDate":"2021-08-21"},{"lineNumber":79,"author":{"gitId":"twothicc"},"content":"            LocalDate localDate \u003d Parser.toLocalDate(descriptions[1]);","lastModifiedDate":"2021-08-21"},{"lineNumber":80,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":81,"author":{"gitId":"twothicc"},"content":"            // Adds duke.task.Deadline task to tasks.","lastModifiedDate":"2021-08-21"},{"lineNumber":82,"author":{"gitId":"twothicc"},"content":"            tasks.add(new Deadline(descriptions[0], localDate));","lastModifiedDate":"2021-08-21"},{"lineNumber":83,"author":{"gitId":"twothicc"},"content":"        } else {","lastModifiedDate":"2021-08-21"},{"lineNumber":84,"author":{"gitId":"twothicc"},"content":"            // Parses description into task description and time.","lastModifiedDate":"2021-08-21"},{"lineNumber":85,"author":{"gitId":"twothicc"},"content":"            String[] descriptions \u003d","lastModifiedDate":"2021-08-21"},{"lineNumber":86,"author":{"gitId":"twothicc"},"content":"                    Parser.parseUserDescriptionInput(description, Descriptors.AT, separator, Commands.EVENT);","lastModifiedDate":"2021-08-21"},{"lineNumber":87,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":88,"author":{"gitId":"twothicc"},"content":"            // Convert time to LocalDate.","lastModifiedDate":"2021-08-21"},{"lineNumber":89,"author":{"gitId":"twothicc"},"content":"            LocalDate localDate \u003d Parser.toLocalDate(descriptions[1]);","lastModifiedDate":"2021-08-21"},{"lineNumber":90,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":91,"author":{"gitId":"twothicc"},"content":"            // Adds duke.task.Event task to tasks.","lastModifiedDate":"2021-08-21"},{"lineNumber":92,"author":{"gitId":"twothicc"},"content":"            tasks.add(new Event(descriptions[0], localDate));","lastModifiedDate":"2021-08-21"},{"lineNumber":93,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":94,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":95,"author":{"gitId":"twothicc"},"content":"        // Prints response to user after successfully adding task to tasks.","lastModifiedDate":"2021-08-21"},{"lineNumber":96,"author":{"gitId":"twothicc"},"content":"        ui.showAddSuccess(tasks.get(tasks.size() - 1), tasks.size());","lastModifiedDate":"2021-08-21"},{"lineNumber":97,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":98,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":99,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":100,"author":{"gitId":"twothicc"},"content":"     * Adds task based on user input to tasks, prints task added and new total count of task","lastModifiedDate":"2021-08-22"},{"lineNumber":101,"author":{"gitId":"twothicc"},"content":"     * and then saves tasks to storage.","lastModifiedDate":"2021-08-22"},{"lineNumber":102,"author":{"gitId":"twothicc"},"content":"     * Event is added for user inputs of the form \"event task-descr /at dd/mm/yyyy\".","lastModifiedDate":"2021-08-22"},{"lineNumber":103,"author":{"gitId":"twothicc"},"content":"     * Deadline is added for user inputs of the form \"deadline task-descr /by dd/mm/yyyy\".","lastModifiedDate":"2021-08-22"},{"lineNumber":104,"author":{"gitId":"twothicc"},"content":"     * Todo is added for user inputs of the form \"todo task-descr\".","lastModifiedDate":"2021-08-22"},{"lineNumber":105,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":106,"author":{"gitId":"twothicc"},"content":"     * @param tasks TaskList that command executes upon.","lastModifiedDate":"2021-08-22"},{"lineNumber":107,"author":{"gitId":"twothicc"},"content":"     * @param ui Ui contains enums, response messages and exception messages that command execution will use.","lastModifiedDate":"2021-08-22"},{"lineNumber":108,"author":{"gitId":"twothicc"},"content":"     * @param storage Storage that command executes upon.","lastModifiedDate":"2021-08-22"},{"lineNumber":109,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":110,"author":{"gitId":"twothicc"},"content":"    @Override","lastModifiedDate":"2021-08-21"},{"lineNumber":111,"author":{"gitId":"twothicc"},"content":"    public void execute(TaskList tasks, Ui ui, Storable storage) {","lastModifiedDate":"2021-08-21"},{"lineNumber":112,"author":{"gitId":"twothicc"},"content":"        try {","lastModifiedDate":"2021-08-21"},{"lineNumber":113,"author":{"gitId":"twothicc"},"content":"            // Add task according to user specifications.","lastModifiedDate":"2021-08-21"},{"lineNumber":114,"author":{"gitId":"twothicc"},"content":"            this.addTask(tasks, ui, \u0027/\u0027);","lastModifiedDate":"2021-08-21"},{"lineNumber":115,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":116,"author":{"gitId":"twothicc"},"content":"            // Saves edited duke.TaskList to save file.","lastModifiedDate":"2021-08-21"},{"lineNumber":117,"author":{"gitId":"twothicc"},"content":"            storage.saveTasksToData(tasks);","lastModifiedDate":"2021-08-21"},{"lineNumber":118,"author":{"gitId":"twothicc"},"content":"        } catch (DukeException dukeException) {","lastModifiedDate":"2021-08-21"},{"lineNumber":119,"author":{"gitId":"twothicc"},"content":"            System.out.println(dukeException);","lastModifiedDate":"2021-08-21"},{"lineNumber":120,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":121,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":122,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":123,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":124,"author":{"gitId":"twothicc"},"content":"     * Indicates whether another object is equals to this AddCommand.","lastModifiedDate":"2021-08-22"},{"lineNumber":125,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":126,"author":{"gitId":"twothicc"},"content":"     * @param obj Other object to be compared to.","lastModifiedDate":"2021-08-22"},{"lineNumber":127,"author":{"gitId":"twothicc"},"content":"     * @return A boolean indicating whether the other object is equal to this AddCommand.","lastModifiedDate":"2021-08-22"},{"lineNumber":128,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":129,"author":{"gitId":"twothicc"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":130,"author":{"gitId":"twothicc"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2021-08-22"},{"lineNumber":131,"author":{"gitId":"twothicc"},"content":"        if (obj instanceof AddCommand) {","lastModifiedDate":"2021-08-22"},{"lineNumber":132,"author":{"gitId":"twothicc"},"content":"            AddCommand other \u003d (AddCommand) obj;","lastModifiedDate":"2021-08-22"},{"lineNumber":133,"author":{"gitId":"twothicc"},"content":"            return this.userInput.equals(other.userInput);","lastModifiedDate":"2021-08-22"},{"lineNumber":134,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":135,"author":{"gitId":"twothicc"},"content":"        return false;","lastModifiedDate":"2021-08-22"},{"lineNumber":136,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":137,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"twothicc":137}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke.command;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"import duke.Storable;","lastModifiedDate":"2021-08-21"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"/**","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":" * Command ensures that its derived classes have the execute method.","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":" */","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"public abstract class Command {","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"     * Executes a command.","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"     * Actions performed during execution depends on the command.","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"     * @param tasks TaskList that command executes upon.","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"     * @param ui Ui contains enums, response messages and exception messages that command execution will use.","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"     * @param storage Storage that command executes upon.","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":"    public abstract void execute(TaskList tasks, Ui ui, Storable storage);","lastModifiedDate":"2021-08-21"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"twothicc":20}},{"path":"src/main/java/duke/command/DateCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke.command;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"import duke.DukeException;","lastModifiedDate":"2021-08-21"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"import duke.Parser;","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"import duke.Storable;","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"import duke.Ui.Commands;","lastModifiedDate":"2021-08-21"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"import duke.task.Event;","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"/**","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":" * Represents a command that can be executed to print tasks falling on user specified date.","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":" */","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"public class DateCommand extends Command {","lastModifiedDate":"2021-08-21"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":"    private final String userInput;","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":21,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"twothicc"},"content":"     * Constructor for DateCommand.","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"twothicc"},"content":"     * Creates DateCommand containing user input.","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"twothicc"},"content":"     * @param userInput User\u0027s input into Duke chatbot.","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"twothicc"},"content":"    public DateCommand(String userInput) {","lastModifiedDate":"2021-08-21"},{"lineNumber":28,"author":{"gitId":"twothicc"},"content":"        this.userInput \u003d userInput;","lastModifiedDate":"2021-08-21"},{"lineNumber":29,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":30,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":31,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"twothicc"},"content":"     * Finds and prints tasks falling on user specified date.","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"twothicc"},"content":"     * @param tasks TaskList to search in.","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"twothicc"},"content":"     * @param ui Ui to get enums, response messages and exception messages from.","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"twothicc"},"content":"     * @throws DukeException If user input is missing time input.","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"twothicc"},"content":"     * @throws DukeException If user input has missing spaces.","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"twothicc"},"content":"     * @throws DukeException If user input for time is in invalid date format.","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"twothicc"},"content":"    private void printTaskAtDate(TaskList tasks, Ui ui) throws DukeException {","lastModifiedDate":"2021-08-21"},{"lineNumber":41,"author":{"gitId":"twothicc"},"content":"        // Initialize counters to track number of tasks, events and deadlines.","lastModifiedDate":"2021-08-21"},{"lineNumber":42,"author":{"gitId":"twothicc"},"content":"        int counter \u003d 0;","lastModifiedDate":"2021-08-21"},{"lineNumber":43,"author":{"gitId":"twothicc"},"content":"        int events \u003d 0;","lastModifiedDate":"2021-08-21"},{"lineNumber":44,"author":{"gitId":"twothicc"},"content":"        int deadlines \u003d 0;","lastModifiedDate":"2021-08-21"},{"lineNumber":45,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":46,"author":{"gitId":"twothicc"},"content":"        // Check if anything is provided 1 space after date command.","lastModifiedDate":"2021-08-21"},{"lineNumber":47,"author":{"gitId":"twothicc"},"content":"        if (this.userInput.length() \u003c\u003d (Commands.DATE.getLength() + 1)) {","lastModifiedDate":"2021-08-21"},{"lineNumber":48,"author":{"gitId":"twothicc"},"content":"            // If nothing is provided, date to search for is not provided.","lastModifiedDate":"2021-08-21"},{"lineNumber":49,"author":{"gitId":"twothicc"},"content":"            // Unlike other commands, a single character following after command without space is an invalid date.","lastModifiedDate":"2021-08-22"},{"lineNumber":50,"author":{"gitId":"twothicc"},"content":"            throw new DukeException(Ui.exceptionMissingDate());","lastModifiedDate":"2021-08-21"},{"lineNumber":51,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":52,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":53,"author":{"gitId":"twothicc"},"content":"        // Check for space after date command.","lastModifiedDate":"2021-08-21"},{"lineNumber":54,"author":{"gitId":"twothicc"},"content":"        // This prevents wrong date being read by reminding user to add space.","lastModifiedDate":"2021-08-21"},{"lineNumber":55,"author":{"gitId":"twothicc"},"content":"        if (this.userInput.charAt(Commands.DATE.getLength()) !\u003d \u0027 \u0027) {","lastModifiedDate":"2021-08-21"},{"lineNumber":56,"author":{"gitId":"twothicc"},"content":"            throw new DukeException(Ui.exceptionMissingSpaceAfterCommand(Commands.DATE.getCommand()));","lastModifiedDate":"2021-08-21"},{"lineNumber":57,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":58,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":59,"author":{"gitId":"twothicc"},"content":"        // Parses user input into LocalDate. User input for date will follow \"date\" command.","lastModifiedDate":"2021-08-21"},{"lineNumber":60,"author":{"gitId":"twothicc"},"content":"        String dateString \u003d this.userInput.substring(Commands.DATE.getLength() + 1);","lastModifiedDate":"2021-08-21"},{"lineNumber":61,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":62,"author":{"gitId":"twothicc"},"content":"        LocalDate localDate \u003d Parser.toLocalDate(dateString);","lastModifiedDate":"2021-08-21"},{"lineNumber":63,"author":{"gitId":"twothicc"},"content":"        String formattedDateString \u003d Parser.parseLocalDate(localDate);","lastModifiedDate":"2021-08-21"},{"lineNumber":64,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":65,"author":{"gitId":"twothicc"},"content":"        // Print to notify users of the date they are searching for.","lastModifiedDate":"2021-08-21"},{"lineNumber":66,"author":{"gitId":"twothicc"},"content":"        ui.showDateListSuccess(formattedDateString);","lastModifiedDate":"2021-08-21"},{"lineNumber":67,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":68,"author":{"gitId":"twothicc"},"content":"        // Print Deadlines and Events with LocalDate that matches date input from user.","lastModifiedDate":"2021-08-21"},{"lineNumber":69,"author":{"gitId":"twothicc"},"content":"        for (Task task : tasks.getTasks()) {","lastModifiedDate":"2021-08-21"},{"lineNumber":70,"author":{"gitId":"twothicc"},"content":"            if (task instanceof Deadline) {","lastModifiedDate":"2021-08-21"},{"lineNumber":71,"author":{"gitId":"twothicc"},"content":"                Deadline deadline \u003d (Deadline) task;","lastModifiedDate":"2021-08-21"},{"lineNumber":72,"author":{"gitId":"twothicc"},"content":"                if (localDate.equals(deadline.getTime())) {","lastModifiedDate":"2021-08-21"},{"lineNumber":73,"author":{"gitId":"twothicc"},"content":"                    counter++;","lastModifiedDate":"2021-08-21"},{"lineNumber":74,"author":{"gitId":"twothicc"},"content":"                    deadlines++;","lastModifiedDate":"2021-08-21"},{"lineNumber":75,"author":{"gitId":"twothicc"},"content":"                    System.out.println(counter + \".\" + deadline);","lastModifiedDate":"2021-08-21"},{"lineNumber":76,"author":{"gitId":"twothicc"},"content":"                }","lastModifiedDate":"2021-08-21"},{"lineNumber":77,"author":{"gitId":"twothicc"},"content":"            }","lastModifiedDate":"2021-08-21"},{"lineNumber":78,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":79,"author":{"gitId":"twothicc"},"content":"            if (task instanceof Event) {","lastModifiedDate":"2021-08-21"},{"lineNumber":80,"author":{"gitId":"twothicc"},"content":"                Event event \u003d (Event) task;","lastModifiedDate":"2021-08-21"},{"lineNumber":81,"author":{"gitId":"twothicc"},"content":"                if (localDate.equals(event.getTime())) {","lastModifiedDate":"2021-08-21"},{"lineNumber":82,"author":{"gitId":"twothicc"},"content":"                    counter++;","lastModifiedDate":"2021-08-21"},{"lineNumber":83,"author":{"gitId":"twothicc"},"content":"                    events++;","lastModifiedDate":"2021-08-21"},{"lineNumber":84,"author":{"gitId":"twothicc"},"content":"                    System.out.println(counter + \".\" + event);","lastModifiedDate":"2021-08-21"},{"lineNumber":85,"author":{"gitId":"twothicc"},"content":"                }","lastModifiedDate":"2021-08-21"},{"lineNumber":86,"author":{"gitId":"twothicc"},"content":"            }","lastModifiedDate":"2021-08-21"},{"lineNumber":87,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":88,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":89,"author":{"gitId":"twothicc"},"content":"        // Print a summary of matching tasks to the user.","lastModifiedDate":"2021-08-21"},{"lineNumber":90,"author":{"gitId":"twothicc"},"content":"        ui.showDateListSummary(formattedDateString, counter, deadlines, events);","lastModifiedDate":"2021-08-21"},{"lineNumber":91,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":92,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":93,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":94,"author":{"gitId":"twothicc"},"content":"     * Finds and prints tasks falling on user specified date.","lastModifiedDate":"2021-08-22"},{"lineNumber":95,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":96,"author":{"gitId":"twothicc"},"content":"     * @param tasks TaskList that command executes upon.","lastModifiedDate":"2021-08-22"},{"lineNumber":97,"author":{"gitId":"twothicc"},"content":"     * @param ui Ui contains enums, response messages and exception messages that command execution will use.","lastModifiedDate":"2021-08-22"},{"lineNumber":98,"author":{"gitId":"twothicc"},"content":"     * @param storage Storage that command executes upon.","lastModifiedDate":"2021-08-22"},{"lineNumber":99,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":100,"author":{"gitId":"twothicc"},"content":"    @Override","lastModifiedDate":"2021-08-21"},{"lineNumber":101,"author":{"gitId":"twothicc"},"content":"    public void execute(TaskList tasks, Ui ui, Storable storage) {","lastModifiedDate":"2021-08-21"},{"lineNumber":102,"author":{"gitId":"twothicc"},"content":"        try {","lastModifiedDate":"2021-08-21"},{"lineNumber":103,"author":{"gitId":"twothicc"},"content":"            // Print tasks that fall on user specified date.","lastModifiedDate":"2021-08-21"},{"lineNumber":104,"author":{"gitId":"twothicc"},"content":"            this.printTaskAtDate(tasks, ui);","lastModifiedDate":"2021-08-21"},{"lineNumber":105,"author":{"gitId":"twothicc"},"content":"        } catch (DukeException dukeException) {","lastModifiedDate":"2021-08-21"},{"lineNumber":106,"author":{"gitId":"twothicc"},"content":"            System.out.println(dukeException);","lastModifiedDate":"2021-08-21"},{"lineNumber":107,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":108,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":109,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":110,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":111,"author":{"gitId":"twothicc"},"content":"     * Indicates whether another object is equals to this DateCommand.","lastModifiedDate":"2021-08-22"},{"lineNumber":112,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":113,"author":{"gitId":"twothicc"},"content":"     * @param obj Other object to be compared to.","lastModifiedDate":"2021-08-22"},{"lineNumber":114,"author":{"gitId":"twothicc"},"content":"     * @return A boolean indicating whether the other object is equal to this DateCommand.","lastModifiedDate":"2021-08-22"},{"lineNumber":115,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":116,"author":{"gitId":"twothicc"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":117,"author":{"gitId":"twothicc"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2021-08-22"},{"lineNumber":118,"author":{"gitId":"twothicc"},"content":"        if (obj instanceof DateCommand) {","lastModifiedDate":"2021-08-22"},{"lineNumber":119,"author":{"gitId":"twothicc"},"content":"            DateCommand other \u003d (DateCommand) obj;","lastModifiedDate":"2021-08-22"},{"lineNumber":120,"author":{"gitId":"twothicc"},"content":"            return this.userInput.equals(other.userInput);","lastModifiedDate":"2021-08-22"},{"lineNumber":121,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":122,"author":{"gitId":"twothicc"},"content":"        return false;","lastModifiedDate":"2021-08-22"},{"lineNumber":123,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":124,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"twothicc":124}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke.command;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"import duke.DukeException;","lastModifiedDate":"2021-08-21"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"import duke.Parser;","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"import duke.Storable;","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"import duke.Ui.Commands;","lastModifiedDate":"2021-08-21"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"/**","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":" * Represents a command that can be executed to delete a task based on user input,","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":" * print the task deleted and new total count of tasks, then save tasks to storage.","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":" */","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2021-08-21"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"    private final String userInput;","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":"     * Constructor for DeleteCommand.","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":"     * Creates DeleteCommand containing user input.","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"twothicc"},"content":"     * @param userInput User\u0027s input into Duke chatbot.","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"twothicc"},"content":"    public DeleteCommand(String userInput) {","lastModifiedDate":"2021-08-21"},{"lineNumber":25,"author":{"gitId":"twothicc"},"content":"        this.userInput \u003d userInput;","lastModifiedDate":"2021-08-21"},{"lineNumber":26,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":27,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":28,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"twothicc"},"content":"     * Deletes a task based on user input, then prints the task deleted and new total count of tasks.","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"twothicc"},"content":"     * Task is deleted at index provided by user input in format \"delete N\", where N can be any valid index.","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"twothicc"},"content":"     * Index provided should be 1-based.","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"twothicc"},"content":"     * @param tasks TaskList to delete task from.","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"twothicc"},"content":"     * @param ui Ui to get enums, response messages and exception messages from.","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"twothicc"},"content":"     * @throws DukeException If user input is missing an index.","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"twothicc"},"content":"     * @throws DukeException If user input for index is not an integer.","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"twothicc"},"content":"     * @throws DukeException If user input for index is invalid.","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"twothicc"},"content":"    private void deleteTask(TaskList tasks, Ui ui) throws DukeException {","lastModifiedDate":"2021-08-21"},{"lineNumber":40,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"twothicc"},"content":"        // Preliminary check for any input following command.","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"twothicc"},"content":"        Parser.checkInputValidity(this.userInput, Commands.DELETE.getCommand(),","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"twothicc"},"content":"                Ui.exceptionMissingIndexForDelete());","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"twothicc"},"content":"        // Parses integer in user input. 1 space is accounted for as it separates command and index.","lastModifiedDate":"2021-08-21"},{"lineNumber":46,"author":{"gitId":"twothicc"},"content":"        int userNumInput \u003d Parser.parseUserNumInput(this.userInput, Commands.DELETE);","lastModifiedDate":"2021-08-21"},{"lineNumber":47,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":48,"author":{"gitId":"twothicc"},"content":"        // Decrement integer from user input to match indexing of tasks.","lastModifiedDate":"2021-08-21"},{"lineNumber":49,"author":{"gitId":"twothicc"},"content":"        int idx \u003d userNumInput - 1;","lastModifiedDate":"2021-08-21"},{"lineNumber":50,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":51,"author":{"gitId":"twothicc"},"content":"        // Checks for invalid index.","lastModifiedDate":"2021-08-21"},{"lineNumber":52,"author":{"gitId":"twothicc"},"content":"        if (idx \u003e\u003d tasks.size() || idx \u003c 0) {","lastModifiedDate":"2021-08-21"},{"lineNumber":53,"author":{"gitId":"twothicc"},"content":"            throw new DukeException(Ui.exceptionInvalidIndexForDelete());","lastModifiedDate":"2021-08-21"},{"lineNumber":54,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":55,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":56,"author":{"gitId":"twothicc"},"content":"        // Deletes task at index and obtain the deleted task","lastModifiedDate":"2021-08-21"},{"lineNumber":57,"author":{"gitId":"twothicc"},"content":"        Task deletedTask \u003d tasks.remove(idx);","lastModifiedDate":"2021-08-21"},{"lineNumber":58,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":59,"author":{"gitId":"twothicc"},"content":"        // Prints response to user after successfully deleting task at index.","lastModifiedDate":"2021-08-21"},{"lineNumber":60,"author":{"gitId":"twothicc"},"content":"        ui.showDeleteSuccess(deletedTask, tasks.size());","lastModifiedDate":"2021-08-21"},{"lineNumber":61,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":62,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":63,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":64,"author":{"gitId":"twothicc"},"content":"     * Deletes a task based on user input, prints the task deleted and new total count of tasks,","lastModifiedDate":"2021-08-22"},{"lineNumber":65,"author":{"gitId":"twothicc"},"content":"     * then saves tasks to storage.","lastModifiedDate":"2021-08-22"},{"lineNumber":66,"author":{"gitId":"twothicc"},"content":"     * Task is deleted at index provided by user input in format \"delete N\", where N can be any valid index.","lastModifiedDate":"2021-08-22"},{"lineNumber":67,"author":{"gitId":"twothicc"},"content":"     * Index provided should be 1-based.","lastModifiedDate":"2021-08-22"},{"lineNumber":68,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":69,"author":{"gitId":"twothicc"},"content":"     * @param tasks TaskList that command executes upon.","lastModifiedDate":"2021-08-22"},{"lineNumber":70,"author":{"gitId":"twothicc"},"content":"     * @param ui Ui contains enums, response messages and exception messages that command execution will use.","lastModifiedDate":"2021-08-22"},{"lineNumber":71,"author":{"gitId":"twothicc"},"content":"     * @param storage Storage that command executes upon.","lastModifiedDate":"2021-08-22"},{"lineNumber":72,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":73,"author":{"gitId":"twothicc"},"content":"    @Override","lastModifiedDate":"2021-08-21"},{"lineNumber":74,"author":{"gitId":"twothicc"},"content":"    public void execute(TaskList tasks, Ui ui, Storable storage) {","lastModifiedDate":"2021-08-21"},{"lineNumber":75,"author":{"gitId":"twothicc"},"content":"        try {","lastModifiedDate":"2021-08-21"},{"lineNumber":76,"author":{"gitId":"twothicc"},"content":"            // Deletes task at user specified index.","lastModifiedDate":"2021-08-21"},{"lineNumber":77,"author":{"gitId":"twothicc"},"content":"            this.deleteTask(tasks, ui);","lastModifiedDate":"2021-08-21"},{"lineNumber":78,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":79,"author":{"gitId":"twothicc"},"content":"            // Saves edited duke.TaskList to save file.","lastModifiedDate":"2021-08-21"},{"lineNumber":80,"author":{"gitId":"twothicc"},"content":"            storage.saveTasksToData(tasks);","lastModifiedDate":"2021-08-21"},{"lineNumber":81,"author":{"gitId":"twothicc"},"content":"        } catch (DukeException dukeException) {","lastModifiedDate":"2021-08-21"},{"lineNumber":82,"author":{"gitId":"twothicc"},"content":"            System.out.println(dukeException);","lastModifiedDate":"2021-08-21"},{"lineNumber":83,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":84,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":85,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":86,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":87,"author":{"gitId":"twothicc"},"content":"     * Indicates whether another object is equals to this DeleteCommand.","lastModifiedDate":"2021-08-22"},{"lineNumber":88,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":89,"author":{"gitId":"twothicc"},"content":"     * @param obj Other object to be compared to.","lastModifiedDate":"2021-08-22"},{"lineNumber":90,"author":{"gitId":"twothicc"},"content":"     * @return A boolean indicating whether the other object is equal to this DeleteCommand.","lastModifiedDate":"2021-08-22"},{"lineNumber":91,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":92,"author":{"gitId":"twothicc"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":93,"author":{"gitId":"twothicc"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2021-08-22"},{"lineNumber":94,"author":{"gitId":"twothicc"},"content":"        if (obj instanceof DeleteCommand) {","lastModifiedDate":"2021-08-22"},{"lineNumber":95,"author":{"gitId":"twothicc"},"content":"            DeleteCommand other \u003d (DeleteCommand) obj;","lastModifiedDate":"2021-08-22"},{"lineNumber":96,"author":{"gitId":"twothicc"},"content":"            return this.userInput.equals(other.userInput);","lastModifiedDate":"2021-08-22"},{"lineNumber":97,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":98,"author":{"gitId":"twothicc"},"content":"        return false;","lastModifiedDate":"2021-08-22"},{"lineNumber":99,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":100,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"twothicc":100}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke.command;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"import duke.DukeException;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"import duke.Parser;","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"import duke.Storable;","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"import duke.Ui.Commands;","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"/**","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":" * Represents a command that can be executed to print tasks with descriptions that match a search keyword.","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":" */","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"    private final String userInput;","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"     * Constructor for FindCommand.","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":"     * Creates a FindCommand containing user input.","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"twothicc"},"content":"     * @param userInput User\u0027s input into Duke chatbot.","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"twothicc"},"content":"    public FindCommand(String userInput) {","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"twothicc"},"content":"        this.userInput \u003d userInput;","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"twothicc"},"content":"     * Extracts out a search keyword from user input, then finds and prints tasks that contain the search keyword.","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"twothicc"},"content":"     * Search keyword is case-sensitive.","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"twothicc"},"content":"     * @param tasks TaskList to perform search on.","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"twothicc"},"content":"     * @param ui Ui to get enums, response messages and exception messages from.","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"twothicc"},"content":"     * @throws DukeException If user input has missing spaces.","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"twothicc"},"content":"     * @throws DukeException If user input has no search keyword.","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"twothicc"},"content":"    private void printTaskMatchingSearch(TaskList tasks, Ui ui) throws DukeException {","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"twothicc"},"content":"        // Preliminary check for validity of user input.","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"twothicc"},"content":"        Parser.checkInputValidity(this.userInput, Commands.FIND.getCommand(), Ui.exceptionMissingSearchInput());","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"twothicc"},"content":"        // Initalize counter to track number of matching tasks.","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"twothicc"},"content":"        int counter \u003d 0;","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"twothicc"},"content":"        // Extract search keyword from 1 space after \"find\" command in user input.","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"twothicc"},"content":"        String keyword \u003d this.userInput.substring(Commands.FIND.getLength() + 1);","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"twothicc"},"content":"        // Print standard response for search begin to user.","lastModifiedDate":"2021-08-22"},{"lineNumber":47,"author":{"gitId":"twothicc"},"content":"        ui.showFindBegin();","lastModifiedDate":"2021-08-22"},{"lineNumber":48,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":49,"author":{"gitId":"twothicc"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2021-08-22"},{"lineNumber":50,"author":{"gitId":"twothicc"},"content":"            Task task \u003d tasks.get(i);","lastModifiedDate":"2021-08-22"},{"lineNumber":51,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":52,"author":{"gitId":"twothicc"},"content":"            // contains() performs case-sensitive search for keyword in task description.","lastModifiedDate":"2021-08-22"},{"lineNumber":53,"author":{"gitId":"twothicc"},"content":"            if (task.getDescription().contains(keyword)) {","lastModifiedDate":"2021-08-22"},{"lineNumber":54,"author":{"gitId":"twothicc"},"content":"                // Add 1 as display index is 1-based while TaskList index is 0-based.","lastModifiedDate":"2021-08-22"},{"lineNumber":55,"author":{"gitId":"twothicc"},"content":"                int idx \u003d i + 1;","lastModifiedDate":"2021-08-22"},{"lineNumber":56,"author":{"gitId":"twothicc"},"content":"                System.out.println(idx + \".\" + task);","lastModifiedDate":"2021-08-22"},{"lineNumber":57,"author":{"gitId":"twothicc"},"content":"                counter++;","lastModifiedDate":"2021-08-22"},{"lineNumber":58,"author":{"gitId":"twothicc"},"content":"            }","lastModifiedDate":"2021-08-22"},{"lineNumber":59,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":60,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":61,"author":{"gitId":"twothicc"},"content":"        // Print standard response for search success to user.","lastModifiedDate":"2021-08-22"},{"lineNumber":62,"author":{"gitId":"twothicc"},"content":"        ui.showFindSuccess(counter, keyword);","lastModifiedDate":"2021-08-22"},{"lineNumber":63,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":64,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":65,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":66,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":67,"author":{"gitId":"twothicc"},"content":"     * Finds and prints tasks with descriptions that matches search keyword.","lastModifiedDate":"2021-08-22"},{"lineNumber":68,"author":{"gitId":"twothicc"},"content":"     * Accepts user inputs of the form \"find keyword\" where keyword can be any search keyword.","lastModifiedDate":"2021-08-22"},{"lineNumber":69,"author":{"gitId":"twothicc"},"content":"     * Search keyword can also be just spaces or consisting of multiple words.","lastModifiedDate":"2021-08-22"},{"lineNumber":70,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":71,"author":{"gitId":"twothicc"},"content":"     * @param tasks TaskList that command executes upon.","lastModifiedDate":"2021-08-22"},{"lineNumber":72,"author":{"gitId":"twothicc"},"content":"     * @param ui Ui contains enums, response messages and exception messages that command execution will use.","lastModifiedDate":"2021-08-22"},{"lineNumber":73,"author":{"gitId":"twothicc"},"content":"     * @param storage Storage that command executes upon.","lastModifiedDate":"2021-08-22"},{"lineNumber":74,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":75,"author":{"gitId":"twothicc"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":76,"author":{"gitId":"twothicc"},"content":"    public void execute(TaskList tasks, Ui ui, Storable storage) {","lastModifiedDate":"2021-08-22"},{"lineNumber":77,"author":{"gitId":"twothicc"},"content":"        try {","lastModifiedDate":"2021-08-22"},{"lineNumber":78,"author":{"gitId":"twothicc"},"content":"            printTaskMatchingSearch(tasks, ui);","lastModifiedDate":"2021-08-22"},{"lineNumber":79,"author":{"gitId":"twothicc"},"content":"        } catch (DukeException dukeException) {","lastModifiedDate":"2021-08-22"},{"lineNumber":80,"author":{"gitId":"twothicc"},"content":"            System.out.println(dukeException);","lastModifiedDate":"2021-08-22"},{"lineNumber":81,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":82,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":83,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":84,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":85,"author":{"gitId":"twothicc"},"content":"     * Indicates whether another object is equals to this FindCommand.","lastModifiedDate":"2021-08-22"},{"lineNumber":86,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":87,"author":{"gitId":"twothicc"},"content":"     * @param obj Other object to be compared to.","lastModifiedDate":"2021-08-22"},{"lineNumber":88,"author":{"gitId":"twothicc"},"content":"     * @return A boolean indicating whether the other object is equal to this FindCommand.","lastModifiedDate":"2021-08-22"},{"lineNumber":89,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":90,"author":{"gitId":"twothicc"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":91,"author":{"gitId":"twothicc"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2021-08-22"},{"lineNumber":92,"author":{"gitId":"twothicc"},"content":"        if (obj instanceof FindCommand) {","lastModifiedDate":"2021-08-22"},{"lineNumber":93,"author":{"gitId":"twothicc"},"content":"            FindCommand other \u003d (FindCommand) obj;","lastModifiedDate":"2021-08-22"},{"lineNumber":94,"author":{"gitId":"twothicc"},"content":"            return this.userInput.equals(other.userInput);","lastModifiedDate":"2021-08-22"},{"lineNumber":95,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":96,"author":{"gitId":"twothicc"},"content":"        return false;","lastModifiedDate":"2021-08-22"},{"lineNumber":97,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":98,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":99,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":100,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"twothicc":100}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke.command;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"import duke.Storable;","lastModifiedDate":"2021-08-21"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"/**","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":" * Represents a command that can be executed to print all existing tasks.","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":" */","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"    private String userInput;","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"     * Constructor for ListCommand.","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"     * Creates a ListCommand with user input.","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"     * @param userInput User\u0027s input into Duke chatbot.","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":"    public ListCommand(String userInput) {","lastModifiedDate":"2021-08-21"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":"        this.userInput \u003d userInput;","lastModifiedDate":"2021-08-21"},{"lineNumber":21,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":22,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":23,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"twothicc"},"content":"     * Iterates through tasks and prints each task in a formatted string.","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"twothicc"},"content":"     * @param tasks TaskList from which tasks will be printed.","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"twothicc"},"content":"     * @param ui Ui to get enums, response messages and exception messages from.","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"twothicc"},"content":"    private void printTasks(TaskList tasks, Ui ui) {","lastModifiedDate":"2021-08-21"},{"lineNumber":30,"author":{"gitId":"twothicc"},"content":"        ui.showListSuccess();","lastModifiedDate":"2021-08-21"},{"lineNumber":31,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"twothicc"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2021-08-21"},{"lineNumber":33,"author":{"gitId":"twothicc"},"content":"            // Increment i by 1 so number matches display indexing which starts from 1.","lastModifiedDate":"2021-08-21"},{"lineNumber":34,"author":{"gitId":"twothicc"},"content":"            int idx \u003d i + 1;","lastModifiedDate":"2021-08-21"},{"lineNumber":35,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":36,"author":{"gitId":"twothicc"},"content":"            // Format should be \"?. taskDescription\\n\"","lastModifiedDate":"2021-08-21"},{"lineNumber":37,"author":{"gitId":"twothicc"},"content":"            System.out.printf(\"%d.%s%n\", idx, tasks.get(i).toString());","lastModifiedDate":"2021-08-21"},{"lineNumber":38,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":39,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":40,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":41,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"twothicc"},"content":"     * Prints all existing tasks.","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"twothicc"},"content":"     * Responds to user inputs of the format \"list\".","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"twothicc"},"content":"     * @param tasks TaskList that command executes upon.","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"twothicc"},"content":"     * @param ui Ui contains enums, response messages and exception messages that command execution will use.","lastModifiedDate":"2021-08-22"},{"lineNumber":47,"author":{"gitId":"twothicc"},"content":"     * @param storage Not Used. Storage that command executes upon.","lastModifiedDate":"2021-08-22"},{"lineNumber":48,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":49,"author":{"gitId":"twothicc"},"content":"    @Override","lastModifiedDate":"2021-08-21"},{"lineNumber":50,"author":{"gitId":"twothicc"},"content":"    public void execute(TaskList tasks, Ui ui, Storable storage) {","lastModifiedDate":"2021-08-21"},{"lineNumber":51,"author":{"gitId":"twothicc"},"content":"        // Prints tasks in tasks.","lastModifiedDate":"2021-08-21"},{"lineNumber":52,"author":{"gitId":"twothicc"},"content":"        this.printTasks(tasks, ui);","lastModifiedDate":"2021-08-21"},{"lineNumber":53,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":54,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":55,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":56,"author":{"gitId":"twothicc"},"content":"     * Indicates whether another object is equals to this ListCommand.","lastModifiedDate":"2021-08-22"},{"lineNumber":57,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":58,"author":{"gitId":"twothicc"},"content":"     * @param obj Other object to be compared to.","lastModifiedDate":"2021-08-22"},{"lineNumber":59,"author":{"gitId":"twothicc"},"content":"     * @return A boolean indicating whether the other object is equal to this ListCommand.","lastModifiedDate":"2021-08-22"},{"lineNumber":60,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":61,"author":{"gitId":"twothicc"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":62,"author":{"gitId":"twothicc"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2021-08-22"},{"lineNumber":63,"author":{"gitId":"twothicc"},"content":"        if (obj instanceof ListCommand) {","lastModifiedDate":"2021-08-22"},{"lineNumber":64,"author":{"gitId":"twothicc"},"content":"            ListCommand other \u003d (ListCommand) obj;","lastModifiedDate":"2021-08-22"},{"lineNumber":65,"author":{"gitId":"twothicc"},"content":"            return this.userInput.equals(other.userInput);","lastModifiedDate":"2021-08-22"},{"lineNumber":66,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":67,"author":{"gitId":"twothicc"},"content":"        return false;","lastModifiedDate":"2021-08-22"},{"lineNumber":68,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":69,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"twothicc":69}},{"path":"src/main/java/duke/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke.command;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"import duke.DukeException;","lastModifiedDate":"2021-08-21"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"import duke.Parser;","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"import duke.Storable;","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"import duke.Ui.Commands;","lastModifiedDate":"2021-08-21"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"/**","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":" * Represents a command that can be executed to mark a task as done, print the marked task,","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":" * then save tasks to storage.","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":" */","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"    private final String userInput;","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"     * Constructor for MarkCommand.","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":"     * Creates a MarkCommand containing user input.","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"twothicc"},"content":"     * @param userInput User\u0027s input into Duke chatbot.","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"twothicc"},"content":"    public MarkCommand(String userInput) {","lastModifiedDate":"2021-08-21"},{"lineNumber":24,"author":{"gitId":"twothicc"},"content":"        this.userInput \u003d userInput;","lastModifiedDate":"2021-08-21"},{"lineNumber":25,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":26,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":27,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"twothicc"},"content":"     * Marks task at index specified by user input as done, then prints the marked task.","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"twothicc"},"content":"     * Accepts user input of the form \"done N\", where N can be any valid index.","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"twothicc"},"content":"     * Index provided should be 1-based.","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"twothicc"},"content":"     * @param tasks TaskList to mark a task in.","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"twothicc"},"content":"     * @param ui Ui to get enums, response messages and exception messages from.","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"twothicc"},"content":"     * @throws DukeException If user input is missing an index.","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"twothicc"},"content":"     * @throws DukeException If user input for index is not an integer.","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"twothicc"},"content":"     * @throws DukeException If user input for index is invalid.","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"twothicc"},"content":"    private void markTask(TaskList tasks, Ui ui) throws DukeException {","lastModifiedDate":"2021-08-21"},{"lineNumber":39,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"twothicc"},"content":"        // Preliminary check for any input following command.","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"twothicc"},"content":"        Parser.checkInputValidity(this.userInput, Commands.DONE.getCommand(),","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"twothicc"},"content":"                Ui.exceptionMissingIndexForMarking());","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"twothicc"},"content":"        // Parses integer in user input.","lastModifiedDate":"2021-08-21"},{"lineNumber":45,"author":{"gitId":"twothicc"},"content":"        int userNumInput \u003d Parser.parseUserNumInput(this.userInput, Commands.DONE);","lastModifiedDate":"2021-08-21"},{"lineNumber":46,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":47,"author":{"gitId":"twothicc"},"content":"        // Decrement integer from user input to match indexing of tasks.","lastModifiedDate":"2021-08-21"},{"lineNumber":48,"author":{"gitId":"twothicc"},"content":"        int idx \u003d userNumInput - 1;","lastModifiedDate":"2021-08-21"},{"lineNumber":49,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":50,"author":{"gitId":"twothicc"},"content":"        // Checks for invalid index.","lastModifiedDate":"2021-08-21"},{"lineNumber":51,"author":{"gitId":"twothicc"},"content":"        if (idx \u003e\u003d tasks.size() || idx \u003c 0) {","lastModifiedDate":"2021-08-21"},{"lineNumber":52,"author":{"gitId":"twothicc"},"content":"            throw new DukeException(Ui.exceptionInvalidIndexForMarking());","lastModifiedDate":"2021-08-21"},{"lineNumber":53,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":54,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":55,"author":{"gitId":"twothicc"},"content":"        // Marks task at index as done.","lastModifiedDate":"2021-08-21"},{"lineNumber":56,"author":{"gitId":"twothicc"},"content":"        tasks.get(idx).markAsDone();","lastModifiedDate":"2021-08-21"},{"lineNumber":57,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":58,"author":{"gitId":"twothicc"},"content":"        // Prints response to user after successfully marking task at index as done.","lastModifiedDate":"2021-08-21"},{"lineNumber":59,"author":{"gitId":"twothicc"},"content":"        ui.showMarkSuccess(tasks.get(idx));","lastModifiedDate":"2021-08-21"},{"lineNumber":60,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":61,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":62,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":63,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":64,"author":{"gitId":"twothicc"},"content":"     * Marks a task at index specified by user input as done, prints the marked task, then saves tasks to storage.","lastModifiedDate":"2021-08-22"},{"lineNumber":65,"author":{"gitId":"twothicc"},"content":"     * Accepts user input of the form \"done N\", where N can be any valid index.","lastModifiedDate":"2021-08-22"},{"lineNumber":66,"author":{"gitId":"twothicc"},"content":"     * Index provided should be 1-based.","lastModifiedDate":"2021-08-22"},{"lineNumber":67,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":68,"author":{"gitId":"twothicc"},"content":"     * @param tasks TaskList that command executes upon.","lastModifiedDate":"2021-08-22"},{"lineNumber":69,"author":{"gitId":"twothicc"},"content":"     * @param ui Ui contains enums, response messages and exception messages that command execution will use.","lastModifiedDate":"2021-08-22"},{"lineNumber":70,"author":{"gitId":"twothicc"},"content":"     * @param storage Storage that command executes upon.","lastModifiedDate":"2021-08-22"},{"lineNumber":71,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":72,"author":{"gitId":"twothicc"},"content":"    @Override","lastModifiedDate":"2021-08-21"},{"lineNumber":73,"author":{"gitId":"twothicc"},"content":"    public void execute(TaskList tasks, Ui ui, Storable storage) {","lastModifiedDate":"2021-08-21"},{"lineNumber":74,"author":{"gitId":"twothicc"},"content":"        try {","lastModifiedDate":"2021-08-21"},{"lineNumber":75,"author":{"gitId":"twothicc"},"content":"            // Marks duke.task.Task at user specified index in duke.TaskList.","lastModifiedDate":"2021-08-21"},{"lineNumber":76,"author":{"gitId":"twothicc"},"content":"            this.markTask(tasks, ui);","lastModifiedDate":"2021-08-21"},{"lineNumber":77,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":78,"author":{"gitId":"twothicc"},"content":"            // Saves edited duke.TaskList to save file.","lastModifiedDate":"2021-08-21"},{"lineNumber":79,"author":{"gitId":"twothicc"},"content":"            storage.saveTasksToData(tasks);","lastModifiedDate":"2021-08-21"},{"lineNumber":80,"author":{"gitId":"twothicc"},"content":"        } catch (DukeException dukeException) {","lastModifiedDate":"2021-08-21"},{"lineNumber":81,"author":{"gitId":"twothicc"},"content":"            System.out.println(dukeException);","lastModifiedDate":"2021-08-21"},{"lineNumber":82,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":83,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":84,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":85,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":86,"author":{"gitId":"twothicc"},"content":"     * Indicates whether another object is equals to this MarkCommand.","lastModifiedDate":"2021-08-22"},{"lineNumber":87,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":88,"author":{"gitId":"twothicc"},"content":"     * @param obj Other object to be compared to.","lastModifiedDate":"2021-08-22"},{"lineNumber":89,"author":{"gitId":"twothicc"},"content":"     * @return A boolean indicating whether the other object is equal to this MarkCommand.","lastModifiedDate":"2021-08-22"},{"lineNumber":90,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":91,"author":{"gitId":"twothicc"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":92,"author":{"gitId":"twothicc"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2021-08-22"},{"lineNumber":93,"author":{"gitId":"twothicc"},"content":"        if (obj instanceof MarkCommand) {","lastModifiedDate":"2021-08-22"},{"lineNumber":94,"author":{"gitId":"twothicc"},"content":"            MarkCommand other \u003d (MarkCommand) obj;","lastModifiedDate":"2021-08-22"},{"lineNumber":95,"author":{"gitId":"twothicc"},"content":"            return this.userInput.equals(other.userInput);","lastModifiedDate":"2021-08-22"},{"lineNumber":96,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":97,"author":{"gitId":"twothicc"},"content":"        return false;","lastModifiedDate":"2021-08-22"},{"lineNumber":98,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":99,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"twothicc":99}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke.task;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"import duke.DukeException;","lastModifiedDate":"2021-08-21"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"import duke.Parser;","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-20"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"/**","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":" * Represents a deadline with a description and a date that it is due by.","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":" */","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-14"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"    protected LocalDate by;","lastModifiedDate":"2021-08-20"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"     * Constructor for Deadline.","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"     * Creates a Deadline with description and a date.","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"     * @param description Description of task to be done by due date.","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":"     * @param by Date that the task is due by.","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"twothicc"},"content":"    public Deadline(String description, LocalDate by) {","lastModifiedDate":"2021-08-20"},{"lineNumber":22,"author":{"gitId":"twothicc"},"content":"        super(description);","lastModifiedDate":"2021-08-14"},{"lineNumber":23,"author":{"gitId":"twothicc"},"content":"        this.by \u003d by;","lastModifiedDate":"2021-08-14"},{"lineNumber":24,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":25,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":26,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"twothicc"},"content":"     * Returns a string identifier for a Deadline.","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"twothicc"},"content":"     * String identifier for Deadline is \"D\".","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"twothicc"},"content":"     * @return String identifier for Deadline.","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"twothicc"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":33,"author":{"gitId":"twothicc"},"content":"    public String getTaskType() {","lastModifiedDate":"2021-08-19"},{"lineNumber":34,"author":{"gitId":"twothicc"},"content":"        return \"D\";","lastModifiedDate":"2021-08-19"},{"lineNumber":35,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":36,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":37,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"twothicc"},"content":"     * Returns the date that the task represented by this Deadline is due by.","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"twothicc"},"content":"     * @return Date that the task represented by this Deadline is due by.","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"twothicc"},"content":"    @Override","lastModifiedDate":"2021-08-20"},{"lineNumber":43,"author":{"gitId":"twothicc"},"content":"    public LocalDate getTime() {","lastModifiedDate":"2021-08-20"},{"lineNumber":44,"author":{"gitId":"twothicc"},"content":"        return this.by;","lastModifiedDate":"2021-08-19"},{"lineNumber":45,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":46,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":47,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":48,"author":{"gitId":"twothicc"},"content":"     * Returns a formatted string that starts with this Deadline\u0027s string identifier, followed by","lastModifiedDate":"2021-08-22"},{"lineNumber":49,"author":{"gitId":"twothicc"},"content":"     * its done status and description, and finally its due date.","lastModifiedDate":"2021-08-22"},{"lineNumber":50,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":51,"author":{"gitId":"twothicc"},"content":"     * @return Formatted description of this Deadline.","lastModifiedDate":"2021-08-22"},{"lineNumber":52,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":53,"author":{"gitId":"twothicc"},"content":"    @Override","lastModifiedDate":"2021-08-14"},{"lineNumber":54,"author":{"gitId":"twothicc"},"content":"    public String toString() {","lastModifiedDate":"2021-08-14"},{"lineNumber":55,"author":{"gitId":"twothicc"},"content":"        try {","lastModifiedDate":"2021-08-20"},{"lineNumber":56,"author":{"gitId":"twothicc"},"content":"            return \"[D]\" + super.toString() + \" (by: \" + Parser.parseLocalDate(this.by) + \")\";","lastModifiedDate":"2021-08-20"},{"lineNumber":57,"author":{"gitId":"twothicc"},"content":"        } catch (DukeException dukeException) {","lastModifiedDate":"2021-08-20"},{"lineNumber":58,"author":{"gitId":"twothicc"},"content":"            return dukeException.toString();","lastModifiedDate":"2021-08-20"},{"lineNumber":59,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":60,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":61,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":62,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":63,"author":{"gitId":"twothicc"},"content":"     * Indicates whether another object is equals to this Deadline.","lastModifiedDate":"2021-08-22"},{"lineNumber":64,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":65,"author":{"gitId":"twothicc"},"content":"     * @param obj Other object to be compared to.","lastModifiedDate":"2021-08-22"},{"lineNumber":66,"author":{"gitId":"twothicc"},"content":"     * @return A boolean indicating whether the other object is equals to this Deadline.","lastModifiedDate":"2021-08-22"},{"lineNumber":67,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":68,"author":{"gitId":"twothicc"},"content":"    @Override","lastModifiedDate":"2021-08-21"},{"lineNumber":69,"author":{"gitId":"twothicc"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2021-08-21"},{"lineNumber":70,"author":{"gitId":"twothicc"},"content":"        if (obj instanceof Deadline) {","lastModifiedDate":"2021-08-21"},{"lineNumber":71,"author":{"gitId":"twothicc"},"content":"            Deadline other \u003d (Deadline) obj;","lastModifiedDate":"2021-08-21"},{"lineNumber":72,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":73,"author":{"gitId":"twothicc"},"content":"            // Check if done status, description and time are the same.","lastModifiedDate":"2021-08-22"},{"lineNumber":74,"author":{"gitId":"twothicc"},"content":"            boolean isDoneStatusSame \u003d this.isDone \u003d\u003d other.isDone;","lastModifiedDate":"2021-08-22"},{"lineNumber":75,"author":{"gitId":"twothicc"},"content":"            boolean isDescriptionSame \u003d this.description.equals(other.description);","lastModifiedDate":"2021-08-22"},{"lineNumber":76,"author":{"gitId":"twothicc"},"content":"            boolean isTimeSame \u003d this.by.equals(other.by);","lastModifiedDate":"2021-08-22"},{"lineNumber":77,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":78,"author":{"gitId":"twothicc"},"content":"            return (isDoneStatusSame \u0026\u0026 isDescriptionSame \u0026\u0026 isTimeSame);","lastModifiedDate":"2021-08-22"},{"lineNumber":79,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":80,"author":{"gitId":"twothicc"},"content":"        return false;","lastModifiedDate":"2021-08-21"},{"lineNumber":81,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":82,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"twothicc":82}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke.task;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"import duke.DukeException;","lastModifiedDate":"2021-08-21"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"import duke.Parser;","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-20"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"/**","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":" * Represents an event with a description and a date that it occurs on.","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":" */","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-14"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"    protected LocalDate at;","lastModifiedDate":"2021-08-20"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"     * Constructor for Event.","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"     * Creates an Event with description and a date.","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"     * @param description Task description.","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":"     * @param at Date that task occurs on.","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"twothicc"},"content":"    public Event(String description, LocalDate at) {","lastModifiedDate":"2021-08-20"},{"lineNumber":22,"author":{"gitId":"twothicc"},"content":"        super(description);","lastModifiedDate":"2021-08-14"},{"lineNumber":23,"author":{"gitId":"twothicc"},"content":"        this.at \u003d at;","lastModifiedDate":"2021-08-14"},{"lineNumber":24,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":25,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":26,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"twothicc"},"content":"     * Returns string identifier for an Event.","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"twothicc"},"content":"     * String identifier for an Event is \"E\".","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"twothicc"},"content":"     * @return String identifier for an Event.","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"twothicc"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":33,"author":{"gitId":"twothicc"},"content":"    public String getTaskType() {","lastModifiedDate":"2021-08-19"},{"lineNumber":34,"author":{"gitId":"twothicc"},"content":"        return \"E\";","lastModifiedDate":"2021-08-19"},{"lineNumber":35,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":36,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":37,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"twothicc"},"content":"     * Returns date that the task represented by this Event occurs on.","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"twothicc"},"content":"     * @return Date that the task represented by this Event occurs on.","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"twothicc"},"content":"    @Override","lastModifiedDate":"2021-08-20"},{"lineNumber":43,"author":{"gitId":"twothicc"},"content":"    public LocalDate getTime() {","lastModifiedDate":"2021-08-20"},{"lineNumber":44,"author":{"gitId":"twothicc"},"content":"        return this.at;","lastModifiedDate":"2021-08-19"},{"lineNumber":45,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":46,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":47,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":48,"author":{"gitId":"twothicc"},"content":"     * Returns a formatted string that starts with this Event\u0027s string identifier, followed by","lastModifiedDate":"2021-08-22"},{"lineNumber":49,"author":{"gitId":"twothicc"},"content":"     * its done status and description, and finally its date of occurrence.","lastModifiedDate":"2021-08-22"},{"lineNumber":50,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":51,"author":{"gitId":"twothicc"},"content":"     * @return Formatted description of this Event.","lastModifiedDate":"2021-08-22"},{"lineNumber":52,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":53,"author":{"gitId":"twothicc"},"content":"    @Override","lastModifiedDate":"2021-08-14"},{"lineNumber":54,"author":{"gitId":"twothicc"},"content":"    public String toString() {","lastModifiedDate":"2021-08-14"},{"lineNumber":55,"author":{"gitId":"twothicc"},"content":"        try {","lastModifiedDate":"2021-08-20"},{"lineNumber":56,"author":{"gitId":"twothicc"},"content":"            return \"[E]\" + super.toString() + \" (at: \" + Parser.parseLocalDate(this.at) + \")\";","lastModifiedDate":"2021-08-20"},{"lineNumber":57,"author":{"gitId":"twothicc"},"content":"        } catch (DukeException dukeException) {","lastModifiedDate":"2021-08-20"},{"lineNumber":58,"author":{"gitId":"twothicc"},"content":"            return dukeException.toString();","lastModifiedDate":"2021-08-20"},{"lineNumber":59,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":60,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":61,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":62,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":63,"author":{"gitId":"twothicc"},"content":"     * Indicates whether another object is equals to this Event.","lastModifiedDate":"2021-08-22"},{"lineNumber":64,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":65,"author":{"gitId":"twothicc"},"content":"     * @param obj Other object to be compared to.","lastModifiedDate":"2021-08-22"},{"lineNumber":66,"author":{"gitId":"twothicc"},"content":"     * @return A boolean indicating whether the other object is equals to this Event.","lastModifiedDate":"2021-08-22"},{"lineNumber":67,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":68,"author":{"gitId":"twothicc"},"content":"    @Override","lastModifiedDate":"2021-08-21"},{"lineNumber":69,"author":{"gitId":"twothicc"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2021-08-21"},{"lineNumber":70,"author":{"gitId":"twothicc"},"content":"        if (obj instanceof Event) {","lastModifiedDate":"2021-08-21"},{"lineNumber":71,"author":{"gitId":"twothicc"},"content":"            Event other \u003d (Event) obj;","lastModifiedDate":"2021-08-21"},{"lineNumber":72,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":73,"author":{"gitId":"twothicc"},"content":"            // Check if done status, description and time are the same.","lastModifiedDate":"2021-08-22"},{"lineNumber":74,"author":{"gitId":"twothicc"},"content":"            boolean isDoneStatusSame \u003d this.isDone \u003d\u003d other.isDone;","lastModifiedDate":"2021-08-22"},{"lineNumber":75,"author":{"gitId":"twothicc"},"content":"            boolean isDescriptionSame \u003d this.description.equals(other.description);","lastModifiedDate":"2021-08-22"},{"lineNumber":76,"author":{"gitId":"twothicc"},"content":"            boolean isTimeSame \u003d this.at.equals(other.at);","lastModifiedDate":"2021-08-22"},{"lineNumber":77,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":78,"author":{"gitId":"twothicc"},"content":"            return (isDoneStatusSame \u0026\u0026 isDescriptionSame \u0026\u0026 isTimeSame);","lastModifiedDate":"2021-08-22"},{"lineNumber":79,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":80,"author":{"gitId":"twothicc"},"content":"        return false;","lastModifiedDate":"2021-08-21"},{"lineNumber":81,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":82,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"twothicc":82}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke.task;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-20"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"/**","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":" * Represents a task containing a description and a done status.","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":" */","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"public class Task {","lastModifiedDate":"2021-08-14"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"    protected String description;","lastModifiedDate":"2021-08-14"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-14"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"     * Constructor for Task.","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"     * Creates a Task containing a description that is by default undone.","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"     * @param description Description of the task.","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"    public Task(String description) {","lastModifiedDate":"2021-08-14"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-14"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-14"},{"lineNumber":21,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":22,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":23,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"twothicc"},"content":"     * Indicates whether this Task is done.","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"twothicc"},"content":"     * @return boolean indicating whether this Task is done.","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"twothicc"},"content":"    public boolean getIsDone() {","lastModifiedDate":"2021-08-21"},{"lineNumber":29,"author":{"gitId":"twothicc"},"content":"        return isDone;","lastModifiedDate":"2021-08-21"},{"lineNumber":30,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":31,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":32,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"twothicc"},"content":"     * Returns description of this Task.","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"twothicc"},"content":"     * @return Description contained in this Task.","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"twothicc"},"content":"    public String getDescription() {","lastModifiedDate":"2021-08-21"},{"lineNumber":38,"author":{"gitId":"twothicc"},"content":"        return description;","lastModifiedDate":"2021-08-21"},{"lineNumber":39,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":40,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":41,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"twothicc"},"content":"     * Returns \"X\" if this Task is done and \" \" otherwise.","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"twothicc"},"content":"     * @return A formatted String indicating if Task is done.","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"twothicc"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-14"},{"lineNumber":47,"author":{"gitId":"twothicc"},"content":"        return (this.isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2021-08-22"},{"lineNumber":48,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":49,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":50,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":51,"author":{"gitId":"twothicc"},"content":"     * Returns null.","lastModifiedDate":"2021-08-22"},{"lineNumber":52,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":53,"author":{"gitId":"twothicc"},"content":"     * @return null.","lastModifiedDate":"2021-08-22"},{"lineNumber":54,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":55,"author":{"gitId":"twothicc"},"content":"    public LocalDate getTime() {","lastModifiedDate":"2021-08-20"},{"lineNumber":56,"author":{"gitId":"twothicc"},"content":"        return null;","lastModifiedDate":"2021-08-20"},{"lineNumber":57,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":58,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":59,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":60,"author":{"gitId":"twothicc"},"content":"     * Marks this Task as done.","lastModifiedDate":"2021-08-22"},{"lineNumber":61,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":62,"author":{"gitId":"twothicc"},"content":"    public void markAsDone() {","lastModifiedDate":"2021-08-14"},{"lineNumber":63,"author":{"gitId":"twothicc"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-08-14"},{"lineNumber":64,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":65,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":66,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":67,"author":{"gitId":"twothicc"},"content":"     * Returns null.","lastModifiedDate":"2021-08-22"},{"lineNumber":68,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":69,"author":{"gitId":"twothicc"},"content":"     * @return null.","lastModifiedDate":"2021-08-22"},{"lineNumber":70,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":71,"author":{"gitId":"twothicc"},"content":"    public String getTaskType() {","lastModifiedDate":"2021-08-19"},{"lineNumber":72,"author":{"gitId":"twothicc"},"content":"        return null;","lastModifiedDate":"2021-08-19"},{"lineNumber":73,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":74,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":75,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":76,"author":{"gitId":"twothicc"},"content":"     * Returns a formatted string that begins with this Task\u0027s done status and ends with its description.","lastModifiedDate":"2021-08-22"},{"lineNumber":77,"author":{"gitId":"twothicc"},"content":"     * The String is formatted to fit the form \"[S] D\", where S is either \"X\" or \" \" depending on this Task\u0027s","lastModifiedDate":"2021-08-22"},{"lineNumber":78,"author":{"gitId":"twothicc"},"content":"     * done status and D is this Task\u0027s description.","lastModifiedDate":"2021-08-22"},{"lineNumber":79,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":80,"author":{"gitId":"twothicc"},"content":"     * @return Formatted description of this Task.","lastModifiedDate":"2021-08-22"},{"lineNumber":81,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":82,"author":{"gitId":"twothicc"},"content":"    @Override","lastModifiedDate":"2021-08-14"},{"lineNumber":83,"author":{"gitId":"twothicc"},"content":"    public String toString() {","lastModifiedDate":"2021-08-14"},{"lineNumber":84,"author":{"gitId":"twothicc"},"content":"        return String.format(\"[%s] %s\", this.getStatusIcon(), this.description);","lastModifiedDate":"2021-08-14"},{"lineNumber":85,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":86,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":87,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":88,"author":{"gitId":"twothicc"},"content":"     * Indicates whether another object is equals to this Task.","lastModifiedDate":"2021-08-22"},{"lineNumber":89,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":90,"author":{"gitId":"twothicc"},"content":"     * @param obj Other object to be compared to.","lastModifiedDate":"2021-08-22"},{"lineNumber":91,"author":{"gitId":"twothicc"},"content":"     * @return A boolean indicating whether the other object is equals to this Task.","lastModifiedDate":"2021-08-22"},{"lineNumber":92,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":93,"author":{"gitId":"twothicc"},"content":"    @Override","lastModifiedDate":"2021-08-21"},{"lineNumber":94,"author":{"gitId":"twothicc"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2021-08-21"},{"lineNumber":95,"author":{"gitId":"twothicc"},"content":"        if (obj instanceof Task) {","lastModifiedDate":"2021-08-21"},{"lineNumber":96,"author":{"gitId":"twothicc"},"content":"            Task other \u003d (Task) obj;","lastModifiedDate":"2021-08-21"},{"lineNumber":97,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":98,"author":{"gitId":"twothicc"},"content":"            // Check is done status and description are the same.","lastModifiedDate":"2021-08-22"},{"lineNumber":99,"author":{"gitId":"twothicc"},"content":"            boolean isDoneStatusSame \u003d this.isDone \u003d\u003d other.isDone;","lastModifiedDate":"2021-08-22"},{"lineNumber":100,"author":{"gitId":"twothicc"},"content":"            boolean isDescriptionSame \u003d this.description.equals(other.description);","lastModifiedDate":"2021-08-22"},{"lineNumber":101,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":102,"author":{"gitId":"twothicc"},"content":"            return (isDoneStatusSame \u0026\u0026 isDescriptionSame);","lastModifiedDate":"2021-08-22"},{"lineNumber":103,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":104,"author":{"gitId":"twothicc"},"content":"        return false;","lastModifiedDate":"2021-08-21"},{"lineNumber":105,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":106,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"twothicc":106}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke.task;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"/**","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":" * Represents a todo with a description and done status.","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":" */","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-08-14"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"     * Constructor for Todo.","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"     * Creates a Todo with a description.","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"     * @param description Todo description.","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"    public Todo(String description) {","lastModifiedDate":"2021-08-14"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"        super(description);","lastModifiedDate":"2021-08-14"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":"     * Returns string identifier for a Todo.","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":"     * String identifier for a Todo is \"T\".","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"twothicc"},"content":"     * @return String identifier for Todo.","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"twothicc"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":25,"author":{"gitId":"twothicc"},"content":"    public String getTaskType() {","lastModifiedDate":"2021-08-19"},{"lineNumber":26,"author":{"gitId":"twothicc"},"content":"        return \"T\";","lastModifiedDate":"2021-08-19"},{"lineNumber":27,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":28,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":29,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"twothicc"},"content":"     * Returns a formatted string that begins with this Todo\u0027s string identifier, followed by its done status","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"twothicc"},"content":"     * and description.","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"twothicc"},"content":"     * @return Formatted description of this Todo.","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"twothicc"},"content":"    @Override","lastModifiedDate":"2021-08-14"},{"lineNumber":36,"author":{"gitId":"twothicc"},"content":"    public String toString() {","lastModifiedDate":"2021-08-14"},{"lineNumber":37,"author":{"gitId":"twothicc"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2021-08-14"},{"lineNumber":38,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":39,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":40,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"twothicc"},"content":"     * Indicates whether another object is equals to this Todo.","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"twothicc"},"content":"     * @param obj Other object to be compared to.","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"twothicc"},"content":"     * @return A boolean indicating whether the other object is equals to this Todo.","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"twothicc"},"content":"    @Override","lastModifiedDate":"2021-08-21"},{"lineNumber":47,"author":{"gitId":"twothicc"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2021-08-21"},{"lineNumber":48,"author":{"gitId":"twothicc"},"content":"        if (obj instanceof Todo) {","lastModifiedDate":"2021-08-21"},{"lineNumber":49,"author":{"gitId":"twothicc"},"content":"            Todo other \u003d (Todo) obj;","lastModifiedDate":"2021-08-21"},{"lineNumber":50,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":51,"author":{"gitId":"twothicc"},"content":"            // Check is done status and description are the same.","lastModifiedDate":"2021-08-22"},{"lineNumber":52,"author":{"gitId":"twothicc"},"content":"            boolean isDoneStatusSame \u003d this.isDone \u003d\u003d other.isDone;","lastModifiedDate":"2021-08-22"},{"lineNumber":53,"author":{"gitId":"twothicc"},"content":"            boolean isDescriptionSame \u003d this.description.equals(other.description);","lastModifiedDate":"2021-08-22"},{"lineNumber":54,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":55,"author":{"gitId":"twothicc"},"content":"            return (isDoneStatusSame \u0026\u0026 isDescriptionSame);","lastModifiedDate":"2021-08-22"},{"lineNumber":56,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":57,"author":{"gitId":"twothicc"},"content":"        return false;","lastModifiedDate":"2021-08-21"},{"lineNumber":58,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":59,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"twothicc":59}},{"path":"test/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"import duke.command.AddCommand;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"import duke.command.DateCommand;","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"import duke.command.DeleteCommand;","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"import duke.command.ListCommand;","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"import duke.command.MarkCommand;","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"class ParserTest {","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"    private static final LocalDate TIME \u003d LocalDate.parse(\"2020-01-01\");","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":"    void parse_listInput_listCommand() {","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"twothicc"},"content":"        ListCommand listCommand \u003d new ListCommand(\"list\");","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"twothicc"},"content":"        assertEquals(listCommand, Parser.parse(\"list\"));","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"twothicc"},"content":"    void parse_listExtra_AddCommand() {","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"twothicc"},"content":"        AddCommand addCommand \u003d new AddCommand(\"listExtra\");","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"twothicc"},"content":"        assertEquals(addCommand, Parser.parse(\"listExtra\"));","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"twothicc"},"content":"    void parse_doneInput_markCommand() {","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"twothicc"},"content":"        MarkCommand markCommand \u003d new MarkCommand(\"done 1\");","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"twothicc"},"content":"        assertEquals(markCommand, Parser.parse(\"done 1\"));","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"twothicc"},"content":"    void parse_deleteInput_deleteCommand() {","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"twothicc"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(\"delete 1\");","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"twothicc"},"content":"        assertEquals(deleteCommand, Parser.parse(\"delete 1\"));","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":47,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":48,"author":{"gitId":"twothicc"},"content":"    void parse_addInput_addCommand() {","lastModifiedDate":"2021-08-22"},{"lineNumber":49,"author":{"gitId":"twothicc"},"content":"        AddCommand addCommand \u003d new AddCommand(\"todo task\");","lastModifiedDate":"2021-08-22"},{"lineNumber":50,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":51,"author":{"gitId":"twothicc"},"content":"        assertEquals(addCommand, Parser.parse(\"todo task\"));","lastModifiedDate":"2021-08-22"},{"lineNumber":52,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":53,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":54,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":55,"author":{"gitId":"twothicc"},"content":"    void parse_dateInput_dateCommand() {","lastModifiedDate":"2021-08-22"},{"lineNumber":56,"author":{"gitId":"twothicc"},"content":"        DateCommand dateCommand \u003d new DateCommand(\"date 1/1/2020\");","lastModifiedDate":"2021-08-22"},{"lineNumber":57,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":58,"author":{"gitId":"twothicc"},"content":"        assertEquals(dateCommand, Parser.parse(\"date 1/1/2020\"));","lastModifiedDate":"2021-08-22"},{"lineNumber":59,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":60,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":61,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":62,"author":{"gitId":"twothicc"},"content":"    void checkInputValidity_validInputs_noExceptionThrown() throws DukeException {","lastModifiedDate":"2021-08-22"},{"lineNumber":63,"author":{"gitId":"twothicc"},"content":"        String validInput \u003d \"done 1\";","lastModifiedDate":"2021-08-22"},{"lineNumber":64,"author":{"gitId":"twothicc"},"content":"        String validInputCommand \u003d Ui.Commands.DONE.getCommand();","lastModifiedDate":"2021-08-22"},{"lineNumber":65,"author":{"gitId":"twothicc"},"content":"        String validInputExceptionMessage \u003d Ui.exceptionMissingIndexForMarking();","lastModifiedDate":"2021-08-22"},{"lineNumber":66,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":67,"author":{"gitId":"twothicc"},"content":"        String validInput1 \u003d \"todo task\";","lastModifiedDate":"2021-08-22"},{"lineNumber":68,"author":{"gitId":"twothicc"},"content":"        String validInput1Command \u003d Ui.Commands.TODO.getCommand();","lastModifiedDate":"2021-08-22"},{"lineNumber":69,"author":{"gitId":"twothicc"},"content":"        String validInput1ExceptionMessage \u003d Ui.exceptionMissingIndexForDelete();","lastModifiedDate":"2021-08-22"},{"lineNumber":70,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":71,"author":{"gitId":"twothicc"},"content":"        String validInput2 \u003d \"event task /at 1/1/2020\";","lastModifiedDate":"2021-08-22"},{"lineNumber":72,"author":{"gitId":"twothicc"},"content":"        String validInput2Command \u003d Ui.Commands.EVENT.getCommand();","lastModifiedDate":"2021-08-22"},{"lineNumber":73,"author":{"gitId":"twothicc"},"content":"        String validInput2ExceptionMessage \u003d Ui.exceptionMissingTaskDescription(validInput2Command);","lastModifiedDate":"2021-08-22"},{"lineNumber":74,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":75,"author":{"gitId":"twothicc"},"content":"        Parser.checkInputValidity(validInput, validInputCommand, validInputExceptionMessage);","lastModifiedDate":"2021-08-22"},{"lineNumber":76,"author":{"gitId":"twothicc"},"content":"        Parser.checkInputValidity(validInput1, validInput1Command, validInput1ExceptionMessage);","lastModifiedDate":"2021-08-22"},{"lineNumber":77,"author":{"gitId":"twothicc"},"content":"        Parser.checkInputValidity(validInput2, validInput2Command, validInput2ExceptionMessage);","lastModifiedDate":"2021-08-22"},{"lineNumber":78,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":79,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":80,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":81,"author":{"gitId":"twothicc"},"content":"    void checkInputValidity_invalidInputs_dukeExceptionThrown() {","lastModifiedDate":"2021-08-22"},{"lineNumber":82,"author":{"gitId":"twothicc"},"content":"        String invalidInput \u003d \"done1\";","lastModifiedDate":"2021-08-22"},{"lineNumber":83,"author":{"gitId":"twothicc"},"content":"        String invalidInputCommand \u003d Ui.Commands.DONE.getCommand();","lastModifiedDate":"2021-08-22"},{"lineNumber":84,"author":{"gitId":"twothicc"},"content":"        String invalidInputExceptionMessage \u003d Ui.exceptionMissingSpaceAfterCommand(invalidInputCommand);","lastModifiedDate":"2021-08-22"},{"lineNumber":85,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":86,"author":{"gitId":"twothicc"},"content":"        String invalidInput1 \u003d \"delete \";","lastModifiedDate":"2021-08-22"},{"lineNumber":87,"author":{"gitId":"twothicc"},"content":"        String invalidInput1Command \u003d Ui.Commands.DELETE.getCommand();","lastModifiedDate":"2021-08-22"},{"lineNumber":88,"author":{"gitId":"twothicc"},"content":"        String invalidInput1ExceptionMessage \u003d Ui.exceptionMissingIndexForDelete();","lastModifiedDate":"2021-08-22"},{"lineNumber":89,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":90,"author":{"gitId":"twothicc"},"content":"        String invalidInput2 \u003d \"done\";","lastModifiedDate":"2021-08-22"},{"lineNumber":91,"author":{"gitId":"twothicc"},"content":"        String invalidInput2Command \u003d Ui.Commands.DONE.getCommand();","lastModifiedDate":"2021-08-22"},{"lineNumber":92,"author":{"gitId":"twothicc"},"content":"        String invalidInput2ExceptionMessage \u003d Ui.exceptionMissingIndexForMarking();","lastModifiedDate":"2021-08-22"},{"lineNumber":93,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":94,"author":{"gitId":"twothicc"},"content":"        DukeException dukeException \u003d assertThrows(DukeException.class,","lastModifiedDate":"2021-08-22"},{"lineNumber":95,"author":{"gitId":"twothicc"},"content":"                () -\u003e Parser.checkInputValidity(invalidInput, invalidInputCommand, invalidInputExceptionMessage));","lastModifiedDate":"2021-08-22"},{"lineNumber":96,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":97,"author":{"gitId":"twothicc"},"content":"        assertEquals(invalidInputExceptionMessage, dukeException.getErrorMessage());","lastModifiedDate":"2021-08-22"},{"lineNumber":98,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":99,"author":{"gitId":"twothicc"},"content":"        DukeException dukeException1 \u003d assertThrows(DukeException.class,","lastModifiedDate":"2021-08-22"},{"lineNumber":100,"author":{"gitId":"twothicc"},"content":"                () -\u003e Parser.checkInputValidity(invalidInput1, invalidInput1Command, invalidInput1ExceptionMessage));","lastModifiedDate":"2021-08-22"},{"lineNumber":101,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":102,"author":{"gitId":"twothicc"},"content":"        assertEquals(invalidInput1ExceptionMessage, dukeException1.getErrorMessage());","lastModifiedDate":"2021-08-22"},{"lineNumber":103,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":104,"author":{"gitId":"twothicc"},"content":"        DukeException dukeException2 \u003d assertThrows(DukeException.class,","lastModifiedDate":"2021-08-22"},{"lineNumber":105,"author":{"gitId":"twothicc"},"content":"                () -\u003e Parser.checkInputValidity(invalidInput2, invalidInput2Command, invalidInput2ExceptionMessage));","lastModifiedDate":"2021-08-22"},{"lineNumber":106,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":107,"author":{"gitId":"twothicc"},"content":"        assertEquals(invalidInput2ExceptionMessage, dukeException2.getErrorMessage());","lastModifiedDate":"2021-08-22"},{"lineNumber":108,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":109,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":110,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":111,"author":{"gitId":"twothicc"},"content":"    void parseLocalDate_localDate_dateString() throws DukeException {","lastModifiedDate":"2021-08-22"},{"lineNumber":112,"author":{"gitId":"twothicc"},"content":"        assertEquals(\"1 January 2020\", Parser.parseLocalDate(TIME));","lastModifiedDate":"2021-08-22"},{"lineNumber":113,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":114,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":115,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":116,"author":{"gitId":"twothicc"},"content":"    void toLocalDate_validDateString_localDate() throws DukeException {","lastModifiedDate":"2021-08-22"},{"lineNumber":117,"author":{"gitId":"twothicc"},"content":"        String dateString \u003d \"1/1/2020\";","lastModifiedDate":"2021-08-22"},{"lineNumber":118,"author":{"gitId":"twothicc"},"content":"        assertEquals(TIME, Parser.toLocalDate(dateString));","lastModifiedDate":"2021-08-22"},{"lineNumber":119,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":120,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":121,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":122,"author":{"gitId":"twothicc"},"content":"    void toLocalDate_invalidDateStrings_dukeExceptionThrown() {","lastModifiedDate":"2021-08-22"},{"lineNumber":123,"author":{"gitId":"twothicc"},"content":"        String invalidDateString \u003d \"100/100/100\";","lastModifiedDate":"2021-08-22"},{"lineNumber":124,"author":{"gitId":"twothicc"},"content":"        String invalidDateString1 \u003d \"100/100\";","lastModifiedDate":"2021-08-22"},{"lineNumber":125,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":126,"author":{"gitId":"twothicc"},"content":"        DukeException dukeException \u003d assertThrows(DukeException.class,","lastModifiedDate":"2021-08-22"},{"lineNumber":127,"author":{"gitId":"twothicc"},"content":"                () -\u003e Parser.toLocalDate(invalidDateString));","lastModifiedDate":"2021-08-22"},{"lineNumber":128,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":129,"author":{"gitId":"twothicc"},"content":"        assertEquals(Ui.exceptionInvalidDateTimeFormat(), dukeException.getErrorMessage());","lastModifiedDate":"2021-08-22"},{"lineNumber":130,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":131,"author":{"gitId":"twothicc"},"content":"        DukeException dukeException1 \u003d assertThrows(DukeException.class,","lastModifiedDate":"2021-08-22"},{"lineNumber":132,"author":{"gitId":"twothicc"},"content":"                () -\u003e Parser.toLocalDate(invalidDateString1));","lastModifiedDate":"2021-08-22"},{"lineNumber":133,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":134,"author":{"gitId":"twothicc"},"content":"        assertEquals(Ui.exceptionInvalidDateTimeFormat(), dukeException1.getErrorMessage());","lastModifiedDate":"2021-08-22"},{"lineNumber":135,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":136,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":137,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":138,"author":{"gitId":"twothicc"},"content":"    void parseUserNumInput_validNumInput_int() throws DukeException {","lastModifiedDate":"2021-08-22"},{"lineNumber":139,"author":{"gitId":"twothicc"},"content":"        String validNumInput \u003d \"done 1\";","lastModifiedDate":"2021-08-22"},{"lineNumber":140,"author":{"gitId":"twothicc"},"content":"        Ui.Commands validNumInputCommand \u003d Ui.Commands.DONE;","lastModifiedDate":"2021-08-22"},{"lineNumber":141,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":142,"author":{"gitId":"twothicc"},"content":"        assertEquals(1, Parser.parseUserNumInput(validNumInput, validNumInputCommand));","lastModifiedDate":"2021-08-22"},{"lineNumber":143,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":144,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":145,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":146,"author":{"gitId":"twothicc"},"content":"    void parseUserNumInput_invalidNumInput_dukeExceptionThrown() {","lastModifiedDate":"2021-08-22"},{"lineNumber":147,"author":{"gitId":"twothicc"},"content":"        String invalidNumInput \u003d \"done abc\";","lastModifiedDate":"2021-08-22"},{"lineNumber":148,"author":{"gitId":"twothicc"},"content":"        Ui.Commands invalidNumInputCommand \u003d Ui.Commands.DONE;","lastModifiedDate":"2021-08-22"},{"lineNumber":149,"author":{"gitId":"twothicc"},"content":"        String invalidNumInputExceptionMessage \u003d Ui.exceptionInvalidNumberInput(invalidNumInputCommand);","lastModifiedDate":"2021-08-22"},{"lineNumber":150,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":151,"author":{"gitId":"twothicc"},"content":"        DukeException dukeException \u003d assertThrows(DukeException.class,","lastModifiedDate":"2021-08-22"},{"lineNumber":152,"author":{"gitId":"twothicc"},"content":"                () -\u003e Parser.parseUserNumInput(invalidNumInput, invalidNumInputCommand));","lastModifiedDate":"2021-08-22"},{"lineNumber":153,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":154,"author":{"gitId":"twothicc"},"content":"        assertEquals(invalidNumInputExceptionMessage, dukeException.getErrorMessage());","lastModifiedDate":"2021-08-22"},{"lineNumber":155,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":156,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":157,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":158,"author":{"gitId":"twothicc"},"content":"    void parseUserDescriptionInput_validDescriptionInput_arrayDescriptionTime() throws DukeException {","lastModifiedDate":"2021-08-22"},{"lineNumber":159,"author":{"gitId":"twothicc"},"content":"        Ui.Commands command \u003d Ui.Commands.EVENT;","lastModifiedDate":"2021-08-22"},{"lineNumber":160,"author":{"gitId":"twothicc"},"content":"        Ui.Descriptors descriptor \u003d Ui.Descriptors.AT;","lastModifiedDate":"2021-08-22"},{"lineNumber":161,"author":{"gitId":"twothicc"},"content":"        char separator \u003d \u0027/\u0027;","lastModifiedDate":"2021-08-22"},{"lineNumber":162,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":163,"author":{"gitId":"twothicc"},"content":"        String validDescriptionInput \u003d \"task description /at 1/1/2020\";","lastModifiedDate":"2021-08-22"},{"lineNumber":164,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":165,"author":{"gitId":"twothicc"},"content":"        String[] expected \u003d {\"task description\", \"1/1/2020\"};","lastModifiedDate":"2021-08-22"},{"lineNumber":166,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":167,"author":{"gitId":"twothicc"},"content":"        String[] actual \u003d Parser.parseUserDescriptionInput(validDescriptionInput, descriptor, separator, command);","lastModifiedDate":"2021-08-22"},{"lineNumber":168,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":169,"author":{"gitId":"twothicc"},"content":"        assertEquals(expected.length, actual.length);","lastModifiedDate":"2021-08-22"},{"lineNumber":170,"author":{"gitId":"twothicc"},"content":"        assertEquals(expected[0], actual[0]);","lastModifiedDate":"2021-08-22"},{"lineNumber":171,"author":{"gitId":"twothicc"},"content":"        assertEquals(expected[1], actual[1]);","lastModifiedDate":"2021-08-22"},{"lineNumber":172,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":173,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":174,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":175,"author":{"gitId":"twothicc"},"content":"    void parserUserDescriptionInput_invalidDescriptionInput_dukeExceptionThrown() {","lastModifiedDate":"2021-08-22"},{"lineNumber":176,"author":{"gitId":"twothicc"},"content":"        Ui.Commands command \u003d Ui.Commands.EVENT;","lastModifiedDate":"2021-08-22"},{"lineNumber":177,"author":{"gitId":"twothicc"},"content":"        Ui.Descriptors descriptor \u003d Ui.Descriptors.AT;","lastModifiedDate":"2021-08-22"},{"lineNumber":178,"author":{"gitId":"twothicc"},"content":"        char separator \u003d \u0027/\u0027;","lastModifiedDate":"2021-08-22"},{"lineNumber":179,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":180,"author":{"gitId":"twothicc"},"content":"        // No task description.","lastModifiedDate":"2021-08-22"},{"lineNumber":181,"author":{"gitId":"twothicc"},"content":"        String invalidDescriptionInput \u003d \"/at 1/1/2020\";","lastModifiedDate":"2021-08-22"},{"lineNumber":182,"author":{"gitId":"twothicc"},"content":"        String exceptionMessage \u003d Ui.exceptionMissingTaskDescription(command.getCommand());","lastModifiedDate":"2021-08-22"},{"lineNumber":183,"author":{"gitId":"twothicc"},"content":"        // No separator.","lastModifiedDate":"2021-08-22"},{"lineNumber":184,"author":{"gitId":"twothicc"},"content":"        String invalidDescriptionInput1 \u003d \"at 1/1/2020\";","lastModifiedDate":"2021-08-22"},{"lineNumber":185,"author":{"gitId":"twothicc"},"content":"        String exceptionMessage1 \u003d Ui.exceptionMissingDescriptor(descriptor, command);","lastModifiedDate":"2021-08-22"},{"lineNumber":186,"author":{"gitId":"twothicc"},"content":"        // No space before descriptor.","lastModifiedDate":"2021-08-22"},{"lineNumber":187,"author":{"gitId":"twothicc"},"content":"        String invalidDescriptionInput2 \u003d \"task description/at 1/1/2020\";","lastModifiedDate":"2021-08-22"},{"lineNumber":188,"author":{"gitId":"twothicc"},"content":"        String exceptionMessage2 \u003d Ui.exceptionMissingSpaceBeforeDescriptor(descriptor);","lastModifiedDate":"2021-08-22"},{"lineNumber":189,"author":{"gitId":"twothicc"},"content":"        // No space after descriptor.","lastModifiedDate":"2021-08-22"},{"lineNumber":190,"author":{"gitId":"twothicc"},"content":"        String invalidDescriptionInput3 \u003d \"task description /at1/1/2020\";","lastModifiedDate":"2021-08-22"},{"lineNumber":191,"author":{"gitId":"twothicc"},"content":"        String exceptionMessage3 \u003d Ui.exceptionMissingSpaceAfterDescriptor(descriptor);","lastModifiedDate":"2021-08-22"},{"lineNumber":192,"author":{"gitId":"twothicc"},"content":"        // Wrong descriptor used.","lastModifiedDate":"2021-08-22"},{"lineNumber":193,"author":{"gitId":"twothicc"},"content":"        String invalidDescriptionInput4 \u003d \"task description /by 1/1/2020\";","lastModifiedDate":"2021-08-22"},{"lineNumber":194,"author":{"gitId":"twothicc"},"content":"        String exceptionMessage4 \u003d Ui.exceptionWrongDescriptor(command, descriptor);","lastModifiedDate":"2021-08-22"},{"lineNumber":195,"author":{"gitId":"twothicc"},"content":"        // No space after descriptor","lastModifiedDate":"2021-08-22"},{"lineNumber":196,"author":{"gitId":"twothicc"},"content":"        String invalidDescriptionInput5 \u003d \"task description /at\";","lastModifiedDate":"2021-08-22"},{"lineNumber":197,"author":{"gitId":"twothicc"},"content":"        String exceptionMessage5 \u003d Ui.exceptionMissingDescriptor(descriptor, command);","lastModifiedDate":"2021-08-22"},{"lineNumber":198,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":199,"author":{"gitId":"twothicc"},"content":"        DukeException dukeException \u003d assertThrows(DukeException.class,","lastModifiedDate":"2021-08-22"},{"lineNumber":200,"author":{"gitId":"twothicc"},"content":"                () -\u003e Parser.parseUserDescriptionInput(invalidDescriptionInput, descriptor, separator, command));","lastModifiedDate":"2021-08-22"},{"lineNumber":201,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":202,"author":{"gitId":"twothicc"},"content":"        assertEquals(exceptionMessage, dukeException.getErrorMessage());","lastModifiedDate":"2021-08-22"},{"lineNumber":203,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":204,"author":{"gitId":"twothicc"},"content":"        DukeException dukeException1 \u003d assertThrows(DukeException.class,","lastModifiedDate":"2021-08-22"},{"lineNumber":205,"author":{"gitId":"twothicc"},"content":"                () -\u003e Parser.parseUserDescriptionInput(invalidDescriptionInput1, descriptor, separator, command));","lastModifiedDate":"2021-08-22"},{"lineNumber":206,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":207,"author":{"gitId":"twothicc"},"content":"        assertEquals(exceptionMessage1, dukeException1.getErrorMessage());","lastModifiedDate":"2021-08-22"},{"lineNumber":208,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":209,"author":{"gitId":"twothicc"},"content":"        DukeException dukeException2 \u003d assertThrows(DukeException.class,","lastModifiedDate":"2021-08-22"},{"lineNumber":210,"author":{"gitId":"twothicc"},"content":"                () -\u003e Parser.parseUserDescriptionInput(invalidDescriptionInput2, descriptor, separator, command));","lastModifiedDate":"2021-08-22"},{"lineNumber":211,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":212,"author":{"gitId":"twothicc"},"content":"        assertEquals(exceptionMessage2, dukeException2.getErrorMessage());","lastModifiedDate":"2021-08-22"},{"lineNumber":213,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":214,"author":{"gitId":"twothicc"},"content":"        DukeException dukeException3 \u003d assertThrows(DukeException.class,","lastModifiedDate":"2021-08-22"},{"lineNumber":215,"author":{"gitId":"twothicc"},"content":"                () -\u003e Parser.parseUserDescriptionInput(invalidDescriptionInput3, descriptor, separator, command));","lastModifiedDate":"2021-08-22"},{"lineNumber":216,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":217,"author":{"gitId":"twothicc"},"content":"        assertEquals(exceptionMessage3, dukeException3.getErrorMessage());","lastModifiedDate":"2021-08-22"},{"lineNumber":218,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":219,"author":{"gitId":"twothicc"},"content":"        DukeException dukeException4 \u003d assertThrows(DukeException.class,","lastModifiedDate":"2021-08-22"},{"lineNumber":220,"author":{"gitId":"twothicc"},"content":"                () -\u003e Parser.parseUserDescriptionInput(invalidDescriptionInput4, descriptor, separator, command));","lastModifiedDate":"2021-08-22"},{"lineNumber":221,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":222,"author":{"gitId":"twothicc"},"content":"        assertEquals(exceptionMessage4, dukeException4.getErrorMessage());","lastModifiedDate":"2021-08-22"},{"lineNumber":223,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":224,"author":{"gitId":"twothicc"},"content":"        DukeException dukeException5 \u003d assertThrows(DukeException.class,","lastModifiedDate":"2021-08-22"},{"lineNumber":225,"author":{"gitId":"twothicc"},"content":"                () -\u003e Parser.parseUserDescriptionInput(invalidDescriptionInput5, descriptor, separator, command));","lastModifiedDate":"2021-08-22"},{"lineNumber":226,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":227,"author":{"gitId":"twothicc"},"content":"        assertEquals(exceptionMessage5, dukeException5.getErrorMessage());","lastModifiedDate":"2021-08-22"},{"lineNumber":228,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":229,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"twothicc":229}},{"path":"test/duke/StorageStub.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"public class StorageStub implements Storable{","lastModifiedDate":"2021-08-21"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"    // Initial tasks.","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"    private final TaskList tasks;","lastModifiedDate":"2021-08-21"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"    // Initialize tasks.","lastModifiedDate":"2021-08-21"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"    public StorageStub(TaskList tasks) {","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"    @Override","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"    public TaskList readTasksFromData() throws DukeException {","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"        return tasks;","lastModifiedDate":"2021-08-21"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"    @Override","lastModifiedDate":"2021-08-21"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":"    public void saveTasksToData(TaskList taskList) throws DukeException {","lastModifiedDate":"2021-08-21"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":"        // Do Nothing","lastModifiedDate":"2021-08-21"},{"lineNumber":21,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":22,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"twothicc":22}},{"path":"test/duke/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"import duke.task.Todo;","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"class TaskListTest {","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"    private static final String DESCRIPTION \u003d \"task description\";","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"    private TaskList getTaskListThreeTodos() {","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"        ArrayList\u003cTask\u003e taskArrayList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"        for (int i \u003d 0; i \u003c 3; i++) {","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":"            taskArrayList.add(new Todo(DESCRIPTION));","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"twothicc"},"content":"        return new TaskList(taskArrayList);","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"twothicc"},"content":"    void size_taskListOfThreeTodos_3() {","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"twothicc"},"content":"        assertEquals(3, getTaskListThreeTodos().size());","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"twothicc"},"content":"    void get_taskList_sameTodo() {","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"twothicc"},"content":"        Todo todo \u003d new Todo(DESCRIPTION);","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"twothicc"},"content":"        assertEquals(todo, getTaskListThreeTodos().get(1));","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"twothicc"},"content":"    void add_taskListOfThreeTodos_taskListOfFourTodos() {","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"twothicc"},"content":"        TaskList tasks \u003d getTaskListThreeTodos();","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"twothicc"},"content":"        Todo todo \u003d new Todo(DESCRIPTION);","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"twothicc"},"content":"        Task other \u003d tasks.add(todo);","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"twothicc"},"content":"        assertEquals(4, tasks.size());","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"twothicc"},"content":"        assertEquals(todo, other);","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":47,"author":{"gitId":"twothicc"},"content":"    void remove_taskListOfThreeTodos_taskListOfTwoTodos() {","lastModifiedDate":"2021-08-22"},{"lineNumber":48,"author":{"gitId":"twothicc"},"content":"        TaskList tasks \u003d getTaskListThreeTodos();","lastModifiedDate":"2021-08-22"},{"lineNumber":49,"author":{"gitId":"twothicc"},"content":"        Todo todo \u003d new Todo(DESCRIPTION);","lastModifiedDate":"2021-08-22"},{"lineNumber":50,"author":{"gitId":"twothicc"},"content":"        Task other \u003d tasks.remove(1);","lastModifiedDate":"2021-08-22"},{"lineNumber":51,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":52,"author":{"gitId":"twothicc"},"content":"        assertEquals(2, tasks.size());","lastModifiedDate":"2021-08-22"},{"lineNumber":53,"author":{"gitId":"twothicc"},"content":"        assertEquals(todo, other);","lastModifiedDate":"2021-08-22"},{"lineNumber":54,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":55,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":56,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":57,"author":{"gitId":"twothicc"},"content":"    void equals_sameTaskList_true() {","lastModifiedDate":"2021-08-22"},{"lineNumber":58,"author":{"gitId":"twothicc"},"content":"        TaskList tasks \u003d getTaskListThreeTodos();","lastModifiedDate":"2021-08-22"},{"lineNumber":59,"author":{"gitId":"twothicc"},"content":"        TaskList other \u003d getTaskListThreeTodos();","lastModifiedDate":"2021-08-22"},{"lineNumber":60,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":61,"author":{"gitId":"twothicc"},"content":"        assertTrue(tasks.equals(other));","lastModifiedDate":"2021-08-22"},{"lineNumber":62,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":63,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":64,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":65,"author":{"gitId":"twothicc"},"content":"    void getTasks() {","lastModifiedDate":"2021-08-22"},{"lineNumber":66,"author":{"gitId":"twothicc"},"content":"        ArrayList\u003cTask\u003e taskArrayList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-22"},{"lineNumber":67,"author":{"gitId":"twothicc"},"content":"        for (int i \u003d 0; i \u003c 3; i++) {","lastModifiedDate":"2021-08-22"},{"lineNumber":68,"author":{"gitId":"twothicc"},"content":"            taskArrayList.add(new Todo(DESCRIPTION));","lastModifiedDate":"2021-08-22"},{"lineNumber":69,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":70,"author":{"gitId":"twothicc"},"content":"        assertEquals(taskArrayList, getTaskListThreeTodos().getTasks());","lastModifiedDate":"2021-08-22"},{"lineNumber":71,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":72,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"twothicc":72}},{"path":"test/duke/command/AddCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke.command;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"import duke.StorageStub;","lastModifiedDate":"2021-08-21"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-08-21"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"import duke.task.Event;","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-21"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"import duke.task.Todo;","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-08-21"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":"class AddCommandTest {","lastModifiedDate":"2021-08-21"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":21,"author":{"gitId":"twothicc"},"content":"    private static final LocalDate localDate \u003d LocalDate.parse(\"2020-01-01\");","lastModifiedDate":"2021-08-21"},{"lineNumber":22,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":23,"author":{"gitId":"twothicc"},"content":"    private static TaskList getTaskListTodo() {","lastModifiedDate":"2021-08-21"},{"lineNumber":24,"author":{"gitId":"twothicc"},"content":"        ArrayList\u003cTask\u003e taskArrList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-21"},{"lineNumber":25,"author":{"gitId":"twothicc"},"content":"        taskArrList.add(new Todo(\"task description\"));","lastModifiedDate":"2021-08-21"},{"lineNumber":26,"author":{"gitId":"twothicc"},"content":"        return new TaskList(taskArrList);","lastModifiedDate":"2021-08-21"},{"lineNumber":27,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":28,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":29,"author":{"gitId":"twothicc"},"content":"    private static TaskList getTaskListEvent() {","lastModifiedDate":"2021-08-21"},{"lineNumber":30,"author":{"gitId":"twothicc"},"content":"        ArrayList\u003cTask\u003e taskArrList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-21"},{"lineNumber":31,"author":{"gitId":"twothicc"},"content":"        taskArrList.add(new Event(\"task description\", localDate));","lastModifiedDate":"2021-08-21"},{"lineNumber":32,"author":{"gitId":"twothicc"},"content":"        return new TaskList(taskArrList);","lastModifiedDate":"2021-08-21"},{"lineNumber":33,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":34,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":35,"author":{"gitId":"twothicc"},"content":"    private static TaskList getTaskListDeadline() {","lastModifiedDate":"2021-08-21"},{"lineNumber":36,"author":{"gitId":"twothicc"},"content":"        ArrayList\u003cTask\u003e taskArrList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-21"},{"lineNumber":37,"author":{"gitId":"twothicc"},"content":"        taskArrList.add(new Deadline(\"task description\", localDate));","lastModifiedDate":"2021-08-21"},{"lineNumber":38,"author":{"gitId":"twothicc"},"content":"        return new TaskList(taskArrList);","lastModifiedDate":"2021-08-21"},{"lineNumber":39,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":40,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":41,"author":{"gitId":"twothicc"},"content":"    // Ui returns largely constants. No need for stub;","lastModifiedDate":"2021-08-21"},{"lineNumber":42,"author":{"gitId":"twothicc"},"content":"    private final Ui ui \u003d new Ui();","lastModifiedDate":"2021-08-21"},{"lineNumber":43,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":44,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":45,"author":{"gitId":"twothicc"},"content":"    void execute_todoInput_todoAdded() {","lastModifiedDate":"2021-08-21"},{"lineNumber":46,"author":{"gitId":"twothicc"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2021-08-21"},{"lineNumber":47,"author":{"gitId":"twothicc"},"content":"        StorageStub storageStub \u003d new StorageStub(tasks);","lastModifiedDate":"2021-08-21"},{"lineNumber":48,"author":{"gitId":"twothicc"},"content":"        AddCommand addCommand \u003d new AddCommand(\"todo task description\");","lastModifiedDate":"2021-08-21"},{"lineNumber":49,"author":{"gitId":"twothicc"},"content":"        addCommand.execute(tasks, this.ui, storageStub);","lastModifiedDate":"2021-08-21"},{"lineNumber":50,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":51,"author":{"gitId":"twothicc"},"content":"        assertTrue(getTaskListTodo().equals(tasks));","lastModifiedDate":"2021-08-21"},{"lineNumber":52,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":53,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":54,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":55,"author":{"gitId":"twothicc"},"content":"    void execute_eventInput_eventAdded() {","lastModifiedDate":"2021-08-21"},{"lineNumber":56,"author":{"gitId":"twothicc"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2021-08-21"},{"lineNumber":57,"author":{"gitId":"twothicc"},"content":"        StorageStub storageStub \u003d new StorageStub(tasks);","lastModifiedDate":"2021-08-21"},{"lineNumber":58,"author":{"gitId":"twothicc"},"content":"        AddCommand addCommand \u003d new AddCommand(\"event task description /at 1/1/2020\");","lastModifiedDate":"2021-08-21"},{"lineNumber":59,"author":{"gitId":"twothicc"},"content":"        addCommand.execute(tasks, this.ui, storageStub);","lastModifiedDate":"2021-08-21"},{"lineNumber":60,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":61,"author":{"gitId":"twothicc"},"content":"        assertTrue(getTaskListEvent().equals(tasks));","lastModifiedDate":"2021-08-21"},{"lineNumber":62,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":63,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":64,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":65,"author":{"gitId":"twothicc"},"content":"    void execute_deadlineInput_deadlineAdded() {","lastModifiedDate":"2021-08-21"},{"lineNumber":66,"author":{"gitId":"twothicc"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2021-08-21"},{"lineNumber":67,"author":{"gitId":"twothicc"},"content":"        StorageStub storageStub \u003d new StorageStub(tasks);","lastModifiedDate":"2021-08-21"},{"lineNumber":68,"author":{"gitId":"twothicc"},"content":"        AddCommand addCommand \u003d new AddCommand(\"deadline task description /by 1/1/2020\");","lastModifiedDate":"2021-08-21"},{"lineNumber":69,"author":{"gitId":"twothicc"},"content":"        addCommand.execute(tasks, this.ui, storageStub);","lastModifiedDate":"2021-08-21"},{"lineNumber":70,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":71,"author":{"gitId":"twothicc"},"content":"        assertTrue(getTaskListDeadline().equals(tasks));","lastModifiedDate":"2021-08-21"},{"lineNumber":72,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":73,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":74,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":75,"author":{"gitId":"twothicc"},"content":"    void execute_invalidCommand_noTaskAdded() {","lastModifiedDate":"2021-08-21"},{"lineNumber":76,"author":{"gitId":"twothicc"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2021-08-21"},{"lineNumber":77,"author":{"gitId":"twothicc"},"content":"        StorageStub storageStub \u003d new StorageStub(tasks);","lastModifiedDate":"2021-08-21"},{"lineNumber":78,"author":{"gitId":"twothicc"},"content":"        AddCommand addCommand \u003d new AddCommand(\"bogus\");","lastModifiedDate":"2021-08-21"},{"lineNumber":79,"author":{"gitId":"twothicc"},"content":"        addCommand.execute(tasks, this.ui, storageStub);","lastModifiedDate":"2021-08-21"},{"lineNumber":80,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":81,"author":{"gitId":"twothicc"},"content":"        assertTrue(new TaskList().equals(tasks));","lastModifiedDate":"2021-08-21"},{"lineNumber":82,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":83,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":84,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":85,"author":{"gitId":"twothicc"},"content":"    void execute_missingTaskDescription_noTaskAdded() {","lastModifiedDate":"2021-08-22"},{"lineNumber":86,"author":{"gitId":"twothicc"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2021-08-21"},{"lineNumber":87,"author":{"gitId":"twothicc"},"content":"        StorageStub storageStub \u003d new StorageStub(tasks);","lastModifiedDate":"2021-08-21"},{"lineNumber":88,"author":{"gitId":"twothicc"},"content":"        AddCommand addCommand \u003d new AddCommand(\"event /at 1/1/2020\");","lastModifiedDate":"2021-08-21"},{"lineNumber":89,"author":{"gitId":"twothicc"},"content":"        AddCommand addCommand1 \u003d new AddCommand(\"todo\");","lastModifiedDate":"2021-08-21"},{"lineNumber":90,"author":{"gitId":"twothicc"},"content":"        AddCommand addCommand2 \u003d new AddCommand(\"todo \");","lastModifiedDate":"2021-08-21"},{"lineNumber":91,"author":{"gitId":"twothicc"},"content":"        AddCommand addCommand3 \u003d new AddCommand(\"event\");","lastModifiedDate":"2021-08-21"},{"lineNumber":92,"author":{"gitId":"twothicc"},"content":"        AddCommand addCommand4 \u003d new AddCommand(\"event \");","lastModifiedDate":"2021-08-21"},{"lineNumber":93,"author":{"gitId":"twothicc"},"content":"        AddCommand addCommand5 \u003d new AddCommand(\"event /at 1/1/2020\");","lastModifiedDate":"2021-08-21"},{"lineNumber":94,"author":{"gitId":"twothicc"},"content":"        AddCommand addCommand6 \u003d new AddCommand(\"deadline\");","lastModifiedDate":"2021-08-21"},{"lineNumber":95,"author":{"gitId":"twothicc"},"content":"        AddCommand addCommand7 \u003d new AddCommand(\"deadline \");","lastModifiedDate":"2021-08-21"},{"lineNumber":96,"author":{"gitId":"twothicc"},"content":"        AddCommand addCommand8 \u003d new AddCommand(\"deadline /by 1/1/2020\");","lastModifiedDate":"2021-08-21"},{"lineNumber":97,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":98,"author":{"gitId":"twothicc"},"content":"        addCommand.execute(tasks, this.ui, storageStub);","lastModifiedDate":"2021-08-21"},{"lineNumber":99,"author":{"gitId":"twothicc"},"content":"        addCommand1.execute(tasks, this.ui, storageStub);","lastModifiedDate":"2021-08-21"},{"lineNumber":100,"author":{"gitId":"twothicc"},"content":"        addCommand2.execute(tasks, this.ui, storageStub);","lastModifiedDate":"2021-08-21"},{"lineNumber":101,"author":{"gitId":"twothicc"},"content":"        addCommand3.execute(tasks, this.ui, storageStub);","lastModifiedDate":"2021-08-21"},{"lineNumber":102,"author":{"gitId":"twothicc"},"content":"        addCommand4.execute(tasks, this.ui, storageStub);","lastModifiedDate":"2021-08-21"},{"lineNumber":103,"author":{"gitId":"twothicc"},"content":"        addCommand5.execute(tasks, this.ui, storageStub);","lastModifiedDate":"2021-08-21"},{"lineNumber":104,"author":{"gitId":"twothicc"},"content":"        addCommand6.execute(tasks, this.ui, storageStub);","lastModifiedDate":"2021-08-21"},{"lineNumber":105,"author":{"gitId":"twothicc"},"content":"        addCommand7.execute(tasks, this.ui, storageStub);","lastModifiedDate":"2021-08-21"},{"lineNumber":106,"author":{"gitId":"twothicc"},"content":"        addCommand8.execute(tasks, this.ui, storageStub);","lastModifiedDate":"2021-08-21"},{"lineNumber":107,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":108,"author":{"gitId":"twothicc"},"content":"        assertTrue(new TaskList().equals(tasks));","lastModifiedDate":"2021-08-21"},{"lineNumber":109,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":110,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":111,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":112,"author":{"gitId":"twothicc"},"content":"    void execute_missingSpaces_noTaskAdded() {","lastModifiedDate":"2021-08-22"},{"lineNumber":113,"author":{"gitId":"twothicc"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2021-08-21"},{"lineNumber":114,"author":{"gitId":"twothicc"},"content":"        StorageStub storageStub \u003d new StorageStub(tasks);","lastModifiedDate":"2021-08-21"},{"lineNumber":115,"author":{"gitId":"twothicc"},"content":"        // User might want \"a\" as description.","lastModifiedDate":"2021-08-21"},{"lineNumber":116,"author":{"gitId":"twothicc"},"content":"        AddCommand addCommand \u003d new AddCommand(\"todoa\");","lastModifiedDate":"2021-08-21"},{"lineNumber":117,"author":{"gitId":"twothicc"},"content":"        AddCommand addCommand1 \u003d new AddCommand(\"eventa\");","lastModifiedDate":"2021-08-21"},{"lineNumber":118,"author":{"gitId":"twothicc"},"content":"        AddCommand addCommand2 \u003d new AddCommand(\"event abc/at 1/1/2020\");","lastModifiedDate":"2021-08-21"},{"lineNumber":119,"author":{"gitId":"twothicc"},"content":"        AddCommand addCommand3 \u003d new AddCommand(\"eventabc /at1/1/2020\");","lastModifiedDate":"2021-08-21"},{"lineNumber":120,"author":{"gitId":"twothicc"},"content":"        AddCommand addCommand4 \u003d new AddCommand(\"deadlinea\");","lastModifiedDate":"2021-08-21"},{"lineNumber":121,"author":{"gitId":"twothicc"},"content":"        AddCommand addCommand5 \u003d new AddCommand(\"deadline abc/by 1/1/2020\");","lastModifiedDate":"2021-08-21"},{"lineNumber":122,"author":{"gitId":"twothicc"},"content":"        AddCommand addCommand6 \u003d new AddCommand(\"deadlineabc /at1/1/2020\");","lastModifiedDate":"2021-08-21"},{"lineNumber":123,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":124,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":125,"author":{"gitId":"twothicc"},"content":"        addCommand.execute(tasks, this.ui, storageStub);","lastModifiedDate":"2021-08-21"},{"lineNumber":126,"author":{"gitId":"twothicc"},"content":"        addCommand1.execute(tasks, this.ui, storageStub);","lastModifiedDate":"2021-08-21"},{"lineNumber":127,"author":{"gitId":"twothicc"},"content":"        addCommand2.execute(tasks, this.ui, storageStub);","lastModifiedDate":"2021-08-21"},{"lineNumber":128,"author":{"gitId":"twothicc"},"content":"        addCommand3.execute(tasks, this.ui, storageStub);","lastModifiedDate":"2021-08-21"},{"lineNumber":129,"author":{"gitId":"twothicc"},"content":"        addCommand4.execute(tasks, this.ui, storageStub);","lastModifiedDate":"2021-08-21"},{"lineNumber":130,"author":{"gitId":"twothicc"},"content":"        addCommand5.execute(tasks, this.ui, storageStub);","lastModifiedDate":"2021-08-21"},{"lineNumber":131,"author":{"gitId":"twothicc"},"content":"        addCommand6.execute(tasks, this.ui, storageStub);","lastModifiedDate":"2021-08-21"},{"lineNumber":132,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":133,"author":{"gitId":"twothicc"},"content":"        assertTrue(new TaskList().equals(tasks));","lastModifiedDate":"2021-08-21"},{"lineNumber":134,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":135,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":136,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":137,"author":{"gitId":"twothicc"},"content":"    void equals_sameAddCommand_true() {","lastModifiedDate":"2021-08-22"},{"lineNumber":138,"author":{"gitId":"twothicc"},"content":"        AddCommand addCommand \u003d new AddCommand(\"list\");","lastModifiedDate":"2021-08-22"},{"lineNumber":139,"author":{"gitId":"twothicc"},"content":"        AddCommand addCommand1 \u003d new AddCommand(\"list\");","lastModifiedDate":"2021-08-22"},{"lineNumber":140,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":141,"author":{"gitId":"twothicc"},"content":"        assertEquals(addCommand, addCommand1);","lastModifiedDate":"2021-08-22"},{"lineNumber":142,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":143,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":144,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":145,"author":{"gitId":"twothicc"},"content":"    void equals_differentAddCommand_false() {","lastModifiedDate":"2021-08-22"},{"lineNumber":146,"author":{"gitId":"twothicc"},"content":"        AddCommand addCommand \u003d new AddCommand(\"list\");","lastModifiedDate":"2021-08-22"},{"lineNumber":147,"author":{"gitId":"twothicc"},"content":"        AddCommand addCommand1 \u003d new AddCommand(\"other\");","lastModifiedDate":"2021-08-22"},{"lineNumber":148,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":149,"author":{"gitId":"twothicc"},"content":"        assertNotEquals(addCommand, addCommand1);","lastModifiedDate":"2021-08-22"},{"lineNumber":150,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":151,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":152,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"twothicc":152}},{"path":"test/duke/command/DeleteCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke.command;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"import duke.StorageStub;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"import duke.task.Todo;","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"class DeleteCommandTest {","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"    private static final String DESCRIPTION \u003d \"task description\";","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"    private final Ui ui \u003d new Ui();","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":"    private TaskList getTaskListOneTodo() {","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"twothicc"},"content":"        tasks.add(new Todo(DESCRIPTION));","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"twothicc"},"content":"        return tasks;","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"twothicc"},"content":"    void execute_deleteInput_taskDeleted() {","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"twothicc"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"twothicc"},"content":"        taskList.add(new Todo(DESCRIPTION));","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"twothicc"},"content":"        StorageStub storageStub \u003d new StorageStub(taskList);","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"twothicc"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(\"delete 1\");","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"twothicc"},"content":"        deleteCommand.execute(taskList, this.ui, storageStub);","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"twothicc"},"content":"        assertTrue(new TaskList().equals(taskList));","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"twothicc"},"content":"    void execute_missingSpace_taskNotDeleted() {","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"twothicc"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"twothicc"},"content":"        taskList.add(new Todo(DESCRIPTION));","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"twothicc"},"content":"        StorageStub storageStub \u003d new StorageStub(taskList);","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"twothicc"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(\"delete1\");","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"twothicc"},"content":"        deleteCommand.execute(taskList, this.ui, storageStub);","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":47,"author":{"gitId":"twothicc"},"content":"        assertTrue(getTaskListOneTodo().equals(taskList));","lastModifiedDate":"2021-08-22"},{"lineNumber":48,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":49,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":50,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":51,"author":{"gitId":"twothicc"},"content":"    void execute_missingIndex_taskNotDeleted() {","lastModifiedDate":"2021-08-22"},{"lineNumber":52,"author":{"gitId":"twothicc"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2021-08-22"},{"lineNumber":53,"author":{"gitId":"twothicc"},"content":"        taskList.add(new Todo(DESCRIPTION));","lastModifiedDate":"2021-08-22"},{"lineNumber":54,"author":{"gitId":"twothicc"},"content":"        StorageStub storageStub \u003d new StorageStub(taskList);","lastModifiedDate":"2021-08-22"},{"lineNumber":55,"author":{"gitId":"twothicc"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(\"delete\");","lastModifiedDate":"2021-08-22"},{"lineNumber":56,"author":{"gitId":"twothicc"},"content":"        DeleteCommand deleteCommand1 \u003d new DeleteCommand(\"delete \");","lastModifiedDate":"2021-08-22"},{"lineNumber":57,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":58,"author":{"gitId":"twothicc"},"content":"        deleteCommand.execute(taskList, this.ui, storageStub);","lastModifiedDate":"2021-08-22"},{"lineNumber":59,"author":{"gitId":"twothicc"},"content":"        deleteCommand1.execute(taskList, this.ui, storageStub);","lastModifiedDate":"2021-08-22"},{"lineNumber":60,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":61,"author":{"gitId":"twothicc"},"content":"        assertTrue(getTaskListOneTodo().equals(taskList));","lastModifiedDate":"2021-08-22"},{"lineNumber":62,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":63,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":64,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":65,"author":{"gitId":"twothicc"},"content":"    void execute_invalidIndex_taskNotDeleted() {","lastModifiedDate":"2021-08-22"},{"lineNumber":66,"author":{"gitId":"twothicc"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2021-08-22"},{"lineNumber":67,"author":{"gitId":"twothicc"},"content":"        taskList.add(new Todo(DESCRIPTION));","lastModifiedDate":"2021-08-22"},{"lineNumber":68,"author":{"gitId":"twothicc"},"content":"        StorageStub storageStub \u003d new StorageStub(taskList);","lastModifiedDate":"2021-08-22"},{"lineNumber":69,"author":{"gitId":"twothicc"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(\"delete 100\");","lastModifiedDate":"2021-08-22"},{"lineNumber":70,"author":{"gitId":"twothicc"},"content":"        DeleteCommand deleteCommand1 \u003d new DeleteCommand(\"delete abc\");","lastModifiedDate":"2021-08-22"},{"lineNumber":71,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":72,"author":{"gitId":"twothicc"},"content":"        deleteCommand.execute(taskList, this.ui, storageStub);","lastModifiedDate":"2021-08-22"},{"lineNumber":73,"author":{"gitId":"twothicc"},"content":"        deleteCommand1.execute(taskList, this.ui, storageStub);","lastModifiedDate":"2021-08-22"},{"lineNumber":74,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":75,"author":{"gitId":"twothicc"},"content":"        assertTrue(getTaskListOneTodo().equals(taskList));","lastModifiedDate":"2021-08-22"},{"lineNumber":76,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":77,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":78,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":79,"author":{"gitId":"twothicc"},"content":"    void equals_sameDeleteCommand_true() {","lastModifiedDate":"2021-08-22"},{"lineNumber":80,"author":{"gitId":"twothicc"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(\"list\");","lastModifiedDate":"2021-08-22"},{"lineNumber":81,"author":{"gitId":"twothicc"},"content":"        DeleteCommand deleteCommand1 \u003d new DeleteCommand(\"list\");","lastModifiedDate":"2021-08-22"},{"lineNumber":82,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":83,"author":{"gitId":"twothicc"},"content":"        assertEquals(deleteCommand, deleteCommand1);","lastModifiedDate":"2021-08-22"},{"lineNumber":84,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":85,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":86,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":87,"author":{"gitId":"twothicc"},"content":"    void equals_differentDeleteCommand_false() {","lastModifiedDate":"2021-08-22"},{"lineNumber":88,"author":{"gitId":"twothicc"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(\"list\");","lastModifiedDate":"2021-08-22"},{"lineNumber":89,"author":{"gitId":"twothicc"},"content":"        DeleteCommand deleteCommand1 \u003d new DeleteCommand(\"other\");","lastModifiedDate":"2021-08-22"},{"lineNumber":90,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":91,"author":{"gitId":"twothicc"},"content":"        assertNotEquals(deleteCommand, deleteCommand1);","lastModifiedDate":"2021-08-22"},{"lineNumber":92,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":93,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"twothicc":93}},{"path":"test/duke/command/MarkCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke.command;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"import duke.StorageStub;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"import duke.task.Todo;","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"class MarkCommandTest {","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"    private static final String DESCRIPTION \u003d \"task description\";","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"    private final Ui ui \u003d new Ui();","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":"    private TaskList getTaskListOneUndoneTodo() {","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"twothicc"},"content":"        tasks.add(new Todo(DESCRIPTION));","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"twothicc"},"content":"        return tasks;","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"twothicc"},"content":"    private TaskList getTaskListOneDoneTodo() {","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"twothicc"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"twothicc"},"content":"        Todo doneTodo \u003d new Todo(DESCRIPTION);","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"twothicc"},"content":"        doneTodo.markAsDone();","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"twothicc"},"content":"        tasks.add(doneTodo);","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"twothicc"},"content":"        return tasks;","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"twothicc"},"content":"    void execute_doneInput_taskMarkedAsDone() {","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"twothicc"},"content":"        TaskList tasks \u003d getTaskListOneUndoneTodo();","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"twothicc"},"content":"        StorageStub storageStub \u003d new StorageStub(tasks);","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"twothicc"},"content":"        MarkCommand markCommand \u003d new MarkCommand(\"done 1\");","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"twothicc"},"content":"        markCommand.execute(tasks, this.ui, storageStub);","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"twothicc"},"content":"        assertTrue(getTaskListOneDoneTodo().equals(tasks));","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":47,"author":{"gitId":"twothicc"},"content":"    void execute_missingIndex_taskNotMarkedAsDone() {","lastModifiedDate":"2021-08-22"},{"lineNumber":48,"author":{"gitId":"twothicc"},"content":"        TaskList tasks \u003d getTaskListOneUndoneTodo();","lastModifiedDate":"2021-08-22"},{"lineNumber":49,"author":{"gitId":"twothicc"},"content":"        StorageStub storageStub \u003d new StorageStub(tasks);","lastModifiedDate":"2021-08-22"},{"lineNumber":50,"author":{"gitId":"twothicc"},"content":"        MarkCommand markCommand \u003d new MarkCommand(\"done\");","lastModifiedDate":"2021-08-22"},{"lineNumber":51,"author":{"gitId":"twothicc"},"content":"        MarkCommand markCommand1 \u003d new MarkCommand(\"done \");","lastModifiedDate":"2021-08-22"},{"lineNumber":52,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":53,"author":{"gitId":"twothicc"},"content":"        markCommand.execute(tasks, this.ui, storageStub);","lastModifiedDate":"2021-08-22"},{"lineNumber":54,"author":{"gitId":"twothicc"},"content":"        markCommand1.execute(tasks, this.ui, storageStub);","lastModifiedDate":"2021-08-22"},{"lineNumber":55,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":56,"author":{"gitId":"twothicc"},"content":"        assertTrue(getTaskListOneUndoneTodo().equals(tasks));","lastModifiedDate":"2021-08-22"},{"lineNumber":57,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":58,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":59,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":60,"author":{"gitId":"twothicc"},"content":"    void execute_missingSpace_taskNotMarkedAsDone() {","lastModifiedDate":"2021-08-22"},{"lineNumber":61,"author":{"gitId":"twothicc"},"content":"        TaskList tasks \u003d getTaskListOneUndoneTodo();","lastModifiedDate":"2021-08-22"},{"lineNumber":62,"author":{"gitId":"twothicc"},"content":"        StorageStub storageStub \u003d new StorageStub(tasks);","lastModifiedDate":"2021-08-22"},{"lineNumber":63,"author":{"gitId":"twothicc"},"content":"        MarkCommand markCommand \u003d new MarkCommand(\"done1\");","lastModifiedDate":"2021-08-22"},{"lineNumber":64,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":65,"author":{"gitId":"twothicc"},"content":"        markCommand.execute(tasks, this.ui, storageStub);","lastModifiedDate":"2021-08-22"},{"lineNumber":66,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":67,"author":{"gitId":"twothicc"},"content":"        assertTrue(getTaskListOneUndoneTodo().equals(tasks));","lastModifiedDate":"2021-08-22"},{"lineNumber":68,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":69,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":70,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":71,"author":{"gitId":"twothicc"},"content":"    void execute_invalidIndex_taskNotMarkedAsDone() {","lastModifiedDate":"2021-08-22"},{"lineNumber":72,"author":{"gitId":"twothicc"},"content":"        TaskList tasks \u003d getTaskListOneUndoneTodo();","lastModifiedDate":"2021-08-22"},{"lineNumber":73,"author":{"gitId":"twothicc"},"content":"        StorageStub storageStub \u003d new StorageStub(tasks);","lastModifiedDate":"2021-08-22"},{"lineNumber":74,"author":{"gitId":"twothicc"},"content":"        MarkCommand markCommand \u003d new MarkCommand(\"done 100\");","lastModifiedDate":"2021-08-22"},{"lineNumber":75,"author":{"gitId":"twothicc"},"content":"        MarkCommand markCommand1 \u003d new MarkCommand(\"done abc\");","lastModifiedDate":"2021-08-22"},{"lineNumber":76,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":77,"author":{"gitId":"twothicc"},"content":"        markCommand.execute(tasks, this.ui, storageStub);","lastModifiedDate":"2021-08-22"},{"lineNumber":78,"author":{"gitId":"twothicc"},"content":"        markCommand1.execute(tasks, this.ui, storageStub);","lastModifiedDate":"2021-08-22"},{"lineNumber":79,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":80,"author":{"gitId":"twothicc"},"content":"        assertTrue(getTaskListOneUndoneTodo().equals(tasks));","lastModifiedDate":"2021-08-22"},{"lineNumber":81,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":82,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":83,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":84,"author":{"gitId":"twothicc"},"content":"    void equals_sameMarkCommand_true() {","lastModifiedDate":"2021-08-22"},{"lineNumber":85,"author":{"gitId":"twothicc"},"content":"        MarkCommand markCommand \u003d new MarkCommand(\"list\");","lastModifiedDate":"2021-08-22"},{"lineNumber":86,"author":{"gitId":"twothicc"},"content":"        MarkCommand markCommand1 \u003d new MarkCommand(\"list\");","lastModifiedDate":"2021-08-22"},{"lineNumber":87,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":88,"author":{"gitId":"twothicc"},"content":"        assertEquals(markCommand, markCommand1);","lastModifiedDate":"2021-08-22"},{"lineNumber":89,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":90,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":91,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":92,"author":{"gitId":"twothicc"},"content":"    void equals_differentMarkCommand_false() {","lastModifiedDate":"2021-08-22"},{"lineNumber":93,"author":{"gitId":"twothicc"},"content":"        MarkCommand markCommand \u003d new MarkCommand(\"list\");","lastModifiedDate":"2021-08-22"},{"lineNumber":94,"author":{"gitId":"twothicc"},"content":"        MarkCommand markCommand1 \u003d new MarkCommand(\"other\");","lastModifiedDate":"2021-08-22"},{"lineNumber":95,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":96,"author":{"gitId":"twothicc"},"content":"        assertNotEquals(markCommand, markCommand1);","lastModifiedDate":"2021-08-22"},{"lineNumber":97,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":98,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"twothicc":98}},{"path":"test/duke/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke.task;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-21"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-08-21"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"class DeadlineTest {","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"    private static final String DESCRIPTION \u003d \"task description\";","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"    // yyyy-mm-dd format.","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"    private static final LocalDate TIME \u003d LocalDate.parse(\"2020-01-01\");","lastModifiedDate":"2021-08-21"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"    Deadline deadline \u003d new Deadline(DESCRIPTION, TIME);","lastModifiedDate":"2021-08-21"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":"    void getTaskType_deadline_D() {","lastModifiedDate":"2021-08-21"},{"lineNumber":21,"author":{"gitId":"twothicc"},"content":"        assertEquals(\"D\", deadline.getTaskType());","lastModifiedDate":"2021-08-21"},{"lineNumber":22,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":23,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":24,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":25,"author":{"gitId":"twothicc"},"content":"    void getTime_deadline_localDate() {","lastModifiedDate":"2021-08-21"},{"lineNumber":26,"author":{"gitId":"twothicc"},"content":"        assertEquals(TIME, deadline.getTime());","lastModifiedDate":"2021-08-21"},{"lineNumber":27,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":28,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":29,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":30,"author":{"gitId":"twothicc"},"content":"    void toString_deadline_formattedDescription() {","lastModifiedDate":"2021-08-21"},{"lineNumber":31,"author":{"gitId":"twothicc"},"content":"        assertEquals(\"[D][ ] \" + DESCRIPTION + \" (by: 1 January 2020)\", deadline.toString());","lastModifiedDate":"2021-08-21"},{"lineNumber":32,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":33,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":34,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":35,"author":{"gitId":"twothicc"},"content":"    void equals_sameDeadline_true() {","lastModifiedDate":"2021-08-21"},{"lineNumber":36,"author":{"gitId":"twothicc"},"content":"        assertEquals(deadline, new Deadline(DESCRIPTION, TIME));","lastModifiedDate":"2021-08-21"},{"lineNumber":37,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":38,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":39,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":40,"author":{"gitId":"twothicc"},"content":"    void equals_differentDeadline_false() {","lastModifiedDate":"2021-08-21"},{"lineNumber":41,"author":{"gitId":"twothicc"},"content":"        LocalDate otherLocalDate \u003d LocalDate.parse(\"2020-02-02\");","lastModifiedDate":"2021-08-21"},{"lineNumber":42,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":43,"author":{"gitId":"twothicc"},"content":"        Deadline doneDeadline \u003d new Deadline(DESCRIPTION, TIME);","lastModifiedDate":"2021-08-21"},{"lineNumber":44,"author":{"gitId":"twothicc"},"content":"        doneDeadline.markAsDone();","lastModifiedDate":"2021-08-21"},{"lineNumber":45,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":46,"author":{"gitId":"twothicc"},"content":"        Deadline differentTimeDeadline \u003d new Deadline(DESCRIPTION, otherLocalDate);","lastModifiedDate":"2021-08-21"},{"lineNumber":47,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":48,"author":{"gitId":"twothicc"},"content":"        Deadline differentDescriptionDeadline \u003d new Deadline(\"other\", TIME);","lastModifiedDate":"2021-08-21"},{"lineNumber":49,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":50,"author":{"gitId":"twothicc"},"content":"        assertNotEquals(deadline, doneDeadline);","lastModifiedDate":"2021-08-21"},{"lineNumber":51,"author":{"gitId":"twothicc"},"content":"        assertNotEquals(deadline, differentTimeDeadline);","lastModifiedDate":"2021-08-21"},{"lineNumber":52,"author":{"gitId":"twothicc"},"content":"        assertNotEquals(deadline, differentDescriptionDeadline);","lastModifiedDate":"2021-08-21"},{"lineNumber":53,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":54,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"twothicc":54}},{"path":"test/duke/task/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke.task;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-21"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-08-21"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"class EventTest {","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"    private static final String DESCRIPTION \u003d \"task description\";","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"    // yyyy-mm-dd format.","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"    private static final LocalDate TIME \u003d LocalDate.parse(\"2020-01-01\");","lastModifiedDate":"2021-08-21"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"    Event event \u003d new Event(DESCRIPTION, TIME);","lastModifiedDate":"2021-08-21"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":"    void getTaskType_event_E() {","lastModifiedDate":"2021-08-21"},{"lineNumber":21,"author":{"gitId":"twothicc"},"content":"        assertEquals(\"E\", event.getTaskType());","lastModifiedDate":"2021-08-21"},{"lineNumber":22,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":23,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":24,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":25,"author":{"gitId":"twothicc"},"content":"    void getTime_event_localDate() {","lastModifiedDate":"2021-08-21"},{"lineNumber":26,"author":{"gitId":"twothicc"},"content":"        assertEquals(TIME, event.getTime());","lastModifiedDate":"2021-08-21"},{"lineNumber":27,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":28,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":29,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":30,"author":{"gitId":"twothicc"},"content":"    void toString_event_formattedString() {","lastModifiedDate":"2021-08-21"},{"lineNumber":31,"author":{"gitId":"twothicc"},"content":"        assertEquals(\"[E][ ] \" + DESCRIPTION + \" (at: 1 January 2020)\", event.toString());","lastModifiedDate":"2021-08-21"},{"lineNumber":32,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":33,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":34,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":35,"author":{"gitId":"twothicc"},"content":"    void equals_sameEvent_true() {","lastModifiedDate":"2021-08-21"},{"lineNumber":36,"author":{"gitId":"twothicc"},"content":"        assertEquals(event, new Event(DESCRIPTION, TIME));","lastModifiedDate":"2021-08-21"},{"lineNumber":37,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":38,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":39,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":40,"author":{"gitId":"twothicc"},"content":"    void equals_differentEvent_false() {","lastModifiedDate":"2021-08-21"},{"lineNumber":41,"author":{"gitId":"twothicc"},"content":"        LocalDate otherLocalDate \u003d LocalDate.parse(\"2020-02-02\");","lastModifiedDate":"2021-08-21"},{"lineNumber":42,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":43,"author":{"gitId":"twothicc"},"content":"        Event doneEvent \u003d new Event(DESCRIPTION, TIME);","lastModifiedDate":"2021-08-21"},{"lineNumber":44,"author":{"gitId":"twothicc"},"content":"        doneEvent.markAsDone();","lastModifiedDate":"2021-08-21"},{"lineNumber":45,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":46,"author":{"gitId":"twothicc"},"content":"        Event differentTimeEvent \u003d new Event(DESCRIPTION, otherLocalDate);","lastModifiedDate":"2021-08-21"},{"lineNumber":47,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":48,"author":{"gitId":"twothicc"},"content":"        Event differentDescriptionEvent \u003d new Event(\"other\", TIME);","lastModifiedDate":"2021-08-21"},{"lineNumber":49,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":50,"author":{"gitId":"twothicc"},"content":"        assertNotEquals(event, doneEvent);","lastModifiedDate":"2021-08-21"},{"lineNumber":51,"author":{"gitId":"twothicc"},"content":"        assertNotEquals(event, differentTimeEvent);","lastModifiedDate":"2021-08-21"},{"lineNumber":52,"author":{"gitId":"twothicc"},"content":"        assertNotEquals(event, differentDescriptionEvent);","lastModifiedDate":"2021-08-21"},{"lineNumber":53,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":54,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"twothicc":54}},{"path":"test/duke/task/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke.task;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-21"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-08-21"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"import static org.junit.jupiter.api.Assertions.assertNull;","lastModifiedDate":"2021-08-21"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"class TaskTest {","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"    private static final String DESCRIPTION \u003d \"task description\";","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"    Task undoneTask \u003d new Task(\"task description\");","lastModifiedDate":"2021-08-21"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"    // Creates a done task. Ensures markAsDone is working before creating.","lastModifiedDate":"2021-08-21"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"    private Task getDoneTask() {","lastModifiedDate":"2021-08-21"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":"        markAsDone_undoneTask_true();","lastModifiedDate":"2021-08-21"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":21,"author":{"gitId":"twothicc"},"content":"        Task doneTask \u003d new Task(DESCRIPTION);","lastModifiedDate":"2021-08-21"},{"lineNumber":22,"author":{"gitId":"twothicc"},"content":"        doneTask.markAsDone();","lastModifiedDate":"2021-08-21"},{"lineNumber":23,"author":{"gitId":"twothicc"},"content":"        return doneTask;","lastModifiedDate":"2021-08-21"},{"lineNumber":24,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":25,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":26,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":27,"author":{"gitId":"twothicc"},"content":"    void getIsDone_undoneTask_false() {","lastModifiedDate":"2021-08-21"},{"lineNumber":28,"author":{"gitId":"twothicc"},"content":"        assertFalse(undoneTask.getIsDone());","lastModifiedDate":"2021-08-21"},{"lineNumber":29,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":30,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":31,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":32,"author":{"gitId":"twothicc"},"content":"    void getIsDone_doneTask_true() {","lastModifiedDate":"2021-08-21"},{"lineNumber":33,"author":{"gitId":"twothicc"},"content":"        Task doneTask \u003d getDoneTask();","lastModifiedDate":"2021-08-21"},{"lineNumber":34,"author":{"gitId":"twothicc"},"content":"        assertTrue(doneTask.getIsDone());","lastModifiedDate":"2021-08-21"},{"lineNumber":35,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":36,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":37,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":38,"author":{"gitId":"twothicc"},"content":"    void getDescription_undoneTask_description() {","lastModifiedDate":"2021-08-21"},{"lineNumber":39,"author":{"gitId":"twothicc"},"content":"        assertEquals(DESCRIPTION, undoneTask.getDescription());","lastModifiedDate":"2021-08-21"},{"lineNumber":40,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":41,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":42,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":43,"author":{"gitId":"twothicc"},"content":"    void getStatusIcon_undoneTask_emptySpace() {","lastModifiedDate":"2021-08-21"},{"lineNumber":44,"author":{"gitId":"twothicc"},"content":"        assertEquals(\" \", undoneTask.getStatusIcon());","lastModifiedDate":"2021-08-21"},{"lineNumber":45,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":46,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":47,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":48,"author":{"gitId":"twothicc"},"content":"    void getStatusIcon_doneTask_X() {","lastModifiedDate":"2021-08-21"},{"lineNumber":49,"author":{"gitId":"twothicc"},"content":"        Task doneTask \u003d getDoneTask();","lastModifiedDate":"2021-08-21"},{"lineNumber":50,"author":{"gitId":"twothicc"},"content":"        assertEquals(\"X\", doneTask.getStatusIcon());","lastModifiedDate":"2021-08-21"},{"lineNumber":51,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":52,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":53,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":54,"author":{"gitId":"twothicc"},"content":"    void getTime_undoneTask_null() {","lastModifiedDate":"2021-08-21"},{"lineNumber":55,"author":{"gitId":"twothicc"},"content":"        assertNull(undoneTask.getTime());","lastModifiedDate":"2021-08-21"},{"lineNumber":56,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":57,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":58,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":59,"author":{"gitId":"twothicc"},"content":"    void markAsDone_undoneTask_true() {","lastModifiedDate":"2021-08-21"},{"lineNumber":60,"author":{"gitId":"twothicc"},"content":"        Task task \u003d new Task(DESCRIPTION);","lastModifiedDate":"2021-08-21"},{"lineNumber":61,"author":{"gitId":"twothicc"},"content":"        task.markAsDone();","lastModifiedDate":"2021-08-21"},{"lineNumber":62,"author":{"gitId":"twothicc"},"content":"        assertTrue(task.getIsDone());","lastModifiedDate":"2021-08-21"},{"lineNumber":63,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":64,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":65,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":66,"author":{"gitId":"twothicc"},"content":"    void getTaskType_undoneTask_null() {","lastModifiedDate":"2021-08-21"},{"lineNumber":67,"author":{"gitId":"twothicc"},"content":"        assertNull(undoneTask.getTaskType());","lastModifiedDate":"2021-08-21"},{"lineNumber":68,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":69,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":70,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":71,"author":{"gitId":"twothicc"},"content":"    void toString_undoneTask_formattedDescription() {","lastModifiedDate":"2021-08-21"},{"lineNumber":72,"author":{"gitId":"twothicc"},"content":"        assertEquals(\"[ ] \" + DESCRIPTION, undoneTask.toString());","lastModifiedDate":"2021-08-21"},{"lineNumber":73,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":74,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":75,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":76,"author":{"gitId":"twothicc"},"content":"    void toString_doneTask_formattedDescription() {","lastModifiedDate":"2021-08-21"},{"lineNumber":77,"author":{"gitId":"twothicc"},"content":"        Task doneTask \u003d getDoneTask();","lastModifiedDate":"2021-08-21"},{"lineNumber":78,"author":{"gitId":"twothicc"},"content":"        assertEquals(\"[X] \" + DESCRIPTION, doneTask.toString());","lastModifiedDate":"2021-08-21"},{"lineNumber":79,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":80,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":81,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":82,"author":{"gitId":"twothicc"},"content":"    void equals_sameTask_true() {","lastModifiedDate":"2021-08-21"},{"lineNumber":83,"author":{"gitId":"twothicc"},"content":"        assertEquals(new Task(DESCRIPTION), undoneTask);","lastModifiedDate":"2021-08-21"},{"lineNumber":84,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":85,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":86,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":87,"author":{"gitId":"twothicc"},"content":"    void equals_differentTask_false() {","lastModifiedDate":"2021-08-21"},{"lineNumber":88,"author":{"gitId":"twothicc"},"content":"        Task doneTask \u003d new Task(DESCRIPTION);","lastModifiedDate":"2021-08-21"},{"lineNumber":89,"author":{"gitId":"twothicc"},"content":"        doneTask.markAsDone();","lastModifiedDate":"2021-08-21"},{"lineNumber":90,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":91,"author":{"gitId":"twothicc"},"content":"        Task differentDescriptionTask \u003d new Task(\"other\");","lastModifiedDate":"2021-08-21"},{"lineNumber":92,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":93,"author":{"gitId":"twothicc"},"content":"        assertNotEquals(undoneTask, doneTask);","lastModifiedDate":"2021-08-21"},{"lineNumber":94,"author":{"gitId":"twothicc"},"content":"        assertNotEquals(undoneTask, differentDescriptionTask);","lastModifiedDate":"2021-08-21"},{"lineNumber":95,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":96,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":97,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"twothicc":97}},{"path":"test/duke/task/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke.task;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-21"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-08-21"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"class TodoTest {","lastModifiedDate":"2021-08-21"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"    private static final String DESCRIPTION \u003d \"task description\";","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"    Todo todo \u003d new Todo(DESCRIPTION);","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"    void getTaskType_todo_T() {","lastModifiedDate":"2021-08-21"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"        assertEquals(\"T\", todo.getTaskType());","lastModifiedDate":"2021-08-21"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":"    void toString_todo_formattedDescription() {","lastModifiedDate":"2021-08-21"},{"lineNumber":21,"author":{"gitId":"twothicc"},"content":"        assertEquals(\"[T][ ] \" + DESCRIPTION, todo.toString());","lastModifiedDate":"2021-08-21"},{"lineNumber":22,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":23,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":24,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":25,"author":{"gitId":"twothicc"},"content":"    void equals_sameTodo_true() {","lastModifiedDate":"2021-08-21"},{"lineNumber":26,"author":{"gitId":"twothicc"},"content":"        assertEquals(new Todo(DESCRIPTION), todo);","lastModifiedDate":"2021-08-21"},{"lineNumber":27,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":28,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":29,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":30,"author":{"gitId":"twothicc"},"content":"    void equals_differentTodo_false() {","lastModifiedDate":"2021-08-21"},{"lineNumber":31,"author":{"gitId":"twothicc"},"content":"        Todo doneTodo \u003d new Todo(DESCRIPTION);","lastModifiedDate":"2021-08-21"},{"lineNumber":32,"author":{"gitId":"twothicc"},"content":"        doneTodo.markAsDone();","lastModifiedDate":"2021-08-21"},{"lineNumber":33,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":34,"author":{"gitId":"twothicc"},"content":"        Todo differentDescriptionTodo \u003d new Todo(\"other\");","lastModifiedDate":"2021-08-21"},{"lineNumber":35,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":36,"author":{"gitId":"twothicc"},"content":"        assertNotEquals(todo, doneTodo);","lastModifiedDate":"2021-08-21"},{"lineNumber":37,"author":{"gitId":"twothicc"},"content":"        assertNotEquals(todo, differentDescriptionTodo);","lastModifiedDate":"2021-08-21"},{"lineNumber":38,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":39,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"twothicc":39}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"todo hello world","lastModifiedDate":"2021-08-14"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"deadline hello world /by time","lastModifiedDate":"2021-08-14"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"event hello world /at time","lastModifiedDate":"2021-08-14"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"done 2","lastModifiedDate":"2021-08-14"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"list","lastModifiedDate":"2021-08-14"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"delete 2","lastModifiedDate":"2021-08-14"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"list","lastModifiedDate":"2021-08-14"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"todo","lastModifiedDate":"2021-08-14"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"event","lastModifiedDate":"2021-08-14"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"deadline","lastModifiedDate":"2021-08-14"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"event hello","lastModifiedDate":"2021-08-14"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"deadline hello","lastModifiedDate":"2021-08-14"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"blah","lastModifiedDate":"2021-08-14"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"done","lastModifiedDate":"2021-08-14"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"done 100","lastModifiedDate":"2021-08-14"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"done hi","lastModifiedDate":"2021-08-14"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"delete","lastModifiedDate":"2021-08-14"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"delete 100","lastModifiedDate":"2021-08-14"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":"delete hi","lastModifiedDate":"2021-08-14"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":"bye","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"twothicc":20}}]

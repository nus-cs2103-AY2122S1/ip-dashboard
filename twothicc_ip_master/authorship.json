[{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-20"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-14"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"    protected LocalDate by;","lastModifiedDate":"2021-08-20"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"    public Deadline(String description, LocalDate by) {","lastModifiedDate":"2021-08-20"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"        super(description);","lastModifiedDate":"2021-08-14"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"        this.by \u003d by;","lastModifiedDate":"2021-08-14"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"    public String getTaskType() {","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"        return \"D\";","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"    public LocalDate getTime() {","lastModifiedDate":"2021-08-20"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"        return this.by;","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":"    @Override","lastModifiedDate":"2021-08-14"},{"lineNumber":21,"author":{"gitId":"twothicc"},"content":"    public String toString() {","lastModifiedDate":"2021-08-14"},{"lineNumber":22,"author":{"gitId":"twothicc"},"content":"        try {","lastModifiedDate":"2021-08-20"},{"lineNumber":23,"author":{"gitId":"twothicc"},"content":"            return \"[D]\" + super.toString() + \" (by: \" + Duke.parseLocalDate(this.by) + \")\";","lastModifiedDate":"2021-08-20"},{"lineNumber":24,"author":{"gitId":"twothicc"},"content":"        } catch (DukeException dukeException) {","lastModifiedDate":"2021-08-20"},{"lineNumber":25,"author":{"gitId":"twothicc"},"content":"            return dukeException.toString();","lastModifiedDate":"2021-08-20"},{"lineNumber":26,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":27,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":28,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"twothicc":28}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"import java.time.DateTimeException;","lastModifiedDate":"2021-08-20"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-08-20"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"import java.util.List;","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"import java.nio.file.Files;","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-20"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-20"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"/**","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":" * scans for user input and outputs corresponding Duke chatbot responses.","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":" */","lastModifiedDate":"2021-08-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":21,"author":{"gitId":"twothicc"},"content":"    // File name for saved tasks.","lastModifiedDate":"2021-08-20"},{"lineNumber":22,"author":{"gitId":"twothicc"},"content":"    private static final String SAVE_FILENAME \u003d \"dukeSave.txt\";","lastModifiedDate":"2021-08-19"},{"lineNumber":23,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":24,"author":{"gitId":"twothicc"},"content":"    // | is a special character that has to be escaped.","lastModifiedDate":"2021-08-19"},{"lineNumber":25,"author":{"gitId":"twothicc"},"content":"    private static final String SAVE_SEPARATOR \u003d \" ~ \";","lastModifiedDate":"2021-08-19"},{"lineNumber":26,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":27,"author":{"gitId":"twothicc"},"content":"    // Enums for Duke chatbot descriptors","lastModifiedDate":"2021-08-19"},{"lineNumber":28,"author":{"gitId":"twothicc"},"content":"    protected enum Descriptors {","lastModifiedDate":"2021-08-19"},{"lineNumber":29,"author":{"gitId":"twothicc"},"content":"        AT(\"at\"),","lastModifiedDate":"2021-08-19"},{"lineNumber":30,"author":{"gitId":"twothicc"},"content":"        BY(\"by\");","lastModifiedDate":"2021-08-19"},{"lineNumber":31,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":32,"author":{"gitId":"twothicc"},"content":"        private final String DESCRIPTOR;","lastModifiedDate":"2021-08-19"},{"lineNumber":33,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":34,"author":{"gitId":"twothicc"},"content":"        public String getDescriptor() {","lastModifiedDate":"2021-08-19"},{"lineNumber":35,"author":{"gitId":"twothicc"},"content":"            return this.DESCRIPTOR;","lastModifiedDate":"2021-08-19"},{"lineNumber":36,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":37,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":38,"author":{"gitId":"twothicc"},"content":"        public int getLength() {","lastModifiedDate":"2021-08-19"},{"lineNumber":39,"author":{"gitId":"twothicc"},"content":"            return this.DESCRIPTOR.length();","lastModifiedDate":"2021-08-19"},{"lineNumber":40,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":41,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":42,"author":{"gitId":"twothicc"},"content":"        Descriptors(String descriptor) {","lastModifiedDate":"2021-08-19"},{"lineNumber":43,"author":{"gitId":"twothicc"},"content":"            this.DESCRIPTOR \u003d descriptor;","lastModifiedDate":"2021-08-19"},{"lineNumber":44,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":45,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":46,"author":{"gitId":"twothicc"},"content":"        @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":47,"author":{"gitId":"twothicc"},"content":"        public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":48,"author":{"gitId":"twothicc"},"content":"            return this.DESCRIPTOR;","lastModifiedDate":"2021-08-19"},{"lineNumber":49,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":50,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":51,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":52,"author":{"gitId":"twothicc"},"content":"    // Enums for Duke chatbot commands","lastModifiedDate":"2021-08-19"},{"lineNumber":53,"author":{"gitId":"twothicc"},"content":"    protected enum Commands {","lastModifiedDate":"2021-08-19"},{"lineNumber":54,"author":{"gitId":"twothicc"},"content":"        TODO(\"todo\"),","lastModifiedDate":"2021-08-14"},{"lineNumber":55,"author":{"gitId":"twothicc"},"content":"        DEADLINE(\"deadline\"),","lastModifiedDate":"2021-08-14"},{"lineNumber":56,"author":{"gitId":"twothicc"},"content":"        EVENT(\"event\"),","lastModifiedDate":"2021-08-14"},{"lineNumber":57,"author":{"gitId":"twothicc"},"content":"        DONE(\"done\"),","lastModifiedDate":"2021-08-14"},{"lineNumber":58,"author":{"gitId":"twothicc"},"content":"        DELETE(\"delete\"),","lastModifiedDate":"2021-08-14"},{"lineNumber":59,"author":{"gitId":"twothicc"},"content":"        LIST(\"list\"),","lastModifiedDate":"2021-08-14"},{"lineNumber":60,"author":{"gitId":"twothicc"},"content":"        DATE(\"date\"),","lastModifiedDate":"2021-08-20"},{"lineNumber":61,"author":{"gitId":"twothicc"},"content":"        BYE(\"bye\");","lastModifiedDate":"2021-08-19"},{"lineNumber":62,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":63,"author":{"gitId":"twothicc"},"content":"        private final String COMMAND;","lastModifiedDate":"2021-08-19"},{"lineNumber":64,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":65,"author":{"gitId":"twothicc"},"content":"        public String getCommand() {","lastModifiedDate":"2021-08-14"},{"lineNumber":66,"author":{"gitId":"twothicc"},"content":"            return this.COMMAND;","lastModifiedDate":"2021-08-19"},{"lineNumber":67,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-14"},{"lineNumber":68,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":69,"author":{"gitId":"twothicc"},"content":"        public int getLength() {","lastModifiedDate":"2021-08-14"},{"lineNumber":70,"author":{"gitId":"twothicc"},"content":"            return this.COMMAND.length();","lastModifiedDate":"2021-08-19"},{"lineNumber":71,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-14"},{"lineNumber":72,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":73,"author":{"gitId":"twothicc"},"content":"        Commands(String command) {","lastModifiedDate":"2021-08-14"},{"lineNumber":74,"author":{"gitId":"twothicc"},"content":"            this.COMMAND \u003d command;","lastModifiedDate":"2021-08-19"},{"lineNumber":75,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":76,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":77,"author":{"gitId":"twothicc"},"content":"        @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":78,"author":{"gitId":"twothicc"},"content":"        public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":79,"author":{"gitId":"twothicc"},"content":"            return this.COMMAND;","lastModifiedDate":"2021-08-19"},{"lineNumber":80,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-14"},{"lineNumber":81,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":82,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":83,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":84,"author":{"gitId":"twothicc"},"content":"     * The main method is runs the Duke chatbot.","lastModifiedDate":"2021-08-19"},{"lineNumber":85,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-19"},{"lineNumber":86,"author":{"gitId":"twothicc"},"content":"     * @param args Command line arguments.","lastModifiedDate":"2021-08-19"},{"lineNumber":87,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":89,"author":{"gitId":"twothicc"},"content":"        // Initialize scanner object.","lastModifiedDate":"2021-08-19"},{"lineNumber":90,"author":{"gitId":"twothicc"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-14"},{"lineNumber":91,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":92,"author":{"gitId":"twothicc"},"content":"        // Prints greeting to user.","lastModifiedDate":"2021-08-19"},{"lineNumber":93,"author":{"gitId":"twothicc"},"content":"        System.out.println(\"Hello! I\u0027m Duke\\nWhat can I do for you?\");","lastModifiedDate":"2021-08-14"},{"lineNumber":94,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":95,"author":{"gitId":"twothicc"},"content":"        // Initialize ArrayList for Task objects.","lastModifiedDate":"2021-08-19"},{"lineNumber":96,"author":{"gitId":"twothicc"},"content":"        ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2021-08-19"},{"lineNumber":97,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":98,"author":{"gitId":"twothicc"},"content":"        // Read tasks from save file.","lastModifiedDate":"2021-08-19"},{"lineNumber":99,"author":{"gitId":"twothicc"},"content":"        try {","lastModifiedDate":"2021-08-19"},{"lineNumber":100,"author":{"gitId":"twothicc"},"content":"            tasks \u003d readTasksFromData();","lastModifiedDate":"2021-08-19"},{"lineNumber":101,"author":{"gitId":"twothicc"},"content":"        } catch (DukeException dukeException) {","lastModifiedDate":"2021-08-19"},{"lineNumber":102,"author":{"gitId":"twothicc"},"content":"            System.out.println(dukeException);","lastModifiedDate":"2021-08-19"},{"lineNumber":103,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":104,"author":{"gitId":"twothicc"},"content":"            // If failed to read tasks from save, initialize a new Task ArrayList.","lastModifiedDate":"2021-08-19"},{"lineNumber":105,"author":{"gitId":"twothicc"},"content":"            tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-19"},{"lineNumber":106,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":107,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":108,"author":{"gitId":"twothicc"},"content":"        // Scans user inputs and prints corresponding outputs until a \"Bye\" input is received.","lastModifiedDate":"2021-08-19"},{"lineNumber":109,"author":{"gitId":"twothicc"},"content":"        String userInput \u003d sc.nextLine();","lastModifiedDate":"2021-08-19"},{"lineNumber":110,"author":{"gitId":"twothicc"},"content":"        while (!userInput.equals(Commands.BYE.getCommand())) {","lastModifiedDate":"2021-08-19"},{"lineNumber":111,"author":{"gitId":"twothicc"},"content":"            handleUserInput(userInput, tasks);","lastModifiedDate":"2021-08-19"},{"lineNumber":112,"author":{"gitId":"twothicc"},"content":"            userInput \u003d sc.nextLine();","lastModifiedDate":"2021-08-19"},{"lineNumber":113,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-14"},{"lineNumber":114,"author":{"gitId":"twothicc"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2021-08-19"},{"lineNumber":115,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":116,"author":{"gitId":"twothicc"},"content":"        // Closes scanner object.","lastModifiedDate":"2021-08-19"},{"lineNumber":117,"author":{"gitId":"twothicc"},"content":"        sc.close();","lastModifiedDate":"2021-08-19"},{"lineNumber":118,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":119,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":120,"author":{"gitId":"twothicc"},"content":"    private static void handleUserInput(String userInput, ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2021-08-19"},{"lineNumber":121,"author":{"gitId":"twothicc"},"content":"        if (userInput.equals(Commands.LIST.getCommand())) {","lastModifiedDate":"2021-08-19"},{"lineNumber":122,"author":{"gitId":"twothicc"},"content":"            // Print tasks","lastModifiedDate":"2021-08-19"},{"lineNumber":123,"author":{"gitId":"twothicc"},"content":"            printTasks(tasks);","lastModifiedDate":"2021-08-19"},{"lineNumber":124,"author":{"gitId":"twothicc"},"content":"        } else {","lastModifiedDate":"2021-08-14"},{"lineNumber":125,"author":{"gitId":"twothicc"},"content":"            // Catches thrown DukeException if any.","lastModifiedDate":"2021-08-19"},{"lineNumber":126,"author":{"gitId":"twothicc"},"content":"            try {","lastModifiedDate":"2021-08-14"},{"lineNumber":127,"author":{"gitId":"twothicc"},"content":"                if (userInput.startsWith(Commands.DONE.getCommand())) {","lastModifiedDate":"2021-08-19"},{"lineNumber":128,"author":{"gitId":"twothicc"},"content":"                    // Mark task as done.","lastModifiedDate":"2021-08-19"},{"lineNumber":129,"author":{"gitId":"twothicc"},"content":"                    markTask(tasks, userInput);","lastModifiedDate":"2021-08-19"},{"lineNumber":130,"author":{"gitId":"twothicc"},"content":"                } else if (userInput.startsWith(Commands.DELETE.getCommand())) {","lastModifiedDate":"2021-08-19"},{"lineNumber":131,"author":{"gitId":"twothicc"},"content":"                    // Delete a task.","lastModifiedDate":"2021-08-19"},{"lineNumber":132,"author":{"gitId":"twothicc"},"content":"                    deleteTask(tasks, userInput);","lastModifiedDate":"2021-08-19"},{"lineNumber":133,"author":{"gitId":"twothicc"},"content":"                } else if (userInput.startsWith(Commands.DATE.getCommand())) {","lastModifiedDate":"2021-08-20"},{"lineNumber":134,"author":{"gitId":"twothicc"},"content":"                    // Print tasks that fall on given date.","lastModifiedDate":"2021-08-20"},{"lineNumber":135,"author":{"gitId":"twothicc"},"content":"                    printTaskAtDate(tasks, userInput);","lastModifiedDate":"2021-08-20"},{"lineNumber":136,"author":{"gitId":"twothicc"},"content":"                } else {","lastModifiedDate":"2021-08-19"},{"lineNumber":137,"author":{"gitId":"twothicc"},"content":"                    // Add a task to tasks.","lastModifiedDate":"2021-08-19"},{"lineNumber":138,"author":{"gitId":"twothicc"},"content":"                    addTask(tasks, userInput, \u0027/\u0027);","lastModifiedDate":"2021-08-19"},{"lineNumber":139,"author":{"gitId":"twothicc"},"content":"                }","lastModifiedDate":"2021-08-14"},{"lineNumber":140,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":141,"author":{"gitId":"twothicc"},"content":"                // Save tasks to save file after each change.","lastModifiedDate":"2021-08-19"},{"lineNumber":142,"author":{"gitId":"twothicc"},"content":"                saveTasksToData(tasks);","lastModifiedDate":"2021-08-19"},{"lineNumber":143,"author":{"gitId":"twothicc"},"content":"            } catch (DukeException dukeException) {","lastModifiedDate":"2021-08-19"},{"lineNumber":144,"author":{"gitId":"twothicc"},"content":"                System.out.println(dukeException);","lastModifiedDate":"2021-08-19"},{"lineNumber":145,"author":{"gitId":"twothicc"},"content":"            }","lastModifiedDate":"2021-08-14"},{"lineNumber":146,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-14"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":148,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":149,"author":{"gitId":"twothicc"},"content":"    private static String padZeros(String original, int expected) throws DukeException {","lastModifiedDate":"2021-08-20"},{"lineNumber":150,"author":{"gitId":"twothicc"},"content":"        String output \u003d original;","lastModifiedDate":"2021-08-20"},{"lineNumber":151,"author":{"gitId":"twothicc"},"content":"        if (original.length() \u003c expected) {","lastModifiedDate":"2021-08-20"},{"lineNumber":152,"author":{"gitId":"twothicc"},"content":"            for (int i \u003d 0; i \u003c (expected - original.length()); i++) {","lastModifiedDate":"2021-08-20"},{"lineNumber":153,"author":{"gitId":"twothicc"},"content":"                output \u003d \"0\" + original;","lastModifiedDate":"2021-08-20"},{"lineNumber":154,"author":{"gitId":"twothicc"},"content":"            }","lastModifiedDate":"2021-08-20"},{"lineNumber":155,"author":{"gitId":"twothicc"},"content":"        } else if (original.length() \u003e expected) {","lastModifiedDate":"2021-08-20"},{"lineNumber":156,"author":{"gitId":"twothicc"},"content":"            throw new DukeException(\"Invalid datetime format\");","lastModifiedDate":"2021-08-20"},{"lineNumber":157,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":158,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":159,"author":{"gitId":"twothicc"},"content":"        return output;","lastModifiedDate":"2021-08-20"},{"lineNumber":160,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":161,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":162,"author":{"gitId":"twothicc"},"content":"    public static String parseLocalDate(LocalDate localDate) throws DukeException {","lastModifiedDate":"2021-08-20"},{"lineNumber":163,"author":{"gitId":"twothicc"},"content":"        try {","lastModifiedDate":"2021-08-20"},{"lineNumber":164,"author":{"gitId":"twothicc"},"content":"            return localDate.format(DateTimeFormatter.ofPattern(\"d MMMM yyyy\"));","lastModifiedDate":"2021-08-20"},{"lineNumber":165,"author":{"gitId":"twothicc"},"content":"        } catch (DateTimeException dateTimeException) {","lastModifiedDate":"2021-08-20"},{"lineNumber":166,"author":{"gitId":"twothicc"},"content":"            throw new DukeException(\"Stored date is corrupt.\");","lastModifiedDate":"2021-08-20"},{"lineNumber":167,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":168,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":169,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":170,"author":{"gitId":"twothicc"},"content":"    private static LocalDate toLocalDate(String dateString) throws DukeException {","lastModifiedDate":"2021-08-20"},{"lineNumber":171,"author":{"gitId":"twothicc"},"content":"        String[] split \u003d dateString.split(\"[/\\\\s]\");","lastModifiedDate":"2021-08-20"},{"lineNumber":172,"author":{"gitId":"twothicc"},"content":"        String date \u003d padZeros(split[0], 2);","lastModifiedDate":"2021-08-20"},{"lineNumber":173,"author":{"gitId":"twothicc"},"content":"        String month \u003d padZeros(split[1], 2);","lastModifiedDate":"2021-08-20"},{"lineNumber":174,"author":{"gitId":"twothicc"},"content":"        String year \u003d padZeros(split[2], 4);","lastModifiedDate":"2021-08-20"},{"lineNumber":175,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":176,"author":{"gitId":"twothicc"},"content":"        StringBuilder stringBuilder \u003d new StringBuilder();","lastModifiedDate":"2021-08-20"},{"lineNumber":177,"author":{"gitId":"twothicc"},"content":"        stringBuilder.append(year).append(\"-\");","lastModifiedDate":"2021-08-20"},{"lineNumber":178,"author":{"gitId":"twothicc"},"content":"        stringBuilder.append(month).append(\"-\");","lastModifiedDate":"2021-08-20"},{"lineNumber":179,"author":{"gitId":"twothicc"},"content":"        stringBuilder.append(date);","lastModifiedDate":"2021-08-20"},{"lineNumber":180,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":181,"author":{"gitId":"twothicc"},"content":"        LocalDate localDate;","lastModifiedDate":"2021-08-20"},{"lineNumber":182,"author":{"gitId":"twothicc"},"content":"        try {","lastModifiedDate":"2021-08-20"},{"lineNumber":183,"author":{"gitId":"twothicc"},"content":"            localDate \u003d LocalDate.parse(stringBuilder.toString());","lastModifiedDate":"2021-08-20"},{"lineNumber":184,"author":{"gitId":"twothicc"},"content":"        } catch (DateTimeParseException dateTimeParseException) {","lastModifiedDate":"2021-08-20"},{"lineNumber":185,"author":{"gitId":"twothicc"},"content":"            throw new DukeException(\"Invalid datetime format\");","lastModifiedDate":"2021-08-20"},{"lineNumber":186,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":187,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":188,"author":{"gitId":"twothicc"},"content":"        return localDate;","lastModifiedDate":"2021-08-20"},{"lineNumber":189,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":190,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":191,"author":{"gitId":"twothicc"},"content":"    private static String toSaveDateFormat(LocalDate localDate) throws DukeException {","lastModifiedDate":"2021-08-20"},{"lineNumber":192,"author":{"gitId":"twothicc"},"content":"        try {","lastModifiedDate":"2021-08-20"},{"lineNumber":193,"author":{"gitId":"twothicc"},"content":"            return localDate.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"));","lastModifiedDate":"2021-08-20"},{"lineNumber":194,"author":{"gitId":"twothicc"},"content":"        } catch (DateTimeException dateTimeException) {","lastModifiedDate":"2021-08-20"},{"lineNumber":195,"author":{"gitId":"twothicc"},"content":"            throw new DukeException(\"Stored date is corrupt.\");","lastModifiedDate":"2021-08-20"},{"lineNumber":196,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":197,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":198,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":199,"author":{"gitId":"twothicc"},"content":"    private static void printTaskAtDate(ArrayList\u003cTask\u003e tasks, String userInput) throws DukeException {","lastModifiedDate":"2021-08-20"},{"lineNumber":200,"author":{"gitId":"twothicc"},"content":"        int counter \u003d 0;","lastModifiedDate":"2021-08-20"},{"lineNumber":201,"author":{"gitId":"twothicc"},"content":"        int events \u003d 0;","lastModifiedDate":"2021-08-20"},{"lineNumber":202,"author":{"gitId":"twothicc"},"content":"        int deadlines \u003d 0;","lastModifiedDate":"2021-08-20"},{"lineNumber":203,"author":{"gitId":"twothicc"},"content":"        String dateString \u003d userInput.substring(Commands.DATE.getLength() + 1);","lastModifiedDate":"2021-08-20"},{"lineNumber":204,"author":{"gitId":"twothicc"},"content":"        LocalDate localDate \u003d toLocalDate(dateString);","lastModifiedDate":"2021-08-20"},{"lineNumber":205,"author":{"gitId":"twothicc"},"content":"        String formattedDateString \u003d parseLocalDate(localDate);","lastModifiedDate":"2021-08-20"},{"lineNumber":206,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":207,"author":{"gitId":"twothicc"},"content":"        System.out.println(\"Here are the Deadlines or Events that fall on \" + formattedDateString + \":\");","lastModifiedDate":"2021-08-20"},{"lineNumber":208,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":209,"author":{"gitId":"twothicc"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2021-08-20"},{"lineNumber":210,"author":{"gitId":"twothicc"},"content":"            Task task \u003d tasks.get(i);","lastModifiedDate":"2021-08-20"},{"lineNumber":211,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":212,"author":{"gitId":"twothicc"},"content":"            if (task instanceof Deadline) {","lastModifiedDate":"2021-08-20"},{"lineNumber":213,"author":{"gitId":"twothicc"},"content":"                Deadline deadline \u003d (Deadline) task;","lastModifiedDate":"2021-08-20"},{"lineNumber":214,"author":{"gitId":"twothicc"},"content":"                if (localDate.equals(deadline.by)) {","lastModifiedDate":"2021-08-20"},{"lineNumber":215,"author":{"gitId":"twothicc"},"content":"                    counter++;","lastModifiedDate":"2021-08-20"},{"lineNumber":216,"author":{"gitId":"twothicc"},"content":"                    deadlines++;","lastModifiedDate":"2021-08-20"},{"lineNumber":217,"author":{"gitId":"twothicc"},"content":"                    System.out.println(counter + \".\" + deadline);","lastModifiedDate":"2021-08-20"},{"lineNumber":218,"author":{"gitId":"twothicc"},"content":"                }","lastModifiedDate":"2021-08-20"},{"lineNumber":219,"author":{"gitId":"twothicc"},"content":"            }","lastModifiedDate":"2021-08-20"},{"lineNumber":220,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":221,"author":{"gitId":"twothicc"},"content":"            if (task instanceof Event) {","lastModifiedDate":"2021-08-20"},{"lineNumber":222,"author":{"gitId":"twothicc"},"content":"                Event event \u003d (Event) task;","lastModifiedDate":"2021-08-20"},{"lineNumber":223,"author":{"gitId":"twothicc"},"content":"                if (localDate.equals(event.at)) {","lastModifiedDate":"2021-08-20"},{"lineNumber":224,"author":{"gitId":"twothicc"},"content":"                    counter++;","lastModifiedDate":"2021-08-20"},{"lineNumber":225,"author":{"gitId":"twothicc"},"content":"                    events++;","lastModifiedDate":"2021-08-20"},{"lineNumber":226,"author":{"gitId":"twothicc"},"content":"                    System.out.println(counter + \".\" + event);","lastModifiedDate":"2021-08-20"},{"lineNumber":227,"author":{"gitId":"twothicc"},"content":"                }","lastModifiedDate":"2021-08-20"},{"lineNumber":228,"author":{"gitId":"twothicc"},"content":"            }","lastModifiedDate":"2021-08-20"},{"lineNumber":229,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":230,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":231,"author":{"gitId":"twothicc"},"content":"        System.out.println(\"A total of \" + counter + \" events (\" + deadlines + \" deadlines and \" +","lastModifiedDate":"2021-08-20"},{"lineNumber":232,"author":{"gitId":"twothicc"},"content":"                events + \" events) fall on \" + formattedDateString);","lastModifiedDate":"2021-08-20"},{"lineNumber":233,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":234,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":235,"author":{"gitId":"twothicc"},"content":"    private static String toSaveFormat(Task task) throws DukeException {","lastModifiedDate":"2021-08-20"},{"lineNumber":236,"author":{"gitId":"twothicc"},"content":"        // Initialize StringBuilder.","lastModifiedDate":"2021-08-19"},{"lineNumber":237,"author":{"gitId":"twothicc"},"content":"        StringBuilder stringBuilder \u003d new StringBuilder();","lastModifiedDate":"2021-08-19"},{"lineNumber":238,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":239,"author":{"gitId":"twothicc"},"content":"        // Get task type, done status of task.","lastModifiedDate":"2021-08-20"},{"lineNumber":240,"author":{"gitId":"twothicc"},"content":"        String taskType \u003d task.getTaskType();","lastModifiedDate":"2021-08-19"},{"lineNumber":241,"author":{"gitId":"twothicc"},"content":"        int done \u003d task.isDone ? 1 : 0;","lastModifiedDate":"2021-08-19"},{"lineNumber":242,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":243,"author":{"gitId":"twothicc"},"content":"        // Build corresponding save string from task.","lastModifiedDate":"2021-08-19"},{"lineNumber":244,"author":{"gitId":"twothicc"},"content":"        stringBuilder.append(taskType).append(SAVE_SEPARATOR);","lastModifiedDate":"2021-08-19"},{"lineNumber":245,"author":{"gitId":"twothicc"},"content":"        stringBuilder.append(done).append(SAVE_SEPARATOR);","lastModifiedDate":"2021-08-19"},{"lineNumber":246,"author":{"gitId":"twothicc"},"content":"        stringBuilder.append(task.description);","lastModifiedDate":"2021-08-19"},{"lineNumber":247,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":248,"author":{"gitId":"twothicc"},"content":"        // Deadline tasks have time, so it is obtained and appended via stringBuilder.","lastModifiedDate":"2021-08-20"},{"lineNumber":249,"author":{"gitId":"twothicc"},"content":"        if (taskType.equals(\"D\")) {","lastModifiedDate":"2021-08-20"},{"lineNumber":250,"author":{"gitId":"twothicc"},"content":"            Deadline deadline \u003d (Deadline) task;","lastModifiedDate":"2021-08-20"},{"lineNumber":251,"author":{"gitId":"twothicc"},"content":"            LocalDate localDate \u003d deadline.getTime();","lastModifiedDate":"2021-08-20"},{"lineNumber":252,"author":{"gitId":"twothicc"},"content":"            String time \u003d toSaveDateFormat(localDate);","lastModifiedDate":"2021-08-20"},{"lineNumber":253,"author":{"gitId":"twothicc"},"content":"            stringBuilder.append(SAVE_SEPARATOR).append(time);","lastModifiedDate":"2021-08-20"},{"lineNumber":254,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":255,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":256,"author":{"gitId":"twothicc"},"content":"        // Event tasks have time, so it is obtained and appended via stringBuilder.","lastModifiedDate":"2021-08-20"},{"lineNumber":257,"author":{"gitId":"twothicc"},"content":"        if (taskType.equals(\"E\")) {","lastModifiedDate":"2021-08-20"},{"lineNumber":258,"author":{"gitId":"twothicc"},"content":"            Event event \u003d (Event) task;","lastModifiedDate":"2021-08-20"},{"lineNumber":259,"author":{"gitId":"twothicc"},"content":"            LocalDate localDate \u003d event.getTime();","lastModifiedDate":"2021-08-20"},{"lineNumber":260,"author":{"gitId":"twothicc"},"content":"            String time \u003d toSaveDateFormat(localDate);","lastModifiedDate":"2021-08-20"},{"lineNumber":261,"author":{"gitId":"twothicc"},"content":"            stringBuilder.append(SAVE_SEPARATOR).append(time);","lastModifiedDate":"2021-08-20"},{"lineNumber":262,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":263,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":264,"author":{"gitId":"twothicc"},"content":"        return stringBuilder.toString();","lastModifiedDate":"2021-08-19"},{"lineNumber":265,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":266,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":267,"author":{"gitId":"twothicc"},"content":"    private static Task parseSaveFormat(String save) throws DukeException {","lastModifiedDate":"2021-08-19"},{"lineNumber":268,"author":{"gitId":"twothicc"},"content":"        // Split save string by the save separator.","lastModifiedDate":"2021-08-19"},{"lineNumber":269,"author":{"gitId":"twothicc"},"content":"        String[] saveSplit \u003d save.split(SAVE_SEPARATOR);","lastModifiedDate":"2021-08-19"},{"lineNumber":270,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":271,"author":{"gitId":"twothicc"},"content":"        try {","lastModifiedDate":"2021-08-19"},{"lineNumber":272,"author":{"gitId":"twothicc"},"content":"            // Get the task type, done status, description of task from saveSplit.","lastModifiedDate":"2021-08-19"},{"lineNumber":273,"author":{"gitId":"twothicc"},"content":"            String taskType \u003d saveSplit[0];","lastModifiedDate":"2021-08-19"},{"lineNumber":274,"author":{"gitId":"twothicc"},"content":"            // Save would be corrupt if done status cannot be parsed to int.","lastModifiedDate":"2021-08-19"},{"lineNumber":275,"author":{"gitId":"twothicc"},"content":"            int isDone \u003d Integer.parseInt(saveSplit[1]);","lastModifiedDate":"2021-08-19"},{"lineNumber":276,"author":{"gitId":"twothicc"},"content":"            String description \u003d saveSplit[2];","lastModifiedDate":"2021-08-19"},{"lineNumber":277,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":278,"author":{"gitId":"twothicc"},"content":"            // Create corresponding Task object.","lastModifiedDate":"2021-08-19"},{"lineNumber":279,"author":{"gitId":"twothicc"},"content":"            // Save would be corrupt if Deadline and Event tasks do not have time.","lastModifiedDate":"2021-08-19"},{"lineNumber":280,"author":{"gitId":"twothicc"},"content":"            Task task;","lastModifiedDate":"2021-08-19"},{"lineNumber":281,"author":{"gitId":"twothicc"},"content":"            switch (taskType) {","lastModifiedDate":"2021-08-19"},{"lineNumber":282,"author":{"gitId":"twothicc"},"content":"            case \"T\":","lastModifiedDate":"2021-08-19"},{"lineNumber":283,"author":{"gitId":"twothicc"},"content":"                task \u003d new Todo(description);","lastModifiedDate":"2021-08-19"},{"lineNumber":284,"author":{"gitId":"twothicc"},"content":"                break;","lastModifiedDate":"2021-08-19"},{"lineNumber":285,"author":{"gitId":"twothicc"},"content":"            case \"D\":","lastModifiedDate":"2021-08-19"},{"lineNumber":286,"author":{"gitId":"twothicc"},"content":"                LocalDate by \u003d toLocalDate(saveSplit[3]);","lastModifiedDate":"2021-08-20"},{"lineNumber":287,"author":{"gitId":"twothicc"},"content":"                task \u003d new Deadline(description, by);","lastModifiedDate":"2021-08-19"},{"lineNumber":288,"author":{"gitId":"twothicc"},"content":"                break;","lastModifiedDate":"2021-08-19"},{"lineNumber":289,"author":{"gitId":"twothicc"},"content":"            case \"E\":","lastModifiedDate":"2021-08-19"},{"lineNumber":290,"author":{"gitId":"twothicc"},"content":"                LocalDate at \u003d toLocalDate(saveSplit[3]);","lastModifiedDate":"2021-08-20"},{"lineNumber":291,"author":{"gitId":"twothicc"},"content":"                task \u003d new Event(description, at);","lastModifiedDate":"2021-08-19"},{"lineNumber":292,"author":{"gitId":"twothicc"},"content":"                break;","lastModifiedDate":"2021-08-19"},{"lineNumber":293,"author":{"gitId":"twothicc"},"content":"            default:","lastModifiedDate":"2021-08-19"},{"lineNumber":294,"author":{"gitId":"twothicc"},"content":"                throw new DukeException(\"Save files corrupted. Failed to read tasks from save file.\");","lastModifiedDate":"2021-08-19"},{"lineNumber":295,"author":{"gitId":"twothicc"},"content":"            }","lastModifiedDate":"2021-08-19"},{"lineNumber":296,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":297,"author":{"gitId":"twothicc"},"content":"            if (isDone \u003d\u003d 1) {","lastModifiedDate":"2021-08-19"},{"lineNumber":298,"author":{"gitId":"twothicc"},"content":"                task.markAsDone();","lastModifiedDate":"2021-08-19"},{"lineNumber":299,"author":{"gitId":"twothicc"},"content":"            }","lastModifiedDate":"2021-08-19"},{"lineNumber":300,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":301,"author":{"gitId":"twothicc"},"content":"            return task;","lastModifiedDate":"2021-08-19"},{"lineNumber":302,"author":{"gitId":"twothicc"},"content":"        } catch (NumberFormatException | IndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-19"},{"lineNumber":303,"author":{"gitId":"twothicc"},"content":"            throw new DukeException(\"Save files corrupted. Failed to read tasks from save file.\");","lastModifiedDate":"2021-08-19"},{"lineNumber":304,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":305,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":306,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":307,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":308,"author":{"gitId":"twothicc"},"content":"    private static ArrayList\u003cTask\u003e readTasksFromData() throws DukeException {","lastModifiedDate":"2021-08-19"},{"lineNumber":309,"author":{"gitId":"twothicc"},"content":"        // Initialize an ArrayList for Task objects.","lastModifiedDate":"2021-08-19"},{"lineNumber":310,"author":{"gitId":"twothicc"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-19"},{"lineNumber":311,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":312,"author":{"gitId":"twothicc"},"content":"        // Get absolute path to save file.","lastModifiedDate":"2021-08-19"},{"lineNumber":313,"author":{"gitId":"twothicc"},"content":"        String cwd \u003d System.getProperty(\"user.dir\");","lastModifiedDate":"2021-08-19"},{"lineNumber":314,"author":{"gitId":"twothicc"},"content":"        Path absolutePathToSaveFile \u003d Paths.get(cwd, \"data\", SAVE_FILENAME);","lastModifiedDate":"2021-08-19"},{"lineNumber":315,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":316,"author":{"gitId":"twothicc"},"content":"        // Check if save file exists.","lastModifiedDate":"2021-08-19"},{"lineNumber":317,"author":{"gitId":"twothicc"},"content":"        boolean isSaveFileExist \u003d Files.exists(absolutePathToSaveFile);","lastModifiedDate":"2021-08-19"},{"lineNumber":318,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":319,"author":{"gitId":"twothicc"},"content":"        try {","lastModifiedDate":"2021-08-19"},{"lineNumber":320,"author":{"gitId":"twothicc"},"content":"            // If save file does not exist, create save file;","lastModifiedDate":"2021-08-19"},{"lineNumber":321,"author":{"gitId":"twothicc"},"content":"            if (!isSaveFileExist) {","lastModifiedDate":"2021-08-19"},{"lineNumber":322,"author":{"gitId":"twothicc"},"content":"                saveTasksToData(tasks);","lastModifiedDate":"2021-08-19"},{"lineNumber":323,"author":{"gitId":"twothicc"},"content":"            }","lastModifiedDate":"2021-08-19"},{"lineNumber":324,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":325,"author":{"gitId":"twothicc"},"content":"            // Read from save file.","lastModifiedDate":"2021-08-19"},{"lineNumber":326,"author":{"gitId":"twothicc"},"content":"            List\u003cString\u003e rawTasks \u003d Files.readAllLines(absolutePathToSaveFile);","lastModifiedDate":"2021-08-19"},{"lineNumber":327,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":328,"author":{"gitId":"twothicc"},"content":"            // Parse each line into a Task object and save to tasks.","lastModifiedDate":"2021-08-19"},{"lineNumber":329,"author":{"gitId":"twothicc"},"content":"            for (int i \u003d 0; i \u003c rawTasks.size(); i++) {","lastModifiedDate":"2021-08-19"},{"lineNumber":330,"author":{"gitId":"twothicc"},"content":"                Task task \u003d parseSaveFormat(rawTasks.get(i));","lastModifiedDate":"2021-08-19"},{"lineNumber":331,"author":{"gitId":"twothicc"},"content":"                tasks.add(task);","lastModifiedDate":"2021-08-19"},{"lineNumber":332,"author":{"gitId":"twothicc"},"content":"            }","lastModifiedDate":"2021-08-19"},{"lineNumber":333,"author":{"gitId":"twothicc"},"content":"        } catch (IOException ioException) {","lastModifiedDate":"2021-08-19"},{"lineNumber":334,"author":{"gitId":"twothicc"},"content":"            // Failure to read from save file.","lastModifiedDate":"2021-08-19"},{"lineNumber":335,"author":{"gitId":"twothicc"},"content":"            throw new DukeException(\"Failed to read tasks from save file.\");","lastModifiedDate":"2021-08-19"},{"lineNumber":336,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":337,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":338,"author":{"gitId":"twothicc"},"content":"        return tasks;","lastModifiedDate":"2021-08-19"},{"lineNumber":339,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":340,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":341,"author":{"gitId":"twothicc"},"content":"    private static void saveTasksToData(ArrayList\u003cTask\u003e tasks) throws DukeException {","lastModifiedDate":"2021-08-19"},{"lineNumber":342,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":343,"author":{"gitId":"twothicc"},"content":"        // Get the absolute path to data subdirectory of project directory.","lastModifiedDate":"2021-08-19"},{"lineNumber":344,"author":{"gitId":"twothicc"},"content":"        String cwd \u003d System.getProperty(\"user.dir\");","lastModifiedDate":"2021-08-19"},{"lineNumber":345,"author":{"gitId":"twothicc"},"content":"        Path absolutePathToDataDir \u003d Paths.get(cwd, \"data\");","lastModifiedDate":"2021-08-19"},{"lineNumber":346,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":347,"author":{"gitId":"twothicc"},"content":"        // Check if data directory exists.","lastModifiedDate":"2021-08-19"},{"lineNumber":348,"author":{"gitId":"twothicc"},"content":"        boolean isDirectoryExist \u003d Files.exists(absolutePathToDataDir);","lastModifiedDate":"2021-08-19"},{"lineNumber":349,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":350,"author":{"gitId":"twothicc"},"content":"        try {","lastModifiedDate":"2021-08-19"},{"lineNumber":351,"author":{"gitId":"twothicc"},"content":"            // If data directory does not exist, create one.","lastModifiedDate":"2021-08-19"},{"lineNumber":352,"author":{"gitId":"twothicc"},"content":"            if (!isDirectoryExist) {","lastModifiedDate":"2021-08-19"},{"lineNumber":353,"author":{"gitId":"twothicc"},"content":"                Files.createDirectory(absolutePathToDataDir);","lastModifiedDate":"2021-08-19"},{"lineNumber":354,"author":{"gitId":"twothicc"},"content":"            }","lastModifiedDate":"2021-08-19"},{"lineNumber":355,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":356,"author":{"gitId":"twothicc"},"content":"            // Get absolute path to save file.","lastModifiedDate":"2021-08-19"},{"lineNumber":357,"author":{"gitId":"twothicc"},"content":"            Path absolutePathToSaveFile \u003d Paths.get(absolutePathToDataDir.toString(), SAVE_FILENAME);","lastModifiedDate":"2021-08-19"},{"lineNumber":358,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":359,"author":{"gitId":"twothicc"},"content":"            // Check if file exists.","lastModifiedDate":"2021-08-19"},{"lineNumber":360,"author":{"gitId":"twothicc"},"content":"            boolean isSaveFileExist \u003d Files.exists(absolutePathToSaveFile);","lastModifiedDate":"2021-08-19"},{"lineNumber":361,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":362,"author":{"gitId":"twothicc"},"content":"            // If file does not exist, create it.","lastModifiedDate":"2021-08-19"},{"lineNumber":363,"author":{"gitId":"twothicc"},"content":"            if (!isSaveFileExist) {","lastModifiedDate":"2021-08-19"},{"lineNumber":364,"author":{"gitId":"twothicc"},"content":"                Files.createFile(absolutePathToSaveFile);","lastModifiedDate":"2021-08-19"},{"lineNumber":365,"author":{"gitId":"twothicc"},"content":"            }","lastModifiedDate":"2021-08-19"},{"lineNumber":366,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":367,"author":{"gitId":"twothicc"},"content":"            // Stop if there are no tasks to be saved.","lastModifiedDate":"2021-08-19"},{"lineNumber":368,"author":{"gitId":"twothicc"},"content":"            if (tasks.size() \u003d\u003d 0) {","lastModifiedDate":"2021-08-19"},{"lineNumber":369,"author":{"gitId":"twothicc"},"content":"                return;","lastModifiedDate":"2021-08-19"},{"lineNumber":370,"author":{"gitId":"twothicc"},"content":"            }","lastModifiedDate":"2021-08-19"},{"lineNumber":371,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":372,"author":{"gitId":"twothicc"},"content":"            // Generate string to be saved to save file.","lastModifiedDate":"2021-08-19"},{"lineNumber":373,"author":{"gitId":"twothicc"},"content":"            StringBuilder stringBuilder \u003d new StringBuilder();","lastModifiedDate":"2021-08-19"},{"lineNumber":374,"author":{"gitId":"twothicc"},"content":"            for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2021-08-19"},{"lineNumber":375,"author":{"gitId":"twothicc"},"content":"                String save \u003d toSaveFormat(tasks.get(i));","lastModifiedDate":"2021-08-19"},{"lineNumber":376,"author":{"gitId":"twothicc"},"content":"                stringBuilder.append(save);","lastModifiedDate":"2021-08-19"},{"lineNumber":377,"author":{"gitId":"twothicc"},"content":"                // If last task in tasks, no need to append newline.","lastModifiedDate":"2021-08-19"},{"lineNumber":378,"author":{"gitId":"twothicc"},"content":"                if (i \u003c (tasks.size() - 1)) {","lastModifiedDate":"2021-08-19"},{"lineNumber":379,"author":{"gitId":"twothicc"},"content":"                    stringBuilder.append(\"\\n\");","lastModifiedDate":"2021-08-19"},{"lineNumber":380,"author":{"gitId":"twothicc"},"content":"                    ;","lastModifiedDate":"2021-08-19"},{"lineNumber":381,"author":{"gitId":"twothicc"},"content":"                }","lastModifiedDate":"2021-08-19"},{"lineNumber":382,"author":{"gitId":"twothicc"},"content":"            }","lastModifiedDate":"2021-08-19"},{"lineNumber":383,"author":{"gitId":"twothicc"},"content":"            String textToSave \u003d stringBuilder.toString();","lastModifiedDate":"2021-08-19"},{"lineNumber":384,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":385,"author":{"gitId":"twothicc"},"content":"            // Write to save file.","lastModifiedDate":"2021-08-19"},{"lineNumber":386,"author":{"gitId":"twothicc"},"content":"            byte[] textToSaveToBytes \u003d textToSave.getBytes();","lastModifiedDate":"2021-08-19"},{"lineNumber":387,"author":{"gitId":"twothicc"},"content":"            Files.write(absolutePathToSaveFile, textToSaveToBytes);","lastModifiedDate":"2021-08-19"},{"lineNumber":388,"author":{"gitId":"twothicc"},"content":"        } catch (IOException ioException) {","lastModifiedDate":"2021-08-19"},{"lineNumber":389,"author":{"gitId":"twothicc"},"content":"            throw new DukeException(\"Failed to save tasks\");","lastModifiedDate":"2021-08-19"},{"lineNumber":390,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":391,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":392,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":393,"author":{"gitId":"twothicc"},"content":"    private static int findIndex(String s, Character c) {","lastModifiedDate":"2021-08-14"},{"lineNumber":394,"author":{"gitId":"twothicc"},"content":"        for (int i \u003d 0; i \u003c s.length(); i++) {","lastModifiedDate":"2021-08-14"},{"lineNumber":395,"author":{"gitId":"twothicc"},"content":"            if (s.charAt(i) \u003d\u003d c) {","lastModifiedDate":"2021-08-14"},{"lineNumber":396,"author":{"gitId":"twothicc"},"content":"                return i;","lastModifiedDate":"2021-08-14"},{"lineNumber":397,"author":{"gitId":"twothicc"},"content":"            }","lastModifiedDate":"2021-08-14"},{"lineNumber":398,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-14"},{"lineNumber":399,"author":{"gitId":"twothicc"},"content":"        return -1;","lastModifiedDate":"2021-08-14"},{"lineNumber":400,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":401,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":402,"author":{"gitId":"twothicc"},"content":"    private static int parseUserNumInput(String userInput, Commands command) throws DukeException {","lastModifiedDate":"2021-08-19"},{"lineNumber":403,"author":{"gitId":"twothicc"},"content":"        // Parses integer in user input. Invalid user input could throw NumberFormatException.","lastModifiedDate":"2021-08-19"},{"lineNumber":404,"author":{"gitId":"twothicc"},"content":"        try {","lastModifiedDate":"2021-08-19"},{"lineNumber":405,"author":{"gitId":"twothicc"},"content":"            // Add 1 as user\u0027s number input is separated from command by 1 space.","lastModifiedDate":"2021-08-19"},{"lineNumber":406,"author":{"gitId":"twothicc"},"content":"            return Integer.parseInt(userInput.substring(command.getLength() + 1));","lastModifiedDate":"2021-08-19"},{"lineNumber":407,"author":{"gitId":"twothicc"},"content":"        } catch (NumberFormatException nfe) {","lastModifiedDate":"2021-08-19"},{"lineNumber":408,"author":{"gitId":"twothicc"},"content":"            // Invalid user input cannot be parsed into Integer.","lastModifiedDate":"2021-08-19"},{"lineNumber":409,"author":{"gitId":"twothicc"},"content":"            throw new DukeException(\"Index for \" + command.getCommand() + \" must be an integer.\");","lastModifiedDate":"2021-08-19"},{"lineNumber":410,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":411,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":412,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":413,"author":{"gitId":"twothicc"},"content":"    private static void deleteTask(ArrayList\u003cTask\u003e tasks, String userInput) throws DukeException {","lastModifiedDate":"2021-08-19"},{"lineNumber":414,"author":{"gitId":"twothicc"},"content":"        if (userInput.length() \u003c\u003d (Commands.DELETE.getLength() + 1)) {","lastModifiedDate":"2021-08-14"},{"lineNumber":415,"author":{"gitId":"twothicc"},"content":"            // Missing user input for index of task to be deleted.","lastModifiedDate":"2021-08-19"},{"lineNumber":416,"author":{"gitId":"twothicc"},"content":"            throw new DukeException(\"An index must be provided to delete task at index.\");","lastModifiedDate":"2021-08-14"},{"lineNumber":417,"author":{"gitId":"twothicc"},"content":"        } else {","lastModifiedDate":"2021-08-14"},{"lineNumber":418,"author":{"gitId":"twothicc"},"content":"            // Parses integer in user input. 1 space is accounted for as it separates command and index.","lastModifiedDate":"2021-08-19"},{"lineNumber":419,"author":{"gitId":"twothicc"},"content":"            int userNumInput \u003d parseUserNumInput(userInput, Commands.DELETE);","lastModifiedDate":"2021-08-19"},{"lineNumber":420,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":421,"author":{"gitId":"twothicc"},"content":"            // Decrement integer from user input to match indexing of tasks.","lastModifiedDate":"2021-08-19"},{"lineNumber":422,"author":{"gitId":"twothicc"},"content":"            int idx \u003d userNumInput - 1;","lastModifiedDate":"2021-08-19"},{"lineNumber":423,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":424,"author":{"gitId":"twothicc"},"content":"            // Checks for invalid index.","lastModifiedDate":"2021-08-19"},{"lineNumber":425,"author":{"gitId":"twothicc"},"content":"            if (idx \u003e\u003d tasks.size() || idx \u003c 0) {","lastModifiedDate":"2021-08-19"},{"lineNumber":426,"author":{"gitId":"twothicc"},"content":"                throw new DukeException(\"Index provided for delete is either less than 1 or exceeds the length of the list, hence invalid.\");","lastModifiedDate":"2021-08-14"},{"lineNumber":427,"author":{"gitId":"twothicc"},"content":"            }","lastModifiedDate":"2021-08-14"},{"lineNumber":428,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":429,"author":{"gitId":"twothicc"},"content":"            // Assigns task to be deleted to tempTask for printing.","lastModifiedDate":"2021-08-19"},{"lineNumber":430,"author":{"gitId":"twothicc"},"content":"            Task tempTask \u003d tasks.get(idx);","lastModifiedDate":"2021-08-19"},{"lineNumber":431,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":432,"author":{"gitId":"twothicc"},"content":"            // Deletes task at index.","lastModifiedDate":"2021-08-19"},{"lineNumber":433,"author":{"gitId":"twothicc"},"content":"            tasks.remove(idx);","lastModifiedDate":"2021-08-19"},{"lineNumber":434,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":435,"author":{"gitId":"twothicc"},"content":"            // Prints response to user after successfully deleting task at index.","lastModifiedDate":"2021-08-19"},{"lineNumber":436,"author":{"gitId":"twothicc"},"content":"            System.out.println(\"Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2021-08-14"},{"lineNumber":437,"author":{"gitId":"twothicc"},"content":"            System.out.println(tempTask.toString());","lastModifiedDate":"2021-08-19"},{"lineNumber":438,"author":{"gitId":"twothicc"},"content":"            System.out.println(\"Now you have \" + tasks.size() + \" tasks in the list.\");","lastModifiedDate":"2021-08-19"},{"lineNumber":439,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-14"},{"lineNumber":440,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":441,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":442,"author":{"gitId":"twothicc"},"content":"    private static void printTasks(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2021-08-19"},{"lineNumber":443,"author":{"gitId":"twothicc"},"content":"        System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2021-08-14"},{"lineNumber":444,"author":{"gitId":"twothicc"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2021-08-19"},{"lineNumber":445,"author":{"gitId":"twothicc"},"content":"            // Increment i by 1 so number matches display indexing which starts from 1.","lastModifiedDate":"2021-08-19"},{"lineNumber":446,"author":{"gitId":"twothicc"},"content":"            int idx \u003d i + 1;","lastModifiedDate":"2021-08-19"},{"lineNumber":447,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":448,"author":{"gitId":"twothicc"},"content":"            // Format should be \"?. taskDescription\\n\"","lastModifiedDate":"2021-08-19"},{"lineNumber":449,"author":{"gitId":"twothicc"},"content":"            System.out.printf(\"%d.%s%n\", idx, tasks.get(i).toString());","lastModifiedDate":"2021-08-19"},{"lineNumber":450,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-14"},{"lineNumber":451,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":452,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":453,"author":{"gitId":"twothicc"},"content":"    private static void markTask(ArrayList\u003cTask\u003e tasks, String userInput) throws DukeException {","lastModifiedDate":"2021-08-19"},{"lineNumber":454,"author":{"gitId":"twothicc"},"content":"        if (userInput.length() \u003c\u003d (Commands.DONE.getLength() + 1)) {","lastModifiedDate":"2021-08-14"},{"lineNumber":455,"author":{"gitId":"twothicc"},"content":"            // Missing user input for index of task to be marked as done.","lastModifiedDate":"2021-08-19"},{"lineNumber":456,"author":{"gitId":"twothicc"},"content":"            throw new DukeException(\"An index must be provided to mark task at the index as done.\");","lastModifiedDate":"2021-08-14"},{"lineNumber":457,"author":{"gitId":"twothicc"},"content":"        } else {","lastModifiedDate":"2021-08-14"},{"lineNumber":458,"author":{"gitId":"twothicc"},"content":"            // Parses integer in user input.","lastModifiedDate":"2021-08-19"},{"lineNumber":459,"author":{"gitId":"twothicc"},"content":"            int userNumInput \u003d parseUserNumInput(userInput, Commands.DONE);","lastModifiedDate":"2021-08-19"},{"lineNumber":460,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":461,"author":{"gitId":"twothicc"},"content":"            // Decrement integer from user input to match indexing of tasks.","lastModifiedDate":"2021-08-19"},{"lineNumber":462,"author":{"gitId":"twothicc"},"content":"            int idx \u003d userNumInput - 1;","lastModifiedDate":"2021-08-19"},{"lineNumber":463,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":464,"author":{"gitId":"twothicc"},"content":"            // Checks for invalid index.","lastModifiedDate":"2021-08-19"},{"lineNumber":465,"author":{"gitId":"twothicc"},"content":"            if (idx \u003e\u003d tasks.size() || idx \u003c 0) {","lastModifiedDate":"2021-08-19"},{"lineNumber":466,"author":{"gitId":"twothicc"},"content":"                throw new DukeException(\"Index provided for done is either less than 1 or exceeds the length of the list, hence invalid.\");","lastModifiedDate":"2021-08-14"},{"lineNumber":467,"author":{"gitId":"twothicc"},"content":"            }","lastModifiedDate":"2021-08-14"},{"lineNumber":468,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":469,"author":{"gitId":"twothicc"},"content":"            // Marks task at index as done.","lastModifiedDate":"2021-08-19"},{"lineNumber":470,"author":{"gitId":"twothicc"},"content":"            tasks.get(idx).markAsDone();","lastModifiedDate":"2021-08-19"},{"lineNumber":471,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":472,"author":{"gitId":"twothicc"},"content":"            // Prints response to user after successfully marking task at index as done.","lastModifiedDate":"2021-08-19"},{"lineNumber":473,"author":{"gitId":"twothicc"},"content":"            System.out.println(\"Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2021-08-14"},{"lineNumber":474,"author":{"gitId":"twothicc"},"content":"            System.out.println(tasks.get(idx).toString());","lastModifiedDate":"2021-08-19"},{"lineNumber":475,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-14"},{"lineNumber":476,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":477,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":478,"author":{"gitId":"twothicc"},"content":"    private static String[] parseUserDescriptionInput(String userDescription, Descriptors descriptor,","lastModifiedDate":"2021-08-19"},{"lineNumber":479,"author":{"gitId":"twothicc"},"content":"            Character separator, Commands command) throws DukeException {","lastModifiedDate":"2021-08-19"},{"lineNumber":480,"author":{"gitId":"twothicc"},"content":"        // Index of separator in userDescription.","lastModifiedDate":"2021-08-19"},{"lineNumber":481,"author":{"gitId":"twothicc"},"content":"        int separatorIdx \u003d findIndex(userDescription, separator);","lastModifiedDate":"2021-08-19"},{"lineNumber":482,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":483,"author":{"gitId":"twothicc"},"content":"        // Index of space after descriptor","lastModifiedDate":"2021-08-19"},{"lineNumber":484,"author":{"gitId":"twothicc"},"content":"        int indexDescriptorSpace \u003d separatorIdx + descriptor.getLength() + 1;","lastModifiedDate":"2021-08-19"},{"lineNumber":485,"author":{"gitId":"twothicc"},"content":"        if ((separatorIdx \u003d\u003d -1) || (userDescription.length() \u003c\u003d indexDescriptorSpace)) {","lastModifiedDate":"2021-08-19"},{"lineNumber":486,"author":{"gitId":"twothicc"},"content":"            throw new DukeException(\"/\" + descriptor.getDescriptor() +","lastModifiedDate":"2021-08-19"},{"lineNumber":487,"author":{"gitId":"twothicc"},"content":"                    \" must be provided and not empty for \" + command.getCommand() + \".\");","lastModifiedDate":"2021-08-19"},{"lineNumber":488,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-14"},{"lineNumber":489,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":490,"author":{"gitId":"twothicc"},"content":"        // Index of first character following space after descriptor.","lastModifiedDate":"2021-08-19"},{"lineNumber":491,"author":{"gitId":"twothicc"},"content":"        int indexAfterDescriptorSpace \u003d separatorIdx + descriptor.getLength() + 2;","lastModifiedDate":"2021-08-19"},{"lineNumber":492,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":493,"author":{"gitId":"twothicc"},"content":"        // User\u0027s time input.","lastModifiedDate":"2021-08-19"},{"lineNumber":494,"author":{"gitId":"twothicc"},"content":"        String time \u003d userDescription.substring(indexAfterDescriptorSpace);","lastModifiedDate":"2021-08-19"},{"lineNumber":495,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":496,"author":{"gitId":"twothicc"},"content":"        // User\u0027s task description. Decrement by 1 as there is a space between task description and separator","lastModifiedDate":"2021-08-19"},{"lineNumber":497,"author":{"gitId":"twothicc"},"content":"        String commandDescription \u003d userDescription.substring(0, separatorIdx - 1);","lastModifiedDate":"2021-08-19"},{"lineNumber":498,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":499,"author":{"gitId":"twothicc"},"content":"        // Events and Deadline could have empty tasks but taken as they do due to their descriptors and time.","lastModifiedDate":"2021-08-20"},{"lineNumber":500,"author":{"gitId":"twothicc"},"content":"        // Need to run another check on whether their task descriptions are empty.","lastModifiedDate":"2021-08-20"},{"lineNumber":501,"author":{"gitId":"twothicc"},"content":"        if (commandDescription.equals(\"\")) {","lastModifiedDate":"2021-08-20"},{"lineNumber":502,"author":{"gitId":"twothicc"},"content":"            throw new DukeException(\"The description of \" + command.getCommand() + \" cannot be empty.\");","lastModifiedDate":"2021-08-20"},{"lineNumber":503,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":504,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":505,"author":{"gitId":"twothicc"},"content":"        // Returns a String array with the task description and user input after descriptor.","lastModifiedDate":"2021-08-19"},{"lineNumber":506,"author":{"gitId":"twothicc"},"content":"        return new String[] {commandDescription, time};","lastModifiedDate":"2021-08-19"},{"lineNumber":507,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":508,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":509,"author":{"gitId":"twothicc"},"content":"    private static void addTask(ArrayList\u003cTask\u003e tasks, String userInput, Character separator) throws DukeException {","lastModifiedDate":"2021-08-19"},{"lineNumber":510,"author":{"gitId":"twothicc"},"content":"        // Checks for command given in user input.","lastModifiedDate":"2021-08-19"},{"lineNumber":511,"author":{"gitId":"twothicc"},"content":"        String userCommand;","lastModifiedDate":"2021-08-19"},{"lineNumber":512,"author":{"gitId":"twothicc"},"content":"        if (userInput.startsWith(Commands.TODO.getCommand())) {","lastModifiedDate":"2021-08-14"},{"lineNumber":513,"author":{"gitId":"twothicc"},"content":"            userCommand \u003d Commands.TODO.getCommand();","lastModifiedDate":"2021-08-19"},{"lineNumber":514,"author":{"gitId":"twothicc"},"content":"        } else if (userInput.startsWith(Commands.DEADLINE.getCommand())) {","lastModifiedDate":"2021-08-14"},{"lineNumber":515,"author":{"gitId":"twothicc"},"content":"            userCommand \u003d Commands.DEADLINE.getCommand();","lastModifiedDate":"2021-08-19"},{"lineNumber":516,"author":{"gitId":"twothicc"},"content":"        } else if (userInput.startsWith(Commands.EVENT.getCommand())) {","lastModifiedDate":"2021-08-14"},{"lineNumber":517,"author":{"gitId":"twothicc"},"content":"            userCommand \u003d Commands.EVENT.getCommand();","lastModifiedDate":"2021-08-19"},{"lineNumber":518,"author":{"gitId":"twothicc"},"content":"        } else {","lastModifiedDate":"2021-08-14"},{"lineNumber":519,"author":{"gitId":"twothicc"},"content":"            throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2021-08-14"},{"lineNumber":520,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-14"},{"lineNumber":521,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":522,"author":{"gitId":"twothicc"},"content":"        // Checks if user input contains a task description and obtain it if it exists.","lastModifiedDate":"2021-08-19"},{"lineNumber":523,"author":{"gitId":"twothicc"},"content":"        if (userInput.length() \u003c\u003d userCommand.length() + 1) {","lastModifiedDate":"2021-08-19"},{"lineNumber":524,"author":{"gitId":"twothicc"},"content":"            throw new DukeException(\"The description of \" + userCommand + \" cannot be empty.\");","lastModifiedDate":"2021-08-19"},{"lineNumber":525,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-14"},{"lineNumber":526,"author":{"gitId":"twothicc"},"content":"        String description \u003d userInput.substring(userCommand.length() + 1);","lastModifiedDate":"2021-08-19"},{"lineNumber":527,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":528,"author":{"gitId":"twothicc"},"content":"        // Parses description and adds the corresponding task to tasks.","lastModifiedDate":"2021-08-19"},{"lineNumber":529,"author":{"gitId":"twothicc"},"content":"        if (userCommand.equals(Commands.TODO.getCommand())) {","lastModifiedDate":"2021-08-19"},{"lineNumber":530,"author":{"gitId":"twothicc"},"content":"            // Adds to-do task to tasks.","lastModifiedDate":"2021-08-19"},{"lineNumber":531,"author":{"gitId":"twothicc"},"content":"            tasks.add(new Todo(description));","lastModifiedDate":"2021-08-19"},{"lineNumber":532,"author":{"gitId":"twothicc"},"content":"        } else if (userCommand.equals(Commands.DEADLINE.getCommand())) {","lastModifiedDate":"2021-08-19"},{"lineNumber":533,"author":{"gitId":"twothicc"},"content":"            // Parses description into task description and time.","lastModifiedDate":"2021-08-19"},{"lineNumber":534,"author":{"gitId":"twothicc"},"content":"            String[] descriptions \u003d","lastModifiedDate":"2021-08-19"},{"lineNumber":535,"author":{"gitId":"twothicc"},"content":"                    parseUserDescriptionInput(description, Descriptors.BY, separator, Commands.DEADLINE);","lastModifiedDate":"2021-08-19"},{"lineNumber":536,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":537,"author":{"gitId":"twothicc"},"content":"            // Convert time to LocalDate.","lastModifiedDate":"2021-08-20"},{"lineNumber":538,"author":{"gitId":"twothicc"},"content":"            LocalDate localDate \u003d toLocalDate(descriptions[1]);","lastModifiedDate":"2021-08-20"},{"lineNumber":539,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":540,"author":{"gitId":"twothicc"},"content":"            // Adds Deadline task to tasks.","lastModifiedDate":"2021-08-19"},{"lineNumber":541,"author":{"gitId":"twothicc"},"content":"            tasks.add(new Deadline(descriptions[0], localDate));","lastModifiedDate":"2021-08-20"},{"lineNumber":542,"author":{"gitId":"twothicc"},"content":"        } else {","lastModifiedDate":"2021-08-14"},{"lineNumber":543,"author":{"gitId":"twothicc"},"content":"            // Parses description into task description and time.","lastModifiedDate":"2021-08-19"},{"lineNumber":544,"author":{"gitId":"twothicc"},"content":"            String[] descriptions \u003d","lastModifiedDate":"2021-08-19"},{"lineNumber":545,"author":{"gitId":"twothicc"},"content":"                    parseUserDescriptionInput(description, Descriptors.AT, separator, Commands.EVENT);","lastModifiedDate":"2021-08-19"},{"lineNumber":546,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":547,"author":{"gitId":"twothicc"},"content":"            // Convert time to LocalDate.","lastModifiedDate":"2021-08-20"},{"lineNumber":548,"author":{"gitId":"twothicc"},"content":"            LocalDate localDate \u003d toLocalDate(descriptions[1]);","lastModifiedDate":"2021-08-20"},{"lineNumber":549,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":550,"author":{"gitId":"twothicc"},"content":"            // Adds Event task to tasks.","lastModifiedDate":"2021-08-19"},{"lineNumber":551,"author":{"gitId":"twothicc"},"content":"            tasks.add(new Event(descriptions[0], localDate));","lastModifiedDate":"2021-08-20"},{"lineNumber":552,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-14"},{"lineNumber":553,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":554,"author":{"gitId":"twothicc"},"content":"        // Prints response to user after successfully adding task to tasks.","lastModifiedDate":"2021-08-19"},{"lineNumber":555,"author":{"gitId":"twothicc"},"content":"        System.out.println(\"Got it. I have added this task:\");","lastModifiedDate":"2021-08-14"},{"lineNumber":556,"author":{"gitId":"twothicc"},"content":"        System.out.println(tasks.get(tasks.size() - 1).toString());","lastModifiedDate":"2021-08-19"},{"lineNumber":557,"author":{"gitId":"twothicc"},"content":"        System.out.println(\"Now you have \" + tasks.size() + \" tasks in the list.\");","lastModifiedDate":"2021-08-19"},{"lineNumber":558,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":559,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"twothicc":554,"-":5}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-08-14"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"    private String errorMessage;","lastModifiedDate":"2021-08-14"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"    public DukeException(String errorMessage) {","lastModifiedDate":"2021-08-14"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"        super(errorMessage);","lastModifiedDate":"2021-08-14"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"        this.errorMessage \u003d errorMessage;","lastModifiedDate":"2021-08-14"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"    @Override","lastModifiedDate":"2021-08-14"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"    public String toString() {","lastModifiedDate":"2021-08-14"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"        return \"\\uD83D\\uDE41 OOPS!!! \" + this.errorMessage;","lastModifiedDate":"2021-08-14"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"twothicc":13}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-20"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-14"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"    protected LocalDate at;","lastModifiedDate":"2021-08-20"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"    public Event(String description, LocalDate at) {","lastModifiedDate":"2021-08-20"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"        super(description);","lastModifiedDate":"2021-08-14"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"        this.at \u003d at;","lastModifiedDate":"2021-08-14"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"    public String getTaskType() {","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"        return \"E\";","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"    public LocalDate getTime() {","lastModifiedDate":"2021-08-20"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"        return this.at;","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":"    @Override","lastModifiedDate":"2021-08-14"},{"lineNumber":21,"author":{"gitId":"twothicc"},"content":"    public String toString() {","lastModifiedDate":"2021-08-14"},{"lineNumber":22,"author":{"gitId":"twothicc"},"content":"        try {","lastModifiedDate":"2021-08-20"},{"lineNumber":23,"author":{"gitId":"twothicc"},"content":"            return \"[E]\" + super.toString() + \" (at: \" + Duke.parseLocalDate(this.at) + \")\";","lastModifiedDate":"2021-08-20"},{"lineNumber":24,"author":{"gitId":"twothicc"},"content":"        } catch (DukeException dukeException) {","lastModifiedDate":"2021-08-20"},{"lineNumber":25,"author":{"gitId":"twothicc"},"content":"            return dukeException.toString();","lastModifiedDate":"2021-08-20"},{"lineNumber":26,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":27,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":28,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":29,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"twothicc":29}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"public class Task {","lastModifiedDate":"2021-08-14"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"    protected String description;","lastModifiedDate":"2021-08-14"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-14"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"    public Task(String description) {","lastModifiedDate":"2021-08-14"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-14"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-14"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-14"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2021-08-14"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"    public void markAsDone() {","lastModifiedDate":"2021-08-14"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-08-14"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"    public String getTaskType() {","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":"        return null;","lastModifiedDate":"2021-08-19"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":21,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":22,"author":{"gitId":"twothicc"},"content":"    @Override","lastModifiedDate":"2021-08-14"},{"lineNumber":23,"author":{"gitId":"twothicc"},"content":"    public String toString() {","lastModifiedDate":"2021-08-14"},{"lineNumber":24,"author":{"gitId":"twothicc"},"content":"        return String.format(\"[%s] %s\", this.getStatusIcon(), this.description);","lastModifiedDate":"2021-08-14"},{"lineNumber":25,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":26,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"twothicc":26}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-08-14"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"    public Todo(String description) {","lastModifiedDate":"2021-08-14"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"        super(description);","lastModifiedDate":"2021-08-14"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"    public String getTaskType() {","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"        return \"T\";","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"    @Override","lastModifiedDate":"2021-08-14"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"    public String toString() {","lastModifiedDate":"2021-08-14"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2021-08-14"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"twothicc":16}},{"path":"test/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-19"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"/**","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":" * Contains JUnit5 tests for public members of Task class.","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":" */","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"class TaskTest {","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"    void getStatusIcon_undoneTask_uncheckedBox() {","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"        Task task \u003d new Task(\"Task\");","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"        assertEquals(\"[ ]\", task.getStatusIcon());","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"    void markAsDone_undoneTask_checkedBox() {","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":"        Task task \u003d new Task(\"Task\");","lastModifiedDate":"2021-08-19"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":21,"author":{"gitId":"twothicc"},"content":"        task.markAsDone();","lastModifiedDate":"2021-08-19"},{"lineNumber":22,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":23,"author":{"gitId":"twothicc"},"content":"        assertEquals(\"[X]\", task.getStatusIcon());","lastModifiedDate":"2021-08-19"},{"lineNumber":24,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":25,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":26,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-19"},{"lineNumber":27,"author":{"gitId":"twothicc"},"content":"    void toString_undoneTask_descriptionWithCheckedBox() {","lastModifiedDate":"2021-08-19"},{"lineNumber":28,"author":{"gitId":"twothicc"},"content":"        Task task \u003d new Task(\"Task\");","lastModifiedDate":"2021-08-19"},{"lineNumber":29,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":30,"author":{"gitId":"twothicc"},"content":"        assertEquals(\"[ ] Task\", task.toString());","lastModifiedDate":"2021-08-19"},{"lineNumber":31,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":32,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":33,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-19"},{"lineNumber":34,"author":{"gitId":"twothicc"},"content":"    void toString_doneTask_descriptionWithUncheckedBox() {","lastModifiedDate":"2021-08-19"},{"lineNumber":35,"author":{"gitId":"twothicc"},"content":"        Task task \u003d new Task(\"Task\");","lastModifiedDate":"2021-08-19"},{"lineNumber":36,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":37,"author":{"gitId":"twothicc"},"content":"        task.markAsDone();","lastModifiedDate":"2021-08-19"},{"lineNumber":38,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":39,"author":{"gitId":"twothicc"},"content":"        assertEquals(\"[X] Task\", task.toString());","lastModifiedDate":"2021-08-19"},{"lineNumber":40,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":41,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"twothicc":41}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"todo hello world","lastModifiedDate":"2021-08-14"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"deadline hello world /by time","lastModifiedDate":"2021-08-14"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"event hello world /at time","lastModifiedDate":"2021-08-14"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"done 2","lastModifiedDate":"2021-08-14"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"list","lastModifiedDate":"2021-08-14"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"delete 2","lastModifiedDate":"2021-08-14"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"list","lastModifiedDate":"2021-08-14"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"todo","lastModifiedDate":"2021-08-14"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"event","lastModifiedDate":"2021-08-14"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"deadline","lastModifiedDate":"2021-08-14"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"event hello","lastModifiedDate":"2021-08-14"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"deadline hello","lastModifiedDate":"2021-08-14"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"blah","lastModifiedDate":"2021-08-14"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"done","lastModifiedDate":"2021-08-14"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"done 100","lastModifiedDate":"2021-08-14"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"done hi","lastModifiedDate":"2021-08-14"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"delete","lastModifiedDate":"2021-08-14"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"delete 100","lastModifiedDate":"2021-08-14"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":"delete hi","lastModifiedDate":"2021-08-14"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":"bye","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"twothicc":20}}]

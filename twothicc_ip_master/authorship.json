[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"# duke.Duke project template","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2021-08-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"twothicc":2,"-":22}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"    testImplementation \u0027org.junit.jupiter:junit-jupiter-api:5.7.2\u0027","lastModifiedDate":"2021-08-27"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"    testRuntimeOnly \u0027org.junit.jupiter:junit-jupiter-engine:5.7.2\u0027","lastModifiedDate":"2021-08-27"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2021-08-27"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-08-27"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-08-27"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-08-27"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-08-27"},{"lineNumber":21,"author":{"gitId":"twothicc"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-08-27"},{"lineNumber":22,"author":{"gitId":"twothicc"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-08-27"},{"lineNumber":23,"author":{"gitId":"twothicc"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-08-27"},{"lineNumber":24,"author":{"gitId":"twothicc"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-08-27"},{"lineNumber":25,"author":{"gitId":"twothicc"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-08-27"},{"lineNumber":26,"author":{"gitId":"twothicc"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-08-27"},{"lineNumber":27,"author":{"gitId":"twothicc"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-08-27"},{"lineNumber":28,"author":{"gitId":"twothicc"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-08-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"twothicc"},"content":"    mainClassName \u003d \"duke.DukeLauncher\"","lastModifiedDate":"2021-09-02"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"twothicc"},"content":"    archiveBaseName \u003d \"Duke\"","lastModifiedDate":"2021-08-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"run {","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"twothicc"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2021-09-03"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"twothicc":19,"-":42}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2019-07-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"---","lastModifiedDate":"2021-09-11"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"Duke is a desktop todo-list application that allows user to manage","lastModifiedDate":"2021-09-11"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"their tasks through text-based interaction with a GUI (Graphical User Interface)","lastModifiedDate":"2021-09-11"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"![Duke showcase](./Ui.png)","lastModifiedDate":"2021-09-11"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"## Content","lastModifiedDate":"2021-09-11"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"---","lastModifiedDate":"2021-09-11"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"1. [Quick Start](#quick-start)","lastModifiedDate":"2021-09-11"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"2. [Features](#features)","lastModifiedDate":"2021-09-11"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"3. [Usage](#usage)","lastModifiedDate":"2021-09-11"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"## Quick Start","lastModifiedDate":"2021-09-11"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":"Quick guide to getting Duke set up","lastModifiedDate":"2021-09-11"},{"lineNumber":21,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":22,"author":{"gitId":"twothicc"},"content":"---","lastModifiedDate":"2021-09-11"},{"lineNumber":23,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":24,"author":{"gitId":"twothicc"},"content":"1. Ensure you have [Java 11](https://www.oracle.com/sg/java/technologies/javase-jdk11-downloads.html) ","lastModifiedDate":"2021-09-11"},{"lineNumber":25,"author":{"gitId":"twothicc"},"content":"installed on your computer","lastModifiedDate":"2021-09-11"},{"lineNumber":26,"author":{"gitId":"twothicc"},"content":"2. Download and extract the Duke.jar file to your desired location","lastModifiedDate":"2021-09-11"},{"lineNumber":27,"author":{"gitId":"twothicc"},"content":"3. For Mac users, double-click to open the app","lastModifiedDate":"2021-09-11"},{"lineNumber":28,"author":{"gitId":"twothicc"},"content":"4. For Windows users, open command prompt and change directory to Duke.jar\u0027s","lastModifiedDate":"2021-09-11"},{"lineNumber":29,"author":{"gitId":"twothicc"},"content":"directory. Replace DUKE_JAR_DIRECTORY with your corresponding Duke.jar\u0027s","lastModifiedDate":"2021-09-11"},{"lineNumber":30,"author":{"gitId":"twothicc"},"content":"directory in the following command.","lastModifiedDate":"2021-09-11"},{"lineNumber":31,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":32,"author":{"gitId":"twothicc"},"content":"```","lastModifiedDate":"2021-09-11"},{"lineNumber":33,"author":{"gitId":"twothicc"},"content":"cd DUKE_JAR_DIRECTORY","lastModifiedDate":"2021-09-11"},{"lineNumber":34,"author":{"gitId":"twothicc"},"content":"```","lastModifiedDate":"2021-09-11"},{"lineNumber":35,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":36,"author":{"gitId":"twothicc"},"content":"5. (Continuing from 4) In the same command prompt, run this command to start Duke","lastModifiedDate":"2021-09-11"},{"lineNumber":37,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":38,"author":{"gitId":"twothicc"},"content":"```","lastModifiedDate":"2021-09-11"},{"lineNumber":39,"author":{"gitId":"twothicc"},"content":"java -jar Duke.jar","lastModifiedDate":"2021-09-11"},{"lineNumber":40,"author":{"gitId":"twothicc"},"content":"```","lastModifiedDate":"2021-09-11"},{"lineNumber":41,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":42,"author":{"gitId":"twothicc"},"content":"6. Duke application will run and greet you with","lastModifiedDate":"2021-09-11"},{"lineNumber":43,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":44,"author":{"gitId":"twothicc"},"content":"```","lastModifiedDate":"2021-09-11"},{"lineNumber":45,"author":{"gitId":"twothicc"},"content":"Duke: Hello! I\u0027m Duke","lastModifiedDate":"2021-09-11"},{"lineNumber":46,"author":{"gitId":"twothicc"},"content":"What can I do for you?","lastModifiedDate":"2021-09-11"},{"lineNumber":47,"author":{"gitId":"twothicc"},"content":"```","lastModifiedDate":"2021-09-11"},{"lineNumber":48,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":49,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":50,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":51,"author":{"gitId":"-"},"content":"## Features ","lastModifiedDate":"2019-07-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":53,"author":{"gitId":"twothicc"},"content":"Quick summary of Duke\u0027s core features","lastModifiedDate":"2021-09-11"},{"lineNumber":54,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":55,"author":{"gitId":"twothicc"},"content":"**Note**: tasklist refers to Duke\u0027s storage for tasks","lastModifiedDate":"2021-09-11"},{"lineNumber":56,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":57,"author":{"gitId":"twothicc"},"content":"---","lastModifiedDate":"2021-09-11"},{"lineNumber":58,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":59,"author":{"gitId":"twothicc"},"content":"### 1. [Add Todo](#todo---adds-todo-task)","lastModifiedDate":"2021-09-11"},{"lineNumber":60,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":61,"author":{"gitId":"twothicc"},"content":"Adds an undone task to your tasklist","lastModifiedDate":"2021-09-11"},{"lineNumber":62,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":63,"author":{"gitId":"twothicc"},"content":"### 2. [Add Event](#event---adds-event-task)","lastModifiedDate":"2021-09-11"},{"lineNumber":64,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":65,"author":{"gitId":"twothicc"},"content":"Adds an undone task with a date to your tasklist","lastModifiedDate":"2021-09-11"},{"lineNumber":66,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":67,"author":{"gitId":"twothicc"},"content":"### 3. [Add Deadline](#deadline---adds-deadline-task)","lastModifiedDate":"2021-09-11"},{"lineNumber":68,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":69,"author":{"gitId":"twothicc"},"content":"Adds an undone task with a date to your tasklist","lastModifiedDate":"2021-09-11"},{"lineNumber":70,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":71,"author":{"gitId":"twothicc"},"content":"### 4. [Add Period](#period---adds-period-task)","lastModifiedDate":"2021-09-11"},{"lineNumber":72,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":73,"author":{"gitId":"twothicc"},"content":"Adds an undone task with a start \u0026 end date  to your tasklist","lastModifiedDate":"2021-09-11"},{"lineNumber":74,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":75,"author":{"gitId":"twothicc"},"content":"### 5. [List](#list---lists-all-tasks)","lastModifiedDate":"2021-09-11"},{"lineNumber":76,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":77,"author":{"gitId":"twothicc"},"content":"Shows all tasks in your tasklist","lastModifiedDate":"2021-09-11"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":79,"author":{"gitId":"twothicc"},"content":"### 6. [Mark as Done](#done---marks-a-task-as-done)","lastModifiedDate":"2021-09-11"},{"lineNumber":80,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":81,"author":{"gitId":"twothicc"},"content":"Marks a task in your tasklist as done","lastModifiedDate":"2021-09-11"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":83,"author":{"gitId":"twothicc"},"content":"### 7. [Delete](#delete---deletes-a-task)","lastModifiedDate":"2021-09-11"},{"lineNumber":84,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":85,"author":{"gitId":"twothicc"},"content":"Deletes a task from your tasklist","lastModifiedDate":"2021-09-11"},{"lineNumber":86,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":87,"author":{"gitId":"twothicc"},"content":"### 8. [Find](#find---find-a-task-by-keyword)","lastModifiedDate":"2021-09-11"},{"lineNumber":88,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":89,"author":{"gitId":"twothicc"},"content":"Searches for tasks with descriptions matching a specific keyword","lastModifiedDate":"2021-09-11"},{"lineNumber":90,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":91,"author":{"gitId":"twothicc"},"content":"### 9. [Date](#date---find-a-task-by-date)","lastModifiedDate":"2021-09-11"},{"lineNumber":92,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":93,"author":{"gitId":"twothicc"},"content":"Searches for tasks with a specific date","lastModifiedDate":"2021-09-11"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":97,"author":{"gitId":"-"},"content":"## Usage","lastModifiedDate":"2019-07-29"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":99,"author":{"gitId":"twothicc"},"content":"Usage of features are grouped by starting command with examples provided","lastModifiedDate":"2021-09-11"},{"lineNumber":100,"author":{"gitId":"twothicc"},"content":"to supplement explanation","lastModifiedDate":"2021-09-11"},{"lineNumber":101,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":102,"author":{"gitId":"twothicc"},"content":"**Note**: Expected outcome refers to a sample Duke visual response ","lastModifiedDate":"2021-09-11"},{"lineNumber":103,"author":{"gitId":"twothicc"},"content":"to user via GUI. Total number of tasks or tasks shown **may differ** ","lastModifiedDate":"2021-09-11"},{"lineNumber":104,"author":{"gitId":"twothicc"},"content":"depending on your existing tasklist","lastModifiedDate":"2021-09-11"},{"lineNumber":105,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":106,"author":{"gitId":"twothicc"},"content":"**Note**: When referring to **dd/mm/yyyy** format, it is not a ","lastModifiedDate":"2021-09-11"},{"lineNumber":107,"author":{"gitId":"twothicc"},"content":"must to pad your input with zeroes. For instance, dates such ","lastModifiedDate":"2021-09-11"},{"lineNumber":108,"author":{"gitId":"twothicc"},"content":"as 01/01/2021, 1/1/2021, 1/01/2021 and 01/1/2021 are all acceptable","lastModifiedDate":"2021-09-11"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":110,"author":{"gitId":"twothicc"},"content":"---","lastModifiedDate":"2021-09-11"},{"lineNumber":111,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":112,"author":{"gitId":"twothicc"},"content":"### `todo` - Adds Todo task","lastModifiedDate":"2021-09-11"},{"lineNumber":113,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":114,"author":{"gitId":"twothicc"},"content":"Adds a Todo task to your tasklist","lastModifiedDate":"2021-09-11"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":116,"author":{"gitId":"twothicc"},"content":"Must Contain:","lastModifiedDate":"2021-09-11"},{"lineNumber":117,"author":{"gitId":"twothicc"},"content":"* Task description: Short description of your task","lastModifiedDate":"2021-09-11"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":119,"author":{"gitId":"-"},"content":"Example of usage: ","lastModifiedDate":"2019-07-29"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":121,"author":{"gitId":"twothicc"},"content":"`todo finish homework`","lastModifiedDate":"2021-09-11"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":123,"author":{"gitId":"-"},"content":"Expected outcome:","lastModifiedDate":"2019-07-29"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":125,"author":{"gitId":"twothicc"},"content":"```","lastModifiedDate":"2021-09-11"},{"lineNumber":126,"author":{"gitId":"twothicc"},"content":"Duke: Got it. I have added this task:","lastModifiedDate":"2021-09-11"},{"lineNumber":127,"author":{"gitId":"twothicc"},"content":"[T][ ] finish homework","lastModifiedDate":"2021-09-11"},{"lineNumber":128,"author":{"gitId":"twothicc"},"content":"Now you have 1 tasks in the list.","lastModifiedDate":"2021-09-11"},{"lineNumber":129,"author":{"gitId":"twothicc"},"content":"```","lastModifiedDate":"2021-09-11"},{"lineNumber":130,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":131,"author":{"gitId":"twothicc"},"content":"### `event` - Adds Event task","lastModifiedDate":"2021-09-11"},{"lineNumber":132,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":133,"author":{"gitId":"twothicc"},"content":"Adds an Event task to your tasklist","lastModifiedDate":"2021-09-11"},{"lineNumber":134,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":135,"author":{"gitId":"twothicc"},"content":"Must Contain:","lastModifiedDate":"2021-09-11"},{"lineNumber":136,"author":{"gitId":"twothicc"},"content":"* Task description: Short description of your task","lastModifiedDate":"2021-09-11"},{"lineNumber":137,"author":{"gitId":"twothicc"},"content":"* Descriptor: `/at` to separate the task description and date","lastModifiedDate":"2021-09-11"},{"lineNumber":138,"author":{"gitId":"twothicc"},"content":"* Date: date in dd/mm/yyyy format","lastModifiedDate":"2021-09-11"},{"lineNumber":139,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":140,"author":{"gitId":"twothicc"},"content":"Example of usage:","lastModifiedDate":"2021-09-11"},{"lineNumber":141,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":142,"author":{"gitId":"twothicc"},"content":"`event pick up daughter from school /at 01/01/2021`","lastModifiedDate":"2021-09-11"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":144,"author":{"gitId":"-"},"content":"Expected outcome:","lastModifiedDate":"2021-09-11"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":146,"author":{"gitId":"twothicc"},"content":"```","lastModifiedDate":"2021-09-11"},{"lineNumber":147,"author":{"gitId":"twothicc"},"content":"Duke: Got it. I have added this task:","lastModifiedDate":"2021-09-11"},{"lineNumber":148,"author":{"gitId":"twothicc"},"content":"[E][ ] pick up daughter from school (at: 1 January 2021)","lastModifiedDate":"2021-09-11"},{"lineNumber":149,"author":{"gitId":"twothicc"},"content":"Now you have 1 tasks in the list. ","lastModifiedDate":"2021-09-11"},{"lineNumber":150,"author":{"gitId":"twothicc"},"content":"```","lastModifiedDate":"2021-09-11"},{"lineNumber":151,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":152,"author":{"gitId":"twothicc"},"content":"### `deadline` - Adds Deadline task","lastModifiedDate":"2021-09-11"},{"lineNumber":153,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":154,"author":{"gitId":"twothicc"},"content":"Adds a Deadline task to your tasklist","lastModifiedDate":"2021-09-11"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":156,"author":{"gitId":"twothicc"},"content":"Must Contain:","lastModifiedDate":"2021-09-11"},{"lineNumber":157,"author":{"gitId":"twothicc"},"content":"* Task description: Short description of your task","lastModifiedDate":"2021-09-11"},{"lineNumber":158,"author":{"gitId":"twothicc"},"content":"* Descriptor: `/by` to separate the task description and date","lastModifiedDate":"2021-09-11"},{"lineNumber":159,"author":{"gitId":"twothicc"},"content":"* Date: date in dd/mm/yyyy format","lastModifiedDate":"2021-09-11"},{"lineNumber":160,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":161,"author":{"gitId":"twothicc"},"content":"Example of usage:","lastModifiedDate":"2021-09-11"},{"lineNumber":162,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":163,"author":{"gitId":"twothicc"},"content":"`deadline submit assignment /by 01/01/2021`","lastModifiedDate":"2021-09-11"},{"lineNumber":164,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":165,"author":{"gitId":"twothicc"},"content":"Expected outcome:","lastModifiedDate":"2021-09-11"},{"lineNumber":166,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":167,"author":{"gitId":"twothicc"},"content":"```","lastModifiedDate":"2021-09-11"},{"lineNumber":168,"author":{"gitId":"twothicc"},"content":"Duke: Got it. I have added this task:","lastModifiedDate":"2021-09-11"},{"lineNumber":169,"author":{"gitId":"twothicc"},"content":"[D][ ] submit assignment (by: 1 January 2021)","lastModifiedDate":"2021-09-11"},{"lineNumber":170,"author":{"gitId":"twothicc"},"content":"Now you have 1 tasks in the list.","lastModifiedDate":"2021-09-11"},{"lineNumber":171,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-09-11"},{"lineNumber":172,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":173,"author":{"gitId":"twothicc"},"content":"### `period` - Adds Period task","lastModifiedDate":"2021-09-11"},{"lineNumber":174,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":175,"author":{"gitId":"twothicc"},"content":"Adds a Period task to your tasklist","lastModifiedDate":"2021-09-11"},{"lineNumber":176,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":177,"author":{"gitId":"twothicc"},"content":"Must Contain:","lastModifiedDate":"2021-09-11"},{"lineNumber":178,"author":{"gitId":"twothicc"},"content":"* Task description: Short description of your task","lastModifiedDate":"2021-09-11"},{"lineNumber":179,"author":{"gitId":"twothicc"},"content":"* Descriptor: `/within` to separate the task description and date period","lastModifiedDate":"2021-09-11"},{"lineNumber":180,"author":{"gitId":"twothicc"},"content":"* Date period: start date and end date in dd/mm/yyyy format ","lastModifiedDate":"2021-09-11"},{"lineNumber":181,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":182,"author":{"gitId":"twothicc"},"content":"**Note**: Date period must be valid in the sense that the start date","lastModifiedDate":"2021-09-11"},{"lineNumber":183,"author":{"gitId":"twothicc"},"content":"must be less than the end date","lastModifiedDate":"2021-09-11"},{"lineNumber":184,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":185,"author":{"gitId":"twothicc"},"content":"Example of usage:","lastModifiedDate":"2021-09-11"},{"lineNumber":186,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":187,"author":{"gitId":"twothicc"},"content":"`period learn java /within 01/01/2021 02/02/2021`","lastModifiedDate":"2021-09-11"},{"lineNumber":188,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":189,"author":{"gitId":"twothicc"},"content":"Expected outcome:","lastModifiedDate":"2021-09-11"},{"lineNumber":190,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":191,"author":{"gitId":"twothicc"},"content":"```","lastModifiedDate":"2021-09-11"},{"lineNumber":192,"author":{"gitId":"twothicc"},"content":"Duke: Got it. I have added this task:","lastModifiedDate":"2021-09-11"},{"lineNumber":193,"author":{"gitId":"twothicc"},"content":"[P][ ] learn java (from: 1 January 2021 to: 2 February 2021)","lastModifiedDate":"2021-09-11"},{"lineNumber":194,"author":{"gitId":"twothicc"},"content":"Now you have 1 tasks in the list.","lastModifiedDate":"2021-09-11"},{"lineNumber":195,"author":{"gitId":"twothicc"},"content":"```","lastModifiedDate":"2021-09-11"},{"lineNumber":196,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":197,"author":{"gitId":"twothicc"},"content":"### `list` - Lists all tasks","lastModifiedDate":"2021-09-11"},{"lineNumber":198,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":199,"author":{"gitId":"twothicc"},"content":"Lists all existing tasks in your tasklist","lastModifiedDate":"2021-09-11"},{"lineNumber":200,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":201,"author":{"gitId":"twothicc"},"content":"Example of usage:","lastModifiedDate":"2021-09-11"},{"lineNumber":202,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":203,"author":{"gitId":"twothicc"},"content":"`list`","lastModifiedDate":"2021-09-11"},{"lineNumber":204,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":205,"author":{"gitId":"twothicc"},"content":"Expected outcome:","lastModifiedDate":"2021-09-11"},{"lineNumber":206,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":207,"author":{"gitId":"twothicc"},"content":"```","lastModifiedDate":"2021-09-11"},{"lineNumber":208,"author":{"gitId":"twothicc"},"content":"Duke: Here are the tasks in your list:","lastModifiedDate":"2021-09-11"},{"lineNumber":209,"author":{"gitId":"twothicc"},"content":"1.[T][ ] finish homework","lastModifiedDate":"2021-09-11"},{"lineNumber":210,"author":{"gitId":"twothicc"},"content":"2.[E][ ] pick up daughter from school (at: 1 January 2020)","lastModifiedDate":"2021-09-11"},{"lineNumber":211,"author":{"gitId":"twothicc"},"content":"3.[D][ ] submit assignment (by: 1 January 2021)","lastModifiedDate":"2021-09-11"},{"lineNumber":212,"author":{"gitId":"twothicc"},"content":"4.[P][ ] learn java (from: 1 January 2021 to: 2 February 2021)","lastModifiedDate":"2021-09-11"},{"lineNumber":213,"author":{"gitId":"twothicc"},"content":"```","lastModifiedDate":"2021-09-11"},{"lineNumber":214,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":215,"author":{"gitId":"twothicc"},"content":"### `done` - Marks a task as done","lastModifiedDate":"2021-09-11"},{"lineNumber":216,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":217,"author":{"gitId":"twothicc"},"content":"Marks task at an index in your tasklist as done","lastModifiedDate":"2021-09-11"},{"lineNumber":218,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":219,"author":{"gitId":"twothicc"},"content":"Must Contain:","lastModifiedDate":"2021-09-11"},{"lineNumber":220,"author":{"gitId":"twothicc"},"content":"* Index: Index is 1-based (Starting from 1) and must be an integer","lastModifiedDate":"2021-09-11"},{"lineNumber":221,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":222,"author":{"gitId":"twothicc"},"content":"Example of usage:","lastModifiedDate":"2021-09-11"},{"lineNumber":223,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":224,"author":{"gitId":"twothicc"},"content":"`done 1`","lastModifiedDate":"2021-09-11"},{"lineNumber":225,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":226,"author":{"gitId":"twothicc"},"content":"Expected outcome:","lastModifiedDate":"2021-09-11"},{"lineNumber":227,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":228,"author":{"gitId":"twothicc"},"content":"```","lastModifiedDate":"2021-09-11"},{"lineNumber":229,"author":{"gitId":"twothicc"},"content":"Duke: Nice! I\u0027ve marked this task as done: ","lastModifiedDate":"2021-09-11"},{"lineNumber":230,"author":{"gitId":"twothicc"},"content":"[T][X] finish homework","lastModifiedDate":"2021-09-11"},{"lineNumber":231,"author":{"gitId":"twothicc"},"content":"```","lastModifiedDate":"2021-09-11"},{"lineNumber":232,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":233,"author":{"gitId":"twothicc"},"content":"### `delete` - Deletes a task","lastModifiedDate":"2021-09-11"},{"lineNumber":234,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":235,"author":{"gitId":"twothicc"},"content":"Deletes a task from your tasklist","lastModifiedDate":"2021-09-11"},{"lineNumber":236,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":237,"author":{"gitId":"twothicc"},"content":"Must Contain:","lastModifiedDate":"2021-09-11"},{"lineNumber":238,"author":{"gitId":"twothicc"},"content":"* Index: Index is 1-based (Starting from 1) and must be an integer","lastModifiedDate":"2021-09-11"},{"lineNumber":239,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":240,"author":{"gitId":"twothicc"},"content":"Example of usage:","lastModifiedDate":"2021-09-11"},{"lineNumber":241,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":242,"author":{"gitId":"twothicc"},"content":"`delete 1`","lastModifiedDate":"2021-09-11"},{"lineNumber":243,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":244,"author":{"gitId":"twothicc"},"content":"Expected outcome:","lastModifiedDate":"2021-09-11"},{"lineNumber":245,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":246,"author":{"gitId":"twothicc"},"content":"```","lastModifiedDate":"2021-09-11"},{"lineNumber":247,"author":{"gitId":"twothicc"},"content":"Duke: Noted. I\u0027ve removed this task:","lastModifiedDate":"2021-09-11"},{"lineNumber":248,"author":{"gitId":"twothicc"},"content":"[T][X] finish homework","lastModifiedDate":"2021-09-11"},{"lineNumber":249,"author":{"gitId":"twothicc"},"content":"Now you have 3 tasks in the list.","lastModifiedDate":"2021-09-11"},{"lineNumber":250,"author":{"gitId":"twothicc"},"content":"```","lastModifiedDate":"2021-09-11"},{"lineNumber":251,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":252,"author":{"gitId":"twothicc"},"content":"### `find` - Find a task by keyword","lastModifiedDate":"2021-09-11"},{"lineNumber":253,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":254,"author":{"gitId":"twothicc"},"content":"Searches for tasks with task descriptions that matches a specific keyword","lastModifiedDate":"2021-09-11"},{"lineNumber":255,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":256,"author":{"gitId":"twothicc"},"content":"Must Contain:","lastModifiedDate":"2021-09-11"},{"lineNumber":257,"author":{"gitId":"twothicc"},"content":"* Keyword: Single keyword to be searched for","lastModifiedDate":"2021-09-11"},{"lineNumber":258,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":259,"author":{"gitId":"twothicc"},"content":"**Note**: Space in keyword is allowed, such as \"finish homework\".","lastModifiedDate":"2021-09-11"},{"lineNumber":260,"author":{"gitId":"twothicc"},"content":"You may even search for just a space like so, \" \"","lastModifiedDate":"2021-09-11"},{"lineNumber":261,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":262,"author":{"gitId":"twothicc"},"content":"**Note**: Index shown for each matching task is its actual index","lastModifiedDate":"2021-09-11"},{"lineNumber":263,"author":{"gitId":"twothicc"},"content":"in your tasklist","lastModifiedDate":"2021-09-11"},{"lineNumber":264,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":265,"author":{"gitId":"twothicc"},"content":"Example of usage:","lastModifiedDate":"2021-09-11"},{"lineNumber":266,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":267,"author":{"gitId":"twothicc"},"content":"`find finish homework`","lastModifiedDate":"2021-09-11"},{"lineNumber":268,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":269,"author":{"gitId":"twothicc"},"content":"Expected outcome:","lastModifiedDate":"2021-09-11"},{"lineNumber":270,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":271,"author":{"gitId":"twothicc"},"content":"```","lastModifiedDate":"2021-09-11"},{"lineNumber":272,"author":{"gitId":"twothicc"},"content":"Duke: Here are the matching tasks in your list:","lastModifiedDate":"2021-09-11"},{"lineNumber":273,"author":{"gitId":"twothicc"},"content":"5.[E][ ] finish homework (at: 1 January 2020)","lastModifiedDate":"2021-09-11"},{"lineNumber":274,"author":{"gitId":"twothicc"},"content":"A total of 1 tasks in your list match your search keyword, finish homework.","lastModifiedDate":"2021-09-11"},{"lineNumber":275,"author":{"gitId":"twothicc"},"content":"```","lastModifiedDate":"2021-09-11"},{"lineNumber":276,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":277,"author":{"gitId":"twothicc"},"content":"### `date` - Find a task by date","lastModifiedDate":"2021-09-11"},{"lineNumber":278,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":279,"author":{"gitId":"twothicc"},"content":"Searches for tasks with date or date period that either matches","lastModifiedDate":"2021-09-11"},{"lineNumber":280,"author":{"gitId":"twothicc"},"content":"or contains a specific search date","lastModifiedDate":"2021-09-11"},{"lineNumber":281,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":282,"author":{"gitId":"twothicc"},"content":"Must Contain:","lastModifiedDate":"2021-09-11"},{"lineNumber":283,"author":{"gitId":"twothicc"},"content":"* Date: date to be searched for in dd/mm/yyyy format","lastModifiedDate":"2021-09-11"},{"lineNumber":284,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":285,"author":{"gitId":"twothicc"},"content":"**Note**: Index shown for each matching task is its actual index ","lastModifiedDate":"2021-09-11"},{"lineNumber":286,"author":{"gitId":"twothicc"},"content":"in your tasklist","lastModifiedDate":"2021-09-11"},{"lineNumber":287,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":288,"author":{"gitId":"twothicc"},"content":"Example of usage:","lastModifiedDate":"2021-09-11"},{"lineNumber":289,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":290,"author":{"gitId":"twothicc"},"content":"`date 01/01/2020`","lastModifiedDate":"2021-09-11"},{"lineNumber":291,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":292,"author":{"gitId":"twothicc"},"content":"Expected outcome:","lastModifiedDate":"2021-09-11"},{"lineNumber":293,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":294,"author":{"gitId":"twothicc"},"content":"```","lastModifiedDate":"2021-09-11"},{"lineNumber":295,"author":{"gitId":"twothicc"},"content":"Duke: Here are the Deadlines, Events or Periods that fall on 1 January 2020:","lastModifiedDate":"2021-09-11"},{"lineNumber":296,"author":{"gitId":"twothicc"},"content":"1.[E][ ] have fun (at: 1 January 2020)","lastModifiedDate":"2021-09-11"},{"lineNumber":297,"author":{"gitId":"twothicc"},"content":"3.[P][ ] finish assignment (from: 1 January 2020 to: 1 February 2020)","lastModifiedDate":"2021-09-11"},{"lineNumber":298,"author":{"gitId":"twothicc"},"content":"4.[E][ ] finish homework (at: 1 January 2020)","lastModifiedDate":"2021-09-11"},{"lineNumber":299,"author":{"gitId":"twothicc"},"content":"A total of 3 tasks (0 deadlines, 2 events and 1 periods) fall on 1 January 2020","lastModifiedDate":"2021-09-11"},{"lineNumber":300,"author":{"gitId":"twothicc"},"content":"```","lastModifiedDate":"2021-09-11"},{"lineNumber":301,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":302,"author":{"gitId":"twothicc"},"content":"### `bye` - Exit Duke","lastModifiedDate":"2021-09-11"},{"lineNumber":303,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":304,"author":{"gitId":"twothicc"},"content":"Exits Duke application after a delay","lastModifiedDate":"2021-09-11"},{"lineNumber":305,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":306,"author":{"gitId":"twothicc"},"content":"Example of usage:","lastModifiedDate":"2021-09-11"},{"lineNumber":307,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":308,"author":{"gitId":"twothicc"},"content":"`bye`","lastModifiedDate":"2021-09-11"},{"lineNumber":309,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":310,"author":{"gitId":"twothicc"},"content":"Expected outcome:","lastModifiedDate":"2021-09-11"},{"lineNumber":311,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":312,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":313,"author":{"gitId":"twothicc"},"content":"Duke: Bye. Hope to see you again soon!","lastModifiedDate":"2021-09-11"},{"lineNumber":314,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"}],"authorContributionMap":{"twothicc":287,"-":27}},{"path":"src/main/java/duke/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"import java.util.Collections;","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"import javafx.scene.Node;","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"import javafx.scene.paint.Color;","lastModifiedDate":"2021-09-03"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"/**","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"twothicc"},"content":" * containing text from the speaker.","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"twothicc"},"content":" */","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"twothicc"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":25,"author":{"gitId":"twothicc"},"content":"    private static final Ui ui \u003d new Ui();","lastModifiedDate":"2021-09-01"},{"lineNumber":26,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":27,"author":{"gitId":"twothicc"},"content":"    @FXML","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"twothicc"},"content":"    private Label dialog;","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"twothicc"},"content":"    @FXML","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"twothicc"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":33,"author":{"gitId":"twothicc"},"content":"     * Constructor for DialogBox.","lastModifiedDate":"2021-09-01"},{"lineNumber":34,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":35,"author":{"gitId":"twothicc"},"content":"     * @param text Text String to be displayed in DialogBox.","lastModifiedDate":"2021-09-01"},{"lineNumber":36,"author":{"gitId":"twothicc"},"content":"     * @param img Image to be displayed alongside text in DialogBox.","lastModifiedDate":"2021-09-01"},{"lineNumber":37,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":38,"author":{"gitId":"twothicc"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2021-08-29"},{"lineNumber":39,"author":{"gitId":"twothicc"},"content":"        try {","lastModifiedDate":"2021-08-29"},{"lineNumber":40,"author":{"gitId":"twothicc"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2021-08-29"},{"lineNumber":41,"author":{"gitId":"twothicc"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2021-08-29"},{"lineNumber":42,"author":{"gitId":"twothicc"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2021-08-29"},{"lineNumber":43,"author":{"gitId":"twothicc"},"content":"            fxmlLoader.load();","lastModifiedDate":"2021-08-29"},{"lineNumber":44,"author":{"gitId":"twothicc"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-29"},{"lineNumber":45,"author":{"gitId":"twothicc"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-29"},{"lineNumber":46,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":47,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":48,"author":{"gitId":"twothicc"},"content":"        dialog.setText(text);","lastModifiedDate":"2021-08-29"},{"lineNumber":49,"author":{"gitId":"twothicc"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2021-08-29"},{"lineNumber":50,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":51,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":52,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":53,"author":{"gitId":"twothicc"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2021-08-29"},{"lineNumber":54,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":55,"author":{"gitId":"twothicc"},"content":"    private void flip() {","lastModifiedDate":"2021-08-29"},{"lineNumber":56,"author":{"gitId":"twothicc"},"content":"        assert this.getAlignment() \u003d\u003d Pos.TOP_RIGHT","lastModifiedDate":"2021-09-03"},{"lineNumber":57,"author":{"gitId":"twothicc"},"content":"                : \"flip should only be used on a DialogBox that is aligned to TOP_RIGHT\";","lastModifiedDate":"2021-09-03"},{"lineNumber":58,"author":{"gitId":"twothicc"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2021-08-29"},{"lineNumber":59,"author":{"gitId":"twothicc"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2021-08-29"},{"lineNumber":60,"author":{"gitId":"twothicc"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2021-08-29"},{"lineNumber":61,"author":{"gitId":"twothicc"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2021-08-29"},{"lineNumber":62,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":63,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":64,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":65,"author":{"gitId":"twothicc"},"content":"     * Returns a DialogBox meant to echo User input.","lastModifiedDate":"2021-09-10"},{"lineNumber":66,"author":{"gitId":"twothicc"},"content":"     * The returned DialogBox will be anchored to the right of its container.","lastModifiedDate":"2021-09-01"},{"lineNumber":67,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":68,"author":{"gitId":"twothicc"},"content":"     * @param text Text String to be displayed in DialogBox.","lastModifiedDate":"2021-09-01"},{"lineNumber":69,"author":{"gitId":"twothicc"},"content":"     * @param img Image to be displayed alongside text in DialogBox.","lastModifiedDate":"2021-09-01"},{"lineNumber":70,"author":{"gitId":"twothicc"},"content":"     * @return DialogBox containing specified text and image.","lastModifiedDate":"2021-09-01"},{"lineNumber":71,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":72,"author":{"gitId":"twothicc"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2021-08-29"},{"lineNumber":73,"author":{"gitId":"twothicc"},"content":"        String modifiedText \u003d \"You: \" + text;","lastModifiedDate":"2021-09-10"},{"lineNumber":74,"author":{"gitId":"twothicc"},"content":"        DialogBox db \u003d new DialogBox(modifiedText, img);","lastModifiedDate":"2021-09-10"},{"lineNumber":75,"author":{"gitId":"twothicc"},"content":"        db.dialog.setStyle(db.dialog.getStyle() + \" -fx-background-color: Peachpuff;\");","lastModifiedDate":"2021-09-10"},{"lineNumber":76,"author":{"gitId":"twothicc"},"content":"        return db;","lastModifiedDate":"2021-09-03"},{"lineNumber":77,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":78,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":79,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":80,"author":{"gitId":"twothicc"},"content":"     * Returns a flipped DialogBox meant to display Duke response.","lastModifiedDate":"2021-09-10"},{"lineNumber":81,"author":{"gitId":"twothicc"},"content":"     * The returned DialogBox will be anchored to the left of its container.","lastModifiedDate":"2021-09-01"},{"lineNumber":82,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":83,"author":{"gitId":"twothicc"},"content":"     * @param text Text String to be displayed in DialogBox.","lastModifiedDate":"2021-09-01"},{"lineNumber":84,"author":{"gitId":"twothicc"},"content":"     * @param img Image to be displayed alongside text in DialogBox.","lastModifiedDate":"2021-09-01"},{"lineNumber":85,"author":{"gitId":"twothicc"},"content":"     * @return Flipped DialogBox containing specified text and image.","lastModifiedDate":"2021-09-01"},{"lineNumber":86,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":87,"author":{"gitId":"twothicc"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2021-08-29"},{"lineNumber":88,"author":{"gitId":"twothicc"},"content":"        String modifiedText \u003d \"Duke: \" + text;","lastModifiedDate":"2021-09-10"},{"lineNumber":89,"author":{"gitId":"twothicc"},"content":"        DialogBox db \u003d new DialogBox(modifiedText, img);","lastModifiedDate":"2021-09-10"},{"lineNumber":90,"author":{"gitId":"twothicc"},"content":"        db.dialog.setStyle(db.dialog.getStyle() + \" -fx-background-color: Seashell;\");","lastModifiedDate":"2021-09-10"},{"lineNumber":91,"author":{"gitId":"twothicc"},"content":"        db.flip();","lastModifiedDate":"2021-09-10"},{"lineNumber":92,"author":{"gitId":"twothicc"},"content":"        return db;","lastModifiedDate":"2021-09-10"},{"lineNumber":93,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-09-10"},{"lineNumber":94,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":95,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-09-10"},{"lineNumber":96,"author":{"gitId":"twothicc"},"content":"     * Returns a flipped DialogBox meant to display error messages.","lastModifiedDate":"2021-09-10"},{"lineNumber":97,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-09-10"},{"lineNumber":98,"author":{"gitId":"twothicc"},"content":"     * @param text Text String to be displayed in DialogBox.","lastModifiedDate":"2021-09-10"},{"lineNumber":99,"author":{"gitId":"twothicc"},"content":"     * @param img Image to be displayed alongside text in DialogBox.","lastModifiedDate":"2021-09-10"},{"lineNumber":100,"author":{"gitId":"twothicc"},"content":"     * @return Flipped DialogBox containing an image and error message.","lastModifiedDate":"2021-09-10"},{"lineNumber":101,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-09-10"},{"lineNumber":102,"author":{"gitId":"twothicc"},"content":"    public static DialogBox getErrorDialog(String text, Image img) {","lastModifiedDate":"2021-09-10"},{"lineNumber":103,"author":{"gitId":"twothicc"},"content":"        String modifiedText \u003d \"Error: \" + text;","lastModifiedDate":"2021-09-10"},{"lineNumber":104,"author":{"gitId":"twothicc"},"content":"        DialogBox db \u003d new DialogBox(modifiedText, img);","lastModifiedDate":"2021-09-10"},{"lineNumber":105,"author":{"gitId":"twothicc"},"content":"        db.dialog.setStyle(db.dialog.getStyle() + \" -fx-background-color: Salmon;\");","lastModifiedDate":"2021-09-10"},{"lineNumber":106,"author":{"gitId":"twothicc"},"content":"        db.dialog.setTextFill(Color.WHITE);","lastModifiedDate":"2021-09-10"},{"lineNumber":107,"author":{"gitId":"twothicc"},"content":"        db.flip();","lastModifiedDate":"2021-08-29"},{"lineNumber":108,"author":{"gitId":"twothicc"},"content":"        return db;","lastModifiedDate":"2021-08-29"},{"lineNumber":109,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":110,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":111,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":112,"author":{"gitId":"twothicc"},"content":"     * Returns a DialogBox for greeting user.","lastModifiedDate":"2021-09-01"},{"lineNumber":113,"author":{"gitId":"twothicc"},"content":"     * The returned DialogBox contains the standard welcome message.","lastModifiedDate":"2021-09-01"},{"lineNumber":114,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":115,"author":{"gitId":"twothicc"},"content":"     * @param img Image to be displayed alongside welcome message in DialogBox.","lastModifiedDate":"2021-09-01"},{"lineNumber":116,"author":{"gitId":"twothicc"},"content":"     * @return DialogBox containing welcome message and specified image.","lastModifiedDate":"2021-09-01"},{"lineNumber":117,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":118,"author":{"gitId":"twothicc"},"content":"    public static DialogBox getDukeWelcome(Image img) {","lastModifiedDate":"2021-08-29"},{"lineNumber":119,"author":{"gitId":"twothicc"},"content":"        return getDukeDialog(ui.getWelcomeMessage(), img);","lastModifiedDate":"2021-09-03"},{"lineNumber":120,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":121,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":122,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":123,"author":{"gitId":"twothicc"},"content":"     * Returns a DialogBox for saying goodbye to the user.","lastModifiedDate":"2021-09-01"},{"lineNumber":124,"author":{"gitId":"twothicc"},"content":"     * The returned DialogBox contains the standard goodbye message.","lastModifiedDate":"2021-09-01"},{"lineNumber":125,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":126,"author":{"gitId":"twothicc"},"content":"     * @param img Image to be displayed alongside goodbye message in DialogBox.","lastModifiedDate":"2021-09-01"},{"lineNumber":127,"author":{"gitId":"twothicc"},"content":"     * @return DialogBox containing goodbye message and specified image.","lastModifiedDate":"2021-09-01"},{"lineNumber":128,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":129,"author":{"gitId":"twothicc"},"content":"    public static DialogBox getDukeBye(Image img) {","lastModifiedDate":"2021-08-29"},{"lineNumber":130,"author":{"gitId":"twothicc"},"content":"        return getDukeDialog(ui.getGoodbyeMessage(), img);","lastModifiedDate":"2021-09-03"},{"lineNumber":131,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":132,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":133,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"twothicc":133}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"import duke.Ui.UserCommands;","lastModifiedDate":"2021-09-04"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"import duke.command.Command;","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-09-04"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"/**","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":" * Handles initialization of storage and tasks and running of Duke chatbot.","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":" */","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"    /** Variables related to initializing Duke */","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"    private static final String SAVE_FILENAME \u003d \"dukeSave.txt\";","lastModifiedDate":"2021-08-20"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"    private final Storage storage;","lastModifiedDate":"2021-08-27"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"    private TaskList tasks;","lastModifiedDate":"2021-08-20"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"    private final Ui ui;","lastModifiedDate":"2021-08-27"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"     * Default constructor for Duke.","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":"     * Creates a Duke object with filename dukeSave.txt.","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"twothicc"},"content":"    public Duke() {","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"twothicc"},"content":"        this(SAVE_FILENAME);","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"twothicc"},"content":"     * Constructor for Duke.","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"twothicc"},"content":"     * Creates a Duke with a Storage and an Ui.","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"twothicc"},"content":"     * Storage will read tasks from specified file to TaskList.","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"twothicc"},"content":"     * If there are errors reading file, TaskList will be empty by default.","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"twothicc"},"content":"     * @param fileName Filename that Storage will save tasks to and read tasks from.","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"twothicc"},"content":"    public Duke(String fileName) {","lastModifiedDate":"2021-08-20"},{"lineNumber":34,"author":{"gitId":"twothicc"},"content":"        this.storage \u003d new Storage(fileName);","lastModifiedDate":"2021-08-27"},{"lineNumber":35,"author":{"gitId":"twothicc"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2021-08-27"},{"lineNumber":36,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":37,"author":{"gitId":"twothicc"},"content":"        // Read tasks from save file.","lastModifiedDate":"2021-08-20"},{"lineNumber":38,"author":{"gitId":"twothicc"},"content":"        try {","lastModifiedDate":"2021-08-20"},{"lineNumber":39,"author":{"gitId":"twothicc"},"content":"            tasks \u003d this.storage.readTasksFromData();","lastModifiedDate":"2021-08-27"},{"lineNumber":40,"author":{"gitId":"twothicc"},"content":"        } catch (DukeException dukeException) {","lastModifiedDate":"2021-08-20"},{"lineNumber":41,"author":{"gitId":"twothicc"},"content":"            System.out.println(dukeException);","lastModifiedDate":"2021-08-20"},{"lineNumber":42,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":43,"author":{"gitId":"twothicc"},"content":"            // If failed to read tasks from save, initialize a new Task ArrayList.","lastModifiedDate":"2021-09-03"},{"lineNumber":44,"author":{"gitId":"twothicc"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2021-08-21"},{"lineNumber":45,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-14"},{"lineNumber":46,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":47,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":48,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":49,"author":{"gitId":"twothicc"},"content":"     * Returns Duke\u0027s string output from executing input String.","lastModifiedDate":"2021-08-29"},{"lineNumber":50,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":51,"author":{"gitId":"twothicc"},"content":"     * @param input User\u0027s input String.","lastModifiedDate":"2021-08-29"},{"lineNumber":52,"author":{"gitId":"twothicc"},"content":"     * @return DukeResponse containing details on Duke\u0027s output from executing input String.","lastModifiedDate":"2021-09-10"},{"lineNumber":53,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":54,"author":{"gitId":"twothicc"},"content":"    public DukeResponse getResponse(String input) {","lastModifiedDate":"2021-09-10"},{"lineNumber":55,"author":{"gitId":"twothicc"},"content":"        if (!input.equals(UserCommands.BYE.getCommand())) {","lastModifiedDate":"2021-09-04"},{"lineNumber":56,"author":{"gitId":"twothicc"},"content":"            Command command \u003d Parser.parse(input);","lastModifiedDate":"2021-08-29"},{"lineNumber":57,"author":{"gitId":"twothicc"},"content":"            return command.execute(this.tasks, this.ui, this.storage);","lastModifiedDate":"2021-08-29"},{"lineNumber":58,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":59,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":60,"author":{"gitId":"twothicc"},"content":"        return new DukeResponse(this.ui.getGoodbyeMessage(), false);","lastModifiedDate":"2021-09-10"},{"lineNumber":61,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":62,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":63,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":64,"author":{"gitId":"twothicc"},"content":"     * Returns Ui object specific to this Duke.","lastModifiedDate":"2021-08-29"},{"lineNumber":65,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":66,"author":{"gitId":"twothicc"},"content":"     * @return Ui object specific to this Duke.","lastModifiedDate":"2021-08-29"},{"lineNumber":67,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":68,"author":{"gitId":"twothicc"},"content":"    public Ui getUi() {","lastModifiedDate":"2021-08-29"},{"lineNumber":69,"author":{"gitId":"twothicc"},"content":"        return ui;","lastModifiedDate":"2021-08-29"},{"lineNumber":70,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":71,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"twothicc":70,"-":2}},{"path":"src/main/java/duke/DukeLauncher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"public class DukeLauncher {","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"     * Launches Duke application.","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"     * @param args commandline arguments.","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"        // Launches standalone Duke application by calling start method in Main.class.","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"        // Does not return until application has exited.","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"twothicc":17}},{"path":"src/main/java/duke/DukeResponse.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke;","lastModifiedDate":"2021-09-10"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"/**","lastModifiedDate":"2021-09-10"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":" * Represents and describes a response from Duke.","lastModifiedDate":"2021-09-10"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":" */","lastModifiedDate":"2021-09-10"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"public class DukeResponse {","lastModifiedDate":"2021-09-10"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"    private boolean isException;","lastModifiedDate":"2021-09-10"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"    private String response;","lastModifiedDate":"2021-09-10"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-09-10"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"     * Constructor for DukeResponse.","lastModifiedDate":"2021-09-10"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-09-10"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"     * @param response Response String.","lastModifiedDate":"2021-09-10"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"     * @param isException Boolean indicating whether response is indicating an error or not.","lastModifiedDate":"2021-09-10"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-09-10"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"    public DukeResponse(String response, Boolean isException) {","lastModifiedDate":"2021-09-10"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"        this.isException \u003d isException;","lastModifiedDate":"2021-09-10"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"        this.response \u003d response;","lastModifiedDate":"2021-09-10"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-09-10"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":21,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-09-10"},{"lineNumber":22,"author":{"gitId":"twothicc"},"content":"     * Returns a boolean indicating whether this DukeResponse contains a response that indicates an error.","lastModifiedDate":"2021-09-10"},{"lineNumber":23,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-09-10"},{"lineNumber":24,"author":{"gitId":"twothicc"},"content":"     * @return Boolean indicating whether this DukeResponse contains a response that indicates an error.","lastModifiedDate":"2021-09-10"},{"lineNumber":25,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-09-10"},{"lineNumber":26,"author":{"gitId":"twothicc"},"content":"    public boolean isError() {","lastModifiedDate":"2021-09-10"},{"lineNumber":27,"author":{"gitId":"twothicc"},"content":"        return this.isException;","lastModifiedDate":"2021-09-10"},{"lineNumber":28,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-09-10"},{"lineNumber":29,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":30,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-09-10"},{"lineNumber":31,"author":{"gitId":"twothicc"},"content":"     * Returns the response string contained within this DukeResponse.","lastModifiedDate":"2021-09-10"},{"lineNumber":32,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-09-10"},{"lineNumber":33,"author":{"gitId":"twothicc"},"content":"     * @return Response string contained within this DukeResponse.","lastModifiedDate":"2021-09-10"},{"lineNumber":34,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-09-10"},{"lineNumber":35,"author":{"gitId":"twothicc"},"content":"    public String getResponse() {","lastModifiedDate":"2021-09-10"},{"lineNumber":36,"author":{"gitId":"twothicc"},"content":"        return response;","lastModifiedDate":"2021-09-10"},{"lineNumber":37,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-09-10"},{"lineNumber":38,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":39,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-09-10"},{"lineNumber":40,"author":{"gitId":"twothicc"},"content":"     * Indicates whether another object is equals to this DukeResponse.","lastModifiedDate":"2021-09-10"},{"lineNumber":41,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-09-10"},{"lineNumber":42,"author":{"gitId":"twothicc"},"content":"     * @param obj Other object to be compared to.","lastModifiedDate":"2021-09-10"},{"lineNumber":43,"author":{"gitId":"twothicc"},"content":"     * @return A boolean indicating whether the other object is equal to this DukeResponse.","lastModifiedDate":"2021-09-10"},{"lineNumber":44,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-09-10"},{"lineNumber":45,"author":{"gitId":"twothicc"},"content":"    @Override","lastModifiedDate":"2021-09-10"},{"lineNumber":46,"author":{"gitId":"twothicc"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2021-09-10"},{"lineNumber":47,"author":{"gitId":"twothicc"},"content":"        if (obj instanceof DukeResponse) {","lastModifiedDate":"2021-09-10"},{"lineNumber":48,"author":{"gitId":"twothicc"},"content":"            DukeResponse other \u003d (DukeResponse) obj;","lastModifiedDate":"2021-09-10"},{"lineNumber":49,"author":{"gitId":"twothicc"},"content":"            boolean isResponseSame \u003d this.response.equals(other.response);","lastModifiedDate":"2021-09-10"},{"lineNumber":50,"author":{"gitId":"twothicc"},"content":"            boolean isExceptionSame \u003d this.isException \u003d\u003d other.isException;","lastModifiedDate":"2021-09-10"},{"lineNumber":51,"author":{"gitId":"twothicc"},"content":"            return isResponseSame \u0026\u0026 isExceptionSame;","lastModifiedDate":"2021-09-10"},{"lineNumber":52,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-09-10"},{"lineNumber":53,"author":{"gitId":"twothicc"},"content":"        return false;","lastModifiedDate":"2021-09-10"},{"lineNumber":54,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-09-10"},{"lineNumber":55,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-09-10"}],"authorContributionMap":{"twothicc":55}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"/**","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":" */","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"public class Main extends Application {","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"    private Duke duke \u003d new Duke();","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"     * Starts Duke application.","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":"     * @param stage Stage object meant to be top level container for the Duke application.","lastModifiedDate":"2021-09-01"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":21,"author":{"gitId":"twothicc"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"twothicc"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"twothicc"},"content":"        try {","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"twothicc"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"twothicc"},"content":"            fxmlLoader.setRoot(stage);","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"twothicc"},"content":"            fxmlLoader.setController(new MainWindow());","lastModifiedDate":"2021-08-29"},{"lineNumber":27,"author":{"gitId":"twothicc"},"content":"            stage \u003d fxmlLoader.load();","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"twothicc"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"twothicc"},"content":"            stage.show();","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"twothicc"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"twothicc"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":33,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":34,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"twothicc":34}},{"path":"src/main/java/duke/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"import javafx.animation.PauseTransition;","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"import javafx.application.Platform;","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"import javafx.util.Duration;","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"/**","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":" */","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":"public class MainWindow extends Stage {","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"twothicc"},"content":"    @FXML","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"twothicc"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"twothicc"},"content":"    @FXML","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"twothicc"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"twothicc"},"content":"    @FXML","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"twothicc"},"content":"    private TextField userInput;","lastModifiedDate":"2021-08-29"},{"lineNumber":27,"author":{"gitId":"twothicc"},"content":"    @FXML","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"twothicc"},"content":"    private Button sendButton;","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"twothicc"},"content":"    private Duke duke;","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"twothicc"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/soyBoy.png\"));","lastModifiedDate":"2021-08-29"},{"lineNumber":33,"author":{"gitId":"twothicc"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/yesChad.png\"));","lastModifiedDate":"2021-08-29"},{"lineNumber":34,"author":{"gitId":"twothicc"},"content":"    private Image chatBackgroundImage \u003d","lastModifiedDate":"2021-09-10"},{"lineNumber":35,"author":{"gitId":"twothicc"},"content":"            new Image(this.getClass().getResourceAsStream(\"/images/chatBackground.jpg\"));","lastModifiedDate":"2021-09-10"},{"lineNumber":36,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":37,"author":{"gitId":"twothicc"},"content":"    private FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2021-08-29"},{"lineNumber":38,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":39,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":40,"author":{"gitId":"twothicc"},"content":"     * Constructor for MainWindow.","lastModifiedDate":"2021-08-29"},{"lineNumber":41,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":42,"author":{"gitId":"twothicc"},"content":"    public MainWindow() {","lastModifiedDate":"2021-08-29"},{"lineNumber":43,"author":{"gitId":"twothicc"},"content":"        try {","lastModifiedDate":"2021-08-29"},{"lineNumber":44,"author":{"gitId":"twothicc"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2021-08-29"},{"lineNumber":45,"author":{"gitId":"twothicc"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2021-08-29"},{"lineNumber":46,"author":{"gitId":"twothicc"},"content":"            fxmlLoader.load();","lastModifiedDate":"2021-08-29"},{"lineNumber":47,"author":{"gitId":"twothicc"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-29"},{"lineNumber":48,"author":{"gitId":"twothicc"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-29"},{"lineNumber":49,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":50,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":51,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":52,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-09-10"},{"lineNumber":53,"author":{"gitId":"twothicc"},"content":"     * Sets up javafx components after this MainWindow constructor is called.","lastModifiedDate":"2021-09-10"},{"lineNumber":54,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-09-10"},{"lineNumber":55,"author":{"gitId":"twothicc"},"content":"    @FXML","lastModifiedDate":"2021-08-29"},{"lineNumber":56,"author":{"gitId":"twothicc"},"content":"    public void initialize() {","lastModifiedDate":"2021-08-29"},{"lineNumber":57,"author":{"gitId":"twothicc"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2021-08-29"},{"lineNumber":58,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":59,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":60,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":61,"author":{"gitId":"twothicc"},"content":"     * Sets the Duke object to be used by the application.","lastModifiedDate":"2021-09-01"},{"lineNumber":62,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":63,"author":{"gitId":"twothicc"},"content":"     * @param d Duke object.","lastModifiedDate":"2021-09-01"},{"lineNumber":64,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":65,"author":{"gitId":"twothicc"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2021-08-29"},{"lineNumber":66,"author":{"gitId":"twothicc"},"content":"        duke \u003d d;","lastModifiedDate":"2021-08-29"},{"lineNumber":67,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":68,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":69,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":70,"author":{"gitId":"twothicc"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2021-08-29"},{"lineNumber":71,"author":{"gitId":"twothicc"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2021-08-29"},{"lineNumber":72,"author":{"gitId":"twothicc"},"content":"     * If user inputs bye, begin delay of 1 second to allow Duke to say Goodbye before closing application.","lastModifiedDate":"2021-08-29"},{"lineNumber":73,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":74,"author":{"gitId":"twothicc"},"content":"    @FXML","lastModifiedDate":"2021-08-29"},{"lineNumber":75,"author":{"gitId":"twothicc"},"content":"    private void handleUserInput() {","lastModifiedDate":"2021-08-29"},{"lineNumber":76,"author":{"gitId":"twothicc"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2021-08-29"},{"lineNumber":77,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":78,"author":{"gitId":"twothicc"},"content":"        // Only create dialog is user input is not whitespace(s) or null.","lastModifiedDate":"2021-09-03"},{"lineNumber":79,"author":{"gitId":"twothicc"},"content":"        if (!input.isBlank()) {","lastModifiedDate":"2021-09-03"},{"lineNumber":80,"author":{"gitId":"twothicc"},"content":"            DukeResponse dukeResponse \u003d duke.getResponse(input);","lastModifiedDate":"2021-09-10"},{"lineNumber":81,"author":{"gitId":"twothicc"},"content":"            String response \u003d dukeResponse.getResponse();","lastModifiedDate":"2021-09-10"},{"lineNumber":82,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":83,"author":{"gitId":"twothicc"},"content":"            // Allow Duke to say goodbye to the user before closing application.","lastModifiedDate":"2021-08-29"},{"lineNumber":84,"author":{"gitId":"twothicc"},"content":"            if (response.equals(duke.getUi().getGoodbyeMessage())) {","lastModifiedDate":"2021-09-01"},{"lineNumber":85,"author":{"gitId":"twothicc"},"content":"                PauseTransition delay \u003d new PauseTransition(Duration.seconds(1));","lastModifiedDate":"2021-08-29"},{"lineNumber":86,"author":{"gitId":"twothicc"},"content":"                delay.setOnFinished(event -\u003e Platform.exit());","lastModifiedDate":"2021-08-29"},{"lineNumber":87,"author":{"gitId":"twothicc"},"content":"                delay.play();","lastModifiedDate":"2021-08-29"},{"lineNumber":88,"author":{"gitId":"twothicc"},"content":"            }","lastModifiedDate":"2021-08-29"},{"lineNumber":89,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":90,"author":{"gitId":"twothicc"},"content":"            DialogBox userDialogBox \u003d DialogBox.getUserDialog(input, userImage);","lastModifiedDate":"2021-09-10"},{"lineNumber":91,"author":{"gitId":"twothicc"},"content":"            // Check is Duke Response indicates an error. If so, use an Error DialogBox instead.","lastModifiedDate":"2021-09-10"},{"lineNumber":92,"author":{"gitId":"twothicc"},"content":"            DialogBox dukeDialogBox;","lastModifiedDate":"2021-09-10"},{"lineNumber":93,"author":{"gitId":"twothicc"},"content":"            if (dukeResponse.isError()) {","lastModifiedDate":"2021-09-10"},{"lineNumber":94,"author":{"gitId":"twothicc"},"content":"                dukeDialogBox \u003d DialogBox.getErrorDialog(response, dukeImage);","lastModifiedDate":"2021-09-10"},{"lineNumber":95,"author":{"gitId":"twothicc"},"content":"            } else {","lastModifiedDate":"2021-09-10"},{"lineNumber":96,"author":{"gitId":"twothicc"},"content":"                dukeDialogBox \u003d DialogBox.getDukeDialog(response, dukeImage);","lastModifiedDate":"2021-09-10"},{"lineNumber":97,"author":{"gitId":"twothicc"},"content":"            }","lastModifiedDate":"2021-09-10"},{"lineNumber":98,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":99,"author":{"gitId":"twothicc"},"content":"            dialogContainer.getChildren().addAll(","lastModifiedDate":"2021-08-29"},{"lineNumber":100,"author":{"gitId":"twothicc"},"content":"                    userDialogBox,","lastModifiedDate":"2021-09-10"},{"lineNumber":101,"author":{"gitId":"twothicc"},"content":"                    dukeDialogBox","lastModifiedDate":"2021-09-10"},{"lineNumber":102,"author":{"gitId":"twothicc"},"content":"            );","lastModifiedDate":"2021-08-29"},{"lineNumber":103,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-09-03"},{"lineNumber":104,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":105,"author":{"gitId":"twothicc"},"content":"        userInput.clear();","lastModifiedDate":"2021-08-29"},{"lineNumber":106,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":107,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":108,"author":{"gitId":"twothicc"},"content":"    @FXML","lastModifiedDate":"2021-08-29"},{"lineNumber":109,"author":{"gitId":"twothicc"},"content":"    private void handleUserWelcome() {","lastModifiedDate":"2021-08-29"},{"lineNumber":110,"author":{"gitId":"twothicc"},"content":"        dialogContainer.getChildren().add(DialogBox.getDukeWelcome(dukeImage));","lastModifiedDate":"2021-08-29"},{"lineNumber":111,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":112,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":113,"author":{"gitId":"twothicc"},"content":"    @FXML","lastModifiedDate":"2021-08-29"},{"lineNumber":114,"author":{"gitId":"twothicc"},"content":"    private void handleUserBye() {","lastModifiedDate":"2021-08-29"},{"lineNumber":115,"author":{"gitId":"twothicc"},"content":"        dialogContainer.getChildren().add(DialogBox.getDukeBye(dukeImage));","lastModifiedDate":"2021-08-29"},{"lineNumber":116,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":117,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":118,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"twothicc":118}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"import java.time.DateTimeException;","lastModifiedDate":"2021-08-27"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-27"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-27"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-08-27"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"import duke.Ui.Descriptors;","lastModifiedDate":"2021-08-21"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"import duke.Ui.UserCommands;","lastModifiedDate":"2021-09-04"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"import duke.command.AddCommand;","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"import duke.command.Command;","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"import duke.command.DateCommand;","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"import duke.command.DeleteCommand;","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"import duke.command.FindCommand;","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"import duke.command.ListCommand;","lastModifiedDate":"2021-08-21"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"import duke.command.MarkCommand;","lastModifiedDate":"2021-08-21"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-09-04"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"import duke.exception.InvalidDateTimeFormatException;","lastModifiedDate":"2021-09-04"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":"import duke.exception.InvalidLocalDateException;","lastModifiedDate":"2021-09-04"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":"import duke.exception.InvalidNumberInputException;","lastModifiedDate":"2021-09-04"},{"lineNumber":21,"author":{"gitId":"twothicc"},"content":"import duke.exception.InvalidPeriodException;","lastModifiedDate":"2021-09-05"},{"lineNumber":22,"author":{"gitId":"twothicc"},"content":"import duke.exception.MissingDateException;","lastModifiedDate":"2021-09-04"},{"lineNumber":23,"author":{"gitId":"twothicc"},"content":"import duke.exception.MissingSpaceAfterCommandException;","lastModifiedDate":"2021-09-04"},{"lineNumber":24,"author":{"gitId":"twothicc"},"content":"import duke.exception.MissingSpaceAfterDescriptorException;","lastModifiedDate":"2021-09-04"},{"lineNumber":25,"author":{"gitId":"twothicc"},"content":"import duke.exception.MissingSpaceBeforeDescriptorException;","lastModifiedDate":"2021-09-04"},{"lineNumber":26,"author":{"gitId":"twothicc"},"content":"import duke.exception.MissingTaskDescriptionException;","lastModifiedDate":"2021-09-04"},{"lineNumber":27,"author":{"gitId":"twothicc"},"content":"import duke.exception.WrongDescriptorException;","lastModifiedDate":"2021-09-04"},{"lineNumber":28,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":29,"author":{"gitId":"twothicc"},"content":"/**","lastModifiedDate":"2021-08-20"},{"lineNumber":30,"author":{"gitId":"twothicc"},"content":" * Deals with making sense of user commands and inputs.","lastModifiedDate":"2021-08-20"},{"lineNumber":31,"author":{"gitId":"twothicc"},"content":" */","lastModifiedDate":"2021-08-20"},{"lineNumber":32,"author":{"gitId":"twothicc"},"content":"public class Parser {","lastModifiedDate":"2021-08-20"},{"lineNumber":33,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":34,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"twothicc"},"content":"     * Reads user input and returns the corresponding Command.","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"twothicc"},"content":"     * @param userInput User\u0027s input into Duke chatbot.","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"twothicc"},"content":"     * @return Command that can be executed to perform a set of actions.","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"twothicc"},"content":"    public static Command parse(String userInput) {","lastModifiedDate":"2021-08-21"},{"lineNumber":41,"author":{"gitId":"twothicc"},"content":"        if (userInput.equals(UserCommands.LIST.getCommand())) {","lastModifiedDate":"2021-09-04"},{"lineNumber":42,"author":{"gitId":"twothicc"},"content":"            return new ListCommand(userInput);","lastModifiedDate":"2021-08-21"},{"lineNumber":43,"author":{"gitId":"twothicc"},"content":"        } else {","lastModifiedDate":"2021-08-21"},{"lineNumber":44,"author":{"gitId":"twothicc"},"content":"            if (userInput.startsWith(UserCommands.DONE.getCommand())) {","lastModifiedDate":"2021-09-04"},{"lineNumber":45,"author":{"gitId":"twothicc"},"content":"                return new MarkCommand(userInput);","lastModifiedDate":"2021-08-21"},{"lineNumber":46,"author":{"gitId":"twothicc"},"content":"            } else if (userInput.startsWith(UserCommands.DELETE.getCommand())) {","lastModifiedDate":"2021-09-04"},{"lineNumber":47,"author":{"gitId":"twothicc"},"content":"                return new DeleteCommand(userInput);","lastModifiedDate":"2021-08-21"},{"lineNumber":48,"author":{"gitId":"twothicc"},"content":"            } else if (userInput.startsWith(UserCommands.DATE.getCommand())) {","lastModifiedDate":"2021-09-04"},{"lineNumber":49,"author":{"gitId":"twothicc"},"content":"                return new DateCommand(userInput);","lastModifiedDate":"2021-08-21"},{"lineNumber":50,"author":{"gitId":"twothicc"},"content":"            } else if (userInput.startsWith(UserCommands.FIND.getCommand())) {","lastModifiedDate":"2021-09-04"},{"lineNumber":51,"author":{"gitId":"twothicc"},"content":"                return new FindCommand(userInput);","lastModifiedDate":"2021-08-22"},{"lineNumber":52,"author":{"gitId":"twothicc"},"content":"            } else {","lastModifiedDate":"2021-08-21"},{"lineNumber":53,"author":{"gitId":"twothicc"},"content":"                return new AddCommand(userInput);","lastModifiedDate":"2021-08-21"},{"lineNumber":54,"author":{"gitId":"twothicc"},"content":"            }","lastModifiedDate":"2021-08-21"},{"lineNumber":55,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":56,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":57,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":58,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":59,"author":{"gitId":"twothicc"},"content":"     * Checks user input for missing spaces and invalid commands.","lastModifiedDate":"2021-08-22"},{"lineNumber":60,"author":{"gitId":"twothicc"},"content":"     * This only checks for missing spaces in initial command and if the initial command is invalid.","lastModifiedDate":"2021-08-22"},{"lineNumber":61,"author":{"gitId":"twothicc"},"content":"     * For instance, in \"event task description/at 1/1/2020\", it only checks if there is a space following","lastModifiedDate":"2021-08-22"},{"lineNumber":62,"author":{"gitId":"twothicc"},"content":"     * the initial command \"event\" and if the initial command \"event\" is a valid command.","lastModifiedDate":"2021-08-22"},{"lineNumber":63,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":64,"author":{"gitId":"twothicc"},"content":"     * @param userInput User\u0027s input into Duke chatbot.","lastModifiedDate":"2021-08-22"},{"lineNumber":65,"author":{"gitId":"twothicc"},"content":"     * @param userCommand The starting command of user\u0027s input.","lastModifiedDate":"2021-09-04"},{"lineNumber":66,"author":{"gitId":"twothicc"},"content":"     * @param exception The exception to be thrown if input is invalid.","lastModifiedDate":"2021-09-04"},{"lineNumber":67,"author":{"gitId":"twothicc"},"content":"     * @throws MissingSpaceAfterCommandException If user input contains missing spaces.","lastModifiedDate":"2021-09-04"},{"lineNumber":68,"author":{"gitId":"twothicc"},"content":"     * @throws DukeException If user input is invalid.","lastModifiedDate":"2021-09-04"},{"lineNumber":69,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":70,"author":{"gitId":"twothicc"},"content":"    public static void checkInputValidity(String userInput, UserCommands userCommand,","lastModifiedDate":"2021-09-04"},{"lineNumber":71,"author":{"gitId":"twothicc"},"content":"            DukeException exception) throws DukeException {","lastModifiedDate":"2021-09-04"},{"lineNumber":72,"author":{"gitId":"twothicc"},"content":"        String command \u003d userCommand.getCommand();","lastModifiedDate":"2021-09-04"},{"lineNumber":73,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":74,"author":{"gitId":"twothicc"},"content":"        // If userInput is \u003c\u003d command length, it definitely does not contain desired inputs.","lastModifiedDate":"2021-08-22"},{"lineNumber":75,"author":{"gitId":"twothicc"},"content":"        if (userInput.length() \u003c\u003d command.length()) {","lastModifiedDate":"2021-08-22"},{"lineNumber":76,"author":{"gitId":"twothicc"},"content":"            throw exception;","lastModifiedDate":"2021-09-04"},{"lineNumber":77,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":78,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":79,"author":{"gitId":"twothicc"},"content":"        // If userInput after command is not space, tell users that they are missing space.","lastModifiedDate":"2021-08-22"},{"lineNumber":80,"author":{"gitId":"twothicc"},"content":"        if (userInput.charAt(command.length()) !\u003d \u0027 \u0027) {","lastModifiedDate":"2021-08-22"},{"lineNumber":81,"author":{"gitId":"twothicc"},"content":"            throw new MissingSpaceAfterCommandException(userCommand);","lastModifiedDate":"2021-09-04"},{"lineNumber":82,"author":{"gitId":"twothicc"},"content":"        } else {","lastModifiedDate":"2021-08-22"},{"lineNumber":83,"author":{"gitId":"twothicc"},"content":"            // If user input is like so \"command \", it also does not contain desired inputs, despite having space.","lastModifiedDate":"2021-08-22"},{"lineNumber":84,"author":{"gitId":"twothicc"},"content":"            if (userInput.length() \u003d\u003d (command.length() + 1)) {","lastModifiedDate":"2021-08-22"},{"lineNumber":85,"author":{"gitId":"twothicc"},"content":"                throw exception;","lastModifiedDate":"2021-09-04"},{"lineNumber":86,"author":{"gitId":"twothicc"},"content":"            }","lastModifiedDate":"2021-08-22"},{"lineNumber":87,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":88,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":89,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":90,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":91,"author":{"gitId":"twothicc"},"content":"     * Prepends zeroes to the string till a desired length of the output string.","lastModifiedDate":"2021-08-22"},{"lineNumber":92,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":93,"author":{"gitId":"twothicc"},"content":"     * @param original String to prepend zeroes to.","lastModifiedDate":"2021-08-22"},{"lineNumber":94,"author":{"gitId":"twothicc"},"content":"     * @param expected Length of output string.","lastModifiedDate":"2021-08-22"},{"lineNumber":95,"author":{"gitId":"twothicc"},"content":"     * @return String prepended with zeroes till desired length.","lastModifiedDate":"2021-08-22"},{"lineNumber":96,"author":{"gitId":"twothicc"},"content":"     * @throws InvalidDateTimeFormatException If string input is larger than expected length of output string.","lastModifiedDate":"2021-09-04"},{"lineNumber":97,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":98,"author":{"gitId":"twothicc"},"content":"    private static String padZeros(String original, int expected) throws InvalidDateTimeFormatException {","lastModifiedDate":"2021-09-04"},{"lineNumber":99,"author":{"gitId":"twothicc"},"content":"        String output \u003d original;","lastModifiedDate":"2021-08-20"},{"lineNumber":100,"author":{"gitId":"twothicc"},"content":"        if (original.length() \u003c expected) {","lastModifiedDate":"2021-08-20"},{"lineNumber":101,"author":{"gitId":"twothicc"},"content":"            // Number of chars needed to meet desired length of output string.","lastModifiedDate":"2021-09-03"},{"lineNumber":102,"author":{"gitId":"twothicc"},"content":"            int missingCount \u003d expected - original.length();","lastModifiedDate":"2021-09-03"},{"lineNumber":103,"author":{"gitId":"twothicc"},"content":"            for (int i \u003d 0; i \u003c missingCount; i++) {","lastModifiedDate":"2021-09-03"},{"lineNumber":104,"author":{"gitId":"twothicc"},"content":"                output \u003d \"0\" + original;","lastModifiedDate":"2021-08-20"},{"lineNumber":105,"author":{"gitId":"twothicc"},"content":"            }","lastModifiedDate":"2021-08-20"},{"lineNumber":106,"author":{"gitId":"twothicc"},"content":"        } else if (original.length() \u003e expected) {","lastModifiedDate":"2021-08-20"},{"lineNumber":107,"author":{"gitId":"twothicc"},"content":"            throw new InvalidDateTimeFormatException();","lastModifiedDate":"2021-09-04"},{"lineNumber":108,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":109,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":110,"author":{"gitId":"twothicc"},"content":"        return output;","lastModifiedDate":"2021-08-20"},{"lineNumber":111,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":112,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":113,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":114,"author":{"gitId":"twothicc"},"content":"     * Parses a LocalDate into a string format \"d MMMM yyyy\" to be displayed to the user.","lastModifiedDate":"2021-09-05"},{"lineNumber":115,"author":{"gitId":"twothicc"},"content":"     * For instance, the LocalDate equivalent of 2020-01-01 will be parsed into \"1 January 2020\".","lastModifiedDate":"2021-08-22"},{"lineNumber":116,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":117,"author":{"gitId":"twothicc"},"content":"     * @param localDate LocalDate to be parsed.","lastModifiedDate":"2021-08-22"},{"lineNumber":118,"author":{"gitId":"twothicc"},"content":"     * @return Formatted string representing the date of LocalDate in d MMMM yyyy format.","lastModifiedDate":"2021-08-22"},{"lineNumber":119,"author":{"gitId":"twothicc"},"content":"     * @throws InvalidLocalDateException If LocalDate cannot be parsed.","lastModifiedDate":"2021-09-04"},{"lineNumber":120,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":121,"author":{"gitId":"twothicc"},"content":"    public static String parseLocalDate(LocalDate localDate) throws InvalidLocalDateException {","lastModifiedDate":"2021-09-04"},{"lineNumber":122,"author":{"gitId":"twothicc"},"content":"        try {","lastModifiedDate":"2021-08-20"},{"lineNumber":123,"author":{"gitId":"twothicc"},"content":"            return localDate.format(DateTimeFormatter.ofPattern(\"d MMMM yyyy\"));","lastModifiedDate":"2021-08-20"},{"lineNumber":124,"author":{"gitId":"twothicc"},"content":"        } catch (DateTimeException dateTimeException) {","lastModifiedDate":"2021-08-20"},{"lineNumber":125,"author":{"gitId":"twothicc"},"content":"            throw new InvalidLocalDateException();","lastModifiedDate":"2021-09-04"},{"lineNumber":126,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":127,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":128,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":129,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":130,"author":{"gitId":"twothicc"},"content":"     * Parses a formatted string into LocalDate.","lastModifiedDate":"2021-08-22"},{"lineNumber":131,"author":{"gitId":"twothicc"},"content":"     * The formatted string must be of the format \"dd/mm/yyyy\".","lastModifiedDate":"2021-08-22"},{"lineNumber":132,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":133,"author":{"gitId":"twothicc"},"content":"     * @param dateString Formatted string to be parsed.","lastModifiedDate":"2021-08-22"},{"lineNumber":134,"author":{"gitId":"twothicc"},"content":"     * @return LocalDate equivalent of the date represented by dateString.","lastModifiedDate":"2021-08-22"},{"lineNumber":135,"author":{"gitId":"twothicc"},"content":"     * @throws InvalidDateTimeFormatException If dateString is of an invalid date format.","lastModifiedDate":"2021-09-04"},{"lineNumber":136,"author":{"gitId":"twothicc"},"content":"     * @throws InvalidDateTimeFormatException If dateString represents a date later than \"+999999999-12-31\" or","lastModifiedDate":"2021-09-04"},{"lineNumber":137,"author":{"gitId":"twothicc"},"content":"     *                       earlier than \"-999999999-01-01\".","lastModifiedDate":"2021-08-22"},{"lineNumber":138,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":139,"author":{"gitId":"twothicc"},"content":"    public static LocalDate dateToLocalDate(String dateString) throws InvalidDateTimeFormatException {","lastModifiedDate":"2021-09-05"},{"lineNumber":140,"author":{"gitId":"twothicc"},"content":"        String[] split \u003d dateString.split(\"[/\\\\s]\");","lastModifiedDate":"2021-08-20"},{"lineNumber":141,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":142,"author":{"gitId":"twothicc"},"content":"        // Check if split has 3 elements. If not, this is already an invalid date format.","lastModifiedDate":"2021-08-21"},{"lineNumber":143,"author":{"gitId":"twothicc"},"content":"        if (split.length !\u003d 3) {","lastModifiedDate":"2021-08-21"},{"lineNumber":144,"author":{"gitId":"twothicc"},"content":"            throw new InvalidDateTimeFormatException();","lastModifiedDate":"2021-09-04"},{"lineNumber":145,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":146,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":147,"author":{"gitId":"twothicc"},"content":"        // Convert user date input into dd-mm-yyyy format","lastModifiedDate":"2021-09-03"},{"lineNumber":148,"author":{"gitId":"twothicc"},"content":"        String date \u003d padZeros(split[0], 2);","lastModifiedDate":"2021-08-20"},{"lineNumber":149,"author":{"gitId":"twothicc"},"content":"        String month \u003d padZeros(split[1], 2);","lastModifiedDate":"2021-08-20"},{"lineNumber":150,"author":{"gitId":"twothicc"},"content":"        String year \u003d padZeros(split[2], 4);","lastModifiedDate":"2021-08-20"},{"lineNumber":151,"author":{"gitId":"twothicc"},"content":"        StringBuilder stringBuilder \u003d new StringBuilder();","lastModifiedDate":"2021-08-20"},{"lineNumber":152,"author":{"gitId":"twothicc"},"content":"        stringBuilder.append(year).append(\"-\");","lastModifiedDate":"2021-08-20"},{"lineNumber":153,"author":{"gitId":"twothicc"},"content":"        stringBuilder.append(month).append(\"-\");","lastModifiedDate":"2021-08-20"},{"lineNumber":154,"author":{"gitId":"twothicc"},"content":"        stringBuilder.append(date);","lastModifiedDate":"2021-08-20"},{"lineNumber":155,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":156,"author":{"gitId":"twothicc"},"content":"        LocalDate localDate;","lastModifiedDate":"2021-08-20"},{"lineNumber":157,"author":{"gitId":"twothicc"},"content":"        try {","lastModifiedDate":"2021-08-20"},{"lineNumber":158,"author":{"gitId":"twothicc"},"content":"            localDate \u003d LocalDate.parse(stringBuilder.toString());","lastModifiedDate":"2021-08-20"},{"lineNumber":159,"author":{"gitId":"twothicc"},"content":"        } catch (DateTimeParseException dateTimeParseException) {","lastModifiedDate":"2021-08-20"},{"lineNumber":160,"author":{"gitId":"twothicc"},"content":"            throw new InvalidDateTimeFormatException();","lastModifiedDate":"2021-09-04"},{"lineNumber":161,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":162,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":163,"author":{"gitId":"twothicc"},"content":"        return localDate;","lastModifiedDate":"2021-08-20"},{"lineNumber":164,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":165,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":166,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":167,"author":{"gitId":"twothicc"},"content":"     * Parses index provided in user input into an int.","lastModifiedDate":"2021-08-22"},{"lineNumber":168,"author":{"gitId":"twothicc"},"content":"     * For instance, when user inputs \"done 1\", calling parseUserNumInput on this input will return 1.","lastModifiedDate":"2021-08-22"},{"lineNumber":169,"author":{"gitId":"twothicc"},"content":"     * In this case, the input\u0027s identifying command is \"done\".","lastModifiedDate":"2021-08-22"},{"lineNumber":170,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":171,"author":{"gitId":"twothicc"},"content":"     * @param userInput User\u0027s input into Duke chatbot.","lastModifiedDate":"2021-08-22"},{"lineNumber":172,"author":{"gitId":"twothicc"},"content":"     * @param command The identifying command in user input.","lastModifiedDate":"2021-08-22"},{"lineNumber":173,"author":{"gitId":"twothicc"},"content":"     * @return An int representing an index.","lastModifiedDate":"2021-08-22"},{"lineNumber":174,"author":{"gitId":"twothicc"},"content":"     * @throws InvalidNumberInputException If user input for index cannot be parsed into Integer.","lastModifiedDate":"2021-09-04"},{"lineNumber":175,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":176,"author":{"gitId":"twothicc"},"content":"    public static int parseUserNumInput(String userInput, UserCommands command) throws InvalidNumberInputException {","lastModifiedDate":"2021-09-04"},{"lineNumber":177,"author":{"gitId":"twothicc"},"content":"        try {","lastModifiedDate":"2021-08-20"},{"lineNumber":178,"author":{"gitId":"twothicc"},"content":"            // Add 1 as user\u0027s number input is separated from command by 1 space.","lastModifiedDate":"2021-08-20"},{"lineNumber":179,"author":{"gitId":"twothicc"},"content":"            return Integer.parseInt(userInput.substring(command.getLength() + 1));","lastModifiedDate":"2021-08-20"},{"lineNumber":180,"author":{"gitId":"twothicc"},"content":"        } catch (NumberFormatException nfe) {","lastModifiedDate":"2021-08-20"},{"lineNumber":181,"author":{"gitId":"twothicc"},"content":"            throw new InvalidNumberInputException(command);","lastModifiedDate":"2021-09-04"},{"lineNumber":182,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":183,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":184,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":185,"author":{"gitId":"twothicc"},"content":"    private static int findIndex(String s, Character c) {","lastModifiedDate":"2021-08-20"},{"lineNumber":186,"author":{"gitId":"twothicc"},"content":"        for (int i \u003d 0; i \u003c s.length(); i++) {","lastModifiedDate":"2021-08-20"},{"lineNumber":187,"author":{"gitId":"twothicc"},"content":"            if (s.charAt(i) \u003d\u003d c) {","lastModifiedDate":"2021-08-20"},{"lineNumber":188,"author":{"gitId":"twothicc"},"content":"                return i;","lastModifiedDate":"2021-08-20"},{"lineNumber":189,"author":{"gitId":"twothicc"},"content":"            }","lastModifiedDate":"2021-08-20"},{"lineNumber":190,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":191,"author":{"gitId":"twothicc"},"content":"        return -1;","lastModifiedDate":"2021-08-20"},{"lineNumber":192,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":193,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":194,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":195,"author":{"gitId":"twothicc"},"content":"     * Parses user description into description and time based on initial command and descriptor used.","lastModifiedDate":"2021-08-22"},{"lineNumber":196,"author":{"gitId":"twothicc"},"content":"     * User description is defined to be the part of user\u0027s input following the initial command.","lastModifiedDate":"2021-08-22"},{"lineNumber":197,"author":{"gitId":"twothicc"},"content":"     * For instance, the user description of \"event task description /at 1/1/2020\" is","lastModifiedDate":"2021-08-22"},{"lineNumber":198,"author":{"gitId":"twothicc"},"content":"     * \"task description /at 1/1/2020\", where the initial command \"event\" and the space after it is removed.","lastModifiedDate":"2021-08-22"},{"lineNumber":199,"author":{"gitId":"twothicc"},"content":"     * An Event would require descriptor \"at\" whereas a Deadline would require descriptor \"by\".","lastModifiedDate":"2021-08-22"},{"lineNumber":200,"author":{"gitId":"twothicc"},"content":"     * The separator is a char that comes before the descriptor.","lastModifiedDate":"2021-08-22"},{"lineNumber":201,"author":{"gitId":"twothicc"},"content":"     * For instance, \u0027/\u0027 is the separator in \"/at\".","lastModifiedDate":"2021-08-22"},{"lineNumber":202,"author":{"gitId":"twothicc"},"content":"     * Calling parseUserDescriptionInput on the example description will give a String array","lastModifiedDate":"2021-08-22"},{"lineNumber":203,"author":{"gitId":"twothicc"},"content":"     * of 2 elements [\"task description\", \"1/1/2020\"].","lastModifiedDate":"2021-08-22"},{"lineNumber":204,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":205,"author":{"gitId":"twothicc"},"content":"     * @param userDescription User\u0027s input into Duke chatbot.","lastModifiedDate":"2021-08-22"},{"lineNumber":206,"author":{"gitId":"twothicc"},"content":"     * @param descriptor Descriptor to separate description and time with.","lastModifiedDate":"2021-08-22"},{"lineNumber":207,"author":{"gitId":"twothicc"},"content":"     * @param separator char that comes before the descriptor.","lastModifiedDate":"2021-08-22"},{"lineNumber":208,"author":{"gitId":"twothicc"},"content":"     * @param userCommand The initial command in user\u0027s input.","lastModifiedDate":"2021-09-04"},{"lineNumber":209,"author":{"gitId":"twothicc"},"content":"     * @return String array of 2 elements with the task description at index 0 and time at index 1.","lastModifiedDate":"2021-08-22"},{"lineNumber":210,"author":{"gitId":"twothicc"},"content":"     * @throws MissingDateException If user input is missing a date.","lastModifiedDate":"2021-09-04"},{"lineNumber":211,"author":{"gitId":"twothicc"},"content":"     * @throws MissingTaskDescriptionException If user input is missing a task description.","lastModifiedDate":"2021-09-04"},{"lineNumber":212,"author":{"gitId":"twothicc"},"content":"     * @throws WrongDescriptorException If user input is using the wrong descriptor.","lastModifiedDate":"2021-09-04"},{"lineNumber":213,"author":{"gitId":"twothicc"},"content":"     * @throws MissingSpaceBeforeDescriptorException If user input has missing space before descriptor.","lastModifiedDate":"2021-09-04"},{"lineNumber":214,"author":{"gitId":"twothicc"},"content":"     * @throws MissingSpaceAfterDescriptorException If user input has missing space after descriptor.","lastModifiedDate":"2021-09-04"},{"lineNumber":215,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":216,"author":{"gitId":"twothicc"},"content":"    public static String[] parseUserDescriptionInput(String userDescription, Descriptors descriptor,","lastModifiedDate":"2021-08-21"},{"lineNumber":217,"author":{"gitId":"twothicc"},"content":"                                                      char separator, UserCommands userCommand) throws DukeException {","lastModifiedDate":"2021-09-04"},{"lineNumber":218,"author":{"gitId":"twothicc"},"content":"        // Index of separator in userDescription.","lastModifiedDate":"2021-08-20"},{"lineNumber":219,"author":{"gitId":"twothicc"},"content":"        int separatorIdx \u003d findIndex(userDescription, separator);","lastModifiedDate":"2021-08-20"},{"lineNumber":220,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":221,"author":{"gitId":"twothicc"},"content":"        // Events and duke.task.Deadline could have empty tasks but taken as they do due to their descriptors and time.","lastModifiedDate":"2021-09-10"},{"lineNumber":222,"author":{"gitId":"twothicc"},"content":"        // Need to run another check on whether their task descriptions are empty.","lastModifiedDate":"2021-09-10"},{"lineNumber":223,"author":{"gitId":"twothicc"},"content":"        if (separatorIdx \u003d\u003d 0) {","lastModifiedDate":"2021-09-10"},{"lineNumber":224,"author":{"gitId":"twothicc"},"content":"            throw new MissingTaskDescriptionException(userCommand);","lastModifiedDate":"2021-09-10"},{"lineNumber":225,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-09-10"},{"lineNumber":226,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":227,"author":{"gitId":"twothicc"},"content":"        // Index of space after descriptor","lastModifiedDate":"2021-08-20"},{"lineNumber":228,"author":{"gitId":"twothicc"},"content":"        int indexDescriptorSpace \u003d separatorIdx + descriptor.getLength() + 1;","lastModifiedDate":"2021-08-20"},{"lineNumber":229,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":230,"author":{"gitId":"twothicc"},"content":"        // Check if separator exists. Then check if there could be time input after descriptor.","lastModifiedDate":"2021-08-22"},{"lineNumber":231,"author":{"gitId":"twothicc"},"content":"        if ((separatorIdx \u003d\u003d -1) || (userDescription.length() \u003c\u003d indexDescriptorSpace)) {","lastModifiedDate":"2021-08-20"},{"lineNumber":232,"author":{"gitId":"twothicc"},"content":"            throw new MissingDateException();","lastModifiedDate":"2021-09-04"},{"lineNumber":233,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":234,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":235,"author":{"gitId":"twothicc"},"content":"        // Index of first character following space after descriptor.","lastModifiedDate":"2021-08-22"},{"lineNumber":236,"author":{"gitId":"twothicc"},"content":"        int indexAfterDescriptorSpace \u003d indexDescriptorSpace + 1;","lastModifiedDate":"2021-09-10"},{"lineNumber":237,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":238,"author":{"gitId":"twothicc"},"content":"        // Check if descriptor matches descriptor parameter.","lastModifiedDate":"2021-08-22"},{"lineNumber":239,"author":{"gitId":"twothicc"},"content":"        String actualDescriptor \u003d userDescription.substring(separatorIdx + 1, indexDescriptorSpace);","lastModifiedDate":"2021-09-10"},{"lineNumber":240,"author":{"gitId":"twothicc"},"content":"        if (!actualDescriptor.equals(descriptor.getDescriptor())) {","lastModifiedDate":"2021-08-22"},{"lineNumber":241,"author":{"gitId":"twothicc"},"content":"            throw new WrongDescriptorException(descriptor, userCommand);","lastModifiedDate":"2021-09-10"},{"lineNumber":242,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":243,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":244,"author":{"gitId":"twothicc"},"content":"        checkSeparatorSpaceFormatting(userDescription, descriptor, separatorIdx, indexDescriptorSpace);","lastModifiedDate":"2021-09-10"},{"lineNumber":245,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":246,"author":{"gitId":"twothicc"},"content":"        // User\u0027s time input.","lastModifiedDate":"2021-09-10"},{"lineNumber":247,"author":{"gitId":"twothicc"},"content":"        String time \u003d userDescription.substring(indexAfterDescriptorSpace);","lastModifiedDate":"2021-09-10"},{"lineNumber":248,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":249,"author":{"gitId":"twothicc"},"content":"        // User\u0027s task description. Decrement by 1 as there is a space between task description and separator","lastModifiedDate":"2021-09-10"},{"lineNumber":250,"author":{"gitId":"twothicc"},"content":"        String taskDescription \u003d userDescription.substring(0, separatorIdx - 1);","lastModifiedDate":"2021-09-10"},{"lineNumber":251,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":252,"author":{"gitId":"twothicc"},"content":"        // If task description is just whitespace, it is considered empty too.","lastModifiedDate":"2021-09-10"},{"lineNumber":253,"author":{"gitId":"twothicc"},"content":"        if (taskDescription.isBlank()) {","lastModifiedDate":"2021-09-10"},{"lineNumber":254,"author":{"gitId":"twothicc"},"content":"            throw new MissingTaskDescriptionException(userCommand);","lastModifiedDate":"2021-09-10"},{"lineNumber":255,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":256,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":257,"author":{"gitId":"twothicc"},"content":"        // Returns a String array with the task description and user input after descriptor.","lastModifiedDate":"2021-09-10"},{"lineNumber":258,"author":{"gitId":"twothicc"},"content":"        return new String[] {taskDescription, time};","lastModifiedDate":"2021-09-10"},{"lineNumber":259,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":260,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":261,"author":{"gitId":"twothicc"},"content":"    private static void checkSeparatorSpaceFormatting(String userDescription, Descriptors descriptor,","lastModifiedDate":"2021-09-10"},{"lineNumber":262,"author":{"gitId":"twothicc"},"content":"            int separatorIdx, int indexDescriptorSpace) throws MissingSpaceAfterDescriptorException,","lastModifiedDate":"2021-09-10"},{"lineNumber":263,"author":{"gitId":"twothicc"},"content":"                    MissingSpaceBeforeDescriptorException {","lastModifiedDate":"2021-09-10"},{"lineNumber":264,"author":{"gitId":"twothicc"},"content":"        // Check whether the front of separatorIdx is an empty space.","lastModifiedDate":"2021-09-10"},{"lineNumber":265,"author":{"gitId":"twothicc"},"content":"        if (userDescription.charAt(separatorIdx - 1) !\u003d \u0027 \u0027) {","lastModifiedDate":"2021-09-10"},{"lineNumber":266,"author":{"gitId":"twothicc"},"content":"            throw new MissingSpaceBeforeDescriptorException(descriptor);","lastModifiedDate":"2021-09-04"},{"lineNumber":267,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":268,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":269,"author":{"gitId":"twothicc"},"content":"        // Check whether the back of descriptor is followed by a space.","lastModifiedDate":"2021-08-21"},{"lineNumber":270,"author":{"gitId":"twothicc"},"content":"        if (userDescription.charAt(indexDescriptorSpace) !\u003d \u0027 \u0027) {","lastModifiedDate":"2021-09-10"},{"lineNumber":271,"author":{"gitId":"twothicc"},"content":"            throw new MissingSpaceAfterDescriptorException(descriptor);","lastModifiedDate":"2021-09-04"},{"lineNumber":272,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":273,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":274,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":275,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-09-05"},{"lineNumber":276,"author":{"gitId":"twothicc"},"content":"     * Splits userTimePeriodInput into a 2 element LocalDate array containing startDate and endDate.","lastModifiedDate":"2021-09-05"},{"lineNumber":277,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-09-05"},{"lineNumber":278,"author":{"gitId":"twothicc"},"content":"     * @return LocalDate Array containing startDate and endDate.","lastModifiedDate":"2021-09-05"},{"lineNumber":279,"author":{"gitId":"twothicc"},"content":"     * @throws MissingDateException If user\u0027s time period input cannot be split into 2 by a single space.","lastModifiedDate":"2021-09-05"},{"lineNumber":280,"author":{"gitId":"twothicc"},"content":"     * @throws InvalidPeriodException If user\u0027s time period is chronologically invalid.","lastModifiedDate":"2021-09-05"},{"lineNumber":281,"author":{"gitId":"twothicc"},"content":"     * @throws DukeException If underlying methods fail.","lastModifiedDate":"2021-09-05"},{"lineNumber":282,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-09-05"},{"lineNumber":283,"author":{"gitId":"twothicc"},"content":"    public static LocalDate[] periodToLocalDate(String userTimePeriodInput) throws DukeException {","lastModifiedDate":"2021-09-05"},{"lineNumber":284,"author":{"gitId":"twothicc"},"content":"        String[] split \u003d userTimePeriodInput.split(\" \");","lastModifiedDate":"2021-09-05"},{"lineNumber":285,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":286,"author":{"gitId":"twothicc"},"content":"        // If userTimePeriodInput cannot be split into 2, it is assumed that user did not provide sufficient dates","lastModifiedDate":"2021-09-05"},{"lineNumber":287,"author":{"gitId":"twothicc"},"content":"        if (split.length !\u003d 2) {","lastModifiedDate":"2021-09-05"},{"lineNumber":288,"author":{"gitId":"twothicc"},"content":"            throw new MissingDateException();","lastModifiedDate":"2021-09-05"},{"lineNumber":289,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-09-05"},{"lineNumber":290,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":291,"author":{"gitId":"twothicc"},"content":"        LocalDate startDate \u003d dateToLocalDate(split[0]);","lastModifiedDate":"2021-09-05"},{"lineNumber":292,"author":{"gitId":"twothicc"},"content":"        LocalDate endDate \u003d dateToLocalDate(split[1]);","lastModifiedDate":"2021-09-05"},{"lineNumber":293,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":294,"author":{"gitId":"twothicc"},"content":"        if (endDate.compareTo(startDate) \u003c 0) {","lastModifiedDate":"2021-09-05"},{"lineNumber":295,"author":{"gitId":"twothicc"},"content":"            throw new InvalidPeriodException(split[0], split[1]);","lastModifiedDate":"2021-09-05"},{"lineNumber":296,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-09-05"},{"lineNumber":297,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":298,"author":{"gitId":"twothicc"},"content":"        return new LocalDate[]{startDate, endDate};","lastModifiedDate":"2021-09-05"},{"lineNumber":299,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-09-05"},{"lineNumber":300,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":301,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-08-20"}],"authorContributionMap":{"twothicc":301}},{"path":"src/main/java/duke/Storable.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-09-04"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"/**","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":" * The Storable interface ensures that any class that implements it will have the methods","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":" * readTasksFromData and saveTasksToData.","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":" */","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"public interface Storable {","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"     * Reads tasks from a specified file.","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"     * @return TaskList containing the tasks read from specified file.","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"     * @throws DukeException If task cannot be read from specified file.","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"    TaskList readTasksFromData() throws DukeException;","lastModifiedDate":"2021-08-21"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":"     * Saves tasks to a specified file.","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"twothicc"},"content":"     * @param taskList TaskList containing the tasks to be saved to specified file.","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"twothicc"},"content":"     * @throws DukeException If task cannot be saved to specified file.","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"twothicc"},"content":"    void saveTasksToData(TaskList taskList) throws DukeException;","lastModifiedDate":"2021-08-21"},{"lineNumber":26,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"twothicc":26}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-20"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"import java.nio.file.Files;","lastModifiedDate":"2021-08-20"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-08-20"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2021-08-20"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"import java.time.DateTimeException;","lastModifiedDate":"2021-08-20"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-20"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-20"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-20"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"import java.util.List;","lastModifiedDate":"2021-08-20"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-09-04"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"import duke.exception.CannotReadFileException;","lastModifiedDate":"2021-09-04"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"import duke.exception.CannotSaveFileException;","lastModifiedDate":"2021-09-04"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"import duke.exception.CorruptSaveFileException;","lastModifiedDate":"2021-09-04"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-09-04"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"import duke.exception.InvalidDateTimeFormatException;","lastModifiedDate":"2021-09-05"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":"import duke.exception.InvalidLocalDateException;","lastModifiedDate":"2021-09-04"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-08-27"},{"lineNumber":21,"author":{"gitId":"twothicc"},"content":"import duke.task.Event;","lastModifiedDate":"2021-08-27"},{"lineNumber":22,"author":{"gitId":"twothicc"},"content":"import duke.task.Period;","lastModifiedDate":"2021-09-05"},{"lineNumber":23,"author":{"gitId":"twothicc"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-27"},{"lineNumber":24,"author":{"gitId":"twothicc"},"content":"import duke.task.Todo;","lastModifiedDate":"2021-08-27"},{"lineNumber":25,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":26,"author":{"gitId":"twothicc"},"content":"/**","lastModifiedDate":"2021-08-20"},{"lineNumber":27,"author":{"gitId":"twothicc"},"content":" * Deals with loading tasks from save file and saving tasks in the file.","lastModifiedDate":"2021-08-20"},{"lineNumber":28,"author":{"gitId":"twothicc"},"content":" */","lastModifiedDate":"2021-08-20"},{"lineNumber":29,"author":{"gitId":"twothicc"},"content":"public class Storage implements Storable {","lastModifiedDate":"2021-08-21"},{"lineNumber":30,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":31,"author":{"gitId":"twothicc"},"content":"    /** Tasks saved are separated by SAVE_SEPARATOR */","lastModifiedDate":"2021-08-28"},{"lineNumber":32,"author":{"gitId":"twothicc"},"content":"    private static final String SAVE_SEPARATOR \u003d \" ~ \";","lastModifiedDate":"2021-08-28"},{"lineNumber":33,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":34,"author":{"gitId":"twothicc"},"content":"    /** Start date and End date in a time period are separated by PERIOD_SEPARATOR */","lastModifiedDate":"2021-09-05"},{"lineNumber":35,"author":{"gitId":"twothicc"},"content":"    private static final String PERIOD_SEPARATOR \u003d \" -\u003e \";","lastModifiedDate":"2021-09-05"},{"lineNumber":36,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":37,"author":{"gitId":"twothicc"},"content":"    /** Filename of file to be saved to */","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"twothicc"},"content":"    private final String saveFileName;","lastModifiedDate":"2021-08-28"},{"lineNumber":39,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":40,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"twothicc"},"content":"     * Constructor for Storage.","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"twothicc"},"content":"     * Creates a Storage with a specified filename as the target file for save and read operations.","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"twothicc"},"content":"     * @param fileName filename of file to be saved to and read from.","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"twothicc"},"content":"    public Storage(String fileName) {","lastModifiedDate":"2021-08-20"},{"lineNumber":47,"author":{"gitId":"twothicc"},"content":"        this.saveFileName \u003d fileName;","lastModifiedDate":"2021-08-28"},{"lineNumber":48,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":49,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":50,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":51,"author":{"gitId":"twothicc"},"content":"     * Converts LocalDate into \"dd/MM/yyyy\" string format for saving.","lastModifiedDate":"2021-08-22"},{"lineNumber":52,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":53,"author":{"gitId":"twothicc"},"content":"     * @param localDate LocalDate to be converted.","lastModifiedDate":"2021-08-22"},{"lineNumber":54,"author":{"gitId":"twothicc"},"content":"     * @return Formatted String suitable for saving.","lastModifiedDate":"2021-08-22"},{"lineNumber":55,"author":{"gitId":"twothicc"},"content":"     * @throws InvalidLocalDateException If localDate cannot be parsed into save format.","lastModifiedDate":"2021-09-04"},{"lineNumber":56,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":57,"author":{"gitId":"twothicc"},"content":"    private static String toSaveDateFormat(LocalDate localDate) throws InvalidLocalDateException {","lastModifiedDate":"2021-09-04"},{"lineNumber":58,"author":{"gitId":"twothicc"},"content":"        try {","lastModifiedDate":"2021-08-20"},{"lineNumber":59,"author":{"gitId":"twothicc"},"content":"            return localDate.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"));","lastModifiedDate":"2021-08-20"},{"lineNumber":60,"author":{"gitId":"twothicc"},"content":"        } catch (DateTimeException dateTimeException) {","lastModifiedDate":"2021-08-20"},{"lineNumber":61,"author":{"gitId":"twothicc"},"content":"            throw new InvalidLocalDateException();","lastModifiedDate":"2021-09-04"},{"lineNumber":62,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":63,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":64,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":65,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-09-05"},{"lineNumber":66,"author":{"gitId":"twothicc"},"content":"     * Converts start and end dates of Period into \"dd/MM/yyyy\" string format separated by PERIOD_SEPARATOR","lastModifiedDate":"2021-09-05"},{"lineNumber":67,"author":{"gitId":"twothicc"},"content":"     * for saving.","lastModifiedDate":"2021-09-05"},{"lineNumber":68,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-09-05"},{"lineNumber":69,"author":{"gitId":"twothicc"},"content":"     * @param startDate StartDate of Period.","lastModifiedDate":"2021-09-05"},{"lineNumber":70,"author":{"gitId":"twothicc"},"content":"     * @param endDate EndDate of Period.","lastModifiedDate":"2021-09-05"},{"lineNumber":71,"author":{"gitId":"twothicc"},"content":"     * @return Formatted String suitable for saving.","lastModifiedDate":"2021-09-05"},{"lineNumber":72,"author":{"gitId":"twothicc"},"content":"     * @throws InvalidLocalDateException If localDate cannot be parsed into save format.","lastModifiedDate":"2021-09-05"},{"lineNumber":73,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-09-05"},{"lineNumber":74,"author":{"gitId":"twothicc"},"content":"    private static String toSavePeriodFormat(LocalDate startDate, LocalDate endDate) throws InvalidLocalDateException {","lastModifiedDate":"2021-09-05"},{"lineNumber":75,"author":{"gitId":"twothicc"},"content":"        return toSaveDateFormat(startDate) + PERIOD_SEPARATOR + toSaveDateFormat(endDate);","lastModifiedDate":"2021-09-05"},{"lineNumber":76,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-09-05"},{"lineNumber":77,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":78,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":79,"author":{"gitId":"twothicc"},"content":"     * Converts a Task into a formatted string suitable for saving.","lastModifiedDate":"2021-08-22"},{"lineNumber":80,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":81,"author":{"gitId":"twothicc"},"content":"     * @param task Task to be converted.","lastModifiedDate":"2021-08-22"},{"lineNumber":82,"author":{"gitId":"twothicc"},"content":"     * @return Formatted String suitable for saving.","lastModifiedDate":"2021-08-22"},{"lineNumber":83,"author":{"gitId":"twothicc"},"content":"     * @throws InvalidLocalDateException If date cannot be parsed to save format.","lastModifiedDate":"2021-09-04"},{"lineNumber":84,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":85,"author":{"gitId":"twothicc"},"content":"    private static String toSaveFormat(Task task) throws InvalidLocalDateException {","lastModifiedDate":"2021-09-04"},{"lineNumber":86,"author":{"gitId":"twothicc"},"content":"        // Initialize StringBuilder.","lastModifiedDate":"2021-08-20"},{"lineNumber":87,"author":{"gitId":"twothicc"},"content":"        StringBuilder stringBuilder \u003d new StringBuilder();","lastModifiedDate":"2021-08-20"},{"lineNumber":88,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":89,"author":{"gitId":"twothicc"},"content":"        // Get task type, done status of task.","lastModifiedDate":"2021-08-20"},{"lineNumber":90,"author":{"gitId":"twothicc"},"content":"        String taskType \u003d task.getTaskType();","lastModifiedDate":"2021-08-20"},{"lineNumber":91,"author":{"gitId":"twothicc"},"content":"        int done \u003d task.getIsDone() ? 1 : 0;","lastModifiedDate":"2021-08-21"},{"lineNumber":92,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":93,"author":{"gitId":"twothicc"},"content":"        // Build corresponding save string from task.","lastModifiedDate":"2021-08-20"},{"lineNumber":94,"author":{"gitId":"twothicc"},"content":"        stringBuilder.append(taskType).append(SAVE_SEPARATOR);","lastModifiedDate":"2021-08-20"},{"lineNumber":95,"author":{"gitId":"twothicc"},"content":"        stringBuilder.append(done).append(SAVE_SEPARATOR);","lastModifiedDate":"2021-08-20"},{"lineNumber":96,"author":{"gitId":"twothicc"},"content":"        stringBuilder.append(task.getDescription());","lastModifiedDate":"2021-08-21"},{"lineNumber":97,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":98,"author":{"gitId":"twothicc"},"content":"        // Deadline tasks have time, so it is obtained and appended via stringBuilder.","lastModifiedDate":"2021-09-05"},{"lineNumber":99,"author":{"gitId":"twothicc"},"content":"        if (taskType.equals(\"D\")) {","lastModifiedDate":"2021-08-20"},{"lineNumber":100,"author":{"gitId":"twothicc"},"content":"            Deadline deadline \u003d (Deadline) task;","lastModifiedDate":"2021-08-20"},{"lineNumber":101,"author":{"gitId":"twothicc"},"content":"            LocalDate localDate \u003d deadline.getTime();","lastModifiedDate":"2021-08-20"},{"lineNumber":102,"author":{"gitId":"twothicc"},"content":"            String time \u003d toSaveDateFormat(localDate);","lastModifiedDate":"2021-08-20"},{"lineNumber":103,"author":{"gitId":"twothicc"},"content":"            stringBuilder.append(SAVE_SEPARATOR).append(time);","lastModifiedDate":"2021-08-20"},{"lineNumber":104,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":105,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":106,"author":{"gitId":"twothicc"},"content":"        // Event tasks have time, so it is obtained and appended via stringBuilder.","lastModifiedDate":"2021-09-05"},{"lineNumber":107,"author":{"gitId":"twothicc"},"content":"        if (taskType.equals(\"E\")) {","lastModifiedDate":"2021-08-20"},{"lineNumber":108,"author":{"gitId":"twothicc"},"content":"            Event event \u003d (Event) task;","lastModifiedDate":"2021-08-20"},{"lineNumber":109,"author":{"gitId":"twothicc"},"content":"            LocalDate localDate \u003d event.getTime();","lastModifiedDate":"2021-08-20"},{"lineNumber":110,"author":{"gitId":"twothicc"},"content":"            String time \u003d toSaveDateFormat(localDate);","lastModifiedDate":"2021-08-20"},{"lineNumber":111,"author":{"gitId":"twothicc"},"content":"            stringBuilder.append(SAVE_SEPARATOR).append(time);","lastModifiedDate":"2021-08-20"},{"lineNumber":112,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":113,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":114,"author":{"gitId":"twothicc"},"content":"        // Period tasks have time period, so it is obtained and appended via stringBuilder.","lastModifiedDate":"2021-09-05"},{"lineNumber":115,"author":{"gitId":"twothicc"},"content":"        if (taskType.equals(\"P\")) {","lastModifiedDate":"2021-09-05"},{"lineNumber":116,"author":{"gitId":"twothicc"},"content":"            Period period \u003d (Period) task;","lastModifiedDate":"2021-09-05"},{"lineNumber":117,"author":{"gitId":"twothicc"},"content":"            LocalDate[] startEndDates \u003d period.getPeriod();","lastModifiedDate":"2021-09-05"},{"lineNumber":118,"author":{"gitId":"twothicc"},"content":"            LocalDate startDate \u003d startEndDates[0];","lastModifiedDate":"2021-09-05"},{"lineNumber":119,"author":{"gitId":"twothicc"},"content":"            LocalDate endDate \u003d startEndDates[1];","lastModifiedDate":"2021-09-05"},{"lineNumber":120,"author":{"gitId":"twothicc"},"content":"            String time \u003d toSavePeriodFormat(startDate, endDate);","lastModifiedDate":"2021-09-05"},{"lineNumber":121,"author":{"gitId":"twothicc"},"content":"            stringBuilder.append(SAVE_SEPARATOR).append(time);","lastModifiedDate":"2021-09-05"},{"lineNumber":122,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-09-05"},{"lineNumber":123,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":124,"author":{"gitId":"twothicc"},"content":"        return stringBuilder.toString();","lastModifiedDate":"2021-08-20"},{"lineNumber":125,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":126,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":127,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":128,"author":{"gitId":"twothicc"},"content":"     * Converts string read from specified file into corresponding tasks based on the string identifier.","lastModifiedDate":"2021-08-22"},{"lineNumber":129,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":130,"author":{"gitId":"twothicc"},"content":"     * @param save The read string.","lastModifiedDate":"2021-08-22"},{"lineNumber":131,"author":{"gitId":"twothicc"},"content":"     * @return Task corresponding to the read string.","lastModifiedDate":"2021-08-22"},{"lineNumber":132,"author":{"gitId":"twothicc"},"content":"     * @throws CorruptSaveFileException if string does not have sufficient parts for the task it represents.","lastModifiedDate":"2021-09-04"},{"lineNumber":133,"author":{"gitId":"twothicc"},"content":"     * @throws DukeException if underlying methods fail.","lastModifiedDate":"2021-09-04"},{"lineNumber":134,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":135,"author":{"gitId":"twothicc"},"content":"    private static Task parseSaveFormat(String save) throws DukeException {","lastModifiedDate":"2021-08-20"},{"lineNumber":136,"author":{"gitId":"twothicc"},"content":"        // Split save string by the save separator.","lastModifiedDate":"2021-08-20"},{"lineNumber":137,"author":{"gitId":"twothicc"},"content":"        String[] splitSaveString \u003d save.split(SAVE_SEPARATOR);","lastModifiedDate":"2021-09-01"},{"lineNumber":138,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":139,"author":{"gitId":"twothicc"},"content":"        try {","lastModifiedDate":"2021-08-20"},{"lineNumber":140,"author":{"gitId":"twothicc"},"content":"            // Get the task type, done status, description of task from saveSplit.","lastModifiedDate":"2021-08-20"},{"lineNumber":141,"author":{"gitId":"twothicc"},"content":"            String taskType \u003d splitSaveString[0];","lastModifiedDate":"2021-09-01"},{"lineNumber":142,"author":{"gitId":"twothicc"},"content":"            // Save would be corrupt if done status cannot be parsed to int.","lastModifiedDate":"2021-08-20"},{"lineNumber":143,"author":{"gitId":"twothicc"},"content":"            int isDone \u003d Integer.parseInt(splitSaveString[1]);","lastModifiedDate":"2021-09-01"},{"lineNumber":144,"author":{"gitId":"twothicc"},"content":"            String description \u003d splitSaveString[2];","lastModifiedDate":"2021-09-01"},{"lineNumber":145,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":146,"author":{"gitId":"twothicc"},"content":"            // Create corresponding duke.task.Task object.","lastModifiedDate":"2021-08-21"},{"lineNumber":147,"author":{"gitId":"twothicc"},"content":"            // Save would be corrupt if duke.task.Deadline and duke.task.Event tasks do not have time.","lastModifiedDate":"2021-08-21"},{"lineNumber":148,"author":{"gitId":"twothicc"},"content":"            Task task;","lastModifiedDate":"2021-08-20"},{"lineNumber":149,"author":{"gitId":"twothicc"},"content":"            switch (taskType) {","lastModifiedDate":"2021-08-20"},{"lineNumber":150,"author":{"gitId":"twothicc"},"content":"            case \"T\":","lastModifiedDate":"2021-08-20"},{"lineNumber":151,"author":{"gitId":"twothicc"},"content":"                task \u003d new Todo(description);","lastModifiedDate":"2021-08-20"},{"lineNumber":152,"author":{"gitId":"twothicc"},"content":"                break;","lastModifiedDate":"2021-08-20"},{"lineNumber":153,"author":{"gitId":"twothicc"},"content":"            case \"D\":","lastModifiedDate":"2021-08-20"},{"lineNumber":154,"author":{"gitId":"twothicc"},"content":"                LocalDate by \u003d Parser.dateToLocalDate(splitSaveString[3]);","lastModifiedDate":"2021-09-05"},{"lineNumber":155,"author":{"gitId":"twothicc"},"content":"                task \u003d new Deadline(description, by);","lastModifiedDate":"2021-08-20"},{"lineNumber":156,"author":{"gitId":"twothicc"},"content":"                break;","lastModifiedDate":"2021-08-20"},{"lineNumber":157,"author":{"gitId":"twothicc"},"content":"            case \"E\":","lastModifiedDate":"2021-08-20"},{"lineNumber":158,"author":{"gitId":"twothicc"},"content":"                LocalDate at \u003d Parser.dateToLocalDate(splitSaveString[3]);","lastModifiedDate":"2021-09-05"},{"lineNumber":159,"author":{"gitId":"twothicc"},"content":"                task \u003d new Event(description, at);","lastModifiedDate":"2021-08-20"},{"lineNumber":160,"author":{"gitId":"twothicc"},"content":"                break;","lastModifiedDate":"2021-08-20"},{"lineNumber":161,"author":{"gitId":"twothicc"},"content":"            case \"P\":","lastModifiedDate":"2021-09-05"},{"lineNumber":162,"author":{"gitId":"twothicc"},"content":"                LocalDate[] startEndDates \u003d savedPeriodToLocalDate(splitSaveString[3]);","lastModifiedDate":"2021-09-05"},{"lineNumber":163,"author":{"gitId":"twothicc"},"content":"                LocalDate startDate \u003d startEndDates[0];","lastModifiedDate":"2021-09-05"},{"lineNumber":164,"author":{"gitId":"twothicc"},"content":"                LocalDate endDate \u003d startEndDates[1];","lastModifiedDate":"2021-09-05"},{"lineNumber":165,"author":{"gitId":"twothicc"},"content":"                task \u003d new Period(description, startDate, endDate);","lastModifiedDate":"2021-09-05"},{"lineNumber":166,"author":{"gitId":"twothicc"},"content":"                break;","lastModifiedDate":"2021-09-05"},{"lineNumber":167,"author":{"gitId":"twothicc"},"content":"            default:","lastModifiedDate":"2021-08-20"},{"lineNumber":168,"author":{"gitId":"twothicc"},"content":"                throw new CorruptSaveFileException();","lastModifiedDate":"2021-09-04"},{"lineNumber":169,"author":{"gitId":"twothicc"},"content":"            }","lastModifiedDate":"2021-08-20"},{"lineNumber":170,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":171,"author":{"gitId":"twothicc"},"content":"            if (isDone \u003d\u003d 1) {","lastModifiedDate":"2021-08-20"},{"lineNumber":172,"author":{"gitId":"twothicc"},"content":"                task.markAsDone();","lastModifiedDate":"2021-08-20"},{"lineNumber":173,"author":{"gitId":"twothicc"},"content":"            }","lastModifiedDate":"2021-08-20"},{"lineNumber":174,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":175,"author":{"gitId":"twothicc"},"content":"            return task;","lastModifiedDate":"2021-08-20"},{"lineNumber":176,"author":{"gitId":"twothicc"},"content":"        } catch (NumberFormatException | IndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-20"},{"lineNumber":177,"author":{"gitId":"twothicc"},"content":"            throw new CorruptSaveFileException();","lastModifiedDate":"2021-09-04"},{"lineNumber":178,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":179,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":180,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":181,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-09-05"},{"lineNumber":182,"author":{"gitId":"twothicc"},"content":"     * Converts saved period string into a 2 element LocalDate array consisting of start date and end date.","lastModifiedDate":"2021-09-05"},{"lineNumber":183,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-09-05"},{"lineNumber":184,"author":{"gitId":"twothicc"},"content":"     * @param savedPeriodString Saved period string.","lastModifiedDate":"2021-09-05"},{"lineNumber":185,"author":{"gitId":"twothicc"},"content":"     * @return LocalDate array containing 2 elements, start and end date of the time period.","lastModifiedDate":"2021-09-05"},{"lineNumber":186,"author":{"gitId":"twothicc"},"content":"     * @throws InvalidDateTimeFormatException If saved date strings cannot be converted to LocalDate.","lastModifiedDate":"2021-09-05"},{"lineNumber":187,"author":{"gitId":"twothicc"},"content":"     * @throws CorruptSaveFileException If saved period String is saved in a wrong format.","lastModifiedDate":"2021-09-05"},{"lineNumber":188,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-09-05"},{"lineNumber":189,"author":{"gitId":"twothicc"},"content":"    private static LocalDate[] savedPeriodToLocalDate(String savedPeriodString) throws DukeException {","lastModifiedDate":"2021-09-05"},{"lineNumber":190,"author":{"gitId":"twothicc"},"content":"        String[] split \u003d savedPeriodString.split(PERIOD_SEPARATOR);","lastModifiedDate":"2021-09-05"},{"lineNumber":191,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":192,"author":{"gitId":"twothicc"},"content":"        // If time period cannot be split into 2 by the PERIOD_SEPARATOR, then save file is corrupted.","lastModifiedDate":"2021-09-05"},{"lineNumber":193,"author":{"gitId":"twothicc"},"content":"        if (split.length !\u003d 2) {","lastModifiedDate":"2021-09-05"},{"lineNumber":194,"author":{"gitId":"twothicc"},"content":"            throw new CorruptSaveFileException();","lastModifiedDate":"2021-09-05"},{"lineNumber":195,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-09-05"},{"lineNumber":196,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":197,"author":{"gitId":"twothicc"},"content":"        LocalDate startDate \u003d Parser.dateToLocalDate(split[0]);","lastModifiedDate":"2021-09-05"},{"lineNumber":198,"author":{"gitId":"twothicc"},"content":"        LocalDate endDate \u003d Parser.dateToLocalDate(split[1]);","lastModifiedDate":"2021-09-05"},{"lineNumber":199,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":200,"author":{"gitId":"twothicc"},"content":"        return new LocalDate[]{startDate, endDate};","lastModifiedDate":"2021-09-05"},{"lineNumber":201,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-09-05"},{"lineNumber":202,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":203,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":204,"author":{"gitId":"twothicc"},"content":"     * Reads tasks from specified file and returns a TaskList containing the retrieved tasks.","lastModifiedDate":"2021-08-22"},{"lineNumber":205,"author":{"gitId":"twothicc"},"content":"     * Doubles down as an initializer for the save file if the data directory and the save file are missing.","lastModifiedDate":"2021-08-22"},{"lineNumber":206,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":207,"author":{"gitId":"twothicc"},"content":"     * @return TaskList containing retrieved tasks.","lastModifiedDate":"2021-08-22"},{"lineNumber":208,"author":{"gitId":"twothicc"},"content":"     * @throws CannotReadFileException If there are errors reading the file.","lastModifiedDate":"2021-09-04"},{"lineNumber":209,"author":{"gitId":"twothicc"},"content":"     * @throws DukeException If underlying methods fail.","lastModifiedDate":"2021-09-04"},{"lineNumber":210,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":211,"author":{"gitId":"twothicc"},"content":"    public TaskList readTasksFromData() throws DukeException {","lastModifiedDate":"2021-08-21"},{"lineNumber":212,"author":{"gitId":"twothicc"},"content":"        // Initialize an ArrayList for duke.task.Task objects.","lastModifiedDate":"2021-08-21"},{"lineNumber":213,"author":{"gitId":"twothicc"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-20"},{"lineNumber":214,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":215,"author":{"gitId":"twothicc"},"content":"        // Get absolute path to save file.","lastModifiedDate":"2021-08-20"},{"lineNumber":216,"author":{"gitId":"twothicc"},"content":"        String cwd \u003d System.getProperty(\"user.dir\");","lastModifiedDate":"2021-08-20"},{"lineNumber":217,"author":{"gitId":"twothicc"},"content":"        Path absolutePathToSaveFile \u003d Paths.get(cwd, \"data\", this.saveFileName);","lastModifiedDate":"2021-08-28"},{"lineNumber":218,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":219,"author":{"gitId":"twothicc"},"content":"        // Check if save file exists.","lastModifiedDate":"2021-08-20"},{"lineNumber":220,"author":{"gitId":"twothicc"},"content":"        boolean isSaveFileExist \u003d Files.exists(absolutePathToSaveFile);","lastModifiedDate":"2021-08-20"},{"lineNumber":221,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":222,"author":{"gitId":"twothicc"},"content":"        try {","lastModifiedDate":"2021-08-20"},{"lineNumber":223,"author":{"gitId":"twothicc"},"content":"            // If save file does not exist, create save file.","lastModifiedDate":"2021-09-14"},{"lineNumber":224,"author":{"gitId":"twothicc"},"content":"            if (!isSaveFileExist) {","lastModifiedDate":"2021-08-20"},{"lineNumber":225,"author":{"gitId":"twothicc"},"content":"                saveTasksToData(new TaskList(tasks));","lastModifiedDate":"2021-08-21"},{"lineNumber":226,"author":{"gitId":"twothicc"},"content":"            }","lastModifiedDate":"2021-08-20"},{"lineNumber":227,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":228,"author":{"gitId":"twothicc"},"content":"            // Read from save file using streams.","lastModifiedDate":"2021-09-04"},{"lineNumber":229,"author":{"gitId":"twothicc"},"content":"            List\u003cString\u003e rawTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-04"},{"lineNumber":230,"author":{"gitId":"twothicc"},"content":"            Stream\u003cString\u003e lines \u003d Files.lines(absolutePathToSaveFile);","lastModifiedDate":"2021-09-04"},{"lineNumber":231,"author":{"gitId":"twothicc"},"content":"            lines.forEachOrdered(rawTasks::add);","lastModifiedDate":"2021-09-04"},{"lineNumber":232,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":233,"author":{"gitId":"twothicc"},"content":"            // Parse each line into a duke.task.Task object and save to tasks.","lastModifiedDate":"2021-08-21"},{"lineNumber":234,"author":{"gitId":"twothicc"},"content":"            for (int i \u003d 0; i \u003c rawTasks.size(); i++) {","lastModifiedDate":"2021-08-20"},{"lineNumber":235,"author":{"gitId":"twothicc"},"content":"                Task task \u003d parseSaveFormat(rawTasks.get(i));","lastModifiedDate":"2021-08-20"},{"lineNumber":236,"author":{"gitId":"twothicc"},"content":"                tasks.add(task);","lastModifiedDate":"2021-08-20"},{"lineNumber":237,"author":{"gitId":"twothicc"},"content":"            }","lastModifiedDate":"2021-08-20"},{"lineNumber":238,"author":{"gitId":"twothicc"},"content":"        } catch (IOException ioException) {","lastModifiedDate":"2021-08-20"},{"lineNumber":239,"author":{"gitId":"twothicc"},"content":"            throw new CannotReadFileException();","lastModifiedDate":"2021-09-04"},{"lineNumber":240,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":241,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":242,"author":{"gitId":"twothicc"},"content":"        return new TaskList(tasks);","lastModifiedDate":"2021-08-21"},{"lineNumber":243,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":244,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":245,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":246,"author":{"gitId":"twothicc"},"content":"     * Saves tasks to specified file.","lastModifiedDate":"2021-08-22"},{"lineNumber":247,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":248,"author":{"gitId":"twothicc"},"content":"     * @param taskList TaskList containing the tasks to be saved to specified file.","lastModifiedDate":"2021-08-22"},{"lineNumber":249,"author":{"gitId":"twothicc"},"content":"     * @throws CannotSaveFileException If tasks cannot be written to save file.","lastModifiedDate":"2021-09-04"},{"lineNumber":250,"author":{"gitId":"twothicc"},"content":"     * @throws DukeException If underlying methods fail.","lastModifiedDate":"2021-09-04"},{"lineNumber":251,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":252,"author":{"gitId":"twothicc"},"content":"    public void saveTasksToData(TaskList taskList) throws DukeException {","lastModifiedDate":"2021-08-20"},{"lineNumber":253,"author":{"gitId":"twothicc"},"content":"        // Extracts ArrayList from duke.TaskList object.","lastModifiedDate":"2021-08-21"},{"lineNumber":254,"author":{"gitId":"twothicc"},"content":"        ArrayList\u003cTask\u003e tasks \u003d taskList.getTasks();","lastModifiedDate":"2021-08-20"},{"lineNumber":255,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":256,"author":{"gitId":"twothicc"},"content":"        // Get the absolute path to data subdirectory of project directory.","lastModifiedDate":"2021-08-20"},{"lineNumber":257,"author":{"gitId":"twothicc"},"content":"        String cwd \u003d System.getProperty(\"user.dir\");","lastModifiedDate":"2021-08-20"},{"lineNumber":258,"author":{"gitId":"twothicc"},"content":"        Path absolutePathToDataDir \u003d Paths.get(cwd, \"data\");","lastModifiedDate":"2021-08-20"},{"lineNumber":259,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":260,"author":{"gitId":"twothicc"},"content":"        // Check if data directory exists.","lastModifiedDate":"2021-08-20"},{"lineNumber":261,"author":{"gitId":"twothicc"},"content":"        boolean isDirectoryExist \u003d Files.exists(absolutePathToDataDir);","lastModifiedDate":"2021-08-20"},{"lineNumber":262,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":263,"author":{"gitId":"twothicc"},"content":"        try {","lastModifiedDate":"2021-08-20"},{"lineNumber":264,"author":{"gitId":"twothicc"},"content":"            // If data directory does not exist, create one.","lastModifiedDate":"2021-08-20"},{"lineNumber":265,"author":{"gitId":"twothicc"},"content":"            if (!isDirectoryExist) {","lastModifiedDate":"2021-08-20"},{"lineNumber":266,"author":{"gitId":"twothicc"},"content":"                Files.createDirectory(absolutePathToDataDir);","lastModifiedDate":"2021-08-20"},{"lineNumber":267,"author":{"gitId":"twothicc"},"content":"            }","lastModifiedDate":"2021-08-20"},{"lineNumber":268,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":269,"author":{"gitId":"twothicc"},"content":"            // Get absolute path to save file.","lastModifiedDate":"2021-08-20"},{"lineNumber":270,"author":{"gitId":"twothicc"},"content":"            Path absolutePathToSaveFile \u003d Paths.get(absolutePathToDataDir.toString(), this.saveFileName);","lastModifiedDate":"2021-08-28"},{"lineNumber":271,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":272,"author":{"gitId":"twothicc"},"content":"            // Check if file exists.","lastModifiedDate":"2021-08-20"},{"lineNumber":273,"author":{"gitId":"twothicc"},"content":"            boolean isSaveFileExist \u003d Files.exists(absolutePathToSaveFile);","lastModifiedDate":"2021-08-20"},{"lineNumber":274,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":275,"author":{"gitId":"twothicc"},"content":"            // If file does not exist, create it.","lastModifiedDate":"2021-08-20"},{"lineNumber":276,"author":{"gitId":"twothicc"},"content":"            if (!isSaveFileExist) {","lastModifiedDate":"2021-08-20"},{"lineNumber":277,"author":{"gitId":"twothicc"},"content":"                Files.createFile(absolutePathToSaveFile);","lastModifiedDate":"2021-08-20"},{"lineNumber":278,"author":{"gitId":"twothicc"},"content":"            }","lastModifiedDate":"2021-08-20"},{"lineNumber":279,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":280,"author":{"gitId":"twothicc"},"content":"            // Stop if there are no tasks to be saved.","lastModifiedDate":"2021-08-20"},{"lineNumber":281,"author":{"gitId":"twothicc"},"content":"            if (tasks.size() \u003d\u003d 0) {","lastModifiedDate":"2021-08-20"},{"lineNumber":282,"author":{"gitId":"twothicc"},"content":"                return;","lastModifiedDate":"2021-08-20"},{"lineNumber":283,"author":{"gitId":"twothicc"},"content":"            }","lastModifiedDate":"2021-08-20"},{"lineNumber":284,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":285,"author":{"gitId":"twothicc"},"content":"            // Generate string to be saved to save file.","lastModifiedDate":"2021-08-20"},{"lineNumber":286,"author":{"gitId":"twothicc"},"content":"            StringBuilder stringBuilder \u003d new StringBuilder();","lastModifiedDate":"2021-08-20"},{"lineNumber":287,"author":{"gitId":"twothicc"},"content":"            for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2021-08-20"},{"lineNumber":288,"author":{"gitId":"twothicc"},"content":"                String save \u003d toSaveFormat(tasks.get(i));","lastModifiedDate":"2021-08-20"},{"lineNumber":289,"author":{"gitId":"twothicc"},"content":"                stringBuilder.append(save);","lastModifiedDate":"2021-08-20"},{"lineNumber":290,"author":{"gitId":"twothicc"},"content":"                // If last task in tasks, no need to append newline.","lastModifiedDate":"2021-08-20"},{"lineNumber":291,"author":{"gitId":"twothicc"},"content":"                if (i \u003c (tasks.size() - 1)) {","lastModifiedDate":"2021-08-20"},{"lineNumber":292,"author":{"gitId":"twothicc"},"content":"                    stringBuilder.append(\"\\n\");","lastModifiedDate":"2021-08-20"},{"lineNumber":293,"author":{"gitId":"twothicc"},"content":"                    ;","lastModifiedDate":"2021-08-20"},{"lineNumber":294,"author":{"gitId":"twothicc"},"content":"                }","lastModifiedDate":"2021-08-20"},{"lineNumber":295,"author":{"gitId":"twothicc"},"content":"            }","lastModifiedDate":"2021-08-20"},{"lineNumber":296,"author":{"gitId":"twothicc"},"content":"            String textToSave \u003d stringBuilder.toString();","lastModifiedDate":"2021-08-20"},{"lineNumber":297,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":298,"author":{"gitId":"twothicc"},"content":"            // Write to save file.","lastModifiedDate":"2021-08-20"},{"lineNumber":299,"author":{"gitId":"twothicc"},"content":"            byte[] textToSaveToBytes \u003d textToSave.getBytes();","lastModifiedDate":"2021-08-20"},{"lineNumber":300,"author":{"gitId":"twothicc"},"content":"            Files.write(absolutePathToSaveFile, textToSaveToBytes);","lastModifiedDate":"2021-08-20"},{"lineNumber":301,"author":{"gitId":"twothicc"},"content":"        } catch (IOException ioException) {","lastModifiedDate":"2021-08-20"},{"lineNumber":302,"author":{"gitId":"twothicc"},"content":"            throw new CannotSaveFileException();","lastModifiedDate":"2021-09-04"},{"lineNumber":303,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":304,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":305,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-08-20"}],"authorContributionMap":{"twothicc":305}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-20"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-27"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"/**","lastModifiedDate":"2021-08-20"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":" * Represent storage for tasks.","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":" */","lastModifiedDate":"2021-08-20"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"public class TaskList {","lastModifiedDate":"2021-08-20"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"    private final ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2021-08-27"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"     * Constructor for TaskList.","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"     * Creates a TaskList with an empty ArrayList of Tasks.","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"    public TaskList() {","lastModifiedDate":"2021-08-21"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-20"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":21,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"twothicc"},"content":"     * Constructor for TaskList.","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"twothicc"},"content":"     * Creates a TaskList containing the tasks input.","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"twothicc"},"content":"     * @param tasks ArrayList of Tasks to initialize TaskList with.","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"twothicc"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2021-08-21"},{"lineNumber":28,"author":{"gitId":"twothicc"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2021-08-20"},{"lineNumber":29,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":30,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":31,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"twothicc"},"content":"     * Returns the count of Tasks stored.","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"twothicc"},"content":"     * @return count of Tasks stored.","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"twothicc"},"content":"    public int size() {","lastModifiedDate":"2021-08-21"},{"lineNumber":37,"author":{"gitId":"twothicc"},"content":"        return this.tasks.size();","lastModifiedDate":"2021-08-21"},{"lineNumber":38,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":39,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":40,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"twothicc"},"content":"     * Returns Task at index.","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"twothicc"},"content":"     * Index is 0-based.","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"twothicc"},"content":"     * @param idx Index of Task to be returned.","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"twothicc"},"content":"     * @return Task stored at index.","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":47,"author":{"gitId":"twothicc"},"content":"    public Task get(int idx) {","lastModifiedDate":"2021-08-21"},{"lineNumber":48,"author":{"gitId":"twothicc"},"content":"        return this.tasks.get(idx);","lastModifiedDate":"2021-08-21"},{"lineNumber":49,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":50,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":51,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":52,"author":{"gitId":"twothicc"},"content":"     * Adds Task to TaskList.","lastModifiedDate":"2021-08-22"},{"lineNumber":53,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":54,"author":{"gitId":"twothicc"},"content":"     * @param task Task to be added.","lastModifiedDate":"2021-08-22"},{"lineNumber":55,"author":{"gitId":"twothicc"},"content":"     * @return The added Task.","lastModifiedDate":"2021-08-22"},{"lineNumber":56,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":57,"author":{"gitId":"twothicc"},"content":"    public Task add(Task task) {","lastModifiedDate":"2021-08-21"},{"lineNumber":58,"author":{"gitId":"twothicc"},"content":"        this.tasks.add(task);","lastModifiedDate":"2021-08-21"},{"lineNumber":59,"author":{"gitId":"twothicc"},"content":"        return task;","lastModifiedDate":"2021-08-21"},{"lineNumber":60,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":61,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":62,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":63,"author":{"gitId":"twothicc"},"content":"     * Removes Task from TaskList.","lastModifiedDate":"2021-08-22"},{"lineNumber":64,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":65,"author":{"gitId":"twothicc"},"content":"     * @param idx Index of Task to be removed.","lastModifiedDate":"2021-08-22"},{"lineNumber":66,"author":{"gitId":"twothicc"},"content":"     * @return The removed Task.","lastModifiedDate":"2021-08-22"},{"lineNumber":67,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":68,"author":{"gitId":"twothicc"},"content":"    public Task remove(int idx) {","lastModifiedDate":"2021-08-21"},{"lineNumber":69,"author":{"gitId":"twothicc"},"content":"        Task tempTask \u003d this.tasks.get(idx);","lastModifiedDate":"2021-08-20"},{"lineNumber":70,"author":{"gitId":"twothicc"},"content":"        this.tasks.remove(idx);","lastModifiedDate":"2021-08-20"},{"lineNumber":71,"author":{"gitId":"twothicc"},"content":"        return tempTask;","lastModifiedDate":"2021-08-21"},{"lineNumber":72,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":73,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":74,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":75,"author":{"gitId":"twothicc"},"content":"     * Indicates whether another object is equals to this TaskList.","lastModifiedDate":"2021-08-22"},{"lineNumber":76,"author":{"gitId":"twothicc"},"content":"     * Two TaskList are only equal if they are of the same length and if the elements of both TaskList","lastModifiedDate":"2021-08-22"},{"lineNumber":77,"author":{"gitId":"twothicc"},"content":"     * at every index are equal to each other.","lastModifiedDate":"2021-08-22"},{"lineNumber":78,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":79,"author":{"gitId":"twothicc"},"content":"     * @param other Other object to be compared to.","lastModifiedDate":"2021-08-22"},{"lineNumber":80,"author":{"gitId":"twothicc"},"content":"     * @return A boolean indicating whether the other object is equal to this TaskList.","lastModifiedDate":"2021-08-22"},{"lineNumber":81,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":82,"author":{"gitId":"twothicc"},"content":"    public boolean equals(TaskList other) {","lastModifiedDate":"2021-08-21"},{"lineNumber":83,"author":{"gitId":"twothicc"},"content":"        return this.tasks.equals(other.getTasks());","lastModifiedDate":"2021-08-21"},{"lineNumber":84,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":85,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":86,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":87,"author":{"gitId":"twothicc"},"content":"     * Returns the ArrayList of Tasks contained by this TaskList.","lastModifiedDate":"2021-08-22"},{"lineNumber":88,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":89,"author":{"gitId":"twothicc"},"content":"     * @return ArrayList of Tasks contained by this TaskList.","lastModifiedDate":"2021-08-22"},{"lineNumber":90,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":91,"author":{"gitId":"twothicc"},"content":"    public ArrayList\u003cTask\u003e getTasks() {","lastModifiedDate":"2021-08-21"},{"lineNumber":92,"author":{"gitId":"twothicc"},"content":"        return this.tasks;","lastModifiedDate":"2021-08-21"},{"lineNumber":93,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":94,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-08-20"}],"authorContributionMap":{"twothicc":94}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-21"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"/**","lastModifiedDate":"2021-08-20"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":" * Stores commands, descriptors, responses and error messages used by duke.Duke chatbot.","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":" */","lastModifiedDate":"2021-08-20"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"public class Ui {","lastModifiedDate":"2021-08-20"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"    /** Enums for Duke chatbot descriptors */","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"    public enum Descriptors {","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"        AT(\"at\"),","lastModifiedDate":"2021-08-20"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"        BY(\"by\"),","lastModifiedDate":"2021-09-05"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"        WITHIN(\"within\");","lastModifiedDate":"2021-09-05"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"        private final String descriptor;","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"        Descriptors(String descriptor) {","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"            this.descriptor \u003d descriptor;","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":21,"author":{"gitId":"twothicc"},"content":"        public String getDescriptor() {","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"twothicc"},"content":"            return this.descriptor;","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":24,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":25,"author":{"gitId":"twothicc"},"content":"        public int getLength() {","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"twothicc"},"content":"            return this.descriptor.length();","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":28,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":29,"author":{"gitId":"twothicc"},"content":"        @Override","lastModifiedDate":"2021-08-20"},{"lineNumber":30,"author":{"gitId":"twothicc"},"content":"        public String toString() {","lastModifiedDate":"2021-08-20"},{"lineNumber":31,"author":{"gitId":"twothicc"},"content":"            return this.descriptor;","lastModifiedDate":"2021-08-28"},{"lineNumber":32,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":33,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":34,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":35,"author":{"gitId":"twothicc"},"content":"    /** Enums for Duke chatbot commands */","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"twothicc"},"content":"    public enum UserCommands {","lastModifiedDate":"2021-09-04"},{"lineNumber":37,"author":{"gitId":"twothicc"},"content":"        TODO(\"todo\"),","lastModifiedDate":"2021-08-20"},{"lineNumber":38,"author":{"gitId":"twothicc"},"content":"        DEADLINE(\"deadline\"),","lastModifiedDate":"2021-08-20"},{"lineNumber":39,"author":{"gitId":"twothicc"},"content":"        EVENT(\"event\"),","lastModifiedDate":"2021-08-20"},{"lineNumber":40,"author":{"gitId":"twothicc"},"content":"        DONE(\"done\"),","lastModifiedDate":"2021-08-20"},{"lineNumber":41,"author":{"gitId":"twothicc"},"content":"        DELETE(\"delete\"),","lastModifiedDate":"2021-08-20"},{"lineNumber":42,"author":{"gitId":"twothicc"},"content":"        LIST(\"list\"),","lastModifiedDate":"2021-08-20"},{"lineNumber":43,"author":{"gitId":"twothicc"},"content":"        DATE(\"date\"),","lastModifiedDate":"2021-08-20"},{"lineNumber":44,"author":{"gitId":"twothicc"},"content":"        FIND(\"find\"),","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"twothicc"},"content":"        BYE(\"bye\"),","lastModifiedDate":"2021-09-05"},{"lineNumber":46,"author":{"gitId":"twothicc"},"content":"        PERIOD(\"period\");","lastModifiedDate":"2021-09-05"},{"lineNumber":47,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":48,"author":{"gitId":"twothicc"},"content":"        private final String command;","lastModifiedDate":"2021-08-28"},{"lineNumber":49,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":50,"author":{"gitId":"twothicc"},"content":"        UserCommands(String command) {","lastModifiedDate":"2021-09-04"},{"lineNumber":51,"author":{"gitId":"twothicc"},"content":"            this.command \u003d command;","lastModifiedDate":"2021-08-28"},{"lineNumber":52,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":53,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":54,"author":{"gitId":"twothicc"},"content":"        public String getCommand() {","lastModifiedDate":"2021-08-28"},{"lineNumber":55,"author":{"gitId":"twothicc"},"content":"            return this.command;","lastModifiedDate":"2021-08-28"},{"lineNumber":56,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":57,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":58,"author":{"gitId":"twothicc"},"content":"        public int getLength() {","lastModifiedDate":"2021-08-28"},{"lineNumber":59,"author":{"gitId":"twothicc"},"content":"            return this.command.length();","lastModifiedDate":"2021-08-28"},{"lineNumber":60,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":61,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":62,"author":{"gitId":"twothicc"},"content":"        @Override","lastModifiedDate":"2021-08-20"},{"lineNumber":63,"author":{"gitId":"twothicc"},"content":"        public String toString() {","lastModifiedDate":"2021-08-20"},{"lineNumber":64,"author":{"gitId":"twothicc"},"content":"            return this.command;","lastModifiedDate":"2021-08-28"},{"lineNumber":65,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":66,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":67,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":68,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":69,"author":{"gitId":"twothicc"},"content":"     * Returns the standard welcome response.","lastModifiedDate":"2021-08-29"},{"lineNumber":70,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":71,"author":{"gitId":"twothicc"},"content":"     * @return Standard welcome response.","lastModifiedDate":"2021-08-29"},{"lineNumber":72,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":73,"author":{"gitId":"twothicc"},"content":"    public String getWelcomeMessage() {","lastModifiedDate":"2021-09-01"},{"lineNumber":74,"author":{"gitId":"twothicc"},"content":"        return \"Hello! I\u0027m Duke\\nWhat can I do for you?\";","lastModifiedDate":"2021-08-29"},{"lineNumber":75,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":76,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":77,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":78,"author":{"gitId":"twothicc"},"content":"     * Returns the standard goodbye response.","lastModifiedDate":"2021-08-29"},{"lineNumber":79,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":80,"author":{"gitId":"twothicc"},"content":"     * @return Standard goodbye response.","lastModifiedDate":"2021-08-29"},{"lineNumber":81,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":82,"author":{"gitId":"twothicc"},"content":"    public String getGoodbyeMessage() {","lastModifiedDate":"2021-09-01"},{"lineNumber":83,"author":{"gitId":"twothicc"},"content":"        return \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2021-08-29"},{"lineNumber":84,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":85,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":86,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":87,"author":{"gitId":"twothicc"},"content":"     * Returns the standard response for mark success and the marked task.","lastModifiedDate":"2021-08-29"},{"lineNumber":88,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":89,"author":{"gitId":"twothicc"},"content":"     * @param task Task marked as done.","lastModifiedDate":"2021-08-22"},{"lineNumber":90,"author":{"gitId":"twothicc"},"content":"     * @return Standard response for mark success and the marked task.","lastModifiedDate":"2021-08-29"},{"lineNumber":91,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":92,"author":{"gitId":"twothicc"},"content":"    public String getMarkSuccessMessage(Task task) {","lastModifiedDate":"2021-09-01"},{"lineNumber":93,"author":{"gitId":"twothicc"},"content":"        return \"Nice! I\u0027ve marked this task as done:\" + \"\\n\" + task.toString();","lastModifiedDate":"2021-08-29"},{"lineNumber":94,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":95,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":96,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":97,"author":{"gitId":"twothicc"},"content":"     * Returns the standard response for delete success, followed by the","lastModifiedDate":"2021-08-29"},{"lineNumber":98,"author":{"gitId":"twothicc"},"content":"     * deleted task and the new total count of tasks.","lastModifiedDate":"2021-08-22"},{"lineNumber":99,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":100,"author":{"gitId":"twothicc"},"content":"     * @param task The deleted task.","lastModifiedDate":"2021-08-22"},{"lineNumber":101,"author":{"gitId":"twothicc"},"content":"     * @param size The new total count of tasks.","lastModifiedDate":"2021-08-22"},{"lineNumber":102,"author":{"gitId":"twothicc"},"content":"     * @return Standard response for delete success, followed by the deleted task and the new total count of tasks.","lastModifiedDate":"2021-08-29"},{"lineNumber":103,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":104,"author":{"gitId":"twothicc"},"content":"    public String getDeleteSuccessMessage(Task task, int size) {","lastModifiedDate":"2021-09-01"},{"lineNumber":105,"author":{"gitId":"twothicc"},"content":"        return \"Noted. I\u0027ve removed this task:\" + \"\\n\" + task.toString() + \"\\n\"","lastModifiedDate":"2021-08-29"},{"lineNumber":106,"author":{"gitId":"twothicc"},"content":"                + \"Now you have \" + size + \" tasks in the list.\";","lastModifiedDate":"2021-08-29"},{"lineNumber":107,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":108,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":109,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":110,"author":{"gitId":"twothicc"},"content":"     * Returns the standard response for add success, followed by the","lastModifiedDate":"2021-08-29"},{"lineNumber":111,"author":{"gitId":"twothicc"},"content":"     * task added and the new total count of tasks.","lastModifiedDate":"2021-08-22"},{"lineNumber":112,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":113,"author":{"gitId":"twothicc"},"content":"     * @param task The added task.","lastModifiedDate":"2021-08-22"},{"lineNumber":114,"author":{"gitId":"twothicc"},"content":"     * @param size The new total count of tasks.","lastModifiedDate":"2021-08-22"},{"lineNumber":115,"author":{"gitId":"twothicc"},"content":"     * @return standard response for add success, followed by the task added and the new total count of tasks.","lastModifiedDate":"2021-08-29"},{"lineNumber":116,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":117,"author":{"gitId":"twothicc"},"content":"    public String getAddSuccessMessage(Task task, int size) {","lastModifiedDate":"2021-09-01"},{"lineNumber":118,"author":{"gitId":"twothicc"},"content":"        return \"Got it. I have added this task:\" + \"\\n\" + task.toString() + \"\\n\"","lastModifiedDate":"2021-08-29"},{"lineNumber":119,"author":{"gitId":"twothicc"},"content":"                + \"Now you have \" + size + \" tasks in the list.\";","lastModifiedDate":"2021-08-29"},{"lineNumber":120,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":121,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":122,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":123,"author":{"gitId":"twothicc"},"content":"     * Returns the standard response for listing tasks.","lastModifiedDate":"2021-08-29"},{"lineNumber":124,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":125,"author":{"gitId":"twothicc"},"content":"     * @return Standard response for listing tasks.","lastModifiedDate":"2021-08-29"},{"lineNumber":126,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":127,"author":{"gitId":"twothicc"},"content":"    public String getListSuccessMessage() {","lastModifiedDate":"2021-09-01"},{"lineNumber":128,"author":{"gitId":"twothicc"},"content":"        return \"Here are the tasks in your list:\";","lastModifiedDate":"2021-08-29"},{"lineNumber":129,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":130,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":131,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":132,"author":{"gitId":"twothicc"},"content":"     * Returns the standard response for success in finding tasks by date.","lastModifiedDate":"2021-08-29"},{"lineNumber":133,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":134,"author":{"gitId":"twothicc"},"content":"     * @param formattedDateString Date being searched for.","lastModifiedDate":"2021-08-22"},{"lineNumber":135,"author":{"gitId":"twothicc"},"content":"     * @param counter Total count of tasks found to fall on date being searched for.","lastModifiedDate":"2021-08-22"},{"lineNumber":136,"author":{"gitId":"twothicc"},"content":"     * @param deadlines Total count of Deadlines found to fall on date being searched for.","lastModifiedDate":"2021-08-22"},{"lineNumber":137,"author":{"gitId":"twothicc"},"content":"     * @param events Total count of Events found to fall on date being searched for.","lastModifiedDate":"2021-08-22"},{"lineNumber":138,"author":{"gitId":"twothicc"},"content":"     * @param periods Total count of Periods with time periods within which the date being searched for falls within.","lastModifiedDate":"2021-09-05"},{"lineNumber":139,"author":{"gitId":"twothicc"},"content":"     * @param foundTasks String accumulation of matching tasks.","lastModifiedDate":"2021-09-04"},{"lineNumber":140,"author":{"gitId":"twothicc"},"content":"     * @return Standard response for success in finding tasks by date.","lastModifiedDate":"2021-08-29"},{"lineNumber":141,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":142,"author":{"gitId":"twothicc"},"content":"    public String getDateListSuccessMessage(String formattedDateString,","lastModifiedDate":"2021-09-05"},{"lineNumber":143,"author":{"gitId":"twothicc"},"content":"            int counter, int deadlines, int events, int periods,","lastModifiedDate":"2021-09-05"},{"lineNumber":144,"author":{"gitId":"twothicc"},"content":"            String foundTasks) {","lastModifiedDate":"2021-09-04"},{"lineNumber":145,"author":{"gitId":"twothicc"},"content":"        String start \u003d \"Here are the Deadlines, Events or Periods that fall on \" + formattedDateString + \":\\n\";","lastModifiedDate":"2021-09-05"},{"lineNumber":146,"author":{"gitId":"twothicc"},"content":"        String end \u003d \"A total of \"","lastModifiedDate":"2021-09-05"},{"lineNumber":147,"author":{"gitId":"twothicc"},"content":"                + counter + \" tasks (\"","lastModifiedDate":"2021-09-05"},{"lineNumber":148,"author":{"gitId":"twothicc"},"content":"                + deadlines + \" deadlines, \"","lastModifiedDate":"2021-09-05"},{"lineNumber":149,"author":{"gitId":"twothicc"},"content":"                + events + \" events and \"","lastModifiedDate":"2021-09-05"},{"lineNumber":150,"author":{"gitId":"twothicc"},"content":"                + periods + \" periods) fall on \"","lastModifiedDate":"2021-09-05"},{"lineNumber":151,"author":{"gitId":"twothicc"},"content":"                + formattedDateString;","lastModifiedDate":"2021-09-05"},{"lineNumber":152,"author":{"gitId":"twothicc"},"content":"        return start + foundTasks + end;","lastModifiedDate":"2021-09-04"},{"lineNumber":153,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":154,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":155,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":156,"author":{"gitId":"twothicc"},"content":"     * Returns the standard response for success in finding tasks that match a search keyword.","lastModifiedDate":"2021-08-29"},{"lineNumber":157,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":158,"author":{"gitId":"twothicc"},"content":"     * @param counter Total count of tasks found to match the search keyword.","lastModifiedDate":"2021-08-22"},{"lineNumber":159,"author":{"gitId":"twothicc"},"content":"     * @param keyword Search keyword being searched for.","lastModifiedDate":"2021-08-22"},{"lineNumber":160,"author":{"gitId":"twothicc"},"content":"     * @param foundTasks String accumulation of matching tasks.","lastModifiedDate":"2021-09-04"},{"lineNumber":161,"author":{"gitId":"twothicc"},"content":"     * @return Standard response for success in finding tasks that match a search keyword.","lastModifiedDate":"2021-09-04"},{"lineNumber":162,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":163,"author":{"gitId":"twothicc"},"content":"    public String getFindSuccessMessage(int counter, String keyword, String foundTasks) {","lastModifiedDate":"2021-09-04"},{"lineNumber":164,"author":{"gitId":"twothicc"},"content":"        String start \u003d \"Here are the matching tasks in your list:\\n\";","lastModifiedDate":"2021-09-04"},{"lineNumber":165,"author":{"gitId":"twothicc"},"content":"        String end \u003d \"A total of \" + counter","lastModifiedDate":"2021-09-04"},{"lineNumber":166,"author":{"gitId":"twothicc"},"content":"                + \" tasks in your list match your search keyword, \" + keyword + \".\";","lastModifiedDate":"2021-08-29"},{"lineNumber":167,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":168,"author":{"gitId":"twothicc"},"content":"        return start + foundTasks + end;","lastModifiedDate":"2021-09-04"},{"lineNumber":169,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":170,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-08-20"}],"authorContributionMap":{"twothicc":170}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke.command;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"import duke.DukeResponse;","lastModifiedDate":"2021-09-10"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"import duke.Parser;","lastModifiedDate":"2021-08-21"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"import duke.Storable;","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"import duke.Ui.Descriptors;","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"import duke.Ui.UserCommands;","lastModifiedDate":"2021-09-04"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-09-04"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"import duke.exception.InvalidUserCommandException;","lastModifiedDate":"2021-09-04"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"import duke.exception.MissingTaskDescriptionException;","lastModifiedDate":"2021-09-04"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-08-21"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"import duke.task.Event;","lastModifiedDate":"2021-08-21"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"import duke.task.Period;","lastModifiedDate":"2021-09-05"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"import duke.task.Todo;","lastModifiedDate":"2021-08-21"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":"/**","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"twothicc"},"content":" * Represents a command that can be executed to add a task based on user input,","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"twothicc"},"content":" * print task added and new total count of tasks, then save tasks to storage.","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"twothicc"},"content":" */","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"twothicc"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2021-08-21"},{"lineNumber":25,"author":{"gitId":"twothicc"},"content":"    private final String userInput;","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":27,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"twothicc"},"content":"     * Constructor for AddCommand.","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"twothicc"},"content":"     * Creates an AddCommand containing user input.","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"twothicc"},"content":"     * @param userInput User\u0027s input into Duke chatbot.","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"twothicc"},"content":"    public AddCommand(String userInput) {","lastModifiedDate":"2021-08-21"},{"lineNumber":34,"author":{"gitId":"twothicc"},"content":"        this.userInput \u003d userInput;","lastModifiedDate":"2021-08-21"},{"lineNumber":35,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":36,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":37,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"twothicc"},"content":"     * Adds task based on user input into tasks,","lastModifiedDate":"2021-08-29"},{"lineNumber":39,"author":{"gitId":"twothicc"},"content":"     * then returns String describing task added and new total count of tasks.","lastModifiedDate":"2021-08-29"},{"lineNumber":40,"author":{"gitId":"twothicc"},"content":"     * Event is added for user inputs of the form \"event task-descr /at dd/mm/yyyy\".","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"twothicc"},"content":"     * Deadline is added for user inputs of the form \"deadline task-descr /by dd/mm/yyyy\".","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"twothicc"},"content":"     * Todo is added for user inputs of the form \"todo task-descr\".","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"twothicc"},"content":"     * @param tasks TaskList to add task to.","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"twothicc"},"content":"     * @param ui Ui to get enums, response messages and exception messages from.","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"twothicc"},"content":"     * @param separator char separator used to separate task description and time in Event and Deadline.","lastModifiedDate":"2021-08-22"},{"lineNumber":47,"author":{"gitId":"twothicc"},"content":"     * @return String describing task added and new total count of tasks.","lastModifiedDate":"2021-08-29"},{"lineNumber":48,"author":{"gitId":"twothicc"},"content":"     * @throws MissingTaskDescriptionException If description is missing for task to be added.","lastModifiedDate":"2021-09-04"},{"lineNumber":49,"author":{"gitId":"twothicc"},"content":"     * @throws DukeException If underlying methods or checks fail.","lastModifiedDate":"2021-09-04"},{"lineNumber":50,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":51,"author":{"gitId":"twothicc"},"content":"    private String addTask(TaskList tasks, Ui ui, char separator) throws DukeException {","lastModifiedDate":"2021-08-29"},{"lineNumber":52,"author":{"gitId":"twothicc"},"content":"        // Checks for command given in user input.","lastModifiedDate":"2021-08-21"},{"lineNumber":53,"author":{"gitId":"twothicc"},"content":"        UserCommands userCommand;","lastModifiedDate":"2021-09-04"},{"lineNumber":54,"author":{"gitId":"twothicc"},"content":"        if (this.userInput.startsWith(UserCommands.TODO.getCommand())) {","lastModifiedDate":"2021-09-04"},{"lineNumber":55,"author":{"gitId":"twothicc"},"content":"            userCommand \u003d UserCommands.TODO;","lastModifiedDate":"2021-09-04"},{"lineNumber":56,"author":{"gitId":"twothicc"},"content":"        } else if (this.userInput.startsWith(UserCommands.DEADLINE.getCommand())) {","lastModifiedDate":"2021-09-04"},{"lineNumber":57,"author":{"gitId":"twothicc"},"content":"            userCommand \u003d UserCommands.DEADLINE;","lastModifiedDate":"2021-09-04"},{"lineNumber":58,"author":{"gitId":"twothicc"},"content":"        } else if (this.userInput.startsWith(UserCommands.EVENT.getCommand())) {","lastModifiedDate":"2021-09-04"},{"lineNumber":59,"author":{"gitId":"twothicc"},"content":"            userCommand \u003d UserCommands.EVENT;","lastModifiedDate":"2021-09-04"},{"lineNumber":60,"author":{"gitId":"twothicc"},"content":"        } else if (this.userInput.startsWith(UserCommands.PERIOD.getCommand())) {","lastModifiedDate":"2021-09-05"},{"lineNumber":61,"author":{"gitId":"twothicc"},"content":"            userCommand \u003d UserCommands.PERIOD;","lastModifiedDate":"2021-09-05"},{"lineNumber":62,"author":{"gitId":"twothicc"},"content":"        } else {","lastModifiedDate":"2021-08-21"},{"lineNumber":63,"author":{"gitId":"twothicc"},"content":"            throw new InvalidUserCommandException(this.userInput);","lastModifiedDate":"2021-09-04"},{"lineNumber":64,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":65,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":66,"author":{"gitId":"twothicc"},"content":"        // Preliminary check for any input following command.","lastModifiedDate":"2021-08-22"},{"lineNumber":67,"author":{"gitId":"twothicc"},"content":"        Parser.checkInputValidity(this.userInput, userCommand,","lastModifiedDate":"2021-08-22"},{"lineNumber":68,"author":{"gitId":"twothicc"},"content":"                new MissingTaskDescriptionException(userCommand));","lastModifiedDate":"2021-09-04"},{"lineNumber":69,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":70,"author":{"gitId":"twothicc"},"content":"        String userCommandString \u003d userCommand.getCommand();","lastModifiedDate":"2021-09-04"},{"lineNumber":71,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":72,"author":{"gitId":"twothicc"},"content":"        // Extracts task description.","lastModifiedDate":"2021-08-21"},{"lineNumber":73,"author":{"gitId":"twothicc"},"content":"        String description \u003d this.userInput.substring(userCommandString.length() + 1);","lastModifiedDate":"2021-09-04"},{"lineNumber":74,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":75,"author":{"gitId":"twothicc"},"content":"        // Check empty/whitespace task description.","lastModifiedDate":"2021-09-10"},{"lineNumber":76,"author":{"gitId":"twothicc"},"content":"        if (description.isBlank()) {","lastModifiedDate":"2021-09-10"},{"lineNumber":77,"author":{"gitId":"twothicc"},"content":"            throw new MissingTaskDescriptionException(userCommand);","lastModifiedDate":"2021-09-10"},{"lineNumber":78,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-09-10"},{"lineNumber":79,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":80,"author":{"gitId":"twothicc"},"content":"        // Parses description and adds the corresponding task to tasks.","lastModifiedDate":"2021-08-21"},{"lineNumber":81,"author":{"gitId":"twothicc"},"content":"        if (userCommandString.equals(UserCommands.TODO.getCommand())) {","lastModifiedDate":"2021-09-04"},{"lineNumber":82,"author":{"gitId":"twothicc"},"content":"            tasks.add(new Todo(description));","lastModifiedDate":"2021-08-21"},{"lineNumber":83,"author":{"gitId":"twothicc"},"content":"        } else if (userCommandString.equals(UserCommands.DEADLINE.getCommand())) {","lastModifiedDate":"2021-09-04"},{"lineNumber":84,"author":{"gitId":"twothicc"},"content":"            addDeadline(tasks, separator, description);","lastModifiedDate":"2021-09-10"},{"lineNumber":85,"author":{"gitId":"twothicc"},"content":"        } else if (userCommandString.equals(UserCommands.EVENT.getCommand())) {","lastModifiedDate":"2021-09-05"},{"lineNumber":86,"author":{"gitId":"twothicc"},"content":"            addEvent(tasks, separator, description);","lastModifiedDate":"2021-09-10"},{"lineNumber":87,"author":{"gitId":"twothicc"},"content":"        } else if (userCommandString.equals(UserCommands.PERIOD.getCommand())) {","lastModifiedDate":"2021-09-10"},{"lineNumber":88,"author":{"gitId":"twothicc"},"content":"            addPeriod(tasks, separator, description);","lastModifiedDate":"2021-09-10"},{"lineNumber":89,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-09-10"},{"lineNumber":90,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":91,"author":{"gitId":"twothicc"},"content":"        return ui.getAddSuccessMessage(tasks.get(tasks.size() - 1), tasks.size());","lastModifiedDate":"2021-09-10"},{"lineNumber":92,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-09-10"},{"lineNumber":93,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":94,"author":{"gitId":"twothicc"},"content":"    private void addPeriod(TaskList tasks, char separator, String description) throws DukeException {","lastModifiedDate":"2021-09-10"},{"lineNumber":95,"author":{"gitId":"twothicc"},"content":"        // Parses description into task description and time period.","lastModifiedDate":"2021-09-05"},{"lineNumber":96,"author":{"gitId":"twothicc"},"content":"        String[] descriptions \u003d","lastModifiedDate":"2021-09-05"},{"lineNumber":97,"author":{"gitId":"twothicc"},"content":"                Parser.parseUserDescriptionInput(description, Descriptors.WITHIN, separator, UserCommands.PERIOD);","lastModifiedDate":"2021-09-05"},{"lineNumber":98,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":99,"author":{"gitId":"twothicc"},"content":"        LocalDate[] startEndDates \u003d Parser.periodToLocalDate(descriptions[1]);","lastModifiedDate":"2021-09-05"},{"lineNumber":100,"author":{"gitId":"twothicc"},"content":"        LocalDate startDate \u003d startEndDates[0];","lastModifiedDate":"2021-09-05"},{"lineNumber":101,"author":{"gitId":"twothicc"},"content":"        LocalDate endDate \u003d startEndDates[1];","lastModifiedDate":"2021-09-05"},{"lineNumber":102,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":103,"author":{"gitId":"twothicc"},"content":"        tasks.add(new Period(descriptions[0], startDate, endDate));","lastModifiedDate":"2021-09-05"},{"lineNumber":104,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":105,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":106,"author":{"gitId":"twothicc"},"content":"    private void addEvent(TaskList tasks, char separator, String description) throws DukeException {","lastModifiedDate":"2021-09-10"},{"lineNumber":107,"author":{"gitId":"twothicc"},"content":"        // Parses description into task description and time.","lastModifiedDate":"2021-09-10"},{"lineNumber":108,"author":{"gitId":"twothicc"},"content":"        String[] descriptions \u003d","lastModifiedDate":"2021-09-10"},{"lineNumber":109,"author":{"gitId":"twothicc"},"content":"                Parser.parseUserDescriptionInput(description, Descriptors.AT, separator, UserCommands.EVENT);","lastModifiedDate":"2021-09-10"},{"lineNumber":110,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":111,"author":{"gitId":"twothicc"},"content":"        LocalDate localDate \u003d Parser.dateToLocalDate(descriptions[1]);","lastModifiedDate":"2021-09-10"},{"lineNumber":112,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":113,"author":{"gitId":"twothicc"},"content":"        tasks.add(new Event(descriptions[0], localDate));","lastModifiedDate":"2021-09-10"},{"lineNumber":114,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-09-10"},{"lineNumber":115,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":116,"author":{"gitId":"twothicc"},"content":"    private void addDeadline(TaskList tasks, char separator, String description) throws DukeException {","lastModifiedDate":"2021-09-10"},{"lineNumber":117,"author":{"gitId":"twothicc"},"content":"        // Parses description into task description and time.","lastModifiedDate":"2021-09-10"},{"lineNumber":118,"author":{"gitId":"twothicc"},"content":"        String[] descriptions \u003d","lastModifiedDate":"2021-09-10"},{"lineNumber":119,"author":{"gitId":"twothicc"},"content":"                Parser.parseUserDescriptionInput(description, Descriptors.BY, separator, UserCommands.DEADLINE);","lastModifiedDate":"2021-09-10"},{"lineNumber":120,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":121,"author":{"gitId":"twothicc"},"content":"        LocalDate localDate \u003d Parser.dateToLocalDate(descriptions[1]);","lastModifiedDate":"2021-09-10"},{"lineNumber":122,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":123,"author":{"gitId":"twothicc"},"content":"        tasks.add(new Deadline(descriptions[0], localDate));","lastModifiedDate":"2021-09-10"},{"lineNumber":124,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":125,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":126,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":127,"author":{"gitId":"twothicc"},"content":"     * Adds task based on user input to tasks, saves tasks to storage,","lastModifiedDate":"2021-08-29"},{"lineNumber":128,"author":{"gitId":"twothicc"},"content":"     * then returns String describing task added and new total count of task.","lastModifiedDate":"2021-08-29"},{"lineNumber":129,"author":{"gitId":"twothicc"},"content":"     * Event is added for user inputs of the form \"event task-descr /at dd/mm/yyyy\".","lastModifiedDate":"2021-08-22"},{"lineNumber":130,"author":{"gitId":"twothicc"},"content":"     * Deadline is added for user inputs of the form \"deadline task-descr /by dd/mm/yyyy\".","lastModifiedDate":"2021-08-22"},{"lineNumber":131,"author":{"gitId":"twothicc"},"content":"     * Todo is added for user inputs of the form \"todo task-descr\".","lastModifiedDate":"2021-08-22"},{"lineNumber":132,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":133,"author":{"gitId":"twothicc"},"content":"     * @param tasks TaskList that command executes upon.","lastModifiedDate":"2021-08-22"},{"lineNumber":134,"author":{"gitId":"twothicc"},"content":"     * @param ui Ui contains enums, response messages and exception messages that command execution will use.","lastModifiedDate":"2021-08-22"},{"lineNumber":135,"author":{"gitId":"twothicc"},"content":"     * @param storage Storage that command executes upon.","lastModifiedDate":"2021-08-22"},{"lineNumber":136,"author":{"gitId":"twothicc"},"content":"     * @return DukeResponse containing either string describing task added and new total count of task","lastModifiedDate":"2021-09-10"},{"lineNumber":137,"author":{"gitId":"twothicc"},"content":"     *         or error message.","lastModifiedDate":"2021-09-10"},{"lineNumber":138,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":139,"author":{"gitId":"twothicc"},"content":"    @Override","lastModifiedDate":"2021-08-21"},{"lineNumber":140,"author":{"gitId":"twothicc"},"content":"    public DukeResponse execute(TaskList tasks, Ui ui, Storable storage) {","lastModifiedDate":"2021-09-10"},{"lineNumber":141,"author":{"gitId":"twothicc"},"content":"        try {","lastModifiedDate":"2021-08-21"},{"lineNumber":142,"author":{"gitId":"twothicc"},"content":"            String output \u003d this.addTask(tasks, ui, \u0027/\u0027);","lastModifiedDate":"2021-08-29"},{"lineNumber":143,"author":{"gitId":"twothicc"},"content":"            storage.saveTasksToData(tasks);","lastModifiedDate":"2021-08-21"},{"lineNumber":144,"author":{"gitId":"twothicc"},"content":"            return new DukeResponse(output, false);","lastModifiedDate":"2021-09-10"},{"lineNumber":145,"author":{"gitId":"twothicc"},"content":"        } catch (DukeException dukeException) {","lastModifiedDate":"2021-08-21"},{"lineNumber":146,"author":{"gitId":"twothicc"},"content":"            return new DukeResponse(dukeException.toString(), true);","lastModifiedDate":"2021-09-10"},{"lineNumber":147,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":148,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":149,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":150,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":151,"author":{"gitId":"twothicc"},"content":"     * Indicates whether another object is equals to this AddCommand.","lastModifiedDate":"2021-08-22"},{"lineNumber":152,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":153,"author":{"gitId":"twothicc"},"content":"     * @param obj Other object to be compared to.","lastModifiedDate":"2021-08-22"},{"lineNumber":154,"author":{"gitId":"twothicc"},"content":"     * @return A boolean indicating whether the other object is equal to this AddCommand.","lastModifiedDate":"2021-08-22"},{"lineNumber":155,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":156,"author":{"gitId":"twothicc"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":157,"author":{"gitId":"twothicc"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2021-08-22"},{"lineNumber":158,"author":{"gitId":"twothicc"},"content":"        if (obj instanceof AddCommand) {","lastModifiedDate":"2021-08-22"},{"lineNumber":159,"author":{"gitId":"twothicc"},"content":"            AddCommand other \u003d (AddCommand) obj;","lastModifiedDate":"2021-08-22"},{"lineNumber":160,"author":{"gitId":"twothicc"},"content":"            return this.userInput.equals(other.userInput);","lastModifiedDate":"2021-08-22"},{"lineNumber":161,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":162,"author":{"gitId":"twothicc"},"content":"        return false;","lastModifiedDate":"2021-08-22"},{"lineNumber":163,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":164,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"twothicc":164}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke.command;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"import duke.DukeResponse;","lastModifiedDate":"2021-09-10"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"import duke.Storable;","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-21"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"/**","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":" * Command ensures that its derived classes have the execute method.","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":" */","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"public abstract class Command {","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"     * Executes a command and returns the output String.","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"     * Actions performed during execution depends on the command.","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"     * @param tasks TaskList that command executes upon.","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"     * @param ui Ui contains enums, response messages and exception messages that command execution will use.","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"     * @param storage Storage that command executes upon.","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":"     * @return DukeResponse object containing the response string and boolean indicating whether response indicates an","lastModifiedDate":"2021-09-10"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":"     *         error.","lastModifiedDate":"2021-09-10"},{"lineNumber":21,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"twothicc"},"content":"    public abstract DukeResponse execute(TaskList tasks, Ui ui, Storable storage);","lastModifiedDate":"2021-09-10"},{"lineNumber":23,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"twothicc":23}},{"path":"src/main/java/duke/command/DateCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke.command;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"import duke.DukeResponse;","lastModifiedDate":"2021-09-10"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"import duke.Parser;","lastModifiedDate":"2021-08-21"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"import duke.Storable;","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"import duke.Ui.UserCommands;","lastModifiedDate":"2021-09-04"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-09-04"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"import duke.exception.MissingDateException;","lastModifiedDate":"2021-09-04"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"import duke.exception.MissingSpaceAfterCommandException;","lastModifiedDate":"2021-09-04"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"import duke.task.Event;","lastModifiedDate":"2021-08-21"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"import duke.task.Period;","lastModifiedDate":"2021-09-05"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-21"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":"/**","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":" * Represents a command that can be executed to print tasks falling on user specified date.","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"twothicc"},"content":" */","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"twothicc"},"content":"public class DateCommand extends Command {","lastModifiedDate":"2021-08-21"},{"lineNumber":23,"author":{"gitId":"twothicc"},"content":"    private final String userInput;","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":25,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"twothicc"},"content":"     * Constructor for DateCommand.","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"twothicc"},"content":"     * Creates DateCommand containing user input.","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"twothicc"},"content":"     * @param userInput User\u0027s input into Duke chatbot.","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"twothicc"},"content":"    public DateCommand(String userInput) {","lastModifiedDate":"2021-08-21"},{"lineNumber":32,"author":{"gitId":"twothicc"},"content":"        this.userInput \u003d userInput;","lastModifiedDate":"2021-08-21"},{"lineNumber":33,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":34,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":35,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"twothicc"},"content":"     * Finds and returns String describing tasks falling on user specified date.","lastModifiedDate":"2021-08-29"},{"lineNumber":37,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"twothicc"},"content":"     * @param tasks TaskList to search in.","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"twothicc"},"content":"     * @param ui Ui to get enums, response messages and exception messages from.","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"twothicc"},"content":"     * @return String describing tasks falling on user specified date.","lastModifiedDate":"2021-08-29"},{"lineNumber":41,"author":{"gitId":"twothicc"},"content":"     * @throws MissingDateException If user input is missing time input.","lastModifiedDate":"2021-09-04"},{"lineNumber":42,"author":{"gitId":"twothicc"},"content":"     * @throws MissingSpaceAfterCommandException If user input has missing spaces.","lastModifiedDate":"2021-09-04"},{"lineNumber":43,"author":{"gitId":"twothicc"},"content":"     * @throws DukeException If underlying methods or checks fail.","lastModifiedDate":"2021-09-04"},{"lineNumber":44,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"twothicc"},"content":"    private String getTaskAtDate(TaskList tasks, Ui ui) throws DukeException {","lastModifiedDate":"2021-08-29"},{"lineNumber":46,"author":{"gitId":"twothicc"},"content":"        int counter \u003d 0;","lastModifiedDate":"2021-08-21"},{"lineNumber":47,"author":{"gitId":"twothicc"},"content":"        int events \u003d 0;","lastModifiedDate":"2021-08-21"},{"lineNumber":48,"author":{"gitId":"twothicc"},"content":"        int deadlines \u003d 0;","lastModifiedDate":"2021-08-21"},{"lineNumber":49,"author":{"gitId":"twothicc"},"content":"        int periods \u003d 0;","lastModifiedDate":"2021-09-05"},{"lineNumber":50,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":51,"author":{"gitId":"twothicc"},"content":"        checkDateInputValidity();","lastModifiedDate":"2021-09-14"},{"lineNumber":52,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":53,"author":{"gitId":"twothicc"},"content":"        // Parses user input into LocalDate. User input for date will follow \"date\" command.","lastModifiedDate":"2021-08-21"},{"lineNumber":54,"author":{"gitId":"twothicc"},"content":"        String dateString \u003d this.userInput.substring(UserCommands.DATE.getLength() + 1);","lastModifiedDate":"2021-09-04"},{"lineNumber":55,"author":{"gitId":"twothicc"},"content":"        LocalDate localDate \u003d Parser.dateToLocalDate(dateString);","lastModifiedDate":"2021-09-05"},{"lineNumber":56,"author":{"gitId":"twothicc"},"content":"        String formattedDateString \u003d Parser.parseLocalDate(localDate);","lastModifiedDate":"2021-08-21"},{"lineNumber":57,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":58,"author":{"gitId":"twothicc"},"content":"        StringBuilder datesBuilder \u003d new StringBuilder();","lastModifiedDate":"2021-09-04"},{"lineNumber":59,"author":{"gitId":"twothicc"},"content":"        // find tasks with LocalDate that matches date input from user.","lastModifiedDate":"2021-09-14"},{"lineNumber":60,"author":{"gitId":"twothicc"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2021-09-11"},{"lineNumber":61,"author":{"gitId":"twothicc"},"content":"            Task task \u003d tasks.get(i);","lastModifiedDate":"2021-09-11"},{"lineNumber":62,"author":{"gitId":"twothicc"},"content":"            // Increment by 1 to change index to be 1-based.","lastModifiedDate":"2021-09-11"},{"lineNumber":63,"author":{"gitId":"twothicc"},"content":"            int idx \u003d i + 1;","lastModifiedDate":"2021-09-11"},{"lineNumber":64,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":65,"author":{"gitId":"twothicc"},"content":"            if (task instanceof Deadline) {","lastModifiedDate":"2021-08-21"},{"lineNumber":66,"author":{"gitId":"twothicc"},"content":"                Deadline deadline \u003d (Deadline) task;","lastModifiedDate":"2021-08-21"},{"lineNumber":67,"author":{"gitId":"twothicc"},"content":"                if (localDate.equals(deadline.getTime())) {","lastModifiedDate":"2021-08-21"},{"lineNumber":68,"author":{"gitId":"twothicc"},"content":"                    counter++;","lastModifiedDate":"2021-08-21"},{"lineNumber":69,"author":{"gitId":"twothicc"},"content":"                    deadlines++;","lastModifiedDate":"2021-08-21"},{"lineNumber":70,"author":{"gitId":"twothicc"},"content":"                    datesBuilder.append(idx).append(\".\").append(deadline).append(\"\\n\");","lastModifiedDate":"2021-09-11"},{"lineNumber":71,"author":{"gitId":"twothicc"},"content":"                }","lastModifiedDate":"2021-08-21"},{"lineNumber":72,"author":{"gitId":"twothicc"},"content":"            }","lastModifiedDate":"2021-08-21"},{"lineNumber":73,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":74,"author":{"gitId":"twothicc"},"content":"            if (task instanceof Event) {","lastModifiedDate":"2021-08-21"},{"lineNumber":75,"author":{"gitId":"twothicc"},"content":"                Event event \u003d (Event) task;","lastModifiedDate":"2021-08-21"},{"lineNumber":76,"author":{"gitId":"twothicc"},"content":"                if (localDate.equals(event.getTime())) {","lastModifiedDate":"2021-08-21"},{"lineNumber":77,"author":{"gitId":"twothicc"},"content":"                    counter++;","lastModifiedDate":"2021-08-21"},{"lineNumber":78,"author":{"gitId":"twothicc"},"content":"                    events++;","lastModifiedDate":"2021-08-21"},{"lineNumber":79,"author":{"gitId":"twothicc"},"content":"                    datesBuilder.append(idx).append(\".\").append(event).append(\"\\n\");","lastModifiedDate":"2021-09-11"},{"lineNumber":80,"author":{"gitId":"twothicc"},"content":"                }","lastModifiedDate":"2021-08-21"},{"lineNumber":81,"author":{"gitId":"twothicc"},"content":"            }","lastModifiedDate":"2021-08-21"},{"lineNumber":82,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":83,"author":{"gitId":"twothicc"},"content":"            if (task instanceof Period) {","lastModifiedDate":"2021-09-05"},{"lineNumber":84,"author":{"gitId":"twothicc"},"content":"                Period period \u003d (Period) task;","lastModifiedDate":"2021-09-05"},{"lineNumber":85,"author":{"gitId":"twothicc"},"content":"                if (checkWithinPeriod(localDate, period)) {","lastModifiedDate":"2021-09-14"},{"lineNumber":86,"author":{"gitId":"twothicc"},"content":"                    counter++;","lastModifiedDate":"2021-09-05"},{"lineNumber":87,"author":{"gitId":"twothicc"},"content":"                    periods++;","lastModifiedDate":"2021-09-05"},{"lineNumber":88,"author":{"gitId":"twothicc"},"content":"                    datesBuilder.append(idx).append(\".\").append(period).append(\"\\n\");","lastModifiedDate":"2021-09-11"},{"lineNumber":89,"author":{"gitId":"twothicc"},"content":"                }","lastModifiedDate":"2021-09-05"},{"lineNumber":90,"author":{"gitId":"twothicc"},"content":"            }","lastModifiedDate":"2021-09-05"},{"lineNumber":91,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":92,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":93,"author":{"gitId":"twothicc"},"content":"        return ui.getDateListSuccessMessage(formattedDateString,","lastModifiedDate":"2021-09-04"},{"lineNumber":94,"author":{"gitId":"twothicc"},"content":"                counter, deadlines, events, periods, datesBuilder.toString());","lastModifiedDate":"2021-09-05"},{"lineNumber":95,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":96,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":97,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-09-14"},{"lineNumber":98,"author":{"gitId":"twothicc"},"content":"     * Checks if localDate is within period represented by Period task.","lastModifiedDate":"2021-09-14"},{"lineNumber":99,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-09-14"},{"lineNumber":100,"author":{"gitId":"twothicc"},"content":"     * @param localDate Date to be checked.","lastModifiedDate":"2021-09-14"},{"lineNumber":101,"author":{"gitId":"twothicc"},"content":"     * @param period Period task whose time period is to be checked against.","lastModifiedDate":"2021-09-14"},{"lineNumber":102,"author":{"gitId":"twothicc"},"content":"     * @return Boolean indicating if localDate is within period represented by Period task.","lastModifiedDate":"2021-09-14"},{"lineNumber":103,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-09-14"},{"lineNumber":104,"author":{"gitId":"twothicc"},"content":"    private boolean checkWithinPeriod(LocalDate localDate, Period period) {","lastModifiedDate":"2021-09-14"},{"lineNumber":105,"author":{"gitId":"twothicc"},"content":"        LocalDate[] startEndDates \u003d period.getPeriod();","lastModifiedDate":"2021-09-14"},{"lineNumber":106,"author":{"gitId":"twothicc"},"content":"        LocalDate startDate \u003d startEndDates[0];","lastModifiedDate":"2021-09-14"},{"lineNumber":107,"author":{"gitId":"twothicc"},"content":"        LocalDate endDate \u003d startEndDates[1];","lastModifiedDate":"2021-09-14"},{"lineNumber":108,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":109,"author":{"gitId":"twothicc"},"content":"        boolean isLaterThanEqualsStartDate \u003d localDate.compareTo(startDate) \u003e\u003d 0;","lastModifiedDate":"2021-09-14"},{"lineNumber":110,"author":{"gitId":"twothicc"},"content":"        boolean isEarlierThanEqualsEndDate \u003d localDate.compareTo(endDate) \u003c\u003d 0;","lastModifiedDate":"2021-09-14"},{"lineNumber":111,"author":{"gitId":"twothicc"},"content":"        return isLaterThanEqualsStartDate \u0026\u0026 isEarlierThanEqualsEndDate;","lastModifiedDate":"2021-09-14"},{"lineNumber":112,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":113,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":114,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-09-14"},{"lineNumber":115,"author":{"gitId":"twothicc"},"content":"     * Checks if Date input is of an acceptable format.","lastModifiedDate":"2021-09-14"},{"lineNumber":116,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-09-14"},{"lineNumber":117,"author":{"gitId":"twothicc"},"content":"     * @throws MissingDateException","lastModifiedDate":"2021-09-14"},{"lineNumber":118,"author":{"gitId":"twothicc"},"content":"     * @throws MissingSpaceAfterCommandException","lastModifiedDate":"2021-09-14"},{"lineNumber":119,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-09-14"},{"lineNumber":120,"author":{"gitId":"twothicc"},"content":"    private void checkDateInputValidity() throws MissingDateException, MissingSpaceAfterCommandException {","lastModifiedDate":"2021-09-14"},{"lineNumber":121,"author":{"gitId":"twothicc"},"content":"        // Check if anything is provided 1 space after date command.","lastModifiedDate":"2021-09-14"},{"lineNumber":122,"author":{"gitId":"twothicc"},"content":"        if (this.userInput.length() \u003c\u003d (UserCommands.DATE.getLength() + 1)) {","lastModifiedDate":"2021-09-14"},{"lineNumber":123,"author":{"gitId":"twothicc"},"content":"            // If nothing is provided, date to search for is not provided.","lastModifiedDate":"2021-09-14"},{"lineNumber":124,"author":{"gitId":"twothicc"},"content":"            // Unlike other commands, a single character following after command without space is an invalid date.","lastModifiedDate":"2021-09-14"},{"lineNumber":125,"author":{"gitId":"twothicc"},"content":"            throw new MissingDateException();","lastModifiedDate":"2021-09-14"},{"lineNumber":126,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-09-14"},{"lineNumber":127,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":128,"author":{"gitId":"twothicc"},"content":"        // Check for space after date command.","lastModifiedDate":"2021-09-14"},{"lineNumber":129,"author":{"gitId":"twothicc"},"content":"        // This prevents wrong date being read by reminding user to add space.","lastModifiedDate":"2021-09-14"},{"lineNumber":130,"author":{"gitId":"twothicc"},"content":"        if (this.userInput.charAt(UserCommands.DATE.getLength()) !\u003d \u0027 \u0027) {","lastModifiedDate":"2021-09-14"},{"lineNumber":131,"author":{"gitId":"twothicc"},"content":"            throw new MissingSpaceAfterCommandException(UserCommands.DATE);","lastModifiedDate":"2021-09-14"},{"lineNumber":132,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-09-14"},{"lineNumber":133,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":134,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":135,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":136,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":137,"author":{"gitId":"twothicc"},"content":"     * Finds and returns String describing tasks falling on user specified date.","lastModifiedDate":"2021-08-29"},{"lineNumber":138,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":139,"author":{"gitId":"twothicc"},"content":"     * @param tasks TaskList that command executes upon.","lastModifiedDate":"2021-08-22"},{"lineNumber":140,"author":{"gitId":"twothicc"},"content":"     * @param ui Ui contains enums, response messages and exception messages that command execution will use.","lastModifiedDate":"2021-08-22"},{"lineNumber":141,"author":{"gitId":"twothicc"},"content":"     * @param storage Storage that command executes upon.","lastModifiedDate":"2021-08-22"},{"lineNumber":142,"author":{"gitId":"twothicc"},"content":"     * @return DukeResponse containing string describing tasks falling on user specified date or error message.","lastModifiedDate":"2021-09-10"},{"lineNumber":143,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":144,"author":{"gitId":"twothicc"},"content":"    @Override","lastModifiedDate":"2021-08-21"},{"lineNumber":145,"author":{"gitId":"twothicc"},"content":"    public DukeResponse execute(TaskList tasks, Ui ui, Storable storage) {","lastModifiedDate":"2021-09-10"},{"lineNumber":146,"author":{"gitId":"twothicc"},"content":"        try {","lastModifiedDate":"2021-08-21"},{"lineNumber":147,"author":{"gitId":"twothicc"},"content":"            String output \u003d this.getTaskAtDate(tasks, ui);","lastModifiedDate":"2021-09-10"},{"lineNumber":148,"author":{"gitId":"twothicc"},"content":"            return new DukeResponse(output, false);","lastModifiedDate":"2021-09-10"},{"lineNumber":149,"author":{"gitId":"twothicc"},"content":"        } catch (DukeException dukeException) {","lastModifiedDate":"2021-08-21"},{"lineNumber":150,"author":{"gitId":"twothicc"},"content":"            return new DukeResponse(dukeException.toString(), true);","lastModifiedDate":"2021-09-10"},{"lineNumber":151,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":152,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":153,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":154,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":155,"author":{"gitId":"twothicc"},"content":"     * Indicates whether another object is equals to this DateCommand.","lastModifiedDate":"2021-08-22"},{"lineNumber":156,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":157,"author":{"gitId":"twothicc"},"content":"     * @param obj Other object to be compared to.","lastModifiedDate":"2021-08-22"},{"lineNumber":158,"author":{"gitId":"twothicc"},"content":"     * @return A boolean indicating whether the other object is equal to this DateCommand.","lastModifiedDate":"2021-08-22"},{"lineNumber":159,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":160,"author":{"gitId":"twothicc"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":161,"author":{"gitId":"twothicc"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2021-08-22"},{"lineNumber":162,"author":{"gitId":"twothicc"},"content":"        if (obj instanceof DateCommand) {","lastModifiedDate":"2021-08-22"},{"lineNumber":163,"author":{"gitId":"twothicc"},"content":"            DateCommand other \u003d (DateCommand) obj;","lastModifiedDate":"2021-08-22"},{"lineNumber":164,"author":{"gitId":"twothicc"},"content":"            return this.userInput.equals(other.userInput);","lastModifiedDate":"2021-08-22"},{"lineNumber":165,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":166,"author":{"gitId":"twothicc"},"content":"        return false;","lastModifiedDate":"2021-08-22"},{"lineNumber":167,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":168,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"twothicc":168}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke.command;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"import duke.DukeResponse;","lastModifiedDate":"2021-09-10"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"import duke.Parser;","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"import duke.Storable;","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"import duke.Ui.UserCommands;","lastModifiedDate":"2021-09-04"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-09-04"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"import duke.exception.InvalidIndexException;","lastModifiedDate":"2021-09-04"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"import duke.exception.MissingIndexException;","lastModifiedDate":"2021-09-04"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"/**","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":" * Represents a command that can be executed to delete a task based on user input,","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":" * print the task deleted and new total count of tasks, then save tasks to storage.","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":" */","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2021-08-21"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":"    private final String userInput;","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":21,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"twothicc"},"content":"     * Constructor for DeleteCommand.","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"twothicc"},"content":"     * Creates DeleteCommand containing user input.","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"twothicc"},"content":"     * @param userInput User\u0027s input into Duke chatbot.","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"twothicc"},"content":"    public DeleteCommand(String userInput) {","lastModifiedDate":"2021-08-21"},{"lineNumber":28,"author":{"gitId":"twothicc"},"content":"        this.userInput \u003d userInput;","lastModifiedDate":"2021-08-21"},{"lineNumber":29,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":30,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":31,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"twothicc"},"content":"     * Deletes a task based on user input,","lastModifiedDate":"2021-08-29"},{"lineNumber":33,"author":{"gitId":"twothicc"},"content":"     * then returns String describing the task deleted and new total count of tasks.","lastModifiedDate":"2021-08-29"},{"lineNumber":34,"author":{"gitId":"twothicc"},"content":"     * Task is deleted at index provided by user input in format \"delete N\", where N can be any valid index.","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"twothicc"},"content":"     * Index provided should be 1-based.","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"twothicc"},"content":"     * @param tasks TaskList to delete task from.","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"twothicc"},"content":"     * @param ui Ui to get enums, response messages and exception messages from.","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"twothicc"},"content":"     * @return String describing the task deleted and new total count of tasks.","lastModifiedDate":"2021-08-29"},{"lineNumber":40,"author":{"gitId":"twothicc"},"content":"     * @throws MissingIndexException If user input is missing an index.","lastModifiedDate":"2021-09-04"},{"lineNumber":41,"author":{"gitId":"twothicc"},"content":"     * @throws DukeException If underlying methods or checks fail.","lastModifiedDate":"2021-09-04"},{"lineNumber":42,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"twothicc"},"content":"    private String deleteTask(TaskList tasks, Ui ui) throws DukeException {","lastModifiedDate":"2021-08-29"},{"lineNumber":44,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"twothicc"},"content":"        // Preliminary check for any input following command.","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"twothicc"},"content":"        Parser.checkInputValidity(this.userInput, UserCommands.DELETE,","lastModifiedDate":"2021-09-04"},{"lineNumber":47,"author":{"gitId":"twothicc"},"content":"                new MissingIndexException(UserCommands.DELETE));","lastModifiedDate":"2021-09-04"},{"lineNumber":48,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":49,"author":{"gitId":"twothicc"},"content":"        // Parses integer in user input. 1 space is accounted for as it separates command and index.","lastModifiedDate":"2021-08-21"},{"lineNumber":50,"author":{"gitId":"twothicc"},"content":"        int userNumInput \u003d Parser.parseUserNumInput(this.userInput, UserCommands.DELETE);","lastModifiedDate":"2021-09-04"},{"lineNumber":51,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":52,"author":{"gitId":"twothicc"},"content":"        // Decrement integer from user input to match indexing of tasks.","lastModifiedDate":"2021-08-21"},{"lineNumber":53,"author":{"gitId":"twothicc"},"content":"        int idx \u003d userNumInput - 1;","lastModifiedDate":"2021-08-21"},{"lineNumber":54,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":55,"author":{"gitId":"twothicc"},"content":"        // Checks for invalid index.","lastModifiedDate":"2021-08-21"},{"lineNumber":56,"author":{"gitId":"twothicc"},"content":"        if (idx \u003e\u003d tasks.size() || idx \u003c 0) {","lastModifiedDate":"2021-08-21"},{"lineNumber":57,"author":{"gitId":"twothicc"},"content":"            throw new InvalidIndexException(UserCommands.DELETE);","lastModifiedDate":"2021-09-04"},{"lineNumber":58,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":59,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":60,"author":{"gitId":"twothicc"},"content":"        Task deletedTask \u003d tasks.remove(idx);","lastModifiedDate":"2021-08-21"},{"lineNumber":61,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":62,"author":{"gitId":"twothicc"},"content":"        return ui.getDeleteSuccessMessage(deletedTask, tasks.size());","lastModifiedDate":"2021-09-01"},{"lineNumber":63,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":64,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":65,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":66,"author":{"gitId":"twothicc"},"content":"     * Deletes a task based on user input, saves tasks to storage,","lastModifiedDate":"2021-08-29"},{"lineNumber":67,"author":{"gitId":"twothicc"},"content":"     * then returns String describing the task deleted and new total count of tasks.","lastModifiedDate":"2021-08-29"},{"lineNumber":68,"author":{"gitId":"twothicc"},"content":"     * Task is deleted at index provided by user input in format \"delete N\", where N can be any valid index.","lastModifiedDate":"2021-08-22"},{"lineNumber":69,"author":{"gitId":"twothicc"},"content":"     * Index provided should be 1-based.","lastModifiedDate":"2021-08-22"},{"lineNumber":70,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":71,"author":{"gitId":"twothicc"},"content":"     * @param tasks TaskList that command executes upon.","lastModifiedDate":"2021-08-22"},{"lineNumber":72,"author":{"gitId":"twothicc"},"content":"     * @param ui Ui contains enums, response messages and exception messages that command execution will use.","lastModifiedDate":"2021-08-22"},{"lineNumber":73,"author":{"gitId":"twothicc"},"content":"     * @param storage Storage that command executes upon.","lastModifiedDate":"2021-08-22"},{"lineNumber":74,"author":{"gitId":"twothicc"},"content":"     * @return DukeResponse containing string describing the task deleted and new total count of tasks","lastModifiedDate":"2021-09-10"},{"lineNumber":75,"author":{"gitId":"twothicc"},"content":"     *         or error message.","lastModifiedDate":"2021-09-10"},{"lineNumber":76,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":77,"author":{"gitId":"twothicc"},"content":"    @Override","lastModifiedDate":"2021-08-21"},{"lineNumber":78,"author":{"gitId":"twothicc"},"content":"    public DukeResponse execute(TaskList tasks, Ui ui, Storable storage) {","lastModifiedDate":"2021-09-10"},{"lineNumber":79,"author":{"gitId":"twothicc"},"content":"        try {","lastModifiedDate":"2021-08-21"},{"lineNumber":80,"author":{"gitId":"twothicc"},"content":"            String output \u003d this.deleteTask(tasks, ui);","lastModifiedDate":"2021-08-29"},{"lineNumber":81,"author":{"gitId":"twothicc"},"content":"            storage.saveTasksToData(tasks);","lastModifiedDate":"2021-08-21"},{"lineNumber":82,"author":{"gitId":"twothicc"},"content":"            return new DukeResponse(output, false);","lastModifiedDate":"2021-09-10"},{"lineNumber":83,"author":{"gitId":"twothicc"},"content":"        } catch (DukeException dukeException) {","lastModifiedDate":"2021-08-21"},{"lineNumber":84,"author":{"gitId":"twothicc"},"content":"            return new DukeResponse(dukeException.toString(), true);","lastModifiedDate":"2021-09-10"},{"lineNumber":85,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":86,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":87,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":88,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":89,"author":{"gitId":"twothicc"},"content":"     * Indicates whether another object is equals to this DeleteCommand.","lastModifiedDate":"2021-08-22"},{"lineNumber":90,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":91,"author":{"gitId":"twothicc"},"content":"     * @param obj Other object to be compared to.","lastModifiedDate":"2021-08-22"},{"lineNumber":92,"author":{"gitId":"twothicc"},"content":"     * @return A boolean indicating whether the other object is equal to this DeleteCommand.","lastModifiedDate":"2021-08-22"},{"lineNumber":93,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":94,"author":{"gitId":"twothicc"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":95,"author":{"gitId":"twothicc"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2021-08-22"},{"lineNumber":96,"author":{"gitId":"twothicc"},"content":"        if (obj instanceof DeleteCommand) {","lastModifiedDate":"2021-08-22"},{"lineNumber":97,"author":{"gitId":"twothicc"},"content":"            DeleteCommand other \u003d (DeleteCommand) obj;","lastModifiedDate":"2021-08-22"},{"lineNumber":98,"author":{"gitId":"twothicc"},"content":"            return this.userInput.equals(other.userInput);","lastModifiedDate":"2021-08-22"},{"lineNumber":99,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":100,"author":{"gitId":"twothicc"},"content":"        return false;","lastModifiedDate":"2021-08-22"},{"lineNumber":101,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":102,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"twothicc":102}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke.command;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"import duke.DukeResponse;","lastModifiedDate":"2021-09-10"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"import duke.Parser;","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"import duke.Storable;","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"import duke.Ui.UserCommands;","lastModifiedDate":"2021-09-04"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-09-04"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"import duke.exception.MissingSearchInputException;","lastModifiedDate":"2021-09-04"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"/**","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":" * Represents a command that can be executed to print tasks with descriptions that match a search keyword.","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":" */","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"    private final String userInput;","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":"     * Constructor for FindCommand.","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"twothicc"},"content":"     * Creates a FindCommand containing user input.","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"twothicc"},"content":"     * @param userInput User\u0027s input into Duke chatbot.","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"twothicc"},"content":"    public FindCommand(String userInput) {","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"twothicc"},"content":"        this.userInput \u003d userInput;","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"twothicc"},"content":"     * Extracts out a search keyword from user input, then finds tasks and","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"twothicc"},"content":"     * returns String describing found tasks that contain the search keyword.","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"twothicc"},"content":"     * Search keyword is case-sensitive.","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"twothicc"},"content":"     * @param tasks TaskList to perform search on.","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"twothicc"},"content":"     * @param ui Ui to get enums, response messages and exception messages from.","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"twothicc"},"content":"     * @return String describing found tasks that contain the search keyword.","lastModifiedDate":"2021-08-29"},{"lineNumber":37,"author":{"gitId":"twothicc"},"content":"     * @throws DukeException If underlying methods or checks fail.","lastModifiedDate":"2021-09-04"},{"lineNumber":38,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"twothicc"},"content":"    private String getTaskMatchingSearch(TaskList tasks, Ui ui) throws DukeException {","lastModifiedDate":"2021-08-29"},{"lineNumber":40,"author":{"gitId":"twothicc"},"content":"        // Preliminary check for validity of user input.","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"twothicc"},"content":"        Parser.checkInputValidity(this.userInput, UserCommands.FIND, new MissingSearchInputException());","lastModifiedDate":"2021-09-04"},{"lineNumber":42,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"twothicc"},"content":"        // Initalize counter to track number of matching tasks.","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"twothicc"},"content":"        int counter \u003d 0;","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"twothicc"},"content":"        // Extract search keyword from 1 space after \"find\" command in user input.","lastModifiedDate":"2021-08-22"},{"lineNumber":47,"author":{"gitId":"twothicc"},"content":"        String keyword \u003d this.userInput.substring(UserCommands.FIND.getLength() + 1);","lastModifiedDate":"2021-09-04"},{"lineNumber":48,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":49,"author":{"gitId":"twothicc"},"content":"        StringBuilder foundTasks \u003d new StringBuilder();","lastModifiedDate":"2021-08-29"},{"lineNumber":50,"author":{"gitId":"twothicc"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2021-08-22"},{"lineNumber":51,"author":{"gitId":"twothicc"},"content":"            Task task \u003d tasks.get(i);","lastModifiedDate":"2021-08-22"},{"lineNumber":52,"author":{"gitId":"twothicc"},"content":"            // contains() performs case-sensitive search for keyword in task description.","lastModifiedDate":"2021-08-22"},{"lineNumber":53,"author":{"gitId":"twothicc"},"content":"            if (task.getDescription().contains(keyword)) {","lastModifiedDate":"2021-08-22"},{"lineNumber":54,"author":{"gitId":"twothicc"},"content":"                // Add 1 as display index is 1-based while TaskList index is 0-based.","lastModifiedDate":"2021-08-22"},{"lineNumber":55,"author":{"gitId":"twothicc"},"content":"                int idx \u003d i + 1;","lastModifiedDate":"2021-08-22"},{"lineNumber":56,"author":{"gitId":"twothicc"},"content":"                String foundTask \u003d idx + \".\" + task + \"\\n\";","lastModifiedDate":"2021-08-29"},{"lineNumber":57,"author":{"gitId":"twothicc"},"content":"                foundTasks.append(foundTask);","lastModifiedDate":"2021-08-29"},{"lineNumber":58,"author":{"gitId":"twothicc"},"content":"                counter++;","lastModifiedDate":"2021-08-22"},{"lineNumber":59,"author":{"gitId":"twothicc"},"content":"            }","lastModifiedDate":"2021-08-22"},{"lineNumber":60,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":61,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":62,"author":{"gitId":"twothicc"},"content":"        return ui.getFindSuccessMessage(counter, keyword, foundTasks.toString());","lastModifiedDate":"2021-09-04"},{"lineNumber":63,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":64,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":65,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":66,"author":{"gitId":"twothicc"},"content":"     * Finds tasks and returns String describing found tasks with descriptions that matches search keyword.","lastModifiedDate":"2021-08-29"},{"lineNumber":67,"author":{"gitId":"twothicc"},"content":"     * Accepts user inputs of the form \"find keyword\" where keyword can be any search keyword.","lastModifiedDate":"2021-08-22"},{"lineNumber":68,"author":{"gitId":"twothicc"},"content":"     * Search keyword can also be just spaces or consisting of multiple words.","lastModifiedDate":"2021-08-22"},{"lineNumber":69,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":70,"author":{"gitId":"twothicc"},"content":"     * @param tasks TaskList that command executes upon.","lastModifiedDate":"2021-08-22"},{"lineNumber":71,"author":{"gitId":"twothicc"},"content":"     * @param ui Ui contains enums, response messages and exception messages that command execution will use.","lastModifiedDate":"2021-08-22"},{"lineNumber":72,"author":{"gitId":"twothicc"},"content":"     * @param storage Storage that command executes upon.","lastModifiedDate":"2021-08-22"},{"lineNumber":73,"author":{"gitId":"twothicc"},"content":"     * @return DukeResponse containing string describing found tasks with descriptions that matches search keyword","lastModifiedDate":"2021-09-10"},{"lineNumber":74,"author":{"gitId":"twothicc"},"content":"     *         or error message.","lastModifiedDate":"2021-09-10"},{"lineNumber":75,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":76,"author":{"gitId":"twothicc"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":77,"author":{"gitId":"twothicc"},"content":"    public DukeResponse execute(TaskList tasks, Ui ui, Storable storage) {","lastModifiedDate":"2021-09-10"},{"lineNumber":78,"author":{"gitId":"twothicc"},"content":"        try {","lastModifiedDate":"2021-08-22"},{"lineNumber":79,"author":{"gitId":"twothicc"},"content":"            String output \u003d getTaskMatchingSearch(tasks, ui);","lastModifiedDate":"2021-09-10"},{"lineNumber":80,"author":{"gitId":"twothicc"},"content":"            return new DukeResponse(output, false);","lastModifiedDate":"2021-09-10"},{"lineNumber":81,"author":{"gitId":"twothicc"},"content":"        } catch (DukeException dukeException) {","lastModifiedDate":"2021-08-22"},{"lineNumber":82,"author":{"gitId":"twothicc"},"content":"            return new DukeResponse(dukeException.toString(), true);","lastModifiedDate":"2021-09-10"},{"lineNumber":83,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":84,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":85,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":86,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":87,"author":{"gitId":"twothicc"},"content":"     * Indicates whether another object is equals to this FindCommand.","lastModifiedDate":"2021-08-22"},{"lineNumber":88,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":89,"author":{"gitId":"twothicc"},"content":"     * @param obj Other object to be compared to.","lastModifiedDate":"2021-08-22"},{"lineNumber":90,"author":{"gitId":"twothicc"},"content":"     * @return A boolean indicating whether the other object is equal to this FindCommand.","lastModifiedDate":"2021-08-22"},{"lineNumber":91,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":92,"author":{"gitId":"twothicc"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":93,"author":{"gitId":"twothicc"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2021-08-22"},{"lineNumber":94,"author":{"gitId":"twothicc"},"content":"        if (obj instanceof FindCommand) {","lastModifiedDate":"2021-08-22"},{"lineNumber":95,"author":{"gitId":"twothicc"},"content":"            FindCommand other \u003d (FindCommand) obj;","lastModifiedDate":"2021-08-22"},{"lineNumber":96,"author":{"gitId":"twothicc"},"content":"            return this.userInput.equals(other.userInput);","lastModifiedDate":"2021-08-22"},{"lineNumber":97,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":98,"author":{"gitId":"twothicc"},"content":"        return false;","lastModifiedDate":"2021-08-22"},{"lineNumber":99,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":100,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":101,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":102,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"twothicc":102}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke.command;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"import duke.DukeResponse;","lastModifiedDate":"2021-09-10"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"import duke.Storable;","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-21"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"/**","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":" * Represents a command that can be executed to print all existing tasks.","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":" */","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"    private final String userInput;","lastModifiedDate":"2021-08-27"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"     * Constructor for ListCommand.","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"     * Creates a ListCommand with user input.","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"     * @param userInput User\u0027s input into Duke chatbot.","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":"    public ListCommand(String userInput) {","lastModifiedDate":"2021-08-21"},{"lineNumber":21,"author":{"gitId":"twothicc"},"content":"        this.userInput \u003d userInput;","lastModifiedDate":"2021-08-21"},{"lineNumber":22,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":23,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":24,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"twothicc"},"content":"     * Iterates through tasks and returns String describing each task in a formatted string.","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"twothicc"},"content":"     * @param tasks TaskList from which tasks will be printed.","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"twothicc"},"content":"     * @param ui Ui to get enums, response messages and exception messages from.","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"twothicc"},"content":"     * @return String describing each task in a formatted string.","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"twothicc"},"content":"    private String getTasks(TaskList tasks, Ui ui) {","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"twothicc"},"content":"        String success \u003d ui.getListSuccessMessage();","lastModifiedDate":"2021-09-01"},{"lineNumber":33,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":34,"author":{"gitId":"twothicc"},"content":"        StringBuilder output \u003d new StringBuilder();","lastModifiedDate":"2021-08-29"},{"lineNumber":35,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"twothicc"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2021-08-21"},{"lineNumber":37,"author":{"gitId":"twothicc"},"content":"            // Increment i by 1 so number matches display indexing which starts from 1.","lastModifiedDate":"2021-08-21"},{"lineNumber":38,"author":{"gitId":"twothicc"},"content":"            int idx \u003d i + 1;","lastModifiedDate":"2021-08-21"},{"lineNumber":39,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":40,"author":{"gitId":"twothicc"},"content":"            // Format should be \"?. taskDescription\\n\"","lastModifiedDate":"2021-08-21"},{"lineNumber":41,"author":{"gitId":"twothicc"},"content":"            output.append(String.format(\"%d.%s%n\", idx, tasks.get(i).toString()));","lastModifiedDate":"2021-08-29"},{"lineNumber":42,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":43,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":44,"author":{"gitId":"twothicc"},"content":"        return success + \"\\n\" + output;","lastModifiedDate":"2021-08-29"},{"lineNumber":45,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":46,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":47,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":48,"author":{"gitId":"twothicc"},"content":"     * returns String describing all existing tasks.","lastModifiedDate":"2021-08-29"},{"lineNumber":49,"author":{"gitId":"twothicc"},"content":"     * Responds to user inputs of the format \"list\".","lastModifiedDate":"2021-08-22"},{"lineNumber":50,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":51,"author":{"gitId":"twothicc"},"content":"     * @param tasks TaskList that command executes upon.","lastModifiedDate":"2021-08-22"},{"lineNumber":52,"author":{"gitId":"twothicc"},"content":"     * @param ui Ui contains enums, response messages and exception messages that command execution will use.","lastModifiedDate":"2021-08-22"},{"lineNumber":53,"author":{"gitId":"twothicc"},"content":"     * @param storage Not Used. Storage that command executes upon.","lastModifiedDate":"2021-08-22"},{"lineNumber":54,"author":{"gitId":"twothicc"},"content":"     * @return DukeResponse containing string describing all existing tasks.","lastModifiedDate":"2021-09-10"},{"lineNumber":55,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":56,"author":{"gitId":"twothicc"},"content":"    @Override","lastModifiedDate":"2021-08-21"},{"lineNumber":57,"author":{"gitId":"twothicc"},"content":"    public DukeResponse execute(TaskList tasks, Ui ui, Storable storage) {","lastModifiedDate":"2021-09-10"},{"lineNumber":58,"author":{"gitId":"twothicc"},"content":"        // Returns tasks in tasks.","lastModifiedDate":"2021-08-29"},{"lineNumber":59,"author":{"gitId":"twothicc"},"content":"        String output \u003d this.getTasks(tasks, ui);","lastModifiedDate":"2021-09-10"},{"lineNumber":60,"author":{"gitId":"twothicc"},"content":"        return new DukeResponse(output, false);","lastModifiedDate":"2021-09-10"},{"lineNumber":61,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":62,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":63,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":64,"author":{"gitId":"twothicc"},"content":"     * Indicates whether another object is equals to this ListCommand.","lastModifiedDate":"2021-08-22"},{"lineNumber":65,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":66,"author":{"gitId":"twothicc"},"content":"     * @param obj Other object to be compared to.","lastModifiedDate":"2021-08-22"},{"lineNumber":67,"author":{"gitId":"twothicc"},"content":"     * @return A boolean indicating whether the other object is equal to this ListCommand.","lastModifiedDate":"2021-08-22"},{"lineNumber":68,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":69,"author":{"gitId":"twothicc"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":70,"author":{"gitId":"twothicc"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2021-08-22"},{"lineNumber":71,"author":{"gitId":"twothicc"},"content":"        if (obj instanceof ListCommand) {","lastModifiedDate":"2021-08-22"},{"lineNumber":72,"author":{"gitId":"twothicc"},"content":"            ListCommand other \u003d (ListCommand) obj;","lastModifiedDate":"2021-08-22"},{"lineNumber":73,"author":{"gitId":"twothicc"},"content":"            return this.userInput.equals(other.userInput);","lastModifiedDate":"2021-08-22"},{"lineNumber":74,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":75,"author":{"gitId":"twothicc"},"content":"        return false;","lastModifiedDate":"2021-08-22"},{"lineNumber":76,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":77,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"twothicc":77}},{"path":"src/main/java/duke/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke.command;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"import duke.DukeResponse;","lastModifiedDate":"2021-09-10"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"import duke.Parser;","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"import duke.Storable;","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"import duke.Ui.UserCommands;","lastModifiedDate":"2021-09-04"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-09-04"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"import duke.exception.InvalidIndexException;","lastModifiedDate":"2021-09-04"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"import duke.exception.MissingIndexException;","lastModifiedDate":"2021-09-04"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"/**","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":" * Represents a command that can be executed to mark a task as done, print the marked task,","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":" * then save tasks to storage.","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":" */","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2021-08-21"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"    private final String userInput;","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"twothicc"},"content":"     * Constructor for MarkCommand.","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"twothicc"},"content":"     * Creates a MarkCommand containing user input.","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"twothicc"},"content":"     * @param userInput User\u0027s input into Duke chatbot.","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"twothicc"},"content":"    public MarkCommand(String userInput) {","lastModifiedDate":"2021-08-21"},{"lineNumber":27,"author":{"gitId":"twothicc"},"content":"        this.userInput \u003d userInput;","lastModifiedDate":"2021-08-21"},{"lineNumber":28,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":29,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":30,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"twothicc"},"content":"     * Marks task at index specified by user input as done,","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"twothicc"},"content":"     * then returns String describing the marked task.","lastModifiedDate":"2021-08-29"},{"lineNumber":33,"author":{"gitId":"twothicc"},"content":"     * Accepts user input of the form \"done N\", where N can be any valid index.","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"twothicc"},"content":"     * Index provided should be 1-based.","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"twothicc"},"content":"     * @param tasks TaskList to mark a task in.","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"twothicc"},"content":"     * @param ui Ui to get enums, response messages and exception messages from.","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"twothicc"},"content":"     * @return String describing the marked task.","lastModifiedDate":"2021-08-29"},{"lineNumber":39,"author":{"gitId":"twothicc"},"content":"     * @throws MissingIndexException If user input is missing an index.","lastModifiedDate":"2021-09-04"},{"lineNumber":40,"author":{"gitId":"twothicc"},"content":"     * @throws DukeException If underlying methods or checks fail.","lastModifiedDate":"2021-09-04"},{"lineNumber":41,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"twothicc"},"content":"    private String markTask(TaskList tasks, Ui ui) throws DukeException {","lastModifiedDate":"2021-08-29"},{"lineNumber":43,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"twothicc"},"content":"        // Preliminary check for any input following command.","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"twothicc"},"content":"        Parser.checkInputValidity(this.userInput, UserCommands.DONE,","lastModifiedDate":"2021-09-04"},{"lineNumber":46,"author":{"gitId":"twothicc"},"content":"                new MissingIndexException(UserCommands.DONE));","lastModifiedDate":"2021-09-04"},{"lineNumber":47,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":48,"author":{"gitId":"twothicc"},"content":"        // Parses integer in user input.","lastModifiedDate":"2021-08-21"},{"lineNumber":49,"author":{"gitId":"twothicc"},"content":"        int userNumInput \u003d Parser.parseUserNumInput(this.userInput, UserCommands.DONE);","lastModifiedDate":"2021-09-04"},{"lineNumber":50,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":51,"author":{"gitId":"twothicc"},"content":"        // Decrement integer from user input to match indexing of tasks.","lastModifiedDate":"2021-08-21"},{"lineNumber":52,"author":{"gitId":"twothicc"},"content":"        int idx \u003d userNumInput - 1;","lastModifiedDate":"2021-08-21"},{"lineNumber":53,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":54,"author":{"gitId":"twothicc"},"content":"        // Checks for invalid index.","lastModifiedDate":"2021-08-21"},{"lineNumber":55,"author":{"gitId":"twothicc"},"content":"        if (idx \u003e\u003d tasks.size() || idx \u003c 0) {","lastModifiedDate":"2021-08-21"},{"lineNumber":56,"author":{"gitId":"twothicc"},"content":"            throw new InvalidIndexException(UserCommands.DONE);","lastModifiedDate":"2021-09-04"},{"lineNumber":57,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":58,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":59,"author":{"gitId":"twothicc"},"content":"        tasks.get(idx).markAsDone();","lastModifiedDate":"2021-08-21"},{"lineNumber":60,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":61,"author":{"gitId":"twothicc"},"content":"        return ui.getMarkSuccessMessage(tasks.get(idx));","lastModifiedDate":"2021-09-01"},{"lineNumber":62,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":63,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":64,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":65,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":66,"author":{"gitId":"twothicc"},"content":"     * Marks a task at index specified by user input as done, saves tasks to storage,","lastModifiedDate":"2021-08-29"},{"lineNumber":67,"author":{"gitId":"twothicc"},"content":"     * then returns String describing the marked task.","lastModifiedDate":"2021-08-29"},{"lineNumber":68,"author":{"gitId":"twothicc"},"content":"     * Accepts user input of the form \"done N\", where N can be any valid index.","lastModifiedDate":"2021-08-22"},{"lineNumber":69,"author":{"gitId":"twothicc"},"content":"     * Index provided should be 1-based.","lastModifiedDate":"2021-08-22"},{"lineNumber":70,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":71,"author":{"gitId":"twothicc"},"content":"     * @param tasks TaskList that command executes upon.","lastModifiedDate":"2021-08-22"},{"lineNumber":72,"author":{"gitId":"twothicc"},"content":"     * @param ui Ui contains enums, response messages and exception messages that command execution will use.","lastModifiedDate":"2021-08-22"},{"lineNumber":73,"author":{"gitId":"twothicc"},"content":"     * @param storage Storage that command executes upon.","lastModifiedDate":"2021-08-22"},{"lineNumber":74,"author":{"gitId":"twothicc"},"content":"     * @return DukeResponse containing string describing the marked task or error message.","lastModifiedDate":"2021-09-10"},{"lineNumber":75,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":76,"author":{"gitId":"twothicc"},"content":"    @Override","lastModifiedDate":"2021-08-21"},{"lineNumber":77,"author":{"gitId":"twothicc"},"content":"    public DukeResponse execute(TaskList tasks, Ui ui, Storable storage) {","lastModifiedDate":"2021-09-10"},{"lineNumber":78,"author":{"gitId":"twothicc"},"content":"        try {","lastModifiedDate":"2021-08-21"},{"lineNumber":79,"author":{"gitId":"twothicc"},"content":"            String output \u003d this.markTask(tasks, ui);","lastModifiedDate":"2021-08-29"},{"lineNumber":80,"author":{"gitId":"twothicc"},"content":"            storage.saveTasksToData(tasks);","lastModifiedDate":"2021-08-21"},{"lineNumber":81,"author":{"gitId":"twothicc"},"content":"            return new DukeResponse(output, false);","lastModifiedDate":"2021-09-10"},{"lineNumber":82,"author":{"gitId":"twothicc"},"content":"        } catch (DukeException dukeException) {","lastModifiedDate":"2021-08-21"},{"lineNumber":83,"author":{"gitId":"twothicc"},"content":"            return new DukeResponse(dukeException.toString(), true);","lastModifiedDate":"2021-09-10"},{"lineNumber":84,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":85,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":86,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":87,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":88,"author":{"gitId":"twothicc"},"content":"     * Indicates whether another object is equals to this MarkCommand.","lastModifiedDate":"2021-08-22"},{"lineNumber":89,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":90,"author":{"gitId":"twothicc"},"content":"     * @param obj Other object to be compared to.","lastModifiedDate":"2021-08-22"},{"lineNumber":91,"author":{"gitId":"twothicc"},"content":"     * @return A boolean indicating whether the other object is equal to this MarkCommand.","lastModifiedDate":"2021-08-22"},{"lineNumber":92,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":93,"author":{"gitId":"twothicc"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":94,"author":{"gitId":"twothicc"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2021-08-22"},{"lineNumber":95,"author":{"gitId":"twothicc"},"content":"        if (obj instanceof MarkCommand) {","lastModifiedDate":"2021-08-22"},{"lineNumber":96,"author":{"gitId":"twothicc"},"content":"            MarkCommand other \u003d (MarkCommand) obj;","lastModifiedDate":"2021-08-22"},{"lineNumber":97,"author":{"gitId":"twothicc"},"content":"            return this.userInput.equals(other.userInput);","lastModifiedDate":"2021-08-22"},{"lineNumber":98,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":99,"author":{"gitId":"twothicc"},"content":"        return false;","lastModifiedDate":"2021-08-22"},{"lineNumber":100,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":101,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"twothicc":101}},{"path":"src/main/java/duke/exception/CannotReadFileException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke.exception;","lastModifiedDate":"2021-09-04"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"/**","lastModifiedDate":"2021-09-04"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":" * Represents an exception caused by Duke being unable to read save file.","lastModifiedDate":"2021-09-04"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":" */","lastModifiedDate":"2021-09-04"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"public class CannotReadFileException extends DukeException {","lastModifiedDate":"2021-09-04"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-09-04"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"     * Constructor for CannotReadFileException.","lastModifiedDate":"2021-09-04"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-09-04"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"    public CannotReadFileException() {","lastModifiedDate":"2021-09-04"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"        super(\"Failed to read tasks from save file.\");","lastModifiedDate":"2021-09-04"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-09-04"}],"authorContributionMap":{"twothicc":13}},{"path":"src/main/java/duke/exception/CannotSaveFileException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke.exception;","lastModifiedDate":"2021-09-04"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"/**","lastModifiedDate":"2021-09-04"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":" * Represents an exception caused by Duke being unable to save tasks to save file.","lastModifiedDate":"2021-09-04"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":" */","lastModifiedDate":"2021-09-04"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"public class CannotSaveFileException extends DukeException {","lastModifiedDate":"2021-09-04"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-09-04"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"     * Constructor for CannotSaveFileException.","lastModifiedDate":"2021-09-04"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-09-04"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"    public CannotSaveFileException() {","lastModifiedDate":"2021-09-04"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"        super(\"Failed to save tasks.\");","lastModifiedDate":"2021-09-04"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-09-04"}],"authorContributionMap":{"twothicc":13}},{"path":"src/main/java/duke/exception/CorruptSaveFileException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke.exception;","lastModifiedDate":"2021-09-04"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"/**","lastModifiedDate":"2021-09-04"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":" * Represents an exception caused by Duke being unable to parse a saved Task.","lastModifiedDate":"2021-09-04"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":" */","lastModifiedDate":"2021-09-04"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"public class CorruptSaveFileException extends DukeException {","lastModifiedDate":"2021-09-04"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-09-04"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"     * Constructor for CorruptSaveFileException.","lastModifiedDate":"2021-09-04"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-09-04"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"    public CorruptSaveFileException() {","lastModifiedDate":"2021-09-04"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"        super(\"Save files corrupted. Failed to read tasks from save file.\");","lastModifiedDate":"2021-09-04"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-09-04"}],"authorContributionMap":{"twothicc":13}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke.exception;","lastModifiedDate":"2021-09-04"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"/**","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":" * Represents errors specific to Duke chatbot.","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":" */","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-08-14"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"    private final String errorMessage;","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"     * Constructor for DukeException.","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"     * Creates a DukeException with an error message.","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"     * @param errorMessage Message that describes the error represented by this DukeException.","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"    public DukeException(String errorMessage) {","lastModifiedDate":"2021-08-14"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"        super(errorMessage);","lastModifiedDate":"2021-08-14"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"        this.errorMessage \u003d errorMessage;","lastModifiedDate":"2021-08-14"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"twothicc"},"content":"     * Returns error message that describes the error represented by this DukeException.","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"twothicc"},"content":"     * @return Error message.","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"twothicc"},"content":"    public String getErrorMessage() {","lastModifiedDate":"2021-08-21"},{"lineNumber":26,"author":{"gitId":"twothicc"},"content":"        return errorMessage;","lastModifiedDate":"2021-08-21"},{"lineNumber":27,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":28,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":29,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"twothicc"},"content":"     * Returns a formatted error message.","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"twothicc"},"content":"     * @return Formatted error message.","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"twothicc"},"content":"    @Override","lastModifiedDate":"2021-08-14"},{"lineNumber":35,"author":{"gitId":"twothicc"},"content":"    public String toString() {","lastModifiedDate":"2021-08-14"},{"lineNumber":36,"author":{"gitId":"twothicc"},"content":"        return \"\\uD83D\\uDE41 OOPS!!! \" + this.errorMessage;","lastModifiedDate":"2021-08-14"},{"lineNumber":37,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":38,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"twothicc":38}},{"path":"src/main/java/duke/exception/InvalidDateTimeFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke.exception;","lastModifiedDate":"2021-09-04"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"/**","lastModifiedDate":"2021-09-04"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":" * Represents an exception caused by user providing a date in a format that cannot be parsed.","lastModifiedDate":"2021-09-04"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":" */","lastModifiedDate":"2021-09-04"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"public class InvalidDateTimeFormatException extends DukeException {","lastModifiedDate":"2021-09-04"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-09-04"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"     * Constructor for InvalidDateTimeFormatException.","lastModifiedDate":"2021-09-04"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-09-04"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"    public InvalidDateTimeFormatException() {","lastModifiedDate":"2021-09-04"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"        super(\"Cannot read invalid datetime format.\");","lastModifiedDate":"2021-09-04"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-09-04"}],"authorContributionMap":{"twothicc":13}},{"path":"src/main/java/duke/exception/InvalidIndexException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke.exception;","lastModifiedDate":"2021-09-04"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"import duke.Ui.UserCommands;","lastModifiedDate":"2021-09-04"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"/**","lastModifiedDate":"2021-09-04"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":" * Represents an exception caused by user providing an invalid index.","lastModifiedDate":"2021-09-04"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":" */","lastModifiedDate":"2021-09-04"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"public class InvalidIndexException extends DukeException {","lastModifiedDate":"2021-09-04"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-09-04"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"     * Constructor for InvalidIndexException.","lastModifiedDate":"2021-09-04"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-09-04"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"     * @param userCommand UserCommand for which index provided is invalid.","lastModifiedDate":"2021-09-04"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-09-04"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"    public InvalidIndexException(UserCommands userCommand) {","lastModifiedDate":"2021-09-04"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"        super(\"Index provided for \" + userCommand.getCommand()","lastModifiedDate":"2021-09-04"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"                + \" is either less than 1 or exceeds the length of the list, hence invalid.\");","lastModifiedDate":"2021-09-04"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-09-04"}],"authorContributionMap":{"twothicc":18}},{"path":"src/main/java/duke/exception/InvalidLocalDateException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke.exception;","lastModifiedDate":"2021-09-04"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"/**","lastModifiedDate":"2021-09-04"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":" * Represents an exception caused by Duke failing to parse a LocalDate into string format.","lastModifiedDate":"2021-09-04"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":" */","lastModifiedDate":"2021-09-04"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"public class InvalidLocalDateException extends DukeException {","lastModifiedDate":"2021-09-04"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-09-04"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"     * Constructor for InvalidLocalDateException.","lastModifiedDate":"2021-09-04"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-09-04"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"    public InvalidLocalDateException() {","lastModifiedDate":"2021-09-04"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"        super(\"Stored date is corrupt and cannot be read.\");","lastModifiedDate":"2021-09-04"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-09-04"}],"authorContributionMap":{"twothicc":13}},{"path":"src/main/java/duke/exception/InvalidNumberInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke.exception;","lastModifiedDate":"2021-09-04"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"import duke.Ui.UserCommands;","lastModifiedDate":"2021-09-04"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"/**","lastModifiedDate":"2021-09-04"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":" * Represents an exception caused by user providing a non-number index.","lastModifiedDate":"2021-09-04"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":" */","lastModifiedDate":"2021-09-04"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"public class InvalidNumberInputException extends DukeException {","lastModifiedDate":"2021-09-04"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-09-04"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"     * Constructor for InvalidNumberInputException.","lastModifiedDate":"2021-09-04"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-09-04"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"     * @param userCommand UserCommand for which user provided a non-number input","lastModifiedDate":"2021-09-04"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-09-04"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"    public InvalidNumberInputException(UserCommands userCommand) {","lastModifiedDate":"2021-09-04"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"        super(\"Index for \" + userCommand.getCommand() + \" must be an integer.\");","lastModifiedDate":"2021-09-04"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-09-04"}],"authorContributionMap":{"twothicc":17}},{"path":"src/main/java/duke/exception/InvalidPeriodException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke.exception;","lastModifiedDate":"2021-09-05"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"/**","lastModifiedDate":"2021-09-05"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":" * Represents an exception caused by user providing a chronologically invalid time period.","lastModifiedDate":"2021-09-05"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":" */","lastModifiedDate":"2021-09-05"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"public class InvalidPeriodException extends DukeException {","lastModifiedDate":"2021-09-05"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-09-05"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"     * Constructor for InvalidPeriodException.","lastModifiedDate":"2021-09-05"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-09-05"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"     * @param startDateString User input for start date.","lastModifiedDate":"2021-09-05"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"     * @param endDateString User input for end date.","lastModifiedDate":"2021-09-05"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-09-05"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"    public InvalidPeriodException(String startDateString, String endDateString) {","lastModifiedDate":"2021-09-05"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"        super(\"Time period provided is invalid as \" + startDateString + \" is later than \" + endDateString + \".\");","lastModifiedDate":"2021-09-05"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-09-05"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-09-05"}],"authorContributionMap":{"twothicc":16}},{"path":"src/main/java/duke/exception/InvalidUserCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke.exception;","lastModifiedDate":"2021-09-04"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"/**","lastModifiedDate":"2021-09-04"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":" * Represents an exception caused by a user input that Duke cannot parse.","lastModifiedDate":"2021-09-04"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":" */","lastModifiedDate":"2021-09-04"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"public class InvalidUserCommandException extends DukeException {","lastModifiedDate":"2021-09-04"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-09-04"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"     * Constructor for InvalidUserCommandException.","lastModifiedDate":"2021-09-04"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-09-04"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"     * @param invalidInput Invalid user input string.","lastModifiedDate":"2021-09-04"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-09-04"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"    public InvalidUserCommandException(String invalidInput) {","lastModifiedDate":"2021-09-04"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"        super(\"I\u0027m sorry, but I don\u0027t know what \" + invalidInput + \" means :-(\");","lastModifiedDate":"2021-09-04"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-09-04"}],"authorContributionMap":{"twothicc":15}},{"path":"src/main/java/duke/exception/MissingDateException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke.exception;","lastModifiedDate":"2021-09-04"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"/**","lastModifiedDate":"2021-09-04"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":" * Represents an exception caused by user not providing the expected number of dates.","lastModifiedDate":"2021-09-05"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":" */","lastModifiedDate":"2021-09-04"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"public class MissingDateException extends DukeException {","lastModifiedDate":"2021-09-04"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-09-04"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"     * Constructor for MissingDateException.","lastModifiedDate":"2021-09-04"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-09-04"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"    public MissingDateException() {","lastModifiedDate":"2021-09-04"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"        super(\"Insufficient date input provided.\");","lastModifiedDate":"2021-09-05"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-09-04"}],"authorContributionMap":{"twothicc":13}},{"path":"src/main/java/duke/exception/MissingIndexException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke.exception;","lastModifiedDate":"2021-09-04"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"import duke.Ui.UserCommands;","lastModifiedDate":"2021-09-04"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"/**","lastModifiedDate":"2021-09-04"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":" * Represents an exception caused by user not providing an index for delete command.","lastModifiedDate":"2021-09-04"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":" */","lastModifiedDate":"2021-09-04"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"public class MissingIndexException extends DukeException {","lastModifiedDate":"2021-09-04"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-09-04"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"     * Constructor for MissingIndexException.","lastModifiedDate":"2021-09-04"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-09-04"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"     * @param userCommand Command String for which index is missing.","lastModifiedDate":"2021-09-04"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-09-04"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"    public MissingIndexException(UserCommands userCommand) {","lastModifiedDate":"2021-09-04"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"        super(\"An index must be provided for \" + userCommand.getCommand());","lastModifiedDate":"2021-09-04"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-09-04"}],"authorContributionMap":{"twothicc":17}},{"path":"src/main/java/duke/exception/MissingSearchInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke.exception;","lastModifiedDate":"2021-09-04"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"/**","lastModifiedDate":"2021-09-04"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":" * Represents an exception caused by user not providing search keyword for find command.","lastModifiedDate":"2021-09-04"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":" */","lastModifiedDate":"2021-09-04"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"public class MissingSearchInputException extends DukeException {","lastModifiedDate":"2021-09-04"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-09-04"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"     * Constructor for MissingSearchInputException.","lastModifiedDate":"2021-09-04"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-09-04"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"    public MissingSearchInputException() {","lastModifiedDate":"2021-09-04"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"        super(\"Cannot perform search. Search keyword must be provided\");","lastModifiedDate":"2021-09-04"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-09-04"}],"authorContributionMap":{"twothicc":13}},{"path":"src/main/java/duke/exception/MissingSpaceAfterCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke.exception;","lastModifiedDate":"2021-09-04"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"import duke.Ui.UserCommands;","lastModifiedDate":"2021-09-04"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"/**","lastModifiedDate":"2021-09-04"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":" * Represents an exception caused by user not providing a space after UserCommand.","lastModifiedDate":"2021-09-04"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":" */","lastModifiedDate":"2021-09-04"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"public class MissingSpaceAfterCommandException extends DukeException {","lastModifiedDate":"2021-09-04"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-09-04"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"     * Constructor for MissingSpaceAfterCommandException.","lastModifiedDate":"2021-09-04"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-09-04"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"     * @param userCommand UserCommand for which space is missing after it.","lastModifiedDate":"2021-09-04"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-09-04"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"    public MissingSpaceAfterCommandException(UserCommands userCommand) {","lastModifiedDate":"2021-09-04"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"        super(\"There is a missing space after \" + userCommand.getCommand() + \".\");","lastModifiedDate":"2021-09-04"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-09-04"}],"authorContributionMap":{"twothicc":17}},{"path":"src/main/java/duke/exception/MissingSpaceAfterDescriptorException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke.exception;","lastModifiedDate":"2021-09-04"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"import duke.Ui.Descriptors;","lastModifiedDate":"2021-09-04"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"/**","lastModifiedDate":"2021-09-04"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":" * Represents an exception caused by user not providing a space after a descriptor.","lastModifiedDate":"2021-09-04"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":" */","lastModifiedDate":"2021-09-04"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"public class MissingSpaceAfterDescriptorException extends DukeException {","lastModifiedDate":"2021-09-04"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-09-04"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"     * Constructor for MissingSpaceBeforeDescriptorException.","lastModifiedDate":"2021-09-04"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-09-04"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"     * @param descriptor Descriptor for which space is missing before it.","lastModifiedDate":"2021-09-04"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-09-04"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"    public MissingSpaceAfterDescriptorException(Descriptors descriptor) {","lastModifiedDate":"2021-09-04"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"        super(\"There is a missing space after the descriptor \" + descriptor.getDescriptor() + \".\");","lastModifiedDate":"2021-09-04"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-09-04"}],"authorContributionMap":{"twothicc":17}},{"path":"src/main/java/duke/exception/MissingSpaceBeforeDescriptorException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke.exception;","lastModifiedDate":"2021-09-04"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"import duke.Ui.Descriptors;","lastModifiedDate":"2021-09-04"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"/**","lastModifiedDate":"2021-09-04"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":" * Represents an exception caused by user not providing a space before a descriptor.","lastModifiedDate":"2021-09-04"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":" */","lastModifiedDate":"2021-09-04"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"public class MissingSpaceBeforeDescriptorException extends DukeException {","lastModifiedDate":"2021-09-04"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-09-04"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"     * Constructor for MissingSpaceBeforeDescriptorException.","lastModifiedDate":"2021-09-04"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-09-04"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"     * @param descriptor Descriptor for which space is missing before it.","lastModifiedDate":"2021-09-04"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-09-04"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"    public MissingSpaceBeforeDescriptorException(Descriptors descriptor) {","lastModifiedDate":"2021-09-04"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"        super(\"There is a missing space before the descriptor \" + descriptor.getDescriptor() + \".\");","lastModifiedDate":"2021-09-04"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-09-04"}],"authorContributionMap":{"twothicc":17}},{"path":"src/main/java/duke/exception/MissingTaskDescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke.exception;","lastModifiedDate":"2021-09-04"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"import duke.Ui.UserCommands;","lastModifiedDate":"2021-09-04"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"/**","lastModifiedDate":"2021-09-04"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":" * Represents an exception caused by the user not providing a description for their tasks.","lastModifiedDate":"2021-09-04"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":" */","lastModifiedDate":"2021-09-04"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"public class MissingTaskDescriptionException extends DukeException {","lastModifiedDate":"2021-09-04"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-09-04"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"     * Constructor for MissingTaskDescriptionException.","lastModifiedDate":"2021-09-04"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-09-04"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"     * @param userCommand Command String for which description is missing.","lastModifiedDate":"2021-09-04"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-09-04"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"    public MissingTaskDescriptionException(UserCommands userCommand) {","lastModifiedDate":"2021-09-04"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"        super(\"The description of \" + userCommand.getCommand() + \" cannot be empty.\");","lastModifiedDate":"2021-09-04"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-09-04"}],"authorContributionMap":{"twothicc":17}},{"path":"src/main/java/duke/exception/WrongDescriptorException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke.exception;","lastModifiedDate":"2021-09-04"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"import duke.Ui.Descriptors;","lastModifiedDate":"2021-09-04"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"import duke.Ui.UserCommands;","lastModifiedDate":"2021-09-04"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"/**","lastModifiedDate":"2021-09-04"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":" * Represents an exception caused by user providing the wrong descriptor.","lastModifiedDate":"2021-09-04"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":" */","lastModifiedDate":"2021-09-04"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"public class WrongDescriptorException extends DukeException {","lastModifiedDate":"2021-09-04"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-09-04"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"     * Constructor for WrongDescriptorException.","lastModifiedDate":"2021-09-04"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-09-04"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"     * @param descriptor The expected descriptor.","lastModifiedDate":"2021-09-04"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"     * @param userCommand UserCommand for which wrong descriptor was provided.","lastModifiedDate":"2021-09-04"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-09-04"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"    public WrongDescriptorException(Descriptors descriptor, UserCommands userCommand) {","lastModifiedDate":"2021-09-04"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"        super(\"Wrong descriptor used. Descriptor for \" + userCommand.getCommand()","lastModifiedDate":"2021-09-04"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"                + \" should be \" + descriptor.getDescriptor() + \".\");","lastModifiedDate":"2021-09-04"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-09-04"}],"authorContributionMap":{"twothicc":20}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke.task;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"import duke.Parser;","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-09-04"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"/**","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":" * Represents a deadline with a description and a date that it is due by.","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":" */","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"public class Deadline extends TimedTask {","lastModifiedDate":"2021-09-04"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"     * Constructor for Deadline.","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"     * Creates a Deadline with description and a date.","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"     * @param description Description of task to be done by due date.","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"     * @param by Date that the task is due by.","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":"    public Deadline(String description, LocalDate by) {","lastModifiedDate":"2021-08-20"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":"        super(description, by);","lastModifiedDate":"2021-09-04"},{"lineNumber":21,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":22,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":23,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"twothicc"},"content":"     * Returns a string identifier for a Deadline.","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"twothicc"},"content":"     * String identifier for Deadline is \"D\".","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"twothicc"},"content":"     * @return String identifier for Deadline.","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"twothicc"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":30,"author":{"gitId":"twothicc"},"content":"    public String getTaskType() {","lastModifiedDate":"2021-08-19"},{"lineNumber":31,"author":{"gitId":"twothicc"},"content":"        return \"D\";","lastModifiedDate":"2021-08-19"},{"lineNumber":32,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":33,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":34,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"twothicc"},"content":"     * Returns a formatted string that starts with this Deadline\u0027s string identifier, followed by","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"twothicc"},"content":"     * its done status and description, and finally its due date.","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"twothicc"},"content":"     * @return Formatted description of this Deadline.","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"twothicc"},"content":"    @Override","lastModifiedDate":"2021-08-14"},{"lineNumber":41,"author":{"gitId":"twothicc"},"content":"    public String toString() {","lastModifiedDate":"2021-08-14"},{"lineNumber":42,"author":{"gitId":"twothicc"},"content":"        try {","lastModifiedDate":"2021-08-20"},{"lineNumber":43,"author":{"gitId":"twothicc"},"content":"            return \"[\" + this.getTaskType() + \"]\"","lastModifiedDate":"2021-09-05"},{"lineNumber":44,"author":{"gitId":"twothicc"},"content":"                    + super.toString() + \" (by: \" + Parser.parseLocalDate(super.date) + \")\";","lastModifiedDate":"2021-09-05"},{"lineNumber":45,"author":{"gitId":"twothicc"},"content":"        } catch (DukeException dukeException) {","lastModifiedDate":"2021-08-20"},{"lineNumber":46,"author":{"gitId":"twothicc"},"content":"            return dukeException.toString();","lastModifiedDate":"2021-08-20"},{"lineNumber":47,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":48,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":49,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":50,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"twothicc":50}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke.task;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"import duke.Parser;","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-09-04"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"/**","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":" * Represents an event with a description and a date that it occurs on.","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":" */","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"public class Event extends TimedTask {","lastModifiedDate":"2021-09-04"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"     * Constructor for Event.","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"     * Creates an Event with description and a date.","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"     * @param description Task description.","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"     * @param at Date that task occurs on.","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":"    public Event(String description, LocalDate at) {","lastModifiedDate":"2021-08-20"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":"        super(description, at);","lastModifiedDate":"2021-09-04"},{"lineNumber":21,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":22,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":23,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"twothicc"},"content":"     * Returns string identifier for an Event.","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"twothicc"},"content":"     * String identifier for an Event is \"E\".","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"twothicc"},"content":"     * @return String identifier for an Event.","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"twothicc"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":30,"author":{"gitId":"twothicc"},"content":"    public String getTaskType() {","lastModifiedDate":"2021-08-19"},{"lineNumber":31,"author":{"gitId":"twothicc"},"content":"        return \"E\";","lastModifiedDate":"2021-08-19"},{"lineNumber":32,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":33,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":34,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"twothicc"},"content":"     * Returns a formatted string that starts with this Event\u0027s string identifier, followed by","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"twothicc"},"content":"     * its done status and description, and finally its date of occurrence.","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"twothicc"},"content":"     * @return Formatted description of this Event.","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"twothicc"},"content":"    @Override","lastModifiedDate":"2021-08-14"},{"lineNumber":41,"author":{"gitId":"twothicc"},"content":"    public String toString() {","lastModifiedDate":"2021-08-14"},{"lineNumber":42,"author":{"gitId":"twothicc"},"content":"        try {","lastModifiedDate":"2021-08-20"},{"lineNumber":43,"author":{"gitId":"twothicc"},"content":"            return \"[\" + this.getTaskType() + \"]\"","lastModifiedDate":"2021-09-05"},{"lineNumber":44,"author":{"gitId":"twothicc"},"content":"                    + super.toString() + \" (at: \" + Parser.parseLocalDate(super.date) + \")\";","lastModifiedDate":"2021-09-05"},{"lineNumber":45,"author":{"gitId":"twothicc"},"content":"        } catch (DukeException dukeException) {","lastModifiedDate":"2021-08-20"},{"lineNumber":46,"author":{"gitId":"twothicc"},"content":"            return dukeException.toString();","lastModifiedDate":"2021-08-20"},{"lineNumber":47,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":48,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":49,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"twothicc":49}},{"path":"src/main/java/duke/task/Period.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke.task;","lastModifiedDate":"2021-09-04"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-04"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"import duke.Parser;","lastModifiedDate":"2021-09-05"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-09-05"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"/**","lastModifiedDate":"2021-09-04"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":" * Represents a task that must be done within a period of time.","lastModifiedDate":"2021-09-04"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":" */","lastModifiedDate":"2021-09-04"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"public class Period extends Task {","lastModifiedDate":"2021-09-05"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"    protected LocalDate startDate;","lastModifiedDate":"2021-09-04"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"    protected LocalDate endDate;","lastModifiedDate":"2021-09-04"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-09-04"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"     * Constructor for PeriodTask.","lastModifiedDate":"2021-09-04"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"     * Creates a PeriodTask containing a description and a start and end date.","lastModifiedDate":"2021-09-04"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-09-04"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":"     * @param description Description of the task.","lastModifiedDate":"2021-09-04"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-09-04"},{"lineNumber":21,"author":{"gitId":"twothicc"},"content":"    public Period(String description, LocalDate startDate, LocalDate endDate) {","lastModifiedDate":"2021-09-05"},{"lineNumber":22,"author":{"gitId":"twothicc"},"content":"        super(description);","lastModifiedDate":"2021-09-04"},{"lineNumber":23,"author":{"gitId":"twothicc"},"content":"        this.startDate \u003d startDate;","lastModifiedDate":"2021-09-04"},{"lineNumber":24,"author":{"gitId":"twothicc"},"content":"        this.endDate \u003d endDate;","lastModifiedDate":"2021-09-04"},{"lineNumber":25,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":26,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":27,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-09-04"},{"lineNumber":28,"author":{"gitId":"twothicc"},"content":"     * Returns the time period for this PeriodTask as an array.","lastModifiedDate":"2021-09-04"},{"lineNumber":29,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-09-04"},{"lineNumber":30,"author":{"gitId":"twothicc"},"content":"     * @return LocalDate array of two elements, the start and end date.","lastModifiedDate":"2021-09-04"},{"lineNumber":31,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-09-04"},{"lineNumber":32,"author":{"gitId":"twothicc"},"content":"    public LocalDate[] getPeriod() {","lastModifiedDate":"2021-09-04"},{"lineNumber":33,"author":{"gitId":"twothicc"},"content":"        return new LocalDate[]{startDate, endDate};","lastModifiedDate":"2021-09-04"},{"lineNumber":34,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":35,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":36,"author":{"gitId":"twothicc"},"content":"    @Override","lastModifiedDate":"2021-09-04"},{"lineNumber":37,"author":{"gitId":"twothicc"},"content":"    public String getTaskType() {","lastModifiedDate":"2021-09-04"},{"lineNumber":38,"author":{"gitId":"twothicc"},"content":"        return \"P\";","lastModifiedDate":"2021-09-04"},{"lineNumber":39,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":40,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":41,"author":{"gitId":"twothicc"},"content":"    @Override","lastModifiedDate":"2021-09-05"},{"lineNumber":42,"author":{"gitId":"twothicc"},"content":"    public String toString() {","lastModifiedDate":"2021-09-05"},{"lineNumber":43,"author":{"gitId":"twothicc"},"content":"        try {","lastModifiedDate":"2021-09-05"},{"lineNumber":44,"author":{"gitId":"twothicc"},"content":"            return \"[\" + this.getTaskType() + \"]\" + super.toString()","lastModifiedDate":"2021-09-05"},{"lineNumber":45,"author":{"gitId":"twothicc"},"content":"                    + \" (from: \" + Parser.parseLocalDate(startDate)","lastModifiedDate":"2021-09-05"},{"lineNumber":46,"author":{"gitId":"twothicc"},"content":"                    + \" to: \" + Parser.parseLocalDate(endDate) + \")\";","lastModifiedDate":"2021-09-05"},{"lineNumber":47,"author":{"gitId":"twothicc"},"content":"        } catch (DukeException dukeException) {","lastModifiedDate":"2021-09-05"},{"lineNumber":48,"author":{"gitId":"twothicc"},"content":"            return dukeException.toString();","lastModifiedDate":"2021-09-05"},{"lineNumber":49,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-09-05"},{"lineNumber":50,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-09-05"},{"lineNumber":51,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":52,"author":{"gitId":"twothicc"},"content":"    @Override","lastModifiedDate":"2021-09-04"},{"lineNumber":53,"author":{"gitId":"twothicc"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2021-09-04"},{"lineNumber":54,"author":{"gitId":"twothicc"},"content":"        if (obj instanceof Period) {","lastModifiedDate":"2021-09-05"},{"lineNumber":55,"author":{"gitId":"twothicc"},"content":"            Period other \u003d (Period) obj;","lastModifiedDate":"2021-09-05"},{"lineNumber":56,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":57,"author":{"gitId":"twothicc"},"content":"            // Check if done status, description and start \u0026 end date are the same.","lastModifiedDate":"2021-09-04"},{"lineNumber":58,"author":{"gitId":"twothicc"},"content":"            boolean isDoneStatusSame \u003d this.isDone \u003d\u003d other.isDone;","lastModifiedDate":"2021-09-04"},{"lineNumber":59,"author":{"gitId":"twothicc"},"content":"            boolean isDescriptionSame \u003d this.description.equals(other.description);","lastModifiedDate":"2021-09-04"},{"lineNumber":60,"author":{"gitId":"twothicc"},"content":"            boolean isStartDateSame \u003d this.startDate.equals(other.startDate);","lastModifiedDate":"2021-09-04"},{"lineNumber":61,"author":{"gitId":"twothicc"},"content":"            boolean isEndDateSame \u003d this.endDate.equals(other.endDate);","lastModifiedDate":"2021-09-04"},{"lineNumber":62,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":63,"author":{"gitId":"twothicc"},"content":"            return (isDoneStatusSame \u0026\u0026 isDescriptionSame \u0026\u0026 isStartDateSame \u0026\u0026 isEndDateSame);","lastModifiedDate":"2021-09-04"},{"lineNumber":64,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-09-04"},{"lineNumber":65,"author":{"gitId":"twothicc"},"content":"        return false;","lastModifiedDate":"2021-09-04"},{"lineNumber":66,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":67,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-09-04"}],"authorContributionMap":{"twothicc":67}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke.task;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"/**","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":" * Represents a task containing a description and a done status.","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":" */","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"public abstract class Task {","lastModifiedDate":"2021-09-04"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"    protected String description;","lastModifiedDate":"2021-08-14"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-14"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"     * Constructor for Task.","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"     * Creates a Task containing a description that is by default undone.","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"     * @param description Description of the task.","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"    public Task(String description) {","lastModifiedDate":"2021-08-14"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-14"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-14"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":21,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"twothicc"},"content":"     * Indicates whether this Task is done.","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"twothicc"},"content":"     * @return boolean indicating whether this Task is done.","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"twothicc"},"content":"    public boolean getIsDone() {","lastModifiedDate":"2021-08-21"},{"lineNumber":27,"author":{"gitId":"twothicc"},"content":"        return isDone;","lastModifiedDate":"2021-08-21"},{"lineNumber":28,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":29,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":30,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"twothicc"},"content":"     * Returns description of this Task.","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"twothicc"},"content":"     * @return Description contained in this Task.","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"twothicc"},"content":"    public String getDescription() {","lastModifiedDate":"2021-08-21"},{"lineNumber":36,"author":{"gitId":"twothicc"},"content":"        return description;","lastModifiedDate":"2021-08-21"},{"lineNumber":37,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":38,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":39,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"twothicc"},"content":"     * Returns \"X\" if this Task is done and \" \" otherwise.","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"twothicc"},"content":"     * @return A formatted String indicating if Task is done.","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"twothicc"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-14"},{"lineNumber":45,"author":{"gitId":"twothicc"},"content":"        return (this.isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":47,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":48,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":49,"author":{"gitId":"twothicc"},"content":"     * Marks this Task as done.","lastModifiedDate":"2021-08-22"},{"lineNumber":50,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":51,"author":{"gitId":"twothicc"},"content":"    public void markAsDone() {","lastModifiedDate":"2021-08-14"},{"lineNumber":52,"author":{"gitId":"twothicc"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-08-14"},{"lineNumber":53,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":54,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":55,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":56,"author":{"gitId":"twothicc"},"content":"     * Returns String identifier of this task.","lastModifiedDate":"2021-09-04"},{"lineNumber":57,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":58,"author":{"gitId":"twothicc"},"content":"     * @return Single letter String identifier of this task.","lastModifiedDate":"2021-09-04"},{"lineNumber":59,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":60,"author":{"gitId":"twothicc"},"content":"    public abstract String getTaskType();","lastModifiedDate":"2021-09-04"},{"lineNumber":61,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":62,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":63,"author":{"gitId":"twothicc"},"content":"     * Returns a formatted string that begins with this Task\u0027s done status and ends with its description.","lastModifiedDate":"2021-08-22"},{"lineNumber":64,"author":{"gitId":"twothicc"},"content":"     * The String is formatted to fit the form \"[S] D\", where S is either \"X\" or \" \" depending on this Task\u0027s","lastModifiedDate":"2021-08-22"},{"lineNumber":65,"author":{"gitId":"twothicc"},"content":"     * done status and D is this Task\u0027s description.","lastModifiedDate":"2021-08-22"},{"lineNumber":66,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":67,"author":{"gitId":"twothicc"},"content":"     * @return Formatted description of this Task.","lastModifiedDate":"2021-08-22"},{"lineNumber":68,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":69,"author":{"gitId":"twothicc"},"content":"    @Override","lastModifiedDate":"2021-08-14"},{"lineNumber":70,"author":{"gitId":"twothicc"},"content":"    public String toString() {","lastModifiedDate":"2021-08-14"},{"lineNumber":71,"author":{"gitId":"twothicc"},"content":"        return String.format(\"[%s] %s\", this.getStatusIcon(), this.description);","lastModifiedDate":"2021-08-14"},{"lineNumber":72,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":73,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":74,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":75,"author":{"gitId":"twothicc"},"content":"     * Indicates whether another object is equals to this Task.","lastModifiedDate":"2021-08-22"},{"lineNumber":76,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":77,"author":{"gitId":"twothicc"},"content":"     * @param obj Other object to be compared to.","lastModifiedDate":"2021-08-22"},{"lineNumber":78,"author":{"gitId":"twothicc"},"content":"     * @return A boolean indicating whether the other object is equals to this Task.","lastModifiedDate":"2021-08-22"},{"lineNumber":79,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":80,"author":{"gitId":"twothicc"},"content":"    @Override","lastModifiedDate":"2021-08-21"},{"lineNumber":81,"author":{"gitId":"twothicc"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2021-08-21"},{"lineNumber":82,"author":{"gitId":"twothicc"},"content":"        if (obj instanceof Task) {","lastModifiedDate":"2021-08-21"},{"lineNumber":83,"author":{"gitId":"twothicc"},"content":"            Task other \u003d (Task) obj;","lastModifiedDate":"2021-08-21"},{"lineNumber":84,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":85,"author":{"gitId":"twothicc"},"content":"            // Check is done status and description are the same.","lastModifiedDate":"2021-08-22"},{"lineNumber":86,"author":{"gitId":"twothicc"},"content":"            boolean isDoneStatusSame \u003d this.isDone \u003d\u003d other.isDone;","lastModifiedDate":"2021-08-22"},{"lineNumber":87,"author":{"gitId":"twothicc"},"content":"            boolean isDescriptionSame \u003d this.description.equals(other.description);","lastModifiedDate":"2021-08-22"},{"lineNumber":88,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":89,"author":{"gitId":"twothicc"},"content":"            return (isDoneStatusSame \u0026\u0026 isDescriptionSame);","lastModifiedDate":"2021-08-22"},{"lineNumber":90,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":91,"author":{"gitId":"twothicc"},"content":"        return false;","lastModifiedDate":"2021-08-21"},{"lineNumber":92,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":93,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"twothicc":93}},{"path":"src/main/java/duke/task/TimedTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke.task;","lastModifiedDate":"2021-09-04"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-04"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"/**","lastModifiedDate":"2021-09-04"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":" * Ensures that tasks inheriting this class have a date on top of description and done status.","lastModifiedDate":"2021-09-04"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":" */","lastModifiedDate":"2021-09-04"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"public abstract class TimedTask extends Task {","lastModifiedDate":"2021-09-04"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"    protected final LocalDate date;","lastModifiedDate":"2021-09-04"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-09-04"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"     * Constructor for TimedTask.","lastModifiedDate":"2021-09-04"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"     * Creates a Task containing a description and a time/time period that is by default undone.","lastModifiedDate":"2021-09-04"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-09-04"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"     * @param description Description of the task.","lastModifiedDate":"2021-09-04"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"     * @param localDate Date of the task.","lastModifiedDate":"2021-09-04"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-09-04"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":"    public TimedTask(String description, LocalDate localDate) {","lastModifiedDate":"2021-09-04"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":"        super(description);","lastModifiedDate":"2021-09-04"},{"lineNumber":21,"author":{"gitId":"twothicc"},"content":"        this.date \u003d localDate;","lastModifiedDate":"2021-09-04"},{"lineNumber":22,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":23,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":24,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-09-04"},{"lineNumber":25,"author":{"gitId":"twothicc"},"content":"     * Returns date stored in this TimedTask.","lastModifiedDate":"2021-09-04"},{"lineNumber":26,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-09-04"},{"lineNumber":27,"author":{"gitId":"twothicc"},"content":"     * @return LocalDate Date stored in TimedTask.","lastModifiedDate":"2021-09-04"},{"lineNumber":28,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-09-04"},{"lineNumber":29,"author":{"gitId":"twothicc"},"content":"    public LocalDate getTime() {","lastModifiedDate":"2021-09-04"},{"lineNumber":30,"author":{"gitId":"twothicc"},"content":"        return this.date;","lastModifiedDate":"2021-09-04"},{"lineNumber":31,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":32,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":33,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-09-04"},{"lineNumber":34,"author":{"gitId":"twothicc"},"content":"     * Indicates whether another object is equals to this TimedTask.","lastModifiedDate":"2021-09-04"},{"lineNumber":35,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-09-04"},{"lineNumber":36,"author":{"gitId":"twothicc"},"content":"     * @param obj Other object to be compared to.","lastModifiedDate":"2021-09-04"},{"lineNumber":37,"author":{"gitId":"twothicc"},"content":"     * @return A boolean indicating whether the other object is equals to this TimedTask.","lastModifiedDate":"2021-09-04"},{"lineNumber":38,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-09-04"},{"lineNumber":39,"author":{"gitId":"twothicc"},"content":"    @Override","lastModifiedDate":"2021-09-04"},{"lineNumber":40,"author":{"gitId":"twothicc"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2021-09-04"},{"lineNumber":41,"author":{"gitId":"twothicc"},"content":"        if (obj instanceof TimedTask) {","lastModifiedDate":"2021-09-04"},{"lineNumber":42,"author":{"gitId":"twothicc"},"content":"            TimedTask other \u003d (TimedTask) obj;","lastModifiedDate":"2021-09-04"},{"lineNumber":43,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":44,"author":{"gitId":"twothicc"},"content":"            // Check if done status, description and time are the same.","lastModifiedDate":"2021-09-04"},{"lineNumber":45,"author":{"gitId":"twothicc"},"content":"            boolean isDoneStatusSame \u003d this.isDone \u003d\u003d other.isDone;","lastModifiedDate":"2021-09-04"},{"lineNumber":46,"author":{"gitId":"twothicc"},"content":"            boolean isDescriptionSame \u003d this.description.equals(other.description);","lastModifiedDate":"2021-09-04"},{"lineNumber":47,"author":{"gitId":"twothicc"},"content":"            boolean isTimeSame \u003d this.date.equals(other.date);","lastModifiedDate":"2021-09-04"},{"lineNumber":48,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":49,"author":{"gitId":"twothicc"},"content":"            return (isDoneStatusSame \u0026\u0026 isDescriptionSame \u0026\u0026 isTimeSame);","lastModifiedDate":"2021-09-04"},{"lineNumber":50,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-09-04"},{"lineNumber":51,"author":{"gitId":"twothicc"},"content":"        return false;","lastModifiedDate":"2021-09-04"},{"lineNumber":52,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":53,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-09-04"}],"authorContributionMap":{"twothicc":53}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke.task;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"/**","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":" * Represents a todo with a description and done status.","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":" */","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-08-14"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"     * Constructor for Todo.","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"     * Creates a Todo with a description.","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"     * @param description Todo description.","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"    public Todo(String description) {","lastModifiedDate":"2021-08-14"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"        super(description);","lastModifiedDate":"2021-08-14"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":"     * Returns string identifier for a Todo.","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":"     * String identifier for a Todo is \"T\".","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"twothicc"},"content":"     * @return String identifier for Todo.","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"twothicc"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":25,"author":{"gitId":"twothicc"},"content":"    public String getTaskType() {","lastModifiedDate":"2021-08-19"},{"lineNumber":26,"author":{"gitId":"twothicc"},"content":"        return \"T\";","lastModifiedDate":"2021-08-19"},{"lineNumber":27,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":28,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":29,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"twothicc"},"content":"     * Returns a formatted string that begins with this Todo\u0027s string identifier, followed by its done status","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"twothicc"},"content":"     * and description.","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"twothicc"},"content":"     * @return Formatted description of this Todo.","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"twothicc"},"content":"    @Override","lastModifiedDate":"2021-08-14"},{"lineNumber":36,"author":{"gitId":"twothicc"},"content":"    public String toString() {","lastModifiedDate":"2021-08-14"},{"lineNumber":37,"author":{"gitId":"twothicc"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2021-08-14"},{"lineNumber":38,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":39,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":40,"author":{"gitId":"twothicc"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"twothicc"},"content":"     * Indicates whether another object is equals to this Todo.","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"twothicc"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"twothicc"},"content":"     * @param obj Other object to be compared to.","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"twothicc"},"content":"     * @return A boolean indicating whether the other object is equals to this Todo.","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"twothicc"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"twothicc"},"content":"    @Override","lastModifiedDate":"2021-08-21"},{"lineNumber":47,"author":{"gitId":"twothicc"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2021-08-21"},{"lineNumber":48,"author":{"gitId":"twothicc"},"content":"        if (obj instanceof Todo) {","lastModifiedDate":"2021-08-21"},{"lineNumber":49,"author":{"gitId":"twothicc"},"content":"            Todo other \u003d (Todo) obj;","lastModifiedDate":"2021-08-21"},{"lineNumber":50,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":51,"author":{"gitId":"twothicc"},"content":"            // Check is done status and description are the same.","lastModifiedDate":"2021-08-22"},{"lineNumber":52,"author":{"gitId":"twothicc"},"content":"            boolean isDoneStatusSame \u003d this.isDone \u003d\u003d other.isDone;","lastModifiedDate":"2021-08-22"},{"lineNumber":53,"author":{"gitId":"twothicc"},"content":"            boolean isDescriptionSame \u003d this.description.equals(other.description);","lastModifiedDate":"2021-08-22"},{"lineNumber":54,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":55,"author":{"gitId":"twothicc"},"content":"            return (isDoneStatusSame \u0026\u0026 isDescriptionSame);","lastModifiedDate":"2021-08-22"},{"lineNumber":56,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":57,"author":{"gitId":"twothicc"},"content":"        return false;","lastModifiedDate":"2021-08-21"},{"lineNumber":58,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":59,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"twothicc":59}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"\u003c?import javafx.scene.text.Font?\u003e","lastModifiedDate":"2021-09-10"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\"","lastModifiedDate":"2021-09-03"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"         style\u003d\"-fx-background-color: transparent;\" type\u003d\"javafx.scene.layout.HBox\"","lastModifiedDate":"2021-09-10"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"         xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-09-10"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"        \u003cLabel fx:id\u003d\"dialog\" minHeight\u003d\"-Infinity\" style\u003d\"-fx-background-radius: 5;\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e","lastModifiedDate":"2021-09-10"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"         \u003cpadding\u003e","lastModifiedDate":"2021-09-10"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"            \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e","lastModifiedDate":"2021-09-10"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"         \u003c/padding\u003e","lastModifiedDate":"2021-09-10"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"         \u003cHBox.margin\u003e","lastModifiedDate":"2021-09-10"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"            \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e","lastModifiedDate":"2021-09-10"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":"         \u003c/HBox.margin\u003e","lastModifiedDate":"2021-09-10"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":"         \u003cfont\u003e","lastModifiedDate":"2021-09-10"},{"lineNumber":21,"author":{"gitId":"twothicc"},"content":"            \u003cFont name\u003d\"Tahoma\" size\u003d\"12.0\" /\u003e","lastModifiedDate":"2021-09-10"},{"lineNumber":22,"author":{"gitId":"twothicc"},"content":"         \u003c/font\u003e\u003c/Label\u003e","lastModifiedDate":"2021-09-10"},{"lineNumber":23,"author":{"gitId":"twothicc"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"twothicc"},"content":"    \u003c/children\u003e","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"twothicc"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"twothicc"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2021-08-29"},{"lineNumber":27,"author":{"gitId":"twothicc"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"twothicc"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"twothicc":28}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"\u003c?import javafx.scene.Scene?\u003e","lastModifiedDate":"2021-09-10"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"\u003c?import javafx.scene.text.Font?\u003e","lastModifiedDate":"2021-09-10"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"\u003c?import javafx.stage.Stage?\u003e","lastModifiedDate":"2021-09-10"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"\u003cfx:root minHeight\u003d\"600.0\" minWidth\u003d\"400.0\" onCloseRequest\u003d\"#handleUserBye\" onShown\u003d\"#handleUserWelcome\" title\u003d\"Duke\"","lastModifiedDate":"2021-09-10"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"         type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-09-10"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"    \u003cscene\u003e","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"        \u003cScene\u003e","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"            \u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\"","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"                        prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\"","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"                        xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":"                \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\"","lastModifiedDate":"2021-09-10"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":"                           prefWidth\u003d\"324.0\" style\u003d\"-fx-border-color: black;\" AnchorPane.bottomAnchor\u003d\"1.0\"\u003e","lastModifiedDate":"2021-09-10"},{"lineNumber":21,"author":{"gitId":"twothicc"},"content":"               \u003cfont\u003e","lastModifiedDate":"2021-09-10"},{"lineNumber":22,"author":{"gitId":"twothicc"},"content":"                  \u003cFont name\u003d\"Tahoma\" size\u003d\"12.0\" /\u003e","lastModifiedDate":"2021-09-10"},{"lineNumber":23,"author":{"gitId":"twothicc"},"content":"               \u003c/font\u003e\u003c/TextField\u003e","lastModifiedDate":"2021-09-10"},{"lineNumber":24,"author":{"gitId":"twothicc"},"content":"                \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\"","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"twothicc"},"content":"                        onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\"","lastModifiedDate":"2021-09-10"},{"lineNumber":26,"author":{"gitId":"twothicc"},"content":"                        style\u003d\"-fx-background-color: black;\" text\u003d\"Send\" textFill\u003d\"WHITE\" /\u003e","lastModifiedDate":"2021-09-10"},{"lineNumber":27,"author":{"gitId":"twothicc"},"content":"                \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\"","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"twothicc"},"content":"                            prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2021-09-10"},{"lineNumber":29,"author":{"gitId":"twothicc"},"content":"                    \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\"/\u003e","lastModifiedDate":"2021-09-10"},{"lineNumber":30,"author":{"gitId":"twothicc"},"content":"                    \u003cstyle\u003e","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"twothicc"},"content":"                        -fx-border-color: black;","lastModifiedDate":"2021-09-10"},{"lineNumber":32,"author":{"gitId":"twothicc"},"content":"                        -fx-background-image: url(\"images/chatBackground.jpg\");","lastModifiedDate":"2021-09-10"},{"lineNumber":33,"author":{"gitId":"twothicc"},"content":"                        -fx-background-size: cover;","lastModifiedDate":"2021-09-10"},{"lineNumber":34,"author":{"gitId":"twothicc"},"content":"                        -fx-background-position: center;","lastModifiedDate":"2021-09-10"},{"lineNumber":35,"author":{"gitId":"twothicc"},"content":"                        -fx-background-attachment: fixed;","lastModifiedDate":"2021-09-10"},{"lineNumber":36,"author":{"gitId":"twothicc"},"content":"                        -fx-background-repeat: no-repeat;","lastModifiedDate":"2021-09-10"},{"lineNumber":37,"author":{"gitId":"twothicc"},"content":"                        -fx-background: rgba(255,255,255,0.1);","lastModifiedDate":"2021-09-10"},{"lineNumber":38,"author":{"gitId":"twothicc"},"content":"                    \u003c/style\u003e","lastModifiedDate":"2021-08-29"},{"lineNumber":39,"author":{"gitId":"twothicc"},"content":"                \u003c/ScrollPane\u003e","lastModifiedDate":"2021-08-29"},{"lineNumber":40,"author":{"gitId":"twothicc"},"content":"            \u003c/AnchorPane\u003e","lastModifiedDate":"2021-08-29"},{"lineNumber":41,"author":{"gitId":"twothicc"},"content":"        \u003c/Scene\u003e","lastModifiedDate":"2021-08-29"},{"lineNumber":42,"author":{"gitId":"twothicc"},"content":"    \u003c/scene\u003e","lastModifiedDate":"2021-08-29"},{"lineNumber":43,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":44,"author":{"gitId":"twothicc"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"twothicc":44}},{"path":"src/test/java/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"import duke.Ui.UserCommands;","lastModifiedDate":"2021-09-04"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"import duke.command.AddCommand;","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"import duke.command.DateCommand;","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"import duke.command.DeleteCommand;","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"import duke.command.ListCommand;","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"import duke.command.MarkCommand;","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-09-04"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"import duke.exception.InvalidDateTimeFormatException;","lastModifiedDate":"2021-09-04"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"import duke.exception.InvalidNumberInputException;","lastModifiedDate":"2021-09-04"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":"import duke.exception.MissingDateException;","lastModifiedDate":"2021-09-04"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":"import duke.exception.MissingIndexException;","lastModifiedDate":"2021-09-04"},{"lineNumber":21,"author":{"gitId":"twothicc"},"content":"import duke.exception.MissingSpaceAfterCommandException;","lastModifiedDate":"2021-09-04"},{"lineNumber":22,"author":{"gitId":"twothicc"},"content":"import duke.exception.MissingSpaceAfterDescriptorException;","lastModifiedDate":"2021-09-04"},{"lineNumber":23,"author":{"gitId":"twothicc"},"content":"import duke.exception.MissingSpaceBeforeDescriptorException;","lastModifiedDate":"2021-09-04"},{"lineNumber":24,"author":{"gitId":"twothicc"},"content":"import duke.exception.MissingTaskDescriptionException;","lastModifiedDate":"2021-09-04"},{"lineNumber":25,"author":{"gitId":"twothicc"},"content":"import duke.exception.WrongDescriptorException;","lastModifiedDate":"2021-09-04"},{"lineNumber":26,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"twothicc"},"content":"class ParserTest {","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"twothicc"},"content":"    private static final LocalDate TIME \u003d LocalDate.parse(\"2020-01-01\");","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"twothicc"},"content":"    void parse_listInput_listCommand() {","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"twothicc"},"content":"        ListCommand listCommand \u003d new ListCommand(\"list\");","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"twothicc"},"content":"        assertEquals(listCommand, Parser.parse(\"list\"));","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"twothicc"},"content":"    void parse_listExtra_addCommand() {","lastModifiedDate":"2021-08-28"},{"lineNumber":40,"author":{"gitId":"twothicc"},"content":"        AddCommand addCommand \u003d new AddCommand(\"listExtra\");","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"twothicc"},"content":"        assertEquals(addCommand, Parser.parse(\"listExtra\"));","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"twothicc"},"content":"    void parse_doneInput_markCommand() {","lastModifiedDate":"2021-08-22"},{"lineNumber":47,"author":{"gitId":"twothicc"},"content":"        MarkCommand markCommand \u003d new MarkCommand(\"done 1\");","lastModifiedDate":"2021-08-22"},{"lineNumber":48,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":49,"author":{"gitId":"twothicc"},"content":"        assertEquals(markCommand, Parser.parse(\"done 1\"));","lastModifiedDate":"2021-08-22"},{"lineNumber":50,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":51,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":52,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":53,"author":{"gitId":"twothicc"},"content":"    void parse_deleteInput_deleteCommand() {","lastModifiedDate":"2021-08-22"},{"lineNumber":54,"author":{"gitId":"twothicc"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(\"delete 1\");","lastModifiedDate":"2021-08-22"},{"lineNumber":55,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":56,"author":{"gitId":"twothicc"},"content":"        assertEquals(deleteCommand, Parser.parse(\"delete 1\"));","lastModifiedDate":"2021-08-22"},{"lineNumber":57,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":58,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":59,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":60,"author":{"gitId":"twothicc"},"content":"    void parse_addInput_addCommand() {","lastModifiedDate":"2021-08-22"},{"lineNumber":61,"author":{"gitId":"twothicc"},"content":"        AddCommand addCommand \u003d new AddCommand(\"todo task\");","lastModifiedDate":"2021-08-22"},{"lineNumber":62,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":63,"author":{"gitId":"twothicc"},"content":"        assertEquals(addCommand, Parser.parse(\"todo task\"));","lastModifiedDate":"2021-08-22"},{"lineNumber":64,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":65,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":66,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":67,"author":{"gitId":"twothicc"},"content":"    void parse_dateInput_dateCommand() {","lastModifiedDate":"2021-08-22"},{"lineNumber":68,"author":{"gitId":"twothicc"},"content":"        DateCommand dateCommand \u003d new DateCommand(\"date 1/1/2020\");","lastModifiedDate":"2021-08-22"},{"lineNumber":69,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":70,"author":{"gitId":"twothicc"},"content":"        assertEquals(dateCommand, Parser.parse(\"date 1/1/2020\"));","lastModifiedDate":"2021-08-22"},{"lineNumber":71,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":72,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":73,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":74,"author":{"gitId":"twothicc"},"content":"    void checkInputValidity_validInputs_noExceptionThrown() throws DukeException {","lastModifiedDate":"2021-08-22"},{"lineNumber":75,"author":{"gitId":"twothicc"},"content":"        DukeException dummyException \u003d new DukeException(\"dummy\");","lastModifiedDate":"2021-09-04"},{"lineNumber":76,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":77,"author":{"gitId":"twothicc"},"content":"        String validInput \u003d \"done 1\";","lastModifiedDate":"2021-08-22"},{"lineNumber":78,"author":{"gitId":"twothicc"},"content":"        UserCommands validInputCommand \u003d UserCommands.DONE;","lastModifiedDate":"2021-09-04"},{"lineNumber":79,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":80,"author":{"gitId":"twothicc"},"content":"        String validInput1 \u003d \"todo task\";","lastModifiedDate":"2021-08-22"},{"lineNumber":81,"author":{"gitId":"twothicc"},"content":"        UserCommands validInput1Command \u003d UserCommands.TODO;","lastModifiedDate":"2021-09-04"},{"lineNumber":82,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":83,"author":{"gitId":"twothicc"},"content":"        String validInput2 \u003d \"event task /at 1/1/2020\";","lastModifiedDate":"2021-08-22"},{"lineNumber":84,"author":{"gitId":"twothicc"},"content":"        UserCommands validInput2Command \u003d UserCommands.EVENT;","lastModifiedDate":"2021-09-04"},{"lineNumber":85,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":86,"author":{"gitId":"twothicc"},"content":"        Parser.checkInputValidity(validInput, validInputCommand, dummyException);","lastModifiedDate":"2021-09-04"},{"lineNumber":87,"author":{"gitId":"twothicc"},"content":"        Parser.checkInputValidity(validInput1, validInput1Command, dummyException);","lastModifiedDate":"2021-09-04"},{"lineNumber":88,"author":{"gitId":"twothicc"},"content":"        Parser.checkInputValidity(validInput2, validInput2Command, dummyException);","lastModifiedDate":"2021-09-04"},{"lineNumber":89,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":90,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":91,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":92,"author":{"gitId":"twothicc"},"content":"    void checkInputValidity_invalidInputs_dukeExceptionThrown() {","lastModifiedDate":"2021-08-22"},{"lineNumber":93,"author":{"gitId":"twothicc"},"content":"        String invalidInput \u003d \"done1\";","lastModifiedDate":"2021-08-22"},{"lineNumber":94,"author":{"gitId":"twothicc"},"content":"        UserCommands invalidInputCommand \u003d UserCommands.DONE;","lastModifiedDate":"2021-09-04"},{"lineNumber":95,"author":{"gitId":"twothicc"},"content":"        MissingSpaceAfterCommandException invalidInputException \u003d","lastModifiedDate":"2021-09-04"},{"lineNumber":96,"author":{"gitId":"twothicc"},"content":"                new MissingSpaceAfterCommandException(UserCommands.DONE);","lastModifiedDate":"2021-09-04"},{"lineNumber":97,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":98,"author":{"gitId":"twothicc"},"content":"        String invalidInput1 \u003d \"delete \";","lastModifiedDate":"2021-08-22"},{"lineNumber":99,"author":{"gitId":"twothicc"},"content":"        UserCommands invalidInput1Command \u003d UserCommands.DELETE;","lastModifiedDate":"2021-09-04"},{"lineNumber":100,"author":{"gitId":"twothicc"},"content":"        MissingIndexException invalidInput1Exception \u003d new MissingIndexException(UserCommands.DELETE);","lastModifiedDate":"2021-09-04"},{"lineNumber":101,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":102,"author":{"gitId":"twothicc"},"content":"        String invalidInput2 \u003d \"done\";","lastModifiedDate":"2021-08-22"},{"lineNumber":103,"author":{"gitId":"twothicc"},"content":"        UserCommands invalidInput2Command \u003d UserCommands.DONE;","lastModifiedDate":"2021-09-04"},{"lineNumber":104,"author":{"gitId":"twothicc"},"content":"        MissingIndexException invalidInput2Exception \u003d new MissingIndexException(UserCommands.DONE);","lastModifiedDate":"2021-09-04"},{"lineNumber":105,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":106,"author":{"gitId":"twothicc"},"content":"        DukeException dukeException \u003d assertThrows(DukeException.class, () -\u003e {","lastModifiedDate":"2021-08-28"},{"lineNumber":107,"author":{"gitId":"twothicc"},"content":"            Parser.checkInputValidity(invalidInput, invalidInputCommand, invalidInputException);","lastModifiedDate":"2021-09-04"},{"lineNumber":108,"author":{"gitId":"twothicc"},"content":"        });","lastModifiedDate":"2021-08-28"},{"lineNumber":109,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":110,"author":{"gitId":"twothicc"},"content":"        assertEquals(invalidInputException.getErrorMessage(), dukeException.getErrorMessage());","lastModifiedDate":"2021-09-04"},{"lineNumber":111,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":112,"author":{"gitId":"twothicc"},"content":"        DukeException dukeException1 \u003d assertThrows(MissingIndexException.class, () -\u003e {","lastModifiedDate":"2021-09-04"},{"lineNumber":113,"author":{"gitId":"twothicc"},"content":"            Parser.checkInputValidity(invalidInput1, invalidInput1Command, invalidInput1Exception);","lastModifiedDate":"2021-09-04"},{"lineNumber":114,"author":{"gitId":"twothicc"},"content":"        });","lastModifiedDate":"2021-08-28"},{"lineNumber":115,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":116,"author":{"gitId":"twothicc"},"content":"        assertEquals(invalidInput1Exception.getErrorMessage(), dukeException1.getErrorMessage());","lastModifiedDate":"2021-09-04"},{"lineNumber":117,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":118,"author":{"gitId":"twothicc"},"content":"        DukeException dukeException2 \u003d assertThrows(DukeException.class, () -\u003e {","lastModifiedDate":"2021-08-28"},{"lineNumber":119,"author":{"gitId":"twothicc"},"content":"            Parser.checkInputValidity(invalidInput2, invalidInput2Command, invalidInput2Exception);","lastModifiedDate":"2021-09-04"},{"lineNumber":120,"author":{"gitId":"twothicc"},"content":"        });","lastModifiedDate":"2021-08-28"},{"lineNumber":121,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":122,"author":{"gitId":"twothicc"},"content":"        assertEquals(invalidInput2Exception.getErrorMessage(), dukeException2.getErrorMessage());","lastModifiedDate":"2021-09-04"},{"lineNumber":123,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":124,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":125,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":126,"author":{"gitId":"twothicc"},"content":"    void parseLocalDate_localDate_dateString() throws DukeException {","lastModifiedDate":"2021-08-22"},{"lineNumber":127,"author":{"gitId":"twothicc"},"content":"        assertEquals(\"1 January 2020\", Parser.parseLocalDate(TIME));","lastModifiedDate":"2021-08-22"},{"lineNumber":128,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":129,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":130,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":131,"author":{"gitId":"twothicc"},"content":"    void toLocalDate_validDateString_localDate() throws DukeException {","lastModifiedDate":"2021-08-22"},{"lineNumber":132,"author":{"gitId":"twothicc"},"content":"        String dateString \u003d \"1/1/2020\";","lastModifiedDate":"2021-08-22"},{"lineNumber":133,"author":{"gitId":"twothicc"},"content":"        assertEquals(TIME, Parser.dateToLocalDate(dateString));","lastModifiedDate":"2021-09-05"},{"lineNumber":134,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":135,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":136,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":137,"author":{"gitId":"twothicc"},"content":"    void toLocalDate_invalidDateStrings_dukeExceptionThrown() {","lastModifiedDate":"2021-08-22"},{"lineNumber":138,"author":{"gitId":"twothicc"},"content":"        String invalidDateString \u003d \"100/100/100\";","lastModifiedDate":"2021-08-22"},{"lineNumber":139,"author":{"gitId":"twothicc"},"content":"        String invalidDateString1 \u003d \"100/100\";","lastModifiedDate":"2021-08-22"},{"lineNumber":140,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":141,"author":{"gitId":"twothicc"},"content":"        assertThrows(InvalidDateTimeFormatException.class, () -\u003e {","lastModifiedDate":"2021-09-04"},{"lineNumber":142,"author":{"gitId":"twothicc"},"content":"            Parser.dateToLocalDate(invalidDateString);","lastModifiedDate":"2021-09-05"},{"lineNumber":143,"author":{"gitId":"twothicc"},"content":"        });","lastModifiedDate":"2021-08-28"},{"lineNumber":144,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":145,"author":{"gitId":"twothicc"},"content":"        assertThrows(InvalidDateTimeFormatException.class, () -\u003e {","lastModifiedDate":"2021-09-04"},{"lineNumber":146,"author":{"gitId":"twothicc"},"content":"            Parser.dateToLocalDate(invalidDateString1);","lastModifiedDate":"2021-09-05"},{"lineNumber":147,"author":{"gitId":"twothicc"},"content":"        });","lastModifiedDate":"2021-08-28"},{"lineNumber":148,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":149,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":150,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":151,"author":{"gitId":"twothicc"},"content":"    void parseUserNumInput_validNumInput_int() throws DukeException {","lastModifiedDate":"2021-08-22"},{"lineNumber":152,"author":{"gitId":"twothicc"},"content":"        String validNumInput \u003d \"done 1\";","lastModifiedDate":"2021-08-22"},{"lineNumber":153,"author":{"gitId":"twothicc"},"content":"        UserCommands validNumInputCommand \u003d UserCommands.DONE;","lastModifiedDate":"2021-09-04"},{"lineNumber":154,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":155,"author":{"gitId":"twothicc"},"content":"        assertEquals(1, Parser.parseUserNumInput(validNumInput, validNumInputCommand));","lastModifiedDate":"2021-08-22"},{"lineNumber":156,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":157,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":158,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":159,"author":{"gitId":"twothicc"},"content":"    void parseUserNumInput_invalidNumInput_dukeExceptionThrown() {","lastModifiedDate":"2021-08-22"},{"lineNumber":160,"author":{"gitId":"twothicc"},"content":"        String invalidNumInput \u003d \"done abc\";","lastModifiedDate":"2021-08-22"},{"lineNumber":161,"author":{"gitId":"twothicc"},"content":"        UserCommands invalidNumInputCommand \u003d UserCommands.DONE;","lastModifiedDate":"2021-09-04"},{"lineNumber":162,"author":{"gitId":"twothicc"},"content":"        InvalidNumberInputException invalidNumInputException \u003d","lastModifiedDate":"2021-09-04"},{"lineNumber":163,"author":{"gitId":"twothicc"},"content":"                new InvalidNumberInputException(invalidNumInputCommand);","lastModifiedDate":"2021-09-04"},{"lineNumber":164,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":165,"author":{"gitId":"twothicc"},"content":"        InvalidNumberInputException exception \u003d assertThrows(InvalidNumberInputException.class, () -\u003e {","lastModifiedDate":"2021-09-04"},{"lineNumber":166,"author":{"gitId":"twothicc"},"content":"            Parser.parseUserNumInput(invalidNumInput, invalidNumInputCommand);","lastModifiedDate":"2021-08-28"},{"lineNumber":167,"author":{"gitId":"twothicc"},"content":"        });","lastModifiedDate":"2021-08-28"},{"lineNumber":168,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":169,"author":{"gitId":"twothicc"},"content":"        assertEquals(invalidNumInputException.getErrorMessage(), exception.getErrorMessage());","lastModifiedDate":"2021-09-04"},{"lineNumber":170,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":171,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":172,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":173,"author":{"gitId":"twothicc"},"content":"    void parseUserDescriptionInput_validDescriptionInput_arrayDescriptionTime() throws DukeException {","lastModifiedDate":"2021-08-22"},{"lineNumber":174,"author":{"gitId":"twothicc"},"content":"        UserCommands command \u003d UserCommands.EVENT;","lastModifiedDate":"2021-09-04"},{"lineNumber":175,"author":{"gitId":"twothicc"},"content":"        Ui.Descriptors descriptor \u003d Ui.Descriptors.AT;","lastModifiedDate":"2021-08-22"},{"lineNumber":176,"author":{"gitId":"twothicc"},"content":"        char separator \u003d \u0027/\u0027;","lastModifiedDate":"2021-08-22"},{"lineNumber":177,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":178,"author":{"gitId":"twothicc"},"content":"        String validDescriptionInput \u003d \"task description /at 1/1/2020\";","lastModifiedDate":"2021-08-22"},{"lineNumber":179,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":180,"author":{"gitId":"twothicc"},"content":"        String[] expected \u003d {\"task description\", \"1/1/2020\"};","lastModifiedDate":"2021-08-22"},{"lineNumber":181,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":182,"author":{"gitId":"twothicc"},"content":"        String[] actual \u003d Parser.parseUserDescriptionInput(validDescriptionInput, descriptor, separator, command);","lastModifiedDate":"2021-08-22"},{"lineNumber":183,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":184,"author":{"gitId":"twothicc"},"content":"        assertEquals(expected.length, actual.length);","lastModifiedDate":"2021-08-22"},{"lineNumber":185,"author":{"gitId":"twothicc"},"content":"        assertEquals(expected[0], actual[0]);","lastModifiedDate":"2021-08-22"},{"lineNumber":186,"author":{"gitId":"twothicc"},"content":"        assertEquals(expected[1], actual[1]);","lastModifiedDate":"2021-08-22"},{"lineNumber":187,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":188,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":189,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":190,"author":{"gitId":"twothicc"},"content":"    void parserUserDescriptionInput_missingTaskDescription_exceptionThrown() {","lastModifiedDate":"2021-09-14"},{"lineNumber":191,"author":{"gitId":"twothicc"},"content":"        UserCommands command \u003d UserCommands.EVENT;","lastModifiedDate":"2021-09-04"},{"lineNumber":192,"author":{"gitId":"twothicc"},"content":"        Ui.Descriptors descriptor \u003d Ui.Descriptors.AT;","lastModifiedDate":"2021-08-22"},{"lineNumber":193,"author":{"gitId":"twothicc"},"content":"        char separator \u003d \u0027/\u0027;","lastModifiedDate":"2021-08-22"},{"lineNumber":194,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":195,"author":{"gitId":"twothicc"},"content":"        String missingTaskDescription \u003d \"/at 1/1/2020\";","lastModifiedDate":"2021-09-10"},{"lineNumber":196,"author":{"gitId":"twothicc"},"content":"        MissingTaskDescriptionException missingTaskDescriptionException \u003d new MissingTaskDescriptionException(command);","lastModifiedDate":"2021-09-10"},{"lineNumber":197,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":198,"author":{"gitId":"twothicc"},"content":"        DukeException dukeException \u003d assertThrows(MissingTaskDescriptionException.class, () -\u003e {","lastModifiedDate":"2021-09-14"},{"lineNumber":199,"author":{"gitId":"twothicc"},"content":"            Parser.parseUserDescriptionInput(missingTaskDescription, descriptor, separator, command);","lastModifiedDate":"2021-09-14"},{"lineNumber":200,"author":{"gitId":"twothicc"},"content":"        });","lastModifiedDate":"2021-09-14"},{"lineNumber":201,"author":{"gitId":"twothicc"},"content":"        assertEquals(missingTaskDescriptionException.getErrorMessage(), dukeException.getErrorMessage());","lastModifiedDate":"2021-09-14"},{"lineNumber":202,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":203,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":204,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-09-14"},{"lineNumber":205,"author":{"gitId":"twothicc"},"content":"    void parserUserDescriptionInput_missingSeparator_exceptionThrown() {","lastModifiedDate":"2021-09-14"},{"lineNumber":206,"author":{"gitId":"twothicc"},"content":"        UserCommands command \u003d UserCommands.EVENT;","lastModifiedDate":"2021-09-14"},{"lineNumber":207,"author":{"gitId":"twothicc"},"content":"        Ui.Descriptors descriptor \u003d Ui.Descriptors.AT;","lastModifiedDate":"2021-09-14"},{"lineNumber":208,"author":{"gitId":"twothicc"},"content":"        char separator \u003d \u0027/\u0027;","lastModifiedDate":"2021-09-14"},{"lineNumber":209,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":210,"author":{"gitId":"twothicc"},"content":"        String missingSeparator \u003d \"at 1/1/2020\";","lastModifiedDate":"2021-09-10"},{"lineNumber":211,"author":{"gitId":"twothicc"},"content":"        WrongDescriptorException missingSeparatorException \u003d new WrongDescriptorException(descriptor, command);","lastModifiedDate":"2021-09-10"},{"lineNumber":212,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":213,"author":{"gitId":"twothicc"},"content":"        DukeException dukeException1 \u003d assertThrows(WrongDescriptorException.class, () -\u003e {","lastModifiedDate":"2021-09-14"},{"lineNumber":214,"author":{"gitId":"twothicc"},"content":"            Parser.parseUserDescriptionInput(missingSeparator, descriptor, separator, command);","lastModifiedDate":"2021-09-14"},{"lineNumber":215,"author":{"gitId":"twothicc"},"content":"        });","lastModifiedDate":"2021-09-14"},{"lineNumber":216,"author":{"gitId":"twothicc"},"content":"        assertEquals(missingSeparatorException.getErrorMessage(), dukeException1.getErrorMessage());","lastModifiedDate":"2021-09-14"},{"lineNumber":217,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":218,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":219,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-09-14"},{"lineNumber":220,"author":{"gitId":"twothicc"},"content":"    void parseUserDescriptionInput_missingSpaces_exceptionThrown() {","lastModifiedDate":"2021-09-14"},{"lineNumber":221,"author":{"gitId":"twothicc"},"content":"        UserCommands command \u003d UserCommands.EVENT;","lastModifiedDate":"2021-09-14"},{"lineNumber":222,"author":{"gitId":"twothicc"},"content":"        Ui.Descriptors descriptor \u003d Ui.Descriptors.AT;","lastModifiedDate":"2021-09-14"},{"lineNumber":223,"author":{"gitId":"twothicc"},"content":"        char separator \u003d \u0027/\u0027;","lastModifiedDate":"2021-09-14"},{"lineNumber":224,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":225,"author":{"gitId":"twothicc"},"content":"        String missingSpaceBeforeDescriptor \u003d \"task description/at 1/1/2020\";","lastModifiedDate":"2021-09-10"},{"lineNumber":226,"author":{"gitId":"twothicc"},"content":"        MissingSpaceBeforeDescriptorException missingSpaceBeforeDescriptorException \u003d","lastModifiedDate":"2021-09-10"},{"lineNumber":227,"author":{"gitId":"twothicc"},"content":"                new MissingSpaceBeforeDescriptorException(descriptor);","lastModifiedDate":"2021-09-10"},{"lineNumber":228,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":229,"author":{"gitId":"twothicc"},"content":"        String missingSpaceAfterDescriptor \u003d \"task description /at1/1/2020\";","lastModifiedDate":"2021-09-10"},{"lineNumber":230,"author":{"gitId":"twothicc"},"content":"        MissingSpaceAfterDescriptorException missingSpaceAfterDescriptorException \u003d","lastModifiedDate":"2021-09-10"},{"lineNumber":231,"author":{"gitId":"twothicc"},"content":"                new MissingSpaceAfterDescriptorException(descriptor);","lastModifiedDate":"2021-09-10"},{"lineNumber":232,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":233,"author":{"gitId":"twothicc"},"content":"        DukeException dukeException2 \u003d assertThrows(MissingSpaceBeforeDescriptorException.class, () -\u003e {","lastModifiedDate":"2021-09-04"},{"lineNumber":234,"author":{"gitId":"twothicc"},"content":"            Parser.parseUserDescriptionInput(missingSpaceBeforeDescriptor, descriptor, separator, command);","lastModifiedDate":"2021-09-10"},{"lineNumber":235,"author":{"gitId":"twothicc"},"content":"        });","lastModifiedDate":"2021-08-28"},{"lineNumber":236,"author":{"gitId":"twothicc"},"content":"        assertEquals(missingSpaceBeforeDescriptorException.getErrorMessage(), dukeException2.getErrorMessage());","lastModifiedDate":"2021-09-10"},{"lineNumber":237,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":238,"author":{"gitId":"twothicc"},"content":"        DukeException dukeException3 \u003d assertThrows(MissingSpaceAfterDescriptorException.class, () -\u003e {","lastModifiedDate":"2021-09-04"},{"lineNumber":239,"author":{"gitId":"twothicc"},"content":"            Parser.parseUserDescriptionInput(missingSpaceAfterDescriptor, descriptor, separator, command);","lastModifiedDate":"2021-09-10"},{"lineNumber":240,"author":{"gitId":"twothicc"},"content":"        });","lastModifiedDate":"2021-08-28"},{"lineNumber":241,"author":{"gitId":"twothicc"},"content":"        assertEquals(missingSpaceAfterDescriptorException.getErrorMessage(), dukeException3.getErrorMessage());","lastModifiedDate":"2021-09-10"},{"lineNumber":242,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":243,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":244,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-09-14"},{"lineNumber":245,"author":{"gitId":"twothicc"},"content":"    void parseUserDescriptionInput_wrongDescriptor_exceptionThrown() {","lastModifiedDate":"2021-09-14"},{"lineNumber":246,"author":{"gitId":"twothicc"},"content":"        UserCommands command \u003d UserCommands.EVENT;","lastModifiedDate":"2021-09-14"},{"lineNumber":247,"author":{"gitId":"twothicc"},"content":"        Ui.Descriptors descriptor \u003d Ui.Descriptors.AT;","lastModifiedDate":"2021-09-14"},{"lineNumber":248,"author":{"gitId":"twothicc"},"content":"        char separator \u003d \u0027/\u0027;","lastModifiedDate":"2021-09-14"},{"lineNumber":249,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":250,"author":{"gitId":"twothicc"},"content":"        String wrongDescriptor \u003d \"task description /by 1/1/2020\";","lastModifiedDate":"2021-09-14"},{"lineNumber":251,"author":{"gitId":"twothicc"},"content":"        WrongDescriptorException wrongDescriptorException \u003d new WrongDescriptorException(descriptor, command);","lastModifiedDate":"2021-09-14"},{"lineNumber":252,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":253,"author":{"gitId":"twothicc"},"content":"        DukeException dukeException4 \u003d assertThrows(WrongDescriptorException.class, () -\u003e {","lastModifiedDate":"2021-09-04"},{"lineNumber":254,"author":{"gitId":"twothicc"},"content":"            Parser.parseUserDescriptionInput(wrongDescriptor, descriptor, separator, command);","lastModifiedDate":"2021-09-10"},{"lineNumber":255,"author":{"gitId":"twothicc"},"content":"        });","lastModifiedDate":"2021-08-28"},{"lineNumber":256,"author":{"gitId":"twothicc"},"content":"        assertEquals(wrongDescriptorException.getErrorMessage(), dukeException4.getErrorMessage());","lastModifiedDate":"2021-09-10"},{"lineNumber":257,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":258,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":259,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-09-14"},{"lineNumber":260,"author":{"gitId":"twothicc"},"content":"    void parseUserDescriptionInput_missingDate_exceptionThrown() {","lastModifiedDate":"2021-09-14"},{"lineNumber":261,"author":{"gitId":"twothicc"},"content":"        UserCommands command \u003d UserCommands.EVENT;","lastModifiedDate":"2021-09-14"},{"lineNumber":262,"author":{"gitId":"twothicc"},"content":"        Ui.Descriptors descriptor \u003d Ui.Descriptors.AT;","lastModifiedDate":"2021-09-14"},{"lineNumber":263,"author":{"gitId":"twothicc"},"content":"        char separator \u003d \u0027/\u0027;","lastModifiedDate":"2021-09-14"},{"lineNumber":264,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":265,"author":{"gitId":"twothicc"},"content":"        String missingDate \u003d \"task description /at\";","lastModifiedDate":"2021-09-14"},{"lineNumber":266,"author":{"gitId":"twothicc"},"content":"        MissingDateException missingDateException \u003d new MissingDateException();","lastModifiedDate":"2021-09-14"},{"lineNumber":267,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":268,"author":{"gitId":"twothicc"},"content":"        DukeException dukeException5 \u003d assertThrows(MissingDateException.class, () -\u003e {","lastModifiedDate":"2021-09-10"},{"lineNumber":269,"author":{"gitId":"twothicc"},"content":"            Parser.parseUserDescriptionInput(missingDate, descriptor, separator, command);","lastModifiedDate":"2021-09-10"},{"lineNumber":270,"author":{"gitId":"twothicc"},"content":"        });","lastModifiedDate":"2021-08-28"},{"lineNumber":271,"author":{"gitId":"twothicc"},"content":"        assertEquals(missingDateException.getErrorMessage(), dukeException5.getErrorMessage());","lastModifiedDate":"2021-09-10"},{"lineNumber":272,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":273,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"twothicc":273}},{"path":"src/test/java/duke/StorageStub.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-09-04"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"public class StorageStub implements Storable {","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"    // Initial tasks.","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"    private final TaskList tasks;","lastModifiedDate":"2021-08-21"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"    // Initialize tasks.","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"    public StorageStub(TaskList tasks) {","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"    @Override","lastModifiedDate":"2021-08-21"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"    public TaskList readTasksFromData() throws DukeException {","lastModifiedDate":"2021-08-21"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"        return tasks;","lastModifiedDate":"2021-08-21"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":"    @Override","lastModifiedDate":"2021-08-21"},{"lineNumber":21,"author":{"gitId":"twothicc"},"content":"    public void saveTasksToData(TaskList taskList) throws DukeException {","lastModifiedDate":"2021-08-21"},{"lineNumber":22,"author":{"gitId":"twothicc"},"content":"        // Do Nothing","lastModifiedDate":"2021-08-21"},{"lineNumber":23,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":24,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"twothicc":24}},{"path":"src/test/java/duke/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"import duke.task.Todo;","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"class TaskListTest {","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"    private static final String DESCRIPTION \u003d \"task description\";","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"    private TaskList getTaskListThreeTodos() {","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"        ArrayList\u003cTask\u003e taskArrayList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":"        for (int i \u003d 0; i \u003c 3; i++) {","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":"            taskArrayList.add(new Todo(DESCRIPTION));","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"twothicc"},"content":"        return new TaskList(taskArrayList);","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"twothicc"},"content":"    void size_taskList_threeTodo() {","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"twothicc"},"content":"        assertEquals(3, getTaskListThreeTodos().size());","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"twothicc"},"content":"    void get_taskList_sameTodo() {","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"twothicc"},"content":"        Todo todo \u003d new Todo(DESCRIPTION);","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"twothicc"},"content":"        assertEquals(todo, getTaskListThreeTodos().get(1));","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"twothicc"},"content":"    void add_taskListOfThreeTodos_taskListOfFourTodos() {","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"twothicc"},"content":"        TaskList tasks \u003d getTaskListThreeTodos();","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"twothicc"},"content":"        Todo todo \u003d new Todo(DESCRIPTION);","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"twothicc"},"content":"        Task other \u003d tasks.add(todo);","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"twothicc"},"content":"        assertEquals(4, tasks.size());","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"twothicc"},"content":"        assertEquals(todo, other);","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":47,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":48,"author":{"gitId":"twothicc"},"content":"    void remove_taskListOfThreeTodos_taskListOfTwoTodos() {","lastModifiedDate":"2021-08-22"},{"lineNumber":49,"author":{"gitId":"twothicc"},"content":"        TaskList tasks \u003d getTaskListThreeTodos();","lastModifiedDate":"2021-08-22"},{"lineNumber":50,"author":{"gitId":"twothicc"},"content":"        Todo todo \u003d new Todo(DESCRIPTION);","lastModifiedDate":"2021-08-22"},{"lineNumber":51,"author":{"gitId":"twothicc"},"content":"        Task other \u003d tasks.remove(1);","lastModifiedDate":"2021-08-22"},{"lineNumber":52,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":53,"author":{"gitId":"twothicc"},"content":"        assertEquals(2, tasks.size());","lastModifiedDate":"2021-08-22"},{"lineNumber":54,"author":{"gitId":"twothicc"},"content":"        assertEquals(todo, other);","lastModifiedDate":"2021-08-22"},{"lineNumber":55,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":56,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":57,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":58,"author":{"gitId":"twothicc"},"content":"    void equals_sameTaskList_true() {","lastModifiedDate":"2021-08-22"},{"lineNumber":59,"author":{"gitId":"twothicc"},"content":"        TaskList tasks \u003d getTaskListThreeTodos();","lastModifiedDate":"2021-08-22"},{"lineNumber":60,"author":{"gitId":"twothicc"},"content":"        TaskList other \u003d getTaskListThreeTodos();","lastModifiedDate":"2021-08-22"},{"lineNumber":61,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":62,"author":{"gitId":"twothicc"},"content":"        assertTrue(tasks.equals(other));","lastModifiedDate":"2021-08-22"},{"lineNumber":63,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":64,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":65,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":66,"author":{"gitId":"twothicc"},"content":"    void getTasks() {","lastModifiedDate":"2021-08-22"},{"lineNumber":67,"author":{"gitId":"twothicc"},"content":"        ArrayList\u003cTask\u003e taskArrayList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-22"},{"lineNumber":68,"author":{"gitId":"twothicc"},"content":"        for (int i \u003d 0; i \u003c 3; i++) {","lastModifiedDate":"2021-08-22"},{"lineNumber":69,"author":{"gitId":"twothicc"},"content":"            taskArrayList.add(new Todo(DESCRIPTION));","lastModifiedDate":"2021-08-22"},{"lineNumber":70,"author":{"gitId":"twothicc"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":71,"author":{"gitId":"twothicc"},"content":"        assertEquals(taskArrayList, getTaskListThreeTodos().getTasks());","lastModifiedDate":"2021-08-22"},{"lineNumber":72,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":73,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"twothicc":73}},{"path":"src/test/java/duke/command/AddCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke.command;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"import duke.StorageStub;","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-08-21"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"import duke.task.Event;","lastModifiedDate":"2021-08-21"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-21"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"import duke.task.Todo;","lastModifiedDate":"2021-08-21"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":"class AddCommandTest {","lastModifiedDate":"2021-08-21"},{"lineNumber":21,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":22,"author":{"gitId":"twothicc"},"content":"    private static final LocalDate localDate \u003d LocalDate.parse(\"2020-01-01\");","lastModifiedDate":"2021-08-21"},{"lineNumber":23,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":24,"author":{"gitId":"twothicc"},"content":"    private final Ui ui \u003d new Ui();","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"twothicc"},"content":"    private static TaskList getTaskListTodo() {","lastModifiedDate":"2021-08-21"},{"lineNumber":27,"author":{"gitId":"twothicc"},"content":"        ArrayList\u003cTask\u003e taskArrList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-21"},{"lineNumber":28,"author":{"gitId":"twothicc"},"content":"        taskArrList.add(new Todo(\"task description\"));","lastModifiedDate":"2021-08-21"},{"lineNumber":29,"author":{"gitId":"twothicc"},"content":"        return new TaskList(taskArrList);","lastModifiedDate":"2021-08-21"},{"lineNumber":30,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":31,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":32,"author":{"gitId":"twothicc"},"content":"    private static TaskList getTaskListEvent() {","lastModifiedDate":"2021-08-21"},{"lineNumber":33,"author":{"gitId":"twothicc"},"content":"        ArrayList\u003cTask\u003e taskArrList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-21"},{"lineNumber":34,"author":{"gitId":"twothicc"},"content":"        taskArrList.add(new Event(\"task description\", localDate));","lastModifiedDate":"2021-08-21"},{"lineNumber":35,"author":{"gitId":"twothicc"},"content":"        return new TaskList(taskArrList);","lastModifiedDate":"2021-08-21"},{"lineNumber":36,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":37,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":38,"author":{"gitId":"twothicc"},"content":"    private static TaskList getTaskListDeadline() {","lastModifiedDate":"2021-08-21"},{"lineNumber":39,"author":{"gitId":"twothicc"},"content":"        ArrayList\u003cTask\u003e taskArrList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-21"},{"lineNumber":40,"author":{"gitId":"twothicc"},"content":"        taskArrList.add(new Deadline(\"task description\", localDate));","lastModifiedDate":"2021-08-21"},{"lineNumber":41,"author":{"gitId":"twothicc"},"content":"        return new TaskList(taskArrList);","lastModifiedDate":"2021-08-21"},{"lineNumber":42,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":43,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":44,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":45,"author":{"gitId":"twothicc"},"content":"    void execute_todoInput_todoAdded() {","lastModifiedDate":"2021-08-21"},{"lineNumber":46,"author":{"gitId":"twothicc"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2021-08-21"},{"lineNumber":47,"author":{"gitId":"twothicc"},"content":"        StorageStub storageStub \u003d new StorageStub(tasks);","lastModifiedDate":"2021-08-21"},{"lineNumber":48,"author":{"gitId":"twothicc"},"content":"        AddCommand addCommand \u003d new AddCommand(\"todo task description\");","lastModifiedDate":"2021-08-21"},{"lineNumber":49,"author":{"gitId":"twothicc"},"content":"        addCommand.execute(tasks, this.ui, storageStub);","lastModifiedDate":"2021-08-21"},{"lineNumber":50,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":51,"author":{"gitId":"twothicc"},"content":"        assertTrue(getTaskListTodo().equals(tasks));","lastModifiedDate":"2021-08-21"},{"lineNumber":52,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":53,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":54,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":55,"author":{"gitId":"twothicc"},"content":"    void execute_eventInput_eventAdded() {","lastModifiedDate":"2021-08-21"},{"lineNumber":56,"author":{"gitId":"twothicc"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2021-08-21"},{"lineNumber":57,"author":{"gitId":"twothicc"},"content":"        StorageStub storageStub \u003d new StorageStub(tasks);","lastModifiedDate":"2021-08-21"},{"lineNumber":58,"author":{"gitId":"twothicc"},"content":"        AddCommand addCommand \u003d new AddCommand(\"event task description /at 1/1/2020\");","lastModifiedDate":"2021-08-21"},{"lineNumber":59,"author":{"gitId":"twothicc"},"content":"        addCommand.execute(tasks, this.ui, storageStub);","lastModifiedDate":"2021-08-21"},{"lineNumber":60,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":61,"author":{"gitId":"twothicc"},"content":"        assertTrue(getTaskListEvent().equals(tasks));","lastModifiedDate":"2021-08-21"},{"lineNumber":62,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":63,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":64,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":65,"author":{"gitId":"twothicc"},"content":"    void execute_deadlineInput_deadlineAdded() {","lastModifiedDate":"2021-08-21"},{"lineNumber":66,"author":{"gitId":"twothicc"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2021-08-21"},{"lineNumber":67,"author":{"gitId":"twothicc"},"content":"        StorageStub storageStub \u003d new StorageStub(tasks);","lastModifiedDate":"2021-08-21"},{"lineNumber":68,"author":{"gitId":"twothicc"},"content":"        AddCommand addCommand \u003d new AddCommand(\"deadline task description /by 1/1/2020\");","lastModifiedDate":"2021-08-21"},{"lineNumber":69,"author":{"gitId":"twothicc"},"content":"        addCommand.execute(tasks, this.ui, storageStub);","lastModifiedDate":"2021-08-21"},{"lineNumber":70,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":71,"author":{"gitId":"twothicc"},"content":"        assertTrue(getTaskListDeadline().equals(tasks));","lastModifiedDate":"2021-08-21"},{"lineNumber":72,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":73,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":74,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":75,"author":{"gitId":"twothicc"},"content":"    void execute_invalidCommand_noTaskAdded() {","lastModifiedDate":"2021-08-21"},{"lineNumber":76,"author":{"gitId":"twothicc"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2021-08-21"},{"lineNumber":77,"author":{"gitId":"twothicc"},"content":"        StorageStub storageStub \u003d new StorageStub(tasks);","lastModifiedDate":"2021-08-21"},{"lineNumber":78,"author":{"gitId":"twothicc"},"content":"        AddCommand addCommand \u003d new AddCommand(\"bogus\");","lastModifiedDate":"2021-08-21"},{"lineNumber":79,"author":{"gitId":"twothicc"},"content":"        addCommand.execute(tasks, this.ui, storageStub);","lastModifiedDate":"2021-08-21"},{"lineNumber":80,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":81,"author":{"gitId":"twothicc"},"content":"        assertTrue(new TaskList().equals(tasks));","lastModifiedDate":"2021-08-21"},{"lineNumber":82,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":83,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":84,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":85,"author":{"gitId":"twothicc"},"content":"    void execute_missingTaskDescription_noTaskAdded() {","lastModifiedDate":"2021-08-22"},{"lineNumber":86,"author":{"gitId":"twothicc"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2021-08-21"},{"lineNumber":87,"author":{"gitId":"twothicc"},"content":"        StorageStub storageStub \u003d new StorageStub(tasks);","lastModifiedDate":"2021-08-21"},{"lineNumber":88,"author":{"gitId":"twothicc"},"content":"        AddCommand addCommandTodoMissingSpaceDescription \u003d new AddCommand(\"todo\");","lastModifiedDate":"2021-09-10"},{"lineNumber":89,"author":{"gitId":"twothicc"},"content":"        AddCommand addCommandTodoMissingDescription \u003d new AddCommand(\"todo \");","lastModifiedDate":"2021-09-10"},{"lineNumber":90,"author":{"gitId":"twothicc"},"content":"        AddCommand addCommandTodoBlankDescription \u003d new AddCommand(\"todo  \");","lastModifiedDate":"2021-09-10"},{"lineNumber":91,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":92,"author":{"gitId":"twothicc"},"content":"        AddCommand addCommandEventMissingSpaceDescription \u003d new AddCommand(\"event\");","lastModifiedDate":"2021-09-10"},{"lineNumber":93,"author":{"gitId":"twothicc"},"content":"        AddCommand addCommandEventMissingDescription \u003d new AddCommand(\"event \");","lastModifiedDate":"2021-09-10"},{"lineNumber":94,"author":{"gitId":"twothicc"},"content":"        AddCommand addCommandEventMissingDescription1 \u003d new AddCommand(\"event /at 1/1/2020\");","lastModifiedDate":"2021-09-10"},{"lineNumber":95,"author":{"gitId":"twothicc"},"content":"        AddCommand addCommandEventBlankDescription \u003d new AddCommand(\"event  \");","lastModifiedDate":"2021-09-10"},{"lineNumber":96,"author":{"gitId":"twothicc"},"content":"        AddCommand addCommandEventBlankDescription1 \u003d new AddCommand(\"event  /at 1/1/2020\");","lastModifiedDate":"2021-09-10"},{"lineNumber":97,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":98,"author":{"gitId":"twothicc"},"content":"        addCommandTodoMissingSpaceDescription.execute(tasks, this.ui, storageStub);","lastModifiedDate":"2021-09-10"},{"lineNumber":99,"author":{"gitId":"twothicc"},"content":"        addCommandTodoMissingDescription.execute(tasks, this.ui, storageStub);","lastModifiedDate":"2021-09-10"},{"lineNumber":100,"author":{"gitId":"twothicc"},"content":"        addCommandTodoBlankDescription.execute(tasks, this.ui, storageStub);","lastModifiedDate":"2021-09-10"},{"lineNumber":101,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":102,"author":{"gitId":"twothicc"},"content":"        addCommandEventMissingSpaceDescription.execute(tasks, this.ui, storageStub);","lastModifiedDate":"2021-09-10"},{"lineNumber":103,"author":{"gitId":"twothicc"},"content":"        addCommandEventMissingDescription.execute(tasks, this.ui, storageStub);","lastModifiedDate":"2021-09-10"},{"lineNumber":104,"author":{"gitId":"twothicc"},"content":"        addCommandEventMissingDescription1.execute(tasks, this.ui, storageStub);","lastModifiedDate":"2021-09-10"},{"lineNumber":105,"author":{"gitId":"twothicc"},"content":"        addCommandEventBlankDescription.execute(tasks, this.ui, storageStub);","lastModifiedDate":"2021-09-10"},{"lineNumber":106,"author":{"gitId":"twothicc"},"content":"        addCommandEventBlankDescription1.execute(tasks, this.ui, storageStub);","lastModifiedDate":"2021-09-10"},{"lineNumber":107,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":108,"author":{"gitId":"twothicc"},"content":"        assertTrue(new TaskList().equals(tasks));","lastModifiedDate":"2021-08-21"},{"lineNumber":109,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":110,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":111,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":112,"author":{"gitId":"twothicc"},"content":"    void execute_missingSpaces_noTaskAdded() {","lastModifiedDate":"2021-08-22"},{"lineNumber":113,"author":{"gitId":"twothicc"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2021-08-21"},{"lineNumber":114,"author":{"gitId":"twothicc"},"content":"        StorageStub storageStub \u003d new StorageStub(tasks);","lastModifiedDate":"2021-08-21"},{"lineNumber":115,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":116,"author":{"gitId":"twothicc"},"content":"        AddCommand addCommandTodoMissingSpaceAfterCommand \u003d new AddCommand(\"todoa\");","lastModifiedDate":"2021-09-10"},{"lineNumber":117,"author":{"gitId":"twothicc"},"content":"        AddCommand addCommandEventMissingSpaceAfterCommand \u003d new AddCommand(\"eventa\");","lastModifiedDate":"2021-09-10"},{"lineNumber":118,"author":{"gitId":"twothicc"},"content":"        AddCommand addCommandEventMissingSpaceBeforeDescriptor \u003d new AddCommand(\"event abc/at 1/1/2020\");","lastModifiedDate":"2021-09-10"},{"lineNumber":119,"author":{"gitId":"twothicc"},"content":"        AddCommand addCommandEventMissingSpaceAfterDescriptor \u003d new AddCommand(\"event abc /at1/1/2020\");","lastModifiedDate":"2021-09-10"},{"lineNumber":120,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":121,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":122,"author":{"gitId":"twothicc"},"content":"        addCommandTodoMissingSpaceAfterCommand.execute(tasks, this.ui, storageStub);","lastModifiedDate":"2021-09-10"},{"lineNumber":123,"author":{"gitId":"twothicc"},"content":"        addCommandEventMissingSpaceAfterCommand.execute(tasks, this.ui, storageStub);","lastModifiedDate":"2021-09-10"},{"lineNumber":124,"author":{"gitId":"twothicc"},"content":"        addCommandEventMissingSpaceBeforeDescriptor.execute(tasks, this.ui, storageStub);","lastModifiedDate":"2021-09-10"},{"lineNumber":125,"author":{"gitId":"twothicc"},"content":"        addCommandEventMissingSpaceAfterDescriptor.execute(tasks, this.ui, storageStub);","lastModifiedDate":"2021-09-10"},{"lineNumber":126,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":127,"author":{"gitId":"twothicc"},"content":"        assertTrue(new TaskList().equals(tasks));","lastModifiedDate":"2021-08-21"},{"lineNumber":128,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":129,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":130,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":131,"author":{"gitId":"twothicc"},"content":"    void equals_sameAddCommand_true() {","lastModifiedDate":"2021-08-22"},{"lineNumber":132,"author":{"gitId":"twothicc"},"content":"        AddCommand addCommand \u003d new AddCommand(\"list\");","lastModifiedDate":"2021-08-22"},{"lineNumber":133,"author":{"gitId":"twothicc"},"content":"        AddCommand addCommand1 \u003d new AddCommand(\"list\");","lastModifiedDate":"2021-08-22"},{"lineNumber":134,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":135,"author":{"gitId":"twothicc"},"content":"        assertEquals(addCommand, addCommand1);","lastModifiedDate":"2021-08-22"},{"lineNumber":136,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":137,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":138,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":139,"author":{"gitId":"twothicc"},"content":"    void equals_differentAddCommand_false() {","lastModifiedDate":"2021-08-22"},{"lineNumber":140,"author":{"gitId":"twothicc"},"content":"        AddCommand addCommand \u003d new AddCommand(\"list\");","lastModifiedDate":"2021-08-22"},{"lineNumber":141,"author":{"gitId":"twothicc"},"content":"        AddCommand addCommand1 \u003d new AddCommand(\"other\");","lastModifiedDate":"2021-08-22"},{"lineNumber":142,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":143,"author":{"gitId":"twothicc"},"content":"        assertNotEquals(addCommand, addCommand1);","lastModifiedDate":"2021-08-22"},{"lineNumber":144,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":145,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":146,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"twothicc":146}},{"path":"src/test/java/duke/command/DeleteCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke.command;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"import duke.StorageStub;","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"import duke.task.Todo;","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"class DeleteCommandTest {","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"    private static final String DESCRIPTION \u003d \"task description\";","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"    private final Ui ui \u003d new Ui();","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":"    private TaskList getTaskListOneTodo() {","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"twothicc"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"twothicc"},"content":"        tasks.add(new Todo(DESCRIPTION));","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"twothicc"},"content":"        return tasks;","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"twothicc"},"content":"    void execute_deleteInput_taskDeleted() {","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"twothicc"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"twothicc"},"content":"        taskList.add(new Todo(DESCRIPTION));","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"twothicc"},"content":"        StorageStub storageStub \u003d new StorageStub(taskList);","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"twothicc"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(\"delete 1\");","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"twothicc"},"content":"        deleteCommand.execute(taskList, this.ui, storageStub);","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"twothicc"},"content":"        assertTrue(new TaskList().equals(taskList));","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"twothicc"},"content":"    void execute_missingSpace_taskNotDeleted() {","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"twothicc"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"twothicc"},"content":"        taskList.add(new Todo(DESCRIPTION));","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"twothicc"},"content":"        StorageStub storageStub \u003d new StorageStub(taskList);","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"twothicc"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(\"delete1\");","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"twothicc"},"content":"        deleteCommand.execute(taskList, this.ui, storageStub);","lastModifiedDate":"2021-08-22"},{"lineNumber":47,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":48,"author":{"gitId":"twothicc"},"content":"        assertTrue(getTaskListOneTodo().equals(taskList));","lastModifiedDate":"2021-08-22"},{"lineNumber":49,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":50,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":51,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":52,"author":{"gitId":"twothicc"},"content":"    void execute_missingIndex_taskNotDeleted() {","lastModifiedDate":"2021-08-22"},{"lineNumber":53,"author":{"gitId":"twothicc"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2021-08-22"},{"lineNumber":54,"author":{"gitId":"twothicc"},"content":"        taskList.add(new Todo(DESCRIPTION));","lastModifiedDate":"2021-08-22"},{"lineNumber":55,"author":{"gitId":"twothicc"},"content":"        StorageStub storageStub \u003d new StorageStub(taskList);","lastModifiedDate":"2021-08-22"},{"lineNumber":56,"author":{"gitId":"twothicc"},"content":"        DeleteCommand deleteCommandMissingSpaceIndex \u003d new DeleteCommand(\"delete\");","lastModifiedDate":"2021-09-10"},{"lineNumber":57,"author":{"gitId":"twothicc"},"content":"        DeleteCommand deleteCommandMissingIndex \u003d new DeleteCommand(\"delete \");","lastModifiedDate":"2021-09-10"},{"lineNumber":58,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":59,"author":{"gitId":"twothicc"},"content":"        deleteCommandMissingSpaceIndex.execute(taskList, this.ui, storageStub);","lastModifiedDate":"2021-09-10"},{"lineNumber":60,"author":{"gitId":"twothicc"},"content":"        deleteCommandMissingIndex.execute(taskList, this.ui, storageStub);","lastModifiedDate":"2021-09-10"},{"lineNumber":61,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":62,"author":{"gitId":"twothicc"},"content":"        assertTrue(getTaskListOneTodo().equals(taskList));","lastModifiedDate":"2021-08-22"},{"lineNumber":63,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":64,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":65,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":66,"author":{"gitId":"twothicc"},"content":"    void execute_invalidIndex_taskNotDeleted() {","lastModifiedDate":"2021-08-22"},{"lineNumber":67,"author":{"gitId":"twothicc"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2021-08-22"},{"lineNumber":68,"author":{"gitId":"twothicc"},"content":"        taskList.add(new Todo(DESCRIPTION));","lastModifiedDate":"2021-08-22"},{"lineNumber":69,"author":{"gitId":"twothicc"},"content":"        StorageStub storageStub \u003d new StorageStub(taskList);","lastModifiedDate":"2021-08-22"},{"lineNumber":70,"author":{"gitId":"twothicc"},"content":"        DeleteCommand deleteCommandInvalidLargeIndex \u003d new DeleteCommand(\"delete 100\");","lastModifiedDate":"2021-09-10"},{"lineNumber":71,"author":{"gitId":"twothicc"},"content":"        DeleteCommand deleteCommandInvalidNegativeIndex \u003d new DeleteCommand(\"delete -1\");","lastModifiedDate":"2021-09-10"},{"lineNumber":72,"author":{"gitId":"twothicc"},"content":"        DeleteCommand deleteCommandInvalidZeroIndex \u003d new DeleteCommand(\"delete 0\");","lastModifiedDate":"2021-09-10"},{"lineNumber":73,"author":{"gitId":"twothicc"},"content":"        DeleteCommand deleteCommandInvalidFormatIndex \u003d new DeleteCommand(\"delete abc\");","lastModifiedDate":"2021-09-10"},{"lineNumber":74,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":75,"author":{"gitId":"twothicc"},"content":"        deleteCommandInvalidLargeIndex.execute(taskList, this.ui, storageStub);","lastModifiedDate":"2021-09-10"},{"lineNumber":76,"author":{"gitId":"twothicc"},"content":"        deleteCommandInvalidNegativeIndex.execute(taskList, this.ui, storageStub);","lastModifiedDate":"2021-09-10"},{"lineNumber":77,"author":{"gitId":"twothicc"},"content":"        deleteCommandInvalidZeroIndex.execute(taskList, this.ui, storageStub);","lastModifiedDate":"2021-09-10"},{"lineNumber":78,"author":{"gitId":"twothicc"},"content":"        deleteCommandInvalidFormatIndex.execute(taskList, this.ui, storageStub);","lastModifiedDate":"2021-09-10"},{"lineNumber":79,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":80,"author":{"gitId":"twothicc"},"content":"        assertTrue(getTaskListOneTodo().equals(taskList));","lastModifiedDate":"2021-08-22"},{"lineNumber":81,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":82,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":83,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":84,"author":{"gitId":"twothicc"},"content":"    void equals_sameDeleteCommand_true() {","lastModifiedDate":"2021-08-22"},{"lineNumber":85,"author":{"gitId":"twothicc"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(\"list\");","lastModifiedDate":"2021-08-22"},{"lineNumber":86,"author":{"gitId":"twothicc"},"content":"        DeleteCommand deleteCommand1 \u003d new DeleteCommand(\"list\");","lastModifiedDate":"2021-08-22"},{"lineNumber":87,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":88,"author":{"gitId":"twothicc"},"content":"        assertEquals(deleteCommand, deleteCommand1);","lastModifiedDate":"2021-08-22"},{"lineNumber":89,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":90,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":91,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":92,"author":{"gitId":"twothicc"},"content":"    void equals_differentDeleteCommand_false() {","lastModifiedDate":"2021-08-22"},{"lineNumber":93,"author":{"gitId":"twothicc"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(\"list\");","lastModifiedDate":"2021-08-22"},{"lineNumber":94,"author":{"gitId":"twothicc"},"content":"        DeleteCommand deleteCommand1 \u003d new DeleteCommand(\"other\");","lastModifiedDate":"2021-08-22"},{"lineNumber":95,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":96,"author":{"gitId":"twothicc"},"content":"        assertNotEquals(deleteCommand, deleteCommand1);","lastModifiedDate":"2021-08-22"},{"lineNumber":97,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":98,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"twothicc":98}},{"path":"src/test/java/duke/command/MarkCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke.command;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"import duke.StorageStub;","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"import duke.task.Todo;","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"class MarkCommandTest {","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"    private static final String DESCRIPTION \u003d \"task description\";","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"    private final Ui ui \u003d new Ui();","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":"    private TaskList getTaskListOneUndoneTodo() {","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"twothicc"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"twothicc"},"content":"        tasks.add(new Todo(DESCRIPTION));","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"twothicc"},"content":"        return tasks;","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"twothicc"},"content":"    private TaskList getTaskListOneDoneTodo() {","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"twothicc"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"twothicc"},"content":"        Todo doneTodo \u003d new Todo(DESCRIPTION);","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"twothicc"},"content":"        doneTodo.markAsDone();","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"twothicc"},"content":"        tasks.add(doneTodo);","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"twothicc"},"content":"        return tasks;","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"twothicc"},"content":"    void execute_doneInput_taskMarkedAsDone() {","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"twothicc"},"content":"        TaskList tasks \u003d getTaskListOneUndoneTodo();","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"twothicc"},"content":"        StorageStub storageStub \u003d new StorageStub(tasks);","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"twothicc"},"content":"        MarkCommand markCommand \u003d new MarkCommand(\"done 1\");","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"twothicc"},"content":"        markCommand.execute(tasks, this.ui, storageStub);","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"twothicc"},"content":"        assertTrue(getTaskListOneDoneTodo().equals(tasks));","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":47,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":48,"author":{"gitId":"twothicc"},"content":"    void execute_missingIndex_taskNotMarkedAsDone() {","lastModifiedDate":"2021-08-22"},{"lineNumber":49,"author":{"gitId":"twothicc"},"content":"        TaskList tasks \u003d getTaskListOneUndoneTodo();","lastModifiedDate":"2021-08-22"},{"lineNumber":50,"author":{"gitId":"twothicc"},"content":"        StorageStub storageStub \u003d new StorageStub(tasks);","lastModifiedDate":"2021-08-22"},{"lineNumber":51,"author":{"gitId":"twothicc"},"content":"        MarkCommand markCommandMissingSpaceIndex \u003d new MarkCommand(\"done\");","lastModifiedDate":"2021-09-10"},{"lineNumber":52,"author":{"gitId":"twothicc"},"content":"        MarkCommand markCommandMissingIndex \u003d new MarkCommand(\"done \");","lastModifiedDate":"2021-09-10"},{"lineNumber":53,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":54,"author":{"gitId":"twothicc"},"content":"        markCommandMissingSpaceIndex.execute(tasks, this.ui, storageStub);","lastModifiedDate":"2021-09-10"},{"lineNumber":55,"author":{"gitId":"twothicc"},"content":"        markCommandMissingIndex.execute(tasks, this.ui, storageStub);","lastModifiedDate":"2021-09-10"},{"lineNumber":56,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":57,"author":{"gitId":"twothicc"},"content":"        assertTrue(getTaskListOneUndoneTodo().equals(tasks));","lastModifiedDate":"2021-08-22"},{"lineNumber":58,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":59,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":60,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":61,"author":{"gitId":"twothicc"},"content":"    void execute_missingSpace_taskNotMarkedAsDone() {","lastModifiedDate":"2021-08-22"},{"lineNumber":62,"author":{"gitId":"twothicc"},"content":"        TaskList tasks \u003d getTaskListOneUndoneTodo();","lastModifiedDate":"2021-08-22"},{"lineNumber":63,"author":{"gitId":"twothicc"},"content":"        StorageStub storageStub \u003d new StorageStub(tasks);","lastModifiedDate":"2021-08-22"},{"lineNumber":64,"author":{"gitId":"twothicc"},"content":"        MarkCommand markCommand \u003d new MarkCommand(\"done1\");","lastModifiedDate":"2021-08-22"},{"lineNumber":65,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":66,"author":{"gitId":"twothicc"},"content":"        markCommand.execute(tasks, this.ui, storageStub);","lastModifiedDate":"2021-08-22"},{"lineNumber":67,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":68,"author":{"gitId":"twothicc"},"content":"        assertTrue(getTaskListOneUndoneTodo().equals(tasks));","lastModifiedDate":"2021-08-22"},{"lineNumber":69,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":70,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":71,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":72,"author":{"gitId":"twothicc"},"content":"    void execute_invalidIndex_taskNotMarkedAsDone() {","lastModifiedDate":"2021-08-22"},{"lineNumber":73,"author":{"gitId":"twothicc"},"content":"        TaskList tasks \u003d getTaskListOneUndoneTodo();","lastModifiedDate":"2021-08-22"},{"lineNumber":74,"author":{"gitId":"twothicc"},"content":"        StorageStub storageStub \u003d new StorageStub(tasks);","lastModifiedDate":"2021-08-22"},{"lineNumber":75,"author":{"gitId":"twothicc"},"content":"        MarkCommand markCommandInvalidLargeIndex \u003d new MarkCommand(\"done 100\");","lastModifiedDate":"2021-09-10"},{"lineNumber":76,"author":{"gitId":"twothicc"},"content":"        MarkCommand markCommandInvalidNegativeIndex \u003d new MarkCommand(\"done -1\");","lastModifiedDate":"2021-09-10"},{"lineNumber":77,"author":{"gitId":"twothicc"},"content":"        MarkCommand markCommandInvalidZeroIndex \u003d new MarkCommand(\"done 0\");","lastModifiedDate":"2021-09-10"},{"lineNumber":78,"author":{"gitId":"twothicc"},"content":"        MarkCommand markCommandInvalidFormatIndex \u003d new MarkCommand(\"done abc\");","lastModifiedDate":"2021-09-10"},{"lineNumber":79,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":80,"author":{"gitId":"twothicc"},"content":"        markCommandInvalidLargeIndex.execute(tasks, this.ui, storageStub);","lastModifiedDate":"2021-09-10"},{"lineNumber":81,"author":{"gitId":"twothicc"},"content":"        markCommandInvalidNegativeIndex.execute(tasks, this.ui, storageStub);","lastModifiedDate":"2021-09-10"},{"lineNumber":82,"author":{"gitId":"twothicc"},"content":"        markCommandInvalidZeroIndex.execute(tasks, this.ui, storageStub);","lastModifiedDate":"2021-09-10"},{"lineNumber":83,"author":{"gitId":"twothicc"},"content":"        markCommandInvalidFormatIndex.execute(tasks, this.ui, storageStub);","lastModifiedDate":"2021-09-10"},{"lineNumber":84,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":85,"author":{"gitId":"twothicc"},"content":"        assertTrue(getTaskListOneUndoneTodo().equals(tasks));","lastModifiedDate":"2021-08-22"},{"lineNumber":86,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":87,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":88,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":89,"author":{"gitId":"twothicc"},"content":"    void equals_sameMarkCommand_true() {","lastModifiedDate":"2021-08-22"},{"lineNumber":90,"author":{"gitId":"twothicc"},"content":"        MarkCommand markCommand \u003d new MarkCommand(\"list\");","lastModifiedDate":"2021-08-22"},{"lineNumber":91,"author":{"gitId":"twothicc"},"content":"        MarkCommand markCommand1 \u003d new MarkCommand(\"list\");","lastModifiedDate":"2021-08-22"},{"lineNumber":92,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":93,"author":{"gitId":"twothicc"},"content":"        assertEquals(markCommand, markCommand1);","lastModifiedDate":"2021-08-22"},{"lineNumber":94,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":95,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":96,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":97,"author":{"gitId":"twothicc"},"content":"    void equals_differentMarkCommand_false() {","lastModifiedDate":"2021-08-22"},{"lineNumber":98,"author":{"gitId":"twothicc"},"content":"        MarkCommand markCommand \u003d new MarkCommand(\"list\");","lastModifiedDate":"2021-08-22"},{"lineNumber":99,"author":{"gitId":"twothicc"},"content":"        MarkCommand markCommand1 \u003d new MarkCommand(\"other\");","lastModifiedDate":"2021-08-22"},{"lineNumber":100,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":101,"author":{"gitId":"twothicc"},"content":"        assertNotEquals(markCommand, markCommand1);","lastModifiedDate":"2021-08-22"},{"lineNumber":102,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":103,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"twothicc":103}},{"path":"src/test/java/duke/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke.task;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-21"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"class DeadlineTest {","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"    private static final String DESCRIPTION \u003d \"task description\";","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"    // yyyy-mm-dd format.","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"    private static final LocalDate TIME \u003d LocalDate.parse(\"2020-01-01\");","lastModifiedDate":"2021-08-21"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"    private final Deadline deadline \u003d new Deadline(DESCRIPTION, TIME);","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":"    void getTaskType_deadline_stringD() {","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"twothicc"},"content":"        assertEquals(\"D\", deadline.getTaskType());","lastModifiedDate":"2021-08-21"},{"lineNumber":22,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":23,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":24,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":25,"author":{"gitId":"twothicc"},"content":"    void getTime_deadline_localDate() {","lastModifiedDate":"2021-08-21"},{"lineNumber":26,"author":{"gitId":"twothicc"},"content":"        assertEquals(TIME, deadline.getTime());","lastModifiedDate":"2021-08-21"},{"lineNumber":27,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":28,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":29,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":30,"author":{"gitId":"twothicc"},"content":"    void toString_deadline_formattedDescription() {","lastModifiedDate":"2021-08-21"},{"lineNumber":31,"author":{"gitId":"twothicc"},"content":"        assertEquals(\"[D][ ] \" + DESCRIPTION + \" (by: 1 January 2020)\", deadline.toString());","lastModifiedDate":"2021-08-21"},{"lineNumber":32,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":33,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":34,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":35,"author":{"gitId":"twothicc"},"content":"    void equals_sameDeadline_true() {","lastModifiedDate":"2021-08-21"},{"lineNumber":36,"author":{"gitId":"twothicc"},"content":"        assertEquals(deadline, new Deadline(DESCRIPTION, TIME));","lastModifiedDate":"2021-08-21"},{"lineNumber":37,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":38,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":39,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":40,"author":{"gitId":"twothicc"},"content":"    void equals_differentDeadline_false() {","lastModifiedDate":"2021-08-21"},{"lineNumber":41,"author":{"gitId":"twothicc"},"content":"        LocalDate otherLocalDate \u003d LocalDate.parse(\"2020-02-02\");","lastModifiedDate":"2021-08-21"},{"lineNumber":42,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":43,"author":{"gitId":"twothicc"},"content":"        Deadline doneDeadline \u003d new Deadline(DESCRIPTION, TIME);","lastModifiedDate":"2021-08-21"},{"lineNumber":44,"author":{"gitId":"twothicc"},"content":"        doneDeadline.markAsDone();","lastModifiedDate":"2021-08-21"},{"lineNumber":45,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":46,"author":{"gitId":"twothicc"},"content":"        Deadline differentTimeDeadline \u003d new Deadline(DESCRIPTION, otherLocalDate);","lastModifiedDate":"2021-08-21"},{"lineNumber":47,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":48,"author":{"gitId":"twothicc"},"content":"        Deadline differentDescriptionDeadline \u003d new Deadline(\"other\", TIME);","lastModifiedDate":"2021-08-21"},{"lineNumber":49,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":50,"author":{"gitId":"twothicc"},"content":"        assertNotEquals(deadline, doneDeadline);","lastModifiedDate":"2021-08-21"},{"lineNumber":51,"author":{"gitId":"twothicc"},"content":"        assertNotEquals(deadline, differentTimeDeadline);","lastModifiedDate":"2021-08-21"},{"lineNumber":52,"author":{"gitId":"twothicc"},"content":"        assertNotEquals(deadline, differentDescriptionDeadline);","lastModifiedDate":"2021-08-21"},{"lineNumber":53,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":54,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"twothicc":54}},{"path":"src/test/java/duke/task/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke.task;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-21"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"class EventTest {","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"    private static final String DESCRIPTION \u003d \"task description\";","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"    // yyyy-mm-dd format.","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"    private static final LocalDate TIME \u003d LocalDate.parse(\"2020-01-01\");","lastModifiedDate":"2021-08-21"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"    private final Event event \u003d new Event(DESCRIPTION, TIME);","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":"    void getTaskType_event_stringE() {","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"twothicc"},"content":"        assertEquals(\"E\", event.getTaskType());","lastModifiedDate":"2021-08-21"},{"lineNumber":22,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":23,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":24,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":25,"author":{"gitId":"twothicc"},"content":"    void getTime_event_localDate() {","lastModifiedDate":"2021-08-21"},{"lineNumber":26,"author":{"gitId":"twothicc"},"content":"        assertEquals(TIME, event.getTime());","lastModifiedDate":"2021-08-21"},{"lineNumber":27,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":28,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":29,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":30,"author":{"gitId":"twothicc"},"content":"    void toString_event_formattedString() {","lastModifiedDate":"2021-08-21"},{"lineNumber":31,"author":{"gitId":"twothicc"},"content":"        assertEquals(\"[E][ ] \" + DESCRIPTION + \" (at: 1 January 2020)\", event.toString());","lastModifiedDate":"2021-08-21"},{"lineNumber":32,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":33,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":34,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":35,"author":{"gitId":"twothicc"},"content":"    void equals_sameEvent_true() {","lastModifiedDate":"2021-08-21"},{"lineNumber":36,"author":{"gitId":"twothicc"},"content":"        assertEquals(event, new Event(DESCRIPTION, TIME));","lastModifiedDate":"2021-08-21"},{"lineNumber":37,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":38,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":39,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":40,"author":{"gitId":"twothicc"},"content":"    void equals_differentEvent_false() {","lastModifiedDate":"2021-08-21"},{"lineNumber":41,"author":{"gitId":"twothicc"},"content":"        LocalDate otherLocalDate \u003d LocalDate.parse(\"2020-02-02\");","lastModifiedDate":"2021-08-21"},{"lineNumber":42,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":43,"author":{"gitId":"twothicc"},"content":"        Event doneEvent \u003d new Event(DESCRIPTION, TIME);","lastModifiedDate":"2021-08-21"},{"lineNumber":44,"author":{"gitId":"twothicc"},"content":"        doneEvent.markAsDone();","lastModifiedDate":"2021-08-21"},{"lineNumber":45,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":46,"author":{"gitId":"twothicc"},"content":"        Event differentTimeEvent \u003d new Event(DESCRIPTION, otherLocalDate);","lastModifiedDate":"2021-08-21"},{"lineNumber":47,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":48,"author":{"gitId":"twothicc"},"content":"        Event differentDescriptionEvent \u003d new Event(\"other\", TIME);","lastModifiedDate":"2021-08-21"},{"lineNumber":49,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":50,"author":{"gitId":"twothicc"},"content":"        assertNotEquals(event, doneEvent);","lastModifiedDate":"2021-08-21"},{"lineNumber":51,"author":{"gitId":"twothicc"},"content":"        assertNotEquals(event, differentTimeEvent);","lastModifiedDate":"2021-08-21"},{"lineNumber":52,"author":{"gitId":"twothicc"},"content":"        assertNotEquals(event, differentDescriptionEvent);","lastModifiedDate":"2021-08-21"},{"lineNumber":53,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":54,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"twothicc":54}},{"path":"src/test/java/duke/task/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"twothicc"},"content":"package duke.task;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"twothicc"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-21"},{"lineNumber":4,"author":{"gitId":"twothicc"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"twothicc"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"twothicc"},"content":"class TodoTest {","lastModifiedDate":"2021-08-21"},{"lineNumber":9,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"twothicc"},"content":"    private static final String DESCRIPTION \u003d \"task description\";","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"twothicc"},"content":"    private final Todo todo \u003d new Todo(DESCRIPTION);","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"twothicc"},"content":"    void getTaskType_todo_stringT() {","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"twothicc"},"content":"        assertEquals(\"T\", todo.getTaskType());","lastModifiedDate":"2021-08-21"},{"lineNumber":17,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":18,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":19,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":20,"author":{"gitId":"twothicc"},"content":"    void toString_todo_formattedDescription() {","lastModifiedDate":"2021-08-21"},{"lineNumber":21,"author":{"gitId":"twothicc"},"content":"        assertEquals(\"[T][ ] \" + DESCRIPTION, todo.toString());","lastModifiedDate":"2021-08-21"},{"lineNumber":22,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":23,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":24,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":25,"author":{"gitId":"twothicc"},"content":"    void equals_sameTodo_true() {","lastModifiedDate":"2021-08-21"},{"lineNumber":26,"author":{"gitId":"twothicc"},"content":"        assertEquals(new Todo(DESCRIPTION), todo);","lastModifiedDate":"2021-08-21"},{"lineNumber":27,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":28,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":29,"author":{"gitId":"twothicc"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":30,"author":{"gitId":"twothicc"},"content":"    void equals_differentTodo_false() {","lastModifiedDate":"2021-08-21"},{"lineNumber":31,"author":{"gitId":"twothicc"},"content":"        Todo doneTodo \u003d new Todo(DESCRIPTION);","lastModifiedDate":"2021-08-21"},{"lineNumber":32,"author":{"gitId":"twothicc"},"content":"        doneTodo.markAsDone();","lastModifiedDate":"2021-08-21"},{"lineNumber":33,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":34,"author":{"gitId":"twothicc"},"content":"        Todo differentDescriptionTodo \u003d new Todo(\"other\");","lastModifiedDate":"2021-08-21"},{"lineNumber":35,"author":{"gitId":"twothicc"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":36,"author":{"gitId":"twothicc"},"content":"        assertNotEquals(todo, doneTodo);","lastModifiedDate":"2021-08-21"},{"lineNumber":37,"author":{"gitId":"twothicc"},"content":"        assertNotEquals(todo, differentDescriptionTodo);","lastModifiedDate":"2021-08-21"},{"lineNumber":38,"author":{"gitId":"twothicc"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":39,"author":{"gitId":"twothicc"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"twothicc":39}}]

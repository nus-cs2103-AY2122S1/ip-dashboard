[{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"rish-16"},"content":"T; 1; read book","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"rish-16"},"content":"D; 1; return book; June 6th","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"rish-16"},"content":"T; 1; join sports club","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"rish-16":3}},{"path":"src/main/java/duke/BotException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rish-16"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"rish-16"},"content":" * ","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"rish-16"},"content":" * This represents a BotException that\u0027s thrown when a bad command is given.","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"rish-16"},"content":" * ","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"rish-16"},"content":" * @author Rishabh Anand","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"rish-16"},"content":" * @version CS2103, AY21/22 Semester 1","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"rish-16"},"content":" * ","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"rish-16"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"rish-16"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"rish-16"},"content":"public class BotException extends Exception {","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"rish-16"},"content":"    public BotException(String message) {","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"rish-16"},"content":"        super(message);","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"rish-16"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"rish-16"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"rish-16":16}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rish-16"},"content":"/** ","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"rish-16"},"content":" * This file contains the main logic behind the Duke chatbot.","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"rish-16"},"content":" * ","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"rish-16"},"content":" * @author: Rishabh Anand","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"rish-16"},"content":" * @version: CS2103, AY21/22 Semester 1","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"rish-16"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"rish-16"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"rish-16"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"rish-16"},"content":"import java.io.FileNotFoundException;  // Import this class to handle errors","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"rish-16"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"rish-16"},"content":"import duke.datastore.DataStore;","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"rish-16"},"content":"import duke.membuffer.MemoryBuffer;","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"rish-16"},"content":"import duke.parser.Parser;","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"rish-16"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"rish-16"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"rish-16"},"content":" * This represents the Duke chatbot and its business logic.","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"rish-16"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"rish-16"},"content":"public class Duke {","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"rish-16"},"content":"    private MemoryBuffer memBuff;","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"rish-16"},"content":"    private Ui userInt;","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"rish-16"},"content":"    private DataStore dataStore;","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"rish-16"},"content":"    private Parser parser;","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"rish-16"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"rish-16"},"content":"        dataStore \u003d new DataStore();","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"rish-16"},"content":"        memBuff \u003d new MemoryBuffer(filePath);","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"rish-16"},"content":"        parser \u003d new Parser();","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"rish-16"},"content":"        userInt \u003d new Ui();","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"rish-16"},"content":"        ArrayList\u003cString\u003e store;","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"rish-16"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"rish-16"},"content":"            store \u003d memBuff.readFile();","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"rish-16"},"content":"            dataStore.ingestExternalSource(store, parser);","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"rish-16"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"rish-16"},"content":"            System.out.println(\"File not found\");","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"rish-16"},"content":"            dataStore \u003d new DataStore();","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"rish-16"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"rish-16"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"rish-16"},"content":"    public void run() {","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"rish-16"},"content":"        userInt.greet();","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"rish-16"},"content":"        while (true) {","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"rish-16"},"content":"            try {","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"rish-16"},"content":"                String userInput \u003d userInt.getUserInput();","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"rish-16"},"content":"                parser.execute(userInput, dataStore, userInt, memBuff);","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"rish-16"},"content":"            } catch (IOException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"rish-16"},"content":"                userInt.say(e.getMessage());","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"rish-16"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"rish-16"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"rish-16"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":57,"author":{"gitId":"rish-16"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"rish-16"},"content":"        new Duke(\"../../../data/duke.txt\").run();","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"rish-16"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":60,"author":{"gitId":"rish-16"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"rish-16":60}},{"path":"src/main/java/duke/datastore/DataStore.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rish-16"},"content":"package duke.datastore;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"rish-16"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"rish-16"},"content":" * This class represents the DataStore which serves as the primary","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"rish-16"},"content":" * working memory for all actions performed on the chatbot.","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"rish-16"},"content":" *","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"rish-16"},"content":" * @author Rishabh Anand","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"rish-16"},"content":" * @version CS2103 AY21/22 Semester 1","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"rish-16"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"rish-16"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"rish-16"},"content":"import duke.parser.Parser;","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"rish-16"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"rish-16"},"content":"public class DataStore {","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"rish-16"},"content":"    private ArrayList\u003cTask\u003e dataStore;","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"rish-16"},"content":"    ","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"rish-16"},"content":"    public DataStore() {","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"rish-16"},"content":"        dataStore \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"rish-16"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"rish-16"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"rish-16"},"content":"     * Ingets and stores the data from the flat file in memory.","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"rish-16"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"rish-16"},"content":"     * @param store the data store containing the per-line task records.","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"rish-16"},"content":"     * @param parser the Parser object that parses the commands from the file.","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"rish-16"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"rish-16"},"content":"    public void ingestExternalSource(ArrayList\u003cString\u003e store, Parser parser) {","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"rish-16"},"content":"        dataStore \u003d parser.parseFromFile(store);","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"rish-16"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"rish-16"},"content":"    // returns the size of the datastore","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"rish-16"},"content":"    public int length() {","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"rish-16"},"content":"        return dataStore.size();","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"rish-16"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"rish-16"},"content":"    public Task get(int index) {","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"rish-16"},"content":"        return dataStore.get(index);","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"rish-16"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"rish-16"},"content":"    public void add(Task task) {","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"rish-16"},"content":"        dataStore.add(task);","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"rish-16"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"rish-16"},"content":"    public void remove(int i) {","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"rish-16"},"content":"        dataStore.remove(i);","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"rish-16"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"rish-16"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"rish-16":48}},{"path":"src/main/java/duke/membuffer/MemoryBuffer.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rish-16"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"rish-16"},"content":" * ","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"rish-16"},"content":" * Represents the memory buffer used to store commands after all","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"rish-16"},"content":" * changes have been made and the session has ended.","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"rish-16"},"content":" * ","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"rish-16"},"content":" * @author Rishabh Anand","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"rish-16"},"content":" * @version CS2103 AY21/22 Semester 1","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"rish-16"},"content":" * ","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"rish-16"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"rish-16"},"content":"package duke.membuffer;","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"rish-16"},"content":"import java.io.File;  // Import the File class","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"rish-16"},"content":"import java.io.FileNotFoundException;  // Import this class to handle errors","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"rish-16"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"rish-16"},"content":"import duke.datastore.DataStore;","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"rish-16"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"rish-16"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"rish-16"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"rish-16"},"content":"import java.io.PrintWriter;","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"rish-16"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"rish-16"},"content":"public class MemoryBuffer {","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"rish-16"},"content":"    private String filePath;","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"rish-16"},"content":"    public MemoryBuffer(String fp) {","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"rish-16"},"content":"        filePath \u003d fp;","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"rish-16"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"rish-16"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"rish-16"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"rish-16"},"content":"     * Reads the flat file and its contents into an accessible format.","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"rish-16"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"rish-16"},"content":"     * @return an ArrayList of task records in string format.","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"rish-16"},"content":"     * @throws FileNotFoundException","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"rish-16"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"rish-16"},"content":"    public ArrayList\u003cString\u003e readFile() throws FileNotFoundException {","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"rish-16"},"content":"        ArrayList\u003cString\u003e store \u003d new ArrayList\u003cString\u003e();","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"rish-16"},"content":"        File myObj \u003d new File(filePath);","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"rish-16"},"content":"        Scanner myReader \u003d new Scanner(myObj);","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"rish-16"},"content":"        while (myReader.hasNextLine()) {","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"rish-16"},"content":"            String data \u003d myReader.nextLine();","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"rish-16"},"content":"            store.add(data); // store line in collection","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"rish-16"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"rish-16"},"content":"        myReader.close();","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"rish-16"},"content":"        return store;","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"rish-16"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"rish-16"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"rish-16"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"rish-16"},"content":"     * Writes the most recent task record logs into memory on a flat file.","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"rish-16"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":57,"author":{"gitId":"rish-16"},"content":"     * @param dataStore the data store containing the updated list of tasks.","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"rish-16"},"content":"     * @throws IOException","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"rish-16"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":60,"author":{"gitId":"rish-16"},"content":"    public void writeFile(DataStore dataStore) throws IOException {","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"rish-16"},"content":"        // BufferedWriter writer \u003d new BufferedWriter(new FileWriter(filePath));","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"rish-16"},"content":"        FileWriter fileWriter \u003d new FileWriter(filePath);","lastModifiedDate":"2021-08-24"},{"lineNumber":63,"author":{"gitId":"rish-16"},"content":"        PrintWriter printWriter \u003d new PrintWriter(fileWriter);","lastModifiedDate":"2021-08-24"},{"lineNumber":64,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"rish-16"},"content":"        for (int i \u003d 0; i \u003c dataStore.length(); i++) {","lastModifiedDate":"2021-08-24"},{"lineNumber":66,"author":{"gitId":"rish-16"},"content":"            Task record \u003d dataStore.get(i);","lastModifiedDate":"2021-08-24"},{"lineNumber":67,"author":{"gitId":"rish-16"},"content":"            String recordRepresentation \u003d record.toTextRepresentation();","lastModifiedDate":"2021-08-24"},{"lineNumber":68,"author":{"gitId":"rish-16"},"content":"            ","lastModifiedDate":"2021-08-24"},{"lineNumber":69,"author":{"gitId":"rish-16"},"content":"            printWriter.print(recordRepresentation + \"\\n\");","lastModifiedDate":"2021-08-24"},{"lineNumber":70,"author":{"gitId":"rish-16"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":71,"author":{"gitId":"rish-16"},"content":"        printWriter.close();","lastModifiedDate":"2021-08-24"},{"lineNumber":72,"author":{"gitId":"rish-16"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":73,"author":{"gitId":"rish-16"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"rish-16":73}},{"path":"src/main/java/duke/parser/Brain.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rish-16"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"rish-16"},"content":" * This class represents the main logic unit of the","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"rish-16"},"content":" * JARVIS chatbot that performs the actual functions.","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"rish-16"},"content":" *","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"rish-16"},"content":" * @author Rishabh Anand","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"rish-16"},"content":" * @versionCS2103 AY21/22 Semester 1","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"rish-16"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"rish-16"},"content":"package duke.parser;","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"rish-16"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"rish-16"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"rish-16"},"content":"import duke.BotException;","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"rish-16"},"content":"import duke.datastore.DataStore;","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"rish-16"},"content":"import duke.membuffer.MemoryBuffer;","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"rish-16"},"content":"import duke.tasks.Event;","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"rish-16"},"content":"import duke.tasks.Deadline;","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"rish-16"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"rish-16"},"content":"import duke.tasks.ToDo;","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"rish-16"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"rish-16"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"rish-16"},"content":"public class Brain {","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"rish-16"},"content":"    public Brain() {}","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"rish-16"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"rish-16"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"rish-16"},"content":"     * Lists out the items in memory when requested by the user.","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"rish-16"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"rish-16"},"content":"     * @param dataStore the list containing the up-to-date task records.","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"rish-16"},"content":"     * @param userInt the user interface object for logging.","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"rish-16"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"rish-16"},"content":"    public void listItems(DataStore dataStore, Ui userInt) {","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"rish-16"},"content":"        userInt.say(\"Here are your tasks: \");","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"rish-16"},"content":"        for (int i \u003d 0; i \u003c dataStore.length(); i++) {","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"rish-16"},"content":"            Task task \u003d dataStore.get(i);","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"rish-16"},"content":"            if (task.getStatus()) {","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"rish-16"},"content":"                userInt.say(i+1 + \". \" + task.toString());","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"rish-16"},"content":"            } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"rish-16"},"content":"                userInt.say(i+1 + \". \" + task.toString());","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"rish-16"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"rish-16"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"rish-16"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"rish-16"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"rish-16"},"content":"     * ","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"rish-16"},"content":"     * Returns the parsed LocalDate object using the given string date.","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"rish-16"},"content":"     * ","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"rish-16"},"content":"     * @param date The date to be parsed in String format.","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"rish-16"},"content":"     * @return the LocalDate representation of the string date.","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"rish-16"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"rish-16"},"content":"    public String processDate(String date) {","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"rish-16"},"content":"        date \u003d date.strip();","lastModifiedDate":"2021-08-24"},{"lineNumber":57,"author":{"gitId":"rish-16"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"rish-16"},"content":"        LocalDateTime datetime \u003d LocalDateTime.parse(date, formatter);","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"rish-16"},"content":"        DateTimeFormatter newFormatter \u003d DateTimeFormatter.ofPattern(\"MMM d yyyy hh:mm a\");","lastModifiedDate":"2021-08-24"},{"lineNumber":60,"author":{"gitId":"rish-16"},"content":"        String finalTime \u003d datetime.format(newFormatter);","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"rish-16"},"content":"        System.out.println(finalTime);","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"rish-16"},"content":"        ","lastModifiedDate":"2021-08-24"},{"lineNumber":63,"author":{"gitId":"rish-16"},"content":"        return finalTime;","lastModifiedDate":"2021-08-24"},{"lineNumber":64,"author":{"gitId":"rish-16"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":66,"author":{"gitId":"rish-16"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":67,"author":{"gitId":"rish-16"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":68,"author":{"gitId":"rish-16"},"content":"     * Creates a new ToDo task based on the description given.","lastModifiedDate":"2021-08-24"},{"lineNumber":69,"author":{"gitId":"rish-16"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":70,"author":{"gitId":"rish-16"},"content":"     * @param input the user\u0027s input with the description.","lastModifiedDate":"2021-08-24"},{"lineNumber":71,"author":{"gitId":"rish-16"},"content":"     * @param dataStore the list containing the up-to-date task records.","lastModifiedDate":"2021-08-24"},{"lineNumber":72,"author":{"gitId":"rish-16"},"content":"     * @param userInt the user interface object for logging.","lastModifiedDate":"2021-08-24"},{"lineNumber":73,"author":{"gitId":"rish-16"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":74,"author":{"gitId":"rish-16"},"content":"    public void createTodo(String input, DataStore dataStore, Ui userInt) {","lastModifiedDate":"2021-08-24"},{"lineNumber":75,"author":{"gitId":"rish-16"},"content":"        String query \u003d input.split(\" \", 2)[1].strip();","lastModifiedDate":"2021-08-24"},{"lineNumber":76,"author":{"gitId":"rish-16"},"content":"        ToDo todo \u003d new ToDo(query);","lastModifiedDate":"2021-08-24"},{"lineNumber":77,"author":{"gitId":"rish-16"},"content":"        dataStore.add(todo);","lastModifiedDate":"2021-08-24"},{"lineNumber":78,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":79,"author":{"gitId":"rish-16"},"content":"        userInt.say(\"Got it. I\u0027ve added this task: \");","lastModifiedDate":"2021-08-24"},{"lineNumber":80,"author":{"gitId":"rish-16"},"content":"        userInt.say(\"\\t\" + todo.toString());","lastModifiedDate":"2021-08-24"},{"lineNumber":81,"author":{"gitId":"rish-16"},"content":"        userInt.say(\"Now you have \" + dataStore.length() + \" tasks in the list.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":82,"author":{"gitId":"rish-16"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":83,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":84,"author":{"gitId":"rish-16"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":85,"author":{"gitId":"rish-16"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":86,"author":{"gitId":"rish-16"},"content":"     * Creates a Deadline task given a description and deadline.","lastModifiedDate":"2021-08-24"},{"lineNumber":87,"author":{"gitId":"rish-16"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":88,"author":{"gitId":"rish-16"},"content":"     * @param input the user\u0027s input with the description and deadline.","lastModifiedDate":"2021-08-24"},{"lineNumber":89,"author":{"gitId":"rish-16"},"content":"     * @param dataStore the list containing the up-to-date task records.","lastModifiedDate":"2021-08-24"},{"lineNumber":90,"author":{"gitId":"rish-16"},"content":"     * @param userInt the user interface object for logging.","lastModifiedDate":"2021-08-24"},{"lineNumber":91,"author":{"gitId":"rish-16"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":92,"author":{"gitId":"rish-16"},"content":"    public void createDeadline(String input, DataStore dataStore, Ui userInt) {","lastModifiedDate":"2021-08-24"},{"lineNumber":93,"author":{"gitId":"rish-16"},"content":"        input \u003d input.split(\" \", 2)[1].strip();","lastModifiedDate":"2021-08-24"},{"lineNumber":94,"author":{"gitId":"rish-16"},"content":"        String query \u003d input.split(\"/by\")[0];","lastModifiedDate":"2021-08-24"},{"lineNumber":95,"author":{"gitId":"rish-16"},"content":"        String limit \u003d input.split(\"/by\")[1];","lastModifiedDate":"2021-08-24"},{"lineNumber":96,"author":{"gitId":"rish-16"},"content":"        String procLimit \u003d processDate(limit);","lastModifiedDate":"2021-08-24"},{"lineNumber":97,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":98,"author":{"gitId":"rish-16"},"content":"        Deadline deadlineTask \u003d new Deadline(query, procLimit);","lastModifiedDate":"2021-08-24"},{"lineNumber":99,"author":{"gitId":"rish-16"},"content":"        dataStore.add(deadlineTask);","lastModifiedDate":"2021-08-24"},{"lineNumber":100,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":101,"author":{"gitId":"rish-16"},"content":"        userInt.say(\"Got it. I\u0027ve added this task: \");","lastModifiedDate":"2021-08-24"},{"lineNumber":102,"author":{"gitId":"rish-16"},"content":"        userInt.say(\"\\t\" + deadlineTask.toString());","lastModifiedDate":"2021-08-24"},{"lineNumber":103,"author":{"gitId":"rish-16"},"content":"        userInt.say(\"Now you have \" + dataStore.length() + \" tasks in the list.\");        ","lastModifiedDate":"2021-08-24"},{"lineNumber":104,"author":{"gitId":"rish-16"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":105,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":106,"author":{"gitId":"rish-16"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":107,"author":{"gitId":"rish-16"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":108,"author":{"gitId":"rish-16"},"content":"     * Creates an Event task given a description and timing.","lastModifiedDate":"2021-08-24"},{"lineNumber":109,"author":{"gitId":"rish-16"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":110,"author":{"gitId":"rish-16"},"content":"     * @param input the user\u0027s input with the description and timing.","lastModifiedDate":"2021-08-24"},{"lineNumber":111,"author":{"gitId":"rish-16"},"content":"     * @param dataStore the list containing the up-to-date task records.","lastModifiedDate":"2021-08-24"},{"lineNumber":112,"author":{"gitId":"rish-16"},"content":"     * @param userInt the user interface object for logging.","lastModifiedDate":"2021-08-24"},{"lineNumber":113,"author":{"gitId":"rish-16"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":114,"author":{"gitId":"rish-16"},"content":"    public void createEvent(String input, DataStore dataStore, Ui userInt) {","lastModifiedDate":"2021-08-24"},{"lineNumber":115,"author":{"gitId":"rish-16"},"content":"        input \u003d input.split(\" \", 2)[1].strip();","lastModifiedDate":"2021-08-24"},{"lineNumber":116,"author":{"gitId":"rish-16"},"content":"        String query \u003d input.split(\"/at\")[0];","lastModifiedDate":"2021-08-24"},{"lineNumber":117,"author":{"gitId":"rish-16"},"content":"        String datetime \u003d input.split(\"/at\")[1];","lastModifiedDate":"2021-08-24"},{"lineNumber":118,"author":{"gitId":"rish-16"},"content":"        String procDate \u003d processDate(datetime);","lastModifiedDate":"2021-08-24"},{"lineNumber":119,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":120,"author":{"gitId":"rish-16"},"content":"        Event eventTask \u003d new Event(query, procDate);","lastModifiedDate":"2021-08-24"},{"lineNumber":121,"author":{"gitId":"rish-16"},"content":"        dataStore.add(eventTask);","lastModifiedDate":"2021-08-24"},{"lineNumber":122,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":123,"author":{"gitId":"rish-16"},"content":"        userInt.say(\"Got it. I\u0027ve added this task: \");","lastModifiedDate":"2021-08-24"},{"lineNumber":124,"author":{"gitId":"rish-16"},"content":"        userInt.say(\"\\t\" + eventTask.toString());","lastModifiedDate":"2021-08-24"},{"lineNumber":125,"author":{"gitId":"rish-16"},"content":"        userInt.say(\"Now you have \" + dataStore.length() + \" tasks in the list.\");        ","lastModifiedDate":"2021-08-24"},{"lineNumber":126,"author":{"gitId":"rish-16"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":127,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":128,"author":{"gitId":"rish-16"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":129,"author":{"gitId":"rish-16"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":130,"author":{"gitId":"rish-16"},"content":"     * Sets a given task to completed status.","lastModifiedDate":"2021-08-24"},{"lineNumber":131,"author":{"gitId":"rish-16"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":132,"author":{"gitId":"rish-16"},"content":"     * @param input the user\u0027s input with the ID of the task in the list.","lastModifiedDate":"2021-08-24"},{"lineNumber":133,"author":{"gitId":"rish-16"},"content":"     * @param dataStore the list containing the up-to-date task records.","lastModifiedDate":"2021-08-24"},{"lineNumber":134,"author":{"gitId":"rish-16"},"content":"     * @param userInt the user interface object for logging.","lastModifiedDate":"2021-08-24"},{"lineNumber":135,"author":{"gitId":"rish-16"},"content":"     * @param warning the exact warning to be thrown when valid index range is exceeded.","lastModifiedDate":"2021-08-24"},{"lineNumber":136,"author":{"gitId":"rish-16"},"content":"     * @throws BotException","lastModifiedDate":"2021-08-24"},{"lineNumber":137,"author":{"gitId":"rish-16"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":138,"author":{"gitId":"rish-16"},"content":"    public void completeTask(String input, DataStore dataStore, Ui userInt, String warning) throws BotException {","lastModifiedDate":"2021-08-24"},{"lineNumber":139,"author":{"gitId":"rish-16"},"content":"        int idx \u003d Integer.parseInt(input.split(\" \")[1]);","lastModifiedDate":"2021-08-24"},{"lineNumber":140,"author":{"gitId":"rish-16"},"content":"            ","lastModifiedDate":"2021-08-24"},{"lineNumber":141,"author":{"gitId":"rish-16"},"content":"        // check if index is within appropriate range","lastModifiedDate":"2021-08-24"},{"lineNumber":142,"author":{"gitId":"rish-16"},"content":"        if (idx \u003c 0 || idx \u003e dataStore.length()) {","lastModifiedDate":"2021-08-24"},{"lineNumber":143,"author":{"gitId":"rish-16"},"content":"            throw new BotException(warning);","lastModifiedDate":"2021-08-24"},{"lineNumber":144,"author":{"gitId":"rish-16"},"content":"        } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":145,"author":{"gitId":"rish-16"},"content":"            Task task \u003d dataStore.get(idx-1);","lastModifiedDate":"2021-08-24"},{"lineNumber":146,"author":{"gitId":"rish-16"},"content":"            task.setDone();","lastModifiedDate":"2021-08-24"},{"lineNumber":147,"author":{"gitId":"rish-16"},"content":"            userInt.say(\"Nice! I\u0027ve marked this task as done: \");","lastModifiedDate":"2021-08-24"},{"lineNumber":148,"author":{"gitId":"rish-16"},"content":"            userInt.say(\"\\t\" + task.toString());","lastModifiedDate":"2021-08-24"},{"lineNumber":149,"author":{"gitId":"rish-16"},"content":"        }        ","lastModifiedDate":"2021-08-24"},{"lineNumber":150,"author":{"gitId":"rish-16"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":151,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":152,"author":{"gitId":"rish-16"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":153,"author":{"gitId":"rish-16"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":154,"author":{"gitId":"rish-16"},"content":"     * Shuts down the bot and stops the program from running.","lastModifiedDate":"2021-08-24"},{"lineNumber":155,"author":{"gitId":"rish-16"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":156,"author":{"gitId":"rish-16"},"content":"     * @param userInt the user interface object for logging.","lastModifiedDate":"2021-08-24"},{"lineNumber":157,"author":{"gitId":"rish-16"},"content":"     * @param dataStore the list containing the up-to-date task records.","lastModifiedDate":"2021-08-24"},{"lineNumber":158,"author":{"gitId":"rish-16"},"content":"     * @param memBuff the memory buffer for reading and writing files.","lastModifiedDate":"2021-08-24"},{"lineNumber":159,"author":{"gitId":"rish-16"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":160,"author":{"gitId":"rish-16"},"content":"    public void shutdownBot(Ui userInt, DataStore dataStore, MemoryBuffer memBuff) {","lastModifiedDate":"2021-08-24"},{"lineNumber":161,"author":{"gitId":"rish-16"},"content":"        // save current task log ","lastModifiedDate":"2021-08-24"},{"lineNumber":162,"author":{"gitId":"rish-16"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":163,"author":{"gitId":"rish-16"},"content":"            memBuff.writeFile(dataStore);","lastModifiedDate":"2021-08-24"},{"lineNumber":164,"author":{"gitId":"rish-16"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":165,"author":{"gitId":"rish-16"},"content":"            userInt.say(\"OOPS!!! There was a problem saving your tasks.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":166,"author":{"gitId":"rish-16"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":167,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":168,"author":{"gitId":"rish-16"},"content":"        userInt.say(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2021-08-24"},{"lineNumber":169,"author":{"gitId":"rish-16"},"content":"        System.exit(0);","lastModifiedDate":"2021-08-24"},{"lineNumber":170,"author":{"gitId":"rish-16"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":171,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":172,"author":{"gitId":"rish-16"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":173,"author":{"gitId":"rish-16"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":174,"author":{"gitId":"rish-16"},"content":"     * Deletes the current task from working memory.","lastModifiedDate":"2021-08-24"},{"lineNumber":175,"author":{"gitId":"rish-16"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":176,"author":{"gitId":"rish-16"},"content":"     * @param input the user\u0027s input with the task ID to be deleted.","lastModifiedDate":"2021-08-24"},{"lineNumber":177,"author":{"gitId":"rish-16"},"content":"     * @param dataStore the list containing the up-to-date task records.","lastModifiedDate":"2021-08-24"},{"lineNumber":178,"author":{"gitId":"rish-16"},"content":"     * @param userInt the user interface object for logging.","lastModifiedDate":"2021-08-24"},{"lineNumber":179,"author":{"gitId":"rish-16"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":180,"author":{"gitId":"rish-16"},"content":"    public void deleteTask(String input, DataStore dataStore, Ui userInt) {","lastModifiedDate":"2021-08-24"},{"lineNumber":181,"author":{"gitId":"rish-16"},"content":"        int idx \u003d Integer.parseInt(input.split(\" \")[1]);","lastModifiedDate":"2021-08-24"},{"lineNumber":182,"author":{"gitId":"rish-16"},"content":"        Task task \u003d dataStore.get(idx-1);","lastModifiedDate":"2021-08-24"},{"lineNumber":183,"author":{"gitId":"rish-16"},"content":"        ","lastModifiedDate":"2021-08-24"},{"lineNumber":184,"author":{"gitId":"rish-16"},"content":"        userInt.say(\"Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2021-08-24"},{"lineNumber":185,"author":{"gitId":"rish-16"},"content":"        userInt.say(\"\\t\" + task.toString());","lastModifiedDate":"2021-08-24"},{"lineNumber":186,"author":{"gitId":"rish-16"},"content":"        dataStore.remove(idx-1); // actual deletion","lastModifiedDate":"2021-08-24"},{"lineNumber":187,"author":{"gitId":"rish-16"},"content":"        userInt.say(\"Now you have \" + (dataStore.length()) + \" tasks in the list.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":188,"author":{"gitId":"rish-16"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":189,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":190,"author":{"gitId":"rish-16"},"content":"    public void find(String input, DataStore dataStore, Ui userInt) {","lastModifiedDate":"2021-08-24"},{"lineNumber":191,"author":{"gitId":"rish-16"},"content":"        String query \u003d input.split(\" \")[1];","lastModifiedDate":"2021-08-24"},{"lineNumber":192,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":193,"author":{"gitId":"rish-16"},"content":"        userInt.say(\"Here are the matching tasks in your list: \");","lastModifiedDate":"2021-08-24"},{"lineNumber":194,"author":{"gitId":"rish-16"},"content":"        for (int i \u003d 0; i \u003c dataStore.length(); i++) {","lastModifiedDate":"2021-08-24"},{"lineNumber":195,"author":{"gitId":"rish-16"},"content":"            Task record \u003d dataStore.get(i);","lastModifiedDate":"2021-08-24"},{"lineNumber":196,"author":{"gitId":"rish-16"},"content":"            String message \u003d record.toString();","lastModifiedDate":"2021-08-24"},{"lineNumber":197,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":198,"author":{"gitId":"rish-16"},"content":"            if (record.getDescription().contains(query)) {","lastModifiedDate":"2021-08-24"},{"lineNumber":199,"author":{"gitId":"rish-16"},"content":"                userInt.say((i+1) + \". \" + message);","lastModifiedDate":"2021-08-24"},{"lineNumber":200,"author":{"gitId":"rish-16"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":201,"author":{"gitId":"rish-16"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":202,"author":{"gitId":"rish-16"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":203,"author":{"gitId":"rish-16"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"rish-16":203}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rish-16"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"rish-16"},"content":" *","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"rish-16"},"content":" * This class represents the Parser object that breaks queries","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"rish-16"},"content":" * into tokens before deciding what to compute.","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"rish-16"},"content":" *","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"rish-16"},"content":" * @author Rishabh Anand","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"rish-16"},"content":" * @version CS2103 AY21/22 Semester 1","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"rish-16"},"content":" *","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"rish-16"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"rish-16"},"content":"package duke.parser;","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"rish-16"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"rish-16"},"content":"import duke.BotException;","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"rish-16"},"content":"import duke.datastore.DataStore;","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"rish-16"},"content":"import duke.membuffer.MemoryBuffer;","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"rish-16"},"content":"import duke.tasks.Deadline;","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"rish-16"},"content":"import duke.tasks.Event;","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"rish-16"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"rish-16"},"content":"import duke.tasks.ToDo;","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"rish-16"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"rish-16"},"content":"public class Parser {","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"rish-16"},"content":"    private static final String TODO_NO_DESC \u003d \"OOPS!!! The description of a todo cannot be empty.\";","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"rish-16"},"content":"    private static final String DEADLINE_NO_INFO \u003d \"OOPS!!! A deadline must have a description and datetime limit.\";","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"rish-16"},"content":"    private static final String UNRECOG \u003d \"OOPS!!! I\u0027m sorry, this is an unrecognised command.\";","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"rish-16"},"content":"    private static final String EVENT_NO_INFO \u003d \"OOPS!!! An event must have a description and datetime duration.\";","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"rish-16"},"content":"    private static final String IDX_OUT_OF_BOUNDS \u003d \"OOPS!!! You provided an invalid task index. Try again.\";","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"rish-16"},"content":"    private Brain brain;","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"rish-16"},"content":"    public Parser() {","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"rish-16"},"content":"        brain \u003d new Brain();","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"rish-16"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"rish-16"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"rish-16"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"rish-16"},"content":"     * Analyses the command and decides what function to perform.","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"rish-16"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"rish-16"},"content":"     * @param command the user input.","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"rish-16"},"content":"     * @param dataStore the list containing the up-to-date task records.","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"rish-16"},"content":"     * @param userInt the user interface object for logging.","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"rish-16"},"content":"     * @param memBuff the memory buffer that reads and writes files","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"rish-16"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"rish-16"},"content":"    public void execute(String command, DataStore dataStore, Ui userInt, MemoryBuffer memBuff) {","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"rish-16"},"content":"        if (command.equals(\"list\")) {","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"rish-16"},"content":"            brain.listItems(dataStore, userInt);","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"rish-16"},"content":"        } else if (command.contains(\"todo\")) {","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"rish-16"},"content":"            brain.createTodo(command, dataStore, userInt);","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"rish-16"},"content":"        } else if (command.contains(\"deadline\")) {","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"rish-16"},"content":"            brain.createDeadline(command, dataStore, userInt);","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"rish-16"},"content":"        } else if (command.contains(\"event\")) {","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"rish-16"},"content":"            brain.createEvent(command, dataStore, userInt);","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"rish-16"},"content":"        } else if (command.contains(\"done\")) {","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"rish-16"},"content":"            try {","lastModifiedDate":"2021-08-24"},{"lineNumber":57,"author":{"gitId":"rish-16"},"content":"                brain.completeTask(command, dataStore, userInt, IDX_OUT_OF_BOUNDS);","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"rish-16"},"content":"            } catch (BotException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"rish-16"},"content":"                userInt.say(e.getMessage());","lastModifiedDate":"2021-08-24"},{"lineNumber":60,"author":{"gitId":"rish-16"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"rish-16"},"content":"        } else if (command.equals(\"bye\")) {","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"rish-16"},"content":"            brain.shutdownBot(userInt, dataStore, memBuff);","lastModifiedDate":"2021-08-24"},{"lineNumber":63,"author":{"gitId":"rish-16"},"content":"        } else if (command.contains(\"delete\")) {","lastModifiedDate":"2021-08-24"},{"lineNumber":64,"author":{"gitId":"rish-16"},"content":"            brain.deleteTask(command, dataStore, userInt);","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"rish-16"},"content":"        } else if (command.contains(\"find\")) {","lastModifiedDate":"2021-08-24"},{"lineNumber":66,"author":{"gitId":"rish-16"},"content":"            brain.find(command, dataStore, userInt);","lastModifiedDate":"2021-08-24"},{"lineNumber":67,"author":{"gitId":"rish-16"},"content":"        } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":68,"author":{"gitId":"rish-16"},"content":"            try {","lastModifiedDate":"2021-08-24"},{"lineNumber":69,"author":{"gitId":"rish-16"},"content":"                errorHandle(command);","lastModifiedDate":"2021-08-24"},{"lineNumber":70,"author":{"gitId":"rish-16"},"content":"            } catch (BotException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":71,"author":{"gitId":"rish-16"},"content":"                userInt.say(UNRECOG);","lastModifiedDate":"2021-08-24"},{"lineNumber":72,"author":{"gitId":"rish-16"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":73,"author":{"gitId":"rish-16"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":74,"author":{"gitId":"rish-16"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":75,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":76,"author":{"gitId":"rish-16"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":77,"author":{"gitId":"rish-16"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":78,"author":{"gitId":"rish-16"},"content":"     * Handles all invalid commands given by the user.","lastModifiedDate":"2021-08-24"},{"lineNumber":79,"author":{"gitId":"rish-16"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":80,"author":{"gitId":"rish-16"},"content":"     * @param input the user input.","lastModifiedDate":"2021-08-24"},{"lineNumber":81,"author":{"gitId":"rish-16"},"content":"     * @throws BotException","lastModifiedDate":"2021-08-24"},{"lineNumber":82,"author":{"gitId":"rish-16"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":83,"author":{"gitId":"rish-16"},"content":"    public void errorHandle(String input) throws BotException {","lastModifiedDate":"2021-08-24"},{"lineNumber":84,"author":{"gitId":"rish-16"},"content":"        input \u003d input.strip(); // remove whitespace","lastModifiedDate":"2021-08-24"},{"lineNumber":85,"author":{"gitId":"rish-16"},"content":"        String[] brokenInput \u003d input.split(\" \");","lastModifiedDate":"2021-08-24"},{"lineNumber":86,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":87,"author":{"gitId":"rish-16"},"content":"        if (input.equals(\"todo\")) {","lastModifiedDate":"2021-08-24"},{"lineNumber":88,"author":{"gitId":"rish-16"},"content":"            throw new BotException(TODO_NO_DESC);","lastModifiedDate":"2021-08-24"},{"lineNumber":89,"author":{"gitId":"rish-16"},"content":"        } else if (input.equals(\"deadline\") || input.contains(\"deadline\") \u0026\u0026 !input.contains(\"/by\")) {","lastModifiedDate":"2021-08-24"},{"lineNumber":90,"author":{"gitId":"rish-16"},"content":"            throw new BotException(DEADLINE_NO_INFO);","lastModifiedDate":"2021-08-24"},{"lineNumber":91,"author":{"gitId":"rish-16"},"content":"        } else if (input.equals(\"event\") || input.contains(\"event\") \u0026\u0026 !input.contains(\"/at\")) {","lastModifiedDate":"2021-08-24"},{"lineNumber":92,"author":{"gitId":"rish-16"},"content":"            throw new BotException(EVENT_NO_INFO);","lastModifiedDate":"2021-08-24"},{"lineNumber":93,"author":{"gitId":"rish-16"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":94,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":95,"author":{"gitId":"rish-16"},"content":"        ArrayList\u003cString\u003e prunedInput \u003d new ArrayList\u003cString\u003e();","lastModifiedDate":"2021-08-24"},{"lineNumber":96,"author":{"gitId":"rish-16"},"content":"        for (String str : brokenInput) {","lastModifiedDate":"2021-08-24"},{"lineNumber":97,"author":{"gitId":"rish-16"},"content":"            if (str.length() \u003e 0) {","lastModifiedDate":"2021-08-24"},{"lineNumber":98,"author":{"gitId":"rish-16"},"content":"                prunedInput.add(str);","lastModifiedDate":"2021-08-24"},{"lineNumber":99,"author":{"gitId":"rish-16"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":100,"author":{"gitId":"rish-16"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":101,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":102,"author":{"gitId":"rish-16"},"content":"        // advanced syntax errors","lastModifiedDate":"2021-08-24"},{"lineNumber":103,"author":{"gitId":"rish-16"},"content":"        if (prunedInput.get(0).equals(\"deadline\")) {","lastModifiedDate":"2021-08-24"},{"lineNumber":104,"author":{"gitId":"rish-16"},"content":"            // deadline with no description","lastModifiedDate":"2021-08-24"},{"lineNumber":105,"author":{"gitId":"rish-16"},"content":"            if (prunedInput.get(1).equals(\"/by\")) { // eg: deadline /by Mon 2PM","lastModifiedDate":"2021-08-24"},{"lineNumber":106,"author":{"gitId":"rish-16"},"content":"                throw new BotException(DEADLINE_NO_INFO);","lastModifiedDate":"2021-08-24"},{"lineNumber":107,"author":{"gitId":"rish-16"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":108,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":109,"author":{"gitId":"rish-16"},"content":"            // deadline with no date limit","lastModifiedDate":"2021-08-24"},{"lineNumber":110,"author":{"gitId":"rish-16"},"content":"            int byIndex \u003d prunedInput.indexOf(\"/by\");","lastModifiedDate":"2021-08-24"},{"lineNumber":111,"author":{"gitId":"rish-16"},"content":"            if (byIndex \u003d\u003d prunedInput.size() - 1) { // eg: deadline write program /by","lastModifiedDate":"2021-08-24"},{"lineNumber":112,"author":{"gitId":"rish-16"},"content":"                throw new BotException(DEADLINE_NO_INFO);","lastModifiedDate":"2021-08-24"},{"lineNumber":113,"author":{"gitId":"rish-16"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":114,"author":{"gitId":"rish-16"},"content":"        } else if (prunedInput.get(0).equals(\"event\")) {","lastModifiedDate":"2021-08-24"},{"lineNumber":115,"author":{"gitId":"rish-16"},"content":"            // event with no description","lastModifiedDate":"2021-08-24"},{"lineNumber":116,"author":{"gitId":"rish-16"},"content":"            if (prunedInput.get(1).equals(\"/at\")) { // eg: event /at Mon 2-4PM","lastModifiedDate":"2021-08-24"},{"lineNumber":117,"author":{"gitId":"rish-16"},"content":"                throw new BotException(EVENT_NO_INFO);","lastModifiedDate":"2021-08-24"},{"lineNumber":118,"author":{"gitId":"rish-16"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":119,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":120,"author":{"gitId":"rish-16"},"content":"            // event with no date","lastModifiedDate":"2021-08-24"},{"lineNumber":121,"author":{"gitId":"rish-16"},"content":"            int byIndex \u003d prunedInput.indexOf(\"/at\");","lastModifiedDate":"2021-08-24"},{"lineNumber":122,"author":{"gitId":"rish-16"},"content":"            if (byIndex \u003d\u003d prunedInput.size() - 1) { // eg: event visit mom /at","lastModifiedDate":"2021-08-24"},{"lineNumber":123,"author":{"gitId":"rish-16"},"content":"                throw new BotException(EVENT_NO_INFO);","lastModifiedDate":"2021-08-24"},{"lineNumber":124,"author":{"gitId":"rish-16"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":125,"author":{"gitId":"rish-16"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":126,"author":{"gitId":"rish-16"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":127,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":128,"author":{"gitId":"rish-16"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":129,"author":{"gitId":"rish-16"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":130,"author":{"gitId":"rish-16"},"content":"     * Parses the commands from the flat file and commits it to working memory.","lastModifiedDate":"2021-08-24"},{"lineNumber":131,"author":{"gitId":"rish-16"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":132,"author":{"gitId":"rish-16"},"content":"     * @param store a list of per-line strings from the flat file.","lastModifiedDate":"2021-08-24"},{"lineNumber":133,"author":{"gitId":"rish-16"},"content":"     * @return","lastModifiedDate":"2021-08-24"},{"lineNumber":134,"author":{"gitId":"rish-16"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":135,"author":{"gitId":"rish-16"},"content":"    public ArrayList\u003cTask\u003e parseFromFile(ArrayList\u003cString\u003e store) {","lastModifiedDate":"2021-08-24"},{"lineNumber":136,"author":{"gitId":"rish-16"},"content":"        ArrayList\u003cTask\u003e dataStore \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2021-08-24"},{"lineNumber":137,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":138,"author":{"gitId":"rish-16"},"content":"        for (int i \u003d 0; i \u003c store.size(); i++) {","lastModifiedDate":"2021-08-24"},{"lineNumber":139,"author":{"gitId":"rish-16"},"content":"            String record \u003d store.get(i);","lastModifiedDate":"2021-08-24"},{"lineNumber":140,"author":{"gitId":"rish-16"},"content":"            String[] splitRecord \u003d record.split(\";\");","lastModifiedDate":"2021-08-24"},{"lineNumber":141,"author":{"gitId":"rish-16"},"content":"            ","lastModifiedDate":"2021-08-24"},{"lineNumber":142,"author":{"gitId":"rish-16"},"content":"            for (int j \u003d 0; j \u003c splitRecord.length; j++) {","lastModifiedDate":"2021-08-24"},{"lineNumber":143,"author":{"gitId":"rish-16"},"content":"                splitRecord[j] \u003d splitRecord[j].strip();","lastModifiedDate":"2021-08-24"},{"lineNumber":144,"author":{"gitId":"rish-16"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":145,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":146,"author":{"gitId":"rish-16"},"content":"            if (splitRecord[0].equals(\"T\")) {","lastModifiedDate":"2021-08-24"},{"lineNumber":147,"author":{"gitId":"rish-16"},"content":"                ToDo todoTask \u003d new ToDo(splitRecord[2]);","lastModifiedDate":"2021-08-24"},{"lineNumber":148,"author":{"gitId":"rish-16"},"content":"                if (splitRecord[1].equals(\"1\")) {","lastModifiedDate":"2021-08-24"},{"lineNumber":149,"author":{"gitId":"rish-16"},"content":"                    todoTask.setDone();","lastModifiedDate":"2021-08-24"},{"lineNumber":150,"author":{"gitId":"rish-16"},"content":"                }","lastModifiedDate":"2021-08-24"},{"lineNumber":151,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":152,"author":{"gitId":"rish-16"},"content":"                // add to task data store","lastModifiedDate":"2021-08-24"},{"lineNumber":153,"author":{"gitId":"rish-16"},"content":"                dataStore.add(todoTask);","lastModifiedDate":"2021-08-24"},{"lineNumber":154,"author":{"gitId":"rish-16"},"content":"            } else if (splitRecord[0].equals(\"D\")) {","lastModifiedDate":"2021-08-24"},{"lineNumber":155,"author":{"gitId":"rish-16"},"content":"                Deadline deadlineTask \u003d new Deadline(splitRecord[2], splitRecord[3]);","lastModifiedDate":"2021-08-24"},{"lineNumber":156,"author":{"gitId":"rish-16"},"content":"                if (splitRecord[1].equals(\"1\")) {","lastModifiedDate":"2021-08-24"},{"lineNumber":157,"author":{"gitId":"rish-16"},"content":"                    deadlineTask.setDone();","lastModifiedDate":"2021-08-24"},{"lineNumber":158,"author":{"gitId":"rish-16"},"content":"                }","lastModifiedDate":"2021-08-24"},{"lineNumber":159,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":160,"author":{"gitId":"rish-16"},"content":"                // add to task data store","lastModifiedDate":"2021-08-24"},{"lineNumber":161,"author":{"gitId":"rish-16"},"content":"                dataStore.add(deadlineTask);","lastModifiedDate":"2021-08-24"},{"lineNumber":162,"author":{"gitId":"rish-16"},"content":"            } else if (splitRecord[0].equals(\"E\")) {","lastModifiedDate":"2021-08-24"},{"lineNumber":163,"author":{"gitId":"rish-16"},"content":"                Event eventTask \u003d new Event(splitRecord[2], splitRecord[3]);","lastModifiedDate":"2021-08-24"},{"lineNumber":164,"author":{"gitId":"rish-16"},"content":"                if (splitRecord[1].equals(\"1\")) {","lastModifiedDate":"2021-08-24"},{"lineNumber":165,"author":{"gitId":"rish-16"},"content":"                    eventTask.setDone();","lastModifiedDate":"2021-08-24"},{"lineNumber":166,"author":{"gitId":"rish-16"},"content":"                }","lastModifiedDate":"2021-08-24"},{"lineNumber":167,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":168,"author":{"gitId":"rish-16"},"content":"                // add to task data store","lastModifiedDate":"2021-08-24"},{"lineNumber":169,"author":{"gitId":"rish-16"},"content":"                dataStore.add(eventTask);","lastModifiedDate":"2021-08-24"},{"lineNumber":170,"author":{"gitId":"rish-16"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":171,"author":{"gitId":"rish-16"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":172,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":173,"author":{"gitId":"rish-16"},"content":"        return dataStore;","lastModifiedDate":"2021-08-24"},{"lineNumber":174,"author":{"gitId":"rish-16"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":175,"author":{"gitId":"rish-16"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"rish-16":175}},{"path":"src/main/java/duke/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rish-16"},"content":"package duke.tasks;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"rish-16"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"rish-16"},"content":" * ","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"rish-16"},"content":" * This represents a Deadline task with a time limit.","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"rish-16"},"content":" * ","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"rish-16"},"content":" * @author Rishabh Anand","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"rish-16"},"content":" * @version CS2103, AY21/22 Semester 1","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"rish-16"},"content":" * ","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"rish-16"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"rish-16"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"rish-16"},"content":"    protected String deadline;","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"rish-16"},"content":"    public Deadline(String desc, String deadline) {","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"rish-16"},"content":"        super(desc);","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"rish-16"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"rish-16"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"rish-16"},"content":"    // returns the string representation of the Deadline","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"rish-16"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"rish-16"},"content":"    public String toString() {","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"rish-16"},"content":"        return \"[D]\" ","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"rish-16"},"content":"                + super.toString()","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"rish-16"},"content":"                + \" (by: \"","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"rish-16"},"content":"                + this.deadline","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"rish-16"},"content":"                + \")\";","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"rish-16"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"rish-16"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"rish-16"},"content":"    public String toTextRepresentation() {","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"rish-16"},"content":"        String binaryStatus \u003d this.status ? \"1\" : \"0\";","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"rish-16"},"content":"        return String.format(\"D; %s; %s; %s\", binaryStatus, this.description.strip(), this.deadline.strip());","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"rish-16"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"rish-16"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"rish-16":33}},{"path":"src/main/java/duke/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rish-16"},"content":"package duke.tasks;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"rish-16"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"rish-16"},"content":" * ","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"rish-16"},"content":" * This represents an Event task with a time duration.","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"rish-16"},"content":" * ","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"rish-16"},"content":" * @author Rishabh Anand","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"rish-16"},"content":" * @version CS2103, AY21/22 Semester 1","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"rish-16"},"content":" * ","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"rish-16"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"rish-16"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"rish-16"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"rish-16"},"content":"    protected String timing;","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"rish-16"},"content":"    public Event(String desc, String timing) {","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"rish-16"},"content":"        super(desc);","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"rish-16"},"content":"        this.timing \u003d timing;","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"rish-16"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"rish-16"},"content":"    // returns string representation of the Event","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"rish-16"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"rish-16"},"content":"    public String toString() {","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"rish-16"},"content":"        return \"[E]\" ","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"rish-16"},"content":"                + super.toString()","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"rish-16"},"content":"                + \" (at: \"","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"rish-16"},"content":"                + this.timing","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"rish-16"},"content":"                + \")\";","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"rish-16"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"rish-16"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"rish-16"},"content":"    public String toTextRepresentation() {","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"rish-16"},"content":"        String binaryStatus \u003d this.status ? \"1\" : \"0\";","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"rish-16"},"content":"        return String.format(\"E; %s; %s; %s\", binaryStatus, this.description.strip(), this.timing.strip());","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"rish-16"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"rish-16"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"rish-16":36}},{"path":"src/main/java/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rish-16"},"content":"package duke.tasks;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"rish-16"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"rish-16"},"content":" * This represents a Task object for the list.","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"rish-16"},"content":" * ","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"rish-16"},"content":" * @author Rishabh Anand","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"rish-16"},"content":" * @version CS2103, AY21/222 Semester 1","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"rish-16"},"content":" * ","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"rish-16"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"rish-16"},"content":"abstract public class Task {","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"rish-16"},"content":"    protected String description;","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"rish-16"},"content":"    protected Boolean status;","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"rish-16"},"content":"    public Task(String desc) {","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"rish-16"},"content":"        this.description \u003d desc;","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"rish-16"},"content":"        this.status \u003d false;","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"rish-16"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"rish-16"},"content":"    // Sets the task as completed","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"rish-16"},"content":"    public void setDone() {","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"rish-16"},"content":"        this.status \u003d true;","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"rish-16"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"rish-16"},"content":"    // returns the task status","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"rish-16"},"content":"    public Boolean getStatus() {","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"rish-16"},"content":"        return this.status;","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"rish-16"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"rish-16"},"content":"    // returns the string representation of the status","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"rish-16"},"content":"    public String getStatusString() {","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"rish-16"},"content":"        return this.status ? \"[X]\" : \"[ ]\";","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"rish-16"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"rish-16"},"content":"    // returns the textual description of the task","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"rish-16"},"content":"    public String getDescription() {","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"rish-16"},"content":"        return this.description;","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"rish-16"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"rish-16"},"content":"    // compares the task with another","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"rish-16"},"content":"    public Boolean equals(Task t) {","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"rish-16"},"content":"        if (t.getDescription().equals(this.description)) {","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"rish-16"},"content":"            return true;","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"rish-16"},"content":"        } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"rish-16"},"content":"            return false;","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"rish-16"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"rish-16"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"rish-16"},"content":"    // returns the string representation of the Task","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"rish-16"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"rish-16"},"content":"    public String toString() {","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"rish-16"},"content":"        return this.getStatusString() + \" \" + this.getDescription();","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"rish-16"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"rish-16"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"rish-16"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"rish-16"},"content":"     * Abstract method to return the chatbot list","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"rish-16"},"content":"     * representation of a task.","lastModifiedDate":"2021-08-24"},{"lineNumber":57,"author":{"gitId":"rish-16"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"rish-16"},"content":"     * @return CLI-friendly list representation of the task.","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"rish-16"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":60,"author":{"gitId":"rish-16"},"content":"    abstract public String toTextRepresentation();","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"rish-16"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"rish-16":61}},{"path":"src/main/java/duke/tasks/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rish-16"},"content":"package duke.tasks;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"rish-16"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"rish-16"},"content":" * ","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"rish-16"},"content":" * This represents a ToDo task without a time limit.","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"rish-16"},"content":" * ","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"rish-16"},"content":" * @author Rishabh Anand","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"rish-16"},"content":" * @version CS2103, AY21/22 Semester 1","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"rish-16"},"content":" * ","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"rish-16"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"rish-16"},"content":"public class ToDo extends Task {","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"rish-16"},"content":"    public ToDo(String desc) {","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"rish-16"},"content":"        super(desc);","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"rish-16"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"rish-16"},"content":"   ","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"rish-16"},"content":"    // returns the string representation of the ToDo task in the list","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"rish-16"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"rish-16"},"content":"    public String toString() {","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"rish-16"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"rish-16"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"rish-16"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"rish-16"},"content":"    public String toTextRepresentation() {","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"rish-16"},"content":"        String binaryStatus \u003d this.status ? \"1\" : \"0\";","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"rish-16"},"content":"        return String.format(\"T; %s; %s\", binaryStatus, this.description.strip());","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"rish-16"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"rish-16"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"rish-16":26}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rish-16"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"rish-16"},"content":" *","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"rish-16"},"content":" * This class represents the User Interface object that","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"rish-16"},"content":" * serves as the primary point of communication with the user.","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"rish-16"},"content":" *","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"rish-16"},"content":" * @author Rishabh Anand","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"rish-16"},"content":" * @version CS2103 AY21/22 Semester 1","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"rish-16"},"content":" *","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"rish-16"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"rish-16"},"content":"package duke.ui;","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"rish-16"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"rish-16"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"rish-16"},"content":"public class Ui {","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"rish-16"},"content":"    public Ui() {}","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"rish-16"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"rish-16"},"content":"     * Prints out the welcome greeting upon successful summoning.","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"rish-16"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"rish-16"},"content":"    public void greet() {","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"rish-16"},"content":"        System.out.println(\"Hello, I\\\u0027m  JARVIS\");","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"rish-16"},"content":"        System.out.println(\"What can I do for you?\");","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"rish-16"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"rish-16"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"rish-16"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"rish-16"},"content":"     * Returns the user\u0027s input without any preprocessing.","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"rish-16"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"rish-16"},"content":"     * @return the raw string representation of the user\u0027s input to console.","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"rish-16"},"content":"     * @throws IOException","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"rish-16"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"rish-16"},"content":"    public String getUserInput() throws IOException {","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"rish-16"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"rish-16"},"content":"        System.out.println(\"\");","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"rish-16"},"content":"        String input \u003d sc.nextLine();","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"rish-16"},"content":"        return input;","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"rish-16"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"rish-16"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"rish-16"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"rish-16"},"content":"     * Prints out messages from the chatbot to console.","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"rish-16"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"rish-16"},"content":"     * @param msg the exact message that needs to logged.","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"rish-16"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"rish-16"},"content":"    public void say(String msg) {","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"rish-16"},"content":"        System.out.println(msg);","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"rish-16"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"rish-16"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"rish-16":51}},{"path":"src/test/java/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rish-16"},"content":"import duke.tasks.Deadline;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"rish-16"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"rish-16"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"rish-16"},"content":"public class DeadlineTest {","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"rish-16"},"content":"    @Test","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"rish-16"},"content":"    public void Subtest1() {","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"rish-16"},"content":"        Deadline deadline \u003d new Deadline(","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"rish-16"},"content":"                                    \"Finish 2103 Homework\", ","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"rish-16"},"content":"                                    \"Apr 16 2021 6PM\"","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"rish-16"},"content":"                                );","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"rish-16"},"content":"        assertEquals(\"[D][ ] Finish 2103 Homework  (by: Apr 16 2021 6PM)\", deadline.toString());","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"rish-16"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"rish-16"},"content":"    @Test","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"rish-16"},"content":"    public void Subtest2() {","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"rish-16"},"content":"        Deadline deadline \u003d new Deadline(","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"rish-16"},"content":"                                    \"Finish 2103 Homework\", ","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"rish-16"},"content":"                                    \"Apr 16 2021 6PM\"","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"rish-16"},"content":"                                );","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"rish-16"},"content":"        deadline.setDone();","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"rish-16"},"content":"        assertEquals(\"[D][X] Finish 2103 Homework  (by: Apr 16 2021 6PM)\", deadline.toString());","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"rish-16"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"rish-16"},"content":"    @Test","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"rish-16"},"content":"    public void Subtest3() {","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"rish-16"},"content":"        Deadline deadline \u003d new Deadline(","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"rish-16"},"content":"                                    \"Group Project submission\", ","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"rish-16"},"content":"                                    \"Oct 15 2021 11PM\"","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"rish-16"},"content":"                                );","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"rish-16"},"content":"        deadline.setDone();","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"rish-16"},"content":"        assertEquals(\"[D][X] Group Project submission  (by: Oct 15 2022 11PM)\", deadline.toString());","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"rish-16"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"rish-16"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"rish-16":34}},{"path":"src/test/java/ToDoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rish-16"},"content":"import duke.tasks.ToDo;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"rish-16"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"rish-16"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"rish-16"},"content":"public class ToDoTest {","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"rish-16"},"content":"    @Test","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"rish-16"},"content":"    public void Subtest1() {","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"rish-16"},"content":"        Todo event \u003d new ToDo(\"Finish 2103 Homework\");","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"rish-16"},"content":"        assertEquals(\"[T][ ] Finish 2103 Homework\", event.toString());","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"rish-16"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"rish-16"},"content":"    @Test","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"rish-16"},"content":"    public void Subtest2() {","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"rish-16"},"content":"        Todo todo \u003d new ToDo(\"A very long long long long long task\");","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"rish-16"},"content":"        todo.setDone();","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"rish-16"},"content":"        assertEquals(\"[T][X] A very long long long long long task\", event.toString());","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"rish-16"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"rish-16"},"content":"    @Test","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"rish-16"},"content":"    public void Subtest3() {","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"rish-16"},"content":"        Deadline event \u003d new Deadline(\"Do pre-class readings\");","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"rish-16"},"content":"        event.setDone();","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"rish-16"},"content":"        assertEquals(\"[T][X] Do pre-class readings)\", event.toString());","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"rish-16"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"rish-16"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"rish-16":25}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"rish-16"},"content":"todo buy book","lastModifiedDate":"2021-08-19"},{"lineNumber":2,"author":{"gitId":"rish-16"},"content":"deadline sell book /by Sunday","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"rish-16"},"content":"event project meeting /at Mon 2-4pm","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"rish-16"},"content":"icnerweorineoivne","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"rish-16"},"content":"event /at Mon 2-4pm","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"rish-16"},"content":"deadline do homework /by","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"rish-16"},"content":"done 45","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"rish-16"},"content":"bye","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"rish-16":8}}]

[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Duke project template","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"botr99"},"content":"3. After that, locate the `src/main/java/duke/Duke.java` file, right-click it, and choose `Run Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"botr99"},"content":"   ____________________________________________________________","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"botr99"},"content":"   Hello! I\u0027m Duke.","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"botr99"},"content":"   What can I do for you?","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"botr99"},"content":"   ____________________________________________________________","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"botr99":5,"-":22}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"botr99"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"botr99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"botr99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":17,"author":{"gitId":"botr99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":18,"author":{"gitId":"botr99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":19,"author":{"gitId":"botr99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":20,"author":{"gitId":"botr99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":21,"author":{"gitId":"botr99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":22,"author":{"gitId":"botr99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":23,"author":{"gitId":"botr99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":24,"author":{"gitId":"botr99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":25,"author":{"gitId":"botr99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":26,"author":{"gitId":"botr99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":27,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"botr99"},"content":"    mainClassName \u003d \"duke.Launcher\"","lastModifiedDate":"2021-09-07"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"run {","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":61,"author":{"gitId":"botr99"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2021-09-07"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"botr99":17,"-":45}},{"path":"src/main/java/duke/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"botr99"},"content":"package duke;","lastModifiedDate":"2021-09-02"},{"lineNumber":2,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"botr99"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"botr99"},"content":"import java.util.Collections;","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"botr99"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"botr99"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"botr99"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"botr99"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"botr99"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"botr99"},"content":"import javafx.scene.Node;","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"botr99"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-09-02"},{"lineNumber":13,"author":{"gitId":"botr99"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"botr99"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"botr99"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":17,"author":{"gitId":"botr99"},"content":"/**","lastModifiedDate":"2021-09-02"},{"lineNumber":18,"author":{"gitId":"botr99"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2021-09-02"},{"lineNumber":19,"author":{"gitId":"botr99"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2021-09-02"},{"lineNumber":20,"author":{"gitId":"botr99"},"content":" * containing text from the speaker.","lastModifiedDate":"2021-09-02"},{"lineNumber":21,"author":{"gitId":"botr99"},"content":" */","lastModifiedDate":"2021-09-02"},{"lineNumber":22,"author":{"gitId":"botr99"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2021-09-02"},{"lineNumber":23,"author":{"gitId":"botr99"},"content":"    @FXML","lastModifiedDate":"2021-09-02"},{"lineNumber":24,"author":{"gitId":"botr99"},"content":"    private Label dialog;","lastModifiedDate":"2021-09-02"},{"lineNumber":25,"author":{"gitId":"botr99"},"content":"    @FXML","lastModifiedDate":"2021-09-02"},{"lineNumber":26,"author":{"gitId":"botr99"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2021-09-02"},{"lineNumber":27,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":28,"author":{"gitId":"botr99"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2021-09-02"},{"lineNumber":29,"author":{"gitId":"botr99"},"content":"        try {","lastModifiedDate":"2021-09-02"},{"lineNumber":30,"author":{"gitId":"botr99"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2021-09-02"},{"lineNumber":31,"author":{"gitId":"botr99"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2021-09-02"},{"lineNumber":32,"author":{"gitId":"botr99"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2021-09-02"},{"lineNumber":33,"author":{"gitId":"botr99"},"content":"            fxmlLoader.load();","lastModifiedDate":"2021-09-02"},{"lineNumber":34,"author":{"gitId":"botr99"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-02"},{"lineNumber":35,"author":{"gitId":"botr99"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-09-02"},{"lineNumber":36,"author":{"gitId":"botr99"},"content":"        }","lastModifiedDate":"2021-09-02"},{"lineNumber":37,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":38,"author":{"gitId":"botr99"},"content":"        dialog.setText(text);","lastModifiedDate":"2021-09-02"},{"lineNumber":39,"author":{"gitId":"botr99"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2021-09-02"},{"lineNumber":40,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":41,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":42,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":43,"author":{"gitId":"botr99"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2021-09-02"},{"lineNumber":44,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":45,"author":{"gitId":"botr99"},"content":"    private void flip() {","lastModifiedDate":"2021-09-02"},{"lineNumber":46,"author":{"gitId":"botr99"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2021-09-02"},{"lineNumber":47,"author":{"gitId":"botr99"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2021-09-02"},{"lineNumber":48,"author":{"gitId":"botr99"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2021-09-02"},{"lineNumber":49,"author":{"gitId":"botr99"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2021-09-02"},{"lineNumber":50,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":51,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":52,"author":{"gitId":"botr99"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2021-09-02"},{"lineNumber":53,"author":{"gitId":"botr99"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2021-09-02"},{"lineNumber":54,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":55,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":56,"author":{"gitId":"botr99"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2021-09-02"},{"lineNumber":57,"author":{"gitId":"botr99"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2021-09-02"},{"lineNumber":58,"author":{"gitId":"botr99"},"content":"        db.flip();","lastModifiedDate":"2021-09-02"},{"lineNumber":59,"author":{"gitId":"botr99"},"content":"        return db;","lastModifiedDate":"2021-09-02"},{"lineNumber":60,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":61,"author":{"gitId":"botr99"},"content":"}","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"botr99":61}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"botr99"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"botr99"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":5,"author":{"gitId":"botr99"},"content":"import duke.exception.FileParseException;","lastModifiedDate":"2021-09-07"},{"lineNumber":6,"author":{"gitId":"botr99"},"content":"import duke.storage.TaskStorage;","lastModifiedDate":"2021-09-07"},{"lineNumber":7,"author":{"gitId":"botr99"},"content":"import duke.ui.Cli;","lastModifiedDate":"2021-09-07"},{"lineNumber":8,"author":{"gitId":"botr99"},"content":"import duke.ui.Gui;","lastModifiedDate":"2021-09-07"},{"lineNumber":9,"author":{"gitId":"botr99"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-07"},{"lineNumber":10,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":11,"author":{"gitId":"botr99"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"botr99"},"content":" * Represents the entry point of the Duke application.","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"botr99"},"content":" *","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"botr99"},"content":" * @author botr99","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"botr99"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":17,"author":{"gitId":"botr99"},"content":"    private static final String STORAGE_LOCATION \u003d \"data/duke.txt\";","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"botr99"},"content":"    private TaskList taskList;","lastModifiedDate":"2021-09-08"},{"lineNumber":19,"author":{"gitId":"botr99"},"content":"    private TaskStorage taskStorage;","lastModifiedDate":"2021-09-08"},{"lineNumber":20,"author":{"gitId":"botr99"},"content":"    private Ui ui;","lastModifiedDate":"2021-09-02"},{"lineNumber":21,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"botr99"},"content":"     * Constructs a Duke that reads in tasks from the user\u0027s hard disk.","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"botr99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"botr99"},"content":"     * @param fileLocation The string of the file path to access the tasks.","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"botr99"},"content":"     * @param isGui False if Duke is run with the command line; true otherwise.","lastModifiedDate":"2021-09-02"},{"lineNumber":27,"author":{"gitId":"botr99"},"content":"     * @throws IOException When an error occurs when reading or writing to the file.","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"botr99"},"content":"     * @throws FileParseException When the file is not of the right format.","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"botr99"},"content":"    public Duke(String fileLocation, boolean isGui) throws IOException, FileParseException {","lastModifiedDate":"2021-09-02"},{"lineNumber":31,"author":{"gitId":"botr99"},"content":"        taskStorage \u003d new TaskStorage(fileLocation);","lastModifiedDate":"2021-09-08"},{"lineNumber":32,"author":{"gitId":"botr99"},"content":"        taskList \u003d new TaskList(taskStorage.loadTasks());","lastModifiedDate":"2021-09-08"},{"lineNumber":33,"author":{"gitId":"botr99"},"content":"        ui \u003d isGui ? new Gui(taskStorage, taskList) : new Cli(taskStorage, taskList);","lastModifiedDate":"2021-09-07"},{"lineNumber":34,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":36,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"botr99"},"content":"     * Starts the Duke application.","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"botr99"},"content":"    public void run() {","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"botr99"},"content":"        ui.start();","lastModifiedDate":"2021-09-02"},{"lineNumber":41,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":42,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":43,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":44,"author":{"gitId":"botr99"},"content":"     * Gets the response from the ui of Duke.","lastModifiedDate":"2021-09-08"},{"lineNumber":45,"author":{"gitId":"botr99"},"content":"     *","lastModifiedDate":"2021-09-08"},{"lineNumber":46,"author":{"gitId":"botr99"},"content":"     * @param input The user input.","lastModifiedDate":"2021-09-08"},{"lineNumber":47,"author":{"gitId":"botr99"},"content":"     * @return A message from Duke.","lastModifiedDate":"2021-09-08"},{"lineNumber":48,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":49,"author":{"gitId":"botr99"},"content":"    public String getResponseFromUi(String input) {","lastModifiedDate":"2021-09-08"},{"lineNumber":50,"author":{"gitId":"botr99"},"content":"        return ui.getResponse(input);","lastModifiedDate":"2021-09-08"},{"lineNumber":51,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":52,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":53,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":54,"author":{"gitId":"botr99"},"content":"     * Attempts to start the Duke application by loading in the file","lastModifiedDate":"2021-09-01"},{"lineNumber":55,"author":{"gitId":"botr99"},"content":"     * located in the user\u0027s hard disk.","lastModifiedDate":"2021-09-01"},{"lineNumber":56,"author":{"gitId":"botr99"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":57,"author":{"gitId":"botr99"},"content":"     * @param args The command line arguments.","lastModifiedDate":"2021-09-01"},{"lineNumber":58,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":59,"author":{"gitId":"botr99"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-23"},{"lineNumber":60,"author":{"gitId":"botr99"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"botr99"},"content":"            new Duke(STORAGE_LOCATION, false).run();","lastModifiedDate":"2021-09-02"},{"lineNumber":62,"author":{"gitId":"botr99"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":63,"author":{"gitId":"botr99"},"content":"            System.out.println(\"Something went wrong with accessing \" + STORAGE_LOCATION);","lastModifiedDate":"2021-08-24"},{"lineNumber":64,"author":{"gitId":"botr99"},"content":"        } catch (FileParseException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"botr99"},"content":"            System.out.println(STORAGE_LOCATION + \" is not of the proper format. \"","lastModifiedDate":"2021-08-24"},{"lineNumber":66,"author":{"gitId":"botr99"},"content":"                    + \"Either modify it to the right format or delete the file.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":67,"author":{"gitId":"botr99"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"botr99":66,"-":3}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"botr99"},"content":"package duke;","lastModifiedDate":"2021-09-02"},{"lineNumber":2,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"botr99"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"botr99"},"content":"/**","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"botr99"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"botr99"},"content":" */","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"botr99"},"content":"public class Launcher {","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"botr99"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"botr99"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"botr99"},"content":"}","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"botr99":12}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"botr99"},"content":"package duke;","lastModifiedDate":"2021-09-02"},{"lineNumber":2,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"botr99"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"botr99"},"content":"import duke.exception.FileParseException;","lastModifiedDate":"2021-09-07"},{"lineNumber":6,"author":{"gitId":"botr99"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"botr99"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"botr99"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"botr99"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"botr99"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"botr99"},"content":"/**","lastModifiedDate":"2021-09-02"},{"lineNumber":13,"author":{"gitId":"botr99"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"botr99"},"content":" */","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"botr99"},"content":"public class Main extends Application {","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"botr99"},"content":"    private static final String STORAGE_LOCATION \u003d \"data/duke.txt\";","lastModifiedDate":"2021-09-02"},{"lineNumber":17,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":18,"author":{"gitId":"botr99"},"content":"    private Duke duke;","lastModifiedDate":"2021-09-02"},{"lineNumber":19,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":20,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":21,"author":{"gitId":"botr99"},"content":"     * Sets up Duke to be run as a GUI.","lastModifiedDate":"2021-09-02"},{"lineNumber":22,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":23,"author":{"gitId":"botr99"},"content":"    public Main() {","lastModifiedDate":"2021-09-02"},{"lineNumber":24,"author":{"gitId":"botr99"},"content":"        try {","lastModifiedDate":"2021-09-02"},{"lineNumber":25,"author":{"gitId":"botr99"},"content":"            duke \u003d new Duke(STORAGE_LOCATION, true);","lastModifiedDate":"2021-09-02"},{"lineNumber":26,"author":{"gitId":"botr99"},"content":"            duke.run();","lastModifiedDate":"2021-09-02"},{"lineNumber":27,"author":{"gitId":"botr99"},"content":"        } catch (IOException | FileParseException e) {","lastModifiedDate":"2021-09-02"},{"lineNumber":28,"author":{"gitId":"botr99"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-09-02"},{"lineNumber":29,"author":{"gitId":"botr99"},"content":"        }","lastModifiedDate":"2021-09-02"},{"lineNumber":30,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":31,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":32,"author":{"gitId":"botr99"},"content":"    @Override","lastModifiedDate":"2021-09-02"},{"lineNumber":33,"author":{"gitId":"botr99"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2021-09-02"},{"lineNumber":34,"author":{"gitId":"botr99"},"content":"        try {","lastModifiedDate":"2021-09-02"},{"lineNumber":35,"author":{"gitId":"botr99"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2021-09-02"},{"lineNumber":36,"author":{"gitId":"botr99"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2021-09-02"},{"lineNumber":37,"author":{"gitId":"botr99"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2021-09-02"},{"lineNumber":38,"author":{"gitId":"botr99"},"content":"            stage.setScene(scene);","lastModifiedDate":"2021-09-02"},{"lineNumber":39,"author":{"gitId":"botr99"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2021-09-02"},{"lineNumber":40,"author":{"gitId":"botr99"},"content":"            stage.show();","lastModifiedDate":"2021-09-02"},{"lineNumber":41,"author":{"gitId":"botr99"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-02"},{"lineNumber":42,"author":{"gitId":"botr99"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-09-02"},{"lineNumber":43,"author":{"gitId":"botr99"},"content":"        }","lastModifiedDate":"2021-09-02"},{"lineNumber":44,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":45,"author":{"gitId":"botr99"},"content":"}","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"botr99":45}},{"path":"src/main/java/duke/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"botr99"},"content":"package duke;","lastModifiedDate":"2021-09-02"},{"lineNumber":2,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"botr99"},"content":"import javafx.application.Platform;","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"botr99"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"botr99"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"botr99"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"botr99"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"botr99"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"botr99"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"botr99"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"botr99"},"content":"/**","lastModifiedDate":"2021-09-02"},{"lineNumber":13,"author":{"gitId":"botr99"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"botr99"},"content":" */","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"botr99"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"botr99"},"content":"    @FXML","lastModifiedDate":"2021-09-02"},{"lineNumber":17,"author":{"gitId":"botr99"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2021-09-02"},{"lineNumber":18,"author":{"gitId":"botr99"},"content":"    @FXML","lastModifiedDate":"2021-09-02"},{"lineNumber":19,"author":{"gitId":"botr99"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2021-09-02"},{"lineNumber":20,"author":{"gitId":"botr99"},"content":"    @FXML","lastModifiedDate":"2021-09-02"},{"lineNumber":21,"author":{"gitId":"botr99"},"content":"    private TextField userInput;","lastModifiedDate":"2021-09-02"},{"lineNumber":22,"author":{"gitId":"botr99"},"content":"    @FXML","lastModifiedDate":"2021-09-02"},{"lineNumber":23,"author":{"gitId":"botr99"},"content":"    private Button sendButton;","lastModifiedDate":"2021-09-02"},{"lineNumber":24,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":25,"author":{"gitId":"botr99"},"content":"    private Duke duke;","lastModifiedDate":"2021-09-02"},{"lineNumber":26,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":27,"author":{"gitId":"botr99"},"content":"    private Image userImage \u003d new Image(getClass().getResourceAsStream(\"/images/DaUser.png\"));","lastModifiedDate":"2021-09-02"},{"lineNumber":28,"author":{"gitId":"botr99"},"content":"    private Image dukeImage \u003d new Image(getClass().getResourceAsStream(\"/images/DaDuke.png\"));","lastModifiedDate":"2021-09-02"},{"lineNumber":29,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":30,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":31,"author":{"gitId":"botr99"},"content":"     * Initializes the MainWindow constructed.","lastModifiedDate":"2021-09-02"},{"lineNumber":32,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":33,"author":{"gitId":"botr99"},"content":"    @FXML","lastModifiedDate":"2021-09-02"},{"lineNumber":34,"author":{"gitId":"botr99"},"content":"    public void initialize() {","lastModifiedDate":"2021-09-02"},{"lineNumber":35,"author":{"gitId":"botr99"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2021-09-02"},{"lineNumber":36,"author":{"gitId":"botr99"},"content":"        displayWelcomeMessage();","lastModifiedDate":"2021-09-02"},{"lineNumber":37,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":38,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":39,"author":{"gitId":"botr99"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2021-09-02"},{"lineNumber":40,"author":{"gitId":"botr99"},"content":"        duke \u003d d;","lastModifiedDate":"2021-09-02"},{"lineNumber":41,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":42,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":43,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":44,"author":{"gitId":"botr99"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply","lastModifiedDate":"2021-09-02"},{"lineNumber":45,"author":{"gitId":"botr99"},"content":"     * and then appends them to the dialog container. Clears the user input after processing.","lastModifiedDate":"2021-09-02"},{"lineNumber":46,"author":{"gitId":"botr99"},"content":"     * Exits the application when Duke responds with an exit message.","lastModifiedDate":"2021-09-02"},{"lineNumber":47,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":48,"author":{"gitId":"botr99"},"content":"    @FXML","lastModifiedDate":"2021-09-02"},{"lineNumber":49,"author":{"gitId":"botr99"},"content":"    private void handleUserInput() {","lastModifiedDate":"2021-09-02"},{"lineNumber":50,"author":{"gitId":"botr99"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2021-09-02"},{"lineNumber":51,"author":{"gitId":"botr99"},"content":"        String response \u003d duke.getResponseFromUi(input);","lastModifiedDate":"2021-09-08"},{"lineNumber":52,"author":{"gitId":"botr99"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2021-09-02"},{"lineNumber":53,"author":{"gitId":"botr99"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2021-09-02"},{"lineNumber":54,"author":{"gitId":"botr99"},"content":"                DialogBox.getDukeDialog(response, dukeImage));","lastModifiedDate":"2021-09-02"},{"lineNumber":55,"author":{"gitId":"botr99"},"content":"        userInput.clear();","lastModifiedDate":"2021-09-02"},{"lineNumber":56,"author":{"gitId":"botr99"},"content":"        if (response.equals(Message.getExitMessage())) {","lastModifiedDate":"2021-09-02"},{"lineNumber":57,"author":{"gitId":"botr99"},"content":"            Platform.exit();","lastModifiedDate":"2021-09-02"},{"lineNumber":58,"author":{"gitId":"botr99"},"content":"        }","lastModifiedDate":"2021-09-02"},{"lineNumber":59,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":60,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":61,"author":{"gitId":"botr99"},"content":"    private void displayWelcomeMessage() {","lastModifiedDate":"2021-09-02"},{"lineNumber":62,"author":{"gitId":"botr99"},"content":"        String message \u003d Message.getWelcomeMessage();","lastModifiedDate":"2021-09-02"},{"lineNumber":63,"author":{"gitId":"botr99"},"content":"        dialogContainer.getChildren().add(","lastModifiedDate":"2021-09-02"},{"lineNumber":64,"author":{"gitId":"botr99"},"content":"                DialogBox.getDukeDialog(message, dukeImage));","lastModifiedDate":"2021-09-02"},{"lineNumber":65,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":66,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":67,"author":{"gitId":"botr99"},"content":"}","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"botr99":67}},{"path":"src/main/java/duke/Message.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"botr99"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"botr99"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-09-07"},{"lineNumber":4,"author":{"gitId":"botr99"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"botr99"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"botr99"},"content":" * Represents messages made by Duke","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"botr99"},"content":" * in response to various user inputs.","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"botr99"},"content":" *","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"botr99"},"content":" * @author botr99","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"botr99"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"botr99"},"content":"public class Message {","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"botr99"},"content":"    private static final String WELCOME_MESSAGE \u003d \"Hello! I\u0027m Duke.\\n\" + \"What can I do for you?\";","lastModifiedDate":"2021-09-08"},{"lineNumber":14,"author":{"gitId":"botr99"},"content":"    private static final String EXIT_MESSAGE \u003d \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2021-09-08"},{"lineNumber":15,"author":{"gitId":"botr99"},"content":"    private static final String INVALID_COMMAND_MESSAGE \u003d","lastModifiedDate":"2021-09-08"},{"lineNumber":16,"author":{"gitId":"botr99"},"content":"            \"Oops!!! I\u0027m sorry, but I don\u0027t know what that means.\";","lastModifiedDate":"2021-09-08"},{"lineNumber":17,"author":{"gitId":"botr99"},"content":"    private static final String TRY_AGAIN_MESSAGE \u003d \"Please try again or restart the application.\";","lastModifiedDate":"2021-09-08"},{"lineNumber":18,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"botr99"},"content":"     * Gets the welcome message when Duke is started,","lastModifiedDate":"2021-09-02"},{"lineNumber":21,"author":{"gitId":"botr99"},"content":"     * just before user inputs his/her first command.","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"botr99"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":23,"author":{"gitId":"botr99"},"content":"     * @return A string containing the message.","lastModifiedDate":"2021-09-02"},{"lineNumber":24,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"botr99"},"content":"    public static String getWelcomeMessage() {","lastModifiedDate":"2021-09-02"},{"lineNumber":26,"author":{"gitId":"botr99"},"content":"        return WELCOME_MESSAGE;","lastModifiedDate":"2021-09-08"},{"lineNumber":27,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"botr99"},"content":"     * Gets the exit message when user inputs \"bye\".","lastModifiedDate":"2021-09-02"},{"lineNumber":31,"author":{"gitId":"botr99"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":32,"author":{"gitId":"botr99"},"content":"     * @return A string containing the message.","lastModifiedDate":"2021-09-02"},{"lineNumber":33,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"botr99"},"content":"    public static String getExitMessage() {","lastModifiedDate":"2021-09-02"},{"lineNumber":35,"author":{"gitId":"botr99"},"content":"        return EXIT_MESSAGE;","lastModifiedDate":"2021-09-08"},{"lineNumber":36,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":37,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":38,"author":{"gitId":"botr99"},"content":"    private static String getTaskCountMessage(int taskCount) {","lastModifiedDate":"2021-09-08"},{"lineNumber":39,"author":{"gitId":"botr99"},"content":"        return \"Now you have \" + taskCount","lastModifiedDate":"2021-09-08"},{"lineNumber":40,"author":{"gitId":"botr99"},"content":"                + (taskCount \u003d\u003d 1 ? \" task \" : \" tasks \") + \"in the list.\";","lastModifiedDate":"2021-09-08"},{"lineNumber":41,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"botr99"},"content":"     * Gets the task that was added and the updated number of tasks in the task list.","lastModifiedDate":"2021-09-02"},{"lineNumber":45,"author":{"gitId":"botr99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"botr99"},"content":"     * @param task The task that was added.","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"botr99"},"content":"     * @param taskCount The updated number of tasks in the task list.","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"botr99"},"content":"     * @return A string containing the message.","lastModifiedDate":"2021-09-02"},{"lineNumber":49,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"botr99"},"content":"    public static String getAddTaskMessage(Task task, int taskCount) {","lastModifiedDate":"2021-09-02"},{"lineNumber":51,"author":{"gitId":"botr99"},"content":"        return \"Got it. I\u0027ve added this task:\\n\" + task","lastModifiedDate":"2021-09-02"},{"lineNumber":52,"author":{"gitId":"botr99"},"content":"                + \"\\n\" + getTaskCountMessage(taskCount);","lastModifiedDate":"2021-09-08"},{"lineNumber":53,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":56,"author":{"gitId":"botr99"},"content":"     * Gets the user\u0027s task list.","lastModifiedDate":"2021-09-02"},{"lineNumber":57,"author":{"gitId":"botr99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"botr99"},"content":"     * @param taskList The user\u0027s task list.","lastModifiedDate":"2021-09-07"},{"lineNumber":59,"author":{"gitId":"botr99"},"content":"     * @return A string containing the message.","lastModifiedDate":"2021-09-02"},{"lineNumber":60,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"botr99"},"content":"    public static String getTaskListMessage(TaskList taskList) {","lastModifiedDate":"2021-09-07"},{"lineNumber":62,"author":{"gitId":"botr99"},"content":"        return \"Here are the tasks in your list:\\n\"","lastModifiedDate":"2021-09-02"},{"lineNumber":63,"author":{"gitId":"botr99"},"content":"                + taskList;","lastModifiedDate":"2021-09-09"},{"lineNumber":64,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":66,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":67,"author":{"gitId":"botr99"},"content":"     * Gets the task that was marked as done.","lastModifiedDate":"2021-09-02"},{"lineNumber":68,"author":{"gitId":"botr99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":69,"author":{"gitId":"botr99"},"content":"     * @param task The task that was marked as done.","lastModifiedDate":"2021-08-26"},{"lineNumber":70,"author":{"gitId":"botr99"},"content":"     * @return A string containing the message.","lastModifiedDate":"2021-09-02"},{"lineNumber":71,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":72,"author":{"gitId":"botr99"},"content":"    public static String getMarkTaskAsDoneMessage(Task task) {","lastModifiedDate":"2021-09-07"},{"lineNumber":73,"author":{"gitId":"botr99"},"content":"        return \"Nice! I\u0027ve marked this task as done:\\n\" + task;","lastModifiedDate":"2021-09-02"},{"lineNumber":74,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":75,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":76,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":77,"author":{"gitId":"botr99"},"content":"     * Gets the task that was deleted and the updated number of tasks in the task list.","lastModifiedDate":"2021-09-02"},{"lineNumber":78,"author":{"gitId":"botr99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":79,"author":{"gitId":"botr99"},"content":"     * @param task The task that was deleted.","lastModifiedDate":"2021-08-26"},{"lineNumber":80,"author":{"gitId":"botr99"},"content":"     * @param taskCount The updated number of tasks in the task list.","lastModifiedDate":"2021-08-26"},{"lineNumber":81,"author":{"gitId":"botr99"},"content":"     * @return A string containing the message.","lastModifiedDate":"2021-09-02"},{"lineNumber":82,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":83,"author":{"gitId":"botr99"},"content":"    public static String getDeleteTaskMessage(Task task, int taskCount) {","lastModifiedDate":"2021-09-02"},{"lineNumber":84,"author":{"gitId":"botr99"},"content":"        return \"Noted. I\u0027ve removed this task:\\n\" + task","lastModifiedDate":"2021-09-02"},{"lineNumber":85,"author":{"gitId":"botr99"},"content":"                + \"\\n\" + getTaskCountMessage(taskCount);","lastModifiedDate":"2021-09-08"},{"lineNumber":86,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":87,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":88,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":89,"author":{"gitId":"botr99"},"content":"     * Gets the matching tasks in the user\u0027s list after the user has made a query","lastModifiedDate":"2021-09-02"},{"lineNumber":90,"author":{"gitId":"botr99"},"content":"     * to find tasks.","lastModifiedDate":"2021-08-26"},{"lineNumber":91,"author":{"gitId":"botr99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":92,"author":{"gitId":"botr99"},"content":"     * @param filteredTaskList Task list consisting of tasks that have been filtered out.","lastModifiedDate":"2021-09-07"},{"lineNumber":93,"author":{"gitId":"botr99"},"content":"     * @return A string containing the message.","lastModifiedDate":"2021-09-02"},{"lineNumber":94,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":95,"author":{"gitId":"botr99"},"content":"    public static String getFilteredTaskListMessage(TaskList filteredTaskList) {","lastModifiedDate":"2021-09-07"},{"lineNumber":96,"author":{"gitId":"botr99"},"content":"        return \"Here are the matching tasks in your list:\\n\"","lastModifiedDate":"2021-09-02"},{"lineNumber":97,"author":{"gitId":"botr99"},"content":"                + filteredTaskList;","lastModifiedDate":"2021-09-09"},{"lineNumber":98,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-09-09"},{"lineNumber":99,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":100,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":101,"author":{"gitId":"botr99"},"content":"     * Gets the upcoming tasks in the user\u0027s list to be done.","lastModifiedDate":"2021-09-09"},{"lineNumber":102,"author":{"gitId":"botr99"},"content":"     *","lastModifiedDate":"2021-09-09"},{"lineNumber":103,"author":{"gitId":"botr99"},"content":"     * @param upcomingTaskList Task List consisting of upcoming tasks.","lastModifiedDate":"2021-09-09"},{"lineNumber":104,"author":{"gitId":"botr99"},"content":"     * @return A string containing the message.","lastModifiedDate":"2021-09-09"},{"lineNumber":105,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":106,"author":{"gitId":"botr99"},"content":"    public static String getUpcomingTaskListMessage(TaskList upcomingTaskList) {","lastModifiedDate":"2021-09-09"},{"lineNumber":107,"author":{"gitId":"botr99"},"content":"        return \"Here are the tasks to be done before they are due:\\n\"","lastModifiedDate":"2021-09-09"},{"lineNumber":108,"author":{"gitId":"botr99"},"content":"                + upcomingTaskList;","lastModifiedDate":"2021-09-09"},{"lineNumber":109,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":110,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":111,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":112,"author":{"gitId":"botr99"},"content":"     * Gets an invalid command message when the user inputs an invalid command.","lastModifiedDate":"2021-09-02"},{"lineNumber":113,"author":{"gitId":"botr99"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":114,"author":{"gitId":"botr99"},"content":"     * @return A string containing the message.","lastModifiedDate":"2021-09-02"},{"lineNumber":115,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":116,"author":{"gitId":"botr99"},"content":"    public static String getInvalidCommandMessage() {","lastModifiedDate":"2021-09-02"},{"lineNumber":117,"author":{"gitId":"botr99"},"content":"        return INVALID_COMMAND_MESSAGE;","lastModifiedDate":"2021-09-08"},{"lineNumber":118,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":119,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":120,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":121,"author":{"gitId":"botr99"},"content":"     * Gets the message of the DukeException.","lastModifiedDate":"2021-09-02"},{"lineNumber":122,"author":{"gitId":"botr99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":123,"author":{"gitId":"botr99"},"content":"     * @param e The DukeException thrown when Duke is being run.","lastModifiedDate":"2021-08-26"},{"lineNumber":124,"author":{"gitId":"botr99"},"content":"     * @return A string containing the message.","lastModifiedDate":"2021-09-02"},{"lineNumber":125,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":126,"author":{"gitId":"botr99"},"content":"    public static String getDukeExceptionMessage(DukeException e) {","lastModifiedDate":"2021-09-02"},{"lineNumber":127,"author":{"gitId":"botr99"},"content":"        return e.getMessage();","lastModifiedDate":"2021-09-02"},{"lineNumber":128,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":129,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":130,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":131,"author":{"gitId":"botr99"},"content":"     * Gets the try again message when there is an IOException thrown.","lastModifiedDate":"2021-09-02"},{"lineNumber":132,"author":{"gitId":"botr99"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":133,"author":{"gitId":"botr99"},"content":"     * @return A string containing the message.","lastModifiedDate":"2021-09-02"},{"lineNumber":134,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":135,"author":{"gitId":"botr99"},"content":"    public static String getTryAgainMessage() {","lastModifiedDate":"2021-09-02"},{"lineNumber":136,"author":{"gitId":"botr99"},"content":"        return TRY_AGAIN_MESSAGE;","lastModifiedDate":"2021-09-08"},{"lineNumber":137,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":138,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":139,"author":{"gitId":"botr99"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"botr99":139}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"botr99"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"botr99"},"content":"import duke.command.AddTaskCommand;","lastModifiedDate":"2021-09-08"},{"lineNumber":4,"author":{"gitId":"botr99"},"content":"import duke.command.ByeCommand;","lastModifiedDate":"2021-09-08"},{"lineNumber":5,"author":{"gitId":"botr99"},"content":"import duke.command.Command;","lastModifiedDate":"2021-09-08"},{"lineNumber":6,"author":{"gitId":"botr99"},"content":"import duke.command.DeleteTaskCommand;","lastModifiedDate":"2021-09-08"},{"lineNumber":7,"author":{"gitId":"botr99"},"content":"import duke.command.FindTasksCommand;","lastModifiedDate":"2021-09-08"},{"lineNumber":8,"author":{"gitId":"botr99"},"content":"import duke.command.InvalidCommand;","lastModifiedDate":"2021-09-08"},{"lineNumber":9,"author":{"gitId":"botr99"},"content":"import duke.command.ListTasksCommand;","lastModifiedDate":"2021-09-08"},{"lineNumber":10,"author":{"gitId":"botr99"},"content":"import duke.command.MarkTaskAsDoneCommand;","lastModifiedDate":"2021-09-08"},{"lineNumber":11,"author":{"gitId":"botr99"},"content":"import duke.command.RemindCommand;","lastModifiedDate":"2021-09-09"},{"lineNumber":12,"author":{"gitId":"botr99"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-09-07"},{"lineNumber":13,"author":{"gitId":"botr99"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"botr99"},"content":"import duke.task.Event;","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"botr99"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"botr99"},"content":"import duke.task.Todo;","lastModifiedDate":"2021-09-08"},{"lineNumber":17,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"botr99"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"botr99"},"content":" * Represents a class that deals with making sense of the user command.","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"botr99"},"content":" *","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"botr99"},"content":" * @author botr99","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"botr99"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"botr99"},"content":"public class Parser {","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":25,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":26,"author":{"gitId":"botr99"},"content":"     * Parses a given string to an integer.","lastModifiedDate":"2021-09-09"},{"lineNumber":27,"author":{"gitId":"botr99"},"content":"     *","lastModifiedDate":"2021-09-09"},{"lineNumber":28,"author":{"gitId":"botr99"},"content":"     * @param integerString The string to be parsed.","lastModifiedDate":"2021-09-09"},{"lineNumber":29,"author":{"gitId":"botr99"},"content":"     * @return An integer parsed from the string.","lastModifiedDate":"2021-09-09"},{"lineNumber":30,"author":{"gitId":"botr99"},"content":"     * @throws DukeException When the string to be parsed does not consist of an integer.","lastModifiedDate":"2021-09-09"},{"lineNumber":31,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":32,"author":{"gitId":"botr99"},"content":"    public static int parseToInt(String integerString) throws DukeException {","lastModifiedDate":"2021-09-09"},{"lineNumber":33,"author":{"gitId":"botr99"},"content":"        try {","lastModifiedDate":"2021-09-09"},{"lineNumber":34,"author":{"gitId":"botr99"},"content":"            return Integer.parseInt(integerString);","lastModifiedDate":"2021-09-09"},{"lineNumber":35,"author":{"gitId":"botr99"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-09-09"},{"lineNumber":36,"author":{"gitId":"botr99"},"content":"            throw new DukeException(\"Oops!!! The command should be followed by an integer.\");","lastModifiedDate":"2021-09-09"},{"lineNumber":37,"author":{"gitId":"botr99"},"content":"        }","lastModifiedDate":"2021-09-09"},{"lineNumber":38,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-09-09"},{"lineNumber":39,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":40,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":41,"author":{"gitId":"botr99"},"content":"     * Parses the user input of a task creation and returns the task","lastModifiedDate":"2021-09-08"},{"lineNumber":42,"author":{"gitId":"botr99"},"content":"     * corresponding to the user input.","lastModifiedDate":"2021-09-08"},{"lineNumber":43,"author":{"gitId":"botr99"},"content":"     *","lastModifiedDate":"2021-09-08"},{"lineNumber":44,"author":{"gitId":"botr99"},"content":"     * @param description The user input.","lastModifiedDate":"2021-09-08"},{"lineNumber":45,"author":{"gitId":"botr99"},"content":"     * @return The task created from the user input.","lastModifiedDate":"2021-09-08"},{"lineNumber":46,"author":{"gitId":"botr99"},"content":"     * @throws DukeException When the description is null or missing.","lastModifiedDate":"2021-09-08"},{"lineNumber":47,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":48,"author":{"gitId":"botr99"},"content":"    public static Task parseTask(String description) throws DukeException {","lastModifiedDate":"2021-09-08"},{"lineNumber":49,"author":{"gitId":"botr99"},"content":"        if (description \u003d\u003d null || description.equals(\"\")) {","lastModifiedDate":"2021-09-08"},{"lineNumber":50,"author":{"gitId":"botr99"},"content":"            throw new DukeException(\"Oops!!! The description of a todo cannot be empty.\");","lastModifiedDate":"2021-09-08"},{"lineNumber":51,"author":{"gitId":"botr99"},"content":"        }","lastModifiedDate":"2021-09-08"},{"lineNumber":52,"author":{"gitId":"botr99"},"content":"        return new Todo(description);","lastModifiedDate":"2021-09-08"},{"lineNumber":53,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":54,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":55,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":56,"author":{"gitId":"botr99"},"content":"     * Parses the user input of a date task creation and returns the date task","lastModifiedDate":"2021-08-26"},{"lineNumber":57,"author":{"gitId":"botr99"},"content":"     * corresponding to the user input.","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"botr99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"botr99"},"content":"     * @param descriptionAndDate The user input.","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"botr99"},"content":"     * @param command The type of date task to be created.","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"botr99"},"content":"     * @return Null if the command is not an appropriate date task type;","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"botr99"},"content":"     *         the new date task created otherwise;","lastModifiedDate":"2021-08-26"},{"lineNumber":63,"author":{"gitId":"botr99"},"content":"     * @throws DukeException When the description and date string cannot be split in 2;","lastModifiedDate":"2021-08-26"},{"lineNumber":64,"author":{"gitId":"botr99"},"content":"     *                       when the date task cannot be constructed due to invalid date string.","lastModifiedDate":"2021-08-26"},{"lineNumber":65,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":66,"author":{"gitId":"botr99"},"content":"    public static Task parseDateTask(String descriptionAndDate, String command) throws DukeException {","lastModifiedDate":"2021-08-24"},{"lineNumber":67,"author":{"gitId":"botr99"},"content":"        String[] splitDescriptionAndDate;","lastModifiedDate":"2021-08-24"},{"lineNumber":68,"author":{"gitId":"botr99"},"content":"        Task task \u003d null;","lastModifiedDate":"2021-08-24"},{"lineNumber":69,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":70,"author":{"gitId":"botr99"},"content":"        try {","lastModifiedDate":"2021-08-23"},{"lineNumber":71,"author":{"gitId":"botr99"},"content":"            if (command.equals(\"deadline\")) {","lastModifiedDate":"2021-08-24"},{"lineNumber":72,"author":{"gitId":"botr99"},"content":"                splitDescriptionAndDate \u003d descriptionAndDate.split(\" /by \");","lastModifiedDate":"2021-08-24"},{"lineNumber":73,"author":{"gitId":"botr99"},"content":"                task \u003d new Deadline(splitDescriptionAndDate[0].trim(), splitDescriptionAndDate[1].trim());","lastModifiedDate":"2021-08-24"},{"lineNumber":74,"author":{"gitId":"botr99"},"content":"            } else if (command.equals(\"event\")) {","lastModifiedDate":"2021-08-24"},{"lineNumber":75,"author":{"gitId":"botr99"},"content":"                splitDescriptionAndDate \u003d descriptionAndDate.split(\" /at \");","lastModifiedDate":"2021-08-24"},{"lineNumber":76,"author":{"gitId":"botr99"},"content":"                task \u003d new Event(splitDescriptionAndDate[0].trim(), splitDescriptionAndDate[1].trim());","lastModifiedDate":"2021-08-24"},{"lineNumber":77,"author":{"gitId":"botr99"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":78,"author":{"gitId":"botr99"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":79,"author":{"gitId":"botr99"},"content":"            throw new DukeException(\"Oops!!! Deadlines or events should contain a description, followed by \"","lastModifiedDate":"2021-09-01"},{"lineNumber":80,"author":{"gitId":"botr99"},"content":"                    + \"a /by or /at respectively, followed by a date.\");","lastModifiedDate":"2021-09-01"},{"lineNumber":81,"author":{"gitId":"botr99"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":82,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":83,"author":{"gitId":"botr99"},"content":"        if (task \u003d\u003d null) {","lastModifiedDate":"2021-09-08"},{"lineNumber":84,"author":{"gitId":"botr99"},"content":"            throw new DukeException(\"Invalid command to create a deadline or event.\");","lastModifiedDate":"2021-09-08"},{"lineNumber":85,"author":{"gitId":"botr99"},"content":"        }","lastModifiedDate":"2021-09-08"},{"lineNumber":86,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":87,"author":{"gitId":"botr99"},"content":"        return task;","lastModifiedDate":"2021-08-24"},{"lineNumber":88,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":89,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":90,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":91,"author":{"gitId":"botr99"},"content":"     * Parses the user input.","lastModifiedDate":"2021-09-08"},{"lineNumber":92,"author":{"gitId":"botr99"},"content":"     *","lastModifiedDate":"2021-09-08"},{"lineNumber":93,"author":{"gitId":"botr99"},"content":"     * @param userInput A string the user has inputted.","lastModifiedDate":"2021-09-08"},{"lineNumber":94,"author":{"gitId":"botr99"},"content":"     * @return A Command corresponding to the user input.","lastModifiedDate":"2021-09-08"},{"lineNumber":95,"author":{"gitId":"botr99"},"content":"     * @throws DukeException When an exception occurs when parsing tasks.","lastModifiedDate":"2021-09-08"},{"lineNumber":96,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":97,"author":{"gitId":"botr99"},"content":"    public static Command parseUserInput(String userInput) throws DukeException {","lastModifiedDate":"2021-09-08"},{"lineNumber":98,"author":{"gitId":"botr99"},"content":"        String[] userInputSplit \u003d userInput.trim().split(\" \", 2);","lastModifiedDate":"2021-09-08"},{"lineNumber":99,"author":{"gitId":"botr99"},"content":"        String commandString \u003d userInputSplit[0];","lastModifiedDate":"2021-09-08"},{"lineNumber":100,"author":{"gitId":"botr99"},"content":"        String action \u003d userInputSplit.length \u003d\u003d 2 ? userInputSplit[1].trim() : \"\";","lastModifiedDate":"2021-09-08"},{"lineNumber":101,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":102,"author":{"gitId":"botr99"},"content":"        switch (commandString) {","lastModifiedDate":"2021-09-08"},{"lineNumber":103,"author":{"gitId":"botr99"},"content":"        case \"bye\":","lastModifiedDate":"2021-09-08"},{"lineNumber":104,"author":{"gitId":"botr99"},"content":"            return new ByeCommand();","lastModifiedDate":"2021-09-08"},{"lineNumber":105,"author":{"gitId":"botr99"},"content":"        case \"list\":","lastModifiedDate":"2021-09-08"},{"lineNumber":106,"author":{"gitId":"botr99"},"content":"            return new ListTasksCommand();","lastModifiedDate":"2021-09-08"},{"lineNumber":107,"author":{"gitId":"botr99"},"content":"        case \"done\":","lastModifiedDate":"2021-09-08"},{"lineNumber":108,"author":{"gitId":"botr99"},"content":"            return new MarkTaskAsDoneCommand(action);","lastModifiedDate":"2021-09-08"},{"lineNumber":109,"author":{"gitId":"botr99"},"content":"        case \"delete\":","lastModifiedDate":"2021-09-08"},{"lineNumber":110,"author":{"gitId":"botr99"},"content":"            return new DeleteTaskCommand(action);","lastModifiedDate":"2021-09-08"},{"lineNumber":111,"author":{"gitId":"botr99"},"content":"        case \"todo\":","lastModifiedDate":"2021-09-08"},{"lineNumber":112,"author":{"gitId":"botr99"},"content":"            Task task \u003d parseTask(action);","lastModifiedDate":"2021-09-08"},{"lineNumber":113,"author":{"gitId":"botr99"},"content":"            return new AddTaskCommand(task);","lastModifiedDate":"2021-09-08"},{"lineNumber":114,"author":{"gitId":"botr99"},"content":"        case \"deadline\":","lastModifiedDate":"2021-09-08"},{"lineNumber":115,"author":{"gitId":"botr99"},"content":"        case \"event\":","lastModifiedDate":"2021-09-08"},{"lineNumber":116,"author":{"gitId":"botr99"},"content":"            Task dateTask \u003d parseDateTask(action, commandString);","lastModifiedDate":"2021-09-08"},{"lineNumber":117,"author":{"gitId":"botr99"},"content":"            return new AddTaskCommand(dateTask);","lastModifiedDate":"2021-09-08"},{"lineNumber":118,"author":{"gitId":"botr99"},"content":"        case \"find\":","lastModifiedDate":"2021-09-08"},{"lineNumber":119,"author":{"gitId":"botr99"},"content":"            return new FindTasksCommand(action);","lastModifiedDate":"2021-09-08"},{"lineNumber":120,"author":{"gitId":"botr99"},"content":"        case \"remind\":","lastModifiedDate":"2021-09-09"},{"lineNumber":121,"author":{"gitId":"botr99"},"content":"            int numberOfDays \u003d parseToInt(action);","lastModifiedDate":"2021-09-09"},{"lineNumber":122,"author":{"gitId":"botr99"},"content":"            return new RemindCommand(numberOfDays);","lastModifiedDate":"2021-09-09"},{"lineNumber":123,"author":{"gitId":"botr99"},"content":"        default:","lastModifiedDate":"2021-09-08"},{"lineNumber":124,"author":{"gitId":"botr99"},"content":"            return new InvalidCommand();","lastModifiedDate":"2021-09-08"},{"lineNumber":125,"author":{"gitId":"botr99"},"content":"        }","lastModifiedDate":"2021-09-08"},{"lineNumber":126,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":127,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":128,"author":{"gitId":"botr99"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"botr99":128}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"botr99"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"botr99"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-09"},{"lineNumber":4,"author":{"gitId":"botr99"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"botr99"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-09-09"},{"lineNumber":6,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"botr99"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-09-09"},{"lineNumber":8,"author":{"gitId":"botr99"},"content":"import duke.task.DateTask;","lastModifiedDate":"2021-09-09"},{"lineNumber":9,"author":{"gitId":"botr99"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"botr99"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"botr99"},"content":" * Represents a list of tasks.","lastModifiedDate":"2021-08-27"},{"lineNumber":13,"author":{"gitId":"botr99"},"content":" *","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"botr99"},"content":" * @author botr99","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"botr99"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"botr99"},"content":"public class TaskList {","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"botr99"},"content":"    private ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"botr99"},"content":"     * Constructs a TaskList that contains no tasks.","lastModifiedDate":"2021-08-27"},{"lineNumber":21,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"botr99"},"content":"    public TaskList() {","lastModifiedDate":"2021-08-27"},{"lineNumber":23,"author":{"gitId":"botr99"},"content":"        tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-27"},{"lineNumber":24,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-08-27"},{"lineNumber":27,"author":{"gitId":"botr99"},"content":"     * Constructs a TaskList that contain the tasks","lastModifiedDate":"2021-08-27"},{"lineNumber":28,"author":{"gitId":"botr99"},"content":"     * in the specified ArrayList of tasks.","lastModifiedDate":"2021-08-27"},{"lineNumber":29,"author":{"gitId":"botr99"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":30,"author":{"gitId":"botr99"},"content":"     * @param tasks The tasks to be contained in","lastModifiedDate":"2021-08-27"},{"lineNumber":31,"author":{"gitId":"botr99"},"content":"     *              the TaskList.","lastModifiedDate":"2021-08-27"},{"lineNumber":32,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-08-27"},{"lineNumber":33,"author":{"gitId":"botr99"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2021-08-27"},{"lineNumber":34,"author":{"gitId":"botr99"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2021-08-27"},{"lineNumber":35,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"botr99"},"content":"     * Adds a task to the task list.","lastModifiedDate":"2021-08-27"},{"lineNumber":39,"author":{"gitId":"botr99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"botr99"},"content":"     * @param task The task to be added.","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"botr99"},"content":"     * @return The added task.","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"botr99"},"content":"    public Task addTask(Task task) {","lastModifiedDate":"2021-08-27"},{"lineNumber":44,"author":{"gitId":"botr99"},"content":"        tasks.add(task);","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"botr99"},"content":"        return task;","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"botr99"},"content":"     * Marks the nth task in the task list","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"botr99"},"content":"     * to be done, whereby n represents the task number;","lastModifiedDate":"2021-08-26"},{"lineNumber":51,"author":{"gitId":"botr99"},"content":"     * and updates the storage.","lastModifiedDate":"2021-08-26"},{"lineNumber":52,"author":{"gitId":"botr99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":53,"author":{"gitId":"botr99"},"content":"     * @param taskNumber The number n to access the nth task in the task list.","lastModifiedDate":"2021-08-26"},{"lineNumber":54,"author":{"gitId":"botr99"},"content":"     * @return The task that was marked as done.","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":56,"author":{"gitId":"botr99"},"content":"    public Task markTask(int taskNumber) {","lastModifiedDate":"2021-08-27"},{"lineNumber":57,"author":{"gitId":"botr99"},"content":"        Task task \u003d tasks.get(taskNumber - 1);","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"botr99"},"content":"        task.markAsDone();","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"botr99"},"content":"        return task;","lastModifiedDate":"2021-08-24"},{"lineNumber":60,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":63,"author":{"gitId":"botr99"},"content":"     * Deletes the nth task in the task list,","lastModifiedDate":"2021-08-26"},{"lineNumber":64,"author":{"gitId":"botr99"},"content":"     * whereby n represents the task number.","lastModifiedDate":"2021-08-27"},{"lineNumber":65,"author":{"gitId":"botr99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":66,"author":{"gitId":"botr99"},"content":"     * @param taskNumber The number n to access the nth task in the task list.","lastModifiedDate":"2021-08-26"},{"lineNumber":67,"author":{"gitId":"botr99"},"content":"     * @return The task that was deleted.","lastModifiedDate":"2021-08-26"},{"lineNumber":68,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":69,"author":{"gitId":"botr99"},"content":"    public Task deleteTask(int taskNumber) {","lastModifiedDate":"2021-08-27"},{"lineNumber":70,"author":{"gitId":"botr99"},"content":"        return tasks.remove(taskNumber - 1);","lastModifiedDate":"2021-08-24"},{"lineNumber":71,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":72,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":73,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":74,"author":{"gitId":"botr99"},"content":"     * Filters tasks that contains the query into another TaskList.","lastModifiedDate":"2021-08-27"},{"lineNumber":75,"author":{"gitId":"botr99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":76,"author":{"gitId":"botr99"},"content":"     * @param query The keyword to search for in the task list.","lastModifiedDate":"2021-08-26"},{"lineNumber":77,"author":{"gitId":"botr99"},"content":"     * @return A new task list containing tasks that satisfy","lastModifiedDate":"2021-08-27"},{"lineNumber":78,"author":{"gitId":"botr99"},"content":"     *         the query.","lastModifiedDate":"2021-08-27"},{"lineNumber":79,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":80,"author":{"gitId":"botr99"},"content":"    public TaskList getFilteredTaskList(String query) {","lastModifiedDate":"2021-09-07"},{"lineNumber":81,"author":{"gitId":"botr99"},"content":"        ArrayList\u003cTask\u003e filteredTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-26"},{"lineNumber":82,"author":{"gitId":"botr99"},"content":"        for (Task task : tasks) {","lastModifiedDate":"2021-08-26"},{"lineNumber":83,"author":{"gitId":"botr99"},"content":"            if (task.getDescription().contains(query)) {","lastModifiedDate":"2021-08-26"},{"lineNumber":84,"author":{"gitId":"botr99"},"content":"                filteredTasks.add(task);","lastModifiedDate":"2021-08-26"},{"lineNumber":85,"author":{"gitId":"botr99"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":86,"author":{"gitId":"botr99"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":87,"author":{"gitId":"botr99"},"content":"        return new TaskList(filteredTasks);","lastModifiedDate":"2021-08-27"},{"lineNumber":88,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":89,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":90,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":91,"author":{"gitId":"botr99"},"content":"     * Retrieves undone tasks that have dates falling within","lastModifiedDate":"2021-09-09"},{"lineNumber":92,"author":{"gitId":"botr99"},"content":"     * a specified range of days from the current day.","lastModifiedDate":"2021-09-09"},{"lineNumber":93,"author":{"gitId":"botr99"},"content":"     *","lastModifiedDate":"2021-09-09"},{"lineNumber":94,"author":{"gitId":"botr99"},"content":"     * @param numberOfDays The range of days.","lastModifiedDate":"2021-09-09"},{"lineNumber":95,"author":{"gitId":"botr99"},"content":"     * @return A new task list containing all undone tasks","lastModifiedDate":"2021-09-09"},{"lineNumber":96,"author":{"gitId":"botr99"},"content":"     *         that are due within the number of days from the current day.","lastModifiedDate":"2021-09-09"},{"lineNumber":97,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":98,"author":{"gitId":"botr99"},"content":"    public TaskList getUpcomingTaskList(int numberOfDays) throws DukeException {","lastModifiedDate":"2021-09-09"},{"lineNumber":99,"author":{"gitId":"botr99"},"content":"        boolean isDaysNegative \u003d numberOfDays \u003c 0;","lastModifiedDate":"2021-09-09"},{"lineNumber":100,"author":{"gitId":"botr99"},"content":"        if (isDaysNegative) {","lastModifiedDate":"2021-09-09"},{"lineNumber":101,"author":{"gitId":"botr99"},"content":"            throw new DukeException(\"Oops!!! Days cannot be negative.\");","lastModifiedDate":"2021-09-09"},{"lineNumber":102,"author":{"gitId":"botr99"},"content":"        }","lastModifiedDate":"2021-09-09"},{"lineNumber":103,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":104,"author":{"gitId":"botr99"},"content":"        LocalDate upperBoundDate \u003d LocalDate.now().plusDays(numberOfDays);","lastModifiedDate":"2021-09-09"},{"lineNumber":105,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":106,"author":{"gitId":"botr99"},"content":"        ArrayList\u003cTask\u003e upcomingTasks \u003d tasks","lastModifiedDate":"2021-09-09"},{"lineNumber":107,"author":{"gitId":"botr99"},"content":"                .stream()","lastModifiedDate":"2021-09-09"},{"lineNumber":108,"author":{"gitId":"botr99"},"content":"                .filter(t -\u003e !t.getIsDone())","lastModifiedDate":"2021-09-09"},{"lineNumber":109,"author":{"gitId":"botr99"},"content":"                .filter(t -\u003e t instanceof DateTask)","lastModifiedDate":"2021-09-09"},{"lineNumber":110,"author":{"gitId":"botr99"},"content":"                .filter(t -\u003e isDateWithinRange(((DateTask) t).getDate(), upperBoundDate))","lastModifiedDate":"2021-09-09"},{"lineNumber":111,"author":{"gitId":"botr99"},"content":"                .collect(Collectors.toCollection(ArrayList::new));","lastModifiedDate":"2021-09-09"},{"lineNumber":112,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":113,"author":{"gitId":"botr99"},"content":"        return new TaskList(upcomingTasks);","lastModifiedDate":"2021-09-09"},{"lineNumber":114,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-09-09"},{"lineNumber":115,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":116,"author":{"gitId":"botr99"},"content":"    private boolean isDateWithinRange(LocalDate date, LocalDate upperBoundDate) {","lastModifiedDate":"2021-09-09"},{"lineNumber":117,"author":{"gitId":"botr99"},"content":"        return !upperBoundDate.isBefore(date);","lastModifiedDate":"2021-09-09"},{"lineNumber":118,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-09-09"},{"lineNumber":119,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":120,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":121,"author":{"gitId":"botr99"},"content":"     * Gets the current size of the task list.","lastModifiedDate":"2021-08-26"},{"lineNumber":122,"author":{"gitId":"botr99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":123,"author":{"gitId":"botr99"},"content":"     * @return The number of tasks in the task list.","lastModifiedDate":"2021-08-26"},{"lineNumber":124,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":125,"author":{"gitId":"botr99"},"content":"    public int getSize() {","lastModifiedDate":"2021-08-24"},{"lineNumber":126,"author":{"gitId":"botr99"},"content":"        return tasks.size();","lastModifiedDate":"2021-08-24"},{"lineNumber":127,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":128,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":129,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":130,"author":{"gitId":"botr99"},"content":"     * Gets the task located at the index.","lastModifiedDate":"2021-08-26"},{"lineNumber":131,"author":{"gitId":"botr99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":132,"author":{"gitId":"botr99"},"content":"     * @param index The zero-based index of the task list.","lastModifiedDate":"2021-08-26"},{"lineNumber":133,"author":{"gitId":"botr99"},"content":"     * @return The task accessed from the index of the task list.","lastModifiedDate":"2021-08-26"},{"lineNumber":134,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":135,"author":{"gitId":"botr99"},"content":"    public Task getTask(int index) {","lastModifiedDate":"2021-08-24"},{"lineNumber":136,"author":{"gitId":"botr99"},"content":"        return tasks.get(index);","lastModifiedDate":"2021-08-24"},{"lineNumber":137,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":138,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":139,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-08-27"},{"lineNumber":140,"author":{"gitId":"botr99"},"content":"     * Returns a string whereby the task list is represented","lastModifiedDate":"2021-08-27"},{"lineNumber":141,"author":{"gitId":"botr99"},"content":"     * as a numbered list.","lastModifiedDate":"2021-08-27"},{"lineNumber":142,"author":{"gitId":"botr99"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":143,"author":{"gitId":"botr99"},"content":"     * @return The string representation of a task list.","lastModifiedDate":"2021-08-27"},{"lineNumber":144,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-08-27"},{"lineNumber":145,"author":{"gitId":"botr99"},"content":"    @Override","lastModifiedDate":"2021-08-27"},{"lineNumber":146,"author":{"gitId":"botr99"},"content":"    public String toString() {","lastModifiedDate":"2021-08-27"},{"lineNumber":147,"author":{"gitId":"botr99"},"content":"        StringBuilder tasksString \u003d new StringBuilder();","lastModifiedDate":"2021-08-24"},{"lineNumber":148,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":149,"author":{"gitId":"botr99"},"content":"        for (int i \u003d 0; i \u003c getSize(); i++) {","lastModifiedDate":"2021-08-27"},{"lineNumber":150,"author":{"gitId":"botr99"},"content":"            int taskNumber \u003d i + 1;","lastModifiedDate":"2021-08-24"},{"lineNumber":151,"author":{"gitId":"botr99"},"content":"            tasksString","lastModifiedDate":"2021-08-24"},{"lineNumber":152,"author":{"gitId":"botr99"},"content":"                    .append(taskNumber)","lastModifiedDate":"2021-08-24"},{"lineNumber":153,"author":{"gitId":"botr99"},"content":"                    .append(\".\")","lastModifiedDate":"2021-08-24"},{"lineNumber":154,"author":{"gitId":"botr99"},"content":"                    .append(getTask(i))","lastModifiedDate":"2021-08-27"},{"lineNumber":155,"author":{"gitId":"botr99"},"content":"                    .append(i \u003d\u003d (getSize() - 1) ? \"\" : \"\\n\");","lastModifiedDate":"2021-08-27"},{"lineNumber":156,"author":{"gitId":"botr99"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":157,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":158,"author":{"gitId":"botr99"},"content":"        return tasksString.toString();","lastModifiedDate":"2021-08-24"},{"lineNumber":159,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":160,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":161,"author":{"gitId":"botr99"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"botr99":161}},{"path":"src/main/java/duke/command/AddTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"botr99"},"content":"package duke.command;","lastModifiedDate":"2021-09-08"},{"lineNumber":2,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":3,"author":{"gitId":"botr99"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-08"},{"lineNumber":4,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":5,"author":{"gitId":"botr99"},"content":"import duke.Message;","lastModifiedDate":"2021-09-08"},{"lineNumber":6,"author":{"gitId":"botr99"},"content":"import duke.TaskList;","lastModifiedDate":"2021-09-08"},{"lineNumber":7,"author":{"gitId":"botr99"},"content":"import duke.storage.TaskStorage;","lastModifiedDate":"2021-09-08"},{"lineNumber":8,"author":{"gitId":"botr99"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-08"},{"lineNumber":9,"author":{"gitId":"botr99"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-08"},{"lineNumber":10,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":11,"author":{"gitId":"botr99"},"content":"public class AddTaskCommand extends Command {","lastModifiedDate":"2021-09-08"},{"lineNumber":12,"author":{"gitId":"botr99"},"content":"    private Task task;","lastModifiedDate":"2021-09-08"},{"lineNumber":13,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":14,"author":{"gitId":"botr99"},"content":"    public AddTaskCommand(Task task) {","lastModifiedDate":"2021-09-08"},{"lineNumber":15,"author":{"gitId":"botr99"},"content":"        this.task \u003d task;","lastModifiedDate":"2021-09-08"},{"lineNumber":16,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":17,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":18,"author":{"gitId":"botr99"},"content":"    @Override","lastModifiedDate":"2021-09-08"},{"lineNumber":19,"author":{"gitId":"botr99"},"content":"    public void execute(TaskList taskList, Ui ui, TaskStorage taskStorage)","lastModifiedDate":"2021-09-08"},{"lineNumber":20,"author":{"gitId":"botr99"},"content":"            throws IOException {","lastModifiedDate":"2021-09-08"},{"lineNumber":21,"author":{"gitId":"botr99"},"content":"        taskList.addTask(task);","lastModifiedDate":"2021-09-08"},{"lineNumber":22,"author":{"gitId":"botr99"},"content":"        taskStorage.addTaskToStorage(task);","lastModifiedDate":"2021-09-08"},{"lineNumber":23,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":24,"author":{"gitId":"botr99"},"content":"        String addTaskMessage \u003d Message.getAddTaskMessage(task, taskList.getSize());","lastModifiedDate":"2021-09-08"},{"lineNumber":25,"author":{"gitId":"botr99"},"content":"        ui.setCurrentMessage(addTaskMessage);","lastModifiedDate":"2021-09-08"},{"lineNumber":26,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":27,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":28,"author":{"gitId":"botr99"},"content":"}","lastModifiedDate":"2021-09-08"}],"authorContributionMap":{"botr99":28}},{"path":"src/main/java/duke/command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"botr99"},"content":"package duke.command;","lastModifiedDate":"2021-09-08"},{"lineNumber":2,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":3,"author":{"gitId":"botr99"},"content":"import duke.Message;","lastModifiedDate":"2021-09-08"},{"lineNumber":4,"author":{"gitId":"botr99"},"content":"import duke.TaskList;","lastModifiedDate":"2021-09-08"},{"lineNumber":5,"author":{"gitId":"botr99"},"content":"import duke.storage.TaskStorage;","lastModifiedDate":"2021-09-08"},{"lineNumber":6,"author":{"gitId":"botr99"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-08"},{"lineNumber":7,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":8,"author":{"gitId":"botr99"},"content":"public class ByeCommand extends Command {","lastModifiedDate":"2021-09-08"},{"lineNumber":9,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":10,"author":{"gitId":"botr99"},"content":"    @Override","lastModifiedDate":"2021-09-08"},{"lineNumber":11,"author":{"gitId":"botr99"},"content":"    public void execute(TaskList taskList, Ui ui, TaskStorage taskStorage) {","lastModifiedDate":"2021-09-08"},{"lineNumber":12,"author":{"gitId":"botr99"},"content":"        String exitMessage \u003d Message.getExitMessage();","lastModifiedDate":"2021-09-08"},{"lineNumber":13,"author":{"gitId":"botr99"},"content":"        ui.setCurrentMessage(exitMessage);","lastModifiedDate":"2021-09-08"},{"lineNumber":14,"author":{"gitId":"botr99"},"content":"        ui.setIsRunning(false);","lastModifiedDate":"2021-09-08"},{"lineNumber":15,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":16,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":17,"author":{"gitId":"botr99"},"content":"}","lastModifiedDate":"2021-09-08"}],"authorContributionMap":{"botr99":17}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"botr99"},"content":"package duke.command;","lastModifiedDate":"2021-09-08"},{"lineNumber":2,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":3,"author":{"gitId":"botr99"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-08"},{"lineNumber":4,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":5,"author":{"gitId":"botr99"},"content":"import duke.Parser;","lastModifiedDate":"2021-09-09"},{"lineNumber":6,"author":{"gitId":"botr99"},"content":"import duke.TaskList;","lastModifiedDate":"2021-09-08"},{"lineNumber":7,"author":{"gitId":"botr99"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-09-08"},{"lineNumber":8,"author":{"gitId":"botr99"},"content":"import duke.storage.TaskStorage;","lastModifiedDate":"2021-09-08"},{"lineNumber":9,"author":{"gitId":"botr99"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-08"},{"lineNumber":10,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":11,"author":{"gitId":"botr99"},"content":"public abstract class Command {","lastModifiedDate":"2021-09-08"},{"lineNumber":12,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":13,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":14,"author":{"gitId":"botr99"},"content":"     * Retrieves the task number as an integer from the task number string,","lastModifiedDate":"2021-09-08"},{"lineNumber":15,"author":{"gitId":"botr99"},"content":"     * that is within the boundaries of the task list size.","lastModifiedDate":"2021-09-08"},{"lineNumber":16,"author":{"gitId":"botr99"},"content":"     *","lastModifiedDate":"2021-09-08"},{"lineNumber":17,"author":{"gitId":"botr99"},"content":"     * @param taskNumberString The string containing the task number.","lastModifiedDate":"2021-09-08"},{"lineNumber":18,"author":{"gitId":"botr99"},"content":"     * @return The integer parsed from the task number string.","lastModifiedDate":"2021-09-08"},{"lineNumber":19,"author":{"gitId":"botr99"},"content":"     * @throws DukeException When the task number string is not an integer;","lastModifiedDate":"2021-09-08"},{"lineNumber":20,"author":{"gitId":"botr99"},"content":"     *                       when the task number integer parsed is out of range","lastModifiedDate":"2021-09-08"},{"lineNumber":21,"author":{"gitId":"botr99"},"content":"     *                       of the size of the task lists.","lastModifiedDate":"2021-09-08"},{"lineNumber":22,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":23,"author":{"gitId":"botr99"},"content":"    public int retrieveTaskNumber(String taskNumberString, TaskList taskList) throws DukeException {","lastModifiedDate":"2021-09-08"},{"lineNumber":24,"author":{"gitId":"botr99"},"content":"        int taskNumber \u003d Parser.parseToInt(taskNumberString);","lastModifiedDate":"2021-09-09"},{"lineNumber":25,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":26,"author":{"gitId":"botr99"},"content":"        if (taskNumber \u003c 1 || taskNumber \u003e taskList.getSize()) {","lastModifiedDate":"2021-09-08"},{"lineNumber":27,"author":{"gitId":"botr99"},"content":"            throw new DukeException(\"Oops!!! The task number provided is not valid.\");","lastModifiedDate":"2021-09-08"},{"lineNumber":28,"author":{"gitId":"botr99"},"content":"        }","lastModifiedDate":"2021-09-08"},{"lineNumber":29,"author":{"gitId":"botr99"},"content":"        return taskNumber;","lastModifiedDate":"2021-09-08"},{"lineNumber":30,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":31,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":32,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":33,"author":{"gitId":"botr99"},"content":"     * Executes the command.","lastModifiedDate":"2021-09-08"},{"lineNumber":34,"author":{"gitId":"botr99"},"content":"     *","lastModifiedDate":"2021-09-08"},{"lineNumber":35,"author":{"gitId":"botr99"},"content":"     * @param taskList The user\u0027s list of tasks.","lastModifiedDate":"2021-09-08"},{"lineNumber":36,"author":{"gitId":"botr99"},"content":"     * @param taskStorage The user\u0027s storage of tasks in the hard disk.","lastModifiedDate":"2021-09-08"},{"lineNumber":37,"author":{"gitId":"botr99"},"content":"     * @param ui The user interface to handle responses by Duke.","lastModifiedDate":"2021-09-08"},{"lineNumber":38,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":39,"author":{"gitId":"botr99"},"content":"    public abstract void execute(TaskList taskList, Ui ui, TaskStorage taskStorage)","lastModifiedDate":"2021-09-08"},{"lineNumber":40,"author":{"gitId":"botr99"},"content":"            throws DukeException, IOException;","lastModifiedDate":"2021-09-08"},{"lineNumber":41,"author":{"gitId":"botr99"},"content":"}","lastModifiedDate":"2021-09-08"}],"authorContributionMap":{"botr99":41}},{"path":"src/main/java/duke/command/DeleteTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"botr99"},"content":"package duke.command;","lastModifiedDate":"2021-09-08"},{"lineNumber":2,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":3,"author":{"gitId":"botr99"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-08"},{"lineNumber":4,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":5,"author":{"gitId":"botr99"},"content":"import duke.Message;","lastModifiedDate":"2021-09-08"},{"lineNumber":6,"author":{"gitId":"botr99"},"content":"import duke.TaskList;","lastModifiedDate":"2021-09-08"},{"lineNumber":7,"author":{"gitId":"botr99"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-09-08"},{"lineNumber":8,"author":{"gitId":"botr99"},"content":"import duke.storage.TaskStorage;","lastModifiedDate":"2021-09-08"},{"lineNumber":9,"author":{"gitId":"botr99"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-08"},{"lineNumber":10,"author":{"gitId":"botr99"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-08"},{"lineNumber":11,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":12,"author":{"gitId":"botr99"},"content":"public class DeleteTaskCommand extends Command {","lastModifiedDate":"2021-09-08"},{"lineNumber":13,"author":{"gitId":"botr99"},"content":"    private String taskNumberString;","lastModifiedDate":"2021-09-08"},{"lineNumber":14,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":15,"author":{"gitId":"botr99"},"content":"    public DeleteTaskCommand(String taskNumberString) {","lastModifiedDate":"2021-09-08"},{"lineNumber":16,"author":{"gitId":"botr99"},"content":"        this.taskNumberString \u003d taskNumberString;","lastModifiedDate":"2021-09-08"},{"lineNumber":17,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":18,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":19,"author":{"gitId":"botr99"},"content":"    @Override","lastModifiedDate":"2021-09-08"},{"lineNumber":20,"author":{"gitId":"botr99"},"content":"    public void execute(TaskList taskList, Ui ui, TaskStorage taskStorage)","lastModifiedDate":"2021-09-08"},{"lineNumber":21,"author":{"gitId":"botr99"},"content":"            throws DukeException, IOException {","lastModifiedDate":"2021-09-08"},{"lineNumber":22,"author":{"gitId":"botr99"},"content":"        int taskNumber \u003d retrieveTaskNumber(taskNumberString, taskList);","lastModifiedDate":"2021-09-08"},{"lineNumber":23,"author":{"gitId":"botr99"},"content":"        Task removedTask \u003d taskList.deleteTask(taskNumber);","lastModifiedDate":"2021-09-08"},{"lineNumber":24,"author":{"gitId":"botr99"},"content":"        taskStorage.removeTaskFromStorage(taskNumber);","lastModifiedDate":"2021-09-08"},{"lineNumber":25,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":26,"author":{"gitId":"botr99"},"content":"        String successMessage \u003d Message.getDeleteTaskMessage(removedTask, taskList.getSize());","lastModifiedDate":"2021-09-08"},{"lineNumber":27,"author":{"gitId":"botr99"},"content":"        ui.setCurrentMessage(successMessage);","lastModifiedDate":"2021-09-08"},{"lineNumber":28,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":29,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":30,"author":{"gitId":"botr99"},"content":"}","lastModifiedDate":"2021-09-08"}],"authorContributionMap":{"botr99":30}},{"path":"src/main/java/duke/command/FindTasksCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"botr99"},"content":"package duke.command;","lastModifiedDate":"2021-09-08"},{"lineNumber":2,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":3,"author":{"gitId":"botr99"},"content":"import duke.Message;","lastModifiedDate":"2021-09-08"},{"lineNumber":4,"author":{"gitId":"botr99"},"content":"import duke.TaskList;","lastModifiedDate":"2021-09-08"},{"lineNumber":5,"author":{"gitId":"botr99"},"content":"import duke.storage.TaskStorage;","lastModifiedDate":"2021-09-08"},{"lineNumber":6,"author":{"gitId":"botr99"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-08"},{"lineNumber":7,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":8,"author":{"gitId":"botr99"},"content":"public class FindTasksCommand extends Command {","lastModifiedDate":"2021-09-08"},{"lineNumber":9,"author":{"gitId":"botr99"},"content":"    private String query;","lastModifiedDate":"2021-09-08"},{"lineNumber":10,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":11,"author":{"gitId":"botr99"},"content":"    public FindTasksCommand(String query) {","lastModifiedDate":"2021-09-08"},{"lineNumber":12,"author":{"gitId":"botr99"},"content":"        this.query \u003d query;","lastModifiedDate":"2021-09-08"},{"lineNumber":13,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":14,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":15,"author":{"gitId":"botr99"},"content":"    @Override","lastModifiedDate":"2021-09-08"},{"lineNumber":16,"author":{"gitId":"botr99"},"content":"    public void execute(TaskList taskList, Ui ui, TaskStorage taskStorage) {","lastModifiedDate":"2021-09-08"},{"lineNumber":17,"author":{"gitId":"botr99"},"content":"        TaskList filteredTaskList \u003d taskList.getFilteredTaskList(query);","lastModifiedDate":"2021-09-08"},{"lineNumber":18,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":19,"author":{"gitId":"botr99"},"content":"        String filteredTaskListMessage \u003d Message.getFilteredTaskListMessage(filteredTaskList);","lastModifiedDate":"2021-09-08"},{"lineNumber":20,"author":{"gitId":"botr99"},"content":"        ui.setCurrentMessage(filteredTaskListMessage);","lastModifiedDate":"2021-09-08"},{"lineNumber":21,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":22,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":23,"author":{"gitId":"botr99"},"content":"}","lastModifiedDate":"2021-09-08"}],"authorContributionMap":{"botr99":23}},{"path":"src/main/java/duke/command/InvalidCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"botr99"},"content":"package duke.command;","lastModifiedDate":"2021-09-08"},{"lineNumber":2,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":3,"author":{"gitId":"botr99"},"content":"import duke.Message;","lastModifiedDate":"2021-09-08"},{"lineNumber":4,"author":{"gitId":"botr99"},"content":"import duke.TaskList;","lastModifiedDate":"2021-09-08"},{"lineNumber":5,"author":{"gitId":"botr99"},"content":"import duke.storage.TaskStorage;","lastModifiedDate":"2021-09-08"},{"lineNumber":6,"author":{"gitId":"botr99"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-08"},{"lineNumber":7,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":8,"author":{"gitId":"botr99"},"content":"public class InvalidCommand extends Command {","lastModifiedDate":"2021-09-08"},{"lineNumber":9,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":10,"author":{"gitId":"botr99"},"content":"    @Override","lastModifiedDate":"2021-09-08"},{"lineNumber":11,"author":{"gitId":"botr99"},"content":"    public void execute(TaskList taskList, Ui ui, TaskStorage taskStorage) {","lastModifiedDate":"2021-09-08"},{"lineNumber":12,"author":{"gitId":"botr99"},"content":"        String invalidCommandMessage \u003d Message.getInvalidCommandMessage();","lastModifiedDate":"2021-09-08"},{"lineNumber":13,"author":{"gitId":"botr99"},"content":"        ui.setCurrentMessage(invalidCommandMessage);","lastModifiedDate":"2021-09-08"},{"lineNumber":14,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":15,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":16,"author":{"gitId":"botr99"},"content":"}","lastModifiedDate":"2021-09-08"}],"authorContributionMap":{"botr99":16}},{"path":"src/main/java/duke/command/ListTasksCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"botr99"},"content":"package duke.command;","lastModifiedDate":"2021-09-08"},{"lineNumber":2,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":3,"author":{"gitId":"botr99"},"content":"import duke.Message;","lastModifiedDate":"2021-09-08"},{"lineNumber":4,"author":{"gitId":"botr99"},"content":"import duke.TaskList;","lastModifiedDate":"2021-09-08"},{"lineNumber":5,"author":{"gitId":"botr99"},"content":"import duke.storage.TaskStorage;","lastModifiedDate":"2021-09-08"},{"lineNumber":6,"author":{"gitId":"botr99"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-08"},{"lineNumber":7,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":8,"author":{"gitId":"botr99"},"content":"public class ListTasksCommand extends Command {","lastModifiedDate":"2021-09-08"},{"lineNumber":9,"author":{"gitId":"botr99"},"content":"    @Override","lastModifiedDate":"2021-09-08"},{"lineNumber":10,"author":{"gitId":"botr99"},"content":"    public void execute(TaskList taskList, Ui ui, TaskStorage taskStorage) {","lastModifiedDate":"2021-09-08"},{"lineNumber":11,"author":{"gitId":"botr99"},"content":"        String taskListMessage \u003d Message.getTaskListMessage(taskList);","lastModifiedDate":"2021-09-08"},{"lineNumber":12,"author":{"gitId":"botr99"},"content":"        ui.setCurrentMessage(taskListMessage);","lastModifiedDate":"2021-09-08"},{"lineNumber":13,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":14,"author":{"gitId":"botr99"},"content":"}","lastModifiedDate":"2021-09-08"}],"authorContributionMap":{"botr99":14}},{"path":"src/main/java/duke/command/MarkTaskAsDoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"botr99"},"content":"package duke.command;","lastModifiedDate":"2021-09-08"},{"lineNumber":2,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":3,"author":{"gitId":"botr99"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-08"},{"lineNumber":4,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":5,"author":{"gitId":"botr99"},"content":"import duke.Message;","lastModifiedDate":"2021-09-08"},{"lineNumber":6,"author":{"gitId":"botr99"},"content":"import duke.TaskList;","lastModifiedDate":"2021-09-08"},{"lineNumber":7,"author":{"gitId":"botr99"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-09-08"},{"lineNumber":8,"author":{"gitId":"botr99"},"content":"import duke.storage.TaskStorage;","lastModifiedDate":"2021-09-08"},{"lineNumber":9,"author":{"gitId":"botr99"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-08"},{"lineNumber":10,"author":{"gitId":"botr99"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-08"},{"lineNumber":11,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":12,"author":{"gitId":"botr99"},"content":"public class MarkTaskAsDoneCommand extends Command {","lastModifiedDate":"2021-09-08"},{"lineNumber":13,"author":{"gitId":"botr99"},"content":"    private String taskNumberString;","lastModifiedDate":"2021-09-08"},{"lineNumber":14,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":15,"author":{"gitId":"botr99"},"content":"    public MarkTaskAsDoneCommand(String taskNumberString) {","lastModifiedDate":"2021-09-08"},{"lineNumber":16,"author":{"gitId":"botr99"},"content":"        this.taskNumberString \u003d taskNumberString;","lastModifiedDate":"2021-09-08"},{"lineNumber":17,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":18,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":19,"author":{"gitId":"botr99"},"content":"    @Override","lastModifiedDate":"2021-09-08"},{"lineNumber":20,"author":{"gitId":"botr99"},"content":"    public void execute(TaskList taskList, Ui ui, TaskStorage taskStorage)","lastModifiedDate":"2021-09-08"},{"lineNumber":21,"author":{"gitId":"botr99"},"content":"            throws DukeException, IOException {","lastModifiedDate":"2021-09-08"},{"lineNumber":22,"author":{"gitId":"botr99"},"content":"        int taskNumber \u003d retrieveTaskNumber(taskNumberString, taskList);","lastModifiedDate":"2021-09-08"},{"lineNumber":23,"author":{"gitId":"botr99"},"content":"        Task markedTask \u003d taskList.markTask(taskNumber);","lastModifiedDate":"2021-09-08"},{"lineNumber":24,"author":{"gitId":"botr99"},"content":"        taskStorage.editTaskFromStorage(taskNumber, markedTask);","lastModifiedDate":"2021-09-08"},{"lineNumber":25,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":26,"author":{"gitId":"botr99"},"content":"        String successMessage \u003d Message.getMarkTaskAsDoneMessage(markedTask);","lastModifiedDate":"2021-09-08"},{"lineNumber":27,"author":{"gitId":"botr99"},"content":"        ui.setCurrentMessage(successMessage);","lastModifiedDate":"2021-09-08"},{"lineNumber":28,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":29,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":30,"author":{"gitId":"botr99"},"content":"}","lastModifiedDate":"2021-09-08"}],"authorContributionMap":{"botr99":30}},{"path":"src/main/java/duke/command/RemindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"botr99"},"content":"package duke.command;","lastModifiedDate":"2021-09-09"},{"lineNumber":2,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":3,"author":{"gitId":"botr99"},"content":"import duke.Message;","lastModifiedDate":"2021-09-09"},{"lineNumber":4,"author":{"gitId":"botr99"},"content":"import duke.TaskList;","lastModifiedDate":"2021-09-09"},{"lineNumber":5,"author":{"gitId":"botr99"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-09-09"},{"lineNumber":6,"author":{"gitId":"botr99"},"content":"import duke.storage.TaskStorage;","lastModifiedDate":"2021-09-09"},{"lineNumber":7,"author":{"gitId":"botr99"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-09"},{"lineNumber":8,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":9,"author":{"gitId":"botr99"},"content":"public class RemindCommand extends Command {","lastModifiedDate":"2021-09-09"},{"lineNumber":10,"author":{"gitId":"botr99"},"content":"    private int numberOfDays;","lastModifiedDate":"2021-09-09"},{"lineNumber":11,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":12,"author":{"gitId":"botr99"},"content":"    public RemindCommand(int numberOfDays) {","lastModifiedDate":"2021-09-09"},{"lineNumber":13,"author":{"gitId":"botr99"},"content":"        this.numberOfDays \u003d numberOfDays;","lastModifiedDate":"2021-09-09"},{"lineNumber":14,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-09-09"},{"lineNumber":15,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":16,"author":{"gitId":"botr99"},"content":"    @Override","lastModifiedDate":"2021-09-09"},{"lineNumber":17,"author":{"gitId":"botr99"},"content":"    public void execute(TaskList taskList, Ui ui, TaskStorage taskStorage) throws DukeException {","lastModifiedDate":"2021-09-09"},{"lineNumber":18,"author":{"gitId":"botr99"},"content":"        TaskList upcomingTaskList \u003d taskList.getUpcomingTaskList(numberOfDays);","lastModifiedDate":"2021-09-09"},{"lineNumber":19,"author":{"gitId":"botr99"},"content":"        String upcomingTaskListMessage \u003d Message.getUpcomingTaskListMessage(upcomingTaskList);","lastModifiedDate":"2021-09-09"},{"lineNumber":20,"author":{"gitId":"botr99"},"content":"        ui.setCurrentMessage(upcomingTaskListMessage);","lastModifiedDate":"2021-09-09"},{"lineNumber":21,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-09-09"},{"lineNumber":22,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":23,"author":{"gitId":"botr99"},"content":"}","lastModifiedDate":"2021-09-09"}],"authorContributionMap":{"botr99":23}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"botr99"},"content":"package duke.exception;","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"botr99"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"botr99"},"content":" * Represents an exception that can occur when running Duke.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"botr99"},"content":" *","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"botr99"},"content":" * @author botr99","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"botr99"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"botr99"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"botr99"},"content":"     * Constructs a DukeException with the given message.","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"botr99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"botr99"},"content":"     * @param message The error message.","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"botr99"},"content":"    public DukeException(String message) {","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"botr99"},"content":"        super(message);","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"botr99"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"botr99":17}},{"path":"src/main/java/duke/exception/FileParseException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"botr99"},"content":"package duke.exception;","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"botr99"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"botr99"},"content":" * Throws an exception when the file format is not of the format whereby","lastModifiedDate":"2021-09-07"},{"lineNumber":5,"author":{"gitId":"botr99"},"content":" * each line denotes the storage string representation of a task.","lastModifiedDate":"2021-09-07"},{"lineNumber":6,"author":{"gitId":"botr99"},"content":" *","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"botr99"},"content":" * @author botr99","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"botr99"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"botr99"},"content":"public class FileParseException extends Exception {","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"botr99"},"content":"     * Constructs a FileParseException with the given message.","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"botr99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"botr99"},"content":"     * @param message The error message.","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"botr99"},"content":"    public FileParseException(String message) {","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"botr99"},"content":"        super(message);","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"botr99"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"botr99":18}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"botr99"},"content":"package duke.storage;","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"botr99"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"botr99"},"content":"import java.nio.file.Files;","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"botr99"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"botr99"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"botr99"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"botr99"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"botr99"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"botr99"},"content":" * Stores a file and its lines.","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"botr99"},"content":" *","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"botr99"},"content":" * @author botr99","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"botr99"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"botr99"},"content":"public class Storage {","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"botr99"},"content":"    private Path filePath;","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"botr99"},"content":"    private ArrayList\u003cString\u003e lines;","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"botr99"},"content":"     * Constructs a storage that reads in lines from the specified","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"botr99"},"content":"     * file location.","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"botr99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"botr99"},"content":"     * @param fileLocation The file location to read the lines from.","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"botr99"},"content":"     * @throws IOException When an error occurs when reading to the file.","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"botr99"},"content":"    public Storage(String fileLocation) throws IOException {","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"botr99"},"content":"        Path filePath \u003d Path.of(fileLocation);","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"botr99"},"content":"        Files.createDirectories(filePath.getParent());","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"botr99"},"content":"        if (checkFileDoesNotExist(filePath)) {","lastModifiedDate":"2021-09-07"},{"lineNumber":30,"author":{"gitId":"botr99"},"content":"            Files.createFile(filePath);","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"botr99"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"botr99"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"botr99"},"content":"        this.lines \u003d readLines();","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":35,"author":{"gitId":"botr99"},"content":"        boolean doesFileExist \u003d checkFileExist(filePath);","lastModifiedDate":"2021-09-07"},{"lineNumber":36,"author":{"gitId":"botr99"},"content":"        assert doesFileExist;","lastModifiedDate":"2021-09-07"},{"lineNumber":37,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":38,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":39,"author":{"gitId":"botr99"},"content":"    private boolean checkFileExist(Path filePath) {","lastModifiedDate":"2021-09-07"},{"lineNumber":40,"author":{"gitId":"botr99"},"content":"        return Files.exists(filePath);","lastModifiedDate":"2021-09-07"},{"lineNumber":41,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":42,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":43,"author":{"gitId":"botr99"},"content":"    private boolean checkFileDoesNotExist(Path filePath) {","lastModifiedDate":"2021-09-07"},{"lineNumber":44,"author":{"gitId":"botr99"},"content":"        return !Files.exists(filePath);","lastModifiedDate":"2021-09-07"},{"lineNumber":45,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":46,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":47,"author":{"gitId":"botr99"},"content":"    private boolean checkLinesIsUpdated() throws IOException {","lastModifiedDate":"2021-09-07"},{"lineNumber":48,"author":{"gitId":"botr99"},"content":"        return lines.equals(readLines());","lastModifiedDate":"2021-09-07"},{"lineNumber":49,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":50,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":51,"author":{"gitId":"botr99"},"content":"    private ArrayList\u003cString\u003e readLines() throws IOException {","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"botr99"},"content":"        Stream\u003cString\u003e linesStream \u003d Files.lines(filePath);","lastModifiedDate":"2021-08-22"},{"lineNumber":53,"author":{"gitId":"botr99"},"content":"        return linesStream.collect(Collectors.toCollection(ArrayList::new));","lastModifiedDate":"2021-08-22"},{"lineNumber":54,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":55,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":56,"author":{"gitId":"botr99"},"content":"    private void saveLinesToStorage() throws IOException {","lastModifiedDate":"2021-08-24"},{"lineNumber":57,"author":{"gitId":"botr99"},"content":"        // store updated lines to the file path","lastModifiedDate":"2021-08-22"},{"lineNumber":58,"author":{"gitId":"botr99"},"content":"        Files.write(filePath, lines);","lastModifiedDate":"2021-08-22"},{"lineNumber":59,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":60,"author":{"gitId":"botr99"},"content":"        boolean isLinesUpdated \u003d checkLinesIsUpdated();","lastModifiedDate":"2021-09-07"},{"lineNumber":61,"author":{"gitId":"botr99"},"content":"        assert isLinesUpdated;","lastModifiedDate":"2021-09-07"},{"lineNumber":62,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":63,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":64,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":65,"author":{"gitId":"botr99"},"content":"     * Returns the lines stored in the file.","lastModifiedDate":"2021-08-26"},{"lineNumber":66,"author":{"gitId":"botr99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":67,"author":{"gitId":"botr99"},"content":"     * @return The lines as an ArrayList of strings.","lastModifiedDate":"2021-08-26"},{"lineNumber":68,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":69,"author":{"gitId":"botr99"},"content":"    public ArrayList\u003cString\u003e getLines() {","lastModifiedDate":"2021-08-24"},{"lineNumber":70,"author":{"gitId":"botr99"},"content":"        return lines;","lastModifiedDate":"2021-08-24"},{"lineNumber":71,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":72,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":73,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":74,"author":{"gitId":"botr99"},"content":"     * Saves the added line and updates the storage.","lastModifiedDate":"2021-08-27"},{"lineNumber":75,"author":{"gitId":"botr99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":76,"author":{"gitId":"botr99"},"content":"     * @param line The string to be added at the last line.","lastModifiedDate":"2021-08-27"},{"lineNumber":77,"author":{"gitId":"botr99"},"content":"     * @throws IOException When an error occurs when writing to the file.","lastModifiedDate":"2021-08-26"},{"lineNumber":78,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":79,"author":{"gitId":"botr99"},"content":"    public void addLine(String line) throws IOException {","lastModifiedDate":"2021-08-27"},{"lineNumber":80,"author":{"gitId":"botr99"},"content":"        lines.add(line);","lastModifiedDate":"2021-08-27"},{"lineNumber":81,"author":{"gitId":"botr99"},"content":"        saveLinesToStorage();","lastModifiedDate":"2021-08-24"},{"lineNumber":82,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":83,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":84,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":85,"author":{"gitId":"botr99"},"content":"     * Removes a line specified by the line number and updates the storage.","lastModifiedDate":"2021-08-26"},{"lineNumber":86,"author":{"gitId":"botr99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":87,"author":{"gitId":"botr99"},"content":"     * @param lineNumber The line number to remove the line.","lastModifiedDate":"2021-08-26"},{"lineNumber":88,"author":{"gitId":"botr99"},"content":"     * @throws IOException When an error occurs when writing to the file.","lastModifiedDate":"2021-08-26"},{"lineNumber":89,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":90,"author":{"gitId":"botr99"},"content":"    public void removeLine(int lineNumber) throws IOException {","lastModifiedDate":"2021-08-24"},{"lineNumber":91,"author":{"gitId":"botr99"},"content":"        lines.remove(lineNumber - 1);","lastModifiedDate":"2021-08-24"},{"lineNumber":92,"author":{"gitId":"botr99"},"content":"        saveLinesToStorage();","lastModifiedDate":"2021-08-24"},{"lineNumber":93,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":94,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":95,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":96,"author":{"gitId":"botr99"},"content":"     * Modifies a line specified by the line number and updates the storage.","lastModifiedDate":"2021-08-27"},{"lineNumber":97,"author":{"gitId":"botr99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":98,"author":{"gitId":"botr99"},"content":"     * @param lineNumber The line number to be modified in the file.","lastModifiedDate":"2021-08-27"},{"lineNumber":99,"author":{"gitId":"botr99"},"content":"     * @param line The string to be replaced with at that line.","lastModifiedDate":"2021-08-27"},{"lineNumber":100,"author":{"gitId":"botr99"},"content":"     * @throws IOException When an error occurs when writing to the file.","lastModifiedDate":"2021-08-26"},{"lineNumber":101,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":102,"author":{"gitId":"botr99"},"content":"    public void editLine(int lineNumber, String line) throws IOException {","lastModifiedDate":"2021-08-27"},{"lineNumber":103,"author":{"gitId":"botr99"},"content":"        lines.set(lineNumber - 1, line);","lastModifiedDate":"2021-08-27"},{"lineNumber":104,"author":{"gitId":"botr99"},"content":"        saveLinesToStorage();","lastModifiedDate":"2021-08-24"},{"lineNumber":105,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":106,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":107,"author":{"gitId":"botr99"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"botr99":107}},{"path":"src/main/java/duke/storage/TaskStorage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"botr99"},"content":"package duke.storage;","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":3,"author":{"gitId":"botr99"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"botr99"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"botr99"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-09-07"},{"lineNumber":7,"author":{"gitId":"botr99"},"content":"import duke.exception.FileParseException;","lastModifiedDate":"2021-09-07"},{"lineNumber":8,"author":{"gitId":"botr99"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-08-27"},{"lineNumber":9,"author":{"gitId":"botr99"},"content":"import duke.task.Event;","lastModifiedDate":"2021-08-27"},{"lineNumber":10,"author":{"gitId":"botr99"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-27"},{"lineNumber":11,"author":{"gitId":"botr99"},"content":"import duke.task.Todo;","lastModifiedDate":"2021-08-27"},{"lineNumber":12,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":13,"author":{"gitId":"botr99"},"content":"/**","lastModifiedDate":"2021-08-27"},{"lineNumber":14,"author":{"gitId":"botr99"},"content":" * Stores the tasks located in the user\u0027s hard disk.","lastModifiedDate":"2021-08-27"},{"lineNumber":15,"author":{"gitId":"botr99"},"content":" *","lastModifiedDate":"2021-08-27"},{"lineNumber":16,"author":{"gitId":"botr99"},"content":" * @author botr99","lastModifiedDate":"2021-08-27"},{"lineNumber":17,"author":{"gitId":"botr99"},"content":" */","lastModifiedDate":"2021-08-27"},{"lineNumber":18,"author":{"gitId":"botr99"},"content":"public class TaskStorage extends Storage {","lastModifiedDate":"2021-08-27"},{"lineNumber":19,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-08-27"},{"lineNumber":20,"author":{"gitId":"botr99"},"content":"     * Constructs a TaskStorage that reads in lines from the specified","lastModifiedDate":"2021-08-27"},{"lineNumber":21,"author":{"gitId":"botr99"},"content":"     * file location.","lastModifiedDate":"2021-08-27"},{"lineNumber":22,"author":{"gitId":"botr99"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":23,"author":{"gitId":"botr99"},"content":"     * @param fileLocation The file location to read the lines from.","lastModifiedDate":"2021-08-27"},{"lineNumber":24,"author":{"gitId":"botr99"},"content":"     * @throws IOException When an error occurs when reading to the file.","lastModifiedDate":"2021-08-27"},{"lineNumber":25,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-08-27"},{"lineNumber":26,"author":{"gitId":"botr99"},"content":"    public TaskStorage(String fileLocation) throws IOException {","lastModifiedDate":"2021-08-27"},{"lineNumber":27,"author":{"gitId":"botr99"},"content":"        super(fileLocation);","lastModifiedDate":"2021-08-27"},{"lineNumber":28,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":29,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":30,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-08-27"},{"lineNumber":31,"author":{"gitId":"botr99"},"content":"     * Parses the file and generates the user\u0027s tasks.","lastModifiedDate":"2021-08-27"},{"lineNumber":32,"author":{"gitId":"botr99"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":33,"author":{"gitId":"botr99"},"content":"     * @return The tasks constructed from parsing each line in the file, stored","lastModifiedDate":"2021-08-27"},{"lineNumber":34,"author":{"gitId":"botr99"},"content":"     *         in an ArrayList.","lastModifiedDate":"2021-08-27"},{"lineNumber":35,"author":{"gitId":"botr99"},"content":"     * @throws FileParseException When there is an error in retrieving the tasks","lastModifiedDate":"2021-08-27"},{"lineNumber":36,"author":{"gitId":"botr99"},"content":"     *                            from the file due to invalid file format.","lastModifiedDate":"2021-08-27"},{"lineNumber":37,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-08-27"},{"lineNumber":38,"author":{"gitId":"botr99"},"content":"    public ArrayList\u003cTask\u003e loadTasks() throws FileParseException {","lastModifiedDate":"2021-08-27"},{"lineNumber":39,"author":{"gitId":"botr99"},"content":"        try {","lastModifiedDate":"2021-08-27"},{"lineNumber":40,"author":{"gitId":"botr99"},"content":"            ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-27"},{"lineNumber":41,"author":{"gitId":"botr99"},"content":"            for (String line : getLines()) {","lastModifiedDate":"2021-08-27"},{"lineNumber":42,"author":{"gitId":"botr99"},"content":"                tasks.add(parseLineToTask(line));","lastModifiedDate":"2021-08-27"},{"lineNumber":43,"author":{"gitId":"botr99"},"content":"            }","lastModifiedDate":"2021-08-27"},{"lineNumber":44,"author":{"gitId":"botr99"},"content":"            return tasks;","lastModifiedDate":"2021-08-27"},{"lineNumber":45,"author":{"gitId":"botr99"},"content":"        } catch (DukeException | ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-27"},{"lineNumber":46,"author":{"gitId":"botr99"},"content":"            throw new FileParseException(\"The contents of the file in storage are formatted wrongly.\");","lastModifiedDate":"2021-08-27"},{"lineNumber":47,"author":{"gitId":"botr99"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":48,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":49,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":50,"author":{"gitId":"botr99"},"content":"    private Task parseLineToTask(String line) throws DukeException, FileParseException {","lastModifiedDate":"2021-08-27"},{"lineNumber":51,"author":{"gitId":"botr99"},"content":"        String[] params \u003d line.split(\" \\\\| \");","lastModifiedDate":"2021-08-27"},{"lineNumber":52,"author":{"gitId":"botr99"},"content":"        String taskType \u003d params[0];","lastModifiedDate":"2021-08-27"},{"lineNumber":53,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":54,"author":{"gitId":"botr99"},"content":"        boolean isTaskDone;","lastModifiedDate":"2021-08-27"},{"lineNumber":55,"author":{"gitId":"botr99"},"content":"        switch (params[1]) {","lastModifiedDate":"2021-08-27"},{"lineNumber":56,"author":{"gitId":"botr99"},"content":"        case \"0\":","lastModifiedDate":"2021-08-27"},{"lineNumber":57,"author":{"gitId":"botr99"},"content":"        case \"1\":","lastModifiedDate":"2021-08-27"},{"lineNumber":58,"author":{"gitId":"botr99"},"content":"            isTaskDone \u003d params[1].equals(\"1\");","lastModifiedDate":"2021-08-27"},{"lineNumber":59,"author":{"gitId":"botr99"},"content":"            break;","lastModifiedDate":"2021-08-27"},{"lineNumber":60,"author":{"gitId":"botr99"},"content":"        default:","lastModifiedDate":"2021-08-27"},{"lineNumber":61,"author":{"gitId":"botr99"},"content":"            throw new FileParseException(\"The contents of the file in storage are formatted wrongly.\");","lastModifiedDate":"2021-08-27"},{"lineNumber":62,"author":{"gitId":"botr99"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":63,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":64,"author":{"gitId":"botr99"},"content":"        String description \u003d params[2];","lastModifiedDate":"2021-08-27"},{"lineNumber":65,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":66,"author":{"gitId":"botr99"},"content":"        Task task;","lastModifiedDate":"2021-08-27"},{"lineNumber":67,"author":{"gitId":"botr99"},"content":"        switch (taskType) {","lastModifiedDate":"2021-08-27"},{"lineNumber":68,"author":{"gitId":"botr99"},"content":"        case \"T\":","lastModifiedDate":"2021-08-27"},{"lineNumber":69,"author":{"gitId":"botr99"},"content":"            task \u003d new Todo(description, isTaskDone);","lastModifiedDate":"2021-08-27"},{"lineNumber":70,"author":{"gitId":"botr99"},"content":"            break;","lastModifiedDate":"2021-08-27"},{"lineNumber":71,"author":{"gitId":"botr99"},"content":"        case \"D\":","lastModifiedDate":"2021-08-27"},{"lineNumber":72,"author":{"gitId":"botr99"},"content":"            task \u003d new Deadline(description, params[3], isTaskDone);","lastModifiedDate":"2021-08-27"},{"lineNumber":73,"author":{"gitId":"botr99"},"content":"            break;","lastModifiedDate":"2021-08-27"},{"lineNumber":74,"author":{"gitId":"botr99"},"content":"        case \"E\":","lastModifiedDate":"2021-08-27"},{"lineNumber":75,"author":{"gitId":"botr99"},"content":"            task \u003d new Event(description, params[3], isTaskDone);","lastModifiedDate":"2021-08-27"},{"lineNumber":76,"author":{"gitId":"botr99"},"content":"            break;","lastModifiedDate":"2021-08-27"},{"lineNumber":77,"author":{"gitId":"botr99"},"content":"        default:","lastModifiedDate":"2021-08-27"},{"lineNumber":78,"author":{"gitId":"botr99"},"content":"            throw new FileParseException(\"The contents of the file in storage are formatted wrongly.\");","lastModifiedDate":"2021-08-27"},{"lineNumber":79,"author":{"gitId":"botr99"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":80,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":81,"author":{"gitId":"botr99"},"content":"        return task;","lastModifiedDate":"2021-08-27"},{"lineNumber":82,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":83,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":84,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-08-27"},{"lineNumber":85,"author":{"gitId":"botr99"},"content":"     * Updates the task storage with a task.","lastModifiedDate":"2021-08-27"},{"lineNumber":86,"author":{"gitId":"botr99"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":87,"author":{"gitId":"botr99"},"content":"     * @param task The task to be added.","lastModifiedDate":"2021-08-27"},{"lineNumber":88,"author":{"gitId":"botr99"},"content":"     * @throws IOException When an error occurs when writing to the file.","lastModifiedDate":"2021-08-27"},{"lineNumber":89,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-08-27"},{"lineNumber":90,"author":{"gitId":"botr99"},"content":"    public void addTaskToStorage(Task task) throws IOException {","lastModifiedDate":"2021-08-27"},{"lineNumber":91,"author":{"gitId":"botr99"},"content":"        addLine(task.toStorageString());","lastModifiedDate":"2021-08-27"},{"lineNumber":92,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":93,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":94,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-08-27"},{"lineNumber":95,"author":{"gitId":"botr99"},"content":"     * Removes the task in the task storage","lastModifiedDate":"2021-08-27"},{"lineNumber":96,"author":{"gitId":"botr99"},"content":"     * which corresponds to the line number.","lastModifiedDate":"2021-08-27"},{"lineNumber":97,"author":{"gitId":"botr99"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":98,"author":{"gitId":"botr99"},"content":"     * @param lineNumber The line to be removed from the task storage.","lastModifiedDate":"2021-08-27"},{"lineNumber":99,"author":{"gitId":"botr99"},"content":"     * @throws IOException When an error occurs when writing to the file.","lastModifiedDate":"2021-08-27"},{"lineNumber":100,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-08-27"},{"lineNumber":101,"author":{"gitId":"botr99"},"content":"    public void removeTaskFromStorage(int lineNumber) throws IOException {","lastModifiedDate":"2021-08-27"},{"lineNumber":102,"author":{"gitId":"botr99"},"content":"        removeLine(lineNumber);","lastModifiedDate":"2021-08-27"},{"lineNumber":103,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":104,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":105,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-08-27"},{"lineNumber":106,"author":{"gitId":"botr99"},"content":"     * Modifies a line specified by the line number that corresponds to a task number,","lastModifiedDate":"2021-08-27"},{"lineNumber":107,"author":{"gitId":"botr99"},"content":"     * in the task storage.","lastModifiedDate":"2021-08-27"},{"lineNumber":108,"author":{"gitId":"botr99"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":109,"author":{"gitId":"botr99"},"content":"     * @param lineNumber The line number to modify the task stored in the task storage.","lastModifiedDate":"2021-08-27"},{"lineNumber":110,"author":{"gitId":"botr99"},"content":"     * @param task The task to be replaced with in the task storage.","lastModifiedDate":"2021-08-27"},{"lineNumber":111,"author":{"gitId":"botr99"},"content":"     * @throws IOException When an error occurs when writing to the file.","lastModifiedDate":"2021-08-27"},{"lineNumber":112,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-08-27"},{"lineNumber":113,"author":{"gitId":"botr99"},"content":"    public void editTaskFromStorage(int lineNumber, Task task) throws IOException {","lastModifiedDate":"2021-08-27"},{"lineNumber":114,"author":{"gitId":"botr99"},"content":"        editLine(lineNumber, task.toStorageString());","lastModifiedDate":"2021-08-27"},{"lineNumber":115,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":116,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":117,"author":{"gitId":"botr99"},"content":"}","lastModifiedDate":"2021-08-27"}],"authorContributionMap":{"botr99":117}},{"path":"src/main/java/duke/task/DateTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"botr99"},"content":"package duke.task;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"botr99"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"botr99"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"botr99"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"botr99"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-09-07"},{"lineNumber":8,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"botr99"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"botr99"},"content":" * Represents tasks that consists of a date.","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"botr99"},"content":" *","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"botr99"},"content":" * @author botr99","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"botr99"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"botr99"},"content":"public abstract class DateTask extends Task {","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"botr99"},"content":"    private LocalDate date;","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"botr99"},"content":"    private String dateString;","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"botr99"},"content":"     * Constructs a task with the corresponding description,","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"botr99"},"content":"     * whether it is done or not, and a date that is parsed","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"botr99"},"content":"     * from the date string.","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"botr99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"botr99"},"content":"     * @param description Description of the task.","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"botr99"},"content":"     * @param dateString String to be parsed into a date.","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"botr99"},"content":"     * @param isDone True if task is done; false otherwise.","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"botr99"},"content":"     * @throws DukeException If date string cannot be parsed into a date.","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"botr99"},"content":"    public DateTask(String description, String dateString, boolean isDone) throws DukeException {","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"botr99"},"content":"        super(description, isDone);","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"botr99"},"content":"        assignDate(dateString);","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"botr99"},"content":"        this.dateString \u003d dateString;","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"botr99"},"content":"    private void assignDate(String dateString) throws DukeException {","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"botr99"},"content":"        try {","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"botr99"},"content":"            date \u003d LocalDate.parse(dateString, DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"));","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"botr99"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"botr99"},"content":"            throw new DukeException(\"Oops!!! Date should be in this format: dd/MM/yyyy\");","lastModifiedDate":"2021-08-23"},{"lineNumber":39,"author":{"gitId":"botr99"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":40,"author":{"gitId":"botr99"},"content":"        assert date !\u003d null;","lastModifiedDate":"2021-09-07"},{"lineNumber":41,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":42,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":43,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"botr99"},"content":"     * Returns the date string passed in to the constructor.","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"botr99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"botr99"},"content":"     * @return The date string that is used to parse it into a date.","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"botr99"},"content":"    public String getDateString() {","lastModifiedDate":"2021-08-23"},{"lineNumber":49,"author":{"gitId":"botr99"},"content":"        return dateString;","lastModifiedDate":"2021-08-23"},{"lineNumber":50,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":51,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":52,"author":{"gitId":"botr99"},"content":"    public LocalDate getDate() {","lastModifiedDate":"2021-09-09"},{"lineNumber":53,"author":{"gitId":"botr99"},"content":"        return date;","lastModifiedDate":"2021-09-09"},{"lineNumber":54,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-09-09"},{"lineNumber":55,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":56,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":57,"author":{"gitId":"botr99"},"content":"     * Returns a string representation of the date of a task","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"botr99"},"content":"     * that is formatted to a \"d MMM yyyy\" pattern.","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"botr99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"botr99"},"content":"     * @return A string in the \"d MMM yyy\" format.","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"botr99"},"content":"    public String formatDate() {","lastModifiedDate":"2021-08-23"},{"lineNumber":63,"author":{"gitId":"botr99"},"content":"        return date.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\"));","lastModifiedDate":"2021-08-23"},{"lineNumber":64,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":65,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":66,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":67,"author":{"gitId":"botr99"},"content":"     * Checks if a date task is equal to another date task.","lastModifiedDate":"2021-08-26"},{"lineNumber":68,"author":{"gitId":"botr99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":69,"author":{"gitId":"botr99"},"content":"     * @param obj The other date task to be compared with.","lastModifiedDate":"2021-08-26"},{"lineNumber":70,"author":{"gitId":"botr99"},"content":"     * @return True if both tasks share the same description, done status","lastModifiedDate":"2021-08-26"},{"lineNumber":71,"author":{"gitId":"botr99"},"content":"     *         and date string; false otherwise.","lastModifiedDate":"2021-08-26"},{"lineNumber":72,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":73,"author":{"gitId":"botr99"},"content":"    @Override","lastModifiedDate":"2021-08-26"},{"lineNumber":74,"author":{"gitId":"botr99"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2021-08-26"},{"lineNumber":75,"author":{"gitId":"botr99"},"content":"        if (!(obj instanceof DateTask) || !super.equals(obj)) {","lastModifiedDate":"2021-08-26"},{"lineNumber":76,"author":{"gitId":"botr99"},"content":"            return false;","lastModifiedDate":"2021-08-26"},{"lineNumber":77,"author":{"gitId":"botr99"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":78,"author":{"gitId":"botr99"},"content":"        DateTask other \u003d (DateTask) obj;","lastModifiedDate":"2021-08-26"},{"lineNumber":79,"author":{"gitId":"botr99"},"content":"        return dateString.equals(other.getDateString());","lastModifiedDate":"2021-08-26"},{"lineNumber":80,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":81,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":82,"author":{"gitId":"botr99"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"botr99":82}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"botr99"},"content":"package duke.task;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"botr99"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-09-07"},{"lineNumber":4,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"botr99"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"botr99"},"content":" * Represents deadlines that are tasks to be done by a certain date.","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"botr99"},"content":" *","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"botr99"},"content":" * @author botr99","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"botr99"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"botr99"},"content":"public class Deadline extends DateTask {","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"botr99"},"content":"     * Constructs a deadline with the corresponding description,","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"botr99"},"content":"     * and a string indicating the date to do the deadline by,","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"botr99"},"content":"     * and that is by default not done.","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"botr99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"botr99"},"content":"     * @param description Description of the deadline.","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"botr99"},"content":"     * @param by String of the date.","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"botr99"},"content":"     * @throws DukeException If the by string cannot be parsed into a date.","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"botr99"},"content":"    public Deadline(String description, String by) throws DukeException {","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"botr99"},"content":"        this(description, by, false);","lastModifiedDate":"2021-08-23"},{"lineNumber":22,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":24,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"botr99"},"content":"     * Constructs a deadline with the corresponding description,","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"botr99"},"content":"     * and a string indicating the date to do the deadline by,","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"botr99"},"content":"     * and a boolean indicating whether the deadline is done.","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"botr99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"botr99"},"content":"     * @param description Description of the deadline.","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"botr99"},"content":"     * @param by String of the date.","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"botr99"},"content":"     * @param isDone True if deadline is done; false otherwise.","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"botr99"},"content":"     * @throws DukeException If the by string cannot be parsed into a date.","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"botr99"},"content":"    public Deadline(String description, String by, boolean isDone) throws DukeException {","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"botr99"},"content":"        super(description, by, isDone);","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"botr99"},"content":"     * Returns a string indicating whether a deadline is done,","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"botr99"},"content":"     * followed by the description of the deadline and the","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"botr99"},"content":"     * formatted date of the deadline.","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"botr99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"botr99"},"content":"     * @return The string representation of a deadline.","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"botr99"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":46,"author":{"gitId":"botr99"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":47,"author":{"gitId":"botr99"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + formatDate() + \")\";","lastModifiedDate":"2021-08-23"},{"lineNumber":48,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":49,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":50,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":51,"author":{"gitId":"botr99"},"content":"     * Returns a string indicating whether a deadline is done,","lastModifiedDate":"2021-08-26"},{"lineNumber":52,"author":{"gitId":"botr99"},"content":"     * followed by the description of the deadline and the","lastModifiedDate":"2021-08-26"},{"lineNumber":53,"author":{"gitId":"botr99"},"content":"     * string of the date that was passed in to the constructor.","lastModifiedDate":"2021-08-26"},{"lineNumber":54,"author":{"gitId":"botr99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"botr99"},"content":"     * @return The string representation of a deadline to be stored in storage","lastModifiedDate":"2021-08-26"},{"lineNumber":56,"author":{"gitId":"botr99"},"content":"     *         under the user\u0027s hard disk.","lastModifiedDate":"2021-08-26"},{"lineNumber":57,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"botr99"},"content":"    @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":59,"author":{"gitId":"botr99"},"content":"    public String toStorageString() {","lastModifiedDate":"2021-08-23"},{"lineNumber":60,"author":{"gitId":"botr99"},"content":"        return \"D | \" + super.toStorageString() + \" | \" + getDateString();","lastModifiedDate":"2021-08-23"},{"lineNumber":61,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":62,"author":{"gitId":"botr99"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"botr99":62}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"botr99"},"content":"package duke.task;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"botr99"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-09-07"},{"lineNumber":4,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"botr99"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"botr99"},"content":" * Represents events that are tasks taking place at a certain date.","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"botr99"},"content":" *","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"botr99"},"content":" * @author botr99","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"botr99"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"botr99"},"content":"public class Event extends DateTask {","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"botr99"},"content":"     * Constructs an event with the corresponding description,","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"botr99"},"content":"     * and a string indicating the date of the event,","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"botr99"},"content":"     * and that is by default not done.","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"botr99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"botr99"},"content":"     * @param description Description of the event.","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"botr99"},"content":"     * @param at String of the date.","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"botr99"},"content":"     * @throws DukeException If the at string cannot be parsed into a date.","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"botr99"},"content":"    public Event(String description, String at) throws DukeException {","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"botr99"},"content":"        this(description, at, false);","lastModifiedDate":"2021-08-23"},{"lineNumber":22,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":24,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"botr99"},"content":"     * Constructs an event with the corresponding description,","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"botr99"},"content":"     * and a string indicating the date of the event,","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"botr99"},"content":"     * and a boolean indicating whether the event is done.","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"botr99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"botr99"},"content":"     * @param description Description of the event.","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"botr99"},"content":"     * @param at String of the date.","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"botr99"},"content":"     * @param isDone True if event is done; false otherwise.","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"botr99"},"content":"     * @throws DukeException If the by string cannot be parsed into a date.","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"botr99"},"content":"    public Event(String description, String at, boolean isDone) throws DukeException {","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"botr99"},"content":"        super(description, at, isDone);","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"botr99"},"content":"     * Returns a string indicating whether an event is done,","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"botr99"},"content":"     * followed by the description of the event and the","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"botr99"},"content":"     * formatted date of the event.","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"botr99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"botr99"},"content":"     * @return The string representation of an event.","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"botr99"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":46,"author":{"gitId":"botr99"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":47,"author":{"gitId":"botr99"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + formatDate() + \")\";","lastModifiedDate":"2021-08-23"},{"lineNumber":48,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":49,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":50,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":51,"author":{"gitId":"botr99"},"content":"     * Returns a string indicating whether an event is done,","lastModifiedDate":"2021-08-26"},{"lineNumber":52,"author":{"gitId":"botr99"},"content":"     * followed by the description of the event and the","lastModifiedDate":"2021-08-26"},{"lineNumber":53,"author":{"gitId":"botr99"},"content":"     * string of the date that was passed in to the constructor.","lastModifiedDate":"2021-08-26"},{"lineNumber":54,"author":{"gitId":"botr99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"botr99"},"content":"     * @return The string representation of an event to be stored in storage","lastModifiedDate":"2021-08-26"},{"lineNumber":56,"author":{"gitId":"botr99"},"content":"     *         under the user\u0027s hard disk.","lastModifiedDate":"2021-08-26"},{"lineNumber":57,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"botr99"},"content":"    @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":59,"author":{"gitId":"botr99"},"content":"    public String toStorageString() {","lastModifiedDate":"2021-08-23"},{"lineNumber":60,"author":{"gitId":"botr99"},"content":"        return \"E | \" + super.toStorageString() + \" | \" + getDateString();","lastModifiedDate":"2021-08-23"},{"lineNumber":61,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":62,"author":{"gitId":"botr99"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"botr99":62}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"botr99"},"content":"package duke.task;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"botr99"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"botr99"},"content":" * Represents tasks that helps users to keep track of what needs to be done.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"botr99"},"content":" *","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"botr99"},"content":" * @author botr99","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"botr99"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"botr99"},"content":"public abstract class Task {","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"botr99"},"content":"    private String description;","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"botr99"},"content":"    private boolean isDone;","lastModifiedDate":"2021-08-17"},{"lineNumber":11,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":12,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"botr99"},"content":"     * Constructs a task with the corresponding description,","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"botr99"},"content":"     * and whether it is done or not done.","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"botr99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"botr99"},"content":"     * @param description Description of the task.","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"botr99"},"content":"     * @param isDone True if task is done; false otherwise.","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"botr99"},"content":"    public Task(String description, boolean isDone) {","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"botr99"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"botr99"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2021-08-23"},{"lineNumber":22,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":23,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":24,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"botr99"},"content":"     * Gets the description of a task.","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"botr99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"botr99"},"content":"     * @return The task description.","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"botr99"},"content":"    public String getDescription() {","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"botr99"},"content":"        return description;","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"botr99"},"content":"    public boolean getIsDone() {","lastModifiedDate":"2021-09-09"},{"lineNumber":34,"author":{"gitId":"botr99"},"content":"        return isDone;","lastModifiedDate":"2021-09-09"},{"lineNumber":35,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-09-09"},{"lineNumber":36,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":37,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"botr99"},"content":"     * Sets a task to be done.","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"botr99"},"content":"    public void markAsDone() {","lastModifiedDate":"2021-08-17"},{"lineNumber":41,"author":{"gitId":"botr99"},"content":"        isDone \u003d true;","lastModifiedDate":"2021-08-17"},{"lineNumber":42,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":43,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":44,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"botr99"},"content":"     * Returns a string indicating whether a task is done,","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"botr99"},"content":"     * followed by the description of the task.","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"botr99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"botr99"},"content":"     * @return The string representation of a task.","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"botr99"},"content":"    @Override","lastModifiedDate":"2021-08-17"},{"lineNumber":51,"author":{"gitId":"botr99"},"content":"    public String toString() {","lastModifiedDate":"2021-08-17"},{"lineNumber":52,"author":{"gitId":"botr99"},"content":"        return \"[\" + (isDone ? \"X\" : \" \") + \"] \" + description;","lastModifiedDate":"2021-08-18"},{"lineNumber":53,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":54,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":55,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":56,"author":{"gitId":"botr99"},"content":"     * Returns a string indicating whether a task is done,","lastModifiedDate":"2021-08-26"},{"lineNumber":57,"author":{"gitId":"botr99"},"content":"     * followed by the description of the task.","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"botr99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"botr99"},"content":"     * @return The string representation of a task to be stored in storage","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"botr99"},"content":"     *         under the user\u0027s hard disk.","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"botr99"},"content":"    public String toStorageString() {","lastModifiedDate":"2021-08-23"},{"lineNumber":63,"author":{"gitId":"botr99"},"content":"        return (isDone ? \"1\" : \"0\") + \" | \" + description;","lastModifiedDate":"2021-08-23"},{"lineNumber":64,"author":{"gitId":"botr99"},"content":"    };","lastModifiedDate":"2021-08-23"},{"lineNumber":65,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":66,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":67,"author":{"gitId":"botr99"},"content":"     * Checks if a task is equal to another task.","lastModifiedDate":"2021-08-26"},{"lineNumber":68,"author":{"gitId":"botr99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":69,"author":{"gitId":"botr99"},"content":"     * @param obj The other task to be compared with.","lastModifiedDate":"2021-08-26"},{"lineNumber":70,"author":{"gitId":"botr99"},"content":"     * @return True if both tasks share the same description and done status;","lastModifiedDate":"2021-08-26"},{"lineNumber":71,"author":{"gitId":"botr99"},"content":"     *         false otherwise.","lastModifiedDate":"2021-08-26"},{"lineNumber":72,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":73,"author":{"gitId":"botr99"},"content":"    @Override","lastModifiedDate":"2021-08-26"},{"lineNumber":74,"author":{"gitId":"botr99"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2021-08-26"},{"lineNumber":75,"author":{"gitId":"botr99"},"content":"        if (!(obj instanceof Task)) {","lastModifiedDate":"2021-08-26"},{"lineNumber":76,"author":{"gitId":"botr99"},"content":"            return false;","lastModifiedDate":"2021-08-26"},{"lineNumber":77,"author":{"gitId":"botr99"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":78,"author":{"gitId":"botr99"},"content":"        Task other \u003d (Task) obj;","lastModifiedDate":"2021-08-26"},{"lineNumber":79,"author":{"gitId":"botr99"},"content":"        return description.equals(other.description)","lastModifiedDate":"2021-09-01"},{"lineNumber":80,"author":{"gitId":"botr99"},"content":"                \u0026\u0026 isDone \u003d\u003d other.isDone;","lastModifiedDate":"2021-09-01"},{"lineNumber":81,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":82,"author":{"gitId":"botr99"},"content":"}","lastModifiedDate":"2021-08-17"}],"authorContributionMap":{"botr99":82}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"botr99"},"content":"package duke.task;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"botr99"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"botr99"},"content":" * Represents todos which are tasks that are to be done.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"botr99"},"content":" *","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"botr99"},"content":" * @author botr99","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"botr99"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"botr99"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"botr99"},"content":"     * Constructs a todo with the corresponding description,","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"botr99"},"content":"     * that is by default not done.","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"botr99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"botr99"},"content":"     * @param description Description of the todo.","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"botr99"},"content":"    public Todo(String description) {","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"botr99"},"content":"        this(description, false);","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"botr99"},"content":"     * Constructs a todo with the corresponding description,","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"botr99"},"content":"     * and whether it is done or not done.","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"botr99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"botr99"},"content":"     * @param description Description of the todo.","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"botr99"},"content":"     * @param isDone True if todo is done; false otherwise.","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"botr99"},"content":"    public Todo(String description, boolean isDone) {","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"botr99"},"content":"        super(description, isDone);","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"botr99"},"content":"     * Returns a string indicating whether a todo is done,","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"botr99"},"content":"     * followed by the description of the todo.","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"botr99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"botr99"},"content":"     * @return The string representation of a todo.","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"botr99"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":37,"author":{"gitId":"botr99"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":38,"author":{"gitId":"botr99"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2021-08-18"},{"lineNumber":39,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":40,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":41,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"botr99"},"content":"     * Returns a string indicating whether a todo is done,","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"botr99"},"content":"     * followed by the description of the todo.","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"botr99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"botr99"},"content":"     * @return The string representation of a todo to be stored in storage","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"botr99"},"content":"     *         under the user\u0027s hard disk.","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"botr99"},"content":"    @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":49,"author":{"gitId":"botr99"},"content":"    public String toStorageString() {","lastModifiedDate":"2021-08-23"},{"lineNumber":50,"author":{"gitId":"botr99"},"content":"        return \"T | \" + super.toStorageString();","lastModifiedDate":"2021-08-23"},{"lineNumber":51,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":52,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":53,"author":{"gitId":"botr99"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"botr99":53}},{"path":"src/main/java/duke/ui/Cli.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"botr99"},"content":"package duke.ui;","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"botr99"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"botr99"},"content":"import duke.Message;","lastModifiedDate":"2021-09-07"},{"lineNumber":6,"author":{"gitId":"botr99"},"content":"import duke.TaskList;","lastModifiedDate":"2021-09-07"},{"lineNumber":7,"author":{"gitId":"botr99"},"content":"import duke.storage.TaskStorage;","lastModifiedDate":"2021-09-07"},{"lineNumber":8,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":9,"author":{"gitId":"botr99"},"content":"/**","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"botr99"},"content":" * Represents a command line interface (CLI) that the user interacts with.","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"botr99"},"content":" */","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"botr99"},"content":"public class Cli extends Ui {","lastModifiedDate":"2021-09-02"},{"lineNumber":13,"author":{"gitId":"botr99"},"content":"    private static final String HORIZONTAL_LINE \u003d","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"botr99"},"content":"            \"____________________________________________________________\";","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"botr99"},"content":"    private Scanner scanner;","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":17,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":18,"author":{"gitId":"botr99"},"content":"     * Constructs a CLI with the user\u0027s storage and task list,","lastModifiedDate":"2021-09-07"},{"lineNumber":19,"author":{"gitId":"botr99"},"content":"     * initialising a scanner to deal with user input.","lastModifiedDate":"2021-09-02"},{"lineNumber":20,"author":{"gitId":"botr99"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":21,"author":{"gitId":"botr99"},"content":"     * @param taskStorage The user\u0027s storage of tasks in the hard disk.","lastModifiedDate":"2021-09-02"},{"lineNumber":22,"author":{"gitId":"botr99"},"content":"     * @param taskList The user\u0027s list of tasks.","lastModifiedDate":"2021-09-07"},{"lineNumber":23,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":24,"author":{"gitId":"botr99"},"content":"    public Cli(TaskStorage taskStorage, TaskList taskList) {","lastModifiedDate":"2021-09-07"},{"lineNumber":25,"author":{"gitId":"botr99"},"content":"        super(taskStorage, taskList);","lastModifiedDate":"2021-09-07"},{"lineNumber":26,"author":{"gitId":"botr99"},"content":"        scanner \u003d new Scanner(System.in);","lastModifiedDate":"2021-09-02"},{"lineNumber":27,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":28,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":29,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":30,"author":{"gitId":"botr99"},"content":"     * Scans user input, delegates the various cases of handling","lastModifiedDate":"2021-09-02"},{"lineNumber":31,"author":{"gitId":"botr99"},"content":"     * user input to the respective functions and prints out the","lastModifiedDate":"2021-09-02"},{"lineNumber":32,"author":{"gitId":"botr99"},"content":"     * response to the user input.","lastModifiedDate":"2021-09-02"},{"lineNumber":33,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":34,"author":{"gitId":"botr99"},"content":"    public void scanUserInput() {","lastModifiedDate":"2021-09-02"},{"lineNumber":35,"author":{"gitId":"botr99"},"content":"        while (getIsRunning()) {","lastModifiedDate":"2021-09-02"},{"lineNumber":36,"author":{"gitId":"botr99"},"content":"            String userInput \u003d scanner.nextLine();","lastModifiedDate":"2021-09-02"},{"lineNumber":37,"author":{"gitId":"botr99"},"content":"            String responseMessage \u003d getResponse(userInput);","lastModifiedDate":"2021-09-08"},{"lineNumber":38,"author":{"gitId":"botr99"},"content":"            printMessage(responseMessage);","lastModifiedDate":"2021-09-08"},{"lineNumber":39,"author":{"gitId":"botr99"},"content":"        }","lastModifiedDate":"2021-09-02"},{"lineNumber":40,"author":{"gitId":"botr99"},"content":"        scanner.close();","lastModifiedDate":"2021-09-02"},{"lineNumber":41,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":42,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":43,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":44,"author":{"gitId":"botr99"},"content":"     * Prints the message specified in a formatted manner.","lastModifiedDate":"2021-09-02"},{"lineNumber":45,"author":{"gitId":"botr99"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":46,"author":{"gitId":"botr99"},"content":"     * @param message A string to be printed.","lastModifiedDate":"2021-09-02"},{"lineNumber":47,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":48,"author":{"gitId":"botr99"},"content":"    public void printMessage(String message) {","lastModifiedDate":"2021-09-02"},{"lineNumber":49,"author":{"gitId":"botr99"},"content":"        System.out.println(HORIZONTAL_LINE);","lastModifiedDate":"2021-09-02"},{"lineNumber":50,"author":{"gitId":"botr99"},"content":"        System.out.println(message);","lastModifiedDate":"2021-09-02"},{"lineNumber":51,"author":{"gitId":"botr99"},"content":"        System.out.println(HORIZONTAL_LINE);","lastModifiedDate":"2021-09-02"},{"lineNumber":52,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":53,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":54,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":55,"author":{"gitId":"botr99"},"content":"     * {@inheritDoc}","lastModifiedDate":"2021-09-02"},{"lineNumber":56,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":57,"author":{"gitId":"botr99"},"content":"    @Override","lastModifiedDate":"2021-09-02"},{"lineNumber":58,"author":{"gitId":"botr99"},"content":"    public void start() {","lastModifiedDate":"2021-09-02"},{"lineNumber":59,"author":{"gitId":"botr99"},"content":"        String welcomeMessage \u003d Message.getWelcomeMessage();","lastModifiedDate":"2021-09-08"},{"lineNumber":60,"author":{"gitId":"botr99"},"content":"        printMessage(welcomeMessage);","lastModifiedDate":"2021-09-08"},{"lineNumber":61,"author":{"gitId":"botr99"},"content":"        scanUserInput();","lastModifiedDate":"2021-09-02"},{"lineNumber":62,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":63,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":64,"author":{"gitId":"botr99"},"content":"}","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"botr99":64}},{"path":"src/main/java/duke/ui/Gui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"botr99"},"content":"package duke.ui;","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"botr99"},"content":"import duke.TaskList;","lastModifiedDate":"2021-09-07"},{"lineNumber":4,"author":{"gitId":"botr99"},"content":"import duke.storage.TaskStorage;","lastModifiedDate":"2021-09-07"},{"lineNumber":5,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"botr99"},"content":"/**","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"botr99"},"content":" * Represents a Graphical User Interface (GUI) that the user interacts with.","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"botr99"},"content":" */","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"botr99"},"content":"public class Gui extends Ui {","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"botr99"},"content":"     * Constructs a GUI with the user\u0027s storage and tasks.","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"botr99"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":13,"author":{"gitId":"botr99"},"content":"     * @param taskStorage The user\u0027s storage of tasks in the hard disk.","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"botr99"},"content":"     * @param taskList The user\u0027s list of tasks.","lastModifiedDate":"2021-09-07"},{"lineNumber":15,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"botr99"},"content":"    public Gui(TaskStorage taskStorage, TaskList taskList) {","lastModifiedDate":"2021-09-07"},{"lineNumber":17,"author":{"gitId":"botr99"},"content":"        super(taskStorage, taskList);","lastModifiedDate":"2021-09-07"},{"lineNumber":18,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":19,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":20,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":21,"author":{"gitId":"botr99"},"content":"     * {@inheritDoc}","lastModifiedDate":"2021-09-02"},{"lineNumber":22,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":23,"author":{"gitId":"botr99"},"content":"    @Override","lastModifiedDate":"2021-09-02"},{"lineNumber":24,"author":{"gitId":"botr99"},"content":"    public void start() {","lastModifiedDate":"2021-09-02"},{"lineNumber":25,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":26,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":27,"author":{"gitId":"botr99"},"content":"}","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"botr99":27}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"botr99"},"content":"package duke.ui;","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"botr99"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"botr99"},"content":"import duke.Message;","lastModifiedDate":"2021-09-07"},{"lineNumber":6,"author":{"gitId":"botr99"},"content":"import duke.Parser;","lastModifiedDate":"2021-09-07"},{"lineNumber":7,"author":{"gitId":"botr99"},"content":"import duke.TaskList;","lastModifiedDate":"2021-09-07"},{"lineNumber":8,"author":{"gitId":"botr99"},"content":"import duke.command.Command;","lastModifiedDate":"2021-09-08"},{"lineNumber":9,"author":{"gitId":"botr99"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-09-07"},{"lineNumber":10,"author":{"gitId":"botr99"},"content":"import duke.storage.TaskStorage;","lastModifiedDate":"2021-09-07"},{"lineNumber":11,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"botr99"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"botr99"},"content":" * Represents a class that deals with interaction with the user.","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"botr99"},"content":" *","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"botr99"},"content":" * @author botr99","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"botr99"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"botr99"},"content":"public abstract class Ui {","lastModifiedDate":"2021-09-02"},{"lineNumber":18,"author":{"gitId":"botr99"},"content":"    private TaskStorage taskStorage;","lastModifiedDate":"2021-08-27"},{"lineNumber":19,"author":{"gitId":"botr99"},"content":"    private TaskList taskList;","lastModifiedDate":"2021-09-07"},{"lineNumber":20,"author":{"gitId":"botr99"},"content":"    private boolean isRunning;","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"botr99"},"content":"    private String currentMessage;","lastModifiedDate":"2021-09-07"},{"lineNumber":22,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"botr99"},"content":"     * Constructs an ui with the user\u0027s storage and task list.","lastModifiedDate":"2021-09-07"},{"lineNumber":25,"author":{"gitId":"botr99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"botr99"},"content":"     * @param taskStorage The user\u0027s storage of tasks in the hard disk.","lastModifiedDate":"2021-08-27"},{"lineNumber":27,"author":{"gitId":"botr99"},"content":"     * @param taskList The user\u0027s list of tasks.","lastModifiedDate":"2021-09-07"},{"lineNumber":28,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"botr99"},"content":"    public Ui(TaskStorage taskStorage, TaskList taskList) {","lastModifiedDate":"2021-09-07"},{"lineNumber":30,"author":{"gitId":"botr99"},"content":"        this.taskStorage \u003d taskStorage;","lastModifiedDate":"2021-08-27"},{"lineNumber":31,"author":{"gitId":"botr99"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2021-09-07"},{"lineNumber":32,"author":{"gitId":"botr99"},"content":"        isRunning \u003d true;","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"botr99"},"content":"    public boolean getIsRunning() {","lastModifiedDate":"2021-09-02"},{"lineNumber":36,"author":{"gitId":"botr99"},"content":"        return isRunning;","lastModifiedDate":"2021-09-02"},{"lineNumber":37,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":38,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":39,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"botr99"},"content":"     * Sets the running state of the ui.","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"botr99"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"botr99"},"content":"     * @param isRunning A boolean value indicating whether ui","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"botr99"},"content":"     *                  should continue to run.","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"botr99"},"content":"    public void setIsRunning(boolean isRunning) {","lastModifiedDate":"2021-09-02"},{"lineNumber":46,"author":{"gitId":"botr99"},"content":"        this.isRunning \u003d isRunning;","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":50,"author":{"gitId":"botr99"},"content":"     * Retrieves the current message of the ui that is set as a response","lastModifiedDate":"2021-09-09"},{"lineNumber":51,"author":{"gitId":"botr99"},"content":"     * to user input.","lastModifiedDate":"2021-09-09"},{"lineNumber":52,"author":{"gitId":"botr99"},"content":"     *","lastModifiedDate":"2021-09-09"},{"lineNumber":53,"author":{"gitId":"botr99"},"content":"     * @param userInput The user input.","lastModifiedDate":"2021-09-09"},{"lineNumber":54,"author":{"gitId":"botr99"},"content":"     * @return A string representing Duke\u0027s response.","lastModifiedDate":"2021-09-09"},{"lineNumber":55,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":56,"author":{"gitId":"botr99"},"content":"    public String getResponse(String userInput) {","lastModifiedDate":"2021-09-08"},{"lineNumber":57,"author":{"gitId":"botr99"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"botr99"},"content":"            Command command \u003d Parser.parseUserInput(userInput);","lastModifiedDate":"2021-09-08"},{"lineNumber":59,"author":{"gitId":"botr99"},"content":"            command.execute(taskList, this, taskStorage);","lastModifiedDate":"2021-09-08"},{"lineNumber":60,"author":{"gitId":"botr99"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"botr99"},"content":"            setCurrentMessage(Message.getDukeExceptionMessage(e));","lastModifiedDate":"2021-09-07"},{"lineNumber":62,"author":{"gitId":"botr99"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":63,"author":{"gitId":"botr99"},"content":"            setCurrentMessage(Message.getTryAgainMessage());","lastModifiedDate":"2021-09-07"},{"lineNumber":64,"author":{"gitId":"botr99"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"botr99"},"content":"        return currentMessage;","lastModifiedDate":"2021-09-07"},{"lineNumber":66,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":67,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":68,"author":{"gitId":"botr99"},"content":"    public void setCurrentMessage(String message) {","lastModifiedDate":"2021-09-07"},{"lineNumber":69,"author":{"gitId":"botr99"},"content":"        currentMessage \u003d message;","lastModifiedDate":"2021-09-07"},{"lineNumber":70,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":71,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":72,"author":{"gitId":"botr99"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":73,"author":{"gitId":"botr99"},"content":"     * Starts the ui.","lastModifiedDate":"2021-09-02"},{"lineNumber":74,"author":{"gitId":"botr99"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":75,"author":{"gitId":"botr99"},"content":"    public abstract void start();","lastModifiedDate":"2021-09-02"},{"lineNumber":76,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":77,"author":{"gitId":"botr99"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"botr99":77}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"botr99"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":2,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"botr99"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"botr99"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"botr99"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"botr99"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"botr99"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"botr99"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"botr99"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" minHeight\u003d\"-Infinity\" /\u003e","lastModifiedDate":"2021-09-09"},{"lineNumber":11,"author":{"gitId":"botr99"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"botr99"},"content":"    \u003c/children\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":13,"author":{"gitId":"botr99"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"botr99"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"botr99"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"botr99"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"botr99":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"botr99"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":2,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"botr99"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"botr99"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"botr99"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"botr99"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"botr99"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"botr99"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"botr99"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"botr99"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"botr99"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":13,"author":{"gitId":"botr99"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"botr99"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"botr99"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"botr99"},"content":"            \u003c/content\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":17,"author":{"gitId":"botr99"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":18,"author":{"gitId":"botr99"},"content":"    \u003c/children\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":19,"author":{"gitId":"botr99"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"botr99":19}},{"path":"src/test/java/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"botr99"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"botr99"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"botr99"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"botr99"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"botr99"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-09-07"},{"lineNumber":9,"author":{"gitId":"botr99"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"botr99"},"content":"public class ParserTest {","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"botr99"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"botr99"},"content":"    public void parseDateTask_noMatchingCommand_returnNull() {","lastModifiedDate":"2021-09-08"},{"lineNumber":14,"author":{"gitId":"botr99"},"content":"        try {","lastModifiedDate":"2021-09-08"},{"lineNumber":15,"author":{"gitId":"botr99"},"content":"            Task task \u003d Parser.parseDateTask(\"homework /by 03/03/2021\", \"todo\");","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"botr99"},"content":"            fail();","lastModifiedDate":"2021-09-08"},{"lineNumber":17,"author":{"gitId":"botr99"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-09-08"},{"lineNumber":18,"author":{"gitId":"botr99"},"content":"            assertEquals(","lastModifiedDate":"2021-09-08"},{"lineNumber":19,"author":{"gitId":"botr99"},"content":"                    \"Invalid command to create a deadline or event.\",","lastModifiedDate":"2021-09-08"},{"lineNumber":20,"author":{"gitId":"botr99"},"content":"                    e.getMessage());","lastModifiedDate":"2021-09-08"},{"lineNumber":21,"author":{"gitId":"botr99"},"content":"        }","lastModifiedDate":"2021-09-08"},{"lineNumber":22,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"botr99"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"botr99"},"content":"    public void parseDateTask_deadlineWithNoBy_dukeExceptionThrown() {","lastModifiedDate":"2021-09-01"},{"lineNumber":26,"author":{"gitId":"botr99"},"content":"        try {","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"botr99"},"content":"            Parser.parseDateTask(\"homework 03/03/2021\", \"deadline\");","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"botr99"},"content":"            fail();","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"botr99"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"botr99"},"content":"            assertEquals(","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"botr99"},"content":"                    \"Oops!!! Deadlines or events should contain a description, followed by \"","lastModifiedDate":"2021-09-01"},{"lineNumber":32,"author":{"gitId":"botr99"},"content":"                            + \"a /by or /at respectively, followed by a date.\",","lastModifiedDate":"2021-09-01"},{"lineNumber":33,"author":{"gitId":"botr99"},"content":"                    e.getMessage());","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"botr99"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"botr99"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"botr99":37}},{"path":"src/test/java/duke/StorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"botr99"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"botr99"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"botr99"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"botr99"},"content":"import java.nio.file.Files;","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"botr99"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"botr99"},"content":"import java.nio.file.StandardCopyOption;","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"botr99"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"botr99"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"botr99"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"botr99"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"botr99"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-09-07"},{"lineNumber":16,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":17,"author":{"gitId":"botr99"},"content":"public class StorageTest {","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"botr99"},"content":"    @BeforeEach","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"botr99"},"content":"    public void createTempFile() throws IOException {","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"botr99"},"content":"        String tempFileLocation \u003d \"src/test/resources/temp.txt\";","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"botr99"},"content":"        // copy contents of validFileFormat.txt over","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"botr99"},"content":"        Files.copy(","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"botr99"},"content":"                Path.of(\"src/test/resources/validFileFormat.txt\"),","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"botr99"},"content":"                Path.of(tempFileLocation),","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"botr99"},"content":"                StandardCopyOption.REPLACE_EXISTING);","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"botr99"},"content":"    @AfterEach","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"botr99"},"content":"    public void deleteTempFile() throws IOException {","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"botr99"},"content":"        Files.delete(Path.of(\"src/test/resources/temp.txt\"));","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"botr99"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"botr99"},"content":"    public void constructor_correctLinesAndSize() throws IOException {","lastModifiedDate":"2021-08-27"},{"lineNumber":35,"author":{"gitId":"botr99"},"content":"        Storage storage \u003d new Storage(\"src/test/resources/temp.txt\");","lastModifiedDate":"2021-08-30"},{"lineNumber":36,"author":{"gitId":"botr99"},"content":"        ArrayList\u003cString\u003e lines \u003d storage.getLines();","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"botr99"},"content":"        String firstLine \u003d \"D | 0 | assignment | 01/09/2021\";","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"botr99"},"content":"        String secondLine \u003d \"E | 1 | concert | 03/10/2021\";","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"botr99"},"content":"        String thirdLine \u003d \"T | 0 | borrow book\";","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"botr99"},"content":"        String fourthLine \u003d \"T | 1 | go school\";","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"botr99"},"content":"        assertEquals(4, lines.size());","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"botr99"},"content":"        assertEquals(firstLine, lines.get(0));","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"botr99"},"content":"        assertEquals(secondLine, lines.get(1));","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"botr99"},"content":"        assertEquals(thirdLine, lines.get(2));","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"botr99"},"content":"        assertEquals(fourthLine, lines.get(3));","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"botr99"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"botr99":49}},{"path":"src/test/java/duke/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"botr99"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"botr99"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"botr99"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"botr99"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"botr99"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-09-07"},{"lineNumber":9,"author":{"gitId":"botr99"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"botr99"},"content":"import duke.task.Event;","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"botr99"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"botr99"},"content":"import duke.task.Todo;","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"botr99"},"content":"public class TaskListTest {","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"botr99"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"botr99"},"content":"    public void addTask_newTask_taskCanBeRetrieved() {","lastModifiedDate":"2021-08-27"},{"lineNumber":17,"author":{"gitId":"botr99"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2021-08-27"},{"lineNumber":18,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"botr99"},"content":"        assertEquals(0, taskList.getSize());","lastModifiedDate":"2021-08-27"},{"lineNumber":20,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"botr99"},"content":"        Task newTask \u003d new Todo(\"go back home\");","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"botr99"},"content":"        taskList.addTask(newTask);","lastModifiedDate":"2021-08-27"},{"lineNumber":23,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"botr99"},"content":"        assertEquals(1, taskList.getSize());","lastModifiedDate":"2021-08-27"},{"lineNumber":25,"author":{"gitId":"botr99"},"content":"        assertEquals(newTask, taskList.getTask(0));","lastModifiedDate":"2021-08-27"},{"lineNumber":26,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"botr99"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"botr99"},"content":"    public void markTask_undoneTask_taskIsDone() throws DukeException {","lastModifiedDate":"2021-08-27"},{"lineNumber":30,"author":{"gitId":"botr99"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2021-09-07"},{"lineNumber":31,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"botr99"},"content":"        Task firstTask \u003d new Deadline(\"assignment\", \"01/09/2021\");","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"botr99"},"content":"        taskList.addTask(firstTask);","lastModifiedDate":"2021-09-07"},{"lineNumber":34,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":35,"author":{"gitId":"botr99"},"content":"        assertEquals(firstTask, taskList.getTask(0));","lastModifiedDate":"2021-09-07"},{"lineNumber":36,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"botr99"},"content":"        // after marking both tasks as done, both tasks should still be equal","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"botr99"},"content":"        firstTask.markAsDone();","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"botr99"},"content":"        taskList.markTask(1);","lastModifiedDate":"2021-09-07"},{"lineNumber":40,"author":{"gitId":"botr99"},"content":"        assertEquals(firstTask, taskList.getTask(0));","lastModifiedDate":"2021-09-07"},{"lineNumber":41,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"botr99"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"botr99"},"content":"    public void deleteTask_taskCannotBeRetrieved() throws DukeException {","lastModifiedDate":"2021-08-27"},{"lineNumber":45,"author":{"gitId":"botr99"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2021-09-07"},{"lineNumber":46,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"botr99"},"content":"        Task firstTask \u003d new Todo(\"go library\");","lastModifiedDate":"2021-08-27"},{"lineNumber":48,"author":{"gitId":"botr99"},"content":"        Task secondTask \u003d new Event(\"concert\", \"03/08/2021\");","lastModifiedDate":"2021-08-27"},{"lineNumber":49,"author":{"gitId":"botr99"},"content":"        Task thirdTask \u003d new Todo(\"borrow book\");","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"botr99"},"content":"        taskList.addTask(firstTask);","lastModifiedDate":"2021-09-07"},{"lineNumber":51,"author":{"gitId":"botr99"},"content":"        taskList.addTask(secondTask);","lastModifiedDate":"2021-09-07"},{"lineNumber":52,"author":{"gitId":"botr99"},"content":"        taskList.addTask(thirdTask);","lastModifiedDate":"2021-09-07"},{"lineNumber":53,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":54,"author":{"gitId":"botr99"},"content":"        assertEquals(3, taskList.getSize());","lastModifiedDate":"2021-09-07"},{"lineNumber":55,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":56,"author":{"gitId":"botr99"},"content":"        taskList.deleteTask(3);","lastModifiedDate":"2021-09-07"},{"lineNumber":57,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"botr99"},"content":"        assertEquals(2, taskList.getSize());","lastModifiedDate":"2021-09-07"},{"lineNumber":59,"author":{"gitId":"botr99"},"content":"        assertNotEquals(thirdTask, taskList.getTask(0));","lastModifiedDate":"2021-09-07"},{"lineNumber":60,"author":{"gitId":"botr99"},"content":"        assertNotEquals(thirdTask, taskList.getTask(1));","lastModifiedDate":"2021-09-07"},{"lineNumber":61,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":63,"author":{"gitId":"botr99"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"botr99":63}},{"path":"src/test/java/duke/TaskStorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"botr99"},"content":"package duke;","lastModifiedDate":"2021-08-27"},{"lineNumber":2,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":3,"author":{"gitId":"botr99"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"botr99"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":6,"author":{"gitId":"botr99"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-27"},{"lineNumber":7,"author":{"gitId":"botr99"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-27"},{"lineNumber":8,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":9,"author":{"gitId":"botr99"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"botr99"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-09-07"},{"lineNumber":12,"author":{"gitId":"botr99"},"content":"import duke.exception.FileParseException;","lastModifiedDate":"2021-09-07"},{"lineNumber":13,"author":{"gitId":"botr99"},"content":"import duke.storage.TaskStorage;","lastModifiedDate":"2021-09-07"},{"lineNumber":14,"author":{"gitId":"botr99"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"botr99"},"content":"import duke.task.Event;","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"botr99"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-01"},{"lineNumber":17,"author":{"gitId":"botr99"},"content":"import duke.task.Todo;","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":19,"author":{"gitId":"botr99"},"content":"public class TaskStorageTest {","lastModifiedDate":"2021-08-27"},{"lineNumber":20,"author":{"gitId":"botr99"},"content":"    @Test","lastModifiedDate":"2021-08-27"},{"lineNumber":21,"author":{"gitId":"botr99"},"content":"    public void loadTasks_invalidFileFormat_fileParseExceptionThrown() throws IOException {","lastModifiedDate":"2021-08-27"},{"lineNumber":22,"author":{"gitId":"botr99"},"content":"        String invalidFileLocation \u003d \"src/test/resources/invalidFileFormat.txt\";","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"botr99"},"content":"        try {","lastModifiedDate":"2021-08-27"},{"lineNumber":24,"author":{"gitId":"botr99"},"content":"            new TaskStorage(invalidFileLocation).loadTasks();","lastModifiedDate":"2021-08-27"},{"lineNumber":25,"author":{"gitId":"botr99"},"content":"            fail();","lastModifiedDate":"2021-08-27"},{"lineNumber":26,"author":{"gitId":"botr99"},"content":"        } catch (FileParseException e) {","lastModifiedDate":"2021-08-27"},{"lineNumber":27,"author":{"gitId":"botr99"},"content":"            assertEquals(","lastModifiedDate":"2021-08-27"},{"lineNumber":28,"author":{"gitId":"botr99"},"content":"                    \"The contents of the file in storage are formatted wrongly.\",","lastModifiedDate":"2021-08-27"},{"lineNumber":29,"author":{"gitId":"botr99"},"content":"                    e.getMessage());","lastModifiedDate":"2021-08-27"},{"lineNumber":30,"author":{"gitId":"botr99"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":31,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":32,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":33,"author":{"gitId":"botr99"},"content":"    @Test","lastModifiedDate":"2021-08-27"},{"lineNumber":34,"author":{"gitId":"botr99"},"content":"    public void loadTasks_correctTasksAndSize() throws DukeException, IOException, FileParseException {","lastModifiedDate":"2021-08-27"},{"lineNumber":35,"author":{"gitId":"botr99"},"content":"        Task firstTask \u003d new Deadline(\"assignment\", \"01/09/2021\");","lastModifiedDate":"2021-08-27"},{"lineNumber":36,"author":{"gitId":"botr99"},"content":"        Task secondTask \u003d new Event(\"concert\", \"03/10/2021\");","lastModifiedDate":"2021-08-27"},{"lineNumber":37,"author":{"gitId":"botr99"},"content":"        secondTask.markAsDone();","lastModifiedDate":"2021-08-27"},{"lineNumber":38,"author":{"gitId":"botr99"},"content":"        Task thirdTask \u003d new Todo(\"borrow book\");","lastModifiedDate":"2021-08-27"},{"lineNumber":39,"author":{"gitId":"botr99"},"content":"        Task fourthTask \u003d new Todo(\"go school\");","lastModifiedDate":"2021-08-27"},{"lineNumber":40,"author":{"gitId":"botr99"},"content":"        fourthTask.markAsDone();","lastModifiedDate":"2021-08-27"},{"lineNumber":41,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":42,"author":{"gitId":"botr99"},"content":"        String validFileLocation \u003d \"src/test/resources/validFileFormat.txt\";","lastModifiedDate":"2021-08-30"},{"lineNumber":43,"author":{"gitId":"botr99"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new TaskStorage(validFileLocation).loadTasks();","lastModifiedDate":"2021-08-27"},{"lineNumber":44,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":45,"author":{"gitId":"botr99"},"content":"        assertEquals(4, tasks.size());","lastModifiedDate":"2021-08-27"},{"lineNumber":46,"author":{"gitId":"botr99"},"content":"        assertEquals(firstTask, tasks.get(0));","lastModifiedDate":"2021-08-27"},{"lineNumber":47,"author":{"gitId":"botr99"},"content":"        assertEquals(secondTask, tasks.get(1));","lastModifiedDate":"2021-08-27"},{"lineNumber":48,"author":{"gitId":"botr99"},"content":"        assertEquals(thirdTask, tasks.get(2));","lastModifiedDate":"2021-08-27"},{"lineNumber":49,"author":{"gitId":"botr99"},"content":"        assertEquals(fourthTask, tasks.get(3));","lastModifiedDate":"2021-08-27"},{"lineNumber":50,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":51,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":52,"author":{"gitId":"botr99"},"content":"}","lastModifiedDate":"2021-08-27"}],"authorContributionMap":{"botr99":52}},{"path":"src/test/java/duke/task/DateTaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"botr99"},"content":"package duke.task;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"botr99"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"botr99"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"botr99"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"botr99"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-09-07"},{"lineNumber":9,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"botr99"},"content":"public class DateTaskTest {","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"botr99"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"botr99"},"content":"    public void constructor_invalidDateString_dukeExceptionThrown() {","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"botr99"},"content":"        try {","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"botr99"},"content":"            new ConcreteDateTask(\"test\", \"05/5/2020\", false);","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"botr99"},"content":"            fail();","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"botr99"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"botr99"},"content":"            assertEquals(","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"botr99"},"content":"                    \"Oops!!! Date should be in this format: dd/MM/yyyy\",","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"botr99"},"content":"                    e.getMessage());","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"botr99"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"botr99"},"content":"}","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"botr99"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"botr99"},"content":"class ConcreteDateTask extends DateTask {","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"botr99"},"content":"    public ConcreteDateTask(String description, String dateString, boolean isDone) throws DukeException {","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"botr99"},"content":"        super(description, dateString, isDone);","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"botr99"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"botr99"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"botr99":29}},{"path":"src/test/resources/invalidFileFormat.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"botr99"},"content":"D | 0 | assignment | 1/9/2021","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"botr99"},"content":"E | 1 || concert | 03/10/2021","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"botr99"},"content":"T | 0 |","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"botr99"},"content":"T | 1 | go school","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"botr99":4}},{"path":"src/test/resources/validFileFormat.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"botr99"},"content":"D | 0 | assignment | 01/09/2021","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"botr99"},"content":"E | 1 | concert | 03/10/2021","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"botr99"},"content":"T | 0 | borrow book","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"botr99"},"content":"T | 1 | go school","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"botr99":4}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"botr99"},"content":"todo borrow book","lastModifiedDate":"2021-08-18"},{"lineNumber":2,"author":{"gitId":"botr99"},"content":"   deadline   return book   /by   03/09/2021","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"botr99"},"content":"event project meeting /at 06/10/2021","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"botr99"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"botr99"},"content":"done 1","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"botr99"},"content":"done 3","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"botr99"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"botr99"},"content":"done 0","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"botr99"},"content":"done 4","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"botr99"},"content":"done hello","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"botr99"},"content":"todo","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"botr99"},"content":"deadline /by 04/09/2021","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"botr99"},"content":"event meet friends /at","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"botr99"},"content":"deadline","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"botr99"},"content":"event concert /at 2021/09/04","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"botr99"},"content":"blah","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"botr99"},"content":"delete 1","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"botr99"},"content":"delete -5","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"botr99"},"content":"delete","lastModifiedDate":"2021-08-19"},{"lineNumber":20,"author":{"gitId":"botr99"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":21,"author":{"gitId":"botr99"},"content":"bye","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"botr99":21}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"botr99"},"content":"javac  -cp ..\\src\\main\\java\\duke -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"botr99":1,"-":20}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"botr99"},"content":"if ! javac -cp ../src/main/java/duke -Xlint:none -d ../bin ../src/main/java/duke/*.java","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"botr99":1,"-":37}}]

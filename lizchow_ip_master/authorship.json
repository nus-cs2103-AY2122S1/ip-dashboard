[{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lizchow"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"lizchow"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"lizchow"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"lizchow"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"lizchow"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"lizchow"},"content":"    // End date of the Deadline object","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"lizchow"},"content":"    private LocalDateTime endDate;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"lizchow"},"content":"    private final DateTimeFormatter FORMATTER \u003d DateTimeFormatter.ofPattern(\"d-M-yyyy H:mm\");","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"lizchow"},"content":"    private final DateTimeFormatter PRINT_FORMATTER \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy h:mma\");","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"lizchow"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"lizchow"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"lizchow"},"content":"     * Constructor of a Deadline object.","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"lizchow"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"lizchow"},"content":"     * @param title   title of the Deadline task","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"lizchow"},"content":"     * @param endDate endDate of the Deadline task","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"lizchow"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"lizchow"},"content":"    public Deadline(String title, String endDate) {","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"lizchow"},"content":"        super(title);","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"lizchow"},"content":"        this.endDate \u003d parseDateTime(endDate.trim());","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"lizchow"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"lizchow"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"lizchow"},"content":"    public Deadline(String title, String endDate, boolean isDone) {","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"lizchow"},"content":"        super(title, isDone);","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"lizchow"},"content":"        this.endDate \u003d parseDateTime(endDate.trim());","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"lizchow"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"lizchow"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"lizchow"},"content":"    private LocalDateTime parseDateTime(String date) {","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"lizchow"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"lizchow"},"content":"            LocalDateTime parsedDateTime \u003d LocalDateTime.parse(date, FORMATTER);","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"lizchow"},"content":"            return parsedDateTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"lizchow"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"lizchow"},"content":"            throw new DukeException(\"Invalid datetime format.\\n\"","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"lizchow"},"content":"                    + \"\\tOnly take in datetime with the format d-M-yyyy H:mm\\n\"","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"lizchow"},"content":"                    + \"\\tNote that time should be in 24 hour format.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"lizchow"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"lizchow"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":37,"author":{"gitId":"lizchow"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":38,"author":{"gitId":"lizchow"},"content":"    ","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"lizchow"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"lizchow"},"content":"    public String toFileString() {","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"lizchow"},"content":"        return String.format(\"D | %s | %s\", super.toFileString(), endDate.format(PRINT_FORMATTER));","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"lizchow"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"lizchow"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"lizchow"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":45,"author":{"gitId":"lizchow"},"content":"     * Return a String representation of a Deadline task. Starts \"[D]\" to indicate","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"lizchow"},"content":"     * that it is a Deadline task.","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"lizchow"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":48,"author":{"gitId":"lizchow"},"content":"     * @return String representation of an Deadline.","lastModifiedDate":"2021-08-18"},{"lineNumber":49,"author":{"gitId":"lizchow"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":50,"author":{"gitId":"lizchow"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":51,"author":{"gitId":"lizchow"},"content":"        return String.format(\"[D]%s (by: %s)\", super.toString(), endDate.format(PRINT_FORMATTER));","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"lizchow"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":53,"author":{"gitId":"lizchow"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"lizchow":53}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lizchow"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-16"},{"lineNumber":2,"author":{"gitId":"lizchow"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"lizchow"},"content":"import java.io.File;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"lizchow"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"lizchow"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"lizchow"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"lizchow"},"content":"import java.io.PrintWriter;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"lizchow"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":10,"author":{"gitId":"lizchow"},"content":"    private final ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"lizchow"},"content":"    private static final String FILE_PATH \u003d \"./data/duke.txt\";","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"lizchow"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"lizchow"},"content":"    private enum Action {","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"lizchow"},"content":"        BYE(\"bye\"), DEADLINE(\"deadline\"), DELETE(\"delete\"), DONE(\"done\"), EVENT(\"event\"), LIST(\"list\"), TODO(\"todo\");","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"lizchow"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"lizchow"},"content":"        private final String name;","lastModifiedDate":"2021-08-19"},{"lineNumber":17,"author":{"gitId":"lizchow"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"lizchow"},"content":"        Action(String name) {","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"lizchow"},"content":"            this.name \u003d name;","lastModifiedDate":"2021-08-19"},{"lineNumber":20,"author":{"gitId":"lizchow"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":21,"author":{"gitId":"lizchow"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":22,"author":{"gitId":"lizchow"},"content":"        public String getName() {","lastModifiedDate":"2021-08-19"},{"lineNumber":23,"author":{"gitId":"lizchow"},"content":"            return name;","lastModifiedDate":"2021-08-19"},{"lineNumber":24,"author":{"gitId":"lizchow"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":25,"author":{"gitId":"lizchow"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":26,"author":{"gitId":"lizchow"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":27,"author":{"gitId":"lizchow"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":28,"author":{"gitId":"lizchow"},"content":"     * Print with 4 spaces infront of param str.","lastModifiedDate":"2021-08-16"},{"lineNumber":29,"author":{"gitId":"lizchow"},"content":"     *","lastModifiedDate":"2021-08-16"},{"lineNumber":30,"author":{"gitId":"lizchow"},"content":"     * @param str A String to be printed","lastModifiedDate":"2021-08-16"},{"lineNumber":31,"author":{"gitId":"lizchow"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":32,"author":{"gitId":"lizchow"},"content":"    public static void printWithTabIndent(String str) {","lastModifiedDate":"2021-08-16"},{"lineNumber":33,"author":{"gitId":"lizchow"},"content":"        System.out.println(\"\\t\" + str);","lastModifiedDate":"2021-08-19"},{"lineNumber":34,"author":{"gitId":"lizchow"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":35,"author":{"gitId":"lizchow"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":36,"author":{"gitId":"lizchow"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":37,"author":{"gitId":"lizchow"},"content":"     * Print horizontal line.","lastModifiedDate":"2021-08-16"},{"lineNumber":38,"author":{"gitId":"lizchow"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":39,"author":{"gitId":"lizchow"},"content":"    public static void printLine() {","lastModifiedDate":"2021-08-16"},{"lineNumber":40,"author":{"gitId":"lizchow"},"content":"        printWithTabIndent(\"-------------------------------------------------------------\");","lastModifiedDate":"2021-08-19"},{"lineNumber":41,"author":{"gitId":"lizchow"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":42,"author":{"gitId":"lizchow"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":43,"author":{"gitId":"lizchow"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":44,"author":{"gitId":"lizchow"},"content":"     * Pretty print the message with the horizontal lines and the param message.","lastModifiedDate":"2021-08-16"},{"lineNumber":45,"author":{"gitId":"lizchow"},"content":"     *","lastModifiedDate":"2021-08-16"},{"lineNumber":46,"author":{"gitId":"lizchow"},"content":"     * @param message A String to be printed","lastModifiedDate":"2021-08-16"},{"lineNumber":47,"author":{"gitId":"lizchow"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":48,"author":{"gitId":"lizchow"},"content":"    public static void printMessage(String message) {","lastModifiedDate":"2021-08-16"},{"lineNumber":49,"author":{"gitId":"lizchow"},"content":"        printLine();","lastModifiedDate":"2021-08-16"},{"lineNumber":50,"author":{"gitId":"lizchow"},"content":"        printWithTabIndent(message);","lastModifiedDate":"2021-08-16"},{"lineNumber":51,"author":{"gitId":"lizchow"},"content":"        printLine();","lastModifiedDate":"2021-08-16"},{"lineNumber":52,"author":{"gitId":"lizchow"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":53,"author":{"gitId":"lizchow"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":54,"author":{"gitId":"lizchow"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":55,"author":{"gitId":"lizchow"},"content":"     * Pretty print the message with the horizontal lines and the param message.","lastModifiedDate":"2021-08-18"},{"lineNumber":56,"author":{"gitId":"lizchow"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":57,"author":{"gitId":"lizchow"},"content":"     * @param message A String to be printed","lastModifiedDate":"2021-08-18"},{"lineNumber":58,"author":{"gitId":"lizchow"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":59,"author":{"gitId":"lizchow"},"content":"    public void printAddMessage(String message, String taskTitle) {","lastModifiedDate":"2021-08-18"},{"lineNumber":60,"author":{"gitId":"lizchow"},"content":"        printLine();","lastModifiedDate":"2021-08-18"},{"lineNumber":61,"author":{"gitId":"lizchow"},"content":"        printWithTabIndent(message);","lastModifiedDate":"2021-08-18"},{"lineNumber":62,"author":{"gitId":"lizchow"},"content":"        printWithTabIndent(\"  \" + taskTitle);","lastModifiedDate":"2021-08-18"},{"lineNumber":63,"author":{"gitId":"lizchow"},"content":"        printWithTabIndent(String.format(\"Now you have %d tasks in the list.\", tasks.size()));","lastModifiedDate":"2021-08-19"},{"lineNumber":64,"author":{"gitId":"lizchow"},"content":"        printLine();","lastModifiedDate":"2021-08-18"},{"lineNumber":65,"author":{"gitId":"lizchow"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":66,"author":{"gitId":"lizchow"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":67,"author":{"gitId":"lizchow"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":68,"author":{"gitId":"lizchow"},"content":"     * Pretty print the tasks list with the horizontal lines.","lastModifiedDate":"2021-08-16"},{"lineNumber":69,"author":{"gitId":"lizchow"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":70,"author":{"gitId":"lizchow"},"content":"    public void printTasks() {","lastModifiedDate":"2021-08-17"},{"lineNumber":71,"author":{"gitId":"lizchow"},"content":"        if (tasks.isEmpty()) {","lastModifiedDate":"2021-08-19"},{"lineNumber":72,"author":{"gitId":"lizchow"},"content":"            printMessage(\"Nothing in the list!\");","lastModifiedDate":"2021-08-17"},{"lineNumber":73,"author":{"gitId":"lizchow"},"content":"        } else {","lastModifiedDate":"2021-08-17"},{"lineNumber":74,"author":{"gitId":"lizchow"},"content":"            printLine();","lastModifiedDate":"2021-08-16"},{"lineNumber":75,"author":{"gitId":"lizchow"},"content":"            for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2021-08-19"},{"lineNumber":76,"author":{"gitId":"lizchow"},"content":"                printWithTabIndent(String.format(\"%d. %s\", i + 1, tasks.get(i).toString()));","lastModifiedDate":"2021-08-19"},{"lineNumber":77,"author":{"gitId":"lizchow"},"content":"            }","lastModifiedDate":"2021-08-16"},{"lineNumber":78,"author":{"gitId":"lizchow"},"content":"            printLine();","lastModifiedDate":"2021-08-16"},{"lineNumber":79,"author":{"gitId":"lizchow"},"content":"        }","lastModifiedDate":"2021-08-16"},{"lineNumber":80,"author":{"gitId":"lizchow"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":81,"author":{"gitId":"lizchow"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":82,"author":{"gitId":"lizchow"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":83,"author":{"gitId":"lizchow"},"content":"     * Marks the corresponding task as done. If message does not contain a number,","lastModifiedDate":"2021-08-25"},{"lineNumber":84,"author":{"gitId":"lizchow"},"content":"     * this method will print an error message.","lastModifiedDate":"2021-08-25"},{"lineNumber":85,"author":{"gitId":"lizchow"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":86,"author":{"gitId":"lizchow"},"content":"     * @param taskNo String user input","lastModifiedDate":"2021-08-19"},{"lineNumber":87,"author":{"gitId":"lizchow"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":88,"author":{"gitId":"lizchow"},"content":"    public void markTaskDone(String taskNo) throws DukeException {","lastModifiedDate":"2021-08-19"},{"lineNumber":89,"author":{"gitId":"lizchow"},"content":"        try {","lastModifiedDate":"2021-08-16"},{"lineNumber":90,"author":{"gitId":"lizchow"},"content":"            validateActionDescription(taskNo, Action.DONE);","lastModifiedDate":"2021-08-19"},{"lineNumber":91,"author":{"gitId":"lizchow"},"content":"            Task selectedTask \u003d tasks.get(Integer.parseInt(taskNo) - 1);","lastModifiedDate":"2021-08-19"},{"lineNumber":92,"author":{"gitId":"lizchow"},"content":"            if (selectedTask.isDone()) {","lastModifiedDate":"2021-08-19"},{"lineNumber":93,"author":{"gitId":"lizchow"},"content":"                printMessage(String.format(\"Task %s is already done!\\n\\t  %s\", taskNo, selectedTask));","lastModifiedDate":"2021-08-25"},{"lineNumber":94,"author":{"gitId":"lizchow"},"content":"            } else {","lastModifiedDate":"2021-08-16"},{"lineNumber":95,"author":{"gitId":"lizchow"},"content":"                selectedTask.markAsDone();","lastModifiedDate":"2021-08-19"},{"lineNumber":96,"author":{"gitId":"lizchow"},"content":"                printMessage(String.format(\"Nice! I\u0027ve marked this task as done:\\n\\t  %s\", selectedTask));","lastModifiedDate":"2021-08-25"},{"lineNumber":97,"author":{"gitId":"lizchow"},"content":"            }","lastModifiedDate":"2021-08-16"},{"lineNumber":98,"author":{"gitId":"lizchow"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-08-16"},{"lineNumber":99,"author":{"gitId":"lizchow"},"content":"            throw new DukeException(\"Enter a number for a done action!\");","lastModifiedDate":"2021-08-19"},{"lineNumber":100,"author":{"gitId":"lizchow"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-19"},{"lineNumber":101,"author":{"gitId":"lizchow"},"content":"            if (tasks.isEmpty()) {","lastModifiedDate":"2021-08-19"},{"lineNumber":102,"author":{"gitId":"lizchow"},"content":"                throw new DukeException(\"Nothing in the list!\");","lastModifiedDate":"2021-08-19"},{"lineNumber":103,"author":{"gitId":"lizchow"},"content":"            }","lastModifiedDate":"2021-08-19"},{"lineNumber":104,"author":{"gitId":"lizchow"},"content":"            throw new DukeException(String.format(\"Enter a valid number between 1 - %d\", tasks.size()));","lastModifiedDate":"2021-08-19"},{"lineNumber":105,"author":{"gitId":"lizchow"},"content":"        }","lastModifiedDate":"2021-08-17"},{"lineNumber":106,"author":{"gitId":"lizchow"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":107,"author":{"gitId":"lizchow"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":108,"author":{"gitId":"lizchow"},"content":"    private Task lastTask() {","lastModifiedDate":"2021-08-19"},{"lineNumber":109,"author":{"gitId":"lizchow"},"content":"        return tasks.get(tasks.size() - 1);","lastModifiedDate":"2021-08-19"},{"lineNumber":110,"author":{"gitId":"lizchow"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":111,"author":{"gitId":"lizchow"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":112,"author":{"gitId":"lizchow"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":113,"author":{"gitId":"lizchow"},"content":"     * Add a Todo task to tasks.","lastModifiedDate":"2021-08-18"},{"lineNumber":114,"author":{"gitId":"lizchow"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":115,"author":{"gitId":"lizchow"},"content":"     * @param message String user input. Should start with \"todo\"","lastModifiedDate":"2021-08-18"},{"lineNumber":116,"author":{"gitId":"lizchow"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":117,"author":{"gitId":"lizchow"},"content":"    public void addTodoTask(String message) throws DukeException {","lastModifiedDate":"2021-08-19"},{"lineNumber":118,"author":{"gitId":"lizchow"},"content":"        validateActionDescription(message, Action.TODO);","lastModifiedDate":"2021-08-19"},{"lineNumber":119,"author":{"gitId":"lizchow"},"content":"        tasks.add(new Todo(message.replace(\"todo \", \"\")));","lastModifiedDate":"2021-08-19"},{"lineNumber":120,"author":{"gitId":"lizchow"},"content":"        printAddMessage(\"Got it. I\u0027ve  added this task:\", lastTask().toString());","lastModifiedDate":"2021-08-19"},{"lineNumber":121,"author":{"gitId":"lizchow"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":122,"author":{"gitId":"lizchow"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":123,"author":{"gitId":"lizchow"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":124,"author":{"gitId":"lizchow"},"content":"     * Add a Deadline task to tasks. Throws DukeException if deadline description or","lastModifiedDate":"2021-08-25"},{"lineNumber":125,"author":{"gitId":"lizchow"},"content":"     * end time is missing.","lastModifiedDate":"2021-08-25"},{"lineNumber":126,"author":{"gitId":"lizchow"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":127,"author":{"gitId":"lizchow"},"content":"     * @param message String user input. Should start with \"deadline\"","lastModifiedDate":"2021-08-18"},{"lineNumber":128,"author":{"gitId":"lizchow"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":129,"author":{"gitId":"lizchow"},"content":"    public void addDeadlineTask(String message) throws DukeException {","lastModifiedDate":"2021-08-19"},{"lineNumber":130,"author":{"gitId":"lizchow"},"content":"        try {","lastModifiedDate":"2021-08-19"},{"lineNumber":131,"author":{"gitId":"lizchow"},"content":"            String taskDescription \u003d message.replaceAll(\"/by.*\", \"\");","lastModifiedDate":"2021-08-19"},{"lineNumber":132,"author":{"gitId":"lizchow"},"content":"            validateActionDescription(taskDescription, Action.DEADLINE);","lastModifiedDate":"2021-08-19"},{"lineNumber":133,"author":{"gitId":"lizchow"},"content":"            String deadline \u003d message.split(\"/by\")[1];","lastModifiedDate":"2021-08-19"},{"lineNumber":134,"author":{"gitId":"lizchow"},"content":"            tasks.add(new Deadline(taskDescription, deadline));","lastModifiedDate":"2021-08-19"},{"lineNumber":135,"author":{"gitId":"lizchow"},"content":"            printAddMessage(\"Got it. I\u0027ve  added this task:\", lastTask().toString());","lastModifiedDate":"2021-08-19"},{"lineNumber":136,"author":{"gitId":"lizchow"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-19"},{"lineNumber":137,"author":{"gitId":"lizchow"},"content":"            throw new DukeException(\"The end time of a deadline cannot be empty.\");","lastModifiedDate":"2021-08-19"},{"lineNumber":138,"author":{"gitId":"lizchow"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":139,"author":{"gitId":"lizchow"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":140,"author":{"gitId":"lizchow"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":141,"author":{"gitId":"lizchow"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":142,"author":{"gitId":"lizchow"},"content":"     * Add an Event task to tasks. Throws DukeException if event description or","lastModifiedDate":"2021-08-25"},{"lineNumber":143,"author":{"gitId":"lizchow"},"content":"     * deadline is missing.","lastModifiedDate":"2021-08-25"},{"lineNumber":144,"author":{"gitId":"lizchow"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":145,"author":{"gitId":"lizchow"},"content":"     * @param message String user input","lastModifiedDate":"2021-08-19"},{"lineNumber":146,"author":{"gitId":"lizchow"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":147,"author":{"gitId":"lizchow"},"content":"    public void addEventTask(String message) throws DukeException {","lastModifiedDate":"2021-08-19"},{"lineNumber":148,"author":{"gitId":"lizchow"},"content":"        try {","lastModifiedDate":"2021-08-19"},{"lineNumber":149,"author":{"gitId":"lizchow"},"content":"            String taskDescription \u003d message.replaceAll(\"/at.*\", \"\");","lastModifiedDate":"2021-08-19"},{"lineNumber":150,"author":{"gitId":"lizchow"},"content":"            validateActionDescription(taskDescription, Action.EVENT);","lastModifiedDate":"2021-08-19"},{"lineNumber":151,"author":{"gitId":"lizchow"},"content":"            String deadline \u003d message.split(\"/at\")[1];","lastModifiedDate":"2021-08-19"},{"lineNumber":152,"author":{"gitId":"lizchow"},"content":"            tasks.add(new Event(taskDescription, deadline));","lastModifiedDate":"2021-08-19"},{"lineNumber":153,"author":{"gitId":"lizchow"},"content":"            printAddMessage(\"Got it. I\u0027ve  added this task:\", lastTask().toString());","lastModifiedDate":"2021-08-19"},{"lineNumber":154,"author":{"gitId":"lizchow"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-19"},{"lineNumber":155,"author":{"gitId":"lizchow"},"content":"            throw new DukeException(\"The start and end time of a event cannot be empty.\");","lastModifiedDate":"2021-08-19"},{"lineNumber":156,"author":{"gitId":"lizchow"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":157,"author":{"gitId":"lizchow"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":158,"author":{"gitId":"lizchow"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":159,"author":{"gitId":"lizchow"},"content":"    public void deleteTask(String message) throws DukeException {","lastModifiedDate":"2021-08-19"},{"lineNumber":160,"author":{"gitId":"lizchow"},"content":"        try {","lastModifiedDate":"2021-08-19"},{"lineNumber":161,"author":{"gitId":"lizchow"},"content":"            validateActionDescription(message, Action.DELETE);","lastModifiedDate":"2021-08-19"},{"lineNumber":162,"author":{"gitId":"lizchow"},"content":"            Task selectedTask \u003d tasks.get(Integer.parseInt(message) - 1);","lastModifiedDate":"2021-08-19"},{"lineNumber":163,"author":{"gitId":"lizchow"},"content":"            tasks.remove(selectedTask);","lastModifiedDate":"2021-08-19"},{"lineNumber":164,"author":{"gitId":"lizchow"},"content":"            printAddMessage(\"Noted. I\u0027ve removed this task:\", selectedTask.toString());","lastModifiedDate":"2021-08-19"},{"lineNumber":165,"author":{"gitId":"lizchow"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-08-19"},{"lineNumber":166,"author":{"gitId":"lizchow"},"content":"            throw new DukeException(\"Enter a number for a delete action\");","lastModifiedDate":"2021-08-19"},{"lineNumber":167,"author":{"gitId":"lizchow"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-19"},{"lineNumber":168,"author":{"gitId":"lizchow"},"content":"            if (tasks.isEmpty()) {","lastModifiedDate":"2021-08-19"},{"lineNumber":169,"author":{"gitId":"lizchow"},"content":"                throw new DukeException(\"Nothing in the list to delete!\");","lastModifiedDate":"2021-08-19"},{"lineNumber":170,"author":{"gitId":"lizchow"},"content":"            }","lastModifiedDate":"2021-08-19"},{"lineNumber":171,"author":{"gitId":"lizchow"},"content":"            throw new DukeException(String.format(\"Enter a valid number between 1 - %d\", tasks.size()));","lastModifiedDate":"2021-08-19"},{"lineNumber":172,"author":{"gitId":"lizchow"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":173,"author":{"gitId":"lizchow"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":174,"author":{"gitId":"lizchow"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":175,"author":{"gitId":"lizchow"},"content":"    private void validateActionDescription(String input, Action type) throws DukeException {","lastModifiedDate":"2021-08-19"},{"lineNumber":176,"author":{"gitId":"lizchow"},"content":"        if (input.isEmpty()) {","lastModifiedDate":"2021-08-19"},{"lineNumber":177,"author":{"gitId":"lizchow"},"content":"            throw new DukeException(String.format(\"The description of a %s cannot be empty.\", type.getName()));","lastModifiedDate":"2021-08-19"},{"lineNumber":178,"author":{"gitId":"lizchow"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":179,"author":{"gitId":"lizchow"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":180,"author":{"gitId":"lizchow"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":181,"author":{"gitId":"lizchow"},"content":"    public boolean handleInput(String message) throws DukeException {","lastModifiedDate":"2021-08-19"},{"lineNumber":182,"author":{"gitId":"lizchow"},"content":"        try {","lastModifiedDate":"2021-08-19"},{"lineNumber":183,"author":{"gitId":"lizchow"},"content":"            String inputAction \u003d message.split(\" \")[0];","lastModifiedDate":"2021-08-19"},{"lineNumber":184,"author":{"gitId":"lizchow"},"content":"            Action actionEnum \u003d Action.valueOf(inputAction.toUpperCase());","lastModifiedDate":"2021-08-19"},{"lineNumber":185,"author":{"gitId":"lizchow"},"content":"            String parsedMessage \u003d message.replace(inputAction, \"\").trim();","lastModifiedDate":"2021-08-19"},{"lineNumber":186,"author":{"gitId":"lizchow"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":187,"author":{"gitId":"lizchow"},"content":"            switch (actionEnum) {","lastModifiedDate":"2021-08-19"},{"lineNumber":188,"author":{"gitId":"lizchow"},"content":"                case BYE:","lastModifiedDate":"2021-08-19"},{"lineNumber":189,"author":{"gitId":"lizchow"},"content":"                    printMessage(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2021-08-19"},{"lineNumber":190,"author":{"gitId":"lizchow"},"content":"                    return false;","lastModifiedDate":"2021-08-19"},{"lineNumber":191,"author":{"gitId":"lizchow"},"content":"                case DEADLINE:","lastModifiedDate":"2021-08-19"},{"lineNumber":192,"author":{"gitId":"lizchow"},"content":"                    addDeadlineTask(parsedMessage);","lastModifiedDate":"2021-08-19"},{"lineNumber":193,"author":{"gitId":"lizchow"},"content":"                    break;","lastModifiedDate":"2021-08-19"},{"lineNumber":194,"author":{"gitId":"lizchow"},"content":"                case DELETE:","lastModifiedDate":"2021-08-19"},{"lineNumber":195,"author":{"gitId":"lizchow"},"content":"                    deleteTask(parsedMessage);","lastModifiedDate":"2021-08-19"},{"lineNumber":196,"author":{"gitId":"lizchow"},"content":"                    break;","lastModifiedDate":"2021-08-19"},{"lineNumber":197,"author":{"gitId":"lizchow"},"content":"                case DONE:","lastModifiedDate":"2021-08-19"},{"lineNumber":198,"author":{"gitId":"lizchow"},"content":"                    markTaskDone(parsedMessage);","lastModifiedDate":"2021-08-19"},{"lineNumber":199,"author":{"gitId":"lizchow"},"content":"                    break;","lastModifiedDate":"2021-08-19"},{"lineNumber":200,"author":{"gitId":"lizchow"},"content":"                case EVENT:","lastModifiedDate":"2021-08-19"},{"lineNumber":201,"author":{"gitId":"lizchow"},"content":"                    addEventTask(parsedMessage);","lastModifiedDate":"2021-08-19"},{"lineNumber":202,"author":{"gitId":"lizchow"},"content":"                    break;","lastModifiedDate":"2021-08-19"},{"lineNumber":203,"author":{"gitId":"lizchow"},"content":"                case LIST:","lastModifiedDate":"2021-08-19"},{"lineNumber":204,"author":{"gitId":"lizchow"},"content":"                    printTasks();","lastModifiedDate":"2021-08-19"},{"lineNumber":205,"author":{"gitId":"lizchow"},"content":"                    break;","lastModifiedDate":"2021-08-19"},{"lineNumber":206,"author":{"gitId":"lizchow"},"content":"                case TODO:","lastModifiedDate":"2021-08-19"},{"lineNumber":207,"author":{"gitId":"lizchow"},"content":"                    addTodoTask(parsedMessage);","lastModifiedDate":"2021-08-19"},{"lineNumber":208,"author":{"gitId":"lizchow"},"content":"                    break;","lastModifiedDate":"2021-08-19"},{"lineNumber":209,"author":{"gitId":"lizchow"},"content":"                default:","lastModifiedDate":"2021-08-19"},{"lineNumber":210,"author":{"gitId":"lizchow"},"content":"                    throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2021-08-19"},{"lineNumber":211,"author":{"gitId":"lizchow"},"content":"            }","lastModifiedDate":"2021-08-19"},{"lineNumber":212,"author":{"gitId":"lizchow"},"content":"            return true;","lastModifiedDate":"2021-08-19"},{"lineNumber":213,"author":{"gitId":"lizchow"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2021-08-19"},{"lineNumber":214,"author":{"gitId":"lizchow"},"content":"            throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2021-08-19"},{"lineNumber":215,"author":{"gitId":"lizchow"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":216,"author":{"gitId":"lizchow"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":217,"author":{"gitId":"lizchow"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":218,"author":{"gitId":"lizchow"},"content":"    public static void greet() {","lastModifiedDate":"2021-08-19"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        String logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2021-08-17"},{"lineNumber":220,"author":{"gitId":"-"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2021-08-17"},{"lineNumber":221,"author":{"gitId":"-"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2021-08-17"},{"lineNumber":222,"author":{"gitId":"-"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2021-08-17"},{"lineNumber":223,"author":{"gitId":"-"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2021-08-17"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        System.out.println(\"Hello from\\n\" + logo);","lastModifiedDate":"2021-08-17"},{"lineNumber":225,"author":{"gitId":"lizchow"},"content":"        printMessage(\"Hello! I\u0027m Duke\\n\"","lastModifiedDate":"2021-08-25"},{"lineNumber":226,"author":{"gitId":"lizchow"},"content":"                + \"\\tWhat can I do for you?\\n\"","lastModifiedDate":"2021-08-25"},{"lineNumber":227,"author":{"gitId":"lizchow"},"content":"                + \"\\tTrying to read from \" + FILE_PATH + \"...\");","lastModifiedDate":"2021-08-25"},{"lineNumber":228,"author":{"gitId":"lizchow"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":229,"author":{"gitId":"lizchow"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":230,"author":{"gitId":"lizchow"},"content":"    private boolean convertIsDoneStrToBool(String s) throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":231,"author":{"gitId":"lizchow"},"content":"        if (s.equals(\"1\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":232,"author":{"gitId":"lizchow"},"content":"            return true;","lastModifiedDate":"2021-08-25"},{"lineNumber":233,"author":{"gitId":"lizchow"},"content":"        } else if (s.equals(\"0\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":234,"author":{"gitId":"lizchow"},"content":"            return false;","lastModifiedDate":"2021-08-25"},{"lineNumber":235,"author":{"gitId":"lizchow"},"content":"        } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":236,"author":{"gitId":"lizchow"},"content":"            throw new DukeException(\"Invalid input for isDone. Only 0 or 1 is accepted.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":237,"author":{"gitId":"lizchow"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":238,"author":{"gitId":"lizchow"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":239,"author":{"gitId":"lizchow"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":240,"author":{"gitId":"lizchow"},"content":"    public void handleFileInput(String input, int lineNo) {","lastModifiedDate":"2021-08-25"},{"lineNumber":241,"author":{"gitId":"lizchow"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":242,"author":{"gitId":"lizchow"},"content":"            String fileSplitRegex \u003d \" \\\\| \";","lastModifiedDate":"2021-08-25"},{"lineNumber":243,"author":{"gitId":"lizchow"},"content":"            String action \u003d input.split(fileSplitRegex)[0];","lastModifiedDate":"2021-08-25"},{"lineNumber":244,"author":{"gitId":"lizchow"},"content":"            boolean isDone \u003d convertIsDoneStrToBool(input.split(fileSplitRegex)[1]);","lastModifiedDate":"2021-08-25"},{"lineNumber":245,"author":{"gitId":"lizchow"},"content":"            String title \u003d input.split(fileSplitRegex)[2];","lastModifiedDate":"2021-08-25"},{"lineNumber":246,"author":{"gitId":"lizchow"},"content":"            switch (action) {","lastModifiedDate":"2021-08-25"},{"lineNumber":247,"author":{"gitId":"lizchow"},"content":"                case \"T\":","lastModifiedDate":"2021-08-25"},{"lineNumber":248,"author":{"gitId":"lizchow"},"content":"                    tasks.add(new Todo(title, isDone));","lastModifiedDate":"2021-08-25"},{"lineNumber":249,"author":{"gitId":"lizchow"},"content":"                    break;","lastModifiedDate":"2021-08-25"},{"lineNumber":250,"author":{"gitId":"lizchow"},"content":"                case \"D\":","lastModifiedDate":"2021-08-25"},{"lineNumber":251,"author":{"gitId":"lizchow"},"content":"                    String endDate \u003d input.split(fileSplitRegex)[3];","lastModifiedDate":"2021-08-25"},{"lineNumber":252,"author":{"gitId":"lizchow"},"content":"                    tasks.add(new Deadline(title, endDate, isDone));","lastModifiedDate":"2021-08-25"},{"lineNumber":253,"author":{"gitId":"lizchow"},"content":"                    break;","lastModifiedDate":"2021-08-25"},{"lineNumber":254,"author":{"gitId":"lizchow"},"content":"                case \"E\":","lastModifiedDate":"2021-08-25"},{"lineNumber":255,"author":{"gitId":"lizchow"},"content":"                    String deadline \u003d input.split(fileSplitRegex)[3];","lastModifiedDate":"2021-08-25"},{"lineNumber":256,"author":{"gitId":"lizchow"},"content":"                    tasks.add(new Event(title, deadline, isDone));","lastModifiedDate":"2021-08-25"},{"lineNumber":257,"author":{"gitId":"lizchow"},"content":"                    break;","lastModifiedDate":"2021-08-25"},{"lineNumber":258,"author":{"gitId":"lizchow"},"content":"                default:","lastModifiedDate":"2021-08-25"},{"lineNumber":259,"author":{"gitId":"lizchow"},"content":"                    throw new DukeException(\"Unknown action type. Only \\\"T\\\", \\\"D\\\", \\\"E\\\" are accepted.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":260,"author":{"gitId":"lizchow"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":261,"author":{"gitId":"lizchow"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":262,"author":{"gitId":"lizchow"},"content":"            throw new DukeException(String.format(\"Line %d is missing input values!\", lineNo));","lastModifiedDate":"2021-08-25"},{"lineNumber":263,"author":{"gitId":"lizchow"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":264,"author":{"gitId":"lizchow"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":265,"author":{"gitId":"lizchow"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":266,"author":{"gitId":"lizchow"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":267,"author":{"gitId":"lizchow"},"content":"    public void readDukeList() throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":268,"author":{"gitId":"lizchow"},"content":"        Scanner scanner \u003d null;","lastModifiedDate":"2021-08-25"},{"lineNumber":269,"author":{"gitId":"lizchow"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":270,"author":{"gitId":"lizchow"},"content":"            int lineCount \u003d 0;","lastModifiedDate":"2021-08-25"},{"lineNumber":271,"author":{"gitId":"lizchow"},"content":"            scanner \u003d new Scanner(new File(FILE_PATH));","lastModifiedDate":"2021-08-25"},{"lineNumber":272,"author":{"gitId":"lizchow"},"content":"            while (scanner.hasNextLine()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":273,"author":{"gitId":"lizchow"},"content":"                lineCount++;","lastModifiedDate":"2021-08-25"},{"lineNumber":274,"author":{"gitId":"lizchow"},"content":"                handleFileInput(scanner.nextLine(), lineCount);","lastModifiedDate":"2021-08-25"},{"lineNumber":275,"author":{"gitId":"lizchow"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":276,"author":{"gitId":"lizchow"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":277,"author":{"gitId":"lizchow"},"content":"            throw new DukeException(\"No such file or directory: \" + FILE_PATH);","lastModifiedDate":"2021-08-25"},{"lineNumber":278,"author":{"gitId":"lizchow"},"content":"        } finally {","lastModifiedDate":"2021-08-25"},{"lineNumber":279,"author":{"gitId":"lizchow"},"content":"            if (scanner !\u003d null) {","lastModifiedDate":"2021-08-25"},{"lineNumber":280,"author":{"gitId":"lizchow"},"content":"                scanner.close();","lastModifiedDate":"2021-08-25"},{"lineNumber":281,"author":{"gitId":"lizchow"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":282,"author":{"gitId":"lizchow"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":283,"author":{"gitId":"lizchow"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":284,"author":{"gitId":"lizchow"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":285,"author":{"gitId":"lizchow"},"content":"    public void writeToList() throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":286,"author":{"gitId":"lizchow"},"content":"        PrintWriter printWriter \u003d null;","lastModifiedDate":"2021-08-25"},{"lineNumber":287,"author":{"gitId":"lizchow"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":288,"author":{"gitId":"lizchow"},"content":"            printWriter \u003d new PrintWriter(new FileWriter(FILE_PATH));","lastModifiedDate":"2021-08-25"},{"lineNumber":289,"author":{"gitId":"lizchow"},"content":"            for (Task task : tasks) {","lastModifiedDate":"2021-08-25"},{"lineNumber":290,"author":{"gitId":"lizchow"},"content":"                printWriter.println(task.toFileString());","lastModifiedDate":"2021-08-25"},{"lineNumber":291,"author":{"gitId":"lizchow"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":292,"author":{"gitId":"lizchow"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":293,"author":{"gitId":"lizchow"},"content":"            throw new DukeException(\"No such file or directory in \" + FILE_PATH);","lastModifiedDate":"2021-08-25"},{"lineNumber":294,"author":{"gitId":"lizchow"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":295,"author":{"gitId":"lizchow"},"content":"            throw new DukeException(\"Unable to write to file\");","lastModifiedDate":"2021-08-25"},{"lineNumber":296,"author":{"gitId":"lizchow"},"content":"        } finally {","lastModifiedDate":"2021-08-25"},{"lineNumber":297,"author":{"gitId":"lizchow"},"content":"            if (printWriter !\u003d null) {","lastModifiedDate":"2021-08-25"},{"lineNumber":298,"author":{"gitId":"lizchow"},"content":"                printWriter.close();","lastModifiedDate":"2021-08-25"},{"lineNumber":299,"author":{"gitId":"lizchow"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":300,"author":{"gitId":"lizchow"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":301,"author":{"gitId":"lizchow"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":302,"author":{"gitId":"lizchow"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":303,"author":{"gitId":"lizchow"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-19"},{"lineNumber":304,"author":{"gitId":"lizchow"},"content":"        greet();","lastModifiedDate":"2021-08-19"},{"lineNumber":305,"author":{"gitId":"lizchow"},"content":"        Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-17"},{"lineNumber":306,"author":{"gitId":"lizchow"},"content":"        Duke duke \u003d new Duke();","lastModifiedDate":"2021-08-17"},{"lineNumber":307,"author":{"gitId":"lizchow"},"content":"        boolean isActive;","lastModifiedDate":"2021-08-25"},{"lineNumber":308,"author":{"gitId":"lizchow"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":309,"author":{"gitId":"lizchow"},"content":"            duke.readDukeList();","lastModifiedDate":"2021-08-25"},{"lineNumber":310,"author":{"gitId":"lizchow"},"content":"            isActive \u003d true;","lastModifiedDate":"2021-08-25"},{"lineNumber":311,"author":{"gitId":"lizchow"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":312,"author":{"gitId":"lizchow"},"content":"            printMessage(e.getMessage());","lastModifiedDate":"2021-08-25"},{"lineNumber":313,"author":{"gitId":"lizchow"},"content":"            isActive \u003d false;","lastModifiedDate":"2021-08-25"},{"lineNumber":314,"author":{"gitId":"lizchow"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":315,"author":{"gitId":"lizchow"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":316,"author":{"gitId":"lizchow"},"content":"        while (isActive) {","lastModifiedDate":"2021-08-19"},{"lineNumber":317,"author":{"gitId":"lizchow"},"content":"            try {","lastModifiedDate":"2021-08-19"},{"lineNumber":318,"author":{"gitId":"lizchow"},"content":"                isActive \u003d duke.handleInput(scanner.nextLine().trim());","lastModifiedDate":"2021-08-19"},{"lineNumber":319,"author":{"gitId":"lizchow"},"content":"                duke.writeToList();","lastModifiedDate":"2021-08-25"},{"lineNumber":320,"author":{"gitId":"lizchow"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2021-08-19"},{"lineNumber":321,"author":{"gitId":"lizchow"},"content":"                printMessage(e.getMessage());","lastModifiedDate":"2021-08-19"},{"lineNumber":322,"author":{"gitId":"lizchow"},"content":"            }","lastModifiedDate":"2021-08-17"},{"lineNumber":323,"author":{"gitId":"lizchow"},"content":"        }","lastModifiedDate":"2021-08-16"},{"lineNumber":324,"author":{"gitId":"lizchow"},"content":"        scanner.close();","lastModifiedDate":"2021-08-19"},{"lineNumber":325,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":326,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"lizchow":317,"-":9}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lizchow"},"content":"public class DukeException extends RuntimeException {","lastModifiedDate":"2021-08-19"},{"lineNumber":2,"author":{"gitId":"lizchow"},"content":"    public DukeException(String errMessage) {","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"lizchow"},"content":"        super(\"☹ OOPS!!! \" + errMessage);","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"lizchow"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"lizchow"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"lizchow":5}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lizchow"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":2,"author":{"gitId":"lizchow"},"content":"    // deadline of the Event task","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"lizchow"},"content":"    private final String deadline;","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"lizchow"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"lizchow"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"lizchow"},"content":"     * Constructor of the Event object.","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"lizchow"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"lizchow"},"content":"     * @param title    title of the Event","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"lizchow"},"content":"     * @param deadline deadline of the Event","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"lizchow"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"lizchow"},"content":"    public Event(String title, String deadline) {","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"lizchow"},"content":"        super(title);","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"lizchow"},"content":"        this.deadline \u003d deadline.trim();","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"lizchow"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"lizchow"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"lizchow"},"content":"    public Event(String title, String deadline, boolean isDone) {","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"lizchow"},"content":"        super(title, isDone);","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"lizchow"},"content":"        this.deadline \u003d deadline.trim();","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"lizchow"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"lizchow"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"lizchow"},"content":"    public String toFileString() {","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"lizchow"},"content":"        return String.format(\"E | %s | %s\", super.toFileString(), deadline);","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"lizchow"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"lizchow"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"lizchow"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":26,"author":{"gitId":"lizchow"},"content":"     * Return a String representation of an Event task. Starts \"[E]\" to indicate","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"lizchow"},"content":"     * that it is an Event task.","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"lizchow"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":29,"author":{"gitId":"lizchow"},"content":"     * @return String representation of an Event.","lastModifiedDate":"2021-08-18"},{"lineNumber":30,"author":{"gitId":"lizchow"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":31,"author":{"gitId":"lizchow"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":32,"author":{"gitId":"lizchow"},"content":"        return String.format(\"[E]%s (at: %s)\", super.toString(), deadline);","lastModifiedDate":"2021-08-18"},{"lineNumber":33,"author":{"gitId":"lizchow"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":34,"author":{"gitId":"lizchow"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"lizchow":34}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lizchow"},"content":"public class Task {","lastModifiedDate":"2021-08-16"},{"lineNumber":2,"author":{"gitId":"lizchow"},"content":"    private boolean isDone \u003d false;","lastModifiedDate":"2021-08-16"},{"lineNumber":3,"author":{"gitId":"lizchow"},"content":"    private final String title;","lastModifiedDate":"2021-08-16"},{"lineNumber":4,"author":{"gitId":"lizchow"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":5,"author":{"gitId":"lizchow"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":6,"author":{"gitId":"lizchow"},"content":"     * Constructor of Task. Create a new task with the given title.","lastModifiedDate":"2021-08-16"},{"lineNumber":7,"author":{"gitId":"lizchow"},"content":"     *","lastModifiedDate":"2021-08-16"},{"lineNumber":8,"author":{"gitId":"lizchow"},"content":"     * @param title Title of Task","lastModifiedDate":"2021-08-16"},{"lineNumber":9,"author":{"gitId":"lizchow"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":10,"author":{"gitId":"lizchow"},"content":"    public Task(String title) {","lastModifiedDate":"2021-08-16"},{"lineNumber":11,"author":{"gitId":"lizchow"},"content":"        this.title \u003d title.trim();","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"lizchow"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":13,"author":{"gitId":"lizchow"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":14,"author":{"gitId":"lizchow"},"content":"    public Task(String title, boolean isDone) {","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"lizchow"},"content":"        this.title \u003d title.trim();","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"lizchow"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"lizchow"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"lizchow"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"lizchow"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":20,"author":{"gitId":"lizchow"},"content":"     * If task is done, return \"X\" else \" \"","lastModifiedDate":"2021-08-16"},{"lineNumber":21,"author":{"gitId":"lizchow"},"content":"     *","lastModifiedDate":"2021-08-16"},{"lineNumber":22,"author":{"gitId":"lizchow"},"content":"     * @return String \"X\" or \" \"","lastModifiedDate":"2021-08-16"},{"lineNumber":23,"author":{"gitId":"lizchow"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":24,"author":{"gitId":"lizchow"},"content":"    private String getStatusIcon() {","lastModifiedDate":"2021-08-16"},{"lineNumber":25,"author":{"gitId":"lizchow"},"content":"        return isDone ? \"X\" : \" \";","lastModifiedDate":"2021-08-16"},{"lineNumber":26,"author":{"gitId":"lizchow"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":27,"author":{"gitId":"lizchow"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":28,"author":{"gitId":"lizchow"},"content":"    private int convertIsDoneToInt() {","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"lizchow"},"content":"        return isDone ? 1 : 0;","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"lizchow"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"lizchow"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"lizchow"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":33,"author":{"gitId":"lizchow"},"content":"     * Returns whether the task is done.","lastModifiedDate":"2021-08-16"},{"lineNumber":34,"author":{"gitId":"lizchow"},"content":"     *","lastModifiedDate":"2021-08-16"},{"lineNumber":35,"author":{"gitId":"lizchow"},"content":"     * @return Boolean true if the task is done, false otherwise","lastModifiedDate":"2021-08-16"},{"lineNumber":36,"author":{"gitId":"lizchow"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":37,"author":{"gitId":"lizchow"},"content":"    public boolean isDone() {","lastModifiedDate":"2021-08-16"},{"lineNumber":38,"author":{"gitId":"lizchow"},"content":"        return isDone;","lastModifiedDate":"2021-08-16"},{"lineNumber":39,"author":{"gitId":"lizchow"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":40,"author":{"gitId":"lizchow"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":41,"author":{"gitId":"lizchow"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":42,"author":{"gitId":"lizchow"},"content":"     * Mark the Task as done.","lastModifiedDate":"2021-08-16"},{"lineNumber":43,"author":{"gitId":"lizchow"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":44,"author":{"gitId":"lizchow"},"content":"    public void markAsDone() {","lastModifiedDate":"2021-08-16"},{"lineNumber":45,"author":{"gitId":"lizchow"},"content":"        isDone \u003d true;","lastModifiedDate":"2021-08-16"},{"lineNumber":46,"author":{"gitId":"lizchow"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":47,"author":{"gitId":"lizchow"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":48,"author":{"gitId":"lizchow"},"content":"    public String toFileString() {","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"lizchow"},"content":"        return String.format(\"%d | %s\", convertIsDoneToInt(), title);","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"lizchow"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"lizchow"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"lizchow"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":53,"author":{"gitId":"lizchow"},"content":"     * Return a String format of the Task containing the status and title of task.","lastModifiedDate":"2021-08-16"},{"lineNumber":54,"author":{"gitId":"lizchow"},"content":"     *","lastModifiedDate":"2021-08-16"},{"lineNumber":55,"author":{"gitId":"lizchow"},"content":"     * @return String representation of Task","lastModifiedDate":"2021-08-16"},{"lineNumber":56,"author":{"gitId":"lizchow"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":57,"author":{"gitId":"lizchow"},"content":"    public String toString() {","lastModifiedDate":"2021-08-16"},{"lineNumber":58,"author":{"gitId":"lizchow"},"content":"        return String.format(\"[%s] %s\", getStatusIcon(), title);","lastModifiedDate":"2021-08-16"},{"lineNumber":59,"author":{"gitId":"lizchow"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":60,"author":{"gitId":"lizchow"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"lizchow":60}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lizchow"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":2,"author":{"gitId":"lizchow"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"lizchow"},"content":"     * Constructor of a Todo task.","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"lizchow"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"lizchow"},"content":"     * @param title title of the Todo task","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"lizchow"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"lizchow"},"content":"    public Todo(String title) {","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"lizchow"},"content":"        super(title);","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"lizchow"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"lizchow"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"lizchow"},"content":"    public Todo(String title, boolean isDone) {","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"lizchow"},"content":"        super(title, isDone);","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"lizchow"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"lizchow"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"lizchow"},"content":"    public String toFileString() {","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"lizchow"},"content":"        return String.format(\"T | %s\", super.toFileString());","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"lizchow"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"lizchow"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"lizchow"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"lizchow"},"content":"     * Returns a String representation of a Todo task. Starts \"[T]\" to indicate that","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"lizchow"},"content":"     * it is a Todo task.","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"lizchow"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"lizchow"},"content":"     * @return String representation of a Todo.","lastModifiedDate":"2021-08-18"},{"lineNumber":24,"author":{"gitId":"lizchow"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":25,"author":{"gitId":"lizchow"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":26,"author":{"gitId":"lizchow"},"content":"        return String.format(\"[T]%s\", super.toString());","lastModifiedDate":"2021-08-18"},{"lineNumber":27,"author":{"gitId":"lizchow"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":28,"author":{"gitId":"lizchow"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"lizchow":28}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"lizchow"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":2,"author":{"gitId":"lizchow"},"content":"done","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"lizchow"},"content":"event","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"lizchow"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"lizchow"},"content":"done 1","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"lizchow"},"content":"done 3","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"lizchow"},"content":"delete 1","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"lizchow"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"lizchow"},"content":"todo borrow book","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"lizchow"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"lizchow"},"content":"event project meeting /at Mon 2-4pm","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"lizchow"},"content":"event project meeting","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"lizchow"},"content":"event /at Mon 2-4pm","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"lizchow"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"lizchow"},"content":"todo","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"lizchow"},"content":"done 3","lastModifiedDate":"2021-08-19"},{"lineNumber":17,"author":{"gitId":"lizchow"},"content":"delete 1","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"lizchow"},"content":"deadline do homework /by no idea :-P","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"lizchow"},"content":"deadline do homework","lastModifiedDate":"2021-08-19"},{"lineNumber":20,"author":{"gitId":"lizchow"},"content":"deadline /by sunday","lastModifiedDate":"2021-08-19"},{"lineNumber":21,"author":{"gitId":"lizchow"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":22,"author":{"gitId":"lizchow"},"content":"done 5","lastModifiedDate":"2021-08-19"},{"lineNumber":23,"author":{"gitId":"lizchow"},"content":"done ab","lastModifiedDate":"2021-08-19"},{"lineNumber":24,"author":{"gitId":"lizchow"},"content":"delete ab","lastModifiedDate":"2021-08-19"},{"lineNumber":25,"author":{"gitId":"lizchow"},"content":"blah","lastModifiedDate":"2021-08-19"},{"lineNumber":26,"author":{"gitId":"lizchow"},"content":"bye","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"lizchow":26}}]

[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"calvintanwj"},"content":"# duke.Duke project template","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"calvintanwj"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"calvintanwj":2,"-":22}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"calvintanwj"},"content":"    mainClassName \u003d \"duke.Duke\"","lastModifiedDate":"2021-08-28"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"run {","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in ","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"calvintanwj":1,"-":45}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"calvintanwj"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"calvintanwj"},"content":"import duke.command.Command;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"calvintanwj"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"calvintanwj"},"content":"import duke.parser.Parser;","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"calvintanwj"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"calvintanwj"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"calvintanwj"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"calvintanwj"},"content":"/**","lastModifiedDate":"2021-08-17"},{"lineNumber":11,"author":{"gitId":"calvintanwj"},"content":" * The Duke program implements a bot with a set of simple commands","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"calvintanwj"},"content":" * Initializes the app, and interacts with the user.","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"calvintanwj"},"content":" */","lastModifiedDate":"2021-08-17"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":15,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":16,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"calvintanwj"},"content":"     * The tasks associated with the user","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"calvintanwj"},"content":"     **/","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"calvintanwj"},"content":"    private TaskList tasks;","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"calvintanwj"},"content":"     * The storage location associated with the user","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"calvintanwj"},"content":"     **/","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"calvintanwj"},"content":"    private Storage storage;","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"calvintanwj"},"content":"     * The ui interacting with the user","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"calvintanwj"},"content":"     **/","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"calvintanwj"},"content":"    private Ui ui;","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":31,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"calvintanwj"},"content":"     * Initializes the duke program with a given filePath.","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"calvintanwj"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"calvintanwj"},"content":"     * @param filePath The path of the file containing your list of tasks.","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"calvintanwj"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"calvintanwj"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"calvintanwj"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"calvintanwj"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"calvintanwj"},"content":"        try {","lastModifiedDate":"2021-08-16"},{"lineNumber":40,"author":{"gitId":"calvintanwj"},"content":"            tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"calvintanwj"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-16"},{"lineNumber":42,"author":{"gitId":"calvintanwj"},"content":"            ui.showError(e.getMessage());","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"calvintanwj"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"calvintanwj"},"content":"        }","lastModifiedDate":"2021-08-17"},{"lineNumber":45,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":46,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":47,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"calvintanwj"},"content":"     * Runs the chatbot until the user inputs the bye command.","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"calvintanwj"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"calvintanwj"},"content":"    public void run() {","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"calvintanwj"},"content":"        ui.welcome();","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"calvintanwj"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"calvintanwj"},"content":"        while (!isExit) {","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"calvintanwj"},"content":"            try {","lastModifiedDate":"2021-08-23"},{"lineNumber":55,"author":{"gitId":"calvintanwj"},"content":"                String fullCommand \u003d ui.readCommand();","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"calvintanwj"},"content":"                ui.printBorder();","lastModifiedDate":"2021-08-24"},{"lineNumber":57,"author":{"gitId":"calvintanwj"},"content":"                Command c \u003d Parser.parse(fullCommand);","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"calvintanwj"},"content":"                c.execute(tasks, ui, storage);","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"calvintanwj"},"content":"                storage.write(tasks);","lastModifiedDate":"2021-08-24"},{"lineNumber":60,"author":{"gitId":"calvintanwj"},"content":"                isExit \u003d c.isExit();","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"calvintanwj"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"calvintanwj"},"content":"                ui.showError(e.getMessage());","lastModifiedDate":"2021-08-24"},{"lineNumber":63,"author":{"gitId":"calvintanwj"},"content":"            } finally {","lastModifiedDate":"2021-08-24"},{"lineNumber":64,"author":{"gitId":"calvintanwj"},"content":"                ui.printBorder();","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"calvintanwj"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":66,"author":{"gitId":"calvintanwj"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":67,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":68,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":69,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":70,"author":{"gitId":"calvintanwj"},"content":"     * Runs the program","lastModifiedDate":"2021-08-24"},{"lineNumber":71,"author":{"gitId":"calvintanwj"},"content":"     **/","lastModifiedDate":"2021-08-24"},{"lineNumber":72,"author":{"gitId":"calvintanwj"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-24"},{"lineNumber":73,"author":{"gitId":"calvintanwj"},"content":"        new Duke(\"./data/tasks.txt\").run();","lastModifiedDate":"2021-08-24"},{"lineNumber":74,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":75,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"calvintanwj":74,"-":2}},{"path":"src/main/java/duke/command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"calvintanwj"},"content":"package duke.command;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"calvintanwj"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"calvintanwj"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"calvintanwj"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"calvintanwj"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"calvintanwj"},"content":" * The bye command, that terminates the program.","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"calvintanwj"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"calvintanwj"},"content":"public class ByeCommand extends Command {","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"calvintanwj"},"content":"     * Constructs the bye command.","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"calvintanwj"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"calvintanwj"},"content":"    public ByeCommand() {","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"calvintanwj"},"content":"        super(\"bye\");","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"calvintanwj"},"content":"     * Executes the main logic of the bye command.","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"calvintanwj"},"content":"     * @param tasks The user\u0027s list of tasks.","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"calvintanwj"},"content":"     * @param ui The ui interacting with the user.","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"calvintanwj"},"content":"     * @param storage The location where the list of tasks is stored.","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"calvintanwj"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"calvintanwj"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"calvintanwj"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"calvintanwj"},"content":"        ui.printToUser(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"calvintanwj"},"content":"     * Checks whether command terminates the program.","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"calvintanwj"},"content":"     * @return true since the bye command is the terminating command.","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"calvintanwj"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"calvintanwj"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"calvintanwj"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"calvintanwj"},"content":"        return true;","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"calvintanwj"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"calvintanwj":38}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"calvintanwj"},"content":"package duke.command;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"calvintanwj"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"calvintanwj"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"calvintanwj"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"calvintanwj"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"calvintanwj"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"calvintanwj"},"content":" * Commands that the bot can handle.","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"calvintanwj"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"calvintanwj"},"content":"public abstract class Command {","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"calvintanwj"},"content":"     * The command keyword associated with the command","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"calvintanwj"},"content":"     **/","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"calvintanwj"},"content":"    private String command;","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"calvintanwj"},"content":"     * Constructs the command with the user input.","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"calvintanwj"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"calvintanwj"},"content":"     * @param command The keyword representing the command.","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"calvintanwj"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"calvintanwj"},"content":"    public Command(String command) {","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"calvintanwj"},"content":"        this.command \u003d command;","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"calvintanwj"},"content":"     * Executes the main logic of the command","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"calvintanwj"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"calvintanwj"},"content":"     * @param tasks   The user\u0027s list of tasks.","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"calvintanwj"},"content":"     * @param ui      The ui interacting with the user.","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"calvintanwj"},"content":"     * @param storage The location where the list of tasks is stored.","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"calvintanwj"},"content":"     * @throws DukeException","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"calvintanwj"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"calvintanwj"},"content":"    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"calvintanwj"},"content":"     * Checks whether command terminate the program.","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"calvintanwj"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"calvintanwj"},"content":"     * @return true if command is the bye command; else false.","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"calvintanwj"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"calvintanwj"},"content":"    public abstract boolean isExit();","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":45,"author":{"gitId":"calvintanwj"},"content":"     * Returns the given command keyword.","lastModifiedDate":"2021-08-29"},{"lineNumber":46,"author":{"gitId":"calvintanwj"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":47,"author":{"gitId":"calvintanwj"},"content":"     * @return The string representing the command keyword.","lastModifiedDate":"2021-08-29"},{"lineNumber":48,"author":{"gitId":"calvintanwj"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":49,"author":{"gitId":"calvintanwj"},"content":"    public String getCommand() {","lastModifiedDate":"2021-08-29"},{"lineNumber":50,"author":{"gitId":"calvintanwj"},"content":"        return command;","lastModifiedDate":"2021-08-29"},{"lineNumber":51,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":52,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":53,"author":{"gitId":"calvintanwj"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"calvintanwj":53}},{"path":"src/main/java/duke/command/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"calvintanwj"},"content":"package duke.command;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"calvintanwj"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"calvintanwj"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"calvintanwj"},"content":"import duke.parser.Parser;","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"calvintanwj"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"calvintanwj"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"calvintanwj"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"calvintanwj"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"calvintanwj"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"calvintanwj"},"content":" * The deadline command.","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"calvintanwj"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"calvintanwj"},"content":"public class DeadlineCommand extends Command {","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"calvintanwj"},"content":"     * The arguments associated with the command","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"calvintanwj"},"content":"     **/","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"calvintanwj"},"content":"    private String arguments;","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"calvintanwj"},"content":"     * Constructs the deadline command.","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"calvintanwj"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"calvintanwj"},"content":"     * @param arguments The arguments associated with the command.","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"calvintanwj"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"calvintanwj"},"content":"    public DeadlineCommand(String arguments) {","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"calvintanwj"},"content":"        super(\"deadline\");","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"calvintanwj"},"content":"        this.arguments \u003d arguments;","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"calvintanwj"},"content":"     * Executes the main logic of the command.","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"calvintanwj"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"calvintanwj"},"content":"     * @param tasks   The user\u0027s list of tasks.","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"calvintanwj"},"content":"     * @param ui      The ui interacting with the user.","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"calvintanwj"},"content":"     * @param storage The location where the list of tasks is stored.","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"calvintanwj"},"content":"     * @throws DukeException If arguments are invalid.","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"calvintanwj"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"calvintanwj"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"calvintanwj"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"calvintanwj"},"content":"        if (arguments.isEmpty()) {","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"calvintanwj"},"content":"            throw new DukeException(String.format(\"The description of a %s cannot be left empty. \"","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"calvintanwj"},"content":"                    + \"Please try again.\", this.getCommand()));","lastModifiedDate":"2021-08-29"},{"lineNumber":45,"author":{"gitId":"calvintanwj"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"calvintanwj"},"content":"        String[] argArr \u003d arguments.split(\"/by\");","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"calvintanwj"},"content":"        if (argArr.length \u003d\u003d 1 || argArr[1].isEmpty()) {","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"calvintanwj"},"content":"            throw new DukeException(\"Arguments do not follow proper format. Don\u0027t forget the /by\");","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"calvintanwj"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"calvintanwj"},"content":"        LocalDate newTaskDate \u003d Parser.convertDate(argArr[1].trim());","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"calvintanwj"},"content":"        Deadline newTask \u003d new Deadline(argArr[0].trim(), newTaskDate);","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"calvintanwj"},"content":"        tasks.add(newTask);","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"calvintanwj"},"content":"        ui.printToUser(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"calvintanwj"},"content":"        ui.printToUser(\"  \" + newTask);","lastModifiedDate":"2021-08-24"},{"lineNumber":57,"author":{"gitId":"calvintanwj"},"content":"        ui.printToUser(\"Now you have \" + tasks.size()","lastModifiedDate":"2021-08-29"},{"lineNumber":58,"author":{"gitId":"calvintanwj"},"content":"                + (tasks.size() \u003d\u003d 1 ? \" task\" : \" tasks\")","lastModifiedDate":"2021-08-29"},{"lineNumber":59,"author":{"gitId":"calvintanwj"},"content":"                + \" in your list.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":60,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":63,"author":{"gitId":"calvintanwj"},"content":"     * Checks whether command terminate the program.","lastModifiedDate":"2021-08-24"},{"lineNumber":64,"author":{"gitId":"calvintanwj"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"calvintanwj"},"content":"     * @return false","lastModifiedDate":"2021-08-24"},{"lineNumber":66,"author":{"gitId":"calvintanwj"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":67,"author":{"gitId":"calvintanwj"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":68,"author":{"gitId":"calvintanwj"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-24"},{"lineNumber":69,"author":{"gitId":"calvintanwj"},"content":"        return false;","lastModifiedDate":"2021-08-24"},{"lineNumber":70,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":71,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":72,"author":{"gitId":"calvintanwj"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"calvintanwj":72}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"calvintanwj"},"content":"package duke.command;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"calvintanwj"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"calvintanwj"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"calvintanwj"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"calvintanwj"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"calvintanwj"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"calvintanwj"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"calvintanwj"},"content":" * The delete command.","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"calvintanwj"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"calvintanwj"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"calvintanwj"},"content":"     * The arguments associated with the command.","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"calvintanwj"},"content":"     **/","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"calvintanwj"},"content":"    private String arguments;","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"calvintanwj"},"content":"     * Constructs the delete command.","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"calvintanwj"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"calvintanwj"},"content":"     * @param arguments The arguments associated with the command.","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"calvintanwj"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"calvintanwj"},"content":"    public DeleteCommand(String arguments) {","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"calvintanwj"},"content":"        super(\"delete\");","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"calvintanwj"},"content":"        this.arguments \u003d arguments;","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"calvintanwj"},"content":"     * Executes the main logic of the command.","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"calvintanwj"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"calvintanwj"},"content":"     * @param tasks   The user\u0027s list of tasks.","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"calvintanwj"},"content":"     * @param ui      The ui interacting with the user.","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"calvintanwj"},"content":"     * @param storage The location where the list of tasks is stored.","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"calvintanwj"},"content":"     * @throws DukeException If arguments are invalid.","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"calvintanwj"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"calvintanwj"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"calvintanwj"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"calvintanwj"},"content":"        if (arguments.isEmpty()) {","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"calvintanwj"},"content":"            throw new DukeException(\"No index was keyed in. Please try again.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"calvintanwj"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"calvintanwj"},"content":"        int index \u003d Integer.parseInt(arguments);","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"calvintanwj"},"content":"        if (index \u003c 1 || index \u003e tasks.size()) {","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"calvintanwj"},"content":"            throw new DukeException(\"The index you entered is invalid. Please try again.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"calvintanwj"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"calvintanwj"},"content":"        Task taskDeleted \u003d tasks.remove(index - 1);","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"calvintanwj"},"content":"        ui.printToUser(\"Noted! I\u0027ve removed this task:\");","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"calvintanwj"},"content":"        ui.printToUser(\"  \" + taskDeleted);","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"calvintanwj"},"content":"        ui.printToUser(\"Now you have \" + tasks.size()","lastModifiedDate":"2021-08-29"},{"lineNumber":52,"author":{"gitId":"calvintanwj"},"content":"                + (tasks.size() \u003d\u003d 1 ? \" task\" : \" tasks\")","lastModifiedDate":"2021-08-29"},{"lineNumber":53,"author":{"gitId":"calvintanwj"},"content":"                + \" in your list.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":57,"author":{"gitId":"calvintanwj"},"content":"     * Checks whether command terminate the program.","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"calvintanwj"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"calvintanwj"},"content":"     * @return false","lastModifiedDate":"2021-08-24"},{"lineNumber":60,"author":{"gitId":"calvintanwj"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"calvintanwj"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"calvintanwj"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-24"},{"lineNumber":63,"author":{"gitId":"calvintanwj"},"content":"        return false;","lastModifiedDate":"2021-08-24"},{"lineNumber":64,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":66,"author":{"gitId":"calvintanwj"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"calvintanwj":66}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"calvintanwj"},"content":"package duke.command;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"calvintanwj"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"calvintanwj"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"calvintanwj"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"calvintanwj"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"calvintanwj"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"calvintanwj"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"calvintanwj"},"content":" * The done command.","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"calvintanwj"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"calvintanwj"},"content":"public class DoneCommand extends Command {","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"calvintanwj"},"content":"     * The arguments associated with the command","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"calvintanwj"},"content":"     **/","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"calvintanwj"},"content":"    private String arguments;","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"calvintanwj"},"content":"     * Constructs the done command.","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"calvintanwj"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"calvintanwj"},"content":"     * @param arguments The arguments associated with the command.","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"calvintanwj"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"calvintanwj"},"content":"    public DoneCommand(String arguments) {","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"calvintanwj"},"content":"        super(\"done\");","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"calvintanwj"},"content":"        this.arguments \u003d arguments;","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"calvintanwj"},"content":"     * Executes the main logic of the command.","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"calvintanwj"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"calvintanwj"},"content":"     * @param tasks   The user\u0027s list of tasks.","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"calvintanwj"},"content":"     * @param ui      The ui interacting with the user.","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"calvintanwj"},"content":"     * @param storage The location where the list of tasks is stored.","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"calvintanwj"},"content":"     * @throws DukeException If arguments are invalid.","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"calvintanwj"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"calvintanwj"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"calvintanwj"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"calvintanwj"},"content":"        if (arguments.isEmpty()) {","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"calvintanwj"},"content":"            throw new DukeException(\"No index was keyed in. Please try again.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"calvintanwj"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"calvintanwj"},"content":"        int index \u003d Integer.parseInt(arguments);","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"calvintanwj"},"content":"        if (index \u003c 1 || index \u003e tasks.size()) {","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"calvintanwj"},"content":"            throw new DukeException(\"The index you entered is invalid. Please try again.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"calvintanwj"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"calvintanwj"},"content":"        Task taskToBeMarked \u003d tasks.get(index - 1);","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"calvintanwj"},"content":"        taskToBeMarked.markTaskAsDone();","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"calvintanwj"},"content":"        ui.printToUser(\"Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"calvintanwj"},"content":"        ui.printToUser(\"  \" + taskToBeMarked);","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"calvintanwj"},"content":"     * Checks whether command terminate the program.","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"calvintanwj"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":57,"author":{"gitId":"calvintanwj"},"content":"     * @return false","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"calvintanwj"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"calvintanwj"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":60,"author":{"gitId":"calvintanwj"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"calvintanwj"},"content":"        return false;","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":63,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":64,"author":{"gitId":"calvintanwj"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"calvintanwj":64}},{"path":"src/main/java/duke/command/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"calvintanwj"},"content":"package duke.command;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"calvintanwj"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"calvintanwj"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"calvintanwj"},"content":"import duke.parser.Parser;","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"calvintanwj"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"calvintanwj"},"content":"import duke.task.Event;","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"calvintanwj"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"calvintanwj"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"calvintanwj"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"calvintanwj"},"content":" * The event command.","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"calvintanwj"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"calvintanwj"},"content":"public class EventCommand extends Command {","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"calvintanwj"},"content":"     * The arguments associated with the command","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"calvintanwj"},"content":"     **/","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"calvintanwj"},"content":"    private String arguments;","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"calvintanwj"},"content":"     * Constructs the event command.","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"calvintanwj"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"calvintanwj"},"content":"     * @param arguments The arguments associated with the command.","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"calvintanwj"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"calvintanwj"},"content":"    public EventCommand(String arguments) {","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"calvintanwj"},"content":"        super(\"event\");","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"calvintanwj"},"content":"        this.arguments \u003d arguments;","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"calvintanwj"},"content":"     * Executes the main logic of the command.","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"calvintanwj"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"calvintanwj"},"content":"     * @param tasks   The user\u0027s list of tasks.","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"calvintanwj"},"content":"     * @param ui      The ui interacting with the user.","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"calvintanwj"},"content":"     * @param storage The location where the list of tasks is stored.","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"calvintanwj"},"content":"     * @throws DukeException If arguments are invalid.","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"calvintanwj"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"calvintanwj"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"calvintanwj"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"calvintanwj"},"content":"        if (arguments.isEmpty()) {","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"calvintanwj"},"content":"            throw new DukeException(String.format(\"The description of a %s cannot be left empty. \"","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"calvintanwj"},"content":"                    + \"Please try again.\", this.getCommand()));","lastModifiedDate":"2021-08-29"},{"lineNumber":45,"author":{"gitId":"calvintanwj"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"calvintanwj"},"content":"        String[] argArr \u003d arguments.split(\"/at\");","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"calvintanwj"},"content":"        if (argArr.length \u003d\u003d 1 || argArr[1].isEmpty()) {","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"calvintanwj"},"content":"            throw new DukeException(\"Arguments do not follow proper format. Don\u0027t forget the /at\");","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"calvintanwj"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"calvintanwj"},"content":"        LocalDate newTaskDate \u003d Parser.convertDate(argArr[1].trim());","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"calvintanwj"},"content":"        Event newTask \u003d new Event(argArr[0].trim(), newTaskDate);","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"calvintanwj"},"content":"        tasks.add(newTask);","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"calvintanwj"},"content":"        ui.printToUser(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"calvintanwj"},"content":"        ui.printToUser(\"  \" + newTask);","lastModifiedDate":"2021-08-24"},{"lineNumber":57,"author":{"gitId":"calvintanwj"},"content":"        ui.printToUser(\"Now you have \" + tasks.size()","lastModifiedDate":"2021-08-29"},{"lineNumber":58,"author":{"gitId":"calvintanwj"},"content":"                + (tasks.size() \u003d\u003d 1 ? \" task\" : \" tasks\")","lastModifiedDate":"2021-08-29"},{"lineNumber":59,"author":{"gitId":"calvintanwj"},"content":"                + \" in your list.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":60,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":63,"author":{"gitId":"calvintanwj"},"content":"     * Checks whether command terminate the program.","lastModifiedDate":"2021-08-24"},{"lineNumber":64,"author":{"gitId":"calvintanwj"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"calvintanwj"},"content":"     * @return false","lastModifiedDate":"2021-08-24"},{"lineNumber":66,"author":{"gitId":"calvintanwj"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":67,"author":{"gitId":"calvintanwj"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":68,"author":{"gitId":"calvintanwj"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-24"},{"lineNumber":69,"author":{"gitId":"calvintanwj"},"content":"        return false;","lastModifiedDate":"2021-08-24"},{"lineNumber":70,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":71,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":72,"author":{"gitId":"calvintanwj"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"calvintanwj":72}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"calvintanwj"},"content":"package duke.command;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"calvintanwj"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"calvintanwj"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"calvintanwj"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"calvintanwj"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"calvintanwj"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"calvintanwj"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"calvintanwj"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"calvintanwj"},"content":" * The find command.","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"calvintanwj"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"calvintanwj"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"calvintanwj"},"content":"     * The arguments associated with the command","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"calvintanwj"},"content":"     **/","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"calvintanwj"},"content":"    private String arguments;","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"calvintanwj"},"content":"     * Constructs the find command.","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"calvintanwj"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"calvintanwj"},"content":"     * @param arguments The arguments associated with the command.","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"calvintanwj"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"calvintanwj"},"content":"    public FindCommand(String arguments) {","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"calvintanwj"},"content":"        super(\"find\");","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"calvintanwj"},"content":"        this.arguments \u003d arguments;","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"calvintanwj"},"content":"     * Executes the main logic of the command.","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"calvintanwj"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"calvintanwj"},"content":"     * @param tasks   The user\u0027s list of tasks.","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"calvintanwj"},"content":"     * @param ui      The ui interacting with the user.","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"calvintanwj"},"content":"     * @param storage The location where the list of tasks is stored.","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"calvintanwj"},"content":"     * @throws DukeException If arguments are invalid.","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"calvintanwj"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"calvintanwj"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"calvintanwj"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"calvintanwj"},"content":"        if (arguments.isEmpty()) {","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"calvintanwj"},"content":"            throw new DukeException(\"No matching string was entered.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"calvintanwj"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"calvintanwj"},"content":"        ArrayList\u003cTask\u003e matchedTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"calvintanwj"},"content":"        ui.printToUser(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"calvintanwj"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"calvintanwj"},"content":"            if (tasks.get(i).getDescription().contains(arguments)) {","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"calvintanwj"},"content":"                matchedTasks.add(tasks.get(i));","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"calvintanwj"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"calvintanwj"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"calvintanwj"},"content":"        if (matchedTasks.isEmpty()) {","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"calvintanwj"},"content":"            ui.printToUser(\"  There are no tasks that match your query. Try again.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"calvintanwj"},"content":"        } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"calvintanwj"},"content":"            for (int i \u003d 0; i \u003c matchedTasks.size(); i++) {","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"calvintanwj"},"content":"                Task currTask \u003d matchedTasks.get(i);","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"calvintanwj"},"content":"                ui.printToUser((i + 1) + \". \" + currTask);","lastModifiedDate":"2021-08-24"},{"lineNumber":57,"author":{"gitId":"calvintanwj"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"calvintanwj"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":60,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"calvintanwj"},"content":"     * Checks whether command terminate the program.","lastModifiedDate":"2021-08-24"},{"lineNumber":63,"author":{"gitId":"calvintanwj"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":64,"author":{"gitId":"calvintanwj"},"content":"     * @return false","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"calvintanwj"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":66,"author":{"gitId":"calvintanwj"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":67,"author":{"gitId":"calvintanwj"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-24"},{"lineNumber":68,"author":{"gitId":"calvintanwj"},"content":"        return false;","lastModifiedDate":"2021-08-24"},{"lineNumber":69,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":70,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":71,"author":{"gitId":"calvintanwj"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"calvintanwj":71}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"calvintanwj"},"content":"package duke.command;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"calvintanwj"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"calvintanwj"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"calvintanwj"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"calvintanwj"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"calvintanwj"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"calvintanwj"},"content":" * The list command.","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"calvintanwj"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"calvintanwj"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"calvintanwj"},"content":"     * Constructs the list command.","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"calvintanwj"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"calvintanwj"},"content":"    public ListCommand() {","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"calvintanwj"},"content":"        super(\"list\");","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"calvintanwj"},"content":"     * Executes the main logic of the command.","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"calvintanwj"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"calvintanwj"},"content":"     * @param tasks   The user\u0027s list of tasks.","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"calvintanwj"},"content":"     * @param ui      The ui interacting with the user.","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"calvintanwj"},"content":"     * @param storage The location where the list of tasks is stored.","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"calvintanwj"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"calvintanwj"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"calvintanwj"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"calvintanwj"},"content":"        ui.printToUser(\"Here are the tasks in your list:\");","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"calvintanwj"},"content":"        if (tasks.isEmpty()) {","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"calvintanwj"},"content":"            ui.printToUser(\"  You currently have no tasks. Why not add a task?\");","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"calvintanwj"},"content":"        } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"calvintanwj"},"content":"            for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"calvintanwj"},"content":"                Task currTask \u003d tasks.get(i);","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"calvintanwj"},"content":"                ui.printToUser((i + 1) + \". \" + currTask);","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"calvintanwj"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"calvintanwj"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"calvintanwj"},"content":"     * Checks whether command terminate the program.","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"calvintanwj"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"calvintanwj"},"content":"     * @return false","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"calvintanwj"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"calvintanwj"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"calvintanwj"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"calvintanwj"},"content":"        return false;","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"calvintanwj"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"calvintanwj":50}},{"path":"src/main/java/duke/command/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"calvintanwj"},"content":"package duke.command;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"calvintanwj"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"calvintanwj"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"calvintanwj"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"calvintanwj"},"content":"import duke.task.Todo;","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"calvintanwj"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"calvintanwj"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"calvintanwj"},"content":" * The Todo Command.","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"calvintanwj"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"calvintanwj"},"content":"public class TodoCommand extends Command {","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"calvintanwj"},"content":"     * The arguments associated with the command","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"calvintanwj"},"content":"     **/","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"calvintanwj"},"content":"    private String arguments;","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"calvintanwj"},"content":"     * Constructs the todo command.","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"calvintanwj"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"calvintanwj"},"content":"     * @param arguments The arguments associated with the command.","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"calvintanwj"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"calvintanwj"},"content":"    public TodoCommand(String arguments) {","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"calvintanwj"},"content":"        super(\"todo\");","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"calvintanwj"},"content":"        this.arguments \u003d arguments;","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"calvintanwj"},"content":"     * Executes the main logic of the command.","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"calvintanwj"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"calvintanwj"},"content":"     * @param tasks   The user\u0027s list of tasks.","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"calvintanwj"},"content":"     * @param ui      The ui interacting with the user.","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"calvintanwj"},"content":"     * @param storage The location where the list of tasks is stored.","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"calvintanwj"},"content":"     * @throws DukeException If arguments are invalid.","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"calvintanwj"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"calvintanwj"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"calvintanwj"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"calvintanwj"},"content":"        if (arguments.isEmpty()) {","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"calvintanwj"},"content":"            throw new DukeException(String.format(\"The description of a %s cannot be left empty. \"","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"calvintanwj"},"content":"                    + \"Please try again.\", this.getCommand()));","lastModifiedDate":"2021-08-29"},{"lineNumber":42,"author":{"gitId":"calvintanwj"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"calvintanwj"},"content":"        Todo newTask \u003d new Todo(arguments);","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"calvintanwj"},"content":"        tasks.add(newTask);","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"calvintanwj"},"content":"        ui.printToUser(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"calvintanwj"},"content":"        ui.printToUser(\"  \" + newTask);","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"calvintanwj"},"content":"        ui.printToUser(\"Now you have \" + tasks.size()","lastModifiedDate":"2021-08-29"},{"lineNumber":49,"author":{"gitId":"calvintanwj"},"content":"                + (tasks.size() \u003d\u003d 1 ? \" task\" : \" tasks\")","lastModifiedDate":"2021-08-29"},{"lineNumber":50,"author":{"gitId":"calvintanwj"},"content":"                + \" in your list.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"calvintanwj"},"content":"     * Checks whether command terminate the program.","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"calvintanwj"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"calvintanwj"},"content":"     * @return false","lastModifiedDate":"2021-08-24"},{"lineNumber":57,"author":{"gitId":"calvintanwj"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"calvintanwj"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"calvintanwj"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-24"},{"lineNumber":60,"author":{"gitId":"calvintanwj"},"content":"        return false;","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":63,"author":{"gitId":"calvintanwj"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"calvintanwj":63}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"calvintanwj"},"content":"package duke.exception;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"calvintanwj"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"calvintanwj"},"content":" * Exceptions thrown by the bot.","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"calvintanwj"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"calvintanwj"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-08-16"},{"lineNumber":7,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":8,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"calvintanwj"},"content":"     * Constructs the exception.","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"calvintanwj"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"calvintanwj"},"content":"     * @param message The error message shown to the user.","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"calvintanwj"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"calvintanwj"},"content":"    public DukeException(String message) {","lastModifiedDate":"2021-08-16"},{"lineNumber":14,"author":{"gitId":"calvintanwj"},"content":"        super(message);","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":16,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":17,"author":{"gitId":"calvintanwj"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"calvintanwj":17}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"calvintanwj"},"content":"package duke.parser;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"calvintanwj"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"calvintanwj"},"content":"import duke.command.ByeCommand;","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"calvintanwj"},"content":"import duke.command.Command;","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"calvintanwj"},"content":"import duke.command.DeadlineCommand;","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"calvintanwj"},"content":"import duke.command.DeleteCommand;","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"calvintanwj"},"content":"import duke.command.DoneCommand;","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"calvintanwj"},"content":"import duke.command.EventCommand;","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"calvintanwj"},"content":"import duke.command.FindCommand;","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"calvintanwj"},"content":"import duke.command.ListCommand;","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"calvintanwj"},"content":"import duke.command.TodoCommand;","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"calvintanwj"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"calvintanwj"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"calvintanwj"},"content":" * Parses user input.","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"calvintanwj"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"calvintanwj"},"content":"public class Parser {","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"calvintanwj"},"content":"     * Converts the user input of an task date into a LocalDate object.","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"calvintanwj"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"calvintanwj"},"content":"     * @param eventDate The string representing the date inputted by the user.","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"calvintanwj"},"content":"     * @return The LocalDate object representing the task date.","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"calvintanwj"},"content":"     * @throws DukeException if user input is of an incorrect format.","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"calvintanwj"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"calvintanwj"},"content":"    public static LocalDate convertDate(String eventDate) throws DukeException {","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"calvintanwj"},"content":"        if (eventDate.matches(\"\\\\d{4}-\\\\d{2}-\\\\d{2}\")) {","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"calvintanwj"},"content":"            return LocalDate.parse(eventDate);","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"calvintanwj"},"content":"        } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"calvintanwj"},"content":"            throw new DukeException(\"Please follow date format: yyyy-mm-dd\");","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"calvintanwj"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"calvintanwj"},"content":"     * Parses user input and executes the appropriate response.","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"calvintanwj"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"calvintanwj"},"content":"     * @param fullCommand The string representing the command inputted by the user.","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"calvintanwj"},"content":"     * @return The command based on the user input.","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"calvintanwj"},"content":"     * @throws DukeException If user input is invalid.","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"calvintanwj"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"calvintanwj"},"content":"    public static Command parse(String fullCommand) throws DukeException {","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"calvintanwj"},"content":"        String command;","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"calvintanwj"},"content":"        String arguments;","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"calvintanwj"},"content":"        if (fullCommand.isEmpty()) {","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"calvintanwj"},"content":"            throw new DukeException(\"Please enter a command\");","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"calvintanwj"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"calvintanwj"},"content":"        if (!fullCommand.contains(\" \")) {","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"calvintanwj"},"content":"            command \u003d fullCommand;","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"calvintanwj"},"content":"            arguments \u003d \"\";","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"calvintanwj"},"content":"        } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"calvintanwj"},"content":"            command \u003d fullCommand.substring(0, fullCommand.indexOf(\" \"));","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"calvintanwj"},"content":"            arguments \u003d fullCommand.substring(fullCommand.indexOf(\" \") + 1).trim();","lastModifiedDate":"2021-08-24"},{"lineNumber":57,"author":{"gitId":"calvintanwj"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"calvintanwj"},"content":"        switch (command) {","lastModifiedDate":"2021-08-24"},{"lineNumber":60,"author":{"gitId":"calvintanwj"},"content":"        case \"list\":","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"calvintanwj"},"content":"            return new ListCommand();","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"calvintanwj"},"content":"        case \"bye\":","lastModifiedDate":"2021-08-24"},{"lineNumber":63,"author":{"gitId":"calvintanwj"},"content":"            return new ByeCommand();","lastModifiedDate":"2021-08-24"},{"lineNumber":64,"author":{"gitId":"calvintanwj"},"content":"        case \"delete\":","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"calvintanwj"},"content":"            return new DeleteCommand(arguments);","lastModifiedDate":"2021-08-24"},{"lineNumber":66,"author":{"gitId":"calvintanwj"},"content":"        case \"done\":","lastModifiedDate":"2021-08-24"},{"lineNumber":67,"author":{"gitId":"calvintanwj"},"content":"            return new DoneCommand(arguments);","lastModifiedDate":"2021-08-24"},{"lineNumber":68,"author":{"gitId":"calvintanwj"},"content":"        case \"event\":","lastModifiedDate":"2021-08-24"},{"lineNumber":69,"author":{"gitId":"calvintanwj"},"content":"            return new EventCommand(arguments);","lastModifiedDate":"2021-08-24"},{"lineNumber":70,"author":{"gitId":"calvintanwj"},"content":"        case \"deadline\":","lastModifiedDate":"2021-08-24"},{"lineNumber":71,"author":{"gitId":"calvintanwj"},"content":"            return new DeadlineCommand(arguments);","lastModifiedDate":"2021-08-24"},{"lineNumber":72,"author":{"gitId":"calvintanwj"},"content":"        case \"todo\":","lastModifiedDate":"2021-08-24"},{"lineNumber":73,"author":{"gitId":"calvintanwj"},"content":"            return new TodoCommand(arguments);","lastModifiedDate":"2021-08-24"},{"lineNumber":74,"author":{"gitId":"calvintanwj"},"content":"        case \"find\":","lastModifiedDate":"2021-08-24"},{"lineNumber":75,"author":{"gitId":"calvintanwj"},"content":"            return new FindCommand(arguments);","lastModifiedDate":"2021-08-24"},{"lineNumber":76,"author":{"gitId":"calvintanwj"},"content":"        default:","lastModifiedDate":"2021-08-24"},{"lineNumber":77,"author":{"gitId":"calvintanwj"},"content":"            throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what \\\"\"","lastModifiedDate":"2021-08-24"},{"lineNumber":78,"author":{"gitId":"calvintanwj"},"content":"                    + fullCommand + \"\\\" means :-(\");","lastModifiedDate":"2021-08-24"},{"lineNumber":79,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":80,"author":{"gitId":"calvintanwj"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":81,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":82,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":83,"author":{"gitId":"calvintanwj"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"calvintanwj":83}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"calvintanwj"},"content":"package duke.storage;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"calvintanwj"},"content":"import java.io.File;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"calvintanwj"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"calvintanwj"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"calvintanwj"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"calvintanwj"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"calvintanwj"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"calvintanwj"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"calvintanwj"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"calvintanwj"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"calvintanwj"},"content":"import duke.task.Event;","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"calvintanwj"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"calvintanwj"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"calvintanwj"},"content":"import duke.task.Todo;","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"calvintanwj"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"calvintanwj"},"content":" * Represents the location used to store and retrieve the list of tasks.","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"calvintanwj"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"calvintanwj"},"content":"public class Storage {","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"calvintanwj"},"content":"     * The filepath of where the list of task is stored","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"calvintanwj"},"content":"     **/","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"calvintanwj"},"content":"    private String filePath;","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"calvintanwj"},"content":"     * Constructs the storage","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"calvintanwj"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"calvintanwj"},"content":"     * @param filePath The location of the list of tasks.","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"calvintanwj"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"calvintanwj"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"calvintanwj"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"calvintanwj"},"content":"     * Fetches the list of tasks.","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"calvintanwj"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"calvintanwj"},"content":"     * @return The arraylist of tasks.","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"calvintanwj"},"content":"     * @throws DukeException if file cannot be found.","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"calvintanwj"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"calvintanwj"},"content":"    public ArrayList\u003cTask\u003e load() throws DukeException {","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"calvintanwj"},"content":"        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"calvintanwj"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"calvintanwj"},"content":"            File data \u003d new File(filePath);","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"calvintanwj"},"content":"            Scanner sc \u003d new Scanner(data);","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"calvintanwj"},"content":"            while (sc.hasNextLine()) {","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"calvintanwj"},"content":"                String[] argArr \u003d sc.nextLine().split(\"\\\\|\");","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"calvintanwj"},"content":"                Task taskToBeAdded;","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"calvintanwj"},"content":"                switch (argArr[0]) {","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"calvintanwj"},"content":"                case \"E\":","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"calvintanwj"},"content":"                    taskToBeAdded \u003d new Event(argArr[2], LocalDate.parse(argArr[3]));","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"calvintanwj"},"content":"                    break;","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"calvintanwj"},"content":"                case \"D\":","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"calvintanwj"},"content":"                    taskToBeAdded \u003d new Deadline(argArr[2], LocalDate.parse(argArr[3]));","lastModifiedDate":"2021-08-24"},{"lineNumber":57,"author":{"gitId":"calvintanwj"},"content":"                    break;","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"calvintanwj"},"content":"                default:","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"calvintanwj"},"content":"                    taskToBeAdded \u003d new Todo(argArr[2]);","lastModifiedDate":"2021-08-24"},{"lineNumber":60,"author":{"gitId":"calvintanwj"},"content":"                    break;","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"calvintanwj"},"content":"                }","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"calvintanwj"},"content":"                if (argArr[1].equals(\"1\")) {","lastModifiedDate":"2021-08-24"},{"lineNumber":63,"author":{"gitId":"calvintanwj"},"content":"                    taskToBeAdded.markTaskAsDone();","lastModifiedDate":"2021-08-24"},{"lineNumber":64,"author":{"gitId":"calvintanwj"},"content":"                }","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"calvintanwj"},"content":"                taskList.add(taskToBeAdded);","lastModifiedDate":"2021-08-24"},{"lineNumber":66,"author":{"gitId":"calvintanwj"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":67,"author":{"gitId":"calvintanwj"},"content":"            sc.close();","lastModifiedDate":"2021-08-24"},{"lineNumber":68,"author":{"gitId":"calvintanwj"},"content":"            return taskList;","lastModifiedDate":"2021-08-24"},{"lineNumber":69,"author":{"gitId":"calvintanwj"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":70,"author":{"gitId":"calvintanwj"},"content":"            throw new DukeException(\"Sorry, I can\u0027t find your list of tasks. I\u0027ll create a new one for you.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":71,"author":{"gitId":"calvintanwj"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":72,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":73,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":74,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":75,"author":{"gitId":"calvintanwj"},"content":"     * Saves the list of tasks. If location doesn\u0027t exist, creates it.","lastModifiedDate":"2021-08-24"},{"lineNumber":76,"author":{"gitId":"calvintanwj"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":77,"author":{"gitId":"calvintanwj"},"content":"     * @param tasks The list of tasks to be saved.","lastModifiedDate":"2021-08-24"},{"lineNumber":78,"author":{"gitId":"calvintanwj"},"content":"     * @throws DukeException If cannot save list at specified path.","lastModifiedDate":"2021-08-24"},{"lineNumber":79,"author":{"gitId":"calvintanwj"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":80,"author":{"gitId":"calvintanwj"},"content":"    public void write(TaskList tasks) throws DukeException {","lastModifiedDate":"2021-08-24"},{"lineNumber":81,"author":{"gitId":"calvintanwj"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":82,"author":{"gitId":"calvintanwj"},"content":"            // need to use the filePath and cut off file name","lastModifiedDate":"2021-08-24"},{"lineNumber":83,"author":{"gitId":"calvintanwj"},"content":"            File directoryName \u003d new File(\"./data\");","lastModifiedDate":"2021-08-24"},{"lineNumber":84,"author":{"gitId":"calvintanwj"},"content":"            if (!directoryName.exists()) {","lastModifiedDate":"2021-08-24"},{"lineNumber":85,"author":{"gitId":"calvintanwj"},"content":"                directoryName.mkdirs();","lastModifiedDate":"2021-08-24"},{"lineNumber":86,"author":{"gitId":"calvintanwj"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":87,"author":{"gitId":"calvintanwj"},"content":"            FileWriter fw \u003d new FileWriter(filePath);","lastModifiedDate":"2021-08-24"},{"lineNumber":88,"author":{"gitId":"calvintanwj"},"content":"            for (Task currTask : tasks.getTasks()) {","lastModifiedDate":"2021-08-24"},{"lineNumber":89,"author":{"gitId":"calvintanwj"},"content":"                fw.write(currTask.getTaskType() + \"|\" + (currTask.getIsDone() ? \"1\" : \"0\") + \"|\"","lastModifiedDate":"2021-08-24"},{"lineNumber":90,"author":{"gitId":"calvintanwj"},"content":"                        + currTask.getDescription()","lastModifiedDate":"2021-08-24"},{"lineNumber":91,"author":{"gitId":"calvintanwj"},"content":"                        + (currTask.getTiming() \u003d\u003d null ? \"\\n\" : \"|\" + currTask.getTiming().toString() + \"\\n\"));","lastModifiedDate":"2021-08-24"},{"lineNumber":92,"author":{"gitId":"calvintanwj"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":93,"author":{"gitId":"calvintanwj"},"content":"            fw.close();","lastModifiedDate":"2021-08-24"},{"lineNumber":94,"author":{"gitId":"calvintanwj"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":95,"author":{"gitId":"calvintanwj"},"content":"            throw new DukeException(\"Sorry, I was unable to store your list of tasks\");","lastModifiedDate":"2021-08-24"},{"lineNumber":96,"author":{"gitId":"calvintanwj"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":97,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":98,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":99,"author":{"gitId":"calvintanwj"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"calvintanwj":99}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"calvintanwj"},"content":"package duke.task;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"calvintanwj"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"calvintanwj"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"calvintanwj"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"calvintanwj"},"content":" * Deadlines are a type of task, where you can add a date","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"calvintanwj"},"content":" * representing the latest date of when the task should be completed.","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"calvintanwj"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"calvintanwj"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-16"},{"lineNumber":11,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":12,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"calvintanwj"},"content":"     * The associated date for the deadline","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"calvintanwj"},"content":"     **/","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"calvintanwj"},"content":"    protected LocalDate by;","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":17,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"calvintanwj"},"content":"     * Constructs a deadline.","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"calvintanwj"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"calvintanwj"},"content":"     * @param description The description associated with the deadline.","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"calvintanwj"},"content":"     * @param by          The date by which the deadline should be completed.","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"calvintanwj"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"calvintanwj"},"content":"    public Deadline(String description, LocalDate by) {","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"calvintanwj"},"content":"        super(description);","lastModifiedDate":"2021-08-16"},{"lineNumber":25,"author":{"gitId":"calvintanwj"},"content":"        this.by \u003d by;","lastModifiedDate":"2021-08-16"},{"lineNumber":26,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":27,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":28,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"calvintanwj"},"content":"     * Returns the type of task.","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"calvintanwj"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"calvintanwj"},"content":"     * @return \"D\" representing the task is a deadline.","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"calvintanwj"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"calvintanwj"},"content":"    @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"calvintanwj"},"content":"    public String getTaskType() {","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"calvintanwj"},"content":"        return \"D\";","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"calvintanwj"},"content":"     * Returns the timing of the task.","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"calvintanwj"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"calvintanwj"},"content":"     * @return The date associated with the deadline.","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"calvintanwj"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"calvintanwj"},"content":"    @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":44,"author":{"gitId":"calvintanwj"},"content":"    public LocalDate getTiming() {","lastModifiedDate":"2021-08-23"},{"lineNumber":45,"author":{"gitId":"calvintanwj"},"content":"        return by;","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":47,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":48,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"calvintanwj"},"content":"     * Pretty-prints the deadline in a readable way.","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"calvintanwj"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"calvintanwj"},"content":"     * @return The string representation of the deadline.","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"calvintanwj"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"calvintanwj"},"content":"    @Override","lastModifiedDate":"2021-08-16"},{"lineNumber":54,"author":{"gitId":"calvintanwj"},"content":"    public String toString() {","lastModifiedDate":"2021-08-16"},{"lineNumber":55,"author":{"gitId":"calvintanwj"},"content":"        return \"[D]\" + super.toString() + \" (by: \"","lastModifiedDate":"2021-08-23"},{"lineNumber":56,"author":{"gitId":"calvintanwj"},"content":"                + by.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")) + \")\";","lastModifiedDate":"2021-08-23"},{"lineNumber":57,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":58,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":59,"author":{"gitId":"calvintanwj"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"calvintanwj":59}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"calvintanwj"},"content":"package duke.task;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"calvintanwj"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"calvintanwj"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"calvintanwj"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"calvintanwj"},"content":" * Events are a type of task, where you can add a date","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"calvintanwj"},"content":" * representing the date of when the task occurs.","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"calvintanwj"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"calvintanwj"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-16"},{"lineNumber":11,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":12,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"calvintanwj"},"content":"     * The associated date for the event","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"calvintanwj"},"content":"     **/","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"calvintanwj"},"content":"    protected LocalDate at;","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":17,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"calvintanwj"},"content":"     * Constructs an event.","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"calvintanwj"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"calvintanwj"},"content":"     * @param description The description associated with the event.","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"calvintanwj"},"content":"     * @param at          The date by which the event should be completed.","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"calvintanwj"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"calvintanwj"},"content":"    public Event(String description, LocalDate at) {","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"calvintanwj"},"content":"        super(description);","lastModifiedDate":"2021-08-16"},{"lineNumber":25,"author":{"gitId":"calvintanwj"},"content":"        this.at \u003d at;","lastModifiedDate":"2021-08-16"},{"lineNumber":26,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":27,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":28,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"calvintanwj"},"content":"     * Returns the type of task.","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"calvintanwj"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"calvintanwj"},"content":"     * @return \"E\" representing the task is an event.","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"calvintanwj"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"calvintanwj"},"content":"    @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"calvintanwj"},"content":"    public String getTaskType() {","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"calvintanwj"},"content":"        return \"E\";","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"calvintanwj"},"content":"     * Returns the timing of the task.","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"calvintanwj"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"calvintanwj"},"content":"     * @return The date associated with the event.","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"calvintanwj"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"calvintanwj"},"content":"    @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":44,"author":{"gitId":"calvintanwj"},"content":"    public LocalDate getTiming() {","lastModifiedDate":"2021-08-23"},{"lineNumber":45,"author":{"gitId":"calvintanwj"},"content":"        return at;","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":47,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":48,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"calvintanwj"},"content":"     * Pretty-prints the event in a readable way.","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"calvintanwj"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"calvintanwj"},"content":"     * @return The string representation of the event.","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"calvintanwj"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"calvintanwj"},"content":"    @Override","lastModifiedDate":"2021-08-16"},{"lineNumber":54,"author":{"gitId":"calvintanwj"},"content":"    public String toString() {","lastModifiedDate":"2021-08-16"},{"lineNumber":55,"author":{"gitId":"calvintanwj"},"content":"        return \"[E]\" + super.toString() + \" (at: \"","lastModifiedDate":"2021-08-23"},{"lineNumber":56,"author":{"gitId":"calvintanwj"},"content":"                + at.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")) + \")\";","lastModifiedDate":"2021-08-23"},{"lineNumber":57,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":58,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":59,"author":{"gitId":"calvintanwj"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"calvintanwj":59}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"calvintanwj"},"content":"package duke.task;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"calvintanwj"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"calvintanwj"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"calvintanwj"},"content":" * Tasks associated with a description, and whether it has been completed.","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"calvintanwj"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"calvintanwj"},"content":"public class Task {","lastModifiedDate":"2021-08-16"},{"lineNumber":9,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"calvintanwj"},"content":"     * The description associated with the task","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"calvintanwj"},"content":"     **/","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"calvintanwj"},"content":"    protected String description;","lastModifiedDate":"2021-08-16"},{"lineNumber":14,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"calvintanwj"},"content":"     * Indicates whether the task has been done or not","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"calvintanwj"},"content":"     **/","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"calvintanwj"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-16"},{"lineNumber":19,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":20,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"calvintanwj"},"content":"     * Constructs a task.","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"calvintanwj"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"calvintanwj"},"content":"     * @param description The description associated with the task.","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"calvintanwj"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"calvintanwj"},"content":"    public Task(String description) {","lastModifiedDate":"2021-08-16"},{"lineNumber":26,"author":{"gitId":"calvintanwj"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-16"},{"lineNumber":27,"author":{"gitId":"calvintanwj"},"content":"        isDone \u003d false;","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":29,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":30,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"calvintanwj"},"content":"     * Prints whether the task is done or not.","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"calvintanwj"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"calvintanwj"},"content":"     * @return If task is done, returns \"X\", else returns \"\"","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"calvintanwj"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"calvintanwj"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-16"},{"lineNumber":36,"author":{"gitId":"calvintanwj"},"content":"        return isDone ? \"X\" : \" \";","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":38,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":39,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"calvintanwj"},"content":"     * Marks a given task as done.","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"calvintanwj"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"calvintanwj"},"content":"    public void markTaskAsDone() {","lastModifiedDate":"2021-08-16"},{"lineNumber":43,"author":{"gitId":"calvintanwj"},"content":"        isDone \u003d true;","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":45,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":46,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"calvintanwj"},"content":"     * Gets the done status of the task.","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"calvintanwj"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"calvintanwj"},"content":"     * @return true if task is done, else false.","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"calvintanwj"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"calvintanwj"},"content":"    public boolean getIsDone() {","lastModifiedDate":"2021-08-23"},{"lineNumber":52,"author":{"gitId":"calvintanwj"},"content":"        return isDone;","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":54,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":55,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"calvintanwj"},"content":"     * Returns the description of the task.","lastModifiedDate":"2021-08-24"},{"lineNumber":57,"author":{"gitId":"calvintanwj"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"calvintanwj"},"content":"     * @return The description associated with the task.","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"calvintanwj"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":60,"author":{"gitId":"calvintanwj"},"content":"    public String getDescription() {","lastModifiedDate":"2021-08-23"},{"lineNumber":61,"author":{"gitId":"calvintanwj"},"content":"        return description;","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":63,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":64,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"calvintanwj"},"content":"     * Returns the type of the task.","lastModifiedDate":"2021-08-24"},{"lineNumber":66,"author":{"gitId":"calvintanwj"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":67,"author":{"gitId":"calvintanwj"},"content":"     * @return null","lastModifiedDate":"2021-08-24"},{"lineNumber":68,"author":{"gitId":"calvintanwj"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":69,"author":{"gitId":"calvintanwj"},"content":"    public String getTaskType() {","lastModifiedDate":"2021-08-23"},{"lineNumber":70,"author":{"gitId":"calvintanwj"},"content":"        return null;","lastModifiedDate":"2021-08-23"},{"lineNumber":71,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":72,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":73,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":74,"author":{"gitId":"calvintanwj"},"content":"     * Returns the timing of the task.","lastModifiedDate":"2021-08-24"},{"lineNumber":75,"author":{"gitId":"calvintanwj"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":76,"author":{"gitId":"calvintanwj"},"content":"     * @return null","lastModifiedDate":"2021-08-24"},{"lineNumber":77,"author":{"gitId":"calvintanwj"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":78,"author":{"gitId":"calvintanwj"},"content":"    public LocalDate getTiming() {","lastModifiedDate":"2021-08-23"},{"lineNumber":79,"author":{"gitId":"calvintanwj"},"content":"        return null;","lastModifiedDate":"2021-08-23"},{"lineNumber":80,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":81,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":82,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":83,"author":{"gitId":"calvintanwj"},"content":"     * Pretty-prints the task in a readable way.","lastModifiedDate":"2021-08-24"},{"lineNumber":84,"author":{"gitId":"calvintanwj"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":85,"author":{"gitId":"calvintanwj"},"content":"     * @return The string representation of the task.","lastModifiedDate":"2021-08-24"},{"lineNumber":86,"author":{"gitId":"calvintanwj"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":87,"author":{"gitId":"calvintanwj"},"content":"    @Override","lastModifiedDate":"2021-08-16"},{"lineNumber":88,"author":{"gitId":"calvintanwj"},"content":"    public String toString() {","lastModifiedDate":"2021-08-16"},{"lineNumber":89,"author":{"gitId":"calvintanwj"},"content":"        return String.format(\"[%s] %s\", getStatusIcon(), description);","lastModifiedDate":"2021-08-24"},{"lineNumber":90,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":91,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":92,"author":{"gitId":"calvintanwj"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"calvintanwj":92}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"calvintanwj"},"content":"package duke.task;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"calvintanwj"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"calvintanwj"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"calvintanwj"},"content":" * A list of tasks.","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"calvintanwj"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"calvintanwj"},"content":"public class TaskList {","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"calvintanwj"},"content":"     * The tasks contained within the task list","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"calvintanwj"},"content":"     **/","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"calvintanwj"},"content":"    private ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"calvintanwj"},"content":"     * Empty constructor for a task list","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"calvintanwj"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"calvintanwj"},"content":"    public TaskList() {","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"calvintanwj"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"calvintanwj"},"content":"     * Constructs the task list from an arraylist of tasks.","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"calvintanwj"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"calvintanwj"},"content":"     * @param tasks The arraylist used to construct the tasklist.","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"calvintanwj"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"calvintanwj"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"calvintanwj"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"calvintanwj"},"content":"     * Checks if tasklist is empty.","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"calvintanwj"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"calvintanwj"},"content":"     * @return true if empty; else false.","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"calvintanwj"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"calvintanwj"},"content":"    public boolean isEmpty() {","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"calvintanwj"},"content":"        return tasks.isEmpty();","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"calvintanwj"},"content":"     * Checks for the size of the tasklist.","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"calvintanwj"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"calvintanwj"},"content":"     * @return An integer indicating the size of the tasklist.","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"calvintanwj"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"calvintanwj"},"content":"    public int size() {","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"calvintanwj"},"content":"        return tasks.size();","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"calvintanwj"},"content":"     * Gets the task at a given index.","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"calvintanwj"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"calvintanwj"},"content":"     * @param idx The index that you wish to get the task from.","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"calvintanwj"},"content":"     * @return The task at the given index.","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"calvintanwj"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"calvintanwj"},"content":"    public Task get(int idx) {","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"calvintanwj"},"content":"        return tasks.get(idx);","lastModifiedDate":"2021-08-24"},{"lineNumber":57,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":60,"author":{"gitId":"calvintanwj"},"content":"     * Returns the list of tasks.","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"calvintanwj"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"calvintanwj"},"content":"     * @return the arraylist of tasks.","lastModifiedDate":"2021-08-24"},{"lineNumber":63,"author":{"gitId":"calvintanwj"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":64,"author":{"gitId":"calvintanwj"},"content":"    public ArrayList\u003cTask\u003e getTasks() {","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"calvintanwj"},"content":"        return tasks;","lastModifiedDate":"2021-08-24"},{"lineNumber":66,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":67,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":68,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":69,"author":{"gitId":"calvintanwj"},"content":"     * Removes tasks from the list.","lastModifiedDate":"2021-08-24"},{"lineNumber":70,"author":{"gitId":"calvintanwj"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":71,"author":{"gitId":"calvintanwj"},"content":"     * @param idx The index that you wish to remove the task from.","lastModifiedDate":"2021-08-24"},{"lineNumber":72,"author":{"gitId":"calvintanwj"},"content":"     * @return The task that is removed.","lastModifiedDate":"2021-08-24"},{"lineNumber":73,"author":{"gitId":"calvintanwj"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":74,"author":{"gitId":"calvintanwj"},"content":"    public Task remove(int idx) {","lastModifiedDate":"2021-08-24"},{"lineNumber":75,"author":{"gitId":"calvintanwj"},"content":"        return tasks.remove(idx);","lastModifiedDate":"2021-08-24"},{"lineNumber":76,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":77,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":78,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":79,"author":{"gitId":"calvintanwj"},"content":"     * Add tasks to list.","lastModifiedDate":"2021-08-24"},{"lineNumber":80,"author":{"gitId":"calvintanwj"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":81,"author":{"gitId":"calvintanwj"},"content":"     * @param task The task that you wish to add to the list.","lastModifiedDate":"2021-08-24"},{"lineNumber":82,"author":{"gitId":"calvintanwj"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":83,"author":{"gitId":"calvintanwj"},"content":"    public void add(Task task) {","lastModifiedDate":"2021-08-24"},{"lineNumber":84,"author":{"gitId":"calvintanwj"},"content":"        tasks.add(task);","lastModifiedDate":"2021-08-24"},{"lineNumber":85,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":86,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":87,"author":{"gitId":"calvintanwj"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"calvintanwj":87}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"calvintanwj"},"content":"package duke.task;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"calvintanwj"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"calvintanwj"},"content":" * Todos are a type of task.","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"calvintanwj"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"calvintanwj"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-08-16"},{"lineNumber":7,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":8,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"calvintanwj"},"content":"     * Constructs a Todo.","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"calvintanwj"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"calvintanwj"},"content":"     * @param description The description associated with the Todo.","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"calvintanwj"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"calvintanwj"},"content":"    public Todo(String description) {","lastModifiedDate":"2021-08-16"},{"lineNumber":14,"author":{"gitId":"calvintanwj"},"content":"        super(description);","lastModifiedDate":"2021-08-16"},{"lineNumber":15,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":16,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":17,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"calvintanwj"},"content":"     * Returns the type of task.","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"calvintanwj"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"calvintanwj"},"content":"     * @return \"T\" representing the task is a Todo.","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"calvintanwj"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"calvintanwj"},"content":"    @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"calvintanwj"},"content":"    public String getTaskType() {","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"calvintanwj"},"content":"        return \"T\";","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"calvintanwj"},"content":"     * Pretty-prints the Todo in a readable way.","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"calvintanwj"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"calvintanwj"},"content":"     * @return The string representation of the Todo.","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"calvintanwj"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"calvintanwj"},"content":"    @Override","lastModifiedDate":"2021-08-16"},{"lineNumber":33,"author":{"gitId":"calvintanwj"},"content":"    public String toString() {","lastModifiedDate":"2021-08-16"},{"lineNumber":34,"author":{"gitId":"calvintanwj"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2021-08-16"},{"lineNumber":35,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":36,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":37,"author":{"gitId":"calvintanwj"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"calvintanwj":37}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"calvintanwj"},"content":"package duke.ui;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"calvintanwj"},"content":"import java.io.PrintStream;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"calvintanwj"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"calvintanwj"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"calvintanwj"},"content":" * UI of the bot","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"calvintanwj"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"calvintanwj"},"content":"public class Ui {","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"calvintanwj"},"content":"     * Decorative border for bot output","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"calvintanwj"},"content":"     **/","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"calvintanwj"},"content":"    public static final String BORDER \u003d \"____________________________________________________________\";","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"calvintanwj"},"content":"     * Decorative prefix for bot output","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"calvintanwj"},"content":"     **/","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"calvintanwj"},"content":"    public static final String PREFIX \u003d \"\\t\";","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"calvintanwj"},"content":"     * Input component of the UI","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"calvintanwj"},"content":"     **/","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"calvintanwj"},"content":"    private final Scanner sc;","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"calvintanwj"},"content":"     * Output component of the UI","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"calvintanwj"},"content":"     **/","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"calvintanwj"},"content":"    private final PrintStream out;","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"calvintanwj"},"content":"     * Initializes the UI.","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"calvintanwj"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"calvintanwj"},"content":"    public Ui() {","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"calvintanwj"},"content":"        this.sc \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"calvintanwj"},"content":"        this.out \u003d System.out;","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"calvintanwj"},"content":"     * Prints text to the user.","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"calvintanwj"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"calvintanwj"},"content":"     * @param message The text you wish to show to the user.","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"calvintanwj"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"calvintanwj"},"content":"    public void printToUser(String message) {","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"calvintanwj"},"content":"        out.println(PREFIX + message);","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"calvintanwj"},"content":"     * Prints decorative border to the user.","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"calvintanwj"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"calvintanwj"},"content":"    public void printBorder() {","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"calvintanwj"},"content":"        out.println(PREFIX + BORDER);","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"calvintanwj"},"content":"     * Prints associated text when user starts the bot.","lastModifiedDate":"2021-08-24"},{"lineNumber":57,"author":{"gitId":"calvintanwj"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"calvintanwj"},"content":"    public void welcome() {","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"calvintanwj"},"content":"        String logo \u003d \"\\t ____        _        \\n\"","lastModifiedDate":"2021-08-24"},{"lineNumber":60,"author":{"gitId":"calvintanwj"},"content":"                + \"\\t|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"calvintanwj"},"content":"                + \"\\t| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"calvintanwj"},"content":"                + \"\\t| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2021-08-24"},{"lineNumber":63,"author":{"gitId":"calvintanwj"},"content":"                + \"\\t|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2021-08-24"},{"lineNumber":64,"author":{"gitId":"calvintanwj"},"content":"        printBorder();","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"calvintanwj"},"content":"        out.println(logo);","lastModifiedDate":"2021-08-24"},{"lineNumber":66,"author":{"gitId":"calvintanwj"},"content":"        printToUser(\"Hello! I\u0027m Duke.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":67,"author":{"gitId":"calvintanwj"},"content":"        printToUser(\"What can I do for you?\");","lastModifiedDate":"2021-08-24"},{"lineNumber":68,"author":{"gitId":"calvintanwj"},"content":"        printBorder();","lastModifiedDate":"2021-08-24"},{"lineNumber":69,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":70,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":71,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":72,"author":{"gitId":"calvintanwj"},"content":"     * Prompts the user for a command and reads it.","lastModifiedDate":"2021-08-24"},{"lineNumber":73,"author":{"gitId":"calvintanwj"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":74,"author":{"gitId":"calvintanwj"},"content":"     * @return String representing the command that the user inputted.","lastModifiedDate":"2021-08-24"},{"lineNumber":75,"author":{"gitId":"calvintanwj"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":76,"author":{"gitId":"calvintanwj"},"content":"    public String readCommand() {","lastModifiedDate":"2021-08-24"},{"lineNumber":77,"author":{"gitId":"calvintanwj"},"content":"        out.print(\"(User) Enter command: \");","lastModifiedDate":"2021-08-24"},{"lineNumber":78,"author":{"gitId":"calvintanwj"},"content":"        String fullCommand \u003d sc.nextLine().trim();","lastModifiedDate":"2021-08-24"},{"lineNumber":79,"author":{"gitId":"calvintanwj"},"content":"        printToUser(\"\");","lastModifiedDate":"2021-08-24"},{"lineNumber":80,"author":{"gitId":"calvintanwj"},"content":"        return fullCommand;","lastModifiedDate":"2021-08-24"},{"lineNumber":81,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":82,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":83,"author":{"gitId":"calvintanwj"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":84,"author":{"gitId":"calvintanwj"},"content":"     * Prints the error to the user.","lastModifiedDate":"2021-08-24"},{"lineNumber":85,"author":{"gitId":"calvintanwj"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":86,"author":{"gitId":"calvintanwj"},"content":"     * @param errorMessage The error message you wish to show to the user.","lastModifiedDate":"2021-08-24"},{"lineNumber":87,"author":{"gitId":"calvintanwj"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":88,"author":{"gitId":"calvintanwj"},"content":"    public void showError(String errorMessage) {","lastModifiedDate":"2021-08-24"},{"lineNumber":89,"author":{"gitId":"calvintanwj"},"content":"        printToUser(\"☹ OOPS!!! \" + errorMessage);","lastModifiedDate":"2021-08-24"},{"lineNumber":90,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":91,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":92,"author":{"gitId":"calvintanwj"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"calvintanwj":92}},{"path":"src/test/java/duke/command/DeadlineCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"calvintanwj"},"content":"package duke.command;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"calvintanwj"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"calvintanwj"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"calvintanwj"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"calvintanwj"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"calvintanwj"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"calvintanwj"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"calvintanwj"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"calvintanwj"},"content":"public class DeadlineCommandTest {","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"calvintanwj"},"content":"    private Storage storage;","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"calvintanwj"},"content":"    private Ui ui \u003d new Ui();","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"calvintanwj"},"content":"    private TaskList tasks \u003d new TaskList();","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"calvintanwj"},"content":"    @Test","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"calvintanwj"},"content":"    public void execute_emptyString_throwsException() {","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"calvintanwj"},"content":"        DeadlineCommand test \u003d new DeadlineCommand(\"\");","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"calvintanwj"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"calvintanwj"},"content":"            test.execute(tasks, ui, storage);","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"calvintanwj"},"content":"            fail();","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"calvintanwj"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"calvintanwj"},"content":"            assertEquals(e.getMessage(), \"The description of a deadline cannot be left empty. Please try again.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"calvintanwj"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"calvintanwj"},"content":"    @Test","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"calvintanwj"},"content":"    public void execute_argInvalidFormat_throwsException() {","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"calvintanwj"},"content":"        DeadlineCommand test \u003d new DeadlineCommand(\"invalid_arg\");","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"calvintanwj"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"calvintanwj"},"content":"            test.execute(tasks, ui, storage);","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"calvintanwj"},"content":"            fail();","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"calvintanwj"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"calvintanwj"},"content":"            assertEquals(e.getMessage(), \"Arguments do not follow proper format. Don\u0027t forget the /by\");","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"calvintanwj"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"calvintanwj"},"content":"    @Test","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"calvintanwj"},"content":"    public void execute_validArgument_returnsNormally() {","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"calvintanwj"},"content":"        DeadlineCommand test \u003d new DeadlineCommand(\"go shopping /by 2021-10-10\");","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"calvintanwj"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"calvintanwj"},"content":"            test.execute(tasks, ui, storage);","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"calvintanwj"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"calvintanwj"},"content":"            fail();","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"calvintanwj"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"calvintanwj"},"content":"        assertEquals(tasks.get(0).toString(), \"[D][ ] go shopping (by: Oct 10 2021)\");","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"calvintanwj"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"calvintanwj":52}},{"path":"src/test/java/duke/command/DeleteCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"calvintanwj"},"content":"package duke.command;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"calvintanwj"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"calvintanwj"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"calvintanwj"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"calvintanwj"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"calvintanwj"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"calvintanwj"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"calvintanwj"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"calvintanwj"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"calvintanwj"},"content":"public class DeleteCommandTest {","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"calvintanwj"},"content":"    private Storage storage;","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"calvintanwj"},"content":"    private Ui ui \u003d new Ui();","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"calvintanwj"},"content":"    private TaskList tasks \u003d new TaskList();","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"calvintanwj"},"content":"    @Test","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"calvintanwj"},"content":"    public void execute_noIndex_throwsException() {","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"calvintanwj"},"content":"        DeleteCommand test \u003d new DeleteCommand(\"\");","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"calvintanwj"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"calvintanwj"},"content":"            test.execute(tasks, ui, storage);","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"calvintanwj"},"content":"            fail();","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"calvintanwj"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"calvintanwj"},"content":"            assertEquals(e.getMessage(), \"No index was keyed in. Please try again.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"calvintanwj"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"calvintanwj"},"content":"    @Test","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"calvintanwj"},"content":"    public void execute_indexOutOfRange_throwsException() {","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"calvintanwj"},"content":"        DeleteCommand test \u003d new DeleteCommand(\"3\");","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"calvintanwj"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"calvintanwj"},"content":"            test.execute(tasks, ui, storage);","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"calvintanwj"},"content":"            fail();","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"calvintanwj"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"calvintanwj"},"content":"            assertEquals(e.getMessage(), \"The index you entered is invalid. Please try again.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"calvintanwj"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"calvintanwj"},"content":"    @Test","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"calvintanwj"},"content":"    public void execute_validIndex_returnsNormally() {","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"calvintanwj"},"content":"        tasks.add(new Task(\"dummy task\"));","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"calvintanwj"},"content":"        DeleteCommand test \u003d new DeleteCommand(\"1\");","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"calvintanwj"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"calvintanwj"},"content":"            test.execute(tasks, ui, storage);","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"calvintanwj"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"calvintanwj"},"content":"            fail();","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"calvintanwj"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"calvintanwj"},"content":"        assertEquals(tasks.size(), 0);","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"calvintanwj"},"content":"    // Can also handle if index is not an integer","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"calvintanwj"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"calvintanwj":56}},{"path":"src/test/java/duke/command/DoneCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"calvintanwj"},"content":"package duke.command;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"calvintanwj"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"calvintanwj"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"calvintanwj"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"calvintanwj"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"calvintanwj"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"calvintanwj"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"calvintanwj"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"calvintanwj"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"calvintanwj"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"calvintanwj"},"content":"public class DoneCommandTest {","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"calvintanwj"},"content":"    private Storage storage;","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"calvintanwj"},"content":"    private Ui ui \u003d new Ui();","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"calvintanwj"},"content":"    private TaskList tasks \u003d new TaskList();","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"calvintanwj"},"content":"    @Test","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"calvintanwj"},"content":"    public void execute_noIndex_throwsException() {","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"calvintanwj"},"content":"        DoneCommand test \u003d new DoneCommand(\"\");","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"calvintanwj"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"calvintanwj"},"content":"            test.execute(tasks, ui, storage);","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"calvintanwj"},"content":"            fail();","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"calvintanwj"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"calvintanwj"},"content":"            assertEquals(e.getMessage(), \"No index was keyed in. Please try again.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"calvintanwj"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"calvintanwj"},"content":"    @Test","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"calvintanwj"},"content":"    public void execute_indexOutOfRange_throwsException() {","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"calvintanwj"},"content":"        DoneCommand test \u003d new DoneCommand(\"3\");","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"calvintanwj"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"calvintanwj"},"content":"            test.execute(tasks, ui, storage);","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"calvintanwj"},"content":"            fail();","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"calvintanwj"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"calvintanwj"},"content":"            assertEquals(e.getMessage(), \"The index you entered is invalid. Please try again.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"calvintanwj"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"calvintanwj"},"content":"    @Test","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"calvintanwj"},"content":"    public void execute_validIndex_returnsNormally() {","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"calvintanwj"},"content":"        tasks.add(new Task(\"dummy task\"));","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"calvintanwj"},"content":"        DoneCommand test \u003d new DoneCommand(\"1\");","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"calvintanwj"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"calvintanwj"},"content":"            test.execute(tasks, ui, storage);","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"calvintanwj"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"calvintanwj"},"content":"            fail();","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"calvintanwj"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"calvintanwj"},"content":"        assertTrue(tasks.get(0).getIsDone());","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"calvintanwj"},"content":"    // Can also handle if index is not an integer","lastModifiedDate":"2021-08-24"},{"lineNumber":57,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"calvintanwj"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"calvintanwj":58}},{"path":"src/test/java/duke/command/EventCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"calvintanwj"},"content":"package duke.command;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"calvintanwj"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"calvintanwj"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"calvintanwj"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"calvintanwj"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"calvintanwj"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"calvintanwj"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"calvintanwj"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"calvintanwj"},"content":"public class EventCommandTest {","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"calvintanwj"},"content":"    private Storage storage;","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"calvintanwj"},"content":"    private Ui ui \u003d new Ui();","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"calvintanwj"},"content":"    private TaskList tasks \u003d new TaskList();","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"calvintanwj"},"content":"    @Test","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"calvintanwj"},"content":"    public void execute_emptyString_throwsException() {","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"calvintanwj"},"content":"        EventCommand test \u003d new EventCommand(\"\");","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"calvintanwj"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"calvintanwj"},"content":"            test.execute(tasks, ui, storage);","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"calvintanwj"},"content":"            fail();","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"calvintanwj"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"calvintanwj"},"content":"            assertEquals(e.getMessage(), \"The description of a event cannot be left empty. Please try again.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"calvintanwj"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"calvintanwj"},"content":"    @Test","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"calvintanwj"},"content":"    public void execute_argInvalidFormat_throwsException() {","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"calvintanwj"},"content":"        EventCommand test \u003d new EventCommand(\"invalid_arg\");","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"calvintanwj"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"calvintanwj"},"content":"            test.execute(tasks, ui, storage);","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"calvintanwj"},"content":"            fail();","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"calvintanwj"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"calvintanwj"},"content":"            assertEquals(e.getMessage(), \"Arguments do not follow proper format. Don\u0027t forget the /at\");","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"calvintanwj"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"calvintanwj"},"content":"    @Test","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"calvintanwj"},"content":"    public void execute_validArgument_returnsNormally() {","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"calvintanwj"},"content":"        EventCommand test \u003d new EventCommand(\"go shopping /at 2021-10-10\");","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"calvintanwj"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"calvintanwj"},"content":"            test.execute(tasks, ui, storage);","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"calvintanwj"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"calvintanwj"},"content":"            fail();","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"calvintanwj"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"calvintanwj"},"content":"        assertEquals(tasks.get(0).toString(), \"[E][ ] go shopping (at: Oct 10 2021)\");","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"calvintanwj"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"calvintanwj":53}},{"path":"src/test/java/duke/command/FindCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"calvintanwj"},"content":"package duke.command;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"calvintanwj"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"calvintanwj"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"calvintanwj"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"calvintanwj"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"calvintanwj"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"calvintanwj"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"calvintanwj"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"calvintanwj"},"content":"public class FindCommandTest {","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"calvintanwj"},"content":"    private Storage storage;","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"calvintanwj"},"content":"    private Ui ui \u003d new Ui();","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"calvintanwj"},"content":"    private TaskList tasks \u003d new TaskList();","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"calvintanwj"},"content":"    @Test","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"calvintanwj"},"content":"    public void execute_emptyString_throwsException() {","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"calvintanwj"},"content":"        FindCommand test \u003d new FindCommand(\"\");","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"calvintanwj"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"calvintanwj"},"content":"            test.execute(tasks, ui, storage);","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"calvintanwj"},"content":"            fail();","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"calvintanwj"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"calvintanwj"},"content":"            assertEquals(e.getMessage(), \"No matching string was entered.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"calvintanwj"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"calvintanwj"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"calvintanwj":29}},{"path":"src/test/java/duke/command/TodoCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"calvintanwj"},"content":"package duke.command;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"calvintanwj"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"calvintanwj"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"calvintanwj"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"calvintanwj"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"calvintanwj"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"calvintanwj"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"calvintanwj"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"calvintanwj"},"content":"public class TodoCommandTest {","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"calvintanwj"},"content":"    private Storage storage;","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"calvintanwj"},"content":"    private Ui ui \u003d new Ui();","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"calvintanwj"},"content":"    private TaskList tasks \u003d new TaskList();","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"calvintanwj"},"content":"    @Test","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"calvintanwj"},"content":"    public void execute_emptyString_throwsException() {","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"calvintanwj"},"content":"        TodoCommand test \u003d new TodoCommand(\"\");","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"calvintanwj"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"calvintanwj"},"content":"            test.execute(tasks, ui, storage);","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"calvintanwj"},"content":"            fail();","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"calvintanwj"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"calvintanwj"},"content":"            assertEquals(e.getMessage(), \"The description of a todo cannot be left empty. Please try again.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"calvintanwj"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"calvintanwj"},"content":"    @Test","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"calvintanwj"},"content":"    public void execute_validArgument_returnsNormally() {","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"calvintanwj"},"content":"        TodoCommand test \u003d new TodoCommand(\"go shopping\");","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"calvintanwj"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"calvintanwj"},"content":"            test.execute(tasks, ui, storage);","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"calvintanwj"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"calvintanwj"},"content":"            fail();","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"calvintanwj"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"calvintanwj"},"content":"        assertEquals(tasks.get(0).toString(), \"[T][ ] go shopping\");","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"calvintanwj"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"calvintanwj":41}},{"path":"src/test/java/duke/parser/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"calvintanwj"},"content":"package duke.parser;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"calvintanwj"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"calvintanwj"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"calvintanwj"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"calvintanwj"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"calvintanwj"},"content":"public class ParserTest {","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"calvintanwj"},"content":"    @Test","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"calvintanwj"},"content":"    public void convertDate_invalidArg_throwsException() {","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"calvintanwj"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"calvintanwj"},"content":"            Parser.convertDate(\"2021-1-1\");","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"calvintanwj"},"content":"            fail();","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"calvintanwj"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"calvintanwj"},"content":"            assertEquals(e.getMessage(), \"Please follow date format: yyyy-mm-dd\");","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"calvintanwj"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"calvintanwj"},"content":"    @Test","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"calvintanwj"},"content":"    public void convertDate_validArg_returnsNormally() {","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"calvintanwj"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"calvintanwj"},"content":"            Parser.convertDate(\"2021-10-10\");","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"calvintanwj"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"calvintanwj"},"content":"            fail();","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"calvintanwj"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"calvintanwj"},"content":"    @Test","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"calvintanwj"},"content":"    public void parse_invalidCommand_throwsException() {","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"calvintanwj"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"calvintanwj"},"content":"            Parser.parse(\"invalid command\");","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"calvintanwj"},"content":"            fail();","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"calvintanwj"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"calvintanwj"},"content":"            assertEquals(e.getMessage(), \"I\u0027m sorry, but I don\u0027t know what \\\"\"","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"calvintanwj"},"content":"                    + \"invalid command\" + \"\\\" means :-(\");","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"calvintanwj"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"calvintanwj"},"content":"    @Test","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"calvintanwj"},"content":"    public void parse_validCommand_throwsException() {","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"calvintanwj"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"calvintanwj"},"content":"            Parser.parse(\"bye\");","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"calvintanwj"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"calvintanwj"},"content":"            fail();","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"calvintanwj"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"calvintanwj"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"calvintanwj":51}},{"path":"src/test/java/duke/storage/StorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"calvintanwj"},"content":"package duke.storage;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"calvintanwj"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"calvintanwj"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"calvintanwj"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"calvintanwj"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"calvintanwj"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"calvintanwj"},"content":"public class StorageTest {","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"calvintanwj"},"content":"    private static String testFilePath \u003d \"./data/Duke.txt\";","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"calvintanwj"},"content":"    private TaskList tasks \u003d new TaskList();","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"calvintanwj"},"content":"    @Test","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"calvintanwj"},"content":"    public void load_invalidFilePath_throwsException() {","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"calvintanwj"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"calvintanwj"},"content":"            Storage test \u003d new Storage(testFilePath);","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"calvintanwj"},"content":"            test.load();","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"calvintanwj"},"content":"            fail();","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"calvintanwj"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"calvintanwj"},"content":"            assertEquals(e.getMessage(), \"Sorry, I can\u0027t find your list of tasks. I\u0027ll create a new one for you.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"calvintanwj"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"calvintanwj"},"content":"    @Test","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"calvintanwj"},"content":"    public void write_invalidFilePath_throwsException() {","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"calvintanwj"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"calvintanwj"},"content":"            Storage test \u003d new Storage(\"...///./\");","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"calvintanwj"},"content":"            test.write(tasks);","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"calvintanwj"},"content":"            fail();","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"calvintanwj"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"calvintanwj"},"content":"            assertEquals(e.getMessage(), \"Sorry, I was unable to store your list of tasks\");","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"calvintanwj"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"calvintanwj"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"calvintanwj"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"calvintanwj"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"calvintanwj":38}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"calvintanwj"},"content":"list","lastModifiedDate":"2021-08-16"},{"lineNumber":2,"author":{"gitId":"calvintanwj"},"content":"todo go shopping","lastModifiedDate":"2021-08-16"},{"lineNumber":3,"author":{"gitId":"calvintanwj"},"content":"event workshop /at Tuesday 6-8pm","lastModifiedDate":"2021-08-16"},{"lineNumber":4,"author":{"gitId":"calvintanwj"},"content":"deadline finish homework /by ASAP","lastModifiedDate":"2021-08-16"},{"lineNumber":5,"author":{"gitId":"calvintanwj"},"content":"list","lastModifiedDate":"2021-08-16"},{"lineNumber":6,"author":{"gitId":"calvintanwj"},"content":"done 5","lastModifiedDate":"2021-08-16"},{"lineNumber":7,"author":{"gitId":"calvintanwj"},"content":"done 3","lastModifiedDate":"2021-08-16"},{"lineNumber":8,"author":{"gitId":"calvintanwj"},"content":"list","lastModifiedDate":"2021-08-16"},{"lineNumber":9,"author":{"gitId":"calvintanwj"},"content":"delete 4","lastModifiedDate":"2021-08-16"},{"lineNumber":10,"author":{"gitId":"calvintanwj"},"content":"delete 2","lastModifiedDate":"2021-08-16"},{"lineNumber":11,"author":{"gitId":"calvintanwj"},"content":"list","lastModifiedDate":"2021-08-16"},{"lineNumber":12,"author":{"gitId":"calvintanwj"},"content":"event ","lastModifiedDate":"2021-08-16"},{"lineNumber":13,"author":{"gitId":"calvintanwj"},"content":"event Meeting Wed 10pm","lastModifiedDate":"2021-08-16"},{"lineNumber":14,"author":{"gitId":"calvintanwj"},"content":"deadline Project Fri 2pm","lastModifiedDate":"2021-08-16"},{"lineNumber":15,"author":{"gitId":"calvintanwj"},"content":"blob","lastModifiedDate":"2021-08-16"},{"lineNumber":16,"author":{"gitId":"calvintanwj"},"content":"invalid command","lastModifiedDate":"2021-08-16"},{"lineNumber":17,"author":{"gitId":"calvintanwj"},"content":"bye","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"calvintanwj":17}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"calvintanwj"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"calvintanwj":1,"-":20}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"calvintanwj"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/duke/*.java","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"calvintanwj"},"content":"java -classpath ../bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"calvintanwj":2,"-":36}}]

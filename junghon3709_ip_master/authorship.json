[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"junghon3709"},"content":"# Tiger project template","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"junghon3709"},"content":"3. After that, locate the `src/main/java/Tiger.java` file, right-click it, and choose `Run Tiger.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2021-08-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"junghon3709":2,"-":22}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"junghon3709"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"junghon3709"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"junghon3709"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"junghon3709"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"junghon3709"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"junghon3709"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"junghon3709"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"junghon3709"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"junghon3709"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"junghon3709"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"junghon3709"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"junghon3709"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"junghon3709"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-08-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"junghon3709"},"content":"    mainClassName \u003d \"Launcher\"","lastModifiedDate":"2021-08-28"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"junghon3709"},"content":"    archiveBaseName \u003d \"Tiger\"","lastModifiedDate":"2021-08-28"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"junghon3709"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2021-08-28"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"junghon3709":16,"-":44}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2019-07-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"junghon3709"},"content":"## Introduction","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"junghon3709"},"content":"Tiger is a personal assistant that helps you manage the tasks you\u0027re too lazy to do right now. ","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"junghon3709"},"content":"![Screenshot](./images/TigerIntro.png)","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"junghon3709"},"content":"Tasks are classified into 3 types of catergories: Todos, Events or Deadlines. Events and deadlines are tasks associated with a date/time, and hence the user is required to enter in the date/time parameter. Tasks can be either marked as completed, or not completed and are classified into 3 priorities, low, medium and high. ","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":11,"author":{"gitId":"junghon3709"},"content":"Commands include a keyword, some mandatory arguments, and some optional arguments. The general usage is that the keyword comes first, then the mandatory arguments, then the optional arguments, ie. `[keyword] [mandatory arguments] [optional arguments]`.","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":13,"author":{"gitId":"junghon3709"},"content":"## Features ","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"junghon3709"},"content":"The features offered are:","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":17,"author":{"gitId":"junghon3709"},"content":"- [Adding a task](#adding-tasks)","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"junghon3709"},"content":"- [Deleting a task](#deleting-a-task)","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"junghon3709"},"content":"- [Marking a task as done](#marking-a-task-as-done)","lastModifiedDate":"2021-09-01"},{"lineNumber":20,"author":{"gitId":"junghon3709"},"content":"- [Finding a task](#finding-a-task)","lastModifiedDate":"2021-09-01"},{"lineNumber":21,"author":{"gitId":"junghon3709"},"content":"- [Clearing all tasks](#clearing-all-tasks)","lastModifiedDate":"2021-09-01"},{"lineNumber":22,"author":{"gitId":"junghon3709"},"content":"- [Listing all tasks](#listing-all-tasks)","lastModifiedDate":"2021-09-01"},{"lineNumber":23,"author":{"gitId":"junghon3709"},"content":"- [Exiting the app](#exiting-the-app)","lastModifiedDate":"2021-09-01"},{"lineNumber":24,"author":{"gitId":"junghon3709"},"content":"- Searching by priority (to be implemented)","lastModifiedDate":"2021-09-01"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":26,"author":{"gitId":"junghon3709"},"content":"Some advanced features include","lastModifiedDate":"2021-09-01"},{"lineNumber":27,"author":{"gitId":"junghon3709"},"content":"- [Substitutable keywords](#substitutable-keywords)","lastModifiedDate":"2021-09-01"},{"lineNumber":28,"author":{"gitId":"junghon3709"},"content":"- [Automatic date correction](#automatic-date-correction)","lastModifiedDate":"2021-09-01"},{"lineNumber":29,"author":{"gitId":"junghon3709"},"content":"- [Partial loading in case the storage file is corrupted](#partial-loading)","lastModifiedDate":"2021-09-01"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":31,"author":{"gitId":"-"},"content":"## Usage","lastModifiedDate":"2019-07-29"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":33,"author":{"gitId":"junghon3709"},"content":"### Adding tasks","lastModifiedDate":"2021-09-01"},{"lineNumber":34,"author":{"gitId":"junghon3709"},"content":"Tiger can help you keep track of 3 types of tasks: Todos, Events and Deadlines. When a task is added, Tiger will display a string representation of the task, as such:","lastModifiedDate":"2021-09-01"},{"lineNumber":35,"author":{"gitId":"junghon3709"},"content":"```","lastModifiedDate":"2021-09-01"},{"lineNumber":36,"author":{"gitId":"junghon3709"},"content":"[T|E|D] [H|M|L|X] [task description] [task date]","lastModifiedDate":"2021-09-01"},{"lineNumber":37,"author":{"gitId":"junghon3709"},"content":"```","lastModifiedDate":"2021-09-01"},{"lineNumber":38,"author":{"gitId":"junghon3709"},"content":"`T, E, D` denotes a Todo, Event or Deadline respectively, and `H, M, L` denotes a tasks of high, medium or low priority respectively. `X` marks completed tasks.","lastModifiedDate":"2021-09-02"},{"lineNumber":39,"author":{"gitId":"junghon3709"},"content":"_________","lastModifiedDate":"2021-09-01"},{"lineNumber":40,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":41,"author":{"gitId":"junghon3709"},"content":"To add a new Todo, the usage is: `todo [task description] /priority [H|M|L]`. The `/priority` command is optional.","lastModifiedDate":"2021-09-01"},{"lineNumber":42,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":43,"author":{"gitId":"junghon3709"},"content":"Example: `todo homework` - adds a new Todo named \"Homework\".","lastModifiedDate":"2021-09-01"},{"lineNumber":44,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":45,"author":{"gitId":"junghon3709"},"content":"Expected outcome:","lastModifiedDate":"2021-09-01"},{"lineNumber":46,"author":{"gitId":"junghon3709"},"content":"```","lastModifiedDate":"2021-09-01"},{"lineNumber":47,"author":{"gitId":"junghon3709"},"content":"Excellent! I\u0027ve added this task:","lastModifiedDate":"2021-09-01"},{"lineNumber":48,"author":{"gitId":"junghon3709"},"content":"[T] [M] Homework","lastModifiedDate":"2021-09-01"},{"lineNumber":49,"author":{"gitId":"junghon3709"},"content":"```","lastModifiedDate":"2021-09-01"},{"lineNumber":50,"author":{"gitId":"junghon3709"},"content":"**By default, if the priority is not assigned, the task is classified as medium priority.** To change the tasks\u0027 priority, use the priority flag.","lastModifiedDate":"2021-09-02"},{"lineNumber":51,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":52,"author":{"gitId":"junghon3709"},"content":"Example: `todo homework /priority H` - adds a new Todo that is named \"Homework\" that is of high priority.","lastModifiedDate":"2021-09-01"},{"lineNumber":53,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":54,"author":{"gitId":"junghon3709"},"content":"Expected outcome:","lastModifiedDate":"2021-09-01"},{"lineNumber":55,"author":{"gitId":"junghon3709"},"content":"```","lastModifiedDate":"2021-09-01"},{"lineNumber":56,"author":{"gitId":"junghon3709"},"content":"Excellent! I\u0027ve added this task:","lastModifiedDate":"2021-09-01"},{"lineNumber":57,"author":{"gitId":"junghon3709"},"content":"[T] [H] Homework","lastModifiedDate":"2021-09-01"},{"lineNumber":58,"author":{"gitId":"junghon3709"},"content":"```","lastModifiedDate":"2021-09-01"},{"lineNumber":59,"author":{"gitId":"junghon3709"},"content":"Tiger autocapitalises the first letter of `homework` for the user. This is because Tiger has noticed that users tend to input all tasks in lower case, making the tasks look ugly. There is no way to disable this; free will is a lie.","lastModifiedDate":"2021-09-02"},{"lineNumber":60,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":61,"author":{"gitId":"junghon3709"},"content":"______","lastModifiedDate":"2021-09-01"},{"lineNumber":62,"author":{"gitId":"junghon3709"},"content":"To add a new Event, the usage is: `event [event description] /at [event time] /priority [H|M|L]`. The `/priority` command is optional. Accepted date formats are `HH:mm` or `YYYY-MM-DD HH:mm`. The year input string should be **exactly** 4 characters, and their other date parameters should be **exactly** 2 characters. The year cannot be 0000. ","lastModifiedDate":"2021-09-01"},{"lineNumber":63,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":64,"author":{"gitId":"junghon3709"},"content":"Example: `event eat dinner /at 2021-05-21 16:00` - creates a new Event named \"eat dinner\" at 2021-05-21 16:00.","lastModifiedDate":"2021-09-01"},{"lineNumber":65,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":66,"author":{"gitId":"junghon3709"},"content":"Expected outcome:","lastModifiedDate":"2021-09-01"},{"lineNumber":67,"author":{"gitId":"junghon3709"},"content":"```","lastModifiedDate":"2021-09-01"},{"lineNumber":68,"author":{"gitId":"junghon3709"},"content":"Excellent! I\u0027ve added this event:","lastModifiedDate":"2021-09-01"},{"lineNumber":69,"author":{"gitId":"junghon3709"},"content":"[E] [M] Eat dinner (at 2021-05-21 16:00)","lastModifiedDate":"2021-09-01"},{"lineNumber":70,"author":{"gitId":"junghon3709"},"content":"```","lastModifiedDate":"2021-09-01"},{"lineNumber":71,"author":{"gitId":"junghon3709"},"content":"**If the user only specifies the time, but not the date, Tiger guesses that the date is today.**","lastModifiedDate":"2021-09-01"},{"lineNumber":72,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":73,"author":{"gitId":"junghon3709"},"content":"Example: `event eat dinner /at 16:00` - creates a new Event named \"eat dinner\" at [today\u0027s date] 16:00.","lastModifiedDate":"2021-09-01"},{"lineNumber":74,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":75,"author":{"gitId":"junghon3709"},"content":"Expected outcome: (assume today\u0027s date is 2021-08-31).","lastModifiedDate":"2021-09-01"},{"lineNumber":76,"author":{"gitId":"junghon3709"},"content":"```","lastModifiedDate":"2021-09-01"},{"lineNumber":77,"author":{"gitId":"junghon3709"},"content":"Excellent! I\u0027ve added this event:","lastModifiedDate":"2021-09-01"},{"lineNumber":78,"author":{"gitId":"junghon3709"},"content":"[E] [M] Eat dinner (at 2021-08-31 16:00)","lastModifiedDate":"2021-09-01"},{"lineNumber":79,"author":{"gitId":"junghon3709"},"content":"```","lastModifiedDate":"2021-09-01"},{"lineNumber":80,"author":{"gitId":"junghon3709"},"content":"Much like Todos, you can also specify a priority for your events.","lastModifiedDate":"2021-09-01"},{"lineNumber":81,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":82,"author":{"gitId":"junghon3709"},"content":"Example: `event eat dinner /at 15:29 /priority L` - creates a new event named \"eat dinner\" at [today\u0027s date] 16:00 of low priority.","lastModifiedDate":"2021-09-01"},{"lineNumber":83,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":84,"author":{"gitId":"junghon3709"},"content":"Expected outcome: (assume today\u0027s date is 2021-08-31).","lastModifiedDate":"2021-09-01"},{"lineNumber":85,"author":{"gitId":"junghon3709"},"content":"```","lastModifiedDate":"2021-09-01"},{"lineNumber":86,"author":{"gitId":"junghon3709"},"content":"Excellent! I\u0027ve added this event:","lastModifiedDate":"2021-09-01"},{"lineNumber":87,"author":{"gitId":"junghon3709"},"content":"[E] [L] Eat dinner (at 2021-08-31 16:00)","lastModifiedDate":"2021-09-01"},{"lineNumber":88,"author":{"gitId":"junghon3709"},"content":"```","lastModifiedDate":"2021-09-01"},{"lineNumber":89,"author":{"gitId":"junghon3709"},"content":"_________","lastModifiedDate":"2021-09-01"},{"lineNumber":90,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":91,"author":{"gitId":"junghon3709"},"content":"To add a new Deadline, the usage is: `deadline [deadline description] /by [deadline due date] /priority [H|M|L]`. The `/priority` command is optional. Accepted date formats are `HH:mm` or `YYYY-MM-DD HH:mm`. The year input string should be **exactly** 4 characters, and their other date parameters should be **exactly** 2 characters. The year cannot be 0000. ","lastModifiedDate":"2021-09-01"},{"lineNumber":92,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":93,"author":{"gitId":"junghon3709"},"content":"Example: `deadline eat dinner /by 16:00` - creates a new Deadline named \"eat dinner\" at [today\u0027s date] 16:00.","lastModifiedDate":"2021-09-01"},{"lineNumber":94,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":95,"author":{"gitId":"junghon3709"},"content":"Expected outcome: (assume today\u0027s date is 2021-08-31).","lastModifiedDate":"2021-09-01"},{"lineNumber":96,"author":{"gitId":"junghon3709"},"content":"```","lastModifiedDate":"2021-09-01"},{"lineNumber":97,"author":{"gitId":"junghon3709"},"content":"Excellent! I\u0027ve added this event: ","lastModifiedDate":"2021-09-01"},{"lineNumber":98,"author":{"gitId":"junghon3709"},"content":"[D] [M] Eat dinner (by 2021-08-31 16:00)","lastModifiedDate":"2021-09-01"},{"lineNumber":99,"author":{"gitId":"junghon3709"},"content":"```","lastModifiedDate":"2021-09-01"},{"lineNumber":100,"author":{"gitId":"junghon3709"},"content":"Much like Todos, you can also specify a priority for your deadlines.","lastModifiedDate":"2021-09-01"},{"lineNumber":101,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":102,"author":{"gitId":"junghon3709"},"content":"Example: `deadline eat dinner /by 15:29 /priority L` - creates a new Deadline named \"eat dinner\" at [today\u0027s date] 16:00 of low priority.","lastModifiedDate":"2021-09-01"},{"lineNumber":103,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":104,"author":{"gitId":"junghon3709"},"content":"Expected outcome: (assume today\u0027s date is 2021-08-31).","lastModifiedDate":"2021-09-01"},{"lineNumber":105,"author":{"gitId":"junghon3709"},"content":"```","lastModifiedDate":"2021-09-01"},{"lineNumber":106,"author":{"gitId":"junghon3709"},"content":"Excellent! I\u0027ve added this event:","lastModifiedDate":"2021-09-01"},{"lineNumber":107,"author":{"gitId":"junghon3709"},"content":"[D] [L] Eat dinner (by 2021-08-31 16:00)","lastModifiedDate":"2021-09-01"},{"lineNumber":108,"author":{"gitId":"junghon3709"},"content":"```","lastModifiedDate":"2021-09-01"},{"lineNumber":109,"author":{"gitId":"junghon3709"},"content":"\u003e Substitutable keywords: `dateline`.","lastModifiedDate":"2021-09-01"},{"lineNumber":110,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":111,"author":{"gitId":"junghon3709"},"content":"**Due to the way data is stored, Tiger bans users from inputting semicolons (;).**","lastModifiedDate":"2021-09-02"},{"lineNumber":112,"author":{"gitId":"junghon3709"},"content":"__________","lastModifiedDate":"2021-09-01"},{"lineNumber":113,"author":{"gitId":"junghon3709"},"content":"### Deleting a task","lastModifiedDate":"2021-09-01"},{"lineNumber":114,"author":{"gitId":"junghon3709"},"content":"Deletes the task at the specified index. Use `list` to get the list of tasks and indicies. The usage is `delete [task index]`.","lastModifiedDate":"2021-09-01"},{"lineNumber":115,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":116,"author":{"gitId":"junghon3709"},"content":"Example: `delete 1` - deletes the task at index 1.","lastModifiedDate":"2021-09-01"},{"lineNumber":117,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":118,"author":{"gitId":"junghon3709"},"content":"Expected outcome: ","lastModifiedDate":"2021-09-01"},{"lineNumber":119,"author":{"gitId":"junghon3709"},"content":"```","lastModifiedDate":"2021-09-01"},{"lineNumber":120,"author":{"gitId":"junghon3709"},"content":"Feeling lazy today? I\u0027ve deleted:","lastModifiedDate":"2021-09-01"},{"lineNumber":121,"author":{"gitId":"junghon3709"},"content":"[T] [M] CS2103 Code Review","lastModifiedDate":"2021-09-01"},{"lineNumber":122,"author":{"gitId":"junghon3709"},"content":"```","lastModifiedDate":"2021-09-01"},{"lineNumber":123,"author":{"gitId":"junghon3709"},"content":"\u003e Substitutable keywords: `del`, `remove`.","lastModifiedDate":"2021-09-01"},{"lineNumber":124,"author":{"gitId":"junghon3709"},"content":"_________","lastModifiedDate":"2021-09-01"},{"lineNumber":125,"author":{"gitId":"junghon3709"},"content":"### Marking a task as done","lastModifiedDate":"2021-09-01"},{"lineNumber":126,"author":{"gitId":"junghon3709"},"content":"Marks the task at a specified index as done. `list` to get the list of tasks and indicies. The usage is `done [task index]`.","lastModifiedDate":"2021-09-01"},{"lineNumber":127,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":128,"author":{"gitId":"junghon3709"},"content":"Example: `done 1` - marks the task at index 1 as done.","lastModifiedDate":"2021-09-02"},{"lineNumber":129,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":130,"author":{"gitId":"junghon3709"},"content":"Expected outcome: ","lastModifiedDate":"2021-09-01"},{"lineNumber":131,"author":{"gitId":"junghon3709"},"content":"```","lastModifiedDate":"2021-09-01"},{"lineNumber":132,"author":{"gitId":"junghon3709"},"content":"Nice! I\u0027ve marked this tasks as done:","lastModifiedDate":"2021-09-01"},{"lineNumber":133,"author":{"gitId":"junghon3709"},"content":"[T] [X] Type out GT assignment","lastModifiedDate":"2021-09-01"},{"lineNumber":134,"author":{"gitId":"junghon3709"},"content":"```","lastModifiedDate":"2021-09-01"},{"lineNumber":135,"author":{"gitId":"junghon3709"},"content":"________","lastModifiedDate":"2021-09-01"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":137,"author":{"gitId":"junghon3709"},"content":"### Finding a task","lastModifiedDate":"2021-09-01"},{"lineNumber":138,"author":{"gitId":"junghon3709"},"content":"Tiger can also help find tasks based on a specific keyword. The search is not case sensitive, ie. `search woodlands` and `search Woodlands` should return the same list. The usage is `search [substring]`. ","lastModifiedDate":"2021-09-02"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":140,"author":{"gitId":"junghon3709"},"content":"Example: `search Woodlands` - searches for tasks with task description containing the string \"Woodlands\".","lastModifiedDate":"2021-09-01"},{"lineNumber":141,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":142,"author":{"gitId":"junghon3709"},"content":"Expected outcome: ","lastModifiedDate":"2021-09-01"},{"lineNumber":143,"author":{"gitId":"junghon3709"},"content":"```","lastModifiedDate":"2021-09-01"},{"lineNumber":144,"author":{"gitId":"junghon3709"},"content":"[T] [M] Buy earphones at Woodlands","lastModifiedDate":"2021-09-01"},{"lineNumber":145,"author":{"gitId":"junghon3709"},"content":"```","lastModifiedDate":"2021-09-01"},{"lineNumber":146,"author":{"gitId":"junghon3709"},"content":"\u003e Substitutable keywords: `find`. ","lastModifiedDate":"2021-09-01"},{"lineNumber":147,"author":{"gitId":"junghon3709"},"content":"___________","lastModifiedDate":"2021-09-01"},{"lineNumber":148,"author":{"gitId":"junghon3709"},"content":"### Clearing all tasks","lastModifiedDate":"2021-09-01"},{"lineNumber":149,"author":{"gitId":"junghon3709"},"content":"If for some reason the list of tasks is too full, or the user is too lazy, the user can clear all the tasks at one go. The usage is `clear`.","lastModifiedDate":"2021-09-02"},{"lineNumber":150,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":151,"author":{"gitId":"junghon3709"},"content":"Example: `clear` -- clears all tasks.","lastModifiedDate":"2021-09-01"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":153,"author":{"gitId":"-"},"content":"Expected outcome: ","lastModifiedDate":"2019-07-29"},{"lineNumber":154,"author":{"gitId":"junghon3709"},"content":"```","lastModifiedDate":"2021-09-01"},{"lineNumber":155,"author":{"gitId":"junghon3709"},"content":"I\u0027ve cleared all your tasks!","lastModifiedDate":"2021-09-01"},{"lineNumber":156,"author":{"gitId":"junghon3709"},"content":"```","lastModifiedDate":"2021-09-01"},{"lineNumber":157,"author":{"gitId":"junghon3709"},"content":"__________","lastModifiedDate":"2021-09-01"},{"lineNumber":158,"author":{"gitId":"junghon3709"},"content":"### Listing all tasks","lastModifiedDate":"2021-09-01"},{"lineNumber":159,"author":{"gitId":"junghon3709"},"content":"Tiger can help list tasks. (After all, that\u0027s the whole point of a Todo app right?) The usage is `list`.","lastModifiedDate":"2021-09-02"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":161,"author":{"gitId":"junghon3709"},"content":"Example: `list` - lists all tasks.","lastModifiedDate":"2021-09-01"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":163,"author":{"gitId":"junghon3709"},"content":"Expected outcome:","lastModifiedDate":"2021-09-01"},{"lineNumber":164,"author":{"gitId":"junghon3709"},"content":"```","lastModifiedDate":"2021-09-01"},{"lineNumber":165,"author":{"gitId":"junghon3709"},"content":"1. [T] [M] Buy earphones at Woodlands","lastModifiedDate":"2021-09-01"},{"lineNumber":166,"author":{"gitId":"junghon3709"},"content":"2. [E] [H] Feed fish (at 2021-09-01 16:00)","lastModifiedDate":"2021-09-01"},{"lineNumber":167,"author":{"gitId":"junghon3709"},"content":"3. [D] [L] Graph theory assignment (by 2022-11-21 14:25)","lastModifiedDate":"2021-09-01"},{"lineNumber":168,"author":{"gitId":"junghon3709"},"content":"```","lastModifiedDate":"2021-09-01"},{"lineNumber":169,"author":{"gitId":"junghon3709"},"content":"\u003e Substitutable keywords: `ls`. ","lastModifiedDate":"2021-09-01"},{"lineNumber":170,"author":{"gitId":"junghon3709"},"content":"________","lastModifiedDate":"2021-09-01"},{"lineNumber":171,"author":{"gitId":"junghon3709"},"content":"### Exiting the app","lastModifiedDate":"2021-09-01"},{"lineNumber":172,"author":{"gitId":"junghon3709"},"content":"To quit the app, the usage is `bye`. ","lastModifiedDate":"2021-09-02"},{"lineNumber":173,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":174,"author":{"gitId":"junghon3709"},"content":"Example: `bye` - quits the app.","lastModifiedDate":"2021-09-01"},{"lineNumber":175,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":176,"author":{"gitId":"junghon3709"},"content":"Expected outcome:","lastModifiedDate":"2021-09-01"},{"lineNumber":177,"author":{"gitId":"junghon3709"},"content":"```","lastModifiedDate":"2021-09-01"},{"lineNumber":178,"author":{"gitId":"junghon3709"},"content":"Bye! Hope to see you again!","lastModifiedDate":"2021-09-01"},{"lineNumber":179,"author":{"gitId":"junghon3709"},"content":"```","lastModifiedDate":"2021-09-01"},{"lineNumber":180,"author":{"gitId":"junghon3709"},"content":"Note that the window waits a second to close.","lastModifiedDate":"2021-09-02"},{"lineNumber":181,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":182,"author":{"gitId":"junghon3709"},"content":"\u003e Substitutable keywords: `exit`, `quit`.","lastModifiedDate":"2021-09-01"},{"lineNumber":183,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":184,"author":{"gitId":"junghon3709"},"content":"## Advanced features","lastModifiedDate":"2021-09-01"},{"lineNumber":185,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":186,"author":{"gitId":"junghon3709"},"content":"### Substitutable keywords","lastModifiedDate":"2021-09-01"},{"lineNumber":187,"author":{"gitId":"junghon3709"},"content":"Tiger understands that some users are just bad at reading user manuals, so some commands can be substituted in place of regular commands and Tiger will act as if the regular command was keyed instead. This is indicated by the \"Substitutable keywords\" at the bottom of each section on command usage. ","lastModifiedDate":"2021-09-02"},{"lineNumber":188,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":189,"author":{"gitId":"junghon3709"},"content":"For instance, `find` performs the same action as `search`. ","lastModifiedDate":"2021-09-01"},{"lineNumber":190,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":191,"author":{"gitId":"junghon3709"},"content":"Example: `find Woodlands`.","lastModifiedDate":"2021-09-01"},{"lineNumber":192,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":193,"author":{"gitId":"junghon3709"},"content":"Expected outcome:","lastModifiedDate":"2021-09-01"},{"lineNumber":194,"author":{"gitId":"junghon3709"},"content":"```","lastModifiedDate":"2021-09-01"},{"lineNumber":195,"author":{"gitId":"junghon3709"},"content":"[T] [M] Buy earphones at Woodlands","lastModifiedDate":"2021-09-01"},{"lineNumber":196,"author":{"gitId":"junghon3709"},"content":"```","lastModifiedDate":"2021-09-01"},{"lineNumber":197,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":198,"author":{"gitId":"junghon3709"},"content":"Similarly, `ls` lists all the tasks.","lastModifiedDate":"2021-09-01"},{"lineNumber":199,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":200,"author":{"gitId":"junghon3709"},"content":"Example: `ls`.","lastModifiedDate":"2021-09-01"},{"lineNumber":201,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":202,"author":{"gitId":"junghon3709"},"content":"Expected outcome:","lastModifiedDate":"2021-09-01"},{"lineNumber":203,"author":{"gitId":"junghon3709"},"content":"```","lastModifiedDate":"2021-09-01"},{"lineNumber":204,"author":{"gitId":"junghon3709"},"content":"1. [T] [M] Buy earphones at Woodlands","lastModifiedDate":"2021-09-01"},{"lineNumber":205,"author":{"gitId":"junghon3709"},"content":"2. [E] [H] Feed fish (at 2021-09-01 16:00)","lastModifiedDate":"2021-09-01"},{"lineNumber":206,"author":{"gitId":"junghon3709"},"content":"3. [D] [L] Graph theory assignment (by 2022-11-21 14:25)","lastModifiedDate":"2021-09-01"},{"lineNumber":207,"author":{"gitId":"junghon3709"},"content":"```","lastModifiedDate":"2021-09-01"},{"lineNumber":208,"author":{"gitId":"junghon3709"},"content":"__________","lastModifiedDate":"2021-09-01"},{"lineNumber":209,"author":{"gitId":"junghon3709"},"content":"### Automatic date correction","lastModifiedDate":"2021-09-01"},{"lineNumber":210,"author":{"gitId":"junghon3709"},"content":"On top of interpreting the current date as today if the user doesn\u0027t specify the date, Tiger will do some minor corrections if the user inputs an invalid date by accident. ","lastModifiedDate":"2021-09-01"},{"lineNumber":211,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":212,"author":{"gitId":"junghon3709"},"content":"For example, Tiger \"rounds off\" the date if the day number is between 1 and 31. ","lastModifiedDate":"2021-09-01"},{"lineNumber":213,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":214,"author":{"gitId":"junghon3709"},"content":"Example: `event Event /at 2021-09-31 15:00`.","lastModifiedDate":"2021-09-01"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":216,"author":{"gitId":"junghon3709"},"content":"Expected outcome:","lastModifiedDate":"2021-09-01"},{"lineNumber":217,"author":{"gitId":"junghon3709"},"content":"```","lastModifiedDate":"2021-09-01"},{"lineNumber":218,"author":{"gitId":"junghon3709"},"content":"Excellent! I\u0027ve added this event:","lastModifiedDate":"2021-09-01"},{"lineNumber":219,"author":{"gitId":"junghon3709"},"content":"[E] [M] Event (at 2021-09-30 15:00)","lastModifiedDate":"2021-09-01"},{"lineNumber":220,"author":{"gitId":"junghon3709"},"content":"```","lastModifiedDate":"2021-09-01"},{"lineNumber":221,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":222,"author":{"gitId":"junghon3709"},"content":"Example: `event Event /at 2021-02-29 15:00` (this works for 30 and 31 as well).","lastModifiedDate":"2021-09-01"},{"lineNumber":223,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":224,"author":{"gitId":"junghon3709"},"content":"Expected outcome:","lastModifiedDate":"2021-09-01"},{"lineNumber":225,"author":{"gitId":"junghon3709"},"content":"```","lastModifiedDate":"2021-09-01"},{"lineNumber":226,"author":{"gitId":"junghon3709"},"content":"Excellent! I\u0027ve added this event:","lastModifiedDate":"2021-09-01"},{"lineNumber":227,"author":{"gitId":"junghon3709"},"content":"[E] [M] Event (at 2021-02-28 15:00)","lastModifiedDate":"2021-09-01"},{"lineNumber":228,"author":{"gitId":"junghon3709"},"content":"```","lastModifiedDate":"2021-09-01"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":230,"author":{"gitId":"junghon3709"},"content":"However, if Tiger detects that the user is trying to be malicious in entering the date, it starts screaming at the user:","lastModifiedDate":"2021-09-01"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":232,"author":{"gitId":"junghon3709"},"content":"Example: `event Event /at 2021-02-32 15:00` (this works for 30 and 31 as well).","lastModifiedDate":"2021-09-01"},{"lineNumber":233,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":234,"author":{"gitId":"-"},"content":"Expected outcome:","lastModifiedDate":"2021-09-01"},{"lineNumber":235,"author":{"gitId":"junghon3709"},"content":"```","lastModifiedDate":"2021-09-01"},{"lineNumber":236,"author":{"gitId":"junghon3709"},"content":"Please ensure you key in dates in the input specified.","lastModifiedDate":"2021-09-01"},{"lineNumber":237,"author":{"gitId":"junghon3709"},"content":"```","lastModifiedDate":"2021-09-01"},{"lineNumber":238,"author":{"gitId":"junghon3709"},"content":"__________","lastModifiedDate":"2021-09-01"},{"lineNumber":239,"author":{"gitId":"junghon3709"},"content":"### Partial loading","lastModifiedDate":"2021-09-01"},{"lineNumber":240,"author":{"gitId":"junghon3709"},"content":"Tiger knows that users love to mess around with its data files, sometimes corrupting it in the process. As such, Tiger is equipped with a mechanism called partial loading. If the data file is corrupted for _some reason_ (ahem ahem, the users), it tries to recover what it can. When Tiger detects it\u0027s data has been corrupted, it starts up with the following accusatory message:","lastModifiedDate":"2021-09-01"},{"lineNumber":241,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":242,"author":{"gitId":"junghon3709"},"content":"```","lastModifiedDate":"2021-09-01"},{"lineNumber":243,"author":{"gitId":"junghon3709"},"content":"Error encountered in loading the file! Did you alter my memory directly?","lastModifiedDate":"2021-09-01"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":245,"author":{"gitId":"junghon3709"},"content":"If you didn\u0027t backup my memory, would you like to try a partial load to see what can be removered? [Y/N]","lastModifiedDate":"2021-09-01"},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":247,"author":{"gitId":"junghon3709"},"content":"Pressing N will wipe data currently stored.","lastModifiedDate":"2021-09-01"},{"lineNumber":248,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-09-01"},{"lineNumber":249,"author":{"gitId":"junghon3709"},"content":"At this point, the user is expected to enter in `Y` or `N` (lower case accepted). `Y` will attempt a partial load of the data files, and Tiger will load the subset of tasks which can be recovered.","lastModifiedDate":"2021-09-01"},{"lineNumber":250,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":251,"author":{"gitId":"junghon3709"},"content":"Example: `Y`","lastModifiedDate":"2021-09-01"},{"lineNumber":252,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":253,"author":{"gitId":"junghon3709"},"content":"Expected outcome:","lastModifiedDate":"2021-09-01"},{"lineNumber":254,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-09-01"},{"lineNumber":255,"author":{"gitId":"junghon3709"},"content":"Hello, I\u0027m Tiger, your personal assistant. I\u0027ve recovered 5 tasks from my memory.","lastModifiedDate":"2021-09-01"},{"lineNumber":256,"author":{"gitId":"junghon3709"},"content":"```","lastModifiedDate":"2021-09-01"},{"lineNumber":257,"author":{"gitId":"junghon3709"},"content":"Some tasks might be lost.","lastModifiedDate":"2021-09-01"},{"lineNumber":258,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":259,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":260,"author":{"gitId":"junghon3709"},"content":"`N` will clear all tasks.","lastModifiedDate":"2021-09-01"},{"lineNumber":261,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":262,"author":{"gitId":"junghon3709"},"content":"Example: `N`","lastModifiedDate":"2021-09-01"},{"lineNumber":263,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":264,"author":{"gitId":"junghon3709"},"content":"Expected outcome:","lastModifiedDate":"2021-09-01"},{"lineNumber":265,"author":{"gitId":"junghon3709"},"content":"```","lastModifiedDate":"2021-09-01"},{"lineNumber":266,"author":{"gitId":"junghon3709"},"content":"Hello, I\u0027m Tiger, your personal assistant. I\u0027ve recovered 0 tasks from my memory.","lastModifiedDate":"2021-09-01"},{"lineNumber":267,"author":{"gitId":"junghon3709"},"content":"```","lastModifiedDate":"2021-09-01"},{"lineNumber":268,"author":{"gitId":"junghon3709"},"content":"If the user keys in any other input, he/she is clearly incapable of reading. Tiger will prompt the user to input `Y` or `N` until either one of them is keyed in.","lastModifiedDate":"2021-09-02"},{"lineNumber":269,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":270,"author":{"gitId":"junghon3709"},"content":"Example: `g`","lastModifiedDate":"2021-09-01"},{"lineNumber":271,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":272,"author":{"gitId":"junghon3709"},"content":"Expected outcome:","lastModifiedDate":"2021-09-01"},{"lineNumber":273,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":274,"author":{"gitId":"junghon3709"},"content":"Please enter Y or N only","lastModifiedDate":"2021-09-01"},{"lineNumber":275,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":276,"author":{"gitId":"junghon3709"},"content":"At this point, the user has tried to alter Tiger\u0027s data files and is not following simple instructions. Tiger is clearly pissed and does not bother put in a full-stop at the end of its sentences anymore.","lastModifiedDate":"2021-09-02"},{"lineNumber":277,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":278,"author":{"gitId":"junghon3709"},"content":"### **And that\u0027s all! Tiger is ready for the user to enter in all the *wrong* commands!**","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"junghon3709":252,"-":26}},{"path":"src/main/java/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"junghon3709"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"junghon3709"},"content":"import java.util.Collections;","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"junghon3709"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"junghon3709"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"junghon3709"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"junghon3709"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"junghon3709"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"junghon3709"},"content":"import javafx.scene.Node;","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"junghon3709"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"junghon3709"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"junghon3709"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"junghon3709"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"junghon3709"},"content":"import javafx.scene.text.Font;","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"junghon3709"},"content":"/**","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"junghon3709"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"junghon3709"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"junghon3709"},"content":" * containing text from the speaker.","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"junghon3709"},"content":" */","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"junghon3709"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"junghon3709"},"content":"    @FXML","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"junghon3709"},"content":"    private Label dialog;","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"junghon3709"},"content":"    @FXML","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"junghon3709"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"junghon3709"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2021-08-28"},{"lineNumber":28,"author":{"gitId":"junghon3709"},"content":"        try {","lastModifiedDate":"2021-08-28"},{"lineNumber":29,"author":{"gitId":"junghon3709"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2021-08-28"},{"lineNumber":30,"author":{"gitId":"junghon3709"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2021-08-28"},{"lineNumber":31,"author":{"gitId":"junghon3709"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2021-08-28"},{"lineNumber":32,"author":{"gitId":"junghon3709"},"content":"            fxmlLoader.load();","lastModifiedDate":"2021-08-28"},{"lineNumber":33,"author":{"gitId":"junghon3709"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-28"},{"lineNumber":34,"author":{"gitId":"junghon3709"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-28"},{"lineNumber":35,"author":{"gitId":"junghon3709"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":36,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":37,"author":{"gitId":"junghon3709"},"content":"        dialog.setText(text);","lastModifiedDate":"2021-08-28"},{"lineNumber":38,"author":{"gitId":"junghon3709"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2021-08-28"},{"lineNumber":39,"author":{"gitId":"junghon3709"},"content":"        Font font \u003d Font.loadFont(MainWindow.class.getResource(\"/fonts/VictorMono-Medium.ttf\").toExternalForm(),","lastModifiedDate":"2021-08-28"},{"lineNumber":40,"author":{"gitId":"junghon3709"},"content":"                14);","lastModifiedDate":"2021-08-28"},{"lineNumber":41,"author":{"gitId":"junghon3709"},"content":"        dialog.setFont(font);","lastModifiedDate":"2021-08-28"},{"lineNumber":42,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":43,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":44,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":45,"author":{"gitId":"junghon3709"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2021-08-28"},{"lineNumber":46,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":47,"author":{"gitId":"junghon3709"},"content":"    private void flip() {","lastModifiedDate":"2021-08-28"},{"lineNumber":48,"author":{"gitId":"junghon3709"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2021-08-28"},{"lineNumber":49,"author":{"gitId":"junghon3709"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2021-08-28"},{"lineNumber":50,"author":{"gitId":"junghon3709"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2021-08-28"},{"lineNumber":51,"author":{"gitId":"junghon3709"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2021-08-28"},{"lineNumber":52,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":53,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":54,"author":{"gitId":"junghon3709"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2021-08-28"},{"lineNumber":55,"author":{"gitId":"junghon3709"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2021-08-28"},{"lineNumber":56,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":57,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":58,"author":{"gitId":"junghon3709"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2021-08-28"},{"lineNumber":59,"author":{"gitId":"junghon3709"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2021-08-28"},{"lineNumber":60,"author":{"gitId":"junghon3709"},"content":"        db.flip();","lastModifiedDate":"2021-08-28"},{"lineNumber":61,"author":{"gitId":"junghon3709"},"content":"        return db;","lastModifiedDate":"2021-08-28"},{"lineNumber":62,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":63,"author":{"gitId":"junghon3709"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"junghon3709":63}},{"path":"src/main/java/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"junghon3709"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"junghon3709"},"content":"public class Launcher {","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"junghon3709"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"junghon3709"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"junghon3709"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"junghon3709":7}},{"path":"src/main/java/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"junghon3709"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"junghon3709"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"junghon3709"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"junghon3709"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"junghon3709"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"junghon3709"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"junghon3709"},"content":"/**","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"junghon3709"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"junghon3709"},"content":" */","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"junghon3709"},"content":"public class Main extends Application {","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"junghon3709"},"content":"    private final String APP_TITLE \u003d \"Tiger Helper Bot\";","lastModifiedDate":"2021-09-03"},{"lineNumber":15,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":16,"author":{"gitId":"junghon3709"},"content":"    @Override","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"junghon3709"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"junghon3709"},"content":"        try {","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"junghon3709"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"junghon3709"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"junghon3709"},"content":"            stage.setTitle(APP_TITLE);","lastModifiedDate":"2021-09-03"},{"lineNumber":22,"author":{"gitId":"junghon3709"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"junghon3709"},"content":"            stage.setScene(scene);","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"junghon3709"},"content":"            stage.show();","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"junghon3709"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"junghon3709"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"junghon3709"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":28,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":29,"author":{"gitId":"junghon3709"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"junghon3709":29}},{"path":"src/main/java/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"junghon3709"},"content":"import javafx.application.Platform;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"junghon3709"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"junghon3709"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"junghon3709"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"junghon3709"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"junghon3709"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"junghon3709"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"junghon3709"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"junghon3709"},"content":"import javafx.scene.text.Font;","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"junghon3709"},"content":"/**","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"junghon3709"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"junghon3709"},"content":" */","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"junghon3709"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"junghon3709"},"content":"    @FXML","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"junghon3709"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"junghon3709"},"content":"    @FXML","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"junghon3709"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"junghon3709"},"content":"    @FXML","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"junghon3709"},"content":"    private TextField userInput;","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"junghon3709"},"content":"    @FXML","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"junghon3709"},"content":"    private Button sendButton;","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"junghon3709"},"content":"    private final int FONT_SIZE \u003d 14;","lastModifiedDate":"2021-09-03"},{"lineNumber":25,"author":{"gitId":"junghon3709"},"content":"    private final int MILISECONDS_TO_SLEEP_BEFORE_QUITTING \u003d 1000;","lastModifiedDate":"2021-09-03"},{"lineNumber":26,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":27,"author":{"gitId":"junghon3709"},"content":"    private Tiger tiger \u003d new Tiger();","lastModifiedDate":"2021-08-28"},{"lineNumber":28,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":29,"author":{"gitId":"junghon3709"},"content":"    private final Image USER_IMAGE_LOCATION \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));","lastModifiedDate":"2021-09-03"},{"lineNumber":30,"author":{"gitId":"junghon3709"},"content":"    private final Image BOT_IMAGE_LOCATION \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));","lastModifiedDate":"2021-09-03"},{"lineNumber":31,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":32,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":33,"author":{"gitId":"junghon3709"},"content":"    @FXML","lastModifiedDate":"2021-08-28"},{"lineNumber":34,"author":{"gitId":"junghon3709"},"content":"    public void initialize() {","lastModifiedDate":"2021-08-28"},{"lineNumber":35,"author":{"gitId":"junghon3709"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2021-08-28"},{"lineNumber":36,"author":{"gitId":"junghon3709"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2021-08-28"},{"lineNumber":37,"author":{"gitId":"junghon3709"},"content":"            DialogBox.getDukeDialog(this.tiger.start(), BOT_IMAGE_LOCATION)","lastModifiedDate":"2021-09-03"},{"lineNumber":38,"author":{"gitId":"junghon3709"},"content":"        );","lastModifiedDate":"2021-08-28"},{"lineNumber":39,"author":{"gitId":"junghon3709"},"content":"        Font font \u003d Font.loadFont(MainWindow.class.getResource(\"/fonts/VictorMono-Medium.ttf\").toExternalForm(),","lastModifiedDate":"2021-08-28"},{"lineNumber":40,"author":{"gitId":"junghon3709"},"content":"                FONT_SIZE);","lastModifiedDate":"2021-09-03"},{"lineNumber":41,"author":{"gitId":"junghon3709"},"content":"        sendButton.setFont(font);","lastModifiedDate":"2021-08-28"},{"lineNumber":42,"author":{"gitId":"junghon3709"},"content":"        userInput.setFont(font);","lastModifiedDate":"2021-08-28"},{"lineNumber":43,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":44,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":45,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":46,"author":{"gitId":"junghon3709"},"content":"    public void setTiger(Tiger tiger) {","lastModifiedDate":"2021-08-28"},{"lineNumber":47,"author":{"gitId":"junghon3709"},"content":"        this.tiger \u003d tiger;","lastModifiedDate":"2021-08-28"},{"lineNumber":48,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":49,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":50,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":51,"author":{"gitId":"junghon3709"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2021-08-28"},{"lineNumber":52,"author":{"gitId":"junghon3709"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2021-08-28"},{"lineNumber":53,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":54,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":55,"author":{"gitId":"junghon3709"},"content":"    private void respondToUser() {","lastModifiedDate":"2021-08-28"},{"lineNumber":56,"author":{"gitId":"junghon3709"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2021-08-28"},{"lineNumber":57,"author":{"gitId":"junghon3709"},"content":"        System.out.println(input);","lastModifiedDate":"2021-08-28"},{"lineNumber":58,"author":{"gitId":"junghon3709"},"content":"        String response \u003d this.tiger.getResponse(input);","lastModifiedDate":"2021-08-28"},{"lineNumber":59,"author":{"gitId":"junghon3709"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2021-08-28"},{"lineNumber":60,"author":{"gitId":"junghon3709"},"content":"                DialogBox.getUserDialog(input, USER_IMAGE_LOCATION),","lastModifiedDate":"2021-09-03"},{"lineNumber":61,"author":{"gitId":"junghon3709"},"content":"                DialogBox.getDukeDialog(response, BOT_IMAGE_LOCATION)","lastModifiedDate":"2021-09-03"},{"lineNumber":62,"author":{"gitId":"junghon3709"},"content":"        );","lastModifiedDate":"2021-08-28"},{"lineNumber":63,"author":{"gitId":"junghon3709"},"content":"        userInput.clear();","lastModifiedDate":"2021-08-28"},{"lineNumber":64,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":65,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":66,"author":{"gitId":"junghon3709"},"content":"    private void checkExit() {","lastModifiedDate":"2021-08-28"},{"lineNumber":67,"author":{"gitId":"junghon3709"},"content":"        new Thread(","lastModifiedDate":"2021-08-28"},{"lineNumber":68,"author":{"gitId":"junghon3709"},"content":"                () -\u003e {","lastModifiedDate":"2021-08-28"},{"lineNumber":69,"author":{"gitId":"junghon3709"},"content":"                    // this whole thing is to show the last command before the user exits, so the app does not instantly","lastModifiedDate":"2021-08-28"},{"lineNumber":70,"author":{"gitId":"junghon3709"},"content":"                    // exit once the user types bye.","lastModifiedDate":"2021-08-28"},{"lineNumber":71,"author":{"gitId":"junghon3709"},"content":"                    if (this.tiger.isExited()) {","lastModifiedDate":"2021-08-28"},{"lineNumber":72,"author":{"gitId":"junghon3709"},"content":"                        try {","lastModifiedDate":"2021-08-28"},{"lineNumber":73,"author":{"gitId":"junghon3709"},"content":"                            Thread.sleep(MILISECONDS_TO_SLEEP_BEFORE_QUITTING);","lastModifiedDate":"2021-09-03"},{"lineNumber":74,"author":{"gitId":"junghon3709"},"content":"                        } catch (InterruptedException e) {","lastModifiedDate":"2021-08-28"},{"lineNumber":75,"author":{"gitId":"junghon3709"},"content":"                            System.out.println(e.getStackTrace());","lastModifiedDate":"2021-08-28"},{"lineNumber":76,"author":{"gitId":"junghon3709"},"content":"                        }","lastModifiedDate":"2021-08-28"},{"lineNumber":77,"author":{"gitId":"junghon3709"},"content":"                        Platform.exit();","lastModifiedDate":"2021-08-28"},{"lineNumber":78,"author":{"gitId":"junghon3709"},"content":"                    }","lastModifiedDate":"2021-08-28"},{"lineNumber":79,"author":{"gitId":"junghon3709"},"content":"                }","lastModifiedDate":"2021-08-28"},{"lineNumber":80,"author":{"gitId":"junghon3709"},"content":"        ).start();","lastModifiedDate":"2021-08-28"},{"lineNumber":81,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":82,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":83,"author":{"gitId":"junghon3709"},"content":"    @FXML","lastModifiedDate":"2021-08-28"},{"lineNumber":84,"author":{"gitId":"junghon3709"},"content":"    private void handleUserInput() {","lastModifiedDate":"2021-08-28"},{"lineNumber":85,"author":{"gitId":"junghon3709"},"content":"        respondToUser();","lastModifiedDate":"2021-08-28"},{"lineNumber":86,"author":{"gitId":"junghon3709"},"content":"        Platform.runLater(() -\u003e checkExit());","lastModifiedDate":"2021-08-28"},{"lineNumber":87,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":88,"author":{"gitId":"junghon3709"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"junghon3709":88}},{"path":"src/main/java/Tiger.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"junghon3709"},"content":"import tiger.app.Ui;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-13"},{"lineNumber":3,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"junghon3709"},"content":"public class Tiger {","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"junghon3709"},"content":"    // TODO: implement flags for delete done combination, invalid todo combination","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"junghon3709"},"content":"    // features: fallthrough commands","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"junghon3709"},"content":"    // priority","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"junghon3709"},"content":"    private Ui ui;","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"junghon3709"},"content":"    public Tiger() {","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"junghon3709"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"junghon3709"},"content":"    public String start() {","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"junghon3709"},"content":"        ui.start();","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"junghon3709"},"content":"        return ui.getResponse();","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"junghon3709"},"content":"    public String getResponse(String input) {","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"junghon3709"},"content":"        System.out.println(input);","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"junghon3709"},"content":"        ui.iterateOnce(input);","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"junghon3709"},"content":"        return ui.getResponse();","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"junghon3709"},"content":"    public boolean isExited() {","lastModifiedDate":"2021-08-28"},{"lineNumber":28,"author":{"gitId":"junghon3709"},"content":"        return ui.isExited();","lastModifiedDate":"2021-08-28"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":30,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"junghon3709":29,"-":2}},{"path":"src/main/java/tiger/actions/Action.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"junghon3709"},"content":"package tiger.actions;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":3,"author":{"gitId":"junghon3709"},"content":"import tiger.app.AppState;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"junghon3709"},"content":"/**","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"junghon3709"},"content":" * The abstract {@code Action} class is responsible for executing the command the user specifies.","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"junghon3709"},"content":" */","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"junghon3709"},"content":"public abstract class Action {","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"junghon3709"},"content":"    public abstract AppState run();","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"junghon3709"},"content":"}","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"junghon3709":11}},{"path":"src/main/java/tiger/actions/ByeAction.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"junghon3709"},"content":"package tiger.actions;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":3,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":4,"author":{"gitId":"junghon3709"},"content":"import tiger.app.AppState;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"junghon3709"},"content":"import tiger.constants.Flag;","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"junghon3709"},"content":"/**","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"junghon3709"},"content":" * Represents the action of the user leaving the app.","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"junghon3709"},"content":" */","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"junghon3709"},"content":"public class ByeAction extends Action {","lastModifiedDate":"2021-08-14"},{"lineNumber":12,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"junghon3709"},"content":"    private AppState applicationState;","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":15,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"junghon3709"},"content":"     * Constructor for {@code ByeAction}.","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"junghon3709"},"content":"     * @param applicationState Context of application from which to run the task from.","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"junghon3709"},"content":"    public ByeAction(AppState applicationState) {","lastModifiedDate":"2021-08-14"},{"lineNumber":22,"author":{"gitId":"junghon3709"},"content":"        this.applicationState \u003d applicationState;","lastModifiedDate":"2021-08-14"},{"lineNumber":23,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":24,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":25,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"junghon3709"},"content":"     * Runs the {@code Bye} action.","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"junghon3709"},"content":"     * @return an updated {@code AppState}.","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"junghon3709"},"content":"    @Override","lastModifiedDate":"2021-08-14"},{"lineNumber":32,"author":{"gitId":"junghon3709"},"content":"    public AppState run() {","lastModifiedDate":"2021-08-14"},{"lineNumber":33,"author":{"gitId":"junghon3709"},"content":"        String response \u003d \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"junghon3709"},"content":"        return new AppState(this.applicationState.getTaskList(), response, Flag.IS_EXITED);","lastModifiedDate":"2021-08-28"},{"lineNumber":35,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":36,"author":{"gitId":"junghon3709"},"content":"}","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"junghon3709":36}},{"path":"src/main/java/tiger/actions/ClearAction.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"junghon3709"},"content":"package tiger.actions;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"junghon3709"},"content":"import tiger.app.AppState;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"junghon3709"},"content":"import tiger.components.TaskList;","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"junghon3709"},"content":"/**","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"junghon3709"},"content":" * Represents the action of clearing the task list.","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"junghon3709"},"content":" */","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"junghon3709"},"content":"public class ClearAction extends Action {","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"junghon3709"},"content":"    private AppState applicationState;","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"junghon3709"},"content":"     * Constructor for the {@code ClearAction}","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"junghon3709"},"content":"     * @param applicationState Context of application from which to run the task from.","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"junghon3709"},"content":"    public ClearAction(AppState applicationState) {","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"junghon3709"},"content":"        this.applicationState \u003d applicationState;","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"junghon3709"},"content":"     * Runs the {@code List} action.","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"junghon3709"},"content":"     * @return an updated {@code AppState}.","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"junghon3709"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"junghon3709"},"content":"    public AppState run() {","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"junghon3709"},"content":"        String response \u003d \"I\u0027ve cleared all your tasks!\";","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"junghon3709"},"content":"        return new AppState(new TaskList(), response);","lastModifiedDate":"2021-08-28"},{"lineNumber":34,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"junghon3709"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"junghon3709":35}},{"path":"src/main/java/tiger/actions/DeadLineAction.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"junghon3709"},"content":"package tiger.actions;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":3,"author":{"gitId":"junghon3709"},"content":"import tiger.app.AppState;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"junghon3709"},"content":"import tiger.components.DeadLine;","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"junghon3709"},"content":"import tiger.components.TaskList;","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"junghon3709"},"content":"import tiger.constants.Priority;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"junghon3709"},"content":"import tiger.utils.CustomDate;","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":9,"author":{"gitId":"junghon3709"},"content":"/**","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"junghon3709"},"content":" * Represents the action of the user adding a deadline.","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"junghon3709"},"content":" */","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"junghon3709"},"content":"public class DeadLineAction extends Action {","lastModifiedDate":"2021-08-14"},{"lineNumber":14,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"junghon3709"},"content":"    private AppState applicationState;","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"junghon3709"},"content":"    private String todo;","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"junghon3709"},"content":"    private CustomDate date;","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"junghon3709"},"content":"    private Priority priority;","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":20,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"junghon3709"},"content":"     * Constructor for the {@code DeadLineAction class}","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"junghon3709"},"content":"     * @param applicationState Context of application from which to run the task from.","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"junghon3709"},"content":"     * @param todo Description of the users todo.","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"junghon3709"},"content":"     * @param date Deadline of the task.","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"junghon3709"},"content":"     * @param priority The priority of the task, specified by the user (if any).","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":28,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":29,"author":{"gitId":"junghon3709"},"content":"    public DeadLineAction(AppState applicationState, String todo, CustomDate date, Priority priority) {","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"junghon3709"},"content":"        this.applicationState \u003d applicationState;","lastModifiedDate":"2021-08-14"},{"lineNumber":31,"author":{"gitId":"junghon3709"},"content":"        this.todo \u003d todo;","lastModifiedDate":"2021-08-14"},{"lineNumber":32,"author":{"gitId":"junghon3709"},"content":"        this.date \u003d date;","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"junghon3709"},"content":"        this.priority \u003d priority;","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":35,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":36,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"junghon3709"},"content":"     * Runs the {@code DeadLine} action.","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"junghon3709"},"content":"     * @return an updated {@code AppState}.","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"junghon3709"},"content":"    public AppState run() {","lastModifiedDate":"2021-08-14"},{"lineNumber":43,"author":{"gitId":"junghon3709"},"content":"        TaskList taskList \u003d this.applicationState.getTaskList();","lastModifiedDate":"2021-08-28"},{"lineNumber":44,"author":{"gitId":"junghon3709"},"content":"        TaskList newTaskList \u003d taskList.addTask(new DeadLine(this.todo, false, this.date, this.priority));","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"junghon3709"},"content":"        String response \u003d String.format(\"Excellent! I\u0027ve added this deadline:\\n%s\",","lastModifiedDate":"2021-08-23"},{"lineNumber":46,"author":{"gitId":"junghon3709"},"content":"                taskList.showTask(taskList.size() - 1));","lastModifiedDate":"2021-08-23"},{"lineNumber":47,"author":{"gitId":"junghon3709"},"content":"        return new AppState(newTaskList, response);","lastModifiedDate":"2021-08-28"},{"lineNumber":48,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":49,"author":{"gitId":"junghon3709"},"content":"}","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"junghon3709":49}},{"path":"src/main/java/tiger/actions/DeleteAction.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"junghon3709"},"content":"package tiger.actions;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":3,"author":{"gitId":"junghon3709"},"content":"import tiger.app.AppState;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"junghon3709"},"content":"import tiger.components.TaskList;","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"junghon3709"},"content":"import tiger.exceptions.actions.TigerIndexOutOfBoundsException;","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":7,"author":{"gitId":"junghon3709"},"content":"/**","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"junghon3709"},"content":" * Represents the action of the user deleting a task.","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"junghon3709"},"content":" */","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"junghon3709"},"content":"public class DeleteAction extends Action {","lastModifiedDate":"2021-08-14"},{"lineNumber":12,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"junghon3709"},"content":"    private AppState applicationState;","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"junghon3709"},"content":"    private int index;","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":16,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"junghon3709"},"content":"     * Constructor for the {@code DeleteAction} class.","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"junghon3709"},"content":"     * @param applicationState Context of application from which to run the task from.","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"junghon3709"},"content":"     * @param index Index of the task to delete.","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"junghon3709"},"content":"    public DeleteAction(AppState applicationState, int index) {","lastModifiedDate":"2021-08-14"},{"lineNumber":24,"author":{"gitId":"junghon3709"},"content":"        this.applicationState \u003d applicationState;","lastModifiedDate":"2021-08-14"},{"lineNumber":25,"author":{"gitId":"junghon3709"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-08-14"},{"lineNumber":26,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":27,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":28,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":29,"author":{"gitId":"junghon3709"},"content":"     * Runs the {@code Delete} action.","lastModifiedDate":"2021-08-28"},{"lineNumber":30,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":31,"author":{"gitId":"junghon3709"},"content":"     * @return an updated {@code AppState}.","lastModifiedDate":"2021-08-28"},{"lineNumber":32,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":33,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":34,"author":{"gitId":"junghon3709"},"content":"    public AppState run() throws TigerIndexOutOfBoundsException {","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"junghon3709"},"content":"        TaskList taskList \u003d this.applicationState.getTaskList();","lastModifiedDate":"2021-08-28"},{"lineNumber":36,"author":{"gitId":"junghon3709"},"content":"        String response \u003d String.format(\"Feeling lazy today? I\u0027ve deleted:\\n%s\",","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"junghon3709"},"content":"                taskList.showTask(index));","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"junghon3709"},"content":"        TaskList newTaskList \u003d taskList.deleteTask(index);","lastModifiedDate":"2021-08-23"},{"lineNumber":39,"author":{"gitId":"junghon3709"},"content":"        return new AppState(newTaskList, response);","lastModifiedDate":"2021-08-28"},{"lineNumber":40,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":41,"author":{"gitId":"junghon3709"},"content":"}","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"junghon3709":41}},{"path":"src/main/java/tiger/actions/EventAction.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"junghon3709"},"content":"package tiger.actions;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":3,"author":{"gitId":"junghon3709"},"content":"import tiger.app.AppState;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"junghon3709"},"content":"import tiger.components.Event;","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"junghon3709"},"content":"import tiger.components.TaskList;","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"junghon3709"},"content":"import tiger.constants.Priority;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"junghon3709"},"content":"import tiger.utils.CustomDate;","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":9,"author":{"gitId":"junghon3709"},"content":"/**","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"junghon3709"},"content":" * Represents the action of the user adding an event.","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"junghon3709"},"content":" */","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"junghon3709"},"content":"public class EventAction extends Action {","lastModifiedDate":"2021-08-14"},{"lineNumber":14,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"junghon3709"},"content":"    private AppState applicationState;","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"junghon3709"},"content":"    private String todo;","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"junghon3709"},"content":"    private CustomDate date;","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"junghon3709"},"content":"    private Priority priority;","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"junghon3709"},"content":"     * Constructor for the {@code EventAction class}","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"junghon3709"},"content":"     * @param applicationState Context of application from which to run the task from.","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"junghon3709"},"content":"     * @param todo Description of the users event.","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"junghon3709"},"content":"     * @param date Deadline of the task.","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"junghon3709"},"content":"     * @param priority The priority of the task, specified by the user (if any).","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":28,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":29,"author":{"gitId":"junghon3709"},"content":"    public EventAction(AppState applicationState, String todo, CustomDate date, Priority priority) {","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"junghon3709"},"content":"        this.applicationState \u003d applicationState;","lastModifiedDate":"2021-08-14"},{"lineNumber":31,"author":{"gitId":"junghon3709"},"content":"        this.todo \u003d todo;","lastModifiedDate":"2021-08-14"},{"lineNumber":32,"author":{"gitId":"junghon3709"},"content":"        this.date \u003d date;","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"junghon3709"},"content":"        this.priority \u003d priority;","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":35,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":36,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"junghon3709"},"content":"     * Runs the {@code Event} action.","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"junghon3709"},"content":"     * @return an updated {@code AppState}.","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"junghon3709"},"content":"    public AppState run() {","lastModifiedDate":"2021-08-14"},{"lineNumber":43,"author":{"gitId":"junghon3709"},"content":"        TaskList taskList \u003d this.applicationState.getTaskList();","lastModifiedDate":"2021-08-28"},{"lineNumber":44,"author":{"gitId":"junghon3709"},"content":"        TaskList newTaskList \u003d taskList.addTask(new Event(this.todo, false, this.date, this.priority));","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"junghon3709"},"content":"        String response \u003d String.format(\"Excellent! I\u0027ve added this event:\\n%s\",","lastModifiedDate":"2021-08-23"},{"lineNumber":46,"author":{"gitId":"junghon3709"},"content":"                taskList.showTask(taskList.size() - 1));","lastModifiedDate":"2021-08-23"},{"lineNumber":47,"author":{"gitId":"junghon3709"},"content":"        return new AppState(newTaskList, response);","lastModifiedDate":"2021-08-28"},{"lineNumber":48,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":49,"author":{"gitId":"junghon3709"},"content":"}","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"junghon3709":49}},{"path":"src/main/java/tiger/actions/FindAction.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"junghon3709"},"content":"package tiger.actions;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"junghon3709"},"content":"import tiger.app.AppState;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"junghon3709"},"content":"import tiger.components.TaskList;","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"junghon3709"},"content":"/**","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"junghon3709"},"content":" * Represents the action of the user finding a task.","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"junghon3709"},"content":" */","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"junghon3709"},"content":"public class FindAction extends Action {","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"junghon3709"},"content":"    private AppState applicationState;","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"junghon3709"},"content":"    private String findDescription;","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"junghon3709"},"content":"     * Constructor for the {@code FindAction class}","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"junghon3709"},"content":"     * @param applicationState Context of application from which to run the task from.","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"junghon3709"},"content":"     * @param findDescription Substring of the tasks the user wishes to find.","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"junghon3709"},"content":"    public FindAction(AppState applicationState, String findDescription) {","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"junghon3709"},"content":"        this.applicationState \u003d applicationState;","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"junghon3709"},"content":"        this.findDescription \u003d findDescription;","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"junghon3709"},"content":"     * Runs the {@code FindAction} action.","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"junghon3709"},"content":"     * @return an updated {@code AppState}.","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"junghon3709"},"content":"    public AppState run() {","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"junghon3709"},"content":"        TaskList newTaskList \u003d this.applicationState.getTaskList().findRelevantTasks(this.findDescription);","lastModifiedDate":"2021-08-28"},{"lineNumber":35,"author":{"gitId":"junghon3709"},"content":"        String response \u003d newTaskList.toString();","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"junghon3709"},"content":"        return new AppState(this.applicationState.getTaskList(), response);","lastModifiedDate":"2021-08-28"},{"lineNumber":37,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"junghon3709"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"junghon3709":41}},{"path":"src/main/java/tiger/actions/InvalidAction.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"junghon3709"},"content":"package tiger.actions;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":3,"author":{"gitId":"junghon3709"},"content":"import tiger.app.AppState;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"junghon3709"},"content":"/**","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"junghon3709"},"content":" * Represents the action of the user inputting an invalid command.","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"junghon3709"},"content":" */","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"junghon3709"},"content":"public class InvalidAction extends Action {","lastModifiedDate":"2021-08-14"},{"lineNumber":10,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"junghon3709"},"content":"    private AppState applicationState;","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"junghon3709"},"content":"     * Constructor for the {@code InvalidAction class}","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"junghon3709"},"content":"     * @param applicationState Context of application from which to run the task from.","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":19,"author":{"gitId":"junghon3709"},"content":"    public InvalidAction(AppState applicationState) {","lastModifiedDate":"2021-08-14"},{"lineNumber":20,"author":{"gitId":"junghon3709"},"content":"        this.applicationState \u003d applicationState;","lastModifiedDate":"2021-08-14"},{"lineNumber":21,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":22,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":23,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"junghon3709"},"content":"     * Runs the {@code Invalid} action. Used when the user enters an invalid input.","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"junghon3709"},"content":"     * @return an updated {@code AppState}.","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"junghon3709"},"content":"    @Override","lastModifiedDate":"2021-08-14"},{"lineNumber":31,"author":{"gitId":"junghon3709"},"content":"    public AppState run() {","lastModifiedDate":"2021-08-14"},{"lineNumber":32,"author":{"gitId":"junghon3709"},"content":"        String response \u003d \"Please enter in a valid command.\";","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"junghon3709"},"content":"        return new AppState(this.applicationState.getTaskList(), response);","lastModifiedDate":"2021-08-28"},{"lineNumber":34,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":35,"author":{"gitId":"junghon3709"},"content":"}","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"junghon3709":35}},{"path":"src/main/java/tiger/actions/ListAction.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"junghon3709"},"content":"package tiger.actions;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":3,"author":{"gitId":"junghon3709"},"content":"import tiger.app.AppState;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"junghon3709"},"content":"/**","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"junghon3709"},"content":" * Represents the action of the user listing all tasks.","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"junghon3709"},"content":" */","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"junghon3709"},"content":"public class ListAction extends Action {","lastModifiedDate":"2021-08-14"},{"lineNumber":10,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"junghon3709"},"content":"    private AppState applicationState;","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"junghon3709"},"content":"     * Constructor for the {@code ListAction class}","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"junghon3709"},"content":"     * @param applicationState Context of application from which to run the task from.","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":19,"author":{"gitId":"junghon3709"},"content":"    public ListAction(AppState applicationState) {","lastModifiedDate":"2021-08-14"},{"lineNumber":20,"author":{"gitId":"junghon3709"},"content":"        this.applicationState \u003d applicationState;","lastModifiedDate":"2021-08-14"},{"lineNumber":21,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":22,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":23,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"junghon3709"},"content":"     * Runs the {@code List} action.","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"junghon3709"},"content":"     * @return an updated {@code AppState}.","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"junghon3709"},"content":"    @Override","lastModifiedDate":"2021-08-14"},{"lineNumber":30,"author":{"gitId":"junghon3709"},"content":"    public AppState run() {","lastModifiedDate":"2021-08-14"},{"lineNumber":31,"author":{"gitId":"junghon3709"},"content":"        String response \u003d this.applicationState.getTaskList().toString();","lastModifiedDate":"2021-08-28"},{"lineNumber":32,"author":{"gitId":"junghon3709"},"content":"        return new AppState(this.applicationState.getTaskList(), response);","lastModifiedDate":"2021-08-28"},{"lineNumber":33,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":34,"author":{"gitId":"junghon3709"},"content":"}","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"junghon3709":34}},{"path":"src/main/java/tiger/actions/MarkDoneAction.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"junghon3709"},"content":"package tiger.actions;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":3,"author":{"gitId":"junghon3709"},"content":"import tiger.app.AppState;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"junghon3709"},"content":"import tiger.components.TaskList;","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"junghon3709"},"content":"import tiger.exceptions.actions.TigerIndexOutOfBoundsException;","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":7,"author":{"gitId":"junghon3709"},"content":"/**","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"junghon3709"},"content":" * Represents the action of the user marking a task as done.","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"junghon3709"},"content":" */","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"junghon3709"},"content":"public class MarkDoneAction extends Action {","lastModifiedDate":"2021-08-14"},{"lineNumber":13,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"junghon3709"},"content":"    private AppState applicationState;","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"junghon3709"},"content":"    private int index;","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":17,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"junghon3709"},"content":"     * Constructor for the {@code MarkDoneAction} class.","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"junghon3709"},"content":"     * @param applicationState Context of application from which to run the task from.","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"junghon3709"},"content":"     * @param index Index of the task to mark done..","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"junghon3709"},"content":"    public MarkDoneAction(AppState applicationState, int index) {","lastModifiedDate":"2021-08-14"},{"lineNumber":25,"author":{"gitId":"junghon3709"},"content":"        this.applicationState \u003d applicationState;","lastModifiedDate":"2021-08-14"},{"lineNumber":26,"author":{"gitId":"junghon3709"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-08-14"},{"lineNumber":27,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":28,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":29,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":30,"author":{"gitId":"junghon3709"},"content":"     * Runs the {@code MarkDoneAction} action.","lastModifiedDate":"2021-08-28"},{"lineNumber":31,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":32,"author":{"gitId":"junghon3709"},"content":"     * @return an updated {@code AppState}.","lastModifiedDate":"2021-08-28"},{"lineNumber":33,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":34,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":35,"author":{"gitId":"junghon3709"},"content":"    public AppState run() throws TigerIndexOutOfBoundsException {","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"junghon3709"},"content":"        TaskList taskList \u003d this.applicationState.getTaskList();","lastModifiedDate":"2021-08-28"},{"lineNumber":37,"author":{"gitId":"junghon3709"},"content":"        TaskList newTaskList \u003d taskList.markTaskDone(index);","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"junghon3709"},"content":"        String response \u003d String.format(\"Nice! I\u0027ve marked this task as done:\\n%s\",","lastModifiedDate":"2021-08-23"},{"lineNumber":39,"author":{"gitId":"junghon3709"},"content":"                newTaskList.showTask(index));","lastModifiedDate":"2021-08-23"},{"lineNumber":40,"author":{"gitId":"junghon3709"},"content":"        return new AppState(newTaskList, response);","lastModifiedDate":"2021-08-28"},{"lineNumber":41,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":42,"author":{"gitId":"junghon3709"},"content":"}","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"junghon3709":42}},{"path":"src/main/java/tiger/actions/StorageLoadAction.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"junghon3709"},"content":"package tiger.actions;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"junghon3709"},"content":"import tiger.app.AppState;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"junghon3709"},"content":"import tiger.components.TaskList;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"junghon3709"},"content":"import tiger.constants.Flag;","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"junghon3709"},"content":"import tiger.exceptions.storage.TigerStorageInitException;","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"junghon3709"},"content":"import tiger.exceptions.storage.TigerStorageLoadException;","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"junghon3709"},"content":"import tiger.exceptions.storage.TigerStorageSaveException;","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"junghon3709"},"content":"import tiger.storage.Storage;","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"junghon3709"},"content":"/**","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"junghon3709"},"content":" * Represents the action of loading the data saved at the start of the app.","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"junghon3709"},"content":" */","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"junghon3709"},"content":"public class StorageLoadAction extends Action {","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"junghon3709"},"content":"    private AppState applicationState;","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"junghon3709"},"content":"     * Constructor for the {@code StorageLoadAction class}","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"junghon3709"},"content":"     * @param applicationState Context of application from which to run the task from.","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"junghon3709"},"content":"    public StorageLoadAction(AppState applicationState) {","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"junghon3709"},"content":"        this.applicationState \u003d applicationState;","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":30,"author":{"gitId":"junghon3709"},"content":"     * Runs the {@code StorageLoadAction} action.","lastModifiedDate":"2021-08-28"},{"lineNumber":31,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":32,"author":{"gitId":"junghon3709"},"content":"     * @return an updated {@code AppState}.","lastModifiedDate":"2021-08-28"},{"lineNumber":33,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":34,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":35,"author":{"gitId":"junghon3709"},"content":"    @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"junghon3709"},"content":"    public AppState run() {","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"junghon3709"},"content":"        String response;","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"junghon3709"},"content":"        TaskList taskList;","lastModifiedDate":"2021-08-23"},{"lineNumber":39,"author":{"gitId":"junghon3709"},"content":"        switch (this.applicationState.checkFlag()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":40,"author":{"gitId":"junghon3709"},"content":"        case STORAGE_FAILED:","lastModifiedDate":"2021-08-23"},{"lineNumber":41,"author":{"gitId":"junghon3709"},"content":"            /* This case will happen when we tried and failed to init the storage, and after prompting the user","lastModifiedDate":"2021-08-23"},{"lineNumber":42,"author":{"gitId":"junghon3709"},"content":"            whether to wipe or do partial loading, the user responds with an invalid input. */","lastModifiedDate":"2021-08-23"},{"lineNumber":43,"author":{"gitId":"junghon3709"},"content":"            return new AppState(new TaskList(), \"Please enter Y or N only\",","lastModifiedDate":"2021-08-28"},{"lineNumber":44,"author":{"gitId":"junghon3709"},"content":"                    Flag.STORAGE_FAILED);","lastModifiedDate":"2021-08-28"},{"lineNumber":45,"author":{"gitId":"junghon3709"},"content":"        case STORAGE_WIPE:","lastModifiedDate":"2021-08-23"},{"lineNumber":46,"author":{"gitId":"junghon3709"},"content":"            /* Check if the user wants to wipe the storage */","lastModifiedDate":"2021-08-23"},{"lineNumber":47,"author":{"gitId":"junghon3709"},"content":"            response \u003d \"Hello, I am Tiger, your personal assistant. I have fetched 0 tasks from my memory.\";","lastModifiedDate":"2021-08-23"},{"lineNumber":48,"author":{"gitId":"junghon3709"},"content":"            try {","lastModifiedDate":"2021-08-23"},{"lineNumber":49,"author":{"gitId":"junghon3709"},"content":"                Storage.wipeStorage();","lastModifiedDate":"2021-08-23"},{"lineNumber":50,"author":{"gitId":"junghon3709"},"content":"                return new AppState(Storage.load(), response);","lastModifiedDate":"2021-08-28"},{"lineNumber":51,"author":{"gitId":"junghon3709"},"content":"            } catch (TigerStorageSaveException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":52,"author":{"gitId":"junghon3709"},"content":"                /* If for whatever reason, we failed to wipe storage, we force wipe storage by creating a new","lastModifiedDate":"2021-08-23"},{"lineNumber":53,"author":{"gitId":"junghon3709"},"content":"                TaskList */","lastModifiedDate":"2021-08-23"},{"lineNumber":54,"author":{"gitId":"junghon3709"},"content":"                return new AppState(new TaskList(), response);","lastModifiedDate":"2021-08-28"},{"lineNumber":55,"author":{"gitId":"junghon3709"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":56,"author":{"gitId":"junghon3709"},"content":"        case STORAGE_PARTIAL_LOAD:","lastModifiedDate":"2021-08-23"},{"lineNumber":57,"author":{"gitId":"junghon3709"},"content":"            /* Checks if the user wants to do partial loading. */","lastModifiedDate":"2021-08-23"},{"lineNumber":58,"author":{"gitId":"junghon3709"},"content":"            taskList \u003d Storage.partialLoad();","lastModifiedDate":"2021-08-23"},{"lineNumber":59,"author":{"gitId":"junghon3709"},"content":"            response \u003d String.format(\"Hello, I am Tiger, your personal assistant. I have fetched %d tasks from my \"","lastModifiedDate":"2021-08-28"},{"lineNumber":60,"author":{"gitId":"junghon3709"},"content":"                    + \"memory.\", taskList.size());","lastModifiedDate":"2021-08-28"},{"lineNumber":61,"author":{"gitId":"junghon3709"},"content":"            return new AppState(taskList, response);","lastModifiedDate":"2021-08-28"},{"lineNumber":62,"author":{"gitId":"junghon3709"},"content":"        case STORAGE_NOT_YET_INIT:","lastModifiedDate":"2021-08-23"},{"lineNumber":63,"author":{"gitId":"junghon3709"},"content":"            /* Else, load the storage normally for the user. If the file isn\u0027t there and we fail creating it, send a","lastModifiedDate":"2021-08-23"},{"lineNumber":64,"author":{"gitId":"junghon3709"},"content":"            message asking user to try again. If the file is there and we fail loading the file, send a message back","lastModifiedDate":"2021-08-23"},{"lineNumber":65,"author":{"gitId":"junghon3709"},"content":"            asking if the user wants to do partial loading. The user should either respond with {@code Flag","lastModifiedDate":"2021-08-28"},{"lineNumber":66,"author":{"gitId":"junghon3709"},"content":"            .STORAGE_WIPE}","lastModifiedDate":"2021-08-28"},{"lineNumber":67,"author":{"gitId":"junghon3709"},"content":"            or {@code Flag.STORAGE_PARTIAL_LOAD} */","lastModifiedDate":"2021-08-23"},{"lineNumber":68,"author":{"gitId":"junghon3709"},"content":"            try {","lastModifiedDate":"2021-08-23"},{"lineNumber":69,"author":{"gitId":"junghon3709"},"content":"                Storage.makeFileIfNotPresent();","lastModifiedDate":"2021-08-23"},{"lineNumber":70,"author":{"gitId":"junghon3709"},"content":"            } catch (TigerStorageInitException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":71,"author":{"gitId":"junghon3709"},"content":"                return new AppState(new TaskList(), e.toString());","lastModifiedDate":"2021-08-28"},{"lineNumber":72,"author":{"gitId":"junghon3709"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":73,"author":{"gitId":"junghon3709"},"content":"            try {","lastModifiedDate":"2021-08-23"},{"lineNumber":74,"author":{"gitId":"junghon3709"},"content":"                taskList \u003d Storage.load();","lastModifiedDate":"2021-08-23"},{"lineNumber":75,"author":{"gitId":"junghon3709"},"content":"                response \u003d String.format(\"Hello, I am Tiger, your personal assistant. I have fetched %d tasks from my \"","lastModifiedDate":"2021-08-28"},{"lineNumber":76,"author":{"gitId":"junghon3709"},"content":"                        + \"memory.\", taskList.size());","lastModifiedDate":"2021-08-28"},{"lineNumber":77,"author":{"gitId":"junghon3709"},"content":"                return new AppState(taskList, response);","lastModifiedDate":"2021-08-28"},{"lineNumber":78,"author":{"gitId":"junghon3709"},"content":"            } catch (TigerStorageLoadException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":79,"author":{"gitId":"junghon3709"},"content":"                return new AppState(new TaskList(), e.toString(), Flag.STORAGE_FAILED);","lastModifiedDate":"2021-08-28"},{"lineNumber":80,"author":{"gitId":"junghon3709"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":81,"author":{"gitId":"junghon3709"},"content":"        default:","lastModifiedDate":"2021-08-23"},{"lineNumber":82,"author":{"gitId":"junghon3709"},"content":"            return new AppState(new TaskList(), Flag.STORAGE_FAILED);","lastModifiedDate":"2021-08-28"},{"lineNumber":83,"author":{"gitId":"junghon3709"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":84,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":85,"author":{"gitId":"junghon3709"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"junghon3709":85}},{"path":"src/main/java/tiger/actions/StorageSaveAction.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"junghon3709"},"content":"package tiger.actions;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"junghon3709"},"content":"import tiger.app.AppState;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"junghon3709"},"content":"import tiger.exceptions.storage.TigerStorageSaveException;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"junghon3709"},"content":"import tiger.storage.Storage;","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"junghon3709"},"content":"/**","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"junghon3709"},"content":" * Represents the action of saving the data at the end of each user command.","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"junghon3709"},"content":" */","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"junghon3709"},"content":"public class StorageSaveAction extends Action {","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"junghon3709"},"content":"    private AppState applicationState;","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"junghon3709"},"content":"    public StorageSaveAction(AppState applicationState) {","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"junghon3709"},"content":"        this.applicationState \u003d applicationState;","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"junghon3709"},"content":"    @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"junghon3709"},"content":"    public AppState run() throws TigerStorageSaveException {","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"junghon3709"},"content":"        Storage.save(this.applicationState.getTaskList());","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"junghon3709"},"content":"        return this.applicationState;","lastModifiedDate":"2021-08-23"},{"lineNumber":22,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"junghon3709"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"junghon3709":23}},{"path":"src/main/java/tiger/actions/ToDoAction.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"junghon3709"},"content":"package tiger.actions;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":3,"author":{"gitId":"junghon3709"},"content":"import tiger.app.AppState;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"junghon3709"},"content":"import tiger.components.TaskList;","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"junghon3709"},"content":"import tiger.components.ToDo;","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"junghon3709"},"content":"import tiger.constants.Priority;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":8,"author":{"gitId":"junghon3709"},"content":"/**","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"junghon3709"},"content":" * Represents the action of the user adding a new Todo.","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"junghon3709"},"content":" */","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"junghon3709"},"content":"public class ToDoAction extends Action {","lastModifiedDate":"2021-08-14"},{"lineNumber":13,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"junghon3709"},"content":"    private AppState applicationState;","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"junghon3709"},"content":"    private String todo;","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"junghon3709"},"content":"    private Priority priority;","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":18,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"junghon3709"},"content":"     * Constructor for the {@code ToDoAction} class.","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"junghon3709"},"content":"     * @param applicationState Context of application from which to run the task from.","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"junghon3709"},"content":"     * @param todo Description of the user\u0027s task.","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"junghon3709"},"content":"     * @param priority The priority of the task, specified by the user (if any).","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"junghon3709"},"content":"    public ToDoAction(AppState applicationState, String todo, Priority priority) {","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"junghon3709"},"content":"        this.applicationState \u003d applicationState;","lastModifiedDate":"2021-08-14"},{"lineNumber":28,"author":{"gitId":"junghon3709"},"content":"        this.todo \u003d todo;","lastModifiedDate":"2021-08-14"},{"lineNumber":29,"author":{"gitId":"junghon3709"},"content":"        this.priority \u003d priority;","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":31,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":32,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"junghon3709"},"content":"     * Runs the {@code ToDo} action.","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"junghon3709"},"content":"     * @return an updated {@code AppState}.","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"junghon3709"},"content":"    public AppState run() {","lastModifiedDate":"2021-08-14"},{"lineNumber":39,"author":{"gitId":"junghon3709"},"content":"        TaskList taskList \u003d this.applicationState.getTaskList();","lastModifiedDate":"2021-08-28"},{"lineNumber":40,"author":{"gitId":"junghon3709"},"content":"        TaskList newTaskList \u003d taskList.addTask(new ToDo(this.todo, false, priority));","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"junghon3709"},"content":"        String response \u003d String.format(\"Excellent! I\u0027ve added this task:\\n%s\",","lastModifiedDate":"2021-08-23"},{"lineNumber":42,"author":{"gitId":"junghon3709"},"content":"                taskList.showTask(taskList.size() - 1));","lastModifiedDate":"2021-08-23"},{"lineNumber":43,"author":{"gitId":"junghon3709"},"content":"        return new AppState(newTaskList, response);","lastModifiedDate":"2021-08-28"},{"lineNumber":44,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":45,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":46,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":47,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":48,"author":{"gitId":"junghon3709"},"content":"}","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"junghon3709":48}},{"path":"src/main/java/tiger/app/AppState.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"junghon3709"},"content":"package tiger.app;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":3,"author":{"gitId":"junghon3709"},"content":"import tiger.components.TaskList;","lastModifiedDate":"2021-08-21"},{"lineNumber":4,"author":{"gitId":"junghon3709"},"content":"import tiger.constants.Flag;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":6,"author":{"gitId":"junghon3709"},"content":"/**","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"junghon3709"},"content":" * Represents the current state of the Application.","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"junghon3709"},"content":" */","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"junghon3709"},"content":"public class AppState {","lastModifiedDate":"2021-08-14"},{"lineNumber":11,"author":{"gitId":"junghon3709"},"content":"    /** A {@code TaskList} to store user tasks */","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"junghon3709"},"content":"    private TaskList taskList;","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"junghon3709"},"content":"    /** String to store the response in */","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"junghon3709"},"content":"    private String response;","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"junghon3709"},"content":"    /** Flag in case some tasks failed to execute properly, or require subsequent follow-ups. Used to indicate other","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"junghon3709"},"content":"     * context info about the app. */","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"junghon3709"},"content":"    private Flag flag;","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"junghon3709"},"content":"     * Public constructor for the {@code AppState} class.","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"junghon3709"},"content":"     * @param taskList a {@code TaskList} to store user tasks.","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"junghon3709"},"content":"    public AppState(TaskList taskList) {","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"junghon3709"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2021-08-14"},{"lineNumber":27,"author":{"gitId":"junghon3709"},"content":"        this.response \u003d \"\";","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"junghon3709"},"content":"        this.flag \u003d Flag.DEFAULT;","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":32,"author":{"gitId":"junghon3709"},"content":"     * Public constructor for the {@code AppState} class.","lastModifiedDate":"2021-08-28"},{"lineNumber":33,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":34,"author":{"gitId":"junghon3709"},"content":"     * @param taskList a {@code TaskList} to store user tasks.","lastModifiedDate":"2021-08-28"},{"lineNumber":35,"author":{"gitId":"junghon3709"},"content":"     * @param response Response from the application, to be printed to the GUI.","lastModifiedDate":"2021-08-28"},{"lineNumber":36,"author":{"gitId":"junghon3709"},"content":"     * @throws AssertionError if the response is empty.","lastModifiedDate":"2021-08-28"},{"lineNumber":37,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":38,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":39,"author":{"gitId":"junghon3709"},"content":"    public AppState(TaskList taskList, String response) throws AssertionError {","lastModifiedDate":"2021-08-28"},{"lineNumber":40,"author":{"gitId":"junghon3709"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2021-08-23"},{"lineNumber":41,"author":{"gitId":"junghon3709"},"content":"        assert (!response.equals(\"\"));","lastModifiedDate":"2021-08-23"},{"lineNumber":42,"author":{"gitId":"junghon3709"},"content":"        this.response \u003d response;","lastModifiedDate":"2021-08-23"},{"lineNumber":43,"author":{"gitId":"junghon3709"},"content":"        this.flag \u003d Flag.DEFAULT;","lastModifiedDate":"2021-08-23"},{"lineNumber":44,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":45,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":46,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":47,"author":{"gitId":"junghon3709"},"content":"     * Public constructor for the {@code AppState} class.","lastModifiedDate":"2021-08-28"},{"lineNumber":48,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":49,"author":{"gitId":"junghon3709"},"content":"     * @param taskList a {@code TaskList} to store user tasks.","lastModifiedDate":"2021-08-28"},{"lineNumber":50,"author":{"gitId":"junghon3709"},"content":"     * @param response Response from the application, to be printed to the GUI.","lastModifiedDate":"2021-08-28"},{"lineNumber":51,"author":{"gitId":"junghon3709"},"content":"     * @param flag Flag to indicate other context information about the application.","lastModifiedDate":"2021-08-28"},{"lineNumber":52,"author":{"gitId":"junghon3709"},"content":"     * @throws AssertionError if the response is empty.","lastModifiedDate":"2021-08-28"},{"lineNumber":53,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":54,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":55,"author":{"gitId":"junghon3709"},"content":"    public AppState(TaskList taskList, String response, Flag flag) throws AssertionError {","lastModifiedDate":"2021-08-28"},{"lineNumber":56,"author":{"gitId":"junghon3709"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2021-08-23"},{"lineNumber":57,"author":{"gitId":"junghon3709"},"content":"        assert (!response.equals(\"\"));","lastModifiedDate":"2021-08-23"},{"lineNumber":58,"author":{"gitId":"junghon3709"},"content":"        this.response \u003d response;","lastModifiedDate":"2021-08-23"},{"lineNumber":59,"author":{"gitId":"junghon3709"},"content":"        this.flag \u003d flag;","lastModifiedDate":"2021-08-23"},{"lineNumber":60,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":61,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":62,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":63,"author":{"gitId":"junghon3709"},"content":"     * Public constructor for the {@code AppState} class.","lastModifiedDate":"2021-08-28"},{"lineNumber":64,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":65,"author":{"gitId":"junghon3709"},"content":"     * @param taskList a {@code TaskList} to store user tasks.","lastModifiedDate":"2021-08-28"},{"lineNumber":66,"author":{"gitId":"junghon3709"},"content":"     * @param flag Flag to indicate other context information about the application.","lastModifiedDate":"2021-08-28"},{"lineNumber":67,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":68,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":69,"author":{"gitId":"junghon3709"},"content":"    public AppState(TaskList taskList, Flag flag) {","lastModifiedDate":"2021-08-28"},{"lineNumber":70,"author":{"gitId":"junghon3709"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2021-08-23"},{"lineNumber":71,"author":{"gitId":"junghon3709"},"content":"        this.response \u003d \"\";","lastModifiedDate":"2021-08-23"},{"lineNumber":72,"author":{"gitId":"junghon3709"},"content":"        this.flag \u003d flag;","lastModifiedDate":"2021-08-23"},{"lineNumber":73,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":74,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":75,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":76,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":77,"author":{"gitId":"junghon3709"},"content":"     * Returns the number of tasks in the {@code TaskList}.","lastModifiedDate":"2021-08-22"},{"lineNumber":78,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":79,"author":{"gitId":"junghon3709"},"content":"     * @return the number of tasks in the {@code TaskList}.","lastModifiedDate":"2021-08-22"},{"lineNumber":80,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":81,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":82,"author":{"gitId":"junghon3709"},"content":"    public int numTasks() {","lastModifiedDate":"2021-08-21"},{"lineNumber":83,"author":{"gitId":"junghon3709"},"content":"        return this.taskList.size();","lastModifiedDate":"2021-08-21"},{"lineNumber":84,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":85,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":86,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":87,"author":{"gitId":"junghon3709"},"content":"     * Gets the response of the {@code AppState}","lastModifiedDate":"2021-08-28"},{"lineNumber":88,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":89,"author":{"gitId":"junghon3709"},"content":"     * @return the response of the {@code AppState}","lastModifiedDate":"2021-08-28"},{"lineNumber":90,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":91,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":92,"author":{"gitId":"junghon3709"},"content":"    public String getResponse() {","lastModifiedDate":"2021-08-23"},{"lineNumber":93,"author":{"gitId":"junghon3709"},"content":"        return this.response;","lastModifiedDate":"2021-08-23"},{"lineNumber":94,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":95,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":96,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":97,"author":{"gitId":"junghon3709"},"content":"     * Gets the flag of the {@code AppState}.","lastModifiedDate":"2021-08-28"},{"lineNumber":98,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":99,"author":{"gitId":"junghon3709"},"content":"     * @return the flag of the {@code AppState}.","lastModifiedDate":"2021-08-28"},{"lineNumber":100,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":101,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":102,"author":{"gitId":"junghon3709"},"content":"    public Flag checkFlag() {","lastModifiedDate":"2021-08-23"},{"lineNumber":103,"author":{"gitId":"junghon3709"},"content":"        return this.flag;","lastModifiedDate":"2021-08-23"},{"lineNumber":104,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":105,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":106,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":107,"author":{"gitId":"junghon3709"},"content":"     * Gets the {@code TaskList} object.","lastModifiedDate":"2021-08-28"},{"lineNumber":108,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":109,"author":{"gitId":"junghon3709"},"content":"     * @return the {@code TaskList} object.","lastModifiedDate":"2021-08-28"},{"lineNumber":110,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":111,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":112,"author":{"gitId":"junghon3709"},"content":"    public TaskList getTaskList() {","lastModifiedDate":"2021-08-28"},{"lineNumber":113,"author":{"gitId":"junghon3709"},"content":"        return this.taskList;","lastModifiedDate":"2021-08-28"},{"lineNumber":114,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":115,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":116,"author":{"gitId":"junghon3709"},"content":"}","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"junghon3709":116}},{"path":"src/main/java/tiger/app/Pipeline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"junghon3709"},"content":"package tiger.app;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"junghon3709"},"content":"import tiger.actions.Action;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"junghon3709"},"content":"import tiger.actions.StorageSaveAction;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"junghon3709"},"content":"import tiger.command.Command;","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"junghon3709"},"content":"import tiger.exceptions.actions.TigerActionExecutionException;","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"junghon3709"},"content":"import tiger.exceptions.inputs.TigerInvalidInputException;","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"junghon3709"},"content":"import tiger.exceptions.storage.TigerStorageSaveException;","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"junghon3709"},"content":"/**","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"junghon3709"},"content":" * This class handles one iteration of the user input.","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"junghon3709"},"content":" */","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"junghon3709"},"content":"public class Pipeline {","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"junghon3709"},"content":"    private String input;","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"junghon3709"},"content":"    private AppState applicationState;","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"junghon3709"},"content":"     * Constructor for the {@code Pipeline} class","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"junghon3709"},"content":"     * @param input Input from the user.","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"junghon3709"},"content":"     * @param applicationState Context of application from which to execute one iteration from.","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"junghon3709"},"content":"    public Pipeline(String input, AppState applicationState) {","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"junghon3709"},"content":"        this.input \u003d input;","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"junghon3709"},"content":"        this.applicationState \u003d applicationState;","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":32,"author":{"gitId":"junghon3709"},"content":"     * Runs one iteration of the user input.","lastModifiedDate":"2021-08-28"},{"lineNumber":33,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":34,"author":{"gitId":"junghon3709"},"content":"     * @return A new {@code AppState}, updated based on user input.","lastModifiedDate":"2021-08-28"},{"lineNumber":35,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":36,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":37,"author":{"gitId":"junghon3709"},"content":"    public AppState run() {","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"junghon3709"},"content":"        /* First, we try to parse the input */","lastModifiedDate":"2021-08-23"},{"lineNumber":39,"author":{"gitId":"junghon3709"},"content":"        Action action;","lastModifiedDate":"2021-08-23"},{"lineNumber":40,"author":{"gitId":"junghon3709"},"content":"        AppState newApplicationState;","lastModifiedDate":"2021-08-23"},{"lineNumber":41,"author":{"gitId":"junghon3709"},"content":"        try {","lastModifiedDate":"2021-08-23"},{"lineNumber":42,"author":{"gitId":"junghon3709"},"content":"            action \u003d Command.getActionFromCommand(this.input, this.applicationState);","lastModifiedDate":"2021-08-23"},{"lineNumber":43,"author":{"gitId":"junghon3709"},"content":"        } catch (TigerInvalidInputException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":44,"author":{"gitId":"junghon3709"},"content":"            // if the input is not correct, we return a response that contains the error message","lastModifiedDate":"2021-08-23"},{"lineNumber":45,"author":{"gitId":"junghon3709"},"content":"            return new AppState(this.applicationState.getTaskList(), e.toString());","lastModifiedDate":"2021-08-28"},{"lineNumber":46,"author":{"gitId":"junghon3709"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":47,"author":{"gitId":"junghon3709"},"content":"        /* Next, we run the action. The only way this to fail is in the done and delete commands, where index might","lastModifiedDate":"2021-08-23"},{"lineNumber":48,"author":{"gitId":"junghon3709"},"content":"        be out of bounds. */","lastModifiedDate":"2021-08-23"},{"lineNumber":49,"author":{"gitId":"junghon3709"},"content":"        try {","lastModifiedDate":"2021-08-23"},{"lineNumber":50,"author":{"gitId":"junghon3709"},"content":"            newApplicationState \u003d action.run();","lastModifiedDate":"2021-08-23"},{"lineNumber":51,"author":{"gitId":"junghon3709"},"content":"        } catch (TigerActionExecutionException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":52,"author":{"gitId":"junghon3709"},"content":"            return new AppState(this.applicationState.getTaskList(), e.toString());","lastModifiedDate":"2021-08-28"},{"lineNumber":53,"author":{"gitId":"junghon3709"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":54,"author":{"gitId":"junghon3709"},"content":"        /* Lastly, we save the new TaskList. This may incur a TigerStorageSaveException, but most of the time, it","lastModifiedDate":"2021-08-23"},{"lineNumber":55,"author":{"gitId":"junghon3709"},"content":"        should be fine. */","lastModifiedDate":"2021-08-23"},{"lineNumber":56,"author":{"gitId":"junghon3709"},"content":"        try {","lastModifiedDate":"2021-08-23"},{"lineNumber":57,"author":{"gitId":"junghon3709"},"content":"            newApplicationState \u003d new StorageSaveAction(newApplicationState).run();","lastModifiedDate":"2021-08-23"},{"lineNumber":58,"author":{"gitId":"junghon3709"},"content":"        } catch (TigerStorageSaveException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":59,"author":{"gitId":"junghon3709"},"content":"            return new AppState(this.applicationState.getTaskList(), e.toString());","lastModifiedDate":"2021-08-28"},{"lineNumber":60,"author":{"gitId":"junghon3709"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":61,"author":{"gitId":"junghon3709"},"content":"        /* If everything goes well, we return the new AppState */","lastModifiedDate":"2021-08-23"},{"lineNumber":62,"author":{"gitId":"junghon3709"},"content":"        return newApplicationState;","lastModifiedDate":"2021-08-23"},{"lineNumber":63,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":64,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":65,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":66,"author":{"gitId":"junghon3709"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"junghon3709":66}},{"path":"src/main/java/tiger/app/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"junghon3709"},"content":"package tiger.app;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"junghon3709"},"content":"import tiger.actions.ByeAction;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"junghon3709"},"content":"import tiger.actions.StorageLoadAction;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"junghon3709"},"content":"import tiger.command.Command;","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"junghon3709"},"content":"import tiger.components.TaskList;","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"junghon3709"},"content":"import tiger.constants.Flag;","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":9,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"junghon3709"},"content":"/**","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"junghon3709"},"content":" * {@code Ui} is responsible for handling interactions with users. This includes","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"junghon3709"},"content":" * responding to user commands, storing and loading user tasks, and executing user","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"junghon3709"},"content":" * tasks.","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"junghon3709"},"content":" */","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":16,"author":{"gitId":"junghon3709"},"content":"public class Ui {","lastModifiedDate":"2021-08-21"},{"lineNumber":17,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":18,"author":{"gitId":"junghon3709"},"content":"    private AppState applicationState;","lastModifiedDate":"2021-08-21"},{"lineNumber":19,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":20,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"junghon3709"},"content":"     * Constructor of the {@code Ui} class.","lastModifiedDate":"2021-08-23"},{"lineNumber":22,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":23,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":24,"author":{"gitId":"junghon3709"},"content":"    public Ui() {","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"junghon3709"},"content":"        this.applicationState \u003d new AppState(new TaskList(), Flag.STORAGE_NOT_YET_INIT);","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":27,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":28,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"junghon3709"},"content":"     * Attempts to initialise the {@code Ui} class until successful. Actions that should be done when the Ui is","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"junghon3709"},"content":"     * starting up, such as loading saved tasks, should go here.","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"junghon3709"},"content":"    public void start() {","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"junghon3709"},"content":"        StorageLoadAction storageLoadAction;","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"junghon3709"},"content":"        storageLoadAction \u003d new StorageLoadAction(this.applicationState);","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"junghon3709"},"content":"        this.applicationState \u003d storageLoadAction.run();","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":38,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":39,"author":{"gitId":"junghon3709"},"content":"    public void iterateOnce(String userInput) {","lastModifiedDate":"2021-08-28"},{"lineNumber":40,"author":{"gitId":"junghon3709"},"content":"        if (this.applicationState.checkFlag().equals(Flag.STORAGE_FAILED)) {","lastModifiedDate":"2021-08-28"},{"lineNumber":41,"author":{"gitId":"junghon3709"},"content":"            StorageLoadAction storageLoadAction \u003d (StorageLoadAction) Command.getActionFromCommand(userInput,","lastModifiedDate":"2021-08-28"},{"lineNumber":42,"author":{"gitId":"junghon3709"},"content":"                    this.applicationState);","lastModifiedDate":"2021-08-28"},{"lineNumber":43,"author":{"gitId":"junghon3709"},"content":"            this.applicationState \u003d storageLoadAction.run();","lastModifiedDate":"2021-08-28"},{"lineNumber":44,"author":{"gitId":"junghon3709"},"content":"        } else if (this.applicationState.checkFlag().equals(Flag.DEFAULT)) {","lastModifiedDate":"2021-08-28"},{"lineNumber":45,"author":{"gitId":"junghon3709"},"content":"            this.applicationState \u003d new Pipeline(userInput, this.applicationState).run();","lastModifiedDate":"2021-08-23"},{"lineNumber":46,"author":{"gitId":"junghon3709"},"content":"        } else if (this.applicationState.checkFlag().equals(Flag.IS_EXITED)) {","lastModifiedDate":"2021-08-28"},{"lineNumber":47,"author":{"gitId":"junghon3709"},"content":"            // do nothing","lastModifiedDate":"2021-08-28"},{"lineNumber":48,"author":{"gitId":"junghon3709"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":49,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":50,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":51,"author":{"gitId":"junghon3709"},"content":"    public boolean isExited() {","lastModifiedDate":"2021-08-28"},{"lineNumber":52,"author":{"gitId":"junghon3709"},"content":"        return this.applicationState.checkFlag().equals(Flag.IS_EXITED);","lastModifiedDate":"2021-08-28"},{"lineNumber":53,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":54,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":55,"author":{"gitId":"junghon3709"},"content":"    public String getResponse() {","lastModifiedDate":"2021-08-28"},{"lineNumber":56,"author":{"gitId":"junghon3709"},"content":"        return this.applicationState.getResponse();","lastModifiedDate":"2021-08-28"},{"lineNumber":57,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":58,"author":{"gitId":"junghon3709"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"junghon3709":58}},{"path":"src/main/java/tiger/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"junghon3709"},"content":"package tiger.command;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"junghon3709"},"content":"import tiger.actions.Action;","lastModifiedDate":"2021-08-21"},{"lineNumber":4,"author":{"gitId":"junghon3709"},"content":"import tiger.actions.ByeAction;","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"junghon3709"},"content":"import tiger.actions.ClearAction;","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"junghon3709"},"content":"import tiger.actions.DeadLineAction;","lastModifiedDate":"2021-08-21"},{"lineNumber":7,"author":{"gitId":"junghon3709"},"content":"import tiger.actions.DeleteAction;","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"junghon3709"},"content":"import tiger.actions.EventAction;","lastModifiedDate":"2021-08-21"},{"lineNumber":9,"author":{"gitId":"junghon3709"},"content":"import tiger.actions.FindAction;","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"junghon3709"},"content":"import tiger.actions.InvalidAction;","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"junghon3709"},"content":"import tiger.actions.ListAction;","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"junghon3709"},"content":"import tiger.actions.MarkDoneAction;","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"junghon3709"},"content":"import tiger.actions.StorageLoadAction;","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"junghon3709"},"content":"import tiger.actions.ToDoAction;","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"junghon3709"},"content":"import tiger.app.AppState;","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"junghon3709"},"content":"import tiger.constants.Flag;","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"junghon3709"},"content":"import tiger.exceptions.inputs.TigerInvalidInputException;","lastModifiedDate":"2021-08-21"},{"lineNumber":18,"author":{"gitId":"junghon3709"},"content":"import tiger.exceptions.inputs.TigerSemiColonException;","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"junghon3709"},"content":"import tiger.parser.DeadLineParser;","lastModifiedDate":"2021-08-21"},{"lineNumber":20,"author":{"gitId":"junghon3709"},"content":"import tiger.parser.DeleteParser;","lastModifiedDate":"2021-08-21"},{"lineNumber":21,"author":{"gitId":"junghon3709"},"content":"import tiger.parser.EventParser;","lastModifiedDate":"2021-08-21"},{"lineNumber":22,"author":{"gitId":"junghon3709"},"content":"import tiger.parser.FindParser;","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"junghon3709"},"content":"import tiger.parser.MarkDoneParser;","lastModifiedDate":"2021-08-21"},{"lineNumber":24,"author":{"gitId":"junghon3709"},"content":"import tiger.parser.Parser;","lastModifiedDate":"2021-08-21"},{"lineNumber":25,"author":{"gitId":"junghon3709"},"content":"import tiger.parser.ToDoParser;","lastModifiedDate":"2021-08-21"},{"lineNumber":26,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":27,"author":{"gitId":"junghon3709"},"content":"/**","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"junghon3709"},"content":" * The {@code Command} class handles deciding which command the user input corresponds to, and is responsible for","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"junghon3709"},"content":" * return an {@code Action} class that can be executed to run that command.","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"junghon3709"},"content":" */","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"junghon3709"},"content":"public class Command {","lastModifiedDate":"2021-08-21"},{"lineNumber":33,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":34,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"junghon3709"},"content":"     * Gets the desired {@code Action} class from the user command.","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"junghon3709"},"content":"     * @param command String of user input.","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"junghon3709"},"content":"     * @param applicationState The current application state.","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"junghon3709"},"content":"     * @return An {@code Action} object.","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"junghon3709"},"content":"     * @throws TigerInvalidInputException if the user input is invalid.","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"junghon3709"},"content":"    public static Action getActionFromCommand(String command, AppState applicationState) throws","lastModifiedDate":"2021-08-28"},{"lineNumber":44,"author":{"gitId":"junghon3709"},"content":"            TigerInvalidInputException {","lastModifiedDate":"2021-08-28"},{"lineNumber":45,"author":{"gitId":"junghon3709"},"content":"        if (!Parser.isValid(command)) {","lastModifiedDate":"2021-08-28"},{"lineNumber":46,"author":{"gitId":"junghon3709"},"content":"            throw new TigerSemiColonException();","lastModifiedDate":"2021-09-03"},{"lineNumber":47,"author":{"gitId":"junghon3709"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":48,"author":{"gitId":"junghon3709"},"content":"        if (applicationState.checkFlag().equals(Flag.STORAGE_FAILED)) {","lastModifiedDate":"2021-08-28"},{"lineNumber":49,"author":{"gitId":"junghon3709"},"content":"            AppState newApplicationState;","lastModifiedDate":"2021-08-28"},{"lineNumber":50,"author":{"gitId":"junghon3709"},"content":"            switch (Parser.getCommandKeyword(command)) {","lastModifiedDate":"2021-08-28"},{"lineNumber":51,"author":{"gitId":"junghon3709"},"content":"            case \"y\":","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"junghon3709"},"content":"                newApplicationState \u003d new AppState(applicationState.getTaskList(),","lastModifiedDate":"2021-08-28"},{"lineNumber":53,"author":{"gitId":"junghon3709"},"content":"                        Flag.STORAGE_PARTIAL_LOAD);","lastModifiedDate":"2021-08-28"},{"lineNumber":54,"author":{"gitId":"junghon3709"},"content":"                return new StorageLoadAction(newApplicationState);","lastModifiedDate":"2021-08-23"},{"lineNumber":55,"author":{"gitId":"junghon3709"},"content":"            case \"n\":","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"junghon3709"},"content":"                newApplicationState \u003d new AppState(applicationState.getTaskList(),","lastModifiedDate":"2021-08-28"},{"lineNumber":57,"author":{"gitId":"junghon3709"},"content":"                        Flag.STORAGE_WIPE);","lastModifiedDate":"2021-08-28"},{"lineNumber":58,"author":{"gitId":"junghon3709"},"content":"                return new StorageLoadAction(newApplicationState);","lastModifiedDate":"2021-08-23"},{"lineNumber":59,"author":{"gitId":"junghon3709"},"content":"            default:","lastModifiedDate":"2021-08-23"},{"lineNumber":60,"author":{"gitId":"junghon3709"},"content":"                newApplicationState \u003d new AppState(applicationState.getTaskList(),","lastModifiedDate":"2021-08-28"},{"lineNumber":61,"author":{"gitId":"junghon3709"},"content":"                        Flag.STORAGE_FAILED);","lastModifiedDate":"2021-08-28"},{"lineNumber":62,"author":{"gitId":"junghon3709"},"content":"                return new StorageLoadAction(newApplicationState);","lastModifiedDate":"2021-08-23"},{"lineNumber":63,"author":{"gitId":"junghon3709"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":64,"author":{"gitId":"junghon3709"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":65,"author":{"gitId":"junghon3709"},"content":"        switch (Parser.getCommandKeyword(command)) {","lastModifiedDate":"2021-08-28"},{"lineNumber":66,"author":{"gitId":"junghon3709"},"content":"        case \"exit\":","lastModifiedDate":"2021-08-23"},{"lineNumber":67,"author":{"gitId":"junghon3709"},"content":"            // Fallthrough","lastModifiedDate":"2021-08-23"},{"lineNumber":68,"author":{"gitId":"junghon3709"},"content":"        case \"quit\":","lastModifiedDate":"2021-08-23"},{"lineNumber":69,"author":{"gitId":"junghon3709"},"content":"            // Fallthrough","lastModifiedDate":"2021-08-23"},{"lineNumber":70,"author":{"gitId":"junghon3709"},"content":"        case \"bye\":","lastModifiedDate":"2021-08-21"},{"lineNumber":71,"author":{"gitId":"junghon3709"},"content":"            return new ByeAction(applicationState);","lastModifiedDate":"2021-08-21"},{"lineNumber":72,"author":{"gitId":"junghon3709"},"content":"        case \"ls\":","lastModifiedDate":"2021-08-23"},{"lineNumber":73,"author":{"gitId":"junghon3709"},"content":"            // Fallthrough","lastModifiedDate":"2021-08-23"},{"lineNumber":74,"author":{"gitId":"junghon3709"},"content":"        case \"list\":","lastModifiedDate":"2021-08-21"},{"lineNumber":75,"author":{"gitId":"junghon3709"},"content":"            return new ListAction(applicationState);","lastModifiedDate":"2021-08-21"},{"lineNumber":76,"author":{"gitId":"junghon3709"},"content":"        case \"done\":","lastModifiedDate":"2021-08-21"},{"lineNumber":77,"author":{"gitId":"junghon3709"},"content":"            MarkDoneParser markDoneParser \u003d new MarkDoneParser(command);","lastModifiedDate":"2021-08-21"},{"lineNumber":78,"author":{"gitId":"junghon3709"},"content":"            markDoneParser.parse();","lastModifiedDate":"2021-08-23"},{"lineNumber":79,"author":{"gitId":"junghon3709"},"content":"            return new MarkDoneAction(applicationState, markDoneParser.getIndex() - 1);","lastModifiedDate":"2021-08-23"},{"lineNumber":80,"author":{"gitId":"junghon3709"},"content":"        case \"remove\":","lastModifiedDate":"2021-08-23"},{"lineNumber":81,"author":{"gitId":"junghon3709"},"content":"            // Fallthrough","lastModifiedDate":"2021-08-23"},{"lineNumber":82,"author":{"gitId":"junghon3709"},"content":"        case \"del\":","lastModifiedDate":"2021-08-23"},{"lineNumber":83,"author":{"gitId":"junghon3709"},"content":"            // Fallthrough","lastModifiedDate":"2021-08-23"},{"lineNumber":84,"author":{"gitId":"junghon3709"},"content":"        case \"delete\":","lastModifiedDate":"2021-08-21"},{"lineNumber":85,"author":{"gitId":"junghon3709"},"content":"            DeleteParser deleteCommand \u003d new DeleteParser(command);","lastModifiedDate":"2021-08-21"},{"lineNumber":86,"author":{"gitId":"junghon3709"},"content":"            deleteCommand.parse();","lastModifiedDate":"2021-08-23"},{"lineNumber":87,"author":{"gitId":"junghon3709"},"content":"            return new DeleteAction(applicationState, deleteCommand.getIndex() - 1);","lastModifiedDate":"2021-08-23"},{"lineNumber":88,"author":{"gitId":"junghon3709"},"content":"        case \"todo\":","lastModifiedDate":"2021-08-21"},{"lineNumber":89,"author":{"gitId":"junghon3709"},"content":"            ToDoParser toDoCommand \u003d new ToDoParser(command);","lastModifiedDate":"2021-08-21"},{"lineNumber":90,"author":{"gitId":"junghon3709"},"content":"            toDoCommand.parse();","lastModifiedDate":"2021-08-23"},{"lineNumber":91,"author":{"gitId":"junghon3709"},"content":"            return new ToDoAction(applicationState, toDoCommand.getTodo(), toDoCommand.getPriority());","lastModifiedDate":"2021-08-25"},{"lineNumber":92,"author":{"gitId":"junghon3709"},"content":"        case \"dateline\":","lastModifiedDate":"2021-08-25"},{"lineNumber":93,"author":{"gitId":"junghon3709"},"content":"            // Fallthrough;","lastModifiedDate":"2021-08-25"},{"lineNumber":94,"author":{"gitId":"junghon3709"},"content":"        case \"deadline\":","lastModifiedDate":"2021-08-21"},{"lineNumber":95,"author":{"gitId":"junghon3709"},"content":"            DeadLineParser deadLineCommand \u003d new DeadLineParser(command);","lastModifiedDate":"2021-08-21"},{"lineNumber":96,"author":{"gitId":"junghon3709"},"content":"            deadLineCommand.parse();","lastModifiedDate":"2021-08-23"},{"lineNumber":97,"author":{"gitId":"junghon3709"},"content":"            return new DeadLineAction(applicationState, deadLineCommand.getTodo(), deadLineCommand.getDate(),","lastModifiedDate":"2021-08-25"},{"lineNumber":98,"author":{"gitId":"junghon3709"},"content":"                    deadLineCommand.getPriority());","lastModifiedDate":"2021-08-25"},{"lineNumber":99,"author":{"gitId":"junghon3709"},"content":"        case \"event\":","lastModifiedDate":"2021-08-21"},{"lineNumber":100,"author":{"gitId":"junghon3709"},"content":"            EventParser eventCommand \u003d new EventParser(command);","lastModifiedDate":"2021-08-21"},{"lineNumber":101,"author":{"gitId":"junghon3709"},"content":"            eventCommand.parse();","lastModifiedDate":"2021-08-23"},{"lineNumber":102,"author":{"gitId":"junghon3709"},"content":"            return new EventAction(applicationState, eventCommand.getTodo(), eventCommand.getDate(),","lastModifiedDate":"2021-08-28"},{"lineNumber":103,"author":{"gitId":"junghon3709"},"content":"                    eventCommand.getPriority());","lastModifiedDate":"2021-08-28"},{"lineNumber":104,"author":{"gitId":"junghon3709"},"content":"        case \"search\":","lastModifiedDate":"2021-08-23"},{"lineNumber":105,"author":{"gitId":"junghon3709"},"content":"            // Fallthrough","lastModifiedDate":"2021-08-23"},{"lineNumber":106,"author":{"gitId":"junghon3709"},"content":"        case \"find\":","lastModifiedDate":"2021-08-22"},{"lineNumber":107,"author":{"gitId":"junghon3709"},"content":"            FindParser findCommand \u003d new FindParser(command);","lastModifiedDate":"2021-08-22"},{"lineNumber":108,"author":{"gitId":"junghon3709"},"content":"            findCommand.parse();","lastModifiedDate":"2021-08-23"},{"lineNumber":109,"author":{"gitId":"junghon3709"},"content":"            return new FindAction(applicationState, findCommand.getToSearchFor());","lastModifiedDate":"2021-08-23"},{"lineNumber":110,"author":{"gitId":"junghon3709"},"content":"        case \"clear\":","lastModifiedDate":"2021-08-22"},{"lineNumber":111,"author":{"gitId":"junghon3709"},"content":"            return new ClearAction(applicationState);","lastModifiedDate":"2021-08-22"},{"lineNumber":112,"author":{"gitId":"junghon3709"},"content":"        default:","lastModifiedDate":"2021-08-21"},{"lineNumber":113,"author":{"gitId":"junghon3709"},"content":"            return new InvalidAction(applicationState);","lastModifiedDate":"2021-08-21"},{"lineNumber":114,"author":{"gitId":"junghon3709"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":115,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":116,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":117,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":118,"author":{"gitId":"junghon3709"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"junghon3709":118}},{"path":"src/main/java/tiger/components/DeadLine.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"junghon3709"},"content":"package tiger.components;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":3,"author":{"gitId":"junghon3709"},"content":"import tiger.constants.Priority;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"junghon3709"},"content":"import tiger.exceptions.inputs.TigerDateParsingException;","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"junghon3709"},"content":"import tiger.exceptions.storage.TigerStorageLoadException;","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"junghon3709"},"content":"import tiger.utils.CustomDate;","lastModifiedDate":"2021-08-21"},{"lineNumber":7,"author":{"gitId":"junghon3709"},"content":"import tiger.utils.DateStringConverter;","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":9,"author":{"gitId":"junghon3709"},"content":"public class DeadLine extends Task {","lastModifiedDate":"2021-08-14"},{"lineNumber":10,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":11,"author":{"gitId":"junghon3709"},"content":"    /** Date deadline is due by. */","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"junghon3709"},"content":"    private final CustomDate date;","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"junghon3709"},"content":"     * Constructor for the {@code Deadline} class.","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"junghon3709"},"content":"     * @param taskDescription Description of the users task.","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"junghon3709"},"content":"     * @param done Whether the task has been completed or not.","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"junghon3709"},"content":"     * @param date Date of the task.","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"junghon3709"},"content":"     * @param priority The priority of the task, specified by the user (if any).","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"junghon3709"},"content":"    public DeadLine(String taskDescription, boolean done, CustomDate date, Priority priority) {","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"junghon3709"},"content":"        super(taskDescription, done, priority);","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"junghon3709"},"content":"        this.date \u003d date;","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":27,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":28,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"junghon3709"},"content":"     * Mark a {@code DeadLine} as done.","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"junghon3709"},"content":"    @Override","lastModifiedDate":"2021-08-14"},{"lineNumber":33,"author":{"gitId":"junghon3709"},"content":"    public DeadLine markDone() {","lastModifiedDate":"2021-08-14"},{"lineNumber":34,"author":{"gitId":"junghon3709"},"content":"        return new DeadLine(this.taskDescription, true, this.date, this.priority);","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":36,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":37,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"junghon3709"},"content":"     * Gets the String representation of {@code DeadLine}.","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"junghon3709"},"content":"     * @return the String representation of {@code DeadLine}.","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"junghon3709"},"content":"    @Override","lastModifiedDate":"2021-08-14"},{"lineNumber":44,"author":{"gitId":"junghon3709"},"content":"    public String toString() {","lastModifiedDate":"2021-08-14"},{"lineNumber":45,"author":{"gitId":"junghon3709"},"content":"        // TODO: make current day display as today","lastModifiedDate":"2021-08-23"},{"lineNumber":46,"author":{"gitId":"junghon3709"},"content":"        if (this.done) {","lastModifiedDate":"2021-08-14"},{"lineNumber":47,"author":{"gitId":"junghon3709"},"content":"            return String.format(\"[D] [X] %s \\t(by %s)\", this.taskDescription, this.date.toString());","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"junghon3709"},"content":"        } else {","lastModifiedDate":"2021-08-14"},{"lineNumber":49,"author":{"gitId":"junghon3709"},"content":"            return String.format(\"[D] [%s] %s \\t(by %s)\", this.getPriority().getLetter(),","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"junghon3709"},"content":"                    this.taskDescription,","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"junghon3709"},"content":"                    this.date.toString());","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"junghon3709"},"content":"        }","lastModifiedDate":"2021-08-14"},{"lineNumber":53,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":54,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":55,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":56,"author":{"gitId":"junghon3709"},"content":"     * Returns a String to be written to storage. The {@code Storage} class knows how to parse","lastModifiedDate":"2021-08-22"},{"lineNumber":57,"author":{"gitId":"junghon3709"},"content":"     * this string when it is loaded later.","lastModifiedDate":"2021-08-22"},{"lineNumber":58,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":59,"author":{"gitId":"junghon3709"},"content":"     * @return the String to be written to storage.","lastModifiedDate":"2021-08-22"},{"lineNumber":60,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":61,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":62,"author":{"gitId":"junghon3709"},"content":"    protected String getStorageRepresentation() {","lastModifiedDate":"2021-08-21"},{"lineNumber":63,"author":{"gitId":"junghon3709"},"content":"        return String.format(\"D;%s;%s;%s;%s\", this.done, this.taskDescription, this.date.toString(),","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"junghon3709"},"content":"                this.getPriority().getLetter());","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":66,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":67,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":68,"author":{"gitId":"junghon3709"},"content":"     * Given a String loaded from storage, interpret it and return its corresponding {@code Event}","lastModifiedDate":"2021-08-22"},{"lineNumber":69,"author":{"gitId":"junghon3709"},"content":"     * @param s String loaded from storage.","lastModifiedDate":"2021-08-22"},{"lineNumber":70,"author":{"gitId":"junghon3709"},"content":"     * @return the corresponding {@code Event} object.","lastModifiedDate":"2021-08-22"},{"lineNumber":71,"author":{"gitId":"junghon3709"},"content":"     * @throws TigerStorageLoadException if the loaded string is corrupted, or if there is so {@code IOException}.","lastModifiedDate":"2021-08-22"},{"lineNumber":72,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":73,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":74,"author":{"gitId":"junghon3709"},"content":"    protected static DeadLine getTaskFromStringRepresentation(String s) throws TigerStorageLoadException {","lastModifiedDate":"2021-08-21"},{"lineNumber":75,"author":{"gitId":"junghon3709"},"content":"        /* s should be of the form T|true/false|taskDescription| */","lastModifiedDate":"2021-08-21"},{"lineNumber":76,"author":{"gitId":"junghon3709"},"content":"        String[] stringArray \u003d s.split(\";\", 5);","lastModifiedDate":"2021-08-25"},{"lineNumber":77,"author":{"gitId":"junghon3709"},"content":"        DateStringConverter dateStringConverter \u003d new DateStringConverter();","lastModifiedDate":"2021-08-23"},{"lineNumber":78,"author":{"gitId":"junghon3709"},"content":"        int length \u003d stringArray.length;","lastModifiedDate":"2021-08-21"},{"lineNumber":79,"author":{"gitId":"junghon3709"},"content":"        try {","lastModifiedDate":"2021-08-21"},{"lineNumber":80,"author":{"gitId":"junghon3709"},"content":"            assert (length \u003d\u003d 5);","lastModifiedDate":"2021-08-25"},{"lineNumber":81,"author":{"gitId":"junghon3709"},"content":"            // check if task is indeed a DeadLine task","lastModifiedDate":"2021-08-22"},{"lineNumber":82,"author":{"gitId":"junghon3709"},"content":"            assert (stringArray[0].equals(\"D\"));","lastModifiedDate":"2021-08-21"},{"lineNumber":83,"author":{"gitId":"junghon3709"},"content":"            // check task done value is either true or false","lastModifiedDate":"2021-08-21"},{"lineNumber":84,"author":{"gitId":"junghon3709"},"content":"            assert (stringArray[1].equals(\"true\") || stringArray[1].equals(\"false\"));","lastModifiedDate":"2021-08-21"},{"lineNumber":85,"author":{"gitId":"junghon3709"},"content":"            // check that task description is non-empty","lastModifiedDate":"2021-08-21"},{"lineNumber":86,"author":{"gitId":"junghon3709"},"content":"            assert (!stringArray[2].equals(\"\"));","lastModifiedDate":"2021-08-21"},{"lineNumber":87,"author":{"gitId":"junghon3709"},"content":"            // check that the event timing is non-empty","lastModifiedDate":"2021-08-21"},{"lineNumber":88,"author":{"gitId":"junghon3709"},"content":"            assert (!stringArray[3].equals(\"\"));","lastModifiedDate":"2021-08-21"},{"lineNumber":89,"author":{"gitId":"junghon3709"},"content":"            assert (stringArray[4].equals(\"L\") || stringArray[4].equals(\"M\") || stringArray[4].equals(\"H\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":90,"author":{"gitId":"junghon3709"},"content":"            Priority p \u003d Priority.getPriorityFromLetter(stringArray[4]);","lastModifiedDate":"2021-08-28"},{"lineNumber":91,"author":{"gitId":"junghon3709"},"content":"            if (p.equals(Priority.INVALID)) {","lastModifiedDate":"2021-08-28"},{"lineNumber":92,"author":{"gitId":"junghon3709"},"content":"                // this is not needed if we compile with assertions","lastModifiedDate":"2021-08-28"},{"lineNumber":93,"author":{"gitId":"junghon3709"},"content":"                throw new TigerStorageLoadException();","lastModifiedDate":"2021-09-03"},{"lineNumber":94,"author":{"gitId":"junghon3709"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":95,"author":{"gitId":"junghon3709"},"content":"            if (stringArray[1].equals(\"true\")) {","lastModifiedDate":"2021-08-21"},{"lineNumber":96,"author":{"gitId":"junghon3709"},"content":"                return new DeadLine(stringArray[2], true, dateStringConverter.getDateFromString(stringArray[3]), p);","lastModifiedDate":"2021-08-25"},{"lineNumber":97,"author":{"gitId":"junghon3709"},"content":"            } else {","lastModifiedDate":"2021-08-21"},{"lineNumber":98,"author":{"gitId":"junghon3709"},"content":"                return new DeadLine(stringArray[2], false, dateStringConverter.getDateFromString(stringArray[3]), p);","lastModifiedDate":"2021-08-25"},{"lineNumber":99,"author":{"gitId":"junghon3709"},"content":"            }","lastModifiedDate":"2021-08-21"},{"lineNumber":100,"author":{"gitId":"junghon3709"},"content":"        } catch (AssertionError e) {","lastModifiedDate":"2021-08-21"},{"lineNumber":101,"author":{"gitId":"junghon3709"},"content":"            throw new TigerStorageLoadException();","lastModifiedDate":"2021-09-03"},{"lineNumber":102,"author":{"gitId":"junghon3709"},"content":"        } catch (TigerDateParsingException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":103,"author":{"gitId":"junghon3709"},"content":"            throw new TigerStorageLoadException();","lastModifiedDate":"2021-09-03"},{"lineNumber":104,"author":{"gitId":"junghon3709"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":105,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":106,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":107,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":108,"author":{"gitId":"junghon3709"},"content":"}","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"junghon3709":108}},{"path":"src/main/java/tiger/components/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"junghon3709"},"content":"package tiger.components;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":3,"author":{"gitId":"junghon3709"},"content":"import tiger.constants.Priority;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"junghon3709"},"content":"import tiger.exceptions.inputs.TigerDateParsingException;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"junghon3709"},"content":"import tiger.exceptions.storage.TigerStorageLoadException;","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"junghon3709"},"content":"import tiger.utils.CustomDate;","lastModifiedDate":"2021-08-21"},{"lineNumber":7,"author":{"gitId":"junghon3709"},"content":"import tiger.utils.DateStringConverter;","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":9,"author":{"gitId":"junghon3709"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-14"},{"lineNumber":10,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":11,"author":{"gitId":"junghon3709"},"content":"    /** Date event is at. */","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"junghon3709"},"content":"    private final CustomDate date;","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":14,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"junghon3709"},"content":"     * Constructor for the {@code Event} class.","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"junghon3709"},"content":"     * @param taskDescription Description of the users task.","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"junghon3709"},"content":"     * @param done Whether the task has been completed or not.","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"junghon3709"},"content":"     * @param date Date of the task.","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"junghon3709"},"content":"     * @param priority The priority of the task, specified by the user (if any).","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"junghon3709"},"content":"    public Event(String taskDescription, boolean done, CustomDate date, Priority priority) {","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"junghon3709"},"content":"        super(taskDescription, done, priority);","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"junghon3709"},"content":"        this.date \u003d date;","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":27,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":28,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"junghon3709"},"content":"     * Mark a {@code Event} as done.","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"junghon3709"},"content":"    @Override","lastModifiedDate":"2021-08-14"},{"lineNumber":33,"author":{"gitId":"junghon3709"},"content":"    public Event markDone() {","lastModifiedDate":"2021-08-14"},{"lineNumber":34,"author":{"gitId":"junghon3709"},"content":"        return new Event(this.taskDescription, true, this.date, this.priority);","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":36,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":37,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"junghon3709"},"content":"     * Gets the String representation of {@code Event}.","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"junghon3709"},"content":"     * @return the String representation of {@code Event}.","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"junghon3709"},"content":"    @Override","lastModifiedDate":"2021-08-14"},{"lineNumber":43,"author":{"gitId":"junghon3709"},"content":"    public String toString() {","lastModifiedDate":"2021-08-14"},{"lineNumber":44,"author":{"gitId":"junghon3709"},"content":"        if (this.done) {","lastModifiedDate":"2021-08-14"},{"lineNumber":45,"author":{"gitId":"junghon3709"},"content":"            return String.format(\"[E] [X] %s \\t(at %s)\", this.taskDescription, this.date.toString());","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"junghon3709"},"content":"        } else {","lastModifiedDate":"2021-08-14"},{"lineNumber":47,"author":{"gitId":"junghon3709"},"content":"            return String.format(\"[E] [%s] %s \\t(at %s)\", this.getPriority().getLetter(),","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"junghon3709"},"content":"                    this.taskDescription,","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"junghon3709"},"content":"                    this.date.toString());","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"junghon3709"},"content":"        }","lastModifiedDate":"2021-08-14"},{"lineNumber":51,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":52,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":53,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":54,"author":{"gitId":"junghon3709"},"content":"     * Returns a String to be written to storage. The {@code Storage} class knows how to parse","lastModifiedDate":"2021-08-22"},{"lineNumber":55,"author":{"gitId":"junghon3709"},"content":"     * this string when it is loaded later.","lastModifiedDate":"2021-08-22"},{"lineNumber":56,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":57,"author":{"gitId":"junghon3709"},"content":"     * @return the String to be written to storage.","lastModifiedDate":"2021-08-22"},{"lineNumber":58,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":59,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":60,"author":{"gitId":"junghon3709"},"content":"    protected String getStorageRepresentation() {","lastModifiedDate":"2021-08-21"},{"lineNumber":61,"author":{"gitId":"junghon3709"},"content":"        return String.format(\"E;%s;%s;%s;%s\", this.done, this.taskDescription, this.date.toString(),","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"junghon3709"},"content":"                this.getPriority().getLetter());","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":64,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":65,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":66,"author":{"gitId":"junghon3709"},"content":"     * Given a String loaded from storage, interpret it and return its corresponding {@code Event}","lastModifiedDate":"2021-08-22"},{"lineNumber":67,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":68,"author":{"gitId":"junghon3709"},"content":"     * @param s String loaded from storage.","lastModifiedDate":"2021-08-22"},{"lineNumber":69,"author":{"gitId":"junghon3709"},"content":"     * @return the corresponding {@code Event} object.","lastModifiedDate":"2021-08-22"},{"lineNumber":70,"author":{"gitId":"junghon3709"},"content":"     * @throws TigerStorageLoadException if the loaded string is corrupted, or if there is so {@code IOException}.","lastModifiedDate":"2021-08-22"},{"lineNumber":71,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":72,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":73,"author":{"gitId":"junghon3709"},"content":"    protected static Event getTaskFromStringRepresentation(String s) throws TigerStorageLoadException {","lastModifiedDate":"2021-08-21"},{"lineNumber":74,"author":{"gitId":"junghon3709"},"content":"        DateStringConverter dateStringConverter \u003d new DateStringConverter();","lastModifiedDate":"2021-08-23"},{"lineNumber":75,"author":{"gitId":"junghon3709"},"content":"        String[] stringArray \u003d s.split(\";\");","lastModifiedDate":"2021-08-21"},{"lineNumber":76,"author":{"gitId":"junghon3709"},"content":"        int length \u003d stringArray.length;","lastModifiedDate":"2021-08-21"},{"lineNumber":77,"author":{"gitId":"junghon3709"},"content":"        try {","lastModifiedDate":"2021-08-21"},{"lineNumber":78,"author":{"gitId":"junghon3709"},"content":"            assert (length \u003d\u003d 5);","lastModifiedDate":"2021-08-25"},{"lineNumber":79,"author":{"gitId":"junghon3709"},"content":"            // check if task is indeed a Event task","lastModifiedDate":"2021-08-21"},{"lineNumber":80,"author":{"gitId":"junghon3709"},"content":"            assert (stringArray[0].equals(\"E\"));","lastModifiedDate":"2021-08-21"},{"lineNumber":81,"author":{"gitId":"junghon3709"},"content":"            // check task done value is either true or false","lastModifiedDate":"2021-08-21"},{"lineNumber":82,"author":{"gitId":"junghon3709"},"content":"            assert (stringArray[1].equals(\"true\") || stringArray[1].equals(\"false\"));","lastModifiedDate":"2021-08-21"},{"lineNumber":83,"author":{"gitId":"junghon3709"},"content":"            // check that task description is non-empty","lastModifiedDate":"2021-08-21"},{"lineNumber":84,"author":{"gitId":"junghon3709"},"content":"            assert (!stringArray[2].equals(\"\"));","lastModifiedDate":"2021-08-21"},{"lineNumber":85,"author":{"gitId":"junghon3709"},"content":"            // check that the event timing is non-empty","lastModifiedDate":"2021-08-21"},{"lineNumber":86,"author":{"gitId":"junghon3709"},"content":"            assert (!stringArray[3].equals(\"\"));","lastModifiedDate":"2021-08-21"},{"lineNumber":87,"author":{"gitId":"junghon3709"},"content":"            assert (stringArray[4].equals(\"L\") || stringArray[4].equals(\"M\") || stringArray[4].equals(\"H\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":88,"author":{"gitId":"junghon3709"},"content":"            Priority p \u003d Priority.getPriorityFromLetter(stringArray[4]);","lastModifiedDate":"2021-08-25"},{"lineNumber":89,"author":{"gitId":"junghon3709"},"content":"            if (p.equals(Priority.INVALID)) {","lastModifiedDate":"2021-08-28"},{"lineNumber":90,"author":{"gitId":"junghon3709"},"content":"                // this is not needed if we compile with assertions","lastModifiedDate":"2021-08-28"},{"lineNumber":91,"author":{"gitId":"junghon3709"},"content":"                throw new TigerStorageLoadException();","lastModifiedDate":"2021-09-03"},{"lineNumber":92,"author":{"gitId":"junghon3709"},"content":"            }","lastModifiedDate":"2021-08-28"},{"lineNumber":93,"author":{"gitId":"junghon3709"},"content":"            if (stringArray[1].equals(\"true\")) {","lastModifiedDate":"2021-08-21"},{"lineNumber":94,"author":{"gitId":"junghon3709"},"content":"                // task description, done, timing","lastModifiedDate":"2021-08-23"},{"lineNumber":95,"author":{"gitId":"junghon3709"},"content":"                return new Event(stringArray[2], true, dateStringConverter.getDateFromString(stringArray[3]), p);","lastModifiedDate":"2021-08-25"},{"lineNumber":96,"author":{"gitId":"junghon3709"},"content":"            } else {","lastModifiedDate":"2021-08-21"},{"lineNumber":97,"author":{"gitId":"junghon3709"},"content":"                return new Event(stringArray[2], false, dateStringConverter.getDateFromString(stringArray[3]), p);","lastModifiedDate":"2021-08-25"},{"lineNumber":98,"author":{"gitId":"junghon3709"},"content":"            }","lastModifiedDate":"2021-08-21"},{"lineNumber":99,"author":{"gitId":"junghon3709"},"content":"        } catch (AssertionError e) {","lastModifiedDate":"2021-08-21"},{"lineNumber":100,"author":{"gitId":"junghon3709"},"content":"            throw new TigerStorageLoadException();","lastModifiedDate":"2021-09-03"},{"lineNumber":101,"author":{"gitId":"junghon3709"},"content":"        } catch (TigerDateParsingException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":102,"author":{"gitId":"junghon3709"},"content":"            throw new TigerStorageLoadException();","lastModifiedDate":"2021-09-03"},{"lineNumber":103,"author":{"gitId":"junghon3709"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":104,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":105,"author":{"gitId":"junghon3709"},"content":"}","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"junghon3709":105}},{"path":"src/main/java/tiger/components/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"junghon3709"},"content":"package tiger.components;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-13"},{"lineNumber":3,"author":{"gitId":"junghon3709"},"content":"import tiger.constants.Priority;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"junghon3709"},"content":"import tiger.exceptions.storage.TigerStorageLoadException;","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"junghon3709"},"content":"/**","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"junghon3709"},"content":" * The abstract {@code Task} class encapsulates a user Task.","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"junghon3709"},"content":" */","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"junghon3709"},"content":"public abstract class Task {","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"junghon3709"},"content":"    /** The description of the task */","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"junghon3709"},"content":"    protected String taskDescription;","lastModifiedDate":"2021-08-14"},{"lineNumber":14,"author":{"gitId":"junghon3709"},"content":"    /** Whether the task is done */","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"junghon3709"},"content":"    protected boolean done;","lastModifiedDate":"2021-08-14"},{"lineNumber":16,"author":{"gitId":"junghon3709"},"content":"    /** Priority of the task */","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"junghon3709"},"content":"    protected Priority priority;","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-13"},{"lineNumber":19,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"junghon3709"},"content":"     * Constructor for the {@code Task} class.","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"junghon3709"},"content":"     * @param taskDescription Description of the users task.","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"junghon3709"},"content":"     * @param done Whether the task has been completed or not.","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"junghon3709"},"content":"     * @param priority The priority of the task, specified by the user (if any).","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"junghon3709"},"content":"    protected Task(String taskDescription, boolean done, Priority priority) {","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"junghon3709"},"content":"        this.taskDescription \u003d taskDescription;","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"junghon3709"},"content":"        this.done \u003d done;","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"junghon3709"},"content":"        this.priority \u003d priority;","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-13"},{"lineNumber":32,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-13"},{"lineNumber":33,"author":{"gitId":"junghon3709"},"content":"    public abstract Task markDone();","lastModifiedDate":"2021-08-28"},{"lineNumber":34,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-13"},{"lineNumber":35,"author":{"gitId":"junghon3709"},"content":"    public Priority getPriority() {","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"junghon3709"},"content":"        return this.priority;","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"junghon3709"},"content":"     * Returns a String to be written to storage. The {@code Storage} class knows how to parse","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"junghon3709"},"content":"     * this string when it is loaded later.","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"junghon3709"},"content":"     * @return the String to be written to storage.","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"junghon3709"},"content":"    protected abstract String getStorageRepresentation();","lastModifiedDate":"2021-08-28"},{"lineNumber":47,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":48,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":49,"author":{"gitId":"junghon3709"},"content":"     * Get the task description.","lastModifiedDate":"2021-08-22"},{"lineNumber":50,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":51,"author":{"gitId":"junghon3709"},"content":"     * @return the task description.","lastModifiedDate":"2021-08-22"},{"lineNumber":52,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":53,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":54,"author":{"gitId":"junghon3709"},"content":"    public String getTaskDescription() {","lastModifiedDate":"2021-08-22"},{"lineNumber":55,"author":{"gitId":"junghon3709"},"content":"        return this.taskDescription;","lastModifiedDate":"2021-08-22"},{"lineNumber":56,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":57,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":58,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":59,"author":{"gitId":"junghon3709"},"content":"     * Given a String loaded from storage, interpret it and return its corresponding {@code Task}","lastModifiedDate":"2021-08-22"},{"lineNumber":60,"author":{"gitId":"junghon3709"},"content":"     * @param s String loaded from storage.","lastModifiedDate":"2021-08-22"},{"lineNumber":61,"author":{"gitId":"junghon3709"},"content":"     * @return the corresponding {@code Task} object.","lastModifiedDate":"2021-08-22"},{"lineNumber":62,"author":{"gitId":"junghon3709"},"content":"     * @throws TigerStorageLoadException if the loaded string is corrupted, or if there is so {@code IOException}.","lastModifiedDate":"2021-08-22"},{"lineNumber":63,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":64,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":65,"author":{"gitId":"junghon3709"},"content":"    protected static Task getTaskFromStringRepresentation(String s) throws TigerStorageLoadException {","lastModifiedDate":"2021-08-22"},{"lineNumber":66,"author":{"gitId":"junghon3709"},"content":"        String[] stringArray \u003d s.split(\";\");","lastModifiedDate":"2021-08-21"},{"lineNumber":67,"author":{"gitId":"junghon3709"},"content":"        switch (stringArray[0]) {","lastModifiedDate":"2021-08-21"},{"lineNumber":68,"author":{"gitId":"junghon3709"},"content":"        case \"T\":","lastModifiedDate":"2021-08-21"},{"lineNumber":69,"author":{"gitId":"junghon3709"},"content":"            return ToDo.getTaskFromStringRepresentation(s);","lastModifiedDate":"2021-08-21"},{"lineNumber":70,"author":{"gitId":"junghon3709"},"content":"        case \"E\":","lastModifiedDate":"2021-08-21"},{"lineNumber":71,"author":{"gitId":"junghon3709"},"content":"            return Event.getTaskFromStringRepresentation(s);","lastModifiedDate":"2021-08-21"},{"lineNumber":72,"author":{"gitId":"junghon3709"},"content":"        case \"D\":","lastModifiedDate":"2021-08-21"},{"lineNumber":73,"author":{"gitId":"junghon3709"},"content":"            return DeadLine.getTaskFromStringRepresentation(s);","lastModifiedDate":"2021-08-21"},{"lineNumber":74,"author":{"gitId":"junghon3709"},"content":"        default:","lastModifiedDate":"2021-08-28"},{"lineNumber":75,"author":{"gitId":"junghon3709"},"content":"            throw new TigerStorageLoadException();","lastModifiedDate":"2021-09-03"},{"lineNumber":76,"author":{"gitId":"junghon3709"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":77,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":78,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":79,"author":{"gitId":"junghon3709"},"content":"}","lastModifiedDate":"2021-08-13"}],"authorContributionMap":{"junghon3709":79}},{"path":"src/main/java/tiger/components/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"junghon3709"},"content":"package tiger.components;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-13"},{"lineNumber":3,"author":{"gitId":"junghon3709"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"junghon3709"},"content":"import java.util.Locale;","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"junghon3709"},"content":"import tiger.exceptions.actions.TigerIndexOutOfBoundsException;","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"junghon3709"},"content":"import tiger.exceptions.storage.TigerStorageLoadException;","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":9,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-13"},{"lineNumber":10,"author":{"gitId":"junghon3709"},"content":"/**","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"junghon3709"},"content":" * A list to storage the {@code Tasks}.","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"junghon3709"},"content":" */","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"junghon3709"},"content":"public class TaskList {","lastModifiedDate":"2021-08-13"},{"lineNumber":15,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"junghon3709"},"content":"    private final ArrayList\u003cTask\u003e taskList;","lastModifiedDate":"2021-08-13"},{"lineNumber":17,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-13"},{"lineNumber":18,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"junghon3709"},"content":"     * Initialises an empty {@code TaskList}.","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"junghon3709"},"content":"    public TaskList() {","lastModifiedDate":"2021-08-13"},{"lineNumber":23,"author":{"gitId":"junghon3709"},"content":"        this.taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-13"},{"lineNumber":25,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-13"},{"lineNumber":26,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"junghon3709"},"content":"     * Initialises a current taskList from an existing one.","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"junghon3709"},"content":"     * @param taskList the current taskList.","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"junghon3709"},"content":"    private TaskList(ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2021-08-14"},{"lineNumber":33,"author":{"gitId":"junghon3709"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2021-08-14"},{"lineNumber":34,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":35,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":36,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"junghon3709"},"content":"     * Adds a task.","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"junghon3709"},"content":"     * @param task task to be added.","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"junghon3709"},"content":"     * @return a new {@code TaskList}.","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"junghon3709"},"content":"    public TaskList addTask(Task task) {","lastModifiedDate":"2021-08-14"},{"lineNumber":44,"author":{"gitId":"junghon3709"},"content":"        this.taskList.add(task);","lastModifiedDate":"2021-08-13"},{"lineNumber":45,"author":{"gitId":"junghon3709"},"content":"        return new TaskList(this.taskList);","lastModifiedDate":"2021-08-14"},{"lineNumber":46,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-13"},{"lineNumber":47,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-13"},{"lineNumber":48,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":49,"author":{"gitId":"junghon3709"},"content":"     * Delete a task.","lastModifiedDate":"2021-08-22"},{"lineNumber":50,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":51,"author":{"gitId":"junghon3709"},"content":"     * @param index index of task to be deleted (from 1 - length of {@code TaskList}).","lastModifiedDate":"2021-08-22"},{"lineNumber":52,"author":{"gitId":"junghon3709"},"content":"     * @return a new {@code TaskList}.","lastModifiedDate":"2021-08-22"},{"lineNumber":53,"author":{"gitId":"junghon3709"},"content":"     * @throws TigerIndexOutOfBoundsException if index is out of bounds.","lastModifiedDate":"2021-08-22"},{"lineNumber":54,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":55,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":56,"author":{"gitId":"junghon3709"},"content":"    public TaskList deleteTask(int index) throws TigerIndexOutOfBoundsException {","lastModifiedDate":"2021-08-22"},{"lineNumber":57,"author":{"gitId":"junghon3709"},"content":"        try {","lastModifiedDate":"2021-08-23"},{"lineNumber":58,"author":{"gitId":"junghon3709"},"content":"            this.taskList.remove(index);","lastModifiedDate":"2021-08-14"},{"lineNumber":59,"author":{"gitId":"junghon3709"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":60,"author":{"gitId":"junghon3709"},"content":"            throw new TigerIndexOutOfBoundsException(index, this.taskList.size());","lastModifiedDate":"2021-08-23"},{"lineNumber":61,"author":{"gitId":"junghon3709"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":62,"author":{"gitId":"junghon3709"},"content":"        return new TaskList(this.taskList);","lastModifiedDate":"2021-08-14"},{"lineNumber":63,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":64,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":65,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":66,"author":{"gitId":"junghon3709"},"content":"     * Shows the String representation of a single {@code Task}.","lastModifiedDate":"2021-08-22"},{"lineNumber":67,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":68,"author":{"gitId":"junghon3709"},"content":"     * @param index of {@code Task} to show.","lastModifiedDate":"2021-08-22"},{"lineNumber":69,"author":{"gitId":"junghon3709"},"content":"     * @return String representation of the {@code Task}.","lastModifiedDate":"2021-08-22"},{"lineNumber":70,"author":{"gitId":"junghon3709"},"content":"     * @throws TigerIndexOutOfBoundsException if index is out of bounds.","lastModifiedDate":"2021-08-22"},{"lineNumber":71,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":72,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":73,"author":{"gitId":"junghon3709"},"content":"    public String showTask(int index) throws TigerIndexOutOfBoundsException {","lastModifiedDate":"2021-08-21"},{"lineNumber":74,"author":{"gitId":"junghon3709"},"content":"        try {","lastModifiedDate":"2021-08-14"},{"lineNumber":75,"author":{"gitId":"junghon3709"},"content":"            return this.taskList.get(index).toString();","lastModifiedDate":"2021-08-13"},{"lineNumber":76,"author":{"gitId":"junghon3709"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-14"},{"lineNumber":77,"author":{"gitId":"junghon3709"},"content":"            throw new TigerIndexOutOfBoundsException(index, this.taskList.size());","lastModifiedDate":"2021-08-21"},{"lineNumber":78,"author":{"gitId":"junghon3709"},"content":"        }","lastModifiedDate":"2021-08-14"},{"lineNumber":79,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-13"},{"lineNumber":80,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-13"},{"lineNumber":81,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":82,"author":{"gitId":"junghon3709"},"content":"     * Returns another {@code TaskList}, with task descriptions matching the search String","lastModifiedDate":"2021-08-22"},{"lineNumber":83,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":84,"author":{"gitId":"junghon3709"},"content":"     * @param searchString the string to search for.","lastModifiedDate":"2021-08-22"},{"lineNumber":85,"author":{"gitId":"junghon3709"},"content":"     * @return a new {@code TaskList}.","lastModifiedDate":"2021-08-22"},{"lineNumber":86,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":87,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":88,"author":{"gitId":"junghon3709"},"content":"    public TaskList findRelevantTasks(String searchString) {","lastModifiedDate":"2021-08-22"},{"lineNumber":89,"author":{"gitId":"junghon3709"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2021-08-22"},{"lineNumber":90,"author":{"gitId":"junghon3709"},"content":"        for (Task t: this.taskList) {","lastModifiedDate":"2021-08-22"},{"lineNumber":91,"author":{"gitId":"junghon3709"},"content":"            if (t.getTaskDescription().toLowerCase(Locale.ENGLISH).contains(searchString.toLowerCase(Locale.ENGLISH))) {","lastModifiedDate":"2021-08-25"},{"lineNumber":92,"author":{"gitId":"junghon3709"},"content":"                taskList.addTask(t);","lastModifiedDate":"2021-08-22"},{"lineNumber":93,"author":{"gitId":"junghon3709"},"content":"            }","lastModifiedDate":"2021-08-22"},{"lineNumber":94,"author":{"gitId":"junghon3709"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":95,"author":{"gitId":"junghon3709"},"content":"        return taskList;","lastModifiedDate":"2021-08-22"},{"lineNumber":96,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":97,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":98,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":99,"author":{"gitId":"junghon3709"},"content":"     * Returns the size of the {@code TaskList}.","lastModifiedDate":"2021-08-22"},{"lineNumber":100,"author":{"gitId":"junghon3709"},"content":"     * @return the size of the {@code TaskList}.","lastModifiedDate":"2021-08-22"},{"lineNumber":101,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":102,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":103,"author":{"gitId":"junghon3709"},"content":"    public int size() {","lastModifiedDate":"2021-08-13"},{"lineNumber":104,"author":{"gitId":"junghon3709"},"content":"        return this.taskList.size();","lastModifiedDate":"2021-08-13"},{"lineNumber":105,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-13"},{"lineNumber":106,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-13"},{"lineNumber":107,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":108,"author":{"gitId":"junghon3709"},"content":"     * Marks the {@code Task} at the specified index as done.","lastModifiedDate":"2021-08-22"},{"lineNumber":109,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":110,"author":{"gitId":"junghon3709"},"content":"     * @param index the specified index.","lastModifiedDate":"2021-08-22"},{"lineNumber":111,"author":{"gitId":"junghon3709"},"content":"     * @return a new {@code TaskList}.","lastModifiedDate":"2021-08-22"},{"lineNumber":112,"author":{"gitId":"junghon3709"},"content":"     * @throws TigerIndexOutOfBoundsException if index is out of bounds.","lastModifiedDate":"2021-08-22"},{"lineNumber":113,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":114,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":115,"author":{"gitId":"junghon3709"},"content":"    public TaskList markTaskDone(int index) throws TigerIndexOutOfBoundsException {","lastModifiedDate":"2021-08-21"},{"lineNumber":116,"author":{"gitId":"junghon3709"},"content":"        // index should be between 0 and n-1","lastModifiedDate":"2021-08-13"},{"lineNumber":117,"author":{"gitId":"junghon3709"},"content":"        try {","lastModifiedDate":"2021-08-14"},{"lineNumber":118,"author":{"gitId":"junghon3709"},"content":"            this.taskList.set(index, this.taskList.get(index).markDone());","lastModifiedDate":"2021-08-14"},{"lineNumber":119,"author":{"gitId":"junghon3709"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-14"},{"lineNumber":120,"author":{"gitId":"junghon3709"},"content":"            throw new TigerIndexOutOfBoundsException(index, this.taskList.size());","lastModifiedDate":"2021-08-21"},{"lineNumber":121,"author":{"gitId":"junghon3709"},"content":"        } finally {","lastModifiedDate":"2021-08-14"},{"lineNumber":122,"author":{"gitId":"junghon3709"},"content":"            return new TaskList(this.taskList);","lastModifiedDate":"2021-08-14"},{"lineNumber":123,"author":{"gitId":"junghon3709"},"content":"        }","lastModifiedDate":"2021-08-13"},{"lineNumber":124,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":125,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-13"},{"lineNumber":126,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":127,"author":{"gitId":"junghon3709"},"content":"     * Returns the String representation of the {@code TaskList}.","lastModifiedDate":"2021-08-22"},{"lineNumber":128,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":129,"author":{"gitId":"junghon3709"},"content":"     * @return the String representation of the {@code TaskList}.","lastModifiedDate":"2021-08-22"},{"lineNumber":130,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":131,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":132,"author":{"gitId":"junghon3709"},"content":"    @Override","lastModifiedDate":"2021-08-13"},{"lineNumber":133,"author":{"gitId":"junghon3709"},"content":"    public String toString() {","lastModifiedDate":"2021-08-13"},{"lineNumber":134,"author":{"gitId":"junghon3709"},"content":"        if (this.taskList.size() \u003d\u003d 0) {","lastModifiedDate":"2021-08-23"},{"lineNumber":135,"author":{"gitId":"junghon3709"},"content":"            return \"You currently have no tasks.\";","lastModifiedDate":"2021-08-23"},{"lineNumber":136,"author":{"gitId":"junghon3709"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":137,"author":{"gitId":"junghon3709"},"content":"        String returnString \u003d \"\";","lastModifiedDate":"2021-08-13"},{"lineNumber":138,"author":{"gitId":"junghon3709"},"content":"        for (int i \u003d 1; i \u003c this.taskList.size() + 1; i++) {","lastModifiedDate":"2021-08-13"},{"lineNumber":139,"author":{"gitId":"junghon3709"},"content":"            String row \u003d String.format(\"%d.\\t %s\", i, this.taskList.get(i - 1).toString());","lastModifiedDate":"2021-08-25"},{"lineNumber":140,"author":{"gitId":"junghon3709"},"content":"            if (i !\u003d this.taskList.size()) {","lastModifiedDate":"2021-08-14"},{"lineNumber":141,"author":{"gitId":"junghon3709"},"content":"                row +\u003d \"\\n\";","lastModifiedDate":"2021-08-14"},{"lineNumber":142,"author":{"gitId":"junghon3709"},"content":"            }","lastModifiedDate":"2021-08-14"},{"lineNumber":143,"author":{"gitId":"junghon3709"},"content":"            returnString +\u003d row;","lastModifiedDate":"2021-08-13"},{"lineNumber":144,"author":{"gitId":"junghon3709"},"content":"        }","lastModifiedDate":"2021-08-13"},{"lineNumber":145,"author":{"gitId":"junghon3709"},"content":"        return returnString;","lastModifiedDate":"2021-08-13"},{"lineNumber":146,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-13"},{"lineNumber":147,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":148,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":149,"author":{"gitId":"junghon3709"},"content":"     * Returns a String to be written to storage. The {@code Storage} class knows how to parse","lastModifiedDate":"2021-08-22"},{"lineNumber":150,"author":{"gitId":"junghon3709"},"content":"     * this string when it is loaded later.","lastModifiedDate":"2021-08-22"},{"lineNumber":151,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":152,"author":{"gitId":"junghon3709"},"content":"     * @return the String to be written to storage.","lastModifiedDate":"2021-08-22"},{"lineNumber":153,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":154,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":155,"author":{"gitId":"junghon3709"},"content":"    public String getStorageRepresentation() {","lastModifiedDate":"2021-08-21"},{"lineNumber":156,"author":{"gitId":"junghon3709"},"content":"        String returnString \u003d \"\";","lastModifiedDate":"2021-08-21"},{"lineNumber":157,"author":{"gitId":"junghon3709"},"content":"        for (Task t: this.taskList) {","lastModifiedDate":"2021-08-21"},{"lineNumber":158,"author":{"gitId":"junghon3709"},"content":"            returnString +\u003d t.getStorageRepresentation();","lastModifiedDate":"2021-08-21"},{"lineNumber":159,"author":{"gitId":"junghon3709"},"content":"            returnString +\u003d \"\\n\";","lastModifiedDate":"2021-08-21"},{"lineNumber":160,"author":{"gitId":"junghon3709"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":161,"author":{"gitId":"junghon3709"},"content":"        return returnString;","lastModifiedDate":"2021-08-21"},{"lineNumber":162,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":163,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":164,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":165,"author":{"gitId":"junghon3709"},"content":"     * Given a String loaded from storage, interpret it and return its corresponding {@code TaskList}.","lastModifiedDate":"2021-08-28"},{"lineNumber":166,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":167,"author":{"gitId":"junghon3709"},"content":"     * @param s String loaded from storage.","lastModifiedDate":"2021-08-22"},{"lineNumber":168,"author":{"gitId":"junghon3709"},"content":"     * @return the corresponding {@code TaskList} object.","lastModifiedDate":"2021-08-22"},{"lineNumber":169,"author":{"gitId":"junghon3709"},"content":"     * @throws TigerStorageLoadException if the loaded string is corrupted, or if there is so {@code IOException}.","lastModifiedDate":"2021-08-22"},{"lineNumber":170,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":171,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":172,"author":{"gitId":"junghon3709"},"content":"    public static TaskList getTaskListFromStringRepresentation(String s) throws TigerStorageLoadException {","lastModifiedDate":"2021-08-21"},{"lineNumber":173,"author":{"gitId":"junghon3709"},"content":"        String[] stringArray \u003d s.split(\"\\n\");","lastModifiedDate":"2021-08-21"},{"lineNumber":174,"author":{"gitId":"junghon3709"},"content":"        ArrayList\u003cTask\u003e newTaskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-21"},{"lineNumber":175,"author":{"gitId":"junghon3709"},"content":"        for (String line: stringArray) {","lastModifiedDate":"2021-08-21"},{"lineNumber":176,"author":{"gitId":"junghon3709"},"content":"            if (line.length() !\u003d 0) {","lastModifiedDate":"2021-08-21"},{"lineNumber":177,"author":{"gitId":"junghon3709"},"content":"                newTaskList.add(Task.getTaskFromStringRepresentation(line));","lastModifiedDate":"2021-08-22"},{"lineNumber":178,"author":{"gitId":"junghon3709"},"content":"            }","lastModifiedDate":"2021-08-21"},{"lineNumber":179,"author":{"gitId":"junghon3709"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":180,"author":{"gitId":"junghon3709"},"content":"        return new TaskList(newTaskList);","lastModifiedDate":"2021-08-21"},{"lineNumber":181,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":182,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":183,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":184,"author":{"gitId":"junghon3709"},"content":"     * Given a String loaded from storage, do a partial load and return its corresponding {@code TaskList}.","lastModifiedDate":"2021-08-28"},{"lineNumber":185,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":186,"author":{"gitId":"junghon3709"},"content":"     * @param s String loaded from storage.","lastModifiedDate":"2021-08-28"},{"lineNumber":187,"author":{"gitId":"junghon3709"},"content":"     * @return the corresponding {@code TaskList} object.","lastModifiedDate":"2021-08-28"},{"lineNumber":188,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":189,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":190,"author":{"gitId":"junghon3709"},"content":"    public static TaskList getPartialTaskListFromStringRepresentation(String s) {","lastModifiedDate":"2021-08-23"},{"lineNumber":191,"author":{"gitId":"junghon3709"},"content":"        String[] stringArray \u003d s.split(\"\\n\");","lastModifiedDate":"2021-08-23"},{"lineNumber":192,"author":{"gitId":"junghon3709"},"content":"        ArrayList\u003cTask\u003e newTaskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-23"},{"lineNumber":193,"author":{"gitId":"junghon3709"},"content":"        for (String line: stringArray) {","lastModifiedDate":"2021-08-23"},{"lineNumber":194,"author":{"gitId":"junghon3709"},"content":"            if (line.length() !\u003d 0) {","lastModifiedDate":"2021-08-23"},{"lineNumber":195,"author":{"gitId":"junghon3709"},"content":"                try {","lastModifiedDate":"2021-08-28"},{"lineNumber":196,"author":{"gitId":"junghon3709"},"content":"                    newTaskList.add(Task.getTaskFromStringRepresentation(line));","lastModifiedDate":"2021-08-23"},{"lineNumber":197,"author":{"gitId":"junghon3709"},"content":"                } catch (TigerStorageLoadException e) {","lastModifiedDate":"2021-08-28"},{"lineNumber":198,"author":{"gitId":"junghon3709"},"content":"                    continue;","lastModifiedDate":"2021-08-28"},{"lineNumber":199,"author":{"gitId":"junghon3709"},"content":"                }","lastModifiedDate":"2021-08-28"},{"lineNumber":200,"author":{"gitId":"junghon3709"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":201,"author":{"gitId":"junghon3709"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":202,"author":{"gitId":"junghon3709"},"content":"        return new TaskList(newTaskList);","lastModifiedDate":"2021-08-23"},{"lineNumber":203,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":204,"author":{"gitId":"junghon3709"},"content":"}","lastModifiedDate":"2021-08-13"}],"authorContributionMap":{"junghon3709":204}},{"path":"src/main/java/tiger/components/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"junghon3709"},"content":"package tiger.components;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":3,"author":{"gitId":"junghon3709"},"content":"import tiger.constants.Priority;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"junghon3709"},"content":"import tiger.exceptions.storage.TigerStorageLoadException;","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":6,"author":{"gitId":"junghon3709"},"content":"public class ToDo extends Task {","lastModifiedDate":"2021-08-14"},{"lineNumber":7,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":8,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"junghon3709"},"content":"     * Constructor for the {@code ToDo} class.","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"junghon3709"},"content":"     * @param taskDescription Description of the users task.","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"junghon3709"},"content":"     * @param done Whether the task has been completed or not.","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"junghon3709"},"content":"     * @param priority The priority of the task, specified by the user (if any).","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"junghon3709"},"content":"    public ToDo(String taskDescription, boolean done, Priority priority) {","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"junghon3709"},"content":"        super(taskDescription, done, priority);","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":19,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":20,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":21,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"junghon3709"},"content":"     * Mark a {@code ToDo} as done.","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"junghon3709"},"content":"    @Override","lastModifiedDate":"2021-08-14"},{"lineNumber":26,"author":{"gitId":"junghon3709"},"content":"    public ToDo markDone() {","lastModifiedDate":"2021-08-14"},{"lineNumber":27,"author":{"gitId":"junghon3709"},"content":"        return new ToDo(this.taskDescription, true, this.priority);","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":29,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":30,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"junghon3709"},"content":"     * Gets the String representation of {@code ToDo}.","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"junghon3709"},"content":"     * @return the String representation of {@code ToDo}.","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"junghon3709"},"content":"    @Override","lastModifiedDate":"2021-08-14"},{"lineNumber":37,"author":{"gitId":"junghon3709"},"content":"    public String toString() {","lastModifiedDate":"2021-08-14"},{"lineNumber":38,"author":{"gitId":"junghon3709"},"content":"        if (this.done) {","lastModifiedDate":"2021-08-14"},{"lineNumber":39,"author":{"gitId":"junghon3709"},"content":"            return String.format(\"[T] [X] %s\", this.taskDescription);","lastModifiedDate":"2021-08-14"},{"lineNumber":40,"author":{"gitId":"junghon3709"},"content":"        } else {","lastModifiedDate":"2021-08-14"},{"lineNumber":41,"author":{"gitId":"junghon3709"},"content":"            return String.format(\"[T] [%s] %s\", this.getPriority().getLetter(), this.taskDescription);","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"junghon3709"},"content":"        }","lastModifiedDate":"2021-08-14"},{"lineNumber":43,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":44,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":45,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"junghon3709"},"content":"     * Returns a String to be written to storage. The {@code Storage} class knows how to parse","lastModifiedDate":"2021-08-22"},{"lineNumber":47,"author":{"gitId":"junghon3709"},"content":"     * this string when it is loaded later.","lastModifiedDate":"2021-08-22"},{"lineNumber":48,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":49,"author":{"gitId":"junghon3709"},"content":"     * @return the String to be written to storage.","lastModifiedDate":"2021-08-22"},{"lineNumber":50,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":51,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":52,"author":{"gitId":"junghon3709"},"content":"    protected String getStorageRepresentation() {","lastModifiedDate":"2021-08-21"},{"lineNumber":53,"author":{"gitId":"junghon3709"},"content":"        return String.format(\"T;%s;%s;%s\", this.done, this.taskDescription, this.getPriority().getLetter());","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":55,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":56,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":57,"author":{"gitId":"junghon3709"},"content":"     * Given a String loaded from storage, interpret it and return its corresponding {@code Event}","lastModifiedDate":"2021-08-22"},{"lineNumber":58,"author":{"gitId":"junghon3709"},"content":"     * @param s String loaded from storage.","lastModifiedDate":"2021-08-22"},{"lineNumber":59,"author":{"gitId":"junghon3709"},"content":"     * @return the corresponding {@code Event} object.","lastModifiedDate":"2021-08-22"},{"lineNumber":60,"author":{"gitId":"junghon3709"},"content":"     * @throws TigerStorageLoadException if the loaded string is corrupted, or if there is so {@code IOException}.","lastModifiedDate":"2021-08-22"},{"lineNumber":61,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":62,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":63,"author":{"gitId":"junghon3709"},"content":"    protected static ToDo getTaskFromStringRepresentation(String s) throws TigerStorageLoadException {","lastModifiedDate":"2021-08-21"},{"lineNumber":64,"author":{"gitId":"junghon3709"},"content":"        String[] stringArray \u003d s.split(\";\");","lastModifiedDate":"2021-08-21"},{"lineNumber":65,"author":{"gitId":"junghon3709"},"content":"        int length \u003d stringArray.length;","lastModifiedDate":"2021-08-21"},{"lineNumber":66,"author":{"gitId":"junghon3709"},"content":"        try {","lastModifiedDate":"2021-08-21"},{"lineNumber":67,"author":{"gitId":"junghon3709"},"content":"            assert (length \u003d\u003d 4);","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"junghon3709"},"content":"            // check if task is indeed a ToDo task","lastModifiedDate":"2021-08-21"},{"lineNumber":69,"author":{"gitId":"junghon3709"},"content":"            assert (stringArray[0].equals(\"T\"));","lastModifiedDate":"2021-08-21"},{"lineNumber":70,"author":{"gitId":"junghon3709"},"content":"            // check task done value is either true or false","lastModifiedDate":"2021-08-21"},{"lineNumber":71,"author":{"gitId":"junghon3709"},"content":"            assert (stringArray[1].equals(\"true\") || stringArray[1].equals(\"false\"));","lastModifiedDate":"2021-08-21"},{"lineNumber":72,"author":{"gitId":"junghon3709"},"content":"            // check that task description is non-empty","lastModifiedDate":"2021-08-21"},{"lineNumber":73,"author":{"gitId":"junghon3709"},"content":"            assert (!stringArray[2].equals(\"\"));","lastModifiedDate":"2021-08-21"},{"lineNumber":74,"author":{"gitId":"junghon3709"},"content":"            assert (stringArray[3].equals(\"L\") || stringArray[3].equals(\"M\") || stringArray[3].equals(\"H\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"junghon3709"},"content":"            Priority p \u003d Priority.getPriorityFromLetter(stringArray[3]);","lastModifiedDate":"2021-08-25"},{"lineNumber":76,"author":{"gitId":"junghon3709"},"content":"            if (p.equals(Priority.INVALID)) {","lastModifiedDate":"2021-08-28"},{"lineNumber":77,"author":{"gitId":"junghon3709"},"content":"                // this is not needed if we compile with assertions","lastModifiedDate":"2021-08-28"},{"lineNumber":78,"author":{"gitId":"junghon3709"},"content":"                throw new TigerStorageLoadException();","lastModifiedDate":"2021-09-03"},{"lineNumber":79,"author":{"gitId":"junghon3709"},"content":"            }","lastModifiedDate":"2021-08-28"},{"lineNumber":80,"author":{"gitId":"junghon3709"},"content":"            if (stringArray[1].equals(\"true\")) {","lastModifiedDate":"2021-08-21"},{"lineNumber":81,"author":{"gitId":"junghon3709"},"content":"                return new ToDo(stringArray[2], true, p); // task description, done, priority","lastModifiedDate":"2021-08-25"},{"lineNumber":82,"author":{"gitId":"junghon3709"},"content":"            } else {","lastModifiedDate":"2021-08-21"},{"lineNumber":83,"author":{"gitId":"junghon3709"},"content":"                return new ToDo(stringArray[2], false, p); // task description, done, priority","lastModifiedDate":"2021-08-25"},{"lineNumber":84,"author":{"gitId":"junghon3709"},"content":"            }","lastModifiedDate":"2021-08-21"},{"lineNumber":85,"author":{"gitId":"junghon3709"},"content":"        } catch (AssertionError e) {","lastModifiedDate":"2021-08-21"},{"lineNumber":86,"author":{"gitId":"junghon3709"},"content":"            throw new TigerStorageLoadException();","lastModifiedDate":"2021-09-03"},{"lineNumber":87,"author":{"gitId":"junghon3709"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":88,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":89,"author":{"gitId":"junghon3709"},"content":"}","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"junghon3709":89}},{"path":"src/main/java/tiger/constants/Flag.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"junghon3709"},"content":"package tiger.constants;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"junghon3709"},"content":"public enum Flag {","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"junghon3709"},"content":"    DEFAULT,","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"junghon3709"},"content":"    STORAGE_FAILED,","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"junghon3709"},"content":"    STORAGE_NOT_YET_INIT,","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"junghon3709"},"content":"    STORAGE_PARTIAL_LOAD,","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"junghon3709"},"content":"    STORAGE_WIPE,","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"junghon3709"},"content":"    IS_EXITED;","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"junghon3709"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"junghon3709":10}},{"path":"src/main/java/tiger/constants/Messages.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"junghon3709"},"content":"package tiger.constants;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"junghon3709"},"content":"public enum Messages {","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"junghon3709"},"content":"    EXCEPTION_INPUT_DATE_PARSING (\"Please ensure you key in dates in the input specified.\"),","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"junghon3709"},"content":"    EXCEPTION_INPUT_TOO_MANY_ARGUMENTS (\"Too many arguments specified!\"),","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"junghon3709"},"content":"    EXCEPTION_INPUT_SEMICOLON (\"Input command cannot contain semicolons! (;)\"),","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"junghon3709"},"content":"    EXCEPTION_STORAGE_INIT (\"Error encountered in initialising/finding storage file!\"),","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"junghon3709"},"content":"    EXCEPTION_STORAGE_MEMORY_CORRUPTED (\"Error encountered in loading the file! Did you alter my memory directly?\\nIf\"","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"junghon3709"},"content":"            + \" you didn\u0027t backup my memory, would you like to try a partial load to see what can be recovered? \"","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"junghon3709"},"content":"            + \"[Y/N]\\nPressing N will wipe data currently stored.\"),","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"junghon3709"},"content":"    EXCEPTION_STORAGE_SAVE (\"Error encountered in saving the file! Be sure you don\u0027t have the file open while \"","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"junghon3709"},"content":"            + \"writing!\");","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"junghon3709"},"content":"    private final String message;","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"junghon3709"},"content":"    Messages(String message) {","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"junghon3709"},"content":"        this.message \u003d message;","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"junghon3709"},"content":"    public String getMessage() {","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"junghon3709"},"content":"        return this.message;","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"junghon3709"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"junghon3709":25}},{"path":"src/main/java/tiger/constants/Priority.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"junghon3709"},"content":"package tiger.constants;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"junghon3709"},"content":"public enum Priority {","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"junghon3709"},"content":"    HIGH(\"H\"),","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"junghon3709"},"content":"    MEDIUM(\"M\"),","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"junghon3709"},"content":"    LOW(\"L\"),","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"junghon3709"},"content":"    INVALID(\"I\");","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"junghon3709"},"content":"    private String letter;","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"junghon3709"},"content":"    Priority(String letter) {","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"junghon3709"},"content":"        this.letter \u003d letter;","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"junghon3709"},"content":"    public String getLetter() {","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"junghon3709"},"content":"        return this.letter;","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"junghon3709"},"content":"    public static Priority getPriorityFromLetter(String p) {","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"junghon3709"},"content":"        switch (p) {","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"junghon3709"},"content":"        case \"L\":","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"junghon3709"},"content":"            return Priority.LOW;","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"junghon3709"},"content":"        case \"M\":","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"junghon3709"},"content":"            return Priority.MEDIUM;","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"junghon3709"},"content":"        case \"H\":","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"junghon3709"},"content":"            return Priority.HIGH;","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"junghon3709"},"content":"        default:","lastModifiedDate":"2021-08-28"},{"lineNumber":29,"author":{"gitId":"junghon3709"},"content":"            return Priority.INVALID;","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"junghon3709"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"junghon3709"},"content":"}","lastModifiedDate":"2021-08-28"},{"lineNumber":33,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"junghon3709":33}},{"path":"src/main/java/tiger/exceptions/TigerException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"junghon3709"},"content":"package tiger.exceptions;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"junghon3709"},"content":"public class TigerException extends RuntimeException {","lastModifiedDate":"2021-08-21"},{"lineNumber":4,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"junghon3709"},"content":"    private String error;","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":7,"author":{"gitId":"junghon3709"},"content":"    public TigerException(String error) {","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"junghon3709"},"content":"        this.error \u003d error;","lastModifiedDate":"2021-08-21"},{"lineNumber":9,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"junghon3709"},"content":"    @Override","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"junghon3709"},"content":"    public String toString() {","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"junghon3709"},"content":"        return this.error;","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":16,"author":{"gitId":"junghon3709"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"junghon3709":16}},{"path":"src/main/java/tiger/exceptions/actions/TigerActionExecutionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"junghon3709"},"content":"package tiger.exceptions.actions;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"junghon3709"},"content":"import tiger.exceptions.TigerException;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"junghon3709"},"content":"public class TigerActionExecutionException extends TigerException {","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"junghon3709"},"content":"    public TigerActionExecutionException(String error) {","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"junghon3709"},"content":"        super(error);","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"junghon3709"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"junghon3709":9}},{"path":"src/main/java/tiger/exceptions/actions/TigerIndexOutOfBoundsException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"junghon3709"},"content":"package tiger.exceptions.actions;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":3,"author":{"gitId":"junghon3709"},"content":"public class TigerIndexOutOfBoundsException extends TigerActionExecutionException {","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"junghon3709"},"content":"     * Throws an exception if the index specified is out of bounds, usually when accessing elements of the {@code","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"junghon3709"},"content":"     * TaskList}.","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"junghon3709"},"content":"     * @param index Index of the element accessed.","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"junghon3709"},"content":"     * @param taskListSize Size of the {@code TaskList}.","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"junghon3709"},"content":"    public TigerIndexOutOfBoundsException(int index, int taskListSize) {","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"junghon3709"},"content":"        super(String.format(\"Index %d is out of bounds of your task list size of %d.\\nPlease make sure your index is \"","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"junghon3709"},"content":"                + \"at least 1.\\nUse the list command to see task indices.\", index + 1, taskListSize));","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":16,"author":{"gitId":"junghon3709"},"content":"}","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"junghon3709":16}},{"path":"src/main/java/tiger/exceptions/inputs/TigerDateParsingException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"junghon3709"},"content":"package tiger.exceptions.inputs;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"junghon3709"},"content":"import tiger.constants.Messages;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"junghon3709"},"content":"public class TigerDateParsingException extends TigerInvalidInputException {","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"junghon3709"},"content":"    public TigerDateParsingException() {","lastModifiedDate":"2021-09-03"},{"lineNumber":7,"author":{"gitId":"junghon3709"},"content":"        super(Messages.EXCEPTION_INPUT_DATE_PARSING.getMessage());","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":9,"author":{"gitId":"junghon3709"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"junghon3709":9}},{"path":"src/main/java/tiger/exceptions/inputs/TigerEmptyStringException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"junghon3709"},"content":"package tiger.exceptions.inputs;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":3,"author":{"gitId":"junghon3709"},"content":"public class TigerEmptyStringException extends TigerInvalidInputException {","lastModifiedDate":"2021-08-21"},{"lineNumber":4,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"junghon3709"},"content":"     * Throws an exception if the input string is empty.","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"junghon3709"},"content":"     * @param property The field of the command which is detected to be empty.","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"junghon3709"},"content":"    public TigerEmptyStringException(String property) {","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"junghon3709"},"content":"        super(String.format(\"%s property cannot be empty.\\nPlease ensure you key in the command in \"","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"junghon3709"},"content":"                + \"the format specified.\", property));","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":15,"author":{"gitId":"junghon3709"},"content":"}","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"junghon3709":15}},{"path":"src/main/java/tiger/exceptions/inputs/TigerInvalidArgumentException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"junghon3709"},"content":"package tiger.exceptions.inputs;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"junghon3709"},"content":"public class TigerInvalidArgumentException extends TigerInvalidInputException {","lastModifiedDate":"2021-08-21"},{"lineNumber":4,"author":{"gitId":"junghon3709"},"content":"    public TigerInvalidArgumentException(String property, String command) {","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"junghon3709"},"content":"        super(String.format(\"%s is not a valid argument for the %s command.\", property, command));","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":7,"author":{"gitId":"junghon3709"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"junghon3709":7}},{"path":"src/main/java/tiger/exceptions/inputs/TigerInvalidInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"junghon3709"},"content":"package tiger.exceptions.inputs;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"junghon3709"},"content":"import tiger.exceptions.TigerException;","lastModifiedDate":"2021-08-21"},{"lineNumber":4,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"junghon3709"},"content":"public class TigerInvalidInputException extends TigerException {","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":7,"author":{"gitId":"junghon3709"},"content":"    public TigerInvalidInputException(String error) {","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"junghon3709"},"content":"        super(error);","lastModifiedDate":"2021-08-21"},{"lineNumber":9,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"junghon3709"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"junghon3709":10}},{"path":"src/main/java/tiger/exceptions/inputs/TigerSemiColonException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"junghon3709"},"content":"package tiger.exceptions.inputs;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"junghon3709"},"content":"import tiger.constants.Messages;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"junghon3709"},"content":"public class TigerSemiColonException extends TigerInvalidInputException {","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"junghon3709"},"content":"    public TigerSemiColonException() {","lastModifiedDate":"2021-09-03"},{"lineNumber":7,"author":{"gitId":"junghon3709"},"content":"        super(Messages.EXCEPTION_INPUT_SEMICOLON.getMessage());","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"junghon3709"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"junghon3709":9}},{"path":"src/main/java/tiger/exceptions/inputs/TigerTooManyInputsException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"junghon3709"},"content":"package tiger.exceptions.inputs;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"junghon3709"},"content":"import tiger.constants.Messages;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"junghon3709"},"content":"public class TigerTooManyInputsException extends TigerInvalidInputException {","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"junghon3709"},"content":"    public TigerTooManyInputsException() {","lastModifiedDate":"2021-09-03"},{"lineNumber":7,"author":{"gitId":"junghon3709"},"content":"        super(Messages.EXCEPTION_INPUT_TOO_MANY_ARGUMENTS.getMessage());","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"junghon3709"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"junghon3709":9}},{"path":"src/main/java/tiger/exceptions/storage/TigerStorageException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"junghon3709"},"content":"package tiger.exceptions.storage;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"junghon3709"},"content":"import tiger.exceptions.TigerException;","lastModifiedDate":"2021-08-21"},{"lineNumber":4,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"junghon3709"},"content":"public class TigerStorageException extends TigerException {","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":7,"author":{"gitId":"junghon3709"},"content":"    public TigerStorageException(String error) {","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"junghon3709"},"content":"        super(error);","lastModifiedDate":"2021-08-21"},{"lineNumber":9,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"junghon3709"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"junghon3709":10}},{"path":"src/main/java/tiger/exceptions/storage/TigerStorageInitException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"junghon3709"},"content":"package tiger.exceptions.storage;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"junghon3709"},"content":"import tiger.constants.Messages;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"junghon3709"},"content":"public class TigerStorageInitException extends TigerStorageException {","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"junghon3709"},"content":"    // this method should almost never be thrown, unless the user screws around with the file system","lastModifiedDate":"2021-08-21"},{"lineNumber":7,"author":{"gitId":"junghon3709"},"content":"    public TigerStorageInitException() {","lastModifiedDate":"2021-09-03"},{"lineNumber":8,"author":{"gitId":"junghon3709"},"content":"        super(String.format(Messages.EXCEPTION_STORAGE_INIT.getMessage()));","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"junghon3709"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"junghon3709":10}},{"path":"src/main/java/tiger/exceptions/storage/TigerStorageLoadException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"junghon3709"},"content":"package tiger.exceptions.storage;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"junghon3709"},"content":"import tiger.constants.Messages;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"junghon3709"},"content":"public class TigerStorageLoadException extends TigerStorageException {","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":7,"author":{"gitId":"junghon3709"},"content":"    public TigerStorageLoadException() {","lastModifiedDate":"2021-09-03"},{"lineNumber":8,"author":{"gitId":"junghon3709"},"content":"        super(Messages.EXCEPTION_STORAGE_MEMORY_CORRUPTED.getMessage());","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"junghon3709"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"junghon3709":10}},{"path":"src/main/java/tiger/exceptions/storage/TigerStorageSaveException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"junghon3709"},"content":"package tiger.exceptions.storage;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"junghon3709"},"content":"import tiger.constants.Messages;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"junghon3709"},"content":"public class TigerStorageSaveException extends TigerStorageException {","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"junghon3709"},"content":"    // this method should almost never be thrown, unless the user screws around with the file system","lastModifiedDate":"2021-08-21"},{"lineNumber":7,"author":{"gitId":"junghon3709"},"content":"    public TigerStorageSaveException() {","lastModifiedDate":"2021-09-03"},{"lineNumber":8,"author":{"gitId":"junghon3709"},"content":"        super(String.format(Messages.EXCEPTION_STORAGE_SAVE.getMessage()));","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"junghon3709"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"junghon3709":10}},{"path":"src/main/java/tiger/parser/ByeParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"junghon3709"},"content":"package tiger.parser;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"junghon3709"},"content":"import tiger.exceptions.inputs.TigerInvalidInputException;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"junghon3709"},"content":"/**","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"junghon3709"},"content":" * Practically, {@code ByeParser} does nothing as there is nothing to parse for the {@code Bye} command. This is a","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"junghon3709"},"content":" * filler class in case some additional arguments is added to the {@code Bye} command in the future.","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"junghon3709"},"content":" */","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"junghon3709"},"content":"public class ByeParser extends Parser {","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"junghon3709"},"content":"    private String input;","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"junghon3709"},"content":"     * Constructor of the {@code ByeParser class}","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"junghon3709"},"content":"     * @param input Input of the user.","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"junghon3709"},"content":"    public ByeParser(String input) {","lastModifiedDate":"2021-08-21"},{"lineNumber":21,"author":{"gitId":"junghon3709"},"content":"        // does nothing, nothing to parse","lastModifiedDate":"2021-08-21"},{"lineNumber":22,"author":{"gitId":"junghon3709"},"content":"        this.input \u003d input;","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"junghon3709"},"content":"    @Override","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"junghon3709"},"content":"    public void parse() throws TigerInvalidInputException {","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":28,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":29,"author":{"gitId":"junghon3709"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"junghon3709":29}},{"path":"src/main/java/tiger/parser/ClearParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"junghon3709"},"content":"package tiger.parser;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"junghon3709"},"content":"import tiger.exceptions.inputs.TigerInvalidInputException;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"junghon3709"},"content":"/**","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"junghon3709"},"content":" * Practically, {@code ClearParser} does nothing as there is nothing to parse for the {@code Clear} command. This is","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"junghon3709"},"content":" * a filler class in case some additional arguments is added to the {@code Clear} command in the future.","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"junghon3709"},"content":" */","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"junghon3709"},"content":"public class ClearParser extends Parser {","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"junghon3709"},"content":"    private String input;","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"junghon3709"},"content":"     * Constructor of the {@code ClearParser class}","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"junghon3709"},"content":"     * @param input Input of the user.","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"junghon3709"},"content":"    public ClearParser(String input) {","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"junghon3709"},"content":"        this.input \u003d input;","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"junghon3709"},"content":"    @Override","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"junghon3709"},"content":"    public void parse() throws TigerInvalidInputException {","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"junghon3709"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"junghon3709":28}},{"path":"src/main/java/tiger/parser/DeadLineParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"junghon3709"},"content":"package tiger.parser;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":3,"author":{"gitId":"junghon3709"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"junghon3709"},"content":"import java.util.List;","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"junghon3709"},"content":"import tiger.constants.Priority;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"junghon3709"},"content":"import tiger.exceptions.inputs.TigerEmptyStringException;","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"junghon3709"},"content":"import tiger.exceptions.inputs.TigerInvalidArgumentException;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"junghon3709"},"content":"import tiger.exceptions.inputs.TigerInvalidInputException;","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"junghon3709"},"content":"import tiger.utils.CustomDate;","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"junghon3709"},"content":"import tiger.utils.DateStringConverter;","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"junghon3709"},"content":"import tiger.utils.StringUtils;","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":14,"author":{"gitId":"junghon3709"},"content":"/**","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"junghon3709"},"content":" * The {@code DeadLineParser} parser takes in an input String and parses it, so that the {@code DeadLineAction} class","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"junghon3709"},"content":" * can access the class fields and understand user input.","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"junghon3709"},"content":" */","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":20,"author":{"gitId":"junghon3709"},"content":"public class DeadLineParser extends Parser {","lastModifiedDate":"2021-08-21"},{"lineNumber":21,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":22,"author":{"gitId":"junghon3709"},"content":"    private String todo \u003d \"\";","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"junghon3709"},"content":"    private CustomDate date;","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"junghon3709"},"content":"    private String dateString \u003d \"\";","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"junghon3709"},"content":"    // if the user doesn\u0027t specify the priority, by default, we set it to MEDIUM.","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"junghon3709"},"content":"    private Priority priority \u003d Priority.MEDIUM;","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"junghon3709"},"content":"    private String input;","lastModifiedDate":"2021-08-28"},{"lineNumber":28,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":29,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":30,"author":{"gitId":"junghon3709"},"content":"     * Constructor of the {@code DeadLineParser class}","lastModifiedDate":"2021-08-28"},{"lineNumber":31,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":32,"author":{"gitId":"junghon3709"},"content":"     * @param input Input of the user.","lastModifiedDate":"2021-08-28"},{"lineNumber":33,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":34,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":35,"author":{"gitId":"junghon3709"},"content":"    public DeadLineParser(String input) {","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"junghon3709"},"content":"        this.input \u003d input;","lastModifiedDate":"2021-08-28"},{"lineNumber":37,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":39,"author":{"gitId":"junghon3709"},"content":"    @Override","lastModifiedDate":"2021-08-28"},{"lineNumber":40,"author":{"gitId":"junghon3709"},"content":"    public void parse() throws TigerInvalidInputException {","lastModifiedDate":"2021-08-23"},{"lineNumber":41,"author":{"gitId":"junghon3709"},"content":"        StringUtils stringUtils \u003d new StringUtils();","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"junghon3709"},"content":"        String regex \u003d \"^(deadline|dateline|Dateline|Deadline|DEADLINE|DATELINE)|(/by)|(/priority)\";","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"junghon3709"},"content":"        List\u003cString\u003e array \u003d","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"junghon3709"},"content":"                Arrays.asList(stringUtils.removeBackAndFrontSpaces(this.input).split(regex));","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"junghon3709"},"content":"        // assert that the array is at size at least 3","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"junghon3709"},"content":"        if (array.size() \u003c\u003d 1) {","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"junghon3709"},"content":"            throw new TigerEmptyStringException(\"Deadline description\");","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"junghon3709"},"content":"        }","lastModifiedDate":"2021-08-14"},{"lineNumber":49,"author":{"gitId":"junghon3709"},"content":"        if (array.size() \u003c\u003d 2) {","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"junghon3709"},"content":"            throw new TigerEmptyStringException(\"Deadline date\");","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"junghon3709"},"content":"        }","lastModifiedDate":"2021-08-14"},{"lineNumber":52,"author":{"gitId":"junghon3709"},"content":"        if (this.input.contains(\"/priority\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"junghon3709"},"content":"            // task priority","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"junghon3709"},"content":"            if (array.size() \u003c 4) {","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"junghon3709"},"content":"                throw new TigerEmptyStringException(\"Deadline priority\");","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"junghon3709"},"content":"            }","lastModifiedDate":"2021-08-14"},{"lineNumber":57,"author":{"gitId":"junghon3709"},"content":"            String p;","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"junghon3709"},"content":"            try {","lastModifiedDate":"2021-08-14"},{"lineNumber":59,"author":{"gitId":"junghon3709"},"content":"                p \u003d stringUtils.removeBackAndFrontSpaces(array.get(3));","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"junghon3709"},"content":"            } catch (StringIndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"junghon3709"},"content":"                throw new TigerEmptyStringException(\"Deadline priority\");","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"junghon3709"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"junghon3709"},"content":"            this.priority \u003d Priority.getPriorityFromLetter(p);","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"junghon3709"},"content":"            if (this.priority.equals(Priority.INVALID)) {","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"junghon3709"},"content":"                throw new TigerInvalidArgumentException(p, \"Deadline priority\");","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"junghon3709"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"junghon3709"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"junghon3709"},"content":"        // task description","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"junghon3709"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"junghon3709"},"content":"            this.todo \u003d stringUtils.removeBackAndFrontSpaces(array.get(1));","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"junghon3709"},"content":"        } catch (StringIndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-14"},{"lineNumber":72,"author":{"gitId":"junghon3709"},"content":"            throw new TigerEmptyStringException(\"Deadline description\");","lastModifiedDate":"2021-08-21"},{"lineNumber":73,"author":{"gitId":"junghon3709"},"content":"        }","lastModifiedDate":"2021-08-14"},{"lineNumber":74,"author":{"gitId":"junghon3709"},"content":"        this.todo \u003d stringUtils.capitaliseFirstLetter(this.todo);","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":76,"author":{"gitId":"junghon3709"},"content":"        try {","lastModifiedDate":"2021-08-14"},{"lineNumber":77,"author":{"gitId":"junghon3709"},"content":"            this.dateString \u003d stringUtils.removeBackAndFrontSpaces(array.get(2));","lastModifiedDate":"2021-08-25"},{"lineNumber":78,"author":{"gitId":"junghon3709"},"content":"        } catch (StringIndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-14"},{"lineNumber":79,"author":{"gitId":"junghon3709"},"content":"            throw new TigerEmptyStringException(\"Deadline date\");","lastModifiedDate":"2021-08-21"},{"lineNumber":80,"author":{"gitId":"junghon3709"},"content":"        }","lastModifiedDate":"2021-08-14"},{"lineNumber":81,"author":{"gitId":"junghon3709"},"content":"        this.date \u003d new DateStringConverter().getDateFromString(this.dateString);","lastModifiedDate":"2021-08-23"},{"lineNumber":82,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":83,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":84,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":85,"author":{"gitId":"junghon3709"},"content":"     * Gets the task description.","lastModifiedDate":"2021-08-28"},{"lineNumber":86,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":87,"author":{"gitId":"junghon3709"},"content":"     * @return the task description.","lastModifiedDate":"2021-08-28"},{"lineNumber":88,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":89,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":90,"author":{"gitId":"junghon3709"},"content":"    public String getTodo() {","lastModifiedDate":"2021-08-23"},{"lineNumber":91,"author":{"gitId":"junghon3709"},"content":"        return this.todo;","lastModifiedDate":"2021-08-23"},{"lineNumber":92,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":93,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":94,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":95,"author":{"gitId":"junghon3709"},"content":"     * Gets the task date.","lastModifiedDate":"2021-08-28"},{"lineNumber":96,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":97,"author":{"gitId":"junghon3709"},"content":"     * @return the task date.","lastModifiedDate":"2021-08-28"},{"lineNumber":98,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":99,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":100,"author":{"gitId":"junghon3709"},"content":"    public CustomDate getDate() {","lastModifiedDate":"2021-08-23"},{"lineNumber":101,"author":{"gitId":"junghon3709"},"content":"        return this.date;","lastModifiedDate":"2021-08-23"},{"lineNumber":102,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":103,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":104,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":105,"author":{"gitId":"junghon3709"},"content":"     * Gets the priority of the task.","lastModifiedDate":"2021-08-28"},{"lineNumber":106,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":107,"author":{"gitId":"junghon3709"},"content":"     * @return the priority of the task.","lastModifiedDate":"2021-08-28"},{"lineNumber":108,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":109,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":110,"author":{"gitId":"junghon3709"},"content":"    public Priority getPriority() {","lastModifiedDate":"2021-08-25"},{"lineNumber":111,"author":{"gitId":"junghon3709"},"content":"        return this.priority;","lastModifiedDate":"2021-08-25"},{"lineNumber":112,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":113,"author":{"gitId":"junghon3709"},"content":"}","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"junghon3709":113}},{"path":"src/main/java/tiger/parser/DeleteParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"junghon3709"},"content":"package tiger.parser;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":3,"author":{"gitId":"junghon3709"},"content":"import tiger.exceptions.inputs.TigerEmptyStringException;","lastModifiedDate":"2021-08-21"},{"lineNumber":4,"author":{"gitId":"junghon3709"},"content":"import tiger.exceptions.inputs.TigerInvalidArgumentException;","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"junghon3709"},"content":"import tiger.exceptions.inputs.TigerInvalidInputException;","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"junghon3709"},"content":"import tiger.exceptions.inputs.TigerTooManyInputsException;","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"junghon3709"},"content":"import tiger.utils.StringUtils;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":9,"author":{"gitId":"junghon3709"},"content":"/**","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"junghon3709"},"content":" * The {@code DeleteParser} parser class takes in an input String and parses it, so that the {@code DeleteAction}","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"junghon3709"},"content":" * class can access the class fields and understand user input.","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"junghon3709"},"content":" */","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"junghon3709"},"content":"public class DeleteParser extends Parser {","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":16,"author":{"gitId":"junghon3709"},"content":"    private int index;","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"junghon3709"},"content":"    private String input;","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":19,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"junghon3709"},"content":"     * Constructor of the {@code DeleteParser class}","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"junghon3709"},"content":"     * @param input Input of the user.","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"junghon3709"},"content":"    public DeleteParser(String input) {","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"junghon3709"},"content":"        this.input \u003d input;","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":28,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":29,"author":{"gitId":"junghon3709"},"content":"    @Override","lastModifiedDate":"2021-08-28"},{"lineNumber":30,"author":{"gitId":"junghon3709"},"content":"    public void parse() throws TigerInvalidInputException {","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"junghon3709"},"content":"        String[] array \u003d","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"junghon3709"},"content":"                new StringUtils().removeBackAndFrontSpaces(this.input).split(\" \");","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"junghon3709"},"content":"        try {","lastModifiedDate":"2021-08-14"},{"lineNumber":34,"author":{"gitId":"junghon3709"},"content":"            this.index \u003d Integer.valueOf(array[1].replaceAll(\" \", \"\"));","lastModifiedDate":"2021-08-14"},{"lineNumber":35,"author":{"gitId":"junghon3709"},"content":"            assert(this.index \u003e 0);","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"junghon3709"},"content":"            if (array.length \u003e 2) {","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"junghon3709"},"content":"                throw new TigerTooManyInputsException();","lastModifiedDate":"2021-09-03"},{"lineNumber":38,"author":{"gitId":"junghon3709"},"content":"            }","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"junghon3709"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-14"},{"lineNumber":40,"author":{"gitId":"junghon3709"},"content":"            throw new TigerEmptyStringException(\"Delete index\");","lastModifiedDate":"2021-08-21"},{"lineNumber":41,"author":{"gitId":"junghon3709"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-08-14"},{"lineNumber":42,"author":{"gitId":"junghon3709"},"content":"            throw new TigerInvalidArgumentException(array[1], \"Delete\");","lastModifiedDate":"2021-08-21"},{"lineNumber":43,"author":{"gitId":"junghon3709"},"content":"        } catch (AssertionError e) {","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"junghon3709"},"content":"            throw new TigerInvalidArgumentException(array[1], \"Delete\");","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"junghon3709"},"content":"        }","lastModifiedDate":"2021-08-14"},{"lineNumber":46,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":47,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":48,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":49,"author":{"gitId":"junghon3709"},"content":"     * Gets the index of the task to delete.","lastModifiedDate":"2021-08-28"},{"lineNumber":50,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":51,"author":{"gitId":"junghon3709"},"content":"     * @return the index of the task to delete.","lastModifiedDate":"2021-08-28"},{"lineNumber":52,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":53,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":54,"author":{"gitId":"junghon3709"},"content":"    public int getIndex() {","lastModifiedDate":"2021-08-23"},{"lineNumber":55,"author":{"gitId":"junghon3709"},"content":"        return this.index;","lastModifiedDate":"2021-08-23"},{"lineNumber":56,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":57,"author":{"gitId":"junghon3709"},"content":"}","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"junghon3709":57}},{"path":"src/main/java/tiger/parser/EventParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"junghon3709"},"content":"package tiger.parser;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":3,"author":{"gitId":"junghon3709"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"junghon3709"},"content":"import java.util.List;","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"junghon3709"},"content":"import tiger.constants.Priority;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"junghon3709"},"content":"import tiger.exceptions.inputs.TigerEmptyStringException;","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"junghon3709"},"content":"import tiger.exceptions.inputs.TigerInvalidArgumentException;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"junghon3709"},"content":"import tiger.exceptions.inputs.TigerInvalidInputException;","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"junghon3709"},"content":"import tiger.utils.CustomDate;","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"junghon3709"},"content":"import tiger.utils.DateStringConverter;","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"junghon3709"},"content":"import tiger.utils.StringUtils;","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":14,"author":{"gitId":"junghon3709"},"content":"/**","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"junghon3709"},"content":" * The {@code EventParser} parser takes in an input String and parses it, so that the {@code EventAction} class","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"junghon3709"},"content":" * can access the class fields and understand user input.","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"junghon3709"},"content":" */","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":19,"author":{"gitId":"junghon3709"},"content":"public class EventParser extends Parser {","lastModifiedDate":"2021-08-21"},{"lineNumber":20,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":21,"author":{"gitId":"junghon3709"},"content":"    private String todo \u003d \"\";","lastModifiedDate":"2021-08-23"},{"lineNumber":22,"author":{"gitId":"junghon3709"},"content":"    private CustomDate date;","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"junghon3709"},"content":"    private String dateString \u003d \"\";","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"junghon3709"},"content":"    private Priority priority \u003d Priority.MEDIUM;","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"junghon3709"},"content":"    private String input;","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":27,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"junghon3709"},"content":"     * Constructor for the {@code EventParser} class.","lastModifiedDate":"2021-08-28"},{"lineNumber":29,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"junghon3709"},"content":"     * @param  input String to be parsed.","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"junghon3709"},"content":"     * @throws TigerEmptyStringException If input is invalid.","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"junghon3709"},"content":"    public EventParser(String input) {","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"junghon3709"},"content":"        this.input \u003d input;","lastModifiedDate":"2021-08-28"},{"lineNumber":36,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"junghon3709"},"content":"    @Override","lastModifiedDate":"2021-08-28"},{"lineNumber":39,"author":{"gitId":"junghon3709"},"content":"    public void parse() throws TigerInvalidInputException {","lastModifiedDate":"2021-08-28"},{"lineNumber":40,"author":{"gitId":"junghon3709"},"content":"        StringUtils stringUtils \u003d new StringUtils();","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"junghon3709"},"content":"        String regex \u003d \"^(event|Event|EVENT)|(/at)|(/priority)\";","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"junghon3709"},"content":"        List\u003cString\u003e array \u003d","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"junghon3709"},"content":"                Arrays.asList(stringUtils.removeBackAndFrontSpaces(this.input).split(regex));","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"junghon3709"},"content":"        // assert that the array is at size at least 3","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"junghon3709"},"content":"        if (array.size() \u003c\u003d 1) {","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"junghon3709"},"content":"            throw new TigerEmptyStringException(\"Event description\");","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"junghon3709"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"junghon3709"},"content":"        if (array.size() \u003c\u003d 2) {","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"junghon3709"},"content":"            throw new TigerEmptyStringException(\"Event date\");","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"junghon3709"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"junghon3709"},"content":"        if (this.input.contains(\"/priority\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"junghon3709"},"content":"            // task priority","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"junghon3709"},"content":"            if (array.size() \u003c 4) {","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"junghon3709"},"content":"                throw new TigerEmptyStringException(\"Event priority\");","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"junghon3709"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"junghon3709"},"content":"            String p;","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"junghon3709"},"content":"            try {","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"junghon3709"},"content":"                p \u003d stringUtils.removeBackAndFrontSpaces(array.get(3));","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"junghon3709"},"content":"            } catch (StringIndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"junghon3709"},"content":"                throw new TigerEmptyStringException(\"Event priority\");","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"junghon3709"},"content":"            }","lastModifiedDate":"2021-08-14"},{"lineNumber":62,"author":{"gitId":"junghon3709"},"content":"            this.priority \u003d Priority.getPriorityFromLetter(p);","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"junghon3709"},"content":"            if (this.priority.equals(Priority.INVALID)) {","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"junghon3709"},"content":"                throw new TigerInvalidArgumentException(p, \"Event priority\");","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"junghon3709"},"content":"            }","lastModifiedDate":"2021-08-14"},{"lineNumber":66,"author":{"gitId":"junghon3709"},"content":"        }","lastModifiedDate":"2021-08-14"},{"lineNumber":67,"author":{"gitId":"junghon3709"},"content":"        // task description","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"junghon3709"},"content":"        try {","lastModifiedDate":"2021-08-14"},{"lineNumber":69,"author":{"gitId":"junghon3709"},"content":"            this.todo \u003d stringUtils.removeBackAndFrontSpaces(array.get(1));","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"junghon3709"},"content":"        } catch (StringIndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-14"},{"lineNumber":71,"author":{"gitId":"junghon3709"},"content":"            throw new TigerEmptyStringException(\"Event description\");","lastModifiedDate":"2021-08-21"},{"lineNumber":72,"author":{"gitId":"junghon3709"},"content":"        }","lastModifiedDate":"2021-08-14"},{"lineNumber":73,"author":{"gitId":"junghon3709"},"content":"        this.todo \u003d stringUtils.capitaliseFirstLetter(this.todo);","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"junghon3709"},"content":"        try {","lastModifiedDate":"2021-08-14"},{"lineNumber":76,"author":{"gitId":"junghon3709"},"content":"            this.dateString \u003d stringUtils.removeBackAndFrontSpaces(array.get(2));","lastModifiedDate":"2021-08-25"},{"lineNumber":77,"author":{"gitId":"junghon3709"},"content":"        } catch (StringIndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-14"},{"lineNumber":78,"author":{"gitId":"junghon3709"},"content":"            throw new TigerEmptyStringException(\"Event date\");","lastModifiedDate":"2021-08-21"},{"lineNumber":79,"author":{"gitId":"junghon3709"},"content":"        }","lastModifiedDate":"2021-08-14"},{"lineNumber":80,"author":{"gitId":"junghon3709"},"content":"        this.date \u003d new DateStringConverter().getDateFromString(this.dateString);","lastModifiedDate":"2021-08-25"},{"lineNumber":81,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":82,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":83,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":84,"author":{"gitId":"junghon3709"},"content":"     * Gets the task description.","lastModifiedDate":"2021-08-28"},{"lineNumber":85,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":86,"author":{"gitId":"junghon3709"},"content":"     * @return the task description.","lastModifiedDate":"2021-08-28"},{"lineNumber":87,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":88,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":89,"author":{"gitId":"junghon3709"},"content":"    public String getTodo() {","lastModifiedDate":"2021-08-23"},{"lineNumber":90,"author":{"gitId":"junghon3709"},"content":"        return this.todo;","lastModifiedDate":"2021-08-23"},{"lineNumber":91,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":92,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":93,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":94,"author":{"gitId":"junghon3709"},"content":"     * Gets the task date.","lastModifiedDate":"2021-08-28"},{"lineNumber":95,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":96,"author":{"gitId":"junghon3709"},"content":"     * @return the task date.","lastModifiedDate":"2021-08-28"},{"lineNumber":97,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":98,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":99,"author":{"gitId":"junghon3709"},"content":"    public CustomDate getDate() {","lastModifiedDate":"2021-08-23"},{"lineNumber":100,"author":{"gitId":"junghon3709"},"content":"        return this.date;","lastModifiedDate":"2021-08-23"},{"lineNumber":101,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":102,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":103,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":104,"author":{"gitId":"junghon3709"},"content":"     * Gets the priority of the task.","lastModifiedDate":"2021-08-28"},{"lineNumber":105,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":106,"author":{"gitId":"junghon3709"},"content":"     * @return the priority of the task.","lastModifiedDate":"2021-08-28"},{"lineNumber":107,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":108,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":109,"author":{"gitId":"junghon3709"},"content":"    public Priority getPriority() {","lastModifiedDate":"2021-08-25"},{"lineNumber":110,"author":{"gitId":"junghon3709"},"content":"        return this.priority;","lastModifiedDate":"2021-08-25"},{"lineNumber":111,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":112,"author":{"gitId":"junghon3709"},"content":"}","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"junghon3709":112}},{"path":"src/main/java/tiger/parser/FindParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"junghon3709"},"content":"package tiger.parser;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"junghon3709"},"content":"import tiger.exceptions.inputs.TigerEmptyStringException;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"junghon3709"},"content":"import tiger.exceptions.inputs.TigerInvalidInputException;","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"junghon3709"},"content":"import tiger.utils.StringUtils;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"junghon3709"},"content":"/**","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"junghon3709"},"content":" * The {@code FindParser} parser takes in an input String and parses it, so that the {@code FindAction} class","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"junghon3709"},"content":" * can access the class fields and understand user input.","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"junghon3709"},"content":" */","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"junghon3709"},"content":"public class FindParser extends Parser {","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"junghon3709"},"content":"    private String toSearchFor \u003d \"\";","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"junghon3709"},"content":"    private String input;","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"junghon3709"},"content":"     * Constructor for the {@code FindParser} class.","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"junghon3709"},"content":"     * @param input String to be parsed.","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"junghon3709"},"content":"    public FindParser(String input) {","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"junghon3709"},"content":"        this.input \u003d input;","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"junghon3709"},"content":"    @Override","lastModifiedDate":"2021-08-28"},{"lineNumber":28,"author":{"gitId":"junghon3709"},"content":"    public void parse() throws TigerInvalidInputException {","lastModifiedDate":"2021-08-28"},{"lineNumber":29,"author":{"gitId":"junghon3709"},"content":"        StringUtils removeSpaces \u003d new StringUtils();","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"junghon3709"},"content":"        try {","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"junghon3709"},"content":"            String[] array \u003d","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"junghon3709"},"content":"                    removeSpaces.removeBackAndFrontSpaces(input).split(\" \");","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"junghon3709"},"content":"            for (int i \u003d 1; i \u003c array.length; i++) {","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"junghon3709"},"content":"                this.toSearchFor +\u003d (array[i] + \" \");","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"junghon3709"},"content":"            }","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"junghon3709"},"content":"            this.toSearchFor \u003d removeSpaces.removeBackAndFrontSpaces(this.toSearchFor);","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"junghon3709"},"content":"        } catch (StringIndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"junghon3709"},"content":"            throw new TigerEmptyStringException(\"Find description\");","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"junghon3709"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":42,"author":{"gitId":"junghon3709"},"content":"    public String getToSearchFor() {","lastModifiedDate":"2021-08-23"},{"lineNumber":43,"author":{"gitId":"junghon3709"},"content":"        return this.toSearchFor;","lastModifiedDate":"2021-08-23"},{"lineNumber":44,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":45,"author":{"gitId":"junghon3709"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"junghon3709":45}},{"path":"src/main/java/tiger/parser/ListParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"junghon3709"},"content":"package tiger.parser;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"junghon3709"},"content":"import tiger.exceptions.inputs.TigerInvalidInputException;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"junghon3709"},"content":"/**","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"junghon3709"},"content":" * The {@code ListParser} parser takes in an input String and parses it, so that the {@code ListAction} class","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"junghon3709"},"content":" * can access the class fields and understand user input.","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"junghon3709"},"content":" */","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"junghon3709"},"content":"public class ListParser extends Parser {","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"junghon3709"},"content":"    private String input;","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"junghon3709"},"content":"     * Practically, {@code ListParser} does nothing as there is nothing to parse","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"junghon3709"},"content":"     * for the {@code List} command. This is a filler class in case some additional","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"junghon3709"},"content":"     * arguments is added to the {@code List} command in the future.","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"junghon3709"},"content":"     * @param input String to be parsed.","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"junghon3709"},"content":"    public ListParser(String input) {","lastModifiedDate":"2021-08-21"},{"lineNumber":24,"author":{"gitId":"junghon3709"},"content":"        // does nothing, nothing to parse","lastModifiedDate":"2021-08-21"},{"lineNumber":25,"author":{"gitId":"junghon3709"},"content":"        this.input \u003d input;","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":28,"author":{"gitId":"junghon3709"},"content":"    @Override","lastModifiedDate":"2021-08-28"},{"lineNumber":29,"author":{"gitId":"junghon3709"},"content":"    public void parse() throws TigerInvalidInputException {","lastModifiedDate":"2021-08-28"},{"lineNumber":30,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":31,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":32,"author":{"gitId":"junghon3709"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"junghon3709":32}},{"path":"src/main/java/tiger/parser/MarkDoneParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"junghon3709"},"content":"package tiger.parser;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":3,"author":{"gitId":"junghon3709"},"content":"import tiger.exceptions.inputs.TigerEmptyStringException;","lastModifiedDate":"2021-08-21"},{"lineNumber":4,"author":{"gitId":"junghon3709"},"content":"import tiger.exceptions.inputs.TigerInvalidArgumentException;","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"junghon3709"},"content":"import tiger.exceptions.inputs.TigerInvalidInputException;","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"junghon3709"},"content":"import tiger.exceptions.inputs.TigerTooManyInputsException;","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"junghon3709"},"content":"import tiger.utils.StringUtils;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":9,"author":{"gitId":"junghon3709"},"content":"/**","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"junghon3709"},"content":" * The {@code MarkDoneParser} parser takes in an input String and parses it, so that the {@code MarkDoneAction} class","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"junghon3709"},"content":" * can access the class fields and understand user input.","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"junghon3709"},"content":" */","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"junghon3709"},"content":"public class MarkDoneParser extends Parser {","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":16,"author":{"gitId":"junghon3709"},"content":"    private int index;","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"junghon3709"},"content":"    private String input;","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":19,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"junghon3709"},"content":"     * Constructor for the {@code MarkDoneParser} class.","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"junghon3709"},"content":"     * @param input String to be parsed.","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"junghon3709"},"content":"    public MarkDoneParser(String input) {","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"junghon3709"},"content":"        this.input \u003d input;","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":28,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":29,"author":{"gitId":"junghon3709"},"content":"    @Override","lastModifiedDate":"2021-08-28"},{"lineNumber":30,"author":{"gitId":"junghon3709"},"content":"    public void parse() throws TigerInvalidInputException {","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"junghon3709"},"content":"        StringUtils removeSpaces \u003d new StringUtils();","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"junghon3709"},"content":"        String[] array \u003d removeSpaces.removeBackAndFrontSpaces(input).split(","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"junghon3709"},"content":"                \" \");","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"junghon3709"},"content":"        try {","lastModifiedDate":"2021-08-14"},{"lineNumber":35,"author":{"gitId":"junghon3709"},"content":"            this.index \u003d Integer.valueOf(array[1].replaceAll(\" \", \"\"));","lastModifiedDate":"2021-08-14"},{"lineNumber":36,"author":{"gitId":"junghon3709"},"content":"            assert (this.index \u003e 0);","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"junghon3709"},"content":"            if (array.length \u003e 2) {","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"junghon3709"},"content":"                throw new TigerTooManyInputsException();","lastModifiedDate":"2021-09-03"},{"lineNumber":39,"author":{"gitId":"junghon3709"},"content":"            }","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"junghon3709"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-14"},{"lineNumber":41,"author":{"gitId":"junghon3709"},"content":"            throw new TigerEmptyStringException(\"Done index\");","lastModifiedDate":"2021-08-21"},{"lineNumber":42,"author":{"gitId":"junghon3709"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-08-14"},{"lineNumber":43,"author":{"gitId":"junghon3709"},"content":"            throw new TigerInvalidArgumentException(array[1], \"Done\");","lastModifiedDate":"2021-08-21"},{"lineNumber":44,"author":{"gitId":"junghon3709"},"content":"        } catch (AssertionError e) {","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"junghon3709"},"content":"            throw new TigerInvalidArgumentException(array[1], \"Done\");","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"junghon3709"},"content":"        }","lastModifiedDate":"2021-08-14"},{"lineNumber":47,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":48,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":49,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":50,"author":{"gitId":"junghon3709"},"content":"     * Gets the index of the task to mark done.","lastModifiedDate":"2021-08-28"},{"lineNumber":51,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":52,"author":{"gitId":"junghon3709"},"content":"     * @return the index of the task to mark done.","lastModifiedDate":"2021-08-28"},{"lineNumber":53,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":54,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":55,"author":{"gitId":"junghon3709"},"content":"    public int getIndex() {","lastModifiedDate":"2021-08-23"},{"lineNumber":56,"author":{"gitId":"junghon3709"},"content":"        return this.index;","lastModifiedDate":"2021-08-23"},{"lineNumber":57,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":58,"author":{"gitId":"junghon3709"},"content":"}","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"junghon3709":58}},{"path":"src/main/java/tiger/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"junghon3709"},"content":"package tiger.parser;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"junghon3709"},"content":"import java.util.Locale;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"junghon3709"},"content":"import tiger.exceptions.inputs.TigerInvalidInputException;","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"junghon3709"},"content":"/**","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"junghon3709"},"content":" * The {@code Parser} class takes in the user input String, and parses","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"junghon3709"},"content":" * the string in relevant substrings so that {@code Action} classes","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"junghon3709"},"content":" * can use these substrings to create {@code Tasks}.","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"junghon3709"},"content":" */","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"junghon3709"},"content":"public abstract class Parser {","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"junghon3709"},"content":"     * Get the first word of user command.","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"junghon3709"},"content":"     * @param input Input string.","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"junghon3709"},"content":"     * @return String representing user command.","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"junghon3709"},"content":"    public static String getCommandKeyword(String input) {","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"junghon3709"},"content":"        String[] array \u003d input.split(\" \");","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"junghon3709"},"content":"        return array[0].toLowerCase(Locale.ENGLISH);","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":26,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":27,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"junghon3709"},"content":"     * Parses the user input.","lastModifiedDate":"2021-08-28"},{"lineNumber":29,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"junghon3709"},"content":"     * @throws TigerInvalidInputException if the input is invalid.","lastModifiedDate":"2021-08-28"},{"lineNumber":31,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"junghon3709"},"content":"    public abstract void parse() throws TigerInvalidInputException;","lastModifiedDate":"2021-08-28"},{"lineNumber":33,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":35,"author":{"gitId":"junghon3709"},"content":"     * Checks if entered user string contains a semicolon.","lastModifiedDate":"2021-08-28"},{"lineNumber":36,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":37,"author":{"gitId":"junghon3709"},"content":"     * @param input User input.","lastModifiedDate":"2021-08-28"},{"lineNumber":38,"author":{"gitId":"junghon3709"},"content":"     * @return Boolean indicating if string contains semicolon","lastModifiedDate":"2021-08-28"},{"lineNumber":39,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":40,"author":{"gitId":"junghon3709"},"content":"    public static boolean isValid(String input) {","lastModifiedDate":"2021-08-28"},{"lineNumber":41,"author":{"gitId":"junghon3709"},"content":"        if (input.contains(\";\")) {","lastModifiedDate":"2021-08-28"},{"lineNumber":42,"author":{"gitId":"junghon3709"},"content":"            return false;","lastModifiedDate":"2021-08-28"},{"lineNumber":43,"author":{"gitId":"junghon3709"},"content":"        } else {","lastModifiedDate":"2021-08-28"},{"lineNumber":44,"author":{"gitId":"junghon3709"},"content":"            return true;","lastModifiedDate":"2021-08-28"},{"lineNumber":45,"author":{"gitId":"junghon3709"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":46,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":47,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":48,"author":{"gitId":"junghon3709"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"junghon3709":48}},{"path":"src/main/java/tiger/parser/ToDoParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"junghon3709"},"content":"package tiger.parser;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":3,"author":{"gitId":"junghon3709"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"junghon3709"},"content":"import java.util.List;","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"junghon3709"},"content":"import tiger.constants.Priority;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"junghon3709"},"content":"import tiger.exceptions.inputs.TigerEmptyStringException;","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"junghon3709"},"content":"import tiger.exceptions.inputs.TigerInvalidArgumentException;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"junghon3709"},"content":"import tiger.exceptions.inputs.TigerInvalidInputException;","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"junghon3709"},"content":"import tiger.utils.StringUtils;","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"junghon3709"},"content":"/**","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"junghon3709"},"content":" * The {@code ToDoParser} parser takes in an input String and parses it, so that the {@code ToDoAction} class","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"junghon3709"},"content":" * can access the class fields and understand user input.","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"junghon3709"},"content":" */","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":18,"author":{"gitId":"junghon3709"},"content":"public class ToDoParser extends Parser {","lastModifiedDate":"2021-08-21"},{"lineNumber":19,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":20,"author":{"gitId":"junghon3709"},"content":"    private String todo \u003d \"\";","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"junghon3709"},"content":"    private Priority priority \u003d Priority.MEDIUM;","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"junghon3709"},"content":"    private String input;","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"junghon3709"},"content":"    public ToDoParser(String input) {","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"junghon3709"},"content":"        this.input \u003d input;","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":28,"author":{"gitId":"junghon3709"},"content":"    @Override","lastModifiedDate":"2021-08-28"},{"lineNumber":29,"author":{"gitId":"junghon3709"},"content":"    public void parse() throws TigerInvalidInputException {","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"junghon3709"},"content":"        StringUtils stringUtils \u003d new StringUtils();","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"junghon3709"},"content":"        String regex \u003d \"^(todo|Todo|TODO)|(/priority)\";","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"junghon3709"},"content":"        List\u003cString\u003e array \u003d","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"junghon3709"},"content":"                Arrays.asList(stringUtils.removeBackAndFrontSpaces(this.input).split(regex));","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"junghon3709"},"content":"        if (array.size() \u003c\u003d 1) {","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"junghon3709"},"content":"            throw new TigerEmptyStringException(\"ToDo description\");","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"junghon3709"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"junghon3709"},"content":"        if (this.input.contains(\"/priority\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"junghon3709"},"content":"            // task priority","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"junghon3709"},"content":"            if (array.size() \u003c 3) {","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"junghon3709"},"content":"                throw new TigerEmptyStringException(\"ToDo priority\");","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"junghon3709"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"junghon3709"},"content":"            String p;","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"junghon3709"},"content":"            try {","lastModifiedDate":"2021-08-14"},{"lineNumber":45,"author":{"gitId":"junghon3709"},"content":"                p \u003d stringUtils.removeBackAndFrontSpaces(array.get(2));","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"junghon3709"},"content":"            } catch (StringIndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"junghon3709"},"content":"                throw new TigerEmptyStringException(\"ToDo priority\");","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"junghon3709"},"content":"            }","lastModifiedDate":"2021-08-14"},{"lineNumber":49,"author":{"gitId":"junghon3709"},"content":"            this.priority \u003d Priority.getPriorityFromLetter(p);","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"junghon3709"},"content":"            if (this.priority.equals(Priority.INVALID)) {","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"junghon3709"},"content":"                throw new TigerInvalidArgumentException(p, \"ToDo priority\");","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"junghon3709"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"junghon3709"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"junghon3709"},"content":"        // task description","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"junghon3709"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"junghon3709"},"content":"            this.todo \u003d stringUtils.removeBackAndFrontSpaces(array.get(1));","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"junghon3709"},"content":"        } catch (StringIndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-14"},{"lineNumber":58,"author":{"gitId":"junghon3709"},"content":"            throw new TigerEmptyStringException(\"ToDo description\");","lastModifiedDate":"2021-08-21"},{"lineNumber":59,"author":{"gitId":"junghon3709"},"content":"        }","lastModifiedDate":"2021-08-14"},{"lineNumber":60,"author":{"gitId":"junghon3709"},"content":"        this.todo \u003d stringUtils.capitaliseFirstLetter(this.todo);","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":62,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":63,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":64,"author":{"gitId":"junghon3709"},"content":"     * Gets the task description.","lastModifiedDate":"2021-08-28"},{"lineNumber":65,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":66,"author":{"gitId":"junghon3709"},"content":"     * @return the task description.","lastModifiedDate":"2021-08-28"},{"lineNumber":67,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":68,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":69,"author":{"gitId":"junghon3709"},"content":"    public String getTodo() {","lastModifiedDate":"2021-08-23"},{"lineNumber":70,"author":{"gitId":"junghon3709"},"content":"        return this.todo;","lastModifiedDate":"2021-08-23"},{"lineNumber":71,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":72,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":73,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":74,"author":{"gitId":"junghon3709"},"content":"     * Gets the priority of the task.","lastModifiedDate":"2021-08-28"},{"lineNumber":75,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":76,"author":{"gitId":"junghon3709"},"content":"     * @return the priority of the task.","lastModifiedDate":"2021-08-28"},{"lineNumber":77,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":78,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":79,"author":{"gitId":"junghon3709"},"content":"    public Priority getPriority() {","lastModifiedDate":"2021-08-25"},{"lineNumber":80,"author":{"gitId":"junghon3709"},"content":"        return this.priority;","lastModifiedDate":"2021-08-25"},{"lineNumber":81,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":82,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":83,"author":{"gitId":"junghon3709"},"content":"}","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"junghon3709":83}},{"path":"src/main/java/tiger/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"junghon3709"},"content":"package tiger.storage;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"junghon3709"},"content":"import java.io.File;","lastModifiedDate":"2021-08-21"},{"lineNumber":4,"author":{"gitId":"junghon3709"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"junghon3709"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"junghon3709"},"content":"import java.nio.charset.StandardCharsets;","lastModifiedDate":"2021-08-21"},{"lineNumber":7,"author":{"gitId":"junghon3709"},"content":"import java.nio.file.Files;","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"junghon3709"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2021-08-21"},{"lineNumber":9,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"junghon3709"},"content":"import tiger.components.TaskList;","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"junghon3709"},"content":"import tiger.exceptions.storage.TigerStorageInitException;","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"junghon3709"},"content":"import tiger.exceptions.storage.TigerStorageLoadException;","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"junghon3709"},"content":"import tiger.exceptions.storage.TigerStorageSaveException;","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"junghon3709"},"content":"public class Storage {","lastModifiedDate":"2021-08-21"},{"lineNumber":18,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":19,"author":{"gitId":"junghon3709"},"content":"    public static final String FILE_PATH \u003d \"./data/Tiger.txt\";","lastModifiedDate":"2021-08-21"},{"lineNumber":20,"author":{"gitId":"junghon3709"},"content":"    public static final String DIRECTORY_PATH \u003d \"./data/\";","lastModifiedDate":"2021-08-21"},{"lineNumber":21,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":22,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"junghon3709"},"content":"     * Makes the storage text file is not present.","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"junghon3709"},"content":"     * @throws TigerStorageInitException if there is some {@code IOException}.","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"junghon3709"},"content":"    public static void makeFileIfNotPresent() throws TigerStorageInitException {","lastModifiedDate":"2021-08-21"},{"lineNumber":29,"author":{"gitId":"junghon3709"},"content":"        new File(DIRECTORY_PATH).mkdir();","lastModifiedDate":"2021-08-21"},{"lineNumber":30,"author":{"gitId":"junghon3709"},"content":"        File file \u003d new File(FILE_PATH);","lastModifiedDate":"2021-08-21"},{"lineNumber":31,"author":{"gitId":"junghon3709"},"content":"        if (!file.exists()) {","lastModifiedDate":"2021-08-21"},{"lineNumber":32,"author":{"gitId":"junghon3709"},"content":"            try {","lastModifiedDate":"2021-08-21"},{"lineNumber":33,"author":{"gitId":"junghon3709"},"content":"                file.createNewFile();","lastModifiedDate":"2021-08-21"},{"lineNumber":34,"author":{"gitId":"junghon3709"},"content":"            } catch (IOException e) {","lastModifiedDate":"2021-08-21"},{"lineNumber":35,"author":{"gitId":"junghon3709"},"content":"                // hopefully it will never reach this line","lastModifiedDate":"2021-08-21"},{"lineNumber":36,"author":{"gitId":"junghon3709"},"content":"                throw new TigerStorageInitException();","lastModifiedDate":"2021-09-03"},{"lineNumber":37,"author":{"gitId":"junghon3709"},"content":"            }","lastModifiedDate":"2021-08-21"},{"lineNumber":38,"author":{"gitId":"junghon3709"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":39,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":40,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":41,"author":{"gitId":"junghon3709"},"content":"    private static void writeToFile(String filePath, String textToAdd) throws TigerStorageSaveException {","lastModifiedDate":"2021-08-21"},{"lineNumber":42,"author":{"gitId":"junghon3709"},"content":"        // adapted from: https://nus-cs2103-ay2122s1.github.io/website/schedule/week3/","lastModifiedDate":"2021-08-28"},{"lineNumber":43,"author":{"gitId":"junghon3709"},"content":"        try {","lastModifiedDate":"2021-08-21"},{"lineNumber":44,"author":{"gitId":"junghon3709"},"content":"            FileWriter fw \u003d new FileWriter(filePath);","lastModifiedDate":"2021-08-21"},{"lineNumber":45,"author":{"gitId":"junghon3709"},"content":"            fw.write(textToAdd);","lastModifiedDate":"2021-08-21"},{"lineNumber":46,"author":{"gitId":"junghon3709"},"content":"            fw.close();","lastModifiedDate":"2021-08-21"},{"lineNumber":47,"author":{"gitId":"junghon3709"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-21"},{"lineNumber":48,"author":{"gitId":"junghon3709"},"content":"            throw new TigerStorageSaveException();","lastModifiedDate":"2021-09-03"},{"lineNumber":49,"author":{"gitId":"junghon3709"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":50,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":51,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":52,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":53,"author":{"gitId":"junghon3709"},"content":"     * Saves {@code TaskList} into the storage file.","lastModifiedDate":"2021-08-22"},{"lineNumber":54,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":55,"author":{"gitId":"junghon3709"},"content":"     * @param taskList a {@code TaskList} object to be saved.","lastModifiedDate":"2021-08-22"},{"lineNumber":56,"author":{"gitId":"junghon3709"},"content":"     * @throws TigerStorageSaveException if there is some {@code IOException}.","lastModifiedDate":"2021-08-22"},{"lineNumber":57,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":58,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":59,"author":{"gitId":"junghon3709"},"content":"    public static void save(TaskList taskList) throws TigerStorageSaveException {","lastModifiedDate":"2021-08-21"},{"lineNumber":60,"author":{"gitId":"junghon3709"},"content":"        String textToAdd \u003d taskList.getStorageRepresentation();","lastModifiedDate":"2021-08-21"},{"lineNumber":61,"author":{"gitId":"junghon3709"},"content":"        writeToFile(FILE_PATH, textToAdd);","lastModifiedDate":"2021-08-21"},{"lineNumber":62,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":63,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":64,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":65,"author":{"gitId":"junghon3709"},"content":"     * Loads {@code TaskList} from the storage file.","lastModifiedDate":"2021-08-22"},{"lineNumber":66,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":67,"author":{"gitId":"junghon3709"},"content":"     * @return a new {@code TaskList}.","lastModifiedDate":"2021-08-22"},{"lineNumber":68,"author":{"gitId":"junghon3709"},"content":"     * @throws TigerStorageLoadException if the storage file has been corrupted in some way,","lastModifiedDate":"2021-08-22"},{"lineNumber":69,"author":{"gitId":"junghon3709"},"content":"     *                                   or if there is some {@code IOException}.","lastModifiedDate":"2021-08-22"},{"lineNumber":70,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":71,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":72,"author":{"gitId":"junghon3709"},"content":"    public static TaskList load() throws TigerStorageLoadException {","lastModifiedDate":"2021-08-21"},{"lineNumber":73,"author":{"gitId":"junghon3709"},"content":"        try {","lastModifiedDate":"2021-08-21"},{"lineNumber":74,"author":{"gitId":"junghon3709"},"content":"            String textToParse \u003d Files.readString(Paths.get(FILE_PATH), StandardCharsets.US_ASCII);","lastModifiedDate":"2021-08-21"},{"lineNumber":75,"author":{"gitId":"junghon3709"},"content":"            return TaskList.getTaskListFromStringRepresentation(textToParse);","lastModifiedDate":"2021-08-21"},{"lineNumber":76,"author":{"gitId":"junghon3709"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-21"},{"lineNumber":77,"author":{"gitId":"junghon3709"},"content":"            throw new TigerStorageLoadException();","lastModifiedDate":"2021-09-03"},{"lineNumber":78,"author":{"gitId":"junghon3709"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":79,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":80,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":81,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":82,"author":{"gitId":"junghon3709"},"content":"     * Loads a subset of {@code TaskList} from what data can be recovered from the storage file.","lastModifiedDate":"2021-08-22"},{"lineNumber":83,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":84,"author":{"gitId":"junghon3709"},"content":"     * @return a new {@code TaskList}.","lastModifiedDate":"2021-08-22"},{"lineNumber":85,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":86,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":87,"author":{"gitId":"junghon3709"},"content":"    public static TaskList partialLoad() {","lastModifiedDate":"2021-08-21"},{"lineNumber":88,"author":{"gitId":"junghon3709"},"content":"        try {","lastModifiedDate":"2021-08-23"},{"lineNumber":89,"author":{"gitId":"junghon3709"},"content":"            String textToParse \u003d Files.readString(Paths.get(FILE_PATH), StandardCharsets.US_ASCII);","lastModifiedDate":"2021-08-23"},{"lineNumber":90,"author":{"gitId":"junghon3709"},"content":"            return TaskList.getPartialTaskListFromStringRepresentation(textToParse);","lastModifiedDate":"2021-08-23"},{"lineNumber":91,"author":{"gitId":"junghon3709"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":92,"author":{"gitId":"junghon3709"},"content":"            throw new TigerStorageLoadException();","lastModifiedDate":"2021-09-03"},{"lineNumber":93,"author":{"gitId":"junghon3709"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":94,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":95,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":96,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":97,"author":{"gitId":"junghon3709"},"content":"     * Wipes the storage file.","lastModifiedDate":"2021-08-22"},{"lineNumber":98,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":99,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":100,"author":{"gitId":"junghon3709"},"content":"    public static void wipeStorage() {","lastModifiedDate":"2021-08-21"},{"lineNumber":101,"author":{"gitId":"junghon3709"},"content":"        writeToFile(FILE_PATH, \"\");","lastModifiedDate":"2021-08-21"},{"lineNumber":102,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":103,"author":{"gitId":"junghon3709"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"junghon3709":103}},{"path":"src/main/java/tiger/utils/CustomDate.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"junghon3709"},"content":"package tiger.utils;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":4,"author":{"gitId":"junghon3709"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"junghon3709"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":7,"author":{"gitId":"junghon3709"},"content":"/**","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"junghon3709"},"content":" * The {@code CustomDate} class represents possible input dates that the user","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"junghon3709"},"content":" * wishes to key in. A date, {@code localDate}, is necessary, however a","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"junghon3709"},"content":" *","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"junghon3709"},"content":" * {@code localTime} may not be necessary, in the case for all day tasks.","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"junghon3709"},"content":" * This is indicated by a boolean variable {@code hasTime}.","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"junghon3709"},"content":" */","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"junghon3709"},"content":"public class CustomDate {","lastModifiedDate":"2021-08-21"},{"lineNumber":16,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":17,"author":{"gitId":"junghon3709"},"content":"    private LocalDate localDate;","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"junghon3709"},"content":"    private LocalTime localTime;","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"junghon3709"},"content":"    private boolean hasTime;","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":21,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"junghon3709"},"content":"     * Constructor for the {@code CustomDate} class.","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"junghon3709"},"content":"     * @param localDate Date to be added.","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"junghon3709"},"content":"     * @param localTime Time to be added.","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"junghon3709"},"content":"     * @param hasTime Whether the user wants to have a specified time.","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"junghon3709"},"content":"    public CustomDate(LocalDate localDate, LocalTime localTime, boolean hasTime) {","lastModifiedDate":"2021-08-21"},{"lineNumber":30,"author":{"gitId":"junghon3709"},"content":"        this.localDate \u003d localDate;","lastModifiedDate":"2021-08-21"},{"lineNumber":31,"author":{"gitId":"junghon3709"},"content":"        this.localTime \u003d localTime;","lastModifiedDate":"2021-08-21"},{"lineNumber":32,"author":{"gitId":"junghon3709"},"content":"        this.hasTime \u003d hasTime;","lastModifiedDate":"2021-08-21"},{"lineNumber":33,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":34,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":35,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"junghon3709"},"content":"     * Returns a string representation of {@code CustomDate}.","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"junghon3709"},"content":"     * @return the string representation of {@code CustomDate}.","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"junghon3709"},"content":"    @Override","lastModifiedDate":"2021-08-21"},{"lineNumber":41,"author":{"gitId":"junghon3709"},"content":"    public String toString() {","lastModifiedDate":"2021-08-21"},{"lineNumber":42,"author":{"gitId":"junghon3709"},"content":"        if (hasTime) {","lastModifiedDate":"2021-08-21"},{"lineNumber":43,"author":{"gitId":"junghon3709"},"content":"            return String.format(\"%s %s\", this.localDate.toString(), this.localTime.toString());","lastModifiedDate":"2021-08-21"},{"lineNumber":44,"author":{"gitId":"junghon3709"},"content":"        } else {","lastModifiedDate":"2021-08-21"},{"lineNumber":45,"author":{"gitId":"junghon3709"},"content":"            return String.format(\"%s\", this.localDate.toString());","lastModifiedDate":"2021-08-21"},{"lineNumber":46,"author":{"gitId":"junghon3709"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":47,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":48,"author":{"gitId":"junghon3709"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"junghon3709":48}},{"path":"src/main/java/tiger/utils/DateStringConverter.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"junghon3709"},"content":"package tiger.utils;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"junghon3709"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-21"},{"lineNumber":4,"author":{"gitId":"junghon3709"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"junghon3709"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"junghon3709"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-08-21"},{"lineNumber":7,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"junghon3709"},"content":"import tiger.exceptions.inputs.TigerDateParsingException;","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"junghon3709"},"content":"public class DateStringConverter {","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"junghon3709"},"content":"     * Takes in a string representation of the date and converts it to a","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"junghon3709"},"content":"     * {@code CustomDate} object. If an input day is not given, the function","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"junghon3709"},"content":"     * assumes it to be today.","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"junghon3709"},"content":"     * @param input String Represention of Date.","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"junghon3709"},"content":"     * @return The corresponding {@code CustomDate} object.","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"junghon3709"},"content":"     * @throws TigerDateParsingException if the date is not in the format","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"junghon3709"},"content":"     * specified.","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"junghon3709"},"content":"    public CustomDate getDateFromString(String input) throws TigerDateParsingException {","lastModifiedDate":"2021-08-21"},{"lineNumber":24,"author":{"gitId":"junghon3709"},"content":"        String editedInput \u003d new StringUtils().removeBackAndFrontSpaces(input);","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"junghon3709"},"content":"        String[] array \u003d editedInput.split(\" \");","lastModifiedDate":"2021-08-21"},{"lineNumber":26,"author":{"gitId":"junghon3709"},"content":"        try {","lastModifiedDate":"2021-08-21"},{"lineNumber":27,"author":{"gitId":"junghon3709"},"content":"            assert (array.length \u003c\u003d 2);","lastModifiedDate":"2021-08-21"},{"lineNumber":28,"author":{"gitId":"junghon3709"},"content":"            if (array.length \u003d\u003d 1) {","lastModifiedDate":"2021-08-21"},{"lineNumber":29,"author":{"gitId":"junghon3709"},"content":"                // means that the user has only inputted the date or the time, but not both","lastModifiedDate":"2021-08-21"},{"lineNumber":30,"author":{"gitId":"junghon3709"},"content":"                assert(array[0].contains(\":\") || array[0].contains(\"-\"));","lastModifiedDate":"2021-08-21"},{"lineNumber":31,"author":{"gitId":"junghon3709"},"content":"                // TODO: add support for am, pm","lastModifiedDate":"2021-08-21"},{"lineNumber":32,"author":{"gitId":"junghon3709"},"content":"                // TODO; add support for other date formats: ie 2021/12/21","lastModifiedDate":"2021-08-21"},{"lineNumber":33,"author":{"gitId":"junghon3709"},"content":"                if (array[0].contains(\"-\")) {","lastModifiedDate":"2021-08-21"},{"lineNumber":34,"author":{"gitId":"junghon3709"},"content":"                    // means the first entry is the date","lastModifiedDate":"2021-08-21"},{"lineNumber":35,"author":{"gitId":"junghon3709"},"content":"                    String dateString \u003d new StringUtils().removeBackAndFrontSpaces(array[0]);","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"junghon3709"},"content":"                    LocalDate date \u003d LocalDate.from(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\").parse(dateString));","lastModifiedDate":"2021-08-21"},{"lineNumber":37,"author":{"gitId":"junghon3709"},"content":"                    LocalTime time \u003d LocalTime.from(DateTimeFormatter.ofPattern(\"HH:mm\").parse(\"00:00\"));","lastModifiedDate":"2021-08-21"},{"lineNumber":38,"author":{"gitId":"junghon3709"},"content":"                    return new CustomDate(date, time, false);","lastModifiedDate":"2021-08-21"},{"lineNumber":39,"author":{"gitId":"junghon3709"},"content":"                } else {","lastModifiedDate":"2021-08-21"},{"lineNumber":40,"author":{"gitId":"junghon3709"},"content":"                    // assume user wants date to be today,","lastModifiedDate":"2021-08-21"},{"lineNumber":41,"author":{"gitId":"junghon3709"},"content":"                    LocalDate date \u003d LocalDate.now();","lastModifiedDate":"2021-08-21"},{"lineNumber":42,"author":{"gitId":"junghon3709"},"content":"                    String timeString \u003d new StringUtils().removeBackAndFrontSpaces(array[0]);","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"junghon3709"},"content":"                    LocalTime time \u003d LocalTime.from(DateTimeFormatter.ofPattern(\"HH:mm\").parse(timeString));","lastModifiedDate":"2021-08-21"},{"lineNumber":44,"author":{"gitId":"junghon3709"},"content":"                    return new CustomDate(date, time, true);","lastModifiedDate":"2021-08-21"},{"lineNumber":45,"author":{"gitId":"junghon3709"},"content":"                }","lastModifiedDate":"2021-08-21"},{"lineNumber":46,"author":{"gitId":"junghon3709"},"content":"            } else {","lastModifiedDate":"2021-08-21"},{"lineNumber":47,"author":{"gitId":"junghon3709"},"content":"                // means the user input is in the format dd/MM/yyyy HH:mm","lastModifiedDate":"2021-08-21"},{"lineNumber":48,"author":{"gitId":"junghon3709"},"content":"                String dateString \u003d new StringUtils().removeBackAndFrontSpaces(array[0]);","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"junghon3709"},"content":"                String timeString \u003d new StringUtils().removeBackAndFrontSpaces(array[1]);","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"junghon3709"},"content":"                LocalDate date \u003d LocalDate.from(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\").parse(dateString));","lastModifiedDate":"2021-08-21"},{"lineNumber":51,"author":{"gitId":"junghon3709"},"content":"                LocalTime time \u003d LocalTime.from(DateTimeFormatter.ofPattern(\"HH:mm\").parse(timeString));","lastModifiedDate":"2021-08-21"},{"lineNumber":52,"author":{"gitId":"junghon3709"},"content":"                return new CustomDate(date, time, true);","lastModifiedDate":"2021-08-21"},{"lineNumber":53,"author":{"gitId":"junghon3709"},"content":"            }","lastModifiedDate":"2021-08-21"},{"lineNumber":54,"author":{"gitId":"junghon3709"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-21"},{"lineNumber":55,"author":{"gitId":"junghon3709"},"content":"            throw new TigerDateParsingException();","lastModifiedDate":"2021-09-03"},{"lineNumber":56,"author":{"gitId":"junghon3709"},"content":"        } catch (AssertionError e) {","lastModifiedDate":"2021-08-21"},{"lineNumber":57,"author":{"gitId":"junghon3709"},"content":"            throw new TigerDateParsingException();","lastModifiedDate":"2021-09-03"},{"lineNumber":58,"author":{"gitId":"junghon3709"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":59,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":60,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":61,"author":{"gitId":"junghon3709"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"junghon3709":61}},{"path":"src/main/java/tiger/utils/StringUtils.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"junghon3709"},"content":"package tiger.utils;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"junghon3709"},"content":"public class StringUtils {","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"junghon3709"},"content":"     * Removes trailing back spaces on input string.","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"junghon3709"},"content":"     * @param input The input string.","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"junghon3709"},"content":"     * @return A new string with the trailing spaces cut off.","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"junghon3709"},"content":"    public String removeLastSpaces(String input) {","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"junghon3709"},"content":"        int last \u003d input.length() - 1;","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"junghon3709"},"content":"        while (input.charAt(last) \u003d\u003d \u0027 \u0027) {","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"junghon3709"},"content":"            last -\u003d 1;","lastModifiedDate":"2021-08-21"},{"lineNumber":16,"author":{"gitId":"junghon3709"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":17,"author":{"gitId":"junghon3709"},"content":"        return input.substring(0, last + 1);","lastModifiedDate":"2021-08-21"},{"lineNumber":18,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":19,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":20,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"junghon3709"},"content":"     * Removes trailing front spaces on input string.","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"junghon3709"},"content":"     * @param input The input string.","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"junghon3709"},"content":"     * @return A new string with the trailing spaces cut off.","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"junghon3709"},"content":"    public String removeFrontSpaces(String input) {","lastModifiedDate":"2021-08-21"},{"lineNumber":28,"author":{"gitId":"junghon3709"},"content":"        String reversed \u003d new StringBuilder(input).reverse().toString();","lastModifiedDate":"2021-08-21"},{"lineNumber":29,"author":{"gitId":"junghon3709"},"content":"        String cut \u003d this.removeLastSpaces(reversed);","lastModifiedDate":"2021-08-21"},{"lineNumber":30,"author":{"gitId":"junghon3709"},"content":"        String reversedCut \u003d new StringBuilder(cut).reverse().toString();","lastModifiedDate":"2021-08-21"},{"lineNumber":31,"author":{"gitId":"junghon3709"},"content":"        return reversedCut;","lastModifiedDate":"2021-08-21"},{"lineNumber":32,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":33,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":34,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":35,"author":{"gitId":"junghon3709"},"content":"     * Removes trailing back and front spaces on input string.","lastModifiedDate":"2021-08-28"},{"lineNumber":36,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":37,"author":{"gitId":"junghon3709"},"content":"     * @param input The input string.","lastModifiedDate":"2021-08-28"},{"lineNumber":38,"author":{"gitId":"junghon3709"},"content":"     * @return A new string with the trailing spaces cut off.","lastModifiedDate":"2021-08-28"},{"lineNumber":39,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":40,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":41,"author":{"gitId":"junghon3709"},"content":"    public String removeBackAndFrontSpaces(String input) {","lastModifiedDate":"2021-08-21"},{"lineNumber":42,"author":{"gitId":"junghon3709"},"content":"        String cutBack \u003d this.removeLastSpaces(input);","lastModifiedDate":"2021-08-21"},{"lineNumber":43,"author":{"gitId":"junghon3709"},"content":"        String cutFront \u003d this.removeFrontSpaces(cutBack);","lastModifiedDate":"2021-08-21"},{"lineNumber":44,"author":{"gitId":"junghon3709"},"content":"        return cutFront;","lastModifiedDate":"2021-08-21"},{"lineNumber":45,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":46,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"junghon3709"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":48,"author":{"gitId":"junghon3709"},"content":"     * Capitalises the first letter.","lastModifiedDate":"2021-08-28"},{"lineNumber":49,"author":{"gitId":"junghon3709"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":50,"author":{"gitId":"junghon3709"},"content":"     * @param input The input string.","lastModifiedDate":"2021-08-28"},{"lineNumber":51,"author":{"gitId":"junghon3709"},"content":"     * @return A new string with the first letter capitalised.","lastModifiedDate":"2021-08-28"},{"lineNumber":52,"author":{"gitId":"junghon3709"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":53,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":54,"author":{"gitId":"junghon3709"},"content":"    public String capitaliseFirstLetter(String input) {","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"junghon3709"},"content":"        return input.substring(0, 1).toUpperCase() + input.substring(1);","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"junghon3709"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"junghon3709":57}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"junghon3709"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"junghon3709"},"content":"\u003c?import javafx.geometry.*?\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"junghon3709"},"content":"\u003c?import javafx.scene.control.*?\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"junghon3709"},"content":"\u003c?import javafx.scene.image.*?\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"junghon3709"},"content":"\u003c?import javafx.scene.layout.*?\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"junghon3709"},"content":"\u003c?import javafx.scene.text.*?\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"junghon3709"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" depthTest\u003d\"ENABLE\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"299.0\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"junghon3709"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"junghon3709"},"content":"        \u003cLabel fx:id\u003d\"dialog\" minHeight\u003d\"-Infinity\" minWidth\u003d\"270.0\" style\u003d\"-fx-background-color: aquamarine; -fx-background-radius: 7px;\" text\u003d\"Label\" translateX\u003d\"10.0\" wrapText\u003d\"true\"\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"junghon3709"},"content":"\u003c!--             \u003cfont\u003e--\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"junghon3709"},"content":"\u003c!--                \u003cFont name\u003d\"Victor Mono Regular\" size\u003d\"14.0\" /\u003e--\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"junghon3709"},"content":"\u003c!--             \u003c/font\u003e--\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"junghon3709"},"content":"             \u003cpadding\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"junghon3709"},"content":"                \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"junghon3709"},"content":"             \u003c/padding\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"junghon3709"},"content":"            \u003cHBox.margin\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"junghon3709"},"content":"                \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"junghon3709"},"content":"            \u003c/HBox.margin\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"junghon3709"},"content":"        \u003c/Label\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"junghon3709"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"150.0\" fitWidth\u003d\"150.0\" pickOnBounds\u003d\"true\" translateX\u003d\"10.0\" /\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"junghon3709"},"content":"    \u003c/children\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"junghon3709"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"junghon3709"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"15.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"junghon3709"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"junghon3709"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":28,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"junghon3709":28}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"junghon3709"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"junghon3709"},"content":"\u003c?import javafx.scene.control.*?\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"junghon3709"},"content":"\u003c?import javafx.scene.layout.*?\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"junghon3709"},"content":"\u003c?import javafx.scene.text.*?\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"junghon3709"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"800.0\" prefWidth\u003d\"600.0\" style\u003d\"-fx-background-color: #424141;\" xmlns\u003d\"http://javafx.com/javafx/11.0.2\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"junghon3709"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"junghon3709"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutX\u003d\"7.0\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"35.0\" prefWidth\u003d\"473.0\" style\u003d\"-fx-background-color: azure; -fx-border-color: aquamarine; -fx-border-radius: 7px; -fx-background-radius: 7px;\" AnchorPane.bottomAnchor\u003d\"5.0\" AnchorPane.leftAnchor\u003d\"7.0\" AnchorPane.rightAnchor\u003d\"120.0\" AnchorPane.topAnchor\u003d\"760.0\"\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"junghon3709"},"content":"\u003c!--         \u003cfont\u003e--\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"junghon3709"},"content":"\u003c!--            \u003cFont name\u003d\"Victor Mono Medium\" size\u003d\"14.0\" /\u003e--\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"junghon3709"},"content":"\u003c!--         \u003c/font\u003e--\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"junghon3709"},"content":"        \u003c/TextField\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"junghon3709"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" style\u003d\"-fx-background-color: aquamarine; -fx-background-radius: 7px;\" text\u003d\"Send\" AnchorPane.bottomAnchor\u003d\"6.0\" AnchorPane.leftAnchor\u003d\"485.0\" AnchorPane.rightAnchor\u003d\"5.0\" AnchorPane.topAnchor\u003d\"759.0\"\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"junghon3709"},"content":"\u003c!--         \u003cfont\u003e--\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"junghon3709"},"content":"\u003c!--            \u003cFont name\u003d\"Victor Mono Medium\" size\u003d\"14.0\" /\u003e--\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"junghon3709"},"content":"\u003c!--         \u003c/font\u003e--\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"junghon3709"},"content":"        \u003c/Button\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"junghon3709"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"600.0\" style\u003d\"-fx-background-color: #424141;\" vvalue\u003d\"1.0\" AnchorPane.bottomAnchor\u003d\"50.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"junghon3709"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"junghon3709"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"750.0\" prefWidth\u003d\"583.0\" style\u003d\"-fx-background-color: #424141;\" /\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"junghon3709"},"content":"            \u003c/content\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"junghon3709"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"junghon3709"},"content":"    \u003c/children\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"junghon3709"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"junghon3709":25}},{"path":"src/test/java/tiger/parser/DeadLineParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"junghon3709"},"content":"package tiger.parser;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"junghon3709"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"junghon3709"},"content":"import tiger.constants.Priority;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"junghon3709"},"content":"import tiger.exceptions.TigerException;","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"junghon3709"},"content":"import tiger.exceptions.inputs.TigerEmptyStringException;","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"junghon3709"},"content":"import tiger.exceptions.inputs.TigerInvalidArgumentException;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"junghon3709"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"junghon3709"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"junghon3709"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"junghon3709"},"content":"public class DeadLineParserTest {","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"junghon3709"},"content":"    public void deadLineParser_deadLineWithDescriptionAndTime_checkToDo() {","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"junghon3709"},"content":"        // we assume time input is correct","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"junghon3709"},"content":"        DeadLineParser deadLineParser \u003d new DeadLineParser(\"dateline Q /by 2020-11-21 08:35\");","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"junghon3709"},"content":"        deadLineParser.parse();","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"junghon3709"},"content":"        assertEquals(\"Q\", deadLineParser.getTodo());","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"junghon3709"},"content":"    public void deadLineParser_deadLineWithDescriptionAndTime_checkTime() {","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"junghon3709"},"content":"        DeadLineParser deadLineParser \u003d new DeadLineParser(\"dateline Q /by 2020-11-21 08:35\");","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"junghon3709"},"content":"        deadLineParser.parse();","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"junghon3709"},"content":"        assertEquals(\"2020-11-21 08:35\", deadLineParser.getDate().toString());","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"junghon3709"},"content":"    public void deadLineParser_spaces_checkToDo() {","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"junghon3709"},"content":"        DeadLineParser deadLineParser \u003d new DeadLineParser(\"  dateline Q /by 2020-11-21 08:35  \");","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"junghon3709"},"content":"        deadLineParser.parse();","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"junghon3709"},"content":"        assertEquals(\"Q\", deadLineParser.getTodo());","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"junghon3709"},"content":"    public void deadLineParser_spaces_checkTime() {","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"junghon3709"},"content":"        DeadLineParser deadLineParser \u003d new DeadLineParser(\"  dateline Q /by 2020-11-21 08:35  \");","lastModifiedDate":"2021-08-23"},{"lineNumber":39,"author":{"gitId":"junghon3709"},"content":"        deadLineParser.parse();","lastModifiedDate":"2021-08-23"},{"lineNumber":40,"author":{"gitId":"junghon3709"},"content":"        assertEquals(\"2020-11-21 08:35\", deadLineParser.getDate().toString());","lastModifiedDate":"2021-08-23"},{"lineNumber":41,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"junghon3709"},"content":"    public void deadLineParser_missingArgumentsDescription_failure() {","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"junghon3709"},"content":"        TigerException thrown \u003d assertThrows(TigerEmptyStringException.class, () -\u003e {","lastModifiedDate":"2021-08-22"},{"lineNumber":47,"author":{"gitId":"junghon3709"},"content":"            new DeadLineParser(\"dateline /by 2020-11-21 08:35\").parse();","lastModifiedDate":"2021-08-23"},{"lineNumber":48,"author":{"gitId":"junghon3709"},"content":"        });","lastModifiedDate":"2021-08-22"},{"lineNumber":49,"author":{"gitId":"junghon3709"},"content":"        assertTrue(thrown.toString().contains(\"Deadline description property cannot be empty.\\nPlease ensure you key \" +","lastModifiedDate":"2021-08-23"},{"lineNumber":50,"author":{"gitId":"junghon3709"},"content":"                \"in the command in the format specified.\"));","lastModifiedDate":"2021-08-23"},{"lineNumber":51,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":52,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":53,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":54,"author":{"gitId":"junghon3709"},"content":"    public void deadLineParser_missingArgumentsDateTime_failure() {","lastModifiedDate":"2021-08-22"},{"lineNumber":55,"author":{"gitId":"junghon3709"},"content":"        TigerException thrown \u003d assertThrows(TigerEmptyStringException.class, () -\u003e {","lastModifiedDate":"2021-08-22"},{"lineNumber":56,"author":{"gitId":"junghon3709"},"content":"            new DeadLineParser(\"dateline QQ /by\").parse();","lastModifiedDate":"2021-08-23"},{"lineNumber":57,"author":{"gitId":"junghon3709"},"content":"        });","lastModifiedDate":"2021-08-22"},{"lineNumber":58,"author":{"gitId":"junghon3709"},"content":"        System.out.println(thrown.toString());","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"junghon3709"},"content":"        assertTrue(thrown.toString().contains(\"Deadline date property cannot be empty.\\nPlease ensure you key \" +","lastModifiedDate":"2021-08-23"},{"lineNumber":60,"author":{"gitId":"junghon3709"},"content":"                \"in the command in the format specified.\"));","lastModifiedDate":"2021-08-23"},{"lineNumber":61,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":62,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"junghon3709"},"content":"    public void dateParser_withPriority_success() {","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"junghon3709"},"content":"        DeadLineParser dateParser \u003d new DeadLineParser(\"deadline 4444 /by 15:24 /priority H\");","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"junghon3709"},"content":"        dateParser.parse();","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"junghon3709"},"content":"        assertEquals(\"4444\", dateParser.getTodo());","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"junghon3709"},"content":"        assertEquals(Priority.HIGH, dateParser.getPriority());","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"junghon3709"},"content":"    public void dateParser_withPriorityWithSpaces_success() {","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"junghon3709"},"content":"        DeadLineParser dateParser \u003d new DeadLineParser(\"deadline   44  44   /by 15:24 /priority H\");","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"junghon3709"},"content":"        dateParser.parse();","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"junghon3709"},"content":"        assertEquals(\"44  44\", dateParser.getTodo());","lastModifiedDate":"2021-08-25"},{"lineNumber":76,"author":{"gitId":"junghon3709"},"content":"        assertEquals(Priority.HIGH, dateParser.getPriority());","lastModifiedDate":"2021-08-25"},{"lineNumber":77,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":78,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":79,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":80,"author":{"gitId":"junghon3709"},"content":"    public void dateParser_multipleDeadlineSmall_success() {","lastModifiedDate":"2021-08-25"},{"lineNumber":81,"author":{"gitId":"junghon3709"},"content":"        // testing that the regrex actually selects only the first todo","lastModifiedDate":"2021-08-25"},{"lineNumber":82,"author":{"gitId":"junghon3709"},"content":"        DeadLineParser dateParser \u003d new DeadLineParser(\"deadline Deadline mop floor /by 14:25 /priority M\");","lastModifiedDate":"2021-08-25"},{"lineNumber":83,"author":{"gitId":"junghon3709"},"content":"        dateParser.parse();","lastModifiedDate":"2021-08-25"},{"lineNumber":84,"author":{"gitId":"junghon3709"},"content":"        assertEquals(\"Deadline mop floor\", dateParser.getTodo());","lastModifiedDate":"2021-08-25"},{"lineNumber":85,"author":{"gitId":"junghon3709"},"content":"        assertEquals(Priority.MEDIUM, dateParser.getPriority());","lastModifiedDate":"2021-08-25"},{"lineNumber":86,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":87,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":88,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":89,"author":{"gitId":"junghon3709"},"content":"    public void toDoParser_multipleTodoCaptial_success() {","lastModifiedDate":"2021-08-25"},{"lineNumber":90,"author":{"gitId":"junghon3709"},"content":"        // testing that the regrex actually selects only the first todo","lastModifiedDate":"2021-08-25"},{"lineNumber":91,"author":{"gitId":"junghon3709"},"content":"        DeadLineParser dateParser \u003d new DeadLineParser(\"deadline EVENT mop floor /by 14:25 /priority M\");","lastModifiedDate":"2021-08-25"},{"lineNumber":92,"author":{"gitId":"junghon3709"},"content":"        dateParser.parse();","lastModifiedDate":"2021-08-25"},{"lineNumber":93,"author":{"gitId":"junghon3709"},"content":"        assertEquals(\"EVENT mop floor\", dateParser.getTodo());","lastModifiedDate":"2021-08-25"},{"lineNumber":94,"author":{"gitId":"junghon3709"},"content":"        assertEquals(Priority.MEDIUM, dateParser.getPriority());","lastModifiedDate":"2021-08-25"},{"lineNumber":95,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":96,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":97,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":98,"author":{"gitId":"junghon3709"},"content":"    public void dateParser_noDescription_failure() {","lastModifiedDate":"2021-08-25"},{"lineNumber":99,"author":{"gitId":"junghon3709"},"content":"        TigerException thrown \u003d assertThrows(TigerEmptyStringException.class, () -\u003e {","lastModifiedDate":"2021-08-25"},{"lineNumber":100,"author":{"gitId":"junghon3709"},"content":"            new DeadLineParser(\"deadline \").parse();","lastModifiedDate":"2021-08-25"},{"lineNumber":101,"author":{"gitId":"junghon3709"},"content":"        });","lastModifiedDate":"2021-08-25"},{"lineNumber":102,"author":{"gitId":"junghon3709"},"content":"        assertTrue(thrown.toString().contains(\"Deadline description property cannot be empty.\\nPlease ensure you key in \" +","lastModifiedDate":"2021-08-25"},{"lineNumber":103,"author":{"gitId":"junghon3709"},"content":"                \"the command in the format specified.\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":104,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":105,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":106,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":107,"author":{"gitId":"junghon3709"},"content":"    public void dateParser_descriptionNoDate_failure() {","lastModifiedDate":"2021-08-25"},{"lineNumber":108,"author":{"gitId":"junghon3709"},"content":"        TigerException thrown \u003d assertThrows(TigerEmptyStringException.class, () -\u003e {","lastModifiedDate":"2021-08-25"},{"lineNumber":109,"author":{"gitId":"junghon3709"},"content":"            new DeadLineParser(\"deadline fish\").parse();","lastModifiedDate":"2021-08-25"},{"lineNumber":110,"author":{"gitId":"junghon3709"},"content":"        });","lastModifiedDate":"2021-08-25"},{"lineNumber":111,"author":{"gitId":"junghon3709"},"content":"        assertTrue(thrown.toString().contains(\"Deadline date property cannot be empty.\\nPlease ensure you key in \" +","lastModifiedDate":"2021-08-25"},{"lineNumber":112,"author":{"gitId":"junghon3709"},"content":"                \"the command in the format specified.\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":113,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":114,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":115,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":116,"author":{"gitId":"junghon3709"},"content":"    public void dateParser_descriptionNoDateWithPriority_failure() {","lastModifiedDate":"2021-08-25"},{"lineNumber":117,"author":{"gitId":"junghon3709"},"content":"        TigerException thrown \u003d assertThrows(TigerEmptyStringException.class, () -\u003e {","lastModifiedDate":"2021-08-25"},{"lineNumber":118,"author":{"gitId":"junghon3709"},"content":"            new DeadLineParser(\"deadline fish /by /priority H\").parse();","lastModifiedDate":"2021-08-25"},{"lineNumber":119,"author":{"gitId":"junghon3709"},"content":"        });","lastModifiedDate":"2021-08-25"},{"lineNumber":120,"author":{"gitId":"junghon3709"},"content":"        assertTrue(thrown.toString().contains(\"Deadline date property cannot be empty.\\nPlease ensure you key in \" +","lastModifiedDate":"2021-08-25"},{"lineNumber":121,"author":{"gitId":"junghon3709"},"content":"                \"the command in the format specified.\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":122,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":123,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":124,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":125,"author":{"gitId":"junghon3709"},"content":"    public void dateParser_descriptionEmptyWithDateAndPriority_failure() {","lastModifiedDate":"2021-08-25"},{"lineNumber":126,"author":{"gitId":"junghon3709"},"content":"        TigerException thrown \u003d assertThrows(TigerEmptyStringException.class, () -\u003e {","lastModifiedDate":"2021-08-25"},{"lineNumber":127,"author":{"gitId":"junghon3709"},"content":"            new DeadLineParser(\"deadline /by 15:24 /priority H\").parse();","lastModifiedDate":"2021-08-25"},{"lineNumber":128,"author":{"gitId":"junghon3709"},"content":"        });","lastModifiedDate":"2021-08-25"},{"lineNumber":129,"author":{"gitId":"junghon3709"},"content":"        assertTrue(thrown.toString().contains(\"Deadline description property cannot be empty.\\nPlease ensure you key in \" +","lastModifiedDate":"2021-08-25"},{"lineNumber":130,"author":{"gitId":"junghon3709"},"content":"                \"the command in the format specified.\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":131,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":132,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":133,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":134,"author":{"gitId":"junghon3709"},"content":"    public void dateParser_priorityEmptyWithDateAndDescription_failure() {","lastModifiedDate":"2021-08-25"},{"lineNumber":135,"author":{"gitId":"junghon3709"},"content":"        TigerException thrown \u003d assertThrows(TigerEmptyStringException.class, () -\u003e {","lastModifiedDate":"2021-08-25"},{"lineNumber":136,"author":{"gitId":"junghon3709"},"content":"            new DeadLineParser(\"deadline fa fa /by 15:24 /priority\").parse();","lastModifiedDate":"2021-08-25"},{"lineNumber":137,"author":{"gitId":"junghon3709"},"content":"        });","lastModifiedDate":"2021-08-25"},{"lineNumber":138,"author":{"gitId":"junghon3709"},"content":"        assertTrue(thrown.toString().contains(\"Deadline priority property cannot be empty.\\nPlease ensure you key in \" +","lastModifiedDate":"2021-08-25"},{"lineNumber":139,"author":{"gitId":"junghon3709"},"content":"                \"the command in the format specified.\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":140,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":141,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":142,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":143,"author":{"gitId":"junghon3709"},"content":"    public void dateParser_dateEmptyWithDescriptionAndDate_failure() {","lastModifiedDate":"2021-08-25"},{"lineNumber":144,"author":{"gitId":"junghon3709"},"content":"        TigerException thrown \u003d assertThrows(TigerEmptyStringException.class, () -\u003e {","lastModifiedDate":"2021-08-25"},{"lineNumber":145,"author":{"gitId":"junghon3709"},"content":"            new DeadLineParser(\"deadline fa fa /by  /priority H\").parse();","lastModifiedDate":"2021-08-25"},{"lineNumber":146,"author":{"gitId":"junghon3709"},"content":"        });","lastModifiedDate":"2021-08-25"},{"lineNumber":147,"author":{"gitId":"junghon3709"},"content":"        assertTrue(thrown.toString().contains(\"Deadline date property cannot be empty.\\nPlease ensure you key in \" +","lastModifiedDate":"2021-08-25"},{"lineNumber":148,"author":{"gitId":"junghon3709"},"content":"                \"the command in the format specified.\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":149,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":150,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":151,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":152,"author":{"gitId":"junghon3709"},"content":"    public void toDoParser_invalidPriorityArgument_failure() {","lastModifiedDate":"2021-08-25"},{"lineNumber":153,"author":{"gitId":"junghon3709"},"content":"        TigerException thrown \u003d assertThrows(TigerInvalidArgumentException.class, () -\u003e {","lastModifiedDate":"2021-08-25"},{"lineNumber":154,"author":{"gitId":"junghon3709"},"content":"            new DeadLineParser(\"deadline fa fa /by  /priority S\").parse();","lastModifiedDate":"2021-08-25"},{"lineNumber":155,"author":{"gitId":"junghon3709"},"content":"        });","lastModifiedDate":"2021-08-25"},{"lineNumber":156,"author":{"gitId":"junghon3709"},"content":"        assertTrue(thrown.toString().contains(\"S is not a valid argument for the Deadline priority command.\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":157,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":158,"author":{"gitId":"junghon3709"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"junghon3709":158}},{"path":"src/test/java/tiger/parser/DeleteParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"junghon3709"},"content":"package tiger.parser;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"junghon3709"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"junghon3709"},"content":"import tiger.exceptions.TigerException;","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"junghon3709"},"content":"import tiger.exceptions.inputs.TigerEmptyStringException;","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"junghon3709"},"content":"import tiger.exceptions.inputs.TigerInvalidArgumentException;","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"junghon3709"},"content":"import tiger.exceptions.inputs.TigerTooManyInputsException;","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"junghon3709"},"content":"import tiger.constants.Messages;","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"junghon3709"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"junghon3709"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"junghon3709"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"junghon3709"},"content":"public class DeleteParserTest {","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"junghon3709"},"content":"    public void deleteParser_deleteWithIndex_success() {","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"junghon3709"},"content":"        DeleteParser deleteParser \u003d new DeleteParser(\"delete 1\");","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"junghon3709"},"content":"        deleteParser.parse();","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"junghon3709"},"content":"        assertEquals(1, deleteParser.getIndex());","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"junghon3709"},"content":"    public void deleteParser_deleteWithIndexLarge_success() {","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"junghon3709"},"content":"        DeleteParser deleteParser \u003d new DeleteParser(\"delete 212\");","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"junghon3709"},"content":"        deleteParser.parse();","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"junghon3709"},"content":"        assertEquals(212, deleteParser.getIndex());","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"junghon3709"},"content":"    public void deleteParser_zero_failure() {","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"junghon3709"},"content":"        TigerException thrown \u003d assertThrows(TigerInvalidArgumentException.class, () -\u003e {","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"junghon3709"},"content":"            DeleteParser deleteParser \u003d new DeleteParser(\"delete 0\");","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"junghon3709"},"content":"            deleteParser.parse();","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"junghon3709"},"content":"        });","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"junghon3709"},"content":"        assertTrue(thrown.toString().contains(\"0 is not a valid argument \" +","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"junghon3709"},"content":"                \"for the Delete command.\"));","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"junghon3709"},"content":"    public void deleteParser_negative_failure() {","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"junghon3709"},"content":"        TigerException thrown \u003d assertThrows(TigerInvalidArgumentException.class, () -\u003e {","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"junghon3709"},"content":"            DeleteParser deleteParser \u003d new DeleteParser(\"delete -55\");","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"junghon3709"},"content":"            deleteParser.parse();","lastModifiedDate":"2021-08-23"},{"lineNumber":44,"author":{"gitId":"junghon3709"},"content":"        });","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"junghon3709"},"content":"        assertTrue(thrown.toString().contains(\"-55 is not a valid argument \" +","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"junghon3709"},"content":"                \"for the Delete command.\"));","lastModifiedDate":"2021-08-22"},{"lineNumber":47,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":48,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":49,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":50,"author":{"gitId":"junghon3709"},"content":"    public void deleteParser_decimal_failure() {","lastModifiedDate":"2021-08-22"},{"lineNumber":51,"author":{"gitId":"junghon3709"},"content":"        TigerException thrown \u003d assertThrows(TigerInvalidArgumentException.class, () -\u003e {","lastModifiedDate":"2021-08-22"},{"lineNumber":52,"author":{"gitId":"junghon3709"},"content":"            DeleteParser deleteParser \u003d new DeleteParser(\"delete 5.5\");","lastModifiedDate":"2021-08-22"},{"lineNumber":53,"author":{"gitId":"junghon3709"},"content":"            deleteParser.parse();","lastModifiedDate":"2021-08-23"},{"lineNumber":54,"author":{"gitId":"junghon3709"},"content":"        });","lastModifiedDate":"2021-08-22"},{"lineNumber":55,"author":{"gitId":"junghon3709"},"content":"        assertTrue(thrown.toString().contains(\"5.5 is not a valid argument \" +","lastModifiedDate":"2021-08-22"},{"lineNumber":56,"author":{"gitId":"junghon3709"},"content":"                \"for the Delete command.\"));","lastModifiedDate":"2021-08-22"},{"lineNumber":57,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":58,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":59,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":60,"author":{"gitId":"junghon3709"},"content":"    public void deleteParser_spaces_success() {","lastModifiedDate":"2021-08-22"},{"lineNumber":61,"author":{"gitId":"junghon3709"},"content":"        DeleteParser deleteParser \u003d new DeleteParser(\"  delete 5  \");","lastModifiedDate":"2021-08-23"},{"lineNumber":62,"author":{"gitId":"junghon3709"},"content":"        deleteParser.parse();","lastModifiedDate":"2021-08-23"},{"lineNumber":63,"author":{"gitId":"junghon3709"},"content":"        assertEquals(5, deleteParser.getIndex());","lastModifiedDate":"2021-08-23"},{"lineNumber":64,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":65,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":66,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":67,"author":{"gitId":"junghon3709"},"content":"    public void deleteParser_tooManyArguments_failure() {","lastModifiedDate":"2021-08-22"},{"lineNumber":68,"author":{"gitId":"junghon3709"},"content":"        TigerException thrown \u003d assertThrows(TigerTooManyInputsException.class, () -\u003e {","lastModifiedDate":"2021-08-22"},{"lineNumber":69,"author":{"gitId":"junghon3709"},"content":"            DeleteParser deleteParser \u003d new DeleteParser(\"delete 5 5555\");","lastModifiedDate":"2021-08-22"},{"lineNumber":70,"author":{"gitId":"junghon3709"},"content":"            deleteParser.parse();","lastModifiedDate":"2021-08-23"},{"lineNumber":71,"author":{"gitId":"junghon3709"},"content":"        });","lastModifiedDate":"2021-08-22"},{"lineNumber":72,"author":{"gitId":"junghon3709"},"content":"        assertTrue(thrown.toString().contains(Messages.EXCEPTION_INPUT_TOO_MANY_ARGUMENTS.getMessage()));","lastModifiedDate":"2021-08-22"},{"lineNumber":73,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":74,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":75,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":76,"author":{"gitId":"junghon3709"},"content":"    public void deleteParser_missingArguments_failure() {","lastModifiedDate":"2021-08-22"},{"lineNumber":77,"author":{"gitId":"junghon3709"},"content":"        TigerException thrown \u003d assertThrows(TigerEmptyStringException.class, () -\u003e {","lastModifiedDate":"2021-08-22"},{"lineNumber":78,"author":{"gitId":"junghon3709"},"content":"            DeleteParser deleteParser \u003d new DeleteParser(\"delete\");","lastModifiedDate":"2021-08-22"},{"lineNumber":79,"author":{"gitId":"junghon3709"},"content":"            deleteParser.parse();","lastModifiedDate":"2021-08-23"},{"lineNumber":80,"author":{"gitId":"junghon3709"},"content":"        });","lastModifiedDate":"2021-08-22"},{"lineNumber":81,"author":{"gitId":"junghon3709"},"content":"        assertTrue(thrown.toString().contains(\"Delete index property cannot be empty.\\nPlease ensure you key in the \" +","lastModifiedDate":"2021-08-23"},{"lineNumber":82,"author":{"gitId":"junghon3709"},"content":"                \"command in the format specified.\"));","lastModifiedDate":"2021-08-23"},{"lineNumber":83,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":84,"author":{"gitId":"junghon3709"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"junghon3709":84}},{"path":"src/test/java/tiger/parser/EventParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"junghon3709"},"content":"package tiger.parser;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"junghon3709"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"junghon3709"},"content":"import tiger.constants.Priority;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"junghon3709"},"content":"import tiger.exceptions.TigerException;","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"junghon3709"},"content":"import tiger.exceptions.inputs.TigerEmptyStringException;","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"junghon3709"},"content":"import tiger.exceptions.inputs.TigerInvalidArgumentException;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"junghon3709"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"junghon3709"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"junghon3709"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"junghon3709"},"content":"public class EventParserTest {","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"junghon3709"},"content":"    public void eventParser_eventWithDescriptionAndTime_checkToDo() {","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"junghon3709"},"content":"        // we assume time input is correct","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"junghon3709"},"content":"        EventParser eventParser \u003d new EventParser(\"event Q /at 2020-11-21 08:35\");","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"junghon3709"},"content":"        eventParser.parse();","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"junghon3709"},"content":"        assertEquals(\"Q\", eventParser.getTodo());","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"junghon3709"},"content":"    public void eventParser_eventWithDescriptionAndTime_checkTime() {","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"junghon3709"},"content":"        EventParser eventParser \u003d new EventParser(\"event Q /at 2020-11-21 08:35\");","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"junghon3709"},"content":"        eventParser.parse();","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"junghon3709"},"content":"        assertEquals(\"2020-11-21 08:35\", eventParser.getDate().toString());","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"junghon3709"},"content":"    public void eventParser_spaces_checkToDo() {","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"junghon3709"},"content":"        EventParser eventParser \u003d new EventParser(\"  event Q /at 2020-11-21 08:35  \");","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"junghon3709"},"content":"        eventParser.parse();","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"junghon3709"},"content":"        assertEquals(\"Q\", eventParser.getTodo());","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"junghon3709"},"content":"    public void eventParser_spaces_checkTime() {","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"junghon3709"},"content":"        EventParser eventParser \u003d new EventParser(\"  event Q /at 2020-11-21 08:35  \");","lastModifiedDate":"2021-08-23"},{"lineNumber":39,"author":{"gitId":"junghon3709"},"content":"        eventParser.parse();","lastModifiedDate":"2021-08-23"},{"lineNumber":40,"author":{"gitId":"junghon3709"},"content":"        assertEquals(\"2020-11-21 08:35\", eventParser.getDate().toString());","lastModifiedDate":"2021-08-23"},{"lineNumber":41,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"junghon3709"},"content":"    public void eventParser_missingArgumentsDescription_failure() {","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"junghon3709"},"content":"        TigerException thrown \u003d assertThrows(TigerEmptyStringException.class, () -\u003e {","lastModifiedDate":"2021-08-22"},{"lineNumber":47,"author":{"gitId":"junghon3709"},"content":"            new EventParser(\"event /at 2020-11-21 08:35\").parse();","lastModifiedDate":"2021-08-23"},{"lineNumber":48,"author":{"gitId":"junghon3709"},"content":"        });","lastModifiedDate":"2021-08-22"},{"lineNumber":49,"author":{"gitId":"junghon3709"},"content":"        assertTrue(thrown.toString().contains(\"Event description property cannot be empty.\\nPlease ensure you key \" +","lastModifiedDate":"2021-08-23"},{"lineNumber":50,"author":{"gitId":"junghon3709"},"content":"                \"in the command in the format specified.\"));","lastModifiedDate":"2021-08-23"},{"lineNumber":51,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":52,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":53,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":54,"author":{"gitId":"junghon3709"},"content":"    public void eventParser_missingArgumentsDateTime_failure() {","lastModifiedDate":"2021-08-22"},{"lineNumber":55,"author":{"gitId":"junghon3709"},"content":"        TigerException thrown \u003d assertThrows(TigerEmptyStringException.class, () -\u003e {","lastModifiedDate":"2021-08-22"},{"lineNumber":56,"author":{"gitId":"junghon3709"},"content":"            new EventParser(\"event QQ /at\").parse();","lastModifiedDate":"2021-08-23"},{"lineNumber":57,"author":{"gitId":"junghon3709"},"content":"        });","lastModifiedDate":"2021-08-22"},{"lineNumber":58,"author":{"gitId":"junghon3709"},"content":"        assertTrue(thrown.toString().contains(\"Event date property cannot be empty.\\nPlease ensure you key \" +","lastModifiedDate":"2021-08-23"},{"lineNumber":59,"author":{"gitId":"junghon3709"},"content":"                \"in the command in the format specified.\"));","lastModifiedDate":"2021-08-23"},{"lineNumber":60,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":61,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":62,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":63,"author":{"gitId":"junghon3709"},"content":"    public void eventParser_wrongMatchingCommand_failure() {","lastModifiedDate":"2021-08-22"},{"lineNumber":64,"author":{"gitId":"junghon3709"},"content":"        TigerException thrown \u003d assertThrows(TigerEmptyStringException.class, () -\u003e {","lastModifiedDate":"2021-08-22"},{"lineNumber":65,"author":{"gitId":"junghon3709"},"content":"            new EventParser(\"event Q /by 2020-11-21 08:35\").parse();","lastModifiedDate":"2021-08-23"},{"lineNumber":66,"author":{"gitId":"junghon3709"},"content":"        });","lastModifiedDate":"2021-08-22"},{"lineNumber":67,"author":{"gitId":"junghon3709"},"content":"        assertTrue(thrown.toString().contains(\"Event date property cannot be empty.\\nPlease ensure you key \" +","lastModifiedDate":"2021-08-23"},{"lineNumber":68,"author":{"gitId":"junghon3709"},"content":"                \"in the command in the format specified.\"));","lastModifiedDate":"2021-08-23"},{"lineNumber":69,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":70,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"junghon3709"},"content":"    public void eventParser_withPriority_success() {","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"junghon3709"},"content":"        EventParser eventParser \u003d new EventParser(\"event 4444 /at 15:24 /priority H\");","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"junghon3709"},"content":"        eventParser.parse();","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"junghon3709"},"content":"        assertEquals(\"4444\", eventParser.getTodo());","lastModifiedDate":"2021-08-25"},{"lineNumber":76,"author":{"gitId":"junghon3709"},"content":"        assertEquals(Priority.HIGH, eventParser.getPriority());","lastModifiedDate":"2021-08-25"},{"lineNumber":77,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":78,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":79,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":80,"author":{"gitId":"junghon3709"},"content":"    public void eventParser_withPriorityWithSpaces_success() {","lastModifiedDate":"2021-08-25"},{"lineNumber":81,"author":{"gitId":"junghon3709"},"content":"        EventParser eventParser \u003d new EventParser(\"event   44  44   /at 15:24 /priority H\");","lastModifiedDate":"2021-08-25"},{"lineNumber":82,"author":{"gitId":"junghon3709"},"content":"        eventParser.parse();","lastModifiedDate":"2021-08-25"},{"lineNumber":83,"author":{"gitId":"junghon3709"},"content":"        assertEquals(\"44  44\", eventParser.getTodo());","lastModifiedDate":"2021-08-25"},{"lineNumber":84,"author":{"gitId":"junghon3709"},"content":"        assertEquals(Priority.HIGH, eventParser.getPriority());","lastModifiedDate":"2021-08-25"},{"lineNumber":85,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":86,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":87,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":88,"author":{"gitId":"junghon3709"},"content":"    public void eventParser_multipleEventSmall_success() {","lastModifiedDate":"2021-08-25"},{"lineNumber":89,"author":{"gitId":"junghon3709"},"content":"        // testing that the regrex actually selects only the first todo","lastModifiedDate":"2021-08-25"},{"lineNumber":90,"author":{"gitId":"junghon3709"},"content":"        EventParser eventParser \u003d new EventParser(\"event Event mop floor /at 14:25 /priority M\");","lastModifiedDate":"2021-08-25"},{"lineNumber":91,"author":{"gitId":"junghon3709"},"content":"        eventParser.parse();","lastModifiedDate":"2021-08-25"},{"lineNumber":92,"author":{"gitId":"junghon3709"},"content":"        assertEquals(\"Event mop floor\", eventParser.getTodo());","lastModifiedDate":"2021-08-25"},{"lineNumber":93,"author":{"gitId":"junghon3709"},"content":"        assertEquals(Priority.MEDIUM, eventParser.getPriority());","lastModifiedDate":"2021-08-25"},{"lineNumber":94,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":95,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":96,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":97,"author":{"gitId":"junghon3709"},"content":"    public void toDoParser_multipleTodoCaptial_success() {","lastModifiedDate":"2021-08-25"},{"lineNumber":98,"author":{"gitId":"junghon3709"},"content":"        // testing that the regrex actually selects only the first todo","lastModifiedDate":"2021-08-25"},{"lineNumber":99,"author":{"gitId":"junghon3709"},"content":"        EventParser eventParser \u003d new EventParser(\"event EVENT mop floor /at 14:25 /priority M\");","lastModifiedDate":"2021-08-25"},{"lineNumber":100,"author":{"gitId":"junghon3709"},"content":"        eventParser.parse();","lastModifiedDate":"2021-08-25"},{"lineNumber":101,"author":{"gitId":"junghon3709"},"content":"        assertEquals(\"EVENT mop floor\", eventParser.getTodo());","lastModifiedDate":"2021-08-25"},{"lineNumber":102,"author":{"gitId":"junghon3709"},"content":"        assertEquals(Priority.MEDIUM, eventParser.getPriority());","lastModifiedDate":"2021-08-25"},{"lineNumber":103,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":104,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":105,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":106,"author":{"gitId":"junghon3709"},"content":"    public void eventParser_noDescription_failure() {","lastModifiedDate":"2021-08-25"},{"lineNumber":107,"author":{"gitId":"junghon3709"},"content":"        TigerException thrown \u003d assertThrows(TigerEmptyStringException.class, () -\u003e {","lastModifiedDate":"2021-08-25"},{"lineNumber":108,"author":{"gitId":"junghon3709"},"content":"            new EventParser(\"event \").parse();","lastModifiedDate":"2021-08-25"},{"lineNumber":109,"author":{"gitId":"junghon3709"},"content":"        });","lastModifiedDate":"2021-08-25"},{"lineNumber":110,"author":{"gitId":"junghon3709"},"content":"        assertTrue(thrown.toString().contains(\"Event description property cannot be empty.\\nPlease ensure you key in \" +","lastModifiedDate":"2021-08-25"},{"lineNumber":111,"author":{"gitId":"junghon3709"},"content":"                \"the command in the format specified.\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":112,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":113,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":114,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":115,"author":{"gitId":"junghon3709"},"content":"    public void eventParser_descriptionNoDate_failure() {","lastModifiedDate":"2021-08-25"},{"lineNumber":116,"author":{"gitId":"junghon3709"},"content":"        TigerException thrown \u003d assertThrows(TigerEmptyStringException.class, () -\u003e {","lastModifiedDate":"2021-08-25"},{"lineNumber":117,"author":{"gitId":"junghon3709"},"content":"            new EventParser(\"event fish\").parse();","lastModifiedDate":"2021-08-25"},{"lineNumber":118,"author":{"gitId":"junghon3709"},"content":"        });","lastModifiedDate":"2021-08-25"},{"lineNumber":119,"author":{"gitId":"junghon3709"},"content":"        assertTrue(thrown.toString().contains(\"Event date property cannot be empty.\\nPlease ensure you key in \" +","lastModifiedDate":"2021-08-25"},{"lineNumber":120,"author":{"gitId":"junghon3709"},"content":"                \"the command in the format specified.\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":121,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":122,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":123,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":124,"author":{"gitId":"junghon3709"},"content":"    public void eventParser_descriptionNoDateWithPriority_failure() {","lastModifiedDate":"2021-08-25"},{"lineNumber":125,"author":{"gitId":"junghon3709"},"content":"        TigerException thrown \u003d assertThrows(TigerEmptyStringException.class, () -\u003e {","lastModifiedDate":"2021-08-25"},{"lineNumber":126,"author":{"gitId":"junghon3709"},"content":"            new EventParser(\"event fish /at /priority H\").parse();","lastModifiedDate":"2021-08-25"},{"lineNumber":127,"author":{"gitId":"junghon3709"},"content":"        });","lastModifiedDate":"2021-08-25"},{"lineNumber":128,"author":{"gitId":"junghon3709"},"content":"        assertTrue(thrown.toString().contains(\"Event date property cannot be empty.\\nPlease ensure you key in \" +","lastModifiedDate":"2021-08-25"},{"lineNumber":129,"author":{"gitId":"junghon3709"},"content":"                \"the command in the format specified.\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":130,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":131,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":132,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":133,"author":{"gitId":"junghon3709"},"content":"    public void eventParser_descriptionEmptyWithDateAndPriority_failure() {","lastModifiedDate":"2021-08-25"},{"lineNumber":134,"author":{"gitId":"junghon3709"},"content":"        TigerException thrown \u003d assertThrows(TigerEmptyStringException.class, () -\u003e {","lastModifiedDate":"2021-08-25"},{"lineNumber":135,"author":{"gitId":"junghon3709"},"content":"            new EventParser(\"event /at 15:24 /priority H\").parse();","lastModifiedDate":"2021-08-25"},{"lineNumber":136,"author":{"gitId":"junghon3709"},"content":"        });","lastModifiedDate":"2021-08-25"},{"lineNumber":137,"author":{"gitId":"junghon3709"},"content":"        assertTrue(thrown.toString().contains(\"Event description property cannot be empty.\\nPlease ensure you key in \" +","lastModifiedDate":"2021-08-25"},{"lineNumber":138,"author":{"gitId":"junghon3709"},"content":"                \"the command in the format specified.\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":139,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":140,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":141,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":142,"author":{"gitId":"junghon3709"},"content":"    public void eventParser_priorityEmptyWithDateAndDescription_failure() {","lastModifiedDate":"2021-08-25"},{"lineNumber":143,"author":{"gitId":"junghon3709"},"content":"        TigerException thrown \u003d assertThrows(TigerEmptyStringException.class, () -\u003e {","lastModifiedDate":"2021-08-25"},{"lineNumber":144,"author":{"gitId":"junghon3709"},"content":"            new EventParser(\"event fa fa /at 15:24 /priority\").parse();","lastModifiedDate":"2021-08-25"},{"lineNumber":145,"author":{"gitId":"junghon3709"},"content":"        });","lastModifiedDate":"2021-08-25"},{"lineNumber":146,"author":{"gitId":"junghon3709"},"content":"        assertTrue(thrown.toString().contains(\"Event priority property cannot be empty.\\nPlease ensure you key in \" +","lastModifiedDate":"2021-08-25"},{"lineNumber":147,"author":{"gitId":"junghon3709"},"content":"                \"the command in the format specified.\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":148,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":149,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":150,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":151,"author":{"gitId":"junghon3709"},"content":"    public void eventParser_dateEmptyWithDescriptionAndDate_failure() {","lastModifiedDate":"2021-08-25"},{"lineNumber":152,"author":{"gitId":"junghon3709"},"content":"        TigerException thrown \u003d assertThrows(TigerEmptyStringException.class, () -\u003e {","lastModifiedDate":"2021-08-25"},{"lineNumber":153,"author":{"gitId":"junghon3709"},"content":"            new EventParser(\"event fa fa /at  /priority H\").parse();","lastModifiedDate":"2021-08-25"},{"lineNumber":154,"author":{"gitId":"junghon3709"},"content":"        });","lastModifiedDate":"2021-08-25"},{"lineNumber":155,"author":{"gitId":"junghon3709"},"content":"        assertTrue(thrown.toString().contains(\"Event date property cannot be empty.\\nPlease ensure you key in \" +","lastModifiedDate":"2021-08-25"},{"lineNumber":156,"author":{"gitId":"junghon3709"},"content":"                \"the command in the format specified.\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":157,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":158,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":159,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":160,"author":{"gitId":"junghon3709"},"content":"    public void eventParser_invalidPriorityArgument_failure() {","lastModifiedDate":"2021-08-25"},{"lineNumber":161,"author":{"gitId":"junghon3709"},"content":"        TigerException thrown \u003d assertThrows(TigerInvalidArgumentException.class, () -\u003e {","lastModifiedDate":"2021-08-25"},{"lineNumber":162,"author":{"gitId":"junghon3709"},"content":"            new EventParser(\"event fa fa /at  /priority S\").parse();","lastModifiedDate":"2021-08-25"},{"lineNumber":163,"author":{"gitId":"junghon3709"},"content":"        });","lastModifiedDate":"2021-08-25"},{"lineNumber":164,"author":{"gitId":"junghon3709"},"content":"        assertTrue(thrown.toString().contains(\"S is not a valid argument for the Event priority command.\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":165,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":166,"author":{"gitId":"junghon3709"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"junghon3709":166}},{"path":"src/test/java/tiger/parser/MarkDoneParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"junghon3709"},"content":"package tiger.parser;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"junghon3709"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"junghon3709"},"content":"import tiger.exceptions.TigerException;","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"junghon3709"},"content":"import tiger.exceptions.inputs.TigerEmptyStringException;","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"junghon3709"},"content":"import tiger.exceptions.inputs.TigerInvalidArgumentException;","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"junghon3709"},"content":"import tiger.exceptions.inputs.TigerTooManyInputsException;","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"junghon3709"},"content":"import tiger.constants.Messages;","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"junghon3709"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"junghon3709"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"junghon3709"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"junghon3709"},"content":"public class MarkDoneParserTest {","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"junghon3709"},"content":"    public void markDoneParser_doneWithIndex_success() {","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"junghon3709"},"content":"        MarkDoneParser markDoneParser \u003d new MarkDoneParser(\"done 1\");","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"junghon3709"},"content":"        markDoneParser.parse();","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"junghon3709"},"content":"        assertEquals(1, markDoneParser.getIndex());","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"junghon3709"},"content":"    public void markDoneParser_doneWithIndexLarge_success() {","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"junghon3709"},"content":"        MarkDoneParser markDoneParser \u003d new MarkDoneParser(\"done 212\");","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"junghon3709"},"content":"        markDoneParser.parse();","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"junghon3709"},"content":"        assertEquals(212, markDoneParser.getIndex());","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"junghon3709"},"content":"    public void markDoneParser_zero_failure() {","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"junghon3709"},"content":"        TigerException thrown \u003d assertThrows(TigerInvalidArgumentException.class, () -\u003e {","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"junghon3709"},"content":"            new MarkDoneParser(\"done 0\").parse();","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"junghon3709"},"content":"        });","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"junghon3709"},"content":"        assertTrue(thrown.toString().contains(\"0 is not a valid argument for the Done command.\"));","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"junghon3709"},"content":"    public void markDoneParser_negative_failure() {","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"junghon3709"},"content":"        TigerException thrown \u003d assertThrows(TigerInvalidArgumentException.class, () -\u003e {","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"junghon3709"},"content":"            new MarkDoneParser(\"done -55\").parse();","lastModifiedDate":"2021-08-23"},{"lineNumber":41,"author":{"gitId":"junghon3709"},"content":"        });","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"junghon3709"},"content":"        assertTrue(thrown.toString().contains(\"-55 is not a valid argument for the Done command.\"));","lastModifiedDate":"2021-08-23"},{"lineNumber":43,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"junghon3709"},"content":"    public void markDoneParser_decimal_failure() {","lastModifiedDate":"2021-08-22"},{"lineNumber":47,"author":{"gitId":"junghon3709"},"content":"        TigerException thrown \u003d assertThrows(TigerInvalidArgumentException.class, () -\u003e {","lastModifiedDate":"2021-08-22"},{"lineNumber":48,"author":{"gitId":"junghon3709"},"content":"            new MarkDoneParser(\"done 5.5\").parse();","lastModifiedDate":"2021-08-23"},{"lineNumber":49,"author":{"gitId":"junghon3709"},"content":"        });","lastModifiedDate":"2021-08-22"},{"lineNumber":50,"author":{"gitId":"junghon3709"},"content":"        assertTrue(thrown.toString().contains(\"5.5 is not a valid argument for the Done command.\"));","lastModifiedDate":"2021-08-23"},{"lineNumber":51,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":52,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":53,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":54,"author":{"gitId":"junghon3709"},"content":"    public void markDoneParser_spaces_success() {","lastModifiedDate":"2021-08-22"},{"lineNumber":55,"author":{"gitId":"junghon3709"},"content":"        MarkDoneParser markDoneParser \u003d new MarkDoneParser(\"  done 5  \");","lastModifiedDate":"2021-08-23"},{"lineNumber":56,"author":{"gitId":"junghon3709"},"content":"        markDoneParser.parse();","lastModifiedDate":"2021-08-23"},{"lineNumber":57,"author":{"gitId":"junghon3709"},"content":"        assertEquals(5, markDoneParser.getIndex());","lastModifiedDate":"2021-08-23"},{"lineNumber":58,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":59,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":60,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":61,"author":{"gitId":"junghon3709"},"content":"    public void markDoneParser_tooManyArguments_failure() {","lastModifiedDate":"2021-08-22"},{"lineNumber":62,"author":{"gitId":"junghon3709"},"content":"        TigerException thrown \u003d assertThrows(TigerTooManyInputsException.class, () -\u003e {","lastModifiedDate":"2021-08-22"},{"lineNumber":63,"author":{"gitId":"junghon3709"},"content":"            new MarkDoneParser(\"done 5 5555\").parse();","lastModifiedDate":"2021-08-23"},{"lineNumber":64,"author":{"gitId":"junghon3709"},"content":"        });","lastModifiedDate":"2021-08-22"},{"lineNumber":65,"author":{"gitId":"junghon3709"},"content":"        assertTrue(thrown.toString().contains(Messages.EXCEPTION_INPUT_TOO_MANY_ARGUMENTS.getMessage()));","lastModifiedDate":"2021-08-22"},{"lineNumber":66,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":67,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":68,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":69,"author":{"gitId":"junghon3709"},"content":"    public void markDoneParser_missingArguments_failure() {","lastModifiedDate":"2021-08-22"},{"lineNumber":70,"author":{"gitId":"junghon3709"},"content":"        TigerException thrown \u003d assertThrows(TigerEmptyStringException.class, () -\u003e {","lastModifiedDate":"2021-08-22"},{"lineNumber":71,"author":{"gitId":"junghon3709"},"content":"            new MarkDoneParser(\"done\").parse();","lastModifiedDate":"2021-08-23"},{"lineNumber":72,"author":{"gitId":"junghon3709"},"content":"        });","lastModifiedDate":"2021-08-22"},{"lineNumber":73,"author":{"gitId":"junghon3709"},"content":"        assertTrue(thrown.toString().contains(\"Done index property cannot be empty.\\nPlease ensure you key \" +","lastModifiedDate":"2021-08-23"},{"lineNumber":74,"author":{"gitId":"junghon3709"},"content":"                \"in the command in the format specified.\"));","lastModifiedDate":"2021-08-23"},{"lineNumber":75,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":76,"author":{"gitId":"junghon3709"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"junghon3709":76}},{"path":"src/test/java/tiger/parser/ToDoParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"junghon3709"},"content":"package tiger.parser;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"junghon3709"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"junghon3709"},"content":"import tiger.constants.Priority;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"junghon3709"},"content":"import tiger.exceptions.TigerException;","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"junghon3709"},"content":"import tiger.exceptions.inputs.TigerEmptyStringException;","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"junghon3709"},"content":"import tiger.exceptions.inputs.TigerInvalidArgumentException;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"junghon3709"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"junghon3709"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"junghon3709"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"junghon3709"},"content":"public class ToDoParserTest {","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"junghon3709"},"content":"    public void toDoParser_toDoWithString_success() {","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"junghon3709"},"content":"        ToDoParser toDoParser \u003d new ToDoParser(\"todo fish\");","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"junghon3709"},"content":"        toDoParser.parse();","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"junghon3709"},"content":"        assertEquals(\"Fish\", toDoParser.getTodo());","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"junghon3709"},"content":"    public void toDoParser_toDoWithStringLarge_success() {","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"junghon3709"},"content":"        ToDoParser toDoParser \u003d new ToDoParser(\"todo 3.1415926535897932384626433832795\");","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"junghon3709"},"content":"        toDoParser.parse();","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"junghon3709"},"content":"        assertEquals(\"3.1415926535897932384626433832795\", toDoParser.getTodo());","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"junghon3709"},"content":"    public void toDoParser_toDoWithStringWithSpaces_success() {","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"junghon3709"},"content":"        ToDoParser toDoParser \u003d new ToDoParser(\"todo 3.1415926535897932 384626433 832795\");","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"junghon3709"},"content":"        toDoParser.parse();","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"junghon3709"},"content":"        assertEquals(\"3.1415926535897932 384626433 832795\", toDoParser.getTodo());","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"junghon3709"},"content":"    public void toDoParser_padding_success() {","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"junghon3709"},"content":"        ToDoParser toDoParser \u003d new ToDoParser(\"  todo 3.1415926535897932 384626433 832795  \");","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"junghon3709"},"content":"        toDoParser.parse();","lastModifiedDate":"2021-08-23"},{"lineNumber":39,"author":{"gitId":"junghon3709"},"content":"        assertEquals(\"3.1415926535897932 384626433 832795\", toDoParser.getTodo());","lastModifiedDate":"2021-08-23"},{"lineNumber":40,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"junghon3709"},"content":"    public void toDoParser_missingArguments_failure() {","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"junghon3709"},"content":"        TigerException thrown \u003d assertThrows(TigerEmptyStringException.class, () -\u003e {","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"junghon3709"},"content":"            new ToDoParser(\"todo\").parse();","lastModifiedDate":"2021-08-23"},{"lineNumber":46,"author":{"gitId":"junghon3709"},"content":"        });","lastModifiedDate":"2021-08-22"},{"lineNumber":47,"author":{"gitId":"junghon3709"},"content":"        assertTrue(thrown.toString().contains(\"ToDo description property cannot be empty.\\nPlease ensure you key in \" +","lastModifiedDate":"2021-08-23"},{"lineNumber":48,"author":{"gitId":"junghon3709"},"content":"                \"the command in the format specified.\"));","lastModifiedDate":"2021-08-23"},{"lineNumber":49,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":50,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"junghon3709"},"content":"    public void toDoParser_withPriority_success() {","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"junghon3709"},"content":"        ToDoParser toDoParser \u003d new ToDoParser(\"todo 4444 /priority H\");","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"junghon3709"},"content":"        toDoParser.parse();","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"junghon3709"},"content":"        assertEquals(\"4444\", toDoParser.getTodo());","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"junghon3709"},"content":"        assertEquals(Priority.HIGH, toDoParser.getPriority());","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"junghon3709"},"content":"    public void toDoParser_withPriorityWithSpaces_success() {","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"junghon3709"},"content":"        ToDoParser toDoParser \u003d new ToDoParser(\"todo     444  4      /priority   H   \");","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"junghon3709"},"content":"        toDoParser.parse();","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"junghon3709"},"content":"        assertEquals(\"444  4\", toDoParser.getTodo());","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"junghon3709"},"content":"        assertEquals(Priority.HIGH, toDoParser.getPriority());","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"junghon3709"},"content":"    public void toDoParser_multipleTodoSmall_success() {","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"junghon3709"},"content":"        // testing that the regrex actually selects only the first todo","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"junghon3709"},"content":"        ToDoParser toDoParser \u003d new ToDoParser(\"todo ToDo mop floor /priority M\");","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"junghon3709"},"content":"        toDoParser.parse();","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"junghon3709"},"content":"        assertEquals(\"ToDo mop floor\", toDoParser.getTodo());","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"junghon3709"},"content":"        assertEquals(Priority.MEDIUM, toDoParser.getPriority());","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":76,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":77,"author":{"gitId":"junghon3709"},"content":"    public void toDoParser_multipleTodoCaptial_success() {","lastModifiedDate":"2021-08-25"},{"lineNumber":78,"author":{"gitId":"junghon3709"},"content":"        // testing that the regrex actually selects only the first todo","lastModifiedDate":"2021-08-25"},{"lineNumber":79,"author":{"gitId":"junghon3709"},"content":"        ToDoParser toDoParser \u003d new ToDoParser(\"todo TODO mop floor /priority M\");","lastModifiedDate":"2021-08-25"},{"lineNumber":80,"author":{"gitId":"junghon3709"},"content":"        toDoParser.parse();","lastModifiedDate":"2021-08-25"},{"lineNumber":81,"author":{"gitId":"junghon3709"},"content":"        assertEquals(\"TODO mop floor\", toDoParser.getTodo());","lastModifiedDate":"2021-08-25"},{"lineNumber":82,"author":{"gitId":"junghon3709"},"content":"        assertEquals(Priority.MEDIUM, toDoParser.getPriority());","lastModifiedDate":"2021-08-25"},{"lineNumber":83,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":84,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":85,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":86,"author":{"gitId":"junghon3709"},"content":"    public void toDoParser_noPriorityArgumentWithSpace_failure() {","lastModifiedDate":"2021-08-25"},{"lineNumber":87,"author":{"gitId":"junghon3709"},"content":"        TigerException thrown \u003d assertThrows(TigerEmptyStringException.class, () -\u003e {","lastModifiedDate":"2021-08-25"},{"lineNumber":88,"author":{"gitId":"junghon3709"},"content":"            new ToDoParser(\"todo 4444 /priority \").parse();","lastModifiedDate":"2021-08-25"},{"lineNumber":89,"author":{"gitId":"junghon3709"},"content":"        });","lastModifiedDate":"2021-08-25"},{"lineNumber":90,"author":{"gitId":"junghon3709"},"content":"        assertTrue(thrown.toString().contains(\"ToDo priority property cannot be empty.\\nPlease ensure you key in \" +","lastModifiedDate":"2021-08-25"},{"lineNumber":91,"author":{"gitId":"junghon3709"},"content":"                \"the command in the format specified.\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":92,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":93,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":94,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":95,"author":{"gitId":"junghon3709"},"content":"    public void toDoParser_noPriorityArgumentMissingSpace_failure() {","lastModifiedDate":"2021-08-25"},{"lineNumber":96,"author":{"gitId":"junghon3709"},"content":"        TigerException thrown \u003d assertThrows(TigerEmptyStringException.class, () -\u003e {","lastModifiedDate":"2021-08-25"},{"lineNumber":97,"author":{"gitId":"junghon3709"},"content":"            new ToDoParser(\"todo 4444 /priority\").parse();","lastModifiedDate":"2021-08-25"},{"lineNumber":98,"author":{"gitId":"junghon3709"},"content":"        });","lastModifiedDate":"2021-08-25"},{"lineNumber":99,"author":{"gitId":"junghon3709"},"content":"        assertTrue(thrown.toString().contains(\"ToDo priority property cannot be empty.\\nPlease ensure you key in \" +","lastModifiedDate":"2021-08-25"},{"lineNumber":100,"author":{"gitId":"junghon3709"},"content":"                \"the command in the format specified.\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":101,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":102,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":103,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":104,"author":{"gitId":"junghon3709"},"content":"    public void toDoParser_invalidPriorityArgument_failure() {","lastModifiedDate":"2021-08-25"},{"lineNumber":105,"author":{"gitId":"junghon3709"},"content":"        TigerException thrown \u003d assertThrows(TigerInvalidArgumentException.class, () -\u003e {","lastModifiedDate":"2021-08-25"},{"lineNumber":106,"author":{"gitId":"junghon3709"},"content":"            new ToDoParser(\"todo 4444 /priority S\").parse();","lastModifiedDate":"2021-08-25"},{"lineNumber":107,"author":{"gitId":"junghon3709"},"content":"        });","lastModifiedDate":"2021-08-25"},{"lineNumber":108,"author":{"gitId":"junghon3709"},"content":"        assertTrue(thrown.toString().contains(\"S is not a valid argument for the ToDo priority command.\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":109,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":110,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":111,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":112,"author":{"gitId":"junghon3709"},"content":"    public void toDoParser_emptyDescriptionWithPriority_failure() {","lastModifiedDate":"2021-08-25"},{"lineNumber":113,"author":{"gitId":"junghon3709"},"content":"        TigerException thrown \u003d assertThrows(TigerEmptyStringException.class, () -\u003e {","lastModifiedDate":"2021-08-25"},{"lineNumber":114,"author":{"gitId":"junghon3709"},"content":"            new ToDoParser(\"todo /priority H\").parse();","lastModifiedDate":"2021-08-25"},{"lineNumber":115,"author":{"gitId":"junghon3709"},"content":"        });","lastModifiedDate":"2021-08-25"},{"lineNumber":116,"author":{"gitId":"junghon3709"},"content":"        assertTrue(thrown.toString().contains(\"ToDo description property cannot be empty.\\nPlease ensure you key in \" +","lastModifiedDate":"2021-08-25"},{"lineNumber":117,"author":{"gitId":"junghon3709"},"content":"                \"the command in the format specified.\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":118,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":119,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":120,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":121,"author":{"gitId":"junghon3709"},"content":"    public void toDoParser_missingDescriptionAndPriority_failure() {","lastModifiedDate":"2021-08-25"},{"lineNumber":122,"author":{"gitId":"junghon3709"},"content":"        TigerException thrown \u003d assertThrows(TigerEmptyStringException.class, () -\u003e {","lastModifiedDate":"2021-08-25"},{"lineNumber":123,"author":{"gitId":"junghon3709"},"content":"            new ToDoParser(\"todo /priority \").parse();","lastModifiedDate":"2021-08-25"},{"lineNumber":124,"author":{"gitId":"junghon3709"},"content":"        });","lastModifiedDate":"2021-08-25"},{"lineNumber":125,"author":{"gitId":"junghon3709"},"content":"        assertTrue(thrown.toString().contains(\"ToDo priority property cannot be empty.\\nPlease ensure you key in \" +","lastModifiedDate":"2021-08-25"},{"lineNumber":126,"author":{"gitId":"junghon3709"},"content":"                \"the command in the format specified.\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":127,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":128,"author":{"gitId":"junghon3709"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"junghon3709":128}},{"path":"src/test/java/tiger/utils/DateStringConverterTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"junghon3709"},"content":"package tiger.utils;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"junghon3709"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-21"},{"lineNumber":4,"author":{"gitId":"junghon3709"},"content":"import tiger.exceptions.TigerException;","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"junghon3709"},"content":"import tiger.exceptions.inputs.TigerDateParsingException;","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"junghon3709"},"content":"import tiger.constants.Messages;","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"junghon3709"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-21"},{"lineNumber":9,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"junghon3709"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"junghon3709"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"junghon3709"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"junghon3709"},"content":"public class DateStringConverterTest {","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"junghon3709"},"content":"    DateStringConverter dateStringConverter \u003d new DateStringConverter();","lastModifiedDate":"2021-08-21"},{"lineNumber":16,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":17,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":18,"author":{"gitId":"junghon3709"},"content":"    public void parseDateTime_dateAndTime_success() {","lastModifiedDate":"2021-08-21"},{"lineNumber":19,"author":{"gitId":"junghon3709"},"content":"        assertEquals(\"2020-11-16 15:28\",","lastModifiedDate":"2021-08-21"},{"lineNumber":20,"author":{"gitId":"junghon3709"},"content":"                dateStringConverter.getDateFromString(\"2020-11-16 15:28\").toString());","lastModifiedDate":"2021-08-21"},{"lineNumber":21,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":22,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":23,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":24,"author":{"gitId":"junghon3709"},"content":"    public void parseDateTime_dateOnly_success() {","lastModifiedDate":"2021-08-21"},{"lineNumber":25,"author":{"gitId":"junghon3709"},"content":"        assertEquals(\"2020-11-16\",","lastModifiedDate":"2021-08-21"},{"lineNumber":26,"author":{"gitId":"junghon3709"},"content":"                dateStringConverter.getDateFromString(\"2020-11-16\").toString());","lastModifiedDate":"2021-08-21"},{"lineNumber":27,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":28,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":29,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":30,"author":{"gitId":"junghon3709"},"content":"    public void parseDateTime_timeOnly_success() {","lastModifiedDate":"2021-08-21"},{"lineNumber":31,"author":{"gitId":"junghon3709"},"content":"        assertEquals(String.format(\"%s 08:24\", LocalDate.now()),","lastModifiedDate":"2021-08-21"},{"lineNumber":32,"author":{"gitId":"junghon3709"},"content":"                dateStringConverter.getDateFromString(\"08:24\").toString());","lastModifiedDate":"2021-08-21"},{"lineNumber":33,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":34,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":35,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":36,"author":{"gitId":"junghon3709"},"content":"    public void parseDateTime_dayAccidentallyOutOfRange_success() {","lastModifiedDate":"2021-08-21"},{"lineNumber":37,"author":{"gitId":"junghon3709"},"content":"        assertEquals(String.format(\"2020-11-30\", LocalDate.now()),","lastModifiedDate":"2021-08-21"},{"lineNumber":38,"author":{"gitId":"junghon3709"},"content":"                dateStringConverter.getDateFromString(\"2020-11-31\").toString());","lastModifiedDate":"2021-08-21"},{"lineNumber":39,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":40,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":41,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":42,"author":{"gitId":"junghon3709"},"content":"    public void parseDateTime_InFuture_success() {","lastModifiedDate":"2021-08-21"},{"lineNumber":43,"author":{"gitId":"junghon3709"},"content":"        assertEquals(String.format(\"2030-11-30\", LocalDate.now()),","lastModifiedDate":"2021-08-21"},{"lineNumber":44,"author":{"gitId":"junghon3709"},"content":"                dateStringConverter.getDateFromString(\"2030-11-31\").toString());","lastModifiedDate":"2021-08-21"},{"lineNumber":45,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":46,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":47,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":48,"author":{"gitId":"junghon3709"},"content":"    public void parseDateTime_dayObviouslyOutOfRange_failure() {","lastModifiedDate":"2021-08-21"},{"lineNumber":49,"author":{"gitId":"junghon3709"},"content":"        TigerException thrown \u003d assertThrows(TigerDateParsingException.class, () -\u003e {","lastModifiedDate":"2021-08-21"},{"lineNumber":50,"author":{"gitId":"junghon3709"},"content":"            dateStringConverter.getDateFromString(\"2020-11-32\");","lastModifiedDate":"2021-08-21"},{"lineNumber":51,"author":{"gitId":"junghon3709"},"content":"        });","lastModifiedDate":"2021-08-21"},{"lineNumber":52,"author":{"gitId":"junghon3709"},"content":"        assertTrue(thrown.toString().contains(Messages.EXCEPTION_INPUT_DATE_PARSING.getMessage()));","lastModifiedDate":"2021-08-22"},{"lineNumber":53,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":54,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":55,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":56,"author":{"gitId":"junghon3709"},"content":"    public void parseDateTime_monthObviouslyOutOfRange_failure() {","lastModifiedDate":"2021-08-21"},{"lineNumber":57,"author":{"gitId":"junghon3709"},"content":"        TigerException thrown \u003d assertThrows(TigerDateParsingException.class, () -\u003e {","lastModifiedDate":"2021-08-21"},{"lineNumber":58,"author":{"gitId":"junghon3709"},"content":"            dateStringConverter.getDateFromString(\"2020-13-15\");","lastModifiedDate":"2021-08-21"},{"lineNumber":59,"author":{"gitId":"junghon3709"},"content":"        });","lastModifiedDate":"2021-08-21"},{"lineNumber":60,"author":{"gitId":"junghon3709"},"content":"        assertTrue(thrown.toString().contains(Messages.EXCEPTION_INPUT_DATE_PARSING.getMessage()));","lastModifiedDate":"2021-08-22"},{"lineNumber":61,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":62,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":63,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":64,"author":{"gitId":"junghon3709"},"content":"    public void parseDateTime_fiveDigitYear_failure() {","lastModifiedDate":"2021-08-21"},{"lineNumber":65,"author":{"gitId":"junghon3709"},"content":"        TigerException thrown \u003d assertThrows(TigerDateParsingException.class, () -\u003e {","lastModifiedDate":"2021-08-21"},{"lineNumber":66,"author":{"gitId":"junghon3709"},"content":"            dateStringConverter.getDateFromString(\"12345-13-15\");","lastModifiedDate":"2021-08-21"},{"lineNumber":67,"author":{"gitId":"junghon3709"},"content":"        });","lastModifiedDate":"2021-08-21"},{"lineNumber":68,"author":{"gitId":"junghon3709"},"content":"        assertTrue(thrown.toString().contains(Messages.EXCEPTION_INPUT_DATE_PARSING.getMessage()));","lastModifiedDate":"2021-08-22"},{"lineNumber":69,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":70,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":71,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":72,"author":{"gitId":"junghon3709"},"content":"    public void parseDateTime_threeDigitYear_failure() {","lastModifiedDate":"2021-08-21"},{"lineNumber":73,"author":{"gitId":"junghon3709"},"content":"        TigerException thrown \u003d assertThrows(TigerDateParsingException.class, () -\u003e {","lastModifiedDate":"2021-08-21"},{"lineNumber":74,"author":{"gitId":"junghon3709"},"content":"            dateStringConverter.getDateFromString(\"345-11-16\");","lastModifiedDate":"2021-08-21"},{"lineNumber":75,"author":{"gitId":"junghon3709"},"content":"        });","lastModifiedDate":"2021-08-21"},{"lineNumber":76,"author":{"gitId":"junghon3709"},"content":"        assertTrue(thrown.toString().contains(Messages.EXCEPTION_INPUT_DATE_PARSING.getMessage()));","lastModifiedDate":"2021-08-22"},{"lineNumber":77,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":78,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":79,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":80,"author":{"gitId":"junghon3709"},"content":"    public void parseDateTime_zeroInFrontOfYears_success() {","lastModifiedDate":"2021-08-21"},{"lineNumber":81,"author":{"gitId":"junghon3709"},"content":"        assertEquals(String.format(\"0345-11-16\", LocalDate.now()),","lastModifiedDate":"2021-08-21"},{"lineNumber":82,"author":{"gitId":"junghon3709"},"content":"                dateStringConverter.getDateFromString(\"0345-11-16\").toString());","lastModifiedDate":"2021-08-21"},{"lineNumber":83,"author":{"gitId":"junghon3709"},"content":"        assertEquals(String.format(\"0045-11-16\", LocalDate.now()),","lastModifiedDate":"2021-08-21"},{"lineNumber":84,"author":{"gitId":"junghon3709"},"content":"                dateStringConverter.getDateFromString(\"0045-11-16\").toString());","lastModifiedDate":"2021-08-21"},{"lineNumber":85,"author":{"gitId":"junghon3709"},"content":"        assertEquals(String.format(\"0005-11-16\", LocalDate.now()),","lastModifiedDate":"2021-08-21"},{"lineNumber":86,"author":{"gitId":"junghon3709"},"content":"                dateStringConverter.getDateFromString(\"0005-11-16\").toString());","lastModifiedDate":"2021-08-21"},{"lineNumber":87,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":88,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":89,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":90,"author":{"gitId":"junghon3709"},"content":"    public void parseDateTime_spaceParsing_success() {","lastModifiedDate":"2021-08-21"},{"lineNumber":91,"author":{"gitId":"junghon3709"},"content":"        assertEquals(String.format(\"0345-11-16\", LocalDate.now()),","lastModifiedDate":"2021-08-21"},{"lineNumber":92,"author":{"gitId":"junghon3709"},"content":"                dateStringConverter.getDateFromString(\"0345-11-16    \").toString());","lastModifiedDate":"2021-08-21"},{"lineNumber":93,"author":{"gitId":"junghon3709"},"content":"        assertEquals(String.format(\"0045-11-16\", LocalDate.now()),","lastModifiedDate":"2021-08-21"},{"lineNumber":94,"author":{"gitId":"junghon3709"},"content":"                dateStringConverter.getDateFromString(\"    0045-11-16\").toString());","lastModifiedDate":"2021-08-21"},{"lineNumber":95,"author":{"gitId":"junghon3709"},"content":"        assertEquals(String.format(\"0005-11-16 08:00\", LocalDate.now()),","lastModifiedDate":"2021-08-21"},{"lineNumber":96,"author":{"gitId":"junghon3709"},"content":"                dateStringConverter.getDateFromString(\"     0005-11-16 08:00 \" +","lastModifiedDate":"2021-08-21"},{"lineNumber":97,"author":{"gitId":"junghon3709"},"content":"                        \"   \").toString());","lastModifiedDate":"2021-08-21"},{"lineNumber":98,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":99,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":100,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":101,"author":{"gitId":"junghon3709"},"content":"    public void parseDateTime_spaceParsing_failure() {","lastModifiedDate":"2021-08-21"},{"lineNumber":102,"author":{"gitId":"junghon3709"},"content":"        TigerException thrown \u003d assertThrows(TigerDateParsingException.class, () -\u003e {","lastModifiedDate":"2021-08-21"},{"lineNumber":103,"author":{"gitId":"junghon3709"},"content":"            dateStringConverter.getDateFromString(\"2345-11-16  08:00\");","lastModifiedDate":"2021-08-21"},{"lineNumber":104,"author":{"gitId":"junghon3709"},"content":"        });","lastModifiedDate":"2021-08-21"},{"lineNumber":105,"author":{"gitId":"junghon3709"},"content":"        assertTrue(thrown.toString().contains(Messages.EXCEPTION_INPUT_DATE_PARSING.getMessage()));","lastModifiedDate":"2021-08-22"},{"lineNumber":106,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":107,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":108,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":109,"author":{"gitId":"junghon3709"},"content":"    public void parseDateTime_tooManyArguments_failure() {","lastModifiedDate":"2021-08-21"},{"lineNumber":110,"author":{"gitId":"junghon3709"},"content":"        TigerException thrown \u003d assertThrows(TigerDateParsingException.class, () -\u003e {","lastModifiedDate":"2021-08-21"},{"lineNumber":111,"author":{"gitId":"junghon3709"},"content":"            dateStringConverter.getDateFromString(\"2345-11-16 08:00 08:00\");","lastModifiedDate":"2021-08-21"},{"lineNumber":112,"author":{"gitId":"junghon3709"},"content":"        });","lastModifiedDate":"2021-08-21"},{"lineNumber":113,"author":{"gitId":"junghon3709"},"content":"        assertTrue(thrown.toString().contains(Messages.EXCEPTION_INPUT_DATE_PARSING.getMessage()));","lastModifiedDate":"2021-08-22"},{"lineNumber":114,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":115,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":116,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":117,"author":{"gitId":"junghon3709"},"content":"    public void parseDateTime_wrongOrder_failure() {","lastModifiedDate":"2021-08-21"},{"lineNumber":118,"author":{"gitId":"junghon3709"},"content":"        TigerException thrown \u003d assertThrows(TigerDateParsingException.class, () -\u003e {","lastModifiedDate":"2021-08-21"},{"lineNumber":119,"author":{"gitId":"junghon3709"},"content":"            dateStringConverter.getDateFromString(\"08:00 2345-11-16\");","lastModifiedDate":"2021-08-21"},{"lineNumber":120,"author":{"gitId":"junghon3709"},"content":"        });","lastModifiedDate":"2021-08-21"},{"lineNumber":121,"author":{"gitId":"junghon3709"},"content":"        assertTrue(thrown.toString().contains(Messages.EXCEPTION_INPUT_DATE_PARSING.getMessage()));","lastModifiedDate":"2021-08-22"},{"lineNumber":122,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":123,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":124,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":125,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":126,"author":{"gitId":"junghon3709"},"content":"    public void parseDateTime_negativeThreeDigitYear_failure() {","lastModifiedDate":"2021-08-21"},{"lineNumber":127,"author":{"gitId":"junghon3709"},"content":"        TigerException thrown \u003d assertThrows(TigerDateParsingException.class, () -\u003e {","lastModifiedDate":"2021-08-21"},{"lineNumber":128,"author":{"gitId":"junghon3709"},"content":"            dateStringConverter.getDateFromString(\"-345-11-16\");","lastModifiedDate":"2021-08-21"},{"lineNumber":129,"author":{"gitId":"junghon3709"},"content":"        });","lastModifiedDate":"2021-08-21"},{"lineNumber":130,"author":{"gitId":"junghon3709"},"content":"        assertTrue(thrown.toString().contains(Messages.EXCEPTION_INPUT_DATE_PARSING.getMessage()));","lastModifiedDate":"2021-08-22"},{"lineNumber":131,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":132,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":133,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":134,"author":{"gitId":"junghon3709"},"content":"    public void parseDateTime_negativeFourDigitYear_failure() {","lastModifiedDate":"2021-08-21"},{"lineNumber":135,"author":{"gitId":"junghon3709"},"content":"        TigerException thrown \u003d assertThrows(TigerDateParsingException.class, () -\u003e {","lastModifiedDate":"2021-08-21"},{"lineNumber":136,"author":{"gitId":"junghon3709"},"content":"            dateStringConverter.getDateFromString(\"-1345-11-16\");","lastModifiedDate":"2021-08-21"},{"lineNumber":137,"author":{"gitId":"junghon3709"},"content":"        });","lastModifiedDate":"2021-08-21"},{"lineNumber":138,"author":{"gitId":"junghon3709"},"content":"        assertTrue(thrown.toString().contains(Messages.EXCEPTION_INPUT_DATE_PARSING.getMessage()));","lastModifiedDate":"2021-08-22"},{"lineNumber":139,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":140,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":141,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":142,"author":{"gitId":"junghon3709"},"content":"    public void parseDateTime_negativeOneDigitMonth_failure() {","lastModifiedDate":"2021-08-21"},{"lineNumber":143,"author":{"gitId":"junghon3709"},"content":"        TigerException thrown \u003d assertThrows(TigerDateParsingException.class, () -\u003e {","lastModifiedDate":"2021-08-21"},{"lineNumber":144,"author":{"gitId":"junghon3709"},"content":"            dateStringConverter.getDateFromString(\"-345--4-16\");","lastModifiedDate":"2021-08-21"},{"lineNumber":145,"author":{"gitId":"junghon3709"},"content":"        });","lastModifiedDate":"2021-08-21"},{"lineNumber":146,"author":{"gitId":"junghon3709"},"content":"        assertTrue(thrown.toString().contains(Messages.EXCEPTION_INPUT_DATE_PARSING.getMessage()));","lastModifiedDate":"2021-08-22"},{"lineNumber":147,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":148,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":149,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":150,"author":{"gitId":"junghon3709"},"content":"    public void parseDateTime_negativeOneTwoDigitMonth_failure() {","lastModifiedDate":"2021-08-21"},{"lineNumber":151,"author":{"gitId":"junghon3709"},"content":"        TigerException thrown \u003d assertThrows(TigerDateParsingException.class, () -\u003e {","lastModifiedDate":"2021-08-21"},{"lineNumber":152,"author":{"gitId":"junghon3709"},"content":"            dateStringConverter.getDateFromString(\"-345--12-16\");","lastModifiedDate":"2021-08-21"},{"lineNumber":153,"author":{"gitId":"junghon3709"},"content":"        });","lastModifiedDate":"2021-08-21"},{"lineNumber":154,"author":{"gitId":"junghon3709"},"content":"        assertTrue(thrown.toString().contains(Messages.EXCEPTION_INPUT_DATE_PARSING.getMessage()));","lastModifiedDate":"2021-08-22"},{"lineNumber":155,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":156,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":157,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":158,"author":{"gitId":"junghon3709"},"content":"    public void parseDateTime_negativeOneDigitDay_failure() {","lastModifiedDate":"2021-08-21"},{"lineNumber":159,"author":{"gitId":"junghon3709"},"content":"        TigerException thrown \u003d assertThrows(TigerDateParsingException.class, () -\u003e {","lastModifiedDate":"2021-08-21"},{"lineNumber":160,"author":{"gitId":"junghon3709"},"content":"            dateStringConverter.getDateFromString(\"-345-11--6\");","lastModifiedDate":"2021-08-21"},{"lineNumber":161,"author":{"gitId":"junghon3709"},"content":"        });","lastModifiedDate":"2021-08-21"},{"lineNumber":162,"author":{"gitId":"junghon3709"},"content":"        assertTrue(thrown.toString().contains(Messages.EXCEPTION_INPUT_DATE_PARSING.getMessage()));","lastModifiedDate":"2021-08-22"},{"lineNumber":163,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":164,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":165,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":166,"author":{"gitId":"junghon3709"},"content":"    public void parseDateTime_negativeTwoDigitDay_failure() {","lastModifiedDate":"2021-08-21"},{"lineNumber":167,"author":{"gitId":"junghon3709"},"content":"        TigerException thrown \u003d assertThrows(TigerDateParsingException.class, () -\u003e {","lastModifiedDate":"2021-08-21"},{"lineNumber":168,"author":{"gitId":"junghon3709"},"content":"            dateStringConverter.getDateFromString(\"-345-11--16\");","lastModifiedDate":"2021-08-21"},{"lineNumber":169,"author":{"gitId":"junghon3709"},"content":"        });","lastModifiedDate":"2021-08-21"},{"lineNumber":170,"author":{"gitId":"junghon3709"},"content":"        assertTrue(thrown.toString().contains(Messages.EXCEPTION_INPUT_DATE_PARSING.getMessage()));","lastModifiedDate":"2021-08-22"},{"lineNumber":171,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":172,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":173,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":174,"author":{"gitId":"junghon3709"},"content":"    public void parseDateTime_negativeTwoDigitHour_failure() {","lastModifiedDate":"2021-08-21"},{"lineNumber":175,"author":{"gitId":"junghon3709"},"content":"        TigerException thrown \u003d assertThrows(TigerDateParsingException.class, () -\u003e {","lastModifiedDate":"2021-08-21"},{"lineNumber":176,"author":{"gitId":"junghon3709"},"content":"            dateStringConverter.getDateFromString(\"1345-11-16 -09:00\");","lastModifiedDate":"2021-08-21"},{"lineNumber":177,"author":{"gitId":"junghon3709"},"content":"        });","lastModifiedDate":"2021-08-21"},{"lineNumber":178,"author":{"gitId":"junghon3709"},"content":"        assertTrue(thrown.toString().contains(Messages.EXCEPTION_INPUT_DATE_PARSING.getMessage()));","lastModifiedDate":"2021-08-22"},{"lineNumber":179,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":180,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":181,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":182,"author":{"gitId":"junghon3709"},"content":"    public void parseDateTime_negativeOneDigitHour_failure() {","lastModifiedDate":"2021-08-21"},{"lineNumber":183,"author":{"gitId":"junghon3709"},"content":"        TigerException thrown \u003d assertThrows(TigerDateParsingException.class, () -\u003e {","lastModifiedDate":"2021-08-21"},{"lineNumber":184,"author":{"gitId":"junghon3709"},"content":"            dateStringConverter.getDateFromString(\"1345-11-16 -9:00\");","lastModifiedDate":"2021-08-21"},{"lineNumber":185,"author":{"gitId":"junghon3709"},"content":"        });","lastModifiedDate":"2021-08-21"},{"lineNumber":186,"author":{"gitId":"junghon3709"},"content":"        assertTrue(thrown.toString().contains(Messages.EXCEPTION_INPUT_DATE_PARSING.getMessage()));","lastModifiedDate":"2021-08-22"},{"lineNumber":187,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":188,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":189,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":190,"author":{"gitId":"junghon3709"},"content":"    public void parseDateTime_negativeTwoDigitMinute_failure() {","lastModifiedDate":"2021-08-21"},{"lineNumber":191,"author":{"gitId":"junghon3709"},"content":"        TigerException thrown \u003d assertThrows(TigerDateParsingException.class, () -\u003e {","lastModifiedDate":"2021-08-21"},{"lineNumber":192,"author":{"gitId":"junghon3709"},"content":"            dateStringConverter.getDateFromString(\"1345-11-16 09:-00\");","lastModifiedDate":"2021-08-21"},{"lineNumber":193,"author":{"gitId":"junghon3709"},"content":"        });","lastModifiedDate":"2021-08-21"},{"lineNumber":194,"author":{"gitId":"junghon3709"},"content":"        assertTrue(thrown.toString().contains(Messages.EXCEPTION_INPUT_DATE_PARSING.getMessage()));","lastModifiedDate":"2021-08-22"},{"lineNumber":195,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":196,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":197,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":198,"author":{"gitId":"junghon3709"},"content":"    public void parseDateTime_negativeOneDigitMinute_failure() {","lastModifiedDate":"2021-08-21"},{"lineNumber":199,"author":{"gitId":"junghon3709"},"content":"        TigerException thrown \u003d assertThrows(TigerDateParsingException.class, () -\u003e {","lastModifiedDate":"2021-08-21"},{"lineNumber":200,"author":{"gitId":"junghon3709"},"content":"            dateStringConverter.getDateFromString(\"1345-11-16 09:-0\");","lastModifiedDate":"2021-08-21"},{"lineNumber":201,"author":{"gitId":"junghon3709"},"content":"        });","lastModifiedDate":"2021-08-21"},{"lineNumber":202,"author":{"gitId":"junghon3709"},"content":"        assertTrue(thrown.toString().contains(Messages.EXCEPTION_INPUT_DATE_PARSING.getMessage()));","lastModifiedDate":"2021-08-22"},{"lineNumber":203,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":204,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":205,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":206,"author":{"gitId":"junghon3709"},"content":"    public void parseDateTime_excludeZeroMonth_failure() {","lastModifiedDate":"2021-08-21"},{"lineNumber":207,"author":{"gitId":"junghon3709"},"content":"        TigerException thrown \u003d assertThrows(TigerDateParsingException.class, () -\u003e {","lastModifiedDate":"2021-08-21"},{"lineNumber":208,"author":{"gitId":"junghon3709"},"content":"            dateStringConverter.getDateFromString(\"1345-1-16 09:00\");","lastModifiedDate":"2021-08-21"},{"lineNumber":209,"author":{"gitId":"junghon3709"},"content":"        });","lastModifiedDate":"2021-08-21"},{"lineNumber":210,"author":{"gitId":"junghon3709"},"content":"        assertTrue(thrown.toString().contains(Messages.EXCEPTION_INPUT_DATE_PARSING.getMessage()));","lastModifiedDate":"2021-08-22"},{"lineNumber":211,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":212,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":213,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":214,"author":{"gitId":"junghon3709"},"content":"    public void parseDateTime_excludeZeroDay_failure() {","lastModifiedDate":"2021-08-21"},{"lineNumber":215,"author":{"gitId":"junghon3709"},"content":"        TigerException thrown \u003d assertThrows(TigerDateParsingException.class, () -\u003e {","lastModifiedDate":"2021-08-21"},{"lineNumber":216,"author":{"gitId":"junghon3709"},"content":"            dateStringConverter.getDateFromString(\"1345-11-6 09:00\");","lastModifiedDate":"2021-08-21"},{"lineNumber":217,"author":{"gitId":"junghon3709"},"content":"        });","lastModifiedDate":"2021-08-21"},{"lineNumber":218,"author":{"gitId":"junghon3709"},"content":"        assertTrue(thrown.toString().contains(Messages.EXCEPTION_INPUT_DATE_PARSING.getMessage()));","lastModifiedDate":"2021-08-22"},{"lineNumber":219,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":220,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":221,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":222,"author":{"gitId":"junghon3709"},"content":"    public void parseDateTime_excludeZeroHour_failure() {","lastModifiedDate":"2021-08-21"},{"lineNumber":223,"author":{"gitId":"junghon3709"},"content":"        TigerException thrown \u003d assertThrows(TigerDateParsingException.class, () -\u003e {","lastModifiedDate":"2021-08-21"},{"lineNumber":224,"author":{"gitId":"junghon3709"},"content":"            dateStringConverter.getDateFromString(\"1345-11-06 9:00\");","lastModifiedDate":"2021-08-21"},{"lineNumber":225,"author":{"gitId":"junghon3709"},"content":"        });","lastModifiedDate":"2021-08-21"},{"lineNumber":226,"author":{"gitId":"junghon3709"},"content":"        assertTrue(thrown.toString().contains(Messages.EXCEPTION_INPUT_DATE_PARSING.getMessage()));","lastModifiedDate":"2021-08-22"},{"lineNumber":227,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":228,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":229,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":230,"author":{"gitId":"junghon3709"},"content":"    public void parseDateTime_excludeZeroMinute_failure() {","lastModifiedDate":"2021-08-21"},{"lineNumber":231,"author":{"gitId":"junghon3709"},"content":"        TigerException thrown \u003d assertThrows(TigerDateParsingException.class, () -\u003e {","lastModifiedDate":"2021-08-21"},{"lineNumber":232,"author":{"gitId":"junghon3709"},"content":"            dateStringConverter.getDateFromString(\"1345-11-06 09:3\");","lastModifiedDate":"2021-08-21"},{"lineNumber":233,"author":{"gitId":"junghon3709"},"content":"        });","lastModifiedDate":"2021-08-21"},{"lineNumber":234,"author":{"gitId":"junghon3709"},"content":"        assertTrue(thrown.toString().contains(Messages.EXCEPTION_INPUT_DATE_PARSING.getMessage()));","lastModifiedDate":"2021-08-22"},{"lineNumber":235,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":236,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":237,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":238,"author":{"gitId":"junghon3709"},"content":"    public void parseDateTime_zeroYear_failure() {","lastModifiedDate":"2021-08-21"},{"lineNumber":239,"author":{"gitId":"junghon3709"},"content":"        TigerException thrown \u003d assertThrows(TigerDateParsingException.class, () -\u003e {","lastModifiedDate":"2021-08-21"},{"lineNumber":240,"author":{"gitId":"junghon3709"},"content":"            dateStringConverter.getDateFromString(\"0000-11-16\");","lastModifiedDate":"2021-08-21"},{"lineNumber":241,"author":{"gitId":"junghon3709"},"content":"        });","lastModifiedDate":"2021-08-21"},{"lineNumber":242,"author":{"gitId":"junghon3709"},"content":"        assertTrue(thrown.toString().contains(Messages.EXCEPTION_INPUT_DATE_PARSING.getMessage()));","lastModifiedDate":"2021-08-22"},{"lineNumber":243,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":244,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":245,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":246,"author":{"gitId":"junghon3709"},"content":"    public void parseDateTime_invalidDelimiter_failure() {","lastModifiedDate":"2021-08-21"},{"lineNumber":247,"author":{"gitId":"junghon3709"},"content":"        TigerException thrown \u003d assertThrows(TigerDateParsingException.class, () -\u003e {","lastModifiedDate":"2021-08-21"},{"lineNumber":248,"author":{"gitId":"junghon3709"},"content":"            dateStringConverter.getDateFromString(\"2020:11:16 15:28\");","lastModifiedDate":"2021-08-21"},{"lineNumber":249,"author":{"gitId":"junghon3709"},"content":"        });","lastModifiedDate":"2021-08-21"},{"lineNumber":250,"author":{"gitId":"junghon3709"},"content":"        assertTrue(thrown.toString().contains(Messages.EXCEPTION_INPUT_DATE_PARSING.getMessage()));","lastModifiedDate":"2021-08-22"},{"lineNumber":251,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":252,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":253,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":254,"author":{"gitId":"junghon3709"},"content":"    public void parseDateTime_invalidDelimiterMixed_failure() {","lastModifiedDate":"2021-08-21"},{"lineNumber":255,"author":{"gitId":"junghon3709"},"content":"        TigerException thrown \u003d assertThrows(TigerDateParsingException.class, () -\u003e {","lastModifiedDate":"2021-08-21"},{"lineNumber":256,"author":{"gitId":"junghon3709"},"content":"            dateStringConverter.getDateFromString(\"2020/11-16 15:28\");","lastModifiedDate":"2021-08-21"},{"lineNumber":257,"author":{"gitId":"junghon3709"},"content":"        });","lastModifiedDate":"2021-08-21"},{"lineNumber":258,"author":{"gitId":"junghon3709"},"content":"        assertTrue(thrown.toString().contains(Messages.EXCEPTION_INPUT_DATE_PARSING.getMessage()));","lastModifiedDate":"2021-08-22"},{"lineNumber":259,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":260,"author":{"gitId":"junghon3709"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":261,"author":{"gitId":"junghon3709"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":262,"author":{"gitId":"junghon3709"},"content":"    public void parseDateTime_invalidDelimiterTime_failure() {","lastModifiedDate":"2021-08-21"},{"lineNumber":263,"author":{"gitId":"junghon3709"},"content":"        TigerException thrown \u003d assertThrows(TigerDateParsingException.class, () -\u003e {","lastModifiedDate":"2021-08-21"},{"lineNumber":264,"author":{"gitId":"junghon3709"},"content":"            dateStringConverter.getDateFromString(\"2020/11/16 15-28\");","lastModifiedDate":"2021-08-21"},{"lineNumber":265,"author":{"gitId":"junghon3709"},"content":"        });","lastModifiedDate":"2021-08-21"},{"lineNumber":266,"author":{"gitId":"junghon3709"},"content":"        assertTrue(thrown.toString().contains(Messages.EXCEPTION_INPUT_DATE_PARSING.getMessage()));","lastModifiedDate":"2021-08-22"},{"lineNumber":267,"author":{"gitId":"junghon3709"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":268,"author":{"gitId":"junghon3709"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"junghon3709":268}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"junghon3709"},"content":"todo A","lastModifiedDate":"2021-08-14"},{"lineNumber":2,"author":{"gitId":"junghon3709"},"content":"todo B","lastModifiedDate":"2021-08-14"},{"lineNumber":3,"author":{"gitId":"junghon3709"},"content":"deadline C /by 2020-07-21","lastModifiedDate":"2021-08-14"},{"lineNumber":4,"author":{"gitId":"junghon3709"},"content":"event D /at 2020-07-21 16:00","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"junghon3709"},"content":"done 1","lastModifiedDate":"2021-08-14"},{"lineNumber":6,"author":{"gitId":"junghon3709"},"content":"done 2","lastModifiedDate":"2021-08-14"},{"lineNumber":7,"author":{"gitId":"junghon3709"},"content":"todo carp","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"junghon3709"},"content":"todo carpfishy","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"junghon3709"},"content":"todo eat something","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"junghon3709"},"content":"event koifishy /at 2021-08-22 14:35","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"junghon3709"},"content":"deadline feed fish /by 2021-12-21 12:22","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"junghon3709"},"content":"find carp","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"junghon3709"},"content":"find fish","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"junghon3709"},"content":"list","lastModifiedDate":"2021-08-14"},{"lineNumber":15,"author":{"gitId":"junghon3709"},"content":"done 4","lastModifiedDate":"2021-08-14"},{"lineNumber":16,"author":{"gitId":"junghon3709"},"content":"todo E","lastModifiedDate":"2021-08-14"},{"lineNumber":17,"author":{"gitId":"junghon3709"},"content":"done 6","lastModifiedDate":"2021-08-14"},{"lineNumber":18,"author":{"gitId":"junghon3709"},"content":"delete 14","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"junghon3709"},"content":"done -1","lastModifiedDate":"2021-08-14"},{"lineNumber":20,"author":{"gitId":"junghon3709"},"content":"list","lastModifiedDate":"2021-08-14"},{"lineNumber":21,"author":{"gitId":"junghon3709"},"content":"deadline F /by","lastModifiedDate":"2021-08-14"},{"lineNumber":22,"author":{"gitId":"junghon3709"},"content":"deadline /by 12:00","lastModifiedDate":"2021-08-21"},{"lineNumber":23,"author":{"gitId":"junghon3709"},"content":"deadline G /by 25:00","lastModifiedDate":"2021-08-21"},{"lineNumber":24,"author":{"gitId":"junghon3709"},"content":"deadline G /by 20:70","lastModifiedDate":"2021-08-21"},{"lineNumber":25,"author":{"gitId":"junghon3709"},"content":"deadline G /by 999-08-21","lastModifiedDate":"2021-08-21"},{"lineNumber":26,"author":{"gitId":"junghon3709"},"content":"deadline G /by -999-08-21","lastModifiedDate":"2021-08-21"},{"lineNumber":27,"author":{"gitId":"junghon3709"},"content":"deadline G /by 1999-13-21","lastModifiedDate":"2021-08-21"},{"lineNumber":28,"author":{"gitId":"junghon3709"},"content":"deadline G /by 1999-11-32","lastModifiedDate":"2021-08-21"},{"lineNumber":29,"author":{"gitId":"junghon3709"},"content":"deadline H /by 1999-02-31","lastModifiedDate":"2021-08-21"},{"lineNumber":30,"author":{"gitId":"junghon3709"},"content":"deadline H /by 1999-02-31 ; ","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"junghon3709"},"content":"deadline ; H /by 1999-02-31 ; ","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"junghon3709"},"content":"deadline G /by 2020-08-21 12:00","lastModifiedDate":"2021-08-21"},{"lineNumber":33,"author":{"gitId":"junghon3709"},"content":"list","lastModifiedDate":"2021-08-14"},{"lineNumber":34,"author":{"gitId":"junghon3709"},"content":"todo","lastModifiedDate":"2021-08-14"},{"lineNumber":35,"author":{"gitId":"junghon3709"},"content":"delete 2","lastModifiedDate":"2021-08-14"},{"lineNumber":36,"author":{"gitId":"junghon3709"},"content":"delete 1","lastModifiedDate":"2021-08-14"},{"lineNumber":37,"author":{"gitId":"junghon3709"},"content":"list","lastModifiedDate":"2021-08-14"},{"lineNumber":38,"author":{"gitId":"junghon3709"},"content":"delete 999","lastModifiedDate":"2021-08-14"},{"lineNumber":39,"author":{"gitId":"junghon3709"},"content":"clear","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"junghon3709"},"content":"event koifishy /at 2021-08-22 14:35 /priority H","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"junghon3709"},"content":"deadline carpfishy /by 2021-08-22 14:35 /priority M","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"junghon3709"},"content":"todo fjoaip /priority L","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"junghon3709"},"content":"list","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"junghon3709"},"content":"event koifishy /at 2021-08-22 14:35 /priority","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"junghon3709"},"content":"event koifishy /at /priority","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"junghon3709"},"content":"event /at 2021-08-22 14:35 /priority H","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"junghon3709"},"content":"event /at /priority H","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"junghon3709"},"content":"list","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"junghon3709"},"content":"deadline carpfishy /by 2021-08-22 14:35 /priority","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"junghon3709"},"content":"dateline carpfishy /at /priority S","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"junghon3709"},"content":"dateline /by 2021   -08-22 14:35 /priority M","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"junghon3709"},"content":"DEADLINE /by /priority H","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"junghon3709"},"content":"list","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"junghon3709"},"content":"todo /priority L","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"junghon3709"},"content":"Todo fjoaip /priority","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"junghon3709"},"content":"list","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"junghon3709"},"content":"clear","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"junghon3709"},"content":"bye","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"junghon3709":58}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"junghon3709"},"content":"REM run the program, feed actions from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2021-08-14"},{"lineNumber":18,"author":{"gitId":"junghon3709"},"content":"java -classpath ..\\bin Tiger \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-08-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"junghon3709":2,"-":19}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"junghon3709"},"content":"if ! javac -cp  ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2021-08-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"junghon3709"},"content":"pwd","lastModifiedDate":"2021-08-21"},{"lineNumber":24,"author":{"gitId":"junghon3709"},"content":"java -classpath ../bin Tiger \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-08-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"# convert to UNIX format  ","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"junghon3709":3,"-":36}}]

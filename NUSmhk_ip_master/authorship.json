[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"NUSmhk"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"NUSmhk"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"NUSmhk"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"NUSmhk"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"NUSmhk"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"NUSmhk"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"NUSmhk"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"NUSmhk"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"NUSmhk"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"NUSmhk"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"NUSmhk"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"NUSmhk"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-08-28"},{"lineNumber":28,"author":{"gitId":"NUSmhk"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-08-28"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    mainClassName \u003d \"seedu.duke.Duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":46,"NUSmhk":14}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NUSmhk"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"NUSmhk"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"NUSmhk"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"NUSmhk"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"NUSmhk"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"NUSmhk"},"content":" * Represents a type of task that contains a due by deadline.","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"NUSmhk"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"NUSmhk"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-14"},{"lineNumber":11,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":12,"author":{"gitId":"NUSmhk"},"content":"    private LocalDate date;","lastModifiedDate":"2021-09-02"},{"lineNumber":13,"author":{"gitId":"NUSmhk"},"content":"    private LocalDateTime dateTime;","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"NUSmhk"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"NUSmhk"},"content":"     * This constructor creates a Deadline type task object.","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"NUSmhk"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":18,"author":{"gitId":"NUSmhk"},"content":"     * @param description text description of Deadline task.","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"NUSmhk"},"content":"     * @param dateTime due date of Deadline task.","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"NUSmhk"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"NUSmhk"},"content":"    public Deadline(String description, Object dateTime) {","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"NUSmhk"},"content":"        super(description);","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"NUSmhk"},"content":"        if (dateTime instanceof LocalDateTime) {","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"NUSmhk"},"content":"            this.dateTime \u003d (LocalDateTime) dateTime;","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"NUSmhk"},"content":"        } else {","lastModifiedDate":"2021-08-15"},{"lineNumber":27,"author":{"gitId":"NUSmhk"},"content":"            this.date \u003d (LocalDate) dateTime;","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"NUSmhk"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"NUSmhk"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":30,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":31,"author":{"gitId":"NUSmhk"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"NUSmhk"},"content":"     * This method formats task description and date in a user-friendly way,","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"NUSmhk"},"content":"     * additionally marking the Deadline task type with [D].","lastModifiedDate":"2021-09-02"},{"lineNumber":34,"author":{"gitId":"NUSmhk"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":35,"author":{"gitId":"NUSmhk"},"content":"     * @return String of formatted task description and deadline.","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"NUSmhk"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"NUSmhk"},"content":"    @Override","lastModifiedDate":"2021-08-14"},{"lineNumber":38,"author":{"gitId":"NUSmhk"},"content":"    public String toString() {","lastModifiedDate":"2021-08-14"},{"lineNumber":39,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"NUSmhk"},"content":"        if (this.dateTime !\u003d null) {","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"NUSmhk"},"content":"            return String.format(\"[D]%s (by: %s)\", super.toString(),","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"NUSmhk"},"content":"                    this.dateTime.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy hh:mm a\")));","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"NUSmhk"},"content":"        } else {","lastModifiedDate":"2021-08-23"},{"lineNumber":44,"author":{"gitId":"NUSmhk"},"content":"            return String.format(\"[D]%s (by: %s)\", super.toString(),","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"NUSmhk"},"content":"                    this.date.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy\")));","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"NUSmhk"},"content":"        }","lastModifiedDate":"2021-08-14"},{"lineNumber":47,"author":{"gitId":"NUSmhk"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":48,"author":{"gitId":"NUSmhk"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"NUSmhk":48}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NUSmhk"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"NUSmhk"},"content":"import duke.commands.Command;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"NUSmhk"},"content":"import duke.gui.Main;","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"NUSmhk"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":7,"author":{"gitId":"NUSmhk"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"NUSmhk"},"content":" * This program is Duke bot who keeps track of tasks that user inputs","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"NUSmhk"},"content":" * and let user manage the tasks through various commands.","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"NUSmhk"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":12,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"NUSmhk"},"content":"    private Storage storage;","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"NUSmhk"},"content":"    private TaskList taskList;","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":16,"author":{"gitId":"NUSmhk"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"NUSmhk"},"content":"     * This is a constructor for Duke bot which is necessary to run Duke","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"NUSmhk"},"content":"     * after putting in file path to store tasks into Hard Disk.","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"NUSmhk"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":20,"author":{"gitId":"NUSmhk"},"content":"     * @param filePath Duke stores a text file of tasks input and loads them at the given file path.","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"NUSmhk"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"NUSmhk"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"NUSmhk"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"NUSmhk"},"content":"        taskList \u003d new TaskList(storage);","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"NUSmhk"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":26,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":27,"author":{"gitId":"NUSmhk"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":28,"author":{"gitId":"NUSmhk"},"content":"     * This method takes in the user input as a String and returns Duke output.","lastModifiedDate":"2021-09-01"},{"lineNumber":29,"author":{"gitId":"NUSmhk"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":30,"author":{"gitId":"NUSmhk"},"content":"     * @param input String taken from user input.","lastModifiedDate":"2021-09-01"},{"lineNumber":31,"author":{"gitId":"NUSmhk"},"content":"     * @return String which Duke shows the user.","lastModifiedDate":"2021-09-01"},{"lineNumber":32,"author":{"gitId":"NUSmhk"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":33,"author":{"gitId":"NUSmhk"},"content":"    public String getResponse(String input) {","lastModifiedDate":"2021-08-29"},{"lineNumber":34,"author":{"gitId":"NUSmhk"},"content":"        String dukeResponse \u003d \"\";","lastModifiedDate":"2021-08-29"},{"lineNumber":35,"author":{"gitId":"NUSmhk"},"content":"        try {","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"NUSmhk"},"content":"            Command c \u003d Parser.parse(input, taskList);","lastModifiedDate":"2021-08-29"},{"lineNumber":37,"author":{"gitId":"NUSmhk"},"content":"            dukeResponse \u003d c.execute(taskList);","lastModifiedDate":"2021-09-01"},{"lineNumber":38,"author":{"gitId":"NUSmhk"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-29"},{"lineNumber":39,"author":{"gitId":"NUSmhk"},"content":"            return e.getMessage();","lastModifiedDate":"2021-08-29"},{"lineNumber":40,"author":{"gitId":"NUSmhk"},"content":"        }","lastModifiedDate":"2021-08-15"},{"lineNumber":41,"author":{"gitId":"NUSmhk"},"content":"        return dukeResponse;","lastModifiedDate":"2021-08-29"},{"lineNumber":42,"author":{"gitId":"NUSmhk"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":43,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":44,"author":{"gitId":"NUSmhk"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"NUSmhk"},"content":"     * This is the main method to run Duke.","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"NUSmhk"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":47,"author":{"gitId":"NUSmhk"},"content":"     * @param args Main method arguments.","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"NUSmhk"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":50,"author":{"gitId":"NUSmhk"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2021-08-28"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"-":4,"NUSmhk":48}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NUSmhk"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":3,"author":{"gitId":"NUSmhk"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"NUSmhk"},"content":" * Represents errors specific to Duke mostly to handle wrong user input.","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"NUSmhk"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"NUSmhk"},"content":"public class DukeException extends IllegalArgumentException {","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"NUSmhk"},"content":"    private String errorString \u003d \"\";","lastModifiedDate":"2021-09-04"},{"lineNumber":8,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":9,"author":{"gitId":"NUSmhk"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"NUSmhk"},"content":"     * Constructor for DukeException.","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"NUSmhk"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"NUSmhk"},"content":"     * @param errorType String to specify which error is thrown.","lastModifiedDate":"2021-09-04"},{"lineNumber":13,"author":{"gitId":"NUSmhk"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"NUSmhk"},"content":"    public DukeException(String errorType) {","lastModifiedDate":"2021-09-04"},{"lineNumber":15,"author":{"gitId":"NUSmhk"},"content":"        switch (errorType) {","lastModifiedDate":"2021-09-04"},{"lineNumber":16,"author":{"gitId":"NUSmhk"},"content":"        case \"invalid input\":","lastModifiedDate":"2021-09-04"},{"lineNumber":17,"author":{"gitId":"NUSmhk"},"content":"            errorString \u003d \"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";","lastModifiedDate":"2021-09-04"},{"lineNumber":18,"author":{"gitId":"NUSmhk"},"content":"            break;","lastModifiedDate":"2021-09-04"},{"lineNumber":19,"author":{"gitId":"NUSmhk"},"content":"        case \"empty command\":","lastModifiedDate":"2021-09-04"},{"lineNumber":20,"author":{"gitId":"NUSmhk"},"content":"            errorString \u003d \"OOPS!!! Please enter a command.\";","lastModifiedDate":"2021-09-04"},{"lineNumber":21,"author":{"gitId":"NUSmhk"},"content":"            break;","lastModifiedDate":"2021-09-04"},{"lineNumber":22,"author":{"gitId":"NUSmhk"},"content":"        case \"invalid task index\":","lastModifiedDate":"2021-09-04"},{"lineNumber":23,"author":{"gitId":"NUSmhk"},"content":"            errorString \u003d \"OOPS!!! Please enter a valid task index.\";","lastModifiedDate":"2021-09-04"},{"lineNumber":24,"author":{"gitId":"NUSmhk"},"content":"            break;","lastModifiedDate":"2021-09-04"},{"lineNumber":25,"author":{"gitId":"NUSmhk"},"content":"        case \"non-integer input\":","lastModifiedDate":"2021-09-04"},{"lineNumber":26,"author":{"gitId":"NUSmhk"},"content":"            errorString \u003d \"OOPS!!! Please enter an integer.\";","lastModifiedDate":"2021-09-04"},{"lineNumber":27,"author":{"gitId":"NUSmhk"},"content":"            break;","lastModifiedDate":"2021-09-04"},{"lineNumber":28,"author":{"gitId":"NUSmhk"},"content":"        case \"empty search term\":","lastModifiedDate":"2021-09-04"},{"lineNumber":29,"author":{"gitId":"NUSmhk"},"content":"            errorString \u003d \"OOPS!!! Please enter the term you want to search.\";","lastModifiedDate":"2021-09-04"},{"lineNumber":30,"author":{"gitId":"NUSmhk"},"content":"            break;","lastModifiedDate":"2021-09-04"},{"lineNumber":31,"author":{"gitId":"NUSmhk"},"content":"        case \"empty todo description\":","lastModifiedDate":"2021-09-04"},{"lineNumber":32,"author":{"gitId":"NUSmhk"},"content":"            errorString \u003d \"OOPS!!! The description of a todo cannot be empty.\";","lastModifiedDate":"2021-09-04"},{"lineNumber":33,"author":{"gitId":"NUSmhk"},"content":"            break;","lastModifiedDate":"2021-09-04"},{"lineNumber":34,"author":{"gitId":"NUSmhk"},"content":"        case \"empty deadline description\":","lastModifiedDate":"2021-09-04"},{"lineNumber":35,"author":{"gitId":"NUSmhk"},"content":"            errorString \u003d \"OOPS!!! The description of a deadline cannot be empty.\";","lastModifiedDate":"2021-09-04"},{"lineNumber":36,"author":{"gitId":"NUSmhk"},"content":"            break;","lastModifiedDate":"2021-09-04"},{"lineNumber":37,"author":{"gitId":"NUSmhk"},"content":"        case \"empty deadline deadline\":","lastModifiedDate":"2021-09-04"},{"lineNumber":38,"author":{"gitId":"NUSmhk"},"content":"            errorString \u003d \"OOPS!!! The deadline of a... deadline cannot be empty.\";","lastModifiedDate":"2021-09-04"},{"lineNumber":39,"author":{"gitId":"NUSmhk"},"content":"            break;","lastModifiedDate":"2021-09-04"},{"lineNumber":40,"author":{"gitId":"NUSmhk"},"content":"        case \"invalid deadline\":","lastModifiedDate":"2021-09-04"},{"lineNumber":41,"author":{"gitId":"NUSmhk"},"content":"            errorString \u003d \"OOPS!!! Please enter a valid deadline!\";","lastModifiedDate":"2021-09-04"},{"lineNumber":42,"author":{"gitId":"NUSmhk"},"content":"            break;","lastModifiedDate":"2021-09-04"},{"lineNumber":43,"author":{"gitId":"NUSmhk"},"content":"        case \"empty event description\":","lastModifiedDate":"2021-09-04"},{"lineNumber":44,"author":{"gitId":"NUSmhk"},"content":"            errorString \u003d \"OOPS!!! The description of an event cannot be empty.\";","lastModifiedDate":"2021-09-04"},{"lineNumber":45,"author":{"gitId":"NUSmhk"},"content":"            break;","lastModifiedDate":"2021-09-04"},{"lineNumber":46,"author":{"gitId":"NUSmhk"},"content":"        case \"empty event duration\":","lastModifiedDate":"2021-09-04"},{"lineNumber":47,"author":{"gitId":"NUSmhk"},"content":"            errorString \u003d \"OOPS!!! The duration of an event cannot be empty.\";","lastModifiedDate":"2021-09-04"},{"lineNumber":48,"author":{"gitId":"NUSmhk"},"content":"            break;","lastModifiedDate":"2021-09-04"},{"lineNumber":49,"author":{"gitId":"NUSmhk"},"content":"        case \"invalid event date\":","lastModifiedDate":"2021-09-04"},{"lineNumber":50,"author":{"gitId":"NUSmhk"},"content":"            errorString \u003d \"OOPS!!! Please enter a valid date in duration!\";","lastModifiedDate":"2021-09-04"},{"lineNumber":51,"author":{"gitId":"NUSmhk"},"content":"            break;","lastModifiedDate":"2021-09-04"},{"lineNumber":52,"author":{"gitId":"NUSmhk"},"content":"        case \"invalid event time\":","lastModifiedDate":"2021-09-04"},{"lineNumber":53,"author":{"gitId":"NUSmhk"},"content":"            errorString \u003d \"OOPS!!! Please enter a valid time duration!\"","lastModifiedDate":"2021-09-04"},{"lineNumber":54,"author":{"gitId":"NUSmhk"},"content":"                + \" Valid formats are (HHmm-HHmm or hh:mm a-hh:mm a)\";","lastModifiedDate":"2021-09-04"},{"lineNumber":55,"author":{"gitId":"NUSmhk"},"content":"            break;","lastModifiedDate":"2021-09-04"},{"lineNumber":56,"author":{"gitId":"NUSmhk"},"content":"        default:","lastModifiedDate":"2021-09-04"},{"lineNumber":57,"author":{"gitId":"NUSmhk"},"content":"            assert false : \"Unaccounted exception case\";","lastModifiedDate":"2021-09-04"},{"lineNumber":58,"author":{"gitId":"NUSmhk"},"content":"        }","lastModifiedDate":"2021-09-04"},{"lineNumber":59,"author":{"gitId":"NUSmhk"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":60,"author":{"gitId":"NUSmhk"},"content":"    @Override","lastModifiedDate":"2021-09-04"},{"lineNumber":61,"author":{"gitId":"NUSmhk"},"content":"    public String getMessage() {","lastModifiedDate":"2021-09-04"},{"lineNumber":62,"author":{"gitId":"NUSmhk"},"content":"        return errorString;","lastModifiedDate":"2021-09-04"},{"lineNumber":63,"author":{"gitId":"NUSmhk"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":64,"author":{"gitId":"NUSmhk"},"content":"}","lastModifiedDate":"2021-08-15"}],"authorContributionMap":{"NUSmhk":64}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NUSmhk"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"NUSmhk"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"NUSmhk"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"NUSmhk"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"NUSmhk"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"NUSmhk"},"content":" * This represents a type of task that has a duration.","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"NUSmhk"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"NUSmhk"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-14"},{"lineNumber":11,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":12,"author":{"gitId":"NUSmhk"},"content":"    private LocalTime startTime;","lastModifiedDate":"2021-09-02"},{"lineNumber":13,"author":{"gitId":"NUSmhk"},"content":"    private LocalTime endTime;","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"NUSmhk"},"content":"    private LocalDate date;","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":16,"author":{"gitId":"NUSmhk"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"NUSmhk"},"content":"     * This constructor creates an Event task type object.","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"NUSmhk"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":19,"author":{"gitId":"NUSmhk"},"content":"     * @param input text description of Event task.","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"NUSmhk"},"content":"     * @param date date of occurrence of Event.","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"NUSmhk"},"content":"     * @param startTime start time of Event.","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"NUSmhk"},"content":"     * @param endTime end time of Event.","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"NUSmhk"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"NUSmhk"},"content":"    public Event(String input, LocalDate date, LocalTime startTime, LocalTime endTime) {","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"NUSmhk"},"content":"        super(input);","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"NUSmhk"},"content":"        this.date \u003d date;","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"NUSmhk"},"content":"        this.startTime \u003d startTime;","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"NUSmhk"},"content":"        this.endTime \u003d endTime;","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"NUSmhk"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":30,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":31,"author":{"gitId":"NUSmhk"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"NUSmhk"},"content":"     * This method formats task description and duration in a user-friendly way,","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"NUSmhk"},"content":"     * additionally marking the Event task type with [E].","lastModifiedDate":"2021-09-02"},{"lineNumber":34,"author":{"gitId":"NUSmhk"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":35,"author":{"gitId":"NUSmhk"},"content":"     * @return String of formatted task description and deadline.","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"NUSmhk"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"NUSmhk"},"content":"    @Override","lastModifiedDate":"2021-08-14"},{"lineNumber":38,"author":{"gitId":"NUSmhk"},"content":"    public String toString() {","lastModifiedDate":"2021-08-14"},{"lineNumber":39,"author":{"gitId":"NUSmhk"},"content":"        String date \u003d this.date.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy\"));","lastModifiedDate":"2021-09-02"},{"lineNumber":40,"author":{"gitId":"NUSmhk"},"content":"        String startTime \u003d this.startTime.format(DateTimeFormatter.ofPattern(\"hh:mm a\"));","lastModifiedDate":"2021-09-02"},{"lineNumber":41,"author":{"gitId":"NUSmhk"},"content":"        String endTime \u003d this.endTime.format(DateTimeFormatter.ofPattern(\"hh:mm a\"));","lastModifiedDate":"2021-09-02"},{"lineNumber":42,"author":{"gitId":"NUSmhk"},"content":"        return String.format(\"[E]%s (at: %s from: %s)\", super.toString(), date, startTime + \"-\" + endTime);","lastModifiedDate":"2021-09-02"},{"lineNumber":43,"author":{"gitId":"NUSmhk"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":44,"author":{"gitId":"NUSmhk"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"NUSmhk":44}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NUSmhk"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"NUSmhk"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"NUSmhk"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"NUSmhk"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"NUSmhk"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"NUSmhk"},"content":"import duke.commands.AddCommand;","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"NUSmhk"},"content":"import duke.commands.Command;","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"NUSmhk"},"content":"import duke.commands.DeleteCommand;","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"NUSmhk"},"content":"import duke.commands.DoneCommand;","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"NUSmhk"},"content":"import duke.commands.ExitCommand;","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"NUSmhk"},"content":"import duke.commands.FindCommand;","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"NUSmhk"},"content":"import duke.commands.ListCommand;","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"NUSmhk"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"NUSmhk"},"content":" * Represents a translator that makes sense of user input commands.","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"NUSmhk"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"NUSmhk"},"content":"public class Parser {","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"NUSmhk"},"content":"    private static String detectedFormat;","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"NUSmhk"},"content":"    private static LocalTime startTime;","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"NUSmhk"},"content":"    private static LocalTime endTime;","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"NUSmhk"},"content":"    private static final String[] dateTimeFormats \u003d {","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"NUSmhk"},"content":"        \"dd/MM/yyyy HHmm\",","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"NUSmhk"},"content":"        \"dd-MM-yyyy HHmm\",","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"NUSmhk"},"content":"        \"dd/MM/yyyy hh:mm a\",","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"NUSmhk"},"content":"        \"dd-MM-yyyy hh:mm a\",","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"NUSmhk"},"content":"        \"dd/MM/yyyy HHmm\",","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"NUSmhk"},"content":"        \"dd-MM-yyyy HHmm\",","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"NUSmhk"},"content":"        \"yyyy/MM/dd HHmm\",","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"NUSmhk"},"content":"        \"yyyy-MM-dd HHmm\",","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"NUSmhk"},"content":"        \"yyyy/MM/dd hh:mm a\",","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"NUSmhk"},"content":"        \"yyyy-MM-dd hh:mm a\",","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"NUSmhk"},"content":"        \"yyyy/MM/dd HHmm\",","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"NUSmhk"},"content":"        \"yyyy-MM-dd HHmm\",","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"NUSmhk"},"content":"        \"dd MMM yyyy hh:mm a\"","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"NUSmhk"},"content":"    };","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"NUSmhk"},"content":"    private static final String[] dateFormats \u003d {","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"NUSmhk"},"content":"        \"dd/MM/yyyy\",","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"NUSmhk"},"content":"        \"dd-MM-yyyy\",","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"NUSmhk"},"content":"        \"yyyy/MM/dd\",","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"NUSmhk"},"content":"        \"yyyy-MM-dd\",","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"NUSmhk"},"content":"        \"dd MMM yyyy\"","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"NUSmhk"},"content":"    };","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"NUSmhk"},"content":"    private static final String[] timeFormats \u003d {","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"NUSmhk"},"content":"        \"HHmm\",","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"NUSmhk"},"content":"        \"hh:mm a\"","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"NUSmhk"},"content":"    };","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"NUSmhk"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"NUSmhk"},"content":"     * Takes in the user input as a String and runs checks on it to determine","lastModifiedDate":"2021-09-02"},{"lineNumber":52,"author":{"gitId":"NUSmhk"},"content":"     * the type of command it is.","lastModifiedDate":"2021-09-02"},{"lineNumber":53,"author":{"gitId":"NUSmhk"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":54,"author":{"gitId":"NUSmhk"},"content":"     * @param fullCommand String of user input.","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"NUSmhk"},"content":"     * @param taskList a list to store tasks the user adds or deletes.","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"NUSmhk"},"content":"     * @return Command which Duke bot can execute afterwards.","lastModifiedDate":"2021-08-24"},{"lineNumber":57,"author":{"gitId":"NUSmhk"},"content":"     * @throws DukeException if user input cannot be understood.","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"NUSmhk"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"NUSmhk"},"content":"    public static Command parse(String fullCommand, TaskList taskList) throws DukeException {","lastModifiedDate":"2021-08-24"},{"lineNumber":60,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":61,"author":{"gitId":"NUSmhk"},"content":"        String trimmedCommand \u003d fullCommand.trim();","lastModifiedDate":"2021-09-02"},{"lineNumber":62,"author":{"gitId":"NUSmhk"},"content":"        // Check if it\u0027s empty string","lastModifiedDate":"2021-09-02"},{"lineNumber":63,"author":{"gitId":"NUSmhk"},"content":"        if (trimmedCommand.length() \u003d\u003d 0) {","lastModifiedDate":"2021-09-02"},{"lineNumber":64,"author":{"gitId":"NUSmhk"},"content":"            throw new DukeException(\"empty command\");","lastModifiedDate":"2021-09-04"},{"lineNumber":65,"author":{"gitId":"NUSmhk"},"content":"        }","lastModifiedDate":"2021-09-02"},{"lineNumber":66,"author":{"gitId":"NUSmhk"},"content":"        // Check if it\u0027s at least two words or not","lastModifiedDate":"2021-09-02"},{"lineNumber":67,"author":{"gitId":"NUSmhk"},"content":"        if (!trimmedCommand.contains(\" \")) {","lastModifiedDate":"2021-09-02"},{"lineNumber":68,"author":{"gitId":"NUSmhk"},"content":"            switch (trimmedCommand) {","lastModifiedDate":"2021-09-02"},{"lineNumber":69,"author":{"gitId":"NUSmhk"},"content":"            case \"bye\":","lastModifiedDate":"2021-09-02"},{"lineNumber":70,"author":{"gitId":"NUSmhk"},"content":"                return new ExitCommand();","lastModifiedDate":"2021-08-24"},{"lineNumber":71,"author":{"gitId":"NUSmhk"},"content":"            case \"list\":","lastModifiedDate":"2021-09-02"},{"lineNumber":72,"author":{"gitId":"NUSmhk"},"content":"                return new ListCommand();","lastModifiedDate":"2021-08-24"},{"lineNumber":73,"author":{"gitId":"NUSmhk"},"content":"            default:","lastModifiedDate":"2021-09-02"},{"lineNumber":74,"author":{"gitId":"NUSmhk"},"content":"                throw new DukeException(\"invalid input\");","lastModifiedDate":"2021-09-04"},{"lineNumber":75,"author":{"gitId":"NUSmhk"},"content":"            }","lastModifiedDate":"2021-09-02"},{"lineNumber":76,"author":{"gitId":"NUSmhk"},"content":"        }","lastModifiedDate":"2021-09-02"},{"lineNumber":77,"author":{"gitId":"NUSmhk"},"content":"        // Everything here on has user input of two words or more","lastModifiedDate":"2021-09-02"},{"lineNumber":78,"author":{"gitId":"NUSmhk"},"content":"        String userCommand \u003d fullCommand.split(\" \", 2)[0];","lastModifiedDate":"2021-09-02"},{"lineNumber":79,"author":{"gitId":"NUSmhk"},"content":"        String commandDescription \u003d fullCommand.split(\" \", 2)[1].trim();","lastModifiedDate":"2021-09-02"},{"lineNumber":80,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":81,"author":{"gitId":"NUSmhk"},"content":"        switch (userCommand) {","lastModifiedDate":"2021-09-02"},{"lineNumber":82,"author":{"gitId":"NUSmhk"},"content":"        case \"done\":","lastModifiedDate":"2021-09-02"},{"lineNumber":83,"author":{"gitId":"NUSmhk"},"content":"            return parseDone(commandDescription, taskList);","lastModifiedDate":"2021-09-02"},{"lineNumber":84,"author":{"gitId":"NUSmhk"},"content":"        case \"delete\":","lastModifiedDate":"2021-09-02"},{"lineNumber":85,"author":{"gitId":"NUSmhk"},"content":"            return parseDelete(commandDescription, taskList);","lastModifiedDate":"2021-09-02"},{"lineNumber":86,"author":{"gitId":"NUSmhk"},"content":"        case \"find\":","lastModifiedDate":"2021-09-02"},{"lineNumber":87,"author":{"gitId":"NUSmhk"},"content":"            return parseFind(commandDescription);","lastModifiedDate":"2021-09-04"},{"lineNumber":88,"author":{"gitId":"NUSmhk"},"content":"        case \"todo\":","lastModifiedDate":"2021-09-02"},{"lineNumber":89,"author":{"gitId":"NUSmhk"},"content":"            return parseToDo(commandDescription);","lastModifiedDate":"2021-09-02"},{"lineNumber":90,"author":{"gitId":"NUSmhk"},"content":"        case \"deadline\":","lastModifiedDate":"2021-09-02"},{"lineNumber":91,"author":{"gitId":"NUSmhk"},"content":"            return parseDeadline(commandDescription);","lastModifiedDate":"2021-09-02"},{"lineNumber":92,"author":{"gitId":"NUSmhk"},"content":"        case \"event\":","lastModifiedDate":"2021-09-02"},{"lineNumber":93,"author":{"gitId":"NUSmhk"},"content":"            return parseEvent(commandDescription);","lastModifiedDate":"2021-09-02"},{"lineNumber":94,"author":{"gitId":"NUSmhk"},"content":"        default:","lastModifiedDate":"2021-09-02"},{"lineNumber":95,"author":{"gitId":"NUSmhk"},"content":"            throw new DukeException(\"invalid input\");","lastModifiedDate":"2021-09-04"},{"lineNumber":96,"author":{"gitId":"NUSmhk"},"content":"        }","lastModifiedDate":"2021-09-02"},{"lineNumber":97,"author":{"gitId":"NUSmhk"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":98,"author":{"gitId":"NUSmhk"},"content":"    private static Command parseDone(String input, TaskList taskList) throws DukeException {","lastModifiedDate":"2021-09-02"},{"lineNumber":99,"author":{"gitId":"NUSmhk"},"content":"        assert !input.isEmpty() : \"Empty done event input\";","lastModifiedDate":"2021-09-04"},{"lineNumber":100,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":101,"author":{"gitId":"NUSmhk"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":102,"author":{"gitId":"NUSmhk"},"content":"            int index \u003d Integer.parseInt(input);","lastModifiedDate":"2021-09-02"},{"lineNumber":103,"author":{"gitId":"NUSmhk"},"content":"            boolean isIndexAboveLowerBound \u003d index \u003e 0;","lastModifiedDate":"2021-09-04"},{"lineNumber":104,"author":{"gitId":"NUSmhk"},"content":"            boolean isIndexBelowUpperBound \u003d index \u003c taskList.taskCount() + 1;","lastModifiedDate":"2021-09-04"},{"lineNumber":105,"author":{"gitId":"NUSmhk"},"content":"            boolean isIndexInRange \u003d isIndexAboveLowerBound \u0026\u0026 isIndexBelowUpperBound;","lastModifiedDate":"2021-09-04"},{"lineNumber":106,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":107,"author":{"gitId":"NUSmhk"},"content":"            if (isIndexInRange) {","lastModifiedDate":"2021-09-04"},{"lineNumber":108,"author":{"gitId":"NUSmhk"},"content":"                return new DoneCommand(index);","lastModifiedDate":"2021-08-24"},{"lineNumber":109,"author":{"gitId":"NUSmhk"},"content":"            } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":110,"author":{"gitId":"NUSmhk"},"content":"                throw new DukeException(\"invalid task index\");","lastModifiedDate":"2021-09-04"},{"lineNumber":111,"author":{"gitId":"NUSmhk"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":112,"author":{"gitId":"NUSmhk"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":113,"author":{"gitId":"NUSmhk"},"content":"            throw new DukeException(\"non-integer input\");","lastModifiedDate":"2021-09-04"},{"lineNumber":114,"author":{"gitId":"NUSmhk"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":115,"author":{"gitId":"NUSmhk"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":116,"author":{"gitId":"NUSmhk"},"content":"    private static Command parseDelete(String input, TaskList taskList) throws DukeException {","lastModifiedDate":"2021-09-02"},{"lineNumber":117,"author":{"gitId":"NUSmhk"},"content":"        assert !input.isEmpty() : \"Empty delete event input\";","lastModifiedDate":"2021-09-04"},{"lineNumber":118,"author":{"gitId":"NUSmhk"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":119,"author":{"gitId":"NUSmhk"},"content":"            int index \u003d Integer.parseInt(input);","lastModifiedDate":"2021-09-02"},{"lineNumber":120,"author":{"gitId":"NUSmhk"},"content":"            boolean isIndexAboveLowerBound \u003d index \u003e 0;","lastModifiedDate":"2021-09-04"},{"lineNumber":121,"author":{"gitId":"NUSmhk"},"content":"            boolean isIndexBelowUpperBound \u003d index \u003c taskList.taskCount() + 1;","lastModifiedDate":"2021-09-04"},{"lineNumber":122,"author":{"gitId":"NUSmhk"},"content":"            boolean isIndexInRange \u003d isIndexAboveLowerBound \u0026\u0026 isIndexBelowUpperBound;","lastModifiedDate":"2021-09-04"},{"lineNumber":123,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":124,"author":{"gitId":"NUSmhk"},"content":"            if (isIndexInRange) {","lastModifiedDate":"2021-09-04"},{"lineNumber":125,"author":{"gitId":"NUSmhk"},"content":"                return new DeleteCommand(index);","lastModifiedDate":"2021-08-24"},{"lineNumber":126,"author":{"gitId":"NUSmhk"},"content":"            } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":127,"author":{"gitId":"NUSmhk"},"content":"                throw new DukeException(\"invalid task index\");","lastModifiedDate":"2021-09-04"},{"lineNumber":128,"author":{"gitId":"NUSmhk"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":129,"author":{"gitId":"NUSmhk"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":130,"author":{"gitId":"NUSmhk"},"content":"            throw new DukeException(\"non-integer input\");","lastModifiedDate":"2021-09-04"},{"lineNumber":131,"author":{"gitId":"NUSmhk"},"content":"        }","lastModifiedDate":"2021-09-04"},{"lineNumber":132,"author":{"gitId":"NUSmhk"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":133,"author":{"gitId":"NUSmhk"},"content":"    private static Command parseFind(String input) throws DukeException {","lastModifiedDate":"2021-09-04"},{"lineNumber":134,"author":{"gitId":"NUSmhk"},"content":"        if (input.isEmpty()) {","lastModifiedDate":"2021-09-04"},{"lineNumber":135,"author":{"gitId":"NUSmhk"},"content":"            throw new DukeException(\"empty search term\");","lastModifiedDate":"2021-09-04"},{"lineNumber":136,"author":{"gitId":"NUSmhk"},"content":"        } else {","lastModifiedDate":"2021-09-04"},{"lineNumber":137,"author":{"gitId":"NUSmhk"},"content":"            return new FindCommand(input);","lastModifiedDate":"2021-09-04"},{"lineNumber":138,"author":{"gitId":"NUSmhk"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":139,"author":{"gitId":"NUSmhk"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":140,"author":{"gitId":"NUSmhk"},"content":"    private static Command parseToDo(String input) throws DukeException {","lastModifiedDate":"2021-08-24"},{"lineNumber":141,"author":{"gitId":"NUSmhk"},"content":"        assert !input.isEmpty() : \"Empty toDo event input\";","lastModifiedDate":"2021-09-04"},{"lineNumber":142,"author":{"gitId":"NUSmhk"},"content":"        if (input.trim().isEmpty()) {","lastModifiedDate":"2021-08-24"},{"lineNumber":143,"author":{"gitId":"NUSmhk"},"content":"            throw new DukeException(\"empty todo description\");","lastModifiedDate":"2021-09-04"},{"lineNumber":144,"author":{"gitId":"NUSmhk"},"content":"        } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":145,"author":{"gitId":"NUSmhk"},"content":"            return new AddCommand(input.trim(), \"todo\");","lastModifiedDate":"2021-08-24"},{"lineNumber":146,"author":{"gitId":"NUSmhk"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":147,"author":{"gitId":"NUSmhk"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":148,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":149,"author":{"gitId":"NUSmhk"},"content":"    private static Command parseDeadline(String input) throws DukeException {","lastModifiedDate":"2021-08-24"},{"lineNumber":150,"author":{"gitId":"NUSmhk"},"content":"        assert !input.isEmpty() : \"Empty deadline event input\";","lastModifiedDate":"2021-09-04"},{"lineNumber":151,"author":{"gitId":"NUSmhk"},"content":"        if (!input.contains(\"/by\")) {","lastModifiedDate":"2021-09-02"},{"lineNumber":152,"author":{"gitId":"NUSmhk"},"content":"            throw new DukeException(\"empty deadline deadline\");","lastModifiedDate":"2021-09-04"},{"lineNumber":153,"author":{"gitId":"NUSmhk"},"content":"        }","lastModifiedDate":"2021-09-02"},{"lineNumber":154,"author":{"gitId":"NUSmhk"},"content":"        String description \u003d input.split(\"/by\", 2)[0].trim();","lastModifiedDate":"2021-08-24"},{"lineNumber":155,"author":{"gitId":"NUSmhk"},"content":"        String dateAndTime \u003d input.split(\"/by\", 2)[1].trim();","lastModifiedDate":"2021-08-24"},{"lineNumber":156,"author":{"gitId":"NUSmhk"},"content":"        if (description.isEmpty()) {","lastModifiedDate":"2021-08-24"},{"lineNumber":157,"author":{"gitId":"NUSmhk"},"content":"            throw new DukeException(\"empty deadline description\");","lastModifiedDate":"2021-09-04"},{"lineNumber":158,"author":{"gitId":"NUSmhk"},"content":"        } else if (dateAndTime.isEmpty()) {","lastModifiedDate":"2021-08-24"},{"lineNumber":159,"author":{"gitId":"NUSmhk"},"content":"            throw new DukeException(\"empty deadline deadline\");","lastModifiedDate":"2021-09-04"},{"lineNumber":160,"author":{"gitId":"NUSmhk"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":161,"author":{"gitId":"NUSmhk"},"content":"        if (isDateTime(dateAndTime)) {","lastModifiedDate":"2021-08-24"},{"lineNumber":162,"author":{"gitId":"NUSmhk"},"content":"            DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(detectedFormat);","lastModifiedDate":"2021-09-04"},{"lineNumber":163,"author":{"gitId":"NUSmhk"},"content":"            LocalDateTime dateTimeObj \u003d LocalDateTime.parse(dateAndTime, format);","lastModifiedDate":"2021-09-04"},{"lineNumber":164,"author":{"gitId":"NUSmhk"},"content":"            return new AddCommand(description, dateTimeObj, \"deadline\");","lastModifiedDate":"2021-08-24"},{"lineNumber":165,"author":{"gitId":"NUSmhk"},"content":"        } else if (isDate(dateAndTime)) {","lastModifiedDate":"2021-08-24"},{"lineNumber":166,"author":{"gitId":"NUSmhk"},"content":"            DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(detectedFormat);","lastModifiedDate":"2021-09-04"},{"lineNumber":167,"author":{"gitId":"NUSmhk"},"content":"            LocalDate dateObj \u003d LocalDate.parse(dateAndTime, format);","lastModifiedDate":"2021-09-04"},{"lineNumber":168,"author":{"gitId":"NUSmhk"},"content":"            return new AddCommand(description, dateObj, \"deadline\");","lastModifiedDate":"2021-08-24"},{"lineNumber":169,"author":{"gitId":"NUSmhk"},"content":"        } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":170,"author":{"gitId":"NUSmhk"},"content":"            throw new DukeException(\"invalid deadline\");","lastModifiedDate":"2021-09-04"},{"lineNumber":171,"author":{"gitId":"NUSmhk"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":172,"author":{"gitId":"NUSmhk"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":173,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":174,"author":{"gitId":"NUSmhk"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":175,"author":{"gitId":"NUSmhk"},"content":"     * This method reads the stored String of text file in the Hard Disk which corresponds to a","lastModifiedDate":"2021-08-24"},{"lineNumber":176,"author":{"gitId":"NUSmhk"},"content":"     * Deadline type task and transforms it into a Deadline task object.","lastModifiedDate":"2021-08-24"},{"lineNumber":177,"author":{"gitId":"NUSmhk"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":178,"author":{"gitId":"NUSmhk"},"content":"     * @param input String from text file.","lastModifiedDate":"2021-08-24"},{"lineNumber":179,"author":{"gitId":"NUSmhk"},"content":"     * @return Task that is of Deadline type.","lastModifiedDate":"2021-08-24"},{"lineNumber":180,"author":{"gitId":"NUSmhk"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":181,"author":{"gitId":"NUSmhk"},"content":"    public static Task parseDeadlineFromFile(String input) {","lastModifiedDate":"2021-08-24"},{"lineNumber":182,"author":{"gitId":"NUSmhk"},"content":"        String description \u003d input.split(\"\\\\(\", 2)[0].trim();","lastModifiedDate":"2021-08-24"},{"lineNumber":183,"author":{"gitId":"NUSmhk"},"content":"        String returnDate \u003d input.substring(input.indexOf(\":\") + 2, input.indexOf(\")\"));","lastModifiedDate":"2021-08-24"},{"lineNumber":184,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":185,"author":{"gitId":"NUSmhk"},"content":"        if (isDateTime(returnDate)) {","lastModifiedDate":"2021-08-24"},{"lineNumber":186,"author":{"gitId":"NUSmhk"},"content":"            DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(detectedFormat);","lastModifiedDate":"2021-09-04"},{"lineNumber":187,"author":{"gitId":"NUSmhk"},"content":"            LocalDateTime dateTimeObj \u003d LocalDateTime.parse(returnDate, format);","lastModifiedDate":"2021-09-04"},{"lineNumber":188,"author":{"gitId":"NUSmhk"},"content":"            return new Deadline(description, dateTimeObj);","lastModifiedDate":"2021-08-24"},{"lineNumber":189,"author":{"gitId":"NUSmhk"},"content":"        } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":190,"author":{"gitId":"NUSmhk"},"content":"            isDate(returnDate);","lastModifiedDate":"2021-08-24"},{"lineNumber":191,"author":{"gitId":"NUSmhk"},"content":"            DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(detectedFormat);","lastModifiedDate":"2021-09-04"},{"lineNumber":192,"author":{"gitId":"NUSmhk"},"content":"            LocalDate dateObj \u003d LocalDate.parse(returnDate, format);","lastModifiedDate":"2021-09-04"},{"lineNumber":193,"author":{"gitId":"NUSmhk"},"content":"            return new Deadline(description, dateObj);","lastModifiedDate":"2021-08-24"},{"lineNumber":194,"author":{"gitId":"NUSmhk"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":195,"author":{"gitId":"NUSmhk"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":196,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":197,"author":{"gitId":"NUSmhk"},"content":"    private static Command parseEvent(String input) throws DukeException {","lastModifiedDate":"2021-08-24"},{"lineNumber":198,"author":{"gitId":"NUSmhk"},"content":"        assert !input.isEmpty() : \"Empty event event input\";","lastModifiedDate":"2021-09-04"},{"lineNumber":199,"author":{"gitId":"NUSmhk"},"content":"        if (!input.contains(\"/at\")) {","lastModifiedDate":"2021-09-02"},{"lineNumber":200,"author":{"gitId":"NUSmhk"},"content":"            throw new DukeException(\"empty event duration\");","lastModifiedDate":"2021-09-04"},{"lineNumber":201,"author":{"gitId":"NUSmhk"},"content":"        }","lastModifiedDate":"2021-09-02"},{"lineNumber":202,"author":{"gitId":"NUSmhk"},"content":"        String description \u003d input.split(\"/at\", 2)[0].trim();","lastModifiedDate":"2021-08-24"},{"lineNumber":203,"author":{"gitId":"NUSmhk"},"content":"        String dateAndTimeDuration \u003d input.split(\"/at\", 2)[1].trim();","lastModifiedDate":"2021-08-24"},{"lineNumber":204,"author":{"gitId":"NUSmhk"},"content":"        if (description.isEmpty()) {","lastModifiedDate":"2021-08-24"},{"lineNumber":205,"author":{"gitId":"NUSmhk"},"content":"            throw new DukeException(\"empty event description\");","lastModifiedDate":"2021-09-04"},{"lineNumber":206,"author":{"gitId":"NUSmhk"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":207,"author":{"gitId":"NUSmhk"},"content":"        if (!dateAndTimeDuration.contains(\" \")) {","lastModifiedDate":"2021-09-02"},{"lineNumber":208,"author":{"gitId":"NUSmhk"},"content":"            throw new DukeException(\"empty event duration\");","lastModifiedDate":"2021-09-04"},{"lineNumber":209,"author":{"gitId":"NUSmhk"},"content":"        }","lastModifiedDate":"2021-09-02"},{"lineNumber":210,"author":{"gitId":"NUSmhk"},"content":"        String date \u003d dateAndTimeDuration.split(\" \", 2)[0];","lastModifiedDate":"2021-08-24"},{"lineNumber":211,"author":{"gitId":"NUSmhk"},"content":"        String timeDuration \u003d dateAndTimeDuration.split(\" \", 2)[1];","lastModifiedDate":"2021-08-24"},{"lineNumber":212,"author":{"gitId":"NUSmhk"},"content":"        if (!isDate(date)) {","lastModifiedDate":"2021-09-02"},{"lineNumber":213,"author":{"gitId":"NUSmhk"},"content":"            throw new DukeException(\"invalid event date\");","lastModifiedDate":"2021-09-04"},{"lineNumber":214,"author":{"gitId":"NUSmhk"},"content":"        }","lastModifiedDate":"2021-09-02"},{"lineNumber":215,"author":{"gitId":"NUSmhk"},"content":"        LocalDate eventDate \u003d LocalDate.parse(date, DateTimeFormatter.ofPattern(detectedFormat));","lastModifiedDate":"2021-09-02"},{"lineNumber":216,"author":{"gitId":"NUSmhk"},"content":"        if (isDuration(timeDuration)) {","lastModifiedDate":"2021-08-24"},{"lineNumber":217,"author":{"gitId":"NUSmhk"},"content":"            return new AddCommand(description, eventDate, startTime, endTime, \"event\");","lastModifiedDate":"2021-08-24"},{"lineNumber":218,"author":{"gitId":"NUSmhk"},"content":"        } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":219,"author":{"gitId":"NUSmhk"},"content":"            throw new DukeException(\"invalid event time\");","lastModifiedDate":"2021-09-04"},{"lineNumber":220,"author":{"gitId":"NUSmhk"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":221,"author":{"gitId":"NUSmhk"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":222,"author":{"gitId":"NUSmhk"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":223,"author":{"gitId":"NUSmhk"},"content":"     * This method reads the stored String of text file in the Hard Disk which corresponds to a","lastModifiedDate":"2021-08-24"},{"lineNumber":224,"author":{"gitId":"NUSmhk"},"content":"     * Event type task and transforms it into an Event task object.","lastModifiedDate":"2021-08-24"},{"lineNumber":225,"author":{"gitId":"NUSmhk"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":226,"author":{"gitId":"NUSmhk"},"content":"     * @param input String from text file.","lastModifiedDate":"2021-08-24"},{"lineNumber":227,"author":{"gitId":"NUSmhk"},"content":"     * @return Task that is of Event type.","lastModifiedDate":"2021-08-24"},{"lineNumber":228,"author":{"gitId":"NUSmhk"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":229,"author":{"gitId":"NUSmhk"},"content":"    public static Task parseEventFromFile(String input) {","lastModifiedDate":"2021-08-24"},{"lineNumber":230,"author":{"gitId":"NUSmhk"},"content":"        String description \u003d input.split(\"\\\\(\", 2)[0].trim();","lastModifiedDate":"2021-08-24"},{"lineNumber":231,"author":{"gitId":"NUSmhk"},"content":"        String dateTimeDuration \u003d input.substring(input.indexOf(\":\") + 2, input.indexOf(\")\"));","lastModifiedDate":"2021-08-24"},{"lineNumber":232,"author":{"gitId":"NUSmhk"},"content":"        String date \u003d dateTimeDuration.split(\" from: \")[0];","lastModifiedDate":"2021-08-24"},{"lineNumber":233,"author":{"gitId":"NUSmhk"},"content":"        String timeDuration \u003d dateTimeDuration.split(\" from: \")[1];","lastModifiedDate":"2021-08-24"},{"lineNumber":234,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":235,"author":{"gitId":"NUSmhk"},"content":"        isDate(date);","lastModifiedDate":"2021-08-24"},{"lineNumber":236,"author":{"gitId":"NUSmhk"},"content":"        LocalDate eventDate \u003d LocalDate.parse(date, DateTimeFormatter.ofPattern(detectedFormat));","lastModifiedDate":"2021-08-24"},{"lineNumber":237,"author":{"gitId":"NUSmhk"},"content":"        isDuration(timeDuration);","lastModifiedDate":"2021-08-24"},{"lineNumber":238,"author":{"gitId":"NUSmhk"},"content":"        return new Event(description, eventDate, startTime, endTime);","lastModifiedDate":"2021-08-24"},{"lineNumber":239,"author":{"gitId":"NUSmhk"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":240,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":241,"author":{"gitId":"NUSmhk"},"content":"    private static boolean isDateTime(String dateTimeString) {","lastModifiedDate":"2021-08-24"},{"lineNumber":242,"author":{"gitId":"NUSmhk"},"content":"        boolean isDateAndTime \u003d false;","lastModifiedDate":"2021-08-24"},{"lineNumber":243,"author":{"gitId":"NUSmhk"},"content":"        assert !dateTimeString.isEmpty() : \"Empty dateTime input\";","lastModifiedDate":"2021-09-04"},{"lineNumber":244,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":245,"author":{"gitId":"NUSmhk"},"content":"        for (String i : dateTimeFormats) {","lastModifiedDate":"2021-08-24"},{"lineNumber":246,"author":{"gitId":"NUSmhk"},"content":"            try {","lastModifiedDate":"2021-08-24"},{"lineNumber":247,"author":{"gitId":"NUSmhk"},"content":"                LocalDateTime.parse(dateTimeString, DateTimeFormatter.ofPattern(i));","lastModifiedDate":"2021-08-24"},{"lineNumber":248,"author":{"gitId":"NUSmhk"},"content":"                detectedFormat \u003d i;","lastModifiedDate":"2021-08-24"},{"lineNumber":249,"author":{"gitId":"NUSmhk"},"content":"                isDateAndTime \u003d true;","lastModifiedDate":"2021-08-24"},{"lineNumber":250,"author":{"gitId":"NUSmhk"},"content":"            } catch (Exception e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":251,"author":{"gitId":"NUSmhk"},"content":"                String exception \u003d e.getMessage();","lastModifiedDate":"2021-08-28"},{"lineNumber":252,"author":{"gitId":"NUSmhk"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":253,"author":{"gitId":"NUSmhk"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":254,"author":{"gitId":"NUSmhk"},"content":"        return isDateAndTime;","lastModifiedDate":"2021-08-24"},{"lineNumber":255,"author":{"gitId":"NUSmhk"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":256,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":257,"author":{"gitId":"NUSmhk"},"content":"    private static boolean isDate(String dateString) {","lastModifiedDate":"2021-08-24"},{"lineNumber":258,"author":{"gitId":"NUSmhk"},"content":"        boolean isDate \u003d false;","lastModifiedDate":"2021-08-24"},{"lineNumber":259,"author":{"gitId":"NUSmhk"},"content":"        assert !dateString.isEmpty() : \"Empty dateString input\";","lastModifiedDate":"2021-09-04"},{"lineNumber":260,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":261,"author":{"gitId":"NUSmhk"},"content":"        for (String i : dateFormats) {","lastModifiedDate":"2021-08-24"},{"lineNumber":262,"author":{"gitId":"NUSmhk"},"content":"            try {","lastModifiedDate":"2021-08-24"},{"lineNumber":263,"author":{"gitId":"NUSmhk"},"content":"                LocalDate.parse(dateString, DateTimeFormatter.ofPattern(i));","lastModifiedDate":"2021-08-24"},{"lineNumber":264,"author":{"gitId":"NUSmhk"},"content":"                detectedFormat \u003d i;","lastModifiedDate":"2021-08-24"},{"lineNumber":265,"author":{"gitId":"NUSmhk"},"content":"                isDate \u003d true;","lastModifiedDate":"2021-08-24"},{"lineNumber":266,"author":{"gitId":"NUSmhk"},"content":"            } catch (Exception e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":267,"author":{"gitId":"NUSmhk"},"content":"                String exception \u003d e.getMessage();","lastModifiedDate":"2021-08-28"},{"lineNumber":268,"author":{"gitId":"NUSmhk"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":269,"author":{"gitId":"NUSmhk"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":270,"author":{"gitId":"NUSmhk"},"content":"        return isDate;","lastModifiedDate":"2021-08-24"},{"lineNumber":271,"author":{"gitId":"NUSmhk"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":272,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":273,"author":{"gitId":"NUSmhk"},"content":"    private static boolean isDuration (String duration) {","lastModifiedDate":"2021-08-24"},{"lineNumber":274,"author":{"gitId":"NUSmhk"},"content":"        assert !duration.isEmpty() : \"Empty duration input\";","lastModifiedDate":"2021-09-04"},{"lineNumber":275,"author":{"gitId":"NUSmhk"},"content":"        if (duration.contains(\"-\")) {","lastModifiedDate":"2021-08-24"},{"lineNumber":276,"author":{"gitId":"NUSmhk"},"content":"            String start \u003d duration.split(\"-\", 2)[0];","lastModifiedDate":"2021-08-24"},{"lineNumber":277,"author":{"gitId":"NUSmhk"},"content":"            String end \u003d duration.split(\"-\", 2)[1];","lastModifiedDate":"2021-08-24"},{"lineNumber":278,"author":{"gitId":"NUSmhk"},"content":"            boolean isStartATime \u003d false;","lastModifiedDate":"2021-09-04"},{"lineNumber":279,"author":{"gitId":"NUSmhk"},"content":"            boolean isEndATime \u003d false;","lastModifiedDate":"2021-09-04"},{"lineNumber":280,"author":{"gitId":"NUSmhk"},"content":"            for (String i : timeFormats) {","lastModifiedDate":"2021-08-24"},{"lineNumber":281,"author":{"gitId":"NUSmhk"},"content":"                try {","lastModifiedDate":"2021-08-24"},{"lineNumber":282,"author":{"gitId":"NUSmhk"},"content":"                    startTime \u003d LocalTime.parse(start, DateTimeFormatter.ofPattern(i));","lastModifiedDate":"2021-08-24"},{"lineNumber":283,"author":{"gitId":"NUSmhk"},"content":"                    isStartATime \u003d true;","lastModifiedDate":"2021-09-04"},{"lineNumber":284,"author":{"gitId":"NUSmhk"},"content":"                } catch (Exception e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":285,"author":{"gitId":"NUSmhk"},"content":"                    String exception \u003d e.getMessage();","lastModifiedDate":"2021-08-28"},{"lineNumber":286,"author":{"gitId":"NUSmhk"},"content":"                }","lastModifiedDate":"2021-08-24"},{"lineNumber":287,"author":{"gitId":"NUSmhk"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":288,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":289,"author":{"gitId":"NUSmhk"},"content":"            for (String i : timeFormats) {","lastModifiedDate":"2021-08-24"},{"lineNumber":290,"author":{"gitId":"NUSmhk"},"content":"                try {","lastModifiedDate":"2021-08-24"},{"lineNumber":291,"author":{"gitId":"NUSmhk"},"content":"                    endTime \u003d LocalTime.parse(end, DateTimeFormatter.ofPattern(i));","lastModifiedDate":"2021-08-24"},{"lineNumber":292,"author":{"gitId":"NUSmhk"},"content":"                    isEndATime \u003d true;","lastModifiedDate":"2021-09-04"},{"lineNumber":293,"author":{"gitId":"NUSmhk"},"content":"                } catch (Exception e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":294,"author":{"gitId":"NUSmhk"},"content":"                    String exception \u003d e.getMessage();","lastModifiedDate":"2021-08-28"},{"lineNumber":295,"author":{"gitId":"NUSmhk"},"content":"                }","lastModifiedDate":"2021-08-24"},{"lineNumber":296,"author":{"gitId":"NUSmhk"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":297,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":298,"author":{"gitId":"NUSmhk"},"content":"            return isStartATime \u0026\u0026 isEndATime;","lastModifiedDate":"2021-09-04"},{"lineNumber":299,"author":{"gitId":"NUSmhk"},"content":"        } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":300,"author":{"gitId":"NUSmhk"},"content":"            return false;","lastModifiedDate":"2021-08-24"},{"lineNumber":301,"author":{"gitId":"NUSmhk"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":302,"author":{"gitId":"NUSmhk"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":303,"author":{"gitId":"NUSmhk"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"NUSmhk":303}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NUSmhk"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"NUSmhk"},"content":"import java.io.File;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"NUSmhk"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"NUSmhk"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"NUSmhk"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"NUSmhk"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"NUSmhk"},"content":"import java.util.List;","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"NUSmhk"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"NUSmhk"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"NUSmhk"},"content":" * This represents a storage place where all the tasks are stored.","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"NUSmhk"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"NUSmhk"},"content":"public class Storage {","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"NUSmhk"},"content":"    private File savedTextTasks;","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"NUSmhk"},"content":"    private String filePath;","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"NUSmhk"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"NUSmhk"},"content":"     * This is a constructor for Storage which creates a text file to use as a Hard Disk","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"NUSmhk"},"content":"     * storage based on the file path provided.","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"NUSmhk"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":23,"author":{"gitId":"NUSmhk"},"content":"     * @param filePath file path for creation of text file.","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"NUSmhk"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"NUSmhk"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"NUSmhk"},"content":"        savedTextTasks \u003d new File(filePath);","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"NUSmhk"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"NUSmhk"},"content":"        if (!savedTextTasks.exists()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"NUSmhk"},"content":"            try {","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"NUSmhk"},"content":"                savedTextTasks.createNewFile();","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"NUSmhk"},"content":"            } catch (IOException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"NUSmhk"},"content":"                System.out.println(\"Error creating file: \" + e.getMessage());","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"NUSmhk"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"NUSmhk"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"NUSmhk"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"NUSmhk"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"NUSmhk"},"content":"     * This method takes the input String and rewrites the entire text file.","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"NUSmhk"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":41,"author":{"gitId":"NUSmhk"},"content":"     * @param content String that is written onto the text file.","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"NUSmhk"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"NUSmhk"},"content":"    public void writeToStorage(String content) {","lastModifiedDate":"2021-08-23"},{"lineNumber":44,"author":{"gitId":"NUSmhk"},"content":"        try {","lastModifiedDate":"2021-08-23"},{"lineNumber":45,"author":{"gitId":"NUSmhk"},"content":"            FileWriter fw \u003d new FileWriter(filePath);","lastModifiedDate":"2021-08-23"},{"lineNumber":46,"author":{"gitId":"NUSmhk"},"content":"            fw.write(content);","lastModifiedDate":"2021-08-23"},{"lineNumber":47,"author":{"gitId":"NUSmhk"},"content":"            fw.close();","lastModifiedDate":"2021-08-23"},{"lineNumber":48,"author":{"gitId":"NUSmhk"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":49,"author":{"gitId":"NUSmhk"},"content":"            System.out.println(\"Error writing to file: \" + e.getMessage());","lastModifiedDate":"2021-08-23"},{"lineNumber":50,"author":{"gitId":"NUSmhk"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":51,"author":{"gitId":"NUSmhk"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":52,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":53,"author":{"gitId":"NUSmhk"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"NUSmhk"},"content":"     * This method makes sense of the String in the Hard Disk text file and adds stored tasks.","lastModifiedDate":"2021-09-02"},{"lineNumber":55,"author":{"gitId":"NUSmhk"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":56,"author":{"gitId":"NUSmhk"},"content":"     * @return an ArrayList of Task objects.","lastModifiedDate":"2021-08-24"},{"lineNumber":57,"author":{"gitId":"NUSmhk"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"NUSmhk"},"content":"    public List\u003cTask\u003e readFromStorage() {","lastModifiedDate":"2021-08-23"},{"lineNumber":59,"author":{"gitId":"NUSmhk"},"content":"        List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-23"},{"lineNumber":60,"author":{"gitId":"NUSmhk"},"content":"        try {","lastModifiedDate":"2021-08-23"},{"lineNumber":61,"author":{"gitId":"NUSmhk"},"content":"            Scanner textFileContent \u003d new Scanner(savedTextTasks);","lastModifiedDate":"2021-08-23"},{"lineNumber":62,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":63,"author":{"gitId":"NUSmhk"},"content":"            while (textFileContent.hasNext()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":64,"author":{"gitId":"NUSmhk"},"content":"                String eachLine \u003d textFileContent.nextLine();","lastModifiedDate":"2021-08-23"},{"lineNumber":65,"author":{"gitId":"NUSmhk"},"content":"                char taskType \u003d eachLine.split(\"\\\\[\", 2)[1].charAt(0);","lastModifiedDate":"2021-08-24"},{"lineNumber":66,"author":{"gitId":"NUSmhk"},"content":"                char taskDone \u003d eachLine.split(\"]\\\\[\", 2)[1].charAt(0);","lastModifiedDate":"2021-08-24"},{"lineNumber":67,"author":{"gitId":"NUSmhk"},"content":"                String taskDescription \u003d eachLine.split(\"] \", 2)[1].trim();","lastModifiedDate":"2021-08-24"},{"lineNumber":68,"author":{"gitId":"NUSmhk"},"content":"                taskList.add(createTask(taskType, taskDone, taskDescription));","lastModifiedDate":"2021-08-24"},{"lineNumber":69,"author":{"gitId":"NUSmhk"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":70,"author":{"gitId":"NUSmhk"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":71,"author":{"gitId":"NUSmhk"},"content":"            System.out.println(\"Error finding file: \" + e.getMessage());","lastModifiedDate":"2021-08-23"},{"lineNumber":72,"author":{"gitId":"NUSmhk"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":73,"author":{"gitId":"NUSmhk"},"content":"        return taskList;","lastModifiedDate":"2021-08-23"},{"lineNumber":74,"author":{"gitId":"NUSmhk"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":75,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":76,"author":{"gitId":"NUSmhk"},"content":"    private static Task createTask(char taskType, char taskDone, String taskDescription) {","lastModifiedDate":"2021-08-24"},{"lineNumber":77,"author":{"gitId":"NUSmhk"},"content":"        Task createdTask \u003d new Task(\"Created\");","lastModifiedDate":"2021-08-24"},{"lineNumber":78,"author":{"gitId":"NUSmhk"},"content":"        boolean isDone \u003d (taskDone \u003d\u003d \u0027X\u0027);","lastModifiedDate":"2021-08-24"},{"lineNumber":79,"author":{"gitId":"NUSmhk"},"content":"        assert !taskDescription.isEmpty() : \"task description is empty\";","lastModifiedDate":"2021-09-04"},{"lineNumber":80,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":81,"author":{"gitId":"NUSmhk"},"content":"        switch (taskType) {","lastModifiedDate":"2021-08-24"},{"lineNumber":82,"author":{"gitId":"NUSmhk"},"content":"        case \u0027T\u0027:","lastModifiedDate":"2021-08-24"},{"lineNumber":83,"author":{"gitId":"NUSmhk"},"content":"            Task taskToDo \u003d new ToDo(taskDescription);","lastModifiedDate":"2021-08-24"},{"lineNumber":84,"author":{"gitId":"NUSmhk"},"content":"            if (isDone) {","lastModifiedDate":"2021-08-24"},{"lineNumber":85,"author":{"gitId":"NUSmhk"},"content":"                taskToDo.setDone();","lastModifiedDate":"2021-08-24"},{"lineNumber":86,"author":{"gitId":"NUSmhk"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":87,"author":{"gitId":"NUSmhk"},"content":"            createdTask \u003d taskToDo;","lastModifiedDate":"2021-08-24"},{"lineNumber":88,"author":{"gitId":"NUSmhk"},"content":"            break;","lastModifiedDate":"2021-08-24"},{"lineNumber":89,"author":{"gitId":"NUSmhk"},"content":"        case \u0027D\u0027:","lastModifiedDate":"2021-08-24"},{"lineNumber":90,"author":{"gitId":"NUSmhk"},"content":"            Task taskDeadline \u003d Parser.parseDeadlineFromFile(taskDescription);","lastModifiedDate":"2021-08-24"},{"lineNumber":91,"author":{"gitId":"NUSmhk"},"content":"            if (isDone) {","lastModifiedDate":"2021-08-24"},{"lineNumber":92,"author":{"gitId":"NUSmhk"},"content":"                taskDeadline.setDone();","lastModifiedDate":"2021-08-24"},{"lineNumber":93,"author":{"gitId":"NUSmhk"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":94,"author":{"gitId":"NUSmhk"},"content":"            createdTask \u003d taskDeadline;","lastModifiedDate":"2021-08-24"},{"lineNumber":95,"author":{"gitId":"NUSmhk"},"content":"            break;","lastModifiedDate":"2021-08-24"},{"lineNumber":96,"author":{"gitId":"NUSmhk"},"content":"        case \u0027E\u0027:","lastModifiedDate":"2021-08-24"},{"lineNumber":97,"author":{"gitId":"NUSmhk"},"content":"            Task taskEvent \u003d Parser.parseEventFromFile(taskDescription);","lastModifiedDate":"2021-08-24"},{"lineNumber":98,"author":{"gitId":"NUSmhk"},"content":"            if (isDone) {","lastModifiedDate":"2021-08-24"},{"lineNumber":99,"author":{"gitId":"NUSmhk"},"content":"                taskEvent.setDone();","lastModifiedDate":"2021-08-24"},{"lineNumber":100,"author":{"gitId":"NUSmhk"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":101,"author":{"gitId":"NUSmhk"},"content":"            createdTask \u003d taskEvent;","lastModifiedDate":"2021-08-24"},{"lineNumber":102,"author":{"gitId":"NUSmhk"},"content":"            break;","lastModifiedDate":"2021-08-24"},{"lineNumber":103,"author":{"gitId":"NUSmhk"},"content":"        default:","lastModifiedDate":"2021-08-28"},{"lineNumber":104,"author":{"gitId":"NUSmhk"},"content":"            assert false : taskType;","lastModifiedDate":"2021-09-04"},{"lineNumber":105,"author":{"gitId":"NUSmhk"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":106,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":107,"author":{"gitId":"NUSmhk"},"content":"        return createdTask;","lastModifiedDate":"2021-08-24"},{"lineNumber":108,"author":{"gitId":"NUSmhk"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":109,"author":{"gitId":"NUSmhk"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"NUSmhk":109}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NUSmhk"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"NUSmhk"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"NUSmhk"},"content":" * This represents the parent class of all type of tasks Duke handles.","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"NUSmhk"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"NUSmhk"},"content":"public class Task {","lastModifiedDate":"2021-08-14"},{"lineNumber":7,"author":{"gitId":"NUSmhk"},"content":"    protected String description;","lastModifiedDate":"2021-08-14"},{"lineNumber":8,"author":{"gitId":"NUSmhk"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-14"},{"lineNumber":9,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":10,"author":{"gitId":"NUSmhk"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"NUSmhk"},"content":"     * This constructor creates a Task object which contains the description of task.","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"NUSmhk"},"content":"     * The task can either be considered done or not according to user command.","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"NUSmhk"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"NUSmhk"},"content":"     * @param description text description of a general task.","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"NUSmhk"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"NUSmhk"},"content":"    public Task(String description) {","lastModifiedDate":"2021-08-14"},{"lineNumber":17,"author":{"gitId":"NUSmhk"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-14"},{"lineNumber":18,"author":{"gitId":"NUSmhk"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-14"},{"lineNumber":19,"author":{"gitId":"NUSmhk"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":20,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":21,"author":{"gitId":"NUSmhk"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"NUSmhk"},"content":"     * This method marks the task as done.","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"NUSmhk"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"NUSmhk"},"content":"    public void setDone() {","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"NUSmhk"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-08-14"},{"lineNumber":26,"author":{"gitId":"NUSmhk"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":27,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":28,"author":{"gitId":"NUSmhk"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"NUSmhk"},"content":"     * This method formats task description by marking tasks that are done with a \u0027X\u0027 and","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"NUSmhk"},"content":"     * leaving it blank if the task is not considered done.","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"NUSmhk"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":32,"author":{"gitId":"NUSmhk"},"content":"     * @return String of formatted task description and if task is marked done.","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"NUSmhk"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"NUSmhk"},"content":"    public String getDescription() {","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"NUSmhk"},"content":"        return description;","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"NUSmhk"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"NUSmhk"},"content":"    @Override","lastModifiedDate":"2021-08-14"},{"lineNumber":39,"author":{"gitId":"NUSmhk"},"content":"    public String toString() {","lastModifiedDate":"2021-08-14"},{"lineNumber":40,"author":{"gitId":"NUSmhk"},"content":"        return (isDone ? \"[X] \" + this.description : \"[ ] \" + this.description); // mark done task with X","lastModifiedDate":"2021-08-14"},{"lineNumber":41,"author":{"gitId":"NUSmhk"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":42,"author":{"gitId":"NUSmhk"},"content":"}","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"NUSmhk":42}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NUSmhk"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"NUSmhk"},"content":"import java.util.List;","lastModifiedDate":"2021-08-15"},{"lineNumber":4,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":5,"author":{"gitId":"NUSmhk"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"NUSmhk"},"content":" * This represents a list of tasks.","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"NUSmhk"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"NUSmhk"},"content":"public class TaskList {","lastModifiedDate":"2021-08-15"},{"lineNumber":9,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":10,"author":{"gitId":"NUSmhk"},"content":"    private List\u003cTask\u003e tasks;","lastModifiedDate":"2021-08-15"},{"lineNumber":11,"author":{"gitId":"NUSmhk"},"content":"    private Storage storage;","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"NUSmhk"},"content":"    private boolean isTaskFound \u003d false;","lastModifiedDate":"2021-09-04"},{"lineNumber":13,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"NUSmhk"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"NUSmhk"},"content":"     * This constructor creates the initial list of tasks for Duke bot by","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"NUSmhk"},"content":"     * firstly loading all the tasks stored in the given Storage.","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"NUSmhk"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":18,"author":{"gitId":"NUSmhk"},"content":"     * @param storage where all the tasks are stored on initial load.","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"NUSmhk"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"NUSmhk"},"content":"    public TaskList(Storage storage) {","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"NUSmhk"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2021-08-23"},{"lineNumber":22,"author":{"gitId":"NUSmhk"},"content":"        tasks \u003d storage.readFromStorage();","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"NUSmhk"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":24,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":25,"author":{"gitId":"NUSmhk"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"NUSmhk"},"content":"     * This method adds the given task into the list of tasks.","lastModifiedDate":"2021-09-02"},{"lineNumber":27,"author":{"gitId":"NUSmhk"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":28,"author":{"gitId":"NUSmhk"},"content":"     * @param newTask Task object provided to be put into list.","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"NUSmhk"},"content":"     * @return String to inform user the command is successful.","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"NUSmhk"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"NUSmhk"},"content":"    public String addToList(Task newTask) {","lastModifiedDate":"2021-08-15"},{"lineNumber":32,"author":{"gitId":"NUSmhk"},"content":"        tasks.add(newTask);","lastModifiedDate":"2021-08-15"},{"lineNumber":33,"author":{"gitId":"NUSmhk"},"content":"        storage.writeToStorage(this.getList());","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":35,"author":{"gitId":"NUSmhk"},"content":"        return newTask.toString();","lastModifiedDate":"2021-08-15"},{"lineNumber":36,"author":{"gitId":"NUSmhk"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":37,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":38,"author":{"gitId":"NUSmhk"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"NUSmhk"},"content":"     * This method deletes the task from the list of tasks at the given","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"NUSmhk"},"content":"     * index.","lastModifiedDate":"2021-09-02"},{"lineNumber":41,"author":{"gitId":"NUSmhk"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":42,"author":{"gitId":"NUSmhk"},"content":"     * @param index the int that tells which task on the list to delete","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"NUSmhk"},"content":"     * @return String to inform user the command is successful.","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"NUSmhk"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"NUSmhk"},"content":"    public String deleteFromList(int index) {","lastModifiedDate":"2021-08-18"},{"lineNumber":46,"author":{"gitId":"NUSmhk"},"content":"        Task curr \u003d tasks.get(index - 1);","lastModifiedDate":"2021-08-18"},{"lineNumber":47,"author":{"gitId":"NUSmhk"},"content":"        tasks.remove(index - 1);","lastModifiedDate":"2021-08-18"},{"lineNumber":48,"author":{"gitId":"NUSmhk"},"content":"        storage.writeToStorage(this.getList());","lastModifiedDate":"2021-08-23"},{"lineNumber":49,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":50,"author":{"gitId":"NUSmhk"},"content":"        return curr.toString();","lastModifiedDate":"2021-08-18"},{"lineNumber":51,"author":{"gitId":"NUSmhk"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":52,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":53,"author":{"gitId":"NUSmhk"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"NUSmhk"},"content":"     * This method marks the task on the list of tasks as done at the","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"NUSmhk"},"content":"     * given index.","lastModifiedDate":"2021-09-02"},{"lineNumber":56,"author":{"gitId":"NUSmhk"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":57,"author":{"gitId":"NUSmhk"},"content":"     * @param index the int that tells which task on the list to mark as done.","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"NUSmhk"},"content":"     * @return String to inform user the command is successful.","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"NUSmhk"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":60,"author":{"gitId":"NUSmhk"},"content":"    public String taskDone(int index) {","lastModifiedDate":"2021-08-18"},{"lineNumber":61,"author":{"gitId":"NUSmhk"},"content":"        Task curr \u003d tasks.get(index - 1);","lastModifiedDate":"2021-08-18"},{"lineNumber":62,"author":{"gitId":"NUSmhk"},"content":"        curr.setDone();","lastModifiedDate":"2021-08-24"},{"lineNumber":63,"author":{"gitId":"NUSmhk"},"content":"        storage.writeToStorage(this.getList());","lastModifiedDate":"2021-08-24"},{"lineNumber":64,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"NUSmhk"},"content":"        return curr.toString();","lastModifiedDate":"2021-08-15"},{"lineNumber":66,"author":{"gitId":"NUSmhk"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":67,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":68,"author":{"gitId":"NUSmhk"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":69,"author":{"gitId":"NUSmhk"},"content":"     * This method searches the input string inside the list of tasks and returns","lastModifiedDate":"2021-09-01"},{"lineNumber":70,"author":{"gitId":"NUSmhk"},"content":"     * all the tasks containing the searchString as a list of String.","lastModifiedDate":"2021-09-01"},{"lineNumber":71,"author":{"gitId":"NUSmhk"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":72,"author":{"gitId":"NUSmhk"},"content":"     * @param searchString String input to search.","lastModifiedDate":"2021-09-01"},{"lineNumber":73,"author":{"gitId":"NUSmhk"},"content":"     * @return List of String of tasks that match the search term.","lastModifiedDate":"2021-09-01"},{"lineNumber":74,"author":{"gitId":"NUSmhk"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":75,"author":{"gitId":"NUSmhk"},"content":"    public String findTask(String searchString) {","lastModifiedDate":"2021-08-25"},{"lineNumber":76,"author":{"gitId":"NUSmhk"},"content":"        int counter \u003d 1;","lastModifiedDate":"2021-08-25"},{"lineNumber":77,"author":{"gitId":"NUSmhk"},"content":"        String result \u003d \"\";","lastModifiedDate":"2021-08-25"},{"lineNumber":78,"author":{"gitId":"NUSmhk"},"content":"        isTaskFound \u003d false;","lastModifiedDate":"2021-09-04"},{"lineNumber":79,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":80,"author":{"gitId":"NUSmhk"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2021-08-25"},{"lineNumber":81,"author":{"gitId":"NUSmhk"},"content":"            assert tasks.get(i) !\u003d null : \"tasklist has no tasks\";","lastModifiedDate":"2021-09-04"},{"lineNumber":82,"author":{"gitId":"NUSmhk"},"content":"            Task curr \u003d tasks.get(i);","lastModifiedDate":"2021-08-25"},{"lineNumber":83,"author":{"gitId":"NUSmhk"},"content":"            if (curr.getDescription().contains(searchString)) {","lastModifiedDate":"2021-08-25"},{"lineNumber":84,"author":{"gitId":"NUSmhk"},"content":"                result +\u003d counter + \".\" + curr + \"\\n\";","lastModifiedDate":"2021-09-04"},{"lineNumber":85,"author":{"gitId":"NUSmhk"},"content":"                counter++;","lastModifiedDate":"2021-08-25"},{"lineNumber":86,"author":{"gitId":"NUSmhk"},"content":"                isTaskFound \u003d true;","lastModifiedDate":"2021-09-04"},{"lineNumber":87,"author":{"gitId":"NUSmhk"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":88,"author":{"gitId":"NUSmhk"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":89,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":90,"author":{"gitId":"NUSmhk"},"content":"        return result.trim();","lastModifiedDate":"2021-08-25"},{"lineNumber":91,"author":{"gitId":"NUSmhk"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":92,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":93,"author":{"gitId":"NUSmhk"},"content":"    public boolean isTaskFound() {","lastModifiedDate":"2021-08-25"},{"lineNumber":94,"author":{"gitId":"NUSmhk"},"content":"        return isTaskFound;","lastModifiedDate":"2021-09-04"},{"lineNumber":95,"author":{"gitId":"NUSmhk"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":96,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":97,"author":{"gitId":"NUSmhk"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":98,"author":{"gitId":"NUSmhk"},"content":"     * This method tells how many tasks are there in the task list.","lastModifiedDate":"2021-08-24"},{"lineNumber":99,"author":{"gitId":"NUSmhk"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":100,"author":{"gitId":"NUSmhk"},"content":"     * @return number of task remaining.","lastModifiedDate":"2021-08-24"},{"lineNumber":101,"author":{"gitId":"NUSmhk"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":102,"author":{"gitId":"NUSmhk"},"content":"    public int taskCount() {","lastModifiedDate":"2021-08-15"},{"lineNumber":103,"author":{"gitId":"NUSmhk"},"content":"        return tasks.size();","lastModifiedDate":"2021-08-15"},{"lineNumber":104,"author":{"gitId":"NUSmhk"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":105,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":106,"author":{"gitId":"NUSmhk"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":107,"author":{"gitId":"NUSmhk"},"content":"     * This method transforms the list of task into a String that lists out all","lastModifiedDate":"2021-08-24"},{"lineNumber":108,"author":{"gitId":"NUSmhk"},"content":"     * the tasks neatly in a numbered order in a user-friendly way.","lastModifiedDate":"2021-08-24"},{"lineNumber":109,"author":{"gitId":"NUSmhk"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":110,"author":{"gitId":"NUSmhk"},"content":"     * @return String that lists out the tasks.","lastModifiedDate":"2021-08-24"},{"lineNumber":111,"author":{"gitId":"NUSmhk"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":112,"author":{"gitId":"NUSmhk"},"content":"    public String getList() {","lastModifiedDate":"2021-08-15"},{"lineNumber":113,"author":{"gitId":"NUSmhk"},"content":"        int counter \u003d 1;","lastModifiedDate":"2021-08-15"},{"lineNumber":114,"author":{"gitId":"NUSmhk"},"content":"        String result \u003d \"\";","lastModifiedDate":"2021-08-15"},{"lineNumber":115,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":116,"author":{"gitId":"NUSmhk"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2021-08-15"},{"lineNumber":117,"author":{"gitId":"NUSmhk"},"content":"            assert tasks.get(i) !\u003d null : \"tasklist has no tasks\";","lastModifiedDate":"2021-09-04"},{"lineNumber":118,"author":{"gitId":"NUSmhk"},"content":"            result +\u003d counter + \".\" + tasks.get(i) + \"\\n\";","lastModifiedDate":"2021-09-04"},{"lineNumber":119,"author":{"gitId":"NUSmhk"},"content":"            counter++;","lastModifiedDate":"2021-08-15"},{"lineNumber":120,"author":{"gitId":"NUSmhk"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":121,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":122,"author":{"gitId":"NUSmhk"},"content":"        return result.trim();","lastModifiedDate":"2021-08-25"},{"lineNumber":123,"author":{"gitId":"NUSmhk"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":124,"author":{"gitId":"NUSmhk"},"content":"}","lastModifiedDate":"2021-08-15"}],"authorContributionMap":{"NUSmhk":124}},{"path":"src/main/java/duke/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NUSmhk"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":3,"author":{"gitId":"NUSmhk"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"NUSmhk"},"content":" * Represents a type of task that contains just a description.","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"NUSmhk"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"NUSmhk"},"content":"public class ToDo extends Task {","lastModifiedDate":"2021-08-14"},{"lineNumber":7,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":8,"author":{"gitId":"NUSmhk"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"NUSmhk"},"content":"     * This constructor creates a ToDo type task object.","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"NUSmhk"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"NUSmhk"},"content":"     * @param description text description of ToDO task.","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"NUSmhk"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"NUSmhk"},"content":"    public ToDo(String description) {","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"NUSmhk"},"content":"        super(description.trim());","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"NUSmhk"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":16,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":17,"author":{"gitId":"NUSmhk"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"NUSmhk"},"content":"     * This method formats task description and date in a user-friendly way,","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"NUSmhk"},"content":"     * additionally marking the ToDo task type with [T].","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"NUSmhk"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":21,"author":{"gitId":"NUSmhk"},"content":"     * @return String of formatted task description.","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"NUSmhk"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"NUSmhk"},"content":"    @Override","lastModifiedDate":"2021-08-14"},{"lineNumber":24,"author":{"gitId":"NUSmhk"},"content":"    public String toString() {","lastModifiedDate":"2021-08-14"},{"lineNumber":25,"author":{"gitId":"NUSmhk"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2021-08-14"},{"lineNumber":26,"author":{"gitId":"NUSmhk"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":27,"author":{"gitId":"NUSmhk"},"content":"}","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"NUSmhk":27}},{"path":"src/main/java/duke/commands/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NUSmhk"},"content":"package duke.commands;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"NUSmhk"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"NUSmhk"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"NUSmhk"},"content":"import duke.Deadline;","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"NUSmhk"},"content":"import duke.Event;","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"NUSmhk"},"content":"import duke.Task;","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"NUSmhk"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"NUSmhk"},"content":"import duke.ToDo;","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"NUSmhk"},"content":"/**","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"NUSmhk"},"content":" * This class handles commands meant for adding tasks.","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"NUSmhk"},"content":" */","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"NUSmhk"},"content":"public class AddCommand implements Command {","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"NUSmhk"},"content":"    private String description;","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"NUSmhk"},"content":"    private LocalTime startTime;","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"NUSmhk"},"content":"    private LocalTime endTime;","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"NUSmhk"},"content":"    private Object localDateTime;","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"NUSmhk"},"content":"    private LocalDate localDate;","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"NUSmhk"},"content":"    private String taskType;","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"NUSmhk"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":25,"author":{"gitId":"NUSmhk"},"content":"     * Constructor which takes in task description and a letter as task type.","lastModifiedDate":"2021-09-01"},{"lineNumber":26,"author":{"gitId":"NUSmhk"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":27,"author":{"gitId":"NUSmhk"},"content":"     * @param description String that is the name of task.","lastModifiedDate":"2021-09-01"},{"lineNumber":28,"author":{"gitId":"NUSmhk"},"content":"     * @param taskType String that is a letter to describe task type.","lastModifiedDate":"2021-09-01"},{"lineNumber":29,"author":{"gitId":"NUSmhk"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":30,"author":{"gitId":"NUSmhk"},"content":"    public AddCommand(String description, String taskType) {","lastModifiedDate":"2021-08-28"},{"lineNumber":31,"author":{"gitId":"NUSmhk"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-28"},{"lineNumber":32,"author":{"gitId":"NUSmhk"},"content":"        this.taskType \u003d taskType;","lastModifiedDate":"2021-08-28"},{"lineNumber":33,"author":{"gitId":"NUSmhk"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":34,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":35,"author":{"gitId":"NUSmhk"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":36,"author":{"gitId":"NUSmhk"},"content":"     * Constructor which takes in task description, a letter as task type","lastModifiedDate":"2021-09-01"},{"lineNumber":37,"author":{"gitId":"NUSmhk"},"content":"     * and Object which is either localDate or localDateTime","lastModifiedDate":"2021-09-01"},{"lineNumber":38,"author":{"gitId":"NUSmhk"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":39,"author":{"gitId":"NUSmhk"},"content":"     * @param description String that is the name of task.","lastModifiedDate":"2021-09-01"},{"lineNumber":40,"author":{"gitId":"NUSmhk"},"content":"     * @param dateObj Object that is either localDate or localDateTime.","lastModifiedDate":"2021-09-01"},{"lineNumber":41,"author":{"gitId":"NUSmhk"},"content":"     * @param taskType String that is a letter to describe task type.","lastModifiedDate":"2021-09-01"},{"lineNumber":42,"author":{"gitId":"NUSmhk"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":43,"author":{"gitId":"NUSmhk"},"content":"    public AddCommand(String description, Object dateObj, String taskType) {","lastModifiedDate":"2021-08-28"},{"lineNumber":44,"author":{"gitId":"NUSmhk"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-28"},{"lineNumber":45,"author":{"gitId":"NUSmhk"},"content":"        this.localDateTime \u003d dateObj;","lastModifiedDate":"2021-08-28"},{"lineNumber":46,"author":{"gitId":"NUSmhk"},"content":"        this.taskType \u003d taskType;","lastModifiedDate":"2021-08-28"},{"lineNumber":47,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":48,"author":{"gitId":"NUSmhk"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":49,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":50,"author":{"gitId":"NUSmhk"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":51,"author":{"gitId":"NUSmhk"},"content":"     * Constructor which takes in task description, a letter for task type,","lastModifiedDate":"2021-09-01"},{"lineNumber":52,"author":{"gitId":"NUSmhk"},"content":"     * two LocalTimes and a LocalDate.","lastModifiedDate":"2021-09-01"},{"lineNumber":53,"author":{"gitId":"NUSmhk"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":54,"author":{"gitId":"NUSmhk"},"content":"     * @param description String that is the name of task.","lastModifiedDate":"2021-09-01"},{"lineNumber":55,"author":{"gitId":"NUSmhk"},"content":"     * @param localDate LocalDate type to represent due date.","lastModifiedDate":"2021-09-01"},{"lineNumber":56,"author":{"gitId":"NUSmhk"},"content":"     * @param startTime LocalTime to represent starting time of event.","lastModifiedDate":"2021-09-01"},{"lineNumber":57,"author":{"gitId":"NUSmhk"},"content":"     * @param endTime LocalTime to represent ending time of event.","lastModifiedDate":"2021-09-01"},{"lineNumber":58,"author":{"gitId":"NUSmhk"},"content":"     * @param taskType String that is a letter to describe task type.","lastModifiedDate":"2021-09-01"},{"lineNumber":59,"author":{"gitId":"NUSmhk"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":60,"author":{"gitId":"NUSmhk"},"content":"    public AddCommand(String description, LocalDate localDate,","lastModifiedDate":"2021-08-28"},{"lineNumber":61,"author":{"gitId":"NUSmhk"},"content":"                      LocalTime startTime, LocalTime endTime, String taskType) {","lastModifiedDate":"2021-08-28"},{"lineNumber":62,"author":{"gitId":"NUSmhk"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-28"},{"lineNumber":63,"author":{"gitId":"NUSmhk"},"content":"        this.localDate \u003d localDate;","lastModifiedDate":"2021-08-28"},{"lineNumber":64,"author":{"gitId":"NUSmhk"},"content":"        this.startTime \u003d startTime;","lastModifiedDate":"2021-08-28"},{"lineNumber":65,"author":{"gitId":"NUSmhk"},"content":"        this.endTime \u003d endTime;","lastModifiedDate":"2021-08-28"},{"lineNumber":66,"author":{"gitId":"NUSmhk"},"content":"        this.taskType \u003d taskType;","lastModifiedDate":"2021-08-28"},{"lineNumber":67,"author":{"gitId":"NUSmhk"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":68,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":69,"author":{"gitId":"NUSmhk"},"content":"    @Override","lastModifiedDate":"2021-08-28"},{"lineNumber":70,"author":{"gitId":"NUSmhk"},"content":"    public String execute(TaskList taskList) {","lastModifiedDate":"2021-09-01"},{"lineNumber":71,"author":{"gitId":"NUSmhk"},"content":"        String output \u003d \"\";","lastModifiedDate":"2021-08-28"},{"lineNumber":72,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":73,"author":{"gitId":"NUSmhk"},"content":"        switch (taskType) {","lastModifiedDate":"2021-08-28"},{"lineNumber":74,"author":{"gitId":"NUSmhk"},"content":"        case \"todo\":","lastModifiedDate":"2021-08-28"},{"lineNumber":75,"author":{"gitId":"NUSmhk"},"content":"            Task toDo \u003d new ToDo(description);","lastModifiedDate":"2021-08-28"},{"lineNumber":76,"author":{"gitId":"NUSmhk"},"content":"            output \u003d String.format(\"Got it. I\u0027ve added this task:\\n%s\\nNow you have %d tasks in the list.\",","lastModifiedDate":"2021-08-28"},{"lineNumber":77,"author":{"gitId":"NUSmhk"},"content":"                    taskList.addToList(toDo), taskList.taskCount());","lastModifiedDate":"2021-08-28"},{"lineNumber":78,"author":{"gitId":"NUSmhk"},"content":"            break;","lastModifiedDate":"2021-08-28"},{"lineNumber":79,"author":{"gitId":"NUSmhk"},"content":"        case \"deadline\":","lastModifiedDate":"2021-08-28"},{"lineNumber":80,"author":{"gitId":"NUSmhk"},"content":"            Task deadline \u003d new Deadline(description, localDateTime);","lastModifiedDate":"2021-08-28"},{"lineNumber":81,"author":{"gitId":"NUSmhk"},"content":"            output \u003d String.format(\"Got it. I\u0027ve added this task:\\n%s\\nNow you have %d tasks in the list.\",","lastModifiedDate":"2021-08-28"},{"lineNumber":82,"author":{"gitId":"NUSmhk"},"content":"                    taskList.addToList(deadline), taskList.taskCount());","lastModifiedDate":"2021-08-28"},{"lineNumber":83,"author":{"gitId":"NUSmhk"},"content":"            break;","lastModifiedDate":"2021-08-28"},{"lineNumber":84,"author":{"gitId":"NUSmhk"},"content":"        case \"event\":","lastModifiedDate":"2021-08-28"},{"lineNumber":85,"author":{"gitId":"NUSmhk"},"content":"            Task event \u003d new Event(description, localDate, startTime, endTime);","lastModifiedDate":"2021-08-28"},{"lineNumber":86,"author":{"gitId":"NUSmhk"},"content":"            output \u003d String.format(\"Got it. I\u0027ve added this task:\\n%s\\nNow you have %d tasks in the list.\",","lastModifiedDate":"2021-08-28"},{"lineNumber":87,"author":{"gitId":"NUSmhk"},"content":"                    taskList.addToList(event), taskList.taskCount());","lastModifiedDate":"2021-08-28"},{"lineNumber":88,"author":{"gitId":"NUSmhk"},"content":"            break;","lastModifiedDate":"2021-08-28"},{"lineNumber":89,"author":{"gitId":"NUSmhk"},"content":"        default:","lastModifiedDate":"2021-08-28"},{"lineNumber":90,"author":{"gitId":"NUSmhk"},"content":"            assert false : taskType;","lastModifiedDate":"2021-09-04"},{"lineNumber":91,"author":{"gitId":"NUSmhk"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":92,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":93,"author":{"gitId":"NUSmhk"},"content":"        return output;","lastModifiedDate":"2021-08-29"},{"lineNumber":94,"author":{"gitId":"NUSmhk"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":95,"author":{"gitId":"NUSmhk"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"NUSmhk":95}},{"path":"src/main/java/duke/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NUSmhk"},"content":"package duke.commands;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"NUSmhk"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"NUSmhk"},"content":"/**","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"NUSmhk"},"content":" * This is an interface to handle all known Commands from user.","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"NUSmhk"},"content":" */","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"NUSmhk"},"content":"public interface Command {","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"NUSmhk"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"NUSmhk"},"content":"     * This abstract method takes in the TaskList Duke is using to handle","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"NUSmhk"},"content":"     * commands given by the user and make changes to existing tasks.","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"NUSmhk"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"NUSmhk"},"content":"     * @param taskList TaskList which contains current tasks Duke is using.","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"NUSmhk"},"content":"     * @return String description for Duke to show user in GUI.","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"NUSmhk"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":17,"author":{"gitId":"NUSmhk"},"content":"    public String execute(TaskList taskList);","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"NUSmhk"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"NUSmhk":18}},{"path":"src/main/java/duke/commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NUSmhk"},"content":"package duke.commands;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"NUSmhk"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"NUSmhk"},"content":"/**","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"NUSmhk"},"content":" * This class handles command for deleting tasks.","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"NUSmhk"},"content":" */","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"NUSmhk"},"content":"public class DeleteCommand implements Command {","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"NUSmhk"},"content":"    private int index;","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"NUSmhk"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"NUSmhk"},"content":"     * Constructor which takes in index of the task in TaskList to delete.","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"NUSmhk"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"NUSmhk"},"content":"     * @param index int to represent index of task.","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"NUSmhk"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"NUSmhk"},"content":"    public DeleteCommand(int index) {","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"NUSmhk"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"NUSmhk"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"NUSmhk"},"content":"    @Override","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"NUSmhk"},"content":"    public String execute(TaskList taskList) {","lastModifiedDate":"2021-09-01"},{"lineNumber":22,"author":{"gitId":"NUSmhk"},"content":"        String output \u003d String.format(\"Noted. I\u0027ve removed this task:\\n%s\\nNow you have %d tasks in the list.\",","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"NUSmhk"},"content":"                taskList.deleteFromList(index), taskList.taskCount());","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"NUSmhk"},"content":"        return output;","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"NUSmhk"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"NUSmhk"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"NUSmhk":26}},{"path":"src/main/java/duke/commands/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NUSmhk"},"content":"package duke.commands;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"NUSmhk"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"NUSmhk"},"content":"/**","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"NUSmhk"},"content":" * THis class handles command meant for marking tasks as done.","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"NUSmhk"},"content":" */","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"NUSmhk"},"content":"public class DoneCommand implements Command {","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"NUSmhk"},"content":"    private int index;","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"NUSmhk"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"NUSmhk"},"content":"     * Constructor which takes in index of task in TaskList to mark as done.","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"NUSmhk"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"NUSmhk"},"content":"     * @param index","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"NUSmhk"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"NUSmhk"},"content":"    public DoneCommand(int index) {","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"NUSmhk"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"NUSmhk"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"NUSmhk"},"content":"    @Override","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"NUSmhk"},"content":"    public String execute(TaskList taskList) {","lastModifiedDate":"2021-09-01"},{"lineNumber":22,"author":{"gitId":"NUSmhk"},"content":"        String output \u003d \"Nice! I\u0027ve marked this task as done:\\n\" + taskList.taskDone(index);","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"NUSmhk"},"content":"        return output;","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"NUSmhk"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"NUSmhk"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"NUSmhk":25}},{"path":"src/main/java/duke/commands/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NUSmhk"},"content":"package duke.commands;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"NUSmhk"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"NUSmhk"},"content":"/**","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"NUSmhk"},"content":" * This class handles command meant for quitting Duke.","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"NUSmhk"},"content":" */","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"NUSmhk"},"content":"public class ExitCommand implements Command {","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"NUSmhk"},"content":"    @Override","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"NUSmhk"},"content":"    public String execute(TaskList taskList) {","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"NUSmhk"},"content":"        return \"bye\";","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"NUSmhk"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"NUSmhk"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"NUSmhk":14}},{"path":"src/main/java/duke/commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NUSmhk"},"content":"package duke.commands;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"NUSmhk"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"NUSmhk"},"content":"/**","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"NUSmhk"},"content":" * This class handles command meant for finding tasks.","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"NUSmhk"},"content":" */","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"NUSmhk"},"content":"public class FindCommand implements Command {","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"NUSmhk"},"content":"    private String searchString;","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"NUSmhk"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"NUSmhk"},"content":"     * Constructor which takes in a substring to search for in descriptions of tasks.","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"NUSmhk"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"NUSmhk"},"content":"     * @param searchString String that is the search term.","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"NUSmhk"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":17,"author":{"gitId":"NUSmhk"},"content":"    public FindCommand(String searchString) {","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"NUSmhk"},"content":"        this.searchString \u003d searchString;","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"NUSmhk"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"NUSmhk"},"content":"    @Override","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"NUSmhk"},"content":"    public String execute(TaskList taskList) {","lastModifiedDate":"2021-09-01"},{"lineNumber":23,"author":{"gitId":"NUSmhk"},"content":"        String output \u003d \"Here are the matching tasks in your list:\\n\" + taskList.findTask(searchString);","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"NUSmhk"},"content":"        if (taskList.isTaskFound()) {","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"NUSmhk"},"content":"            return output;","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"NUSmhk"},"content":"        } else {","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"NUSmhk"},"content":"            return \"I\u0027m sorry, but I can\u0027t find this task :-(\";","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"NUSmhk"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":29,"author":{"gitId":"NUSmhk"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":30,"author":{"gitId":"NUSmhk"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"NUSmhk":30}},{"path":"src/main/java/duke/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NUSmhk"},"content":"package duke.commands;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"NUSmhk"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"NUSmhk"},"content":"/**","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"NUSmhk"},"content":" * This class handles command meant for retrieving a list of current existing tasks.","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"NUSmhk"},"content":" */","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"NUSmhk"},"content":"public class ListCommand implements Command {","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"NUSmhk"},"content":"    @Override","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"NUSmhk"},"content":"    public String execute(TaskList taskList) {","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"NUSmhk"},"content":"        return taskList.getList();","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"NUSmhk"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"NUSmhk"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"NUSmhk":14}},{"path":"src/main/java/duke/gui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NUSmhk"},"content":"package duke.gui;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"NUSmhk"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"NUSmhk"},"content":"import java.util.Collections;","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"NUSmhk"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"NUSmhk"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"NUSmhk"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"NUSmhk"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"NUSmhk"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"NUSmhk"},"content":"import javafx.scene.Node;","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"NUSmhk"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"NUSmhk"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"NUSmhk"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"NUSmhk"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"NUSmhk"},"content":"/**","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"NUSmhk"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"NUSmhk"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"NUSmhk"},"content":" * containing text from the speaker.","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"NUSmhk"},"content":" */","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"NUSmhk"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"NUSmhk"},"content":"    @FXML","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"NUSmhk"},"content":"    private Label dialog;","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"NUSmhk"},"content":"    @FXML","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"NUSmhk"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":28,"author":{"gitId":"NUSmhk"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2021-08-28"},{"lineNumber":29,"author":{"gitId":"NUSmhk"},"content":"        try {","lastModifiedDate":"2021-08-28"},{"lineNumber":30,"author":{"gitId":"NUSmhk"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2021-08-28"},{"lineNumber":31,"author":{"gitId":"NUSmhk"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2021-08-28"},{"lineNumber":32,"author":{"gitId":"NUSmhk"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2021-08-28"},{"lineNumber":33,"author":{"gitId":"NUSmhk"},"content":"            fxmlLoader.load();","lastModifiedDate":"2021-08-28"},{"lineNumber":34,"author":{"gitId":"NUSmhk"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-28"},{"lineNumber":35,"author":{"gitId":"NUSmhk"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-28"},{"lineNumber":36,"author":{"gitId":"NUSmhk"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":37,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":38,"author":{"gitId":"NUSmhk"},"content":"        assert text !\u003d null : \"No text detected\";","lastModifiedDate":"2021-09-04"},{"lineNumber":39,"author":{"gitId":"NUSmhk"},"content":"        assert img !\u003d null : \"No image detected\";","lastModifiedDate":"2021-09-04"},{"lineNumber":40,"author":{"gitId":"NUSmhk"},"content":"        dialog.setText(text);","lastModifiedDate":"2021-08-28"},{"lineNumber":41,"author":{"gitId":"NUSmhk"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2021-08-28"},{"lineNumber":42,"author":{"gitId":"NUSmhk"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":43,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":44,"author":{"gitId":"NUSmhk"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":45,"author":{"gitId":"NUSmhk"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2021-08-28"},{"lineNumber":46,"author":{"gitId":"NUSmhk"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":47,"author":{"gitId":"NUSmhk"},"content":"    private void flip() {","lastModifiedDate":"2021-08-28"},{"lineNumber":48,"author":{"gitId":"NUSmhk"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2021-08-28"},{"lineNumber":49,"author":{"gitId":"NUSmhk"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2021-08-28"},{"lineNumber":50,"author":{"gitId":"NUSmhk"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2021-08-28"},{"lineNumber":51,"author":{"gitId":"NUSmhk"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2021-08-28"},{"lineNumber":52,"author":{"gitId":"NUSmhk"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":53,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":54,"author":{"gitId":"NUSmhk"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2021-08-28"},{"lineNumber":55,"author":{"gitId":"NUSmhk"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2021-08-28"},{"lineNumber":56,"author":{"gitId":"NUSmhk"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":57,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":58,"author":{"gitId":"NUSmhk"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2021-08-28"},{"lineNumber":59,"author":{"gitId":"NUSmhk"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2021-08-28"},{"lineNumber":60,"author":{"gitId":"NUSmhk"},"content":"        db.flip();","lastModifiedDate":"2021-08-28"},{"lineNumber":61,"author":{"gitId":"NUSmhk"},"content":"        return db;","lastModifiedDate":"2021-08-28"},{"lineNumber":62,"author":{"gitId":"NUSmhk"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":63,"author":{"gitId":"NUSmhk"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"NUSmhk":63}},{"path":"src/main/java/duke/gui/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NUSmhk"},"content":"package duke.gui;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"NUSmhk"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"NUSmhk"},"content":"import duke.Duke;","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"NUSmhk"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"NUSmhk"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"NUSmhk"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"NUSmhk"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"NUSmhk"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"NUSmhk"},"content":"/**","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"NUSmhk"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"NUSmhk"},"content":" */","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"NUSmhk"},"content":"public class Main extends Application {","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"NUSmhk"},"content":"    private Duke duke \u003d new Duke(\"./Duke.txt\");","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"NUSmhk"},"content":"    @Override","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"NUSmhk"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"NUSmhk"},"content":"        try {","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"NUSmhk"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"NUSmhk"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"NUSmhk"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"NUSmhk"},"content":"            stage.setScene(scene);","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"NUSmhk"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"NUSmhk"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().greetUser();","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"NUSmhk"},"content":"            stage.show();","lastModifiedDate":"2021-08-28"},{"lineNumber":29,"author":{"gitId":"NUSmhk"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-28"},{"lineNumber":30,"author":{"gitId":"NUSmhk"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-28"},{"lineNumber":31,"author":{"gitId":"NUSmhk"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":32,"author":{"gitId":"NUSmhk"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":33,"author":{"gitId":"NUSmhk"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"NUSmhk":33}},{"path":"src/main/java/duke/gui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NUSmhk"},"content":"package duke.gui;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"NUSmhk"},"content":"import java.util.concurrent.TimeUnit;","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"NUSmhk"},"content":"import duke.Duke;","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"NUSmhk"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"NUSmhk"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"NUSmhk"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"NUSmhk"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"NUSmhk"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"NUSmhk"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"NUSmhk"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"NUSmhk"},"content":"/**","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"NUSmhk"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"NUSmhk"},"content":" */","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"NUSmhk"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"NUSmhk"},"content":"    @FXML","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"NUSmhk"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"NUSmhk"},"content":"    @FXML","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"NUSmhk"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"NUSmhk"},"content":"    @FXML","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"NUSmhk"},"content":"    private TextField userInput;","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"NUSmhk"},"content":"    @FXML","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"NUSmhk"},"content":"    private Button sendButton;","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"NUSmhk"},"content":"    private Duke duke;","lastModifiedDate":"2021-08-28"},{"lineNumber":28,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":29,"author":{"gitId":"NUSmhk"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/User.jpg\"));","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"NUSmhk"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Duke.jpg\"));","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":32,"author":{"gitId":"NUSmhk"},"content":"    @FXML","lastModifiedDate":"2021-08-28"},{"lineNumber":33,"author":{"gitId":"NUSmhk"},"content":"    public void initialize() {","lastModifiedDate":"2021-08-28"},{"lineNumber":34,"author":{"gitId":"NUSmhk"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2021-08-28"},{"lineNumber":35,"author":{"gitId":"NUSmhk"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":36,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":37,"author":{"gitId":"NUSmhk"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2021-08-28"},{"lineNumber":38,"author":{"gitId":"NUSmhk"},"content":"        duke \u003d d;","lastModifiedDate":"2021-08-28"},{"lineNumber":39,"author":{"gitId":"NUSmhk"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":40,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":41,"author":{"gitId":"NUSmhk"},"content":"    public void greetUser() {","lastModifiedDate":"2021-08-29"},{"lineNumber":42,"author":{"gitId":"NUSmhk"},"content":"        dialogContainer.getChildren().add(DialogBox.getDukeDialog(","lastModifiedDate":"2021-08-29"},{"lineNumber":43,"author":{"gitId":"NUSmhk"},"content":"            \"Hello! I\u0027m Duke\\nWhat can I do for you?\", dukeImage));","lastModifiedDate":"2021-08-29"},{"lineNumber":44,"author":{"gitId":"NUSmhk"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":45,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":46,"author":{"gitId":"NUSmhk"},"content":"    private void byeUser() {","lastModifiedDate":"2021-09-01"},{"lineNumber":47,"author":{"gitId":"NUSmhk"},"content":"        dialogContainer.getChildren().add(DialogBox.getDukeDialog(","lastModifiedDate":"2021-09-01"},{"lineNumber":48,"author":{"gitId":"NUSmhk"},"content":"            \"Bye! Hope to see you again soon!\", dukeImage));","lastModifiedDate":"2021-09-01"},{"lineNumber":49,"author":{"gitId":"NUSmhk"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":50,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":51,"author":{"gitId":"NUSmhk"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":52,"author":{"gitId":"NUSmhk"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2021-08-28"},{"lineNumber":53,"author":{"gitId":"NUSmhk"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2021-08-28"},{"lineNumber":54,"author":{"gitId":"NUSmhk"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":55,"author":{"gitId":"NUSmhk"},"content":"    @FXML","lastModifiedDate":"2021-08-28"},{"lineNumber":56,"author":{"gitId":"NUSmhk"},"content":"    private void handleUserInput() {","lastModifiedDate":"2021-08-28"},{"lineNumber":57,"author":{"gitId":"NUSmhk"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2021-08-28"},{"lineNumber":58,"author":{"gitId":"NUSmhk"},"content":"        String response \u003d duke.getResponse(input);","lastModifiedDate":"2021-08-28"},{"lineNumber":59,"author":{"gitId":"NUSmhk"},"content":"        if (response.equals(\"bye\")) {","lastModifiedDate":"2021-09-01"},{"lineNumber":60,"author":{"gitId":"NUSmhk"},"content":"            byeUser();","lastModifiedDate":"2021-09-01"},{"lineNumber":61,"author":{"gitId":"NUSmhk"},"content":"            System.exit(0);","lastModifiedDate":"2021-09-01"},{"lineNumber":62,"author":{"gitId":"NUSmhk"},"content":"        } else {","lastModifiedDate":"2021-09-01"},{"lineNumber":63,"author":{"gitId":"NUSmhk"},"content":"            dialogContainer.getChildren().addAll(","lastModifiedDate":"2021-08-28"},{"lineNumber":64,"author":{"gitId":"NUSmhk"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2021-08-28"},{"lineNumber":65,"author":{"gitId":"NUSmhk"},"content":"                DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2021-08-28"},{"lineNumber":66,"author":{"gitId":"NUSmhk"},"content":"            );","lastModifiedDate":"2021-08-28"},{"lineNumber":67,"author":{"gitId":"NUSmhk"},"content":"            userInput.clear();","lastModifiedDate":"2021-08-28"},{"lineNumber":68,"author":{"gitId":"NUSmhk"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":69,"author":{"gitId":"NUSmhk"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":70,"author":{"gitId":"NUSmhk"},"content":"}","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"NUSmhk":70}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"NUSmhk"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"NUSmhk"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"NUSmhk"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"NUSmhk"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"NUSmhk"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"NUSmhk"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/16\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"NUSmhk"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"NUSmhk"},"content":"        \u003cLabel fx:id\u003d\"dialog\" contentDisplay\u003d\"CENTER\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"NUSmhk"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"NUSmhk"},"content":"    \u003c/children\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"NUSmhk"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"NUSmhk"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"NUSmhk"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"NUSmhk"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"NUSmhk":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"NUSmhk"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"NUSmhk"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"NUSmhk"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"NUSmhk"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"NUSmhk"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"NUSmhk"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"NUSmhk"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/16\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.gui.MainWindow\"\u003e","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"NUSmhk"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"NUSmhk"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"NUSmhk"},"content":"        \u003cButton fx:id\u003d\"sendButton\" defaultButton\u003d\"true\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"NUSmhk"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"NUSmhk"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"NUSmhk"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"NUSmhk"},"content":"            \u003c/content\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"NUSmhk"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"NUSmhk"},"content":"    \u003c/children\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"NUSmhk"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"NUSmhk":19}},{"path":"test/duke/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NUSmhk"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"NUSmhk"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"NUSmhk"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"NUSmhk"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"NUSmhk"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"NUSmhk"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"NUSmhk"},"content":"class DeadlineTest {","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"NUSmhk"},"content":"    @Test","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"NUSmhk"},"content":"    void testToString() {","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"NUSmhk"},"content":"        LocalDateTime dateTime \u003d LocalDateTime.parse(\"12/02/2021 1900\",","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"NUSmhk"},"content":"                DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\"));","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"NUSmhk"},"content":"        LocalDate date \u003d LocalDate.parse(\"22-06-2021\",","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"NUSmhk"},"content":"                DateTimeFormatter.ofPattern(\"dd-MM-yyyy\"));","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"NUSmhk"},"content":"        Deadline testDeadline1 \u003d new Deadline(\"test\", dateTime);","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"NUSmhk"},"content":"        Deadline testDeadline2 \u003d new Deadline(\"test\", date);","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"NUSmhk"},"content":"        assertEquals(\"[D][ ] test (by: 12 Feb 2021 07:00 PM)\", testDeadline1.toString());","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"NUSmhk"},"content":"        assertEquals(\"[D][ ] test (by: 22 Jun 2021)\", testDeadline2.toString());","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"NUSmhk"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"NUSmhk"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"NUSmhk":24}},{"path":"test/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NUSmhk"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"NUSmhk"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"NUSmhk"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"NUSmhk"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"NUSmhk"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"NUSmhk"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"NUSmhk"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"NUSmhk"},"content":"class ParserTest {","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"NUSmhk"},"content":"    @Test","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"NUSmhk"},"content":"    void parseDeadlineFromFile() {","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"NUSmhk"},"content":"        String input \u003d \"test (by: 12 Feb 2021 07:00 PM)\";","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"NUSmhk"},"content":"        LocalDateTime dateTime \u003d LocalDateTime.parse(\"12/02/2021 1900\",","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"NUSmhk"},"content":"                DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\"));","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"NUSmhk"},"content":"        assertEquals(new Deadline(\"test\", dateTime).toString(),","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"NUSmhk"},"content":"                Parser.parseDeadlineFromFile(input).toString());","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"NUSmhk"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"NUSmhk"},"content":"    @Test","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"NUSmhk"},"content":"    void parseEventFromFile() {","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"NUSmhk"},"content":"        String input \u003d \"test (at: 12 Feb 2020 from: 07:00 PM-08:00 PM)\";","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"NUSmhk"},"content":"        LocalDate date \u003d LocalDate.parse(\"12/02/2020\", DateTimeFormatter.ofPattern(\"dd/MM/yyy\"));","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"NUSmhk"},"content":"        LocalTime start \u003d LocalTime.parse(\"07:00 PM\", DateTimeFormatter.ofPattern(\"hh:mm a\"));","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"NUSmhk"},"content":"        LocalTime end \u003d LocalTime.parse(\"08:00 PM\", DateTimeFormatter.ofPattern(\"hh:mm a\"));","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"NUSmhk"},"content":"        assertEquals(new Event(\"test\", date, start, end).toString(),","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"NUSmhk"},"content":"                Parser.parseEventFromFile(input).toString());","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"NUSmhk"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"NUSmhk"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"NUSmhk":34}},{"path":"test/duke/ToDoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NUSmhk"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"NUSmhk"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"NUSmhk"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"NUSmhk"},"content":"class ToDoTest {","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"NUSmhk"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"NUSmhk"},"content":"    @Test","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"NUSmhk"},"content":"    void testToString() {","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"NUSmhk"},"content":"        ToDo testToDo \u003d new ToDo(\"test\");","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"NUSmhk"},"content":"        assertEquals(\"[T][ ] test\", testToDo.toString());","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"NUSmhk"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"NUSmhk"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"NUSmhk":14}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"NUSmhk"},"content":"todo borrow book","lastModifiedDate":"2021-08-14"},{"lineNumber":2,"author":{"gitId":"NUSmhk"},"content":"deadline return book /by Saturday","lastModifiedDate":"2021-08-14"},{"lineNumber":3,"author":{"gitId":"NUSmhk"},"content":"event project meeting /at Sun 1-3pm","lastModifiedDate":"2021-08-14"},{"lineNumber":4,"author":{"gitId":"NUSmhk"},"content":"deadline Orbital submission /by Mon 11:59pm","lastModifiedDate":"2021-08-15"},{"lineNumber":5,"author":{"gitId":"NUSmhk"},"content":"list","lastModifiedDate":"2021-08-14"},{"lineNumber":6,"author":{"gitId":"NUSmhk"},"content":"done 2","lastModifiedDate":"2021-08-14"},{"lineNumber":7,"author":{"gitId":"NUSmhk"},"content":"done 4","lastModifiedDate":"2021-08-14"},{"lineNumber":8,"author":{"gitId":"NUSmhk"},"content":"list","lastModifiedDate":"2021-08-14"},{"lineNumber":9,"author":{"gitId":"NUSmhk"},"content":"bye","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"NUSmhk":9}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"NUSmhk"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":20,"NUSmhk":1}}]

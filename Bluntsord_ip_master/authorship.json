[{"path":"Text/History.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Bluntsord"},"content":"[D][X] deadline smth  23/01/2000 23:00","lastModifiedDate":"2021-09-20"},{"lineNumber":2,"author":{"gitId":"Bluntsord"},"content":"[T][X] smth ","lastModifiedDate":"2021-09-11"},{"lineNumber":3,"author":{"gitId":"Bluntsord"},"content":"[T][X] another ","lastModifiedDate":"2021-09-20"}],"authorContributionMap":{"Bluntsord":3}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"Bluntsord"},"content":"    implementation \u0027org.jetbrains:annotations:19.0.0\u0027","lastModifiedDate":"2021-09-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"Bluntsord"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":17,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"Bluntsord"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"Bluntsord"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":20,"author":{"gitId":"Bluntsord"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":21,"author":{"gitId":"Bluntsord"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":22,"author":{"gitId":"Bluntsord"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":23,"author":{"gitId":"Bluntsord"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":24,"author":{"gitId":"Bluntsord"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":25,"author":{"gitId":"Bluntsord"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":26,"author":{"gitId":"Bluntsord"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":27,"author":{"gitId":"Bluntsord"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":28,"author":{"gitId":"Bluntsord"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":29,"author":{"gitId":"Bluntsord"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"Bluntsord"},"content":"    mainClassName \u003d \"duke.Launcher\"","lastModifiedDate":"2021-09-06"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Bluntsord":16,"-":45}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2019-07-29"},{"lineNumber":2,"author":{"gitId":"Bluntsord"},"content":"Project Duke Chatbot will be officially known as Dukebot for short.","lastModifiedDate":"2021-09-20"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":6,"author":{"gitId":"Bluntsord"},"content":"Greetings summoner, this is the user manual for dukeBot. A general guideline for","lastModifiedDate":"2021-09-20"},{"lineNumber":7,"author":{"gitId":"Bluntsord"},"content":"the functionality of the bot is listed here. For more detailed information regarding","lastModifiedDate":"2021-09-20"},{"lineNumber":8,"author":{"gitId":"Bluntsord"},"content":"the software architecture etc, please refer to the developer\u0027s guide below.","lastModifiedDate":"2021-09-20"},{"lineNumber":9,"author":{"gitId":"Bluntsord"},"content":"Below is the general UI of the bot. Dukebot mainly focuses on keyboard input so","lastModifiedDate":"2021-09-20"},{"lineNumber":10,"author":{"gitId":"Bluntsord"},"content":"all commands can simply be typed. Dukebot also does not require connection as you can run","lastModifiedDate":"2021-09-20"},{"lineNumber":11,"author":{"gitId":"Bluntsord"},"content":"the files locally.","lastModifiedDate":"2021-09-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":15,"author":{"gitId":"Bluntsord"},"content":"![DukeBotUI](Ui.png)","lastModifiedDate":"2021-09-20"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":17,"author":{"gitId":"Bluntsord"},"content":"## Features","lastModifiedDate":"2021-09-20"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":19,"author":{"gitId":"Bluntsord"},"content":"### Help command","lastModifiedDate":"2021-09-20"},{"lineNumber":20,"author":{"gitId":"Bluntsord"},"content":"Dukebot supports the usage of help command. This help command is intended to act as a quick ","lastModifiedDate":"2021-09-20"},{"lineNumber":21,"author":{"gitId":"Bluntsord"},"content":"reference to users.","lastModifiedDate":"2021-09-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":23,"author":{"gitId":"Bluntsord"},"content":"![helpCommand](./Assets/helpCommand.png)","lastModifiedDate":"2021-09-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":25,"author":{"gitId":"Bluntsord"},"content":"The above is a general help command. We can search for specific commands by typing either the number","lastModifiedDate":"2021-09-20"},{"lineNumber":26,"author":{"gitId":"Bluntsord"},"content":"or the word.","lastModifiedDate":"2021-09-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":28,"author":{"gitId":"Bluntsord"},"content":"![helpOneCommand](./Assets/helpOneCommand.png)","lastModifiedDate":"2021-09-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":30,"author":{"gitId":"Bluntsord"},"content":"### Add and manage your tasks","lastModifiedDate":"2021-09-20"},{"lineNumber":31,"author":{"gitId":"Bluntsord"},"content":"Dukebot supports the use of three tasks. Creation of these tasks would be added to log ","lastModifiedDate":"2021-09-20"},{"lineNumber":32,"author":{"gitId":"Bluntsord"},"content":"of the bot.","lastModifiedDate":"2021-09-20"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":34,"author":{"gitId":"Bluntsord"},"content":"![todoFirstTask](./Assets/todoFirstTask.png)","lastModifiedDate":"2021-09-20"},{"lineNumber":35,"author":{"gitId":"Bluntsord"},"content":"* Todo: The simplest task that records and event. There is no fixed condition for this ","lastModifiedDate":"2021-09-20"},{"lineNumber":36,"author":{"gitId":"Bluntsord"},"content":"task. The format for this is task {insert task here}","lastModifiedDate":"2021-09-20"},{"lineNumber":37,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":38,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":39,"author":{"gitId":"Bluntsord"},"content":"![deadlineSecondTask](./Assets/deadlineSecondTask.png)","lastModifiedDate":"2021-09-20"},{"lineNumber":40,"author":{"gitId":"Bluntsord"},"content":"* Deadline: A task with a deadline that it needs to be completed by. The format is ","lastModifiedDate":"2021-09-20"},{"lineNumber":41,"author":{"gitId":"Bluntsord"},"content":"deadline {insert task name here} {/by DD/MM/YYYY HH/MM}.","lastModifiedDate":"2021-09-20"},{"lineNumber":42,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":43,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":44,"author":{"gitId":"Bluntsord"},"content":"![eventThirdTask](./Assets/eventThirdTask.png)","lastModifiedDate":"2021-09-20"},{"lineNumber":45,"author":{"gitId":"Bluntsord"},"content":"* Event: A task with a time that it is conducted at. The format is ","lastModifiedDate":"2021-09-20"},{"lineNumber":46,"author":{"gitId":"Bluntsord"},"content":"deadline {insert task name here} {/by DD/MM/YYYY HH/MM}.","lastModifiedDate":"2021-09-20"},{"lineNumber":47,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":48,"author":{"gitId":"Bluntsord"},"content":"### List tasks","lastModifiedDate":"2021-09-20"},{"lineNumber":49,"author":{"gitId":"Bluntsord"},"content":"We are able to list the tasks in the log using the list command. Previously created tasks","lastModifiedDate":"2021-09-20"},{"lineNumber":50,"author":{"gitId":"Bluntsord"},"content":"will be displayed here.","lastModifiedDate":"2021-09-20"},{"lineNumber":51,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":52,"author":{"gitId":"Bluntsord"},"content":"![listCommand](./Assets/listCommand.png)","lastModifiedDate":"2021-09-20"},{"lineNumber":53,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":54,"author":{"gitId":"Bluntsord"},"content":"### Complete Tasks","lastModifiedDate":"2021-09-20"},{"lineNumber":55,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":56,"author":{"gitId":"Bluntsord"},"content":"Tasks can be completed to show the user that the command has been executed already.","lastModifiedDate":"2021-09-20"},{"lineNumber":57,"author":{"gitId":"Bluntsord"},"content":"**Completed Commands are automatically deleted to prevent long text**","lastModifiedDate":"2021-09-20"},{"lineNumber":58,"author":{"gitId":"Bluntsord"},"content":"The format for done command is done {insert task number here}","lastModifiedDate":"2021-09-20"},{"lineNumber":59,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":60,"author":{"gitId":"Bluntsord"},"content":"Precompleted tasklist:\\","lastModifiedDate":"2021-09-20"},{"lineNumber":61,"author":{"gitId":"Bluntsord"},"content":"![preCompletedTasklist](./Assets/doneCommandAction.png)","lastModifiedDate":"2021-09-20"},{"lineNumber":62,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":63,"author":{"gitId":"Bluntsord"},"content":"After done command:\\","lastModifiedDate":"2021-09-20"},{"lineNumber":64,"author":{"gitId":"Bluntsord"},"content":"![afterDonelist](./Assets/doneCompletedAction.png)","lastModifiedDate":"2021-09-20"},{"lineNumber":65,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":66,"author":{"gitId":"Bluntsord"},"content":"### Delete tasks","lastModifiedDate":"2021-09-20"},{"lineNumber":67,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":68,"author":{"gitId":"Bluntsord"},"content":"Tasks can be deleted to prevent long text fields. The format for deleting tasks is","lastModifiedDate":"2021-09-20"},{"lineNumber":69,"author":{"gitId":"Bluntsord"},"content":"delete {insert task number here}","lastModifiedDate":"2021-09-20"},{"lineNumber":70,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":71,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":72,"author":{"gitId":"Bluntsord"},"content":"Precompleted tasklist:\\","lastModifiedDate":"2021-09-20"},{"lineNumber":73,"author":{"gitId":"Bluntsord"},"content":"![preCompletedTaskList](./Assets/deleteCommandAcknowledge.png)","lastModifiedDate":"2021-09-20"},{"lineNumber":74,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":75,"author":{"gitId":"Bluntsord"},"content":"Completed delete command:\\","lastModifiedDate":"2021-09-20"},{"lineNumber":76,"author":{"gitId":"Bluntsord"},"content":"![completedDeleteCommand](./Assets/deleteCommandCompleted.png)","lastModifiedDate":"2021-09-20"},{"lineNumber":77,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":78,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":79,"author":{"gitId":"Bluntsord"},"content":"### Find command","lastModifiedDate":"2021-09-20"},{"lineNumber":80,"author":{"gitId":"Bluntsord"},"content":"The find command can be used to search for certain tasks to see the deadline.","lastModifiedDate":"2021-09-20"},{"lineNumber":81,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":82,"author":{"gitId":"Bluntsord"},"content":"Before find Command List:\\","lastModifiedDate":"2021-09-20"},{"lineNumber":83,"author":{"gitId":"Bluntsord"},"content":"![findPrelist](./Assets/findPreList.png)","lastModifiedDate":"2021-09-20"},{"lineNumber":84,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":85,"author":{"gitId":"Bluntsord"},"content":"After find command:\\","lastModifiedDate":"2021-09-20"},{"lineNumber":86,"author":{"gitId":"Bluntsord"},"content":"![findPostList](./Assets/findCommandCompleted.png)","lastModifiedDate":"2021-09-20"},{"lineNumber":87,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":88,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":89,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":90,"author":{"gitId":"Bluntsord"},"content":"# Dev Guide","lastModifiedDate":"2021-08-18"},{"lineNumber":91,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":92,"author":{"gitId":"Bluntsord"},"content":"This is the for the current version of Dukebot lvl 1.","lastModifiedDate":"2021-08-18"},{"lineNumber":93,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":94,"author":{"gitId":"Bluntsord"},"content":"The below is an attached image of what the architecture of the DukeBot is.","lastModifiedDate":"2021-08-18"},{"lineNumber":95,"author":{"gitId":"Bluntsord"},"content":"![DukeBotWorkFlow](Assets/DukeBotWorkFlow.png)","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"Bluntsord":81,"-":14}},{"path":"src/main/java/duke/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bluntsord"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"Bluntsord"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"Bluntsord"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"Bluntsord"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"Bluntsord"},"content":" * Packaged command that the parser outputs. Is process by the logic layer and is for ease of processing.","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"Bluntsord"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"Bluntsord"},"content":"public class Command {","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":11,"author":{"gitId":"Bluntsord"},"content":"    private Task.TaskType taskType;","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"Bluntsord"},"content":"    private ArrayList\u003cString\u003e listOfCommandInputs;","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"Bluntsord"},"content":"    private String log;","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"Bluntsord"},"content":"    private LocalDateTime localDateTime;","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":17,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"Bluntsord"},"content":"     * Constructor for packaged command made by parser","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"Bluntsord"},"content":"     * @param taskType duke.Task type","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"Bluntsord"},"content":"     * @param listOfCommandInputs The entire input entered by the user","lastModifiedDate":"2021-08-19"},{"lineNumber":21,"author":{"gitId":"Bluntsord"},"content":"     * @param log The logged statement. Used to update log since there are keywords that are not supposed to","lastModifiedDate":"2021-08-19"},{"lineNumber":22,"author":{"gitId":"Bluntsord"},"content":"     *            appear in the log statement","lastModifiedDate":"2021-08-19"},{"lineNumber":23,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":24,"author":{"gitId":"Bluntsord"},"content":"    public Command(Task.TaskType taskType, ArrayList\u003cString\u003e listOfCommandInputs, String log) {","lastModifiedDate":"2021-08-19"},{"lineNumber":25,"author":{"gitId":"Bluntsord"},"content":"        this.taskType \u003d taskType;","lastModifiedDate":"2021-08-19"},{"lineNumber":26,"author":{"gitId":"Bluntsord"},"content":"        this.listOfCommandInputs \u003d listOfCommandInputs;","lastModifiedDate":"2021-08-19"},{"lineNumber":27,"author":{"gitId":"Bluntsord"},"content":"        this.log \u003d log;","lastModifiedDate":"2021-08-19"},{"lineNumber":28,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":29,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":30,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":31,"author":{"gitId":"Bluntsord"},"content":"     * Overloaded constructor for Command class that includes local dateTime","lastModifiedDate":"2021-08-28"},{"lineNumber":32,"author":{"gitId":"Bluntsord"},"content":"     * @param taskType See above","lastModifiedDate":"2021-08-28"},{"lineNumber":33,"author":{"gitId":"Bluntsord"},"content":"     * @param listOfCommandInputs See above","lastModifiedDate":"2021-08-28"},{"lineNumber":34,"author":{"gitId":"Bluntsord"},"content":"     * @param log See above","lastModifiedDate":"2021-08-28"},{"lineNumber":35,"author":{"gitId":"Bluntsord"},"content":"     * @param localDateTime Includes the localDateTime for command","lastModifiedDate":"2021-08-28"},{"lineNumber":36,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":37,"author":{"gitId":"Bluntsord"},"content":"    public Command(Task.TaskType taskType, ArrayList\u003cString\u003e listOfCommandInputs,","lastModifiedDate":"2021-09-01"},{"lineNumber":38,"author":{"gitId":"Bluntsord"},"content":"                   String log, LocalDateTime localDateTime) {","lastModifiedDate":"2021-09-01"},{"lineNumber":39,"author":{"gitId":"Bluntsord"},"content":"        this(taskType, listOfCommandInputs, log);","lastModifiedDate":"2021-09-07"},{"lineNumber":40,"author":{"gitId":"Bluntsord"},"content":"        this.localDateTime \u003d localDateTime;","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":45,"author":{"gitId":"Bluntsord"},"content":"     * Returns tasktype","lastModifiedDate":"2021-08-19"},{"lineNumber":46,"author":{"gitId":"Bluntsord"},"content":"     * @return duke.Task type. Made task type into an enum for ease","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":48,"author":{"gitId":"Bluntsord"},"content":"    public Task.TaskType getTaskType() {","lastModifiedDate":"2021-08-19"},{"lineNumber":49,"author":{"gitId":"Bluntsord"},"content":"        return this.taskType;","lastModifiedDate":"2021-08-19"},{"lineNumber":50,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":51,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":52,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":53,"author":{"gitId":"Bluntsord"},"content":"     * Returns list of command inputs","lastModifiedDate":"2021-08-19"},{"lineNumber":54,"author":{"gitId":"Bluntsord"},"content":"     * @return ArrayList of strings, split by \" \". Makes it easier to access individual words","lastModifiedDate":"2021-08-19"},{"lineNumber":55,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":56,"author":{"gitId":"Bluntsord"},"content":"    public ArrayList\u003cString\u003e getListOfCommandInputs() {","lastModifiedDate":"2021-08-19"},{"lineNumber":57,"author":{"gitId":"Bluntsord"},"content":"        return this.listOfCommandInputs;","lastModifiedDate":"2021-08-19"},{"lineNumber":58,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":59,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":60,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":61,"author":{"gitId":"Bluntsord"},"content":"     * Returns log statement","lastModifiedDate":"2021-08-19"},{"lineNumber":62,"author":{"gitId":"Bluntsord"},"content":"     * @return String for logging later","lastModifiedDate":"2021-08-19"},{"lineNumber":63,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":64,"author":{"gitId":"Bluntsord"},"content":"    public String getLog() {","lastModifiedDate":"2021-08-19"},{"lineNumber":65,"author":{"gitId":"Bluntsord"},"content":"        return this.log;","lastModifiedDate":"2021-08-19"},{"lineNumber":66,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":67,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":68,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":69,"author":{"gitId":"Bluntsord"},"content":"     * Returns local dateTime","lastModifiedDate":"2021-08-28"},{"lineNumber":70,"author":{"gitId":"Bluntsord"},"content":"     * @return localdatetime.","lastModifiedDate":"2021-08-28"},{"lineNumber":71,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":72,"author":{"gitId":"Bluntsord"},"content":"    public LocalDateTime getLocalDateTime() {","lastModifiedDate":"2021-08-26"},{"lineNumber":73,"author":{"gitId":"Bluntsord"},"content":"        return this.localDateTime;","lastModifiedDate":"2021-08-26"},{"lineNumber":74,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":75,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":76,"author":{"gitId":"Bluntsord"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"Bluntsord":76}},{"path":"src/main/java/duke/DataHandlerLayer.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bluntsord"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"Bluntsord"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2021-09-07"},{"lineNumber":4,"author":{"gitId":"Bluntsord"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"Bluntsord"},"content":"import java.util.function.Function;","lastModifiedDate":"2021-09-07"},{"lineNumber":6,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"Bluntsord"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"Bluntsord"},"content":" * Handles all things related to data. This includes the in-memory storage represented by an arrayList or","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"Bluntsord"},"content":" * the persistent storage handled by the .txt files.","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"Bluntsord"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"Bluntsord"},"content":"public class DataHandlerLayer {","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"Bluntsord"},"content":"     * In memory storage for log, for history, refer to the history variable","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"Bluntsord"},"content":"    private static ArrayList\u003cTask\u003e log \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"Bluntsord"},"content":"     * History file that will be written to","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"Bluntsord"},"content":"    private static String dirName \u003d Paths.get(System.getProperty(\"user.dir\"), \"Text\")","lastModifiedDate":"2021-09-09"},{"lineNumber":22,"author":{"gitId":"Bluntsord"},"content":"            .toAbsolutePath().toString();","lastModifiedDate":"2021-09-09"},{"lineNumber":23,"author":{"gitId":"Bluntsord"},"content":"    private static String fileName \u003d Paths.get(System.getProperty(\"user.dir\"), \"Text\", \"History.txt\")","lastModifiedDate":"2021-09-09"},{"lineNumber":24,"author":{"gitId":"Bluntsord"},"content":"            .toAbsolutePath().toString();","lastModifiedDate":"2021-09-09"},{"lineNumber":25,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"Bluntsord"},"content":"     * Init data storage handler for history.","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"Bluntsord"},"content":"    private static PersistentStorageHandler history \u003d new PersistentStorageHandler(dirName, fileName);","lastModifiedDate":"2021-09-07"},{"lineNumber":30,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":33,"author":{"gitId":"Bluntsord"},"content":"     * Adds the command to the log.","lastModifiedDate":"2021-08-18"},{"lineNumber":34,"author":{"gitId":"Bluntsord"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":35,"author":{"gitId":"Bluntsord"},"content":"     * @param task duke.Command to be added to the log","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":37,"author":{"gitId":"Bluntsord"},"content":"    public static void addToLog(Task task) {","lastModifiedDate":"2021-08-18"},{"lineNumber":38,"author":{"gitId":"Bluntsord"},"content":"        log.add(task);","lastModifiedDate":"2021-08-18"},{"lineNumber":39,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":40,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":41,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":42,"author":{"gitId":"Bluntsord"},"content":"     * Returns the task at the specific log postion","lastModifiedDate":"2021-08-18"},{"lineNumber":43,"author":{"gitId":"Bluntsord"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"Bluntsord"},"content":"     * @param position","lastModifiedDate":"2021-08-18"},{"lineNumber":45,"author":{"gitId":"Bluntsord"},"content":"     * @return duke.Task","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":47,"author":{"gitId":"Bluntsord"},"content":"    public static Task getTask(int position) {","lastModifiedDate":"2021-08-18"},{"lineNumber":48,"author":{"gitId":"Bluntsord"},"content":"        return log.get(position);","lastModifiedDate":"2021-08-18"},{"lineNumber":49,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":50,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":51,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":52,"author":{"gitId":"Bluntsord"},"content":"     * Prints a log of tasks that are filtered. True for completed and False for not completed","lastModifiedDate":"2021-08-18"},{"lineNumber":53,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":54,"author":{"gitId":"Bluntsord"},"content":"    public static String getFilteredLog(Function\u003cTask, Boolean\u003e function) {","lastModifiedDate":"2021-09-07"},{"lineNumber":55,"author":{"gitId":"Bluntsord"},"content":"        int taskNumber \u003d 1;","lastModifiedDate":"2021-08-18"},{"lineNumber":56,"author":{"gitId":"Bluntsord"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2021-09-07"},{"lineNumber":57,"author":{"gitId":"Bluntsord"},"content":"        for (Task temp : log) {","lastModifiedDate":"2021-08-18"},{"lineNumber":58,"author":{"gitId":"Bluntsord"},"content":"            if (function.apply(temp)) {","lastModifiedDate":"2021-09-07"},{"lineNumber":59,"author":{"gitId":"Bluntsord"},"content":"                sb.append(taskNumber + \". \" + temp.toString() + \"\\n\");","lastModifiedDate":"2021-09-07"},{"lineNumber":60,"author":{"gitId":"Bluntsord"},"content":"                taskNumber++;","lastModifiedDate":"2021-08-18"},{"lineNumber":61,"author":{"gitId":"Bluntsord"},"content":"            }","lastModifiedDate":"2021-08-18"},{"lineNumber":62,"author":{"gitId":"Bluntsord"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":63,"author":{"gitId":"Bluntsord"},"content":"        return sb.toString();","lastModifiedDate":"2021-09-07"},{"lineNumber":64,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":65,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":66,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":67,"author":{"gitId":"Bluntsord"},"content":"     * Deletes any task in the specified postion of log","lastModifiedDate":"2021-08-28"},{"lineNumber":68,"author":{"gitId":"Bluntsord"},"content":"     *","lastModifiedDate":"2021-09-09"},{"lineNumber":69,"author":{"gitId":"Bluntsord"},"content":"     * @param position in the log which is based on index.","lastModifiedDate":"2021-08-28"},{"lineNumber":70,"author":{"gitId":"Bluntsord"},"content":"     * @throws IndexOutOfBoundsException If the player specifies a postion outside the length of the log","lastModifiedDate":"2021-08-28"},{"lineNumber":71,"author":{"gitId":"Bluntsord"},"content":"     *                                   this error is thrown","lastModifiedDate":"2021-08-28"},{"lineNumber":72,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":73,"author":{"gitId":"Bluntsord"},"content":"    public static void delete(int position) throws IndexOutOfBoundsException {","lastModifiedDate":"2021-08-19"},{"lineNumber":74,"author":{"gitId":"Bluntsord"},"content":"        assert position \u003e\u003d 0;","lastModifiedDate":"2021-09-06"},{"lineNumber":75,"author":{"gitId":"Bluntsord"},"content":"        if (position \u003d\u003d 0) {","lastModifiedDate":"2021-08-19"},{"lineNumber":76,"author":{"gitId":"Bluntsord"},"content":"            throw new IndexOutOfBoundsException();","lastModifiedDate":"2021-08-19"},{"lineNumber":77,"author":{"gitId":"Bluntsord"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":78,"author":{"gitId":"Bluntsord"},"content":"        log.remove(position - 1);","lastModifiedDate":"2021-08-19"},{"lineNumber":79,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":80,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":81,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":82,"author":{"gitId":"Bluntsord"},"content":"     * Prints all the lines in the history","lastModifiedDate":"2021-08-25"},{"lineNumber":83,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":84,"author":{"gitId":"Bluntsord"},"content":"    public static void printHistory() {","lastModifiedDate":"2021-08-26"},{"lineNumber":85,"author":{"gitId":"Bluntsord"},"content":"        history.printAllLines();","lastModifiedDate":"2021-08-25"},{"lineNumber":86,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":87,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":88,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":89,"author":{"gitId":"Bluntsord"},"content":"     * Closes the printer","lastModifiedDate":"2021-08-28"},{"lineNumber":90,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":91,"author":{"gitId":"Bluntsord"},"content":"    public static void stopWriting() {","lastModifiedDate":"2021-08-25"},{"lineNumber":92,"author":{"gitId":"Bluntsord"},"content":"        history.stopWriting();","lastModifiedDate":"2021-08-25"},{"lineNumber":93,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":94,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":95,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":96,"author":{"gitId":"Bluntsord"},"content":"     * Packages the data(in string) into Commands in the persistent storage using","lastModifiedDate":"2021-08-28"},{"lineNumber":97,"author":{"gitId":"Bluntsord"},"content":"     * this commands. The data is packaged as","lastModifiedDate":"2021-08-28"},{"lineNumber":98,"author":{"gitId":"Bluntsord"},"content":"     * Command classes. To be passed to Logic for processing","lastModifiedDate":"2021-08-28"},{"lineNumber":99,"author":{"gitId":"Bluntsord"},"content":"     *","lastModifiedDate":"2021-09-09"},{"lineNumber":100,"author":{"gitId":"Bluntsord"},"content":"     * @return An arraylist of packaged commands","lastModifiedDate":"2021-08-28"},{"lineNumber":101,"author":{"gitId":"Bluntsord"},"content":"     * @throws InvalidCommandException thrown when any of the commands in string cannot be packaged as a command class.","lastModifiedDate":"2021-08-28"},{"lineNumber":102,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":103,"author":{"gitId":"Bluntsord"},"content":"    public static ArrayList\u003cCommand\u003e loadPreset() throws InvalidCommandException {","lastModifiedDate":"2021-08-25"},{"lineNumber":104,"author":{"gitId":"Bluntsord"},"content":"        return Parser.parsePreloadedTasks(history.getAllLines());","lastModifiedDate":"2021-09-01"},{"lineNumber":105,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":106,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":107,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":108,"author":{"gitId":"Bluntsord"},"content":"     * Appends any task written to history.","lastModifiedDate":"2021-08-28"},{"lineNumber":109,"author":{"gitId":"Bluntsord"},"content":"     *","lastModifiedDate":"2021-09-09"},{"lineNumber":110,"author":{"gitId":"Bluntsord"},"content":"     * @param task","lastModifiedDate":"2021-08-28"},{"lineNumber":111,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":112,"author":{"gitId":"Bluntsord"},"content":"    public static void appendToHistory(Task task) {","lastModifiedDate":"2021-08-25"},{"lineNumber":113,"author":{"gitId":"Bluntsord"},"content":"        history.write(task.toString());","lastModifiedDate":"2021-08-25"},{"lineNumber":114,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":115,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":116,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":117,"author":{"gitId":"Bluntsord"},"content":"     * Updates history and writes stuff down. Will auto clear all the tasks that is not done.","lastModifiedDate":"2021-08-28"},{"lineNumber":118,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":119,"author":{"gitId":"Bluntsord"},"content":"    public static void updateHistory() {","lastModifiedDate":"2021-08-25"},{"lineNumber":120,"author":{"gitId":"Bluntsord"},"content":"        history.clearHistory();","lastModifiedDate":"2021-08-28"},{"lineNumber":121,"author":{"gitId":"Bluntsord"},"content":"        for (Task task : log) {","lastModifiedDate":"2021-08-25"},{"lineNumber":122,"author":{"gitId":"Bluntsord"},"content":"            if (!task.getCompleteStatus()) {","lastModifiedDate":"2021-08-28"},{"lineNumber":123,"author":{"gitId":"Bluntsord"},"content":"                appendToHistory(task);","lastModifiedDate":"2021-08-25"},{"lineNumber":124,"author":{"gitId":"Bluntsord"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":125,"author":{"gitId":"Bluntsord"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":126,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":127,"author":{"gitId":"Bluntsord"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"Bluntsord":127}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bluntsord"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"Bluntsord"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"Bluntsord"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"Bluntsord"},"content":"/**","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"Bluntsord"},"content":" * Deadline class that extends tasks. Should come with a name for the task as well as a deadline for the task","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"Bluntsord"},"content":" */","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"Bluntsord"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"Bluntsord"},"content":"    private static DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"Bluntsord"},"content":"    private LocalDateTime deadline;","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"Bluntsord"},"content":"     * Constructor for Deadline task","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"Bluntsord"},"content":"     * @param name name of task","lastModifiedDate":"2021-08-19"},{"lineNumber":17,"author":{"gitId":"Bluntsord"},"content":"     * @param deadline Use to indicate the deadline of the task","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"Bluntsord"},"content":"    public Deadline(String name, LocalDateTime deadline) {","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"Bluntsord"},"content":"        super(name);","lastModifiedDate":"2021-08-19"},{"lineNumber":21,"author":{"gitId":"Bluntsord"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2021-08-19"},{"lineNumber":22,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":23,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":24,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":25,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":26,"author":{"gitId":"Bluntsord"},"content":"     * String representation of the Deadline class","lastModifiedDate":"2021-08-19"},{"lineNumber":27,"author":{"gitId":"Bluntsord"},"content":"     * @return String. See above","lastModifiedDate":"2021-08-19"},{"lineNumber":28,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":29,"author":{"gitId":"Bluntsord"},"content":"    public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":30,"author":{"gitId":"Bluntsord"},"content":"        return \"[D]\" + super.toString() + \" \" + formatter.format(deadline);","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":32,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"Bluntsord"},"content":"    public LocalDateTime getDeadline() {","lastModifiedDate":"2021-09-07"},{"lineNumber":34,"author":{"gitId":"Bluntsord"},"content":"        return this.deadline;","lastModifiedDate":"2021-09-07"},{"lineNumber":35,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":36,"author":{"gitId":"Bluntsord"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"Bluntsord":36}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bluntsord"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"Bluntsord"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"Bluntsord"},"content":" * Main file for the duke bot. The duke bot keeps track of all your task and allows you to mark as complete.","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"Bluntsord"},"content":" * Call list to see the list of task. Each task can be completed. When a task is completed, it will still appear","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"Bluntsord"},"content":" * when you call list this time, but will be deleted from history for storage purposes the next time it is ran.","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"Bluntsord"},"content":" * Use dukebot to mark down tasks today!","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"Bluntsord"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":10,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"Bluntsord"},"content":"    private static boolean isRunning \u003d false;","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"Bluntsord"},"content":"     * Function starts the process of the dukebot, closes when the \"Bye command is issued\"","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"Bluntsord"},"content":"    public static void start() {","lastModifiedDate":"2021-09-03"},{"lineNumber":17,"author":{"gitId":"Bluntsord"},"content":"        isRunning \u003d true;","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"Bluntsord"},"content":"        Logic.preload();","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"Bluntsord"},"content":"        while (true) {","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"Bluntsord"},"content":"            String command \u003d UI.scan();","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"Bluntsord"},"content":"            Logic.checkIfSpecialCommand(command);","lastModifiedDate":"2021-09-07"},{"lineNumber":22,"author":{"gitId":"Bluntsord"},"content":"            //Check if the logic has made any changes to quit the programme or continue running","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"Bluntsord"},"content":"            if (!isRunning) {","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"Bluntsord"},"content":"                System.out.println(\"See ya\");","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"Bluntsord"},"content":"                break;","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"Bluntsord"},"content":"            }","lastModifiedDate":"2021-08-18"},{"lineNumber":27,"author":{"gitId":"Bluntsord"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":28,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":29,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":30,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"Bluntsord"},"content":"     * Stop the running of the bot","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"Bluntsord"},"content":"    protected static void stop() {","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"Bluntsord"},"content":"        assert isRunning;","lastModifiedDate":"2021-09-06"},{"lineNumber":35,"author":{"gitId":"Bluntsord"},"content":"        isRunning \u003d false;","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":39,"author":{"gitId":"Bluntsord"},"content":"     * Starting point of the dukeBot","lastModifiedDate":"2021-08-18"},{"lineNumber":40,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        String logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2019-07-29"},{"lineNumber":47,"author":{"gitId":"Bluntsord"},"content":"        System.out.println(\"Hello from\\n\" + logo + \"\\nWhat can I do for you today?\");","lastModifiedDate":"2021-08-18"},{"lineNumber":48,"author":{"gitId":"Bluntsord"},"content":"        start();","lastModifiedDate":"2021-08-18"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":50,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":51,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"Bluntsord":42,"-":9}},{"path":"src/main/java/duke/EmptyCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bluntsord"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"Bluntsord"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"Bluntsord"},"content":" * Empty duke.Command exception","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"Bluntsord"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"Bluntsord"},"content":"public class EmptyCommandException extends InvalidCommandException {","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"Bluntsord"},"content":"     * Overridden method from duke.InvalidCommandException. Constructor","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"Bluntsord"},"content":"    public EmptyCommandException() {","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"Bluntsord"},"content":"        super(\"Input is empty! Please enter something into the chat\");","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"Bluntsord"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"Bluntsord":13}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bluntsord"},"content":"package duke;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"Bluntsord"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"Bluntsord"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"Bluntsord"},"content":"/**","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"Bluntsord"},"content":" * duke.Event class that extends task. Events should have a dead and time as well as a name","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"Bluntsord"},"content":" */","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"Bluntsord"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"Bluntsord"},"content":"    private static DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"Bluntsord"},"content":"    private LocalDateTime dateTime;","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"Bluntsord"},"content":"     * Constructor for event class","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"Bluntsord"},"content":"     * @param name Name for the event","lastModifiedDate":"2021-08-19"},{"lineNumber":17,"author":{"gitId":"Bluntsord"},"content":"     * @param dateTime date the event is held","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"Bluntsord"},"content":"    public Event(String name, LocalDateTime dateTime) {","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"Bluntsord"},"content":"        super(name);","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"Bluntsord"},"content":"        this.dateTime \u003d dateTime;","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":24,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":25,"author":{"gitId":"Bluntsord"},"content":"     * String representation of the event class","lastModifiedDate":"2021-08-19"},{"lineNumber":26,"author":{"gitId":"Bluntsord"},"content":"     * @return String. See above.","lastModifiedDate":"2021-08-19"},{"lineNumber":27,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":28,"author":{"gitId":"Bluntsord"},"content":"    public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":29,"author":{"gitId":"Bluntsord"},"content":"        return \"[E]\" + super.toString() + \" \" + formatter.format(this.dateTime);","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":31,"author":{"gitId":"Bluntsord"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"Bluntsord":31}},{"path":"src/main/java/duke/HelpCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bluntsord"},"content":"package duke;","lastModifiedDate":"2021-09-11"},{"lineNumber":2,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":3,"author":{"gitId":"Bluntsord"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-11"},{"lineNumber":4,"author":{"gitId":"Bluntsord"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-09-11"},{"lineNumber":5,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":6,"author":{"gitId":"Bluntsord"},"content":"public class HelpCommand {","lastModifiedDate":"2021-09-11"},{"lineNumber":7,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":8,"author":{"gitId":"Bluntsord"},"content":"    private static String generalHelp \u003d \"You require my assistance! \\n Dukebot is a app that helps \"","lastModifiedDate":"2021-09-20"},{"lineNumber":9,"author":{"gitId":"Bluntsord"},"content":"            + \"you create many basic tasks and complete them. Here are some basic commands that \"","lastModifiedDate":"2021-09-20"},{"lineNumber":10,"author":{"gitId":"Bluntsord"},"content":"            + \"are supported as of this current version\"","lastModifiedDate":"2021-09-20"},{"lineNumber":11,"author":{"gitId":"Bluntsord"},"content":"            + \"\\n \\n\"","lastModifiedDate":"2021-09-20"},{"lineNumber":12,"author":{"gitId":"Bluntsord"},"content":"            + \"1. Todo creation\\n\"","lastModifiedDate":"2021-09-20"},{"lineNumber":13,"author":{"gitId":"Bluntsord"},"content":"            + \"2. Deadline creation\\n\"","lastModifiedDate":"2021-09-20"},{"lineNumber":14,"author":{"gitId":"Bluntsord"},"content":"            + \"3. Event creation\\n\"","lastModifiedDate":"2021-09-20"},{"lineNumber":15,"author":{"gitId":"Bluntsord"},"content":"            + \"4. Bye command\"","lastModifiedDate":"2021-09-20"},{"lineNumber":16,"author":{"gitId":"Bluntsord"},"content":"            + \"5. Done command\"","lastModifiedDate":"2021-09-20"},{"lineNumber":17,"author":{"gitId":"Bluntsord"},"content":"            + \"6. Find command\"","lastModifiedDate":"2021-09-20"},{"lineNumber":18,"author":{"gitId":"Bluntsord"},"content":"            + \"7. Delete command\"","lastModifiedDate":"2021-09-20"},{"lineNumber":19,"author":{"gitId":"Bluntsord"},"content":"            + \"8. List command\"","lastModifiedDate":"2021-09-20"},{"lineNumber":20,"author":{"gitId":"Bluntsord"},"content":"            + \"\\n \\n\"","lastModifiedDate":"2021-09-20"},{"lineNumber":21,"author":{"gitId":"Bluntsord"},"content":"            + \"For in depth details for each command enter help followed by the number above or help \"","lastModifiedDate":"2021-09-20"},{"lineNumber":22,"author":{"gitId":"Bluntsord"},"content":"            + \"and lowercase action\"","lastModifiedDate":"2021-09-20"},{"lineNumber":23,"author":{"gitId":"Bluntsord"},"content":"            + \"\\n e.g help todo or help 1\";","lastModifiedDate":"2021-09-20"},{"lineNumber":24,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":25,"author":{"gitId":"Bluntsord"},"content":"    private static String todo \u003d \"Todo is a place to create quick tasks. This is the simplest form of task.\"","lastModifiedDate":"2021-09-20"},{"lineNumber":26,"author":{"gitId":"Bluntsord"},"content":"            + \"\\n The format for todo is: todo *insert name of task here.\"","lastModifiedDate":"2021-09-20"},{"lineNumber":27,"author":{"gitId":"Bluntsord"},"content":"            + \"\\n e.g todo first task creates a todo task that appears as [T][X] first task\";","lastModifiedDate":"2021-09-20"},{"lineNumber":28,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":29,"author":{"gitId":"Bluntsord"},"content":"    private static String deadline \u003d \"Deadlines are tasks with a specific date to be completed. \"","lastModifiedDate":"2021-09-20"},{"lineNumber":30,"author":{"gitId":"Bluntsord"},"content":"            + \"They created with the\"","lastModifiedDate":"2021-09-20"},{"lineNumber":31,"author":{"gitId":"Bluntsord"},"content":"            + \"deadline keyword. The date specified should come after a /by indicator and the \"","lastModifiedDate":"2021-09-20"},{"lineNumber":32,"author":{"gitId":"Bluntsord"},"content":"            + \"format should be DD/MM/YYYY HH:MM\"","lastModifiedDate":"2021-09-20"},{"lineNumber":33,"author":{"gitId":"Bluntsord"},"content":"            + \"\\n \\n The syntax for the command is: deadline *insert task name* /by DD/MM/YYYY HH:MM\"","lastModifiedDate":"2021-09-20"},{"lineNumber":34,"author":{"gitId":"Bluntsord"},"content":"            + \"\\n \\n e.g deadline /by 23/01/2030 23:00\";","lastModifiedDate":"2021-09-20"},{"lineNumber":35,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":36,"author":{"gitId":"Bluntsord"},"content":"    private static String event \u003d \"Events are also tasks with a specific date to be completed. They are created with \"","lastModifiedDate":"2021-09-20"},{"lineNumber":37,"author":{"gitId":"Bluntsord"},"content":"            + \"the event keyword. The date specified should come after a /at idnicator and the \"","lastModifiedDate":"2021-09-20"},{"lineNumber":38,"author":{"gitId":"Bluntsord"},"content":"            + \"format should be DD/MM/YYYY HH:MM\"","lastModifiedDate":"2021-09-20"},{"lineNumber":39,"author":{"gitId":"Bluntsord"},"content":"            + \"\\n \\n The syntax for the command is: event *insert task name* /by DD/MM/YYYY HH:MM\"","lastModifiedDate":"2021-09-20"},{"lineNumber":40,"author":{"gitId":"Bluntsord"},"content":"            + \"\\n \\n e.g event some event /at 23/01/2030 23:00\";","lastModifiedDate":"2021-09-20"},{"lineNumber":41,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":42,"author":{"gitId":"Bluntsord"},"content":"    private static String bye \u003d \"Bye command quits stops the bot and quits the GUI. Simply type bye without \"","lastModifiedDate":"2021-09-20"},{"lineNumber":43,"author":{"gitId":"Bluntsord"},"content":"            + \"anything else\";","lastModifiedDate":"2021-09-20"},{"lineNumber":44,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":45,"author":{"gitId":"Bluntsord"},"content":"    private static String done \u003d \"The done command completes a certain task. Task completed can be seen by entering\"","lastModifiedDate":"2021-09-20"},{"lineNumber":46,"author":{"gitId":"Bluntsord"},"content":"            + \"the command list but will be removed from history, as such will be automatically cleared the next time\"","lastModifiedDate":"2021-09-20"},{"lineNumber":47,"author":{"gitId":"Bluntsord"},"content":"            + \"duke bot runs.\"","lastModifiedDate":"2021-09-20"},{"lineNumber":48,"author":{"gitId":"Bluntsord"},"content":"            + \"\\n \\n The syntax for the command is: done **insert task number here**\"","lastModifiedDate":"2021-09-20"},{"lineNumber":49,"author":{"gitId":"Bluntsord"},"content":"            + \"e.g done 1\";","lastModifiedDate":"2021-09-20"},{"lineNumber":50,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":51,"author":{"gitId":"Bluntsord"},"content":"    private static String find \u003d \"Find allows for searching of tasks with the specified keyword. \"","lastModifiedDate":"2021-09-20"},{"lineNumber":52,"author":{"gitId":"Bluntsord"},"content":"            + \"This is essentially a filter. \"","lastModifiedDate":"2021-09-20"},{"lineNumber":53,"author":{"gitId":"Bluntsord"},"content":"            + \"\\n \\n The syntax of the command is: find **insert keyword here\";","lastModifiedDate":"2021-09-20"},{"lineNumber":54,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":55,"author":{"gitId":"Bluntsord"},"content":"    private static String delete \u003d \"Delete command allows for deleting of files. Simple enter delete followed by the\"","lastModifiedDate":"2021-09-20"},{"lineNumber":56,"author":{"gitId":"Bluntsord"},"content":"            + \"file number\";","lastModifiedDate":"2021-09-20"},{"lineNumber":57,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":58,"author":{"gitId":"Bluntsord"},"content":"    private static String list \u003d \"List command allows for seeing the current log of the file. Simply type list\";","lastModifiedDate":"2021-09-11"},{"lineNumber":59,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":60,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":61,"author":{"gitId":"Bluntsord"},"content":"    private static String[] helpCommands \u003d {","lastModifiedDate":"2021-09-11"},{"lineNumber":62,"author":{"gitId":"Bluntsord"},"content":"        generalHelp,","lastModifiedDate":"2021-09-11"},{"lineNumber":63,"author":{"gitId":"Bluntsord"},"content":"        todo,","lastModifiedDate":"2021-09-11"},{"lineNumber":64,"author":{"gitId":"Bluntsord"},"content":"        deadline,","lastModifiedDate":"2021-09-11"},{"lineNumber":65,"author":{"gitId":"Bluntsord"},"content":"        event,","lastModifiedDate":"2021-09-11"},{"lineNumber":66,"author":{"gitId":"Bluntsord"},"content":"        bye,","lastModifiedDate":"2021-09-11"},{"lineNumber":67,"author":{"gitId":"Bluntsord"},"content":"        done,","lastModifiedDate":"2021-09-11"},{"lineNumber":68,"author":{"gitId":"Bluntsord"},"content":"        find,","lastModifiedDate":"2021-09-11"},{"lineNumber":69,"author":{"gitId":"Bluntsord"},"content":"        delete,","lastModifiedDate":"2021-09-11"},{"lineNumber":70,"author":{"gitId":"Bluntsord"},"content":"        list","lastModifiedDate":"2021-09-11"},{"lineNumber":71,"author":{"gitId":"Bluntsord"},"content":"    };","lastModifiedDate":"2021-09-11"},{"lineNumber":72,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":73,"author":{"gitId":"Bluntsord"},"content":"    private static ArrayList\u003cString\u003e helpCommandString \u003d new ArrayList\u003c\u003e(","lastModifiedDate":"2021-09-11"},{"lineNumber":74,"author":{"gitId":"Bluntsord"},"content":"            Arrays.asList(","lastModifiedDate":"2021-09-11"},{"lineNumber":75,"author":{"gitId":"Bluntsord"},"content":"                    \"generalHelp\",","lastModifiedDate":"2021-09-11"},{"lineNumber":76,"author":{"gitId":"Bluntsord"},"content":"                    \"todo\",","lastModifiedDate":"2021-09-11"},{"lineNumber":77,"author":{"gitId":"Bluntsord"},"content":"                    \"deadline\",","lastModifiedDate":"2021-09-11"},{"lineNumber":78,"author":{"gitId":"Bluntsord"},"content":"                    \"event\",","lastModifiedDate":"2021-09-11"},{"lineNumber":79,"author":{"gitId":"Bluntsord"},"content":"                    \"bye\",","lastModifiedDate":"2021-09-11"},{"lineNumber":80,"author":{"gitId":"Bluntsord"},"content":"                    \"done\",","lastModifiedDate":"2021-09-11"},{"lineNumber":81,"author":{"gitId":"Bluntsord"},"content":"                    \"find\",","lastModifiedDate":"2021-09-11"},{"lineNumber":82,"author":{"gitId":"Bluntsord"},"content":"                    \"list\"","lastModifiedDate":"2021-09-11"},{"lineNumber":83,"author":{"gitId":"Bluntsord"},"content":"            )","lastModifiedDate":"2021-09-11"},{"lineNumber":84,"author":{"gitId":"Bluntsord"},"content":"    );","lastModifiedDate":"2021-09-11"},{"lineNumber":85,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":86,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":87,"author":{"gitId":"Bluntsord"},"content":"    public static String getCommand(int number) {","lastModifiedDate":"2021-09-11"},{"lineNumber":88,"author":{"gitId":"Bluntsord"},"content":"        return helpCommands[number];","lastModifiedDate":"2021-09-11"},{"lineNumber":89,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":90,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":91,"author":{"gitId":"Bluntsord"},"content":"    public static String getCommand(String command) {","lastModifiedDate":"2021-09-11"},{"lineNumber":92,"author":{"gitId":"Bluntsord"},"content":"        return getCommand(helpCommandString.indexOf(command));","lastModifiedDate":"2021-09-11"},{"lineNumber":93,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":94,"author":{"gitId":"Bluntsord"},"content":"}","lastModifiedDate":"2021-09-11"}],"authorContributionMap":{"Bluntsord":94}},{"path":"src/main/java/duke/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bluntsord"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"Bluntsord"},"content":"public class InvalidCommandException extends Exception {","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"Bluntsord"},"content":"     * Constructor for Invalid duke.Command Exception","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"Bluntsord"},"content":"    public InvalidCommandException() {","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"Bluntsord"},"content":"        super(\"Invalid command input. Please enter another input\");","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"Bluntsord"},"content":"     * Overloaded constructor for string inputs","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"Bluntsord"},"content":"     * @param errorMessage","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"Bluntsord"},"content":"    public InvalidCommandException(String errorMessage) {","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"Bluntsord"},"content":"        super(errorMessage);","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"Bluntsord"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"Bluntsord":19}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bluntsord"},"content":"package duke;","lastModifiedDate":"2021-09-03"},{"lineNumber":2,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":3,"author":{"gitId":"Bluntsord"},"content":"import duke.controllers.Main;","lastModifiedDate":"2021-09-03"},{"lineNumber":4,"author":{"gitId":"Bluntsord"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-09-03"},{"lineNumber":5,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":6,"author":{"gitId":"Bluntsord"},"content":"/**","lastModifiedDate":"2021-09-03"},{"lineNumber":7,"author":{"gitId":"Bluntsord"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2021-09-03"},{"lineNumber":8,"author":{"gitId":"Bluntsord"},"content":" */","lastModifiedDate":"2021-09-03"},{"lineNumber":9,"author":{"gitId":"Bluntsord"},"content":"public class Launcher {","lastModifiedDate":"2021-09-03"},{"lineNumber":10,"author":{"gitId":"Bluntsord"},"content":"    private static Object duke;","lastModifiedDate":"2021-09-06"},{"lineNumber":11,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":12,"author":{"gitId":"Bluntsord"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-09-03"},{"lineNumber":13,"author":{"gitId":"Bluntsord"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2021-09-03"},{"lineNumber":14,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-09-03"},{"lineNumber":15,"author":{"gitId":"Bluntsord"},"content":"}","lastModifiedDate":"2021-09-03"}],"authorContributionMap":{"Bluntsord":15}},{"path":"src/main/java/duke/Logic.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bluntsord"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"Bluntsord"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"Bluntsord"},"content":"import java.util.function.Function;","lastModifiedDate":"2021-09-07"},{"lineNumber":5,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"Bluntsord"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"Bluntsord"},"content":" * This is the logic layer where most of the commands are processed and errors are handled.","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"Bluntsord"},"content":" * Please refer to the structure of the diagram in the docs for more information","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"Bluntsord"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"Bluntsord"},"content":"public class Logic {","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"Bluntsord"},"content":"     * This is to check if any special command or empty command is given","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"Bluntsord"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"Bluntsord"},"content":"     * @param command refers to the parsed string. See presentation for parsing","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"Bluntsord"},"content":"     * @throws InvalidCommandException is throwed when there is an invalid command in the form of a string","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"Bluntsord"},"content":"    public static String checkIfSpecialCommand(String command) {","lastModifiedDate":"2021-09-07"},{"lineNumber":19,"author":{"gitId":"Bluntsord"},"content":"        //duke.Logic to check each individual commands, checks for special commands first, then checks for other input","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"Bluntsord"},"content":"        //Use duke.Parser to package command into a packaged command","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"Bluntsord"},"content":"        try {","lastModifiedDate":"2021-09-06"},{"lineNumber":22,"author":{"gitId":"Bluntsord"},"content":"            Command packagedCommand \u003d Parser.parse(command);","lastModifiedDate":"2021-08-19"},{"lineNumber":23,"author":{"gitId":"Bluntsord"},"content":"            ArrayList\u003cString\u003e listOfCommandInputs \u003d packagedCommand.getListOfCommandInputs();","lastModifiedDate":"2021-08-19"},{"lineNumber":24,"author":{"gitId":"Bluntsord"},"content":"            String loggedCommand \u003d packagedCommand.getLog();","lastModifiedDate":"2021-08-19"},{"lineNumber":25,"author":{"gitId":"Bluntsord"},"content":"            if (command.equals(\"\")) {","lastModifiedDate":"2021-08-19"},{"lineNumber":26,"author":{"gitId":"Bluntsord"},"content":"                throw new EmptyCommandException();","lastModifiedDate":"2021-08-19"},{"lineNumber":27,"author":{"gitId":"Bluntsord"},"content":"            } else if (command.equals(\"bye\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"Bluntsord"},"content":"                return processBye();","lastModifiedDate":"2021-09-09"},{"lineNumber":29,"author":{"gitId":"Bluntsord"},"content":"            } else if (listOfCommandInputs.size() \u003d\u003d 1 \u0026\u0026 listOfCommandInputs.get(0).equals(\"list\")) {","lastModifiedDate":"2021-08-19"},{"lineNumber":30,"author":{"gitId":"Bluntsord"},"content":"                return processList();","lastModifiedDate":"2021-09-09"},{"lineNumber":31,"author":{"gitId":"Bluntsord"},"content":"            } else if (listOfCommandInputs.contains(\"delete\")) {","lastModifiedDate":"2021-08-19"},{"lineNumber":32,"author":{"gitId":"Bluntsord"},"content":"                return processDelete(packagedCommand, listOfCommandInputs, loggedCommand);","lastModifiedDate":"2021-09-09"},{"lineNumber":33,"author":{"gitId":"Bluntsord"},"content":"            } else if (listOfCommandInputs.contains(\"done\")) {","lastModifiedDate":"2021-08-19"},{"lineNumber":34,"author":{"gitId":"Bluntsord"},"content":"                return processDone(packagedCommand, listOfCommandInputs, loggedCommand);","lastModifiedDate":"2021-09-09"},{"lineNumber":35,"author":{"gitId":"Bluntsord"},"content":"            } else if (listOfCommandInputs.contains(\"find\")) {","lastModifiedDate":"2021-08-28"},{"lineNumber":36,"author":{"gitId":"Bluntsord"},"content":"                return processFind(packagedCommand, listOfCommandInputs, loggedCommand);","lastModifiedDate":"2021-09-09"},{"lineNumber":37,"author":{"gitId":"Bluntsord"},"content":"            } else if (listOfCommandInputs.get(0).equals(\"help\")) {","lastModifiedDate":"2021-09-11"},{"lineNumber":38,"author":{"gitId":"Bluntsord"},"content":"                return processHelp(listOfCommandInputs);","lastModifiedDate":"2021-09-11"},{"lineNumber":39,"author":{"gitId":"Bluntsord"},"content":"            } else {","lastModifiedDate":"2021-08-18"},{"lineNumber":40,"author":{"gitId":"Bluntsord"},"content":"                processTask(packagedCommand, true);","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"Bluntsord"},"content":"                return loggedCommand;","lastModifiedDate":"2021-09-03"},{"lineNumber":42,"author":{"gitId":"Bluntsord"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"Bluntsord"},"content":"        } catch (InvalidCommandException e) {","lastModifiedDate":"2021-09-06"},{"lineNumber":44,"author":{"gitId":"Bluntsord"},"content":"            return e.getMessage();","lastModifiedDate":"2021-09-06"},{"lineNumber":45,"author":{"gitId":"Bluntsord"},"content":"        }","lastModifiedDate":"2021-09-06"},{"lineNumber":46,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"Bluntsord"},"content":"     * Loads in all the text history from previous times of running the bot","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"Bluntsord"},"content":"    public static void preload() {","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"Bluntsord"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"Bluntsord"},"content":"            ArrayList\u003cCommand\u003e commandArrayList \u003d DataHandlerLayer.loadPreset();","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"Bluntsord"},"content":"            for (Command command : commandArrayList) {","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"Bluntsord"},"content":"                processTask(command, false);","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"Bluntsord"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"Bluntsord"},"content":"        } catch (InvalidCommandException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"Bluntsord"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"Bluntsord"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"Bluntsord"},"content":"     * Process the tasks and pass it on to the data Handler layer for tasks","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"Bluntsord"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":66,"author":{"gitId":"Bluntsord"},"content":"     * @param packagedCommand    duke.Command that is parsed by the parser.","lastModifiedDate":"2021-08-26"},{"lineNumber":67,"author":{"gitId":"Bluntsord"},"content":"     * @param isWrittenToHistory boolean value if the command should be written to history.","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"Bluntsord"},"content":"     *                           most of the times this should be the case other than preload, since","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"Bluntsord"},"content":"     *                           writing to history would result in double occurence of tasks","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"Bluntsord"},"content":"     * @throws InvalidCommandException","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"Bluntsord"},"content":"    public static void processTask(Command packagedCommand, boolean isWrittenToHistory) throws InvalidCommandException {","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"Bluntsord"},"content":"        //duke.Logic to check each individual commands, checks for special commands first, then checks for other input","lastModifiedDate":"2021-08-26"},{"lineNumber":74,"author":{"gitId":"Bluntsord"},"content":"        //Use duke.Parser to package command into a packaged command","lastModifiedDate":"2021-08-26"},{"lineNumber":75,"author":{"gitId":"Bluntsord"},"content":"        ArrayList\u003cString\u003e listOfCommandInputs \u003d packagedCommand.getListOfCommandInputs();","lastModifiedDate":"2021-08-25"},{"lineNumber":76,"author":{"gitId":"Bluntsord"},"content":"        String loggedCommand \u003d packagedCommand.getLog();","lastModifiedDate":"2021-08-25"},{"lineNumber":77,"author":{"gitId":"Bluntsord"},"content":"        Task tempTask \u003d null;","lastModifiedDate":"2021-09-07"},{"lineNumber":78,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":79,"author":{"gitId":"Bluntsord"},"content":"        switch (packagedCommand.getTaskType()) {","lastModifiedDate":"2021-08-19"},{"lineNumber":80,"author":{"gitId":"Bluntsord"},"content":"        case TODO:","lastModifiedDate":"2021-08-19"},{"lineNumber":81,"author":{"gitId":"Bluntsord"},"content":"            tempTask \u003d new Todo(loggedCommand);","lastModifiedDate":"2021-09-07"},{"lineNumber":82,"author":{"gitId":"Bluntsord"},"content":"            break;","lastModifiedDate":"2021-08-19"},{"lineNumber":83,"author":{"gitId":"Bluntsord"},"content":"        case DEADLINE:","lastModifiedDate":"2021-08-19"},{"lineNumber":84,"author":{"gitId":"Bluntsord"},"content":"            processDeadline(packagedCommand, listOfCommandInputs, loggedCommand, isWrittenToHistory);","lastModifiedDate":"2021-09-09"},{"lineNumber":85,"author":{"gitId":"Bluntsord"},"content":"            break;","lastModifiedDate":"2021-09-09"},{"lineNumber":86,"author":{"gitId":"Bluntsord"},"content":"        case EVENT:","lastModifiedDate":"2021-09-09"},{"lineNumber":87,"author":{"gitId":"Bluntsord"},"content":"            processEvent(packagedCommand, listOfCommandInputs, loggedCommand, isWrittenToHistory);","lastModifiedDate":"2021-09-09"},{"lineNumber":88,"author":{"gitId":"Bluntsord"},"content":"            break;","lastModifiedDate":"2021-09-09"},{"lineNumber":89,"author":{"gitId":"Bluntsord"},"content":"        case NOTAPPLICABLE:","lastModifiedDate":"2021-09-09"},{"lineNumber":90,"author":{"gitId":"Bluntsord"},"content":"            throw new InvalidCommandException();","lastModifiedDate":"2021-09-09"},{"lineNumber":91,"author":{"gitId":"Bluntsord"},"content":"        default:","lastModifiedDate":"2021-09-09"},{"lineNumber":92,"author":{"gitId":"Bluntsord"},"content":"            System.out.println(\"Should never reach here\");","lastModifiedDate":"2021-09-09"},{"lineNumber":93,"author":{"gitId":"Bluntsord"},"content":"        }","lastModifiedDate":"2021-09-09"},{"lineNumber":94,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":95,"author":{"gitId":"Bluntsord"},"content":"        if (tempTask !\u003d null) {","lastModifiedDate":"2021-09-09"},{"lineNumber":96,"author":{"gitId":"Bluntsord"},"content":"            DataHandlerLayer.addToLog(tempTask);","lastModifiedDate":"2021-09-09"},{"lineNumber":97,"author":{"gitId":"Bluntsord"},"content":"            if (isWrittenToHistory) {","lastModifiedDate":"2021-09-09"},{"lineNumber":98,"author":{"gitId":"Bluntsord"},"content":"                DataHandlerLayer.appendToHistory(tempTask);","lastModifiedDate":"2021-09-09"},{"lineNumber":99,"author":{"gitId":"Bluntsord"},"content":"            }","lastModifiedDate":"2021-09-09"},{"lineNumber":100,"author":{"gitId":"Bluntsord"},"content":"        }","lastModifiedDate":"2021-09-09"},{"lineNumber":101,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":102,"author":{"gitId":"Bluntsord"},"content":"        DataHandlerLayer.updateHistory();","lastModifiedDate":"2021-09-09"},{"lineNumber":103,"author":{"gitId":"Bluntsord"},"content":"        DataHandlerLayer.printHistory();","lastModifiedDate":"2021-09-09"},{"lineNumber":104,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-09-09"},{"lineNumber":105,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":106,"author":{"gitId":"Bluntsord"},"content":"    private static String processBye() {","lastModifiedDate":"2021-09-09"},{"lineNumber":107,"author":{"gitId":"Bluntsord"},"content":"        Duke.stop();","lastModifiedDate":"2021-09-09"},{"lineNumber":108,"author":{"gitId":"Bluntsord"},"content":"        DataHandlerLayer.updateHistory();","lastModifiedDate":"2021-09-09"},{"lineNumber":109,"author":{"gitId":"Bluntsord"},"content":"        DataHandlerLayer.stopWriting();","lastModifiedDate":"2021-09-09"},{"lineNumber":110,"author":{"gitId":"Bluntsord"},"content":"        return \"See ya\";","lastModifiedDate":"2021-09-09"},{"lineNumber":111,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-09-09"},{"lineNumber":112,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":113,"author":{"gitId":"Bluntsord"},"content":"    private static String processList() {","lastModifiedDate":"2021-09-09"},{"lineNumber":114,"author":{"gitId":"Bluntsord"},"content":"        return DataHandlerLayer.getFilteredLog(a-\u003e true);","lastModifiedDate":"2021-09-09"},{"lineNumber":115,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-09-09"},{"lineNumber":116,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":117,"author":{"gitId":"Bluntsord"},"content":"    private static String processDelete(Command packagedCommand,","lastModifiedDate":"2021-09-09"},{"lineNumber":118,"author":{"gitId":"Bluntsord"},"content":"                                        ArrayList\u003cString\u003e listOfCommandInputs, String loggedCommand) {","lastModifiedDate":"2021-09-09"},{"lineNumber":119,"author":{"gitId":"Bluntsord"},"content":"        int position \u003d Integer.parseInt(listOfCommandInputs.get(listOfCommandInputs.indexOf(\"delete\") + 1));","lastModifiedDate":"2021-09-09"},{"lineNumber":120,"author":{"gitId":"Bluntsord"},"content":"        DataHandlerLayer.delete(position);","lastModifiedDate":"2021-09-09"},{"lineNumber":121,"author":{"gitId":"Bluntsord"},"content":"        DataHandlerLayer.updateHistory();","lastModifiedDate":"2021-09-09"},{"lineNumber":122,"author":{"gitId":"Bluntsord"},"content":"        return \"Cancel culture is real, even in this world\";","lastModifiedDate":"2021-09-09"},{"lineNumber":123,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-09-09"},{"lineNumber":124,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":125,"author":{"gitId":"Bluntsord"},"content":"    private static String processDone(Command packagedCommand, ArrayList\u003cString\u003e listOfCommandInputs,","lastModifiedDate":"2021-09-09"},{"lineNumber":126,"author":{"gitId":"Bluntsord"},"content":"                                      String loggedCommand) throws InvalidCommandException {","lastModifiedDate":"2021-09-09"},{"lineNumber":127,"author":{"gitId":"Bluntsord"},"content":"        int pos \u003d Integer.parseInt(listOfCommandInputs.get(1));","lastModifiedDate":"2021-09-09"},{"lineNumber":128,"author":{"gitId":"Bluntsord"},"content":"        if (pos \u003e Task.getNumberOfTask()) {","lastModifiedDate":"2021-09-09"},{"lineNumber":129,"author":{"gitId":"Bluntsord"},"content":"            throw new InvalidCommandException();","lastModifiedDate":"2021-09-09"},{"lineNumber":130,"author":{"gitId":"Bluntsord"},"content":"        }","lastModifiedDate":"2021-09-09"},{"lineNumber":131,"author":{"gitId":"Bluntsord"},"content":"        Task currentTask \u003d DataHandlerLayer.getTask(pos - 1);","lastModifiedDate":"2021-09-09"},{"lineNumber":132,"author":{"gitId":"Bluntsord"},"content":"        currentTask.completeTask();","lastModifiedDate":"2021-09-09"},{"lineNumber":133,"author":{"gitId":"Bluntsord"},"content":"        DataHandlerLayer.updateHistory();","lastModifiedDate":"2021-09-09"},{"lineNumber":134,"author":{"gitId":"Bluntsord"},"content":"        return \"Ohhhh myyyy. I have been waiting for this quest to complete for ages.\";","lastModifiedDate":"2021-09-09"},{"lineNumber":135,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-09-09"},{"lineNumber":136,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":137,"author":{"gitId":"Bluntsord"},"content":"    private static String processFind(Command packagedCommand,","lastModifiedDate":"2021-09-09"},{"lineNumber":138,"author":{"gitId":"Bluntsord"},"content":"                                      ArrayList\u003cString\u003e listOfCommandInputs, String loggedCommand) {","lastModifiedDate":"2021-09-09"},{"lineNumber":139,"author":{"gitId":"Bluntsord"},"content":"        String temp \u003d listOfCommandInputs.get(listOfCommandInputs.indexOf(\"find\") + 1);","lastModifiedDate":"2021-09-09"},{"lineNumber":140,"author":{"gitId":"Bluntsord"},"content":"        Function\u003cTask, Boolean\u003e findKeyword \u003d a -\u003e a.toString().contains(temp);","lastModifiedDate":"2021-09-09"},{"lineNumber":141,"author":{"gitId":"Bluntsord"},"content":"        return DataHandlerLayer.getFilteredLog(findKeyword);","lastModifiedDate":"2021-09-09"},{"lineNumber":142,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-09-09"},{"lineNumber":143,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":144,"author":{"gitId":"Bluntsord"},"content":"    private static String processHelp(ArrayList\u003cString\u003e listOfCommandInputs) throws InvalidCommandException {","lastModifiedDate":"2021-09-11"},{"lineNumber":145,"author":{"gitId":"Bluntsord"},"content":"        if (listOfCommandInputs.size() \u003e 2) {","lastModifiedDate":"2021-09-11"},{"lineNumber":146,"author":{"gitId":"Bluntsord"},"content":"            throw new InvalidCommandException();","lastModifiedDate":"2021-09-11"},{"lineNumber":147,"author":{"gitId":"Bluntsord"},"content":"        } else if (listOfCommandInputs.size() \u003d\u003d 1) {","lastModifiedDate":"2021-09-11"},{"lineNumber":148,"author":{"gitId":"Bluntsord"},"content":"            return HelpCommand.getCommand(0);","lastModifiedDate":"2021-09-11"},{"lineNumber":149,"author":{"gitId":"Bluntsord"},"content":"        }","lastModifiedDate":"2021-09-11"},{"lineNumber":150,"author":{"gitId":"Bluntsord"},"content":"        return HelpCommand.getCommand(Integer.parseInt(listOfCommandInputs.get(1)));","lastModifiedDate":"2021-09-11"},{"lineNumber":151,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":152,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":153,"author":{"gitId":"Bluntsord"},"content":"    private static void processDeadline(Command packagedCommand,","lastModifiedDate":"2021-09-09"},{"lineNumber":154,"author":{"gitId":"Bluntsord"},"content":"                                        ArrayList\u003cString\u003e listOfCommandInputs,","lastModifiedDate":"2021-09-09"},{"lineNumber":155,"author":{"gitId":"Bluntsord"},"content":"                                        String loggedCommand,","lastModifiedDate":"2021-09-09"},{"lineNumber":156,"author":{"gitId":"Bluntsord"},"content":"                                        boolean isWrittenToHistory) throws InvalidCommandException {","lastModifiedDate":"2021-09-09"},{"lineNumber":157,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":158,"author":{"gitId":"Bluntsord"},"content":"        int indicatorDeadline \u003d listOfCommandInputs.indexOf(\"/by\");","lastModifiedDate":"2021-08-19"},{"lineNumber":159,"author":{"gitId":"Bluntsord"},"content":"        String tempDeadlineString \u003d new String();","lastModifiedDate":"2021-08-25"},{"lineNumber":160,"author":{"gitId":"Bluntsord"},"content":"        String deadlineDate \u003d listOfCommandInputs.get(indicatorDeadline + 1);","lastModifiedDate":"2021-08-26"},{"lineNumber":161,"author":{"gitId":"Bluntsord"},"content":"        String deadlineTime \u003d listOfCommandInputs.get(indicatorDeadline + 2);","lastModifiedDate":"2021-08-26"},{"lineNumber":162,"author":{"gitId":"Bluntsord"},"content":"        String deadlineDateTime \u003d deadlineDate + \" \" + deadlineTime;","lastModifiedDate":"2021-08-26"},{"lineNumber":163,"author":{"gitId":"Bluntsord"},"content":"        for (int i \u003d 0; i \u003c indicatorDeadline; i++) {","lastModifiedDate":"2021-08-19"},{"lineNumber":164,"author":{"gitId":"Bluntsord"},"content":"            tempDeadlineString \u003d tempDeadlineString + listOfCommandInputs.get(i) + \" \";","lastModifiedDate":"2021-09-09"},{"lineNumber":165,"author":{"gitId":"Bluntsord"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":166,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":167,"author":{"gitId":"Bluntsord"},"content":"        Deadline tempDeadLine \u003d new Deadline(tempDeadlineString, Parser.convertToDateTime(deadlineDateTime));","lastModifiedDate":"2021-08-26"},{"lineNumber":168,"author":{"gitId":"Bluntsord"},"content":"        DataHandlerLayer.addToLog(tempDeadLine);","lastModifiedDate":"2021-08-26"},{"lineNumber":169,"author":{"gitId":"Bluntsord"},"content":"        if (isWrittenToHistory) {","lastModifiedDate":"2021-08-25"},{"lineNumber":170,"author":{"gitId":"Bluntsord"},"content":"            DataHandlerLayer.appendToHistory(tempDeadLine);","lastModifiedDate":"2021-08-25"},{"lineNumber":171,"author":{"gitId":"Bluntsord"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":172,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-09-09"},{"lineNumber":173,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":174,"author":{"gitId":"Bluntsord"},"content":"    private static void processEvent(Command packagedCommand,","lastModifiedDate":"2021-09-09"},{"lineNumber":175,"author":{"gitId":"Bluntsord"},"content":"                                        ArrayList\u003cString\u003e listOfCommandInputs,","lastModifiedDate":"2021-09-09"},{"lineNumber":176,"author":{"gitId":"Bluntsord"},"content":"                                        String loggedCommand,","lastModifiedDate":"2021-09-09"},{"lineNumber":177,"author":{"gitId":"Bluntsord"},"content":"                                        boolean isWrittenToHistory) throws InvalidCommandException {","lastModifiedDate":"2021-09-09"},{"lineNumber":178,"author":{"gitId":"Bluntsord"},"content":"        int indicatorEvent \u003d listOfCommandInputs.indexOf(\"/at\");","lastModifiedDate":"2021-08-19"},{"lineNumber":179,"author":{"gitId":"Bluntsord"},"content":"        String date \u003d listOfCommandInputs.get(indicatorEvent + 1);","lastModifiedDate":"2021-08-19"},{"lineNumber":180,"author":{"gitId":"Bluntsord"},"content":"        String time \u003d listOfCommandInputs.get(indicatorEvent + 2);","lastModifiedDate":"2021-08-19"},{"lineNumber":181,"author":{"gitId":"Bluntsord"},"content":"        String dateTime \u003d date + \" \" + time;","lastModifiedDate":"2021-08-26"},{"lineNumber":182,"author":{"gitId":"Bluntsord"},"content":"        String temp \u003d new String();","lastModifiedDate":"2021-08-19"},{"lineNumber":183,"author":{"gitId":"Bluntsord"},"content":"        for (int i \u003d 0; i \u003c indicatorEvent; i++) {","lastModifiedDate":"2021-08-19"},{"lineNumber":184,"author":{"gitId":"Bluntsord"},"content":"            temp \u003d temp + listOfCommandInputs.get(i) + \" \";","lastModifiedDate":"2021-09-09"},{"lineNumber":185,"author":{"gitId":"Bluntsord"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":186,"author":{"gitId":"Bluntsord"},"content":"        Event tempEvent \u003d new Event(temp, Parser.convertToDateTime(dateTime));","lastModifiedDate":"2021-08-26"},{"lineNumber":187,"author":{"gitId":"Bluntsord"},"content":"        DataHandlerLayer.addToLog(tempEvent);","lastModifiedDate":"2021-09-09"},{"lineNumber":188,"author":{"gitId":"Bluntsord"},"content":"        if (isWrittenToHistory) {","lastModifiedDate":"2021-09-07"},{"lineNumber":189,"author":{"gitId":"Bluntsord"},"content":"            DataHandlerLayer.appendToHistory(tempEvent);","lastModifiedDate":"2021-09-09"},{"lineNumber":190,"author":{"gitId":"Bluntsord"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":191,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":192,"author":{"gitId":"Bluntsord"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"Bluntsord":192}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bluntsord"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"Bluntsord"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"Bluntsord"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"Bluntsord"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"Bluntsord"},"content":"import java.util.Collections;","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"Bluntsord"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"Bluntsord"},"content":" * duke.Parser that handles all the string manipulation. The users input is taken in as a string and passed to parser","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"Bluntsord"},"content":" * for packaging into a command.","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"Bluntsord"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"Bluntsord"},"content":"public class Parser {","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"Bluntsord"},"content":"     * Function that handles all the parsing of the duke.Parser system","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"Bluntsord"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"Bluntsord"},"content":"     * @param command Refers to the entire line of strings the user entered. The line is then process here","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"Bluntsord"},"content":"     *                and packaged into duke.Command. See duke.Command for more.","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"Bluntsord"},"content":"     * @return A packaged command for ease of access of infomation","lastModifiedDate":"2021-08-19"},{"lineNumber":20,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":21,"author":{"gitId":"Bluntsord"},"content":"    public static Command parse(String command) throws InvalidCommandException {","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"Bluntsord"},"content":"        //Remove TaskType from the command first","lastModifiedDate":"2021-08-19"},{"lineNumber":23,"author":{"gitId":"Bluntsord"},"content":"        Task.TaskType taskType \u003d Task.TaskType.NOTAPPLICABLE;","lastModifiedDate":"2021-08-19"},{"lineNumber":24,"author":{"gitId":"Bluntsord"},"content":"        String stringTaskType \u003d new String();","lastModifiedDate":"2021-08-19"},{"lineNumber":25,"author":{"gitId":"Bluntsord"},"content":"        if (command.contains(\"todo \")) {","lastModifiedDate":"2021-08-19"},{"lineNumber":26,"author":{"gitId":"Bluntsord"},"content":"            taskType \u003d Task.TaskType.TODO;","lastModifiedDate":"2021-08-19"},{"lineNumber":27,"author":{"gitId":"Bluntsord"},"content":"            stringTaskType \u003d \"todo\";","lastModifiedDate":"2021-08-19"},{"lineNumber":28,"author":{"gitId":"Bluntsord"},"content":"        } else if (command.contains(\"deadline \")) {","lastModifiedDate":"2021-08-19"},{"lineNumber":29,"author":{"gitId":"Bluntsord"},"content":"            taskType \u003d Task.TaskType.DEADLINE;","lastModifiedDate":"2021-08-19"},{"lineNumber":30,"author":{"gitId":"Bluntsord"},"content":"            stringTaskType \u003d \"deadline \";","lastModifiedDate":"2021-08-19"},{"lineNumber":31,"author":{"gitId":"Bluntsord"},"content":"        } else if (command.contains(\"event\")) {","lastModifiedDate":"2021-08-19"},{"lineNumber":32,"author":{"gitId":"Bluntsord"},"content":"            taskType \u003d Task.TaskType.EVENT;","lastModifiedDate":"2021-08-19"},{"lineNumber":33,"author":{"gitId":"Bluntsord"},"content":"            stringTaskType \u003d \"event\";","lastModifiedDate":"2021-08-19"},{"lineNumber":34,"author":{"gitId":"Bluntsord"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":35,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":36,"author":{"gitId":"Bluntsord"},"content":"        //command \u003d command.replaceAll(stringTaskType, \"\");","lastModifiedDate":"2021-08-19"},{"lineNumber":37,"author":{"gitId":"Bluntsord"},"content":"        //Split the list of commands","lastModifiedDate":"2021-08-19"},{"lineNumber":38,"author":{"gitId":"Bluntsord"},"content":"        Command packagedCommand;","lastModifiedDate":"2021-08-19"},{"lineNumber":39,"author":{"gitId":"Bluntsord"},"content":"        ArrayList\u003cString\u003e listOfCommandInputs \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-19"},{"lineNumber":40,"author":{"gitId":"Bluntsord"},"content":"        Collections.addAll(listOfCommandInputs, command.split(\" \"));","lastModifiedDate":"2021-08-19"},{"lineNumber":41,"author":{"gitId":"Bluntsord"},"content":"        if (listOfCommandInputs.contains(stringTaskType)) {","lastModifiedDate":"2021-08-19"},{"lineNumber":42,"author":{"gitId":"Bluntsord"},"content":"            int redundantIndicator \u003d listOfCommandInputs.indexOf(stringTaskType);","lastModifiedDate":"2021-08-19"},{"lineNumber":43,"author":{"gitId":"Bluntsord"},"content":"            for (int i \u003d 0; i \u003c\u003d redundantIndicator; i++) {","lastModifiedDate":"2021-08-19"},{"lineNumber":44,"author":{"gitId":"Bluntsord"},"content":"                listOfCommandInputs.remove(0);","lastModifiedDate":"2021-08-19"},{"lineNumber":45,"author":{"gitId":"Bluntsord"},"content":"            }","lastModifiedDate":"2021-08-19"},{"lineNumber":46,"author":{"gitId":"Bluntsord"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":47,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":48,"author":{"gitId":"Bluntsord"},"content":"        String tempCommand \u003d new String();","lastModifiedDate":"2021-08-19"},{"lineNumber":49,"author":{"gitId":"Bluntsord"},"content":"        for (String commandsLeft : listOfCommandInputs) {","lastModifiedDate":"2021-08-19"},{"lineNumber":50,"author":{"gitId":"Bluntsord"},"content":"            commandsLeft +\u003d \" \";","lastModifiedDate":"2021-08-19"},{"lineNumber":51,"author":{"gitId":"Bluntsord"},"content":"            tempCommand +\u003d commandsLeft;","lastModifiedDate":"2021-08-19"},{"lineNumber":52,"author":{"gitId":"Bluntsord"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":53,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":54,"author":{"gitId":"Bluntsord"},"content":"        packagedCommand \u003d new Command(taskType, listOfCommandInputs, tempCommand);","lastModifiedDate":"2021-08-19"},{"lineNumber":55,"author":{"gitId":"Bluntsord"},"content":"        return packagedCommand;","lastModifiedDate":"2021-08-19"},{"lineNumber":56,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":57,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":59,"author":{"gitId":"Bluntsord"},"content":"     * Used to parse a different kind of string format and package into and arraylist of task. Only for strings","lastModifiedDate":"2021-08-28"},{"lineNumber":60,"author":{"gitId":"Bluntsord"},"content":"     * found in the history, aka persistent storage","lastModifiedDate":"2021-08-28"},{"lineNumber":61,"author":{"gitId":"Bluntsord"},"content":"     * @param previousHistory ArrayList of strings in previous history","lastModifiedDate":"2021-08-28"},{"lineNumber":62,"author":{"gitId":"Bluntsord"},"content":"     * @return Returns a list of packaged commands","lastModifiedDate":"2021-09-01"},{"lineNumber":63,"author":{"gitId":"Bluntsord"},"content":"     * @throws InvalidCommandException","lastModifiedDate":"2021-08-28"},{"lineNumber":64,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":65,"author":{"gitId":"Bluntsord"},"content":"    public static ArrayList\u003cCommand\u003e parsePreloadedTasks(","lastModifiedDate":"2021-09-01"},{"lineNumber":66,"author":{"gitId":"Bluntsord"},"content":"            ArrayList\u003cString\u003e previousHistory) throws InvalidCommandException {","lastModifiedDate":"2021-09-01"},{"lineNumber":67,"author":{"gitId":"Bluntsord"},"content":"        int eventTypeIndex \u003d 1;","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"Bluntsord"},"content":"        int isCompletedIndex \u003d 4;","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"Bluntsord"},"content":"        ArrayList\u003cCommand\u003e preloadedList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"Bluntsord"},"content":"        for (String line : previousHistory) {","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"Bluntsord"},"content":"            String[] tempPackagedHistory \u003d line.split(\" \");","lastModifiedDate":"2021-09-01"},{"lineNumber":73,"author":{"gitId":"Bluntsord"},"content":"            ArrayList\u003cString\u003e packagedHistory \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-01"},{"lineNumber":74,"author":{"gitId":"Bluntsord"},"content":"            Collections.addAll(packagedHistory, tempPackagedHistory);","lastModifiedDate":"2021-09-01"},{"lineNumber":75,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":76,"author":{"gitId":"Bluntsord"},"content":"            Task.TaskType eventType \u003d Task.TaskType.NOTAPPLICABLE;","lastModifiedDate":"2021-08-25"},{"lineNumber":77,"author":{"gitId":"Bluntsord"},"content":"            char temp \u003d packagedHistory.get(0).charAt(eventTypeIndex);","lastModifiedDate":"2021-09-01"},{"lineNumber":78,"author":{"gitId":"Bluntsord"},"content":"            switch (packagedHistory.get(0).charAt(eventTypeIndex)) {","lastModifiedDate":"2021-09-01"},{"lineNumber":79,"author":{"gitId":"Bluntsord"},"content":"            case \u0027T\u0027:","lastModifiedDate":"2021-08-25"},{"lineNumber":80,"author":{"gitId":"Bluntsord"},"content":"                eventType \u003d Task.TaskType.TODO;","lastModifiedDate":"2021-08-25"},{"lineNumber":81,"author":{"gitId":"Bluntsord"},"content":"                packagedHistory.remove(0);","lastModifiedDate":"2021-09-09"},{"lineNumber":82,"author":{"gitId":"Bluntsord"},"content":"                break;","lastModifiedDate":"2021-08-25"},{"lineNumber":83,"author":{"gitId":"Bluntsord"},"content":"            case \u0027E\u0027:","lastModifiedDate":"2021-08-25"},{"lineNumber":84,"author":{"gitId":"Bluntsord"},"content":"                eventType \u003d Task.TaskType.EVENT;","lastModifiedDate":"2021-08-25"},{"lineNumber":85,"author":{"gitId":"Bluntsord"},"content":"                packagedHistory.remove(\"[E][X]\");","lastModifiedDate":"2021-09-09"},{"lineNumber":86,"author":{"gitId":"Bluntsord"},"content":"                packagedHistory.add(packagedHistory.size() - 2 , \"/at\");","lastModifiedDate":"2021-09-09"},{"lineNumber":87,"author":{"gitId":"Bluntsord"},"content":"                break;","lastModifiedDate":"2021-08-25"},{"lineNumber":88,"author":{"gitId":"Bluntsord"},"content":"            case \u0027D\u0027:","lastModifiedDate":"2021-08-25"},{"lineNumber":89,"author":{"gitId":"Bluntsord"},"content":"                eventType \u003d Task.TaskType.DEADLINE;","lastModifiedDate":"2021-08-25"},{"lineNumber":90,"author":{"gitId":"Bluntsord"},"content":"                packagedHistory.remove(\"[D][X]\");","lastModifiedDate":"2021-09-09"},{"lineNumber":91,"author":{"gitId":"Bluntsord"},"content":"                packagedHistory.add(packagedHistory.size() - 2 , \"/by\");","lastModifiedDate":"2021-09-09"},{"lineNumber":92,"author":{"gitId":"Bluntsord"},"content":"                break;","lastModifiedDate":"2021-08-26"},{"lineNumber":93,"author":{"gitId":"Bluntsord"},"content":"            case \u0027N\u0027:","lastModifiedDate":"2021-08-25"},{"lineNumber":94,"author":{"gitId":"Bluntsord"},"content":"                eventType \u003d Task.TaskType.NOTAPPLICABLE;","lastModifiedDate":"2021-08-25"},{"lineNumber":95,"author":{"gitId":"Bluntsord"},"content":"                break;","lastModifiedDate":"2021-09-01"},{"lineNumber":96,"author":{"gitId":"Bluntsord"},"content":"            default:","lastModifiedDate":"2021-09-01"},{"lineNumber":97,"author":{"gitId":"Bluntsord"},"content":"                break;","lastModifiedDate":"2021-09-01"},{"lineNumber":98,"author":{"gitId":"Bluntsord"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":99,"author":{"gitId":"Bluntsord"},"content":"            Command command \u003d new Command(eventType, packagedHistory, String.join(\" \", packagedHistory));","lastModifiedDate":"2021-09-01"},{"lineNumber":100,"author":{"gitId":"Bluntsord"},"content":"            preloadedList.add(command);","lastModifiedDate":"2021-08-25"},{"lineNumber":101,"author":{"gitId":"Bluntsord"},"content":"            assert !eventType.equals(Task.TaskType.NOTAPPLICABLE) : \"Task type should not be N.A\";","lastModifiedDate":"2021-09-10"},{"lineNumber":102,"author":{"gitId":"Bluntsord"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":103,"author":{"gitId":"Bluntsord"},"content":"        return preloadedList;","lastModifiedDate":"2021-08-25"},{"lineNumber":104,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":105,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":106,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":107,"author":{"gitId":"Bluntsord"},"content":"     * Converts a string to local date time","lastModifiedDate":"2021-08-28"},{"lineNumber":108,"author":{"gitId":"Bluntsord"},"content":"     * @param datetimeString string in date and time format","lastModifiedDate":"2021-08-28"},{"lineNumber":109,"author":{"gitId":"Bluntsord"},"content":"     * @return A local dateTime to show what time it is","lastModifiedDate":"2021-08-28"},{"lineNumber":110,"author":{"gitId":"Bluntsord"},"content":"     * @throws InvalidCommandException when the string is not in the right format","lastModifiedDate":"2021-08-28"},{"lineNumber":111,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":112,"author":{"gitId":"Bluntsord"},"content":"    public static LocalDateTime convertToDateTime(String datetimeString) throws InvalidCommandException {","lastModifiedDate":"2021-08-26"},{"lineNumber":113,"author":{"gitId":"Bluntsord"},"content":"        assert datetimeString !\u003d \"\" : \"dateTime should not be an empty string\";","lastModifiedDate":"2021-09-10"},{"lineNumber":114,"author":{"gitId":"Bluntsord"},"content":"        try {","lastModifiedDate":"2021-08-26"},{"lineNumber":115,"author":{"gitId":"Bluntsord"},"content":"            String[] temp \u003d datetimeString.split(\" \");","lastModifiedDate":"2021-08-26"},{"lineNumber":116,"author":{"gitId":"Bluntsord"},"content":"            String[] date \u003d temp[0].split(\"/\");","lastModifiedDate":"2021-08-26"},{"lineNumber":117,"author":{"gitId":"Bluntsord"},"content":"            DateTimeFormatter formatter;","lastModifiedDate":"2021-08-26"},{"lineNumber":118,"author":{"gitId":"Bluntsord"},"content":"            if (date[0].length() \u003d\u003d 2) {","lastModifiedDate":"2021-08-26"},{"lineNumber":119,"author":{"gitId":"Bluntsord"},"content":"                formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");","lastModifiedDate":"2021-08-26"},{"lineNumber":120,"author":{"gitId":"Bluntsord"},"content":"            } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":121,"author":{"gitId":"Bluntsord"},"content":"                formatter \u003d DateTimeFormatter.ofPattern(\"yyyy/MM/dd HH:mm\");","lastModifiedDate":"2021-08-26"},{"lineNumber":122,"author":{"gitId":"Bluntsord"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":123,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":124,"author":{"gitId":"Bluntsord"},"content":"            return LocalDateTime.parse(datetimeString, formatter);","lastModifiedDate":"2021-08-26"},{"lineNumber":125,"author":{"gitId":"Bluntsord"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-26"},{"lineNumber":126,"author":{"gitId":"Bluntsord"},"content":"            throw new InvalidCommandException();","lastModifiedDate":"2021-08-26"},{"lineNumber":127,"author":{"gitId":"Bluntsord"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":128,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":129,"author":{"gitId":"Bluntsord"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"Bluntsord":129}},{"path":"src/main/java/duke/PersistentStorageHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bluntsord"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"Bluntsord"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2021-09-09"},{"lineNumber":4,"author":{"gitId":"Bluntsord"},"content":"import java.io.BufferedWriter;","lastModifiedDate":"2021-09-09"},{"lineNumber":5,"author":{"gitId":"Bluntsord"},"content":"import java.io.File;","lastModifiedDate":"2021-09-09"},{"lineNumber":6,"author":{"gitId":"Bluntsord"},"content":"import java.io.FileReader;","lastModifiedDate":"2021-09-09"},{"lineNumber":7,"author":{"gitId":"Bluntsord"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-09-09"},{"lineNumber":8,"author":{"gitId":"Bluntsord"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-09"},{"lineNumber":9,"author":{"gitId":"Bluntsord"},"content":"import java.nio.charset.Charset;","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"Bluntsord"},"content":"import java.nio.file.Files;","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"Bluntsord"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"Bluntsord"},"content":"import java.util.List;","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"Bluntsord"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"Bluntsord"},"content":" * Persistent storage refers to the database used to store all the information regarding tasks. Allows for handling of","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"Bluntsord"},"content":" * .txt files and manages all of them","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"Bluntsord"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"Bluntsord"},"content":"public class PersistentStorageHandler {","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"Bluntsord"},"content":"    private final File file;","lastModifiedDate":"2021-09-01"},{"lineNumber":21,"author":{"gitId":"Bluntsord"},"content":"    private final String fileName;","lastModifiedDate":"2021-09-01"},{"lineNumber":22,"author":{"gitId":"Bluntsord"},"content":"    private BufferedReader bufferedReader;","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"Bluntsord"},"content":"    private BufferedWriter bufferedWriter;","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"Bluntsord"},"content":"    private boolean hasStorageTextFile \u003d false;","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"Bluntsord"},"content":"    private final ArrayList\u003cString\u003e allLines \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-01"},{"lineNumber":26,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":28,"author":{"gitId":"Bluntsord"},"content":"     * Constructor for persistent storage handler","lastModifiedDate":"2021-08-28"},{"lineNumber":29,"author":{"gitId":"Bluntsord"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":30,"author":{"gitId":"Bluntsord"},"content":"     * @param fileName name that the storage handler will read and write to.","lastModifiedDate":"2021-08-28"},{"lineNumber":31,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":32,"author":{"gitId":"Bluntsord"},"content":"    public PersistentStorageHandler(String dirName, String fileName) {","lastModifiedDate":"2021-09-11"},{"lineNumber":33,"author":{"gitId":"Bluntsord"},"content":"        assert fileName.contains(\".txt\") : \"We should read and write to a .txt file only\";","lastModifiedDate":"2021-09-10"},{"lineNumber":34,"author":{"gitId":"Bluntsord"},"content":"        //Name the file","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"Bluntsord"},"content":"        File storedDir \u003d new File(dirName);","lastModifiedDate":"2021-09-07"},{"lineNumber":36,"author":{"gitId":"Bluntsord"},"content":"        if (!storedDir.exists()) {","lastModifiedDate":"2021-09-07"},{"lineNumber":37,"author":{"gitId":"Bluntsord"},"content":"            storedDir.mkdirs();","lastModifiedDate":"2021-09-07"},{"lineNumber":38,"author":{"gitId":"Bluntsord"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":39,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":40,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":41,"author":{"gitId":"Bluntsord"},"content":"        this.fileName \u003d fileName;","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"Bluntsord"},"content":"        this.file \u003d new File(storedDir, fileName);","lastModifiedDate":"2021-09-07"},{"lineNumber":43,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"Bluntsord"},"content":"        // Create the writer and buffered writer","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"Bluntsord"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"Bluntsord"},"content":"            FileWriter writer \u003d new FileWriter(fileName, true);","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"Bluntsord"},"content":"            this.bufferedWriter \u003d new BufferedWriter(writer);","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"Bluntsord"},"content":"            this.bufferedReader \u003d new BufferedReader(new FileReader(fileName));","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"Bluntsord"},"content":"            this.hasStorageTextFile \u003d true;","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"Bluntsord"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"Bluntsord"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"Bluntsord"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"Bluntsord"},"content":"        //Check if file exist. If not create a new file","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"Bluntsord"},"content":"        if (!hasStorageTextFile) {","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"Bluntsord"},"content":"            System.out.println(\"Oooooooooooooo. Fresh meat. Welcome my dinn- I mean friend\");","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"Bluntsord"},"content":"            //Create a storage text file with the same name","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"Bluntsord"},"content":"            try {","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"Bluntsord"},"content":"                file.createNewFile();","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"Bluntsord"},"content":"            } catch (IOException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"Bluntsord"},"content":"                e.printStackTrace();","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"Bluntsord"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"Bluntsord"},"content":"        } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"Bluntsord"},"content":"            System.out.println(\"Ahhhhhh. It seems you have an old scroll. Let me read the contents......\");","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"Bluntsord"},"content":"            //Add all lines of the file to all_lines variable","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"Bluntsord"},"content":"            try {","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"Bluntsord"},"content":"                List\u003cString\u003e list \u003d Files.readAllLines(new File(fileName).toPath(), Charset.defaultCharset());","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"Bluntsord"},"content":"                allLines.addAll(list);","lastModifiedDate":"2021-09-01"},{"lineNumber":69,"author":{"gitId":"Bluntsord"},"content":"            } catch (IOException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"Bluntsord"},"content":"                e.printStackTrace();","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"Bluntsord"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"Bluntsord"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":76,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":77,"author":{"gitId":"Bluntsord"},"content":"     * Write to the persistent storage","lastModifiedDate":"2021-08-28"},{"lineNumber":78,"author":{"gitId":"Bluntsord"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":79,"author":{"gitId":"Bluntsord"},"content":"     * @param text string to be written","lastModifiedDate":"2021-08-28"},{"lineNumber":80,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":81,"author":{"gitId":"Bluntsord"},"content":"    public void write(String text) {","lastModifiedDate":"2021-08-25"},{"lineNumber":82,"author":{"gitId":"Bluntsord"},"content":"        assert text !\u003d \"\" : \"String written should not be empty\";","lastModifiedDate":"2021-09-10"},{"lineNumber":83,"author":{"gitId":"Bluntsord"},"content":"        //Count the number of lines in the string","lastModifiedDate":"2021-08-25"},{"lineNumber":84,"author":{"gitId":"Bluntsord"},"content":"        String[] tempStringArray \u003d text.split(\"\\r\\n|\\r|\\n\");","lastModifiedDate":"2021-08-25"},{"lineNumber":85,"author":{"gitId":"Bluntsord"},"content":"        int linesInAddedText \u003d tempStringArray.length;","lastModifiedDate":"2021-08-25"},{"lineNumber":86,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":87,"author":{"gitId":"Bluntsord"},"content":"        // Writes the content to the file","lastModifiedDate":"2021-08-25"},{"lineNumber":88,"author":{"gitId":"Bluntsord"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":89,"author":{"gitId":"Bluntsord"},"content":"            this.bufferedWriter.write(text + \"\\n\");","lastModifiedDate":"2021-08-25"},{"lineNumber":90,"author":{"gitId":"Bluntsord"},"content":"            this.bufferedWriter.flush();","lastModifiedDate":"2021-08-25"},{"lineNumber":91,"author":{"gitId":"Bluntsord"},"content":"            //this.bufferedWriter.close();","lastModifiedDate":"2021-08-25"},{"lineNumber":92,"author":{"gitId":"Bluntsord"},"content":"        } catch (NullPointerException | IOException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":93,"author":{"gitId":"Bluntsord"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-25"},{"lineNumber":94,"author":{"gitId":"Bluntsord"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":95,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":96,"author":{"gitId":"Bluntsord"},"content":"        //Accumulate all lines","lastModifiedDate":"2021-08-25"},{"lineNumber":97,"author":{"gitId":"Bluntsord"},"content":"        allLines.add(text);","lastModifiedDate":"2021-09-01"},{"lineNumber":98,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":99,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":100,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":101,"author":{"gitId":"Bluntsord"},"content":"     * Print all the lines in the storage","lastModifiedDate":"2021-08-28"},{"lineNumber":102,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":103,"author":{"gitId":"Bluntsord"},"content":"    public void printAllLines() {","lastModifiedDate":"2021-08-25"},{"lineNumber":104,"author":{"gitId":"Bluntsord"},"content":"        for (String line : allLines) {","lastModifiedDate":"2021-09-01"},{"lineNumber":105,"author":{"gitId":"Bluntsord"},"content":"            System.out.println(line);","lastModifiedDate":"2021-08-25"},{"lineNumber":106,"author":{"gitId":"Bluntsord"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":107,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":108,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":109,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":110,"author":{"gitId":"Bluntsord"},"content":"     * Clears the entire history of the log","lastModifiedDate":"2021-08-25"},{"lineNumber":111,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":112,"author":{"gitId":"Bluntsord"},"content":"    //I see what youre doing yes. Why are you clearing history?","lastModifiedDate":"2021-08-25"},{"lineNumber":113,"author":{"gitId":"Bluntsord"},"content":"    public void clearHistory() {","lastModifiedDate":"2021-08-28"},{"lineNumber":114,"author":{"gitId":"Bluntsord"},"content":"        //Code to clear history","lastModifiedDate":"2021-08-25"},{"lineNumber":115,"author":{"gitId":"Bluntsord"},"content":"        this.allLines.clear();","lastModifiedDate":"2021-09-01"},{"lineNumber":116,"author":{"gitId":"Bluntsord"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":117,"author":{"gitId":"Bluntsord"},"content":"            FileWriter fileWriter \u003d new FileWriter(fileName);","lastModifiedDate":"2021-08-25"},{"lineNumber":118,"author":{"gitId":"Bluntsord"},"content":"            fileWriter.write(\"\");","lastModifiedDate":"2021-08-25"},{"lineNumber":119,"author":{"gitId":"Bluntsord"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":120,"author":{"gitId":"Bluntsord"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-25"},{"lineNumber":121,"author":{"gitId":"Bluntsord"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":122,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":123,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":124,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":125,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":126,"author":{"gitId":"Bluntsord"},"content":"     * Closes the buffer writer","lastModifiedDate":"2021-08-28"},{"lineNumber":127,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":128,"author":{"gitId":"Bluntsord"},"content":"    public void stopWriting() {","lastModifiedDate":"2021-08-25"},{"lineNumber":129,"author":{"gitId":"Bluntsord"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":130,"author":{"gitId":"Bluntsord"},"content":"            this.bufferedWriter.close();","lastModifiedDate":"2021-08-25"},{"lineNumber":131,"author":{"gitId":"Bluntsord"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":132,"author":{"gitId":"Bluntsord"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-25"},{"lineNumber":133,"author":{"gitId":"Bluntsord"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":134,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":135,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":136,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-09-03"},{"lineNumber":137,"author":{"gitId":"Bluntsord"},"content":"     * Return all lines","lastModifiedDate":"2021-09-03"},{"lineNumber":138,"author":{"gitId":"Bluntsord"},"content":"     * @return","lastModifiedDate":"2021-09-03"},{"lineNumber":139,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-09-03"},{"lineNumber":140,"author":{"gitId":"Bluntsord"},"content":"    public ArrayList\u003cString\u003e getAllLines() {","lastModifiedDate":"2021-09-01"},{"lineNumber":141,"author":{"gitId":"Bluntsord"},"content":"        return this.allLines;","lastModifiedDate":"2021-09-01"},{"lineNumber":142,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":143,"author":{"gitId":"Bluntsord"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"Bluntsord":143}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bluntsord"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"Bluntsord"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"Bluntsord"},"content":" * duke.Task that can be completed. Falls under three main cats, duke.Event, duke.Todo and deadline.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"Bluntsord"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"Bluntsord"},"content":"public class Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"Bluntsord"},"content":"    private static int numberOfTask \u003d 0;","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"Bluntsord"},"content":"    private boolean isCompleteStatus \u003d false;","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"Bluntsord"},"content":"    private String name;","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"Bluntsord"},"content":"    private int taskNumber;","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"Bluntsord"},"content":"     * duke.Task type enum","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"Bluntsord"},"content":"    public enum TaskType {","lastModifiedDate":"2021-08-19"},{"lineNumber":17,"author":{"gitId":"Bluntsord"},"content":"        TODO,","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"Bluntsord"},"content":"        DEADLINE,","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"Bluntsord"},"content":"        EVENT,","lastModifiedDate":"2021-08-19"},{"lineNumber":20,"author":{"gitId":"Bluntsord"},"content":"        NOTAPPLICABLE","lastModifiedDate":"2021-08-19"},{"lineNumber":21,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":22,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":24,"author":{"gitId":"Bluntsord"},"content":"     * Constructor for task type","lastModifiedDate":"2021-08-19"},{"lineNumber":25,"author":{"gitId":"Bluntsord"},"content":"     * @param name name of task","lastModifiedDate":"2021-08-19"},{"lineNumber":26,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":27,"author":{"gitId":"Bluntsord"},"content":"    public Task(String name) {","lastModifiedDate":"2021-08-18"},{"lineNumber":28,"author":{"gitId":"Bluntsord"},"content":"        this.name \u003d name;","lastModifiedDate":"2021-08-18"},{"lineNumber":29,"author":{"gitId":"Bluntsord"},"content":"        numberOfTask +\u003d 1;","lastModifiedDate":"2021-08-18"},{"lineNumber":30,"author":{"gitId":"Bluntsord"},"content":"        this.taskNumber \u003d numberOfTask;","lastModifiedDate":"2021-08-18"},{"lineNumber":31,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":32,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":33,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":34,"author":{"gitId":"Bluntsord"},"content":"     *  Function used to make a task complete","lastModifiedDate":"2021-08-19"},{"lineNumber":35,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":36,"author":{"gitId":"Bluntsord"},"content":"    public void completeTask() {","lastModifiedDate":"2021-08-18"},{"lineNumber":37,"author":{"gitId":"Bluntsord"},"content":"        this.isCompleteStatus \u003d true;","lastModifiedDate":"2021-08-28"},{"lineNumber":38,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":39,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":40,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":41,"author":{"gitId":"Bluntsord"},"content":"     * String representation of task.","lastModifiedDate":"2021-08-19"},{"lineNumber":42,"author":{"gitId":"Bluntsord"},"content":"     * @return String. See above","lastModifiedDate":"2021-08-19"},{"lineNumber":43,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":44,"author":{"gitId":"Bluntsord"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":45,"author":{"gitId":"Bluntsord"},"content":"        String status;","lastModifiedDate":"2021-08-18"},{"lineNumber":46,"author":{"gitId":"Bluntsord"},"content":"        if (isCompleteStatus) {","lastModifiedDate":"2021-08-28"},{"lineNumber":47,"author":{"gitId":"Bluntsord"},"content":"            status \u003d \"[done] \";","lastModifiedDate":"2021-09-20"},{"lineNumber":48,"author":{"gitId":"Bluntsord"},"content":"        } else {","lastModifiedDate":"2021-08-18"},{"lineNumber":49,"author":{"gitId":"Bluntsord"},"content":"            status \u003d \"[X] \";","lastModifiedDate":"2021-08-18"},{"lineNumber":50,"author":{"gitId":"Bluntsord"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":51,"author":{"gitId":"Bluntsord"},"content":"        return status + name;","lastModifiedDate":"2021-08-18"},{"lineNumber":52,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":53,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":54,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":55,"author":{"gitId":"Bluntsord"},"content":"     * Getter for the completion status of a task","lastModifiedDate":"2021-08-19"},{"lineNumber":56,"author":{"gitId":"Bluntsord"},"content":"     * @return","lastModifiedDate":"2021-08-19"},{"lineNumber":57,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":58,"author":{"gitId":"Bluntsord"},"content":"    public boolean getCompleteStatus() {","lastModifiedDate":"2021-08-28"},{"lineNumber":59,"author":{"gitId":"Bluntsord"},"content":"        return this.isCompleteStatus;","lastModifiedDate":"2021-08-28"},{"lineNumber":60,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":61,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":62,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":63,"author":{"gitId":"Bluntsord"},"content":"     * Getter for the total number of task","lastModifiedDate":"2021-08-19"},{"lineNumber":64,"author":{"gitId":"Bluntsord"},"content":"     * @return","lastModifiedDate":"2021-08-19"},{"lineNumber":65,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":66,"author":{"gitId":"Bluntsord"},"content":"    public static int getNumberOfTask() {","lastModifiedDate":"2021-08-18"},{"lineNumber":67,"author":{"gitId":"Bluntsord"},"content":"        return numberOfTask;","lastModifiedDate":"2021-08-18"},{"lineNumber":68,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":69,"author":{"gitId":"Bluntsord"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"Bluntsord":69}},{"path":"src/main/java/duke/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bluntsord"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"Bluntsord"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"Bluntsord"},"content":"     * Constructor for todo class","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"Bluntsord"},"content":"     * @param name","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"Bluntsord"},"content":"    public Todo(String name) {","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"Bluntsord"},"content":"        super(name);","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"Bluntsord"},"content":"     * String representation of the todo class","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"Bluntsord"},"content":"     * @return String. See above.","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":17,"author":{"gitId":"Bluntsord"},"content":"    public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"Bluntsord"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":20,"author":{"gitId":"Bluntsord"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"Bluntsord":20}},{"path":"src/main/java/duke/UI.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bluntsord"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"Bluntsord"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"Bluntsord"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"Bluntsord"},"content":"import java.io.InputStreamReader;","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"Bluntsord"},"content":"public class UI {","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"Bluntsord"},"content":"    private static BufferedReader reader \u003d new BufferedReader(new InputStreamReader(System.in));","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"Bluntsord"},"content":"     * Used to scan and parse the commands entered by the user","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"Bluntsord"},"content":"     * @return the command as one string","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"Bluntsord"},"content":"    public static String scan() {","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"Bluntsord"},"content":"        String command \u003d new String();","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"Bluntsord"},"content":"        try {","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"Bluntsord"},"content":"            command \u003d reader.readLine();","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"Bluntsord"},"content":"        } catch (IOException exception) {","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"Bluntsord"},"content":"            exception.printStackTrace();","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"Bluntsord"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"Bluntsord"},"content":"        return command;","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":24,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":25,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-09-03"},{"lineNumber":26,"author":{"gitId":"Bluntsord"},"content":"     * Seperate inputs","lastModifiedDate":"2021-09-03"},{"lineNumber":27,"author":{"gitId":"Bluntsord"},"content":"     *","lastModifiedDate":"2021-09-03"},{"lineNumber":28,"author":{"gitId":"Bluntsord"},"content":"     * @param output is the string to be surrounded by the lines","lastModifiedDate":"2021-09-03"},{"lineNumber":29,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-09-03"},{"lineNumber":30,"author":{"gitId":"Bluntsord"},"content":"    public static void renderOutput(String output) {","lastModifiedDate":"2021-09-09"},{"lineNumber":31,"author":{"gitId":"Bluntsord"},"content":"        System.out.println(\"________________________________________________________\");","lastModifiedDate":"2021-09-03"},{"lineNumber":32,"author":{"gitId":"Bluntsord"},"content":"        output.lines().map(x -\u003e \"     \" + x).forEach(System.out::println);","lastModifiedDate":"2021-09-03"},{"lineNumber":33,"author":{"gitId":"Bluntsord"},"content":"        System.out.println(\"________________________________________________________\");","lastModifiedDate":"2021-09-03"},{"lineNumber":34,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-09-03"},{"lineNumber":35,"author":{"gitId":"Bluntsord"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"Bluntsord":35}},{"path":"src/main/java/duke/controllers/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bluntsord"},"content":"package duke.controllers;","lastModifiedDate":"2021-09-03"},{"lineNumber":2,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":3,"author":{"gitId":"Bluntsord"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-03"},{"lineNumber":4,"author":{"gitId":"Bluntsord"},"content":"import java.util.Collections;","lastModifiedDate":"2021-09-03"},{"lineNumber":5,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":6,"author":{"gitId":"Bluntsord"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-09-03"},{"lineNumber":7,"author":{"gitId":"Bluntsord"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-09-03"},{"lineNumber":8,"author":{"gitId":"Bluntsord"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-09-03"},{"lineNumber":9,"author":{"gitId":"Bluntsord"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-09-03"},{"lineNumber":10,"author":{"gitId":"Bluntsord"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2021-09-03"},{"lineNumber":11,"author":{"gitId":"Bluntsord"},"content":"import javafx.scene.Node;","lastModifiedDate":"2021-09-03"},{"lineNumber":12,"author":{"gitId":"Bluntsord"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-09-03"},{"lineNumber":13,"author":{"gitId":"Bluntsord"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-09-03"},{"lineNumber":14,"author":{"gitId":"Bluntsord"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2021-09-03"},{"lineNumber":15,"author":{"gitId":"Bluntsord"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2021-09-03"},{"lineNumber":16,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":17,"author":{"gitId":"Bluntsord"},"content":"/**","lastModifiedDate":"2021-09-03"},{"lineNumber":18,"author":{"gitId":"Bluntsord"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2021-09-03"},{"lineNumber":19,"author":{"gitId":"Bluntsord"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2021-09-03"},{"lineNumber":20,"author":{"gitId":"Bluntsord"},"content":" * containing text from the speaker.","lastModifiedDate":"2021-09-03"},{"lineNumber":21,"author":{"gitId":"Bluntsord"},"content":" */","lastModifiedDate":"2021-09-03"},{"lineNumber":22,"author":{"gitId":"Bluntsord"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2021-09-03"},{"lineNumber":23,"author":{"gitId":"Bluntsord"},"content":"    @FXML","lastModifiedDate":"2021-09-03"},{"lineNumber":24,"author":{"gitId":"Bluntsord"},"content":"    private Label dialog;","lastModifiedDate":"2021-09-03"},{"lineNumber":25,"author":{"gitId":"Bluntsord"},"content":"    @FXML","lastModifiedDate":"2021-09-03"},{"lineNumber":26,"author":{"gitId":"Bluntsord"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2021-09-03"},{"lineNumber":27,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":28,"author":{"gitId":"Bluntsord"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2021-09-03"},{"lineNumber":29,"author":{"gitId":"Bluntsord"},"content":"        try {","lastModifiedDate":"2021-09-03"},{"lineNumber":30,"author":{"gitId":"Bluntsord"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2021-09-03"},{"lineNumber":31,"author":{"gitId":"Bluntsord"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2021-09-03"},{"lineNumber":32,"author":{"gitId":"Bluntsord"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2021-09-03"},{"lineNumber":33,"author":{"gitId":"Bluntsord"},"content":"            fxmlLoader.load();","lastModifiedDate":"2021-09-03"},{"lineNumber":34,"author":{"gitId":"Bluntsord"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-03"},{"lineNumber":35,"author":{"gitId":"Bluntsord"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-09-03"},{"lineNumber":36,"author":{"gitId":"Bluntsord"},"content":"        }","lastModifiedDate":"2021-09-03"},{"lineNumber":37,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":38,"author":{"gitId":"Bluntsord"},"content":"        dialog.setText(text);","lastModifiedDate":"2021-09-03"},{"lineNumber":39,"author":{"gitId":"Bluntsord"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2021-09-03"},{"lineNumber":40,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-09-03"},{"lineNumber":41,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":42,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-09-03"},{"lineNumber":43,"author":{"gitId":"Bluntsord"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2021-09-03"},{"lineNumber":44,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-09-03"},{"lineNumber":45,"author":{"gitId":"Bluntsord"},"content":"    private void flip() {","lastModifiedDate":"2021-09-03"},{"lineNumber":46,"author":{"gitId":"Bluntsord"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2021-09-03"},{"lineNumber":47,"author":{"gitId":"Bluntsord"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2021-09-03"},{"lineNumber":48,"author":{"gitId":"Bluntsord"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2021-09-03"},{"lineNumber":49,"author":{"gitId":"Bluntsord"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2021-09-03"},{"lineNumber":50,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-09-03"},{"lineNumber":51,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":52,"author":{"gitId":"Bluntsord"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2021-09-03"},{"lineNumber":53,"author":{"gitId":"Bluntsord"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2021-09-03"},{"lineNumber":54,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-09-03"},{"lineNumber":55,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":56,"author":{"gitId":"Bluntsord"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2021-09-03"},{"lineNumber":57,"author":{"gitId":"Bluntsord"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2021-09-03"},{"lineNumber":58,"author":{"gitId":"Bluntsord"},"content":"        db.flip();","lastModifiedDate":"2021-09-03"},{"lineNumber":59,"author":{"gitId":"Bluntsord"},"content":"        return db;","lastModifiedDate":"2021-09-03"},{"lineNumber":60,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-09-03"},{"lineNumber":61,"author":{"gitId":"Bluntsord"},"content":"}","lastModifiedDate":"2021-09-03"}],"authorContributionMap":{"Bluntsord":61}},{"path":"src/main/java/duke/controllers/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bluntsord"},"content":"package duke.controllers;","lastModifiedDate":"2021-09-03"},{"lineNumber":2,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":3,"author":{"gitId":"Bluntsord"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-03"},{"lineNumber":4,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":5,"author":{"gitId":"Bluntsord"},"content":"import duke.Duke;","lastModifiedDate":"2021-09-03"},{"lineNumber":6,"author":{"gitId":"Bluntsord"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-09-03"},{"lineNumber":7,"author":{"gitId":"Bluntsord"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-09-03"},{"lineNumber":8,"author":{"gitId":"Bluntsord"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2021-09-03"},{"lineNumber":9,"author":{"gitId":"Bluntsord"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-09-03"},{"lineNumber":10,"author":{"gitId":"Bluntsord"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2021-09-03"},{"lineNumber":11,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":12,"author":{"gitId":"Bluntsord"},"content":"/**","lastModifiedDate":"2021-09-03"},{"lineNumber":13,"author":{"gitId":"Bluntsord"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2021-09-03"},{"lineNumber":14,"author":{"gitId":"Bluntsord"},"content":" */","lastModifiedDate":"2021-09-03"},{"lineNumber":15,"author":{"gitId":"Bluntsord"},"content":"public class Main extends Application {","lastModifiedDate":"2021-09-03"},{"lineNumber":16,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":17,"author":{"gitId":"Bluntsord"},"content":"    private Duke duke \u003d new Duke();","lastModifiedDate":"2021-09-03"},{"lineNumber":18,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":19,"author":{"gitId":"Bluntsord"},"content":"    @Override","lastModifiedDate":"2021-09-03"},{"lineNumber":20,"author":{"gitId":"Bluntsord"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2021-09-03"},{"lineNumber":21,"author":{"gitId":"Bluntsord"},"content":"        try {","lastModifiedDate":"2021-09-03"},{"lineNumber":22,"author":{"gitId":"Bluntsord"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2021-09-03"},{"lineNumber":23,"author":{"gitId":"Bluntsord"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2021-09-03"},{"lineNumber":24,"author":{"gitId":"Bluntsord"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2021-09-03"},{"lineNumber":25,"author":{"gitId":"Bluntsord"},"content":"            stage.setScene(scene);","lastModifiedDate":"2021-09-03"},{"lineNumber":26,"author":{"gitId":"Bluntsord"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2021-09-03"},{"lineNumber":27,"author":{"gitId":"Bluntsord"},"content":"            stage.show();","lastModifiedDate":"2021-09-03"},{"lineNumber":28,"author":{"gitId":"Bluntsord"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-03"},{"lineNumber":29,"author":{"gitId":"Bluntsord"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-09-03"},{"lineNumber":30,"author":{"gitId":"Bluntsord"},"content":"        }","lastModifiedDate":"2021-09-03"},{"lineNumber":31,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-09-03"},{"lineNumber":32,"author":{"gitId":"Bluntsord"},"content":"}","lastModifiedDate":"2021-09-03"}],"authorContributionMap":{"Bluntsord":32}},{"path":"src/main/java/duke/controllers/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bluntsord"},"content":"package duke.controllers;","lastModifiedDate":"2021-09-03"},{"lineNumber":2,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":3,"author":{"gitId":"Bluntsord"},"content":"import duke.DataHandlerLayer;","lastModifiedDate":"2021-09-09"},{"lineNumber":4,"author":{"gitId":"Bluntsord"},"content":"import duke.Duke;","lastModifiedDate":"2021-09-09"},{"lineNumber":5,"author":{"gitId":"Bluntsord"},"content":"import duke.Logic;","lastModifiedDate":"2021-09-09"},{"lineNumber":6,"author":{"gitId":"Bluntsord"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-09-03"},{"lineNumber":7,"author":{"gitId":"Bluntsord"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2021-09-03"},{"lineNumber":8,"author":{"gitId":"Bluntsord"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2021-09-03"},{"lineNumber":9,"author":{"gitId":"Bluntsord"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2021-09-03"},{"lineNumber":10,"author":{"gitId":"Bluntsord"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-09-03"},{"lineNumber":11,"author":{"gitId":"Bluntsord"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-09-03"},{"lineNumber":12,"author":{"gitId":"Bluntsord"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2021-09-03"},{"lineNumber":13,"author":{"gitId":"Bluntsord"},"content":"/**","lastModifiedDate":"2021-09-03"},{"lineNumber":14,"author":{"gitId":"Bluntsord"},"content":" * Controller for duke.controllers.MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2021-09-03"},{"lineNumber":15,"author":{"gitId":"Bluntsord"},"content":" */","lastModifiedDate":"2021-09-03"},{"lineNumber":16,"author":{"gitId":"Bluntsord"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2021-09-03"},{"lineNumber":17,"author":{"gitId":"Bluntsord"},"content":"    private static String startUpText \u003d \"Oh my..... Looks like u have an old scroll..\" +","lastModifiedDate":"2021-09-11"},{"lineNumber":18,"author":{"gitId":"Bluntsord"},"content":"            \"\\n \\n Enter help command for any assistance you may need\";","lastModifiedDate":"2021-09-11"},{"lineNumber":19,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":20,"author":{"gitId":"Bluntsord"},"content":"    @FXML","lastModifiedDate":"2021-09-03"},{"lineNumber":21,"author":{"gitId":"Bluntsord"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2021-09-03"},{"lineNumber":22,"author":{"gitId":"Bluntsord"},"content":"    @FXML","lastModifiedDate":"2021-09-03"},{"lineNumber":23,"author":{"gitId":"Bluntsord"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2021-09-03"},{"lineNumber":24,"author":{"gitId":"Bluntsord"},"content":"    @FXML","lastModifiedDate":"2021-09-03"},{"lineNumber":25,"author":{"gitId":"Bluntsord"},"content":"    private TextField userInput;","lastModifiedDate":"2021-09-03"},{"lineNumber":26,"author":{"gitId":"Bluntsord"},"content":"    @FXML","lastModifiedDate":"2021-09-03"},{"lineNumber":27,"author":{"gitId":"Bluntsord"},"content":"    private Button sendButton;","lastModifiedDate":"2021-09-03"},{"lineNumber":28,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":29,"author":{"gitId":"Bluntsord"},"content":"    private Duke duke;","lastModifiedDate":"2021-09-03"},{"lineNumber":30,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":31,"author":{"gitId":"Bluntsord"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Kobold.png\"));","lastModifiedDate":"2021-09-03"},{"lineNumber":32,"author":{"gitId":"Bluntsord"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Croc.png\"));","lastModifiedDate":"2021-09-03"},{"lineNumber":33,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":34,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":35,"author":{"gitId":"Bluntsord"},"content":"     * init the GUI for dukebot","lastModifiedDate":"2021-09-06"},{"lineNumber":36,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":37,"author":{"gitId":"Bluntsord"},"content":"    @FXML","lastModifiedDate":"2021-09-03"},{"lineNumber":38,"author":{"gitId":"Bluntsord"},"content":"    public void initialize() {","lastModifiedDate":"2021-09-03"},{"lineNumber":39,"author":{"gitId":"Bluntsord"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2021-09-03"},{"lineNumber":40,"author":{"gitId":"Bluntsord"},"content":"        Logic.preload();","lastModifiedDate":"2021-09-03"},{"lineNumber":41,"author":{"gitId":"Bluntsord"},"content":"        String text \u003d startUpText + \"\\n\" + DataHandlerLayer.getFilteredLog(a -\u003e true);","lastModifiedDate":"2021-09-07"},{"lineNumber":42,"author":{"gitId":"Bluntsord"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2021-09-03"},{"lineNumber":43,"author":{"gitId":"Bluntsord"},"content":"                DialogBox.getDukeDialog(text, dukeImage)","lastModifiedDate":"2021-09-03"},{"lineNumber":44,"author":{"gitId":"Bluntsord"},"content":"        );","lastModifiedDate":"2021-09-03"},{"lineNumber":45,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-09-03"},{"lineNumber":46,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":47,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-09-03"},{"lineNumber":48,"author":{"gitId":"Bluntsord"},"content":"     * Set duke bot to use","lastModifiedDate":"2021-09-03"},{"lineNumber":49,"author":{"gitId":"Bluntsord"},"content":"     * @param d","lastModifiedDate":"2021-09-03"},{"lineNumber":50,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-09-03"},{"lineNumber":51,"author":{"gitId":"Bluntsord"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2021-09-03"},{"lineNumber":52,"author":{"gitId":"Bluntsord"},"content":"        duke \u003d d;","lastModifiedDate":"2021-09-03"},{"lineNumber":53,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-09-03"},{"lineNumber":54,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":55,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-09-03"},{"lineNumber":56,"author":{"gitId":"Bluntsord"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2021-09-03"},{"lineNumber":57,"author":{"gitId":"Bluntsord"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2021-09-03"},{"lineNumber":58,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-09-03"},{"lineNumber":59,"author":{"gitId":"Bluntsord"},"content":"    @FXML","lastModifiedDate":"2021-09-03"},{"lineNumber":60,"author":{"gitId":"Bluntsord"},"content":"    private void handleUserInput() {","lastModifiedDate":"2021-09-03"},{"lineNumber":61,"author":{"gitId":"Bluntsord"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2021-09-03"},{"lineNumber":62,"author":{"gitId":"Bluntsord"},"content":"        String response \u003d null;","lastModifiedDate":"2021-09-03"},{"lineNumber":63,"author":{"gitId":"Bluntsord"},"content":"        String temp \u003d Logic.checkIfSpecialCommand(input);","lastModifiedDate":"2021-09-07"},{"lineNumber":64,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":65,"author":{"gitId":"Bluntsord"},"content":"        if (temp \u003d\u003d null) {","lastModifiedDate":"2021-09-03"},{"lineNumber":66,"author":{"gitId":"Bluntsord"},"content":"            response \u003d \"There are no task my dear summoner \u003c3\";","lastModifiedDate":"2021-09-03"},{"lineNumber":67,"author":{"gitId":"Bluntsord"},"content":"        } else {","lastModifiedDate":"2021-09-03"},{"lineNumber":68,"author":{"gitId":"Bluntsord"},"content":"            response \u003d temp;","lastModifiedDate":"2021-09-03"},{"lineNumber":69,"author":{"gitId":"Bluntsord"},"content":"        }","lastModifiedDate":"2021-09-03"},{"lineNumber":70,"author":{"gitId":"Bluntsord"},"content":"        System.out.println(response);","lastModifiedDate":"2021-09-03"},{"lineNumber":71,"author":{"gitId":"Bluntsord"},"content":"        if (input.contains(\"help\")) {","lastModifiedDate":"2021-09-11"},{"lineNumber":72,"author":{"gitId":"Bluntsord"},"content":"            dialogContainer.getChildren().clear();","lastModifiedDate":"2021-09-11"},{"lineNumber":73,"author":{"gitId":"Bluntsord"},"content":"            dialogContainer.getChildren().addAll(","lastModifiedDate":"2021-09-11"},{"lineNumber":74,"author":{"gitId":"Bluntsord"},"content":"                    DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2021-09-11"},{"lineNumber":75,"author":{"gitId":"Bluntsord"},"content":"            );","lastModifiedDate":"2021-09-11"},{"lineNumber":76,"author":{"gitId":"Bluntsord"},"content":"        } else {","lastModifiedDate":"2021-09-11"},{"lineNumber":77,"author":{"gitId":"Bluntsord"},"content":"            dialogContainer.getChildren().addAll(","lastModifiedDate":"2021-09-03"},{"lineNumber":78,"author":{"gitId":"Bluntsord"},"content":"                    DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2021-09-03"},{"lineNumber":79,"author":{"gitId":"Bluntsord"},"content":"                    DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2021-09-03"},{"lineNumber":80,"author":{"gitId":"Bluntsord"},"content":"            );","lastModifiedDate":"2021-09-03"},{"lineNumber":81,"author":{"gitId":"Bluntsord"},"content":"        }","lastModifiedDate":"2021-09-11"},{"lineNumber":82,"author":{"gitId":"Bluntsord"},"content":"        userInput.clear();","lastModifiedDate":"2021-09-03"},{"lineNumber":83,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-09-03"},{"lineNumber":84,"author":{"gitId":"Bluntsord"},"content":"}","lastModifiedDate":"2021-09-03"}],"authorContributionMap":{"Bluntsord":84}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Bluntsord"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":2,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":3,"author":{"gitId":"Bluntsord"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":4,"author":{"gitId":"Bluntsord"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":5,"author":{"gitId":"Bluntsord"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":6,"author":{"gitId":"Bluntsord"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":7,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":8,"author":{"gitId":"Bluntsord"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":9,"author":{"gitId":"Bluntsord"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":10,"author":{"gitId":"Bluntsord"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":11,"author":{"gitId":"Bluntsord"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":12,"author":{"gitId":"Bluntsord"},"content":"    \u003c/children\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":13,"author":{"gitId":"Bluntsord"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":14,"author":{"gitId":"Bluntsord"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":15,"author":{"gitId":"Bluntsord"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":16,"author":{"gitId":"Bluntsord"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2021-09-03"}],"authorContributionMap":{"Bluntsord":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Bluntsord"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":2,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":3,"author":{"gitId":"Bluntsord"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":4,"author":{"gitId":"Bluntsord"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":5,"author":{"gitId":"Bluntsord"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":6,"author":{"gitId":"Bluntsord"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":7,"author":{"gitId":"Bluntsord"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":8,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":9,"author":{"gitId":"Bluntsord"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.controllers.MainWindow\"\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":10,"author":{"gitId":"Bluntsord"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":11,"author":{"gitId":"Bluntsord"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":12,"author":{"gitId":"Bluntsord"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":13,"author":{"gitId":"Bluntsord"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":14,"author":{"gitId":"Bluntsord"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":15,"author":{"gitId":"Bluntsord"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":16,"author":{"gitId":"Bluntsord"},"content":"            \u003c/content\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":17,"author":{"gitId":"Bluntsord"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":18,"author":{"gitId":"Bluntsord"},"content":"    \u003c/children\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":19,"author":{"gitId":"Bluntsord"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2021-09-03"}],"authorContributionMap":{"Bluntsord":19}},{"path":"src/test/java/DateTimeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bluntsord"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-09-20"},{"lineNumber":2,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"Bluntsord"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-07"},{"lineNumber":4,"author":{"gitId":"Bluntsord"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-07"},{"lineNumber":5,"author":{"gitId":"Bluntsord"},"content":"import java.util.Collections;","lastModifiedDate":"2021-09-07"},{"lineNumber":6,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":7,"author":{"gitId":"Bluntsord"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-09-20"},{"lineNumber":8,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":9,"author":{"gitId":"Bluntsord"},"content":"import duke.Command;","lastModifiedDate":"2021-09-20"},{"lineNumber":10,"author":{"gitId":"Bluntsord"},"content":"import duke.Deadline;","lastModifiedDate":"2021-09-20"},{"lineNumber":11,"author":{"gitId":"Bluntsord"},"content":"import duke.Task;","lastModifiedDate":"2021-09-20"},{"lineNumber":12,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":13,"author":{"gitId":"Bluntsord"},"content":"public class DateTimeTest {","lastModifiedDate":"2021-09-07"},{"lineNumber":14,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":15,"author":{"gitId":"Bluntsord"},"content":"    @Test","lastModifiedDate":"2021-09-07"},{"lineNumber":16,"author":{"gitId":"Bluntsord"},"content":"    public void checkDateTimeWorking() {","lastModifiedDate":"2021-09-07"},{"lineNumber":17,"author":{"gitId":"Bluntsord"},"content":"        LocalDateTime firstDeadlineTime \u003d LocalDateTime.of(2000, 10, 3, 23, 0);","lastModifiedDate":"2021-09-07"},{"lineNumber":18,"author":{"gitId":"Bluntsord"},"content":"        Deadline firstDeadline \u003d new Deadline(\"firstDateline\", firstDeadlineTime);","lastModifiedDate":"2021-09-07"},{"lineNumber":19,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":20,"author":{"gitId":"Bluntsord"},"content":"        ArrayList\u003cString\u003e list \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-07"},{"lineNumber":21,"author":{"gitId":"Bluntsord"},"content":"        Collections.addAll(list \u003d new ArrayList\u003cString\u003e(), \"This\", \"Is\", \"For\", \"Testing\");","lastModifiedDate":"2021-09-07"},{"lineNumber":22,"author":{"gitId":"Bluntsord"},"content":"        Command firstCommand \u003d new Command(Task.TaskType.DEADLINE, list, \"This is for testing\", firstDeadlineTime);","lastModifiedDate":"2021-09-07"},{"lineNumber":23,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":24,"author":{"gitId":"Bluntsord"},"content":"        assertEquals(firstDeadline.getDeadline(), firstCommand.getLocalDateTime());","lastModifiedDate":"2021-09-07"},{"lineNumber":25,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":26,"author":{"gitId":"Bluntsord"},"content":"}","lastModifiedDate":"2021-09-07"}],"authorContributionMap":{"Bluntsord":26}},{"path":"src/test/java/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bluntsord"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-09-20"},{"lineNumber":2,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":3,"author":{"gitId":"Bluntsord"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-27"},{"lineNumber":4,"author":{"gitId":"Bluntsord"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-27"},{"lineNumber":5,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":6,"author":{"gitId":"Bluntsord"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-09-20"},{"lineNumber":7,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":8,"author":{"gitId":"Bluntsord"},"content":"import duke.Deadline;","lastModifiedDate":"2021-09-20"},{"lineNumber":9,"author":{"gitId":"Bluntsord"},"content":"import duke.HelpCommand;","lastModifiedDate":"2021-09-20"},{"lineNumber":10,"author":{"gitId":"Bluntsord"},"content":"import duke.Todo;","lastModifiedDate":"2021-09-20"},{"lineNumber":11,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":12,"author":{"gitId":"Bluntsord"},"content":"public class DukeTest {","lastModifiedDate":"2021-08-27"},{"lineNumber":13,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"Bluntsord"},"content":"     * To test the creation and writing of the todo class. Checks if to string is correct","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"Bluntsord"},"content":"    @Test","lastModifiedDate":"2021-08-27"},{"lineNumber":18,"author":{"gitId":"Bluntsord"},"content":"    public void todoTest() {","lastModifiedDate":"2021-09-20"},{"lineNumber":19,"author":{"gitId":"Bluntsord"},"content":"        Todo todoDummy \u003d new Todo(\"Test dummy\");","lastModifiedDate":"2021-08-27"},{"lineNumber":20,"author":{"gitId":"Bluntsord"},"content":"        String incompleteTodoDummyString \u003d \"[T][X] Test dummy\";","lastModifiedDate":"2021-08-27"},{"lineNumber":21,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":22,"author":{"gitId":"Bluntsord"},"content":"        //Test incomplete dummy with output string result","lastModifiedDate":"2021-08-27"},{"lineNumber":23,"author":{"gitId":"Bluntsord"},"content":"        assertEquals(incompleteTodoDummyString, todoDummy.toString());","lastModifiedDate":"2021-08-27"},{"lineNumber":24,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":25,"author":{"gitId":"Bluntsord"},"content":"        //Test completed dummy with output string result","lastModifiedDate":"2021-08-27"},{"lineNumber":26,"author":{"gitId":"Bluntsord"},"content":"        todoDummy.completeTask();","lastModifiedDate":"2021-08-27"},{"lineNumber":27,"author":{"gitId":"Bluntsord"},"content":"        String completedTodoDummyString \u003d \"[T][done] Test dummy\";","lastModifiedDate":"2021-09-20"},{"lineNumber":28,"author":{"gitId":"Bluntsord"},"content":"        assertEquals(completedTodoDummyString, todoDummy.toString());","lastModifiedDate":"2021-08-27"},{"lineNumber":29,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":30,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":31,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":32,"author":{"gitId":"Bluntsord"},"content":"     * To test the creation and string representation of deadline class","lastModifiedDate":"2021-08-28"},{"lineNumber":33,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":34,"author":{"gitId":"Bluntsord"},"content":"    @Test","lastModifiedDate":"2021-08-27"},{"lineNumber":35,"author":{"gitId":"Bluntsord"},"content":"    public void deadlineTest() {","lastModifiedDate":"2021-09-20"},{"lineNumber":36,"author":{"gitId":"Bluntsord"},"content":"        LocalDateTime testDeadlineDateTime \u003d LocalDateTime.of(2020, 2, 28, 23, 00);","lastModifiedDate":"2021-08-27"},{"lineNumber":37,"author":{"gitId":"Bluntsord"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");","lastModifiedDate":"2021-08-27"},{"lineNumber":38,"author":{"gitId":"Bluntsord"},"content":"        Deadline deadlineDummy \u003d new Deadline(\"Test deadline\", testDeadlineDateTime);","lastModifiedDate":"2021-08-27"},{"lineNumber":39,"author":{"gitId":"Bluntsord"},"content":"        assertEquals(\"[D][X] Test deadline 28/02/2020 23:00\", deadlineDummy.toString());","lastModifiedDate":"2021-08-27"},{"lineNumber":40,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":41,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":42,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":43,"author":{"gitId":"Bluntsord"},"content":"    @Test","lastModifiedDate":"2021-09-11"},{"lineNumber":44,"author":{"gitId":"Bluntsord"},"content":"    public void helpCommandTest() {","lastModifiedDate":"2021-09-20"},{"lineNumber":45,"author":{"gitId":"Bluntsord"},"content":"        assertEquals(HelpCommand.getCommand(0), HelpCommand.getCommand(\"generalHelp\"));","lastModifiedDate":"2021-09-11"},{"lineNumber":46,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":47,"author":{"gitId":"Bluntsord"},"content":"}","lastModifiedDate":"2021-08-27"}],"authorContributionMap":{"Bluntsord":47}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Bluntsord"},"content":"add todo one","lastModifiedDate":"2021-08-19"},{"lineNumber":2,"author":{"gitId":"Bluntsord"},"content":"add todo two","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"Bluntsord"},"content":"add todo three","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"Bluntsord"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"Bluntsord"},"content":"done 1","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"Bluntsord"},"content":"done 2","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"Bluntsord"},"content":"done 3","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"Bluntsord"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"Bluntsord"},"content":"deadline one /by Sunday","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"Bluntsord"},"content":"deadline two /by Monday","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"Bluntsord"},"content":"deadline three /by Tuesday","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"Bluntsord"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"Bluntsord"},"content":"done 4","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"Bluntsord"},"content":"done 5","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"Bluntsord"},"content":"done 6","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"Bluntsord"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":17,"author":{"gitId":"Bluntsord"},"content":"event one /at Mon 2-4pm","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"Bluntsord"},"content":"event two /at Tues 2-4pm","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"Bluntsord"},"content":"event three /at Wed 2-4pm","lastModifiedDate":"2021-08-19"},{"lineNumber":20,"author":{"gitId":"Bluntsord"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":21,"author":{"gitId":"Bluntsord"},"content":"done 7","lastModifiedDate":"2021-08-19"},{"lineNumber":22,"author":{"gitId":"Bluntsord"},"content":"done 8","lastModifiedDate":"2021-08-19"},{"lineNumber":23,"author":{"gitId":"Bluntsord"},"content":"done 9","lastModifiedDate":"2021-08-19"},{"lineNumber":24,"author":{"gitId":"Bluntsord"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":25,"author":{"gitId":"Bluntsord"},"content":"delete 10","lastModifiedDate":"2021-08-19"},{"lineNumber":26,"author":{"gitId":"Bluntsord"},"content":"delete 9","lastModifiedDate":"2021-08-19"},{"lineNumber":27,"author":{"gitId":"Bluntsord"},"content":"delete 8","lastModifiedDate":"2021-08-19"},{"lineNumber":28,"author":{"gitId":"Bluntsord"},"content":"delete 7","lastModifiedDate":"2021-08-19"},{"lineNumber":29,"author":{"gitId":"Bluntsord"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":30,"author":{"gitId":"Bluntsord"},"content":"bye","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"Bluntsord":30}}]

[{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2019-07-29"},{"lineNumber":2,"author":{"gitId":"Bluntsord"},"content":"Project Duke Chatbot will be officially known as Dukebot for short","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"Bluntsord"},"content":"For the current version up til level 10, the bot still has no gui as of yet,","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"Bluntsord"},"content":"thus the Duke.java has to be ran. Inputs for the Project Duke chatbot can only","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"Bluntsord"},"content":"be input when the Duke.java script is ran.","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"Bluntsord"},"content":"# Dev Guide","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"Bluntsord"},"content":"This is the for the current version of Dukebot lvl 1.","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"Bluntsord"},"content":"The below is an attached image of what the architecture of the DukeBot is.","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"Bluntsord"},"content":"![DukeBotWorkFlow](Assets/DukeBotWorkFlow.png)","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Features ","lastModifiedDate":"2019-07-29"},{"lineNumber":16,"author":{"gitId":"Bluntsord"},"content":"Bot should echo commands of anything entered by the user.","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"### Feature-ABC","lastModifiedDate":"2021-07-17"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":20,"author":{"gitId":"Bluntsord"},"content":"**Exit**","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"Bluntsord"},"content":": Bot should be able to exit when the user enters the command \"bye\" or \"BYE\"","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":24,"author":{"gitId":"-"},"content":"### Feature-XYZ","lastModifiedDate":"2021-07-17"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":26,"author":{"gitId":"-"},"content":"Description of the feature.","lastModifiedDate":"2021-07-17"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"## Usage","lastModifiedDate":"2019-07-29"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"### `Keyword` - Describe action","lastModifiedDate":"2019-07-29"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":32,"author":{"gitId":"-"},"content":"Describe the action and its outcome.","lastModifiedDate":"2021-07-17"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":34,"author":{"gitId":"-"},"content":"Example of usage: ","lastModifiedDate":"2019-07-29"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":36,"author":{"gitId":"-"},"content":"`keyword (optional arguments)`","lastModifiedDate":"2019-07-29"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"Expected outcome:","lastModifiedDate":"2019-07-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"Description of the outcome.","lastModifiedDate":"2021-07-17"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":42,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":43,"author":{"gitId":"-"},"content":"expected output","lastModifiedDate":"2021-07-17"},{"lineNumber":44,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"}],"authorContributionMap":{"Bluntsord":16,"-":28}},{"path":"src/main/Text/History.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Bluntsord"},"content":"[T][X] smth","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"Bluntsord":1}},{"path":"src/main/java/duke/BotReplies.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bluntsord"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"Bluntsord"},"content":"public class BotReplies {","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"Bluntsord"},"content":"   public enum Greetings {","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"Bluntsord"},"content":"   }","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"Bluntsord"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"Bluntsord":8}},{"path":"src/main/java/duke/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bluntsord"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"Bluntsord"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"Bluntsord"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"Bluntsord"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"Bluntsord"},"content":" * Packaged command that the parser outputs. Is process by the logic layer and is for ease of processing.","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"Bluntsord"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"Bluntsord"},"content":"public class Command {","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"Bluntsord"},"content":"    private Task.TaskType taskType;","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"Bluntsord"},"content":"    private ArrayList\u003cString\u003e listOfCommandInputs;","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"Bluntsord"},"content":"    private String log;","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"Bluntsord"},"content":"    private LocalDateTime localDateTime;","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":17,"author":{"gitId":"Bluntsord"},"content":"     * Constructor for packaged command made by parser","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"Bluntsord"},"content":"     * @param taskType duke.Task type","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"Bluntsord"},"content":"     * @param listOfCommandInputs The entire input entered by the user","lastModifiedDate":"2021-08-19"},{"lineNumber":20,"author":{"gitId":"Bluntsord"},"content":"     * @param log The logged statement. Used to update log since there are keywords that are not supposed to","lastModifiedDate":"2021-08-19"},{"lineNumber":21,"author":{"gitId":"Bluntsord"},"content":"     *            appear in the log statement","lastModifiedDate":"2021-08-19"},{"lineNumber":22,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":23,"author":{"gitId":"Bluntsord"},"content":"    public Command(Task.TaskType taskType, ArrayList\u003cString\u003e listOfCommandInputs, String log) {","lastModifiedDate":"2021-08-19"},{"lineNumber":24,"author":{"gitId":"Bluntsord"},"content":"        this.taskType \u003d taskType;","lastModifiedDate":"2021-08-19"},{"lineNumber":25,"author":{"gitId":"Bluntsord"},"content":"        this.listOfCommandInputs \u003d listOfCommandInputs;","lastModifiedDate":"2021-08-19"},{"lineNumber":26,"author":{"gitId":"Bluntsord"},"content":"        this.log \u003d log;","lastModifiedDate":"2021-08-19"},{"lineNumber":27,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":28,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":29,"author":{"gitId":"Bluntsord"},"content":"    public Command(Task.TaskType taskType, ArrayList\u003cString\u003e listOfCommandInputs, String log, LocalDateTime localDateTime) {","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"Bluntsord"},"content":"        this.taskType \u003d taskType;","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"Bluntsord"},"content":"        this.listOfCommandInputs \u003d listOfCommandInputs;","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"Bluntsord"},"content":"        this.log \u003d log;","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"Bluntsord"},"content":"        this.localDateTime \u003d localDateTime;","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":38,"author":{"gitId":"Bluntsord"},"content":"     * Returns tasktype","lastModifiedDate":"2021-08-19"},{"lineNumber":39,"author":{"gitId":"Bluntsord"},"content":"     * @return duke.Task type. Made task type into an enum for ease","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":41,"author":{"gitId":"Bluntsord"},"content":"    public Task.TaskType getTaskType() {","lastModifiedDate":"2021-08-19"},{"lineNumber":42,"author":{"gitId":"Bluntsord"},"content":"        return this.taskType;","lastModifiedDate":"2021-08-19"},{"lineNumber":43,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":44,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":45,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":46,"author":{"gitId":"Bluntsord"},"content":"     * Returns list of command inputs","lastModifiedDate":"2021-08-19"},{"lineNumber":47,"author":{"gitId":"Bluntsord"},"content":"     * @return ArrayList of strings, split by \" \". Makes it easier to access individual words","lastModifiedDate":"2021-08-19"},{"lineNumber":48,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":49,"author":{"gitId":"Bluntsord"},"content":"    public ArrayList\u003cString\u003e getListOfCommandInputs() {","lastModifiedDate":"2021-08-19"},{"lineNumber":50,"author":{"gitId":"Bluntsord"},"content":"        return this.listOfCommandInputs;","lastModifiedDate":"2021-08-19"},{"lineNumber":51,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":52,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":53,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":54,"author":{"gitId":"Bluntsord"},"content":"     * Returns log statement","lastModifiedDate":"2021-08-19"},{"lineNumber":55,"author":{"gitId":"Bluntsord"},"content":"     * @return String for logging later","lastModifiedDate":"2021-08-19"},{"lineNumber":56,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":57,"author":{"gitId":"Bluntsord"},"content":"    public String getLog() {","lastModifiedDate":"2021-08-19"},{"lineNumber":58,"author":{"gitId":"Bluntsord"},"content":"        return this.log;","lastModifiedDate":"2021-08-19"},{"lineNumber":59,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":60,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"Bluntsord"},"content":"    public LocalDateTime getLocalDateTime() {","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"Bluntsord"},"content":"        return this.localDateTime;","lastModifiedDate":"2021-08-26"},{"lineNumber":63,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":64,"author":{"gitId":"Bluntsord"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"Bluntsord":64}},{"path":"src/main/java/duke/DataHandlerLayer.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bluntsord"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"Bluntsord"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"Bluntsord"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"Bluntsord"},"content":" * Handles all things related to data. This includes the in-memory storage represented by an arrayList or","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"Bluntsord"},"content":" * the persistent storage handled by the .txt files.","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"Bluntsord"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"Bluntsord"},"content":"public class DataHandlerLayer {","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"Bluntsord"},"content":"     * In memory storage for log, for history, refer to the history variable","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"Bluntsord"},"content":"    private static ArrayList\u003cTask\u003e log \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"Bluntsord"},"content":"     * History file that will be written to","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"Bluntsord"},"content":"    private static String fileName \u003d \"src/main/Text/History.txt\";","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"Bluntsord"},"content":"     * Init data storage handler for history.","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"Bluntsord"},"content":"    private static PersistentStorageHandler history \u003d new PersistentStorageHandler(fileName);","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":29,"author":{"gitId":"Bluntsord"},"content":"     * Adds the command to the log.","lastModifiedDate":"2021-08-18"},{"lineNumber":30,"author":{"gitId":"Bluntsord"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":31,"author":{"gitId":"Bluntsord"},"content":"     * @param task duke.Command to be added to the log","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":33,"author":{"gitId":"Bluntsord"},"content":"    public static void addToLog(Task task) {","lastModifiedDate":"2021-08-18"},{"lineNumber":34,"author":{"gitId":"Bluntsord"},"content":"        log.add(task);","lastModifiedDate":"2021-08-18"},{"lineNumber":35,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":36,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":37,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":38,"author":{"gitId":"Bluntsord"},"content":"     * Returns the task at the specific log postion","lastModifiedDate":"2021-08-18"},{"lineNumber":39,"author":{"gitId":"Bluntsord"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"Bluntsord"},"content":"     * @param position","lastModifiedDate":"2021-08-18"},{"lineNumber":41,"author":{"gitId":"Bluntsord"},"content":"     * @return duke.Task","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":43,"author":{"gitId":"Bluntsord"},"content":"    public static Task getTask(int position) {","lastModifiedDate":"2021-08-18"},{"lineNumber":44,"author":{"gitId":"Bluntsord"},"content":"        return log.get(position);","lastModifiedDate":"2021-08-18"},{"lineNumber":45,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":46,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":47,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":48,"author":{"gitId":"Bluntsord"},"content":"     * Prints log of tasks. No parameters needed. To change task representation, see duke.Task.","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":50,"author":{"gitId":"Bluntsord"},"content":"    public static void printLog() {","lastModifiedDate":"2021-08-18"},{"lineNumber":51,"author":{"gitId":"Bluntsord"},"content":"        System.out.println(\"Here are your tasks summoner. Please do complete them as fast as possible. I have\" +","lastModifiedDate":"2021-08-19"},{"lineNumber":52,"author":{"gitId":"Bluntsord"},"content":"                \"been waiting for so many others for countless of centuries. Perhaps I am just an npc\");","lastModifiedDate":"2021-08-19"},{"lineNumber":53,"author":{"gitId":"Bluntsord"},"content":"        for (int i \u003d 0; i \u003c log.size(); i++) {","lastModifiedDate":"2021-08-18"},{"lineNumber":54,"author":{"gitId":"Bluntsord"},"content":"            Task currentTask \u003d log.get(i);","lastModifiedDate":"2021-08-18"},{"lineNumber":55,"author":{"gitId":"Bluntsord"},"content":"            int taskNumber \u003d i + 1;","lastModifiedDate":"2021-08-18"},{"lineNumber":56,"author":{"gitId":"Bluntsord"},"content":"            System.out.println(taskNumber + \". \" + currentTask.toString());","lastModifiedDate":"2021-08-18"},{"lineNumber":57,"author":{"gitId":"Bluntsord"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":58,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":59,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":60,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":61,"author":{"gitId":"Bluntsord"},"content":"     * Prints a log of tasks that are filtered. True for completed and False for not completed","lastModifiedDate":"2021-08-18"},{"lineNumber":62,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":63,"author":{"gitId":"Bluntsord"},"content":"    public static void print_filtered_log(boolean cond) {","lastModifiedDate":"2021-08-18"},{"lineNumber":64,"author":{"gitId":"Bluntsord"},"content":"        int taskNumber \u003d 1;","lastModifiedDate":"2021-08-18"},{"lineNumber":65,"author":{"gitId":"Bluntsord"},"content":"        for (Task temp : log) {","lastModifiedDate":"2021-08-18"},{"lineNumber":66,"author":{"gitId":"Bluntsord"},"content":"            if (temp.getCompletedStatus() \u003d\u003d cond) {","lastModifiedDate":"2021-08-18"},{"lineNumber":67,"author":{"gitId":"Bluntsord"},"content":"                System.out.println(taskNumber + \". \" + temp.toString());","lastModifiedDate":"2021-08-18"},{"lineNumber":68,"author":{"gitId":"Bluntsord"},"content":"                taskNumber++;","lastModifiedDate":"2021-08-18"},{"lineNumber":69,"author":{"gitId":"Bluntsord"},"content":"            }","lastModifiedDate":"2021-08-18"},{"lineNumber":70,"author":{"gitId":"Bluntsord"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":71,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":72,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":73,"author":{"gitId":"Bluntsord"},"content":"    public static void delete(int position) throws IndexOutOfBoundsException {","lastModifiedDate":"2021-08-19"},{"lineNumber":74,"author":{"gitId":"Bluntsord"},"content":"        if (position \u003d\u003d 0) {","lastModifiedDate":"2021-08-19"},{"lineNumber":75,"author":{"gitId":"Bluntsord"},"content":"            throw new IndexOutOfBoundsException();","lastModifiedDate":"2021-08-19"},{"lineNumber":76,"author":{"gitId":"Bluntsord"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":77,"author":{"gitId":"Bluntsord"},"content":"        ;","lastModifiedDate":"2021-08-26"},{"lineNumber":78,"author":{"gitId":"Bluntsord"},"content":"        log.remove(position - 1);","lastModifiedDate":"2021-08-19"},{"lineNumber":79,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":80,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":81,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":82,"author":{"gitId":"Bluntsord"},"content":"     * Prints all the lines in the history","lastModifiedDate":"2021-08-25"},{"lineNumber":83,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":84,"author":{"gitId":"Bluntsord"},"content":"    public static void printHistory() {","lastModifiedDate":"2021-08-26"},{"lineNumber":85,"author":{"gitId":"Bluntsord"},"content":"        history.printAllLines();","lastModifiedDate":"2021-08-25"},{"lineNumber":86,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":87,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":88,"author":{"gitId":"Bluntsord"},"content":"    public static void stopWriting() {","lastModifiedDate":"2021-08-25"},{"lineNumber":89,"author":{"gitId":"Bluntsord"},"content":"        history.stopWriting();","lastModifiedDate":"2021-08-25"},{"lineNumber":90,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":91,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":92,"author":{"gitId":"Bluntsord"},"content":"    public static ArrayList\u003cCommand\u003e loadPreset() throws InvalidCommandException {","lastModifiedDate":"2021-08-25"},{"lineNumber":93,"author":{"gitId":"Bluntsord"},"content":"        return Parser.parsePreloadedTasks(history.getAll_lines());","lastModifiedDate":"2021-08-25"},{"lineNumber":94,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":95,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":96,"author":{"gitId":"Bluntsord"},"content":"    public static void appendToHistory(Task task) {","lastModifiedDate":"2021-08-25"},{"lineNumber":97,"author":{"gitId":"Bluntsord"},"content":"        history.write(task.toString());","lastModifiedDate":"2021-08-25"},{"lineNumber":98,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":99,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":100,"author":{"gitId":"Bluntsord"},"content":"    public static void updateHistory() {","lastModifiedDate":"2021-08-25"},{"lineNumber":101,"author":{"gitId":"Bluntsord"},"content":"        history.clear_history();","lastModifiedDate":"2021-08-25"},{"lineNumber":102,"author":{"gitId":"Bluntsord"},"content":"        for (Task task : log) {","lastModifiedDate":"2021-08-25"},{"lineNumber":103,"author":{"gitId":"Bluntsord"},"content":"            if (!task.getCompletedStatus()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":104,"author":{"gitId":"Bluntsord"},"content":"                appendToHistory(task);","lastModifiedDate":"2021-08-25"},{"lineNumber":105,"author":{"gitId":"Bluntsord"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":106,"author":{"gitId":"Bluntsord"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":107,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":108,"author":{"gitId":"Bluntsord"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"Bluntsord":108}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bluntsord"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"Bluntsord"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"Bluntsord"},"content":" * Deadline class that extends tasks. Should come with a name for the task as well as a deadline for the task","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"Bluntsord"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"Bluntsord"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"Bluntsord"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"Bluntsord"},"content":"public class Deadline extends Task{","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"Bluntsord"},"content":"    private LocalDateTime deadline;","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"Bluntsord"},"content":"    private static DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"Bluntsord"},"content":"     * Constructor for Deadline task","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"Bluntsord"},"content":"     * @param name name of task","lastModifiedDate":"2021-08-19"},{"lineNumber":17,"author":{"gitId":"Bluntsord"},"content":"     * @param deadline Use to indicate the deadline of the task","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"Bluntsord"},"content":"    public Deadline(String name, LocalDateTime deadline) {","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"Bluntsord"},"content":"           super(name);","lastModifiedDate":"2021-08-19"},{"lineNumber":21,"author":{"gitId":"Bluntsord"},"content":"           this.deadline \u003d deadline;","lastModifiedDate":"2021-08-19"},{"lineNumber":22,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":23,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":24,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":25,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":26,"author":{"gitId":"Bluntsord"},"content":"     * String representation of the Deadline class","lastModifiedDate":"2021-08-19"},{"lineNumber":27,"author":{"gitId":"Bluntsord"},"content":"     * @return String. See above","lastModifiedDate":"2021-08-19"},{"lineNumber":28,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":29,"author":{"gitId":"Bluntsord"},"content":"    public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":30,"author":{"gitId":"Bluntsord"},"content":"        return \"[D]\" + super.toString() + \" \" + formatter.format(deadline);","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":32,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"Bluntsord"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"Bluntsord":33}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bluntsord"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"Bluntsord"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"Bluntsord"},"content":" * Main file of the duke folder. Runs the while loop to keep the bot going","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"Bluntsord"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":7,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"Bluntsord"},"content":"    private static boolean isRunning \u003d false;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"Bluntsord"},"content":"     * Function starts the process of the dukebot, closes when the \"Bye command is issued\"","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"Bluntsord"},"content":"    private static void start() {","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"Bluntsord"},"content":"        isRunning \u003d true;","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"Bluntsord"},"content":"        Logic.preload();","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"Bluntsord"},"content":"        while (true) {","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"Bluntsord"},"content":"            String command \u003d UI.scan();","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"Bluntsord"},"content":"            try {","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"Bluntsord"},"content":"                Logic.checkIfSpecialComand(command);","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"Bluntsord"},"content":"            } catch (InvalidCommandException exception) {","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"Bluntsord"},"content":"                System.out.println(exception.getMessage());","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"Bluntsord"},"content":"            }","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"Bluntsord"},"content":"            //Check if the logic has made any changes to quit the programme or continue running","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"Bluntsord"},"content":"            if (!isRunning) {","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"Bluntsord"},"content":"                System.out.println(\"See ya\");","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"Bluntsord"},"content":"                break;","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"Bluntsord"},"content":"            }","lastModifiedDate":"2021-08-18"},{"lineNumber":28,"author":{"gitId":"Bluntsord"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":29,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":30,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":31,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"Bluntsord"},"content":"     * Stop the running of the bot","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"Bluntsord"},"content":"    protected static void stop() {","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"Bluntsord"},"content":"        isRunning \u003d false;","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":40,"author":{"gitId":"Bluntsord"},"content":"     * Starting point of the dukeBot","lastModifiedDate":"2021-08-18"},{"lineNumber":41,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        String logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2019-07-29"},{"lineNumber":48,"author":{"gitId":"Bluntsord"},"content":"        System.out.println(\"Hello from\\n\" + logo + \"\\nWhat can I do for you today?\");","lastModifiedDate":"2021-08-18"},{"lineNumber":49,"author":{"gitId":"Bluntsord"},"content":"        start();","lastModifiedDate":"2021-08-18"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"Bluntsord":42,"-":9}},{"path":"src/main/java/duke/EmptyCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bluntsord"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"Bluntsord"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"Bluntsord"},"content":" * Empty duke.Command exception","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"Bluntsord"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"Bluntsord"},"content":"public class EmptyCommandException extends InvalidCommandException {","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"Bluntsord"},"content":"     * Overridden method from duke.InvalidCommandException. Constructor","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"Bluntsord"},"content":"    public EmptyCommandException() {","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"Bluntsord"},"content":"        super(\"Input is empty! Please enter something into the chat\");","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"Bluntsord"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"Bluntsord":13}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bluntsord"},"content":"package duke; /**","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"Bluntsord"},"content":" * duke.Event class that extends task. Events should have a dead and time as well as a name","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"Bluntsord"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"Bluntsord"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"Bluntsord"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"Bluntsord"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"Bluntsord"},"content":"    private LocalDateTime dateTime;","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"Bluntsord"},"content":"    private static DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"Bluntsord"},"content":"     * Constructor for event class","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"Bluntsord"},"content":"     * @param name Name for the event","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"Bluntsord"},"content":"     * @param dateTime date the event is held","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"Bluntsord"},"content":"    public Event(String name, LocalDateTime dateTime) {","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"Bluntsord"},"content":"        super(name);","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"Bluntsord"},"content":"        this.dateTime \u003d dateTime;","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":24,"author":{"gitId":"Bluntsord"},"content":"     * String representation of the event class","lastModifiedDate":"2021-08-19"},{"lineNumber":25,"author":{"gitId":"Bluntsord"},"content":"     * @return String. See above.","lastModifiedDate":"2021-08-19"},{"lineNumber":26,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":27,"author":{"gitId":"Bluntsord"},"content":"    public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":28,"author":{"gitId":"Bluntsord"},"content":"        return \"[E]\" + super.toString() + \" \" + formatter.format(this.dateTime);","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":30,"author":{"gitId":"Bluntsord"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"Bluntsord":30}},{"path":"src/main/java/duke/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bluntsord"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"Bluntsord"},"content":"public class InvalidCommandException extends Exception {","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"Bluntsord"},"content":"     * Constructor for Invalid duke.Command Exception","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"Bluntsord"},"content":"    public InvalidCommandException() {","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"Bluntsord"},"content":"        super(\"Invalid command input. Please enter another input\");","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"Bluntsord"},"content":"     * Overloaded constructor for string inputs","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"Bluntsord"},"content":"     * @param errorMessage","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"Bluntsord"},"content":"    public InvalidCommandException(String errorMessage) {","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"Bluntsord"},"content":"        super(errorMessage);","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"Bluntsord"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"Bluntsord":19}},{"path":"src/main/java/duke/Logic.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bluntsord"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"Bluntsord"},"content":"import duke.*;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"Bluntsord"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"Bluntsord"},"content":"import static duke.Task.TaskType.*;","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"Bluntsord"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"Bluntsord"},"content":" * This is the logic layer where most of the commands are processed and errors are handled.","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"Bluntsord"},"content":" * Please refer to the structure of the diagram in the docs for more information","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"Bluntsord"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"Bluntsord"},"content":"public class Logic {","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":17,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"Bluntsord"},"content":"     * This is to check if any special command or empty command is given","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"Bluntsord"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"Bluntsord"},"content":"     * @param command refers to the parsed string. See presentation for parsing","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"Bluntsord"},"content":"     * @throws InvalidCommandException is throwed when there is an invalid command in the form of a string","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"Bluntsord"},"content":"    public static void checkIfSpecialComand(String command) throws InvalidCommandException {","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":25,"author":{"gitId":"Bluntsord"},"content":"        //duke.Logic to check each individual commands, checks for special commands first, then checks for other input","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"Bluntsord"},"content":"        //Use duke.Parser to package command into a packaged command","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"Bluntsord"},"content":"        Command packagedCommand \u003d Parser.parse(command);","lastModifiedDate":"2021-08-19"},{"lineNumber":28,"author":{"gitId":"Bluntsord"},"content":"        ArrayList\u003cString\u003e listOfCommandInputs \u003d packagedCommand.getListOfCommandInputs();","lastModifiedDate":"2021-08-19"},{"lineNumber":29,"author":{"gitId":"Bluntsord"},"content":"        String loggedCommand \u003d packagedCommand.getLog();","lastModifiedDate":"2021-08-19"},{"lineNumber":30,"author":{"gitId":"Bluntsord"},"content":"        if (command.equals(\"\")) {","lastModifiedDate":"2021-08-19"},{"lineNumber":31,"author":{"gitId":"Bluntsord"},"content":"            throw new EmptyCommandException();","lastModifiedDate":"2021-08-19"},{"lineNumber":32,"author":{"gitId":"Bluntsord"},"content":"        } else if (command.equals(\"bye\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"Bluntsord"},"content":"            Duke.stop();","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"Bluntsord"},"content":"            DataHandlerLayer.updateHistory();","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"Bluntsord"},"content":"            DataHandlerLayer.stopWriting();","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"Bluntsord"},"content":"        } else if (listOfCommandInputs.size() \u003d\u003d 1 \u0026\u0026 listOfCommandInputs.get(0).equals(\"list\")) {","lastModifiedDate":"2021-08-19"},{"lineNumber":37,"author":{"gitId":"Bluntsord"},"content":"            DataHandlerLayer.printLog();","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"Bluntsord"},"content":"        } else if (listOfCommandInputs.contains(\"delete\")) {","lastModifiedDate":"2021-08-19"},{"lineNumber":39,"author":{"gitId":"Bluntsord"},"content":"            int position \u003d Integer.parseInt(listOfCommandInputs.get(listOfCommandInputs.indexOf(\"delete\") + 1));","lastModifiedDate":"2021-08-19"},{"lineNumber":40,"author":{"gitId":"Bluntsord"},"content":"            try {","lastModifiedDate":"2021-08-19"},{"lineNumber":41,"author":{"gitId":"Bluntsord"},"content":"                DataHandlerLayer.delete(position);","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"Bluntsord"},"content":"            } catch (IndexOutOfBoundsException exception) {","lastModifiedDate":"2021-08-19"},{"lineNumber":43,"author":{"gitId":"Bluntsord"},"content":"                throw new InvalidCommandException();","lastModifiedDate":"2021-08-19"},{"lineNumber":44,"author":{"gitId":"Bluntsord"},"content":"            }","lastModifiedDate":"2021-08-19"},{"lineNumber":45,"author":{"gitId":"Bluntsord"},"content":"            DataHandlerLayer.updateHistory();","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"Bluntsord"},"content":"        } else if (listOfCommandInputs.contains(\"done\")) {","lastModifiedDate":"2021-08-19"},{"lineNumber":47,"author":{"gitId":"Bluntsord"},"content":"            int pos \u003d Integer.parseInt(listOfCommandInputs.get(1));","lastModifiedDate":"2021-08-19"},{"lineNumber":48,"author":{"gitId":"Bluntsord"},"content":"            if (pos \u003e Task.getNumberOfTask()) {","lastModifiedDate":"2021-08-18"},{"lineNumber":49,"author":{"gitId":"Bluntsord"},"content":"                throw new InvalidCommandException();","lastModifiedDate":"2021-08-18"},{"lineNumber":50,"author":{"gitId":"Bluntsord"},"content":"            }","lastModifiedDate":"2021-08-18"},{"lineNumber":51,"author":{"gitId":"Bluntsord"},"content":"            Task currentTask \u003d DataHandlerLayer.getTask(pos - 1);","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"Bluntsord"},"content":"            currentTask.completeTask();","lastModifiedDate":"2021-08-18"},{"lineNumber":53,"author":{"gitId":"Bluntsord"},"content":"            DataHandlerLayer.updateHistory();","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"Bluntsord"},"content":"            System.out.println(\"Ohhhh myyyy. I have been waiting for this quest to complete for ages.\");","lastModifiedDate":"2021-08-18"},{"lineNumber":55,"author":{"gitId":"Bluntsord"},"content":"        } else {","lastModifiedDate":"2021-08-18"},{"lineNumber":56,"author":{"gitId":"Bluntsord"},"content":"            processTask(packagedCommand, true);","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"Bluntsord"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"Bluntsord"},"content":"     * Loads in all the text history from previous times of running the bot","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"Bluntsord"},"content":"    public static void preload() {","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"Bluntsord"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"Bluntsord"},"content":"            ArrayList\u003cCommand\u003e commandArrayList \u003d DataHandlerLayer.loadPreset();","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"Bluntsord"},"content":"            for (Command command : commandArrayList) {","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"Bluntsord"},"content":"                processTask(command, false);","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"Bluntsord"},"content":"                System.out.println(\"preload\");","lastModifiedDate":"2021-08-26"},{"lineNumber":69,"author":{"gitId":"Bluntsord"},"content":"                System.out.println(command.getTaskType());","lastModifiedDate":"2021-08-26"},{"lineNumber":70,"author":{"gitId":"Bluntsord"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"Bluntsord"},"content":"        } catch (InvalidCommandException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"Bluntsord"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"Bluntsord"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":76,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":77,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":78,"author":{"gitId":"Bluntsord"},"content":"     * Process the tasks and pass it on to the data Handler layer for tasks","lastModifiedDate":"2021-08-25"},{"lineNumber":79,"author":{"gitId":"Bluntsord"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":80,"author":{"gitId":"Bluntsord"},"content":"     * @param packagedCommand    duke.Command that is parsed by the parser.","lastModifiedDate":"2021-08-26"},{"lineNumber":81,"author":{"gitId":"Bluntsord"},"content":"     * @param isWrittenToHistory boolean value if the command should be written to history.","lastModifiedDate":"2021-08-25"},{"lineNumber":82,"author":{"gitId":"Bluntsord"},"content":"     *                           most of the times this should be the case other than preload, since","lastModifiedDate":"2021-08-25"},{"lineNumber":83,"author":{"gitId":"Bluntsord"},"content":"     *                           writing to history would result in double occurence of tasks","lastModifiedDate":"2021-08-25"},{"lineNumber":84,"author":{"gitId":"Bluntsord"},"content":"     * @throws InvalidCommandException","lastModifiedDate":"2021-08-25"},{"lineNumber":85,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":86,"author":{"gitId":"Bluntsord"},"content":"    public static void processTask(Command packagedCommand, boolean isWrittenToHistory) throws InvalidCommandException {","lastModifiedDate":"2021-08-25"},{"lineNumber":87,"author":{"gitId":"Bluntsord"},"content":"        //duke.Logic to check each individual commands, checks for special commands first, then checks for other input","lastModifiedDate":"2021-08-26"},{"lineNumber":88,"author":{"gitId":"Bluntsord"},"content":"        //Use duke.Parser to package command into a packaged command","lastModifiedDate":"2021-08-26"},{"lineNumber":89,"author":{"gitId":"Bluntsord"},"content":"        ArrayList\u003cString\u003e listOfCommandInputs \u003d packagedCommand.getListOfCommandInputs();","lastModifiedDate":"2021-08-25"},{"lineNumber":90,"author":{"gitId":"Bluntsord"},"content":"        String loggedCommand \u003d packagedCommand.getLog();","lastModifiedDate":"2021-08-25"},{"lineNumber":91,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":92,"author":{"gitId":"Bluntsord"},"content":"        switch (packagedCommand.getTaskType()) {","lastModifiedDate":"2021-08-19"},{"lineNumber":93,"author":{"gitId":"Bluntsord"},"content":"        case TODO:","lastModifiedDate":"2021-08-19"},{"lineNumber":94,"author":{"gitId":"Bluntsord"},"content":"            Todo tempTodo \u003d new Todo(loggedCommand);","lastModifiedDate":"2021-08-25"},{"lineNumber":95,"author":{"gitId":"Bluntsord"},"content":"            DataHandlerLayer.addToLog(tempTodo);","lastModifiedDate":"2021-08-25"},{"lineNumber":96,"author":{"gitId":"Bluntsord"},"content":"            if (isWrittenToHistory) {","lastModifiedDate":"2021-08-25"},{"lineNumber":97,"author":{"gitId":"Bluntsord"},"content":"                DataHandlerLayer.appendToHistory(tempTodo);","lastModifiedDate":"2021-08-25"},{"lineNumber":98,"author":{"gitId":"Bluntsord"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":99,"author":{"gitId":"Bluntsord"},"content":"            break;","lastModifiedDate":"2021-08-19"},{"lineNumber":100,"author":{"gitId":"Bluntsord"},"content":"        case DEADLINE:","lastModifiedDate":"2021-08-19"},{"lineNumber":101,"author":{"gitId":"Bluntsord"},"content":"            int indicatorDeadline \u003d listOfCommandInputs.indexOf(\"/by\");","lastModifiedDate":"2021-08-19"},{"lineNumber":102,"author":{"gitId":"Bluntsord"},"content":"            String tempDeadlineString \u003d new String();","lastModifiedDate":"2021-08-25"},{"lineNumber":103,"author":{"gitId":"Bluntsord"},"content":"            String deadlineDate \u003d listOfCommandInputs.get(indicatorDeadline + 1);","lastModifiedDate":"2021-08-26"},{"lineNumber":104,"author":{"gitId":"Bluntsord"},"content":"            String deadlineTime \u003d listOfCommandInputs.get(indicatorDeadline + 2);","lastModifiedDate":"2021-08-26"},{"lineNumber":105,"author":{"gitId":"Bluntsord"},"content":"            String deadlineDateTime \u003d deadlineDate + \" \" + deadlineTime;","lastModifiedDate":"2021-08-26"},{"lineNumber":106,"author":{"gitId":"Bluntsord"},"content":"            for (int i \u003d 0; i \u003c indicatorDeadline; i++) {","lastModifiedDate":"2021-08-19"},{"lineNumber":107,"author":{"gitId":"Bluntsord"},"content":"                tempDeadlineString \u003d tempDeadlineString + listOfCommandInputs.get(i);","lastModifiedDate":"2021-08-25"},{"lineNumber":108,"author":{"gitId":"Bluntsord"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":109,"author":{"gitId":"Bluntsord"},"content":"            Deadline tempDeadLine \u003d new Deadline(tempDeadlineString, Parser.convertToDateTime(deadlineDateTime));","lastModifiedDate":"2021-08-26"},{"lineNumber":110,"author":{"gitId":"Bluntsord"},"content":"            DataHandlerLayer.addToLog(tempDeadLine);","lastModifiedDate":"2021-08-26"},{"lineNumber":111,"author":{"gitId":"Bluntsord"},"content":"            if (isWrittenToHistory) {","lastModifiedDate":"2021-08-25"},{"lineNumber":112,"author":{"gitId":"Bluntsord"},"content":"                DataHandlerLayer.appendToHistory(tempDeadLine);","lastModifiedDate":"2021-08-25"},{"lineNumber":113,"author":{"gitId":"Bluntsord"},"content":"            }","lastModifiedDate":"2021-08-19"},{"lineNumber":114,"author":{"gitId":"Bluntsord"},"content":"            break;","lastModifiedDate":"2021-08-19"},{"lineNumber":115,"author":{"gitId":"Bluntsord"},"content":"        case EVENT:","lastModifiedDate":"2021-08-19"},{"lineNumber":116,"author":{"gitId":"Bluntsord"},"content":"            int indicatorEvent \u003d listOfCommandInputs.indexOf(\"/at\");","lastModifiedDate":"2021-08-19"},{"lineNumber":117,"author":{"gitId":"Bluntsord"},"content":"            String date \u003d listOfCommandInputs.get(indicatorEvent + 1);","lastModifiedDate":"2021-08-19"},{"lineNumber":118,"author":{"gitId":"Bluntsord"},"content":"            String time \u003d listOfCommandInputs.get(indicatorEvent + 2);","lastModifiedDate":"2021-08-19"},{"lineNumber":119,"author":{"gitId":"Bluntsord"},"content":"            String dateTime \u003d date + \" \" + time;","lastModifiedDate":"2021-08-26"},{"lineNumber":120,"author":{"gitId":"Bluntsord"},"content":"            String temp \u003d new String();","lastModifiedDate":"2021-08-19"},{"lineNumber":121,"author":{"gitId":"Bluntsord"},"content":"            for (int i \u003d 0; i \u003c indicatorEvent; i++) {","lastModifiedDate":"2021-08-19"},{"lineNumber":122,"author":{"gitId":"Bluntsord"},"content":"                temp \u003d temp + listOfCommandInputs.get(i);","lastModifiedDate":"2021-08-19"},{"lineNumber":123,"author":{"gitId":"Bluntsord"},"content":"            }","lastModifiedDate":"2021-08-19"},{"lineNumber":124,"author":{"gitId":"Bluntsord"},"content":"            System.out.println(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2021-08-26"},{"lineNumber":125,"author":{"gitId":"Bluntsord"},"content":"            System.out.println(dateTime);","lastModifiedDate":"2021-08-26"},{"lineNumber":126,"author":{"gitId":"Bluntsord"},"content":"            System.out.println(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2021-08-26"},{"lineNumber":127,"author":{"gitId":"Bluntsord"},"content":"            Event tempEvent \u003d new Event(temp, Parser.convertToDateTime(dateTime));","lastModifiedDate":"2021-08-26"},{"lineNumber":128,"author":{"gitId":"Bluntsord"},"content":"            DataHandlerLayer.addToLog(tempEvent);","lastModifiedDate":"2021-08-25"},{"lineNumber":129,"author":{"gitId":"Bluntsord"},"content":"            if (isWrittenToHistory) {","lastModifiedDate":"2021-08-25"},{"lineNumber":130,"author":{"gitId":"Bluntsord"},"content":"                DataHandlerLayer.appendToHistory(tempEvent);","lastModifiedDate":"2021-08-25"},{"lineNumber":131,"author":{"gitId":"Bluntsord"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":132,"author":{"gitId":"Bluntsord"},"content":"            break;","lastModifiedDate":"2021-08-19"},{"lineNumber":133,"author":{"gitId":"Bluntsord"},"content":"        case NOTAPPLICABLE:","lastModifiedDate":"2021-08-19"},{"lineNumber":134,"author":{"gitId":"Bluntsord"},"content":"            //For echoing commands","lastModifiedDate":"2021-08-19"},{"lineNumber":135,"author":{"gitId":"Bluntsord"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":136,"author":{"gitId":"Bluntsord"},"content":"        DataHandlerLayer.updateHistory();","lastModifiedDate":"2021-08-26"},{"lineNumber":137,"author":{"gitId":"Bluntsord"},"content":"        DataHandlerLayer.printHistory();","lastModifiedDate":"2021-08-26"},{"lineNumber":138,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":139,"author":{"gitId":"Bluntsord"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"Bluntsord":139}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bluntsord"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"Bluntsord"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"Bluntsord"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"Bluntsord"},"content":"import java.util.*;","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"Bluntsord"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"Bluntsord"},"content":" * duke.Parser that handles all the string manipulation. The users input is taken in as a string and passed to parser","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"Bluntsord"},"content":" * for packaging into a command.","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"Bluntsord"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"Bluntsord"},"content":"public class Parser {","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"Bluntsord"},"content":"     * Function that handles all the parsing of the duke.Parser system","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"Bluntsord"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"Bluntsord"},"content":"     * @param command Refers to the entire line of strings the user entered. The line is then process here","lastModifiedDate":"2021-08-19"},{"lineNumber":17,"author":{"gitId":"Bluntsord"},"content":"     *                and packaged into duke.Command. See duke.Command for more.","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"Bluntsord"},"content":"     * @return A packaged command for ease of access of infomation","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":20,"author":{"gitId":"Bluntsord"},"content":"    public static Command parse(String command) throws InvalidCommandException {","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"Bluntsord"},"content":"        //Remove TaskType from the command first","lastModifiedDate":"2021-08-19"},{"lineNumber":22,"author":{"gitId":"Bluntsord"},"content":"        Task.TaskType taskType \u003d Task.TaskType.NOTAPPLICABLE;","lastModifiedDate":"2021-08-19"},{"lineNumber":23,"author":{"gitId":"Bluntsord"},"content":"        String stringTaskType \u003d new String();","lastModifiedDate":"2021-08-19"},{"lineNumber":24,"author":{"gitId":"Bluntsord"},"content":"        if (command.contains(\"todo \")) {","lastModifiedDate":"2021-08-19"},{"lineNumber":25,"author":{"gitId":"Bluntsord"},"content":"            taskType \u003d Task.TaskType.TODO;","lastModifiedDate":"2021-08-19"},{"lineNumber":26,"author":{"gitId":"Bluntsord"},"content":"            stringTaskType \u003d \"todo\";","lastModifiedDate":"2021-08-19"},{"lineNumber":27,"author":{"gitId":"Bluntsord"},"content":"        } else if (command.contains(\"deadline \")) {","lastModifiedDate":"2021-08-19"},{"lineNumber":28,"author":{"gitId":"Bluntsord"},"content":"            taskType \u003d Task.TaskType.DEADLINE;","lastModifiedDate":"2021-08-19"},{"lineNumber":29,"author":{"gitId":"Bluntsord"},"content":"            stringTaskType \u003d \"deadline \";","lastModifiedDate":"2021-08-19"},{"lineNumber":30,"author":{"gitId":"Bluntsord"},"content":"        } else if (command.contains(\"event\")) {","lastModifiedDate":"2021-08-19"},{"lineNumber":31,"author":{"gitId":"Bluntsord"},"content":"            taskType \u003d Task.TaskType.EVENT;","lastModifiedDate":"2021-08-19"},{"lineNumber":32,"author":{"gitId":"Bluntsord"},"content":"            stringTaskType \u003d \"event\";","lastModifiedDate":"2021-08-19"},{"lineNumber":33,"author":{"gitId":"Bluntsord"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":34,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":35,"author":{"gitId":"Bluntsord"},"content":"        //command \u003d command.replaceAll(stringTaskType, \"\");","lastModifiedDate":"2021-08-19"},{"lineNumber":36,"author":{"gitId":"Bluntsord"},"content":"        //Split the list of commands","lastModifiedDate":"2021-08-19"},{"lineNumber":37,"author":{"gitId":"Bluntsord"},"content":"        Command packagedCommand;","lastModifiedDate":"2021-08-19"},{"lineNumber":38,"author":{"gitId":"Bluntsord"},"content":"        ArrayList\u003cString\u003e listOfCommandInputs \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-19"},{"lineNumber":39,"author":{"gitId":"Bluntsord"},"content":"        Collections.addAll(listOfCommandInputs, command.split(\" \"));","lastModifiedDate":"2021-08-19"},{"lineNumber":40,"author":{"gitId":"Bluntsord"},"content":"        if (listOfCommandInputs.contains(stringTaskType)) {","lastModifiedDate":"2021-08-19"},{"lineNumber":41,"author":{"gitId":"Bluntsord"},"content":"            int redundantIndicator \u003d listOfCommandInputs.indexOf(stringTaskType);","lastModifiedDate":"2021-08-19"},{"lineNumber":42,"author":{"gitId":"Bluntsord"},"content":"            for (int i \u003d 0; i \u003c\u003d redundantIndicator; i++) {","lastModifiedDate":"2021-08-19"},{"lineNumber":43,"author":{"gitId":"Bluntsord"},"content":"                listOfCommandInputs.remove(0);","lastModifiedDate":"2021-08-19"},{"lineNumber":44,"author":{"gitId":"Bluntsord"},"content":"            }","lastModifiedDate":"2021-08-19"},{"lineNumber":45,"author":{"gitId":"Bluntsord"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":46,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":47,"author":{"gitId":"Bluntsord"},"content":"        String tempCommand \u003d new String();","lastModifiedDate":"2021-08-19"},{"lineNumber":48,"author":{"gitId":"Bluntsord"},"content":"        for (String commandsLeft : listOfCommandInputs) {","lastModifiedDate":"2021-08-19"},{"lineNumber":49,"author":{"gitId":"Bluntsord"},"content":"            commandsLeft +\u003d \" \";","lastModifiedDate":"2021-08-19"},{"lineNumber":50,"author":{"gitId":"Bluntsord"},"content":"            tempCommand +\u003d commandsLeft;","lastModifiedDate":"2021-08-19"},{"lineNumber":51,"author":{"gitId":"Bluntsord"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":52,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":53,"author":{"gitId":"Bluntsord"},"content":"        packagedCommand \u003d new Command(taskType, listOfCommandInputs, tempCommand);","lastModifiedDate":"2021-08-19"},{"lineNumber":54,"author":{"gitId":"Bluntsord"},"content":"        return packagedCommand;","lastModifiedDate":"2021-08-19"},{"lineNumber":55,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":56,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"Bluntsord"},"content":"    public static ArrayList\u003cCommand\u003e parsePreloadedTasks(ArrayList\u003cString\u003e previousHistory) throws InvalidCommandException {","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"Bluntsord"},"content":"        int eventTypeIndex \u003d 1;","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"Bluntsord"},"content":"        int isCompletedIndex \u003d 4;","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"Bluntsord"},"content":"        ArrayList\u003cCommand\u003e preloadedList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"Bluntsord"},"content":"        for (String line : previousHistory) {","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"Bluntsord"},"content":"            String[] temp_packaged_history \u003d line.split(\" \");","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"Bluntsord"},"content":"            ArrayList\u003cString\u003e packaged_history \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"Bluntsord"},"content":"            Collections.addAll(packaged_history, temp_packaged_history);","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"Bluntsord"},"content":"            Task.TaskType eventType \u003d Task.TaskType.NOTAPPLICABLE;","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"Bluntsord"},"content":"            char temp \u003d packaged_history.get(0).charAt(eventTypeIndex);","lastModifiedDate":"2021-08-26"},{"lineNumber":69,"author":{"gitId":"Bluntsord"},"content":"            System.out.println(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2021-08-26"},{"lineNumber":70,"author":{"gitId":"Bluntsord"},"content":"            System.out.println(temp);","lastModifiedDate":"2021-08-26"},{"lineNumber":71,"author":{"gitId":"Bluntsord"},"content":"            System.out.println(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2021-08-26"},{"lineNumber":72,"author":{"gitId":"Bluntsord"},"content":"            switch (packaged_history.get(0).charAt(eventTypeIndex)) {","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"Bluntsord"},"content":"            case \u0027T\u0027:","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"Bluntsord"},"content":"                eventType \u003d Task.TaskType.TODO;","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"Bluntsord"},"content":"                break;","lastModifiedDate":"2021-08-25"},{"lineNumber":76,"author":{"gitId":"Bluntsord"},"content":"            case \u0027E\u0027:","lastModifiedDate":"2021-08-25"},{"lineNumber":77,"author":{"gitId":"Bluntsord"},"content":"                eventType \u003d Task.TaskType.EVENT;","lastModifiedDate":"2021-08-25"},{"lineNumber":78,"author":{"gitId":"Bluntsord"},"content":"                packaged_history.remove(\"event\");","lastModifiedDate":"2021-08-26"},{"lineNumber":79,"author":{"gitId":"Bluntsord"},"content":"                break;","lastModifiedDate":"2021-08-25"},{"lineNumber":80,"author":{"gitId":"Bluntsord"},"content":"            case \u0027D\u0027:","lastModifiedDate":"2021-08-25"},{"lineNumber":81,"author":{"gitId":"Bluntsord"},"content":"                eventType \u003d Task.TaskType.DEADLINE;","lastModifiedDate":"2021-08-25"},{"lineNumber":82,"author":{"gitId":"Bluntsord"},"content":"                packaged_history.remove(\"deadline\");","lastModifiedDate":"2021-08-26"},{"lineNumber":83,"author":{"gitId":"Bluntsord"},"content":"                break;","lastModifiedDate":"2021-08-26"},{"lineNumber":84,"author":{"gitId":"Bluntsord"},"content":"            case \u0027N\u0027:","lastModifiedDate":"2021-08-25"},{"lineNumber":85,"author":{"gitId":"Bluntsord"},"content":"                eventType \u003d Task.TaskType.NOTAPPLICABLE;","lastModifiedDate":"2021-08-25"},{"lineNumber":86,"author":{"gitId":"Bluntsord"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":87,"author":{"gitId":"Bluntsord"},"content":"            packaged_history.remove(0);","lastModifiedDate":"2021-08-25"},{"lineNumber":88,"author":{"gitId":"Bluntsord"},"content":"            System.out.println(eventType);","lastModifiedDate":"2021-08-26"},{"lineNumber":89,"author":{"gitId":"Bluntsord"},"content":"            Command command \u003d new Command(eventType, packaged_history, String.join(\" \", packaged_history));","lastModifiedDate":"2021-08-25"},{"lineNumber":90,"author":{"gitId":"Bluntsord"},"content":"            preloadedList.add(command);","lastModifiedDate":"2021-08-25"},{"lineNumber":91,"author":{"gitId":"Bluntsord"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":92,"author":{"gitId":"Bluntsord"},"content":"        return preloadedList;","lastModifiedDate":"2021-08-25"},{"lineNumber":93,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":94,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":95,"author":{"gitId":"Bluntsord"},"content":"    public static LocalDateTime convertToDateTime(String datetimeString) throws InvalidCommandException {","lastModifiedDate":"2021-08-26"},{"lineNumber":96,"author":{"gitId":"Bluntsord"},"content":"        try {","lastModifiedDate":"2021-08-26"},{"lineNumber":97,"author":{"gitId":"Bluntsord"},"content":"            System.out.println(datetimeString);","lastModifiedDate":"2021-08-26"},{"lineNumber":98,"author":{"gitId":"Bluntsord"},"content":"            String[] temp \u003d datetimeString.split(\" \");","lastModifiedDate":"2021-08-26"},{"lineNumber":99,"author":{"gitId":"Bluntsord"},"content":"            String[] date \u003d temp[0].split(\"/\");","lastModifiedDate":"2021-08-26"},{"lineNumber":100,"author":{"gitId":"Bluntsord"},"content":"            String[] time \u003d temp[1].split(\":\");","lastModifiedDate":"2021-08-26"},{"lineNumber":101,"author":{"gitId":"Bluntsord"},"content":"            DateTimeFormatter formatter;","lastModifiedDate":"2021-08-26"},{"lineNumber":102,"author":{"gitId":"Bluntsord"},"content":"            if (date[0].length() \u003d\u003d 2) {","lastModifiedDate":"2021-08-26"},{"lineNumber":103,"author":{"gitId":"Bluntsord"},"content":"                formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");","lastModifiedDate":"2021-08-26"},{"lineNumber":104,"author":{"gitId":"Bluntsord"},"content":"            } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":105,"author":{"gitId":"Bluntsord"},"content":"                formatter \u003d DateTimeFormatter.ofPattern(\"yyyy/MM/dd HH:mm\");","lastModifiedDate":"2021-08-26"},{"lineNumber":106,"author":{"gitId":"Bluntsord"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":107,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":108,"author":{"gitId":"Bluntsord"},"content":"            int year \u003d Integer.parseInt(date[2]);","lastModifiedDate":"2021-08-26"},{"lineNumber":109,"author":{"gitId":"Bluntsord"},"content":"            int month \u003d Integer.parseInt(date[1]);","lastModifiedDate":"2021-08-26"},{"lineNumber":110,"author":{"gitId":"Bluntsord"},"content":"            int day \u003d Integer.parseInt(date[0]);","lastModifiedDate":"2021-08-26"},{"lineNumber":111,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":112,"author":{"gitId":"Bluntsord"},"content":"            return LocalDateTime.parse(datetimeString, formatter);","lastModifiedDate":"2021-08-26"},{"lineNumber":113,"author":{"gitId":"Bluntsord"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-26"},{"lineNumber":114,"author":{"gitId":"Bluntsord"},"content":"            throw new InvalidCommandException();","lastModifiedDate":"2021-08-26"},{"lineNumber":115,"author":{"gitId":"Bluntsord"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":116,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":117,"author":{"gitId":"Bluntsord"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"Bluntsord":117}},{"path":"src/main/java/duke/PersistentStorageHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bluntsord"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"Bluntsord"},"content":"import java.io.*;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"Bluntsord"},"content":"import java.nio.charset.Charset;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"Bluntsord"},"content":"import java.nio.file.Files;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"Bluntsord"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"Bluntsord"},"content":"import java.util.List;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"Bluntsord"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"Bluntsord"},"content":" * Persistent storage refers to the database used to store all the information regarding tasks. Allows for handling of","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"Bluntsord"},"content":" * .txt files and manages all of them","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"Bluntsord"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"Bluntsord"},"content":"public class PersistentStorageHandler {","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"Bluntsord"},"content":"    private File file;","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"Bluntsord"},"content":"    private String fileName;","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"Bluntsord"},"content":"    private BufferedReader bufferedReader;","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"Bluntsord"},"content":"    private BufferedWriter bufferedWriter;","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"Bluntsord"},"content":"    private int numberOfLines \u003d 0;","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"Bluntsord"},"content":"    private int maxNumberOfLines \u003d 10;","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"Bluntsord"},"content":"    private boolean hasStorageTextFile \u003d false;","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"Bluntsord"},"content":"    private ArrayList\u003cString\u003e all_lines \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"Bluntsord"},"content":"    public PersistentStorageHandler(String fileName) {","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"Bluntsord"},"content":"        //Name the file","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"Bluntsord"},"content":"        this.fileName \u003d fileName;","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"Bluntsord"},"content":"        this.file \u003d new File(fileName);","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"Bluntsord"},"content":"        // Create the writer and buffered writer","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"Bluntsord"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"Bluntsord"},"content":"            FileWriter writer \u003d new FileWriter(fileName,true);","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"Bluntsord"},"content":"            this.bufferedWriter \u003d new BufferedWriter(writer);","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"Bluntsord"},"content":"            this.bufferedReader \u003d new BufferedReader(new FileReader(fileName));","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"Bluntsord"},"content":"            this.hasStorageTextFile \u003d true;","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"Bluntsord"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"Bluntsord"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"Bluntsord"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"Bluntsord"},"content":"        //Check if file exist. If not create a new file","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"Bluntsord"},"content":"        if (!hasStorageTextFile) {","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"Bluntsord"},"content":"            System.out.println(\"Oooooooooooooo. Fresh meat. Welcome my dinn- I mean friend\");","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"Bluntsord"},"content":"            //Create a storage text file with the same name","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"Bluntsord"},"content":"            try {","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"Bluntsord"},"content":"                file.createNewFile();","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"Bluntsord"},"content":"            } catch (IOException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"Bluntsord"},"content":"                e.printStackTrace();","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"Bluntsord"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"Bluntsord"},"content":"        } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"Bluntsord"},"content":"            System.out.println(\"Ahhhhhh. It seems you have an old scroll. Let me read the contents......\");","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"Bluntsord"},"content":"            //Add all lines of the file to all_lines variable","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"Bluntsord"},"content":"            try {","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"Bluntsord"},"content":"                List\u003cString\u003e list \u003d Files.readAllLines(new File(fileName).toPath(), Charset.defaultCharset());","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"Bluntsord"},"content":"                all_lines.addAll(list);","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"Bluntsord"},"content":"            } catch (IOException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"Bluntsord"},"content":"                e.printStackTrace();","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"Bluntsord"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"Bluntsord"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"Bluntsord"},"content":"    public void write(String text)  {","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"Bluntsord"},"content":"        //Count the number of lines in the string","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"Bluntsord"},"content":"        String[] tempStringArray \u003d text.split(\"\\r\\n|\\r|\\n\");","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"Bluntsord"},"content":"        int linesInAddedText \u003d tempStringArray.length;","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"Bluntsord"},"content":"        // Writes the content to the file","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"Bluntsord"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"Bluntsord"},"content":"            this.bufferedWriter.write(text + \"\\n\");","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"Bluntsord"},"content":"            this.bufferedWriter.flush();","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"Bluntsord"},"content":"            //this.bufferedWriter.close();","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"Bluntsord"},"content":"        } catch (NullPointerException | IOException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"Bluntsord"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"Bluntsord"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"Bluntsord"},"content":"        //Add the number of lines","lastModifiedDate":"2021-08-25"},{"lineNumber":76,"author":{"gitId":"Bluntsord"},"content":"        numberOfLines +\u003d linesInAddedText;","lastModifiedDate":"2021-08-25"},{"lineNumber":77,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":78,"author":{"gitId":"Bluntsord"},"content":"        //Accumulate all lines","lastModifiedDate":"2021-08-25"},{"lineNumber":79,"author":{"gitId":"Bluntsord"},"content":"        all_lines.add(text);","lastModifiedDate":"2021-08-25"},{"lineNumber":80,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":81,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":82,"author":{"gitId":"Bluntsord"},"content":"    public void printAllLines() {","lastModifiedDate":"2021-08-25"},{"lineNumber":83,"author":{"gitId":"Bluntsord"},"content":"        for (String line: all_lines) {","lastModifiedDate":"2021-08-25"},{"lineNumber":84,"author":{"gitId":"Bluntsord"},"content":"            System.out.println(line);","lastModifiedDate":"2021-08-25"},{"lineNumber":85,"author":{"gitId":"Bluntsord"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":86,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":87,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":88,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":89,"author":{"gitId":"Bluntsord"},"content":"     * Clears the entire history of the log","lastModifiedDate":"2021-08-25"},{"lineNumber":90,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":91,"author":{"gitId":"Bluntsord"},"content":"    //I see what youre doing yes. Why are you clearing history?","lastModifiedDate":"2021-08-25"},{"lineNumber":92,"author":{"gitId":"Bluntsord"},"content":"    public void clear_history() {","lastModifiedDate":"2021-08-25"},{"lineNumber":93,"author":{"gitId":"Bluntsord"},"content":"        //Code to clear history","lastModifiedDate":"2021-08-25"},{"lineNumber":94,"author":{"gitId":"Bluntsord"},"content":"        this.all_lines.clear();","lastModifiedDate":"2021-08-25"},{"lineNumber":95,"author":{"gitId":"Bluntsord"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":96,"author":{"gitId":"Bluntsord"},"content":"            FileWriter fileWriter \u003d new FileWriter(fileName);","lastModifiedDate":"2021-08-25"},{"lineNumber":97,"author":{"gitId":"Bluntsord"},"content":"            fileWriter.write(\"\");","lastModifiedDate":"2021-08-25"},{"lineNumber":98,"author":{"gitId":"Bluntsord"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":99,"author":{"gitId":"Bluntsord"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-25"},{"lineNumber":100,"author":{"gitId":"Bluntsord"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":101,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":102,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":103,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":104,"author":{"gitId":"Bluntsord"},"content":"    public void stopWriting() {","lastModifiedDate":"2021-08-25"},{"lineNumber":105,"author":{"gitId":"Bluntsord"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":106,"author":{"gitId":"Bluntsord"},"content":"            this.bufferedWriter.close();","lastModifiedDate":"2021-08-25"},{"lineNumber":107,"author":{"gitId":"Bluntsord"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":108,"author":{"gitId":"Bluntsord"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-25"},{"lineNumber":109,"author":{"gitId":"Bluntsord"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":110,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":111,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":112,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":113,"author":{"gitId":"Bluntsord"},"content":"    public ArrayList\u003cString\u003e getAll_lines() {","lastModifiedDate":"2021-08-25"},{"lineNumber":114,"author":{"gitId":"Bluntsord"},"content":"        return this.all_lines;","lastModifiedDate":"2021-08-25"},{"lineNumber":115,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":116,"author":{"gitId":"Bluntsord"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"Bluntsord":116}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bluntsord"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"Bluntsord"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"Bluntsord"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"Bluntsord"},"content":" * duke.Task that can be completed. Falls under three main cats, duke.Event, duke.Todo and deadline.","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"Bluntsord"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"Bluntsord"},"content":"public class Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"Bluntsord"},"content":"    private boolean completedStatus \u003d false;","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"Bluntsord"},"content":"    private String name;","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"Bluntsord"},"content":"    private int taskNumber;","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"Bluntsord"},"content":"    private static int numberOfTask \u003d 0;","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"Bluntsord"},"content":"     * duke.Task type enum","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":17,"author":{"gitId":"Bluntsord"},"content":"    public enum TaskType {","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"Bluntsord"},"content":"        TODO,","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"Bluntsord"},"content":"        DEADLINE,","lastModifiedDate":"2021-08-19"},{"lineNumber":20,"author":{"gitId":"Bluntsord"},"content":"        EVENT,","lastModifiedDate":"2021-08-19"},{"lineNumber":21,"author":{"gitId":"Bluntsord"},"content":"        NOTAPPLICABLE","lastModifiedDate":"2021-08-19"},{"lineNumber":22,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":23,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":24,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":25,"author":{"gitId":"Bluntsord"},"content":"     * Constructor for task type","lastModifiedDate":"2021-08-19"},{"lineNumber":26,"author":{"gitId":"Bluntsord"},"content":"     * @param name name of task","lastModifiedDate":"2021-08-19"},{"lineNumber":27,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":28,"author":{"gitId":"Bluntsord"},"content":"    public Task(String name) {","lastModifiedDate":"2021-08-18"},{"lineNumber":29,"author":{"gitId":"Bluntsord"},"content":"        this.name \u003d name;","lastModifiedDate":"2021-08-18"},{"lineNumber":30,"author":{"gitId":"Bluntsord"},"content":"        numberOfTask +\u003d 1;","lastModifiedDate":"2021-08-18"},{"lineNumber":31,"author":{"gitId":"Bluntsord"},"content":"        this.taskNumber \u003d numberOfTask;","lastModifiedDate":"2021-08-18"},{"lineNumber":32,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":33,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":34,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":35,"author":{"gitId":"Bluntsord"},"content":"     *  Function used to make a task complete","lastModifiedDate":"2021-08-19"},{"lineNumber":36,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":37,"author":{"gitId":"Bluntsord"},"content":"    public void completeTask() {","lastModifiedDate":"2021-08-18"},{"lineNumber":38,"author":{"gitId":"Bluntsord"},"content":"        this.completedStatus \u003d true;","lastModifiedDate":"2021-08-18"},{"lineNumber":39,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":40,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":41,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":42,"author":{"gitId":"Bluntsord"},"content":"     * String representation of task.","lastModifiedDate":"2021-08-19"},{"lineNumber":43,"author":{"gitId":"Bluntsord"},"content":"     * @return String. See above","lastModifiedDate":"2021-08-19"},{"lineNumber":44,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":45,"author":{"gitId":"Bluntsord"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":46,"author":{"gitId":"Bluntsord"},"content":"        String status;","lastModifiedDate":"2021-08-18"},{"lineNumber":47,"author":{"gitId":"Bluntsord"},"content":"        if (completedStatus) {","lastModifiedDate":"2021-08-18"},{"lineNumber":48,"author":{"gitId":"Bluntsord"},"content":"            status \u003d \"[✓] \";","lastModifiedDate":"2021-08-18"},{"lineNumber":49,"author":{"gitId":"Bluntsord"},"content":"        } else {","lastModifiedDate":"2021-08-18"},{"lineNumber":50,"author":{"gitId":"Bluntsord"},"content":"            status \u003d \"[X] \";","lastModifiedDate":"2021-08-18"},{"lineNumber":51,"author":{"gitId":"Bluntsord"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":52,"author":{"gitId":"Bluntsord"},"content":"       return status + name;","lastModifiedDate":"2021-08-18"},{"lineNumber":53,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":54,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":55,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":56,"author":{"gitId":"Bluntsord"},"content":"     * Getter for the completion status of a task","lastModifiedDate":"2021-08-19"},{"lineNumber":57,"author":{"gitId":"Bluntsord"},"content":"     * @return","lastModifiedDate":"2021-08-19"},{"lineNumber":58,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":59,"author":{"gitId":"Bluntsord"},"content":"    public boolean getCompletedStatus() {","lastModifiedDate":"2021-08-18"},{"lineNumber":60,"author":{"gitId":"Bluntsord"},"content":"        return this.completedStatus;","lastModifiedDate":"2021-08-18"},{"lineNumber":61,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":62,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":63,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":64,"author":{"gitId":"Bluntsord"},"content":"     * Getter for the total number of task","lastModifiedDate":"2021-08-19"},{"lineNumber":65,"author":{"gitId":"Bluntsord"},"content":"     * @return","lastModifiedDate":"2021-08-19"},{"lineNumber":66,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":67,"author":{"gitId":"Bluntsord"},"content":"    public static int getNumberOfTask() {","lastModifiedDate":"2021-08-18"},{"lineNumber":68,"author":{"gitId":"Bluntsord"},"content":"        return numberOfTask;","lastModifiedDate":"2021-08-18"},{"lineNumber":69,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":70,"author":{"gitId":"Bluntsord"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"Bluntsord":70}},{"path":"src/main/java/duke/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bluntsord"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"Bluntsord"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"Bluntsord"},"content":"     * Constructor for todo class","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"Bluntsord"},"content":"     * @param name","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"Bluntsord"},"content":"    public Todo(String name) {","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"Bluntsord"},"content":"        super(name);","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"Bluntsord"},"content":"     * String representation of the todo class","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"Bluntsord"},"content":"     * @return String. See above.","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":17,"author":{"gitId":"Bluntsord"},"content":"    public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"Bluntsord"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":20,"author":{"gitId":"Bluntsord"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"Bluntsord":20}},{"path":"src/main/java/duke/UI.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bluntsord"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"Bluntsord"},"content":"import java.io.BufferedInputStream;","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"Bluntsord"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"Bluntsord"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"Bluntsord"},"content":"import java.io.InputStreamReader;","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"Bluntsord"},"content":"public class UI {","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"Bluntsord"},"content":"    private static BufferedReader reader \u003d new BufferedReader(new InputStreamReader(System.in));","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"Bluntsord"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"Bluntsord"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"Bluntsord"},"content":"     * Used to scan and parse the commands entered by the user","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"Bluntsord"},"content":"     * @return the command as one string","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"Bluntsord"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"Bluntsord"},"content":"    public static String scan() {","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"Bluntsord"},"content":"        String command \u003d new String();","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"Bluntsord"},"content":"        try {","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"Bluntsord"},"content":"            command \u003d reader.readLine();","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"Bluntsord"},"content":"        } catch (IOException exception) {","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"Bluntsord"},"content":"            exception.printStackTrace();","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"Bluntsord"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"Bluntsord"},"content":"        return command;","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"Bluntsord"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":24,"author":{"gitId":"Bluntsord"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"Bluntsord":24}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Bluntsord"},"content":"add todo one","lastModifiedDate":"2021-08-19"},{"lineNumber":2,"author":{"gitId":"Bluntsord"},"content":"add todo two","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"Bluntsord"},"content":"add todo three","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"Bluntsord"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"Bluntsord"},"content":"done 1","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"Bluntsord"},"content":"done 2","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"Bluntsord"},"content":"done 3","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"Bluntsord"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"Bluntsord"},"content":"deadline one /by Sunday","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"Bluntsord"},"content":"deadline two /by Monday","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"Bluntsord"},"content":"deadline three /by Tuesday","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"Bluntsord"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"Bluntsord"},"content":"done 4","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"Bluntsord"},"content":"done 5","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"Bluntsord"},"content":"done 6","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"Bluntsord"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":17,"author":{"gitId":"Bluntsord"},"content":"event one /at Mon 2-4pm","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"Bluntsord"},"content":"event two /at Tues 2-4pm","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"Bluntsord"},"content":"event three /at Wed 2-4pm","lastModifiedDate":"2021-08-19"},{"lineNumber":20,"author":{"gitId":"Bluntsord"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":21,"author":{"gitId":"Bluntsord"},"content":"done 7","lastModifiedDate":"2021-08-19"},{"lineNumber":22,"author":{"gitId":"Bluntsord"},"content":"done 8","lastModifiedDate":"2021-08-19"},{"lineNumber":23,"author":{"gitId":"Bluntsord"},"content":"done 9","lastModifiedDate":"2021-08-19"},{"lineNumber":24,"author":{"gitId":"Bluntsord"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":25,"author":{"gitId":"Bluntsord"},"content":"delete 10","lastModifiedDate":"2021-08-19"},{"lineNumber":26,"author":{"gitId":"Bluntsord"},"content":"delete 9","lastModifiedDate":"2021-08-19"},{"lineNumber":27,"author":{"gitId":"Bluntsord"},"content":"delete 8","lastModifiedDate":"2021-08-19"},{"lineNumber":28,"author":{"gitId":"Bluntsord"},"content":"delete 7","lastModifiedDate":"2021-08-19"},{"lineNumber":29,"author":{"gitId":"Bluntsord"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":30,"author":{"gitId":"Bluntsord"},"content":"bye","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"Bluntsord":30}}]

[{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hanif-kamal"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":3,"author":{"gitId":"hanif-kamal"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"hanif-kamal"},"content":" * Represents Duke, an interactive personal assistant bot that can keep track of tasks via text commands.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"hanif-kamal"},"content":" *","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"hanif-kamal"},"content":" * @author Hanif Kamal","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"hanif-kamal"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":9,"author":{"gitId":"hanif-kamal"},"content":"    private final Storage storage;","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"hanif-kamal"},"content":"    private final TaskList list;","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"hanif-kamal"},"content":"    private final Ui ui;","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"hanif-kamal"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"hanif-kamal"},"content":"     * Class constructor to initialize a Duke instance.","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"hanif-kamal"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"hanif-kamal"},"content":"     * @param filePath A String representation of the location of a text file as a file path. Duke loads task data from","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"hanif-kamal"},"content":"     *                 and saves task data to this text file.","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"hanif-kamal"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"hanif-kamal"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"hanif-kamal"},"content":"        this.storage \u003d new Storage(filePath);","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"hanif-kamal"},"content":"        this.list \u003d new TaskList();","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"hanif-kamal"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"hanif-kamal"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":24,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":25,"author":{"gitId":"hanif-kamal"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"hanif-kamal"},"content":"     * Starts up Duke to get ready for chatting and task-tracking.","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"hanif-kamal"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"hanif-kamal"},"content":"    public void begin() {","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"hanif-kamal"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"hanif-kamal"},"content":"            storage.readTasks(list);","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"hanif-kamal"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"hanif-kamal"},"content":"            System.out.println(\"Could not read the data file: \" + e.getMessage());","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"hanif-kamal"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"hanif-kamal"},"content":"        ui.welcome();","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"hanif-kamal"},"content":"        String input \u003d ui.getNextLine();","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"hanif-kamal"},"content":"        Parser parser \u003d new Parser(list);","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"hanif-kamal"},"content":"        while (!input.equals(\"bye\")) {","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"hanif-kamal"},"content":"            try {","lastModifiedDate":"2021-08-19"},{"lineNumber":40,"author":{"gitId":"hanif-kamal"},"content":"                parser.parse(input);","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"hanif-kamal"},"content":"                storage.writeTasks(list);","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"hanif-kamal"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2021-08-19"},{"lineNumber":43,"author":{"gitId":"hanif-kamal"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2021-08-19"},{"lineNumber":44,"author":{"gitId":"hanif-kamal"},"content":"            }","lastModifiedDate":"2021-08-17"},{"lineNumber":45,"author":{"gitId":"hanif-kamal"},"content":"            input \u003d ui.getNextLine();","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"hanif-kamal"},"content":"        }","lastModifiedDate":"2021-08-17"},{"lineNumber":47,"author":{"gitId":"hanif-kamal"},"content":"        ui.bye();","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":49,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":50,"author":{"gitId":"hanif-kamal"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":51,"author":{"gitId":"hanif-kamal"},"content":"     * Main method to begin Duke.","lastModifiedDate":"2021-08-26"},{"lineNumber":52,"author":{"gitId":"hanif-kamal"},"content":"     * @param args Not used.","lastModifiedDate":"2021-08-26"},{"lineNumber":53,"author":{"gitId":"hanif-kamal"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":54,"author":{"gitId":"hanif-kamal"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-19"},{"lineNumber":55,"author":{"gitId":"hanif-kamal"},"content":"        Duke duke \u003d new Duke(\"./data/duke.txt\");","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"hanif-kamal"},"content":"        duke.begin();","lastModifiedDate":"2021-08-19"},{"lineNumber":57,"author":{"gitId":"hanif-kamal"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"hanif-kamal":55,"-":3}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hanif-kamal"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"hanif-kamal"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"hanif-kamal"},"content":" * Encapsulates exceptions related to Duke, arising from incorrect user inputs.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"hanif-kamal"},"content":" *","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"hanif-kamal"},"content":" * @author Hanif Kamal","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"hanif-kamal"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"hanif-kamal"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"hanif-kamal"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"hanif-kamal"},"content":"     * Class constructor to initialize a DukeException instance.","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"hanif-kamal"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"hanif-kamal"},"content":"     * @param message An error message prompting the user to correct their inputs.","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"hanif-kamal"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"hanif-kamal"},"content":"    public DukeException(String message) {","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"hanif-kamal"},"content":"        super(message);","lastModifiedDate":"2021-08-19"},{"lineNumber":17,"author":{"gitId":"hanif-kamal"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"hanif-kamal"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"hanif-kamal":18}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hanif-kamal"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"hanif-kamal"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"hanif-kamal"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"hanif-kamal"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"hanif-kamal"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"hanif-kamal"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"hanif-kamal"},"content":"import duke.task.Event;","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"hanif-kamal"},"content":"import duke.task.Todo;","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"hanif-kamal"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"hanif-kamal"},"content":" * Encapsulates a Parser, which parses user inputs, interprets them as commands and","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"hanif-kamal"},"content":" * updates the TaskList.","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"hanif-kamal"},"content":" *","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"hanif-kamal"},"content":" * @author Hanif Kamal","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"hanif-kamal"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"hanif-kamal"},"content":"public class Parser {","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"hanif-kamal"},"content":"    /** The TaskList that the Parser updates after command interpretation */","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"hanif-kamal"},"content":"    private TaskList list;","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"hanif-kamal"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"hanif-kamal"},"content":"     * Class constructor to initialize a Parser instance.","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"hanif-kamal"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"hanif-kamal"},"content":"     * @param list The TaskList that is to be updated.","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"hanif-kamal"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"hanif-kamal"},"content":"    public Parser(TaskList list) {","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"hanif-kamal"},"content":"        this.list \u003d list;","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"hanif-kamal"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"hanif-kamal"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"hanif-kamal"},"content":"     * Takes in a String which represents user input, and parses it. It executes the","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"hanif-kamal"},"content":"     * interpreted commands and then updates the TaskList accordingly.","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"hanif-kamal"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"hanif-kamal"},"content":"     * @param input The String that is input by the user.","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"hanif-kamal"},"content":"     * @throws DukeException In the case of invalid inputs.","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"hanif-kamal"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"hanif-kamal"},"content":"    public void parse(String input) throws DukeException {","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"hanif-kamal"},"content":"        String[] splitInput \u003d input.split(\" \", 2);","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"hanif-kamal"},"content":"        String first \u003d splitInput[0];","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"hanif-kamal"},"content":"        if (splitInput.length \u003d\u003d 1) {","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"hanif-kamal"},"content":"            switch (first) {","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"hanif-kamal"},"content":"            case (\"list\"):","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"hanif-kamal"},"content":"                list.printTasks();","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"hanif-kamal"},"content":"                break;","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"hanif-kamal"},"content":"            case (\"done\"):","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"hanif-kamal"},"content":"                throw new DukeException(\"Please ensure that there is a number after the command \u0027done\u0027. Try again.\");","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"hanif-kamal"},"content":"            case (\"deadline\"):","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"hanif-kamal"},"content":"                throw new DukeException(\"Please ensure that there is a task description after the command \u0027deadline\u0027 \"","lastModifiedDate":"2021-08-29"},{"lineNumber":50,"author":{"gitId":"hanif-kamal"},"content":"                        + \"and a deadline after \u0027/by\u0027. Try again.\");","lastModifiedDate":"2021-08-29"},{"lineNumber":51,"author":{"gitId":"hanif-kamal"},"content":"            case (\"event\"):","lastModifiedDate":"2021-08-26"},{"lineNumber":52,"author":{"gitId":"hanif-kamal"},"content":"                throw new DukeException(\"Please ensure that there is a task description after the command \u0027deadline\u0027 \"","lastModifiedDate":"2021-08-29"},{"lineNumber":53,"author":{"gitId":"hanif-kamal"},"content":"                        + \"with a date and time after \u0027/at\u0027. Try again.\");","lastModifiedDate":"2021-08-29"},{"lineNumber":54,"author":{"gitId":"hanif-kamal"},"content":"            case (\"todo\"):","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"hanif-kamal"},"content":"                throw new DukeException(\"Please ensure that there is a task description after the command \u0027todo\u0027. \"","lastModifiedDate":"2021-08-29"},{"lineNumber":56,"author":{"gitId":"hanif-kamal"},"content":"                        + \"Try again.\");","lastModifiedDate":"2021-08-29"},{"lineNumber":57,"author":{"gitId":"hanif-kamal"},"content":"            case (\"delete\"):","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"hanif-kamal"},"content":"                throw new DukeException(\"Please ensure that there is a number after the command \u0027delete\u0027. Try again.\");","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"hanif-kamal"},"content":"            case (\"find\"):","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"hanif-kamal"},"content":"                throw new DukeException(\"Please ensure that there is a search term after the command \u0027find\u0027. \"","lastModifiedDate":"2021-08-29"},{"lineNumber":61,"author":{"gitId":"hanif-kamal"},"content":"                        + \"Try again.\");","lastModifiedDate":"2021-08-29"},{"lineNumber":62,"author":{"gitId":"hanif-kamal"},"content":"            default:","lastModifiedDate":"2021-08-26"},{"lineNumber":63,"author":{"gitId":"hanif-kamal"},"content":"                throw new DukeException(\"I didn\u0027t quite get what you meant. To add a task, begin with \"","lastModifiedDate":"2021-08-29"},{"lineNumber":64,"author":{"gitId":"hanif-kamal"},"content":"                        + \"\u0027deadline\u0027, \u0027event\u0027 or \u0027todo\u0027.\");","lastModifiedDate":"2021-08-29"},{"lineNumber":65,"author":{"gitId":"hanif-kamal"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":66,"author":{"gitId":"hanif-kamal"},"content":"        } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":67,"author":{"gitId":"hanif-kamal"},"content":"            switch (first) {","lastModifiedDate":"2021-08-26"},{"lineNumber":68,"author":{"gitId":"hanif-kamal"},"content":"            case (\"done\"):","lastModifiedDate":"2021-08-26"},{"lineNumber":69,"author":{"gitId":"hanif-kamal"},"content":"                try {","lastModifiedDate":"2021-08-24"},{"lineNumber":70,"author":{"gitId":"hanif-kamal"},"content":"                    String listIndexString \u003d splitInput[1];","lastModifiedDate":"2021-08-26"},{"lineNumber":71,"author":{"gitId":"hanif-kamal"},"content":"                    int listIndex \u003d Integer.parseInt(listIndexString);","lastModifiedDate":"2021-08-26"},{"lineNumber":72,"author":{"gitId":"hanif-kamal"},"content":"                    if (listIndex \u003c\u003d list.size() \u0026\u0026 listIndex \u003e\u003d 1) {","lastModifiedDate":"2021-08-24"},{"lineNumber":73,"author":{"gitId":"hanif-kamal"},"content":"                        list.completeTask(listIndex);","lastModifiedDate":"2021-08-24"},{"lineNumber":74,"author":{"gitId":"hanif-kamal"},"content":"                        break;","lastModifiedDate":"2021-08-26"},{"lineNumber":75,"author":{"gitId":"hanif-kamal"},"content":"                    } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":76,"author":{"gitId":"hanif-kamal"},"content":"                        throw new DukeException(\"Please ensure that a valid number follows the command \u0027done\u0027. \"","lastModifiedDate":"2021-08-29"},{"lineNumber":77,"author":{"gitId":"hanif-kamal"},"content":"                                + \"Try again.\");","lastModifiedDate":"2021-08-29"},{"lineNumber":78,"author":{"gitId":"hanif-kamal"},"content":"                    }","lastModifiedDate":"2021-08-24"},{"lineNumber":79,"author":{"gitId":"hanif-kamal"},"content":"                } catch (NumberFormatException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":80,"author":{"gitId":"hanif-kamal"},"content":"                    throw new DukeException(\"Please ensure only a number follows the command \u0027done\u0027. Try again.\");","lastModifiedDate":"2021-08-26"},{"lineNumber":81,"author":{"gitId":"hanif-kamal"},"content":"                }","lastModifiedDate":"2021-08-24"},{"lineNumber":82,"author":{"gitId":"hanif-kamal"},"content":"            case (\"deadline\"):","lastModifiedDate":"2021-08-26"},{"lineNumber":83,"author":{"gitId":"hanif-kamal"},"content":"                String restOfDeadline \u003d splitInput[1];","lastModifiedDate":"2021-08-26"},{"lineNumber":84,"author":{"gitId":"hanif-kamal"},"content":"                if (!restOfDeadline.contains(\"/by\")) {","lastModifiedDate":"2021-08-26"},{"lineNumber":85,"author":{"gitId":"hanif-kamal"},"content":"                    throw new DukeException(\"Please state the deadline for this task with /by! Try again.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":86,"author":{"gitId":"hanif-kamal"},"content":"                } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":87,"author":{"gitId":"hanif-kamal"},"content":"                    try {","lastModifiedDate":"2021-08-24"},{"lineNumber":88,"author":{"gitId":"hanif-kamal"},"content":"                        String[] restOfDeadlineSplit \u003d restOfDeadline.split(\" /by \", 2);","lastModifiedDate":"2021-08-26"},{"lineNumber":89,"author":{"gitId":"hanif-kamal"},"content":"                        if (restOfDeadlineSplit.length \u003c 2) {","lastModifiedDate":"2021-08-26"},{"lineNumber":90,"author":{"gitId":"hanif-kamal"},"content":"                            throw new DukeException(\"Please ensure that there is a task description and deadline. \"","lastModifiedDate":"2021-08-29"},{"lineNumber":91,"author":{"gitId":"hanif-kamal"},"content":"                                    + \"Try again\");","lastModifiedDate":"2021-08-29"},{"lineNumber":92,"author":{"gitId":"hanif-kamal"},"content":"                        }","lastModifiedDate":"2021-08-26"},{"lineNumber":93,"author":{"gitId":"hanif-kamal"},"content":"                        String deadlineDescription \u003d restOfDeadlineSplit[0];","lastModifiedDate":"2021-08-26"},{"lineNumber":94,"author":{"gitId":"hanif-kamal"},"content":"                        String deadlineDateString \u003d restOfDeadlineSplit[1];","lastModifiedDate":"2021-08-26"},{"lineNumber":95,"author":{"gitId":"hanif-kamal"},"content":"                        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"dd/MM/yy\");","lastModifiedDate":"2021-08-24"},{"lineNumber":96,"author":{"gitId":"hanif-kamal"},"content":"                        LocalDate deadlineDate \u003d LocalDate.parse(deadlineDateString, dtf);","lastModifiedDate":"2021-08-26"},{"lineNumber":97,"author":{"gitId":"hanif-kamal"},"content":"                        Deadline createdDeadlineTask \u003d new Deadline(deadlineDescription, false, deadlineDate);","lastModifiedDate":"2021-08-26"},{"lineNumber":98,"author":{"gitId":"hanif-kamal"},"content":"                        list.addToList(createdDeadlineTask);","lastModifiedDate":"2021-08-24"},{"lineNumber":99,"author":{"gitId":"hanif-kamal"},"content":"                        System.out.println(\"Got it. I\u0027ve added this task:\\n\" + \"  \" + createdDeadlineTask + \"\\n\"","lastModifiedDate":"2021-08-24"},{"lineNumber":100,"author":{"gitId":"hanif-kamal"},"content":"                                + \"Now you have \" + list.size() + \" task\" + (list.size() \u003d\u003d 1 ? \"\" : \"s\")","lastModifiedDate":"2021-08-29"},{"lineNumber":101,"author":{"gitId":"hanif-kamal"},"content":"                                + \" in the list.\");","lastModifiedDate":"2021-08-29"},{"lineNumber":102,"author":{"gitId":"hanif-kamal"},"content":"                        break;","lastModifiedDate":"2021-08-26"},{"lineNumber":103,"author":{"gitId":"hanif-kamal"},"content":"                    } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":104,"author":{"gitId":"hanif-kamal"},"content":"                        throw new DukeException(\"Please ensure that your deadline is formatted in the following \"","lastModifiedDate":"2021-08-29"},{"lineNumber":105,"author":{"gitId":"hanif-kamal"},"content":"                                + \"way: DD/MM/YY\");","lastModifiedDate":"2021-08-29"},{"lineNumber":106,"author":{"gitId":"hanif-kamal"},"content":"                    }","lastModifiedDate":"2021-08-24"},{"lineNumber":107,"author":{"gitId":"hanif-kamal"},"content":"                }","lastModifiedDate":"2021-08-24"},{"lineNumber":108,"author":{"gitId":"hanif-kamal"},"content":"            case (\"event\"):","lastModifiedDate":"2021-08-26"},{"lineNumber":109,"author":{"gitId":"hanif-kamal"},"content":"                String restOfEvent \u003d splitInput[1];","lastModifiedDate":"2021-08-26"},{"lineNumber":110,"author":{"gitId":"hanif-kamal"},"content":"                if (!restOfEvent.contains(\"/at\")) {","lastModifiedDate":"2021-08-26"},{"lineNumber":111,"author":{"gitId":"hanif-kamal"},"content":"                    throw new DukeException(\"Please state the date and time for this task with /at! Try again.\");","lastModifiedDate":"2021-08-26"},{"lineNumber":112,"author":{"gitId":"hanif-kamal"},"content":"                } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":113,"author":{"gitId":"hanif-kamal"},"content":"                    try {","lastModifiedDate":"2021-08-24"},{"lineNumber":114,"author":{"gitId":"hanif-kamal"},"content":"                        String[] restOfEventSplit \u003d restOfEvent.split(\" /at \", 2);","lastModifiedDate":"2021-08-26"},{"lineNumber":115,"author":{"gitId":"hanif-kamal"},"content":"                        if (restOfEventSplit.length \u003c 2) {","lastModifiedDate":"2021-08-26"},{"lineNumber":116,"author":{"gitId":"hanif-kamal"},"content":"                            throw new DukeException(\"Please ensure that there is a task description with a date and \"","lastModifiedDate":"2021-08-29"},{"lineNumber":117,"author":{"gitId":"hanif-kamal"},"content":"                                    + \"time. Try again\");","lastModifiedDate":"2021-08-29"},{"lineNumber":118,"author":{"gitId":"hanif-kamal"},"content":"                        }","lastModifiedDate":"2021-08-26"},{"lineNumber":119,"author":{"gitId":"hanif-kamal"},"content":"                        String eventDescription \u003d restOfEventSplit[0];","lastModifiedDate":"2021-08-26"},{"lineNumber":120,"author":{"gitId":"hanif-kamal"},"content":"                        String eventDateTimeString \u003d restOfEventSplit[1];","lastModifiedDate":"2021-08-26"},{"lineNumber":121,"author":{"gitId":"hanif-kamal"},"content":"                        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"dd/MM/yy HHmm\");","lastModifiedDate":"2021-08-24"},{"lineNumber":122,"author":{"gitId":"hanif-kamal"},"content":"                        LocalDateTime eventDateTime \u003d LocalDateTime.parse(eventDateTimeString, dtf);","lastModifiedDate":"2021-08-26"},{"lineNumber":123,"author":{"gitId":"hanif-kamal"},"content":"                        Event createdEventTask \u003d new Event(eventDescription, false, eventDateTime);","lastModifiedDate":"2021-08-26"},{"lineNumber":124,"author":{"gitId":"hanif-kamal"},"content":"                        list.addToList(createdEventTask);","lastModifiedDate":"2021-08-24"},{"lineNumber":125,"author":{"gitId":"hanif-kamal"},"content":"                        System.out.println(\"Got it. I\u0027ve added this task:\\n\" + \"  \" + createdEventTask + \"\\n\"","lastModifiedDate":"2021-08-24"},{"lineNumber":126,"author":{"gitId":"hanif-kamal"},"content":"                                + \"Now you have \" + list.size() + \" task\" + (list.size() \u003d\u003d 1 ? \"\" : \"s\")","lastModifiedDate":"2021-08-29"},{"lineNumber":127,"author":{"gitId":"hanif-kamal"},"content":"                                + \" in the list.\");","lastModifiedDate":"2021-08-29"},{"lineNumber":128,"author":{"gitId":"hanif-kamal"},"content":"                        break;","lastModifiedDate":"2021-08-26"},{"lineNumber":129,"author":{"gitId":"hanif-kamal"},"content":"                    } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":130,"author":{"gitId":"hanif-kamal"},"content":"                        throw new DukeException(\"Please ensure that your deadline is formatted in the following \"","lastModifiedDate":"2021-08-29"},{"lineNumber":131,"author":{"gitId":"hanif-kamal"},"content":"                                + \"way: DD/MM/YY\");","lastModifiedDate":"2021-08-29"},{"lineNumber":132,"author":{"gitId":"hanif-kamal"},"content":"                    }","lastModifiedDate":"2021-08-24"},{"lineNumber":133,"author":{"gitId":"hanif-kamal"},"content":"                }","lastModifiedDate":"2021-08-24"},{"lineNumber":134,"author":{"gitId":"hanif-kamal"},"content":"            case (\"todo\"):","lastModifiedDate":"2021-08-26"},{"lineNumber":135,"author":{"gitId":"hanif-kamal"},"content":"                String todoDescription \u003d splitInput[1];","lastModifiedDate":"2021-08-26"},{"lineNumber":136,"author":{"gitId":"hanif-kamal"},"content":"                Todo createdTodoTask \u003d new Todo(todoDescription, false);","lastModifiedDate":"2021-08-26"},{"lineNumber":137,"author":{"gitId":"hanif-kamal"},"content":"                list.addToList(createdTodoTask);","lastModifiedDate":"2021-08-26"},{"lineNumber":138,"author":{"gitId":"hanif-kamal"},"content":"                System.out.println(\"Got it. I\u0027ve added this task:\\n\" + \"  \" + createdTodoTask + \"\\n\"","lastModifiedDate":"2021-08-26"},{"lineNumber":139,"author":{"gitId":"hanif-kamal"},"content":"                        + \"Now you have \" + list.size() + \" task\" + (list.size() \u003d\u003d 1 ? \"\" : \"s\") + \" in the list.\");","lastModifiedDate":"2021-08-29"},{"lineNumber":140,"author":{"gitId":"hanif-kamal"},"content":"                break;","lastModifiedDate":"2021-08-26"},{"lineNumber":141,"author":{"gitId":"hanif-kamal"},"content":"            case (\"delete\"):","lastModifiedDate":"2021-08-26"},{"lineNumber":142,"author":{"gitId":"hanif-kamal"},"content":"                String toDeleteIndexString \u003d splitInput[1];","lastModifiedDate":"2021-08-26"},{"lineNumber":143,"author":{"gitId":"hanif-kamal"},"content":"                try {","lastModifiedDate":"2021-08-24"},{"lineNumber":144,"author":{"gitId":"hanif-kamal"},"content":"                    int toDeleteIndex \u003d Integer.parseInt(toDeleteIndexString);","lastModifiedDate":"2021-08-26"},{"lineNumber":145,"author":{"gitId":"hanif-kamal"},"content":"                    list.deleteTask(toDeleteIndex);","lastModifiedDate":"2021-08-24"},{"lineNumber":146,"author":{"gitId":"hanif-kamal"},"content":"                    break;","lastModifiedDate":"2021-08-26"},{"lineNumber":147,"author":{"gitId":"hanif-kamal"},"content":"                } catch (NumberFormatException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":148,"author":{"gitId":"hanif-kamal"},"content":"                    throw new DukeException(\"Please make sure only a number follows the command \u0027delete\u0027. \"","lastModifiedDate":"2021-08-29"},{"lineNumber":149,"author":{"gitId":"hanif-kamal"},"content":"                            + \"Try again.\");","lastModifiedDate":"2021-08-29"},{"lineNumber":150,"author":{"gitId":"hanif-kamal"},"content":"                } catch (StringIndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":151,"author":{"gitId":"hanif-kamal"},"content":"                    throw new DukeException(\"Please add a number after the command \u0027delete\u0027. Try again.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":152,"author":{"gitId":"hanif-kamal"},"content":"                }","lastModifiedDate":"2021-08-24"},{"lineNumber":153,"author":{"gitId":"hanif-kamal"},"content":"            case (\"find\"):","lastModifiedDate":"2021-08-26"},{"lineNumber":154,"author":{"gitId":"hanif-kamal"},"content":"                String searchTerm \u003d splitInput[1];","lastModifiedDate":"2021-08-26"},{"lineNumber":155,"author":{"gitId":"hanif-kamal"},"content":"                list.printFilteredTasks(searchTerm);","lastModifiedDate":"2021-08-26"},{"lineNumber":156,"author":{"gitId":"hanif-kamal"},"content":"                break;","lastModifiedDate":"2021-08-26"},{"lineNumber":157,"author":{"gitId":"hanif-kamal"},"content":"            default:","lastModifiedDate":"2021-08-26"},{"lineNumber":158,"author":{"gitId":"hanif-kamal"},"content":"                throw new DukeException(\"I didn\u0027t quite get what you meant. To add a task, begin with \"","lastModifiedDate":"2021-08-29"},{"lineNumber":159,"author":{"gitId":"hanif-kamal"},"content":"                        + \"\u0027deadline\u0027, \u0027event\u0027 or \u0027todo\u0027.\");","lastModifiedDate":"2021-08-29"},{"lineNumber":160,"author":{"gitId":"hanif-kamal"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":161,"author":{"gitId":"hanif-kamal"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":162,"author":{"gitId":"hanif-kamal"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":163,"author":{"gitId":"hanif-kamal"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"hanif-kamal":163}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hanif-kamal"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"hanif-kamal"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"hanif-kamal"},"content":"import java.io.BufferedWriter;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"hanif-kamal"},"content":"import java.io.File;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"hanif-kamal"},"content":"import java.io.FileReader;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"hanif-kamal"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"hanif-kamal"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"hanif-kamal"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"hanif-kamal"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"hanif-kamal"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"hanif-kamal"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"hanif-kamal"},"content":"import duke.task.Event;","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"hanif-kamal"},"content":"import duke.task.Todo;","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"hanif-kamal"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"hanif-kamal"},"content":" * Encapsulates a class that handles saving to and loading from the text file that contains task data.","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"hanif-kamal"},"content":" *","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"hanif-kamal"},"content":" * @author Hanif Kamal","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"hanif-kamal"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"hanif-kamal"},"content":"public class Storage {","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"hanif-kamal"},"content":"    /** A String representation of the location of the text file as a file path. */","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"hanif-kamal"},"content":"    private final String filePath;","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"hanif-kamal"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"hanif-kamal"},"content":"     * Class constructor.","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"hanif-kamal"},"content":"     * @param filePath A String representation of the location of the text file as a file path.","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"hanif-kamal"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"hanif-kamal"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"hanif-kamal"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"hanif-kamal"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"hanif-kamal"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"hanif-kamal"},"content":"     * Writes task data from the TaskList to the text file, line by line.","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"hanif-kamal"},"content":"     * @param list The TaskList from which task data is used to write to the text file.","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"hanif-kamal"},"content":"     * @throws DukeException In the case where the file is corrupted or cannot be located.","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"hanif-kamal"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"hanif-kamal"},"content":"    public void writeTasks(TaskList list) throws DukeException {","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"hanif-kamal"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"hanif-kamal"},"content":"            BufferedWriter bw \u003d new BufferedWriter(new FileWriter(filePath));","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"hanif-kamal"},"content":"            for (int i \u003d 0; i \u003c list.size(); i++) {","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"hanif-kamal"},"content":"                bw.write(list.getTask(i).toString());","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"hanif-kamal"},"content":"                bw.newLine();","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"hanif-kamal"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"hanif-kamal"},"content":"            bw.close();","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"hanif-kamal"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"hanif-kamal"},"content":"            throw new DukeException(\"Error upon writing to data file: \" + e.getMessage());","lastModifiedDate":"2021-08-29"},{"lineNumber":49,"author":{"gitId":"hanif-kamal"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"hanif-kamal"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"hanif-kamal"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":53,"author":{"gitId":"hanif-kamal"},"content":"     * Reads a text file, line by line. Parses the lines into task data, and adds it to the given TaskList.","lastModifiedDate":"2021-08-26"},{"lineNumber":54,"author":{"gitId":"hanif-kamal"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"hanif-kamal"},"content":"     * @param list An empty TaskList to be filled with tasks, as parsed from the text file","lastModifiedDate":"2021-08-26"},{"lineNumber":56,"author":{"gitId":"hanif-kamal"},"content":"     * @throws DukeException In the case where the file is corrupted or cannot be located.","lastModifiedDate":"2021-08-26"},{"lineNumber":57,"author":{"gitId":"hanif-kamal"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"hanif-kamal"},"content":"    public void readTasks(TaskList list) throws DukeException {","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"hanif-kamal"},"content":"        File file \u003d new File(filePath);","lastModifiedDate":"2021-08-24"},{"lineNumber":60,"author":{"gitId":"hanif-kamal"},"content":"        file.getParentFile().mkdirs();","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"hanif-kamal"},"content":"        if (!file.exists()) {","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"hanif-kamal"},"content":"            try {","lastModifiedDate":"2021-08-24"},{"lineNumber":63,"author":{"gitId":"hanif-kamal"},"content":"                file.createNewFile();","lastModifiedDate":"2021-08-24"},{"lineNumber":64,"author":{"gitId":"hanif-kamal"},"content":"            } catch (IOException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"hanif-kamal"},"content":"                throw new DukeException(\"Error upon creating data file: \" + e.getMessage());","lastModifiedDate":"2021-08-29"},{"lineNumber":66,"author":{"gitId":"hanif-kamal"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":67,"author":{"gitId":"hanif-kamal"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":68,"author":{"gitId":"hanif-kamal"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":69,"author":{"gitId":"hanif-kamal"},"content":"            BufferedReader br \u003d new BufferedReader(new FileReader(\"./data/duke.txt\"));","lastModifiedDate":"2021-08-24"},{"lineNumber":70,"author":{"gitId":"hanif-kamal"},"content":"            String line;","lastModifiedDate":"2021-08-24"},{"lineNumber":71,"author":{"gitId":"hanif-kamal"},"content":"            while ((line \u003d br.readLine()) !\u003d null) {","lastModifiedDate":"2021-08-24"},{"lineNumber":72,"author":{"gitId":"hanif-kamal"},"content":"                String[] splitLine \u003d line.split(\" \");","lastModifiedDate":"2021-08-24"},{"lineNumber":73,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":74,"author":{"gitId":"hanif-kamal"},"content":"                switch(splitLine[0].charAt(1)) {","lastModifiedDate":"2021-08-24"},{"lineNumber":75,"author":{"gitId":"hanif-kamal"},"content":"                case \u0027T\u0027:","lastModifiedDate":"2021-08-24"},{"lineNumber":76,"author":{"gitId":"hanif-kamal"},"content":"                    String todoName \u003d splitLine[1];","lastModifiedDate":"2021-08-24"},{"lineNumber":77,"author":{"gitId":"hanif-kamal"},"content":"                    boolean todoStatus \u003d (splitLine[0].charAt(4) \u003d\u003d \u0027X\u0027);","lastModifiedDate":"2021-08-24"},{"lineNumber":78,"author":{"gitId":"hanif-kamal"},"content":"                    list.addToList(new Todo(todoName, todoStatus));","lastModifiedDate":"2021-08-24"},{"lineNumber":79,"author":{"gitId":"hanif-kamal"},"content":"                    break;","lastModifiedDate":"2021-08-24"},{"lineNumber":80,"author":{"gitId":"hanif-kamal"},"content":"                case \u0027D\u0027:","lastModifiedDate":"2021-08-24"},{"lineNumber":81,"author":{"gitId":"hanif-kamal"},"content":"                    String deadlineName \u003d splitLine[1] + \" \";","lastModifiedDate":"2021-08-24"},{"lineNumber":82,"author":{"gitId":"hanif-kamal"},"content":"                    boolean deadlineStatus \u003d (splitLine[0].charAt(4) \u003d\u003d \u0027X\u0027);","lastModifiedDate":"2021-08-24"},{"lineNumber":83,"author":{"gitId":"hanif-kamal"},"content":"                    String deadlineByWithBracket \u003d line.substring(line.lastIndexOf(\"(by: \") + 5);","lastModifiedDate":"2021-08-24"},{"lineNumber":84,"author":{"gitId":"hanif-kamal"},"content":"                    String deadlineBy \u003d deadlineByWithBracket.substring(0, deadlineByWithBracket.length() - 1);","lastModifiedDate":"2021-08-24"},{"lineNumber":85,"author":{"gitId":"hanif-kamal"},"content":"                    DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy\");","lastModifiedDate":"2021-08-24"},{"lineNumber":86,"author":{"gitId":"hanif-kamal"},"content":"                    LocalDate correctDeadline \u003d LocalDate.parse(deadlineBy, dtf);","lastModifiedDate":"2021-08-24"},{"lineNumber":87,"author":{"gitId":"hanif-kamal"},"content":"                    list.addToList(new Deadline(deadlineName, deadlineStatus, correctDeadline));","lastModifiedDate":"2021-08-24"},{"lineNumber":88,"author":{"gitId":"hanif-kamal"},"content":"                    break;","lastModifiedDate":"2021-08-24"},{"lineNumber":89,"author":{"gitId":"hanif-kamal"},"content":"                case \u0027E\u0027:","lastModifiedDate":"2021-08-24"},{"lineNumber":90,"author":{"gitId":"hanif-kamal"},"content":"                    String eventName \u003d splitLine[1] + \" \";","lastModifiedDate":"2021-08-24"},{"lineNumber":91,"author":{"gitId":"hanif-kamal"},"content":"                    boolean eventStatus \u003d (splitLine[0].charAt(4) \u003d\u003d \u0027X\u0027);","lastModifiedDate":"2021-08-24"},{"lineNumber":92,"author":{"gitId":"hanif-kamal"},"content":"                    String eventAtWithBracket \u003d line.substring(line.lastIndexOf(\"(at: \") + 5);","lastModifiedDate":"2021-08-24"},{"lineNumber":93,"author":{"gitId":"hanif-kamal"},"content":"                    String eventAt \u003d eventAtWithBracket.substring(0, eventAtWithBracket.length() - 1);","lastModifiedDate":"2021-08-24"},{"lineNumber":94,"author":{"gitId":"hanif-kamal"},"content":"                    DateTimeFormatter dtf2 \u003d DateTimeFormatter.ofPattern(\"dd MMM yyy hh:mm a\");","lastModifiedDate":"2021-08-24"},{"lineNumber":95,"author":{"gitId":"hanif-kamal"},"content":"                    LocalDateTime correctEventAt \u003d LocalDateTime.parse(eventAt, dtf2);","lastModifiedDate":"2021-08-24"},{"lineNumber":96,"author":{"gitId":"hanif-kamal"},"content":"                    list.addToList(new Event(eventName, eventStatus, correctEventAt));","lastModifiedDate":"2021-08-24"},{"lineNumber":97,"author":{"gitId":"hanif-kamal"},"content":"                    break;","lastModifiedDate":"2021-08-24"},{"lineNumber":98,"author":{"gitId":"hanif-kamal"},"content":"                default:","lastModifiedDate":"2021-08-29"},{"lineNumber":99,"author":{"gitId":"hanif-kamal"},"content":"                    throw new DukeException(\"Oh no! It seems that the data in the storage file \");","lastModifiedDate":"2021-08-29"},{"lineNumber":100,"author":{"gitId":"hanif-kamal"},"content":"                }","lastModifiedDate":"2021-08-24"},{"lineNumber":101,"author":{"gitId":"hanif-kamal"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":102,"author":{"gitId":"hanif-kamal"},"content":"            br.close();","lastModifiedDate":"2021-08-24"},{"lineNumber":103,"author":{"gitId":"hanif-kamal"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":104,"author":{"gitId":"hanif-kamal"},"content":"            throw new DukeException(\"Error upon reading from data file: \" + e.getMessage());","lastModifiedDate":"2021-08-29"},{"lineNumber":105,"author":{"gitId":"hanif-kamal"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":106,"author":{"gitId":"hanif-kamal"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":107,"author":{"gitId":"hanif-kamal"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"hanif-kamal":107}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hanif-kamal"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"hanif-kamal"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"hanif-kamal"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"hanif-kamal"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"hanif-kamal"},"content":" * Encapsulates a list of Tasks that the user sets, with relevant processing methods.","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"hanif-kamal"},"content":" *","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"hanif-kamal"},"content":" * @author Hanif Kamal","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"hanif-kamal"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"hanif-kamal"},"content":"public class TaskList {","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"hanif-kamal"},"content":"    private final ArrayList\u003cTask\u003e list;","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"hanif-kamal"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"hanif-kamal"},"content":"     * Class constructor to initialize the TaskList instance.","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"hanif-kamal"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"hanif-kamal"},"content":"    public TaskList() {","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"hanif-kamal"},"content":"        this.list \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"hanif-kamal"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"hanif-kamal"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"hanif-kamal"},"content":"     * Looks up the Task at the given index in the TaskList and sets the Task as done.","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"hanif-kamal"},"content":"     * @param index The index of the Task, to be set as done, in the TaskList.","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"hanif-kamal"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"hanif-kamal"},"content":"    public void completeTask(int index) {","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"hanif-kamal"},"content":"        Task task \u003d this.list.get(index - 1);","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"hanif-kamal"},"content":"        task.setDone();","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"hanif-kamal"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\\n\" + \"  \" + task);","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"hanif-kamal"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"hanif-kamal"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"hanif-kamal"},"content":"     * Adds the given Task to the TaskList.","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"hanif-kamal"},"content":"     * @param task The Task to be added to the TaskList.","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"hanif-kamal"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"hanif-kamal"},"content":"    public void addToList(Task task) {","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"hanif-kamal"},"content":"        this.list.add(task);","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"hanif-kamal"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"hanif-kamal"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"hanif-kamal"},"content":"     * Prints all Tasks in the TaskList for the user.","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"hanif-kamal"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"hanif-kamal"},"content":"     * @throws DukeException In the case where the TaskList is empty.","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"hanif-kamal"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"hanif-kamal"},"content":"    public void printTasks() throws DukeException {","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"hanif-kamal"},"content":"        if (this.list.size() \u003c 1) {","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"hanif-kamal"},"content":"            throw new DukeException(\"You haven\u0027t added anything to the list yet! Try adding something.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"hanif-kamal"},"content":"        } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"hanif-kamal"},"content":"            if (this.list.size() \u003d\u003d 1) {","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"hanif-kamal"},"content":"                System.out.println(\"Here is the sole task in your list:\");","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"hanif-kamal"},"content":"            } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"hanif-kamal"},"content":"                System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"hanif-kamal"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"hanif-kamal"},"content":"            for (int i \u003d 1; i \u003c\u003d list.size(); i++) {","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"hanif-kamal"},"content":"                System.out.println(i + \". \" + list.get(i - 1));","lastModifiedDate":"2021-08-24"},{"lineNumber":57,"author":{"gitId":"hanif-kamal"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"hanif-kamal"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"hanif-kamal"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":60,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"hanif-kamal"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"hanif-kamal"},"content":"     * Looks up the Task at the given index in the TaskList and removes the Task from the list.","lastModifiedDate":"2021-08-26"},{"lineNumber":63,"author":{"gitId":"hanif-kamal"},"content":"     * @param index The index of the Task, to be deleted, in the TaskList.","lastModifiedDate":"2021-08-26"},{"lineNumber":64,"author":{"gitId":"hanif-kamal"},"content":"     * @throws DukeException In the case where the TaskList is empty, or the index is out of bounds.","lastModifiedDate":"2021-08-26"},{"lineNumber":65,"author":{"gitId":"hanif-kamal"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":66,"author":{"gitId":"hanif-kamal"},"content":"    public void deleteTask(int index) throws DukeException {","lastModifiedDate":"2021-08-24"},{"lineNumber":67,"author":{"gitId":"hanif-kamal"},"content":"        if (this.list.size() \u003c 1) {","lastModifiedDate":"2021-08-24"},{"lineNumber":68,"author":{"gitId":"hanif-kamal"},"content":"            throw new DukeException(\"You haven\u0027t added anything to the list yet! Try adding something before \"","lastModifiedDate":"2021-08-29"},{"lineNumber":69,"author":{"gitId":"hanif-kamal"},"content":"                    + \"deleting.\");","lastModifiedDate":"2021-08-29"},{"lineNumber":70,"author":{"gitId":"hanif-kamal"},"content":"        } else if (index \u003c\u003d this.list.size() \u0026\u0026 index \u003e\u003d 1) {","lastModifiedDate":"2021-08-24"},{"lineNumber":71,"author":{"gitId":"hanif-kamal"},"content":"            Task toDelete \u003d list.get(index - 1);","lastModifiedDate":"2021-08-24"},{"lineNumber":72,"author":{"gitId":"hanif-kamal"},"content":"            list.remove(index - 1);","lastModifiedDate":"2021-08-24"},{"lineNumber":73,"author":{"gitId":"hanif-kamal"},"content":"            System.out.println(\"Noted. I\u0027ve removed this task:\\n\" + \"  \" + toDelete + \"\\n\" + \"Now you have \"","lastModifiedDate":"2021-08-29"},{"lineNumber":74,"author":{"gitId":"hanif-kamal"},"content":"                    + list.size() + \" task\" + (list.size() \u003d\u003d 1 ? \"\" : \"s\") + \" in the list.\");","lastModifiedDate":"2021-08-29"},{"lineNumber":75,"author":{"gitId":"hanif-kamal"},"content":"        } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":76,"author":{"gitId":"hanif-kamal"},"content":"            throw new DukeException(\"Couldn\u0027t find that task in the list! Try again.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":77,"author":{"gitId":"hanif-kamal"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":78,"author":{"gitId":"hanif-kamal"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":79,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":80,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":81,"author":{"gitId":"hanif-kamal"},"content":"    public int size() {","lastModifiedDate":"2021-08-24"},{"lineNumber":82,"author":{"gitId":"hanif-kamal"},"content":"        return this.list.size();","lastModifiedDate":"2021-08-24"},{"lineNumber":83,"author":{"gitId":"hanif-kamal"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":84,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":85,"author":{"gitId":"hanif-kamal"},"content":"    public Task getTask(int index) {","lastModifiedDate":"2021-08-24"},{"lineNumber":86,"author":{"gitId":"hanif-kamal"},"content":"        return this.list.get(index);","lastModifiedDate":"2021-08-24"},{"lineNumber":87,"author":{"gitId":"hanif-kamal"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":88,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":89,"author":{"gitId":"hanif-kamal"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":90,"author":{"gitId":"hanif-kamal"},"content":"     * Prints a Task List that is filtered such that it only consists of Tasks that contain the given search term.","lastModifiedDate":"2021-08-29"},{"lineNumber":91,"author":{"gitId":"hanif-kamal"},"content":"     * @param searchTerm The given search term to narrow down the Tasks in the Task List.","lastModifiedDate":"2021-08-29"},{"lineNumber":92,"author":{"gitId":"hanif-kamal"},"content":"     * @throws DukeException In the case where no Tasks matching the search term can be found.","lastModifiedDate":"2021-08-29"},{"lineNumber":93,"author":{"gitId":"hanif-kamal"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":94,"author":{"gitId":"hanif-kamal"},"content":"    public void printFilteredTasks(String searchTerm) throws DukeException {","lastModifiedDate":"2021-08-26"},{"lineNumber":95,"author":{"gitId":"hanif-kamal"},"content":"        ArrayList\u003cTask\u003e filteredList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-26"},{"lineNumber":96,"author":{"gitId":"hanif-kamal"},"content":"        for (Task task : list) {","lastModifiedDate":"2021-08-26"},{"lineNumber":97,"author":{"gitId":"hanif-kamal"},"content":"            if (task.getTaskName().contains(searchTerm)) {","lastModifiedDate":"2021-08-26"},{"lineNumber":98,"author":{"gitId":"hanif-kamal"},"content":"                filteredList.add(task);","lastModifiedDate":"2021-08-26"},{"lineNumber":99,"author":{"gitId":"hanif-kamal"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":100,"author":{"gitId":"hanif-kamal"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":101,"author":{"gitId":"hanif-kamal"},"content":"        if (filteredList.size() \u003c 1) {","lastModifiedDate":"2021-08-26"},{"lineNumber":102,"author":{"gitId":"hanif-kamal"},"content":"            throw new DukeException(\"I couldn\u0027t find any tasks with that particular search term. Try again.\");","lastModifiedDate":"2021-08-26"},{"lineNumber":103,"author":{"gitId":"hanif-kamal"},"content":"        } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":104,"author":{"gitId":"hanif-kamal"},"content":"            if (filteredList.size() \u003d\u003d 1) {","lastModifiedDate":"2021-08-26"},{"lineNumber":105,"author":{"gitId":"hanif-kamal"},"content":"                System.out.println(\"Here is the sole matching task in your list:\");","lastModifiedDate":"2021-08-26"},{"lineNumber":106,"author":{"gitId":"hanif-kamal"},"content":"            } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":107,"author":{"gitId":"hanif-kamal"},"content":"                System.out.println(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2021-08-26"},{"lineNumber":108,"author":{"gitId":"hanif-kamal"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":109,"author":{"gitId":"hanif-kamal"},"content":"            for (int i \u003d 1; i \u003c\u003d filteredList.size(); i++) {","lastModifiedDate":"2021-08-26"},{"lineNumber":110,"author":{"gitId":"hanif-kamal"},"content":"                System.out.println(i + \". \" + filteredList.get(i - 1));","lastModifiedDate":"2021-08-26"},{"lineNumber":111,"author":{"gitId":"hanif-kamal"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":112,"author":{"gitId":"hanif-kamal"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":113,"author":{"gitId":"hanif-kamal"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":114,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":115,"author":{"gitId":"hanif-kamal"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"hanif-kamal":115}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hanif-kamal"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"hanif-kamal"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"hanif-kamal"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"hanif-kamal"},"content":" * Encapsulates the user interface for Duke.","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"hanif-kamal"},"content":" *","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"hanif-kamal"},"content":" * @author Hanif Kamal","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"hanif-kamal"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"hanif-kamal"},"content":"public class Ui {","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"hanif-kamal"},"content":"    private Scanner scanner;","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"hanif-kamal"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"hanif-kamal"},"content":"     * Class constructor.","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"hanif-kamal"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"hanif-kamal"},"content":"    public Ui() {","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"hanif-kamal"},"content":"        this.scanner \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"hanif-kamal"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"hanif-kamal"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"hanif-kamal"},"content":"     * Prints a welcome message.","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"hanif-kamal"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"hanif-kamal"},"content":"    public void welcome() {","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"hanif-kamal"},"content":"        System.out.println(\"Hello! I\u0027m Duke\\n\" + \"What can I do for you?\");","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"hanif-kamal"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"hanif-kamal"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"hanif-kamal"},"content":"     * Gets the next line of user input.","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"hanif-kamal"},"content":"     * @return A String representing the next line of user input.","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"hanif-kamal"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"hanif-kamal"},"content":"    public String getNextLine() {","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"hanif-kamal"},"content":"        return scanner.nextLine();","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"hanif-kamal"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"hanif-kamal"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"hanif-kamal"},"content":"     * Prints a goodbye message.","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"hanif-kamal"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"hanif-kamal"},"content":"    public void bye() {","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"hanif-kamal"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"hanif-kamal"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"hanif-kamal"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"hanif-kamal":41}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hanif-kamal"},"content":"package duke.task;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"hanif-kamal"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"hanif-kamal"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"hanif-kamal"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"hanif-kamal"},"content":" * Represents a Deadline, a subtype of Task. A Deadline also includes a deadline date, stored as a LocalDate.","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"hanif-kamal"},"content":" *","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"hanif-kamal"},"content":" * @author Hanif Kamal","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"hanif-kamal"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"hanif-kamal"},"content":"public class Deadline extends Task{","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"hanif-kamal"},"content":"    private LocalDate deadline;","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"hanif-kamal"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"hanif-kamal"},"content":"     * Class constructor.","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"hanif-kamal"},"content":"     * @param taskName The name or description of the Deadline.","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"hanif-kamal"},"content":"     * @param isDone Whether or not the Deadline is done.","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"hanif-kamal"},"content":"     * @param deadline The date of the Deadline.","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"hanif-kamal"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"hanif-kamal"},"content":"    public Deadline(String taskName, boolean isDone, LocalDate deadline) {","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"hanif-kamal"},"content":"        super(taskName, isDone);","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"hanif-kamal"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"hanif-kamal"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":24,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":25,"author":{"gitId":"hanif-kamal"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"hanif-kamal"},"content":"     * Returns the string representation of the Deadline.","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"hanif-kamal"},"content":"     * @return The string representation of the Deadline.","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"hanif-kamal"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"hanif-kamal"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":30,"author":{"gitId":"hanif-kamal"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":31,"author":{"gitId":"hanif-kamal"},"content":"        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy\");","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"hanif-kamal"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + this.deadline.format(dtf) + \")\";","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"hanif-kamal"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":34,"author":{"gitId":"hanif-kamal"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"hanif-kamal":34}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hanif-kamal"},"content":"package duke.task;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"hanif-kamal"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"hanif-kamal"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"hanif-kamal"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"hanif-kamal"},"content":" * Represents an Event, a subtype of Task. An Event also includes information of when the Event is in the form of an","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"hanif-kamal"},"content":" * Event at, stored as a LocalDateTime.","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"hanif-kamal"},"content":" *","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"hanif-kamal"},"content":" * @author Hanif Kamal","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"hanif-kamal"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"hanif-kamal"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"hanif-kamal"},"content":"    private LocalDateTime at;","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"hanif-kamal"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"hanif-kamal"},"content":"     * Class constructor.","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"hanif-kamal"},"content":"     * @param taskName The name or description of the Event.","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"hanif-kamal"},"content":"     * @param isDone Whether or not the Event is done.","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"hanif-kamal"},"content":"     * @param at The date and time of the Event.","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"hanif-kamal"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"hanif-kamal"},"content":"    public Event(String taskName, boolean isDone, LocalDateTime at) {","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"hanif-kamal"},"content":"        super(taskName, isDone);","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"hanif-kamal"},"content":"        this.at \u003d at;","lastModifiedDate":"2021-08-18"},{"lineNumber":24,"author":{"gitId":"hanif-kamal"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":25,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":26,"author":{"gitId":"hanif-kamal"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"hanif-kamal"},"content":"     * Returns the string representation of the Event.","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"hanif-kamal"},"content":"     * @return The string representation of the Event.","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"hanif-kamal"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"hanif-kamal"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":31,"author":{"gitId":"hanif-kamal"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":32,"author":{"gitId":"hanif-kamal"},"content":"        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"dd MMM yyy hh:mm a\");","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"hanif-kamal"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + this.at.format(dtf) + \")\";","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"hanif-kamal"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":35,"author":{"gitId":"hanif-kamal"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"hanif-kamal":35}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hanif-kamal"},"content":"package duke.task;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"hanif-kamal"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"hanif-kamal"},"content":" * Represents a Task, which contains a Task name and a boolean variable which shows whether or not the task","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"hanif-kamal"},"content":" * is done.","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"hanif-kamal"},"content":" *","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"hanif-kamal"},"content":" * @author Hanif Kamal","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"hanif-kamal"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"hanif-kamal"},"content":"public class Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"hanif-kamal"},"content":"    private String taskName;","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"hanif-kamal"},"content":"    private boolean isDone;","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"hanif-kamal"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"hanif-kamal"},"content":"     * Class constructor to initialize a Task.","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"hanif-kamal"},"content":"     * @param taskName The name or description of the Task.","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"hanif-kamal"},"content":"     * @param isDone Whether or not the Task is done.","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"hanif-kamal"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"hanif-kamal"},"content":"    public Task(String taskName, boolean isDone) {","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"hanif-kamal"},"content":"        this.taskName \u003d taskName;","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"hanif-kamal"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"hanif-kamal"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"hanif-kamal"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"hanif-kamal"},"content":"     * Sets the Task as done.","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"hanif-kamal"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"hanif-kamal"},"content":"    public void setDone() {","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"hanif-kamal"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"hanif-kamal"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"hanif-kamal"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"hanif-kamal"},"content":"     * Gets the Task name.","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"hanif-kamal"},"content":"     * @return String representation of the Task name.","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"hanif-kamal"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"hanif-kamal"},"content":"    public String getTaskName() {","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"hanif-kamal"},"content":"        return this.taskName;","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"hanif-kamal"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":37,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":38,"author":{"gitId":"hanif-kamal"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"hanif-kamal"},"content":"     * Returns the string representation of the Task.","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"hanif-kamal"},"content":"     * @return The string representation of the Task.","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"hanif-kamal"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"hanif-kamal"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":43,"author":{"gitId":"hanif-kamal"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":44,"author":{"gitId":"hanif-kamal"},"content":"        return this.isDone ? \"[X] \" + this.taskName : \"[] \" + this.taskName;","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"hanif-kamal"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":46,"author":{"gitId":"hanif-kamal"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"hanif-kamal":46}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hanif-kamal"},"content":"package duke.task;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"hanif-kamal"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"hanif-kamal"},"content":" * Represents a Todo, a subtype of Task.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"hanif-kamal"},"content":" *","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"hanif-kamal"},"content":" * @author Hanif Kamal","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"hanif-kamal"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"hanif-kamal"},"content":"public class Todo extends Task{","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"hanif-kamal"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"hanif-kamal"},"content":"     * Class constructor to initialize a Todo.","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"hanif-kamal"},"content":"     * @param taskName The name or description of the Todo.","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"hanif-kamal"},"content":"     * @param isDone Whether or not the Todo is done.","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"hanif-kamal"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"hanif-kamal"},"content":"    public Todo(String taskName, boolean isDone) {","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"hanif-kamal"},"content":"        super(taskName, isDone);","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"hanif-kamal"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"hanif-kamal"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"hanif-kamal"},"content":"     * Returns the string representation of the Todo.","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"hanif-kamal"},"content":"     * @return The string representation of the Todo.","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"hanif-kamal"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"hanif-kamal"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":24,"author":{"gitId":"hanif-kamal"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":25,"author":{"gitId":"hanif-kamal"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2021-08-18"},{"lineNumber":26,"author":{"gitId":"hanif-kamal"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":27,"author":{"gitId":"hanif-kamal"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"hanif-kamal":27}},{"path":"src/test/java/duke/test/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hanif-kamal"},"content":"package duke.test;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"hanif-kamal"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"hanif-kamal"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"hanif-kamal"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"hanif-kamal"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"hanif-kamal"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"hanif-kamal"},"content":"public class DeadlineTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"hanif-kamal"},"content":"    private final DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"hanif-kamal"},"content":"    private final Deadline deadlineIncomplete \u003d new Deadline(\"test 1\", false,","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"hanif-kamal"},"content":"            LocalDate.parse(\"31/12/2021\", dtf));","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"hanif-kamal"},"content":"    private final Deadline deadlineComplete \u003d new Deadline(\"test 2\", true,","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"hanif-kamal"},"content":"            LocalDate.parse(\"01/08/2021\", dtf));","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"hanif-kamal"},"content":"    private final Deadline deadlineDifferentDateFormat \u003d new Deadline(\"test 3\", false,","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"hanif-kamal"},"content":"            LocalDate.of(2021, 9, 1));","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"hanif-kamal"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"hanif-kamal"},"content":"    public void toString_incompleteDeadline_success() {","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"hanif-kamal"},"content":"        assertEquals(\"[D][] test 1 (by: 31 Dec 2021)\", deadlineIncomplete.toString());","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"hanif-kamal"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"hanif-kamal"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"hanif-kamal"},"content":"    public void toString_completeDeadline_success() {","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"hanif-kamal"},"content":"        assertEquals(\"[D][X] test 2 (by: 01 Aug 2021)\", deadlineComplete.toString());","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"hanif-kamal"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"hanif-kamal"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"hanif-kamal"},"content":"    public void toString_differentDateFormat_success() {","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"hanif-kamal"},"content":"        assertEquals(\"[D][] test 3 (by: 01 Sep 2021)\", deadlineDifferentDateFormat.toString());","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"hanif-kamal"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"hanif-kamal"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"hanif-kamal":34}},{"path":"src/test/java/duke/test/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hanif-kamal"},"content":"package duke.test;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"hanif-kamal"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"hanif-kamal"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"hanif-kamal"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"hanif-kamal"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"hanif-kamal"},"content":"import duke.task.Event;","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"hanif-kamal"},"content":"public class EventTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"hanif-kamal"},"content":"    private final DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"hanif-kamal"},"content":"    private final Event eventIncomplete \u003d new Event(\"test 1\", false,","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"hanif-kamal"},"content":"            LocalDateTime.parse(\"31/12/2021 2359\", dtf));","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"hanif-kamal"},"content":"    private final Event eventComplete \u003d new Event(\"test 2\", true,","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"hanif-kamal"},"content":"            LocalDateTime.parse(\"01/08/2021 0800\", dtf));","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"hanif-kamal"},"content":"    private final Event eventDifferentDateTimeFormat \u003d new Event(\"test 3\", false,","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"hanif-kamal"},"content":"            LocalDateTime.of(2021, 9, 1, 12, 0));","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"hanif-kamal"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"hanif-kamal"},"content":"    public void toString_incompleteEvent_success() {","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"hanif-kamal"},"content":"        assertEquals(\"[E][] test 1 (at: 31 Dec 2021 11:59 PM)\", eventIncomplete.toString());","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"hanif-kamal"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"hanif-kamal"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"hanif-kamal"},"content":"    public void toString_completeEvent_success() {","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"hanif-kamal"},"content":"        assertEquals(\"[E][X] test 2 (at: 01 Aug 2021 08:00 AM)\", eventComplete.toString());","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"hanif-kamal"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"hanif-kamal"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"hanif-kamal"},"content":"    public void toString_differentDateFormat_success() {","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"hanif-kamal"},"content":"        assertEquals(\"[E][] test 3 (at: 01 Sep 2021 12:00 PM)\", eventDifferentDateTimeFormat.toString());","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"hanif-kamal"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"hanif-kamal"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"hanif-kamal":34}},{"path":"src/test/java/duke/test/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hanif-kamal"},"content":"package duke.test;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"hanif-kamal"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"hanif-kamal"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"hanif-kamal"},"content":"import duke.task.Todo;","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"hanif-kamal"},"content":"public class TodoTest {","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"hanif-kamal"},"content":"    private final Todo todoIncomplete \u003d new Todo(\"test 1\", false);","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"hanif-kamal"},"content":"    private final Todo todoComplete \u003d new Todo(\"test 2\", true);","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"hanif-kamal"},"content":"    @Test","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"hanif-kamal"},"content":"    public void toString_incompleteTask_success() {","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"hanif-kamal"},"content":"        assertEquals(\"[T][] test 1\", todoIncomplete.toString());","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"hanif-kamal"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"hanif-kamal"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"hanif-kamal"},"content":"    @Test","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"hanif-kamal"},"content":"    public void toString_completeTask_success() {","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"hanif-kamal"},"content":"        assertEquals(\"[T][X] test 2\", todoComplete.toString());","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"hanif-kamal"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"hanif-kamal"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"hanif-kamal":22}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"hanif-kamal"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":2,"author":{"gitId":"hanif-kamal"},"content":"list aaa","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"hanif-kamal"},"content":"done","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"hanif-kamal"},"content":"done aaa","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"hanif-kamal"},"content":"done 5 aaa","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"hanif-kamal"},"content":"done 1","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"hanif-kamal"},"content":"delete","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"hanif-kamal"},"content":"delete 1","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"hanif-kamal"},"content":"deadline","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"hanif-kamal"},"content":"deadline aaa","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"hanif-kamal"},"content":"deadline aaa /by","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"hanif-kamal"},"content":"deadline code /by Sunday 2359","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"hanif-kamal"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"hanif-kamal"},"content":"event","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"hanif-kamal"},"content":"event aaa","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"hanif-kamal"},"content":"event aaa /at","lastModifiedDate":"2021-08-19"},{"lineNumber":17,"author":{"gitId":"hanif-kamal"},"content":"event lunch /at Sunday 1pm-3pm","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"hanif-kamal"},"content":"todo","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"hanif-kamal"},"content":"todo exercise","lastModifiedDate":"2021-08-19"},{"lineNumber":20,"author":{"gitId":"hanif-kamal"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":21,"author":{"gitId":"hanif-kamal"},"content":"done 0","lastModifiedDate":"2021-08-19"},{"lineNumber":22,"author":{"gitId":"hanif-kamal"},"content":"done 1","lastModifiedDate":"2021-08-19"},{"lineNumber":23,"author":{"gitId":"hanif-kamal"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":24,"author":{"gitId":"hanif-kamal"},"content":"done 2","lastModifiedDate":"2021-08-19"},{"lineNumber":25,"author":{"gitId":"hanif-kamal"},"content":"done 3","lastModifiedDate":"2021-08-19"},{"lineNumber":26,"author":{"gitId":"hanif-kamal"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":27,"author":{"gitId":"hanif-kamal"},"content":"delete 3","lastModifiedDate":"2021-08-19"},{"lineNumber":28,"author":{"gitId":"hanif-kamal"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":29,"author":{"gitId":"hanif-kamal"},"content":"bye bye","lastModifiedDate":"2021-08-19"},{"lineNumber":30,"author":{"gitId":"hanif-kamal"},"content":"bye","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"hanif-kamal":30}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"hanif-kamal"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"hanif-kamal"},"content":"java -classpath ..\\bin duke/Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"hanif-kamal":2,"-":19}}]

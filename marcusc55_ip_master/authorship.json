[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"marcusc55"},"content":"# Duke Chatbot ","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"marcusc55"},"content":"\u003e \"Your mind is for having ideas, not holding them.\" - David Allen ([source](https://dansilvestre.com/productivity-quotes))","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"marcusc55"},"content":"Duke is a chatbot written in **Java**! Duke helps you to remember and manage your tasks.","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"marcusc55"},"content":"Duke","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"marcusc55"},"content":"1. is easy to use","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"marcusc55"},"content":"2. supports multiple types of tasks","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"marcusc55"},"content":"   1. To-dos","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"marcusc55"},"content":"   2. Deadlines","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"marcusc55"},"content":"   3. Events","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"marcusc55"},"content":"and Duke can help you to:","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"marcusc55"},"content":"* Add tasks","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"marcusc55"},"content":"* View tasks","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"marcusc55"},"content":"* Remove tasks","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"marcusc55"},"content":"* Mark tasks as done","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"marcusc55"},"content":"* Show your tasks","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"marcusc55"},"content":"* Search for tasks","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"marcusc55"},"content":"You can download Duke from [here](https://github.com/marcusc55/ip/releases/)!","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"marcusc55"},"content":"Features:","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"marcusc55"},"content":"- [x] Managing tasks","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"marcusc55"},"content":"- [x] Managing deadlines and events with dates","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"marcusc55"},"content":"- [ ] GUI support (Coming soon!)","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"marcusc55"},"content":"***","lastModifiedDate":"2021-08-31"},{"lineNumber":30,"author":{"gitId":"marcusc55"},"content":"If you are a Java programmer, you can use it to practice Java too! Here\u0027s the `Launcher` method","lastModifiedDate":"2021-08-31"},{"lineNumber":31,"author":{"gitId":"marcusc55"},"content":"```java","lastModifiedDate":"2021-08-31"},{"lineNumber":32,"author":{"gitId":"marcusc55"},"content":"public class Launcher { ","lastModifiedDate":"2021-08-31"},{"lineNumber":33,"author":{"gitId":"marcusc55"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-31"},{"lineNumber":34,"author":{"gitId":"marcusc55"},"content":"      Application.launch(Main.class, args);","lastModifiedDate":"2021-08-31"},{"lineNumber":35,"author":{"gitId":"marcusc55"},"content":"   }","lastModifiedDate":"2021-08-31"},{"lineNumber":36,"author":{"gitId":"marcusc55"},"content":"}","lastModifiedDate":"2021-08-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"marcusc55":32,"-":5}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"marcusc55"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"marcusc55"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"marcusc55"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"marcusc55"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"marcusc55"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"marcusc55"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"marcusc55"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"marcusc55"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"marcusc55"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"marcusc55"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"marcusc55"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"marcusc55"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"marcusc55"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"marcusc55"},"content":"    mainClassName \u003d \"duke.Launcher\"","lastModifiedDate":"2021-08-31"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"marcusc55"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2021-09-07"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"marcusc55":16,"-":45}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusc55"},"content":"package duke;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"marcusc55"},"content":"import duke.command.Command;","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"marcusc55"},"content":"/**","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"marcusc55"},"content":" * This class represents an instance of the Duke chatbot.","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"marcusc55"},"content":" */","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"marcusc55"},"content":"public class Duke {","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"marcusc55"},"content":"    private TaskList list;","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"marcusc55"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"marcusc55"},"content":"     * Constructor for a Duke instance.","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"marcusc55"},"content":"     * Initialises Duke\u0027s task list.","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"marcusc55"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"marcusc55"},"content":"    public Duke() {","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"marcusc55"},"content":"        try {","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"marcusc55"},"content":"            list \u003d new TaskList();","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"marcusc55"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"marcusc55"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"marcusc55"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"marcusc55"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"marcusc55"},"content":"     * Gets the task list stored in the chatbot.","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"marcusc55"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"marcusc55"},"content":"     * @return Task list of the current instance.","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"marcusc55"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":28,"author":{"gitId":"marcusc55"},"content":"    public TaskList getList() {","lastModifiedDate":"2021-08-28"},{"lineNumber":29,"author":{"gitId":"marcusc55"},"content":"        return list;","lastModifiedDate":"2021-09-07"},{"lineNumber":30,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":31,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":32,"author":{"gitId":"marcusc55"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":33,"author":{"gitId":"marcusc55"},"content":"     * Listens for user input and parses user\u0027s input.","lastModifiedDate":"2021-08-28"},{"lineNumber":34,"author":{"gitId":"marcusc55"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":35,"author":{"gitId":"marcusc55"},"content":"     * @throws DukeException If input is invalid.","lastModifiedDate":"2021-08-28"},{"lineNumber":36,"author":{"gitId":"marcusc55"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":37,"author":{"gitId":"marcusc55"},"content":"    public String listen(String input) throws DukeException {","lastModifiedDate":"2021-08-31"},{"lineNumber":38,"author":{"gitId":"marcusc55"},"content":"        assert list !\u003d null : \"Duke\u0027s task list must be initialised before accepting commands.\";","lastModifiedDate":"2021-09-07"},{"lineNumber":39,"author":{"gitId":"marcusc55"},"content":"        Parser parser \u003d new Parser(input);","lastModifiedDate":"2021-08-28"},{"lineNumber":40,"author":{"gitId":"marcusc55"},"content":"        Command command \u003d Command.identifyCommand(parser.getCommandWord());","lastModifiedDate":"2021-08-28"},{"lineNumber":41,"author":{"gitId":"marcusc55"},"content":"        return command.run(this, parser);","lastModifiedDate":"2021-08-31"},{"lineNumber":42,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":43,"author":{"gitId":"marcusc55"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"marcusc55":43}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusc55"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"marcusc55"},"content":"/**","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"marcusc55"},"content":" * This class handles exceptions specific to Duke.","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"marcusc55"},"content":" */","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"marcusc55"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"marcusc55"},"content":"    public DukeException(String message) {","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"marcusc55"},"content":"        super(message);","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"marcusc55"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"marcusc55":10}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusc55"},"content":"package duke;","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"marcusc55"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"marcusc55"},"content":"/**","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"marcusc55"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"marcusc55"},"content":" */","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"marcusc55"},"content":"public class Launcher {","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"marcusc55"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"marcusc55"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"marcusc55"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"marcusc55":12}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusc55"},"content":"package duke;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"marcusc55"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"marcusc55"},"content":"import duke.ui.MainWindow;","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"marcusc55"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"marcusc55"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"marcusc55"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"marcusc55"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"marcusc55"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"marcusc55"},"content":"/**","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"marcusc55"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"marcusc55"},"content":" */","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"marcusc55"},"content":"public class Main extends Application {","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"marcusc55"},"content":"    private final Duke duke \u003d new Duke();","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"marcusc55"},"content":"    @Override","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"marcusc55"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"marcusc55"},"content":"        try {","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"marcusc55"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"marcusc55"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"marcusc55"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"marcusc55"},"content":"            stage.setScene(scene);","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"marcusc55"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"marcusc55"},"content":"            stage.show();","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"marcusc55"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"marcusc55"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-31"},{"lineNumber":30,"author":{"gitId":"marcusc55"},"content":"        }","lastModifiedDate":"2021-08-31"},{"lineNumber":31,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"marcusc55"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"marcusc55":32}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusc55"},"content":"package duke;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"marcusc55"},"content":"import static java.lang.Integer.parseInt;","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"marcusc55"},"content":"import java.time.DateTimeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"marcusc55"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"marcusc55"},"content":"/**","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"marcusc55"},"content":" * This class represents a parser, which extracts the user\u0027s input into commands","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"marcusc55"},"content":" * for Duke.","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"marcusc55"},"content":" */","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"marcusc55"},"content":"public class Parser {","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"marcusc55"},"content":"    private final String commandWord;","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"marcusc55"},"content":"    private final String arguments;","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"marcusc55"},"content":"    private String dateString;","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"marcusc55"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"marcusc55"},"content":"     * Constructor for a parser.","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"marcusc55"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"marcusc55"},"content":"     * @param input User input.","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"marcusc55"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"marcusc55"},"content":"    public Parser(String input) {","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"marcusc55"},"content":"        String[] splitCommand \u003d input.split(\" \", 2);","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"marcusc55"},"content":"        commandWord \u003d splitCommand[0];","lastModifiedDate":"2021-09-07"},{"lineNumber":25,"author":{"gitId":"marcusc55"},"content":"        arguments \u003d splitCommand.length \u003e 1 ? splitCommand[1] : null;","lastModifiedDate":"2021-09-07"},{"lineNumber":26,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"marcusc55"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"marcusc55"},"content":"     * Gets the command word that the user inputted.","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"marcusc55"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":31,"author":{"gitId":"marcusc55"},"content":"     * @return Command word.","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"marcusc55"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"marcusc55"},"content":"    public String getCommandWord() {","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"marcusc55"},"content":"        return commandWord;","lastModifiedDate":"2021-09-07"},{"lineNumber":35,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"marcusc55"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"marcusc55"},"content":"     * Gets the number in the argument for done and delete commands.","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"marcusc55"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":40,"author":{"gitId":"marcusc55"},"content":"     * @return Array index provided by user.","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"marcusc55"},"content":"     * @throws DukeException If no number is provided.","lastModifiedDate":"2021-08-28"},{"lineNumber":42,"author":{"gitId":"marcusc55"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"marcusc55"},"content":"    public int getNumber() throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"marcusc55"},"content":"        if (arguments \u003d\u003d null) {","lastModifiedDate":"2021-09-07"},{"lineNumber":45,"author":{"gitId":"marcusc55"},"content":"            throw new DukeException(\"No number provided.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"marcusc55"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"marcusc55"},"content":"        // Retrieve value inputted by user and subtract 1 to get the index in the array.","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"marcusc55"},"content":"        return parseInt(arguments) - 1;","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"marcusc55"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":52,"author":{"gitId":"marcusc55"},"content":"     * Gets the search term in the argument for the find command","lastModifiedDate":"2021-08-28"},{"lineNumber":53,"author":{"gitId":"marcusc55"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":54,"author":{"gitId":"marcusc55"},"content":"     * @return Search term inputted by user.","lastModifiedDate":"2021-08-28"},{"lineNumber":55,"author":{"gitId":"marcusc55"},"content":"     * @throws DukeException If no search term provided.","lastModifiedDate":"2021-08-28"},{"lineNumber":56,"author":{"gitId":"marcusc55"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":57,"author":{"gitId":"marcusc55"},"content":"    public String getSearchTerm() throws DukeException {","lastModifiedDate":"2021-08-28"},{"lineNumber":58,"author":{"gitId":"marcusc55"},"content":"        if (arguments \u003d\u003d null) {","lastModifiedDate":"2021-09-07"},{"lineNumber":59,"author":{"gitId":"marcusc55"},"content":"            throw new DukeException(\"No search term provided.\");","lastModifiedDate":"2021-08-28"},{"lineNumber":60,"author":{"gitId":"marcusc55"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":61,"author":{"gitId":"marcusc55"},"content":"        return arguments;","lastModifiedDate":"2021-08-28"},{"lineNumber":62,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":63,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":64,"author":{"gitId":"marcusc55"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"marcusc55"},"content":"     * Parse arguments if type is task.","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"marcusc55"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":67,"author":{"gitId":"marcusc55"},"content":"     * @return Task name.","lastModifiedDate":"2021-09-07"},{"lineNumber":68,"author":{"gitId":"marcusc55"},"content":"     * @throws DukeException If name is not present.","lastModifiedDate":"2021-08-28"},{"lineNumber":69,"author":{"gitId":"marcusc55"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"marcusc55"},"content":"    public String getTaskName() throws DukeException {","lastModifiedDate":"2021-09-07"},{"lineNumber":71,"author":{"gitId":"marcusc55"},"content":"        if (arguments \u003d\u003d null) {","lastModifiedDate":"2021-09-07"},{"lineNumber":72,"author":{"gitId":"marcusc55"},"content":"            throw new DukeException(\"Task needs to have a name.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"marcusc55"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"marcusc55"},"content":"        // Split message from due date","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"marcusc55"},"content":"        String[] splitMessage \u003d arguments.split(\"/\", 2);","lastModifiedDate":"2021-09-07"},{"lineNumber":76,"author":{"gitId":"marcusc55"},"content":"        dateString \u003d splitMessage.length \u003e 1 ? splitMessage[1] : null;","lastModifiedDate":"2021-09-07"},{"lineNumber":77,"author":{"gitId":"marcusc55"},"content":"        return splitMessage[0];","lastModifiedDate":"2021-09-07"},{"lineNumber":78,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":79,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":80,"author":{"gitId":"marcusc55"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":81,"author":{"gitId":"marcusc55"},"content":"     * Parse task date to LocalDateTime.","lastModifiedDate":"2021-08-25"},{"lineNumber":82,"author":{"gitId":"marcusc55"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":83,"author":{"gitId":"marcusc55"},"content":"     * @return Task date.","lastModifiedDate":"2021-09-07"},{"lineNumber":84,"author":{"gitId":"marcusc55"},"content":"     * @throws DukeException If date is invalid.","lastModifiedDate":"2021-08-28"},{"lineNumber":85,"author":{"gitId":"marcusc55"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":86,"author":{"gitId":"marcusc55"},"content":"    public LocalDateTime getTaskDate() throws DukeException {","lastModifiedDate":"2021-09-07"},{"lineNumber":87,"author":{"gitId":"marcusc55"},"content":"        LocalDateTime date;","lastModifiedDate":"2021-09-07"},{"lineNumber":88,"author":{"gitId":"marcusc55"},"content":"        // Error handling: no time provided.","lastModifiedDate":"2021-08-25"},{"lineNumber":89,"author":{"gitId":"marcusc55"},"content":"        if (dateString \u003d\u003d null) {","lastModifiedDate":"2021-08-25"},{"lineNumber":90,"author":{"gitId":"marcusc55"},"content":"            throw new DukeException(\"Date cannot be empty.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":91,"author":{"gitId":"marcusc55"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":92,"author":{"gitId":"marcusc55"},"content":"        // Split date and time from \"by\" or \"at\"","lastModifiedDate":"2021-08-25"},{"lineNumber":93,"author":{"gitId":"marcusc55"},"content":"        String[] splitDate \u003d dateString.split(\" \", 3);","lastModifiedDate":"2021-08-25"},{"lineNumber":94,"author":{"gitId":"marcusc55"},"content":"        // Split day, month, year","lastModifiedDate":"2021-08-25"},{"lineNumber":95,"author":{"gitId":"marcusc55"},"content":"        String[] splitDateElements \u003d splitDate[1].split(\"/\", 3);","lastModifiedDate":"2021-08-25"},{"lineNumber":96,"author":{"gitId":"marcusc55"},"content":"        int day \u003d parseInt(splitDateElements[0]);","lastModifiedDate":"2021-08-25"},{"lineNumber":97,"author":{"gitId":"marcusc55"},"content":"        int month \u003d parseInt(splitDateElements[1]);","lastModifiedDate":"2021-08-25"},{"lineNumber":98,"author":{"gitId":"marcusc55"},"content":"        int year \u003d parseInt(splitDateElements[2]);","lastModifiedDate":"2021-08-25"},{"lineNumber":99,"author":{"gitId":"marcusc55"},"content":"        // Split hours and minutes","lastModifiedDate":"2021-08-25"},{"lineNumber":100,"author":{"gitId":"marcusc55"},"content":"        int hours \u003d parseInt(splitDate[2].substring(0, 2));","lastModifiedDate":"2021-08-25"},{"lineNumber":101,"author":{"gitId":"marcusc55"},"content":"        int mins \u003d parseInt(splitDate[2].substring(2, 4));","lastModifiedDate":"2021-08-25"},{"lineNumber":102,"author":{"gitId":"marcusc55"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":103,"author":{"gitId":"marcusc55"},"content":"            date \u003d LocalDateTime.of(year, month, day, hours, mins);","lastModifiedDate":"2021-08-25"},{"lineNumber":104,"author":{"gitId":"marcusc55"},"content":"        } catch (DateTimeException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":105,"author":{"gitId":"marcusc55"},"content":"            throw new DukeException(\"Invalid date.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":106,"author":{"gitId":"marcusc55"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":107,"author":{"gitId":"marcusc55"},"content":"        return date;","lastModifiedDate":"2021-09-07"},{"lineNumber":108,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":109,"author":{"gitId":"marcusc55"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"marcusc55":109}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusc55"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"marcusc55"},"content":"import static java.lang.Integer.parseInt;","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"marcusc55"},"content":"import java.io.File;","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"marcusc55"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"marcusc55"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"marcusc55"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"marcusc55"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"marcusc55"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"marcusc55"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"marcusc55"},"content":"import java.util.List;","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"marcusc55"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"marcusc55"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"marcusc55"},"content":"import duke.task.Event;","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"marcusc55"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"marcusc55"},"content":"import duke.task.Todo;","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"marcusc55"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"marcusc55"},"content":" * This class represents a Storage object, which saves the user\u0027s tasks into a text file.","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"marcusc55"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"marcusc55"},"content":"public class Storage {","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"marcusc55"},"content":"    private static final DateTimeFormatter FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"marcusc55"},"content":"    private final File file;","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"marcusc55"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"marcusc55"},"content":"     * Constructor for a Storage object.","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"marcusc55"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"marcusc55"},"content":"     * @param path Path of the file where data should be saved.","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"marcusc55"},"content":"     * @throws IOException If an I/O error occurs.","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"marcusc55"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"marcusc55"},"content":"    public Storage(String path) throws IOException {","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"marcusc55"},"content":"        assert path !\u003d null : \"Path for file storage cannot be null.\";","lastModifiedDate":"2021-09-07"},{"lineNumber":35,"author":{"gitId":"marcusc55"},"content":"        file \u003d new File(path);","lastModifiedDate":"2021-09-07"},{"lineNumber":36,"author":{"gitId":"marcusc55"},"content":"        if (!file.getParentFile().exists()) {","lastModifiedDate":"2021-09-07"},{"lineNumber":37,"author":{"gitId":"marcusc55"},"content":"            file.getParentFile().mkdir();","lastModifiedDate":"2021-09-07"},{"lineNumber":38,"author":{"gitId":"marcusc55"},"content":"            file.createNewFile();","lastModifiedDate":"2021-09-07"},{"lineNumber":39,"author":{"gitId":"marcusc55"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"marcusc55"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"marcusc55"},"content":"     * Saves a lists of tasks into a text file.","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"marcusc55"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"marcusc55"},"content":"     * @param list List of tasks to be saved.","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"marcusc55"},"content":"     * @throws IOException If an I/O error occurs.","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"marcusc55"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"marcusc55"},"content":"    public void save(List\u003cTask\u003e list) throws IOException {","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"marcusc55"},"content":"        FileWriter writer \u003d new FileWriter(file);","lastModifiedDate":"2021-09-07"},{"lineNumber":50,"author":{"gitId":"marcusc55"},"content":"        StringBuilder output \u003d new StringBuilder();","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"marcusc55"},"content":"        for (Task t : list) {","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"marcusc55"},"content":"            output.append(formatTask(t));","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"marcusc55"},"content":"            output.append(\"\\n\");","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"marcusc55"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"marcusc55"},"content":"        writer.write(output.toString());","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"marcusc55"},"content":"        writer.close();","lastModifiedDate":"2021-08-24"},{"lineNumber":57,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"marcusc55"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":60,"author":{"gitId":"marcusc55"},"content":"     * Creates a list of tasks from a file.","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"marcusc55"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"marcusc55"},"content":"     * @return List of Tasks extracted from file.","lastModifiedDate":"2021-08-24"},{"lineNumber":63,"author":{"gitId":"marcusc55"},"content":"     * @throws FileNotFoundException If file is not found.","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"marcusc55"},"content":"     * @throws DukeException         If task import fails to parse task list.","lastModifiedDate":"2021-08-29"},{"lineNumber":65,"author":{"gitId":"marcusc55"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":66,"author":{"gitId":"marcusc55"},"content":"    public List\u003cTask\u003e readFile() throws FileNotFoundException, DukeException {","lastModifiedDate":"2021-08-29"},{"lineNumber":67,"author":{"gitId":"marcusc55"},"content":"        List\u003cTask\u003e output \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-24"},{"lineNumber":68,"author":{"gitId":"marcusc55"},"content":"        Scanner sc \u003d new Scanner(file);","lastModifiedDate":"2021-09-07"},{"lineNumber":69,"author":{"gitId":"marcusc55"},"content":"        while (sc.hasNext()) {","lastModifiedDate":"2021-08-24"},{"lineNumber":70,"author":{"gitId":"marcusc55"},"content":"            output.add(readTask(sc.nextLine()));","lastModifiedDate":"2021-08-24"},{"lineNumber":71,"author":{"gitId":"marcusc55"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":72,"author":{"gitId":"marcusc55"},"content":"        return output;","lastModifiedDate":"2021-08-24"},{"lineNumber":73,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":74,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":75,"author":{"gitId":"marcusc55"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":76,"author":{"gitId":"marcusc55"},"content":"     * Formats a task to be saved in the file.","lastModifiedDate":"2021-08-24"},{"lineNumber":77,"author":{"gitId":"marcusc55"},"content":"     * Tasks are formatted in the following way:","lastModifiedDate":"2021-08-24"},{"lineNumber":78,"author":{"gitId":"marcusc55"},"content":"     * identifier | completion status | name | date","lastModifiedDate":"2021-08-24"},{"lineNumber":79,"author":{"gitId":"marcusc55"},"content":"     * Identifier is a single letter representing the type of task.","lastModifiedDate":"2021-08-24"},{"lineNumber":80,"author":{"gitId":"marcusc55"},"content":"     * Completion status is represented by 0 (not complete) or 1 (complete).","lastModifiedDate":"2021-08-24"},{"lineNumber":81,"author":{"gitId":"marcusc55"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":82,"author":{"gitId":"marcusc55"},"content":"     * @param task Task to be formatted.","lastModifiedDate":"2021-08-24"},{"lineNumber":83,"author":{"gitId":"marcusc55"},"content":"     * @return String containing the task details.","lastModifiedDate":"2021-08-24"},{"lineNumber":84,"author":{"gitId":"marcusc55"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":85,"author":{"gitId":"marcusc55"},"content":"    private String formatTask(Task task) {","lastModifiedDate":"2021-08-24"},{"lineNumber":86,"author":{"gitId":"marcusc55"},"content":"        String identifier \u003d task.getType();","lastModifiedDate":"2021-08-24"},{"lineNumber":87,"author":{"gitId":"marcusc55"},"content":"        String completionStatus \u003d task.isComplete() ? \"1\" : \"0\";","lastModifiedDate":"2021-08-24"},{"lineNumber":88,"author":{"gitId":"marcusc55"},"content":"        String dateString \u003d \"\";","lastModifiedDate":"2021-08-25"},{"lineNumber":89,"author":{"gitId":"marcusc55"},"content":"        if (task instanceof Deadline) {","lastModifiedDate":"2021-08-24"},{"lineNumber":90,"author":{"gitId":"marcusc55"},"content":"            Deadline d \u003d (Deadline) task;","lastModifiedDate":"2021-08-24"},{"lineNumber":91,"author":{"gitId":"marcusc55"},"content":"            LocalDateTime date \u003d d.getDate();","lastModifiedDate":"2021-08-25"},{"lineNumber":92,"author":{"gitId":"marcusc55"},"content":"            dateString \u003d date.format(FORMATTER);","lastModifiedDate":"2021-08-25"},{"lineNumber":93,"author":{"gitId":"marcusc55"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":94,"author":{"gitId":"marcusc55"},"content":"        if (task instanceof Event) {","lastModifiedDate":"2021-08-24"},{"lineNumber":95,"author":{"gitId":"marcusc55"},"content":"            Event e \u003d (Event) task;","lastModifiedDate":"2021-08-24"},{"lineNumber":96,"author":{"gitId":"marcusc55"},"content":"            LocalDateTime date \u003d e.getDate();","lastModifiedDate":"2021-08-25"},{"lineNumber":97,"author":{"gitId":"marcusc55"},"content":"            dateString \u003d date.format(FORMATTER);","lastModifiedDate":"2021-08-25"},{"lineNumber":98,"author":{"gitId":"marcusc55"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":99,"author":{"gitId":"marcusc55"},"content":"        return String.join(\"|\", identifier, completionStatus, task.getName(), dateString);","lastModifiedDate":"2021-08-25"},{"lineNumber":100,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":101,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":102,"author":{"gitId":"marcusc55"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":103,"author":{"gitId":"marcusc55"},"content":"     * Creates a task from the string provided. String must be in the form:","lastModifiedDate":"2021-08-24"},{"lineNumber":104,"author":{"gitId":"marcusc55"},"content":"     * identifier | completion status | name | date","lastModifiedDate":"2021-08-24"},{"lineNumber":105,"author":{"gitId":"marcusc55"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":106,"author":{"gitId":"marcusc55"},"content":"     * @param input String representing the task to be created.","lastModifiedDate":"2021-08-24"},{"lineNumber":107,"author":{"gitId":"marcusc55"},"content":"     * @return Task created.","lastModifiedDate":"2021-08-24"},{"lineNumber":108,"author":{"gitId":"marcusc55"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":109,"author":{"gitId":"marcusc55"},"content":"    private Task readTask(String input) throws DukeException {","lastModifiedDate":"2021-08-29"},{"lineNumber":110,"author":{"gitId":"marcusc55"},"content":"        String[] splitInput \u003d input.split(\"\\\\|\", -1);","lastModifiedDate":"2021-08-24"},{"lineNumber":111,"author":{"gitId":"marcusc55"},"content":"        String identifier \u003d splitInput[0];","lastModifiedDate":"2021-08-24"},{"lineNumber":112,"author":{"gitId":"marcusc55"},"content":"        boolean isComplete \u003d parseInt(splitInput[1]) \u003d\u003d 1;","lastModifiedDate":"2021-08-24"},{"lineNumber":113,"author":{"gitId":"marcusc55"},"content":"        Task task;","lastModifiedDate":"2021-08-29"},{"lineNumber":114,"author":{"gitId":"marcusc55"},"content":"        switch (identifier) {","lastModifiedDate":"2021-08-24"},{"lineNumber":115,"author":{"gitId":"marcusc55"},"content":"        case Todo.IDENTIFIER:","lastModifiedDate":"2021-08-24"},{"lineNumber":116,"author":{"gitId":"marcusc55"},"content":"            task \u003d new Todo(splitInput[2]);","lastModifiedDate":"2021-08-24"},{"lineNumber":117,"author":{"gitId":"marcusc55"},"content":"            break;","lastModifiedDate":"2021-08-24"},{"lineNumber":118,"author":{"gitId":"marcusc55"},"content":"        case Deadline.IDENTIFIER:","lastModifiedDate":"2021-08-24"},{"lineNumber":119,"author":{"gitId":"marcusc55"},"content":"            task \u003d new Deadline(splitInput[2], parseDate(splitInput[3]));","lastModifiedDate":"2021-08-25"},{"lineNumber":120,"author":{"gitId":"marcusc55"},"content":"            break;","lastModifiedDate":"2021-08-24"},{"lineNumber":121,"author":{"gitId":"marcusc55"},"content":"        case Event.IDENTIFIER:","lastModifiedDate":"2021-08-24"},{"lineNumber":122,"author":{"gitId":"marcusc55"},"content":"            task \u003d new Event(splitInput[2], parseDate(splitInput[3]));","lastModifiedDate":"2021-08-25"},{"lineNumber":123,"author":{"gitId":"marcusc55"},"content":"            break;","lastModifiedDate":"2021-08-24"},{"lineNumber":124,"author":{"gitId":"marcusc55"},"content":"        default:","lastModifiedDate":"2021-08-29"},{"lineNumber":125,"author":{"gitId":"marcusc55"},"content":"            throw new DukeException(\"Imported task with invalid type.\");","lastModifiedDate":"2021-08-29"},{"lineNumber":126,"author":{"gitId":"marcusc55"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":127,"author":{"gitId":"marcusc55"},"content":"        if (isComplete) {","lastModifiedDate":"2021-08-24"},{"lineNumber":128,"author":{"gitId":"marcusc55"},"content":"            task.setDone();","lastModifiedDate":"2021-08-24"},{"lineNumber":129,"author":{"gitId":"marcusc55"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":130,"author":{"gitId":"marcusc55"},"content":"        return task;","lastModifiedDate":"2021-08-24"},{"lineNumber":131,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":132,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":133,"author":{"gitId":"marcusc55"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":134,"author":{"gitId":"marcusc55"},"content":"     * Parses the date from a string.","lastModifiedDate":"2021-08-25"},{"lineNumber":135,"author":{"gitId":"marcusc55"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":136,"author":{"gitId":"marcusc55"},"content":"     * @param s String representing a date.","lastModifiedDate":"2021-08-25"},{"lineNumber":137,"author":{"gitId":"marcusc55"},"content":"     * @return LocalDateTime object representing the date.","lastModifiedDate":"2021-08-25"},{"lineNumber":138,"author":{"gitId":"marcusc55"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":139,"author":{"gitId":"marcusc55"},"content":"    private LocalDateTime parseDate(String s) {","lastModifiedDate":"2021-08-25"},{"lineNumber":140,"author":{"gitId":"marcusc55"},"content":"        String[] splitDate \u003d s.split(\" \", 2);","lastModifiedDate":"2021-08-25"},{"lineNumber":141,"author":{"gitId":"marcusc55"},"content":"        // Split day, month, year","lastModifiedDate":"2021-08-25"},{"lineNumber":142,"author":{"gitId":"marcusc55"},"content":"        String[] splitDateElements \u003d splitDate[0].split(\"/\", 3);","lastModifiedDate":"2021-08-25"},{"lineNumber":143,"author":{"gitId":"marcusc55"},"content":"        int day \u003d parseInt(splitDateElements[0]);","lastModifiedDate":"2021-08-25"},{"lineNumber":144,"author":{"gitId":"marcusc55"},"content":"        int month \u003d parseInt(splitDateElements[1]);","lastModifiedDate":"2021-08-25"},{"lineNumber":145,"author":{"gitId":"marcusc55"},"content":"        int year \u003d parseInt(splitDateElements[2]);","lastModifiedDate":"2021-08-25"},{"lineNumber":146,"author":{"gitId":"marcusc55"},"content":"        // Split hours and minutes","lastModifiedDate":"2021-08-25"},{"lineNumber":147,"author":{"gitId":"marcusc55"},"content":"        int hours \u003d parseInt(splitDate[1].substring(0, 2));","lastModifiedDate":"2021-08-25"},{"lineNumber":148,"author":{"gitId":"marcusc55"},"content":"        int mins \u003d parseInt(splitDate[1].substring(2, 4));","lastModifiedDate":"2021-08-25"},{"lineNumber":149,"author":{"gitId":"marcusc55"},"content":"        return LocalDateTime.of(year, month, day, hours, mins);","lastModifiedDate":"2021-08-25"},{"lineNumber":150,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":151,"author":{"gitId":"marcusc55"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"marcusc55":151}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusc55"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"marcusc55"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"marcusc55"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"marcusc55"},"content":"import java.util.List;","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"marcusc55"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"marcusc55"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"marcusc55"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"marcusc55"},"content":" * This class represents Duke\u0027s list of tasks.","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"marcusc55"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"marcusc55"},"content":"public class TaskList {","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"marcusc55"},"content":"    private static final String STORAGE_PATH \u003d \"data/duke.txt\";","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"marcusc55"},"content":"    private List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-07"},{"lineNumber":16,"author":{"gitId":"marcusc55"},"content":"    private Storage storage;","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"marcusc55"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"marcusc55"},"content":"     * Constructor for a TaskList.","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"marcusc55"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"marcusc55"},"content":"    public TaskList() throws DukeException {","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"marcusc55"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"marcusc55"},"content":"            // Load data from saved file, if present.","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"marcusc55"},"content":"            storage \u003d new Storage(STORAGE_PATH);","lastModifiedDate":"2021-09-07"},{"lineNumber":25,"author":{"gitId":"marcusc55"},"content":"            tasks \u003d storage.readFile();","lastModifiedDate":"2021-09-07"},{"lineNumber":26,"author":{"gitId":"marcusc55"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"marcusc55"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"marcusc55"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"marcusc55"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"marcusc55"},"content":"     * Adds a task to the task list.","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"marcusc55"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"marcusc55"},"content":"     * @param task Task to be added to the list.","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"marcusc55"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"marcusc55"},"content":"    public void add(Task task) {","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"marcusc55"},"content":"        tasks.add(task);","lastModifiedDate":"2021-09-07"},{"lineNumber":38,"author":{"gitId":"marcusc55"},"content":"        save();","lastModifiedDate":"2021-09-07"},{"lineNumber":39,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"marcusc55"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"marcusc55"},"content":"     * Gets a task from the task list.","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"marcusc55"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"marcusc55"},"content":"     * @param index Index of the task to be retrieved.","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"marcusc55"},"content":"     * @return Task at given index.","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"marcusc55"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"marcusc55"},"content":"    public Task get(int index) {","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"marcusc55"},"content":"        return tasks.get(index);","lastModifiedDate":"2021-09-07"},{"lineNumber":49,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"marcusc55"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"marcusc55"},"content":"     * Removes a task from the task list.","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"marcusc55"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"marcusc55"},"content":"     * @param index Index of the task to be removed.","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"marcusc55"},"content":"     * @return Removed task.","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"marcusc55"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"marcusc55"},"content":"    public Task remove(int index) {","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"marcusc55"},"content":"        Task task \u003d tasks.remove(index);","lastModifiedDate":"2021-09-07"},{"lineNumber":59,"author":{"gitId":"marcusc55"},"content":"        save();","lastModifiedDate":"2021-09-07"},{"lineNumber":60,"author":{"gitId":"marcusc55"},"content":"        return task;","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":63,"author":{"gitId":"marcusc55"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"marcusc55"},"content":"     * Marks a task as done.","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"marcusc55"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"marcusc55"},"content":"     * @param index Index of the task to be marked done.","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"marcusc55"},"content":"     * @return Task marked as done.","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"marcusc55"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"marcusc55"},"content":"    public Task setDone(int index) {","lastModifiedDate":"2021-08-24"},{"lineNumber":70,"author":{"gitId":"marcusc55"},"content":"        Task task \u003d tasks.get(index);","lastModifiedDate":"2021-09-07"},{"lineNumber":71,"author":{"gitId":"marcusc55"},"content":"        task.setDone();","lastModifiedDate":"2021-08-24"},{"lineNumber":72,"author":{"gitId":"marcusc55"},"content":"        save();","lastModifiedDate":"2021-09-07"},{"lineNumber":73,"author":{"gitId":"marcusc55"},"content":"        return task;","lastModifiedDate":"2021-08-24"},{"lineNumber":74,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":75,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":76,"author":{"gitId":"marcusc55"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":77,"author":{"gitId":"marcusc55"},"content":"     * Gets the number of tasks in the task list.","lastModifiedDate":"2021-08-25"},{"lineNumber":78,"author":{"gitId":"marcusc55"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":79,"author":{"gitId":"marcusc55"},"content":"     * @return Number of tasks in the task list.","lastModifiedDate":"2021-08-25"},{"lineNumber":80,"author":{"gitId":"marcusc55"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":81,"author":{"gitId":"marcusc55"},"content":"    public int size() {","lastModifiedDate":"2021-08-24"},{"lineNumber":82,"author":{"gitId":"marcusc55"},"content":"        return tasks.size();","lastModifiedDate":"2021-09-07"},{"lineNumber":83,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":84,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":85,"author":{"gitId":"marcusc55"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":86,"author":{"gitId":"marcusc55"},"content":"     * Searches task list for tasks with description containing search term.","lastModifiedDate":"2021-08-25"},{"lineNumber":87,"author":{"gitId":"marcusc55"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":88,"author":{"gitId":"marcusc55"},"content":"     * @param searchTerm Search term inputted by user.","lastModifiedDate":"2021-08-25"},{"lineNumber":89,"author":{"gitId":"marcusc55"},"content":"     * @return task list containing only tasks that match search term.","lastModifiedDate":"2021-08-25"},{"lineNumber":90,"author":{"gitId":"marcusc55"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":91,"author":{"gitId":"marcusc55"},"content":"    public TaskList search(String searchTerm) throws DukeException {","lastModifiedDate":"2021-08-29"},{"lineNumber":92,"author":{"gitId":"marcusc55"},"content":"        List\u003cTask\u003e matches \u003d tasks.stream().filter(task -\u003e task.getName().contains(searchTerm))","lastModifiedDate":"2021-09-07"},{"lineNumber":93,"author":{"gitId":"marcusc55"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2021-08-25"},{"lineNumber":94,"author":{"gitId":"marcusc55"},"content":"        TaskList output \u003d new TaskList();","lastModifiedDate":"2021-08-25"},{"lineNumber":95,"author":{"gitId":"marcusc55"},"content":"        output.tasks \u003d matches;","lastModifiedDate":"2021-09-07"},{"lineNumber":96,"author":{"gitId":"marcusc55"},"content":"        return output;","lastModifiedDate":"2021-08-25"},{"lineNumber":97,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":98,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":99,"author":{"gitId":"marcusc55"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":100,"author":{"gitId":"marcusc55"},"content":"     * Saves the task list to text file.","lastModifiedDate":"2021-08-25"},{"lineNumber":101,"author":{"gitId":"marcusc55"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":102,"author":{"gitId":"marcusc55"},"content":"    private void save() {","lastModifiedDate":"2021-08-24"},{"lineNumber":103,"author":{"gitId":"marcusc55"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":104,"author":{"gitId":"marcusc55"},"content":"            storage.save(tasks);","lastModifiedDate":"2021-09-07"},{"lineNumber":105,"author":{"gitId":"marcusc55"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":106,"author":{"gitId":"marcusc55"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-24"},{"lineNumber":107,"author":{"gitId":"marcusc55"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":108,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":109,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":110,"author":{"gitId":"marcusc55"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":111,"author":{"gitId":"marcusc55"},"content":"     * Formats the task list for display.","lastModifiedDate":"2021-08-24"},{"lineNumber":112,"author":{"gitId":"marcusc55"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":113,"author":{"gitId":"marcusc55"},"content":"     * @return Formatted task list in a string.","lastModifiedDate":"2021-08-24"},{"lineNumber":114,"author":{"gitId":"marcusc55"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":115,"author":{"gitId":"marcusc55"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":116,"author":{"gitId":"marcusc55"},"content":"    public String toString() {","lastModifiedDate":"2021-08-24"},{"lineNumber":117,"author":{"gitId":"marcusc55"},"content":"        StringBuilder output \u003d new StringBuilder();","lastModifiedDate":"2021-08-25"},{"lineNumber":118,"author":{"gitId":"marcusc55"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2021-09-07"},{"lineNumber":119,"author":{"gitId":"marcusc55"},"content":"            output.append(String.format(\"%d. %s\", i + 1, tasks.get(i)));","lastModifiedDate":"2021-09-07"},{"lineNumber":120,"author":{"gitId":"marcusc55"},"content":"            // Append new line for all lines except last line.","lastModifiedDate":"2021-08-24"},{"lineNumber":121,"author":{"gitId":"marcusc55"},"content":"            if (i !\u003d tasks.size() - 1) {","lastModifiedDate":"2021-09-07"},{"lineNumber":122,"author":{"gitId":"marcusc55"},"content":"                output.append(\"\\n\");","lastModifiedDate":"2021-08-24"},{"lineNumber":123,"author":{"gitId":"marcusc55"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":124,"author":{"gitId":"marcusc55"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":125,"author":{"gitId":"marcusc55"},"content":"        return output.toString();","lastModifiedDate":"2021-08-24"},{"lineNumber":126,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":127,"author":{"gitId":"marcusc55"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"marcusc55":127}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusc55"},"content":"package duke.command;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"marcusc55"},"content":"import duke.Duke;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"marcusc55"},"content":"import duke.DukeException;","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"marcusc55"},"content":"import duke.Parser;","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"marcusc55"},"content":"/**","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"marcusc55"},"content":" * This class encapsulates a user\u0027s command.","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"marcusc55"},"content":" */","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"marcusc55"},"content":"public abstract class Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"marcusc55"},"content":"    public static final Command[] COMMANDS \u003d new Command[]{new DeadlineCommand(), new DeleteCommand(),","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"marcusc55"},"content":"        new DoneCommand(), new EndCommand(), new EventCommand(), new FindCommand(), new ListCommand(),","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"marcusc55"},"content":"        new TodoCommand(), new HelpCommand()};","lastModifiedDate":"2021-09-07"},{"lineNumber":14,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"marcusc55"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"marcusc55"},"content":"     * Identifies the command from the user\u0027s input.","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"marcusc55"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"marcusc55"},"content":"     * @param input User\u0027s input.","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"marcusc55"},"content":"     * @return Command associated with the user\u0027s input.","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"marcusc55"},"content":"     * @throws DukeException If user\u0027s input does not match any command.","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"marcusc55"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"marcusc55"},"content":"    public static Command identifyCommand(String input) throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"marcusc55"},"content":"        for (Command c : COMMANDS) {","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"marcusc55"},"content":"            if (c.getCommandWord().equals(input)) {","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"marcusc55"},"content":"                return c;","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"marcusc55"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"marcusc55"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"marcusc55"},"content":"        throw new DukeException(\"Sorry, I don\u0027t understand this command\");","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":31,"author":{"gitId":"marcusc55"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":32,"author":{"gitId":"marcusc55"},"content":"     * Gets the command word associated with a command.","lastModifiedDate":"2021-08-28"},{"lineNumber":33,"author":{"gitId":"marcusc55"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":34,"author":{"gitId":"marcusc55"},"content":"     * @return Command word of the command.","lastModifiedDate":"2021-08-28"},{"lineNumber":35,"author":{"gitId":"marcusc55"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":36,"author":{"gitId":"marcusc55"},"content":"    public abstract String getCommandWord();","lastModifiedDate":"2021-08-29"},{"lineNumber":37,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":38,"author":{"gitId":"marcusc55"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":39,"author":{"gitId":"marcusc55"},"content":"     * Runs the action associated with the command.","lastModifiedDate":"2021-08-28"},{"lineNumber":40,"author":{"gitId":"marcusc55"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":41,"author":{"gitId":"marcusc55"},"content":"     * @param duke   Duke instance that the command is called from.","lastModifiedDate":"2021-08-28"},{"lineNumber":42,"author":{"gitId":"marcusc55"},"content":"     * @param parser Parser with the user\u0027s input","lastModifiedDate":"2021-08-28"},{"lineNumber":43,"author":{"gitId":"marcusc55"},"content":"     * @return Output to be displayed in GUI.","lastModifiedDate":"2021-08-31"},{"lineNumber":44,"author":{"gitId":"marcusc55"},"content":"     * @throws DukeException If input is invalid.","lastModifiedDate":"2021-08-28"},{"lineNumber":45,"author":{"gitId":"marcusc55"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":46,"author":{"gitId":"marcusc55"},"content":"    public abstract String run(Duke duke, Parser parser) throws DukeException;","lastModifiedDate":"2021-08-31"},{"lineNumber":47,"author":{"gitId":"marcusc55"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"marcusc55":47}},{"path":"src/main/java/duke/command/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusc55"},"content":"package duke.command;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"marcusc55"},"content":"import duke.Duke;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"marcusc55"},"content":"import duke.DukeException;","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"marcusc55"},"content":"import duke.Parser;","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"marcusc55"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"marcusc55"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"marcusc55"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"marcusc55"},"content":"public class DeadlineCommand extends Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"marcusc55"},"content":"    private static final String COMMAND_WORD \u003d \"deadline\";","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"marcusc55"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"marcusc55"},"content":"     * Returns the command word for a deadline.","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"marcusc55"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"marcusc55"},"content":"     * @return \"deadline\" command representing a deadline.","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"marcusc55"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"marcusc55"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"marcusc55"},"content":"    public String getCommandWord() {","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"marcusc55"},"content":"        return COMMAND_WORD;","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"marcusc55"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"marcusc55"},"content":"     * Creates a deadline task and adds it to the task list.","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"marcusc55"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"marcusc55"},"content":"     * @param duke   Duke instance that the command is called from.","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"marcusc55"},"content":"     * @param parser Parser with the user\u0027s input","lastModifiedDate":"2021-08-28"},{"lineNumber":28,"author":{"gitId":"marcusc55"},"content":"     * @return Output to be displayed in GUI.","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"marcusc55"},"content":"     * @throws DukeException If input is invalid.","lastModifiedDate":"2021-08-28"},{"lineNumber":30,"author":{"gitId":"marcusc55"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":31,"author":{"gitId":"marcusc55"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"marcusc55"},"content":"    public String run(Duke duke, Parser parser) throws DukeException {","lastModifiedDate":"2021-08-31"},{"lineNumber":33,"author":{"gitId":"marcusc55"},"content":"        Task task \u003d new Deadline(parser.getTaskName(), parser.getTaskDate());","lastModifiedDate":"2021-09-07"},{"lineNumber":34,"author":{"gitId":"marcusc55"},"content":"        duke.getList().add(task);","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"marcusc55"},"content":"        return Ui.addTaskMessage(task, duke.getList().size());","lastModifiedDate":"2021-08-31"},{"lineNumber":36,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"marcusc55"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"marcusc55":37}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusc55"},"content":"package duke.command;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"marcusc55"},"content":"import duke.Duke;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"marcusc55"},"content":"import duke.DukeException;","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"marcusc55"},"content":"import duke.Parser;","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"marcusc55"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"marcusc55"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"marcusc55"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"marcusc55"},"content":"    private static final String COMMAND_WORD \u003d \"delete\";","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"marcusc55"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"marcusc55"},"content":"     * Returns the command word for a delete command.","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"marcusc55"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"marcusc55"},"content":"     * @return \"delete\" representing a delete command.","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"marcusc55"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"marcusc55"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"marcusc55"},"content":"    public String getCommandWord() {","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"marcusc55"},"content":"        return COMMAND_WORD;","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"marcusc55"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"marcusc55"},"content":"     * Deletes the task specified by the user.","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"marcusc55"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"marcusc55"},"content":"     * @param duke   Duke instance that the command is called from.","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"marcusc55"},"content":"     * @param parser Parser with the user\u0027s input","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"marcusc55"},"content":"     * @return Output to be displayed in GUI.","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"marcusc55"},"content":"     * @throws DukeException If input is invalid.","lastModifiedDate":"2021-08-28"},{"lineNumber":29,"author":{"gitId":"marcusc55"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":30,"author":{"gitId":"marcusc55"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"marcusc55"},"content":"    public String run(Duke duke, Parser parser) throws DukeException {","lastModifiedDate":"2021-08-31"},{"lineNumber":32,"author":{"gitId":"marcusc55"},"content":"        // Retrieve value inputted by user and subtract 1 to get the index in the array.","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"marcusc55"},"content":"        int index \u003d parser.getNumber();","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"marcusc55"},"content":"        // Error handling: negative number or number more than list length.","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"marcusc55"},"content":"        if (index \u003c 0 || index \u003e\u003d duke.getList().size()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"marcusc55"},"content":"            throw new DukeException(\"Invalid number.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"marcusc55"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"marcusc55"},"content":"        Task task \u003d duke.getList().remove(index);","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"marcusc55"},"content":"        assert task !\u003d null : \"Cannot delete empty task.\";","lastModifiedDate":"2021-09-07"},{"lineNumber":40,"author":{"gitId":"marcusc55"},"content":"        return Ui.deleteMessage(task, duke.getList().size());","lastModifiedDate":"2021-08-31"},{"lineNumber":41,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"marcusc55"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"marcusc55":42}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusc55"},"content":"package duke.command;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"marcusc55"},"content":"import duke.Duke;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"marcusc55"},"content":"import duke.DukeException;","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"marcusc55"},"content":"import duke.Parser;","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"marcusc55"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"marcusc55"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"marcusc55"},"content":"public class DoneCommand extends Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"marcusc55"},"content":"    private static final String COMMAND_WORD \u003d \"done\";","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"marcusc55"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"marcusc55"},"content":"     * Returns the command word for a done command.","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"marcusc55"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"marcusc55"},"content":"     * @return \"done\" representing a done command.","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"marcusc55"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"marcusc55"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"marcusc55"},"content":"    public String getCommandWord() {","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"marcusc55"},"content":"        return COMMAND_WORD;","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"marcusc55"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"marcusc55"},"content":"     * Marks the task specified by the user as done.","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"marcusc55"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"marcusc55"},"content":"     * @param duke   Duke instance that the command is called from.","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"marcusc55"},"content":"     * @param parser Parser with the user\u0027s input","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"marcusc55"},"content":"     * @return Output to be displayed in GUI.","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"marcusc55"},"content":"     * @throws DukeException If input is invalid.","lastModifiedDate":"2021-08-28"},{"lineNumber":29,"author":{"gitId":"marcusc55"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":30,"author":{"gitId":"marcusc55"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"marcusc55"},"content":"    public String run(Duke duke, Parser parser) throws DukeException {","lastModifiedDate":"2021-08-31"},{"lineNumber":32,"author":{"gitId":"marcusc55"},"content":"        int index \u003d parser.getNumber();","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"marcusc55"},"content":"        if (index \u003c 0 || index \u003e duke.getList().size()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"marcusc55"},"content":"            throw new DukeException(\"Invalid number.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"marcusc55"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"marcusc55"},"content":"        Task task \u003d duke.getList().setDone(index);","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"marcusc55"},"content":"        assert task !\u003d null : \"Cannot mark empty task as done.\";","lastModifiedDate":"2021-09-07"},{"lineNumber":38,"author":{"gitId":"marcusc55"},"content":"        return Ui.doneMessage(task);","lastModifiedDate":"2021-08-31"},{"lineNumber":39,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"marcusc55"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"marcusc55":40}},{"path":"src/main/java/duke/command/EndCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusc55"},"content":"package duke.command;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"marcusc55"},"content":"import duke.Duke;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"marcusc55"},"content":"import duke.Parser;","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"marcusc55"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"marcusc55"},"content":"public class EndCommand extends Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"marcusc55"},"content":"    public static final String COMMAND_WORD \u003d \"bye\";","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"marcusc55"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"marcusc55"},"content":"     * Returns the command word for an end command.","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"marcusc55"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"marcusc55"},"content":"     * @return \"bye\" representing an end command.","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"marcusc55"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"marcusc55"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"marcusc55"},"content":"    public String getCommandWord() {","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"marcusc55"},"content":"        return COMMAND_WORD;","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"marcusc55"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"marcusc55"},"content":"     * Stops the Duke instance.","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"marcusc55"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"marcusc55"},"content":"     * @param duke   Duke instance that the command is called from.","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"marcusc55"},"content":"     * @param parser Parser with the user\u0027s input","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"marcusc55"},"content":"     * @return Output to be displayed in GUI.","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"marcusc55"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"marcusc55"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"marcusc55"},"content":"    public String run(Duke duke, Parser parser) {","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"marcusc55"},"content":"        return Ui.goodbyeMessage();","lastModifiedDate":"2021-08-31"},{"lineNumber":30,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"marcusc55"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"marcusc55":31}},{"path":"src/main/java/duke/command/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusc55"},"content":"package duke.command;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"marcusc55"},"content":"import duke.Duke;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"marcusc55"},"content":"import duke.DukeException;","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"marcusc55"},"content":"import duke.Parser;","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"marcusc55"},"content":"import duke.task.Event;","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"marcusc55"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"marcusc55"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"marcusc55"},"content":"public class EventCommand extends Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"marcusc55"},"content":"    private static final String COMMAND_WORD \u003d \"event\";","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"marcusc55"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"marcusc55"},"content":"     * Returns the command word for an event.","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"marcusc55"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"marcusc55"},"content":"     * @return \"event\" command representing an event.","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"marcusc55"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"marcusc55"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"marcusc55"},"content":"    public String getCommandWord() {","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"marcusc55"},"content":"        return COMMAND_WORD;","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"marcusc55"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"marcusc55"},"content":"     * Creates an event task and adds it to the task list.","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"marcusc55"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"marcusc55"},"content":"     * @param duke   Duke instance that the command is called from.","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"marcusc55"},"content":"     * @param parser Parser with the user\u0027s input","lastModifiedDate":"2021-08-28"},{"lineNumber":28,"author":{"gitId":"marcusc55"},"content":"     * @return Output to be displayed in GUI.","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"marcusc55"},"content":"     * @throws DukeException If input is invalid.","lastModifiedDate":"2021-08-28"},{"lineNumber":30,"author":{"gitId":"marcusc55"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":31,"author":{"gitId":"marcusc55"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"marcusc55"},"content":"    public String run(Duke duke, Parser parser) throws DukeException {","lastModifiedDate":"2021-08-31"},{"lineNumber":33,"author":{"gitId":"marcusc55"},"content":"        Task task \u003d new Event(parser.getTaskName(), parser.getTaskDate());","lastModifiedDate":"2021-09-07"},{"lineNumber":34,"author":{"gitId":"marcusc55"},"content":"        duke.getList().add(task);","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"marcusc55"},"content":"        return Ui.addTaskMessage(task, duke.getList().size());","lastModifiedDate":"2021-08-31"},{"lineNumber":36,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"marcusc55"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"marcusc55":37}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusc55"},"content":"package duke.command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"marcusc55"},"content":"import duke.Duke;","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"marcusc55"},"content":"import duke.DukeException;","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"marcusc55"},"content":"import duke.Parser;","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"marcusc55"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"marcusc55"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"marcusc55"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"marcusc55"},"content":"    public static final String COMMAND_WORD \u003d \"find\";","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"marcusc55"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"marcusc55"},"content":"     * Returns the command word for a find command.","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"marcusc55"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"marcusc55"},"content":"     * @return \"find\" representing a find command.","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"marcusc55"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"marcusc55"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"marcusc55"},"content":"    public String getCommandWord() {","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"marcusc55"},"content":"        return COMMAND_WORD;","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"marcusc55"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"marcusc55"},"content":"     * Searches the user\u0027s task list for tasks matching search term.","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"marcusc55"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"marcusc55"},"content":"     * @param duke   Duke instance that the command is called from.","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"marcusc55"},"content":"     * @param parser Parser with the user\u0027s input","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"marcusc55"},"content":"     * @return Output to be displayed in GUI.","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"marcusc55"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"marcusc55"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"marcusc55"},"content":"    public String run(Duke duke, Parser parser) throws DukeException {","lastModifiedDate":"2021-08-31"},{"lineNumber":31,"author":{"gitId":"marcusc55"},"content":"        String searchTerm \u003d parser.getSearchTerm();","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"marcusc55"},"content":"        TaskList filteredList \u003d duke.getList().search(searchTerm);","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"marcusc55"},"content":"        return Ui.displayTasks(filteredList, filteredList.size());","lastModifiedDate":"2021-08-31"},{"lineNumber":34,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"marcusc55"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"marcusc55":35}},{"path":"src/main/java/duke/command/HelpCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusc55"},"content":"package duke.command;","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"marcusc55"},"content":"import duke.Duke;","lastModifiedDate":"2021-09-07"},{"lineNumber":4,"author":{"gitId":"marcusc55"},"content":"import duke.DukeException;","lastModifiedDate":"2021-09-07"},{"lineNumber":5,"author":{"gitId":"marcusc55"},"content":"import duke.Parser;","lastModifiedDate":"2021-09-07"},{"lineNumber":6,"author":{"gitId":"marcusc55"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-07"},{"lineNumber":7,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":8,"author":{"gitId":"marcusc55"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2021-09-07"},{"lineNumber":9,"author":{"gitId":"marcusc55"},"content":"    public static final String COMMAND_WORD \u003d \"help\";","lastModifiedDate":"2021-09-07"},{"lineNumber":10,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":11,"author":{"gitId":"marcusc55"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":12,"author":{"gitId":"marcusc55"},"content":"     * Returns the command word for a help command.","lastModifiedDate":"2021-09-07"},{"lineNumber":13,"author":{"gitId":"marcusc55"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":14,"author":{"gitId":"marcusc55"},"content":"     * @return \"help\" representing a help command.","lastModifiedDate":"2021-09-07"},{"lineNumber":15,"author":{"gitId":"marcusc55"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":16,"author":{"gitId":"marcusc55"},"content":"    @Override","lastModifiedDate":"2021-09-07"},{"lineNumber":17,"author":{"gitId":"marcusc55"},"content":"    public String getCommandWord() {","lastModifiedDate":"2021-09-07"},{"lineNumber":18,"author":{"gitId":"marcusc55"},"content":"        return COMMAND_WORD;","lastModifiedDate":"2021-09-07"},{"lineNumber":19,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":20,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":21,"author":{"gitId":"marcusc55"},"content":"    @Override","lastModifiedDate":"2021-09-07"},{"lineNumber":22,"author":{"gitId":"marcusc55"},"content":"    public String run(Duke duke, Parser parser) throws DukeException {","lastModifiedDate":"2021-09-07"},{"lineNumber":23,"author":{"gitId":"marcusc55"},"content":"        return Ui.helpMessage();","lastModifiedDate":"2021-09-07"},{"lineNumber":24,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":25,"author":{"gitId":"marcusc55"},"content":"}","lastModifiedDate":"2021-09-07"}],"authorContributionMap":{"marcusc55":25}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusc55"},"content":"package duke.command;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"marcusc55"},"content":"import duke.Duke;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"marcusc55"},"content":"import duke.Parser;","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"marcusc55"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"marcusc55"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"marcusc55"},"content":"    public static final String COMMAND_WORD \u003d \"list\";","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"marcusc55"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"marcusc55"},"content":"     * Returns the command word for a list command.","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"marcusc55"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"marcusc55"},"content":"     * @return \"list\" representing a list command.","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"marcusc55"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"marcusc55"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"marcusc55"},"content":"    public String getCommandWord() {","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"marcusc55"},"content":"        return COMMAND_WORD;","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"marcusc55"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"marcusc55"},"content":"     * Displays the user\u0027s list of tasks.","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"marcusc55"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"marcusc55"},"content":"     * @param duke   Duke instance that the command is called from.","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"marcusc55"},"content":"     * @param parser Parser with the user\u0027s input","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"marcusc55"},"content":"     * @return Output to be displayed in GUI.","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"marcusc55"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"marcusc55"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"marcusc55"},"content":"    public String run(Duke duke, Parser parser) {","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"marcusc55"},"content":"        return Ui.displayTasks(duke.getList(), duke.getList().size());","lastModifiedDate":"2021-08-31"},{"lineNumber":30,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"marcusc55"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"marcusc55":31}},{"path":"src/main/java/duke/command/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusc55"},"content":"package duke.command;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"marcusc55"},"content":"import duke.Duke;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"marcusc55"},"content":"import duke.DukeException;","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"marcusc55"},"content":"import duke.Parser;","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"marcusc55"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"marcusc55"},"content":"import duke.task.Todo;","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"marcusc55"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"marcusc55"},"content":"public class TodoCommand extends Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"marcusc55"},"content":"    private static final String COMMAND_WORD \u003d \"todo\";","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"marcusc55"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"marcusc55"},"content":"     * Returns the command word for a to-do.","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"marcusc55"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"marcusc55"},"content":"     * @return \"todo\" command representing a to-do.","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"marcusc55"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"marcusc55"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"marcusc55"},"content":"    public String getCommandWord() {","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"marcusc55"},"content":"        return COMMAND_WORD;","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"marcusc55"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"marcusc55"},"content":"     * Creates a to-do task and adds it to the task list.","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"marcusc55"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"marcusc55"},"content":"     * @param duke   Duke instance that the command is called from.","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"marcusc55"},"content":"     * @param parser Parser with the user\u0027s input","lastModifiedDate":"2021-08-28"},{"lineNumber":28,"author":{"gitId":"marcusc55"},"content":"     * @return Output to be displayed in GUI.","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"marcusc55"},"content":"     * @throws DukeException If input is invalid.","lastModifiedDate":"2021-08-28"},{"lineNumber":30,"author":{"gitId":"marcusc55"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":31,"author":{"gitId":"marcusc55"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"marcusc55"},"content":"    public String run(Duke duke, Parser parser) throws DukeException {","lastModifiedDate":"2021-08-31"},{"lineNumber":33,"author":{"gitId":"marcusc55"},"content":"        Task task \u003d new Todo(parser.getTaskName());","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"marcusc55"},"content":"        duke.getList().add(task);","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"marcusc55"},"content":"        return Ui.addTaskMessage(task, duke.getList().size());","lastModifiedDate":"2021-08-31"},{"lineNumber":36,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"marcusc55"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"marcusc55":37}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusc55"},"content":"package duke.task;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"marcusc55"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"marcusc55"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"marcusc55"},"content":"/**","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"marcusc55"},"content":" * This class represents a deadline - a task that needs to be","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"marcusc55"},"content":" * done before a specific date/time.","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"marcusc55"},"content":" */","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"marcusc55"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"marcusc55"},"content":"    public static final String IDENTIFIER \u003d \"D\";","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"marcusc55"},"content":"    private static final DateTimeFormatter FORMATTER \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy HHmm\");","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"marcusc55"},"content":"    private final LocalDateTime date;","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"marcusc55"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"marcusc55"},"content":"     * Constructor for a deadline.","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"marcusc55"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"marcusc55"},"content":"     * @param description Description of the deadline.","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"marcusc55"},"content":"     * @param date        Date of the deadline.","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"marcusc55"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"marcusc55"},"content":"    public Deadline(String description, LocalDateTime date) {","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"marcusc55"},"content":"        super(description);","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"marcusc55"},"content":"        this.date \u003d date;","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"marcusc55"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"marcusc55"},"content":"     * Gets the date of the deadline.","lastModifiedDate":"2021-08-28"},{"lineNumber":28,"author":{"gitId":"marcusc55"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":29,"author":{"gitId":"marcusc55"},"content":"     * @return Date of the deadline.","lastModifiedDate":"2021-08-28"},{"lineNumber":30,"author":{"gitId":"marcusc55"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":31,"author":{"gitId":"marcusc55"},"content":"    public LocalDateTime getDate() {","lastModifiedDate":"2021-08-28"},{"lineNumber":32,"author":{"gitId":"marcusc55"},"content":"        return date;","lastModifiedDate":"2021-08-28"},{"lineNumber":33,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":34,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":35,"author":{"gitId":"marcusc55"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":36,"author":{"gitId":"marcusc55"},"content":"     * Gets the type identifier of a deadline.","lastModifiedDate":"2021-08-28"},{"lineNumber":37,"author":{"gitId":"marcusc55"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":38,"author":{"gitId":"marcusc55"},"content":"     * @return string \"D\" representing a deadline.","lastModifiedDate":"2021-08-28"},{"lineNumber":39,"author":{"gitId":"marcusc55"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":40,"author":{"gitId":"marcusc55"},"content":"    @Override","lastModifiedDate":"2021-08-28"},{"lineNumber":41,"author":{"gitId":"marcusc55"},"content":"    public String getType() {","lastModifiedDate":"2021-08-28"},{"lineNumber":42,"author":{"gitId":"marcusc55"},"content":"        return IDENTIFIER;","lastModifiedDate":"2021-08-28"},{"lineNumber":43,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":44,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":45,"author":{"gitId":"marcusc55"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":46,"author":{"gitId":"marcusc55"},"content":"     * String representation of a deadline.","lastModifiedDate":"2021-08-28"},{"lineNumber":47,"author":{"gitId":"marcusc55"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":48,"author":{"gitId":"marcusc55"},"content":"     * @return String representation of a deadline.","lastModifiedDate":"2021-08-28"},{"lineNumber":49,"author":{"gitId":"marcusc55"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":50,"author":{"gitId":"marcusc55"},"content":"    @Override","lastModifiedDate":"2021-08-28"},{"lineNumber":51,"author":{"gitId":"marcusc55"},"content":"    public String toString() {","lastModifiedDate":"2021-08-28"},{"lineNumber":52,"author":{"gitId":"marcusc55"},"content":"        return String.format(\"[D]%s (by: %s)\", super.toString(), date.format(FORMATTER));","lastModifiedDate":"2021-09-07"},{"lineNumber":53,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":54,"author":{"gitId":"marcusc55"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"marcusc55":54}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusc55"},"content":"package duke.task;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"marcusc55"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"marcusc55"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"marcusc55"},"content":"/**","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"marcusc55"},"content":" * This class represents an event - a task that starts at a specific date and","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"marcusc55"},"content":" * ends at a specific date.","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"marcusc55"},"content":" */","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"marcusc55"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"marcusc55"},"content":"    public static final String IDENTIFIER \u003d \"E\";","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"marcusc55"},"content":"    private static final DateTimeFormatter FORMATTER \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy HHmm\");","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"marcusc55"},"content":"    private final LocalDateTime date;","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"marcusc55"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"marcusc55"},"content":"     * Constructor for an event.","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"marcusc55"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"marcusc55"},"content":"     * @param description Description of the event.","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"marcusc55"},"content":"     * @param date        Date of the event.","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"marcusc55"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"marcusc55"},"content":"    public Event(String description, LocalDateTime date) {","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"marcusc55"},"content":"        super(description);","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"marcusc55"},"content":"        this.date \u003d date;","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"marcusc55"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"marcusc55"},"content":"     * Gets the date of the event.","lastModifiedDate":"2021-08-28"},{"lineNumber":28,"author":{"gitId":"marcusc55"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":29,"author":{"gitId":"marcusc55"},"content":"     * @return Date of the event.","lastModifiedDate":"2021-08-28"},{"lineNumber":30,"author":{"gitId":"marcusc55"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":31,"author":{"gitId":"marcusc55"},"content":"    public LocalDateTime getDate() {","lastModifiedDate":"2021-08-28"},{"lineNumber":32,"author":{"gitId":"marcusc55"},"content":"        return date;","lastModifiedDate":"2021-08-28"},{"lineNumber":33,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":34,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":35,"author":{"gitId":"marcusc55"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":36,"author":{"gitId":"marcusc55"},"content":"     * Gets the type identifier of an event.","lastModifiedDate":"2021-08-28"},{"lineNumber":37,"author":{"gitId":"marcusc55"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":38,"author":{"gitId":"marcusc55"},"content":"     * @return String \"E\" representing an event.","lastModifiedDate":"2021-08-28"},{"lineNumber":39,"author":{"gitId":"marcusc55"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":40,"author":{"gitId":"marcusc55"},"content":"    @Override","lastModifiedDate":"2021-08-28"},{"lineNumber":41,"author":{"gitId":"marcusc55"},"content":"    public String getType() {","lastModifiedDate":"2021-08-28"},{"lineNumber":42,"author":{"gitId":"marcusc55"},"content":"        return IDENTIFIER;","lastModifiedDate":"2021-08-28"},{"lineNumber":43,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":44,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":45,"author":{"gitId":"marcusc55"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":46,"author":{"gitId":"marcusc55"},"content":"     * String representation of an event.","lastModifiedDate":"2021-08-28"},{"lineNumber":47,"author":{"gitId":"marcusc55"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":48,"author":{"gitId":"marcusc55"},"content":"     * @return String representation of an event.","lastModifiedDate":"2021-08-28"},{"lineNumber":49,"author":{"gitId":"marcusc55"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":50,"author":{"gitId":"marcusc55"},"content":"    @Override","lastModifiedDate":"2021-08-28"},{"lineNumber":51,"author":{"gitId":"marcusc55"},"content":"    public String toString() {","lastModifiedDate":"2021-08-28"},{"lineNumber":52,"author":{"gitId":"marcusc55"},"content":"        return String.format(\"[E]%s (at: %s)\", super.toString(), date.format(FORMATTER));","lastModifiedDate":"2021-09-07"},{"lineNumber":53,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":54,"author":{"gitId":"marcusc55"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"marcusc55":54}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusc55"},"content":"package duke.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"marcusc55"},"content":"/**","lastModifiedDate":"2021-08-16"},{"lineNumber":4,"author":{"gitId":"marcusc55"},"content":" * This class represents a user\u0027s task.","lastModifiedDate":"2021-08-16"},{"lineNumber":5,"author":{"gitId":"marcusc55"},"content":" */","lastModifiedDate":"2021-08-16"},{"lineNumber":6,"author":{"gitId":"marcusc55"},"content":"public abstract class Task {","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"marcusc55"},"content":"    private final String taskName;","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"marcusc55"},"content":"    private boolean isComplete;","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":10,"author":{"gitId":"marcusc55"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":11,"author":{"gitId":"marcusc55"},"content":"     * Constructor for a task. When tasks are initialised, they are marked as not complete.","lastModifiedDate":"2021-08-16"},{"lineNumber":12,"author":{"gitId":"marcusc55"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"marcusc55"},"content":"     * @param taskName Name of the task.","lastModifiedDate":"2021-08-16"},{"lineNumber":14,"author":{"gitId":"marcusc55"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":15,"author":{"gitId":"marcusc55"},"content":"    public Task(String taskName) {","lastModifiedDate":"2021-08-16"},{"lineNumber":16,"author":{"gitId":"marcusc55"},"content":"        this.taskName \u003d taskName;","lastModifiedDate":"2021-08-16"},{"lineNumber":17,"author":{"gitId":"marcusc55"},"content":"        isComplete \u003d false;","lastModifiedDate":"2021-09-07"},{"lineNumber":18,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":19,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":20,"author":{"gitId":"marcusc55"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":21,"author":{"gitId":"marcusc55"},"content":"     * Gets the name of the task.","lastModifiedDate":"2021-08-16"},{"lineNumber":22,"author":{"gitId":"marcusc55"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"marcusc55"},"content":"     * @return Name of the task.","lastModifiedDate":"2021-08-16"},{"lineNumber":24,"author":{"gitId":"marcusc55"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":25,"author":{"gitId":"marcusc55"},"content":"    public String getName() {","lastModifiedDate":"2021-08-16"},{"lineNumber":26,"author":{"gitId":"marcusc55"},"content":"        return taskName;","lastModifiedDate":"2021-09-07"},{"lineNumber":27,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":28,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":29,"author":{"gitId":"marcusc55"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":30,"author":{"gitId":"marcusc55"},"content":"     * Toggles the completion status of the task.","lastModifiedDate":"2021-08-16"},{"lineNumber":31,"author":{"gitId":"marcusc55"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":32,"author":{"gitId":"marcusc55"},"content":"    public void setDone() {","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"marcusc55"},"content":"        isComplete \u003d !isComplete;","lastModifiedDate":"2021-09-07"},{"lineNumber":34,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":35,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":36,"author":{"gitId":"marcusc55"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":37,"author":{"gitId":"marcusc55"},"content":"     * Returns the completion status of the task.","lastModifiedDate":"2021-08-16"},{"lineNumber":38,"author":{"gitId":"marcusc55"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":39,"author":{"gitId":"marcusc55"},"content":"     * @return Returns X if task is completed, \" \" otherwise.","lastModifiedDate":"2021-08-16"},{"lineNumber":40,"author":{"gitId":"marcusc55"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":41,"author":{"gitId":"marcusc55"},"content":"    public boolean isComplete() {","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"marcusc55"},"content":"        return isComplete;","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":44,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":45,"author":{"gitId":"marcusc55"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"marcusc55"},"content":"     * Gets a single letter representing the type of the task.","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"marcusc55"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"marcusc55"},"content":"     * @return Returns the type of the task.","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"marcusc55"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"marcusc55"},"content":"    public abstract String getType();","lastModifiedDate":"2021-08-29"},{"lineNumber":51,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"marcusc55"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":53,"author":{"gitId":"marcusc55"},"content":"     * Returns a string representation of the task.","lastModifiedDate":"2021-08-16"},{"lineNumber":54,"author":{"gitId":"marcusc55"},"content":"     * This displays the completion status of the task along with its name.","lastModifiedDate":"2021-08-16"},{"lineNumber":55,"author":{"gitId":"marcusc55"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":56,"author":{"gitId":"marcusc55"},"content":"     * @return String representation of the task.","lastModifiedDate":"2021-08-16"},{"lineNumber":57,"author":{"gitId":"marcusc55"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":58,"author":{"gitId":"marcusc55"},"content":"    @Override","lastModifiedDate":"2021-08-16"},{"lineNumber":59,"author":{"gitId":"marcusc55"},"content":"    public String toString() {","lastModifiedDate":"2021-08-16"},{"lineNumber":60,"author":{"gitId":"marcusc55"},"content":"        return String.format(\"[%s] %s\", isComplete ? \"X\" : \" \", taskName);","lastModifiedDate":"2021-09-07"},{"lineNumber":61,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":62,"author":{"gitId":"marcusc55"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"marcusc55":62}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusc55"},"content":"package duke.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"marcusc55"},"content":"/**","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"marcusc55"},"content":" * This class represents a to-do - a task without any date/time attached.","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"marcusc55"},"content":" */","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"marcusc55"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"marcusc55"},"content":"    public static final String IDENTIFIER \u003d \"T\";","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"marcusc55"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"marcusc55"},"content":"     * Constructor for a to-do.","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"marcusc55"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"marcusc55"},"content":"     * @param description Description of the to-do.","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"marcusc55"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"marcusc55"},"content":"    public Todo(String description) {","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"marcusc55"},"content":"        super(description);","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"marcusc55"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"marcusc55"},"content":"     * Gets the type identifier of a to-do.","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"marcusc55"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"marcusc55"},"content":"     * @return string \"t\" representing a to-do.","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"marcusc55"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"marcusc55"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"marcusc55"},"content":"    public String getType() {","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"marcusc55"},"content":"        return IDENTIFIER;","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"marcusc55"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"marcusc55"},"content":"     * String representation of a to-do.","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"marcusc55"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"marcusc55"},"content":"     * @return String representation of a to-do.","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"marcusc55"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"marcusc55"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":34,"author":{"gitId":"marcusc55"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":35,"author":{"gitId":"marcusc55"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2021-08-18"},{"lineNumber":36,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":37,"author":{"gitId":"marcusc55"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"marcusc55":37}},{"path":"src/main/java/duke/ui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusc55"},"content":"package duke.ui;","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"marcusc55"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"marcusc55"},"content":"import java.util.Collections;","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"marcusc55"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"marcusc55"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"marcusc55"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"marcusc55"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"marcusc55"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"marcusc55"},"content":"import javafx.scene.Node;","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"marcusc55"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"marcusc55"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"marcusc55"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"marcusc55"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"marcusc55"},"content":"/**","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"marcusc55"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"marcusc55"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"marcusc55"},"content":" * containing text from the speaker.","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"marcusc55"},"content":" */","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"marcusc55"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"marcusc55"},"content":"    @FXML","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"marcusc55"},"content":"    private Label dialog;","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"marcusc55"},"content":"    @FXML","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"marcusc55"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"marcusc55"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"marcusc55"},"content":"        try {","lastModifiedDate":"2021-08-31"},{"lineNumber":30,"author":{"gitId":"marcusc55"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2021-08-31"},{"lineNumber":31,"author":{"gitId":"marcusc55"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2021-08-31"},{"lineNumber":32,"author":{"gitId":"marcusc55"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2021-08-31"},{"lineNumber":33,"author":{"gitId":"marcusc55"},"content":"            fxmlLoader.load();","lastModifiedDate":"2021-08-31"},{"lineNumber":34,"author":{"gitId":"marcusc55"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-31"},{"lineNumber":35,"author":{"gitId":"marcusc55"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-31"},{"lineNumber":36,"author":{"gitId":"marcusc55"},"content":"        }","lastModifiedDate":"2021-08-31"},{"lineNumber":37,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":38,"author":{"gitId":"marcusc55"},"content":"        dialog.setText(text);","lastModifiedDate":"2021-08-31"},{"lineNumber":39,"author":{"gitId":"marcusc55"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2021-08-31"},{"lineNumber":40,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":41,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":42,"author":{"gitId":"marcusc55"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2021-08-31"},{"lineNumber":43,"author":{"gitId":"marcusc55"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2021-08-31"},{"lineNumber":44,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":45,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":46,"author":{"gitId":"marcusc55"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2021-08-31"},{"lineNumber":47,"author":{"gitId":"marcusc55"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2021-08-31"},{"lineNumber":48,"author":{"gitId":"marcusc55"},"content":"        db.flip();","lastModifiedDate":"2021-08-31"},{"lineNumber":49,"author":{"gitId":"marcusc55"},"content":"        return db;","lastModifiedDate":"2021-08-31"},{"lineNumber":50,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":51,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":52,"author":{"gitId":"marcusc55"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":53,"author":{"gitId":"marcusc55"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2021-08-31"},{"lineNumber":54,"author":{"gitId":"marcusc55"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":55,"author":{"gitId":"marcusc55"},"content":"    private void flip() {","lastModifiedDate":"2021-08-31"},{"lineNumber":56,"author":{"gitId":"marcusc55"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2021-08-31"},{"lineNumber":57,"author":{"gitId":"marcusc55"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2021-08-31"},{"lineNumber":58,"author":{"gitId":"marcusc55"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2021-08-31"},{"lineNumber":59,"author":{"gitId":"marcusc55"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2021-08-31"},{"lineNumber":60,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":61,"author":{"gitId":"marcusc55"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"marcusc55":61}},{"path":"src/main/java/duke/ui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusc55"},"content":"package duke.ui;","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"marcusc55"},"content":"import duke.Duke;","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"marcusc55"},"content":"import duke.DukeException;","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"marcusc55"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"marcusc55"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"marcusc55"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"marcusc55"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"marcusc55"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"marcusc55"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"marcusc55"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"marcusc55"},"content":"/**","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"marcusc55"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"marcusc55"},"content":" */","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"marcusc55"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"marcusc55"},"content":"    private static final String DUKE_PHOTO_URL \u003d","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"marcusc55"},"content":"            \"https://upload.wikimedia.org/wikipedia/commons/thumb/5/5d/Duke_%28Java_mascot%29_waving.svg/\"","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"marcusc55"},"content":"            + \"568px-Duke_%28Java_mascot%29_waving.svg.png\";","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"marcusc55"},"content":"    private static final String USER_PHOTO_URL \u003d","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"marcusc55"},"content":"            \"https://image.flaticon.com/icons/png/512/1946/1946429.png\";","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"marcusc55"},"content":"    @FXML","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"marcusc55"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"marcusc55"},"content":"    @FXML","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"marcusc55"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"marcusc55"},"content":"    @FXML","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"marcusc55"},"content":"    private TextField userInput;","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"marcusc55"},"content":"    @FXML","lastModifiedDate":"2021-08-31"},{"lineNumber":30,"author":{"gitId":"marcusc55"},"content":"    private Button sendButton;","lastModifiedDate":"2021-08-31"},{"lineNumber":31,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":32,"author":{"gitId":"marcusc55"},"content":"    private Duke duke;","lastModifiedDate":"2021-08-31"},{"lineNumber":33,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":34,"author":{"gitId":"marcusc55"},"content":"    private final Image userImage \u003d new Image(USER_PHOTO_URL);","lastModifiedDate":"2021-08-31"},{"lineNumber":35,"author":{"gitId":"marcusc55"},"content":"    private final Image dukeImage \u003d new Image(DUKE_PHOTO_URL);","lastModifiedDate":"2021-08-31"},{"lineNumber":36,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":37,"author":{"gitId":"marcusc55"},"content":"    @FXML","lastModifiedDate":"2021-08-31"},{"lineNumber":38,"author":{"gitId":"marcusc55"},"content":"    public void initialize() {","lastModifiedDate":"2021-08-31"},{"lineNumber":39,"author":{"gitId":"marcusc55"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2021-08-31"},{"lineNumber":40,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":41,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":42,"author":{"gitId":"marcusc55"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2021-08-31"},{"lineNumber":43,"author":{"gitId":"marcusc55"},"content":"        duke \u003d d;","lastModifiedDate":"2021-08-31"},{"lineNumber":44,"author":{"gitId":"marcusc55"},"content":"        dialogContainer.getChildren().add(DialogBox.getDukeDialog(Ui.welcomeMessage(), dukeImage));","lastModifiedDate":"2021-08-31"},{"lineNumber":45,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":46,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":47,"author":{"gitId":"marcusc55"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":48,"author":{"gitId":"marcusc55"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2021-08-31"},{"lineNumber":49,"author":{"gitId":"marcusc55"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2021-08-31"},{"lineNumber":50,"author":{"gitId":"marcusc55"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":51,"author":{"gitId":"marcusc55"},"content":"    @FXML","lastModifiedDate":"2021-08-31"},{"lineNumber":52,"author":{"gitId":"marcusc55"},"content":"    private void handleUserInput() {","lastModifiedDate":"2021-08-31"},{"lineNumber":53,"author":{"gitId":"marcusc55"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2021-08-31"},{"lineNumber":54,"author":{"gitId":"marcusc55"},"content":"        dialogContainer.getChildren().add(DialogBox.getUserDialog(input, userImage));","lastModifiedDate":"2021-08-31"},{"lineNumber":55,"author":{"gitId":"marcusc55"},"content":"        try {","lastModifiedDate":"2021-08-31"},{"lineNumber":56,"author":{"gitId":"marcusc55"},"content":"            String response \u003d duke.listen(input);","lastModifiedDate":"2021-08-31"},{"lineNumber":57,"author":{"gitId":"marcusc55"},"content":"            dialogContainer.getChildren().add(","lastModifiedDate":"2021-08-31"},{"lineNumber":58,"author":{"gitId":"marcusc55"},"content":"                    DialogBox.getDukeDialog(response, dukeImage));","lastModifiedDate":"2021-08-31"},{"lineNumber":59,"author":{"gitId":"marcusc55"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-31"},{"lineNumber":60,"author":{"gitId":"marcusc55"},"content":"            dialogContainer.getChildren().add(DialogBox.getDukeDialog(e.getMessage(), dukeImage));","lastModifiedDate":"2021-08-31"},{"lineNumber":61,"author":{"gitId":"marcusc55"},"content":"        }","lastModifiedDate":"2021-08-31"},{"lineNumber":62,"author":{"gitId":"marcusc55"},"content":"        userInput.clear();","lastModifiedDate":"2021-08-31"},{"lineNumber":63,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":64,"author":{"gitId":"marcusc55"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"marcusc55":64}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusc55"},"content":"package duke.ui;","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"marcusc55"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"marcusc55"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"marcusc55"},"content":"/**","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"marcusc55"},"content":" * This class encapsulates Duke\u0027s methods for printing information to the user.","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"marcusc55"},"content":" */","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"marcusc55"},"content":"public class Ui {","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"marcusc55"},"content":"    private static final String WELCOME_MESSAGE \u003d \"Hello, I\u0027m Duke\\nWhat can I do for you?\\n\"","lastModifiedDate":"2021-09-07"},{"lineNumber":11,"author":{"gitId":"marcusc55"},"content":"            + \"Type \\\"help\\\" to see a list of commands.\";","lastModifiedDate":"2021-09-07"},{"lineNumber":12,"author":{"gitId":"marcusc55"},"content":"    private static final String GOODBYE_MESSAGE \u003d \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"marcusc55"},"content":"    private static final String LIST_MESSAGE \u003d \"Here are the tasks in your list:\\n\";","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"marcusc55"},"content":"    private static final String ADD_MESSAGE \u003d \"Got it. I\u0027ve added this task:\\n%s\\nNow you have %d %s in your list.\";","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"marcusc55"},"content":"    private static final String DONE_MESSAGE \u003d \"Nice! I\u0027ve marked this task as done:\\n\";","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"marcusc55"},"content":"    private static final String REMOVE_MESSAGE \u003d \"Noted. I\u0027ve removed this task:\\n%s\\nNow you have %d %s in your list.\";","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"marcusc55"},"content":"    private static final String NO_TASKS_MESSAGE \u003d \"No tasks to display.\";","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"marcusc55"},"content":"    private static final String HELP_MESSAGE \u003d \"Hi, I\u0027m Duke!\\nType \\\"todo [name]\\\" to ask me to remember a todo.\\n\"","lastModifiedDate":"2021-09-07"},{"lineNumber":19,"author":{"gitId":"marcusc55"},"content":"            + \"Type \\\"event [name] /at [dd/mm/yyyy hhmm]\\\" or \\\"deadline [name] /by [dd/mm/yy hhmm]\\\" to ask me to \"","lastModifiedDate":"2021-09-07"},{"lineNumber":20,"author":{"gitId":"marcusc55"},"content":"            + \"remember an event or deadline.\\nType \\\"list\\\" to see all your tasks.\\nType \\\"done [number]\\\" or \"","lastModifiedDate":"2021-09-07"},{"lineNumber":21,"author":{"gitId":"marcusc55"},"content":"            + \"\\\"delete [number]\\\" to ask me to mark a task as done or delete a task respectively.\\n\"","lastModifiedDate":"2021-09-07"},{"lineNumber":22,"author":{"gitId":"marcusc55"},"content":"            + \"Type \\\"find [search term]\\\" to search for a task.\";","lastModifiedDate":"2021-09-07"},{"lineNumber":23,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"marcusc55"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"marcusc55"},"content":"     * Gets Duke\u0027s welcome message.","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"marcusc55"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"marcusc55"},"content":"     * @return Returns welcome message.","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"marcusc55"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"marcusc55"},"content":"    public static String welcomeMessage() {","lastModifiedDate":"2021-08-31"},{"lineNumber":30,"author":{"gitId":"marcusc55"},"content":"        return WELCOME_MESSAGE;","lastModifiedDate":"2021-08-31"},{"lineNumber":31,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":32,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":33,"author":{"gitId":"marcusc55"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":34,"author":{"gitId":"marcusc55"},"content":"     * Gets Duke\u0027s goodbye message.","lastModifiedDate":"2021-08-31"},{"lineNumber":35,"author":{"gitId":"marcusc55"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":36,"author":{"gitId":"marcusc55"},"content":"     * @return Returns goodbye message.","lastModifiedDate":"2021-08-31"},{"lineNumber":37,"author":{"gitId":"marcusc55"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":38,"author":{"gitId":"marcusc55"},"content":"    public static String goodbyeMessage() {","lastModifiedDate":"2021-08-31"},{"lineNumber":39,"author":{"gitId":"marcusc55"},"content":"        return GOODBYE_MESSAGE;","lastModifiedDate":"2021-08-31"},{"lineNumber":40,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":41,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":42,"author":{"gitId":"marcusc55"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":43,"author":{"gitId":"marcusc55"},"content":"     * Gets user\u0027s list of tasks.","lastModifiedDate":"2021-08-31"},{"lineNumber":44,"author":{"gitId":"marcusc55"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":45,"author":{"gitId":"marcusc55"},"content":"     * @param list Task list to be displayed.","lastModifiedDate":"2021-08-31"},{"lineNumber":46,"author":{"gitId":"marcusc55"},"content":"     * @param size Size of the task list.","lastModifiedDate":"2021-08-31"},{"lineNumber":47,"author":{"gitId":"marcusc55"},"content":"     * @return Returns formatted list of tasks.","lastModifiedDate":"2021-08-31"},{"lineNumber":48,"author":{"gitId":"marcusc55"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":49,"author":{"gitId":"marcusc55"},"content":"    public static String displayTasks(TaskList list, int size) {","lastModifiedDate":"2021-08-31"},{"lineNumber":50,"author":{"gitId":"marcusc55"},"content":"        return size \u003d\u003d 0 ? NO_TASKS_MESSAGE : LIST_MESSAGE + list.toString();","lastModifiedDate":"2021-08-31"},{"lineNumber":51,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":52,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":53,"author":{"gitId":"marcusc55"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":54,"author":{"gitId":"marcusc55"},"content":"     * Gets a message when a task is added.","lastModifiedDate":"2021-08-31"},{"lineNumber":55,"author":{"gitId":"marcusc55"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":56,"author":{"gitId":"marcusc55"},"content":"     * @param task Task added.","lastModifiedDate":"2021-08-31"},{"lineNumber":57,"author":{"gitId":"marcusc55"},"content":"     * @param size Number of tasks in the user\u0027s task list.","lastModifiedDate":"2021-08-31"},{"lineNumber":58,"author":{"gitId":"marcusc55"},"content":"     * @return Returns message containing acknowledgement and task added.","lastModifiedDate":"2021-08-31"},{"lineNumber":59,"author":{"gitId":"marcusc55"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":60,"author":{"gitId":"marcusc55"},"content":"    public static String addTaskMessage(Task task, int size) {","lastModifiedDate":"2021-08-31"},{"lineNumber":61,"author":{"gitId":"marcusc55"},"content":"        return String.format(ADD_MESSAGE, task, size, size \u003d\u003d 1 ? \"task\" : \"tasks\");","lastModifiedDate":"2021-08-31"},{"lineNumber":62,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":63,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":64,"author":{"gitId":"marcusc55"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":65,"author":{"gitId":"marcusc55"},"content":"     * Gets a message when a task is deleted.","lastModifiedDate":"2021-08-31"},{"lineNumber":66,"author":{"gitId":"marcusc55"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":67,"author":{"gitId":"marcusc55"},"content":"     * @param task Task deleted.","lastModifiedDate":"2021-08-31"},{"lineNumber":68,"author":{"gitId":"marcusc55"},"content":"     * @param size Number of tasks in the user\u0027s task list.","lastModifiedDate":"2021-08-31"},{"lineNumber":69,"author":{"gitId":"marcusc55"},"content":"     * @return Returns message containing acknowledgement and task deleted.","lastModifiedDate":"2021-08-31"},{"lineNumber":70,"author":{"gitId":"marcusc55"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":71,"author":{"gitId":"marcusc55"},"content":"    public static String deleteMessage(Task task, int size) {","lastModifiedDate":"2021-08-31"},{"lineNumber":72,"author":{"gitId":"marcusc55"},"content":"        return String.format(REMOVE_MESSAGE, task, size, size \u003d\u003d 1 ? \"task\" : \"tasks\");","lastModifiedDate":"2021-08-31"},{"lineNumber":73,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":74,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":75,"author":{"gitId":"marcusc55"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":76,"author":{"gitId":"marcusc55"},"content":"     * Gets a message when a task is marked as done.","lastModifiedDate":"2021-08-31"},{"lineNumber":77,"author":{"gitId":"marcusc55"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":78,"author":{"gitId":"marcusc55"},"content":"     * @param task Task marked as done.","lastModifiedDate":"2021-08-31"},{"lineNumber":79,"author":{"gitId":"marcusc55"},"content":"     * @return Returns message containing acknowledgement and task marked as done.","lastModifiedDate":"2021-08-31"},{"lineNumber":80,"author":{"gitId":"marcusc55"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":81,"author":{"gitId":"marcusc55"},"content":"    public static String doneMessage(Task task) {","lastModifiedDate":"2021-08-31"},{"lineNumber":82,"author":{"gitId":"marcusc55"},"content":"        return DONE_MESSAGE + task;","lastModifiedDate":"2021-08-31"},{"lineNumber":83,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":84,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":85,"author":{"gitId":"marcusc55"},"content":"    public static String helpMessage() {","lastModifiedDate":"2021-09-07"},{"lineNumber":86,"author":{"gitId":"marcusc55"},"content":"        return HELP_MESSAGE;","lastModifiedDate":"2021-09-07"},{"lineNumber":87,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":88,"author":{"gitId":"marcusc55"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"marcusc55":88}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"marcusc55"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"marcusc55"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"marcusc55"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"marcusc55"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"marcusc55"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"marcusc55"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"marcusc55"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"marcusc55"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"marcusc55"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"marcusc55"},"content":"    \u003c/children\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"marcusc55"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"marcusc55"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"marcusc55"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"marcusc55"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"marcusc55":15}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"marcusc55"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"marcusc55"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"marcusc55"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"marcusc55"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"marcusc55"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"marcusc55"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"marcusc55"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.ui.MainWindow\"\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"marcusc55"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"marcusc55"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"marcusc55"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"marcusc55"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"marcusc55"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"marcusc55"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"marcusc55"},"content":"            \u003c/content\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"marcusc55"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"marcusc55"},"content":"    \u003c/children\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"marcusc55"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"marcusc55":18}},{"path":"src/test/java/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusc55"},"content":"import duke.DukeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"marcusc55"},"content":"import duke.Parser;","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"marcusc55"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"marcusc55"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"marcusc55"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"marcusc55"},"content":"public class ParserTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"marcusc55"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"marcusc55"},"content":"    void get_command_word() {","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"marcusc55"},"content":"        String input \u003d \"done 3\";","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"marcusc55"},"content":"        Parser parser \u003d new Parser(input);","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"marcusc55"},"content":"        assertEquals(parser.getCommandWord(), \"done\");","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"marcusc55"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"marcusc55"},"content":"    void get_done_number() throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"marcusc55"},"content":"        String input \u003d \"done 3\";","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"marcusc55"},"content":"        Parser parser \u003d new Parser(input);","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"marcusc55"},"content":"        assertEquals(parser.getNumber(), 2);","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"marcusc55"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"marcusc55"},"content":"    void get_task_date() throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"marcusc55"},"content":"        String input \u003d \"deadline return book /by 10/3/2020 1400\";","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"marcusc55"},"content":"        Parser parser \u003d new Parser(input);","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"marcusc55"},"content":"        parser.getTaskName();","lastModifiedDate":"2021-09-07"},{"lineNumber":30,"author":{"gitId":"marcusc55"},"content":"        assertEquals(parser.getTaskDate(), LocalDateTime.of(2020, 3, 10, 14, 0));","lastModifiedDate":"2021-09-07"},{"lineNumber":31,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"marcusc55"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"marcusc55":32}},{"path":"src/test/java/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusc55"},"content":"import duke.DukeException;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"marcusc55"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"marcusc55"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"marcusc55"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"marcusc55"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"marcusc55"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"marcusc55"},"content":"public class TaskListTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"marcusc55"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"marcusc55"},"content":"    void add_task_test() throws DukeException {","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"marcusc55"},"content":"        TaskList list \u003d new TaskList();","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"marcusc55"},"content":"        list.add(new Deadline(\"return book\", LocalDateTime.of(2020, 3, 10, 14, 0)));","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"marcusc55"},"content":"        assertEquals(list.get(list.size() - 1).getName(), \"return book\");","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"marcusc55"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"marcusc55"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"marcusc55"},"content":"    void set_done_test() throws DukeException {","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"marcusc55"},"content":"        TaskList list \u003d new TaskList();","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"marcusc55"},"content":"        list.add(new Deadline(\"return book\", LocalDateTime.of(2020, 3, 10, 14, 0)));","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"marcusc55"},"content":"        list.setDone(0);","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"marcusc55"},"content":"        assertEquals(list.get(0).isComplete(), true);","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"marcusc55"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"marcusc55"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"marcusc55":25}}]

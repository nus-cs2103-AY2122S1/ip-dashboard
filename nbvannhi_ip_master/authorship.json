[{"path":"src/main/java/Bloom.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nbvannhi"},"content":"public class Bloom {","lastModifiedDate":"2021-08-18"},{"lineNumber":2,"author":{"gitId":"nbvannhi"},"content":"  public static void main(String[] args) {","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"nbvannhi"},"content":"    Command cmd \u003d new Command();","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"nbvannhi"},"content":"    cmd.start();","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"nbvannhi"},"content":"  }","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"nbvannhi"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"nbvannhi":6}},{"path":"src/main/java/BloomException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nbvannhi"},"content":"public class BloomException extends Exception {","lastModifiedDate":"2021-08-19"},{"lineNumber":2,"author":{"gitId":"nbvannhi"},"content":"\tpublic BloomException(String errorMessage) {","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"nbvannhi"},"content":"\t\tsuper(errorMessage);","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"nbvannhi"},"content":"\t}","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"nbvannhi"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"nbvannhi":5}},{"path":"src/main/java/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nbvannhi"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-18"},{"lineNumber":2,"author":{"gitId":"nbvannhi"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"nbvannhi"},"content":"enum Action {","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"nbvannhi"},"content":"  GREET, BYE, ","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"nbvannhi"},"content":"  LIST, DONE, DELETE, ","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"nbvannhi"},"content":"  TODO, DEADLINE, EVENT, ","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"nbvannhi"},"content":"  ECHO, ADD,             // only for testing","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"nbvannhi"},"content":"  ALL, REMOVE, CREATE,   // easily mistaken commands","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"nbvannhi"},"content":"  UNKNOWN","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"nbvannhi"},"content":"}","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"nbvannhi"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"nbvannhi"},"content":"public class Command {","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"nbvannhi"},"content":"  protected static final String SPLIT_LINE \u003d \"\\n\" +","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"nbvannhi"},"content":"    \"\\t--------------------------------------------------\\n\";","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"nbvannhi"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"nbvannhi"},"content":"  /**","lastModifiedDate":"2021-08-19"},{"lineNumber":17,"author":{"gitId":"nbvannhi"},"content":"   * Start Bloom. Handle wrong-command, incomplete-complete-command, ","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"nbvannhi"},"content":"   * invalid-command exceptions. For now, the bot stops working if ","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"nbvannhi"},"content":"   * there exist such exceptions.","lastModifiedDate":"2021-08-19"},{"lineNumber":20,"author":{"gitId":"nbvannhi"},"content":"   */","lastModifiedDate":"2021-08-19"},{"lineNumber":21,"author":{"gitId":"nbvannhi"},"content":"  public void start() {","lastModifiedDate":"2021-08-19"},{"lineNumber":22,"author":{"gitId":"nbvannhi"},"content":"    Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-19"},{"lineNumber":23,"author":{"gitId":"nbvannhi"},"content":"    String cmd \u003d \"GREET\";","lastModifiedDate":"2021-08-19"},{"lineNumber":24,"author":{"gitId":"nbvannhi"},"content":"    try {","lastModifiedDate":"2021-08-19"},{"lineNumber":25,"author":{"gitId":"nbvannhi"},"content":"      while (run(cmd))","lastModifiedDate":"2021-08-19"},{"lineNumber":26,"author":{"gitId":"nbvannhi"},"content":"        cmd \u003d sc.nextLine();","lastModifiedDate":"2021-08-19"},{"lineNumber":27,"author":{"gitId":"nbvannhi"},"content":"    } catch (WrongCommandBloomException e) {","lastModifiedDate":"2021-08-19"},{"lineNumber":28,"author":{"gitId":"nbvannhi"},"content":"      String s \u003d e.getMessage().toUpperCase();","lastModifiedDate":"2021-08-19"},{"lineNumber":29,"author":{"gitId":"nbvannhi"},"content":"      switch (s) {","lastModifiedDate":"2021-08-19"},{"lineNumber":30,"author":{"gitId":"nbvannhi"},"content":"        case \"ALL\":","lastModifiedDate":"2021-08-19"},{"lineNumber":31,"author":{"gitId":"nbvannhi"},"content":"          System.out.println(","lastModifiedDate":"2021-08-19"},{"lineNumber":32,"author":{"gitId":"nbvannhi"},"content":"            \"\\t Do you want to list all task?\\n\" +","lastModifiedDate":"2021-08-19"},{"lineNumber":33,"author":{"gitId":"nbvannhi"},"content":"            \"\\t Please use the list command instead.\");","lastModifiedDate":"2021-08-19"},{"lineNumber":34,"author":{"gitId":"nbvannhi"},"content":"          break;","lastModifiedDate":"2021-08-19"},{"lineNumber":35,"author":{"gitId":"nbvannhi"},"content":"        case \"REMOVE\":","lastModifiedDate":"2021-08-19"},{"lineNumber":36,"author":{"gitId":"nbvannhi"},"content":"          System.out.println(","lastModifiedDate":"2021-08-19"},{"lineNumber":37,"author":{"gitId":"nbvannhi"},"content":"            \"\\t Do you want to delete the task?\\n\" +","lastModifiedDate":"2021-08-19"},{"lineNumber":38,"author":{"gitId":"nbvannhi"},"content":"            \"\\t Please use the delete command instead.\");","lastModifiedDate":"2021-08-19"},{"lineNumber":39,"author":{"gitId":"nbvannhi"},"content":"          break;","lastModifiedDate":"2021-08-19"},{"lineNumber":40,"author":{"gitId":"nbvannhi"},"content":"        case \"CREATE\":","lastModifiedDate":"2021-08-19"},{"lineNumber":41,"author":{"gitId":"nbvannhi"},"content":"          System.out.println(","lastModifiedDate":"2021-08-19"},{"lineNumber":42,"author":{"gitId":"nbvannhi"},"content":"            \"\\t Do you want to add new task?\\n\" +","lastModifiedDate":"2021-08-19"},{"lineNumber":43,"author":{"gitId":"nbvannhi"},"content":"            \"\\t Please consider todo, deadline, event commands.\");","lastModifiedDate":"2021-08-19"},{"lineNumber":44,"author":{"gitId":"nbvannhi"},"content":"          break;","lastModifiedDate":"2021-08-19"},{"lineNumber":45,"author":{"gitId":"nbvannhi"},"content":"      }","lastModifiedDate":"2021-08-19"},{"lineNumber":46,"author":{"gitId":"nbvannhi"},"content":"    } catch (IncompleteCommandBloomException e) {","lastModifiedDate":"2021-08-19"},{"lineNumber":47,"author":{"gitId":"nbvannhi"},"content":"      String s \u003d e.getMessage().toUpperCase();","lastModifiedDate":"2021-08-19"},{"lineNumber":48,"author":{"gitId":"nbvannhi"},"content":"      switch (s) {","lastModifiedDate":"2021-08-19"},{"lineNumber":49,"author":{"gitId":"nbvannhi"},"content":"        case \"INDEX\":","lastModifiedDate":"2021-08-19"},{"lineNumber":50,"author":{"gitId":"nbvannhi"},"content":"          System.out.println(","lastModifiedDate":"2021-08-19"},{"lineNumber":51,"author":{"gitId":"nbvannhi"},"content":"            \"\\t Please specify which task you want to edit.\\n\" +","lastModifiedDate":"2021-08-19"},{"lineNumber":52,"author":{"gitId":"nbvannhi"},"content":"            \"\\t You can view the task order by the list command.\");","lastModifiedDate":"2021-08-19"},{"lineNumber":53,"author":{"gitId":"nbvannhi"},"content":"          break;","lastModifiedDate":"2021-08-19"},{"lineNumber":54,"author":{"gitId":"nbvannhi"},"content":"        case \"INFO\":","lastModifiedDate":"2021-08-19"},{"lineNumber":55,"author":{"gitId":"nbvannhi"},"content":"          System.out.println(","lastModifiedDate":"2021-08-19"},{"lineNumber":56,"author":{"gitId":"nbvannhi"},"content":"            \"\\t Please input the description and date with correct format.\\n\" +","lastModifiedDate":"2021-08-19"},{"lineNumber":57,"author":{"gitId":"nbvannhi"},"content":"            \"\\t For task commands, the format should be as follows:\\n\" +","lastModifiedDate":"2021-08-19"},{"lineNumber":58,"author":{"gitId":"nbvannhi"},"content":"            \"\\t       todo [DESCRIPTION]\\n\" +","lastModifiedDate":"2021-08-19"},{"lineNumber":59,"author":{"gitId":"nbvannhi"},"content":"            \"\\t   deadline [DESCRIPTION] /by [DATE]\\n\" +","lastModifiedDate":"2021-08-19"},{"lineNumber":60,"author":{"gitId":"nbvannhi"},"content":"            \"\\t      event [DESCRIPTION] /at [DATE]\");","lastModifiedDate":"2021-08-19"},{"lineNumber":61,"author":{"gitId":"nbvannhi"},"content":"          break;","lastModifiedDate":"2021-08-19"},{"lineNumber":62,"author":{"gitId":"nbvannhi"},"content":"      }","lastModifiedDate":"2021-08-19"},{"lineNumber":63,"author":{"gitId":"nbvannhi"},"content":"    } catch (InvalidCommandBloomException e) {","lastModifiedDate":"2021-08-19"},{"lineNumber":64,"author":{"gitId":"nbvannhi"},"content":"      System.out.println(","lastModifiedDate":"2021-08-19"},{"lineNumber":65,"author":{"gitId":"nbvannhi"},"content":"        \"\\t Sorry, I don\u0027t understand that command.\\n\" +","lastModifiedDate":"2021-08-19"},{"lineNumber":66,"author":{"gitId":"nbvannhi"},"content":"        \"\\t Please try again :)\");","lastModifiedDate":"2021-08-19"},{"lineNumber":67,"author":{"gitId":"nbvannhi"},"content":"    } catch (BloomException e) {","lastModifiedDate":"2021-08-19"},{"lineNumber":68,"author":{"gitId":"nbvannhi"},"content":"      System.out.println(","lastModifiedDate":"2021-08-19"},{"lineNumber":69,"author":{"gitId":"nbvannhi"},"content":"        \"\\t Sorry, something went wrong!\\n\" +","lastModifiedDate":"2021-08-19"},{"lineNumber":70,"author":{"gitId":"nbvannhi"},"content":"        \"\\t Bloom has withered :(\");","lastModifiedDate":"2021-08-19"},{"lineNumber":71,"author":{"gitId":"nbvannhi"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":72,"author":{"gitId":"nbvannhi"},"content":"    sc.close();","lastModifiedDate":"2021-08-19"},{"lineNumber":73,"author":{"gitId":"nbvannhi"},"content":"  }","lastModifiedDate":"2021-08-19"},{"lineNumber":74,"author":{"gitId":"nbvannhi"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":75,"author":{"gitId":"nbvannhi"},"content":"  /**","lastModifiedDate":"2021-08-19"},{"lineNumber":76,"author":{"gitId":"nbvannhi"},"content":"   * Run a command line as inputted.","lastModifiedDate":"2021-08-19"},{"lineNumber":77,"author":{"gitId":"nbvannhi"},"content":"   * @param  cmd            the input command","lastModifiedDate":"2021-08-19"},{"lineNumber":78,"author":{"gitId":"nbvannhi"},"content":"   * @return true           if there no exception is thrown","lastModifiedDate":"2021-08-19"},{"lineNumber":79,"author":{"gitId":"nbvannhi"},"content":"   *         false          if an exception is thrown","lastModifiedDate":"2021-08-19"},{"lineNumber":80,"author":{"gitId":"nbvannhi"},"content":"   * @throws BloomException the exceptions related to the bot","lastModifiedDate":"2021-08-19"},{"lineNumber":81,"author":{"gitId":"nbvannhi"},"content":"   */","lastModifiedDate":"2021-08-19"},{"lineNumber":82,"author":{"gitId":"nbvannhi"},"content":"  public boolean run(String cmd) throws BloomException {","lastModifiedDate":"2021-08-19"},{"lineNumber":83,"author":{"gitId":"nbvannhi"},"content":"    System.out.println(SPLIT_LINE);","lastModifiedDate":"2021-08-19"},{"lineNumber":84,"author":{"gitId":"nbvannhi"},"content":"    String[] line \u003d cmd.split(\" \");","lastModifiedDate":"2021-08-19"},{"lineNumber":85,"author":{"gitId":"nbvannhi"},"content":"    Action action \u003d get(cmd);","lastModifiedDate":"2021-08-19"},{"lineNumber":86,"author":{"gitId":"nbvannhi"},"content":"    switch (action) {","lastModifiedDate":"2021-08-19"},{"lineNumber":87,"author":{"gitId":"nbvannhi"},"content":"      case GREET: greet(); break;","lastModifiedDate":"2021-08-19"},{"lineNumber":88,"author":{"gitId":"nbvannhi"},"content":"      case BYE: exit(); break;","lastModifiedDate":"2021-08-19"},{"lineNumber":89,"author":{"gitId":"nbvannhi"},"content":"      case LIST: list(); break;","lastModifiedDate":"2021-08-19"},{"lineNumber":90,"author":{"gitId":"nbvannhi"},"content":"      case DONE:","lastModifiedDate":"2021-08-19"},{"lineNumber":91,"author":{"gitId":"nbvannhi"},"content":"      case DELETE:","lastModifiedDate":"2021-08-19"},{"lineNumber":92,"author":{"gitId":"nbvannhi"},"content":"        try {","lastModifiedDate":"2021-08-19"},{"lineNumber":93,"author":{"gitId":"nbvannhi"},"content":"          if (line[0].equalsIgnoreCase(\"DONE\"))","lastModifiedDate":"2021-08-19"},{"lineNumber":94,"author":{"gitId":"nbvannhi"},"content":"            done(Integer.parseInt(line[1]));","lastModifiedDate":"2021-08-19"},{"lineNumber":95,"author":{"gitId":"nbvannhi"},"content":"          else delete(Integer.parseInt(line[1]));","lastModifiedDate":"2021-08-19"},{"lineNumber":96,"author":{"gitId":"nbvannhi"},"content":"          break;","lastModifiedDate":"2021-08-19"},{"lineNumber":97,"author":{"gitId":"nbvannhi"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-19"},{"lineNumber":98,"author":{"gitId":"nbvannhi"},"content":"          throw new IncompleteCommandBloomException(\"INDEX\");","lastModifiedDate":"2021-08-19"},{"lineNumber":99,"author":{"gitId":"nbvannhi"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":100,"author":{"gitId":"nbvannhi"},"content":"      case TODO:","lastModifiedDate":"2021-08-19"},{"lineNumber":101,"author":{"gitId":"nbvannhi"},"content":"        try {","lastModifiedDate":"2021-08-19"},{"lineNumber":102,"author":{"gitId":"nbvannhi"},"content":"          int i \u003d cmd.indexOf(\" \") + 1;","lastModifiedDate":"2021-08-19"},{"lineNumber":103,"author":{"gitId":"nbvannhi"},"content":"          if (i \u003d\u003d 0) throw new IncompleteCommandBloomException(\"INFO\");","lastModifiedDate":"2021-08-19"},{"lineNumber":104,"author":{"gitId":"nbvannhi"},"content":"          todo(cmd.substring(i));","lastModifiedDate":"2021-08-19"},{"lineNumber":105,"author":{"gitId":"nbvannhi"},"content":"          break;","lastModifiedDate":"2021-08-19"},{"lineNumber":106,"author":{"gitId":"nbvannhi"},"content":"        } catch (StringIndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-19"},{"lineNumber":107,"author":{"gitId":"nbvannhi"},"content":"          throw new IncompleteCommandBloomException(\"INFO\");","lastModifiedDate":"2021-08-19"},{"lineNumber":108,"author":{"gitId":"nbvannhi"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":109,"author":{"gitId":"nbvannhi"},"content":"      case DEADLINE:","lastModifiedDate":"2021-08-19"},{"lineNumber":110,"author":{"gitId":"nbvannhi"},"content":"      case EVENT:","lastModifiedDate":"2021-08-19"},{"lineNumber":111,"author":{"gitId":"nbvannhi"},"content":"        try {","lastModifiedDate":"2021-08-19"},{"lineNumber":112,"author":{"gitId":"nbvannhi"},"content":"          int i \u003d cmd.indexOf(\" \") + 1;","lastModifiedDate":"2021-08-19"},{"lineNumber":113,"author":{"gitId":"nbvannhi"},"content":"          if (i \u003d\u003d 0) throw new IncompleteCommandBloomException(\"INFO\");","lastModifiedDate":"2021-08-19"},{"lineNumber":114,"author":{"gitId":"nbvannhi"},"content":"          String desc \u003d cmd.substring(i, cmd.indexOf(\"/\") - 1);","lastModifiedDate":"2021-08-19"},{"lineNumber":115,"author":{"gitId":"nbvannhi"},"content":"          String date \u003d cmd.substring(cmd.indexOf(\"/\") + 4);","lastModifiedDate":"2021-08-19"},{"lineNumber":116,"author":{"gitId":"nbvannhi"},"content":"          if (line[0].equalsIgnoreCase(\"DEADLINE\"))","lastModifiedDate":"2021-08-19"},{"lineNumber":117,"author":{"gitId":"nbvannhi"},"content":"            deadline(desc, date);","lastModifiedDate":"2021-08-19"},{"lineNumber":118,"author":{"gitId":"nbvannhi"},"content":"          else event(desc, date);","lastModifiedDate":"2021-08-19"},{"lineNumber":119,"author":{"gitId":"nbvannhi"},"content":"          break;","lastModifiedDate":"2021-08-19"},{"lineNumber":120,"author":{"gitId":"nbvannhi"},"content":"        } catch (StringIndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-19"},{"lineNumber":121,"author":{"gitId":"nbvannhi"},"content":"          throw new IncompleteCommandBloomException(\"INFO\");","lastModifiedDate":"2021-08-19"},{"lineNumber":122,"author":{"gitId":"nbvannhi"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":123,"author":{"gitId":"nbvannhi"},"content":"      case ECHO:","lastModifiedDate":"2021-08-19"},{"lineNumber":124,"author":{"gitId":"nbvannhi"},"content":"      case ADD:","lastModifiedDate":"2021-08-19"},{"lineNumber":125,"author":{"gitId":"nbvannhi"},"content":"        String str \u003d cmd.substring(cmd.indexOf(\" \") + 1);","lastModifiedDate":"2021-08-19"},{"lineNumber":126,"author":{"gitId":"nbvannhi"},"content":"        if (line[0].equalsIgnoreCase(\"ECHO\"))","lastModifiedDate":"2021-08-19"},{"lineNumber":127,"author":{"gitId":"nbvannhi"},"content":"          echo(str);","lastModifiedDate":"2021-08-19"},{"lineNumber":128,"author":{"gitId":"nbvannhi"},"content":"        else add(str);","lastModifiedDate":"2021-08-19"},{"lineNumber":129,"author":{"gitId":"nbvannhi"},"content":"        break;","lastModifiedDate":"2021-08-19"},{"lineNumber":130,"author":{"gitId":"nbvannhi"},"content":"      case ALL:","lastModifiedDate":"2021-08-19"},{"lineNumber":131,"author":{"gitId":"nbvannhi"},"content":"      case REMOVE:","lastModifiedDate":"2021-08-19"},{"lineNumber":132,"author":{"gitId":"nbvannhi"},"content":"      case CREATE: throw new WrongCommandBloomException(line[0]);","lastModifiedDate":"2021-08-19"},{"lineNumber":133,"author":{"gitId":"nbvannhi"},"content":"      default: throw new InvalidCommandBloomException(\"\");","lastModifiedDate":"2021-08-19"},{"lineNumber":134,"author":{"gitId":"nbvannhi"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":135,"author":{"gitId":"nbvannhi"},"content":"    System.out.println(SPLIT_LINE);","lastModifiedDate":"2021-08-19"},{"lineNumber":136,"author":{"gitId":"nbvannhi"},"content":"    return !cmd.equals(\"bye\");","lastModifiedDate":"2021-08-19"},{"lineNumber":137,"author":{"gitId":"nbvannhi"},"content":"  }","lastModifiedDate":"2021-08-19"},{"lineNumber":138,"author":{"gitId":"nbvannhi"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":139,"author":{"gitId":"nbvannhi"},"content":"  /**","lastModifiedDate":"2021-08-19"},{"lineNumber":140,"author":{"gitId":"nbvannhi"},"content":"   * Get action of the input command.","lastModifiedDate":"2021-08-19"},{"lineNumber":141,"author":{"gitId":"nbvannhi"},"content":"   * @param  cmd the input command","lastModifiedDate":"2021-08-19"},{"lineNumber":142,"author":{"gitId":"nbvannhi"},"content":"   * @return     corresponding Action","lastModifiedDate":"2021-08-19"},{"lineNumber":143,"author":{"gitId":"nbvannhi"},"content":"   */","lastModifiedDate":"2021-08-19"},{"lineNumber":144,"author":{"gitId":"nbvannhi"},"content":"  public Action get(String cmd) {","lastModifiedDate":"2021-08-19"},{"lineNumber":145,"author":{"gitId":"nbvannhi"},"content":"    String[] line \u003d cmd.split(\" \");","lastModifiedDate":"2021-08-19"},{"lineNumber":146,"author":{"gitId":"nbvannhi"},"content":"    switch (line[0].toUpperCase()) {","lastModifiedDate":"2021-08-19"},{"lineNumber":147,"author":{"gitId":"nbvannhi"},"content":"      case \"GREET\": return Action.GREET;","lastModifiedDate":"2021-08-19"},{"lineNumber":148,"author":{"gitId":"nbvannhi"},"content":"      case \"BYE\": return Action.BYE;","lastModifiedDate":"2021-08-19"},{"lineNumber":149,"author":{"gitId":"nbvannhi"},"content":"      case \"LIST\": return Action.LIST;","lastModifiedDate":"2021-08-19"},{"lineNumber":150,"author":{"gitId":"nbvannhi"},"content":"      case \"DONE\": return Action.DONE;","lastModifiedDate":"2021-08-19"},{"lineNumber":151,"author":{"gitId":"nbvannhi"},"content":"      case \"DELETE\": return Action.DELETE;","lastModifiedDate":"2021-08-19"},{"lineNumber":152,"author":{"gitId":"nbvannhi"},"content":"      case \"TODO\": return Action.TODO;","lastModifiedDate":"2021-08-19"},{"lineNumber":153,"author":{"gitId":"nbvannhi"},"content":"      case \"DEADLINE\": return Action.DEADLINE;","lastModifiedDate":"2021-08-19"},{"lineNumber":154,"author":{"gitId":"nbvannhi"},"content":"      case \"EVENT\": return Action.EVENT;","lastModifiedDate":"2021-08-19"},{"lineNumber":155,"author":{"gitId":"nbvannhi"},"content":"      case \"ECHO\": return Action.ECHO;","lastModifiedDate":"2021-08-19"},{"lineNumber":156,"author":{"gitId":"nbvannhi"},"content":"      case \"ADD\": return Action.ADD;","lastModifiedDate":"2021-08-19"},{"lineNumber":157,"author":{"gitId":"nbvannhi"},"content":"      case \"ALL\": return Action.ALL;","lastModifiedDate":"2021-08-19"},{"lineNumber":158,"author":{"gitId":"nbvannhi"},"content":"      case \"REMOVE\": return Action.REMOVE;","lastModifiedDate":"2021-08-19"},{"lineNumber":159,"author":{"gitId":"nbvannhi"},"content":"      case \"CREATE\": return Action.CREATE;","lastModifiedDate":"2021-08-19"},{"lineNumber":160,"author":{"gitId":"nbvannhi"},"content":"      default: return Action.UNKNOWN;","lastModifiedDate":"2021-08-19"},{"lineNumber":161,"author":{"gitId":"nbvannhi"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":162,"author":{"gitId":"nbvannhi"},"content":"  }","lastModifiedDate":"2021-08-19"},{"lineNumber":163,"author":{"gitId":"nbvannhi"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":164,"author":{"gitId":"nbvannhi"},"content":"  /**","lastModifiedDate":"2021-08-19"},{"lineNumber":165,"author":{"gitId":"nbvannhi"},"content":"   * Greet users.","lastModifiedDate":"2021-08-19"},{"lineNumber":166,"author":{"gitId":"nbvannhi"},"content":"   */","lastModifiedDate":"2021-08-19"},{"lineNumber":167,"author":{"gitId":"nbvannhi"},"content":"  public void greet() {","lastModifiedDate":"2021-08-19"},{"lineNumber":168,"author":{"gitId":"nbvannhi"},"content":"    String logo \u003d","lastModifiedDate":"2021-08-19"},{"lineNumber":169,"author":{"gitId":"nbvannhi"},"content":"      \"\\t   ____  _                       \\n\" +","lastModifiedDate":"2021-08-19"},{"lineNumber":170,"author":{"gitId":"nbvannhi"},"content":"      \"\\t  |  _ \\\\| |                      \\n\" +","lastModifiedDate":"2021-08-19"},{"lineNumber":171,"author":{"gitId":"nbvannhi"},"content":"      \"\\t  | |_) | | ___   ___  _ __ ___  \\n\" +","lastModifiedDate":"2021-08-19"},{"lineNumber":172,"author":{"gitId":"nbvannhi"},"content":"      \"\\t  |  _ \u003c| |/ _ \\\\ / _ \\\\| \u0027_ ` _ \\\\ \\n\" +","lastModifiedDate":"2021-08-19"},{"lineNumber":173,"author":{"gitId":"nbvannhi"},"content":"      \"\\t  | |_) | | (_) | (_) | | | | | |\\n\" +","lastModifiedDate":"2021-08-19"},{"lineNumber":174,"author":{"gitId":"nbvannhi"},"content":"      \"\\t  |____/|_|\\\\___/ \\\\___/|_| |_| |_|\\n\" +","lastModifiedDate":"2021-08-19"},{"lineNumber":175,"author":{"gitId":"nbvannhi"},"content":"      \"\\n\";","lastModifiedDate":"2021-08-18"},{"lineNumber":176,"author":{"gitId":"nbvannhi"},"content":"    String greeting \u003d ","lastModifiedDate":"2021-08-18"},{"lineNumber":177,"author":{"gitId":"nbvannhi"},"content":"      \"\\t Hello! I\u0027m Bloom\\n\" + ","lastModifiedDate":"2021-08-18"},{"lineNumber":178,"author":{"gitId":"nbvannhi"},"content":"      \"\\t What can I do for you?\";","lastModifiedDate":"2021-08-19"},{"lineNumber":179,"author":{"gitId":"nbvannhi"},"content":"    System.out.println(logo + greeting);","lastModifiedDate":"2021-08-19"},{"lineNumber":180,"author":{"gitId":"nbvannhi"},"content":"  }","lastModifiedDate":"2021-08-18"},{"lineNumber":181,"author":{"gitId":"nbvannhi"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":182,"author":{"gitId":"nbvannhi"},"content":"  /**","lastModifiedDate":"2021-08-19"},{"lineNumber":183,"author":{"gitId":"nbvannhi"},"content":"   * Echo whatever texts inputted.","lastModifiedDate":"2021-08-19"},{"lineNumber":184,"author":{"gitId":"nbvannhi"},"content":"   * @param str the text input","lastModifiedDate":"2021-08-19"},{"lineNumber":185,"author":{"gitId":"nbvannhi"},"content":"   */","lastModifiedDate":"2021-08-19"},{"lineNumber":186,"author":{"gitId":"nbvannhi"},"content":"  public void echo(String str) {","lastModifiedDate":"2021-08-19"},{"lineNumber":187,"author":{"gitId":"nbvannhi"},"content":"    System.out.println(\"\\t \" + str);","lastModifiedDate":"2021-08-19"},{"lineNumber":188,"author":{"gitId":"nbvannhi"},"content":"  }","lastModifiedDate":"2021-08-19"},{"lineNumber":189,"author":{"gitId":"nbvannhi"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":190,"author":{"gitId":"nbvannhi"},"content":"  /**","lastModifiedDate":"2021-08-19"},{"lineNumber":191,"author":{"gitId":"nbvannhi"},"content":"   * Say goodbye.","lastModifiedDate":"2021-08-19"},{"lineNumber":192,"author":{"gitId":"nbvannhi"},"content":"   * NOTE: only for testing purpose therefore","lastModifiedDate":"2021-08-19"},{"lineNumber":193,"author":{"gitId":"nbvannhi"},"content":"   *       exception handling is not supported.","lastModifiedDate":"2021-08-19"},{"lineNumber":194,"author":{"gitId":"nbvannhi"},"content":"   */","lastModifiedDate":"2021-08-19"},{"lineNumber":195,"author":{"gitId":"nbvannhi"},"content":"  public void exit() {","lastModifiedDate":"2021-08-19"},{"lineNumber":196,"author":{"gitId":"nbvannhi"},"content":"    System.out.println(\"\\t Bye. Hope to see you again soon!\");","lastModifiedDate":"2021-08-19"},{"lineNumber":197,"author":{"gitId":"nbvannhi"},"content":"  }","lastModifiedDate":"2021-08-19"},{"lineNumber":198,"author":{"gitId":"nbvannhi"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":199,"author":{"gitId":"nbvannhi"},"content":"  /**","lastModifiedDate":"2021-08-19"},{"lineNumber":200,"author":{"gitId":"nbvannhi"},"content":"   * Add new task.","lastModifiedDate":"2021-08-19"},{"lineNumber":201,"author":{"gitId":"nbvannhi"},"content":"   * NOTE: only for testing purpose therefore","lastModifiedDate":"2021-08-19"},{"lineNumber":202,"author":{"gitId":"nbvannhi"},"content":"   *       exception handling is not supported.","lastModifiedDate":"2021-08-19"},{"lineNumber":203,"author":{"gitId":"nbvannhi"},"content":"   * @param desc the task description","lastModifiedDate":"2021-08-19"},{"lineNumber":204,"author":{"gitId":"nbvannhi"},"content":"   */","lastModifiedDate":"2021-08-19"},{"lineNumber":205,"author":{"gitId":"nbvannhi"},"content":"  public void add(String desc) {","lastModifiedDate":"2021-08-19"},{"lineNumber":206,"author":{"gitId":"nbvannhi"},"content":"    Task t \u003d new Task(desc);","lastModifiedDate":"2021-08-19"},{"lineNumber":207,"author":{"gitId":"nbvannhi"},"content":"    Task.tasks.add(t);","lastModifiedDate":"2021-08-19"},{"lineNumber":208,"author":{"gitId":"nbvannhi"},"content":"    System.out.println(\"\\t added: \" + t.description);","lastModifiedDate":"2021-08-19"},{"lineNumber":209,"author":{"gitId":"nbvannhi"},"content":"  }","lastModifiedDate":"2021-08-19"},{"lineNumber":210,"author":{"gitId":"nbvannhi"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":211,"author":{"gitId":"nbvannhi"},"content":"  /**","lastModifiedDate":"2021-08-19"},{"lineNumber":212,"author":{"gitId":"nbvannhi"},"content":"   * List all tasks.","lastModifiedDate":"2021-08-19"},{"lineNumber":213,"author":{"gitId":"nbvannhi"},"content":"   */","lastModifiedDate":"2021-08-19"},{"lineNumber":214,"author":{"gitId":"nbvannhi"},"content":"  public void list() {","lastModifiedDate":"2021-08-19"},{"lineNumber":215,"author":{"gitId":"nbvannhi"},"content":"    System.out.println(\"\\t Here are the tasks in your list:\");","lastModifiedDate":"2021-08-19"},{"lineNumber":216,"author":{"gitId":"nbvannhi"},"content":"    for (int i \u003d 1; i \u003c\u003d Task.tasks.size(); ++i) {","lastModifiedDate":"2021-08-19"},{"lineNumber":217,"author":{"gitId":"nbvannhi"},"content":"      Task t \u003d Task.tasks.get(i-1);","lastModifiedDate":"2021-08-19"},{"lineNumber":218,"author":{"gitId":"nbvannhi"},"content":"      System.out.println(\"\\t \" + i + \". \" + t);","lastModifiedDate":"2021-08-19"},{"lineNumber":219,"author":{"gitId":"nbvannhi"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":220,"author":{"gitId":"nbvannhi"},"content":"  }","lastModifiedDate":"2021-08-18"},{"lineNumber":221,"author":{"gitId":"nbvannhi"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":222,"author":{"gitId":"nbvannhi"},"content":"  /**","lastModifiedDate":"2021-08-19"},{"lineNumber":223,"author":{"gitId":"nbvannhi"},"content":"   * Mark one task as done.","lastModifiedDate":"2021-08-19"},{"lineNumber":224,"author":{"gitId":"nbvannhi"},"content":"   * @param i the order of the task as listed","lastModifiedDate":"2021-08-19"},{"lineNumber":225,"author":{"gitId":"nbvannhi"},"content":"   */","lastModifiedDate":"2021-08-19"},{"lineNumber":226,"author":{"gitId":"nbvannhi"},"content":"  public void done(int i) {","lastModifiedDate":"2021-08-19"},{"lineNumber":227,"author":{"gitId":"nbvannhi"},"content":"    Task t \u003d Task.tasks.get(i-1);","lastModifiedDate":"2021-08-19"},{"lineNumber":228,"author":{"gitId":"nbvannhi"},"content":"    t.markAsDone();","lastModifiedDate":"2021-08-19"},{"lineNumber":229,"author":{"gitId":"nbvannhi"},"content":"    System.out.println(","lastModifiedDate":"2021-08-19"},{"lineNumber":230,"author":{"gitId":"nbvannhi"},"content":"      \"\\t Nice! I\u0027ve marked this task as done:\\n\" +","lastModifiedDate":"2021-08-19"},{"lineNumber":231,"author":{"gitId":"nbvannhi"},"content":"      \"\\t   \" + t);","lastModifiedDate":"2021-08-19"},{"lineNumber":232,"author":{"gitId":"nbvannhi"},"content":"  }","lastModifiedDate":"2021-08-19"},{"lineNumber":233,"author":{"gitId":"nbvannhi"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":234,"author":{"gitId":"nbvannhi"},"content":"  /**","lastModifiedDate":"2021-08-19"},{"lineNumber":235,"author":{"gitId":"nbvannhi"},"content":"   * Add new to-do task.","lastModifiedDate":"2021-08-19"},{"lineNumber":236,"author":{"gitId":"nbvannhi"},"content":"   * @param desc the task description","lastModifiedDate":"2021-08-19"},{"lineNumber":237,"author":{"gitId":"nbvannhi"},"content":"   */","lastModifiedDate":"2021-08-19"},{"lineNumber":238,"author":{"gitId":"nbvannhi"},"content":"  public void todo(String desc) {","lastModifiedDate":"2021-08-19"},{"lineNumber":239,"author":{"gitId":"nbvannhi"},"content":"    ToDo td \u003d new ToDo(desc);","lastModifiedDate":"2021-08-19"},{"lineNumber":240,"author":{"gitId":"nbvannhi"},"content":"    Task.tasks.add(td);","lastModifiedDate":"2021-08-19"},{"lineNumber":241,"author":{"gitId":"nbvannhi"},"content":"    System.out.println(","lastModifiedDate":"2021-08-19"},{"lineNumber":242,"author":{"gitId":"nbvannhi"},"content":"      \"\\t Got it. I\u0027ve added this task:\\n\" +","lastModifiedDate":"2021-08-19"},{"lineNumber":243,"author":{"gitId":"nbvannhi"},"content":"      \"\\t   \" + td + \"\\n\" +","lastModifiedDate":"2021-08-19"},{"lineNumber":244,"author":{"gitId":"nbvannhi"},"content":"      \"\\t Now you have \" + Task.tasks.size() + \" tasks in the list.\");","lastModifiedDate":"2021-08-19"},{"lineNumber":245,"author":{"gitId":"nbvannhi"},"content":"  }","lastModifiedDate":"2021-08-19"},{"lineNumber":246,"author":{"gitId":"nbvannhi"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":247,"author":{"gitId":"nbvannhi"},"content":"  /**","lastModifiedDate":"2021-08-19"},{"lineNumber":248,"author":{"gitId":"nbvannhi"},"content":"   * Add new deadline task.","lastModifiedDate":"2021-08-19"},{"lineNumber":249,"author":{"gitId":"nbvannhi"},"content":"   * @param desc the task description","lastModifiedDate":"2021-08-19"},{"lineNumber":250,"author":{"gitId":"nbvannhi"},"content":"   * @param by   the date by which the task should be completed","lastModifiedDate":"2021-08-19"},{"lineNumber":251,"author":{"gitId":"nbvannhi"},"content":"   */","lastModifiedDate":"2021-08-19"},{"lineNumber":252,"author":{"gitId":"nbvannhi"},"content":"  public void deadline(String desc, String by) {","lastModifiedDate":"2021-08-19"},{"lineNumber":253,"author":{"gitId":"nbvannhi"},"content":"    Deadline d \u003d new Deadline(desc, by);","lastModifiedDate":"2021-08-19"},{"lineNumber":254,"author":{"gitId":"nbvannhi"},"content":"    Task.tasks.add(d);","lastModifiedDate":"2021-08-19"},{"lineNumber":255,"author":{"gitId":"nbvannhi"},"content":"    System.out.println(","lastModifiedDate":"2021-08-19"},{"lineNumber":256,"author":{"gitId":"nbvannhi"},"content":"      \"\\t Got it. I\u0027ve added this task:\\n\" +","lastModifiedDate":"2021-08-19"},{"lineNumber":257,"author":{"gitId":"nbvannhi"},"content":"      \"\\t   \" + d + \"\\n\" +","lastModifiedDate":"2021-08-19"},{"lineNumber":258,"author":{"gitId":"nbvannhi"},"content":"      \"\\t Now you have \" + Task.tasks.size() + \" tasks in the list.\");","lastModifiedDate":"2021-08-19"},{"lineNumber":259,"author":{"gitId":"nbvannhi"},"content":"  }","lastModifiedDate":"2021-08-19"},{"lineNumber":260,"author":{"gitId":"nbvannhi"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":261,"author":{"gitId":"nbvannhi"},"content":"  /**","lastModifiedDate":"2021-08-19"},{"lineNumber":262,"author":{"gitId":"nbvannhi"},"content":"   * Add new event task.","lastModifiedDate":"2021-08-19"},{"lineNumber":263,"author":{"gitId":"nbvannhi"},"content":"   * @param desc the task description","lastModifiedDate":"2021-08-19"},{"lineNumber":264,"author":{"gitId":"nbvannhi"},"content":"   * @param at   the date at which the task is happening","lastModifiedDate":"2021-08-19"},{"lineNumber":265,"author":{"gitId":"nbvannhi"},"content":"   */","lastModifiedDate":"2021-08-19"},{"lineNumber":266,"author":{"gitId":"nbvannhi"},"content":"  public void event(String desc, String at) {","lastModifiedDate":"2021-08-19"},{"lineNumber":267,"author":{"gitId":"nbvannhi"},"content":"    Event e \u003d new Event(desc, at);","lastModifiedDate":"2021-08-19"},{"lineNumber":268,"author":{"gitId":"nbvannhi"},"content":"    Task.tasks.add(e);","lastModifiedDate":"2021-08-19"},{"lineNumber":269,"author":{"gitId":"nbvannhi"},"content":"    System.out.println(","lastModifiedDate":"2021-08-19"},{"lineNumber":270,"author":{"gitId":"nbvannhi"},"content":"      \"\\t Got it. I\u0027ve added this task:\\n\" +","lastModifiedDate":"2021-08-19"},{"lineNumber":271,"author":{"gitId":"nbvannhi"},"content":"      \"\\t   \" + e + \"\\n\" +","lastModifiedDate":"2021-08-19"},{"lineNumber":272,"author":{"gitId":"nbvannhi"},"content":"      \"\\t Now you have \" + Task.tasks.size() + \" tasks in the list.\");","lastModifiedDate":"2021-08-19"},{"lineNumber":273,"author":{"gitId":"nbvannhi"},"content":"  }","lastModifiedDate":"2021-08-18"},{"lineNumber":274,"author":{"gitId":"nbvannhi"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":275,"author":{"gitId":"nbvannhi"},"content":"  /**","lastModifiedDate":"2021-08-19"},{"lineNumber":276,"author":{"gitId":"nbvannhi"},"content":"   * Delete one task.","lastModifiedDate":"2021-08-19"},{"lineNumber":277,"author":{"gitId":"nbvannhi"},"content":"   * @param i the order of the task as listed","lastModifiedDate":"2021-08-19"},{"lineNumber":278,"author":{"gitId":"nbvannhi"},"content":"   */","lastModifiedDate":"2021-08-19"},{"lineNumber":279,"author":{"gitId":"nbvannhi"},"content":"  public void delete(int i) {","lastModifiedDate":"2021-08-19"},{"lineNumber":280,"author":{"gitId":"nbvannhi"},"content":"    Task t \u003d Task.tasks.remove(i-1);","lastModifiedDate":"2021-08-19"},{"lineNumber":281,"author":{"gitId":"nbvannhi"},"content":"    System.out.println(","lastModifiedDate":"2021-08-19"},{"lineNumber":282,"author":{"gitId":"nbvannhi"},"content":"      \"\\t Noted! I\u0027ve removed this task:\\n\" +","lastModifiedDate":"2021-08-19"},{"lineNumber":283,"author":{"gitId":"nbvannhi"},"content":"      \"\\t   \" + t + \"\\n\" +","lastModifiedDate":"2021-08-19"},{"lineNumber":284,"author":{"gitId":"nbvannhi"},"content":"      \"\\t Now you have \" + Task.tasks.size() + \" tasks in the list.\");","lastModifiedDate":"2021-08-19"},{"lineNumber":285,"author":{"gitId":"nbvannhi"},"content":"  }","lastModifiedDate":"2021-08-19"},{"lineNumber":286,"author":{"gitId":"nbvannhi"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"nbvannhi":286}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nbvannhi"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-19"},{"lineNumber":2,"author":{"gitId":"nbvannhi"},"content":"\tprotected String by;","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"nbvannhi"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"nbvannhi"},"content":"\tpublic Deadline(String description, String by) {","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"nbvannhi"},"content":"\t\tsuper(description);","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"nbvannhi"},"content":"\t\tthis.by \u003d by;","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"nbvannhi"},"content":"\t}","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"nbvannhi"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"nbvannhi"},"content":"\t@Override","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"nbvannhi"},"content":"\tpublic String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"nbvannhi"},"content":"\t\treturn \"[D]\" + super.toString() + \" (by: \" + by + \")\";","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"nbvannhi"},"content":"\t}","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"nbvannhi"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"nbvannhi":13}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nbvannhi"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-19"},{"lineNumber":2,"author":{"gitId":"nbvannhi"},"content":"\tprotected String at;","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"nbvannhi"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"nbvannhi"},"content":"\tpublic Event(String description, String at) {","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"nbvannhi"},"content":"\t\tsuper(description);","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"nbvannhi"},"content":"\t\tthis.at \u003d at;","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"nbvannhi"},"content":"\t}","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"nbvannhi"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"nbvannhi"},"content":"\t@Override","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"nbvannhi"},"content":"\tpublic String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"nbvannhi"},"content":"\t\treturn \"[E]\" + super.toString() + \" (at: \" + at + \")\";","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"nbvannhi"},"content":"\t}","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"nbvannhi"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"nbvannhi":13}},{"path":"src/main/java/IncompleteCommandBloomException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nbvannhi"},"content":"public class IncompleteCommandBloomException extends BloomException {","lastModifiedDate":"2021-08-19"},{"lineNumber":2,"author":{"gitId":"nbvannhi"},"content":"\tpublic IncompleteCommandBloomException(String errorMessage) {","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"nbvannhi"},"content":"\t\tsuper(errorMessage);","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"nbvannhi"},"content":"\t}","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"nbvannhi"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"nbvannhi":5}},{"path":"src/main/java/InvalidCommandBloomException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nbvannhi"},"content":"public class InvalidCommandBloomException extends BloomException {","lastModifiedDate":"2021-08-19"},{"lineNumber":2,"author":{"gitId":"nbvannhi"},"content":"\tpublic InvalidCommandBloomException(String errorMessage) {","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"nbvannhi"},"content":"\t\tsuper(errorMessage);","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"nbvannhi"},"content":"\t}","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"nbvannhi"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"nbvannhi":5}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nbvannhi"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-19"},{"lineNumber":2,"author":{"gitId":"nbvannhi"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"nbvannhi"},"content":"public class Task {","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"nbvannhi"},"content":"  protected static ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"nbvannhi"},"content":"  protected String description;","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"nbvannhi"},"content":"  protected boolean status;","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"nbvannhi"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"nbvannhi"},"content":"  public Task(String description) {","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"nbvannhi"},"content":"    this.description \u003d description;","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"nbvannhi"},"content":"    this.status \u003d false;","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"nbvannhi"},"content":"  }","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"nbvannhi"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"nbvannhi"},"content":"  @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"nbvannhi"},"content":"  public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"nbvannhi"},"content":"    return \"[\" + getStatusIcon() + \"] \" + description;","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"nbvannhi"},"content":"  }","lastModifiedDate":"2021-08-19"},{"lineNumber":17,"author":{"gitId":"nbvannhi"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"nbvannhi"},"content":"  public String getStatusIcon() {","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"nbvannhi"},"content":"    return (status ? \"X\" : \" \");","lastModifiedDate":"2021-08-19"},{"lineNumber":20,"author":{"gitId":"nbvannhi"},"content":"  }","lastModifiedDate":"2021-08-19"},{"lineNumber":21,"author":{"gitId":"nbvannhi"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":22,"author":{"gitId":"nbvannhi"},"content":"  public void markAsDone() {","lastModifiedDate":"2021-08-19"},{"lineNumber":23,"author":{"gitId":"nbvannhi"},"content":"    status \u003d true;","lastModifiedDate":"2021-08-19"},{"lineNumber":24,"author":{"gitId":"nbvannhi"},"content":"  }","lastModifiedDate":"2021-08-19"},{"lineNumber":25,"author":{"gitId":"nbvannhi"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"nbvannhi":25}},{"path":"src/main/java/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nbvannhi"},"content":"public class ToDo extends Task {","lastModifiedDate":"2021-08-19"},{"lineNumber":2,"author":{"gitId":"nbvannhi"},"content":"\tpublic ToDo(String description) {","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"nbvannhi"},"content":"\t\tsuper(description);","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"nbvannhi"},"content":"\t}","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"nbvannhi"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"nbvannhi"},"content":"\t@Override","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"nbvannhi"},"content":"\tpublic String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"nbvannhi"},"content":"\t\treturn \"[T]\" + super.toString();","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"nbvannhi"},"content":"\t}","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"nbvannhi"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"nbvannhi":10}},{"path":"src/main/java/WrongCommandBloomException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nbvannhi"},"content":"public class WrongCommandBloomException extends BloomException {","lastModifiedDate":"2021-08-19"},{"lineNumber":2,"author":{"gitId":"nbvannhi"},"content":"\tpublic WrongCommandBloomException(String errorMessage) {","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"nbvannhi"},"content":"\t\tsuper(errorMessage);","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"nbvannhi"},"content":"\t}","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"nbvannhi"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"nbvannhi":5}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"nbvannhi"},"content":"todo read book","lastModifiedDate":"2021-08-19"},{"lineNumber":2,"author":{"gitId":"nbvannhi"},"content":"deadline return book /by June 6th","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"nbvannhi"},"content":"event project meeting /at Aug 6th 2-4pm","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"nbvannhi"},"content":"todo joint sports clob","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"nbvannhi"},"content":"todo borrow book","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"nbvannhi"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"nbvannhi"},"content":"done 1","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"nbvannhi"},"content":"done 4","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"nbvannhi"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"nbvannhi"},"content":"deadline return book /by Sunday","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"nbvannhi"},"content":"event project meeting","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"nbvannhi"},"content":"todo","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"nbvannhi":12}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"nbvannhi"},"content":"java -classpath ..\\bin Bloom \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"nbvannhi":1,"-":20}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"nbvannhi"},"content":"java -classpath ../bin Bloom \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-08-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"nbvannhi":1,"-":37}}]

[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"elroygohjy"},"content":"# duke.duke project template","lastModifiedDate":"2021-09-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"elroygohjy"},"content":"3. After that, locate the `src/main/java/duke.duke.java` file, right-click it, and choose `Run duke.duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2021-09-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"elroygohjy":2,"-":22}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"elroygohjy"},"content":"plugins {","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"elroygohjy"},"content":"    id \u0027java\u0027","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"elroygohjy"},"content":"    id \u0027application\u0027","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"elroygohjy"},"content":"    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.9\u0027","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"elroygohjy"},"content":"}","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"elroygohjy"},"content":"group \u0027org.example\u0027","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"elroygohjy"},"content":"version \u00271.0-SNAPSHOT\u0027","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"elroygohjy"},"content":"repositories {","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"elroygohjy"},"content":"    mavenCentral()","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"elroygohjy"},"content":"}","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"elroygohjy"},"content":"dependencies {","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"elroygohjy"},"content":"    testImplementation \u0027org.junit.jupiter:junit-jupiter-api:5.6.0\u0027","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"elroygohjy"},"content":"    testRuntimeOnly \u0027org.junit.jupiter:junit-jupiter-engine\u0027","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"elroygohjy"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"elroygohjy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"elroygohjy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"elroygohjy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"elroygohjy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"elroygohjy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"elroygohjy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"elroygohjy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"elroygohjy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"elroygohjy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"elroygohjy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"elroygohjy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"elroygohjy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-08-30"},{"lineNumber":32,"author":{"gitId":"elroygohjy"},"content":"}","lastModifiedDate":"2021-08-28"},{"lineNumber":33,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":34,"author":{"gitId":"elroygohjy"},"content":"test {","lastModifiedDate":"2021-08-28"},{"lineNumber":35,"author":{"gitId":"elroygohjy"},"content":"    useJUnitPlatform()","lastModifiedDate":"2021-08-28"},{"lineNumber":36,"author":{"gitId":"elroygohjy"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"elroygohjy":36}},{"path":"settings.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"elroygohjy"},"content":"rootProject.name \u003d \u0027ip\u0027","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"elroygohjy":2}},{"path":"src/main/java/Duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elroygohjy"},"content":"package duke;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"elroygohjy"},"content":"/**","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"elroygohjy"},"content":" * Duke is a simple bot that allows users to keep track of different types of tasks.","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"elroygohjy"},"content":" */","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"elroygohjy"},"content":"public class Duke {","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"elroygohjy"},"content":"    private final Storage storage;","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"elroygohjy"},"content":"    private final TaskList tasks;","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"elroygohjy"},"content":"    private Parser parser;","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"elroygohjy"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"elroygohjy"},"content":"     * Constructs an instance of Duke.","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"elroygohjy"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"elroygohjy"},"content":"     * @param filePath the path to save data","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"elroygohjy"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"elroygohjy"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"elroygohjy"},"content":"        this.storage \u003d new Storage(filePath);","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"elroygohjy"},"content":"        this.tasks \u003d this.storage.loadTasks();","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"elroygohjy"},"content":"        this.parser \u003d new Parser(tasks);","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"elroygohjy"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"elroygohjy"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":25,"author":{"gitId":"elroygohjy"},"content":"     * Returns parser response from user input.","lastModifiedDate":"2021-09-07"},{"lineNumber":26,"author":{"gitId":"elroygohjy"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":27,"author":{"gitId":"elroygohjy"},"content":"     * @param input user input","lastModifiedDate":"2021-09-07"},{"lineNumber":28,"author":{"gitId":"elroygohjy"},"content":"     * @return parser response to user input","lastModifiedDate":"2021-09-07"},{"lineNumber":29,"author":{"gitId":"elroygohjy"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":30,"author":{"gitId":"elroygohjy"},"content":"    public String getResponse(String input) {","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"elroygohjy"},"content":"        String response \u003d this.parser.getResponse(input);","lastModifiedDate":"2021-09-07"},{"lineNumber":32,"author":{"gitId":"elroygohjy"},"content":"        storage.saveData(tasks.encodeTasks());","lastModifiedDate":"2021-09-07"},{"lineNumber":33,"author":{"gitId":"elroygohjy"},"content":"        return response;","lastModifiedDate":"2021-09-07"},{"lineNumber":34,"author":{"gitId":"elroygohjy"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"elroygohjy"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"elroygohjy":37}},{"path":"src/main/java/Duke/Exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elroygohjy"},"content":"package duke.exception;","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":3,"author":{"gitId":"elroygohjy"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"elroygohjy"},"content":" * Duke Exception is thrown when any exception occurs in Duke.","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"elroygohjy"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"elroygohjy"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"elroygohjy"},"content":"    public DukeException(String errMessage) {","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"elroygohjy"},"content":"        super(errMessage);","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"elroygohjy"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"elroygohjy"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"elroygohjy":11}},{"path":"src/main/java/Duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elroygohjy"},"content":"package duke;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"elroygohjy"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"elroygohjy"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"elroygohjy"},"content":"/**","lastModifiedDate":"2021-09-07"},{"lineNumber":7,"author":{"gitId":"elroygohjy"},"content":" * Parser is a parser that parses user inputs from Duke.","lastModifiedDate":"2021-09-07"},{"lineNumber":8,"author":{"gitId":"elroygohjy"},"content":" */","lastModifiedDate":"2021-09-07"},{"lineNumber":9,"author":{"gitId":"elroygohjy"},"content":"public class Parser {","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"elroygohjy"},"content":"    private final TaskList tasks;","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"elroygohjy"},"content":"    private boolean isExit;","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"elroygohjy"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"elroygohjy"},"content":"     * Constructs a parser class that parsers user input.","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"elroygohjy"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"elroygohjy"},"content":"     * @param tasks list of tasks","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"elroygohjy"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"elroygohjy"},"content":"    public Parser(TaskList tasks) {","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"elroygohjy"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"elroygohjy"},"content":"        this.isExit \u003d false;","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"elroygohjy"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":23,"author":{"gitId":"elroygohjy"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"elroygohjy"},"content":"     * Adds user inputted String to list and prints the user added tasks and the current number of tasks, else","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"elroygohjy"},"content":"     * print error message for the error","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"elroygohjy"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"elroygohjy"},"content":"     * @param userInput user inputted String","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"elroygohjy"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"elroygohjy"},"content":"    public String getResponse(String userInput) {","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"elroygohjy"},"content":"        Task newTask;","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"elroygohjy"},"content":"        String[] tokens \u003d userInput.split(\" \");","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"elroygohjy"},"content":"        int noOfTasks \u003d tasks.noOfTasks();","lastModifiedDate":"2021-09-05"},{"lineNumber":33,"author":{"gitId":"elroygohjy"},"content":"        try {","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"elroygohjy"},"content":"            switch (tokens[0]) {","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"elroygohjy"},"content":"            case \"done\":","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"elroygohjy"},"content":"                return tasks.completeTask(userInput);","lastModifiedDate":"2021-08-30"},{"lineNumber":37,"author":{"gitId":"elroygohjy"},"content":"            case \"delete\":","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"elroygohjy"},"content":"                return tasks.deleteTask(userInput);","lastModifiedDate":"2021-08-30"},{"lineNumber":39,"author":{"gitId":"elroygohjy"},"content":"            case \"todo\":","lastModifiedDate":"2021-08-23"},{"lineNumber":40,"author":{"gitId":"elroygohjy"},"content":"                newTask \u003d tasks.makeToDoTask(userInput);","lastModifiedDate":"2021-08-23"},{"lineNumber":41,"author":{"gitId":"elroygohjy"},"content":"                break;","lastModifiedDate":"2021-08-23"},{"lineNumber":42,"author":{"gitId":"elroygohjy"},"content":"            case \"deadline\":","lastModifiedDate":"2021-08-23"},{"lineNumber":43,"author":{"gitId":"elroygohjy"},"content":"                newTask \u003d tasks.makeDeadlineTask(userInput);","lastModifiedDate":"2021-08-23"},{"lineNumber":44,"author":{"gitId":"elroygohjy"},"content":"                break;","lastModifiedDate":"2021-08-23"},{"lineNumber":45,"author":{"gitId":"elroygohjy"},"content":"            case \"event\":","lastModifiedDate":"2021-08-23"},{"lineNumber":46,"author":{"gitId":"elroygohjy"},"content":"                newTask \u003d tasks.makeEventTask(userInput);","lastModifiedDate":"2021-08-23"},{"lineNumber":47,"author":{"gitId":"elroygohjy"},"content":"                break;","lastModifiedDate":"2021-08-23"},{"lineNumber":48,"author":{"gitId":"elroygohjy"},"content":"            case \"bye\":","lastModifiedDate":"2021-08-23"},{"lineNumber":49,"author":{"gitId":"elroygohjy"},"content":"                if (tokens.length \u003e 1) {","lastModifiedDate":"2021-08-23"},{"lineNumber":50,"author":{"gitId":"elroygohjy"},"content":"                    throw new DukeException(\"Invalid command! Try again.\");","lastModifiedDate":"2021-08-30"},{"lineNumber":51,"author":{"gitId":"elroygohjy"},"content":"                }","lastModifiedDate":"2021-08-23"},{"lineNumber":52,"author":{"gitId":"elroygohjy"},"content":"                this.isExit \u003d true;","lastModifiedDate":"2021-08-23"},{"lineNumber":53,"author":{"gitId":"elroygohjy"},"content":"                return Ui.bye();","lastModifiedDate":"2021-09-05"},{"lineNumber":54,"author":{"gitId":"elroygohjy"},"content":"            case \"list\":","lastModifiedDate":"2021-08-23"},{"lineNumber":55,"author":{"gitId":"elroygohjy"},"content":"                if (tokens.length \u003e 1) {","lastModifiedDate":"2021-08-23"},{"lineNumber":56,"author":{"gitId":"elroygohjy"},"content":"                    throw new DukeException(\"Invalid command! Try again.\");","lastModifiedDate":"2021-08-30"},{"lineNumber":57,"author":{"gitId":"elroygohjy"},"content":"                }","lastModifiedDate":"2021-08-23"},{"lineNumber":58,"author":{"gitId":"elroygohjy"},"content":"                return tasks.listToString();","lastModifiedDate":"2021-08-30"},{"lineNumber":59,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":60,"author":{"gitId":"elroygohjy"},"content":"            case \"find\":","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"elroygohjy"},"content":"                return tasks.findTasks(userInput);","lastModifiedDate":"2021-08-30"},{"lineNumber":62,"author":{"gitId":"elroygohjy"},"content":"            default:","lastModifiedDate":"2021-08-23"},{"lineNumber":63,"author":{"gitId":"elroygohjy"},"content":"                throw new DukeException(\"Invalid command! Try again.\");","lastModifiedDate":"2021-08-30"},{"lineNumber":64,"author":{"gitId":"elroygohjy"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":65,"author":{"gitId":"elroygohjy"},"content":"        } catch (DukeException err) {","lastModifiedDate":"2021-08-30"},{"lineNumber":66,"author":{"gitId":"elroygohjy"},"content":"            assert tasks.noOfTasks() \u003d\u003d noOfTasks","lastModifiedDate":"2021-09-05"},{"lineNumber":67,"author":{"gitId":"elroygohjy"},"content":"                    : \"There is unexpected changes to tasks for invalid command.\";","lastModifiedDate":"2021-09-05"},{"lineNumber":68,"author":{"gitId":"elroygohjy"},"content":"            return err.getMessage();","lastModifiedDate":"2021-08-30"},{"lineNumber":69,"author":{"gitId":"elroygohjy"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":70,"author":{"gitId":"elroygohjy"},"content":"        tasks.addTask(newTask);","lastModifiedDate":"2021-08-23"},{"lineNumber":71,"author":{"gitId":"elroygohjy"},"content":"        return \"You have added this following task to the list: \\n\" + newTask.toString() + \"\\n\"","lastModifiedDate":"2021-08-30"},{"lineNumber":72,"author":{"gitId":"elroygohjy"},"content":"                + \"You have \" + tasks.noOfTasks() + \" tasks now.\";","lastModifiedDate":"2021-08-30"},{"lineNumber":73,"author":{"gitId":"elroygohjy"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":74,"author":{"gitId":"elroygohjy"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":75,"author":{"gitId":"elroygohjy"},"content":"     * Return true if parser read user input of \"bye\".","lastModifiedDate":"2021-08-23"},{"lineNumber":76,"author":{"gitId":"elroygohjy"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":77,"author":{"gitId":"elroygohjy"},"content":"     * @return true if parser has exited else false","lastModifiedDate":"2021-08-23"},{"lineNumber":78,"author":{"gitId":"elroygohjy"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":79,"author":{"gitId":"elroygohjy"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-23"},{"lineNumber":80,"author":{"gitId":"elroygohjy"},"content":"        return this.isExit;","lastModifiedDate":"2021-08-23"},{"lineNumber":81,"author":{"gitId":"elroygohjy"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":82,"author":{"gitId":"elroygohjy"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"elroygohjy":82}},{"path":"src/main/java/Duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elroygohjy"},"content":"package duke;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"elroygohjy"},"content":"import java.io.File;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"elroygohjy"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"elroygohjy"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"elroygohjy"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"elroygohjy"},"content":"import java.util.List;","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"elroygohjy"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"elroygohjy"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"elroygohjy"},"content":"import duke.task.Event;","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"elroygohjy"},"content":"import duke.task.ToDo;","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"elroygohjy"},"content":"/**","lastModifiedDate":"2021-09-05"},{"lineNumber":16,"author":{"gitId":"elroygohjy"},"content":" * Storage saves tasks added by user and save it in a file as indicated by filepath.","lastModifiedDate":"2021-09-05"},{"lineNumber":17,"author":{"gitId":"elroygohjy"},"content":" */","lastModifiedDate":"2021-09-05"},{"lineNumber":18,"author":{"gitId":"elroygohjy"},"content":"public class Storage {","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"elroygohjy"},"content":"    private static final int startOfTaskDes \u003d 8;","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"elroygohjy"},"content":"    private static final int taskTypeIndex \u003d 0;","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"elroygohjy"},"content":"    private static final int taskStatusIndex \u003d 4;","lastModifiedDate":"2021-08-23"},{"lineNumber":22,"author":{"gitId":"elroygohjy"},"content":"    private final String filePath;","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":24,"author":{"gitId":"elroygohjy"},"content":"    /**","lastModifiedDate":"2021-09-05"},{"lineNumber":25,"author":{"gitId":"elroygohjy"},"content":"     * Constructs an instance of Storage which saves data for Duke.","lastModifiedDate":"2021-09-05"},{"lineNumber":26,"author":{"gitId":"elroygohjy"},"content":"     *","lastModifiedDate":"2021-09-05"},{"lineNumber":27,"author":{"gitId":"elroygohjy"},"content":"     * @param filePath directory of saved memory for Duke.","lastModifiedDate":"2021-09-05"},{"lineNumber":28,"author":{"gitId":"elroygohjy"},"content":"     */","lastModifiedDate":"2021-09-05"},{"lineNumber":29,"author":{"gitId":"elroygohjy"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2021-08-28"},{"lineNumber":30,"author":{"gitId":"elroygohjy"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2021-08-28"},{"lineNumber":31,"author":{"gitId":"elroygohjy"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":32,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":33,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"elroygohjy"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"elroygohjy"},"content":"     * Creates new file at filePath if the file does not exist.","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"elroygohjy"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"elroygohjy"},"content":"     * @return File to write","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"elroygohjy"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":39,"author":{"gitId":"elroygohjy"},"content":"    private File initStorageFile() {","lastModifiedDate":"2021-08-23"},{"lineNumber":40,"author":{"gitId":"elroygohjy"},"content":"        String dirName \u003d filePath.split(\"/duke.txt\")[0];","lastModifiedDate":"2021-09-05"},{"lineNumber":41,"author":{"gitId":"elroygohjy"},"content":"        File directory \u003d new File(dirName);","lastModifiedDate":"2021-09-05"},{"lineNumber":42,"author":{"gitId":"elroygohjy"},"content":"        directory.mkdir();","lastModifiedDate":"2021-08-23"},{"lineNumber":43,"author":{"gitId":"elroygohjy"},"content":"        File storageFile \u003d new File(filePath);","lastModifiedDate":"2021-08-23"},{"lineNumber":44,"author":{"gitId":"elroygohjy"},"content":"        try {","lastModifiedDate":"2021-08-23"},{"lineNumber":45,"author":{"gitId":"elroygohjy"},"content":"            storageFile.createNewFile();","lastModifiedDate":"2021-08-23"},{"lineNumber":46,"author":{"gitId":"elroygohjy"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":47,"author":{"gitId":"elroygohjy"},"content":"            System.out.println(\"Error has occurred.\");","lastModifiedDate":"2021-08-23"},{"lineNumber":48,"author":{"gitId":"elroygohjy"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":49,"author":{"gitId":"elroygohjy"},"content":"        return storageFile;","lastModifiedDate":"2021-08-23"},{"lineNumber":50,"author":{"gitId":"elroygohjy"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":51,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":52,"author":{"gitId":"elroygohjy"},"content":"    private Event decodeEvent(String encodedEvent) {","lastModifiedDate":"2021-09-07"},{"lineNumber":53,"author":{"gitId":"elroygohjy"},"content":"        int taskDescIdentifier \u003d encodedEvent.indexOf(\u0027|\u0027, startOfTaskDes);","lastModifiedDate":"2021-09-07"},{"lineNumber":54,"author":{"gitId":"elroygohjy"},"content":"        char taskStatus \u003d encodedEvent.charAt(taskStatusIndex);","lastModifiedDate":"2021-09-07"},{"lineNumber":55,"author":{"gitId":"elroygohjy"},"content":"        String date \u003d encodedEvent.substring(taskDescIdentifier + 2);","lastModifiedDate":"2021-09-07"},{"lineNumber":56,"author":{"gitId":"elroygohjy"},"content":"        String taskDesc \u003d encodedEvent.substring(startOfTaskDes, taskDescIdentifier - 1);","lastModifiedDate":"2021-09-07"},{"lineNumber":57,"author":{"gitId":"elroygohjy"},"content":"        Event event \u003d new Event(taskDesc, date);","lastModifiedDate":"2021-09-07"},{"lineNumber":58,"author":{"gitId":"elroygohjy"},"content":"        if (taskStatus \u003d\u003d \u00271\u0027) {","lastModifiedDate":"2021-09-07"},{"lineNumber":59,"author":{"gitId":"elroygohjy"},"content":"            event.completeTask();","lastModifiedDate":"2021-09-07"},{"lineNumber":60,"author":{"gitId":"elroygohjy"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":61,"author":{"gitId":"elroygohjy"},"content":"        return event;","lastModifiedDate":"2021-09-07"},{"lineNumber":62,"author":{"gitId":"elroygohjy"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":63,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":64,"author":{"gitId":"elroygohjy"},"content":"    private Deadline decodeDeadline(String encodedDeadline) {","lastModifiedDate":"2021-09-07"},{"lineNumber":65,"author":{"gitId":"elroygohjy"},"content":"        int taskDescIdentifier \u003d encodedDeadline.indexOf(\u0027|\u0027, startOfTaskDes);","lastModifiedDate":"2021-09-07"},{"lineNumber":66,"author":{"gitId":"elroygohjy"},"content":"        char taskStatus \u003d encodedDeadline.charAt(taskStatusIndex);","lastModifiedDate":"2021-09-07"},{"lineNumber":67,"author":{"gitId":"elroygohjy"},"content":"        String date \u003d encodedDeadline.substring(taskDescIdentifier + 2);","lastModifiedDate":"2021-09-07"},{"lineNumber":68,"author":{"gitId":"elroygohjy"},"content":"        String taskDesc \u003d encodedDeadline.substring(startOfTaskDes, taskDescIdentifier - 1);","lastModifiedDate":"2021-09-07"},{"lineNumber":69,"author":{"gitId":"elroygohjy"},"content":"        Deadline deadline \u003d new Deadline(taskDesc, date);","lastModifiedDate":"2021-09-07"},{"lineNumber":70,"author":{"gitId":"elroygohjy"},"content":"        if (taskStatus \u003d\u003d \u00271\u0027) {","lastModifiedDate":"2021-09-07"},{"lineNumber":71,"author":{"gitId":"elroygohjy"},"content":"            deadline.completeTask();","lastModifiedDate":"2021-09-07"},{"lineNumber":72,"author":{"gitId":"elroygohjy"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":73,"author":{"gitId":"elroygohjy"},"content":"        return deadline;","lastModifiedDate":"2021-09-07"},{"lineNumber":74,"author":{"gitId":"elroygohjy"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":75,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":76,"author":{"gitId":"elroygohjy"},"content":"    private ToDo decodeToDo(String encodeToDo) {","lastModifiedDate":"2021-09-07"},{"lineNumber":77,"author":{"gitId":"elroygohjy"},"content":"        int taskDescIdentifier \u003d encodeToDo.indexOf(\u0027|\u0027, startOfTaskDes);","lastModifiedDate":"2021-09-07"},{"lineNumber":78,"author":{"gitId":"elroygohjy"},"content":"        char taskStatus \u003d encodeToDo.charAt(taskStatusIndex);","lastModifiedDate":"2021-09-07"},{"lineNumber":79,"author":{"gitId":"elroygohjy"},"content":"        String taskDesc \u003d encodeToDo.substring(startOfTaskDes, taskDescIdentifier - 1);","lastModifiedDate":"2021-09-07"},{"lineNumber":80,"author":{"gitId":"elroygohjy"},"content":"        ToDo toDo \u003d new ToDo(taskDesc);","lastModifiedDate":"2021-09-07"},{"lineNumber":81,"author":{"gitId":"elroygohjy"},"content":"        if (taskStatus \u003d\u003d \u00271\u0027) {","lastModifiedDate":"2021-09-07"},{"lineNumber":82,"author":{"gitId":"elroygohjy"},"content":"            toDo.completeTask();","lastModifiedDate":"2021-09-07"},{"lineNumber":83,"author":{"gitId":"elroygohjy"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":84,"author":{"gitId":"elroygohjy"},"content":"        return toDo;","lastModifiedDate":"2021-09-07"},{"lineNumber":85,"author":{"gitId":"elroygohjy"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":86,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":87,"author":{"gitId":"elroygohjy"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":88,"author":{"gitId":"elroygohjy"},"content":"     * Reads from storage file all the previously saved tasks info and add all the tasks to the current tracking list.","lastModifiedDate":"2021-08-23"},{"lineNumber":89,"author":{"gitId":"elroygohjy"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":90,"author":{"gitId":"elroygohjy"},"content":"    public TaskList loadTasks() {","lastModifiedDate":"2021-08-23"},{"lineNumber":91,"author":{"gitId":"elroygohjy"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2021-08-23"},{"lineNumber":92,"author":{"gitId":"elroygohjy"},"content":"        try {","lastModifiedDate":"2021-08-23"},{"lineNumber":93,"author":{"gitId":"elroygohjy"},"content":"            Scanner s \u003d new Scanner(initStorageFile());","lastModifiedDate":"2021-08-23"},{"lineNumber":94,"author":{"gitId":"elroygohjy"},"content":"            while (s.hasNext()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":95,"author":{"gitId":"elroygohjy"},"content":"                String line \u003d s.nextLine();","lastModifiedDate":"2021-08-23"},{"lineNumber":96,"author":{"gitId":"elroygohjy"},"content":"                char taskType \u003d line.charAt(taskTypeIndex);","lastModifiedDate":"2021-08-23"},{"lineNumber":97,"author":{"gitId":"elroygohjy"},"content":"                if (taskType \u003d\u003d \u0027E\u0027) {","lastModifiedDate":"2021-08-23"},{"lineNumber":98,"author":{"gitId":"elroygohjy"},"content":"                    Event event \u003d decodeEvent(line);","lastModifiedDate":"2021-09-07"},{"lineNumber":99,"author":{"gitId":"elroygohjy"},"content":"                    tasks.addTask(event);","lastModifiedDate":"2021-09-07"},{"lineNumber":100,"author":{"gitId":"elroygohjy"},"content":"                } else if (taskType \u003d\u003d \u0027D\u0027) {","lastModifiedDate":"2021-08-23"},{"lineNumber":101,"author":{"gitId":"elroygohjy"},"content":"                    Deadline deadline \u003d decodeDeadline(line);","lastModifiedDate":"2021-09-07"},{"lineNumber":102,"author":{"gitId":"elroygohjy"},"content":"                    tasks.addTask(deadline);","lastModifiedDate":"2021-09-07"},{"lineNumber":103,"author":{"gitId":"elroygohjy"},"content":"                } else if (taskType \u003d\u003d \u0027T\u0027) {","lastModifiedDate":"2021-09-05"},{"lineNumber":104,"author":{"gitId":"elroygohjy"},"content":"                    ToDo toDo \u003d decodeToDo(line);","lastModifiedDate":"2021-09-07"},{"lineNumber":105,"author":{"gitId":"elroygohjy"},"content":"                    tasks.addTask(toDo);","lastModifiedDate":"2021-09-07"},{"lineNumber":106,"author":{"gitId":"elroygohjy"},"content":"                }","lastModifiedDate":"2021-08-23"},{"lineNumber":107,"author":{"gitId":"elroygohjy"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":108,"author":{"gitId":"elroygohjy"},"content":"            s.close();","lastModifiedDate":"2021-09-05"},{"lineNumber":109,"author":{"gitId":"elroygohjy"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":110,"author":{"gitId":"elroygohjy"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-23"},{"lineNumber":111,"author":{"gitId":"elroygohjy"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":112,"author":{"gitId":"elroygohjy"},"content":"        return tasks;","lastModifiedDate":"2021-08-23"},{"lineNumber":113,"author":{"gitId":"elroygohjy"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":114,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":115,"author":{"gitId":"elroygohjy"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":116,"author":{"gitId":"elroygohjy"},"content":"     * Overwrites and saves new task list in data/duke.txt file when there is changes such as deleting and adding task.","lastModifiedDate":"2021-08-25"},{"lineNumber":117,"author":{"gitId":"elroygohjy"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":118,"author":{"gitId":"elroygohjy"},"content":"    public void saveData(List\u003cString\u003e encodedTasks) {","lastModifiedDate":"2021-08-23"},{"lineNumber":119,"author":{"gitId":"elroygohjy"},"content":"        try {","lastModifiedDate":"2021-08-23"},{"lineNumber":120,"author":{"gitId":"elroygohjy"},"content":"            FileWriter myWriter \u003d new FileWriter(filePath);","lastModifiedDate":"2021-08-23"},{"lineNumber":121,"author":{"gitId":"elroygohjy"},"content":"            for (String encodedTask : encodedTasks) {","lastModifiedDate":"2021-08-23"},{"lineNumber":122,"author":{"gitId":"elroygohjy"},"content":"                myWriter.write(encodedTask + \u0027\\n\u0027);","lastModifiedDate":"2021-08-23"},{"lineNumber":123,"author":{"gitId":"elroygohjy"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":124,"author":{"gitId":"elroygohjy"},"content":"            myWriter.close();","lastModifiedDate":"2021-08-23"},{"lineNumber":125,"author":{"gitId":"elroygohjy"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":126,"author":{"gitId":"elroygohjy"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-23"},{"lineNumber":127,"author":{"gitId":"elroygohjy"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":128,"author":{"gitId":"elroygohjy"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":129,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":130,"author":{"gitId":"elroygohjy"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"elroygohjy":130}},{"path":"src/main/java/Duke/Task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elroygohjy"},"content":"package duke.task;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"elroygohjy"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"elroygohjy"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"elroygohjy"},"content":"/**","lastModifiedDate":"2021-08-15"},{"lineNumber":7,"author":{"gitId":"elroygohjy"},"content":" * Deadline-type Task is a task consisting of its details and deadline in day.","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"elroygohjy"},"content":" */","lastModifiedDate":"2021-08-15"},{"lineNumber":9,"author":{"gitId":"elroygohjy"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-15"},{"lineNumber":10,"author":{"gitId":"elroygohjy"},"content":"    private static final DateTimeFormatter inputDateFormat \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"elroygohjy"},"content":"    private static final DateTimeFormatter outputDateFormat \u003d DateTimeFormatter.ofPattern(\"MMM d yyyy\");","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":13,"author":{"gitId":"elroygohjy"},"content":"    protected LocalDate date;","lastModifiedDate":"2021-09-07"},{"lineNumber":14,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":16,"author":{"gitId":"elroygohjy"},"content":"    /**","lastModifiedDate":"2021-08-15"},{"lineNumber":17,"author":{"gitId":"elroygohjy"},"content":"     * Constructs a instance of Deadline that consist of its details and deadline in day.","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"elroygohjy"},"content":"     *","lastModifiedDate":"2021-08-15"},{"lineNumber":19,"author":{"gitId":"elroygohjy"},"content":"     * @param taskDetails Description of the task","lastModifiedDate":"2021-08-15"},{"lineNumber":20,"author":{"gitId":"elroygohjy"},"content":"     * @param date day in dd/MM/yyyy","lastModifiedDate":"2021-09-07"},{"lineNumber":21,"author":{"gitId":"elroygohjy"},"content":"     */","lastModifiedDate":"2021-08-15"},{"lineNumber":22,"author":{"gitId":"elroygohjy"},"content":"    public Deadline(String taskDetails, String date) {","lastModifiedDate":"2021-09-07"},{"lineNumber":23,"author":{"gitId":"elroygohjy"},"content":"        super(taskDetails);","lastModifiedDate":"2021-08-15"},{"lineNumber":24,"author":{"gitId":"elroygohjy"},"content":"        this.date \u003d LocalDate.parse(date, inputDateFormat);","lastModifiedDate":"2021-09-07"},{"lineNumber":25,"author":{"gitId":"elroygohjy"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":26,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":27,"author":{"gitId":"elroygohjy"},"content":"    /**","lastModifiedDate":"2021-08-15"},{"lineNumber":28,"author":{"gitId":"elroygohjy"},"content":"     * Return the string representation of Deadline details with day and time, prefixed with [D]","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"elroygohjy"},"content":"     *","lastModifiedDate":"2021-08-15"},{"lineNumber":30,"author":{"gitId":"elroygohjy"},"content":"     * @return the string representation of Deadline details","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"elroygohjy"},"content":"     */","lastModifiedDate":"2021-08-15"},{"lineNumber":32,"author":{"gitId":"elroygohjy"},"content":"    @Override","lastModifiedDate":"2021-08-15"},{"lineNumber":33,"author":{"gitId":"elroygohjy"},"content":"    public String toString() {","lastModifiedDate":"2021-08-15"},{"lineNumber":34,"author":{"gitId":"elroygohjy"},"content":"        String outputDate \u003d this.date.format(outputDateFormat);","lastModifiedDate":"2021-09-07"},{"lineNumber":35,"author":{"gitId":"elroygohjy"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + outputDate + \")\";","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"elroygohjy"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":37,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":38,"author":{"gitId":"elroygohjy"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":39,"author":{"gitId":"elroygohjy"},"content":"     * Returns the string representation for storing in text file.","lastModifiedDate":"2021-08-23"},{"lineNumber":40,"author":{"gitId":"elroygohjy"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":41,"author":{"gitId":"elroygohjy"},"content":"     * @return the string representation for storing in text file","lastModifiedDate":"2021-08-23"},{"lineNumber":42,"author":{"gitId":"elroygohjy"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":43,"author":{"gitId":"elroygohjy"},"content":"    @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":44,"author":{"gitId":"elroygohjy"},"content":"    public String toStringSave() {","lastModifiedDate":"2021-08-23"},{"lineNumber":45,"author":{"gitId":"elroygohjy"},"content":"        int completeBinary \u003d 0;","lastModifiedDate":"2021-08-23"},{"lineNumber":46,"author":{"gitId":"elroygohjy"},"content":"        if (this.isComplete) {","lastModifiedDate":"2021-08-23"},{"lineNumber":47,"author":{"gitId":"elroygohjy"},"content":"            completeBinary \u003d 1;","lastModifiedDate":"2021-08-23"},{"lineNumber":48,"author":{"gitId":"elroygohjy"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":49,"author":{"gitId":"elroygohjy"},"content":"        return \"D\" + \" | \" + completeBinary + \" | \" + this.taskDetails + \" | \"","lastModifiedDate":"2021-08-28"},{"lineNumber":50,"author":{"gitId":"elroygohjy"},"content":"                + this.date.format(inputDateFormat);","lastModifiedDate":"2021-09-07"},{"lineNumber":51,"author":{"gitId":"elroygohjy"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":52,"author":{"gitId":"elroygohjy"},"content":"}","lastModifiedDate":"2021-08-15"}],"authorContributionMap":{"elroygohjy":52}},{"path":"src/main/java/Duke/Task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elroygohjy"},"content":"package duke.task;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"elroygohjy"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"elroygohjy"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"elroygohjy"},"content":"/**","lastModifiedDate":"2021-08-15"},{"lineNumber":7,"author":{"gitId":"elroygohjy"},"content":" * A Event-type Task consisting of event details, day and time.","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"elroygohjy"},"content":" */","lastModifiedDate":"2021-08-15"},{"lineNumber":9,"author":{"gitId":"elroygohjy"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-15"},{"lineNumber":10,"author":{"gitId":"elroygohjy"},"content":"    private static final DateTimeFormatter inputDateFormat \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"elroygohjy"},"content":"    private static final DateTimeFormatter outputDateFormat \u003d DateTimeFormatter.ofPattern(\"MMM d yyyy\");","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"elroygohjy"},"content":"    /**","lastModifiedDate":"2021-08-15"},{"lineNumber":13,"author":{"gitId":"elroygohjy"},"content":"     * The day and time in LocalDate.","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"elroygohjy"},"content":"     */","lastModifiedDate":"2021-08-15"},{"lineNumber":15,"author":{"gitId":"elroygohjy"},"content":"    protected LocalDate date;","lastModifiedDate":"2021-09-07"},{"lineNumber":16,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":18,"author":{"gitId":"elroygohjy"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"elroygohjy"},"content":"     * Constructs a instance of Event that consist of event details, day and time","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"elroygohjy"},"content":"     *","lastModifiedDate":"2021-08-15"},{"lineNumber":21,"author":{"gitId":"elroygohjy"},"content":"     * @param taskDetails Description of the task","lastModifiedDate":"2021-08-15"},{"lineNumber":22,"author":{"gitId":"elroygohjy"},"content":"     * @param date day and time in string","lastModifiedDate":"2021-09-07"},{"lineNumber":23,"author":{"gitId":"elroygohjy"},"content":"     */","lastModifiedDate":"2021-08-15"},{"lineNumber":24,"author":{"gitId":"elroygohjy"},"content":"    public Event(String taskDetails, String date) {","lastModifiedDate":"2021-09-07"},{"lineNumber":25,"author":{"gitId":"elroygohjy"},"content":"        super(taskDetails);","lastModifiedDate":"2021-08-15"},{"lineNumber":26,"author":{"gitId":"elroygohjy"},"content":"        this.date \u003d LocalDate.parse(date, inputDateFormat);","lastModifiedDate":"2021-09-07"},{"lineNumber":27,"author":{"gitId":"elroygohjy"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":28,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"elroygohjy"},"content":"    /**","lastModifiedDate":"2021-08-15"},{"lineNumber":30,"author":{"gitId":"elroygohjy"},"content":"     * Return the string representation of Event details with day and time, prefixed with [E].","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"elroygohjy"},"content":"     *","lastModifiedDate":"2021-08-15"},{"lineNumber":32,"author":{"gitId":"elroygohjy"},"content":"     * @return the string representation of Event details","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"elroygohjy"},"content":"     */","lastModifiedDate":"2021-08-15"},{"lineNumber":34,"author":{"gitId":"elroygohjy"},"content":"    public String toString() {","lastModifiedDate":"2021-08-15"},{"lineNumber":35,"author":{"gitId":"elroygohjy"},"content":"        String outputDate \u003d this.date.format(outputDateFormat);","lastModifiedDate":"2021-09-07"},{"lineNumber":36,"author":{"gitId":"elroygohjy"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + outputDate + \")\";","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"elroygohjy"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":38,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":39,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":40,"author":{"gitId":"elroygohjy"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":41,"author":{"gitId":"elroygohjy"},"content":"     * Returns the string representation for storing in text file.","lastModifiedDate":"2021-08-23"},{"lineNumber":42,"author":{"gitId":"elroygohjy"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":43,"author":{"gitId":"elroygohjy"},"content":"     * @return the string representation for storing in text file","lastModifiedDate":"2021-08-23"},{"lineNumber":44,"author":{"gitId":"elroygohjy"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":45,"author":{"gitId":"elroygohjy"},"content":"    @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":46,"author":{"gitId":"elroygohjy"},"content":"    public String toStringSave() {","lastModifiedDate":"2021-08-23"},{"lineNumber":47,"author":{"gitId":"elroygohjy"},"content":"        int completeBinary \u003d 0;","lastModifiedDate":"2021-08-23"},{"lineNumber":48,"author":{"gitId":"elroygohjy"},"content":"        if (this.isComplete) {","lastModifiedDate":"2021-08-23"},{"lineNumber":49,"author":{"gitId":"elroygohjy"},"content":"            completeBinary \u003d 1;","lastModifiedDate":"2021-08-23"},{"lineNumber":50,"author":{"gitId":"elroygohjy"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":51,"author":{"gitId":"elroygohjy"},"content":"        return \"E\" + \" | \" + completeBinary + \" | \" + this.taskDetails + \" | \" + this.date.format(inputDateFormat);","lastModifiedDate":"2021-09-07"},{"lineNumber":52,"author":{"gitId":"elroygohjy"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":53,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":54,"author":{"gitId":"elroygohjy"},"content":"}","lastModifiedDate":"2021-08-15"}],"authorContributionMap":{"elroygohjy":54}},{"path":"src/main/java/Duke/Task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elroygohjy"},"content":"package duke.task;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"elroygohjy"},"content":"/**","lastModifiedDate":"2021-08-15"},{"lineNumber":4,"author":{"gitId":"elroygohjy"},"content":" * Task is an Object that consist of the status of completion and the task details.","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"elroygohjy"},"content":" */","lastModifiedDate":"2021-08-15"},{"lineNumber":6,"author":{"gitId":"elroygohjy"},"content":"public class Task {","lastModifiedDate":"2021-08-15"},{"lineNumber":7,"author":{"gitId":"elroygohjy"},"content":"    /**","lastModifiedDate":"2021-08-15"},{"lineNumber":8,"author":{"gitId":"elroygohjy"},"content":"     * The status of the task.","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"elroygohjy"},"content":"     */","lastModifiedDate":"2021-08-15"},{"lineNumber":10,"author":{"gitId":"elroygohjy"},"content":"    protected boolean isComplete;","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":12,"author":{"gitId":"elroygohjy"},"content":"    /**","lastModifiedDate":"2021-08-15"},{"lineNumber":13,"author":{"gitId":"elroygohjy"},"content":"     * The details of the task.","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"elroygohjy"},"content":"     */","lastModifiedDate":"2021-08-15"},{"lineNumber":15,"author":{"gitId":"elroygohjy"},"content":"    protected final String taskDetails;","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":17,"author":{"gitId":"elroygohjy"},"content":"    /**","lastModifiedDate":"2021-08-15"},{"lineNumber":18,"author":{"gitId":"elroygohjy"},"content":"     * Constructs a uncompleted task with the details as taskDetails","lastModifiedDate":"2021-08-15"},{"lineNumber":19,"author":{"gitId":"elroygohjy"},"content":"     *","lastModifiedDate":"2021-08-15"},{"lineNumber":20,"author":{"gitId":"elroygohjy"},"content":"     * @param taskDetails task name","lastModifiedDate":"2021-08-15"},{"lineNumber":21,"author":{"gitId":"elroygohjy"},"content":"     */","lastModifiedDate":"2021-08-15"},{"lineNumber":22,"author":{"gitId":"elroygohjy"},"content":"    public Task(String taskDetails) {","lastModifiedDate":"2021-08-15"},{"lineNumber":23,"author":{"gitId":"elroygohjy"},"content":"        this.taskDetails \u003d taskDetails;","lastModifiedDate":"2021-08-15"},{"lineNumber":24,"author":{"gitId":"elroygohjy"},"content":"        this.isComplete \u003d false;","lastModifiedDate":"2021-08-15"},{"lineNumber":25,"author":{"gitId":"elroygohjy"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":26,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":27,"author":{"gitId":"elroygohjy"},"content":"    /**","lastModifiedDate":"2021-08-15"},{"lineNumber":28,"author":{"gitId":"elroygohjy"},"content":"     * set isComplete as true.","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"elroygohjy"},"content":"     */","lastModifiedDate":"2021-08-15"},{"lineNumber":30,"author":{"gitId":"elroygohjy"},"content":"    public void completeTask() {","lastModifiedDate":"2021-08-15"},{"lineNumber":31,"author":{"gitId":"elroygohjy"},"content":"        this.isComplete \u003d true;","lastModifiedDate":"2021-08-15"},{"lineNumber":32,"author":{"gitId":"elroygohjy"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":33,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":34,"author":{"gitId":"elroygohjy"},"content":"    /**","lastModifiedDate":"2021-08-15"},{"lineNumber":35,"author":{"gitId":"elroygohjy"},"content":"     * Returns the task Details with the prefix of the status of completion of the task","lastModifiedDate":"2021-08-15"},{"lineNumber":36,"author":{"gitId":"elroygohjy"},"content":"     *","lastModifiedDate":"2021-08-15"},{"lineNumber":37,"author":{"gitId":"elroygohjy"},"content":"     * @return A string representation of task details with the prefix of the status of completion of the task.","lastModifiedDate":"2021-08-15"},{"lineNumber":38,"author":{"gitId":"elroygohjy"},"content":"     */","lastModifiedDate":"2021-08-15"},{"lineNumber":39,"author":{"gitId":"elroygohjy"},"content":"    @Override","lastModifiedDate":"2021-08-15"},{"lineNumber":40,"author":{"gitId":"elroygohjy"},"content":"    public String toString() {","lastModifiedDate":"2021-08-15"},{"lineNumber":41,"author":{"gitId":"elroygohjy"},"content":"        if (isComplete) {","lastModifiedDate":"2021-08-15"},{"lineNumber":42,"author":{"gitId":"elroygohjy"},"content":"            return \"[X] \" + taskDetails;","lastModifiedDate":"2021-08-30"},{"lineNumber":43,"author":{"gitId":"elroygohjy"},"content":"        } else {","lastModifiedDate":"2021-08-15"},{"lineNumber":44,"author":{"gitId":"elroygohjy"},"content":"            return \"[ ] \" + taskDetails;","lastModifiedDate":"2021-08-15"},{"lineNumber":45,"author":{"gitId":"elroygohjy"},"content":"        }","lastModifiedDate":"2021-08-15"},{"lineNumber":46,"author":{"gitId":"elroygohjy"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":47,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":48,"author":{"gitId":"elroygohjy"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":49,"author":{"gitId":"elroygohjy"},"content":"     * Returns the string representation for storing in text file.","lastModifiedDate":"2021-08-23"},{"lineNumber":50,"author":{"gitId":"elroygohjy"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":51,"author":{"gitId":"elroygohjy"},"content":"     * @return the string representation for storing in text file","lastModifiedDate":"2021-08-23"},{"lineNumber":52,"author":{"gitId":"elroygohjy"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":53,"author":{"gitId":"elroygohjy"},"content":"    public String toStringSave() {","lastModifiedDate":"2021-08-23"},{"lineNumber":54,"author":{"gitId":"elroygohjy"},"content":"        int completeBinary \u003d 0;","lastModifiedDate":"2021-08-23"},{"lineNumber":55,"author":{"gitId":"elroygohjy"},"content":"        if (this.isComplete) {","lastModifiedDate":"2021-08-23"},{"lineNumber":56,"author":{"gitId":"elroygohjy"},"content":"            completeBinary \u003d 1;","lastModifiedDate":"2021-08-23"},{"lineNumber":57,"author":{"gitId":"elroygohjy"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":58,"author":{"gitId":"elroygohjy"},"content":"        return \"G\" + \" | \" + completeBinary + \" | \" + this.taskDetails + \" | \";","lastModifiedDate":"2021-08-23"},{"lineNumber":59,"author":{"gitId":"elroygohjy"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":60,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":61,"author":{"gitId":"elroygohjy"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"elroygohjy"},"content":"     * Returns TaskDetails","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"elroygohjy"},"content":"     * @return taskDetails","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"elroygohjy"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"elroygohjy"},"content":"    public String getTaskDetails() {","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"elroygohjy"},"content":"        return this.taskDetails;","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"elroygohjy"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"elroygohjy"},"content":"}","lastModifiedDate":"2021-08-15"}],"authorContributionMap":{"elroygohjy":68}},{"path":"src/main/java/Duke/Task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elroygohjy"},"content":"package duke.task;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"elroygohjy"},"content":"/**","lastModifiedDate":"2021-08-15"},{"lineNumber":5,"author":{"gitId":"elroygohjy"},"content":" * A toDo-type of Task that contains details.","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"elroygohjy"},"content":" */","lastModifiedDate":"2021-08-15"},{"lineNumber":7,"author":{"gitId":"elroygohjy"},"content":"public class ToDo extends Task {","lastModifiedDate":"2021-08-15"},{"lineNumber":8,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":9,"author":{"gitId":"elroygohjy"},"content":"    /**","lastModifiedDate":"2021-08-15"},{"lineNumber":10,"author":{"gitId":"elroygohjy"},"content":"     * Constructs a uncompleted task with the details as taskDetails","lastModifiedDate":"2021-08-15"},{"lineNumber":11,"author":{"gitId":"elroygohjy"},"content":"     *","lastModifiedDate":"2021-08-15"},{"lineNumber":12,"author":{"gitId":"elroygohjy"},"content":"     * @param taskDetails task name","lastModifiedDate":"2021-08-15"},{"lineNumber":13,"author":{"gitId":"elroygohjy"},"content":"     */","lastModifiedDate":"2021-08-15"},{"lineNumber":14,"author":{"gitId":"elroygohjy"},"content":"    public ToDo(String taskDetails) {","lastModifiedDate":"2021-08-15"},{"lineNumber":15,"author":{"gitId":"elroygohjy"},"content":"        super(taskDetails);","lastModifiedDate":"2021-08-15"},{"lineNumber":16,"author":{"gitId":"elroygohjy"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":17,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":18,"author":{"gitId":"elroygohjy"},"content":"    /**","lastModifiedDate":"2021-08-15"},{"lineNumber":19,"author":{"gitId":"elroygohjy"},"content":"     * Returns the task details with the prefix first with [T] followed by the status of completion of the task.","lastModifiedDate":"2021-08-15"},{"lineNumber":20,"author":{"gitId":"elroygohjy"},"content":"     *","lastModifiedDate":"2021-08-15"},{"lineNumber":21,"author":{"gitId":"elroygohjy"},"content":"     * @return the task details with the prefix first with [T] followed by the status of completion of the task.","lastModifiedDate":"2021-08-15"},{"lineNumber":22,"author":{"gitId":"elroygohjy"},"content":"     */","lastModifiedDate":"2021-08-15"},{"lineNumber":23,"author":{"gitId":"elroygohjy"},"content":"    public String toString() {","lastModifiedDate":"2021-08-15"},{"lineNumber":24,"author":{"gitId":"elroygohjy"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2021-08-15"},{"lineNumber":25,"author":{"gitId":"elroygohjy"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":26,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":27,"author":{"gitId":"elroygohjy"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"elroygohjy"},"content":"     * Returns the string representation for storing in text file.","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"elroygohjy"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"elroygohjy"},"content":"     * @return the string representation for storing in text file","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"elroygohjy"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"elroygohjy"},"content":"    @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"elroygohjy"},"content":"    public String toStringSave() {","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"elroygohjy"},"content":"        int completeBinary \u003d 0;","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"elroygohjy"},"content":"        if (this.isComplete) {","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"elroygohjy"},"content":"            completeBinary \u003d 1;","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"elroygohjy"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"elroygohjy"},"content":"        return \"T\" + \" | \" + completeBinary + \" | \" + this.taskDetails + \" | \";","lastModifiedDate":"2021-08-23"},{"lineNumber":39,"author":{"gitId":"elroygohjy"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":40,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":41,"author":{"gitId":"elroygohjy"},"content":"}","lastModifiedDate":"2021-08-15"}],"authorContributionMap":{"elroygohjy":41}},{"path":"src/main/java/Duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elroygohjy"},"content":"package duke;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"elroygohjy"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"elroygohjy"},"content":"import java.util.List;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"elroygohjy"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"elroygohjy"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"elroygohjy"},"content":"import duke.task.Event;","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"elroygohjy"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"elroygohjy"},"content":"import duke.task.ToDo;","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"elroygohjy"},"content":"/**","lastModifiedDate":"2021-09-07"},{"lineNumber":14,"author":{"gitId":"elroygohjy"},"content":" * TaskList is a series of tasks.","lastModifiedDate":"2021-09-07"},{"lineNumber":15,"author":{"gitId":"elroygohjy"},"content":" */","lastModifiedDate":"2021-09-07"},{"lineNumber":16,"author":{"gitId":"elroygohjy"},"content":"public class TaskList {","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"elroygohjy"},"content":"    private final ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"elroygohjy"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"elroygohjy"},"content":"     * Add task to list.","lastModifiedDate":"2021-08-23"},{"lineNumber":22,"author":{"gitId":"elroygohjy"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"elroygohjy"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"elroygohjy"},"content":"        tasks.add(task);","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"elroygohjy"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"elroygohjy"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"elroygohjy"},"content":"     * Marks the task as complete and return confirmation message,","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"elroygohjy"},"content":"     * return error message if done command is not properly formatted.","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"elroygohjy"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"elroygohjy"},"content":"     * @param userInput the index of the task in lis.","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"elroygohjy"},"content":"     * @throws DukeException exception thrown by Duke","lastModifiedDate":"2021-08-30"},{"lineNumber":34,"author":{"gitId":"elroygohjy"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"elroygohjy"},"content":"    public String completeTask(String userInput) throws DukeException {","lastModifiedDate":"2021-08-30"},{"lineNumber":36,"author":{"gitId":"elroygohjy"},"content":"        String[] tokens \u003d userInput.split(\" \");","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"elroygohjy"},"content":"        int taskNumber;","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"elroygohjy"},"content":"        boolean isTaskDoneCommand \u003d tokens.length \u003d\u003d 2 \u0026\u0026 tokens[0].equals(\"done\");","lastModifiedDate":"2021-08-23"},{"lineNumber":39,"author":{"gitId":"elroygohjy"},"content":"        try {","lastModifiedDate":"2021-08-23"},{"lineNumber":40,"author":{"gitId":"elroygohjy"},"content":"            taskNumber \u003d Integer.parseInt(tokens[1]);","lastModifiedDate":"2021-08-23"},{"lineNumber":41,"author":{"gitId":"elroygohjy"},"content":"            if (!isTaskDoneCommand || taskNumber \u003e tasks.size()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":42,"author":{"gitId":"elroygohjy"},"content":"                throw new DukeException(\"OOPS!!! The task to set as done does not exists. Please try again!\");","lastModifiedDate":"2021-08-30"},{"lineNumber":43,"author":{"gitId":"elroygohjy"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":44,"author":{"gitId":"elroygohjy"},"content":"        } catch (NumberFormatException err) {","lastModifiedDate":"2021-08-30"},{"lineNumber":45,"author":{"gitId":"elroygohjy"},"content":"            throw new DukeException(\"OOPS!!! The task to set as done does not exists. Please try again!\");","lastModifiedDate":"2021-08-30"},{"lineNumber":46,"author":{"gitId":"elroygohjy"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":47,"author":{"gitId":"elroygohjy"},"content":"        tasks.get(taskNumber - 1).completeTask();","lastModifiedDate":"2021-08-23"},{"lineNumber":48,"author":{"gitId":"elroygohjy"},"content":"        return \"You have completed the following task: \\n\" + tasks.get(taskNumber - 1).toString();","lastModifiedDate":"2021-08-30"},{"lineNumber":49,"author":{"gitId":"elroygohjy"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":50,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":51,"author":{"gitId":"elroygohjy"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":52,"author":{"gitId":"elroygohjy"},"content":"     * Delete the task and return string message for deleting tasks,","lastModifiedDate":"2021-08-30"},{"lineNumber":53,"author":{"gitId":"elroygohjy"},"content":"     * else return error message if done command is not properly formatted.","lastModifiedDate":"2021-08-30"},{"lineNumber":54,"author":{"gitId":"elroygohjy"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":55,"author":{"gitId":"elroygohjy"},"content":"     * @param userInput the index of the task in list","lastModifiedDate":"2021-08-23"},{"lineNumber":56,"author":{"gitId":"elroygohjy"},"content":"     * @throws DukeException exception thrown by Duke","lastModifiedDate":"2021-08-30"},{"lineNumber":57,"author":{"gitId":"elroygohjy"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":58,"author":{"gitId":"elroygohjy"},"content":"    public String deleteTask(String userInput) throws DukeException {","lastModifiedDate":"2021-08-30"},{"lineNumber":59,"author":{"gitId":"elroygohjy"},"content":"        String[] tokens \u003d userInput.split(\" \");","lastModifiedDate":"2021-08-23"},{"lineNumber":60,"author":{"gitId":"elroygohjy"},"content":"        int taskNumber;","lastModifiedDate":"2021-08-23"},{"lineNumber":61,"author":{"gitId":"elroygohjy"},"content":"        boolean isTaskDeleteCommand \u003d tokens.length \u003d\u003d 2 \u0026\u0026 tokens[0].equals(\"delete\");","lastModifiedDate":"2021-08-23"},{"lineNumber":62,"author":{"gitId":"elroygohjy"},"content":"        try {","lastModifiedDate":"2021-08-23"},{"lineNumber":63,"author":{"gitId":"elroygohjy"},"content":"            taskNumber \u003d Integer.parseInt(tokens[1]);","lastModifiedDate":"2021-08-23"},{"lineNumber":64,"author":{"gitId":"elroygohjy"},"content":"            if (!isTaskDeleteCommand || taskNumber \u003e tasks.size()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":65,"author":{"gitId":"elroygohjy"},"content":"                throw new DukeException(\"OOPS!!! The task to delete does not exists. Please try again!\");","lastModifiedDate":"2021-08-30"},{"lineNumber":66,"author":{"gitId":"elroygohjy"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":67,"author":{"gitId":"elroygohjy"},"content":"        } catch (NumberFormatException err) {","lastModifiedDate":"2021-08-30"},{"lineNumber":68,"author":{"gitId":"elroygohjy"},"content":"            throw new DukeException(\"OOPS!!! The task to delete does not exists. Please try again!\");","lastModifiedDate":"2021-08-30"},{"lineNumber":69,"author":{"gitId":"elroygohjy"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":70,"author":{"gitId":"elroygohjy"},"content":"        tasks.remove(tasks.get(taskNumber - 1));","lastModifiedDate":"2021-09-05"},{"lineNumber":71,"author":{"gitId":"elroygohjy"},"content":"        return \"You have removed the following task:\\n\" + tasks.get(taskNumber - 1).toString() + \"\\n\"","lastModifiedDate":"2021-08-30"},{"lineNumber":72,"author":{"gitId":"elroygohjy"},"content":"                + \"You have \" + tasks.size() + \" task/s left.\";","lastModifiedDate":"2021-08-30"},{"lineNumber":73,"author":{"gitId":"elroygohjy"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":74,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":75,"author":{"gitId":"elroygohjy"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":76,"author":{"gitId":"elroygohjy"},"content":"     * Prints all the tasks in the list.","lastModifiedDate":"2021-08-23"},{"lineNumber":77,"author":{"gitId":"elroygohjy"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":78,"author":{"gitId":"elroygohjy"},"content":"    public String listToString() {","lastModifiedDate":"2021-08-30"},{"lineNumber":79,"author":{"gitId":"elroygohjy"},"content":"        StringBuilder listInString \u003d new StringBuilder();","lastModifiedDate":"2021-08-30"},{"lineNumber":80,"author":{"gitId":"elroygohjy"},"content":"        listInString.append(\"Your list contains the following task/s: \\n\");","lastModifiedDate":"2021-08-30"},{"lineNumber":81,"author":{"gitId":"elroygohjy"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2021-08-23"},{"lineNumber":82,"author":{"gitId":"elroygohjy"},"content":"            listInString.append(i + 1).append(\". \").append(tasks.get(i).toString()).append(\"\\n\");","lastModifiedDate":"2021-08-30"},{"lineNumber":83,"author":{"gitId":"elroygohjy"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":84,"author":{"gitId":"elroygohjy"},"content":"        return listInString.toString();","lastModifiedDate":"2021-08-30"},{"lineNumber":85,"author":{"gitId":"elroygohjy"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":86,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":87,"author":{"gitId":"elroygohjy"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":88,"author":{"gitId":"elroygohjy"},"content":"     * Returns newly created ToDo task otherwise throw an appropriate error.","lastModifiedDate":"2021-08-23"},{"lineNumber":89,"author":{"gitId":"elroygohjy"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":90,"author":{"gitId":"elroygohjy"},"content":"     * @param userInput user input String","lastModifiedDate":"2021-08-23"},{"lineNumber":91,"author":{"gitId":"elroygohjy"},"content":"     * @return Todo task.","lastModifiedDate":"2021-08-23"},{"lineNumber":92,"author":{"gitId":"elroygohjy"},"content":"     * @throws DukeException exception thrown by Duke","lastModifiedDate":"2021-08-30"},{"lineNumber":93,"author":{"gitId":"elroygohjy"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":94,"author":{"gitId":"elroygohjy"},"content":"    public ToDo makeToDoTask(String userInput) throws DukeException {","lastModifiedDate":"2021-08-30"},{"lineNumber":95,"author":{"gitId":"elroygohjy"},"content":"        if (userInput.length() \u003d\u003d \"todo\".length()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":96,"author":{"gitId":"elroygohjy"},"content":"            throw new DukeException(\"OOPS!!! The description of a event cannot be empty.\");","lastModifiedDate":"2021-08-30"},{"lineNumber":97,"author":{"gitId":"elroygohjy"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":98,"author":{"gitId":"elroygohjy"},"content":"        return new ToDo(userInput.substring(\"todo\".length() + 1));","lastModifiedDate":"2021-08-23"},{"lineNumber":99,"author":{"gitId":"elroygohjy"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":100,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":101,"author":{"gitId":"elroygohjy"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":102,"author":{"gitId":"elroygohjy"},"content":"     * Returns newly created Event task otherwise throw an appropriate error.","lastModifiedDate":"2021-08-23"},{"lineNumber":103,"author":{"gitId":"elroygohjy"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":104,"author":{"gitId":"elroygohjy"},"content":"     * @param userInput user input String","lastModifiedDate":"2021-08-23"},{"lineNumber":105,"author":{"gitId":"elroygohjy"},"content":"     * @return Event task","lastModifiedDate":"2021-08-23"},{"lineNumber":106,"author":{"gitId":"elroygohjy"},"content":"     * @throws DukeException exception thrown by Duke","lastModifiedDate":"2021-08-30"},{"lineNumber":107,"author":{"gitId":"elroygohjy"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":108,"author":{"gitId":"elroygohjy"},"content":"    public Task makeEventTask(String userInput) throws DukeException {","lastModifiedDate":"2021-08-30"},{"lineNumber":109,"author":{"gitId":"elroygohjy"},"content":"        int indexOfAt \u003d userInput.indexOf(\"/at\");","lastModifiedDate":"2021-08-23"},{"lineNumber":110,"author":{"gitId":"elroygohjy"},"content":"        int endIndexForEvent \u003d \"event\".length();","lastModifiedDate":"2021-08-28"},{"lineNumber":111,"author":{"gitId":"elroygohjy"},"content":"        boolean doesAtExist \u003d indexOfAt !\u003d -1;","lastModifiedDate":"2021-08-23"},{"lineNumber":112,"author":{"gitId":"elroygohjy"},"content":"        boolean doesTimeExist \u003d userInput.length() \u003e indexOfAt + \"/at\".length() + 1;","lastModifiedDate":"2021-08-23"},{"lineNumber":113,"author":{"gitId":"elroygohjy"},"content":"        boolean doesEventDescriptionExist \u003d indexOfAt !\u003d endIndexForEvent + 1;","lastModifiedDate":"2021-08-28"},{"lineNumber":114,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":115,"author":{"gitId":"elroygohjy"},"content":"        if (!doesAtExist) {","lastModifiedDate":"2021-08-23"},{"lineNumber":116,"author":{"gitId":"elroygohjy"},"content":"            throw new DukeException(\"OOPS!!! You are missing /at before your date\");","lastModifiedDate":"2021-08-30"},{"lineNumber":117,"author":{"gitId":"elroygohjy"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":118,"author":{"gitId":"elroygohjy"},"content":"        if (!doesTimeExist) {","lastModifiedDate":"2021-08-23"},{"lineNumber":119,"author":{"gitId":"elroygohjy"},"content":"            throw new DukeException(\"OOPS!!! The date of a event cannot be empty.\");","lastModifiedDate":"2021-08-30"},{"lineNumber":120,"author":{"gitId":"elroygohjy"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":121,"author":{"gitId":"elroygohjy"},"content":"        if (!doesEventDescriptionExist) {","lastModifiedDate":"2021-08-23"},{"lineNumber":122,"author":{"gitId":"elroygohjy"},"content":"            throw new DukeException(\"OOPS!!! The description of a event cannot be empty.\");","lastModifiedDate":"2021-08-30"},{"lineNumber":123,"author":{"gitId":"elroygohjy"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":124,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":125,"author":{"gitId":"elroygohjy"},"content":"        return new Event(userInput.substring(\"event\".length() + 1, indexOfAt - 1),","lastModifiedDate":"2021-08-23"},{"lineNumber":126,"author":{"gitId":"elroygohjy"},"content":"                userInput.substring(indexOfAt + \"/at\".length() + 1));","lastModifiedDate":"2021-08-23"},{"lineNumber":127,"author":{"gitId":"elroygohjy"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":128,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":129,"author":{"gitId":"elroygohjy"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":130,"author":{"gitId":"elroygohjy"},"content":"     * Returns newly created Deadline task otherwise throw an appropriate error.","lastModifiedDate":"2021-08-23"},{"lineNumber":131,"author":{"gitId":"elroygohjy"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":132,"author":{"gitId":"elroygohjy"},"content":"     * @param userInput user input String","lastModifiedDate":"2021-08-23"},{"lineNumber":133,"author":{"gitId":"elroygohjy"},"content":"     * @return Deadline task","lastModifiedDate":"2021-08-23"},{"lineNumber":134,"author":{"gitId":"elroygohjy"},"content":"     * @throws DukeException exception thrown by Duke","lastModifiedDate":"2021-08-30"},{"lineNumber":135,"author":{"gitId":"elroygohjy"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":136,"author":{"gitId":"elroygohjy"},"content":"    public Deadline makeDeadlineTask(String userInput) throws DukeException {","lastModifiedDate":"2021-08-30"},{"lineNumber":137,"author":{"gitId":"elroygohjy"},"content":"        int indexOfBy \u003d userInput.indexOf(\"/by\");","lastModifiedDate":"2021-08-23"},{"lineNumber":138,"author":{"gitId":"elroygohjy"},"content":"        int endIndexForDeadline \u003d \"deadline\".length();","lastModifiedDate":"2021-08-28"},{"lineNumber":139,"author":{"gitId":"elroygohjy"},"content":"        boolean doesByExist \u003d indexOfBy !\u003d -1;","lastModifiedDate":"2021-08-23"},{"lineNumber":140,"author":{"gitId":"elroygohjy"},"content":"        boolean doesDateExist \u003d userInput.length() \u003e indexOfBy + \"/by\".length() + 1;","lastModifiedDate":"2021-08-23"},{"lineNumber":141,"author":{"gitId":"elroygohjy"},"content":"        boolean doesDeadlineDescriptionExist \u003d indexOfBy !\u003d endIndexForDeadline + 1;","lastModifiedDate":"2021-08-28"},{"lineNumber":142,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":143,"author":{"gitId":"elroygohjy"},"content":"        if (!doesByExist) {","lastModifiedDate":"2021-08-23"},{"lineNumber":144,"author":{"gitId":"elroygohjy"},"content":"            throw new DukeException(\"OOPS!!! You are missing /by before your date\");","lastModifiedDate":"2021-08-30"},{"lineNumber":145,"author":{"gitId":"elroygohjy"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":146,"author":{"gitId":"elroygohjy"},"content":"        if (!doesDateExist) {","lastModifiedDate":"2021-08-23"},{"lineNumber":147,"author":{"gitId":"elroygohjy"},"content":"            throw new DukeException(\"OOPS!!! The date of a deadline cannot be empty.\");","lastModifiedDate":"2021-08-30"},{"lineNumber":148,"author":{"gitId":"elroygohjy"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":149,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":150,"author":{"gitId":"elroygohjy"},"content":"        if (!doesDeadlineDescriptionExist) {","lastModifiedDate":"2021-08-23"},{"lineNumber":151,"author":{"gitId":"elroygohjy"},"content":"            throw new DukeException(\"OOPS!!! The description of a deadline cannot be empty.\");","lastModifiedDate":"2021-08-30"},{"lineNumber":152,"author":{"gitId":"elroygohjy"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":153,"author":{"gitId":"elroygohjy"},"content":"        String stringDate \u003d userInput.substring(indexOfBy + \"/by\".length() + 1);","lastModifiedDate":"2021-08-23"},{"lineNumber":154,"author":{"gitId":"elroygohjy"},"content":"        return new Deadline(userInput.substring(\"deadline\".length() + 1, indexOfBy - 1), stringDate);","lastModifiedDate":"2021-08-23"},{"lineNumber":155,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":156,"author":{"gitId":"elroygohjy"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":157,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":158,"author":{"gitId":"elroygohjy"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":159,"author":{"gitId":"elroygohjy"},"content":"     * Returns the number of tasks.","lastModifiedDate":"2021-08-23"},{"lineNumber":160,"author":{"gitId":"elroygohjy"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":161,"author":{"gitId":"elroygohjy"},"content":"     * @return number of tasks","lastModifiedDate":"2021-08-23"},{"lineNumber":162,"author":{"gitId":"elroygohjy"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":163,"author":{"gitId":"elroygohjy"},"content":"    public int noOfTasks() {","lastModifiedDate":"2021-08-23"},{"lineNumber":164,"author":{"gitId":"elroygohjy"},"content":"        return tasks.size();","lastModifiedDate":"2021-08-23"},{"lineNumber":165,"author":{"gitId":"elroygohjy"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":166,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":167,"author":{"gitId":"elroygohjy"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":168,"author":{"gitId":"elroygohjy"},"content":"     * Returns encoded string list for saving.","lastModifiedDate":"2021-08-25"},{"lineNumber":169,"author":{"gitId":"elroygohjy"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":170,"author":{"gitId":"elroygohjy"},"content":"    public List\u003cString\u003e encodeTasks() {","lastModifiedDate":"2021-08-23"},{"lineNumber":171,"author":{"gitId":"elroygohjy"},"content":"        ArrayList\u003cString\u003e encodedTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-23"},{"lineNumber":172,"author":{"gitId":"elroygohjy"},"content":"        for (Task task : tasks) {","lastModifiedDate":"2021-08-23"},{"lineNumber":173,"author":{"gitId":"elroygohjy"},"content":"            encodedTasks.add(task.toStringSave());","lastModifiedDate":"2021-08-23"},{"lineNumber":174,"author":{"gitId":"elroygohjy"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":175,"author":{"gitId":"elroygohjy"},"content":"        return encodedTasks;","lastModifiedDate":"2021-08-23"},{"lineNumber":176,"author":{"gitId":"elroygohjy"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":177,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":178,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":179,"author":{"gitId":"elroygohjy"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":180,"author":{"gitId":"elroygohjy"},"content":"     * Return string representation of the taskss matching the searched description,","lastModifiedDate":"2021-08-30"},{"lineNumber":181,"author":{"gitId":"elroygohjy"},"content":"     * if searching description is empty, it will throw an error.","lastModifiedDate":"2021-08-30"},{"lineNumber":182,"author":{"gitId":"elroygohjy"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":183,"author":{"gitId":"elroygohjy"},"content":"     * @param userInput user input String","lastModifiedDate":"2021-08-25"},{"lineNumber":184,"author":{"gitId":"elroygohjy"},"content":"     * @throws DukeException exception thrown by Duke","lastModifiedDate":"2021-08-30"},{"lineNumber":185,"author":{"gitId":"elroygohjy"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":186,"author":{"gitId":"elroygohjy"},"content":"    public String findTasks(String userInput) throws DukeException {","lastModifiedDate":"2021-08-30"},{"lineNumber":187,"author":{"gitId":"elroygohjy"},"content":"        boolean isSearchSuccess \u003d false;","lastModifiedDate":"2021-08-25"},{"lineNumber":188,"author":{"gitId":"elroygohjy"},"content":"        StringBuilder foundTasksString \u003d new StringBuilder();","lastModifiedDate":"2021-08-30"},{"lineNumber":189,"author":{"gitId":"elroygohjy"},"content":"        int startingIndex \u003d 1;","lastModifiedDate":"2021-08-25"},{"lineNumber":190,"author":{"gitId":"elroygohjy"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":191,"author":{"gitId":"elroygohjy"},"content":"            foundTasksString.append(\"Here are the matching tasks in your list: \\n\");","lastModifiedDate":"2021-08-30"},{"lineNumber":192,"author":{"gitId":"elroygohjy"},"content":"            String searchTerm \u003d userInput.substring(5);","lastModifiedDate":"2021-08-25"},{"lineNumber":193,"author":{"gitId":"elroygohjy"},"content":"            for (Task task : tasks) {","lastModifiedDate":"2021-08-25"},{"lineNumber":194,"author":{"gitId":"elroygohjy"},"content":"                if (task.toString().contains(searchTerm)) {","lastModifiedDate":"2021-08-25"},{"lineNumber":195,"author":{"gitId":"elroygohjy"},"content":"                    isSearchSuccess \u003d true;","lastModifiedDate":"2021-08-25"},{"lineNumber":196,"author":{"gitId":"elroygohjy"},"content":"                    foundTasksString.append(startingIndex).append(\". \").append(task.toString()).append(\"\\n\");","lastModifiedDate":"2021-08-30"},{"lineNumber":197,"author":{"gitId":"elroygohjy"},"content":"                    startingIndex++;","lastModifiedDate":"2021-08-25"},{"lineNumber":198,"author":{"gitId":"elroygohjy"},"content":"                }","lastModifiedDate":"2021-08-25"},{"lineNumber":199,"author":{"gitId":"elroygohjy"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":200,"author":{"gitId":"elroygohjy"},"content":"            if (!isSearchSuccess) {","lastModifiedDate":"2021-08-25"},{"lineNumber":201,"author":{"gitId":"elroygohjy"},"content":"                return \"You have no tasks matching the description. Pls try again.\";","lastModifiedDate":"2021-08-30"},{"lineNumber":202,"author":{"gitId":"elroygohjy"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":203,"author":{"gitId":"elroygohjy"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":204,"author":{"gitId":"elroygohjy"},"content":"            throw new DukeException(\"OOPS! The task description to find cannot be empty.\");","lastModifiedDate":"2021-08-30"},{"lineNumber":205,"author":{"gitId":"elroygohjy"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":206,"author":{"gitId":"elroygohjy"},"content":"        return foundTasksString.toString();","lastModifiedDate":"2021-08-30"},{"lineNumber":207,"author":{"gitId":"elroygohjy"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":208,"author":{"gitId":"elroygohjy"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"elroygohjy":208}},{"path":"src/main/java/Duke/UI.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elroygohjy"},"content":"package duke;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"elroygohjy"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"elroygohjy"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"elroygohjy"},"content":" * Ui for Duke.","lastModifiedDate":"2021-09-05"},{"lineNumber":7,"author":{"gitId":"elroygohjy"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"elroygohjy"},"content":"public class Ui {","lastModifiedDate":"2021-09-05"},{"lineNumber":9,"author":{"gitId":"elroygohjy"},"content":"    private final Scanner myScanner;","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"elroygohjy"},"content":"    public Ui() {","lastModifiedDate":"2021-09-05"},{"lineNumber":12,"author":{"gitId":"elroygohjy"},"content":"        this.myScanner \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"elroygohjy"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"elroygohjy"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"elroygohjy"},"content":"     * Prints greeting text of the robotFriend.","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"elroygohjy"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"elroygohjy"},"content":"    public static String greet() {","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"elroygohjy"},"content":"        return \"Hello I am your RobotFriend. How can i help you?\";","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"elroygohjy"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":22,"author":{"gitId":"elroygohjy"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"elroygohjy"},"content":"     * Prints the exiting text in a robot way.","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"elroygohjy"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"elroygohjy"},"content":"    public static String bye() {","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"elroygohjy"},"content":"        return \"Bye~ Hope to see you soon :)\";","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"elroygohjy"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"elroygohjy"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"elroygohjy":30}},{"path":"src/main/java/gui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elroygohjy"},"content":"package gui;","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":3,"author":{"gitId":"elroygohjy"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"elroygohjy"},"content":"import java.util.Collections;","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"elroygohjy"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"elroygohjy"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"elroygohjy"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"elroygohjy"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"elroygohjy"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"elroygohjy"},"content":"import javafx.scene.Node;","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"elroygohjy"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"elroygohjy"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"elroygohjy"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"elroygohjy"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"elroygohjy"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"elroygohjy"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"elroygohjy"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"elroygohjy"},"content":" * containing text from the speaker.","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"elroygohjy"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"elroygohjy"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"elroygohjy"},"content":"    @FXML","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"elroygohjy"},"content":"    private Label dialog;","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"elroygohjy"},"content":"    @FXML","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"elroygohjy"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"elroygohjy"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"elroygohjy"},"content":"        try {","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"elroygohjy"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/views/DialogBox.fxml\"));","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"elroygohjy"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2021-08-30"},{"lineNumber":32,"author":{"gitId":"elroygohjy"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"elroygohjy"},"content":"            fxmlLoader.load();","lastModifiedDate":"2021-08-30"},{"lineNumber":34,"author":{"gitId":"elroygohjy"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-30"},{"lineNumber":35,"author":{"gitId":"elroygohjy"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-30"},{"lineNumber":36,"author":{"gitId":"elroygohjy"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":37,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":38,"author":{"gitId":"elroygohjy"},"content":"        dialog.setText(text);","lastModifiedDate":"2021-08-30"},{"lineNumber":39,"author":{"gitId":"elroygohjy"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2021-08-30"},{"lineNumber":40,"author":{"gitId":"elroygohjy"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":41,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":42,"author":{"gitId":"elroygohjy"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":43,"author":{"gitId":"elroygohjy"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2021-08-30"},{"lineNumber":44,"author":{"gitId":"elroygohjy"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":45,"author":{"gitId":"elroygohjy"},"content":"    private void flip() {","lastModifiedDate":"2021-08-30"},{"lineNumber":46,"author":{"gitId":"elroygohjy"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2021-08-30"},{"lineNumber":47,"author":{"gitId":"elroygohjy"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2021-08-30"},{"lineNumber":48,"author":{"gitId":"elroygohjy"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2021-08-30"},{"lineNumber":49,"author":{"gitId":"elroygohjy"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2021-08-30"},{"lineNumber":50,"author":{"gitId":"elroygohjy"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":51,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":52,"author":{"gitId":"elroygohjy"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2021-08-30"},{"lineNumber":53,"author":{"gitId":"elroygohjy"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2021-08-30"},{"lineNumber":54,"author":{"gitId":"elroygohjy"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":55,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":56,"author":{"gitId":"elroygohjy"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2021-08-30"},{"lineNumber":57,"author":{"gitId":"elroygohjy"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2021-08-30"},{"lineNumber":58,"author":{"gitId":"elroygohjy"},"content":"        db.flip();","lastModifiedDate":"2021-08-30"},{"lineNumber":59,"author":{"gitId":"elroygohjy"},"content":"        return db;","lastModifiedDate":"2021-08-30"},{"lineNumber":60,"author":{"gitId":"elroygohjy"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":61,"author":{"gitId":"elroygohjy"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"elroygohjy":61}},{"path":"src/main/java/gui/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elroygohjy"},"content":"package gui;","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":3,"author":{"gitId":"elroygohjy"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"elroygohjy"},"content":"public class Launcher {","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"elroygohjy"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"elroygohjy"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"elroygohjy"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"elroygohjy"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"elroygohjy":9}},{"path":"src/main/java/gui/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elroygohjy"},"content":"package gui;","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"elroygohjy"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-30"},{"lineNumber":3,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"elroygohjy"},"content":"import duke.Duke;","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"elroygohjy"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"elroygohjy"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"elroygohjy"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"elroygohjy"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"elroygohjy"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"elroygohjy"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"elroygohjy"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"elroygohjy"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"elroygohjy"},"content":"public class Main extends Application {","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"elroygohjy"},"content":"    private final Duke duke \u003d new Duke(\"./data/Duke.txt\");","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"elroygohjy"},"content":"    @Override","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"elroygohjy"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"elroygohjy"},"content":"        try {","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"elroygohjy"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/views/MainWindow.fxml\"));","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"elroygohjy"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"elroygohjy"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"elroygohjy"},"content":"            stage.setScene(scene);","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"elroygohjy"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"elroygohjy"},"content":"            stage.show();","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"elroygohjy"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"elroygohjy"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"elroygohjy"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"elroygohjy"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"elroygohjy"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"elroygohjy":31}},{"path":"src/main/java/gui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elroygohjy"},"content":"package gui;","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":3,"author":{"gitId":"elroygohjy"},"content":"import duke.Duke;","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"elroygohjy"},"content":"import duke.Ui;","lastModifiedDate":"2021-09-05"},{"lineNumber":5,"author":{"gitId":"elroygohjy"},"content":"import javafx.application.Platform;","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"elroygohjy"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"elroygohjy"},"content":"import javafx.geometry.Insets;","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"elroygohjy"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"elroygohjy"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"elroygohjy"},"content":"import javafx.scene.control.Separator;","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"elroygohjy"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"elroygohjy"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"elroygohjy"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"elroygohjy"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"elroygohjy"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"elroygohjy"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"elroygohjy"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"elroygohjy"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"elroygohjy"},"content":"    @FXML","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"elroygohjy"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"elroygohjy"},"content":"    @FXML","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"elroygohjy"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"elroygohjy"},"content":"    @FXML","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"elroygohjy"},"content":"    private TextField userInput;","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"elroygohjy"},"content":"    @FXML","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"elroygohjy"},"content":"    private Button sendButton;","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"elroygohjy"},"content":"    private Duke duke;","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"elroygohjy"},"content":"    private final Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/avatar.png\"));","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"elroygohjy"},"content":"    private final Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/robot-head.png\"));","lastModifiedDate":"2021-08-30"},{"lineNumber":32,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"elroygohjy"},"content":"    @FXML","lastModifiedDate":"2021-08-30"},{"lineNumber":34,"author":{"gitId":"elroygohjy"},"content":"    public void initialize() {","lastModifiedDate":"2021-08-30"},{"lineNumber":35,"author":{"gitId":"elroygohjy"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2021-08-30"},{"lineNumber":36,"author":{"gitId":"elroygohjy"},"content":"        Separator separator \u003d new Separator();","lastModifiedDate":"2021-08-30"},{"lineNumber":37,"author":{"gitId":"elroygohjy"},"content":"        separator.setPadding(new Insets(10, 0, 10, 0));","lastModifiedDate":"2021-08-30"},{"lineNumber":38,"author":{"gitId":"elroygohjy"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2021-08-30"},{"lineNumber":39,"author":{"gitId":"elroygohjy"},"content":"                DialogBox.getDukeDialog(Ui.greet(), dukeImage), separator);","lastModifiedDate":"2021-09-05"},{"lineNumber":40,"author":{"gitId":"elroygohjy"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":41,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":42,"author":{"gitId":"elroygohjy"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2021-08-30"},{"lineNumber":43,"author":{"gitId":"elroygohjy"},"content":"        duke \u003d d;","lastModifiedDate":"2021-08-30"},{"lineNumber":44,"author":{"gitId":"elroygohjy"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":45,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":46,"author":{"gitId":"elroygohjy"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":47,"author":{"gitId":"elroygohjy"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2021-08-30"},{"lineNumber":48,"author":{"gitId":"elroygohjy"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2021-08-30"},{"lineNumber":49,"author":{"gitId":"elroygohjy"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":50,"author":{"gitId":"elroygohjy"},"content":"    @FXML","lastModifiedDate":"2021-08-30"},{"lineNumber":51,"author":{"gitId":"elroygohjy"},"content":"    private void handleUserInput() {","lastModifiedDate":"2021-08-30"},{"lineNumber":52,"author":{"gitId":"elroygohjy"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2021-08-30"},{"lineNumber":53,"author":{"gitId":"elroygohjy"},"content":"        String response \u003d duke.getResponse(input);","lastModifiedDate":"2021-08-30"},{"lineNumber":54,"author":{"gitId":"elroygohjy"},"content":"        Separator separator \u003d new Separator();","lastModifiedDate":"2021-08-30"},{"lineNumber":55,"author":{"gitId":"elroygohjy"},"content":"        Separator separator2 \u003d new Separator();","lastModifiedDate":"2021-08-30"},{"lineNumber":56,"author":{"gitId":"elroygohjy"},"content":"        separator.setPadding(new Insets(10, 0, 10, 0));","lastModifiedDate":"2021-08-30"},{"lineNumber":57,"author":{"gitId":"elroygohjy"},"content":"        separator2.setPadding(new Insets(10, 0, 10, 0));","lastModifiedDate":"2021-08-30"},{"lineNumber":58,"author":{"gitId":"elroygohjy"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2021-08-30"},{"lineNumber":59,"author":{"gitId":"elroygohjy"},"content":"                DialogBox.getUserDialog(input, userImage), separator,","lastModifiedDate":"2021-08-30"},{"lineNumber":60,"author":{"gitId":"elroygohjy"},"content":"                DialogBox.getDukeDialog(response, dukeImage), separator2","lastModifiedDate":"2021-08-30"},{"lineNumber":61,"author":{"gitId":"elroygohjy"},"content":"        );","lastModifiedDate":"2021-08-30"},{"lineNumber":62,"author":{"gitId":"elroygohjy"},"content":"        userInput.clear();","lastModifiedDate":"2021-08-30"},{"lineNumber":63,"author":{"gitId":"elroygohjy"},"content":"        if (input.equals(\"bye\")) {","lastModifiedDate":"2021-08-30"},{"lineNumber":64,"author":{"gitId":"elroygohjy"},"content":"            Platform.exit();","lastModifiedDate":"2021-08-30"},{"lineNumber":65,"author":{"gitId":"elroygohjy"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":66,"author":{"gitId":"elroygohjy"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":67,"author":{"gitId":"elroygohjy"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"elroygohjy":67}},{"path":"src/main/resources/views/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"elroygohjy"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":3,"author":{"gitId":"elroygohjy"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"elroygohjy"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"elroygohjy"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"elroygohjy"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"elroygohjy"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-color: #B8E2F2;\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"elroygohjy"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"elroygohjy"},"content":"        \u003cLabel fx:id\u003d\"dialog\" alignment\u003d\"BASELINE_RIGHT\" prefWidth\u003d\"500.0\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"elroygohjy"},"content":"         \u003copaqueInsets\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"elroygohjy"},"content":"            \u003cInsets /\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"elroygohjy"},"content":"         \u003c/opaqueInsets\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"elroygohjy"},"content":"         \u003cpadding\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"elroygohjy"},"content":"            \u003cInsets left\u003d\"20.0\" right\u003d\"20.0\" /\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"elroygohjy"},"content":"         \u003c/padding\u003e\u003c/Label\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"elroygohjy"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"elroygohjy"},"content":"    \u003c/children\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"elroygohjy"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"elroygohjy"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"elroygohjy"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"elroygohjy"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"elroygohjy":22}},{"path":"src/main/resources/views/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"elroygohjy"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":3,"author":{"gitId":"elroygohjy"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"elroygohjy"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"elroygohjy"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"elroygohjy"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"elroygohjy"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"elroygohjy"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"elroygohjy"},"content":"\u003c?import javafx.scene.text.Font?\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"elroygohjy"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"gui.MainWindow\"\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"elroygohjy"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"elroygohjy"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"elroygohjy"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\"\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"elroygohjy"},"content":"         \u003cfont\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"elroygohjy"},"content":"            \u003cFont name\u003d\"System Bold\" size\u003d\"12.0\" /\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"elroygohjy"},"content":"         \u003c/font\u003e\u003c/Button\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"elroygohjy"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"elroygohjy"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"elroygohjy"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\"\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"elroygohjy"},"content":"               \u003copaqueInsets\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"elroygohjy"},"content":"                  \u003cInsets top\u003d\"10.0\" /\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"elroygohjy"},"content":"               \u003c/opaqueInsets\u003e\u003c/VBox\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"elroygohjy"},"content":"            \u003c/content\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"elroygohjy"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"elroygohjy"},"content":"    \u003c/children\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"elroygohjy"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"elroygohjy":27}},{"path":"src/test/java/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elroygohjy"},"content":"package duke;","lastModifiedDate":"2021-09-05"},{"lineNumber":2,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"elroygohjy"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"elroygohjy"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"elroygohjy"},"content":"/**","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"elroygohjy"},"content":" * Tests the Parser class.","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"elroygohjy"},"content":" */","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"elroygohjy"},"content":"public class ParserTest {","lastModifiedDate":"2021-09-05"},{"lineNumber":11,"author":{"gitId":"elroygohjy"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"elroygohjy"},"content":"     * Tests if event task is added via parser and checks if event task is successfully encoded.","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"elroygohjy"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"elroygohjy"},"content":"    @Test","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"elroygohjy"},"content":"    public void eventTest() {","lastModifiedDate":"2021-09-05"},{"lineNumber":16,"author":{"gitId":"elroygohjy"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"elroygohjy"},"content":"        Parser parser \u003d new Parser(tasks);","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"elroygohjy"},"content":"        parser.getResponse(\"event dance night /at 11/12/2019\");","lastModifiedDate":"2021-09-05"},{"lineNumber":19,"author":{"gitId":"elroygohjy"},"content":"        assertEquals(\"E | 0 | dance night | 11/12/2019\", tasks.encodeTasks().get(0));","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"elroygohjy"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"elroygohjy"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"elroygohjy":21}},{"path":"src/test/java/duke/StorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elroygohjy"},"content":"package duke;","lastModifiedDate":"2021-09-05"},{"lineNumber":2,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"elroygohjy"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"elroygohjy"},"content":"import java.io.File;","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"elroygohjy"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"elroygohjy"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"elroygohjy"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"elroygohjy"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"elroygohjy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"elroygohjy"},"content":"/**","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"elroygohjy"},"content":" * Tests the Storage class","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"elroygohjy"},"content":" */","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"elroygohjy"},"content":"public class StorageTest {","lastModifiedDate":"2021-09-05"},{"lineNumber":16,"author":{"gitId":"elroygohjy"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"elroygohjy"},"content":"     * Tests whether the storage writes properly.","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"elroygohjy"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"elroygohjy"},"content":"    @Test","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"elroygohjy"},"content":"    public void writeTest() {","lastModifiedDate":"2021-09-05"},{"lineNumber":21,"author":{"gitId":"elroygohjy"},"content":"        Storage storage \u003d new Storage(\"data/Duke.txt\");","lastModifiedDate":"2021-08-23"},{"lineNumber":22,"author":{"gitId":"elroygohjy"},"content":"        ArrayList\u003cString\u003e input \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"elroygohjy"},"content":"        input.add(\"hello world\");","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"elroygohjy"},"content":"        storage.saveData(input);","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"elroygohjy"},"content":"        File file \u003d new File(\"data/Duke.txt\");","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"elroygohjy"},"content":"        try {","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"elroygohjy"},"content":"            Scanner s \u003d new Scanner(file);","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"elroygohjy"},"content":"            assertEquals(\"hello world\", s.nextLine());","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"elroygohjy"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"elroygohjy"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"elroygohjy"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"elroygohjy"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"elroygohjy"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"elroygohjy":33}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"elroygohjy"},"content":"todo borrow book","lastModifiedDate":"2021-08-15"},{"lineNumber":2,"author":{"gitId":"elroygohjy"},"content":"todo","lastModifiedDate":"2021-08-16"},{"lineNumber":3,"author":{"gitId":"elroygohjy"},"content":"deadline return book /by Sunday","lastModifiedDate":"2021-08-15"},{"lineNumber":4,"author":{"gitId":"elroygohjy"},"content":"deadline /by Sunday","lastModifiedDate":"2021-08-16"},{"lineNumber":5,"author":{"gitId":"elroygohjy"},"content":"deadline /by","lastModifiedDate":"2021-08-16"},{"lineNumber":6,"author":{"gitId":"elroygohjy"},"content":"event project meeting /at Mon 2-4pm","lastModifiedDate":"2021-08-15"},{"lineNumber":7,"author":{"gitId":"elroygohjy"},"content":"event /at Mon 2-4pm","lastModifiedDate":"2021-08-16"},{"lineNumber":8,"author":{"gitId":"elroygohjy"},"content":"event /at","lastModifiedDate":"2021-08-16"},{"lineNumber":9,"author":{"gitId":"elroygohjy"},"content":"done 100","lastModifiedDate":"2021-08-16"},{"lineNumber":10,"author":{"gitId":"elroygohjy"},"content":"done x","lastModifiedDate":"2021-08-16"},{"lineNumber":11,"author":{"gitId":"elroygohjy"},"content":"done x x","lastModifiedDate":"2021-08-16"},{"lineNumber":12,"author":{"gitId":"elroygohjy"},"content":"done 2","lastModifiedDate":"2021-08-15"},{"lineNumber":13,"author":{"gitId":"elroygohjy"},"content":"delete x","lastModifiedDate":"2021-08-16"},{"lineNumber":14,"author":{"gitId":"elroygohjy"},"content":"delete x x","lastModifiedDate":"2021-08-16"},{"lineNumber":15,"author":{"gitId":"elroygohjy"},"content":"delete 1","lastModifiedDate":"2021-08-16"},{"lineNumber":16,"author":{"gitId":"elroygohjy"},"content":"list","lastModifiedDate":"2021-08-15"},{"lineNumber":17,"author":{"gitId":"elroygohjy"},"content":"bye","lastModifiedDate":"2021-08-15"}],"authorContributionMap":{"elroygohjy":17}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"elroygohjy"},"content":"java -classpath ..\\bin RobotFriend \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-08-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"elroygohjy":1,"-":20}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"elroygohjy"},"content":"java -classpath ../bin RobotFriend \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-08-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"elroygohjy":1,"-":37}}]

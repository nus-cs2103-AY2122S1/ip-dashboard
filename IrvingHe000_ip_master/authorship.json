[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"IrvingHe000"},"content":"# duke.Duke project template","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"IrvingHe000"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":22,"IrvingHe000":2}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IrvingHe000"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"IrvingHe000"},"content":"import duke.command.InputTypes;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"IrvingHe000"},"content":"import duke.command.Parser;","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"IrvingHe000"},"content":"import duke.command.Storage;","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"IrvingHe000"},"content":"import duke.command.TaskList;","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"IrvingHe000"},"content":"import duke.command.Ui;","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"IrvingHe000"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"IrvingHe000"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"IrvingHe000"},"content":" * A robot that can respond to user\u0027s input, and help user store tasks","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"IrvingHe000"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":15,"author":{"gitId":"IrvingHe000"},"content":"    private Storage storage;","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"IrvingHe000"},"content":"    private TaskList taskList;","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"IrvingHe000"},"content":"    private Ui ui;","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"IrvingHe000"},"content":"    private InputTypes t;","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"IrvingHe000"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"IrvingHe000"},"content":"     * Constructor of Duke class.","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"IrvingHe000"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"IrvingHe000"},"content":"     * @param filePath The filePath of the file storing the data.","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"IrvingHe000"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"IrvingHe000"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"IrvingHe000"},"content":"        taskList \u003d new TaskList();","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"IrvingHe000"},"content":"        ui \u003d new Ui(taskList);","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"IrvingHe000"},"content":"        storage \u003d new Storage(filePath, taskList, ui);","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"IrvingHe000"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"IrvingHe000"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"IrvingHe000"},"content":"     * Start running the program.","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"IrvingHe000"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"IrvingHe000"},"content":"    public void run() {","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"IrvingHe000"},"content":"        //Read events stored in the input List","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"IrvingHe000"},"content":"        storage.loadSavedTasks();","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"IrvingHe000"},"content":"        ui.showLogo();","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"IrvingHe000"},"content":"        Scanner inputScanner \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"IrvingHe000"},"content":"        String task \u003d inputScanner.nextLine();","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"IrvingHe000"},"content":"        while (!Parser.isBye(task)) {","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"IrvingHe000"},"content":"            try {","lastModifiedDate":"2021-08-23"},{"lineNumber":44,"author":{"gitId":"IrvingHe000"},"content":"                switch (Parser.judgeType(task)) {","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"IrvingHe000"},"content":"                case TODO:","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"IrvingHe000"},"content":"                    storage.addNewTodo(task);","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"IrvingHe000"},"content":"                    break;","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"IrvingHe000"},"content":"                case EVENT:","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"IrvingHe000"},"content":"                    storage.addNewEvent(task);","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"IrvingHe000"},"content":"                    break;","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"IrvingHe000"},"content":"                case DEADLINE:","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"IrvingHe000"},"content":"                    storage.addNewDeadline(task);","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"IrvingHe000"},"content":"                    break;","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"IrvingHe000"},"content":"                case DONE:","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"IrvingHe000"},"content":"                    storage.setTaskDone(task);","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"IrvingHe000"},"content":"                    break;","lastModifiedDate":"2021-08-24"},{"lineNumber":57,"author":{"gitId":"IrvingHe000"},"content":"                case LIST:","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"IrvingHe000"},"content":"                    ui.showList();","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"IrvingHe000"},"content":"                    break;","lastModifiedDate":"2021-08-24"},{"lineNumber":60,"author":{"gitId":"IrvingHe000"},"content":"                case DELETE:","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"IrvingHe000"},"content":"                    storage.deleteTask(task);","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"IrvingHe000"},"content":"                    break;","lastModifiedDate":"2021-08-24"},{"lineNumber":63,"author":{"gitId":"IrvingHe000"},"content":"                case FIND:","lastModifiedDate":"2021-08-24"},{"lineNumber":64,"author":{"gitId":"IrvingHe000"},"content":"                    storage.findTask(task);","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"IrvingHe000"},"content":"                    break;","lastModifiedDate":"2021-08-24"},{"lineNumber":66,"author":{"gitId":"IrvingHe000"},"content":"                case UNKNOWN:","lastModifiedDate":"2021-08-24"},{"lineNumber":67,"author":{"gitId":"IrvingHe000"},"content":"                    throw new Exception(\"Cannot Understand\");","lastModifiedDate":"2021-08-19"},{"lineNumber":68,"author":{"gitId":"IrvingHe000"},"content":"                }","lastModifiedDate":"2021-08-19"},{"lineNumber":69,"author":{"gitId":"IrvingHe000"},"content":"            } catch (Exception e) {","lastModifiedDate":"2021-08-19"},{"lineNumber":70,"author":{"gitId":"IrvingHe000"},"content":"                if (e.getMessage().equals(\"todoEmpty\")) {","lastModifiedDate":"2021-08-19"},{"lineNumber":71,"author":{"gitId":"IrvingHe000"},"content":"                    System.out.println(\"☹ OOPS!!! The description of a todo cannot be empty.\");","lastModifiedDate":"2021-08-19"},{"lineNumber":72,"author":{"gitId":"IrvingHe000"},"content":"                } else if (e.getMessage().equals(\"Cannot Understand\")) {","lastModifiedDate":"2021-08-19"},{"lineNumber":73,"author":{"gitId":"IrvingHe000"},"content":"                    System.out.println(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2021-08-19"},{"lineNumber":74,"author":{"gitId":"IrvingHe000"},"content":"                }","lastModifiedDate":"2021-08-19"},{"lineNumber":75,"author":{"gitId":"IrvingHe000"},"content":"                e.printStackTrace();","lastModifiedDate":"2021-08-24"},{"lineNumber":76,"author":{"gitId":"IrvingHe000"},"content":"            } finally {","lastModifiedDate":"2021-08-19"},{"lineNumber":77,"author":{"gitId":"IrvingHe000"},"content":"                task \u003d inputScanner.nextLine();","lastModifiedDate":"2021-08-24"},{"lineNumber":78,"author":{"gitId":"IrvingHe000"},"content":"            }","lastModifiedDate":"2021-08-18"},{"lineNumber":79,"author":{"gitId":"IrvingHe000"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":80,"author":{"gitId":"IrvingHe000"},"content":"        ui.showGoodBye();","lastModifiedDate":"2021-08-24"},{"lineNumber":81,"author":{"gitId":"IrvingHe000"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":82,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":83,"author":{"gitId":"IrvingHe000"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-24"},{"lineNumber":84,"author":{"gitId":"IrvingHe000"},"content":"        Duke duke \u003d new Duke(\"duke.txt\");","lastModifiedDate":"2021-08-24"},{"lineNumber":85,"author":{"gitId":"IrvingHe000"},"content":"        duke.run();","lastModifiedDate":"2021-08-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"-":3,"IrvingHe000":84}},{"path":"src/main/java/duke/command/InputTypes.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IrvingHe000"},"content":"package duke.command;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"IrvingHe000"},"content":"public enum InputTypes {","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"IrvingHe000"},"content":"    BYE(\"bye\"), TODO(\"todo\"), DEADLINE(\"deadline\"), EVENT(\"event\"), LIST(\"list\"),","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"IrvingHe000"},"content":"    DONE(\"done\"), DELETE(\"delete\"), UNKNOWN(\"unknown\"), FIND(\"find\");","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"IrvingHe000"},"content":"    private String value;","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"IrvingHe000"},"content":"    private InputTypes(String value) {","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"IrvingHe000"},"content":"        this.value \u003d value;","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"IrvingHe000"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"IrvingHe000"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"IrvingHe000"},"content":"     * @return The value of element.","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"IrvingHe000"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"IrvingHe000"},"content":"    public String getValue() {","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"IrvingHe000"},"content":"        return value;","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"IrvingHe000"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"IrvingHe000"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"IrvingHe000":19}},{"path":"src/main/java/duke/command/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IrvingHe000"},"content":"package duke.command;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"IrvingHe000"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"IrvingHe000"},"content":"import duke.task.Event;","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"IrvingHe000"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"IrvingHe000"},"content":"import duke.task.Todo;","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"IrvingHe000"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"IrvingHe000"},"content":" * Deals with making sense of the user command. Recognize the information containing in","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"IrvingHe000"},"content":" * the input, and returns respective Task or throws exceptions.","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"IrvingHe000"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"IrvingHe000"},"content":"public class Parser {","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"IrvingHe000"},"content":"    private static final int MIN_DELETE_ITEM_LENGTH \u003d 7;","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"IrvingHe000"},"content":"    private static final int MIN_DONE_ITEM_LENGTH \u003d 5;","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"IrvingHe000"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"IrvingHe000"},"content":"     * Return whether the user\u0027s input equals to \"bye\".","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"IrvingHe000"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"IrvingHe000"},"content":"     * @param task The input of user.","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"IrvingHe000"},"content":"     * @return Whether the user want to terminate program.","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"IrvingHe000"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"IrvingHe000"},"content":"    public static boolean isBye(String task) {","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"IrvingHe000"},"content":"        return task.equals(InputTypes.BYE.getValue());","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"IrvingHe000"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"IrvingHe000"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"IrvingHe000"},"content":"     * Return the type of operation that user inputs.","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"IrvingHe000"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"IrvingHe000"},"content":"     * @param task The input of user.","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"IrvingHe000"},"content":"     * @return the type of the operation that user wants.","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"IrvingHe000"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"IrvingHe000"},"content":"    public static InputTypes judgeType(String task) {","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"IrvingHe000"},"content":"        InputTypes type \u003d InputTypes.UNKNOWN;","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"IrvingHe000"},"content":"        if (task.contains(InputTypes.TODO.getValue())) {","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"IrvingHe000"},"content":"            type \u003d InputTypes.TODO;","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"IrvingHe000"},"content":"        } else if (task.contains(InputTypes.DEADLINE.getValue())) {","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"IrvingHe000"},"content":"            type \u003d InputTypes.DEADLINE;","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"IrvingHe000"},"content":"        } else if (task.contains(InputTypes.EVENT.getValue())) {","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"IrvingHe000"},"content":"            type \u003d InputTypes.EVENT;","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"IrvingHe000"},"content":"        } else if (task.contains(InputTypes.DONE.getValue())) {","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"IrvingHe000"},"content":"            type \u003d InputTypes.DONE;","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"IrvingHe000"},"content":"        } else if (task.equals(InputTypes.LIST.getValue())) {","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"IrvingHe000"},"content":"            type \u003d InputTypes.LIST;","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"IrvingHe000"},"content":"        } else if (task.contains(InputTypes.DELETE.getValue())) {","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"IrvingHe000"},"content":"            type \u003d InputTypes.DELETE;","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"IrvingHe000"},"content":"        } else if (task.contains(InputTypes.FIND.getValue())) {","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"IrvingHe000"},"content":"            type \u003d InputTypes.FIND;","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"IrvingHe000"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"IrvingHe000"},"content":"        return type;","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"IrvingHe000"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"IrvingHe000"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"IrvingHe000"},"content":"     * Test whether it has a valid Todo task format. If yes, return the","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"IrvingHe000"},"content":"     * corresponding Todo task. Otherwise, throw a exception saying that","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"IrvingHe000"},"content":"     * it is not valid.","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"IrvingHe000"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":57,"author":{"gitId":"IrvingHe000"},"content":"     * @param task The input of user.","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"IrvingHe000"},"content":"     * @return The corresponding Todo task.","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"IrvingHe000"},"content":"     * @throws Exception if the task does not have the correct Todo format.","lastModifiedDate":"2021-08-24"},{"lineNumber":60,"author":{"gitId":"IrvingHe000"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"IrvingHe000"},"content":"    public static Task isValidTodoTask(String task) throws Exception {","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"IrvingHe000"},"content":"        if (!task.contains(\"todo\") || task.length() \u003c\u003d 5) {","lastModifiedDate":"2021-08-24"},{"lineNumber":63,"author":{"gitId":"IrvingHe000"},"content":"            throw new Exception(\"This is not a valid Todo task.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":64,"author":{"gitId":"IrvingHe000"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"IrvingHe000"},"content":"        String taskName \u003d task.substring(5);","lastModifiedDate":"2021-08-24"},{"lineNumber":66,"author":{"gitId":"IrvingHe000"},"content":"        return new Todo(taskName);","lastModifiedDate":"2021-08-24"},{"lineNumber":67,"author":{"gitId":"IrvingHe000"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":68,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":69,"author":{"gitId":"IrvingHe000"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":70,"author":{"gitId":"IrvingHe000"},"content":"     * Test whether the input operation has a valid Deadline task format. If yes, return the","lastModifiedDate":"2021-08-24"},{"lineNumber":71,"author":{"gitId":"IrvingHe000"},"content":"     * corresponding Deadline task. Otherwise, throw a exception saying that it is not valid.","lastModifiedDate":"2021-08-24"},{"lineNumber":72,"author":{"gitId":"IrvingHe000"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":73,"author":{"gitId":"IrvingHe000"},"content":"     * @param task The input of user.","lastModifiedDate":"2021-08-24"},{"lineNumber":74,"author":{"gitId":"IrvingHe000"},"content":"     * @return The corresponding Deadline task.","lastModifiedDate":"2021-08-24"},{"lineNumber":75,"author":{"gitId":"IrvingHe000"},"content":"     * @throws Exception if the task does not have the correct Deadline format.","lastModifiedDate":"2021-08-24"},{"lineNumber":76,"author":{"gitId":"IrvingHe000"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":77,"author":{"gitId":"IrvingHe000"},"content":"    public static Task isValidDeadlineTask(String task) throws Exception {","lastModifiedDate":"2021-08-24"},{"lineNumber":78,"author":{"gitId":"IrvingHe000"},"content":"        //deadline 123 /by 2020-12-08 23:00","lastModifiedDate":"2021-08-24"},{"lineNumber":79,"author":{"gitId":"IrvingHe000"},"content":"        if (!task.contains(\"deadline\") || !task.contains(\"/by\")) {","lastModifiedDate":"2021-08-24"},{"lineNumber":80,"author":{"gitId":"IrvingHe000"},"content":"            throw new Exception(\"This is not a valid Deadline task.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":81,"author":{"gitId":"IrvingHe000"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":82,"author":{"gitId":"IrvingHe000"},"content":"        int position \u003d task.indexOf(\u0027/\u0027);","lastModifiedDate":"2021-08-24"},{"lineNumber":83,"author":{"gitId":"IrvingHe000"},"content":"        String taskName \u003d task.substring(9, position - 1);","lastModifiedDate":"2021-08-24"},{"lineNumber":84,"author":{"gitId":"IrvingHe000"},"content":"        String deadlineTime \u003d task.substring(position + 4);","lastModifiedDate":"2021-08-24"},{"lineNumber":85,"author":{"gitId":"IrvingHe000"},"content":"        return new Deadline(taskName, deadlineTime);","lastModifiedDate":"2021-08-24"},{"lineNumber":86,"author":{"gitId":"IrvingHe000"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":87,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":88,"author":{"gitId":"IrvingHe000"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":89,"author":{"gitId":"IrvingHe000"},"content":"     * Test whether the input operation has a valid Event task format. If yes, return the","lastModifiedDate":"2021-08-24"},{"lineNumber":90,"author":{"gitId":"IrvingHe000"},"content":"     * corresponding Deadline task. Otherwise, throw a exception saying that it is not valid.","lastModifiedDate":"2021-08-24"},{"lineNumber":91,"author":{"gitId":"IrvingHe000"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":92,"author":{"gitId":"IrvingHe000"},"content":"     * @param task The input of user.","lastModifiedDate":"2021-08-24"},{"lineNumber":93,"author":{"gitId":"IrvingHe000"},"content":"     * @return The corresponding Event task.","lastModifiedDate":"2021-08-24"},{"lineNumber":94,"author":{"gitId":"IrvingHe000"},"content":"     * @throws Exception if the task does not have the correct Event format.","lastModifiedDate":"2021-08-24"},{"lineNumber":95,"author":{"gitId":"IrvingHe000"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":96,"author":{"gitId":"IrvingHe000"},"content":"    public static Task isValidEventTask(String task) throws Exception {","lastModifiedDate":"2021-08-24"},{"lineNumber":97,"author":{"gitId":"IrvingHe000"},"content":"        if (!task.contains(\"event\") || !task.contains(\"/at\")) {","lastModifiedDate":"2021-08-24"},{"lineNumber":98,"author":{"gitId":"IrvingHe000"},"content":"            throw new Exception(\"This is not a valid Event task.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":99,"author":{"gitId":"IrvingHe000"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":100,"author":{"gitId":"IrvingHe000"},"content":"        int position \u003d task.indexOf(\u0027/\u0027);","lastModifiedDate":"2021-08-24"},{"lineNumber":101,"author":{"gitId":"IrvingHe000"},"content":"        String taskName \u003d task.substring(6, position - 1);","lastModifiedDate":"2021-08-24"},{"lineNumber":102,"author":{"gitId":"IrvingHe000"},"content":"        String eventTime \u003d task.substring(position + 4);","lastModifiedDate":"2021-08-24"},{"lineNumber":103,"author":{"gitId":"IrvingHe000"},"content":"        return new Event(taskName, eventTime);","lastModifiedDate":"2021-08-24"},{"lineNumber":104,"author":{"gitId":"IrvingHe000"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":105,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":106,"author":{"gitId":"IrvingHe000"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":107,"author":{"gitId":"IrvingHe000"},"content":"     * Test whether the input operation means to delete an item. If yes, return the","lastModifiedDate":"2021-08-24"},{"lineNumber":108,"author":{"gitId":"IrvingHe000"},"content":"     * corresponding item\u0027s number. Otherwise, throw a exception saying that it is not valid.","lastModifiedDate":"2021-08-24"},{"lineNumber":109,"author":{"gitId":"IrvingHe000"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":110,"author":{"gitId":"IrvingHe000"},"content":"     * @param task The input of user.","lastModifiedDate":"2021-08-24"},{"lineNumber":111,"author":{"gitId":"IrvingHe000"},"content":"     * @return The corresponding number of the item user want to delete.","lastModifiedDate":"2021-08-24"},{"lineNumber":112,"author":{"gitId":"IrvingHe000"},"content":"     * @throws Exception if the format of the input is not valid.","lastModifiedDate":"2021-08-24"},{"lineNumber":113,"author":{"gitId":"IrvingHe000"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":114,"author":{"gitId":"IrvingHe000"},"content":"    public static int findDeleteItem(String task) throws Exception {","lastModifiedDate":"2021-08-24"},{"lineNumber":115,"author":{"gitId":"IrvingHe000"},"content":"        if (task.length() \u003c\u003d MIN_DELETE_ITEM_LENGTH) {","lastModifiedDate":"2021-08-24"},{"lineNumber":116,"author":{"gitId":"IrvingHe000"},"content":"            throw new Exception(\"Sorry I don\u0027t know which item you want to delete.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":117,"author":{"gitId":"IrvingHe000"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":118,"author":{"gitId":"IrvingHe000"},"content":"        return Integer.parseInt(task.substring(MIN_DELETE_ITEM_LENGTH));","lastModifiedDate":"2021-08-24"},{"lineNumber":119,"author":{"gitId":"IrvingHe000"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":120,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":121,"author":{"gitId":"IrvingHe000"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":122,"author":{"gitId":"IrvingHe000"},"content":"     * Test whether the input operation means to mark item as done. If yes, return the","lastModifiedDate":"2021-08-24"},{"lineNumber":123,"author":{"gitId":"IrvingHe000"},"content":"     * corresponding item\u0027s number. Otherwise, throw a exception saying that it is not valid.","lastModifiedDate":"2021-08-24"},{"lineNumber":124,"author":{"gitId":"IrvingHe000"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":125,"author":{"gitId":"IrvingHe000"},"content":"     * @param task The input of user.","lastModifiedDate":"2021-08-24"},{"lineNumber":126,"author":{"gitId":"IrvingHe000"},"content":"     * @return The corresponding number of the item user want to mark as done.","lastModifiedDate":"2021-08-24"},{"lineNumber":127,"author":{"gitId":"IrvingHe000"},"content":"     * @throws Exception if the format of the input is not valid.","lastModifiedDate":"2021-08-24"},{"lineNumber":128,"author":{"gitId":"IrvingHe000"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":129,"author":{"gitId":"IrvingHe000"},"content":"    public static int findFinishedItem(String task) throws Exception {","lastModifiedDate":"2021-08-24"},{"lineNumber":130,"author":{"gitId":"IrvingHe000"},"content":"        if (task.length() \u003c\u003d MIN_DONE_ITEM_LENGTH) {","lastModifiedDate":"2021-08-24"},{"lineNumber":131,"author":{"gitId":"IrvingHe000"},"content":"            throw new Exception(\"Sorry I don\u0027t know which item you want to mark as done.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":132,"author":{"gitId":"IrvingHe000"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":133,"author":{"gitId":"IrvingHe000"},"content":"        return Integer.parseInt(task.substring(MIN_DONE_ITEM_LENGTH));","lastModifiedDate":"2021-08-24"},{"lineNumber":134,"author":{"gitId":"IrvingHe000"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":135,"author":{"gitId":"IrvingHe000"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"IrvingHe000":135}},{"path":"src/main/java/duke/command/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IrvingHe000"},"content":"package duke.command;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"IrvingHe000"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"IrvingHe000"},"content":"import duke.task.Event;","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"IrvingHe000"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"IrvingHe000"},"content":"import duke.task.Todo;","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"IrvingHe000"},"content":"import java.io.File;","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"IrvingHe000"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"IrvingHe000"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"IrvingHe000"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"IrvingHe000"},"content":"import java.util.List;","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"IrvingHe000"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"IrvingHe000"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"IrvingHe000"},"content":" * Dealing with loading tasks from the file and saving tasks in the file.","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"IrvingHe000"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"IrvingHe000"},"content":"public class Storage {","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"IrvingHe000"},"content":"    private String path;","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"IrvingHe000"},"content":"    private File src;","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"IrvingHe000"},"content":"    private TaskList taskList;","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"IrvingHe000"},"content":"    private Ui ui;","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"IrvingHe000"},"content":"    public Storage(String path, TaskList taskList, Ui ui) {","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"IrvingHe000"},"content":"        this.path \u003d path;","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"IrvingHe000"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"IrvingHe000"},"content":"            this.src \u003d new File(path);","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"IrvingHe000"},"content":"            if (this.src.createNewFile()) {","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"IrvingHe000"},"content":"                System.out.println(\"I have created a new file for you :)\");","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"IrvingHe000"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"IrvingHe000"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"IrvingHe000"},"content":"            System.out.println(\"I cannot create a new file for you :(\");","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"IrvingHe000"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"IrvingHe000"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"IrvingHe000"},"content":"        this.ui \u003d ui;","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"IrvingHe000"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"IrvingHe000"},"content":"    public void addNewTodo(String task) throws Exception {","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"IrvingHe000"},"content":"        Task todoTask \u003d Parser.isValidTodoTask(task);","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"IrvingHe000"},"content":"        taskList.add(todoTask);","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"IrvingHe000"},"content":"        this.ui.showAddNewTask();","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"IrvingHe000"},"content":"        saveNewTask(todoTask);","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"IrvingHe000"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"IrvingHe000"},"content":"    public void addNewDeadline(String task) throws Exception {","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"IrvingHe000"},"content":"        Task deadlineTask \u003d Parser.isValidDeadlineTask(task);","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"IrvingHe000"},"content":"        taskList.add(deadlineTask);","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"IrvingHe000"},"content":"        ui.showAddNewTask();","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"IrvingHe000"},"content":"        saveNewTask(deadlineTask);","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"IrvingHe000"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"IrvingHe000"},"content":"    public void addNewEvent(String task) throws Exception {","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"IrvingHe000"},"content":"        Task eventTask \u003d Parser.isValidEventTask(task);","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"IrvingHe000"},"content":"        taskList.add(eventTask);","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"IrvingHe000"},"content":"        ui.showAddNewTask();","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"IrvingHe000"},"content":"        saveNewTask(eventTask);","lastModifiedDate":"2021-08-24"},{"lineNumber":57,"author":{"gitId":"IrvingHe000"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"IrvingHe000"},"content":"    public void setTaskDone(String task) throws Exception {","lastModifiedDate":"2021-08-24"},{"lineNumber":60,"author":{"gitId":"IrvingHe000"},"content":"        int itemDone \u003d Parser.findFinishedItem(task);","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"IrvingHe000"},"content":"        taskList.get(itemDone - 1).finished();","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"IrvingHe000"},"content":"        ui.showMarkTaskDone(itemDone);","lastModifiedDate":"2021-08-24"},{"lineNumber":63,"author":{"gitId":"IrvingHe000"},"content":"        modifyTasks();","lastModifiedDate":"2021-08-24"},{"lineNumber":64,"author":{"gitId":"IrvingHe000"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":66,"author":{"gitId":"IrvingHe000"},"content":"    public void modifyTasks() {","lastModifiedDate":"2021-08-24"},{"lineNumber":67,"author":{"gitId":"IrvingHe000"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":68,"author":{"gitId":"IrvingHe000"},"content":"            FileWriter fileWriter \u003d new FileWriter(this.src);","lastModifiedDate":"2021-08-24"},{"lineNumber":69,"author":{"gitId":"IrvingHe000"},"content":"            fileWriter.close();","lastModifiedDate":"2021-08-24"},{"lineNumber":70,"author":{"gitId":"IrvingHe000"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":71,"author":{"gitId":"IrvingHe000"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-24"},{"lineNumber":72,"author":{"gitId":"IrvingHe000"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":73,"author":{"gitId":"IrvingHe000"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":74,"author":{"gitId":"IrvingHe000"},"content":"            FileWriter fileWriter \u003d new FileWriter(this.src, true);","lastModifiedDate":"2021-08-24"},{"lineNumber":75,"author":{"gitId":"IrvingHe000"},"content":"            for (int i \u003d 0; i \u003c taskList.size(); i++) {","lastModifiedDate":"2021-08-24"},{"lineNumber":76,"author":{"gitId":"IrvingHe000"},"content":"                fileWriter.write(taskList.get(i).toStoredString());","lastModifiedDate":"2021-08-24"},{"lineNumber":77,"author":{"gitId":"IrvingHe000"},"content":"                if (i !\u003d taskList.size() - 1) {","lastModifiedDate":"2021-08-24"},{"lineNumber":78,"author":{"gitId":"IrvingHe000"},"content":"                    fileWriter.write(\"\\n\");","lastModifiedDate":"2021-08-24"},{"lineNumber":79,"author":{"gitId":"IrvingHe000"},"content":"                }","lastModifiedDate":"2021-08-24"},{"lineNumber":80,"author":{"gitId":"IrvingHe000"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":81,"author":{"gitId":"IrvingHe000"},"content":"            fileWriter.close();","lastModifiedDate":"2021-08-24"},{"lineNumber":82,"author":{"gitId":"IrvingHe000"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":83,"author":{"gitId":"IrvingHe000"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-24"},{"lineNumber":84,"author":{"gitId":"IrvingHe000"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":85,"author":{"gitId":"IrvingHe000"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":86,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":87,"author":{"gitId":"IrvingHe000"},"content":"    public void deleteTask(String task) throws Exception {","lastModifiedDate":"2021-08-24"},{"lineNumber":88,"author":{"gitId":"IrvingHe000"},"content":"        int itemDeleted \u003d Parser.findDeleteItem(task);","lastModifiedDate":"2021-08-24"},{"lineNumber":89,"author":{"gitId":"IrvingHe000"},"content":"        Task deletedTask \u003d taskList.remove(itemDeleted - 1);","lastModifiedDate":"2021-08-24"},{"lineNumber":90,"author":{"gitId":"IrvingHe000"},"content":"        ui.showDeleteMessage(deletedTask);","lastModifiedDate":"2021-08-24"},{"lineNumber":91,"author":{"gitId":"IrvingHe000"},"content":"        modifyTasks();","lastModifiedDate":"2021-08-24"},{"lineNumber":92,"author":{"gitId":"IrvingHe000"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":93,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":94,"author":{"gitId":"IrvingHe000"},"content":"    public void readEvents(Scanner sc) {","lastModifiedDate":"2021-08-24"},{"lineNumber":95,"author":{"gitId":"IrvingHe000"},"content":"        while (sc.hasNextLine()) {","lastModifiedDate":"2021-08-24"},{"lineNumber":96,"author":{"gitId":"IrvingHe000"},"content":"            String task \u003d sc.nextLine();","lastModifiedDate":"2021-08-24"},{"lineNumber":97,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":98,"author":{"gitId":"IrvingHe000"},"content":"            if (task.equals(\"\\n\")) {","lastModifiedDate":"2021-08-24"},{"lineNumber":99,"author":{"gitId":"IrvingHe000"},"content":"                System.out.println(task);","lastModifiedDate":"2021-08-24"},{"lineNumber":100,"author":{"gitId":"IrvingHe000"},"content":"                continue;","lastModifiedDate":"2021-08-24"},{"lineNumber":101,"author":{"gitId":"IrvingHe000"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":102,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":103,"author":{"gitId":"IrvingHe000"},"content":"            char taskType \u003d task.charAt(0);","lastModifiedDate":"2021-08-24"},{"lineNumber":104,"author":{"gitId":"IrvingHe000"},"content":"            char taskDone \u003d task.charAt(4);","lastModifiedDate":"2021-08-24"},{"lineNumber":105,"author":{"gitId":"IrvingHe000"},"content":"            String taskValue \u003d task.substring(8);","lastModifiedDate":"2021-08-24"},{"lineNumber":106,"author":{"gitId":"IrvingHe000"},"content":"            boolean finished \u003d (taskDone \u003d\u003d \u00271\u0027);","lastModifiedDate":"2021-08-24"},{"lineNumber":107,"author":{"gitId":"IrvingHe000"},"content":"            Task curTask \u003d new Task(\"\");","lastModifiedDate":"2021-08-24"},{"lineNumber":108,"author":{"gitId":"IrvingHe000"},"content":"            int separatorPosition;","lastModifiedDate":"2021-08-24"},{"lineNumber":109,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":110,"author":{"gitId":"IrvingHe000"},"content":"            switch (taskType) {","lastModifiedDate":"2021-08-24"},{"lineNumber":111,"author":{"gitId":"IrvingHe000"},"content":"            case \u0027T\u0027:","lastModifiedDate":"2021-08-24"},{"lineNumber":112,"author":{"gitId":"IrvingHe000"},"content":"                curTask \u003d new Todo(taskValue, finished);","lastModifiedDate":"2021-08-24"},{"lineNumber":113,"author":{"gitId":"IrvingHe000"},"content":"                break;","lastModifiedDate":"2021-08-24"},{"lineNumber":114,"author":{"gitId":"IrvingHe000"},"content":"            case \u0027E\u0027:","lastModifiedDate":"2021-08-24"},{"lineNumber":115,"author":{"gitId":"IrvingHe000"},"content":"                separatorPosition \u003d taskValue.indexOf(\u0027|\u0027);","lastModifiedDate":"2021-08-24"},{"lineNumber":116,"author":{"gitId":"IrvingHe000"},"content":"                String eventName \u003d taskValue.substring(0, separatorPosition - 1);","lastModifiedDate":"2021-08-24"},{"lineNumber":117,"author":{"gitId":"IrvingHe000"},"content":"                String eventTime \u003d taskValue.substring(separatorPosition + 2);","lastModifiedDate":"2021-08-24"},{"lineNumber":118,"author":{"gitId":"IrvingHe000"},"content":"                curTask \u003d new Event(eventName, finished, eventTime);","lastModifiedDate":"2021-08-24"},{"lineNumber":119,"author":{"gitId":"IrvingHe000"},"content":"                break;","lastModifiedDate":"2021-08-24"},{"lineNumber":120,"author":{"gitId":"IrvingHe000"},"content":"            case \u0027D\u0027:","lastModifiedDate":"2021-08-24"},{"lineNumber":121,"author":{"gitId":"IrvingHe000"},"content":"                separatorPosition \u003d taskValue.indexOf(\u0027|\u0027);","lastModifiedDate":"2021-08-24"},{"lineNumber":122,"author":{"gitId":"IrvingHe000"},"content":"                String deadlineName \u003d taskValue.substring(0, separatorPosition - 1);","lastModifiedDate":"2021-08-24"},{"lineNumber":123,"author":{"gitId":"IrvingHe000"},"content":"                String deadlineTime \u003d taskValue.substring(separatorPosition + 2);","lastModifiedDate":"2021-08-24"},{"lineNumber":124,"author":{"gitId":"IrvingHe000"},"content":"                curTask \u003d new Deadline(deadlineName, finished, deadlineTime);","lastModifiedDate":"2021-08-24"},{"lineNumber":125,"author":{"gitId":"IrvingHe000"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":126,"author":{"gitId":"IrvingHe000"},"content":"            taskList.add(curTask);","lastModifiedDate":"2021-08-24"},{"lineNumber":127,"author":{"gitId":"IrvingHe000"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":128,"author":{"gitId":"IrvingHe000"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":129,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":130,"author":{"gitId":"IrvingHe000"},"content":"    public void saveNewTask(Task task) {","lastModifiedDate":"2021-08-24"},{"lineNumber":131,"author":{"gitId":"IrvingHe000"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":132,"author":{"gitId":"IrvingHe000"},"content":"            FileWriter fileWriter \u003d new FileWriter(this.src, true);","lastModifiedDate":"2021-08-24"},{"lineNumber":133,"author":{"gitId":"IrvingHe000"},"content":"            fileWriter.write(task.toStoredString() + \"\\n\");","lastModifiedDate":"2021-08-24"},{"lineNumber":134,"author":{"gitId":"IrvingHe000"},"content":"            fileWriter.close();","lastModifiedDate":"2021-08-24"},{"lineNumber":135,"author":{"gitId":"IrvingHe000"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":136,"author":{"gitId":"IrvingHe000"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-24"},{"lineNumber":137,"author":{"gitId":"IrvingHe000"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":138,"author":{"gitId":"IrvingHe000"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":139,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":140,"author":{"gitId":"IrvingHe000"},"content":"    public void loadSavedTasks() {","lastModifiedDate":"2021-08-24"},{"lineNumber":141,"author":{"gitId":"IrvingHe000"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":142,"author":{"gitId":"IrvingHe000"},"content":"            Scanner sc \u003d new Scanner(src);","lastModifiedDate":"2021-08-24"},{"lineNumber":143,"author":{"gitId":"IrvingHe000"},"content":"            readEvents(sc);","lastModifiedDate":"2021-08-24"},{"lineNumber":144,"author":{"gitId":"IrvingHe000"},"content":"            sc.close();","lastModifiedDate":"2021-08-24"},{"lineNumber":145,"author":{"gitId":"IrvingHe000"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":146,"author":{"gitId":"IrvingHe000"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-24"},{"lineNumber":147,"author":{"gitId":"IrvingHe000"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":148,"author":{"gitId":"IrvingHe000"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":149,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":150,"author":{"gitId":"IrvingHe000"},"content":"    public void findTask(String task) {","lastModifiedDate":"2021-08-24"},{"lineNumber":151,"author":{"gitId":"IrvingHe000"},"content":"        String target \u003d task.substring(5);","lastModifiedDate":"2021-08-24"},{"lineNumber":152,"author":{"gitId":"IrvingHe000"},"content":"        List\u003cInteger\u003e result \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-24"},{"lineNumber":153,"author":{"gitId":"IrvingHe000"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {","lastModifiedDate":"2021-08-24"},{"lineNumber":154,"author":{"gitId":"IrvingHe000"},"content":"            Task cur \u003d taskList.get(i);","lastModifiedDate":"2021-08-24"},{"lineNumber":155,"author":{"gitId":"IrvingHe000"},"content":"            if (cur.getTaskName().contains(target)) {","lastModifiedDate":"2021-08-24"},{"lineNumber":156,"author":{"gitId":"IrvingHe000"},"content":"                result.add(i);","lastModifiedDate":"2021-08-24"},{"lineNumber":157,"author":{"gitId":"IrvingHe000"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":158,"author":{"gitId":"IrvingHe000"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":159,"author":{"gitId":"IrvingHe000"},"content":"        ui.showFindingTasks(result);","lastModifiedDate":"2021-08-24"},{"lineNumber":160,"author":{"gitId":"IrvingHe000"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":161,"author":{"gitId":"IrvingHe000"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"IrvingHe000":161}},{"path":"src/main/java/duke/command/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IrvingHe000"},"content":"package duke.command;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"IrvingHe000"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"IrvingHe000"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"IrvingHe000"},"content":"import java.util.List;","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"IrvingHe000"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"IrvingHe000"},"content":" * Wrap out a list containing the tasks of the user.","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"IrvingHe000"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"IrvingHe000"},"content":"public class TaskList {","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"IrvingHe000"},"content":"    private List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"IrvingHe000"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"IrvingHe000"},"content":"     * Add new task to the task list.","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"IrvingHe000"},"content":"     * @param task The new task user wants to add to the list.","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"IrvingHe000"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"IrvingHe000"},"content":"    public void add(Task task) {","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"IrvingHe000"},"content":"        this.tasks.add(task);","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"IrvingHe000"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"IrvingHe000"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"IrvingHe000"},"content":"     * Return the current number of elements in the list.","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"IrvingHe000"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"IrvingHe000"},"content":"     * @return The current number of elements in the list.","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"IrvingHe000"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"IrvingHe000"},"content":"    public int size() {","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"IrvingHe000"},"content":"        return this.tasks.size();","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"IrvingHe000"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"IrvingHe000"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"IrvingHe000"},"content":"     * Get the item that user wants.","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"IrvingHe000"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"IrvingHe000"},"content":"     * @param i The number of item that user wants to get.","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"IrvingHe000"},"content":"     * @return The task that user wants to get.","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"IrvingHe000"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"IrvingHe000"},"content":"    public Task get(int i) {","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"IrvingHe000"},"content":"        return this.tasks.get(i);","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"IrvingHe000"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"IrvingHe000"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"IrvingHe000"},"content":"     * Remove the task from the task list.","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"IrvingHe000"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"IrvingHe000"},"content":"     * @param i The number of the task which user wants to remove.","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"IrvingHe000"},"content":"     * @return The removed task.","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"IrvingHe000"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"IrvingHe000"},"content":"    public Task remove(int i) {","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"IrvingHe000"},"content":"        return this.tasks.remove(i);","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"IrvingHe000"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"IrvingHe000"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"IrvingHe000":50}},{"path":"src/main/java/duke/command/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IrvingHe000"},"content":"package duke.command;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"IrvingHe000"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"IrvingHe000"},"content":"import java.util.List;","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"IrvingHe000"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"IrvingHe000"},"content":" * Dealing with responding user\u0027s input on the command line.","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"IrvingHe000"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"IrvingHe000"},"content":"public class Ui {","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"IrvingHe000"},"content":"    private TaskList taskList;","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"IrvingHe000"},"content":"    private static String logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"IrvingHe000"},"content":"            + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"IrvingHe000"},"content":"            + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"IrvingHe000"},"content":"            + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"IrvingHe000"},"content":"            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"IrvingHe000"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"IrvingHe000"},"content":"     * Constructor of Ui.","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"IrvingHe000"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"IrvingHe000"},"content":"     * @param taskList The taskList which stores data of the user\u0027s event.","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"IrvingHe000"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"IrvingHe000"},"content":"    public Ui(TaskList taskList) {","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"IrvingHe000"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"IrvingHe000"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"IrvingHe000"},"content":"    private static void printSeparateLine() {","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"IrvingHe000"},"content":"        System.out.println(\"________________________________________________________________\");","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"IrvingHe000"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"IrvingHe000"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"IrvingHe000"},"content":"     * Print welcome message on command line.","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"IrvingHe000"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"IrvingHe000"},"content":"    public void showLogo() {","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"IrvingHe000"},"content":"        System.out.println(\"Hello from\\n\" + logo);","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"IrvingHe000"},"content":"        printSeparateLine();","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"IrvingHe000"},"content":"        System.out.println(\"    Hello! I\u0027m Irving.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"IrvingHe000"},"content":"        System.out.println(\"    What can I do for you?\");","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"IrvingHe000"},"content":"        printSeparateLine();","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"IrvingHe000"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"IrvingHe000"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"IrvingHe000"},"content":"     * Print new message when a new task is added to the taskList.","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"IrvingHe000"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"IrvingHe000"},"content":"    public void showAddNewTask() {","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"IrvingHe000"},"content":"        printSeparateLine();","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"IrvingHe000"},"content":"        System.out.println(\"     Got it. I\u0027ve added this task:\");","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"IrvingHe000"},"content":"        System.out.println(\"      \" + taskList.get(taskList.size() - 1).toString());","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"IrvingHe000"},"content":"        System.out.println(\"     Now you have \" + taskList.size() + \" tasks in the list.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"IrvingHe000"},"content":"        printSeparateLine();","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"IrvingHe000"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"IrvingHe000"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"IrvingHe000"},"content":"     * Print new message when a task is marked as done.","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"IrvingHe000"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"IrvingHe000"},"content":"     * @param itemDone The number of the item that user want to mark as done.","lastModifiedDate":"2021-08-24"},{"lineNumber":57,"author":{"gitId":"IrvingHe000"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"IrvingHe000"},"content":"    public void showMarkTaskDone(int itemDone) {","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"IrvingHe000"},"content":"        printSeparateLine();","lastModifiedDate":"2021-08-24"},{"lineNumber":60,"author":{"gitId":"IrvingHe000"},"content":"        System.out.println(\"    Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"IrvingHe000"},"content":"        System.out.println(\"      \" + taskList.get(itemDone - 1).toString());","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"IrvingHe000"},"content":"        printSeparateLine();","lastModifiedDate":"2021-08-24"},{"lineNumber":63,"author":{"gitId":"IrvingHe000"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":64,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"IrvingHe000"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":66,"author":{"gitId":"IrvingHe000"},"content":"     * Print Goodbye message when user want to exit the program.","lastModifiedDate":"2021-08-24"},{"lineNumber":67,"author":{"gitId":"IrvingHe000"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":68,"author":{"gitId":"IrvingHe000"},"content":"    public void showGoodBye() {","lastModifiedDate":"2021-08-24"},{"lineNumber":69,"author":{"gitId":"IrvingHe000"},"content":"        printSeparateLine();","lastModifiedDate":"2021-08-24"},{"lineNumber":70,"author":{"gitId":"IrvingHe000"},"content":"        System.out.println(\"    Bye. Hope to see you again soon!\");","lastModifiedDate":"2021-08-24"},{"lineNumber":71,"author":{"gitId":"IrvingHe000"},"content":"        printSeparateLine();","lastModifiedDate":"2021-08-24"},{"lineNumber":72,"author":{"gitId":"IrvingHe000"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":73,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":74,"author":{"gitId":"IrvingHe000"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":75,"author":{"gitId":"IrvingHe000"},"content":"     * Print tasks containing in the task list.","lastModifiedDate":"2021-08-24"},{"lineNumber":76,"author":{"gitId":"IrvingHe000"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":77,"author":{"gitId":"IrvingHe000"},"content":"    public void showList() {","lastModifiedDate":"2021-08-24"},{"lineNumber":78,"author":{"gitId":"IrvingHe000"},"content":"        printSeparateLine();","lastModifiedDate":"2021-08-24"},{"lineNumber":79,"author":{"gitId":"IrvingHe000"},"content":"        System.out.println(\"    Here are the tasks in your list:\");","lastModifiedDate":"2021-08-24"},{"lineNumber":80,"author":{"gitId":"IrvingHe000"},"content":"        for (int i \u003d 1; i \u003c\u003d taskList.size(); i++) {","lastModifiedDate":"2021-08-24"},{"lineNumber":81,"author":{"gitId":"IrvingHe000"},"content":"            System.out.println(\"    \" + i + \".\" + taskList.get(i - 1).toString());","lastModifiedDate":"2021-08-24"},{"lineNumber":82,"author":{"gitId":"IrvingHe000"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":83,"author":{"gitId":"IrvingHe000"},"content":"        printSeparateLine();","lastModifiedDate":"2021-08-24"},{"lineNumber":84,"author":{"gitId":"IrvingHe000"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":85,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":86,"author":{"gitId":"IrvingHe000"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":87,"author":{"gitId":"IrvingHe000"},"content":"     * Print new message when user want to delete a task.","lastModifiedDate":"2021-08-24"},{"lineNumber":88,"author":{"gitId":"IrvingHe000"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":89,"author":{"gitId":"IrvingHe000"},"content":"     * @param deletedTask The task that user want to delete","lastModifiedDate":"2021-08-24"},{"lineNumber":90,"author":{"gitId":"IrvingHe000"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":91,"author":{"gitId":"IrvingHe000"},"content":"    public void showDeleteMessage(Task deletedTask) {","lastModifiedDate":"2021-08-24"},{"lineNumber":92,"author":{"gitId":"IrvingHe000"},"content":"        printSeparateLine();","lastModifiedDate":"2021-08-24"},{"lineNumber":93,"author":{"gitId":"IrvingHe000"},"content":"        System.out.println(\"    Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2021-08-24"},{"lineNumber":94,"author":{"gitId":"IrvingHe000"},"content":"        System.out.println(\"      \" + deletedTask.toString());","lastModifiedDate":"2021-08-24"},{"lineNumber":95,"author":{"gitId":"IrvingHe000"},"content":"        System.out.println(\"     Now you have \" + taskList.size() + \" tasks in the list.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":96,"author":{"gitId":"IrvingHe000"},"content":"        printSeparateLine();","lastModifiedDate":"2021-08-24"},{"lineNumber":97,"author":{"gitId":"IrvingHe000"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":98,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":99,"author":{"gitId":"IrvingHe000"},"content":"    public void showFindingTasks(List\u003cInteger\u003e nums) {","lastModifiedDate":"2021-08-24"},{"lineNumber":100,"author":{"gitId":"IrvingHe000"},"content":"        printSeparateLine();","lastModifiedDate":"2021-08-24"},{"lineNumber":101,"author":{"gitId":"IrvingHe000"},"content":"        if (nums.size() \u003e 0) {","lastModifiedDate":"2021-08-24"},{"lineNumber":102,"author":{"gitId":"IrvingHe000"},"content":"            System.out.println(\"    Here are the matching tasks in your list:\");","lastModifiedDate":"2021-08-24"},{"lineNumber":103,"author":{"gitId":"IrvingHe000"},"content":"        } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":104,"author":{"gitId":"IrvingHe000"},"content":"            System.out.println(\"    Sorry, I cannot find any matching task from the list :(\");","lastModifiedDate":"2021-08-24"},{"lineNumber":105,"author":{"gitId":"IrvingHe000"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":106,"author":{"gitId":"IrvingHe000"},"content":"        for (int i \u003d 1; i \u003c\u003d nums.size(); i++) {","lastModifiedDate":"2021-08-24"},{"lineNumber":107,"author":{"gitId":"IrvingHe000"},"content":"            int num \u003d nums.get(i - 1);","lastModifiedDate":"2021-08-24"},{"lineNumber":108,"author":{"gitId":"IrvingHe000"},"content":"            System.out.println(\"    \" + i + \".\" + taskList.get(num).toString());","lastModifiedDate":"2021-08-24"},{"lineNumber":109,"author":{"gitId":"IrvingHe000"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":110,"author":{"gitId":"IrvingHe000"},"content":"        printSeparateLine();","lastModifiedDate":"2021-08-24"},{"lineNumber":111,"author":{"gitId":"IrvingHe000"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":112,"author":{"gitId":"IrvingHe000"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"IrvingHe000":112}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IrvingHe000"},"content":"package duke.task;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"IrvingHe000"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"IrvingHe000"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"IrvingHe000"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"IrvingHe000"},"content":"    private LocalDate deadlineDate;","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"IrvingHe000"},"content":"    private LocalTime deadlineTime;","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"IrvingHe000"},"content":"    public Deadline(String task, String taskTime) {","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"IrvingHe000"},"content":"        super(task);","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"IrvingHe000"},"content":"        String[] dateAndTime \u003d taskTime.split(\" \");","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"IrvingHe000"},"content":"        System.out.println(dateAndTime[0]);","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"IrvingHe000"},"content":"        System.out.println(dateAndTime[1]);","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"IrvingHe000"},"content":"        this.deadlineDate \u003d LocalDate.parse(dateAndTime[0]);","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"IrvingHe000"},"content":"        this.deadlineTime \u003d LocalTime.parse(dateAndTime[1]);","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"IrvingHe000"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"IrvingHe000"},"content":"    public Deadline(String task, boolean done, String taskTime) {","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"IrvingHe000"},"content":"        super(task, done);","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"IrvingHe000"},"content":"        String[] dateAndTime \u003d taskTime.split(\" \");","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"IrvingHe000"},"content":"        this.deadlineDate \u003d LocalDate.parse(dateAndTime[0]);","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"IrvingHe000"},"content":"        this.deadlineTime \u003d LocalTime.parse(dateAndTime[1]);","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"IrvingHe000"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":25,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":26,"author":{"gitId":"IrvingHe000"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":27,"author":{"gitId":"IrvingHe000"},"content":"    public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":28,"author":{"gitId":"IrvingHe000"},"content":"        String finished \u003d \" \";","lastModifiedDate":"2021-08-19"},{"lineNumber":29,"author":{"gitId":"IrvingHe000"},"content":"        if (this.isDone()) {","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"IrvingHe000"},"content":"            finished \u003d \"X\";","lastModifiedDate":"2021-08-19"},{"lineNumber":31,"author":{"gitId":"IrvingHe000"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":32,"author":{"gitId":"IrvingHe000"},"content":"        return \"[D]\" + \"[\" + finished + \"] \" + this.getTaskName() + \" (by: \" + this.outputTaskTime() + \", \"","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"IrvingHe000"},"content":"                + deadlineTime.toString() + \")\";","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"IrvingHe000"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"IrvingHe000"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"IrvingHe000"},"content":"    public String toStoredString() {","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"IrvingHe000"},"content":"        int finished \u003d this.isDone() ? 1 : 0;","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"IrvingHe000"},"content":"        return \"D | \" + finished + \" | \" + this.getTaskName() + \" | \" + deadlineDate + \" \" + deadlineTime;","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"IrvingHe000"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"IrvingHe000"},"content":"    private String outputTaskTime() {","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"IrvingHe000"},"content":"        return deadlineDate.getMonth().toString() + \" \" + deadlineDate.getDayOfMonth() + \" \" + deadlineDate.getYear();","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"IrvingHe000"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":45,"author":{"gitId":"IrvingHe000"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"IrvingHe000":45}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IrvingHe000"},"content":"package duke.task;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"IrvingHe000"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"IrvingHe000"},"content":"    private String eventTime;","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"IrvingHe000"},"content":"    public Event(String task, String eventTime) {","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"IrvingHe000"},"content":"        super(task);","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"IrvingHe000"},"content":"        this.eventTime \u003d eventTime;","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"IrvingHe000"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"IrvingHe000"},"content":"    public Event(String task, boolean done, String eventTime) {","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"IrvingHe000"},"content":"        super(task, done);","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"IrvingHe000"},"content":"        this.eventTime \u003d eventTime;","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"IrvingHe000"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"IrvingHe000"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":17,"author":{"gitId":"IrvingHe000"},"content":"    public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"IrvingHe000"},"content":"        String finished \u003d \" \";","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"IrvingHe000"},"content":"        if (this.isDone()) {","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"IrvingHe000"},"content":"            finished \u003d \"X\";","lastModifiedDate":"2021-08-19"},{"lineNumber":21,"author":{"gitId":"IrvingHe000"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":22,"author":{"gitId":"IrvingHe000"},"content":"        return \"[E]\" + \"[\" + finished + \"] \" + this.getTaskName() + \" (at: \" + this.eventTime + \")\";","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"IrvingHe000"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":24,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"IrvingHe000"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"IrvingHe000"},"content":"    public String toStoredString() {","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"IrvingHe000"},"content":"        int finished \u003d this.isDone() ? 1 : 0;","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"IrvingHe000"},"content":"        return \"E | \" + finished + \" | \" + this.getTaskName() + \" | \" + eventTime;","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"IrvingHe000"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"IrvingHe000"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"IrvingHe000":30}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IrvingHe000"},"content":"package duke.task;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"IrvingHe000"},"content":"public class Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"IrvingHe000"},"content":"    private String taskName;","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"IrvingHe000"},"content":"    private boolean done;","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"IrvingHe000"},"content":"    public Task(String taskName) {","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"IrvingHe000"},"content":"        this.taskName \u003d taskName;","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"IrvingHe000"},"content":"        this.done \u003d false;","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"IrvingHe000"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"IrvingHe000"},"content":"    public Task(String taskName, boolean done) {","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"IrvingHe000"},"content":"        this.taskName \u003d taskName;","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"IrvingHe000"},"content":"        this.done \u003d done;","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"IrvingHe000"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"IrvingHe000"},"content":"    public String getTaskName() {","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"IrvingHe000"},"content":"        return taskName;","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"IrvingHe000"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"IrvingHe000"},"content":"    public boolean isDone() {","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"IrvingHe000"},"content":"        return done;","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"IrvingHe000"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"IrvingHe000"},"content":"    public void finished() {","lastModifiedDate":"2021-08-18"},{"lineNumber":26,"author":{"gitId":"IrvingHe000"},"content":"        this.done \u003d true;","lastModifiedDate":"2021-08-18"},{"lineNumber":27,"author":{"gitId":"IrvingHe000"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":28,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":29,"author":{"gitId":"IrvingHe000"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":30,"author":{"gitId":"IrvingHe000"},"content":"    public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":31,"author":{"gitId":"IrvingHe000"},"content":"        String finished \u003d \" \";","lastModifiedDate":"2021-08-19"},{"lineNumber":32,"author":{"gitId":"IrvingHe000"},"content":"        if (this.done) {","lastModifiedDate":"2021-08-19"},{"lineNumber":33,"author":{"gitId":"IrvingHe000"},"content":"            finished \u003d \"X\";","lastModifiedDate":"2021-08-19"},{"lineNumber":34,"author":{"gitId":"IrvingHe000"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":35,"author":{"gitId":"IrvingHe000"},"content":"        return \"[\" + finished + \"] \" + this.taskName;","lastModifiedDate":"2021-08-19"},{"lineNumber":36,"author":{"gitId":"IrvingHe000"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":37,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"IrvingHe000"},"content":"    public String toStoredString() {","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"IrvingHe000"},"content":"        return taskName;","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"IrvingHe000"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"IrvingHe000"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"IrvingHe000":41}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IrvingHe000"},"content":"package duke.task;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"IrvingHe000"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"IrvingHe000"},"content":"    public Todo(String task) {","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"IrvingHe000"},"content":"        super(task);","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"IrvingHe000"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"IrvingHe000"},"content":"    public Todo(String task, boolean done) {","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"IrvingHe000"},"content":"        super(task, done);","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"IrvingHe000"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"IrvingHe000"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"IrvingHe000"},"content":"    public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"IrvingHe000"},"content":"        String finished \u003d \" \";","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"IrvingHe000"},"content":"        if (this.isDone()) {","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"IrvingHe000"},"content":"            finished \u003d \"X\";","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"IrvingHe000"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"IrvingHe000"},"content":"        return \"[T]\" + \"[\" + finished + \"] \" + this.getTaskName();","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"IrvingHe000"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":21,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"IrvingHe000"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"IrvingHe000"},"content":"    public String toStoredString() {","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"IrvingHe000"},"content":"        int finished \u003d isDone() ? 1 : 0;","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"IrvingHe000"},"content":"        return \"T | \" + finished + \" | \" + this.getTaskName();","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"IrvingHe000"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"IrvingHe000"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"IrvingHe000":27}},{"path":"src/test/java/command/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IrvingHe000"},"content":"package command;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"IrvingHe000"},"content":"import duke.command.InputTypes;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"IrvingHe000"},"content":"import duke.command.Parser;","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"IrvingHe000"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"IrvingHe000"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"IrvingHe000"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"IrvingHe000"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"IrvingHe000"},"content":"public class ParserTest {","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"IrvingHe000"},"content":"    @Test","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"IrvingHe000"},"content":"    public void judgeTypeTest() {","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"IrvingHe000"},"content":"        String invalidInput \u003d \"This is not a valid input\";","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"IrvingHe000"},"content":"        String validInput1 \u003d \"deadline go to school /by 2021-08-10 00:00\";","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"IrvingHe000"},"content":"        String validInput2 \u003d \"todo Finish ip\";","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"IrvingHe000"},"content":"        assertEquals(InputTypes.UNKNOWN, Parser.judgeType(invalidInput));","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"IrvingHe000"},"content":"        assertEquals(InputTypes.DEADLINE, Parser.judgeType(validInput1));","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"IrvingHe000"},"content":"        assertEquals(InputTypes.TODO, Parser.judgeType(validInput2));","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"IrvingHe000"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"IrvingHe000"},"content":"    @Test","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"IrvingHe000"},"content":"    public void isValidDeadlineTaskTest() throws Exception {","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"IrvingHe000"},"content":"        String input1 \u003d \"deadline task1 /by 2020-12-08 09:00\";","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"IrvingHe000"},"content":"        String input2 \u003d \"deadline task2 /by 2010-12-08 20:00\";","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"IrvingHe000"},"content":"        Task expectedTask1 \u003d new Deadline(\"task1\", \"2020-12-08 09:00\");","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"IrvingHe000"},"content":"        Task expectedTask2 \u003d new Deadline(\"task2\", \"2010-12-08 20:00\");","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"IrvingHe000"},"content":"        assertEquals(expectedTask1.toString(), Parser.isValidDeadlineTask(input1).toString());","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"IrvingHe000"},"content":"        assertEquals(expectedTask2.toString(), Parser.isValidDeadlineTask(input2).toString());","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"IrvingHe000"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"IrvingHe000"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"IrvingHe000":31}},{"path":"src/test/java/command/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IrvingHe000"},"content":"package command;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"IrvingHe000"},"content":"import duke.command.TaskList;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"IrvingHe000"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"IrvingHe000"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"IrvingHe000"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"IrvingHe000"},"content":"public class TaskListTest {","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"IrvingHe000"},"content":"    private static TaskList testingList \u003d new TaskList();","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"IrvingHe000"},"content":"    private static Task task1 \u003d new Task(\"task1\");","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"IrvingHe000"},"content":"    private static Task task2 \u003d new Task(\"task2\");","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"IrvingHe000"},"content":"    private static Task task3 \u003d new Task(\"task3\");","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"IrvingHe000"},"content":"    @Test","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"IrvingHe000"},"content":"    public void sizeTest() {","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"IrvingHe000"},"content":"        testingList \u003d new TaskList();","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"IrvingHe000"},"content":"        assertEquals(0, testingList.size());","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"IrvingHe000"},"content":"        testingList.add(task1);","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"IrvingHe000"},"content":"        testingList.add(task2);","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"IrvingHe000"},"content":"        assertEquals(2, testingList.size());","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"IrvingHe000"},"content":"        testingList.add(task3);","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"IrvingHe000"},"content":"        assertEquals(3, testingList.size());","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"IrvingHe000"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"IrvingHe000"},"content":"    @Test","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"IrvingHe000"},"content":"    public void getTest() {","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"IrvingHe000"},"content":"        testingList \u003d new TaskList();","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"IrvingHe000"},"content":"        testingList.add(task1);","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"IrvingHe000"},"content":"        testingList.add(task2);","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"IrvingHe000"},"content":"        assertEquals(task1, testingList.get(0));","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"IrvingHe000"},"content":"        assertEquals(task2, testingList.get(1));","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"IrvingHe000"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"IrvingHe000"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"IrvingHe000"},"content":"    @Test","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"IrvingHe000"},"content":"    public void removeTest() {","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"IrvingHe000"},"content":"        testingList \u003d new TaskList();","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"IrvingHe000"},"content":"        testingList.add(task1);","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"IrvingHe000"},"content":"        testingList.add(task2);","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"IrvingHe000"},"content":"        assertEquals(task2, testingList.remove(1));","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"IrvingHe000"},"content":"        assertEquals(task1, testingList.remove(0));","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"IrvingHe000"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"IrvingHe000"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"IrvingHe000":43}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"IrvingHe000"},"content":"todo todoTask1","lastModifiedDate":"2021-08-19"},{"lineNumber":2,"author":{"gitId":"IrvingHe000"},"content":"deadline go to school /by Thursday 2pm","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"IrvingHe000"},"content":"event even1 /at Friday 2pm-4pm","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"IrvingHe000"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"IrvingHe000"},"content":"done 1","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"IrvingHe000"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"IrvingHe000"},"content":"bye","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"IrvingHe000":7}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"IrvingHe000"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":20,"IrvingHe000":1}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"IrvingHe000"},"content":"diff ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2021-08-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":33,"IrvingHe000":1}}]

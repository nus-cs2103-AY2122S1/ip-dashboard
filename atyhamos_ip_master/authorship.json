[{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"atyhamos"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"atyhamos"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"atyhamos"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"atyhamos"},"content":"import java.time.format.FormatStyle;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"atyhamos"},"content":"/**","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"atyhamos"},"content":" * This class implements a DukeList to be used in storing string from Duke","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"atyhamos"},"content":" *","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"atyhamos"},"content":" * @author Amos Tan","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"atyhamos"},"content":" * @version CS2103T AY21/22 Semester 1","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"atyhamos"},"content":" */","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"atyhamos"},"content":"public class Deadline extends Task{","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"atyhamos"},"content":"\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"atyhamos"},"content":"    /** The name of the deadline task.*/","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"atyhamos"},"content":"    protected String by;","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"atyhamos"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"atyhamos"},"content":"    /** The date and time of the deadline task */","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"atyhamos"},"content":"    protected LocalDateTime by;","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"atyhamos"},"content":"    /** The DateTimeFormatter used when printing the Event. */","lastModifiedDate":"2021-08-23"},{"lineNumber":22,"author":{"gitId":"atyhamos"},"content":"    private static final DateTimeFormatter PRINT_DATE_FORMATTER \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\");","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"atyhamos"},"content":"    /** The DateTimeFormatter when converting time from string. */","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"atyhamos"},"content":"    private static final DateTimeFormatter DATE_FORMATTER \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy ha\");","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"atyhamos"},"content":"    /** The DateTimeFormatter when converting time with minutes from string. */","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"atyhamos"},"content":"    private static final DateTimeFormatter DATE_MINUTES_FORMATTER \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy h:mma\");","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"atyhamos"},"content":"\u003e\u003e\u003e\u003e\u003e\u003e\u003e branch-Level-8","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":32,"author":{"gitId":"atyhamos"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":33,"author":{"gitId":"atyhamos"},"content":"     * Constructs a Deadline.","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"atyhamos"},"content":"     * @param name The name of the deadline task.","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"atyhamos"},"content":"     * @param by The deadline of the task.","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"atyhamos"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":37,"author":{"gitId":"atyhamos"},"content":"    public Deadline(String name, LocalDateTime by) {","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"atyhamos"},"content":"        super(name);","lastModifiedDate":"2021-08-18"},{"lineNumber":39,"author":{"gitId":"atyhamos"},"content":"        this.by \u003d by;","lastModifiedDate":"2021-08-18"},{"lineNumber":40,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":41,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":42,"author":{"gitId":"atyhamos"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":43,"author":{"gitId":"atyhamos"},"content":"\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD","lastModifiedDate":"2021-08-23"},{"lineNumber":44,"author":{"gitId":"atyhamos"},"content":"     * Returns a simplified representation of the Deadline for easier recovery from save file.","lastModifiedDate":"2021-08-23"},{"lineNumber":45,"author":{"gitId":"atyhamos"},"content":"     * @return The file formatted string representation of the Deadline.","lastModifiedDate":"2021-08-23"},{"lineNumber":46,"author":{"gitId":"atyhamos"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":47,"author":{"gitId":"atyhamos"},"content":"    public String toFileFormat() {","lastModifiedDate":"2021-08-23"},{"lineNumber":48,"author":{"gitId":"atyhamos"},"content":"        return String.format(\"D%s,%s,%b\", name, by, isDone);","lastModifiedDate":"2021-08-23"},{"lineNumber":49,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":50,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":51,"author":{"gitId":"atyhamos"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":52,"author":{"gitId":"atyhamos"},"content":"     * Returns a string representation of the Deadline, with an [X] marked for done and [ ] as undone.","lastModifiedDate":"2021-08-23"},{"lineNumber":53,"author":{"gitId":"atyhamos"},"content":"     * @return the string representation of the Deadline.","lastModifiedDate":"2021-08-23"},{"lineNumber":54,"author":{"gitId":"atyhamos"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":55,"author":{"gitId":"atyhamos"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-08-23"},{"lineNumber":56,"author":{"gitId":"atyhamos"},"content":"     * Converts the user input string to a LocalDateTime.","lastModifiedDate":"2021-08-23"},{"lineNumber":57,"author":{"gitId":"atyhamos"},"content":"     * @param by The user input date as a string.","lastModifiedDate":"2021-08-23"},{"lineNumber":58,"author":{"gitId":"atyhamos"},"content":"     * @return The LocalDateTime representation.","lastModifiedDate":"2021-08-23"},{"lineNumber":59,"author":{"gitId":"atyhamos"},"content":"     * @throws DuchessException Exception thrown when an incorrect format is used for Deadline.","lastModifiedDate":"2021-08-23"},{"lineNumber":60,"author":{"gitId":"atyhamos"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":61,"author":{"gitId":"atyhamos"},"content":"    public static LocalDateTime convertStringToDate (String by) throws DuchessException {","lastModifiedDate":"2021-08-23"},{"lineNumber":62,"author":{"gitId":"atyhamos"},"content":"        try {","lastModifiedDate":"2021-08-23"},{"lineNumber":63,"author":{"gitId":"atyhamos"},"content":"            String replacement \u003d by.replace(\"am\", \"AM\").replace(\"pm\",\"PM\");","lastModifiedDate":"2021-08-23"},{"lineNumber":64,"author":{"gitId":"atyhamos"},"content":"            System.out.println(replacement);","lastModifiedDate":"2021-08-23"},{"lineNumber":65,"author":{"gitId":"atyhamos"},"content":"            return LocalDateTime.parse(replacement,","lastModifiedDate":"2021-08-23"},{"lineNumber":66,"author":{"gitId":"atyhamos"},"content":"                    replacement.contains(\":\") ? DATE_MINUTES_FORMATTER : DATE_FORMATTER);","lastModifiedDate":"2021-08-23"},{"lineNumber":67,"author":{"gitId":"atyhamos"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":68,"author":{"gitId":"atyhamos"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-23"},{"lineNumber":69,"author":{"gitId":"atyhamos"},"content":"            throw new DuchessException(\"Wrong format used.\");","lastModifiedDate":"2021-08-23"},{"lineNumber":70,"author":{"gitId":"atyhamos"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":71,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":72,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":73,"author":{"gitId":"atyhamos"},"content":"    public LocalDateTime getDateTime(){","lastModifiedDate":"2021-08-23"},{"lineNumber":74,"author":{"gitId":"atyhamos"},"content":"        return this.by;","lastModifiedDate":"2021-08-23"},{"lineNumber":75,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":76,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":77,"author":{"gitId":"atyhamos"},"content":"\u003e\u003e\u003e\u003e\u003e\u003e\u003e branch-Level-8","lastModifiedDate":"2021-08-23"},{"lineNumber":78,"author":{"gitId":"atyhamos"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":79,"author":{"gitId":"atyhamos"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":80,"author":{"gitId":"atyhamos"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + PRINT_DATE_FORMATTER.format(by)+ \")\";","lastModifiedDate":"2021-08-23"},{"lineNumber":81,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":82,"author":{"gitId":"atyhamos"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"atyhamos":82}},{"path":"src/main/java/Duchess.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"atyhamos"},"content":"\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"atyhamos"},"content":"import java.io.File;","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"atyhamos"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"atyhamos"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"atyhamos"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"atyhamos"},"content":"\u003e\u003e\u003e\u003e\u003e\u003e\u003e branch-Level-8","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"atyhamos"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"atyhamos"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"atyhamos"},"content":"/**","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"atyhamos"},"content":" * This class implements a Duke Chatbot variant: Duchess","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"atyhamos"},"content":" *","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"atyhamos"},"content":" * @author Amos Tan","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"atyhamos"},"content":" * @version CS2103T AY21/22 Semester 1","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"atyhamos"},"content":" */","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"atyhamos"},"content":"public class Duchess {","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"atyhamos"},"content":"    /** The horizontal bars to add style in the output.*/","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"atyhamos"},"content":"    private static final String HORIZONTAL_BARS \u003d \"\\n____________________________________________________________\\n\";","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"atyhamos"},"content":"    /** The duchessList which holds the string stored by the user.*/","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"atyhamos"},"content":"    private DuchessList duchessList;","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"atyhamos"},"content":"    /** The home of the user to search for existing Duchess.*/","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"atyhamos"},"content":"    private static final String DATA_FOLDER \u003d \"data\";","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"atyhamos"},"content":"    private static final String FILE_LOCATION \u003d \"data/duchess.txt\";","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":26,"author":{"gitId":"atyhamos"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":27,"author":{"gitId":"atyhamos"},"content":"     * The commands recognised by Duchess.","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"atyhamos"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":29,"author":{"gitId":"atyhamos"},"content":"    private enum Command {","lastModifiedDate":"2021-08-19"},{"lineNumber":30,"author":{"gitId":"atyhamos"},"content":"        BYE (\"bye\"),","lastModifiedDate":"2021-08-19"},{"lineNumber":31,"author":{"gitId":"atyhamos"},"content":"        LIST (\"list\"),","lastModifiedDate":"2021-08-19"},{"lineNumber":32,"author":{"gitId":"atyhamos"},"content":"        DONE (\"done\"),","lastModifiedDate":"2021-08-19"},{"lineNumber":33,"author":{"gitId":"atyhamos"},"content":"        TODO (\"todo\"),","lastModifiedDate":"2021-08-19"},{"lineNumber":34,"author":{"gitId":"atyhamos"},"content":"        DEADLINE (\"deadline\"),","lastModifiedDate":"2021-08-19"},{"lineNumber":35,"author":{"gitId":"atyhamos"},"content":"        EVENT (\"event\"),","lastModifiedDate":"2021-08-19"},{"lineNumber":36,"author":{"gitId":"atyhamos"},"content":"        DELETE (\"delete\"),","lastModifiedDate":"2021-08-19"},{"lineNumber":37,"author":{"gitId":"atyhamos"},"content":"        TASKS (\"tasks\"),","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"atyhamos"},"content":"        INVALID (null);","lastModifiedDate":"2021-08-19"},{"lineNumber":39,"author":{"gitId":"atyhamos"},"content":"        private String commandName;","lastModifiedDate":"2021-08-19"},{"lineNumber":40,"author":{"gitId":"atyhamos"},"content":"        Command(String commandName) {","lastModifiedDate":"2021-08-19"},{"lineNumber":41,"author":{"gitId":"atyhamos"},"content":"            this.commandName \u003d commandName;","lastModifiedDate":"2021-08-19"},{"lineNumber":42,"author":{"gitId":"atyhamos"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":43,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":44,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":45,"author":{"gitId":"atyhamos"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":46,"author":{"gitId":"atyhamos"},"content":"     * Constructs a Duchess object.","lastModifiedDate":"2021-08-23"},{"lineNumber":47,"author":{"gitId":"atyhamos"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":48,"author":{"gitId":"atyhamos"},"content":"    public Duchess()","lastModifiedDate":"2021-08-18"},{"lineNumber":49,"author":{"gitId":"atyhamos"},"content":"    {","lastModifiedDate":"2021-08-18"},{"lineNumber":50,"author":{"gitId":"atyhamos"},"content":"        // Solution below adapted from https://www.w3schools.com/java/java_files_create.asp","lastModifiedDate":"2021-08-23"},{"lineNumber":51,"author":{"gitId":"atyhamos"},"content":"        try {","lastModifiedDate":"2021-08-23"},{"lineNumber":52,"author":{"gitId":"atyhamos"},"content":"            File savedDuchess \u003d new File(FILE_LOCATION);","lastModifiedDate":"2021-08-23"},{"lineNumber":53,"author":{"gitId":"atyhamos"},"content":"            DuchessFileHandler.savedDuchess \u003d savedDuchess;","lastModifiedDate":"2021-08-23"},{"lineNumber":54,"author":{"gitId":"atyhamos"},"content":"            if (savedDuchess.createNewFile()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":55,"author":{"gitId":"atyhamos"},"content":"                System.out.println(\"File created: \" + savedDuchess.getName());","lastModifiedDate":"2021-08-23"},{"lineNumber":56,"author":{"gitId":"atyhamos"},"content":"                duchessList \u003d new DuchessList();","lastModifiedDate":"2021-08-18"},{"lineNumber":57,"author":{"gitId":"atyhamos"},"content":"            }","lastModifiedDate":"2021-08-18"},{"lineNumber":58,"author":{"gitId":"atyhamos"},"content":"            else {","lastModifiedDate":"2021-08-23"},{"lineNumber":59,"author":{"gitId":"atyhamos"},"content":"                duchessList \u003d DuchessFileHandler.extractListFromFile(savedDuchess);","lastModifiedDate":"2021-08-23"},{"lineNumber":60,"author":{"gitId":"atyhamos"},"content":"                System.out.println(\"Found saved duchess file!\");","lastModifiedDate":"2021-08-23"},{"lineNumber":61,"author":{"gitId":"atyhamos"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":62,"author":{"gitId":"atyhamos"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":63,"author":{"gitId":"atyhamos"},"content":"            // Directory does not exist","lastModifiedDate":"2021-08-23"},{"lineNumber":64,"author":{"gitId":"atyhamos"},"content":"            System.out.println(\"Directory does not exist, creating one now.\");","lastModifiedDate":"2021-08-23"},{"lineNumber":65,"author":{"gitId":"atyhamos"},"content":"            File dir \u003d new File(DATA_FOLDER);","lastModifiedDate":"2021-08-23"},{"lineNumber":66,"author":{"gitId":"atyhamos"},"content":"            if (!dir.exists())","lastModifiedDate":"2021-08-23"},{"lineNumber":67,"author":{"gitId":"atyhamos"},"content":"                dir.mkdir();","lastModifiedDate":"2021-08-23"},{"lineNumber":68,"author":{"gitId":"atyhamos"},"content":"            File newDuchess \u003d new File(FILE_LOCATION);","lastModifiedDate":"2021-08-23"},{"lineNumber":69,"author":{"gitId":"atyhamos"},"content":"            DuchessFileHandler.savedDuchess \u003d newDuchess;","lastModifiedDate":"2021-08-23"},{"lineNumber":70,"author":{"gitId":"atyhamos"},"content":"            duchessList \u003d new DuchessList();","lastModifiedDate":"2021-08-23"},{"lineNumber":71,"author":{"gitId":"atyhamos"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":72,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":73,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":74,"author":{"gitId":"atyhamos"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-18"},{"lineNumber":75,"author":{"gitId":"atyhamos"},"content":"        Duchess duchess \u003d new Duchess();","lastModifiedDate":"2021-08-18"},{"lineNumber":76,"author":{"gitId":"atyhamos"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-18"},{"lineNumber":77,"author":{"gitId":"atyhamos"},"content":"        String name \u003d \"Duchess\";","lastModifiedDate":"2021-08-18"},{"lineNumber":78,"author":{"gitId":"atyhamos"},"content":"        prettyPrint(\"Good day. I am \" + name + \"\\nWhat can I do for you?\");","lastModifiedDate":"2021-08-18"},{"lineNumber":79,"author":{"gitId":"atyhamos"},"content":"        duchess.handleInput(sc);","lastModifiedDate":"2021-08-18"},{"lineNumber":80,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":81,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":82,"author":{"gitId":"atyhamos"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":83,"author":{"gitId":"atyhamos"},"content":"     * Prints to System.out fancily including horizontal bars ontop and bottom.","lastModifiedDate":"2021-08-23"},{"lineNumber":84,"author":{"gitId":"atyhamos"},"content":"     * @param input String to be printed fancily.","lastModifiedDate":"2021-08-23"},{"lineNumber":85,"author":{"gitId":"atyhamos"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":86,"author":{"gitId":"atyhamos"},"content":"    public static void prettyPrint(String input)","lastModifiedDate":"2021-08-18"},{"lineNumber":87,"author":{"gitId":"atyhamos"},"content":"    {","lastModifiedDate":"2021-08-18"},{"lineNumber":88,"author":{"gitId":"atyhamos"},"content":"        System.out.println(HORIZONTAL_BARS + input + HORIZONTAL_BARS);","lastModifiedDate":"2021-08-18"},{"lineNumber":89,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":90,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":91,"author":{"gitId":"atyhamos"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":92,"author":{"gitId":"atyhamos"},"content":"     * Gets input from user and PrettyPrints the corresponding response.","lastModifiedDate":"2021-08-23"},{"lineNumber":93,"author":{"gitId":"atyhamos"},"content":"     * @param sc Scanner to be reused.","lastModifiedDate":"2021-08-23"},{"lineNumber":94,"author":{"gitId":"atyhamos"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":95,"author":{"gitId":"atyhamos"},"content":"    public void handleInput(Scanner sc)","lastModifiedDate":"2021-08-18"},{"lineNumber":96,"author":{"gitId":"atyhamos"},"content":"    {","lastModifiedDate":"2021-08-18"},{"lineNumber":97,"author":{"gitId":"atyhamos"},"content":"        String input \u003d sc.nextLine();","lastModifiedDate":"2021-08-18"},{"lineNumber":98,"author":{"gitId":"atyhamos"},"content":"        try {","lastModifiedDate":"2021-08-18"},{"lineNumber":99,"author":{"gitId":"atyhamos"},"content":"            Command c \u003d checkPrefix(input);","lastModifiedDate":"2021-08-19"},{"lineNumber":100,"author":{"gitId":"atyhamos"},"content":"            switch (c) {","lastModifiedDate":"2021-08-19"},{"lineNumber":101,"author":{"gitId":"atyhamos"},"content":"            case BYE:","lastModifiedDate":"2021-08-19"},{"lineNumber":102,"author":{"gitId":"atyhamos"},"content":"\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD","lastModifiedDate":"2021-08-23"},{"lineNumber":103,"author":{"gitId":"atyhamos"},"content":"                prettyPrint(\"I bid thee farewell.\");","lastModifiedDate":"2021-08-19"},{"lineNumber":104,"author":{"gitId":"atyhamos"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-08-23"},{"lineNumber":105,"author":{"gitId":"atyhamos"},"content":"               prettyPrint(\"I bid thee farewell.\");","lastModifiedDate":"2021-08-23"},{"lineNumber":106,"author":{"gitId":"atyhamos"},"content":"\u003e\u003e\u003e\u003e\u003e\u003e\u003e branch-Level-8","lastModifiedDate":"2021-08-23"},{"lineNumber":107,"author":{"gitId":"atyhamos"},"content":"                return; // stop prompting user input","lastModifiedDate":"2021-08-19"},{"lineNumber":108,"author":{"gitId":"atyhamos"},"content":"            case LIST:","lastModifiedDate":"2021-08-19"},{"lineNumber":109,"author":{"gitId":"atyhamos"},"content":"                prettyPrint(duchessList.printList());","lastModifiedDate":"2021-08-18"},{"lineNumber":110,"author":{"gitId":"atyhamos"},"content":"                break;","lastModifiedDate":"2021-08-19"},{"lineNumber":111,"author":{"gitId":"atyhamos"},"content":"            case DONE:","lastModifiedDate":"2021-08-19"},{"lineNumber":112,"author":{"gitId":"atyhamos"},"content":"                handleDone(input);","lastModifiedDate":"2021-08-18"},{"lineNumber":113,"author":{"gitId":"atyhamos"},"content":"\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD","lastModifiedDate":"2021-08-23"},{"lineNumber":114,"author":{"gitId":"atyhamos"},"content":"                DuchessFileHandler.writeToFile(duchessList);","lastModifiedDate":"2021-08-23"},{"lineNumber":115,"author":{"gitId":"atyhamos"},"content":"                break;","lastModifiedDate":"2021-08-19"},{"lineNumber":116,"author":{"gitId":"atyhamos"},"content":"            case TODO:","lastModifiedDate":"2021-08-19"},{"lineNumber":117,"author":{"gitId":"atyhamos"},"content":"                handleTodo(input);","lastModifiedDate":"2021-08-18"},{"lineNumber":118,"author":{"gitId":"atyhamos"},"content":"                DuchessFileHandler.writeToFile(duchessList);","lastModifiedDate":"2021-08-23"},{"lineNumber":119,"author":{"gitId":"atyhamos"},"content":"                break;","lastModifiedDate":"2021-08-19"},{"lineNumber":120,"author":{"gitId":"atyhamos"},"content":"            case DEADLINE:","lastModifiedDate":"2021-08-19"},{"lineNumber":121,"author":{"gitId":"atyhamos"},"content":"                handleDeadline(input);","lastModifiedDate":"2021-08-18"},{"lineNumber":122,"author":{"gitId":"atyhamos"},"content":"                DuchessFileHandler.writeToFile(duchessList);","lastModifiedDate":"2021-08-23"},{"lineNumber":123,"author":{"gitId":"atyhamos"},"content":"                break;","lastModifiedDate":"2021-08-19"},{"lineNumber":124,"author":{"gitId":"atyhamos"},"content":"            case EVENT:","lastModifiedDate":"2021-08-19"},{"lineNumber":125,"author":{"gitId":"atyhamos"},"content":"                handleEvent(input);","lastModifiedDate":"2021-08-18"},{"lineNumber":126,"author":{"gitId":"atyhamos"},"content":"                DuchessFileHandler.writeToFile(duchessList);","lastModifiedDate":"2021-08-23"},{"lineNumber":127,"author":{"gitId":"atyhamos"},"content":"                break;","lastModifiedDate":"2021-08-19"},{"lineNumber":128,"author":{"gitId":"atyhamos"},"content":"            case DELETE:","lastModifiedDate":"2021-08-19"},{"lineNumber":129,"author":{"gitId":"atyhamos"},"content":"                handleDelete(input);","lastModifiedDate":"2021-08-19"},{"lineNumber":130,"author":{"gitId":"atyhamos"},"content":"                DuchessFileHandler.writeToFile(duchessList);","lastModifiedDate":"2021-08-23"},{"lineNumber":131,"author":{"gitId":"atyhamos"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-08-23"},{"lineNumber":132,"author":{"gitId":"atyhamos"},"content":"                break;","lastModifiedDate":"2021-08-19"},{"lineNumber":133,"author":{"gitId":"atyhamos"},"content":"            case TODO:","lastModifiedDate":"2021-08-19"},{"lineNumber":134,"author":{"gitId":"atyhamos"},"content":"                handleTodo(input);","lastModifiedDate":"2021-08-18"},{"lineNumber":135,"author":{"gitId":"atyhamos"},"content":"                break;","lastModifiedDate":"2021-08-19"},{"lineNumber":136,"author":{"gitId":"atyhamos"},"content":"            case DEADLINE:","lastModifiedDate":"2021-08-19"},{"lineNumber":137,"author":{"gitId":"atyhamos"},"content":"                handleDeadline(input);","lastModifiedDate":"2021-08-18"},{"lineNumber":138,"author":{"gitId":"atyhamos"},"content":"                break;","lastModifiedDate":"2021-08-19"},{"lineNumber":139,"author":{"gitId":"atyhamos"},"content":"            case EVENT:","lastModifiedDate":"2021-08-19"},{"lineNumber":140,"author":{"gitId":"atyhamos"},"content":"                    handleEvent(input);","lastModifiedDate":"2021-08-18"},{"lineNumber":141,"author":{"gitId":"atyhamos"},"content":"                break;","lastModifiedDate":"2021-08-19"},{"lineNumber":142,"author":{"gitId":"atyhamos"},"content":"            case DELETE:","lastModifiedDate":"2021-08-19"},{"lineNumber":143,"author":{"gitId":"atyhamos"},"content":"                handleDelete(input);","lastModifiedDate":"2021-08-19"},{"lineNumber":144,"author":{"gitId":"atyhamos"},"content":"                break;","lastModifiedDate":"2021-08-19"},{"lineNumber":145,"author":{"gitId":"atyhamos"},"content":"            case TASKS:","lastModifiedDate":"2021-08-23"},{"lineNumber":146,"author":{"gitId":"atyhamos"},"content":"                handleTasks(input);","lastModifiedDate":"2021-08-23"},{"lineNumber":147,"author":{"gitId":"atyhamos"},"content":"\u003e\u003e\u003e\u003e\u003e\u003e\u003e branch-Level-8","lastModifiedDate":"2021-08-23"},{"lineNumber":148,"author":{"gitId":"atyhamos"},"content":"                break;","lastModifiedDate":"2021-08-19"},{"lineNumber":149,"author":{"gitId":"atyhamos"},"content":"            case INVALID:","lastModifiedDate":"2021-08-19"},{"lineNumber":150,"author":{"gitId":"atyhamos"},"content":"                printError();","lastModifiedDate":"2021-08-18"},{"lineNumber":151,"author":{"gitId":"atyhamos"},"content":"                break;","lastModifiedDate":"2021-08-19"},{"lineNumber":152,"author":{"gitId":"atyhamos"},"content":"            }","lastModifiedDate":"2021-08-19"},{"lineNumber":153,"author":{"gitId":"atyhamos"},"content":"        } catch (DuchessException d) {","lastModifiedDate":"2021-08-18"},{"lineNumber":154,"author":{"gitId":"atyhamos"},"content":"            prettyPrint(d.getMessage());","lastModifiedDate":"2021-08-18"},{"lineNumber":155,"author":{"gitId":"atyhamos"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":156,"author":{"gitId":"atyhamos"},"content":"        // Continue to read for inputs unless \"bye\" is called","lastModifiedDate":"2021-08-18"},{"lineNumber":157,"author":{"gitId":"atyhamos"},"content":"        handleInput(sc);","lastModifiedDate":"2021-08-18"},{"lineNumber":158,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":159,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":160,"author":{"gitId":"atyhamos"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":161,"author":{"gitId":"atyhamos"},"content":"     * Handles the logic for marking a task as done.","lastModifiedDate":"2021-08-23"},{"lineNumber":162,"author":{"gitId":"atyhamos"},"content":"     * @param input The user given input.","lastModifiedDate":"2021-08-23"},{"lineNumber":163,"author":{"gitId":"atyhamos"},"content":"     * @throws DuchessException Exception thrown when input does not match the done format.","lastModifiedDate":"2021-08-23"},{"lineNumber":164,"author":{"gitId":"atyhamos"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":165,"author":{"gitId":"atyhamos"},"content":"    public void handleDone(String input) throws DuchessException {","lastModifiedDate":"2021-08-18"},{"lineNumber":166,"author":{"gitId":"atyhamos"},"content":"        String index \u003d input.split(\" \", 2)[1];","lastModifiedDate":"2021-08-18"},{"lineNumber":167,"author":{"gitId":"atyhamos"},"content":"        // Parsing a non-numeric string will throw a NumberFormatException","lastModifiedDate":"2021-08-18"},{"lineNumber":168,"author":{"gitId":"atyhamos"},"content":"        try {","lastModifiedDate":"2021-08-18"},{"lineNumber":169,"author":{"gitId":"atyhamos"},"content":"            if (duchessList.checkWithinRange(Integer.parseInt(index))) {","lastModifiedDate":"2021-08-18"},{"lineNumber":170,"author":{"gitId":"atyhamos"},"content":"                // Valid done task","lastModifiedDate":"2021-08-18"},{"lineNumber":171,"author":{"gitId":"atyhamos"},"content":"                Task task \u003d duchessList.getTask(Integer.parseInt(index));","lastModifiedDate":"2021-08-18"},{"lineNumber":172,"author":{"gitId":"atyhamos"},"content":"                if (task.isDone)","lastModifiedDate":"2021-08-18"},{"lineNumber":173,"author":{"gitId":"atyhamos"},"content":"                    throw new DuchessException(\"Oops... This task is already done.\");","lastModifiedDate":"2021-08-18"},{"lineNumber":174,"author":{"gitId":"atyhamos"},"content":"                task.setDone(true);","lastModifiedDate":"2021-08-18"},{"lineNumber":175,"author":{"gitId":"atyhamos"},"content":"                prettyPrint(\"Brilliant! I\u0027ve marked this task as done:   \\n  \" + task);","lastModifiedDate":"2021-08-18"},{"lineNumber":176,"author":{"gitId":"atyhamos"},"content":"            } else {","lastModifiedDate":"2021-08-18"},{"lineNumber":177,"author":{"gitId":"atyhamos"},"content":"                // \"done\" followed by an integer outside of range of the list","lastModifiedDate":"2021-08-18"},{"lineNumber":178,"author":{"gitId":"atyhamos"},"content":"                throw new DuchessException(\"Apologies, that task does not exist and cannot be marked as done.\");","lastModifiedDate":"2021-08-18"},{"lineNumber":179,"author":{"gitId":"atyhamos"},"content":"            }","lastModifiedDate":"2021-08-18"},{"lineNumber":180,"author":{"gitId":"atyhamos"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-08-18"},{"lineNumber":181,"author":{"gitId":"atyhamos"},"content":"            // \"done\" followed by an invalid non-integer string input","lastModifiedDate":"2021-08-18"},{"lineNumber":182,"author":{"gitId":"atyhamos"},"content":"            throw new DuchessException(\"The command \\\"done\\\" should be followed by an integer.\");","lastModifiedDate":"2021-08-18"},{"lineNumber":183,"author":{"gitId":"atyhamos"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":184,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":185,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":186,"author":{"gitId":"atyhamos"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":187,"author":{"gitId":"atyhamos"},"content":"     * Handles the logic for checking and creating ToDo tasks.","lastModifiedDate":"2021-08-23"},{"lineNumber":188,"author":{"gitId":"atyhamos"},"content":"     * @param input The user given input.","lastModifiedDate":"2021-08-23"},{"lineNumber":189,"author":{"gitId":"atyhamos"},"content":"     * @throws DuchessException Exception thrown when input does not match the todo format.","lastModifiedDate":"2021-08-23"},{"lineNumber":190,"author":{"gitId":"atyhamos"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":191,"author":{"gitId":"atyhamos"},"content":"    public void handleTodo(String input) {","lastModifiedDate":"2021-08-18"},{"lineNumber":192,"author":{"gitId":"atyhamos"},"content":"        String task \u003d input.split(\" \", 2)[1];","lastModifiedDate":"2021-08-18"},{"lineNumber":193,"author":{"gitId":"atyhamos"},"content":"        // Valid input","lastModifiedDate":"2021-08-18"},{"lineNumber":194,"author":{"gitId":"atyhamos"},"content":"        ToDo todo \u003d new ToDo(task);","lastModifiedDate":"2021-08-18"},{"lineNumber":195,"author":{"gitId":"atyhamos"},"content":"        duchessList.add(todo);","lastModifiedDate":"2021-08-18"},{"lineNumber":196,"author":{"gitId":"atyhamos"},"content":"        int listSize \u003d duchessList.getSize();","lastModifiedDate":"2021-08-18"},{"lineNumber":197,"author":{"gitId":"atyhamos"},"content":"        prettyPrint(\"Understood. I\u0027ve added this task:\\n    \" + todo","lastModifiedDate":"2021-08-18"},{"lineNumber":198,"author":{"gitId":"atyhamos"},"content":"                + \"\\nYou now have \" + listSize","lastModifiedDate":"2021-08-18"},{"lineNumber":199,"author":{"gitId":"atyhamos"},"content":"                    + (listSize \u003e 1 ? \" tasks in the list.\" : \" task in the list.\"));","lastModifiedDate":"2021-08-18"},{"lineNumber":200,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":201,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":202,"author":{"gitId":"atyhamos"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":203,"author":{"gitId":"atyhamos"},"content":"     * Handles the logic for checking and creating Deadline tasks.","lastModifiedDate":"2021-08-23"},{"lineNumber":204,"author":{"gitId":"atyhamos"},"content":"     * @param input The user given input.","lastModifiedDate":"2021-08-23"},{"lineNumber":205,"author":{"gitId":"atyhamos"},"content":"     * @throws DuchessException Exception thrown when input does not match the deadline format.","lastModifiedDate":"2021-08-23"},{"lineNumber":206,"author":{"gitId":"atyhamos"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":207,"author":{"gitId":"atyhamos"},"content":"    public void handleDeadline(String input) throws DuchessException {","lastModifiedDate":"2021-08-18"},{"lineNumber":208,"author":{"gitId":"atyhamos"},"content":"        String invalidMessage \u003d \"The command \\\"deadline\\\" should be followed by \" +","lastModifiedDate":"2021-08-18"},{"lineNumber":209,"author":{"gitId":"atyhamos"},"content":"                \"a task and a date and time, e.g (read book /by 11/10/2019 4pm).\";","lastModifiedDate":"2021-08-23"},{"lineNumber":210,"author":{"gitId":"atyhamos"},"content":"        String taskAndBy \u003d input.split(\" \", 2)[1];","lastModifiedDate":"2021-08-18"},{"lineNumber":211,"author":{"gitId":"atyhamos"},"content":"        if (!taskAndBy.contains(\" /by \"))","lastModifiedDate":"2021-08-18"},{"lineNumber":212,"author":{"gitId":"atyhamos"},"content":"            throw new DuchessException(invalidMessage);","lastModifiedDate":"2021-08-18"},{"lineNumber":213,"author":{"gitId":"atyhamos"},"content":"        String[] taskParts \u003d taskAndBy.split(\" /by \", 2);","lastModifiedDate":"2021-08-18"},{"lineNumber":214,"author":{"gitId":"atyhamos"},"content":"        String checkTask \u003d taskParts[0];","lastModifiedDate":"2021-08-18"},{"lineNumber":215,"author":{"gitId":"atyhamos"},"content":"        String checkBy \u003d taskParts[1];","lastModifiedDate":"2021-08-18"},{"lineNumber":216,"author":{"gitId":"atyhamos"},"content":"        if (checkBy.equals(\"\"))","lastModifiedDate":"2021-08-18"},{"lineNumber":217,"author":{"gitId":"atyhamos"},"content":"            throw new DuchessException(invalidMessage);","lastModifiedDate":"2021-08-18"},{"lineNumber":218,"author":{"gitId":"atyhamos"},"content":"        // Valid input","lastModifiedDate":"2021-08-18"},{"lineNumber":219,"author":{"gitId":"atyhamos"},"content":"        Deadline deadline \u003d new Deadline(checkTask, Deadline.convertStringToDate(checkBy));","lastModifiedDate":"2021-08-23"},{"lineNumber":220,"author":{"gitId":"atyhamos"},"content":"        duchessList.add(deadline);","lastModifiedDate":"2021-08-18"},{"lineNumber":221,"author":{"gitId":"atyhamos"},"content":"        int listSize \u003d duchessList.getSize();","lastModifiedDate":"2021-08-18"},{"lineNumber":222,"author":{"gitId":"atyhamos"},"content":"        prettyPrint(\"Understood. I\u0027ve added this task:\\n    \" + deadline","lastModifiedDate":"2021-08-18"},{"lineNumber":223,"author":{"gitId":"atyhamos"},"content":"                + \"\\nYou now have \" + listSize","lastModifiedDate":"2021-08-18"},{"lineNumber":224,"author":{"gitId":"atyhamos"},"content":"                + (listSize \u003e 1 ? \" tasks in the list.\" : \" task in the list.\"));","lastModifiedDate":"2021-08-18"},{"lineNumber":225,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":226,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":227,"author":{"gitId":"atyhamos"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":228,"author":{"gitId":"atyhamos"},"content":"     * Handles the logic for checking and creating Event tasks.","lastModifiedDate":"2021-08-23"},{"lineNumber":229,"author":{"gitId":"atyhamos"},"content":"     * @param input The user given input.","lastModifiedDate":"2021-08-23"},{"lineNumber":230,"author":{"gitId":"atyhamos"},"content":"     * @throws DuchessException Exception thrown when input does not match the event format.","lastModifiedDate":"2021-08-23"},{"lineNumber":231,"author":{"gitId":"atyhamos"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":232,"author":{"gitId":"atyhamos"},"content":"    public void handleEvent(String input) throws DuchessException {","lastModifiedDate":"2021-08-18"},{"lineNumber":233,"author":{"gitId":"atyhamos"},"content":"        String invalidMessage \u003d \"The command \\\"event\\\" should be followed by \" +","lastModifiedDate":"2021-08-18"},{"lineNumber":234,"author":{"gitId":"atyhamos"},"content":"                \"a task and a date and time, e.g (meeting /at 2/10/2019 2pm-4pm).\";","lastModifiedDate":"2021-08-23"},{"lineNumber":235,"author":{"gitId":"atyhamos"},"content":"        String taskAndDuration \u003d input.split(\" \", 2)[1];","lastModifiedDate":"2021-08-18"},{"lineNumber":236,"author":{"gitId":"atyhamos"},"content":"        if (!taskAndDuration.contains(\" /at \"))","lastModifiedDate":"2021-08-18"},{"lineNumber":237,"author":{"gitId":"atyhamos"},"content":"            throw new DuchessException(invalidMessage);","lastModifiedDate":"2021-08-18"},{"lineNumber":238,"author":{"gitId":"atyhamos"},"content":"        String[] taskParts \u003d taskAndDuration.split(\" /at \", 2);","lastModifiedDate":"2021-08-18"},{"lineNumber":239,"author":{"gitId":"atyhamos"},"content":"        String task \u003d taskParts[0];","lastModifiedDate":"2021-08-18"},{"lineNumber":240,"author":{"gitId":"atyhamos"},"content":"        String time \u003d taskParts[1];","lastModifiedDate":"2021-08-18"},{"lineNumber":241,"author":{"gitId":"atyhamos"},"content":"        if (!time.contains(\" \"))","lastModifiedDate":"2021-08-18"},{"lineNumber":242,"author":{"gitId":"atyhamos"},"content":"            throw new DuchessException(invalidMessage);","lastModifiedDate":"2021-08-18"},{"lineNumber":243,"author":{"gitId":"atyhamos"},"content":"        String[] timeParts \u003d time.split(\" \", 2);","lastModifiedDate":"2021-08-18"},{"lineNumber":244,"author":{"gitId":"atyhamos"},"content":"        String day \u003d timeParts[0];","lastModifiedDate":"2021-08-18"},{"lineNumber":245,"author":{"gitId":"atyhamos"},"content":"        String duration \u003d timeParts[1];","lastModifiedDate":"2021-08-18"},{"lineNumber":246,"author":{"gitId":"atyhamos"},"content":"        if (!duration.contains(\"-\"))","lastModifiedDate":"2021-08-18"},{"lineNumber":247,"author":{"gitId":"atyhamos"},"content":"            throw new DuchessException(invalidMessage);","lastModifiedDate":"2021-08-18"},{"lineNumber":248,"author":{"gitId":"atyhamos"},"content":"        // Valid input","lastModifiedDate":"2021-08-18"},{"lineNumber":249,"author":{"gitId":"atyhamos"},"content":"        LocalDateTime[] events \u003d Event.convertStringToDate(day, duration);","lastModifiedDate":"2021-08-23"},{"lineNumber":250,"author":{"gitId":"atyhamos"},"content":"        Event event \u003d new Event(task, events[0], events[1]);","lastModifiedDate":"2021-08-23"},{"lineNumber":251,"author":{"gitId":"atyhamos"},"content":"        duchessList.add(event);","lastModifiedDate":"2021-08-18"},{"lineNumber":252,"author":{"gitId":"atyhamos"},"content":"        int listSize \u003d duchessList.getSize();","lastModifiedDate":"2021-08-18"},{"lineNumber":253,"author":{"gitId":"atyhamos"},"content":"        prettyPrint(\"Understood. I\u0027ve added this task:\\n    \" + event","lastModifiedDate":"2021-08-18"},{"lineNumber":254,"author":{"gitId":"atyhamos"},"content":"                + \"\\nYou now have \" + listSize","lastModifiedDate":"2021-08-18"},{"lineNumber":255,"author":{"gitId":"atyhamos"},"content":"                + (listSize \u003e 1 ? \" tasks in the list.\" : \" task in the list.\"));","lastModifiedDate":"2021-08-18"},{"lineNumber":256,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":257,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":258,"author":{"gitId":"atyhamos"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":259,"author":{"gitId":"atyhamos"},"content":"     * Handles the logic fpr checking and deleting tasks.","lastModifiedDate":"2021-08-23"},{"lineNumber":260,"author":{"gitId":"atyhamos"},"content":"     * @param input The user given input.","lastModifiedDate":"2021-08-23"},{"lineNumber":261,"author":{"gitId":"atyhamos"},"content":"     * @throws DuchessException Exception thrown when input does not match the deletion format.","lastModifiedDate":"2021-08-23"},{"lineNumber":262,"author":{"gitId":"atyhamos"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":263,"author":{"gitId":"atyhamos"},"content":"    public void handleDelete(String input) throws DuchessException {","lastModifiedDate":"2021-08-19"},{"lineNumber":264,"author":{"gitId":"atyhamos"},"content":"        String index \u003d input.split(\" \", 2)[1];","lastModifiedDate":"2021-08-19"},{"lineNumber":265,"author":{"gitId":"atyhamos"},"content":"        // Parsing a non-numeric string will throw a NumberFormatException","lastModifiedDate":"2021-08-19"},{"lineNumber":266,"author":{"gitId":"atyhamos"},"content":"        try {","lastModifiedDate":"2021-08-19"},{"lineNumber":267,"author":{"gitId":"atyhamos"},"content":"            if (duchessList.checkWithinRange(Integer.parseInt(index))) {","lastModifiedDate":"2021-08-19"},{"lineNumber":268,"author":{"gitId":"atyhamos"},"content":"                // Valid delete task","lastModifiedDate":"2021-08-19"},{"lineNumber":269,"author":{"gitId":"atyhamos"},"content":"                Task deletedTask \u003d duchessList.delete(Integer.parseInt(index));","lastModifiedDate":"2021-08-19"},{"lineNumber":270,"author":{"gitId":"atyhamos"},"content":"                prettyPrint(\"Alright. I\u0027ve removed this task:   \\n  \" + deletedTask","lastModifiedDate":"2021-08-19"},{"lineNumber":271,"author":{"gitId":"atyhamos"},"content":"                    + \"\\nNow you have \" + duchessList.getSize() + \" tasks in the list.\");","lastModifiedDate":"2021-08-19"},{"lineNumber":272,"author":{"gitId":"atyhamos"},"content":"            } else {","lastModifiedDate":"2021-08-19"},{"lineNumber":273,"author":{"gitId":"atyhamos"},"content":"                // \"delete\" followed by an integer outside of range of the list","lastModifiedDate":"2021-08-19"},{"lineNumber":274,"author":{"gitId":"atyhamos"},"content":"                throw new DuchessException(\"Apologies, that task does not exist and cannot be deleted.\");","lastModifiedDate":"2021-08-19"},{"lineNumber":275,"author":{"gitId":"atyhamos"},"content":"            }","lastModifiedDate":"2021-08-19"},{"lineNumber":276,"author":{"gitId":"atyhamos"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-08-19"},{"lineNumber":277,"author":{"gitId":"atyhamos"},"content":"            // \"delete\" followed by an invalid non-integer string input","lastModifiedDate":"2021-08-19"},{"lineNumber":278,"author":{"gitId":"atyhamos"},"content":"            throw new DuchessException(\"The command \\\"delete\\\" should be followed by an integer.\");","lastModifiedDate":"2021-08-19"},{"lineNumber":279,"author":{"gitId":"atyhamos"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":280,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":281,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":282,"author":{"gitId":"atyhamos"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":283,"author":{"gitId":"atyhamos"},"content":"\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD","lastModifiedDate":"2021-08-23"},{"lineNumber":284,"author":{"gitId":"atyhamos"},"content":"     * Prints a message given for invalid inputs.","lastModifiedDate":"2021-08-23"},{"lineNumber":285,"author":{"gitId":"atyhamos"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-08-23"},{"lineNumber":286,"author":{"gitId":"atyhamos"},"content":"     * Handles the logic for printing tasks that match a specified time.","lastModifiedDate":"2021-08-23"},{"lineNumber":287,"author":{"gitId":"atyhamos"},"content":"     * @param input The user given input.","lastModifiedDate":"2021-08-23"},{"lineNumber":288,"author":{"gitId":"atyhamos"},"content":"     * @throws DuchessException The exception thrown when input does not match the tasks format.","lastModifiedDate":"2021-08-23"},{"lineNumber":289,"author":{"gitId":"atyhamos"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":290,"author":{"gitId":"atyhamos"},"content":"    public void handleTasks(String input) throws DuchessException {","lastModifiedDate":"2021-08-23"},{"lineNumber":291,"author":{"gitId":"atyhamos"},"content":"        String invalidMessage \u003d \"The command \\\"tasks\\\" should be followed by \" +","lastModifiedDate":"2021-08-23"},{"lineNumber":292,"author":{"gitId":"atyhamos"},"content":"                \"a keyword \\\"/after\\\" or \\\"/before\\\", a date and/or a time (e.g before 2/10/2019 2pm\" +","lastModifiedDate":"2021-08-23"},{"lineNumber":293,"author":{"gitId":"atyhamos"},"content":"                \"or after today)\";","lastModifiedDate":"2021-08-23"},{"lineNumber":294,"author":{"gitId":"atyhamos"},"content":"        try {","lastModifiedDate":"2021-08-23"},{"lineNumber":295,"author":{"gitId":"atyhamos"},"content":"            String[] timeSplit \u003d input.substring(6).split(\" \", 2);","lastModifiedDate":"2021-08-23"},{"lineNumber":296,"author":{"gitId":"atyhamos"},"content":"            String keyword \u003d timeSplit[0];","lastModifiedDate":"2021-08-23"},{"lineNumber":297,"author":{"gitId":"atyhamos"},"content":"            String date \u003d timeSplit[1];","lastModifiedDate":"2021-08-23"},{"lineNumber":298,"author":{"gitId":"atyhamos"},"content":"            boolean isBefore \u003d false;","lastModifiedDate":"2021-08-23"},{"lineNumber":299,"author":{"gitId":"atyhamos"},"content":"            if (keyword.equals(\"/before\"))","lastModifiedDate":"2021-08-23"},{"lineNumber":300,"author":{"gitId":"atyhamos"},"content":"                isBefore \u003d true;","lastModifiedDate":"2021-08-23"},{"lineNumber":301,"author":{"gitId":"atyhamos"},"content":"            else if (keyword.equals(\"/after\"))","lastModifiedDate":"2021-08-23"},{"lineNumber":302,"author":{"gitId":"atyhamos"},"content":"                isBefore \u003d false;","lastModifiedDate":"2021-08-23"},{"lineNumber":303,"author":{"gitId":"atyhamos"},"content":"            else {","lastModifiedDate":"2021-08-23"},{"lineNumber":304,"author":{"gitId":"atyhamos"},"content":"                System.out.println(keyword + \"\\n\" + date);","lastModifiedDate":"2021-08-23"},{"lineNumber":305,"author":{"gitId":"atyhamos"},"content":"                throw new DuchessException(invalidMessage);","lastModifiedDate":"2021-08-23"},{"lineNumber":306,"author":{"gitId":"atyhamos"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":307,"author":{"gitId":"atyhamos"},"content":"            LocalDateTime dateTime \u003d date.equals(\"today\") ? LocalDateTime.now()","lastModifiedDate":"2021-08-23"},{"lineNumber":308,"author":{"gitId":"atyhamos"},"content":"                    : Deadline.convertStringToDate(date);","lastModifiedDate":"2021-08-23"},{"lineNumber":309,"author":{"gitId":"atyhamos"},"content":"            String tasksToPrint \u003d \"\";","lastModifiedDate":"2021-08-23"},{"lineNumber":310,"author":{"gitId":"atyhamos"},"content":"            for (int i \u003d 1; i \u003c duchessList.getSize() + 1; i++) {","lastModifiedDate":"2021-08-23"},{"lineNumber":311,"author":{"gitId":"atyhamos"},"content":"                Task t \u003d duchessList.getTask(i);","lastModifiedDate":"2021-08-23"},{"lineNumber":312,"author":{"gitId":"atyhamos"},"content":"                if (isBefore \u0026\u0026 t.getDateTime().isBefore(dateTime))","lastModifiedDate":"2021-08-23"},{"lineNumber":313,"author":{"gitId":"atyhamos"},"content":"                    tasksToPrint +\u003d t.toString() + \"\\n\";","lastModifiedDate":"2021-08-23"},{"lineNumber":314,"author":{"gitId":"atyhamos"},"content":"                else if (!isBefore \u0026\u0026 t.getDateTime().isAfter(dateTime))","lastModifiedDate":"2021-08-23"},{"lineNumber":315,"author":{"gitId":"atyhamos"},"content":"                    tasksToPrint +\u003d t.toString() + \"\\n\";","lastModifiedDate":"2021-08-23"},{"lineNumber":316,"author":{"gitId":"atyhamos"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":317,"author":{"gitId":"atyhamos"},"content":"            prettyPrint(tasksToPrint.isBlank() ? \"You have no tasks \" + keyword.substring(1) + \" \" + date","lastModifiedDate":"2021-08-23"},{"lineNumber":318,"author":{"gitId":"atyhamos"},"content":"                    : tasksToPrint);","lastModifiedDate":"2021-08-23"},{"lineNumber":319,"author":{"gitId":"atyhamos"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":320,"author":{"gitId":"atyhamos"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-23"},{"lineNumber":321,"author":{"gitId":"atyhamos"},"content":"            throw new DuchessException(invalidMessage);","lastModifiedDate":"2021-08-23"},{"lineNumber":322,"author":{"gitId":"atyhamos"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":323,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":324,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":325,"author":{"gitId":"atyhamos"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":326,"author":{"gitId":"atyhamos"},"content":"     * Prints a message given for invalid inputs","lastModifiedDate":"2021-08-18"},{"lineNumber":327,"author":{"gitId":"atyhamos"},"content":"\u003e\u003e\u003e\u003e\u003e\u003e\u003e branch-Level-8","lastModifiedDate":"2021-08-23"},{"lineNumber":328,"author":{"gitId":"atyhamos"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":329,"author":{"gitId":"atyhamos"},"content":"    public void printError()","lastModifiedDate":"2021-08-18"},{"lineNumber":330,"author":{"gitId":"atyhamos"},"content":"    {","lastModifiedDate":"2021-08-18"},{"lineNumber":331,"author":{"gitId":"atyhamos"},"content":"        prettyPrint(\"Apologies, I didn\u0027t catch that.\");","lastModifiedDate":"2021-08-18"},{"lineNumber":332,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":333,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":334,"author":{"gitId":"atyhamos"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":335,"author":{"gitId":"atyhamos"},"content":"     * Checks if a given string is present at the front of another string.","lastModifiedDate":"2021-08-23"},{"lineNumber":336,"author":{"gitId":"atyhamos"},"content":"     * @param input The string to be checked against.","lastModifiedDate":"2021-08-23"},{"lineNumber":337,"author":{"gitId":"atyhamos"},"content":"     * @throws DuchessException  Exception thrown when the prefix is preceded by an empty string.","lastModifiedDate":"2021-08-23"},{"lineNumber":338,"author":{"gitId":"atyhamos"},"content":"     * @return The prefix enum present at the front of the string.","lastModifiedDate":"2021-08-23"},{"lineNumber":339,"author":{"gitId":"atyhamos"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":340,"author":{"gitId":"atyhamos"},"content":"    public Command checkPrefix(String input) throws DuchessException {","lastModifiedDate":"2021-08-19"},{"lineNumber":341,"author":{"gitId":"atyhamos"},"content":"        String[] parts \u003d input.split(\" \", 2);","lastModifiedDate":"2021-08-18"},{"lineNumber":342,"author":{"gitId":"atyhamos"},"content":"        String front \u003d parts[0];","lastModifiedDate":"2021-08-18"},{"lineNumber":343,"author":{"gitId":"atyhamos"},"content":"        // Check if the prefix matches any command recognised by Duchess","lastModifiedDate":"2021-08-19"},{"lineNumber":344,"author":{"gitId":"atyhamos"},"content":"        for (Command c : Command.values()) {","lastModifiedDate":"2021-08-19"},{"lineNumber":345,"author":{"gitId":"atyhamos"},"content":"            if (front.equals(c.commandName))","lastModifiedDate":"2021-08-19"},{"lineNumber":346,"author":{"gitId":"atyhamos"},"content":"                try {","lastModifiedDate":"2021-08-18"},{"lineNumber":347,"author":{"gitId":"atyhamos"},"content":"                    if (front.equals(\"bye\") || front.equals(\"list\"))","lastModifiedDate":"2021-08-19"},{"lineNumber":348,"author":{"gitId":"atyhamos"},"content":"                        return c; // No need second argument","lastModifiedDate":"2021-08-19"},{"lineNumber":349,"author":{"gitId":"atyhamos"},"content":"                    String back \u003d parts[1]; // May throw ArrayIndexOutOfBoundsException","lastModifiedDate":"2021-08-19"},{"lineNumber":350,"author":{"gitId":"atyhamos"},"content":"                    if (back.isBlank()) // Second argument is only whitespaces","lastModifiedDate":"2021-08-19"},{"lineNumber":351,"author":{"gitId":"atyhamos"},"content":"                        throw new DuchessException(\"The description of \" + front + \" cannot be empty.\");","lastModifiedDate":"2021-08-19"},{"lineNumber":352,"author":{"gitId":"atyhamos"},"content":"                    return c;","lastModifiedDate":"2021-08-19"},{"lineNumber":353,"author":{"gitId":"atyhamos"},"content":"                } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-18"},{"lineNumber":354,"author":{"gitId":"atyhamos"},"content":"                    throw new DuchessException(\"The description of \" + front + \" cannot be empty.\");","lastModifiedDate":"2021-08-19"},{"lineNumber":355,"author":{"gitId":"atyhamos"},"content":"                }","lastModifiedDate":"2021-08-19"},{"lineNumber":356,"author":{"gitId":"atyhamos"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":357,"author":{"gitId":"atyhamos"},"content":"        // No command recognised","lastModifiedDate":"2021-08-19"},{"lineNumber":358,"author":{"gitId":"atyhamos"},"content":"        return Command.INVALID;","lastModifiedDate":"2021-08-19"},{"lineNumber":359,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":360,"author":{"gitId":"atyhamos"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"atyhamos":360}},{"path":"src/main/java/DuchessException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"atyhamos"},"content":"/**","lastModifiedDate":"2021-08-18"},{"lineNumber":2,"author":{"gitId":"atyhamos"},"content":" * This class implements a DuchessException to be thrown by Duchess","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"atyhamos"},"content":" *","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"atyhamos"},"content":" * @author Amos Tan","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"atyhamos"},"content":" * @version CS2103T AY21/22 Semester 1","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"atyhamos"},"content":" */","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"atyhamos"},"content":"public class DuchessException extends Exception {","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"atyhamos"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"atyhamos"},"content":"     * Constructs a DuchessException.","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"atyhamos"},"content":"     * @param errorMessage The error message associated with the exception.","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"atyhamos"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"atyhamos"},"content":"    public DuchessException(String errorMessage) {","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"atyhamos"},"content":"        super(errorMessage);","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"atyhamos"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"atyhamos":17}},{"path":"src/main/java/DuchessFileHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"atyhamos"},"content":"import java.io.File;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"atyhamos"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"atyhamos"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"atyhamos"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"atyhamos"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"atyhamos"},"content":"/**","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"atyhamos"},"content":" * This class implements a file handler to be used in reading and writing files.","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"atyhamos"},"content":" *","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"atyhamos"},"content":" * @author Amos Tan","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"atyhamos"},"content":" * @version CS2103T AY21/22 Semester 1","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"atyhamos"},"content":" */","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"atyhamos"},"content":"public class DuchessFileHandler {","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"atyhamos"},"content":"    /** The save file of the tasks from Duchess. */","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"atyhamos"},"content":"    public static File savedDuchess;","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"atyhamos"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"atyhamos"},"content":"     * Extracts the DuchessList from the save file.","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"atyhamos"},"content":"     * @param existingDuchessFile The save file.","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"atyhamos"},"content":"     * @return The DuchessList from the save file.","lastModifiedDate":"2021-08-23"},{"lineNumber":22,"author":{"gitId":"atyhamos"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"atyhamos"},"content":"    public static DuchessList extractListFromFile(File existingDuchessFile) {","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"atyhamos"},"content":"        String tasksAsString \u003d \"\";","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"atyhamos"},"content":"        try {","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"atyhamos"},"content":"            Scanner sc \u003d new Scanner(existingDuchessFile);","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"atyhamos"},"content":"            while (sc.hasNextLine()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"atyhamos"},"content":"                tasksAsString +\u003d sc.nextLine() + \"\\n\";","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"atyhamos"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"atyhamos"},"content":"            sc.close();","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"atyhamos"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"atyhamos"},"content":"            System.out.println(\"File not found.\");","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"atyhamos"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"atyhamos"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"atyhamos"},"content":"        return tasksAsString.isBlank() ? new DuchessList() : convertStringToList(tasksAsString);","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"atyhamos"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":39,"author":{"gitId":"atyhamos"},"content":"     * Converts the given tasks as String to a DuchessList.","lastModifiedDate":"2021-08-23"},{"lineNumber":40,"author":{"gitId":"atyhamos"},"content":"     * @param tasksAsString The given tasks as String.","lastModifiedDate":"2021-08-23"},{"lineNumber":41,"author":{"gitId":"atyhamos"},"content":"     * @return The DuchessList with the tasks converted from the String","lastModifiedDate":"2021-08-23"},{"lineNumber":42,"author":{"gitId":"atyhamos"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":43,"author":{"gitId":"atyhamos"},"content":"    public static DuchessList convertStringToList(String tasksAsString) {","lastModifiedDate":"2021-08-23"},{"lineNumber":44,"author":{"gitId":"atyhamos"},"content":"        DuchessList d \u003d new DuchessList();","lastModifiedDate":"2021-08-23"},{"lineNumber":45,"author":{"gitId":"atyhamos"},"content":"        String[] taskStringArray \u003d tasksAsString.split(\"\\n\");","lastModifiedDate":"2021-08-23"},{"lineNumber":46,"author":{"gitId":"atyhamos"},"content":"        for (String task : taskStringArray) {","lastModifiedDate":"2021-08-23"},{"lineNumber":47,"author":{"gitId":"atyhamos"},"content":"            char identifier \u003d task.charAt(0);","lastModifiedDate":"2021-08-23"},{"lineNumber":48,"author":{"gitId":"atyhamos"},"content":"            switch (identifier) {","lastModifiedDate":"2021-08-23"},{"lineNumber":49,"author":{"gitId":"atyhamos"},"content":"            case \u0027T\u0027: {","lastModifiedDate":"2021-08-23"},{"lineNumber":50,"author":{"gitId":"atyhamos"},"content":"                String[] nameAndDone \u003d task.substring(1).split(\",\");","lastModifiedDate":"2021-08-23"},{"lineNumber":51,"author":{"gitId":"atyhamos"},"content":"                ToDo todo \u003d new ToDo(nameAndDone[0]);","lastModifiedDate":"2021-08-23"},{"lineNumber":52,"author":{"gitId":"atyhamos"},"content":"                todo.setDone(Boolean.parseBoolean(nameAndDone[1]));","lastModifiedDate":"2021-08-23"},{"lineNumber":53,"author":{"gitId":"atyhamos"},"content":"                d.add(todo);","lastModifiedDate":"2021-08-23"},{"lineNumber":54,"author":{"gitId":"atyhamos"},"content":"                break;","lastModifiedDate":"2021-08-23"},{"lineNumber":55,"author":{"gitId":"atyhamos"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":56,"author":{"gitId":"atyhamos"},"content":"            case \u0027D\u0027: {","lastModifiedDate":"2021-08-23"},{"lineNumber":57,"author":{"gitId":"atyhamos"},"content":"                String[] nameByAndDone \u003d task.substring(1).split(\",\");","lastModifiedDate":"2021-08-23"},{"lineNumber":58,"author":{"gitId":"atyhamos"},"content":"                Deadline deadline \u003d new Deadline(nameByAndDone[0], nameByAndDone[1]);","lastModifiedDate":"2021-08-23"},{"lineNumber":59,"author":{"gitId":"atyhamos"},"content":"                deadline.setDone(Boolean.parseBoolean(nameByAndDone[2]));","lastModifiedDate":"2021-08-23"},{"lineNumber":60,"author":{"gitId":"atyhamos"},"content":"                d.add(deadline);","lastModifiedDate":"2021-08-23"},{"lineNumber":61,"author":{"gitId":"atyhamos"},"content":"                break;","lastModifiedDate":"2021-08-23"},{"lineNumber":62,"author":{"gitId":"atyhamos"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":63,"author":{"gitId":"atyhamos"},"content":"            case \u0027E\u0027: {","lastModifiedDate":"2021-08-23"},{"lineNumber":64,"author":{"gitId":"atyhamos"},"content":"                String[] nameDayTimeAndDone \u003d task.substring(1).split(\",\");","lastModifiedDate":"2021-08-23"},{"lineNumber":65,"author":{"gitId":"atyhamos"},"content":"                Event event \u003d new Event(nameDayTimeAndDone[0], nameDayTimeAndDone[1], nameDayTimeAndDone[2]);","lastModifiedDate":"2021-08-23"},{"lineNumber":66,"author":{"gitId":"atyhamos"},"content":"                event.setDone(Boolean.parseBoolean(nameDayTimeAndDone[3]));","lastModifiedDate":"2021-08-23"},{"lineNumber":67,"author":{"gitId":"atyhamos"},"content":"                d.add(event);","lastModifiedDate":"2021-08-23"},{"lineNumber":68,"author":{"gitId":"atyhamos"},"content":"                break;","lastModifiedDate":"2021-08-23"},{"lineNumber":69,"author":{"gitId":"atyhamos"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":70,"author":{"gitId":"atyhamos"},"content":"            default: {","lastModifiedDate":"2021-08-23"},{"lineNumber":71,"author":{"gitId":"atyhamos"},"content":"                // Should not reach here","lastModifiedDate":"2021-08-23"},{"lineNumber":72,"author":{"gitId":"atyhamos"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":73,"author":{"gitId":"atyhamos"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":74,"author":{"gitId":"atyhamos"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":75,"author":{"gitId":"atyhamos"},"content":"        return d;","lastModifiedDate":"2021-08-23"},{"lineNumber":76,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":77,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":78,"author":{"gitId":"atyhamos"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":79,"author":{"gitId":"atyhamos"},"content":"     * Writes the tasks as String to the save file.","lastModifiedDate":"2021-08-23"},{"lineNumber":80,"author":{"gitId":"atyhamos"},"content":"     * @param tasks The tasks inputted by the user of Duchess.","lastModifiedDate":"2021-08-23"},{"lineNumber":81,"author":{"gitId":"atyhamos"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":82,"author":{"gitId":"atyhamos"},"content":"    public static void writeToFile(DuchessList tasks) {","lastModifiedDate":"2021-08-23"},{"lineNumber":83,"author":{"gitId":"atyhamos"},"content":"        try {","lastModifiedDate":"2021-08-23"},{"lineNumber":84,"author":{"gitId":"atyhamos"},"content":"            FileWriter fw \u003d new FileWriter(savedDuchess);","lastModifiedDate":"2021-08-23"},{"lineNumber":85,"author":{"gitId":"atyhamos"},"content":"            for (int i \u003d 1; i \u003c tasks.getSize() + 1; i++) {","lastModifiedDate":"2021-08-23"},{"lineNumber":86,"author":{"gitId":"atyhamos"},"content":"                System.out.println(\"Writing task to file...\");","lastModifiedDate":"2021-08-23"},{"lineNumber":87,"author":{"gitId":"atyhamos"},"content":"                fw.write(tasks.getTask(i).toFileFormat() + \"\\n\");","lastModifiedDate":"2021-08-23"},{"lineNumber":88,"author":{"gitId":"atyhamos"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":89,"author":{"gitId":"atyhamos"},"content":"            fw.close();","lastModifiedDate":"2021-08-23"},{"lineNumber":90,"author":{"gitId":"atyhamos"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":91,"author":{"gitId":"atyhamos"},"content":"            System.out.println(\"An error occurred.\");","lastModifiedDate":"2021-08-23"},{"lineNumber":92,"author":{"gitId":"atyhamos"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-23"},{"lineNumber":93,"author":{"gitId":"atyhamos"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":94,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":95,"author":{"gitId":"atyhamos"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"atyhamos":95}},{"path":"src/main/java/DuchessList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"atyhamos"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-19"},{"lineNumber":2,"author":{"gitId":"atyhamos"},"content":"/**","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"atyhamos"},"content":" * This class implements a DukeList to be used in storing string from Duke","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"atyhamos"},"content":" *","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"atyhamos"},"content":" * @author Amos Tan","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"atyhamos"},"content":" * @version CS2103T AY21/22 Semester 1","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"atyhamos"},"content":" */","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"atyhamos"},"content":"public class DuchessList {","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"atyhamos"},"content":"    /** The ArrayList which stores the messages by the user.*/","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"atyhamos"},"content":"    private ArrayList\u003cTask\u003e itemList;","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"atyhamos"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"atyhamos"},"content":"     * Constructs a DuchessList.","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"atyhamos"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"atyhamos"},"content":"    public DuchessList()","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"atyhamos"},"content":"    {","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"atyhamos"},"content":"        itemList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"atyhamos"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"atyhamos"},"content":"     * Adds a string to the back of the DukeList array.","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"atyhamos"},"content":"     * @param input The string to be added.","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"atyhamos"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":25,"author":{"gitId":"atyhamos"},"content":"    public void add(Task input)","lastModifiedDate":"2021-08-18"},{"lineNumber":26,"author":{"gitId":"atyhamos"},"content":"    {","lastModifiedDate":"2021-08-18"},{"lineNumber":27,"author":{"gitId":"atyhamos"},"content":"        itemList.add(input);","lastModifiedDate":"2021-08-19"},{"lineNumber":28,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":29,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":30,"author":{"gitId":"atyhamos"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":31,"author":{"gitId":"atyhamos"},"content":"     * Prints the items in the DukeList in order.","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"atyhamos"},"content":"     * @return The string of printed items in a list.","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"atyhamos"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":34,"author":{"gitId":"atyhamos"},"content":"    public String printList()","lastModifiedDate":"2021-08-18"},{"lineNumber":35,"author":{"gitId":"atyhamos"},"content":"    {","lastModifiedDate":"2021-08-18"},{"lineNumber":36,"author":{"gitId":"atyhamos"},"content":"        String printed \u003d \"\";","lastModifiedDate":"2021-08-18"},{"lineNumber":37,"author":{"gitId":"atyhamos"},"content":"        int size \u003d itemList.size();","lastModifiedDate":"2021-08-19"},{"lineNumber":38,"author":{"gitId":"atyhamos"},"content":"        for (int i \u003d 0; i \u003c size; i++)","lastModifiedDate":"2021-08-18"},{"lineNumber":39,"author":{"gitId":"atyhamos"},"content":"        {","lastModifiedDate":"2021-08-18"},{"lineNumber":40,"author":{"gitId":"atyhamos"},"content":"            printed +\u003d String.format(\"%d. \" + itemList.get(i) + (i \u003d\u003d size - 1 ? \"\" : \"\\n\"), i + 1);","lastModifiedDate":"2021-08-19"},{"lineNumber":41,"author":{"gitId":"atyhamos"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":42,"author":{"gitId":"atyhamos"},"content":"        return printed;","lastModifiedDate":"2021-08-18"},{"lineNumber":43,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":44,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":45,"author":{"gitId":"atyhamos"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":46,"author":{"gitId":"atyhamos"},"content":"     * Checks if the item number is within range of the list\u0027s items.","lastModifiedDate":"2021-08-23"},{"lineNumber":47,"author":{"gitId":"atyhamos"},"content":"     * @param listNumber The item number (not ArrayList index) to be checked.","lastModifiedDate":"2021-08-23"},{"lineNumber":48,"author":{"gitId":"atyhamos"},"content":"     * @return Whether the number is within the list\u0027s range.","lastModifiedDate":"2021-08-23"},{"lineNumber":49,"author":{"gitId":"atyhamos"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":50,"author":{"gitId":"atyhamos"},"content":"    public boolean checkWithinRange(int listNumber)","lastModifiedDate":"2021-08-18"},{"lineNumber":51,"author":{"gitId":"atyhamos"},"content":"    {","lastModifiedDate":"2021-08-18"},{"lineNumber":52,"author":{"gitId":"atyhamos"},"content":"        return 0 \u003c listNumber \u0026\u0026 listNumber \u003c\u003d itemList.size();","lastModifiedDate":"2021-08-19"},{"lineNumber":53,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":54,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":55,"author":{"gitId":"atyhamos"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":56,"author":{"gitId":"atyhamos"},"content":"     * Returns the item at the list number.","lastModifiedDate":"2021-08-23"},{"lineNumber":57,"author":{"gitId":"atyhamos"},"content":"     * @param listNumber The item number whose item is to be returned.","lastModifiedDate":"2021-08-23"},{"lineNumber":58,"author":{"gitId":"atyhamos"},"content":"     * @return The item at the list number.","lastModifiedDate":"2021-08-23"},{"lineNumber":59,"author":{"gitId":"atyhamos"},"content":"     * @throws IllegalArgumentException Only accepts integers whose values are within range of the ArrayList.","lastModifiedDate":"2021-08-23"},{"lineNumber":60,"author":{"gitId":"atyhamos"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":61,"author":{"gitId":"atyhamos"},"content":"    public Task getTask(int listNumber) throws IllegalArgumentException","lastModifiedDate":"2021-08-18"},{"lineNumber":62,"author":{"gitId":"atyhamos"},"content":"    {","lastModifiedDate":"2021-08-18"},{"lineNumber":63,"author":{"gitId":"atyhamos"},"content":"        if (checkWithinRange(listNumber))","lastModifiedDate":"2021-08-18"},{"lineNumber":64,"author":{"gitId":"atyhamos"},"content":"            return itemList.get(listNumber - 1); // -1 due to difference between item list number and array indexes","lastModifiedDate":"2021-08-19"},{"lineNumber":65,"author":{"gitId":"atyhamos"},"content":"        else","lastModifiedDate":"2021-08-18"},{"lineNumber":66,"author":{"gitId":"atyhamos"},"content":"            throw new IllegalArgumentException(\"Task index is not within range.\"); // Not within range","lastModifiedDate":"2021-08-18"},{"lineNumber":67,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":68,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":69,"author":{"gitId":"atyhamos"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":70,"author":{"gitId":"atyhamos"},"content":"     * Gets the size of the DuchessList.","lastModifiedDate":"2021-08-23"},{"lineNumber":71,"author":{"gitId":"atyhamos"},"content":"     * @return The number of elements in the DuchessList.","lastModifiedDate":"2021-08-23"},{"lineNumber":72,"author":{"gitId":"atyhamos"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":73,"author":{"gitId":"atyhamos"},"content":"    public int getSize() {","lastModifiedDate":"2021-08-18"},{"lineNumber":74,"author":{"gitId":"atyhamos"},"content":"        return itemList.size();","lastModifiedDate":"2021-08-19"},{"lineNumber":75,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":76,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":77,"author":{"gitId":"atyhamos"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":78,"author":{"gitId":"atyhamos"},"content":"     * Deletes the task with the given number in the list.","lastModifiedDate":"2021-08-23"},{"lineNumber":79,"author":{"gitId":"atyhamos"},"content":"     * @param listNumber The number in the list of the task to be deleted.","lastModifiedDate":"2021-08-23"},{"lineNumber":80,"author":{"gitId":"atyhamos"},"content":"     * @return The deleted task.","lastModifiedDate":"2021-08-23"},{"lineNumber":81,"author":{"gitId":"atyhamos"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":82,"author":{"gitId":"atyhamos"},"content":"    public Task delete(int listNumber)","lastModifiedDate":"2021-08-19"},{"lineNumber":83,"author":{"gitId":"atyhamos"},"content":"    {","lastModifiedDate":"2021-08-19"},{"lineNumber":84,"author":{"gitId":"atyhamos"},"content":"        return itemList.remove(listNumber - 1); // -1 due to difference between item list number and indexes","lastModifiedDate":"2021-08-19"},{"lineNumber":85,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":86,"author":{"gitId":"atyhamos"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"atyhamos":86}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"atyhamos"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-18"},{"lineNumber":2,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"atyhamos"},"content":"/**","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"atyhamos"},"content":" * This class implements a Duke Chatbot variant: Duchess","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"atyhamos"},"content":" *","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"atyhamos"},"content":" * @author Amos Tan","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"atyhamos"},"content":" * @version CS2103T AY21/22 Semester 1","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"atyhamos"},"content":" */","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":11,"author":{"gitId":"atyhamos"},"content":"    /** The horizontal bars to add style in the output.*/","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"atyhamos"},"content":"    private static final String horizontalBars \u003d \"\\n____________________________________________________________\\n\";","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"atyhamos"},"content":"    /** The DukeList which holds the string stored by the user.*/","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"atyhamos"},"content":"    private DukeList dukeList;","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"atyhamos"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"atyhamos"},"content":"     * Constructor for Duke object","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"atyhamos"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"atyhamos"},"content":"    public Duke()","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"atyhamos"},"content":"    {","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"atyhamos"},"content":"        dukeList \u003d new DukeList();","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":25,"author":{"gitId":"atyhamos"},"content":"        Duke duchess \u003d new Duke();","lastModifiedDate":"2021-08-18"},{"lineNumber":26,"author":{"gitId":"atyhamos"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-18"},{"lineNumber":27,"author":{"gitId":"atyhamos"},"content":"        String name \u003d \"Duchess\";","lastModifiedDate":"2021-08-18"},{"lineNumber":28,"author":{"gitId":"atyhamos"},"content":"        prettyPrint(\"Good day. I am \" + name + \"\\nWhat can I do for you?\");","lastModifiedDate":"2021-08-18"},{"lineNumber":29,"author":{"gitId":"atyhamos"},"content":"        duchess.handleInput(sc);","lastModifiedDate":"2021-08-18"},{"lineNumber":30,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":31,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":32,"author":{"gitId":"atyhamos"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":33,"author":{"gitId":"atyhamos"},"content":"     * Prints to System.out fancily including horizontal bars ontop and bottom","lastModifiedDate":"2021-08-18"},{"lineNumber":34,"author":{"gitId":"atyhamos"},"content":"     * @param input string to be printed fancily","lastModifiedDate":"2021-08-18"},{"lineNumber":35,"author":{"gitId":"atyhamos"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":36,"author":{"gitId":"atyhamos"},"content":"    public static void prettyPrint(String input)","lastModifiedDate":"2021-08-18"},{"lineNumber":37,"author":{"gitId":"atyhamos"},"content":"    {","lastModifiedDate":"2021-08-18"},{"lineNumber":38,"author":{"gitId":"atyhamos"},"content":"        System.out.println(horizontalBars + input + horizontalBars);","lastModifiedDate":"2021-08-18"},{"lineNumber":39,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":40,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":41,"author":{"gitId":"atyhamos"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":42,"author":{"gitId":"atyhamos"},"content":"     * Gets input from user and PrettyPrints the corresponding response","lastModifiedDate":"2021-08-18"},{"lineNumber":43,"author":{"gitId":"atyhamos"},"content":"     * @param sc scanner to be reused","lastModifiedDate":"2021-08-18"},{"lineNumber":44,"author":{"gitId":"atyhamos"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":45,"author":{"gitId":"atyhamos"},"content":"    public void handleInput(Scanner sc)","lastModifiedDate":"2021-08-18"},{"lineNumber":46,"author":{"gitId":"atyhamos"},"content":"    {","lastModifiedDate":"2021-08-18"},{"lineNumber":47,"author":{"gitId":"atyhamos"},"content":"        String input \u003d sc.nextLine();","lastModifiedDate":"2021-08-18"},{"lineNumber":48,"author":{"gitId":"atyhamos"},"content":"        if (input.equals(\"bye\")) {","lastModifiedDate":"2021-08-18"},{"lineNumber":49,"author":{"gitId":"atyhamos"},"content":"            prettyPrint(\"I bid thee farewell.\");","lastModifiedDate":"2021-08-18"},{"lineNumber":50,"author":{"gitId":"atyhamos"},"content":"            return;","lastModifiedDate":"2021-08-18"},{"lineNumber":51,"author":{"gitId":"atyhamos"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":52,"author":{"gitId":"atyhamos"},"content":"        else if (input.equals(\"list\"))","lastModifiedDate":"2021-08-18"},{"lineNumber":53,"author":{"gitId":"atyhamos"},"content":"            prettyPrint(dukeList.printList());","lastModifiedDate":"2021-08-18"},{"lineNumber":54,"author":{"gitId":"atyhamos"},"content":"        else if (checkPrefix(input, \"done\"))","lastModifiedDate":"2021-08-18"},{"lineNumber":55,"author":{"gitId":"atyhamos"},"content":"            handleDone(input);","lastModifiedDate":"2021-08-18"},{"lineNumber":56,"author":{"gitId":"atyhamos"},"content":"        else if (checkPrefix(input, \"todo\"))","lastModifiedDate":"2021-08-18"},{"lineNumber":57,"author":{"gitId":"atyhamos"},"content":"            handleTodo(input);","lastModifiedDate":"2021-08-18"},{"lineNumber":58,"author":{"gitId":"atyhamos"},"content":"        else if (checkPrefix(input, \"deadline\"))","lastModifiedDate":"2021-08-18"},{"lineNumber":59,"author":{"gitId":"atyhamos"},"content":"            handleDeadline(input);","lastModifiedDate":"2021-08-18"},{"lineNumber":60,"author":{"gitId":"atyhamos"},"content":"        else if (checkPrefix(input, \"event\"))","lastModifiedDate":"2021-08-18"},{"lineNumber":61,"author":{"gitId":"atyhamos"},"content":"            handleEvent(input);","lastModifiedDate":"2021-08-18"},{"lineNumber":62,"author":{"gitId":"atyhamos"},"content":"        else","lastModifiedDate":"2021-08-18"},{"lineNumber":63,"author":{"gitId":"atyhamos"},"content":"            printError();","lastModifiedDate":"2021-08-18"},{"lineNumber":64,"author":{"gitId":"atyhamos"},"content":"        // Continue to read for inputs unless \"bye\" is called","lastModifiedDate":"2021-08-18"},{"lineNumber":65,"author":{"gitId":"atyhamos"},"content":"        handleInput(sc);","lastModifiedDate":"2021-08-18"},{"lineNumber":66,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":67,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":68,"author":{"gitId":"atyhamos"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":69,"author":{"gitId":"atyhamos"},"content":"     * Handles the logic for marking a task as done","lastModifiedDate":"2021-08-18"},{"lineNumber":70,"author":{"gitId":"atyhamos"},"content":"     * @param input the user given input","lastModifiedDate":"2021-08-18"},{"lineNumber":71,"author":{"gitId":"atyhamos"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":72,"author":{"gitId":"atyhamos"},"content":"    public void handleDone(String input) {","lastModifiedDate":"2021-08-18"},{"lineNumber":73,"author":{"gitId":"atyhamos"},"content":"        String index \u003d input.split(\" \", 2)[1];","lastModifiedDate":"2021-08-18"},{"lineNumber":74,"author":{"gitId":"atyhamos"},"content":"        // Parsing a non-numeric string will throw a NumberFormatException","lastModifiedDate":"2021-08-18"},{"lineNumber":75,"author":{"gitId":"atyhamos"},"content":"        try {","lastModifiedDate":"2021-08-18"},{"lineNumber":76,"author":{"gitId":"atyhamos"},"content":"            if (dukeList.checkWithinRange(Integer.parseInt(index))) {","lastModifiedDate":"2021-08-18"},{"lineNumber":77,"author":{"gitId":"atyhamos"},"content":"                // Valid done task","lastModifiedDate":"2021-08-18"},{"lineNumber":78,"author":{"gitId":"atyhamos"},"content":"                Task task \u003d dukeList.getTask(Integer.parseInt(index));","lastModifiedDate":"2021-08-18"},{"lineNumber":79,"author":{"gitId":"atyhamos"},"content":"                task.setDone(true);","lastModifiedDate":"2021-08-18"},{"lineNumber":80,"author":{"gitId":"atyhamos"},"content":"                prettyPrint(\"Nice! I\u0027ve marked this task as done:   \\n  \" + task);","lastModifiedDate":"2021-08-18"},{"lineNumber":81,"author":{"gitId":"atyhamos"},"content":"            } else {","lastModifiedDate":"2021-08-18"},{"lineNumber":82,"author":{"gitId":"atyhamos"},"content":"                // \"done\" followed by an integer outside of range of the list","lastModifiedDate":"2021-08-18"},{"lineNumber":83,"author":{"gitId":"atyhamos"},"content":"                prettyPrint(\"Apologies, that task does not exist and cannot be marked as done.\");","lastModifiedDate":"2021-08-18"},{"lineNumber":84,"author":{"gitId":"atyhamos"},"content":"            }","lastModifiedDate":"2021-08-18"},{"lineNumber":85,"author":{"gitId":"atyhamos"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-08-18"},{"lineNumber":86,"author":{"gitId":"atyhamos"},"content":"            // \"done\" followed by an invalid non-integer string input","lastModifiedDate":"2021-08-18"},{"lineNumber":87,"author":{"gitId":"atyhamos"},"content":"            prettyPrint(\"The command \\\"done\\\" should be followed by an integer.\");","lastModifiedDate":"2021-08-18"},{"lineNumber":88,"author":{"gitId":"atyhamos"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":89,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":90,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":91,"author":{"gitId":"atyhamos"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":92,"author":{"gitId":"atyhamos"},"content":"     * Handles the logic for checking and creating ToDo tasks","lastModifiedDate":"2021-08-18"},{"lineNumber":93,"author":{"gitId":"atyhamos"},"content":"     * @param input the user given input","lastModifiedDate":"2021-08-18"},{"lineNumber":94,"author":{"gitId":"atyhamos"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":95,"author":{"gitId":"atyhamos"},"content":"    public void handleTodo(String input) {","lastModifiedDate":"2021-08-18"},{"lineNumber":96,"author":{"gitId":"atyhamos"},"content":"        String task \u003d input.split(\" \", 2)[1];","lastModifiedDate":"2021-08-18"},{"lineNumber":97,"author":{"gitId":"atyhamos"},"content":"        // Valid input","lastModifiedDate":"2021-08-18"},{"lineNumber":98,"author":{"gitId":"atyhamos"},"content":"        ToDo todo \u003d new ToDo(task);","lastModifiedDate":"2021-08-18"},{"lineNumber":99,"author":{"gitId":"atyhamos"},"content":"        dukeList.add(todo);","lastModifiedDate":"2021-08-18"},{"lineNumber":100,"author":{"gitId":"atyhamos"},"content":"        int listSize \u003d dukeList.getSize();","lastModifiedDate":"2021-08-18"},{"lineNumber":101,"author":{"gitId":"atyhamos"},"content":"        prettyPrint(\"Understood. I\u0027ve added this task:\\n    \" + todo","lastModifiedDate":"2021-08-18"},{"lineNumber":102,"author":{"gitId":"atyhamos"},"content":"                + \"\\nYou now have \" + listSize","lastModifiedDate":"2021-08-18"},{"lineNumber":103,"author":{"gitId":"atyhamos"},"content":"                    + (listSize \u003e 1 ? \" tasks in the list.\" : \" task in the list.\"));","lastModifiedDate":"2021-08-18"},{"lineNumber":104,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":105,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":106,"author":{"gitId":"atyhamos"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":107,"author":{"gitId":"atyhamos"},"content":"     * Handles the logic for checking and creating Deadline tasks","lastModifiedDate":"2021-08-18"},{"lineNumber":108,"author":{"gitId":"atyhamos"},"content":"     * @param input the user given input","lastModifiedDate":"2021-08-18"},{"lineNumber":109,"author":{"gitId":"atyhamos"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":110,"author":{"gitId":"atyhamos"},"content":"    public void handleDeadline(String input) {","lastModifiedDate":"2021-08-18"},{"lineNumber":111,"author":{"gitId":"atyhamos"},"content":"        String invalidMessage \u003d \"The command \\\"deadline\\\" should be followed by \" +","lastModifiedDate":"2021-08-18"},{"lineNumber":112,"author":{"gitId":"atyhamos"},"content":"                \"a task and a deadline, e.g (read book /by Sunday)\";","lastModifiedDate":"2021-08-18"},{"lineNumber":113,"author":{"gitId":"atyhamos"},"content":"        String taskAndBy \u003d input.split(\" \", 2)[1];","lastModifiedDate":"2021-08-18"},{"lineNumber":114,"author":{"gitId":"atyhamos"},"content":"        if (!taskAndBy.contains(\" /by \")) {","lastModifiedDate":"2021-08-18"},{"lineNumber":115,"author":{"gitId":"atyhamos"},"content":"            prettyPrint(invalidMessage);","lastModifiedDate":"2021-08-18"},{"lineNumber":116,"author":{"gitId":"atyhamos"},"content":"            return;","lastModifiedDate":"2021-08-18"},{"lineNumber":117,"author":{"gitId":"atyhamos"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":118,"author":{"gitId":"atyhamos"},"content":"        String[] taskParts \u003d taskAndBy.split(\" /by \", 2);","lastModifiedDate":"2021-08-18"},{"lineNumber":119,"author":{"gitId":"atyhamos"},"content":"        String checkTask \u003d taskParts[0];","lastModifiedDate":"2021-08-18"},{"lineNumber":120,"author":{"gitId":"atyhamos"},"content":"        String checkBy \u003d taskParts[1];","lastModifiedDate":"2021-08-18"},{"lineNumber":121,"author":{"gitId":"atyhamos"},"content":"        if (checkBy.equals(\"\")) {","lastModifiedDate":"2021-08-18"},{"lineNumber":122,"author":{"gitId":"atyhamos"},"content":"            prettyPrint(invalidMessage);","lastModifiedDate":"2021-08-18"},{"lineNumber":123,"author":{"gitId":"atyhamos"},"content":"            return;","lastModifiedDate":"2021-08-18"},{"lineNumber":124,"author":{"gitId":"atyhamos"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":125,"author":{"gitId":"atyhamos"},"content":"        // Valid input","lastModifiedDate":"2021-08-18"},{"lineNumber":126,"author":{"gitId":"atyhamos"},"content":"        Deadline deadline \u003d new Deadline(checkTask, checkBy);","lastModifiedDate":"2021-08-18"},{"lineNumber":127,"author":{"gitId":"atyhamos"},"content":"        dukeList.add(deadline);","lastModifiedDate":"2021-08-18"},{"lineNumber":128,"author":{"gitId":"atyhamos"},"content":"        int listSize \u003d dukeList.getSize();","lastModifiedDate":"2021-08-18"},{"lineNumber":129,"author":{"gitId":"atyhamos"},"content":"        prettyPrint(\"Understood. I\u0027ve added this task:\\n    \" + deadline","lastModifiedDate":"2021-08-18"},{"lineNumber":130,"author":{"gitId":"atyhamos"},"content":"                + \"\\nYou now have \" + listSize","lastModifiedDate":"2021-08-18"},{"lineNumber":131,"author":{"gitId":"atyhamos"},"content":"                + (listSize \u003e 1 ? \" tasks in the list.\" : \" task in the list.\"));","lastModifiedDate":"2021-08-18"},{"lineNumber":132,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":133,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":134,"author":{"gitId":"atyhamos"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":135,"author":{"gitId":"atyhamos"},"content":"     * Handles the logic for checking and creating Event tasks","lastModifiedDate":"2021-08-18"},{"lineNumber":136,"author":{"gitId":"atyhamos"},"content":"     * @param input the user given input","lastModifiedDate":"2021-08-18"},{"lineNumber":137,"author":{"gitId":"atyhamos"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":138,"author":{"gitId":"atyhamos"},"content":"    public void handleEvent(String input) {","lastModifiedDate":"2021-08-18"},{"lineNumber":139,"author":{"gitId":"atyhamos"},"content":"        String invalidMessage \u003d \"The command \\\"event\\\" should be followed by \" +","lastModifiedDate":"2021-08-18"},{"lineNumber":140,"author":{"gitId":"atyhamos"},"content":"                \"a task and a duration, e.g (meeting /at Mon 2-4pm)\";","lastModifiedDate":"2021-08-18"},{"lineNumber":141,"author":{"gitId":"atyhamos"},"content":"        String taskAndDuration \u003d input.split(\" \", 2)[1];","lastModifiedDate":"2021-08-18"},{"lineNumber":142,"author":{"gitId":"atyhamos"},"content":"        if (!taskAndDuration.contains(\" /at \")) {","lastModifiedDate":"2021-08-18"},{"lineNumber":143,"author":{"gitId":"atyhamos"},"content":"            prettyPrint(invalidMessage);","lastModifiedDate":"2021-08-18"},{"lineNumber":144,"author":{"gitId":"atyhamos"},"content":"            return;","lastModifiedDate":"2021-08-18"},{"lineNumber":145,"author":{"gitId":"atyhamos"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":146,"author":{"gitId":"atyhamos"},"content":"        String[] taskParts \u003d taskAndDuration.split(\" /at \", 2);","lastModifiedDate":"2021-08-18"},{"lineNumber":147,"author":{"gitId":"atyhamos"},"content":"        String task \u003d taskParts[0];","lastModifiedDate":"2021-08-18"},{"lineNumber":148,"author":{"gitId":"atyhamos"},"content":"        String time \u003d taskParts[1];","lastModifiedDate":"2021-08-18"},{"lineNumber":149,"author":{"gitId":"atyhamos"},"content":"        if (!time.contains(\" \")) {","lastModifiedDate":"2021-08-18"},{"lineNumber":150,"author":{"gitId":"atyhamos"},"content":"            prettyPrint(invalidMessage);","lastModifiedDate":"2021-08-18"},{"lineNumber":151,"author":{"gitId":"atyhamos"},"content":"            return;","lastModifiedDate":"2021-08-18"},{"lineNumber":152,"author":{"gitId":"atyhamos"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":153,"author":{"gitId":"atyhamos"},"content":"        String[] timeParts \u003d time.split(\" \", 2);","lastModifiedDate":"2021-08-18"},{"lineNumber":154,"author":{"gitId":"atyhamos"},"content":"        String day \u003d timeParts[0];","lastModifiedDate":"2021-08-18"},{"lineNumber":155,"author":{"gitId":"atyhamos"},"content":"        String duration \u003d timeParts[1];","lastModifiedDate":"2021-08-18"},{"lineNumber":156,"author":{"gitId":"atyhamos"},"content":"        if (!duration.contains(\"-\")) {","lastModifiedDate":"2021-08-18"},{"lineNumber":157,"author":{"gitId":"atyhamos"},"content":"            prettyPrint(invalidMessage);","lastModifiedDate":"2021-08-18"},{"lineNumber":158,"author":{"gitId":"atyhamos"},"content":"            return;","lastModifiedDate":"2021-08-18"},{"lineNumber":159,"author":{"gitId":"atyhamos"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":160,"author":{"gitId":"atyhamos"},"content":"        // Valid input","lastModifiedDate":"2021-08-18"},{"lineNumber":161,"author":{"gitId":"atyhamos"},"content":"        Event event \u003d new Event(task, day, duration);","lastModifiedDate":"2021-08-18"},{"lineNumber":162,"author":{"gitId":"atyhamos"},"content":"        dukeList.add(event);","lastModifiedDate":"2021-08-18"},{"lineNumber":163,"author":{"gitId":"atyhamos"},"content":"        int listSize \u003d dukeList.getSize();","lastModifiedDate":"2021-08-18"},{"lineNumber":164,"author":{"gitId":"atyhamos"},"content":"        prettyPrint(\"Understood. I\u0027ve added this task:\\n    \" + event","lastModifiedDate":"2021-08-18"},{"lineNumber":165,"author":{"gitId":"atyhamos"},"content":"                + \"\\nYou now have \" + listSize","lastModifiedDate":"2021-08-18"},{"lineNumber":166,"author":{"gitId":"atyhamos"},"content":"                + (listSize \u003e 1 ? \" tasks in the list.\" : \" task in the list.\"));","lastModifiedDate":"2021-08-18"},{"lineNumber":167,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":168,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":169,"author":{"gitId":"atyhamos"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":170,"author":{"gitId":"atyhamos"},"content":"     * Prints a message given for invalid inputs","lastModifiedDate":"2021-08-18"},{"lineNumber":171,"author":{"gitId":"atyhamos"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":172,"author":{"gitId":"atyhamos"},"content":"    public void printError()","lastModifiedDate":"2021-08-18"},{"lineNumber":173,"author":{"gitId":"atyhamos"},"content":"    {","lastModifiedDate":"2021-08-18"},{"lineNumber":174,"author":{"gitId":"atyhamos"},"content":"        prettyPrint(\"Apologies, I didn\u0027t catch that.\");","lastModifiedDate":"2021-08-18"},{"lineNumber":175,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":176,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":177,"author":{"gitId":"atyhamos"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":178,"author":{"gitId":"atyhamos"},"content":"     * Checks if a given string is present at the front of another string","lastModifiedDate":"2021-08-18"},{"lineNumber":179,"author":{"gitId":"atyhamos"},"content":"     * @param input the string to be checked against","lastModifiedDate":"2021-08-18"},{"lineNumber":180,"author":{"gitId":"atyhamos"},"content":"     * @param prefix the string to check","lastModifiedDate":"2021-08-18"},{"lineNumber":181,"author":{"gitId":"atyhamos"},"content":"     * @return whether the prefix string at the front of the string","lastModifiedDate":"2021-08-18"},{"lineNumber":182,"author":{"gitId":"atyhamos"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":183,"author":{"gitId":"atyhamos"},"content":"    public boolean checkPrefix(String input, String prefix) {","lastModifiedDate":"2021-08-18"},{"lineNumber":184,"author":{"gitId":"atyhamos"},"content":"        String[] parts \u003d input.split(\" \", 2);","lastModifiedDate":"2021-08-18"},{"lineNumber":185,"author":{"gitId":"atyhamos"},"content":"        String front \u003d parts[0];","lastModifiedDate":"2021-08-18"},{"lineNumber":186,"author":{"gitId":"atyhamos"},"content":"        return front.equals(prefix) \u0026\u0026 parts.length \u003d\u003d 2;","lastModifiedDate":"2021-08-18"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":188,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"atyhamos":184,"-":4}},{"path":"src/main/java/DukeList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"atyhamos"},"content":"/**","lastModifiedDate":"2021-08-18"},{"lineNumber":2,"author":{"gitId":"atyhamos"},"content":" * This class implements a DukeList to be used in storing string from Duke","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"atyhamos"},"content":" *","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"atyhamos"},"content":" * @author Amos Tan","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"atyhamos"},"content":" * @version CS2103T AY21/22 Semester 1","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"atyhamos"},"content":" */","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"atyhamos"},"content":"public class DukeList {","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"atyhamos"},"content":"    /** The array which stores the messages by the user.*/","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"atyhamos"},"content":"    private Task[] itemList;","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"atyhamos"},"content":"    /** The number of elements in the itemList.*/","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"atyhamos"},"content":"    private int size;","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"atyhamos"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"atyhamos"},"content":"     * Constructor for DukeList","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"atyhamos"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"atyhamos"},"content":"    public DukeList()","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"atyhamos"},"content":"    {","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"atyhamos"},"content":"        itemList \u003d new Task[100];","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"atyhamos"},"content":"        size \u003d 0;","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"atyhamos"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":24,"author":{"gitId":"atyhamos"},"content":"     * Adds a string to the back of the DukeList array","lastModifiedDate":"2021-08-18"},{"lineNumber":25,"author":{"gitId":"atyhamos"},"content":"     * @param input the string to be added","lastModifiedDate":"2021-08-18"},{"lineNumber":26,"author":{"gitId":"atyhamos"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":27,"author":{"gitId":"atyhamos"},"content":"    public void add(Task input)","lastModifiedDate":"2021-08-18"},{"lineNumber":28,"author":{"gitId":"atyhamos"},"content":"    {","lastModifiedDate":"2021-08-18"},{"lineNumber":29,"author":{"gitId":"atyhamos"},"content":"        itemList[size++] \u003d input;","lastModifiedDate":"2021-08-18"},{"lineNumber":30,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":31,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":32,"author":{"gitId":"atyhamos"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":33,"author":{"gitId":"atyhamos"},"content":"     * Prints the items in the DukeList in order","lastModifiedDate":"2021-08-18"},{"lineNumber":34,"author":{"gitId":"atyhamos"},"content":"     * @return string of printed items in a list","lastModifiedDate":"2021-08-18"},{"lineNumber":35,"author":{"gitId":"atyhamos"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":36,"author":{"gitId":"atyhamos"},"content":"    public String printList()","lastModifiedDate":"2021-08-18"},{"lineNumber":37,"author":{"gitId":"atyhamos"},"content":"    {","lastModifiedDate":"2021-08-18"},{"lineNumber":38,"author":{"gitId":"atyhamos"},"content":"        String printed \u003d \"\";","lastModifiedDate":"2021-08-18"},{"lineNumber":39,"author":{"gitId":"atyhamos"},"content":"        for (int i \u003d 0; i \u003c size; i++)","lastModifiedDate":"2021-08-18"},{"lineNumber":40,"author":{"gitId":"atyhamos"},"content":"        {","lastModifiedDate":"2021-08-18"},{"lineNumber":41,"author":{"gitId":"atyhamos"},"content":"            printed +\u003d String.format(\"%d. \" + itemList[i] + (i \u003d\u003d size - 1 ? \"\" : \"\\n\"), i + 1);","lastModifiedDate":"2021-08-18"},{"lineNumber":42,"author":{"gitId":"atyhamos"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":43,"author":{"gitId":"atyhamos"},"content":"        return printed;","lastModifiedDate":"2021-08-18"},{"lineNumber":44,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":45,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":46,"author":{"gitId":"atyhamos"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":47,"author":{"gitId":"atyhamos"},"content":"     * Checks if the item number is within range of the list\u0027s items","lastModifiedDate":"2021-08-18"},{"lineNumber":48,"author":{"gitId":"atyhamos"},"content":"     * @param listNumber the item number (not array index) to be checked","lastModifiedDate":"2021-08-18"},{"lineNumber":49,"author":{"gitId":"atyhamos"},"content":"     * @return boolean of whether the number is within the list\u0027s range","lastModifiedDate":"2021-08-18"},{"lineNumber":50,"author":{"gitId":"atyhamos"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":51,"author":{"gitId":"atyhamos"},"content":"    public boolean checkWithinRange(int listNumber)","lastModifiedDate":"2021-08-18"},{"lineNumber":52,"author":{"gitId":"atyhamos"},"content":"    {","lastModifiedDate":"2021-08-18"},{"lineNumber":53,"author":{"gitId":"atyhamos"},"content":"        return 0 \u003c listNumber \u0026\u0026 listNumber \u003c\u003d size;","lastModifiedDate":"2021-08-18"},{"lineNumber":54,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":55,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":56,"author":{"gitId":"atyhamos"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":57,"author":{"gitId":"atyhamos"},"content":"     * Returns the item at the list number","lastModifiedDate":"2021-08-18"},{"lineNumber":58,"author":{"gitId":"atyhamos"},"content":"     * @param listNumber the item number whose item is to be returned","lastModifiedDate":"2021-08-18"},{"lineNumber":59,"author":{"gitId":"atyhamos"},"content":"     * @return the item at the list number","lastModifiedDate":"2021-08-18"},{"lineNumber":60,"author":{"gitId":"atyhamos"},"content":"     * @throws IllegalArgumentException only accepts integers whose values are within range of the array","lastModifiedDate":"2021-08-18"},{"lineNumber":61,"author":{"gitId":"atyhamos"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":62,"author":{"gitId":"atyhamos"},"content":"    public Task getTask(int listNumber) throws IllegalArgumentException","lastModifiedDate":"2021-08-18"},{"lineNumber":63,"author":{"gitId":"atyhamos"},"content":"    {","lastModifiedDate":"2021-08-18"},{"lineNumber":64,"author":{"gitId":"atyhamos"},"content":"        if (checkWithinRange(listNumber))","lastModifiedDate":"2021-08-18"},{"lineNumber":65,"author":{"gitId":"atyhamos"},"content":"            return itemList[listNumber - 1]; // -1 due to difference between item list number and array indexes","lastModifiedDate":"2021-08-18"},{"lineNumber":66,"author":{"gitId":"atyhamos"},"content":"        else","lastModifiedDate":"2021-08-18"},{"lineNumber":67,"author":{"gitId":"atyhamos"},"content":"            throw new IllegalArgumentException(\"Task index is not within range.\"); // Not within range","lastModifiedDate":"2021-08-18"},{"lineNumber":68,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":69,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":70,"author":{"gitId":"atyhamos"},"content":"    public int getSize() {","lastModifiedDate":"2021-08-18"},{"lineNumber":71,"author":{"gitId":"atyhamos"},"content":"        return this.size;","lastModifiedDate":"2021-08-18"},{"lineNumber":72,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":73,"author":{"gitId":"atyhamos"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"atyhamos":73}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"atyhamos"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"atyhamos"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"atyhamos"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"atyhamos"},"content":"/**","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"atyhamos"},"content":" * This class implements a DukeList to be used in storing string from Duke","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"atyhamos"},"content":" *","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"atyhamos"},"content":" * @author Amos Tan","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"atyhamos"},"content":" * @version CS2103T AY21/22 Semester 1","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"atyhamos"},"content":" */","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"atyhamos"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"atyhamos"},"content":"\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"atyhamos"},"content":"    /** The day of the event.*/","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"atyhamos"},"content":"    protected String day;","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"atyhamos"},"content":"    /** The time which the event takes place.*/","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"atyhamos"},"content":"    protected String time;","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"atyhamos"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"atyhamos"},"content":"     * Constructs an Event.","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"atyhamos"},"content":"     * @param name The name of the event.","lastModifiedDate":"2021-08-23"},{"lineNumber":22,"author":{"gitId":"atyhamos"},"content":"     * @param day The day of the event.","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"atyhamos"},"content":"     * @param time The time which the event takes place.","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"atyhamos"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"atyhamos"},"content":"    /** The date and time of the deadline task when it starts.*/","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"atyhamos"},"content":"    protected LocalDateTime dateTimeStart;","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"atyhamos"},"content":"    /** The date and time of the deadline task when it ends.*/","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"atyhamos"},"content":"    protected LocalDateTime dateTimeEnd;","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"atyhamos"},"content":"    /** The DateTimeFormatter used when printing the Event.*/","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"atyhamos"},"content":"    private static final DateTimeFormatter PRINT_DATE_FORMATTER \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\");","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"atyhamos"},"content":"    /** The DateTimeFormatter when converting time from string.*/","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"atyhamos"},"content":"    private static final DateTimeFormatter DATE_FORMATTER \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy ha\");","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"atyhamos"},"content":"    /** The DateTimeFormatter when converting time with minutes from string.*/","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"atyhamos"},"content":"    private static final DateTimeFormatter DATE_MINUTES_FORMATTER \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy h:mma\");","lastModifiedDate":"2021-08-23"},{"lineNumber":39,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":40,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":41,"author":{"gitId":"atyhamos"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":42,"author":{"gitId":"atyhamos"},"content":"     * Constructor for Event class","lastModifiedDate":"2021-08-18"},{"lineNumber":43,"author":{"gitId":"atyhamos"},"content":"     * @param name the name of the event","lastModifiedDate":"2021-08-18"},{"lineNumber":44,"author":{"gitId":"atyhamos"},"content":"     * @param dateTimeStart the day of the event","lastModifiedDate":"2021-08-23"},{"lineNumber":45,"author":{"gitId":"atyhamos"},"content":"     * @param dateTimeEnd the day of the event","lastModifiedDate":"2021-08-23"},{"lineNumber":46,"author":{"gitId":"atyhamos"},"content":"\u003e\u003e\u003e\u003e\u003e\u003e\u003e branch-Level-8","lastModifiedDate":"2021-08-23"},{"lineNumber":47,"author":{"gitId":"atyhamos"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":48,"author":{"gitId":"atyhamos"},"content":"    public Event(String name, LocalDateTime dateTimeStart, LocalDateTime dateTimeEnd) {","lastModifiedDate":"2021-08-23"},{"lineNumber":49,"author":{"gitId":"atyhamos"},"content":"        super(name);","lastModifiedDate":"2021-08-18"},{"lineNumber":50,"author":{"gitId":"atyhamos"},"content":"        this.dateTimeStart \u003d dateTimeStart;","lastModifiedDate":"2021-08-23"},{"lineNumber":51,"author":{"gitId":"atyhamos"},"content":"        this.dateTimeEnd \u003d dateTimeEnd;","lastModifiedDate":"2021-08-23"},{"lineNumber":52,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":53,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":54,"author":{"gitId":"atyhamos"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":55,"author":{"gitId":"atyhamos"},"content":"     * Converts the user input string to a LocalDateTime.","lastModifiedDate":"2021-08-23"},{"lineNumber":56,"author":{"gitId":"atyhamos"},"content":"     * @param date The user input date as a string.","lastModifiedDate":"2021-08-23"},{"lineNumber":57,"author":{"gitId":"atyhamos"},"content":"     * @param duration The user input duration as a string.","lastModifiedDate":"2021-08-23"},{"lineNumber":58,"author":{"gitId":"atyhamos"},"content":"     * @return An array of LocalDateTime containing the start and end LocalDateTimes respectively.","lastModifiedDate":"2021-08-23"},{"lineNumber":59,"author":{"gitId":"atyhamos"},"content":"     * @throws DuchessException Exception thrown when an incorrect format is used for Event.","lastModifiedDate":"2021-08-23"},{"lineNumber":60,"author":{"gitId":"atyhamos"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":61,"author":{"gitId":"atyhamos"},"content":"    public static LocalDateTime[] convertStringToDate (String date, String duration) throws DuchessException {","lastModifiedDate":"2021-08-23"},{"lineNumber":62,"author":{"gitId":"atyhamos"},"content":"        try {","lastModifiedDate":"2021-08-23"},{"lineNumber":63,"author":{"gitId":"atyhamos"},"content":"            String replacement \u003d duration.replace(\"am\", \"AM\").replace(\"pm\",\"PM\");","lastModifiedDate":"2021-08-23"},{"lineNumber":64,"author":{"gitId":"atyhamos"},"content":"            String[] timeParts \u003d replacement.split(\"-\");","lastModifiedDate":"2021-08-23"},{"lineNumber":65,"author":{"gitId":"atyhamos"},"content":"            String startTime \u003d timeParts[0];","lastModifiedDate":"2021-08-23"},{"lineNumber":66,"author":{"gitId":"atyhamos"},"content":"            String endTime \u003d timeParts[1];","lastModifiedDate":"2021-08-23"},{"lineNumber":67,"author":{"gitId":"atyhamos"},"content":"            LocalDateTime startEvent \u003d LocalDateTime.parse(date + \" \" + startTime,","lastModifiedDate":"2021-08-23"},{"lineNumber":68,"author":{"gitId":"atyhamos"},"content":"                    startTime.contains(\":\") ? DATE_MINUTES_FORMATTER : DATE_FORMATTER);","lastModifiedDate":"2021-08-23"},{"lineNumber":69,"author":{"gitId":"atyhamos"},"content":"            LocalDateTime endEvent \u003d LocalDateTime.parse(date + \" \" + endTime,","lastModifiedDate":"2021-08-23"},{"lineNumber":70,"author":{"gitId":"atyhamos"},"content":"                    endTime.contains(\":\") ? DATE_MINUTES_FORMATTER : DATE_FORMATTER);","lastModifiedDate":"2021-08-23"},{"lineNumber":71,"author":{"gitId":"atyhamos"},"content":"            LocalDateTime[] localDateTimes \u003d {startEvent, endEvent};","lastModifiedDate":"2021-08-23"},{"lineNumber":72,"author":{"gitId":"atyhamos"},"content":"            return localDateTimes;","lastModifiedDate":"2021-08-23"},{"lineNumber":73,"author":{"gitId":"atyhamos"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":74,"author":{"gitId":"atyhamos"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-23"},{"lineNumber":75,"author":{"gitId":"atyhamos"},"content":"            throw new DuchessException(\"Wrong format used.\");","lastModifiedDate":"2021-08-23"},{"lineNumber":76,"author":{"gitId":"atyhamos"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":77,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":78,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":79,"author":{"gitId":"atyhamos"},"content":"    public LocalDateTime getDateTime(){","lastModifiedDate":"2021-08-23"},{"lineNumber":80,"author":{"gitId":"atyhamos"},"content":"        return this.dateTimeStart;","lastModifiedDate":"2021-08-23"},{"lineNumber":81,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":82,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":83,"author":{"gitId":"atyhamos"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":84,"author":{"gitId":"atyhamos"},"content":"     * Returns a simplified representation of the Event for easier recovery from save file.","lastModifiedDate":"2021-08-23"},{"lineNumber":85,"author":{"gitId":"atyhamos"},"content":"     * @return The file formatted string representation of the Event.","lastModifiedDate":"2021-08-23"},{"lineNumber":86,"author":{"gitId":"atyhamos"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":87,"author":{"gitId":"atyhamos"},"content":"    public String toFileFormat() {","lastModifiedDate":"2021-08-23"},{"lineNumber":88,"author":{"gitId":"atyhamos"},"content":"        return String.format(\"E%s,%s,%s,%s\", name, day, time, isDone);","lastModifiedDate":"2021-08-23"},{"lineNumber":89,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":90,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":91,"author":{"gitId":"atyhamos"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":92,"author":{"gitId":"atyhamos"},"content":"     * Returns a string representation of the Evenr, with an [X] marked for done and [ ] as undone.","lastModifiedDate":"2021-08-23"},{"lineNumber":93,"author":{"gitId":"atyhamos"},"content":"     * @return the string representation of the Event.","lastModifiedDate":"2021-08-23"},{"lineNumber":94,"author":{"gitId":"atyhamos"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":95,"author":{"gitId":"atyhamos"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":96,"author":{"gitId":"atyhamos"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":97,"author":{"gitId":"atyhamos"},"content":"        return \"[E]\" + super.toString()","lastModifiedDate":"2021-08-23"},{"lineNumber":98,"author":{"gitId":"atyhamos"},"content":"                + \" (at: \" + dateTimeStart.format(PRINT_DATE_FORMATTER) + \" to \"","lastModifiedDate":"2021-08-23"},{"lineNumber":99,"author":{"gitId":"atyhamos"},"content":"                    + dateTimeEnd.format(PRINT_DATE_FORMATTER) + \")\";","lastModifiedDate":"2021-08-23"},{"lineNumber":100,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":101,"author":{"gitId":"atyhamos"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"atyhamos":101}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"atyhamos"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"atyhamos"},"content":"/**","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"atyhamos"},"content":" * This class implements a Task to be stored in a DukeList","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"atyhamos"},"content":" *","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"atyhamos"},"content":" * @author Amos Tan","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"atyhamos"},"content":" * @version CS2103T AY21/22 Semester 1","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"atyhamos"},"content":" */","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"atyhamos"},"content":"public abstract class Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"atyhamos"},"content":"    /** The boolean to mark whether a task is completed.*/","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"atyhamos"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"atyhamos"},"content":"    /** The name of the task.*/","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"atyhamos"},"content":"    protected String name;","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"atyhamos"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"atyhamos"},"content":"     * Constructor of the task.","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"atyhamos"},"content":"     * @param name The name of the task.","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"atyhamos"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"atyhamos"},"content":"    public Task(String name)","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"atyhamos"},"content":"    {","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"atyhamos"},"content":"        this.name \u003d name;","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"atyhamos"},"content":"        setDone(false);","lastModifiedDate":"2021-08-18"},{"lineNumber":24,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":25,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":26,"author":{"gitId":"atyhamos"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":27,"author":{"gitId":"atyhamos"},"content":"     * Setter method to set a task as done or undone.","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"atyhamos"},"content":"     * @param doneOrNot The boolean to set the task as.","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"atyhamos"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":30,"author":{"gitId":"atyhamos"},"content":"    public void setDone(boolean doneOrNot)","lastModifiedDate":"2021-08-18"},{"lineNumber":31,"author":{"gitId":"atyhamos"},"content":"    {","lastModifiedDate":"2021-08-18"},{"lineNumber":32,"author":{"gitId":"atyhamos"},"content":"        isDone \u003d doneOrNot;","lastModifiedDate":"2021-08-18"},{"lineNumber":33,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":34,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":35,"author":{"gitId":"atyhamos"},"content":"    public abstract LocalDateTime getDateTime();","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"atyhamos"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":38,"author":{"gitId":"atyhamos"},"content":"     * Returns a simplified representation of the task for easier recovery from save file.","lastModifiedDate":"2021-08-23"},{"lineNumber":39,"author":{"gitId":"atyhamos"},"content":"     * @return The file formatted string representation of the task.","lastModifiedDate":"2021-08-23"},{"lineNumber":40,"author":{"gitId":"atyhamos"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":41,"author":{"gitId":"atyhamos"},"content":"    public abstract String toFileFormat();","lastModifiedDate":"2021-08-23"},{"lineNumber":42,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":43,"author":{"gitId":"atyhamos"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":44,"author":{"gitId":"atyhamos"},"content":"     * Returns a string representation of the task, with an [X] marked for done and [ ] as undone.","lastModifiedDate":"2021-08-23"},{"lineNumber":45,"author":{"gitId":"atyhamos"},"content":"     * @return the string representation of the task.","lastModifiedDate":"2021-08-23"},{"lineNumber":46,"author":{"gitId":"atyhamos"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":47,"author":{"gitId":"atyhamos"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":48,"author":{"gitId":"atyhamos"},"content":"    public String toString()","lastModifiedDate":"2021-08-18"},{"lineNumber":49,"author":{"gitId":"atyhamos"},"content":"    {","lastModifiedDate":"2021-08-18"},{"lineNumber":50,"author":{"gitId":"atyhamos"},"content":"        return String.format(\"[\" + (isDone ? \"X\" : \" \") + \"] \" + name);","lastModifiedDate":"2021-08-18"},{"lineNumber":51,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":52,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":53,"author":{"gitId":"atyhamos"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"atyhamos":53}},{"path":"src/main/java/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"atyhamos"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"atyhamos"},"content":"/**","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"atyhamos"},"content":" * This class implements a DukeList to be used in storing string from Duke","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"atyhamos"},"content":" *","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"atyhamos"},"content":" * @author Amos Tan","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"atyhamos"},"content":" * @version CS2103T AY21/22 Semester 1","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"atyhamos"},"content":" */","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"atyhamos"},"content":"public class ToDo extends Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"atyhamos"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"atyhamos"},"content":"     * Constructs a ToDo.","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"atyhamos"},"content":"     * @param name the name of the todo task","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"atyhamos"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"atyhamos"},"content":"    public ToDo(String name) {","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"atyhamos"},"content":"        super(name);","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"atyhamos"},"content":"\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"atyhamos"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":22,"author":{"gitId":"atyhamos"},"content":"     * Returns a simplified representation of the ToDo for easier recovery from save file.","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"atyhamos"},"content":"     * @return The file formatted string representation of the ToDo.","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"atyhamos"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"atyhamos"},"content":"    public String toFileFormat() {","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"atyhamos"},"content":"        return String.format(\"T%s,%b\", name, isDone);","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"atyhamos"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"atyhamos"},"content":"     * Returns a string representation of the ToDo, with an [X] marked for done and [ ] as undone.","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"atyhamos"},"content":"     * @return the string representation of the ToDo.","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"atyhamos"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"atyhamos"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"atyhamos"},"content":"    public LocalDateTime getDateTime() {","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"atyhamos"},"content":"        return LocalDateTime.MAX;","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"atyhamos"},"content":"\u003e\u003e\u003e\u003e\u003e\u003e\u003e branch-Level-8","lastModifiedDate":"2021-08-23"},{"lineNumber":39,"author":{"gitId":"atyhamos"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":40,"author":{"gitId":"atyhamos"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":41,"author":{"gitId":"atyhamos"},"content":"        return String.format(\"[T]\" + super.toString());","lastModifiedDate":"2021-08-18"},{"lineNumber":42,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":43,"author":{"gitId":"atyhamos"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"atyhamos":43}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"atyhamos"},"content":"todo","lastModifiedDate":"2021-08-18"},{"lineNumber":2,"author":{"gitId":"atyhamos"},"content":"todo borrow book","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"atyhamos"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"atyhamos"},"content":"deadline","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"atyhamos"},"content":"deadline asdas","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"atyhamos"},"content":"deadline return book /by Sunday","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"atyhamos"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"atyhamos"},"content":"event","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"atyhamos"},"content":"event asdas","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"atyhamos"},"content":"event project meeting /at Mon 2-4pm","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"atyhamos"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"atyhamos"},"content":"done","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"atyhamos"},"content":"done 2","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"atyhamos"},"content":"done 1","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"atyhamos"},"content":"done 100","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"atyhamos"},"content":"done 3","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"atyhamos"},"content":"done 3","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"atyhamos"},"content":"done adsad","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"atyhamos"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"atyhamos"},"content":"delete 3","lastModifiedDate":"2021-08-19"},{"lineNumber":21,"author":{"gitId":"atyhamos"},"content":"delete 10","lastModifiedDate":"2021-08-19"},{"lineNumber":22,"author":{"gitId":"atyhamos"},"content":"delete","lastModifiedDate":"2021-08-19"},{"lineNumber":23,"author":{"gitId":"atyhamos"},"content":"delete a","lastModifiedDate":"2021-08-19"},{"lineNumber":24,"author":{"gitId":"atyhamos"},"content":"bye","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"atyhamos":24}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"atyhamos"},"content":"java -classpath ..\\bin Duchess \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"atyhamos"},"content":"pause","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"atyhamos":2,"-":20}}]

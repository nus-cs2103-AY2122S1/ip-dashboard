[{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"atyhamos"},"content":"public class Deadline extends Task{","lastModifiedDate":"2021-08-18"},{"lineNumber":2,"author":{"gitId":"atyhamos"},"content":"    protected String by;","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"atyhamos"},"content":"    public Deadline(String name, String by) {","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"atyhamos"},"content":"        super(name);","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"atyhamos"},"content":"        this.by \u003d by;","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"atyhamos"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"atyhamos"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"atyhamos"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"atyhamos"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"atyhamos":14}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"atyhamos"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-18"},{"lineNumber":2,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"atyhamos"},"content":"/**","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"atyhamos"},"content":" * This class implements a Duke Chatbot variant: Duchess","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"atyhamos"},"content":" *","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"atyhamos"},"content":" * @author Amos Tan","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"atyhamos"},"content":" * @version CS2103T AY21/22 Semester 1","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"atyhamos"},"content":" */","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":11,"author":{"gitId":"atyhamos"},"content":"    /** The horizontal bars to add style in the output.*/","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"atyhamos"},"content":"    private static final String horizontalBars \u003d \"\\n____________________________________________________________\\n\";","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"atyhamos"},"content":"    /** The DukeList which holds the string stored by the user.*/","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"atyhamos"},"content":"    private DukeList dukeList;","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"atyhamos"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"atyhamos"},"content":"     * Constructor for Duke object","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"atyhamos"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"atyhamos"},"content":"    public Duke()","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"atyhamos"},"content":"    {","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"atyhamos"},"content":"        dukeList \u003d new DukeList();","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":25,"author":{"gitId":"atyhamos"},"content":"        Duke duchess \u003d new Duke();","lastModifiedDate":"2021-08-18"},{"lineNumber":26,"author":{"gitId":"atyhamos"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-18"},{"lineNumber":27,"author":{"gitId":"atyhamos"},"content":"        String name \u003d \"Duchess\";","lastModifiedDate":"2021-08-18"},{"lineNumber":28,"author":{"gitId":"atyhamos"},"content":"        prettyPrint(\"Good day. I am \" + name + \"\\nWhat can I do for you?\");","lastModifiedDate":"2021-08-18"},{"lineNumber":29,"author":{"gitId":"atyhamos"},"content":"        duchess.handleInput(sc);","lastModifiedDate":"2021-08-18"},{"lineNumber":30,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":31,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":32,"author":{"gitId":"atyhamos"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":33,"author":{"gitId":"atyhamos"},"content":"     * Prints to System.out fancily including horizontal bars ontop and bottom","lastModifiedDate":"2021-08-18"},{"lineNumber":34,"author":{"gitId":"atyhamos"},"content":"     * @param input string to be printed fancily","lastModifiedDate":"2021-08-18"},{"lineNumber":35,"author":{"gitId":"atyhamos"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":36,"author":{"gitId":"atyhamos"},"content":"    public static void prettyPrint(String input)","lastModifiedDate":"2021-08-18"},{"lineNumber":37,"author":{"gitId":"atyhamos"},"content":"    {","lastModifiedDate":"2021-08-18"},{"lineNumber":38,"author":{"gitId":"atyhamos"},"content":"        System.out.println(horizontalBars + input + horizontalBars);","lastModifiedDate":"2021-08-18"},{"lineNumber":39,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":40,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":41,"author":{"gitId":"atyhamos"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":42,"author":{"gitId":"atyhamos"},"content":"     * Gets input from user and PrettyPrints the corresponding response","lastModifiedDate":"2021-08-18"},{"lineNumber":43,"author":{"gitId":"atyhamos"},"content":"     * @param sc scanner to be reused","lastModifiedDate":"2021-08-18"},{"lineNumber":44,"author":{"gitId":"atyhamos"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":45,"author":{"gitId":"atyhamos"},"content":"    public void handleInput(Scanner sc)","lastModifiedDate":"2021-08-18"},{"lineNumber":46,"author":{"gitId":"atyhamos"},"content":"    {","lastModifiedDate":"2021-08-18"},{"lineNumber":47,"author":{"gitId":"atyhamos"},"content":"        String input \u003d sc.nextLine();","lastModifiedDate":"2021-08-18"},{"lineNumber":48,"author":{"gitId":"atyhamos"},"content":"        if (input.equals(\"bye\")) {","lastModifiedDate":"2021-08-18"},{"lineNumber":49,"author":{"gitId":"atyhamos"},"content":"            prettyPrint(\"I bid thee farewell.\");","lastModifiedDate":"2021-08-18"},{"lineNumber":50,"author":{"gitId":"atyhamos"},"content":"            return;","lastModifiedDate":"2021-08-18"},{"lineNumber":51,"author":{"gitId":"atyhamos"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":52,"author":{"gitId":"atyhamos"},"content":"        else if (input.equals(\"list\"))","lastModifiedDate":"2021-08-18"},{"lineNumber":53,"author":{"gitId":"atyhamos"},"content":"            prettyPrint(dukeList.printList());","lastModifiedDate":"2021-08-18"},{"lineNumber":54,"author":{"gitId":"atyhamos"},"content":"        else if (checkPrefix(input, \"done\"))","lastModifiedDate":"2021-08-18"},{"lineNumber":55,"author":{"gitId":"atyhamos"},"content":"            handleDone(input);","lastModifiedDate":"2021-08-18"},{"lineNumber":56,"author":{"gitId":"atyhamos"},"content":"        else if (checkPrefix(input, \"todo\"))","lastModifiedDate":"2021-08-18"},{"lineNumber":57,"author":{"gitId":"atyhamos"},"content":"            handleTodo(input);","lastModifiedDate":"2021-08-18"},{"lineNumber":58,"author":{"gitId":"atyhamos"},"content":"        else if (checkPrefix(input, \"deadline\"))","lastModifiedDate":"2021-08-18"},{"lineNumber":59,"author":{"gitId":"atyhamos"},"content":"            handleDeadline(input);","lastModifiedDate":"2021-08-18"},{"lineNumber":60,"author":{"gitId":"atyhamos"},"content":"        else if (checkPrefix(input, \"event\"))","lastModifiedDate":"2021-08-18"},{"lineNumber":61,"author":{"gitId":"atyhamos"},"content":"            handleEvent(input);","lastModifiedDate":"2021-08-18"},{"lineNumber":62,"author":{"gitId":"atyhamos"},"content":"        else","lastModifiedDate":"2021-08-18"},{"lineNumber":63,"author":{"gitId":"atyhamos"},"content":"            printError();","lastModifiedDate":"2021-08-18"},{"lineNumber":64,"author":{"gitId":"atyhamos"},"content":"        // Continue to read for inputs unless \"bye\" is called","lastModifiedDate":"2021-08-18"},{"lineNumber":65,"author":{"gitId":"atyhamos"},"content":"        handleInput(sc);","lastModifiedDate":"2021-08-18"},{"lineNumber":66,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":67,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":68,"author":{"gitId":"atyhamos"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":69,"author":{"gitId":"atyhamos"},"content":"     * Handles the logic for marking a task as done","lastModifiedDate":"2021-08-18"},{"lineNumber":70,"author":{"gitId":"atyhamos"},"content":"     * @param input the user given input","lastModifiedDate":"2021-08-18"},{"lineNumber":71,"author":{"gitId":"atyhamos"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":72,"author":{"gitId":"atyhamos"},"content":"    public void handleDone(String input) {","lastModifiedDate":"2021-08-18"},{"lineNumber":73,"author":{"gitId":"atyhamos"},"content":"        String index \u003d input.split(\" \", 2)[1];","lastModifiedDate":"2021-08-18"},{"lineNumber":74,"author":{"gitId":"atyhamos"},"content":"        // Parsing a non-numeric string will throw a NumberFormatException","lastModifiedDate":"2021-08-18"},{"lineNumber":75,"author":{"gitId":"atyhamos"},"content":"        try {","lastModifiedDate":"2021-08-18"},{"lineNumber":76,"author":{"gitId":"atyhamos"},"content":"            if (dukeList.checkWithinRange(Integer.parseInt(index))) {","lastModifiedDate":"2021-08-18"},{"lineNumber":77,"author":{"gitId":"atyhamos"},"content":"                // Valid done task","lastModifiedDate":"2021-08-18"},{"lineNumber":78,"author":{"gitId":"atyhamos"},"content":"                Task task \u003d dukeList.getTask(Integer.parseInt(index));","lastModifiedDate":"2021-08-18"},{"lineNumber":79,"author":{"gitId":"atyhamos"},"content":"                task.setDone(true);","lastModifiedDate":"2021-08-18"},{"lineNumber":80,"author":{"gitId":"atyhamos"},"content":"                prettyPrint(\"Nice! I\u0027ve marked this task as done:   \\n  \" + task);","lastModifiedDate":"2021-08-18"},{"lineNumber":81,"author":{"gitId":"atyhamos"},"content":"            } else {","lastModifiedDate":"2021-08-18"},{"lineNumber":82,"author":{"gitId":"atyhamos"},"content":"                // \"done\" followed by an integer outside of range of the list","lastModifiedDate":"2021-08-18"},{"lineNumber":83,"author":{"gitId":"atyhamos"},"content":"                prettyPrint(\"Apologies, that task does not exist and cannot be marked as done.\");","lastModifiedDate":"2021-08-18"},{"lineNumber":84,"author":{"gitId":"atyhamos"},"content":"            }","lastModifiedDate":"2021-08-18"},{"lineNumber":85,"author":{"gitId":"atyhamos"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-08-18"},{"lineNumber":86,"author":{"gitId":"atyhamos"},"content":"            // \"done\" followed by an invalid non-integer string input","lastModifiedDate":"2021-08-18"},{"lineNumber":87,"author":{"gitId":"atyhamos"},"content":"            prettyPrint(\"The command \\\"done\\\" should be followed by an integer.\");","lastModifiedDate":"2021-08-18"},{"lineNumber":88,"author":{"gitId":"atyhamos"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":89,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":90,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":91,"author":{"gitId":"atyhamos"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":92,"author":{"gitId":"atyhamos"},"content":"     * Handles the logic for checking and creating ToDo tasks","lastModifiedDate":"2021-08-18"},{"lineNumber":93,"author":{"gitId":"atyhamos"},"content":"     * @param input the user given input","lastModifiedDate":"2021-08-18"},{"lineNumber":94,"author":{"gitId":"atyhamos"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":95,"author":{"gitId":"atyhamos"},"content":"    public void handleTodo(String input) {","lastModifiedDate":"2021-08-18"},{"lineNumber":96,"author":{"gitId":"atyhamos"},"content":"        String task \u003d input.split(\" \", 2)[1];","lastModifiedDate":"2021-08-18"},{"lineNumber":97,"author":{"gitId":"atyhamos"},"content":"        // Valid input","lastModifiedDate":"2021-08-18"},{"lineNumber":98,"author":{"gitId":"atyhamos"},"content":"        ToDo todo \u003d new ToDo(task);","lastModifiedDate":"2021-08-18"},{"lineNumber":99,"author":{"gitId":"atyhamos"},"content":"        dukeList.add(todo);","lastModifiedDate":"2021-08-18"},{"lineNumber":100,"author":{"gitId":"atyhamos"},"content":"        int listSize \u003d dukeList.getSize();","lastModifiedDate":"2021-08-18"},{"lineNumber":101,"author":{"gitId":"atyhamos"},"content":"        prettyPrint(\"Understood. I\u0027ve added this task:\\n    \" + todo","lastModifiedDate":"2021-08-18"},{"lineNumber":102,"author":{"gitId":"atyhamos"},"content":"                + \"\\nYou now have \" + listSize","lastModifiedDate":"2021-08-18"},{"lineNumber":103,"author":{"gitId":"atyhamos"},"content":"                    + (listSize \u003e 1 ? \" tasks in the list.\" : \" task in the list.\"));","lastModifiedDate":"2021-08-18"},{"lineNumber":104,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":105,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":106,"author":{"gitId":"atyhamos"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":107,"author":{"gitId":"atyhamos"},"content":"     * Handles the logic for checking and creating Deadline tasks","lastModifiedDate":"2021-08-18"},{"lineNumber":108,"author":{"gitId":"atyhamos"},"content":"     * @param input the user given input","lastModifiedDate":"2021-08-18"},{"lineNumber":109,"author":{"gitId":"atyhamos"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":110,"author":{"gitId":"atyhamos"},"content":"    public void handleDeadline(String input) {","lastModifiedDate":"2021-08-18"},{"lineNumber":111,"author":{"gitId":"atyhamos"},"content":"        String invalidMessage \u003d \"The command \\\"deadline\\\" should be followed by \" +","lastModifiedDate":"2021-08-18"},{"lineNumber":112,"author":{"gitId":"atyhamos"},"content":"                \"a task and a deadline, e.g (read book /by Sunday)\";","lastModifiedDate":"2021-08-18"},{"lineNumber":113,"author":{"gitId":"atyhamos"},"content":"        String taskAndBy \u003d input.split(\" \", 2)[1];","lastModifiedDate":"2021-08-18"},{"lineNumber":114,"author":{"gitId":"atyhamos"},"content":"        if (!taskAndBy.contains(\" /by \")) {","lastModifiedDate":"2021-08-18"},{"lineNumber":115,"author":{"gitId":"atyhamos"},"content":"            prettyPrint(invalidMessage);","lastModifiedDate":"2021-08-18"},{"lineNumber":116,"author":{"gitId":"atyhamos"},"content":"            return;","lastModifiedDate":"2021-08-18"},{"lineNumber":117,"author":{"gitId":"atyhamos"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":118,"author":{"gitId":"atyhamos"},"content":"        String[] taskParts \u003d taskAndBy.split(\" /by \", 2);","lastModifiedDate":"2021-08-18"},{"lineNumber":119,"author":{"gitId":"atyhamos"},"content":"        String checkTask \u003d taskParts[0];","lastModifiedDate":"2021-08-18"},{"lineNumber":120,"author":{"gitId":"atyhamos"},"content":"        String checkBy \u003d taskParts[1];","lastModifiedDate":"2021-08-18"},{"lineNumber":121,"author":{"gitId":"atyhamos"},"content":"        if (checkBy.equals(\"\")) {","lastModifiedDate":"2021-08-18"},{"lineNumber":122,"author":{"gitId":"atyhamos"},"content":"            prettyPrint(invalidMessage);","lastModifiedDate":"2021-08-18"},{"lineNumber":123,"author":{"gitId":"atyhamos"},"content":"            return;","lastModifiedDate":"2021-08-18"},{"lineNumber":124,"author":{"gitId":"atyhamos"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":125,"author":{"gitId":"atyhamos"},"content":"        // Valid input","lastModifiedDate":"2021-08-18"},{"lineNumber":126,"author":{"gitId":"atyhamos"},"content":"        Deadline deadline \u003d new Deadline(checkTask, checkBy);","lastModifiedDate":"2021-08-18"},{"lineNumber":127,"author":{"gitId":"atyhamos"},"content":"        dukeList.add(deadline);","lastModifiedDate":"2021-08-18"},{"lineNumber":128,"author":{"gitId":"atyhamos"},"content":"        int listSize \u003d dukeList.getSize();","lastModifiedDate":"2021-08-18"},{"lineNumber":129,"author":{"gitId":"atyhamos"},"content":"        prettyPrint(\"Understood. I\u0027ve added this task:\\n    \" + deadline","lastModifiedDate":"2021-08-18"},{"lineNumber":130,"author":{"gitId":"atyhamos"},"content":"                + \"\\nYou now have \" + listSize","lastModifiedDate":"2021-08-18"},{"lineNumber":131,"author":{"gitId":"atyhamos"},"content":"                + (listSize \u003e 1 ? \" tasks in the list.\" : \" task in the list.\"));","lastModifiedDate":"2021-08-18"},{"lineNumber":132,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":133,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":134,"author":{"gitId":"atyhamos"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":135,"author":{"gitId":"atyhamos"},"content":"     * Handles the logic for checking and creating Event tasks","lastModifiedDate":"2021-08-18"},{"lineNumber":136,"author":{"gitId":"atyhamos"},"content":"     * @param input the user given input","lastModifiedDate":"2021-08-18"},{"lineNumber":137,"author":{"gitId":"atyhamos"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":138,"author":{"gitId":"atyhamos"},"content":"    public void handleEvent(String input) {","lastModifiedDate":"2021-08-18"},{"lineNumber":139,"author":{"gitId":"atyhamos"},"content":"        String invalidMessage \u003d \"The command \\\"event\\\" should be followed by \" +","lastModifiedDate":"2021-08-18"},{"lineNumber":140,"author":{"gitId":"atyhamos"},"content":"                \"a task and a duration, e.g (meeting /at Mon 2-4pm)\";","lastModifiedDate":"2021-08-18"},{"lineNumber":141,"author":{"gitId":"atyhamos"},"content":"        String taskAndDuration \u003d input.split(\" \", 2)[1];","lastModifiedDate":"2021-08-18"},{"lineNumber":142,"author":{"gitId":"atyhamos"},"content":"        if (!taskAndDuration.contains(\" /at \")) {","lastModifiedDate":"2021-08-18"},{"lineNumber":143,"author":{"gitId":"atyhamos"},"content":"            prettyPrint(invalidMessage);","lastModifiedDate":"2021-08-18"},{"lineNumber":144,"author":{"gitId":"atyhamos"},"content":"            return;","lastModifiedDate":"2021-08-18"},{"lineNumber":145,"author":{"gitId":"atyhamos"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":146,"author":{"gitId":"atyhamos"},"content":"        String[] taskParts \u003d taskAndDuration.split(\" /at \", 2);","lastModifiedDate":"2021-08-18"},{"lineNumber":147,"author":{"gitId":"atyhamos"},"content":"        String task \u003d taskParts[0];","lastModifiedDate":"2021-08-18"},{"lineNumber":148,"author":{"gitId":"atyhamos"},"content":"        String time \u003d taskParts[1];","lastModifiedDate":"2021-08-18"},{"lineNumber":149,"author":{"gitId":"atyhamos"},"content":"        if (!time.contains(\" \")) {","lastModifiedDate":"2021-08-18"},{"lineNumber":150,"author":{"gitId":"atyhamos"},"content":"            prettyPrint(invalidMessage);","lastModifiedDate":"2021-08-18"},{"lineNumber":151,"author":{"gitId":"atyhamos"},"content":"            return;","lastModifiedDate":"2021-08-18"},{"lineNumber":152,"author":{"gitId":"atyhamos"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":153,"author":{"gitId":"atyhamos"},"content":"        String[] timeParts \u003d time.split(\" \", 2);","lastModifiedDate":"2021-08-18"},{"lineNumber":154,"author":{"gitId":"atyhamos"},"content":"        String day \u003d timeParts[0];","lastModifiedDate":"2021-08-18"},{"lineNumber":155,"author":{"gitId":"atyhamos"},"content":"        String duration \u003d timeParts[1];","lastModifiedDate":"2021-08-18"},{"lineNumber":156,"author":{"gitId":"atyhamos"},"content":"        if (!duration.contains(\"-\")) {","lastModifiedDate":"2021-08-18"},{"lineNumber":157,"author":{"gitId":"atyhamos"},"content":"            prettyPrint(invalidMessage);","lastModifiedDate":"2021-08-18"},{"lineNumber":158,"author":{"gitId":"atyhamos"},"content":"            return;","lastModifiedDate":"2021-08-18"},{"lineNumber":159,"author":{"gitId":"atyhamos"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":160,"author":{"gitId":"atyhamos"},"content":"        // Valid input","lastModifiedDate":"2021-08-18"},{"lineNumber":161,"author":{"gitId":"atyhamos"},"content":"        Event event \u003d new Event(task, day, duration);","lastModifiedDate":"2021-08-18"},{"lineNumber":162,"author":{"gitId":"atyhamos"},"content":"        dukeList.add(event);","lastModifiedDate":"2021-08-18"},{"lineNumber":163,"author":{"gitId":"atyhamos"},"content":"        int listSize \u003d dukeList.getSize();","lastModifiedDate":"2021-08-18"},{"lineNumber":164,"author":{"gitId":"atyhamos"},"content":"        prettyPrint(\"Understood. I\u0027ve added this task:\\n    \" + event","lastModifiedDate":"2021-08-18"},{"lineNumber":165,"author":{"gitId":"atyhamos"},"content":"                + \"\\nYou now have \" + listSize","lastModifiedDate":"2021-08-18"},{"lineNumber":166,"author":{"gitId":"atyhamos"},"content":"                + (listSize \u003e 1 ? \" tasks in the list.\" : \" task in the list.\"));","lastModifiedDate":"2021-08-18"},{"lineNumber":167,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":168,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":169,"author":{"gitId":"atyhamos"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":170,"author":{"gitId":"atyhamos"},"content":"     * Prints a message given for invalid inputs","lastModifiedDate":"2021-08-18"},{"lineNumber":171,"author":{"gitId":"atyhamos"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":172,"author":{"gitId":"atyhamos"},"content":"    public void printError()","lastModifiedDate":"2021-08-18"},{"lineNumber":173,"author":{"gitId":"atyhamos"},"content":"    {","lastModifiedDate":"2021-08-18"},{"lineNumber":174,"author":{"gitId":"atyhamos"},"content":"        prettyPrint(\"Apologies, I didn\u0027t catch that.\");","lastModifiedDate":"2021-08-18"},{"lineNumber":175,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":176,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":177,"author":{"gitId":"atyhamos"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":178,"author":{"gitId":"atyhamos"},"content":"     * Checks if a given string is present at the front of another string","lastModifiedDate":"2021-08-18"},{"lineNumber":179,"author":{"gitId":"atyhamos"},"content":"     * @param input the string to be checked against","lastModifiedDate":"2021-08-18"},{"lineNumber":180,"author":{"gitId":"atyhamos"},"content":"     * @param prefix the string to check","lastModifiedDate":"2021-08-18"},{"lineNumber":181,"author":{"gitId":"atyhamos"},"content":"     * @return whether the prefix string at the front of the string","lastModifiedDate":"2021-08-18"},{"lineNumber":182,"author":{"gitId":"atyhamos"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":183,"author":{"gitId":"atyhamos"},"content":"    public boolean checkPrefix(String input, String prefix) {","lastModifiedDate":"2021-08-18"},{"lineNumber":184,"author":{"gitId":"atyhamos"},"content":"        String[] parts \u003d input.split(\" \", 2);","lastModifiedDate":"2021-08-18"},{"lineNumber":185,"author":{"gitId":"atyhamos"},"content":"        String front \u003d parts[0];","lastModifiedDate":"2021-08-18"},{"lineNumber":186,"author":{"gitId":"atyhamos"},"content":"        return front.equals(prefix) \u0026\u0026 parts.length \u003d\u003d 2;","lastModifiedDate":"2021-08-18"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":188,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"atyhamos":184,"-":4}},{"path":"src/main/java/DukeList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"atyhamos"},"content":"/**","lastModifiedDate":"2021-08-18"},{"lineNumber":2,"author":{"gitId":"atyhamos"},"content":" * This class implements a DukeList to be used in storing string from Duke","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"atyhamos"},"content":" *","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"atyhamos"},"content":" * @author Amos Tan","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"atyhamos"},"content":" * @version CS2103T AY21/22 Semester 1","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"atyhamos"},"content":" */","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"atyhamos"},"content":"public class DukeList {","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"atyhamos"},"content":"    /** The array which stores the messages by the user.*/","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"atyhamos"},"content":"    private Task[] itemList;","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"atyhamos"},"content":"    /** The number of elements in the itemList.*/","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"atyhamos"},"content":"    private int size;","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"atyhamos"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"atyhamos"},"content":"     * Constructor for DukeList","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"atyhamos"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"atyhamos"},"content":"    public DukeList()","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"atyhamos"},"content":"    {","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"atyhamos"},"content":"        itemList \u003d new Task[100];","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"atyhamos"},"content":"        size \u003d 0;","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"atyhamos"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":24,"author":{"gitId":"atyhamos"},"content":"     * Adds a string to the back of the DukeList array","lastModifiedDate":"2021-08-18"},{"lineNumber":25,"author":{"gitId":"atyhamos"},"content":"     * @param input the string to be added","lastModifiedDate":"2021-08-18"},{"lineNumber":26,"author":{"gitId":"atyhamos"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":27,"author":{"gitId":"atyhamos"},"content":"    public void add(Task input)","lastModifiedDate":"2021-08-18"},{"lineNumber":28,"author":{"gitId":"atyhamos"},"content":"    {","lastModifiedDate":"2021-08-18"},{"lineNumber":29,"author":{"gitId":"atyhamos"},"content":"        itemList[size++] \u003d input;","lastModifiedDate":"2021-08-18"},{"lineNumber":30,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":31,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":32,"author":{"gitId":"atyhamos"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":33,"author":{"gitId":"atyhamos"},"content":"     * Prints the items in the DukeList in order","lastModifiedDate":"2021-08-18"},{"lineNumber":34,"author":{"gitId":"atyhamos"},"content":"     * @return string of printed items in a list","lastModifiedDate":"2021-08-18"},{"lineNumber":35,"author":{"gitId":"atyhamos"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":36,"author":{"gitId":"atyhamos"},"content":"    public String printList()","lastModifiedDate":"2021-08-18"},{"lineNumber":37,"author":{"gitId":"atyhamos"},"content":"    {","lastModifiedDate":"2021-08-18"},{"lineNumber":38,"author":{"gitId":"atyhamos"},"content":"        String printed \u003d \"\";","lastModifiedDate":"2021-08-18"},{"lineNumber":39,"author":{"gitId":"atyhamos"},"content":"        for (int i \u003d 0; i \u003c size; i++)","lastModifiedDate":"2021-08-18"},{"lineNumber":40,"author":{"gitId":"atyhamos"},"content":"        {","lastModifiedDate":"2021-08-18"},{"lineNumber":41,"author":{"gitId":"atyhamos"},"content":"            printed +\u003d String.format(\"%d. \" + itemList[i] + (i \u003d\u003d size - 1 ? \"\" : \"\\n\"), i + 1);","lastModifiedDate":"2021-08-18"},{"lineNumber":42,"author":{"gitId":"atyhamos"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":43,"author":{"gitId":"atyhamos"},"content":"        return printed;","lastModifiedDate":"2021-08-18"},{"lineNumber":44,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":45,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":46,"author":{"gitId":"atyhamos"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":47,"author":{"gitId":"atyhamos"},"content":"     * Checks if the item number is within range of the list\u0027s items","lastModifiedDate":"2021-08-18"},{"lineNumber":48,"author":{"gitId":"atyhamos"},"content":"     * @param listNumber the item number (not array index) to be checked","lastModifiedDate":"2021-08-18"},{"lineNumber":49,"author":{"gitId":"atyhamos"},"content":"     * @return boolean of whether the number is within the list\u0027s range","lastModifiedDate":"2021-08-18"},{"lineNumber":50,"author":{"gitId":"atyhamos"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":51,"author":{"gitId":"atyhamos"},"content":"    public boolean checkWithinRange(int listNumber)","lastModifiedDate":"2021-08-18"},{"lineNumber":52,"author":{"gitId":"atyhamos"},"content":"    {","lastModifiedDate":"2021-08-18"},{"lineNumber":53,"author":{"gitId":"atyhamos"},"content":"        return 0 \u003c listNumber \u0026\u0026 listNumber \u003c\u003d size;","lastModifiedDate":"2021-08-18"},{"lineNumber":54,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":55,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":56,"author":{"gitId":"atyhamos"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":57,"author":{"gitId":"atyhamos"},"content":"     * Returns the item at the list number","lastModifiedDate":"2021-08-18"},{"lineNumber":58,"author":{"gitId":"atyhamos"},"content":"     * @param listNumber the item number whose item is to be returned","lastModifiedDate":"2021-08-18"},{"lineNumber":59,"author":{"gitId":"atyhamos"},"content":"     * @return the item at the list number","lastModifiedDate":"2021-08-18"},{"lineNumber":60,"author":{"gitId":"atyhamos"},"content":"     * @throws IllegalArgumentException only accepts integers whose values are within range of the array","lastModifiedDate":"2021-08-18"},{"lineNumber":61,"author":{"gitId":"atyhamos"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":62,"author":{"gitId":"atyhamos"},"content":"    public Task getTask(int listNumber) throws IllegalArgumentException","lastModifiedDate":"2021-08-18"},{"lineNumber":63,"author":{"gitId":"atyhamos"},"content":"    {","lastModifiedDate":"2021-08-18"},{"lineNumber":64,"author":{"gitId":"atyhamos"},"content":"        if (checkWithinRange(listNumber))","lastModifiedDate":"2021-08-18"},{"lineNumber":65,"author":{"gitId":"atyhamos"},"content":"            return itemList[listNumber - 1]; // -1 due to difference between item list number and array indexes","lastModifiedDate":"2021-08-18"},{"lineNumber":66,"author":{"gitId":"atyhamos"},"content":"        else","lastModifiedDate":"2021-08-18"},{"lineNumber":67,"author":{"gitId":"atyhamos"},"content":"            throw new IllegalArgumentException(\"Task index is not within range.\"); // Not within range","lastModifiedDate":"2021-08-18"},{"lineNumber":68,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":69,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":70,"author":{"gitId":"atyhamos"},"content":"    public int getSize() {","lastModifiedDate":"2021-08-18"},{"lineNumber":71,"author":{"gitId":"atyhamos"},"content":"        return this.size;","lastModifiedDate":"2021-08-18"},{"lineNumber":72,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":73,"author":{"gitId":"atyhamos"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"atyhamos":73}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"atyhamos"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":2,"author":{"gitId":"atyhamos"},"content":"    protected String day;","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"atyhamos"},"content":"    protected String time;","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"atyhamos"},"content":"    public Event(String name, String day, String time) {","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"atyhamos"},"content":"        super(name);","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"atyhamos"},"content":"        this.day \u003d day;","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"atyhamos"},"content":"        this.time \u003d time;","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"atyhamos"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"atyhamos"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"atyhamos"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + day + \" \" + time + \")\";","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"atyhamos"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"atyhamos":16}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"atyhamos"},"content":"/**","lastModifiedDate":"2021-08-18"},{"lineNumber":2,"author":{"gitId":"atyhamos"},"content":" * This class implements a Task to be stored in a DukeList","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"atyhamos"},"content":" *","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"atyhamos"},"content":" * @author Amos Tan","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"atyhamos"},"content":" * @version CS2103T AY21/22 Semester 1","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"atyhamos"},"content":" */","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"atyhamos"},"content":"public abstract class Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"atyhamos"},"content":"    /** The boolean to mark whether a task is completed.*/","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"atyhamos"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"atyhamos"},"content":"    /** The name of the task */","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"atyhamos"},"content":"    protected String name;","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"atyhamos"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"atyhamos"},"content":"     * Constructor of the task","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"atyhamos"},"content":"     * @param name name of the task","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"atyhamos"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"atyhamos"},"content":"    public Task(String name)","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"atyhamos"},"content":"    {","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"atyhamos"},"content":"        this.name \u003d name;","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"atyhamos"},"content":"        setDone(false);","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":24,"author":{"gitId":"atyhamos"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":25,"author":{"gitId":"atyhamos"},"content":"     * Setter method to set a task as done or undone","lastModifiedDate":"2021-08-18"},{"lineNumber":26,"author":{"gitId":"atyhamos"},"content":"     * @param doneOrNot the boolean to set the task as","lastModifiedDate":"2021-08-18"},{"lineNumber":27,"author":{"gitId":"atyhamos"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":28,"author":{"gitId":"atyhamos"},"content":"    public void setDone(boolean doneOrNot)","lastModifiedDate":"2021-08-18"},{"lineNumber":29,"author":{"gitId":"atyhamos"},"content":"    {","lastModifiedDate":"2021-08-18"},{"lineNumber":30,"author":{"gitId":"atyhamos"},"content":"        isDone \u003d doneOrNot;","lastModifiedDate":"2021-08-18"},{"lineNumber":31,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":32,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":33,"author":{"gitId":"atyhamos"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":34,"author":{"gitId":"atyhamos"},"content":"     * Returns a string representation of the task, with an [X] marked for done and [ ] as undone","lastModifiedDate":"2021-08-18"},{"lineNumber":35,"author":{"gitId":"atyhamos"},"content":"     * @return the string representation of the task","lastModifiedDate":"2021-08-18"},{"lineNumber":36,"author":{"gitId":"atyhamos"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":37,"author":{"gitId":"atyhamos"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":38,"author":{"gitId":"atyhamos"},"content":"    public String toString()","lastModifiedDate":"2021-08-18"},{"lineNumber":39,"author":{"gitId":"atyhamos"},"content":"    {","lastModifiedDate":"2021-08-18"},{"lineNumber":40,"author":{"gitId":"atyhamos"},"content":"        return String.format(\"[\" + (isDone ? \"X\" : \" \") + \"] \" + name);","lastModifiedDate":"2021-08-18"},{"lineNumber":41,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":42,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":43,"author":{"gitId":"atyhamos"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"atyhamos":43}},{"path":"src/main/java/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"atyhamos"},"content":"public class ToDo extends Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":2,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"atyhamos"},"content":"    public ToDo(String name) {","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"atyhamos"},"content":"        super(name);","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"atyhamos"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"atyhamos"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"atyhamos"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"atyhamos"},"content":"        return String.format(\"[T]\" + super.toString());","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"atyhamos"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"atyhamos"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"atyhamos":11}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"atyhamos"},"content":"todo","lastModifiedDate":"2021-08-18"},{"lineNumber":2,"author":{"gitId":"atyhamos"},"content":"todo borrow book","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"atyhamos"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"atyhamos"},"content":"deadline","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"atyhamos"},"content":"deadline asdas","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"atyhamos"},"content":"deadline return book /by Sunday","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"atyhamos"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"atyhamos"},"content":"event","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"atyhamos"},"content":"event asdas","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"atyhamos"},"content":"event project meeting /at Mon 2-4pm","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"atyhamos"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"atyhamos"},"content":"done","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"atyhamos"},"content":"done 2","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"atyhamos"},"content":"done 1","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"atyhamos"},"content":"done 100","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"atyhamos"},"content":"done 3","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"atyhamos"},"content":"done 3","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"atyhamos"},"content":"done adsad","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"atyhamos"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"atyhamos"},"content":"bye","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"atyhamos":20}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"atyhamos"},"content":"pause","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"atyhamos":1,"-":21}}]

[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"wlren"},"content":"# duke.Duke project template","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"wlren"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"wlren":2,"-":22}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"wlren"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2021-09-20"},{"lineNumber":16,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":17,"author":{"gitId":"wlren"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-20"},{"lineNumber":18,"author":{"gitId":"wlren"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-20"},{"lineNumber":19,"author":{"gitId":"wlren"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-20"},{"lineNumber":20,"author":{"gitId":"wlren"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-20"},{"lineNumber":21,"author":{"gitId":"wlren"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-20"},{"lineNumber":22,"author":{"gitId":"wlren"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-20"},{"lineNumber":23,"author":{"gitId":"wlren"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-20"},{"lineNumber":24,"author":{"gitId":"wlren"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-20"},{"lineNumber":25,"author":{"gitId":"wlren"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-20"},{"lineNumber":26,"author":{"gitId":"wlren"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-20"},{"lineNumber":27,"author":{"gitId":"wlren"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-20"},{"lineNumber":28,"author":{"gitId":"wlren"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"wlren"},"content":"    mainClassName \u003d \"duke.Launcher\"","lastModifiedDate":"2021-09-20"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"wlren"},"content":"    sourceSets \u003d []","lastModifiedDate":"2021-09-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":61,"author":{"gitId":"wlren"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2021-09-20"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"wlren":17,"-":45}},{"path":"src/main/java/duke/CommandType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wlren"},"content":"package duke;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"wlren"},"content":"/**","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"wlren"},"content":" * Respective enum representation of types of commands that user has access to.","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"wlren"},"content":" */","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"wlren"},"content":"public enum CommandType {","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"wlren"},"content":"    Exit,","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"wlren"},"content":"    List,","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"wlren"},"content":"    MarkAsDone,","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"wlren"},"content":"    DeleteTask,","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"wlren"},"content":"    Find,","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"wlren"},"content":"    Error,","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"wlren"},"content":"    AddToDo,","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"wlren"},"content":"    AddDeadline,","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"wlren"},"content":"    AddEvent,","lastModifiedDate":"2021-09-20"},{"lineNumber":16,"author":{"gitId":"wlren"},"content":"    Archive","lastModifiedDate":"2021-09-20"},{"lineNumber":17,"author":{"gitId":"wlren"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"wlren":17}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wlren"},"content":"package duke;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"wlren"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"wlren"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"wlren"},"content":"import java.time.format.FormatStyle;","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"wlren"},"content":"/**","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"wlren"},"content":" * Represents a task with a specific deadline to be completed by.","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"wlren"},"content":" */","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"wlren"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"wlren"},"content":"    protected LocalDate deadline;","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"wlren"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"wlren"},"content":"     * Constructor for deadline task.","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"wlren"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"wlren"},"content":"     * @param description The string description of deadline.","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"wlren"},"content":"     * @param deadline The LocalDate of a specific day.","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"wlren"},"content":"     * @param isDone The completion status of the task.","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"wlren"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"wlren"},"content":"    public Deadline(String description, LocalDate deadline, boolean isDone) {","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"wlren"},"content":"        super(description, isDone);","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"wlren"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"wlren"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"wlren"},"content":"    private String formatDate() {","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"wlren"},"content":"        return deadline.format(DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM));","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"wlren"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":28,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":29,"author":{"gitId":"wlren"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":30,"author":{"gitId":"wlren"},"content":"     * Represents deadline task as a String object.","lastModifiedDate":"2021-09-20"},{"lineNumber":31,"author":{"gitId":"wlren"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":32,"author":{"gitId":"wlren"},"content":"     * @return String form of deadline task.","lastModifiedDate":"2021-08-28"},{"lineNumber":33,"author":{"gitId":"wlren"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":34,"author":{"gitId":"wlren"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":35,"author":{"gitId":"wlren"},"content":"    public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":36,"author":{"gitId":"wlren"},"content":"        return \"[D]\" + super.toString() + \"(by: \" + formatDate() + \")\";","lastModifiedDate":"2021-08-28"},{"lineNumber":37,"author":{"gitId":"wlren"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":38,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":39,"author":{"gitId":"wlren"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":40,"author":{"gitId":"wlren"},"content":"     * Creates a Deadline task from given task string.","lastModifiedDate":"2021-09-20"},{"lineNumber":41,"author":{"gitId":"wlren"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":42,"author":{"gitId":"wlren"},"content":"     * @return Deadline task.","lastModifiedDate":"2021-09-20"},{"lineNumber":43,"author":{"gitId":"wlren"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":44,"author":{"gitId":"wlren"},"content":"    public static Deadline create(String taskString, boolean isDone) {","lastModifiedDate":"2021-09-20"},{"lineNumber":45,"author":{"gitId":"wlren"},"content":"        int timeStart \u003d taskString.indexOf(\"by: \");","lastModifiedDate":"2021-09-20"},{"lineNumber":46,"author":{"gitId":"wlren"},"content":"        String description \u003d taskString.substring(7, timeStart - 2) + \" \";","lastModifiedDate":"2021-09-20"},{"lineNumber":47,"author":{"gitId":"wlren"},"content":"        String dateTime \u003d taskString.substring(timeStart + 4, taskString.length() - 1);","lastModifiedDate":"2021-09-20"},{"lineNumber":48,"author":{"gitId":"wlren"},"content":"        LocalDate date \u003d LocalDate.parse(dateTime, DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM));","lastModifiedDate":"2021-09-20"},{"lineNumber":49,"author":{"gitId":"wlren"},"content":"        return new Deadline(description, date, isDone);","lastModifiedDate":"2021-09-20"},{"lineNumber":50,"author":{"gitId":"wlren"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":51,"author":{"gitId":"wlren"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"wlren":51}},{"path":"src/main/java/duke/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wlren"},"content":"package duke;","lastModifiedDate":"2021-09-20"},{"lineNumber":2,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":3,"author":{"gitId":"wlren"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-20"},{"lineNumber":4,"author":{"gitId":"wlren"},"content":"import java.util.Collections;","lastModifiedDate":"2021-09-20"},{"lineNumber":5,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":6,"author":{"gitId":"wlren"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-09-20"},{"lineNumber":7,"author":{"gitId":"wlren"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-09-20"},{"lineNumber":8,"author":{"gitId":"wlren"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-09-20"},{"lineNumber":9,"author":{"gitId":"wlren"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-09-20"},{"lineNumber":10,"author":{"gitId":"wlren"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2021-09-20"},{"lineNumber":11,"author":{"gitId":"wlren"},"content":"import javafx.scene.Node;","lastModifiedDate":"2021-09-20"},{"lineNumber":12,"author":{"gitId":"wlren"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-09-20"},{"lineNumber":13,"author":{"gitId":"wlren"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-09-20"},{"lineNumber":14,"author":{"gitId":"wlren"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2021-09-20"},{"lineNumber":15,"author":{"gitId":"wlren"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2021-09-20"},{"lineNumber":16,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":17,"author":{"gitId":"wlren"},"content":"/**","lastModifiedDate":"2021-09-20"},{"lineNumber":18,"author":{"gitId":"wlren"},"content":" * A custom control using FXML.","lastModifiedDate":"2021-09-20"},{"lineNumber":19,"author":{"gitId":"wlren"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2021-09-20"},{"lineNumber":20,"author":{"gitId":"wlren"},"content":" * containing text from the speaker.","lastModifiedDate":"2021-09-20"},{"lineNumber":21,"author":{"gitId":"wlren"},"content":" */","lastModifiedDate":"2021-09-20"},{"lineNumber":22,"author":{"gitId":"wlren"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2021-09-20"},{"lineNumber":23,"author":{"gitId":"wlren"},"content":"    @FXML","lastModifiedDate":"2021-09-20"},{"lineNumber":24,"author":{"gitId":"wlren"},"content":"    private Label dialog;","lastModifiedDate":"2021-09-20"},{"lineNumber":25,"author":{"gitId":"wlren"},"content":"    @FXML","lastModifiedDate":"2021-09-20"},{"lineNumber":26,"author":{"gitId":"wlren"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2021-09-20"},{"lineNumber":27,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":28,"author":{"gitId":"wlren"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2021-09-20"},{"lineNumber":29,"author":{"gitId":"wlren"},"content":"        try {","lastModifiedDate":"2021-09-20"},{"lineNumber":30,"author":{"gitId":"wlren"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2021-09-20"},{"lineNumber":31,"author":{"gitId":"wlren"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2021-09-20"},{"lineNumber":32,"author":{"gitId":"wlren"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2021-09-20"},{"lineNumber":33,"author":{"gitId":"wlren"},"content":"            fxmlLoader.load();","lastModifiedDate":"2021-09-20"},{"lineNumber":34,"author":{"gitId":"wlren"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-20"},{"lineNumber":35,"author":{"gitId":"wlren"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-09-20"},{"lineNumber":36,"author":{"gitId":"wlren"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":37,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":38,"author":{"gitId":"wlren"},"content":"        dialog.setText(text);","lastModifiedDate":"2021-09-20"},{"lineNumber":39,"author":{"gitId":"wlren"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2021-09-20"},{"lineNumber":40,"author":{"gitId":"wlren"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":41,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":42,"author":{"gitId":"wlren"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":43,"author":{"gitId":"wlren"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2021-09-20"},{"lineNumber":44,"author":{"gitId":"wlren"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":45,"author":{"gitId":"wlren"},"content":"    private void flip() {","lastModifiedDate":"2021-09-20"},{"lineNumber":46,"author":{"gitId":"wlren"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2021-09-20"},{"lineNumber":47,"author":{"gitId":"wlren"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2021-09-20"},{"lineNumber":48,"author":{"gitId":"wlren"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2021-09-20"},{"lineNumber":49,"author":{"gitId":"wlren"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2021-09-20"},{"lineNumber":50,"author":{"gitId":"wlren"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":51,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":52,"author":{"gitId":"wlren"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":53,"author":{"gitId":"wlren"},"content":"     * Returns a dialog box GUI Node based on user input.","lastModifiedDate":"2021-09-20"},{"lineNumber":54,"author":{"gitId":"wlren"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":55,"author":{"gitId":"wlren"},"content":"     * @param text User input.","lastModifiedDate":"2021-09-20"},{"lineNumber":56,"author":{"gitId":"wlren"},"content":"     * @param img Icon representing user.","lastModifiedDate":"2021-09-20"},{"lineNumber":57,"author":{"gitId":"wlren"},"content":"     * @return GUI node for user chat.","lastModifiedDate":"2021-09-20"},{"lineNumber":58,"author":{"gitId":"wlren"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":59,"author":{"gitId":"wlren"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2021-09-20"},{"lineNumber":60,"author":{"gitId":"wlren"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2021-09-20"},{"lineNumber":61,"author":{"gitId":"wlren"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":62,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":63,"author":{"gitId":"wlren"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":64,"author":{"gitId":"wlren"},"content":"     * Returns a dialog box GUI Node based on Duke output.","lastModifiedDate":"2021-09-20"},{"lineNumber":65,"author":{"gitId":"wlren"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":66,"author":{"gitId":"wlren"},"content":"     * @param text Duke\u0027s string response.","lastModifiedDate":"2021-09-20"},{"lineNumber":67,"author":{"gitId":"wlren"},"content":"     * @param img Icon representing Duke.","lastModifiedDate":"2021-09-20"},{"lineNumber":68,"author":{"gitId":"wlren"},"content":"     * @return GUi node for Duke chat.","lastModifiedDate":"2021-09-20"},{"lineNumber":69,"author":{"gitId":"wlren"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":70,"author":{"gitId":"wlren"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2021-09-20"},{"lineNumber":71,"author":{"gitId":"wlren"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2021-09-20"},{"lineNumber":72,"author":{"gitId":"wlren"},"content":"        db.flip();","lastModifiedDate":"2021-09-20"},{"lineNumber":73,"author":{"gitId":"wlren"},"content":"        return db;","lastModifiedDate":"2021-09-20"},{"lineNumber":74,"author":{"gitId":"wlren"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":75,"author":{"gitId":"wlren"},"content":"}","lastModifiedDate":"2021-09-20"}],"authorContributionMap":{"wlren":75}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wlren"},"content":"package duke;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"wlren"},"content":"/**","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"wlren"},"content":" * Runs the initialization process for Duke chatbot for IP of CS2103 2021.","lastModifiedDate":"2021-09-20"},{"lineNumber":5,"author":{"gitId":"wlren"},"content":" */","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"wlren"},"content":"public class Duke {","lastModifiedDate":"2021-09-20"},{"lineNumber":7,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":8,"author":{"gitId":"wlren"},"content":"    private final UI userInterface;","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"wlren"},"content":"    private final Parser parser;","lastModifiedDate":"2021-09-20"},{"lineNumber":10,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":11,"author":{"gitId":"wlren"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"wlren"},"content":"     * Initializes the necessary components for Duke to function.","lastModifiedDate":"2021-09-20"},{"lineNumber":13,"author":{"gitId":"wlren"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"wlren"},"content":"    public Duke() {","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"wlren"},"content":"        parser \u003d new Parser();","lastModifiedDate":"2021-09-20"},{"lineNumber":16,"author":{"gitId":"wlren"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2021-09-20"},{"lineNumber":17,"author":{"gitId":"wlren"},"content":"        Storage storage \u003d new Storage(taskList);","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"wlren"},"content":"        userInterface \u003d new UI(parser, storage, taskList);","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"wlren"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":20,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":21,"author":{"gitId":"wlren"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":22,"author":{"gitId":"wlren"},"content":"     * Runs Duke logic through parser to get string response from UI.","lastModifiedDate":"2021-09-20"},{"lineNumber":23,"author":{"gitId":"wlren"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":24,"author":{"gitId":"wlren"},"content":"     * @param input String command by user.","lastModifiedDate":"2021-09-20"},{"lineNumber":25,"author":{"gitId":"wlren"},"content":"     * @return Duke response to be sent to GUI components to be generated.","lastModifiedDate":"2021-09-20"},{"lineNumber":26,"author":{"gitId":"wlren"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":27,"author":{"gitId":"wlren"},"content":"    public String getResponse(String input) {","lastModifiedDate":"2021-09-20"},{"lineNumber":28,"author":{"gitId":"wlren"},"content":"        CommandType command \u003d this.parser.nextCommand(input);","lastModifiedDate":"2021-09-20"},{"lineNumber":29,"author":{"gitId":"wlren"},"content":"        try {","lastModifiedDate":"2021-09-20"},{"lineNumber":30,"author":{"gitId":"wlren"},"content":"            return this.userInterface.takeInput(command);","lastModifiedDate":"2021-09-20"},{"lineNumber":31,"author":{"gitId":"wlren"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-09-20"},{"lineNumber":32,"author":{"gitId":"wlren"},"content":"            return e.getMessage();","lastModifiedDate":"2021-09-20"},{"lineNumber":33,"author":{"gitId":"wlren"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":34,"author":{"gitId":"wlren"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"wlren":34,"-":1}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wlren"},"content":"package duke;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"wlren"},"content":"/**","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"wlren"},"content":" * Basic unique exception for Duke chatbot.","lastModifiedDate":"2021-09-20"},{"lineNumber":5,"author":{"gitId":"wlren"},"content":" */","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"wlren"},"content":"public class DukeException extends RuntimeException{","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"wlren"},"content":"    public DukeException(String msg) {","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"wlren"},"content":"        super(msg);","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"wlren"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"wlren"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"wlren":10}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wlren"},"content":"package duke;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"wlren"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"wlren"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"wlren"},"content":"import java.time.format.FormatStyle;","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"wlren"},"content":"/**","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"wlren"},"content":" * Represents a task with a specific date which it is occurring.","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"wlren"},"content":" */","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"wlren"},"content":"public class Event extends Task{","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"wlren"},"content":"    protected LocalDate eventDate;","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"wlren"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"wlren"},"content":"     * Constructor for event task.","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"wlren"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"wlren"},"content":"     * @param description The string description of event.","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"wlren"},"content":"     * @param eventDate The LocalDate of a specific day.","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"wlren"},"content":"     * @param isDone The completion status of the task.","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"wlren"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"wlren"},"content":"    public Event(String description, LocalDate eventDate, boolean isDone) {","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"wlren"},"content":"        super(description, isDone);","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"wlren"},"content":"        this.eventDate \u003d eventDate;","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"wlren"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"wlren"},"content":"    private String formatDate() {","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"wlren"},"content":"        return eventDate.format(DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM));","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"wlren"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":28,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":29,"author":{"gitId":"wlren"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":30,"author":{"gitId":"wlren"},"content":"     * Represents event task as a String object.","lastModifiedDate":"2021-09-20"},{"lineNumber":31,"author":{"gitId":"wlren"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":32,"author":{"gitId":"wlren"},"content":"     * @return String form of event task.","lastModifiedDate":"2021-08-28"},{"lineNumber":33,"author":{"gitId":"wlren"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":34,"author":{"gitId":"wlren"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":35,"author":{"gitId":"wlren"},"content":"    public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":36,"author":{"gitId":"wlren"},"content":"        return \"[E]\" + super.toString() + \"(at: \" + formatDate() + \")\";","lastModifiedDate":"2021-08-28"},{"lineNumber":37,"author":{"gitId":"wlren"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":38,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":39,"author":{"gitId":"wlren"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":40,"author":{"gitId":"wlren"},"content":"     * Creates an Event task from given task string.","lastModifiedDate":"2021-09-20"},{"lineNumber":41,"author":{"gitId":"wlren"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":42,"author":{"gitId":"wlren"},"content":"     * @return Event task.","lastModifiedDate":"2021-09-20"},{"lineNumber":43,"author":{"gitId":"wlren"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":44,"author":{"gitId":"wlren"},"content":"    public static Event create(String taskString, boolean isDone) {","lastModifiedDate":"2021-09-20"},{"lineNumber":45,"author":{"gitId":"wlren"},"content":"        int timeStart \u003d taskString.indexOf(\"at: \");","lastModifiedDate":"2021-09-20"},{"lineNumber":46,"author":{"gitId":"wlren"},"content":"        String description \u003d taskString.substring(7, timeStart - 2) + \" \";","lastModifiedDate":"2021-09-20"},{"lineNumber":47,"author":{"gitId":"wlren"},"content":"        String dateTime \u003d taskString.substring(timeStart + 4, taskString.length() - 1);","lastModifiedDate":"2021-09-20"},{"lineNumber":48,"author":{"gitId":"wlren"},"content":"        LocalDate date \u003d LocalDate.parse(dateTime, DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM));","lastModifiedDate":"2021-09-20"},{"lineNumber":49,"author":{"gitId":"wlren"},"content":"        return new Event(description, date, isDone);","lastModifiedDate":"2021-09-20"},{"lineNumber":50,"author":{"gitId":"wlren"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":51,"author":{"gitId":"wlren"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"wlren":51}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wlren"},"content":"package duke;","lastModifiedDate":"2021-09-20"},{"lineNumber":2,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":3,"author":{"gitId":"wlren"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-09-20"},{"lineNumber":4,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":5,"author":{"gitId":"wlren"},"content":"/**","lastModifiedDate":"2021-09-20"},{"lineNumber":6,"author":{"gitId":"wlren"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2021-09-20"},{"lineNumber":7,"author":{"gitId":"wlren"},"content":" */","lastModifiedDate":"2021-09-20"},{"lineNumber":8,"author":{"gitId":"wlren"},"content":"public class Launcher {","lastModifiedDate":"2021-09-20"},{"lineNumber":9,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":10,"author":{"gitId":"wlren"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-09-20"},{"lineNumber":11,"author":{"gitId":"wlren"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2021-09-20"},{"lineNumber":12,"author":{"gitId":"wlren"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":13,"author":{"gitId":"wlren"},"content":"}","lastModifiedDate":"2021-09-20"}],"authorContributionMap":{"wlren":13}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wlren"},"content":"package duke;","lastModifiedDate":"2021-09-20"},{"lineNumber":2,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":3,"author":{"gitId":"wlren"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-20"},{"lineNumber":4,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":5,"author":{"gitId":"wlren"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-09-20"},{"lineNumber":6,"author":{"gitId":"wlren"},"content":"import javafx.application.Platform;","lastModifiedDate":"2021-09-20"},{"lineNumber":7,"author":{"gitId":"wlren"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-09-20"},{"lineNumber":8,"author":{"gitId":"wlren"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2021-09-20"},{"lineNumber":9,"author":{"gitId":"wlren"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-09-20"},{"lineNumber":10,"author":{"gitId":"wlren"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2021-09-20"},{"lineNumber":11,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":12,"author":{"gitId":"wlren"},"content":"/**","lastModifiedDate":"2021-09-20"},{"lineNumber":13,"author":{"gitId":"wlren"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2021-09-20"},{"lineNumber":14,"author":{"gitId":"wlren"},"content":" */","lastModifiedDate":"2021-09-20"},{"lineNumber":15,"author":{"gitId":"wlren"},"content":"public class Main extends Application {","lastModifiedDate":"2021-09-20"},{"lineNumber":16,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":17,"author":{"gitId":"wlren"},"content":"    private final Duke duke \u003d new Duke();","lastModifiedDate":"2021-09-20"},{"lineNumber":18,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":19,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":20,"author":{"gitId":"wlren"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":21,"author":{"gitId":"wlren"},"content":"     * Executes the initialization of GUI window for Duke Chatbot.","lastModifiedDate":"2021-09-20"},{"lineNumber":22,"author":{"gitId":"wlren"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":23,"author":{"gitId":"wlren"},"content":"     * @param stage Stage for the pane of DukeBot to take as parent.","lastModifiedDate":"2021-09-20"},{"lineNumber":24,"author":{"gitId":"wlren"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":25,"author":{"gitId":"wlren"},"content":"    @Override","lastModifiedDate":"2021-09-20"},{"lineNumber":26,"author":{"gitId":"wlren"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2021-09-20"},{"lineNumber":27,"author":{"gitId":"wlren"},"content":"        try {","lastModifiedDate":"2021-09-20"},{"lineNumber":28,"author":{"gitId":"wlren"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2021-09-20"},{"lineNumber":29,"author":{"gitId":"wlren"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2021-09-20"},{"lineNumber":30,"author":{"gitId":"wlren"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2021-09-20"},{"lineNumber":31,"author":{"gitId":"wlren"},"content":"            stage.setScene(scene);","lastModifiedDate":"2021-09-20"},{"lineNumber":32,"author":{"gitId":"wlren"},"content":"            stage.setTitle(\"DukeBob\");","lastModifiedDate":"2021-09-20"},{"lineNumber":33,"author":{"gitId":"wlren"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2021-09-20"},{"lineNumber":34,"author":{"gitId":"wlren"},"content":"            stage.show();","lastModifiedDate":"2021-09-20"},{"lineNumber":35,"author":{"gitId":"wlren"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-20"},{"lineNumber":36,"author":{"gitId":"wlren"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-09-20"},{"lineNumber":37,"author":{"gitId":"wlren"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":38,"author":{"gitId":"wlren"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":39,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":40,"author":{"gitId":"wlren"},"content":"    public static void exit() {","lastModifiedDate":"2021-09-20"},{"lineNumber":41,"author":{"gitId":"wlren"},"content":"        Platform.exit();","lastModifiedDate":"2021-09-20"},{"lineNumber":42,"author":{"gitId":"wlren"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":43,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":44,"author":{"gitId":"wlren"},"content":"}","lastModifiedDate":"2021-09-20"}],"authorContributionMap":{"wlren":44}},{"path":"src/main/java/duke/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wlren"},"content":"package duke;","lastModifiedDate":"2021-09-20"},{"lineNumber":2,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":3,"author":{"gitId":"wlren"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-09-20"},{"lineNumber":4,"author":{"gitId":"wlren"},"content":"import javafx.scene.Node;","lastModifiedDate":"2021-09-20"},{"lineNumber":5,"author":{"gitId":"wlren"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2021-09-20"},{"lineNumber":6,"author":{"gitId":"wlren"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2021-09-20"},{"lineNumber":7,"author":{"gitId":"wlren"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2021-09-20"},{"lineNumber":8,"author":{"gitId":"wlren"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-09-20"},{"lineNumber":9,"author":{"gitId":"wlren"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-09-20"},{"lineNumber":10,"author":{"gitId":"wlren"},"content":"import javafx.scene.layout.Priority;","lastModifiedDate":"2021-09-20"},{"lineNumber":11,"author":{"gitId":"wlren"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2021-09-20"},{"lineNumber":12,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":13,"author":{"gitId":"wlren"},"content":"import java.util.Objects;","lastModifiedDate":"2021-09-20"},{"lineNumber":14,"author":{"gitId":"wlren"},"content":"import java.util.Timer;","lastModifiedDate":"2021-09-20"},{"lineNumber":15,"author":{"gitId":"wlren"},"content":"import java.util.TimerTask;","lastModifiedDate":"2021-09-20"},{"lineNumber":16,"author":{"gitId":"wlren"},"content":"import java.util.concurrent.*;","lastModifiedDate":"2021-09-20"},{"lineNumber":17,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":18,"author":{"gitId":"wlren"},"content":"/**","lastModifiedDate":"2021-09-20"},{"lineNumber":19,"author":{"gitId":"wlren"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2021-09-20"},{"lineNumber":20,"author":{"gitId":"wlren"},"content":" */","lastModifiedDate":"2021-09-20"},{"lineNumber":21,"author":{"gitId":"wlren"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2021-09-20"},{"lineNumber":22,"author":{"gitId":"wlren"},"content":"    @FXML","lastModifiedDate":"2021-09-20"},{"lineNumber":23,"author":{"gitId":"wlren"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2021-09-20"},{"lineNumber":24,"author":{"gitId":"wlren"},"content":"    @FXML","lastModifiedDate":"2021-09-20"},{"lineNumber":25,"author":{"gitId":"wlren"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2021-09-20"},{"lineNumber":26,"author":{"gitId":"wlren"},"content":"    @FXML","lastModifiedDate":"2021-09-20"},{"lineNumber":27,"author":{"gitId":"wlren"},"content":"    private TextField userInput;","lastModifiedDate":"2021-09-20"},{"lineNumber":28,"author":{"gitId":"wlren"},"content":"    @FXML","lastModifiedDate":"2021-09-20"},{"lineNumber":29,"author":{"gitId":"wlren"},"content":"    private Button sendButton;","lastModifiedDate":"2021-09-20"},{"lineNumber":30,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":31,"author":{"gitId":"wlren"},"content":"    private Duke duke;","lastModifiedDate":"2021-09-20"},{"lineNumber":32,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":33,"author":{"gitId":"wlren"},"content":"    private final Image userImage \u003d new Image(Objects.requireNonNull(this.getClass().getResourceAsStream(\"/images/spongebob.png\")));","lastModifiedDate":"2021-09-20"},{"lineNumber":34,"author":{"gitId":"wlren"},"content":"    private final Image dukeImage \u003d new Image(Objects.requireNonNull(this.getClass().getResourceAsStream(\"/images/patrick.png\")));","lastModifiedDate":"2021-09-20"},{"lineNumber":35,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":36,"author":{"gitId":"wlren"},"content":"    @FXML","lastModifiedDate":"2021-09-20"},{"lineNumber":37,"author":{"gitId":"wlren"},"content":"    public void initialize() {","lastModifiedDate":"2021-09-20"},{"lineNumber":38,"author":{"gitId":"wlren"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2021-09-20"},{"lineNumber":39,"author":{"gitId":"wlren"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":40,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":41,"author":{"gitId":"wlren"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2021-09-20"},{"lineNumber":42,"author":{"gitId":"wlren"},"content":"        duke \u003d d;","lastModifiedDate":"2021-09-20"},{"lineNumber":43,"author":{"gitId":"wlren"},"content":"        welcomeMsg();","lastModifiedDate":"2021-09-20"},{"lineNumber":44,"author":{"gitId":"wlren"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":45,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":46,"author":{"gitId":"wlren"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":47,"author":{"gitId":"wlren"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2021-09-20"},{"lineNumber":48,"author":{"gitId":"wlren"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2021-09-20"},{"lineNumber":49,"author":{"gitId":"wlren"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":50,"author":{"gitId":"wlren"},"content":"    @FXML","lastModifiedDate":"2021-09-20"},{"lineNumber":51,"author":{"gitId":"wlren"},"content":"    private void handleUserInput() {","lastModifiedDate":"2021-09-20"},{"lineNumber":52,"author":{"gitId":"wlren"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2021-09-20"},{"lineNumber":53,"author":{"gitId":"wlren"},"content":"        String response \u003d duke.getResponse(input);","lastModifiedDate":"2021-09-20"},{"lineNumber":54,"author":{"gitId":"wlren"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2021-09-20"},{"lineNumber":55,"author":{"gitId":"wlren"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2021-09-20"},{"lineNumber":56,"author":{"gitId":"wlren"},"content":"                DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2021-09-20"},{"lineNumber":57,"author":{"gitId":"wlren"},"content":"        );","lastModifiedDate":"2021-09-20"},{"lineNumber":58,"author":{"gitId":"wlren"},"content":"        for(Node child : dialogContainer.getChildren()) {","lastModifiedDate":"2021-09-20"},{"lineNumber":59,"author":{"gitId":"wlren"},"content":"            VBox.setVgrow(child, Priority.ALWAYS);","lastModifiedDate":"2021-09-20"},{"lineNumber":60,"author":{"gitId":"wlren"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":61,"author":{"gitId":"wlren"},"content":"        userInput.clear();","lastModifiedDate":"2021-09-20"},{"lineNumber":62,"author":{"gitId":"wlren"},"content":"        if (input.equals(\"bye\")) {","lastModifiedDate":"2021-09-20"},{"lineNumber":63,"author":{"gitId":"wlren"},"content":"            final Timer timer \u003d new Timer();","lastModifiedDate":"2021-09-20"},{"lineNumber":64,"author":{"gitId":"wlren"},"content":"            timer.schedule(new TimerTask() {","lastModifiedDate":"2021-09-20"},{"lineNumber":65,"author":{"gitId":"wlren"},"content":"                @Override","lastModifiedDate":"2021-09-20"},{"lineNumber":66,"author":{"gitId":"wlren"},"content":"                public void run() {","lastModifiedDate":"2021-09-20"},{"lineNumber":67,"author":{"gitId":"wlren"},"content":"                    Main.exit();","lastModifiedDate":"2021-09-20"},{"lineNumber":68,"author":{"gitId":"wlren"},"content":"                    timer.cancel();","lastModifiedDate":"2021-09-20"},{"lineNumber":69,"author":{"gitId":"wlren"},"content":"                }","lastModifiedDate":"2021-09-20"},{"lineNumber":70,"author":{"gitId":"wlren"},"content":"            }, 2000);","lastModifiedDate":"2021-09-20"},{"lineNumber":71,"author":{"gitId":"wlren"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":72,"author":{"gitId":"wlren"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":73,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":74,"author":{"gitId":"wlren"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":75,"author":{"gitId":"wlren"},"content":"     * Welcomes the user to the Duke Chatbot GUI.","lastModifiedDate":"2021-09-20"},{"lineNumber":76,"author":{"gitId":"wlren"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":77,"author":{"gitId":"wlren"},"content":"    private void welcomeMsg() {","lastModifiedDate":"2021-09-20"},{"lineNumber":78,"author":{"gitId":"wlren"},"content":"        dialogContainer.getChildren().add(","lastModifiedDate":"2021-09-20"},{"lineNumber":79,"author":{"gitId":"wlren"},"content":"                DialogBox.getDukeDialog(\"Hello from\\n\" + \" ____        _        \\n\"","lastModifiedDate":"2021-09-20"},{"lineNumber":80,"author":{"gitId":"wlren"},"content":"                        + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2021-09-20"},{"lineNumber":81,"author":{"gitId":"wlren"},"content":"                        + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2021-09-20"},{"lineNumber":82,"author":{"gitId":"wlren"},"content":"                        + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2021-09-20"},{"lineNumber":83,"author":{"gitId":"wlren"},"content":"                        + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\" + \"What can I do for you?\", dukeImage)","lastModifiedDate":"2021-09-20"},{"lineNumber":84,"author":{"gitId":"wlren"},"content":"        );","lastModifiedDate":"2021-09-20"},{"lineNumber":85,"author":{"gitId":"wlren"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":86,"author":{"gitId":"wlren"},"content":"}","lastModifiedDate":"2021-09-20"}],"authorContributionMap":{"wlren":86}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wlren"},"content":"package duke;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"wlren"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"wlren"},"content":"import java.util.Objects;","lastModifiedDate":"2021-09-20"},{"lineNumber":5,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"wlren"},"content":"/**","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"wlren"},"content":" * Contains logic and methods relating to parsing user input from CLI.","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"wlren"},"content":" */","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"wlren"},"content":"public class Parser {","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"wlren"},"content":"    private String currentInput;","lastModifiedDate":"2021-09-20"},{"lineNumber":11,"author":{"gitId":"wlren"},"content":"    private CommandType currentCommandType;","lastModifiedDate":"2021-09-20"},{"lineNumber":12,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"wlren"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"wlren"},"content":"     * Matches first word of line of input with current available commands.","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"wlren"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"wlren"},"content":"     * @return CommandType The command type of the next line of input","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"wlren"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"wlren"},"content":"    public CommandType nextCommand(String input) {","lastModifiedDate":"2021-09-20"},{"lineNumber":19,"author":{"gitId":"wlren"},"content":"        this.currentInput \u003d input;","lastModifiedDate":"2021-09-20"},{"lineNumber":20,"author":{"gitId":"wlren"},"content":"        String command \u003d currentInput.split(\" \")[0];","lastModifiedDate":"2021-09-20"},{"lineNumber":21,"author":{"gitId":"wlren"},"content":"        switch (command) {","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"wlren"},"content":"        case \"bye\":","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"wlren"},"content":"            return CommandType.Exit;","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"wlren"},"content":"        case \"delete\":","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"wlren"},"content":"            return CommandType.DeleteTask;","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"wlren"},"content":"        case \"list\":","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"wlren"},"content":"            return CommandType.List;","lastModifiedDate":"2021-08-28"},{"lineNumber":28,"author":{"gitId":"wlren"},"content":"        case \"todo\":","lastModifiedDate":"2021-08-28"},{"lineNumber":29,"author":{"gitId":"wlren"},"content":"            currentCommandType \u003d CommandType.AddToDo;","lastModifiedDate":"2021-09-20"},{"lineNumber":30,"author":{"gitId":"wlren"},"content":"            return CommandType.AddToDo;","lastModifiedDate":"2021-08-28"},{"lineNumber":31,"author":{"gitId":"wlren"},"content":"        case \"deadline\":","lastModifiedDate":"2021-08-28"},{"lineNumber":32,"author":{"gitId":"wlren"},"content":"            currentCommandType \u003d CommandType.AddDeadline;","lastModifiedDate":"2021-09-20"},{"lineNumber":33,"author":{"gitId":"wlren"},"content":"            return CommandType.AddDeadline;","lastModifiedDate":"2021-08-28"},{"lineNumber":34,"author":{"gitId":"wlren"},"content":"        case \"event\":","lastModifiedDate":"2021-08-28"},{"lineNumber":35,"author":{"gitId":"wlren"},"content":"            currentCommandType \u003d CommandType.AddEvent;","lastModifiedDate":"2021-09-20"},{"lineNumber":36,"author":{"gitId":"wlren"},"content":"            return CommandType.AddEvent;","lastModifiedDate":"2021-08-28"},{"lineNumber":37,"author":{"gitId":"wlren"},"content":"        case \"done\":","lastModifiedDate":"2021-08-28"},{"lineNumber":38,"author":{"gitId":"wlren"},"content":"            return CommandType.MarkAsDone;","lastModifiedDate":"2021-08-28"},{"lineNumber":39,"author":{"gitId":"wlren"},"content":"        case \"find\":","lastModifiedDate":"2021-08-28"},{"lineNumber":40,"author":{"gitId":"wlren"},"content":"            return CommandType.Find;","lastModifiedDate":"2021-08-28"},{"lineNumber":41,"author":{"gitId":"wlren"},"content":"        case \"archive\":","lastModifiedDate":"2021-09-20"},{"lineNumber":42,"author":{"gitId":"wlren"},"content":"            return CommandType.Archive;","lastModifiedDate":"2021-09-20"},{"lineNumber":43,"author":{"gitId":"wlren"},"content":"        default:","lastModifiedDate":"2021-08-28"},{"lineNumber":44,"author":{"gitId":"wlren"},"content":"            return CommandType.Error;","lastModifiedDate":"2021-08-28"},{"lineNumber":45,"author":{"gitId":"wlren"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":46,"author":{"gitId":"wlren"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":47,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":48,"author":{"gitId":"wlren"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":49,"author":{"gitId":"wlren"},"content":"     * Returns the search key entered by user.","lastModifiedDate":"2021-09-20"},{"lineNumber":50,"author":{"gitId":"wlren"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":51,"author":{"gitId":"wlren"},"content":"     * @return String object of search term.","lastModifiedDate":"2021-09-20"},{"lineNumber":52,"author":{"gitId":"wlren"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":53,"author":{"gitId":"wlren"},"content":"    public String getSearchTerm() {","lastModifiedDate":"2021-08-28"},{"lineNumber":54,"author":{"gitId":"wlren"},"content":"        assert Objects.equals(currentInput.split(\" \")[0], \"find\") : \"Command should be find\";","lastModifiedDate":"2021-09-20"},{"lineNumber":55,"author":{"gitId":"wlren"},"content":"        return currentInput.split(\" \")[1];","lastModifiedDate":"2021-09-20"},{"lineNumber":56,"author":{"gitId":"wlren"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":57,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":58,"author":{"gitId":"wlren"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":59,"author":{"gitId":"wlren"},"content":"     * Uses current command type to decide how to parse the description of task.","lastModifiedDate":"2021-08-28"},{"lineNumber":60,"author":{"gitId":"wlren"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":61,"author":{"gitId":"wlren"},"content":"     * @return Task Either ToDo/Deadline/Event task based on command.","lastModifiedDate":"2021-08-28"},{"lineNumber":62,"author":{"gitId":"wlren"},"content":"     * @throws DukeException In case of incorrect instruction format.","lastModifiedDate":"2021-09-20"},{"lineNumber":63,"author":{"gitId":"wlren"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":64,"author":{"gitId":"wlren"},"content":"    public Task generateNewTask() throws DukeException {","lastModifiedDate":"2021-09-20"},{"lineNumber":65,"author":{"gitId":"wlren"},"content":"        if (currentCommandType \u003d\u003d CommandType.AddToDo) {","lastModifiedDate":"2021-09-20"},{"lineNumber":66,"author":{"gitId":"wlren"},"content":"            String description \u003d currentInput.substring(5);","lastModifiedDate":"2021-09-20"},{"lineNumber":67,"author":{"gitId":"wlren"},"content":"            assert Objects.equals(currentInput.split(\" \")[0], \"todo\") : \"Command should be todo\";","lastModifiedDate":"2021-09-20"},{"lineNumber":68,"author":{"gitId":"wlren"},"content":"            descriptionCheck(description);","lastModifiedDate":"2021-09-20"},{"lineNumber":69,"author":{"gitId":"wlren"},"content":"            return new ToDo(description, false);","lastModifiedDate":"2021-08-28"},{"lineNumber":70,"author":{"gitId":"wlren"},"content":"        } else if (currentCommandType \u003d\u003d CommandType.AddDeadline) {","lastModifiedDate":"2021-09-20"},{"lineNumber":71,"author":{"gitId":"wlren"},"content":"            String description \u003d currentInput.split(\"/by \")[0].substring(9);","lastModifiedDate":"2021-09-20"},{"lineNumber":72,"author":{"gitId":"wlren"},"content":"            assert Objects.equals(currentInput.split(\" \")[0], \"deadline\") : \"Command should be deadline\";","lastModifiedDate":"2021-09-20"},{"lineNumber":73,"author":{"gitId":"wlren"},"content":"            String by \u003d currentInput.split(\"/by \")[1];","lastModifiedDate":"2021-09-20"},{"lineNumber":74,"author":{"gitId":"wlren"},"content":"            LocalDate deadline  \u003d LocalDate.parse(by);","lastModifiedDate":"2021-08-28"},{"lineNumber":75,"author":{"gitId":"wlren"},"content":"            descriptionCheck(description);","lastModifiedDate":"2021-09-20"},{"lineNumber":76,"author":{"gitId":"wlren"},"content":"            return new Deadline(description, deadline, false);","lastModifiedDate":"2021-08-28"},{"lineNumber":77,"author":{"gitId":"wlren"},"content":"        } else if (currentCommandType \u003d\u003d CommandType.AddEvent) {","lastModifiedDate":"2021-09-20"},{"lineNumber":78,"author":{"gitId":"wlren"},"content":"            String description \u003d currentInput.split(\"/at \")[0].substring(6);","lastModifiedDate":"2021-09-20"},{"lineNumber":79,"author":{"gitId":"wlren"},"content":"            assert Objects.equals(currentInput.split(\" \")[0], \"event\") : \"Command should be event\";","lastModifiedDate":"2021-09-20"},{"lineNumber":80,"author":{"gitId":"wlren"},"content":"            String by \u003d currentInput.split(\"/at \")[1];","lastModifiedDate":"2021-09-20"},{"lineNumber":81,"author":{"gitId":"wlren"},"content":"            LocalDate eventDate  \u003d LocalDate.parse(by);","lastModifiedDate":"2021-08-28"},{"lineNumber":82,"author":{"gitId":"wlren"},"content":"            descriptionCheck(description);","lastModifiedDate":"2021-09-20"},{"lineNumber":83,"author":{"gitId":"wlren"},"content":"            return new Event(description, eventDate, false);","lastModifiedDate":"2021-08-28"},{"lineNumber":84,"author":{"gitId":"wlren"},"content":"        } else {","lastModifiedDate":"2021-08-28"},{"lineNumber":85,"author":{"gitId":"wlren"},"content":"            throw new DukeException(\"Generate task called with wrong command type\");","lastModifiedDate":"2021-08-28"},{"lineNumber":86,"author":{"gitId":"wlren"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":87,"author":{"gitId":"wlren"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":88,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":89,"author":{"gitId":"wlren"},"content":"    private void descriptionCheck(String description) throws DukeException {","lastModifiedDate":"2021-09-20"},{"lineNumber":90,"author":{"gitId":"wlren"},"content":"        if (description.isBlank()) {","lastModifiedDate":"2021-09-20"},{"lineNumber":91,"author":{"gitId":"wlren"},"content":"            throw new DukeException(\"OOPS!!! The description of a task cannot be empty.\");","lastModifiedDate":"2021-09-20"},{"lineNumber":92,"author":{"gitId":"wlren"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":93,"author":{"gitId":"wlren"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":94,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":95,"author":{"gitId":"wlren"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":96,"author":{"gitId":"wlren"},"content":"     * Returns index of task indicated by the user.","lastModifiedDate":"2021-09-20"},{"lineNumber":97,"author":{"gitId":"wlren"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":98,"author":{"gitId":"wlren"},"content":"     * @return int Index of task to be deleted/marked as complete.","lastModifiedDate":"2021-08-28"},{"lineNumber":99,"author":{"gitId":"wlren"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":100,"author":{"gitId":"wlren"},"content":"    public int getIndex() {","lastModifiedDate":"2021-08-28"},{"lineNumber":101,"author":{"gitId":"wlren"},"content":"        assert Objects.equals(currentInput.split(\" \")[0], \"delete\") ||","lastModifiedDate":"2021-09-20"},{"lineNumber":102,"author":{"gitId":"wlren"},"content":"                Objects.equals(currentInput.split(\" \")[0], \"done\")","lastModifiedDate":"2021-09-20"},{"lineNumber":103,"author":{"gitId":"wlren"},"content":"                : \"Command should be delete/done\";","lastModifiedDate":"2021-09-20"},{"lineNumber":104,"author":{"gitId":"wlren"},"content":"        return Integer.parseInt(currentInput.split(\" \")[1]) - 1;","lastModifiedDate":"2021-09-20"},{"lineNumber":105,"author":{"gitId":"wlren"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":106,"author":{"gitId":"wlren"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"wlren":106}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wlren"},"content":"package duke;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"wlren"},"content":"import java.io.File;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"wlren"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"wlren"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"wlren"},"content":"import java.io.PrintWriter;","lastModifiedDate":"2021-09-20"},{"lineNumber":7,"author":{"gitId":"wlren"},"content":"import java.nio.file.Files;","lastModifiedDate":"2021-09-20"},{"lineNumber":8,"author":{"gitId":"wlren"},"content":"import java.nio.file.StandardCopyOption;","lastModifiedDate":"2021-09-20"},{"lineNumber":9,"author":{"gitId":"wlren"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-20"},{"lineNumber":10,"author":{"gitId":"wlren"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-09-20"},{"lineNumber":11,"author":{"gitId":"wlren"},"content":"import java.time.format.FormatStyle;","lastModifiedDate":"2021-09-20"},{"lineNumber":12,"author":{"gitId":"wlren"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"wlren"},"content":"public class Storage {","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"wlren"},"content":"    private final File dataFile;","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"wlren"},"content":"    private final TaskList taskList;","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"wlren"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"wlren"},"content":"     * Constructor for storage, includes hardcoded file path for duke.txt.","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"wlren"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"wlren"},"content":"     * @param taskList Fills taskList at initialization and saves taskList data as .txt file.","lastModifiedDate":"2021-09-20"},{"lineNumber":22,"author":{"gitId":"wlren"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"wlren"},"content":"    public Storage(TaskList taskList) {","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"wlren"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"wlren"},"content":"        String DIR_NAME \u003d \"data\";","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"wlren"},"content":"        String FILE_NAME \u003d \"duke.txt\";","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"wlren"},"content":"        dataFile \u003d retrieveFile(DIR_NAME, FILE_NAME);","lastModifiedDate":"2021-08-28"},{"lineNumber":28,"author":{"gitId":"wlren"},"content":"        try {","lastModifiedDate":"2021-08-28"},{"lineNumber":29,"author":{"gitId":"wlren"},"content":"            loadData();","lastModifiedDate":"2021-08-28"},{"lineNumber":30,"author":{"gitId":"wlren"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-28"},{"lineNumber":31,"author":{"gitId":"wlren"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-09-20"},{"lineNumber":32,"author":{"gitId":"wlren"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":33,"author":{"gitId":"wlren"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":34,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":35,"author":{"gitId":"wlren"},"content":"    private void loadData() throws IOException, DukeException {","lastModifiedDate":"2021-08-28"},{"lineNumber":36,"author":{"gitId":"wlren"},"content":"        Scanner scanner \u003d new Scanner(dataFile);","lastModifiedDate":"2021-08-28"},{"lineNumber":37,"author":{"gitId":"wlren"},"content":"        while (scanner.hasNext()) {","lastModifiedDate":"2021-08-28"},{"lineNumber":38,"author":{"gitId":"wlren"},"content":"            String taskString \u003d scanner.nextLine();","lastModifiedDate":"2021-08-28"},{"lineNumber":39,"author":{"gitId":"wlren"},"content":"            boolean isDone \u003d taskString.charAt(4) !\u003d \u0027 \u0027;","lastModifiedDate":"2021-08-28"},{"lineNumber":40,"author":{"gitId":"wlren"},"content":"            char taskType \u003d taskString.charAt(1);","lastModifiedDate":"2021-09-20"},{"lineNumber":41,"author":{"gitId":"wlren"},"content":"            taskList.addTask(generateTask(taskString, isDone, taskType));","lastModifiedDate":"2021-09-20"},{"lineNumber":42,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":43,"author":{"gitId":"wlren"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":44,"author":{"gitId":"wlren"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":45,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":46,"author":{"gitId":"wlren"},"content":"    private Task generateTask(String taskString, boolean isDone, char taskType) {","lastModifiedDate":"2021-09-20"},{"lineNumber":47,"author":{"gitId":"wlren"},"content":"        switch (taskType) {","lastModifiedDate":"2021-09-20"},{"lineNumber":48,"author":{"gitId":"wlren"},"content":"        case \u0027T\u0027:","lastModifiedDate":"2021-08-28"},{"lineNumber":49,"author":{"gitId":"wlren"},"content":"            return ToDo.create(taskString, isDone);","lastModifiedDate":"2021-09-20"},{"lineNumber":50,"author":{"gitId":"wlren"},"content":"        case \u0027E\u0027:","lastModifiedDate":"2021-08-28"},{"lineNumber":51,"author":{"gitId":"wlren"},"content":"            return Event.create(taskString, isDone);","lastModifiedDate":"2021-09-20"},{"lineNumber":52,"author":{"gitId":"wlren"},"content":"        case \u0027D\u0027:","lastModifiedDate":"2021-08-28"},{"lineNumber":53,"author":{"gitId":"wlren"},"content":"            return Deadline.create(taskString, isDone);","lastModifiedDate":"2021-09-20"},{"lineNumber":54,"author":{"gitId":"wlren"},"content":"        default:","lastModifiedDate":"2021-08-28"},{"lineNumber":55,"author":{"gitId":"wlren"},"content":"            return null;","lastModifiedDate":"2021-09-20"},{"lineNumber":56,"author":{"gitId":"wlren"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":57,"author":{"gitId":"wlren"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":58,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":59,"author":{"gitId":"wlren"},"content":"    private File retrieveFile(String directory, String filename) {","lastModifiedDate":"2021-08-28"},{"lineNumber":60,"author":{"gitId":"wlren"},"content":"        File dir \u003d new File(directory);","lastModifiedDate":"2021-08-28"},{"lineNumber":61,"author":{"gitId":"wlren"},"content":"        if (!dir.exists()) dir.mkdirs();","lastModifiedDate":"2021-08-28"},{"lineNumber":62,"author":{"gitId":"wlren"},"content":"        File dataFile \u003d new File(directory + \"/\" + filename);","lastModifiedDate":"2021-08-28"},{"lineNumber":63,"author":{"gitId":"wlren"},"content":"        try {","lastModifiedDate":"2021-08-28"},{"lineNumber":64,"author":{"gitId":"wlren"},"content":"            dataFile.createNewFile();","lastModifiedDate":"2021-08-28"},{"lineNumber":65,"author":{"gitId":"wlren"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-28"},{"lineNumber":66,"author":{"gitId":"wlren"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-28"},{"lineNumber":67,"author":{"gitId":"wlren"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":68,"author":{"gitId":"wlren"},"content":"        assert dataFile !\u003d null : \"File should be created automatically if it doesn\u0027t yet exist\";","lastModifiedDate":"2021-09-20"},{"lineNumber":69,"author":{"gitId":"wlren"},"content":"        return dataFile;","lastModifiedDate":"2021-08-28"},{"lineNumber":70,"author":{"gitId":"wlren"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":71,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":72,"author":{"gitId":"wlren"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":73,"author":{"gitId":"wlren"},"content":"     * Writes data down into duke.txt on \u0027bye\u0027 command.","lastModifiedDate":"2021-08-28"},{"lineNumber":74,"author":{"gitId":"wlren"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":75,"author":{"gitId":"wlren"},"content":"     * @throws IOException When data writing fails.","lastModifiedDate":"2021-09-20"},{"lineNumber":76,"author":{"gitId":"wlren"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":77,"author":{"gitId":"wlren"},"content":"    public void writeData() throws IOException {","lastModifiedDate":"2021-08-28"},{"lineNumber":78,"author":{"gitId":"wlren"},"content":"        FileWriter writer \u003d new FileWriter(dataFile.getPath());","lastModifiedDate":"2021-08-28"},{"lineNumber":79,"author":{"gitId":"wlren"},"content":"        for (Task task: taskList.getTasks()) {","lastModifiedDate":"2021-08-28"},{"lineNumber":80,"author":{"gitId":"wlren"},"content":"            writer.write(task.toString() + System.lineSeparator());","lastModifiedDate":"2021-08-28"},{"lineNumber":81,"author":{"gitId":"wlren"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":82,"author":{"gitId":"wlren"},"content":"        writer.close();","lastModifiedDate":"2021-08-28"},{"lineNumber":83,"author":{"gitId":"wlren"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":84,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":85,"author":{"gitId":"wlren"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":86,"author":{"gitId":"wlren"},"content":"     * Archives the current list of tasks and cleans the task list for new start.","lastModifiedDate":"2021-09-20"},{"lineNumber":87,"author":{"gitId":"wlren"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":88,"author":{"gitId":"wlren"},"content":"     * @throws IOException when data writing fails.","lastModifiedDate":"2021-09-20"},{"lineNumber":89,"author":{"gitId":"wlren"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":90,"author":{"gitId":"wlren"},"content":"    public String archiveData() throws IOException {","lastModifiedDate":"2021-09-20"},{"lineNumber":91,"author":{"gitId":"wlren"},"content":"        writeData();","lastModifiedDate":"2021-09-20"},{"lineNumber":92,"author":{"gitId":"wlren"},"content":"        String dateTime \u003d LocalDateTime.now().format(DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM));","lastModifiedDate":"2021-09-20"},{"lineNumber":93,"author":{"gitId":"wlren"},"content":"        PrintWriter writer \u003d new PrintWriter(dataFile);","lastModifiedDate":"2021-09-20"},{"lineNumber":94,"author":{"gitId":"wlren"},"content":"        writer.close();","lastModifiedDate":"2021-09-20"},{"lineNumber":95,"author":{"gitId":"wlren"},"content":"        return copyFile(dataFile, retrieveFile(\"data\", String.format(\"%s.txt\", dateTime)));","lastModifiedDate":"2021-09-20"},{"lineNumber":96,"author":{"gitId":"wlren"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":97,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":98,"author":{"gitId":"wlren"},"content":"    private String copyFile(File source, File dest) throws IOException {","lastModifiedDate":"2021-09-20"},{"lineNumber":99,"author":{"gitId":"wlren"},"content":"        Files.copy(source.toPath(), dest.toPath(), StandardCopyOption.REPLACE_EXISTING);","lastModifiedDate":"2021-09-20"},{"lineNumber":100,"author":{"gitId":"wlren"},"content":"        taskList.getTasks().clear();","lastModifiedDate":"2021-09-20"},{"lineNumber":101,"author":{"gitId":"wlren"},"content":"        return dest.getName();","lastModifiedDate":"2021-09-20"},{"lineNumber":102,"author":{"gitId":"wlren"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":103,"author":{"gitId":"wlren"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"wlren":103}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wlren"},"content":"package duke;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"wlren"},"content":"/**","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"wlren"},"content":" * Parent task class as abstraction for ToDo, Deadline, Event.","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"wlren"},"content":" */","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"wlren"},"content":"public class Task {","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"wlren"},"content":"    protected String description;","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"wlren"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"wlren"},"content":"    public Task(String description, boolean isDone) {","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"wlren"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"wlren"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"wlren"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"wlren"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"wlren"},"content":"     * Marks this tasks as completed.","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"wlren"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"wlren"},"content":"    public String markAsDone() {","lastModifiedDate":"2021-09-20"},{"lineNumber":18,"author":{"gitId":"wlren"},"content":"        if (!isDone) {","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"wlren"},"content":"            isDone \u003d true;","lastModifiedDate":"2021-08-19"},{"lineNumber":20,"author":{"gitId":"wlren"},"content":"            return \"Nice! I\u0027ve marked this task as done:\\n\" + this;","lastModifiedDate":"2021-09-20"},{"lineNumber":21,"author":{"gitId":"wlren"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":22,"author":{"gitId":"wlren"},"content":"        return \"Task has already been marked as complete!\";","lastModifiedDate":"2021-09-20"},{"lineNumber":23,"author":{"gitId":"wlren"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":24,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":25,"author":{"gitId":"wlren"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"wlren"},"content":"     * Helper method for toString(), returns X or Space depending on completion status.","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"wlren"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":28,"author":{"gitId":"wlren"},"content":"     * @return String \"X\" or \" \" for complete or incomplete task.","lastModifiedDate":"2021-08-28"},{"lineNumber":29,"author":{"gitId":"wlren"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":30,"author":{"gitId":"wlren"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-19"},{"lineNumber":31,"author":{"gitId":"wlren"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2021-08-19"},{"lineNumber":32,"author":{"gitId":"wlren"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":33,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":34,"author":{"gitId":"wlren"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":35,"author":{"gitId":"wlren"},"content":"    public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":36,"author":{"gitId":"wlren"},"content":"        return \"[\" + getStatusIcon() + \"] \" + description;","lastModifiedDate":"2021-08-19"},{"lineNumber":37,"author":{"gitId":"wlren"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":38,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":39,"author":{"gitId":"wlren"},"content":"}","lastModifiedDate":"2021-08-19"},{"lineNumber":40,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"wlren":40}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wlren"},"content":"package duke;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"wlren"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"wlren"},"content":"/**","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"wlren"},"content":" * List of current tasks and methods supporting list operations.","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"wlren"},"content":" */","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"wlren"},"content":"public class TaskList {","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"wlren"},"content":"    private final ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"wlren"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"wlren"},"content":"     * Initializes task list with capacity of 100 (Given default number).","lastModifiedDate":"2021-09-20"},{"lineNumber":13,"author":{"gitId":"wlren"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"wlren"},"content":"    public TaskList() {","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"wlren"},"content":"        tasks \u003d new ArrayList\u003c\u003e(100);","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"wlren"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"wlren"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"wlren"},"content":"     * Adds task to the list.","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"wlren"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"wlren"},"content":"     * @param task Task to be added.","lastModifiedDate":"2021-09-20"},{"lineNumber":22,"author":{"gitId":"wlren"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"wlren"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"wlren"},"content":"        tasks.add(task);","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"wlren"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"wlren"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":28,"author":{"gitId":"wlren"},"content":"     * Deletes task at index from the list.","lastModifiedDate":"2021-08-28"},{"lineNumber":29,"author":{"gitId":"wlren"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":30,"author":{"gitId":"wlren"},"content":"     * @param index Indicates which task is to be deleted.","lastModifiedDate":"2021-09-20"},{"lineNumber":31,"author":{"gitId":"wlren"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":32,"author":{"gitId":"wlren"},"content":"    public void deleteTask(int index) {","lastModifiedDate":"2021-08-28"},{"lineNumber":33,"author":{"gitId":"wlren"},"content":"        tasks.remove(index);","lastModifiedDate":"2021-08-28"},{"lineNumber":34,"author":{"gitId":"wlren"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":35,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":36,"author":{"gitId":"wlren"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":37,"author":{"gitId":"wlren"},"content":"     * Marks the task at index as done.","lastModifiedDate":"2021-08-28"},{"lineNumber":38,"author":{"gitId":"wlren"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":39,"author":{"gitId":"wlren"},"content":"     * @param index Indicates which task is to be marked as completed.","lastModifiedDate":"2021-09-20"},{"lineNumber":40,"author":{"gitId":"wlren"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":41,"author":{"gitId":"wlren"},"content":"    public String markAsDone(int index) {","lastModifiedDate":"2021-09-20"},{"lineNumber":42,"author":{"gitId":"wlren"},"content":"        return tasks.get(index).markAsDone();","lastModifiedDate":"2021-09-20"},{"lineNumber":43,"author":{"gitId":"wlren"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":44,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":45,"author":{"gitId":"wlren"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":46,"author":{"gitId":"wlren"},"content":"     * Retrieves the size of task list.","lastModifiedDate":"2021-08-28"},{"lineNumber":47,"author":{"gitId":"wlren"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":48,"author":{"gitId":"wlren"},"content":"     * @return int Size of task list.","lastModifiedDate":"2021-08-28"},{"lineNumber":49,"author":{"gitId":"wlren"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":50,"author":{"gitId":"wlren"},"content":"    public int getListSize() {","lastModifiedDate":"2021-08-28"},{"lineNumber":51,"author":{"gitId":"wlren"},"content":"        return tasks.size();","lastModifiedDate":"2021-08-28"},{"lineNumber":52,"author":{"gitId":"wlren"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":53,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":54,"author":{"gitId":"wlren"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":55,"author":{"gitId":"wlren"},"content":"     * Gets the string representation of task at index.","lastModifiedDate":"2021-08-28"},{"lineNumber":56,"author":{"gitId":"wlren"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":57,"author":{"gitId":"wlren"},"content":"     * @param index Indicates which task is to be retrieved.","lastModifiedDate":"2021-09-20"},{"lineNumber":58,"author":{"gitId":"wlren"},"content":"     * @return String toString() of task at index.","lastModifiedDate":"2021-08-28"},{"lineNumber":59,"author":{"gitId":"wlren"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":60,"author":{"gitId":"wlren"},"content":"    public String getTaskString(int index) {","lastModifiedDate":"2021-08-28"},{"lineNumber":61,"author":{"gitId":"wlren"},"content":"        return tasks.get(index).toString();","lastModifiedDate":"2021-08-28"},{"lineNumber":62,"author":{"gitId":"wlren"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":63,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":64,"author":{"gitId":"wlren"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":65,"author":{"gitId":"wlren"},"content":"     * Exposes the task list for operations.","lastModifiedDate":"2021-08-28"},{"lineNumber":66,"author":{"gitId":"wlren"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":67,"author":{"gitId":"wlren"},"content":"     * @return ArrayList\u003cTask\u003e Duke\u0027s task list.","lastModifiedDate":"2021-08-28"},{"lineNumber":68,"author":{"gitId":"wlren"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":69,"author":{"gitId":"wlren"},"content":"    public ArrayList\u003cTask\u003e getTasks() {","lastModifiedDate":"2021-08-28"},{"lineNumber":70,"author":{"gitId":"wlren"},"content":"        return tasks;","lastModifiedDate":"2021-08-28"},{"lineNumber":71,"author":{"gitId":"wlren"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":72,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":73,"author":{"gitId":"wlren"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"wlren":73}},{"path":"src/main/java/duke/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wlren"},"content":"package duke;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"wlren"},"content":"/**","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"wlren"},"content":" * Represents a task to be completed.","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"wlren"},"content":" */","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"wlren"},"content":"public class ToDo extends Task{","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"wlren"},"content":"    public ToDo(String description, boolean isDone) {","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"wlren"},"content":"        super(description, isDone);","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"wlren"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"wlren"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"wlren"},"content":"     * Represents Todo task as a String object.","lastModifiedDate":"2021-09-20"},{"lineNumber":13,"author":{"gitId":"wlren"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"wlren"},"content":"     * @return String form of Todo task.","lastModifiedDate":"2021-09-20"},{"lineNumber":15,"author":{"gitId":"wlren"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"wlren"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":17,"author":{"gitId":"wlren"},"content":"    public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"wlren"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"wlren"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":20,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":21,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":22,"author":{"gitId":"wlren"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":23,"author":{"gitId":"wlren"},"content":"     * Creates a ToDo task from given task string.","lastModifiedDate":"2021-09-20"},{"lineNumber":24,"author":{"gitId":"wlren"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":25,"author":{"gitId":"wlren"},"content":"     * @return ToDo task.","lastModifiedDate":"2021-09-20"},{"lineNumber":26,"author":{"gitId":"wlren"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":27,"author":{"gitId":"wlren"},"content":"    public static ToDo create(String taskString, boolean isDone) {","lastModifiedDate":"2021-09-20"},{"lineNumber":28,"author":{"gitId":"wlren"},"content":"        String description \u003d taskString.substring(7) + \" \";","lastModifiedDate":"2021-09-20"},{"lineNumber":29,"author":{"gitId":"wlren"},"content":"        return new ToDo(description, isDone);","lastModifiedDate":"2021-09-20"},{"lineNumber":30,"author":{"gitId":"wlren"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":31,"author":{"gitId":"wlren"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"wlren":31}},{"path":"src/main/java/duke/UI.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wlren"},"content":"package duke;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"wlren"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"wlren"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"wlren"},"content":"/**","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"wlren"},"content":" * Main logic of Duke chatbot on responding to command and showing output to user.","lastModifiedDate":"2021-09-20"},{"lineNumber":8,"author":{"gitId":"wlren"},"content":" */","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"wlren"},"content":"public class UI {","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"wlren"},"content":"    private final Parser parser;","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"wlren"},"content":"    private final Storage storage;","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"wlren"},"content":"    private final TaskList taskList;","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"wlren"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"wlren"},"content":"     * Fields for commands to be executed.","lastModifiedDate":"2021-09-20"},{"lineNumber":16,"author":{"gitId":"wlren"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"wlren"},"content":"     * @param parser allows for call to parser to fetch needed command data.","lastModifiedDate":"2021-09-20"},{"lineNumber":18,"author":{"gitId":"wlren"},"content":"     * @param storage allows for storage on \u0027bye\u0027 command.","lastModifiedDate":"2021-09-20"},{"lineNumber":19,"author":{"gitId":"wlren"},"content":"     * @param taskList allows for taskList to be updated as commands are executed.","lastModifiedDate":"2021-09-20"},{"lineNumber":20,"author":{"gitId":"wlren"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"wlren"},"content":"    public UI(Parser parser, Storage storage, TaskList taskList) {","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"wlren"},"content":"        this.parser \u003d parser;","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"wlren"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"wlren"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"wlren"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"wlren"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":28,"author":{"gitId":"wlren"},"content":"     * Main method to be constantly taking in commands until \"bye\".","lastModifiedDate":"2021-08-28"},{"lineNumber":29,"author":{"gitId":"wlren"},"content":"     * ","lastModifiedDate":"2021-08-28"},{"lineNumber":30,"author":{"gitId":"wlren"},"content":"     * @throws DukeException On errors encountered when command cannot be executed correctly.","lastModifiedDate":"2021-09-20"},{"lineNumber":31,"author":{"gitId":"wlren"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":32,"author":{"gitId":"wlren"},"content":"    public String takeInput(CommandType command) throws DukeException{","lastModifiedDate":"2021-09-20"},{"lineNumber":33,"author":{"gitId":"wlren"},"content":"        int taskIndex;","lastModifiedDate":"2021-08-28"},{"lineNumber":34,"author":{"gitId":"wlren"},"content":"        Task newTask;","lastModifiedDate":"2021-08-28"},{"lineNumber":35,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":36,"author":{"gitId":"wlren"},"content":"        switch (command) {","lastModifiedDate":"2021-08-28"},{"lineNumber":37,"author":{"gitId":"wlren"},"content":"        case Exit:","lastModifiedDate":"2021-08-28"},{"lineNumber":38,"author":{"gitId":"wlren"},"content":"            try {","lastModifiedDate":"2021-08-28"},{"lineNumber":39,"author":{"gitId":"wlren"},"content":"                storage.writeData();","lastModifiedDate":"2021-08-28"},{"lineNumber":40,"author":{"gitId":"wlren"},"content":"            } catch (IOException e) {","lastModifiedDate":"2021-08-28"},{"lineNumber":41,"author":{"gitId":"wlren"},"content":"                return \"Error saving file\";","lastModifiedDate":"2021-09-20"},{"lineNumber":42,"author":{"gitId":"wlren"},"content":"            }","lastModifiedDate":"2021-08-28"},{"lineNumber":43,"author":{"gitId":"wlren"},"content":"            return exitMsg();","lastModifiedDate":"2021-09-20"},{"lineNumber":44,"author":{"gitId":"wlren"},"content":"        case Archive:","lastModifiedDate":"2021-09-20"},{"lineNumber":45,"author":{"gitId":"wlren"},"content":"            try {","lastModifiedDate":"2021-09-20"},{"lineNumber":46,"author":{"gitId":"wlren"},"content":"                return String.format(\"Task list archived at: %s\", storage.archiveData());","lastModifiedDate":"2021-09-20"},{"lineNumber":47,"author":{"gitId":"wlren"},"content":"            } catch (IOException e) {","lastModifiedDate":"2021-09-20"},{"lineNumber":48,"author":{"gitId":"wlren"},"content":"                return \"Error archiving file\";","lastModifiedDate":"2021-09-20"},{"lineNumber":49,"author":{"gitId":"wlren"},"content":"            }","lastModifiedDate":"2021-09-20"},{"lineNumber":50,"author":{"gitId":"wlren"},"content":"        case List:","lastModifiedDate":"2021-08-28"},{"lineNumber":51,"author":{"gitId":"wlren"},"content":"            return listMsg();","lastModifiedDate":"2021-09-20"},{"lineNumber":52,"author":{"gitId":"wlren"},"content":"        case DeleteTask:","lastModifiedDate":"2021-08-28"},{"lineNumber":53,"author":{"gitId":"wlren"},"content":"            taskIndex \u003d parser.getIndex();","lastModifiedDate":"2021-08-28"},{"lineNumber":54,"author":{"gitId":"wlren"},"content":"            taskList.deleteTask(taskIndex);","lastModifiedDate":"2021-08-28"},{"lineNumber":55,"author":{"gitId":"wlren"},"content":"            return deleteMsg(taskIndex);","lastModifiedDate":"2021-09-20"},{"lineNumber":56,"author":{"gitId":"wlren"},"content":"        case MarkAsDone:","lastModifiedDate":"2021-08-28"},{"lineNumber":57,"author":{"gitId":"wlren"},"content":"            taskIndex \u003d parser.getIndex();","lastModifiedDate":"2021-08-28"},{"lineNumber":58,"author":{"gitId":"wlren"},"content":"            return taskList.markAsDone(taskIndex);","lastModifiedDate":"2021-09-20"},{"lineNumber":59,"author":{"gitId":"wlren"},"content":"        case AddToDo:","lastModifiedDate":"2021-08-28"},{"lineNumber":60,"author":{"gitId":"wlren"},"content":"        case AddEvent:","lastModifiedDate":"2021-08-28"},{"lineNumber":61,"author":{"gitId":"wlren"},"content":"        case AddDeadline:","lastModifiedDate":"2021-08-28"},{"lineNumber":62,"author":{"gitId":"wlren"},"content":"            newTask \u003d parser.generateNewTask();","lastModifiedDate":"2021-09-20"},{"lineNumber":63,"author":{"gitId":"wlren"},"content":"            taskList.addTask(newTask);","lastModifiedDate":"2021-08-28"},{"lineNumber":64,"author":{"gitId":"wlren"},"content":"            return addTaskMsg(newTask);","lastModifiedDate":"2021-09-20"},{"lineNumber":65,"author":{"gitId":"wlren"},"content":"        case Find:","lastModifiedDate":"2021-08-28"},{"lineNumber":66,"author":{"gitId":"wlren"},"content":"            return findMsg(findMatchingTasks());","lastModifiedDate":"2021-09-20"},{"lineNumber":67,"author":{"gitId":"wlren"},"content":"        case Error:","lastModifiedDate":"2021-09-20"},{"lineNumber":68,"author":{"gitId":"wlren"},"content":"            throw new DukeException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2021-09-20"},{"lineNumber":69,"author":{"gitId":"wlren"},"content":"        default:","lastModifiedDate":"2021-09-20"},{"lineNumber":70,"author":{"gitId":"wlren"},"content":"            throw new DukeException(\"Command error encountered, please inform Duke maintainers!\");","lastModifiedDate":"2021-09-20"},{"lineNumber":71,"author":{"gitId":"wlren"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":72,"author":{"gitId":"wlren"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":73,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":74,"author":{"gitId":"wlren"},"content":"    private ArrayList\u003cTask\u003e findMatchingTasks() {","lastModifiedDate":"2021-09-20"},{"lineNumber":75,"author":{"gitId":"wlren"},"content":"        String searchTerm \u003d parser.getSearchTerm();","lastModifiedDate":"2021-09-20"},{"lineNumber":76,"author":{"gitId":"wlren"},"content":"        ArrayList\u003cTask\u003e matchingTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-28"},{"lineNumber":77,"author":{"gitId":"wlren"},"content":"        for (Task task : taskList.getTasks()) {","lastModifiedDate":"2021-08-28"},{"lineNumber":78,"author":{"gitId":"wlren"},"content":"            if (task.description.contains(searchTerm)) {","lastModifiedDate":"2021-09-20"},{"lineNumber":79,"author":{"gitId":"wlren"},"content":"                matchingTasks.add(task);","lastModifiedDate":"2021-08-28"},{"lineNumber":80,"author":{"gitId":"wlren"},"content":"            }","lastModifiedDate":"2021-08-28"},{"lineNumber":81,"author":{"gitId":"wlren"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":82,"author":{"gitId":"wlren"},"content":"        return matchingTasks;","lastModifiedDate":"2021-09-20"},{"lineNumber":83,"author":{"gitId":"wlren"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":84,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":85,"author":{"gitId":"wlren"},"content":"    private String addTaskMsg(Task newTask) {","lastModifiedDate":"2021-09-20"},{"lineNumber":86,"author":{"gitId":"wlren"},"content":"        return \"Got it. I\u0027ve added this task: \\n\" +","lastModifiedDate":"2021-09-20"},{"lineNumber":87,"author":{"gitId":"wlren"},"content":"                newTask.toString() + \"\\n\" +","lastModifiedDate":"2021-09-20"},{"lineNumber":88,"author":{"gitId":"wlren"},"content":"                String.format(\"Now you have %d tasks in the list.%n\", taskList.getListSize());","lastModifiedDate":"2021-09-20"},{"lineNumber":89,"author":{"gitId":"wlren"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":90,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":91,"author":{"gitId":"wlren"},"content":"    private String exitMsg() {","lastModifiedDate":"2021-09-20"},{"lineNumber":92,"author":{"gitId":"wlren"},"content":"        return \" Bye. Hope to see you again soon!\";","lastModifiedDate":"2021-09-20"},{"lineNumber":93,"author":{"gitId":"wlren"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":94,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":95,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":96,"author":{"gitId":"wlren"},"content":"    private String listMsg() {","lastModifiedDate":"2021-09-20"},{"lineNumber":97,"author":{"gitId":"wlren"},"content":"        StringBuilder response \u003d new StringBuilder(\"  Here are the tasks in your list:\\n\");","lastModifiedDate":"2021-09-20"},{"lineNumber":98,"author":{"gitId":"wlren"},"content":"        for (int i \u003d 1; i \u003c taskList.getListSize() + 1; i++) {","lastModifiedDate":"2021-08-28"},{"lineNumber":99,"author":{"gitId":"wlren"},"content":"            response.append(String.format(\"  %d. %s%n\", i, taskList.getTaskString(i - 1)));","lastModifiedDate":"2021-09-20"},{"lineNumber":100,"author":{"gitId":"wlren"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":101,"author":{"gitId":"wlren"},"content":"        return response.toString();","lastModifiedDate":"2021-09-20"},{"lineNumber":102,"author":{"gitId":"wlren"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":103,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":104,"author":{"gitId":"wlren"},"content":"    private String findMsg(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2021-09-20"},{"lineNumber":105,"author":{"gitId":"wlren"},"content":"        StringBuilder response \u003d new StringBuilder(\"  Here are the matching tasks in your list:\\n\");","lastModifiedDate":"2021-09-20"},{"lineNumber":106,"author":{"gitId":"wlren"},"content":"        for (int i \u003d 1; i \u003c tasks.size() + 1; i++) {","lastModifiedDate":"2021-08-28"},{"lineNumber":107,"author":{"gitId":"wlren"},"content":"            response.append(String.format(\"  %d. %s%n\", i, tasks.get(i - 1).toString()));","lastModifiedDate":"2021-09-20"},{"lineNumber":108,"author":{"gitId":"wlren"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":109,"author":{"gitId":"wlren"},"content":"        return response.toString();","lastModifiedDate":"2021-09-20"},{"lineNumber":110,"author":{"gitId":"wlren"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":111,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":112,"author":{"gitId":"wlren"},"content":"    private String deleteMsg(int index) {","lastModifiedDate":"2021-09-20"},{"lineNumber":113,"author":{"gitId":"wlren"},"content":"        return \"  Noted. I\u0027ve removed this task:\\n\" +","lastModifiedDate":"2021-09-20"},{"lineNumber":114,"author":{"gitId":"wlren"},"content":"                \"\\n\" + taskList.getTaskString(index) + \"\\n\" +","lastModifiedDate":"2021-09-20"},{"lineNumber":115,"author":{"gitId":"wlren"},"content":"                String.format(\"Now you have %d tasks in the list.%n\", taskList.getListSize() - 1);","lastModifiedDate":"2021-09-20"},{"lineNumber":116,"author":{"gitId":"wlren"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":117,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":118,"author":{"gitId":"wlren"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"wlren":118}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"wlren"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-09-20"},{"lineNumber":2,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":3,"author":{"gitId":"wlren"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2021-09-20"},{"lineNumber":4,"author":{"gitId":"wlren"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-09-20"},{"lineNumber":5,"author":{"gitId":"wlren"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2021-09-20"},{"lineNumber":6,"author":{"gitId":"wlren"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-09-20"},{"lineNumber":7,"author":{"gitId":"wlren"},"content":"\u003c?import javafx.scene.text.Font?\u003e","lastModifiedDate":"2021-09-20"},{"lineNumber":8,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":9,"author":{"gitId":"wlren"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"Infinity\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\"","lastModifiedDate":"2021-09-20"},{"lineNumber":10,"author":{"gitId":"wlren"},"content":"         type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-09-20"},{"lineNumber":11,"author":{"gitId":"wlren"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2021-09-20"},{"lineNumber":12,"author":{"gitId":"wlren"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\"/\u003e","lastModifiedDate":"2021-09-20"},{"lineNumber":13,"author":{"gitId":"wlren"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2021-09-20"},{"lineNumber":14,"author":{"gitId":"wlren"},"content":"    \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" maxHeight\u003d\"Infinity\" wrapText\u003d\"true\"\u003e","lastModifiedDate":"2021-09-20"},{"lineNumber":15,"author":{"gitId":"wlren"},"content":"        \u003cfont\u003e","lastModifiedDate":"2021-09-20"},{"lineNumber":16,"author":{"gitId":"wlren"},"content":"            \u003cFont name\u003d\"Roboto Mono Light for Powerline\" size\u003d\"13.0\"/\u003e","lastModifiedDate":"2021-09-20"},{"lineNumber":17,"author":{"gitId":"wlren"},"content":"        \u003c/font\u003e","lastModifiedDate":"2021-09-20"},{"lineNumber":18,"author":{"gitId":"wlren"},"content":"    \u003c/Label\u003e","lastModifiedDate":"2021-09-20"},{"lineNumber":19,"author":{"gitId":"wlren"},"content":"    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"/\u003e","lastModifiedDate":"2021-09-20"},{"lineNumber":20,"author":{"gitId":"wlren"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2021-09-20"}],"authorContributionMap":{"wlren":20}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"wlren"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-09-20"},{"lineNumber":2,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":3,"author":{"gitId":"wlren"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2021-09-20"},{"lineNumber":4,"author":{"gitId":"wlren"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2021-09-20"},{"lineNumber":5,"author":{"gitId":"wlren"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2021-09-20"},{"lineNumber":6,"author":{"gitId":"wlren"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2021-09-20"},{"lineNumber":7,"author":{"gitId":"wlren"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-09-20"},{"lineNumber":8,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":9,"author":{"gitId":"wlren"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\"","lastModifiedDate":"2021-09-20"},{"lineNumber":10,"author":{"gitId":"wlren"},"content":"            prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"","lastModifiedDate":"2021-09-20"},{"lineNumber":11,"author":{"gitId":"wlren"},"content":"            fx:controller\u003d\"duke.MainWindow\"\u003e","lastModifiedDate":"2021-09-20"},{"lineNumber":12,"author":{"gitId":"wlren"},"content":"    \u003cTextField fx:id\u003d\"userInput\" layoutX\u003d\"7.0\" layoutY\u003d\"561.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"35.0\"","lastModifiedDate":"2021-09-20"},{"lineNumber":13,"author":{"gitId":"wlren"},"content":"               prefWidth\u003d\"310.0\" AnchorPane.bottomAnchor\u003d\"4.0\"/\u003e","lastModifiedDate":"2021-09-20"},{"lineNumber":14,"author":{"gitId":"wlren"},"content":"    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"323.0\" layoutY\u003d\"561.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\"","lastModifiedDate":"2021-09-20"},{"lineNumber":15,"author":{"gitId":"wlren"},"content":"            prefHeight\u003d\"35.0\" prefWidth\u003d\"70.0\" text\u003d\"Send\"/\u003e","lastModifiedDate":"2021-09-20"},{"lineNumber":16,"author":{"gitId":"wlren"},"content":"    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2021-09-20"},{"lineNumber":17,"author":{"gitId":"wlren"},"content":"        \u003cVBox fx:id\u003d\"dialogContainer\" maxHeight\u003d\"Infinity\" prefWidth\u003d\"388.0\"/\u003e","lastModifiedDate":"2021-09-20"},{"lineNumber":18,"author":{"gitId":"wlren"},"content":"    \u003c/ScrollPane\u003e","lastModifiedDate":"2021-09-20"},{"lineNumber":19,"author":{"gitId":"wlren"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2021-09-20"}],"authorContributionMap":{"wlren":19}},{"path":"src/test/java/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wlren"},"content":"import duke.Duke;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"wlren"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"wlren"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"wlren"},"content":"import java.lang.reflect.Field;","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"wlren"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"wlren"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"wlren"},"content":"public class DukeTest {","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"wlren"},"content":"    @Test","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"wlren"},"content":"    public void testTaskListMax() throws NoSuchFieldException, IllegalAccessException {","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"wlren"},"content":"        Duke duke \u003d new Duke();","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"wlren"},"content":"        Field taskListField \u003d Duke.class.getDeclaredField(\"taskList\");","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"wlren"},"content":"        taskListField.setAccessible(true);","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"wlren"},"content":"        TaskList taskList \u003d (TaskList) taskListField.get(duke);","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"wlren"},"content":"        Field arrayField \u003d ArrayList.class.getDeclaredField(\"elementData\");","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"wlren"},"content":"        arrayField.setAccessible(true);","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"wlren"},"content":"        Object[] internalArray \u003d (Object[])arrayField.get(taskList.getTasks());","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"wlren"},"content":"        assertEquals(100, internalArray.length);","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"wlren"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"wlren"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"wlren":26}},{"path":"src/test/java/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wlren"},"content":"import duke.Task;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"wlren"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"wlren"},"content":"import duke.ToDo;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"wlren"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"wlren"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"wlren"},"content":"public class TaskListTest {","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"wlren"},"content":"    @Test","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"wlren"},"content":"    public void testAddTask() {","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"wlren"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"wlren"},"content":"        Task newTask \u003d new ToDo(\"TEST ADD TASK\", false);","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"wlren"},"content":"        taskList.addTask(newTask);","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"wlren"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"wlren"},"content":"        assertEquals(\"[T][ ] TEST ADD TASK\", taskList.getTasks().get(0).toString());","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"wlren"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"wlren"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"wlren":18}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"wlren"},"content":"todo individual project","lastModifiedDate":"2021-08-19"},{"lineNumber":2,"author":{"gitId":"wlren"},"content":"event meaningful event /at sometime in my life","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"wlren"},"content":"deadline get a life /by hopefully tomorrow","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"wlren"},"content":"done 1","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"wlren"},"content":"delete 1","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"wlren"},"content":"bye","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"wlren":6}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"wlren"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"wlren":1,"-":20}}]
